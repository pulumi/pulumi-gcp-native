// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
type AggregateClassificationMetricsResponse struct {
	// Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.
	Accuracy float64 `pulumi:"accuracy"`
	// The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.
	F1Score float64 `pulumi:"f1Score"`
	// Logarithmic Loss. For multiclass this is a macro-averaged metric.
	LogLoss float64 `pulumi:"logLoss"`
	// Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.
	Precision float64 `pulumi:"precision"`
	// Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.
	Recall float64 `pulumi:"recall"`
	// Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
	RocAuc float64 `pulumi:"rocAuc"`
	// Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.
	Threshold float64 `pulumi:"threshold"`
}

// Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
type AggregateClassificationMetricsResponseOutput struct{ *pulumi.OutputState }

func (AggregateClassificationMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateClassificationMetricsResponse)(nil)).Elem()
}

func (o AggregateClassificationMetricsResponseOutput) ToAggregateClassificationMetricsResponseOutput() AggregateClassificationMetricsResponseOutput {
	return o
}

func (o AggregateClassificationMetricsResponseOutput) ToAggregateClassificationMetricsResponseOutputWithContext(ctx context.Context) AggregateClassificationMetricsResponseOutput {
	return o
}

// Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.
func (o AggregateClassificationMetricsResponseOutput) Accuracy() pulumi.Float64Output {
	return o.ApplyT(func(v AggregateClassificationMetricsResponse) float64 { return v.Accuracy }).(pulumi.Float64Output)
}

// The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.
func (o AggregateClassificationMetricsResponseOutput) F1Score() pulumi.Float64Output {
	return o.ApplyT(func(v AggregateClassificationMetricsResponse) float64 { return v.F1Score }).(pulumi.Float64Output)
}

// Logarithmic Loss. For multiclass this is a macro-averaged metric.
func (o AggregateClassificationMetricsResponseOutput) LogLoss() pulumi.Float64Output {
	return o.ApplyT(func(v AggregateClassificationMetricsResponse) float64 { return v.LogLoss }).(pulumi.Float64Output)
}

// Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.
func (o AggregateClassificationMetricsResponseOutput) Precision() pulumi.Float64Output {
	return o.ApplyT(func(v AggregateClassificationMetricsResponse) float64 { return v.Precision }).(pulumi.Float64Output)
}

// Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.
func (o AggregateClassificationMetricsResponseOutput) Recall() pulumi.Float64Output {
	return o.ApplyT(func(v AggregateClassificationMetricsResponse) float64 { return v.Recall }).(pulumi.Float64Output)
}

// Area Under a ROC Curve. For multiclass this is a macro-averaged metric.
func (o AggregateClassificationMetricsResponseOutput) RocAuc() pulumi.Float64Output {
	return o.ApplyT(func(v AggregateClassificationMetricsResponse) float64 { return v.RocAuc }).(pulumi.Float64Output)
}

// Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.
func (o AggregateClassificationMetricsResponseOutput) Threshold() pulumi.Float64Output {
	return o.ApplyT(func(v AggregateClassificationMetricsResponse) float64 { return v.Threshold }).(pulumi.Float64Output)
}

// Represents privacy policy associated with "aggregation threshold" method.
type AggregationThresholdPolicy struct {
	// Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
	PrivacyUnitColumns []string `pulumi:"privacyUnitColumns"`
	// Optional. The threshold for the "aggregation threshold" policy.
	Threshold *string `pulumi:"threshold"`
}

// AggregationThresholdPolicyInput is an input type that accepts AggregationThresholdPolicyArgs and AggregationThresholdPolicyOutput values.
// You can construct a concrete instance of `AggregationThresholdPolicyInput` via:
//
//	AggregationThresholdPolicyArgs{...}
type AggregationThresholdPolicyInput interface {
	pulumi.Input

	ToAggregationThresholdPolicyOutput() AggregationThresholdPolicyOutput
	ToAggregationThresholdPolicyOutputWithContext(context.Context) AggregationThresholdPolicyOutput
}

// Represents privacy policy associated with "aggregation threshold" method.
type AggregationThresholdPolicyArgs struct {
	// Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
	PrivacyUnitColumns pulumi.StringArrayInput `pulumi:"privacyUnitColumns"`
	// Optional. The threshold for the "aggregation threshold" policy.
	Threshold pulumi.StringPtrInput `pulumi:"threshold"`
}

func (AggregationThresholdPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationThresholdPolicy)(nil)).Elem()
}

func (i AggregationThresholdPolicyArgs) ToAggregationThresholdPolicyOutput() AggregationThresholdPolicyOutput {
	return i.ToAggregationThresholdPolicyOutputWithContext(context.Background())
}

func (i AggregationThresholdPolicyArgs) ToAggregationThresholdPolicyOutputWithContext(ctx context.Context) AggregationThresholdPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationThresholdPolicyOutput)
}

func (i AggregationThresholdPolicyArgs) ToAggregationThresholdPolicyPtrOutput() AggregationThresholdPolicyPtrOutput {
	return i.ToAggregationThresholdPolicyPtrOutputWithContext(context.Background())
}

func (i AggregationThresholdPolicyArgs) ToAggregationThresholdPolicyPtrOutputWithContext(ctx context.Context) AggregationThresholdPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationThresholdPolicyOutput).ToAggregationThresholdPolicyPtrOutputWithContext(ctx)
}

// AggregationThresholdPolicyPtrInput is an input type that accepts AggregationThresholdPolicyArgs, AggregationThresholdPolicyPtr and AggregationThresholdPolicyPtrOutput values.
// You can construct a concrete instance of `AggregationThresholdPolicyPtrInput` via:
//
//	        AggregationThresholdPolicyArgs{...}
//
//	or:
//
//	        nil
type AggregationThresholdPolicyPtrInput interface {
	pulumi.Input

	ToAggregationThresholdPolicyPtrOutput() AggregationThresholdPolicyPtrOutput
	ToAggregationThresholdPolicyPtrOutputWithContext(context.Context) AggregationThresholdPolicyPtrOutput
}

type aggregationThresholdPolicyPtrType AggregationThresholdPolicyArgs

func AggregationThresholdPolicyPtr(v *AggregationThresholdPolicyArgs) AggregationThresholdPolicyPtrInput {
	return (*aggregationThresholdPolicyPtrType)(v)
}

func (*aggregationThresholdPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationThresholdPolicy)(nil)).Elem()
}

func (i *aggregationThresholdPolicyPtrType) ToAggregationThresholdPolicyPtrOutput() AggregationThresholdPolicyPtrOutput {
	return i.ToAggregationThresholdPolicyPtrOutputWithContext(context.Background())
}

func (i *aggregationThresholdPolicyPtrType) ToAggregationThresholdPolicyPtrOutputWithContext(ctx context.Context) AggregationThresholdPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AggregationThresholdPolicyPtrOutput)
}

// Represents privacy policy associated with "aggregation threshold" method.
type AggregationThresholdPolicyOutput struct{ *pulumi.OutputState }

func (AggregationThresholdPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationThresholdPolicy)(nil)).Elem()
}

func (o AggregationThresholdPolicyOutput) ToAggregationThresholdPolicyOutput() AggregationThresholdPolicyOutput {
	return o
}

func (o AggregationThresholdPolicyOutput) ToAggregationThresholdPolicyOutputWithContext(ctx context.Context) AggregationThresholdPolicyOutput {
	return o
}

func (o AggregationThresholdPolicyOutput) ToAggregationThresholdPolicyPtrOutput() AggregationThresholdPolicyPtrOutput {
	return o.ToAggregationThresholdPolicyPtrOutputWithContext(context.Background())
}

func (o AggregationThresholdPolicyOutput) ToAggregationThresholdPolicyPtrOutputWithContext(ctx context.Context) AggregationThresholdPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AggregationThresholdPolicy) *AggregationThresholdPolicy {
		return &v
	}).(AggregationThresholdPolicyPtrOutput)
}

// Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
func (o AggregationThresholdPolicyOutput) PrivacyUnitColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AggregationThresholdPolicy) []string { return v.PrivacyUnitColumns }).(pulumi.StringArrayOutput)
}

// Optional. The threshold for the "aggregation threshold" policy.
func (o AggregationThresholdPolicyOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AggregationThresholdPolicy) *string { return v.Threshold }).(pulumi.StringPtrOutput)
}

type AggregationThresholdPolicyPtrOutput struct{ *pulumi.OutputState }

func (AggregationThresholdPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AggregationThresholdPolicy)(nil)).Elem()
}

func (o AggregationThresholdPolicyPtrOutput) ToAggregationThresholdPolicyPtrOutput() AggregationThresholdPolicyPtrOutput {
	return o
}

func (o AggregationThresholdPolicyPtrOutput) ToAggregationThresholdPolicyPtrOutputWithContext(ctx context.Context) AggregationThresholdPolicyPtrOutput {
	return o
}

func (o AggregationThresholdPolicyPtrOutput) Elem() AggregationThresholdPolicyOutput {
	return o.ApplyT(func(v *AggregationThresholdPolicy) AggregationThresholdPolicy {
		if v != nil {
			return *v
		}
		var ret AggregationThresholdPolicy
		return ret
	}).(AggregationThresholdPolicyOutput)
}

// Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
func (o AggregationThresholdPolicyPtrOutput) PrivacyUnitColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AggregationThresholdPolicy) []string {
		if v == nil {
			return nil
		}
		return v.PrivacyUnitColumns
	}).(pulumi.StringArrayOutput)
}

// Optional. The threshold for the "aggregation threshold" policy.
func (o AggregationThresholdPolicyPtrOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AggregationThresholdPolicy) *string {
		if v == nil {
			return nil
		}
		return v.Threshold
	}).(pulumi.StringPtrOutput)
}

// Represents privacy policy associated with "aggregation threshold" method.
type AggregationThresholdPolicyResponse struct {
	// Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
	PrivacyUnitColumns []string `pulumi:"privacyUnitColumns"`
	// Optional. The threshold for the "aggregation threshold" policy.
	Threshold string `pulumi:"threshold"`
}

// Represents privacy policy associated with "aggregation threshold" method.
type AggregationThresholdPolicyResponseOutput struct{ *pulumi.OutputState }

func (AggregationThresholdPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregationThresholdPolicyResponse)(nil)).Elem()
}

func (o AggregationThresholdPolicyResponseOutput) ToAggregationThresholdPolicyResponseOutput() AggregationThresholdPolicyResponseOutput {
	return o
}

func (o AggregationThresholdPolicyResponseOutput) ToAggregationThresholdPolicyResponseOutputWithContext(ctx context.Context) AggregationThresholdPolicyResponseOutput {
	return o
}

// Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation ("outer.inner")
func (o AggregationThresholdPolicyResponseOutput) PrivacyUnitColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AggregationThresholdPolicyResponse) []string { return v.PrivacyUnitColumns }).(pulumi.StringArrayOutput)
}

// Optional. The threshold for the "aggregation threshold" policy.
func (o AggregationThresholdPolicyResponseOutput) Threshold() pulumi.StringOutput {
	return o.ApplyT(func(v AggregationThresholdPolicyResponse) string { return v.Threshold }).(pulumi.StringOutput)
}

// Input/output argument of a function or a stored procedure.
type Argument struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind *ArgumentArgumentKind `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType *StandardSqlDataType `pulumi:"dataType"`
	// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
	IsAggregate *bool `pulumi:"isAggregate"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode *ArgumentMode `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name *string `pulumi:"name"`
}

// ArgumentInput is an input type that accepts ArgumentArgs and ArgumentOutput values.
// You can construct a concrete instance of `ArgumentInput` via:
//
//	ArgumentArgs{...}
type ArgumentInput interface {
	pulumi.Input

	ToArgumentOutput() ArgumentOutput
	ToArgumentOutputWithContext(context.Context) ArgumentOutput
}

// Input/output argument of a function or a stored procedure.
type ArgumentArgs struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind ArgumentArgumentKindPtrInput `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType StandardSqlDataTypePtrInput `pulumi:"dataType"`
	// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
	IsAggregate pulumi.BoolPtrInput `pulumi:"isAggregate"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode ArgumentModePtrInput `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (i ArgumentArgs) ToArgumentOutput() ArgumentOutput {
	return i.ToArgumentOutputWithContext(context.Background())
}

func (i ArgumentArgs) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentOutput)
}

// ArgumentArrayInput is an input type that accepts ArgumentArray and ArgumentArrayOutput values.
// You can construct a concrete instance of `ArgumentArrayInput` via:
//
//	ArgumentArray{ ArgumentArgs{...} }
type ArgumentArrayInput interface {
	pulumi.Input

	ToArgumentArrayOutput() ArgumentArrayOutput
	ToArgumentArrayOutputWithContext(context.Context) ArgumentArrayOutput
}

type ArgumentArray []ArgumentInput

func (ArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (i ArgumentArray) ToArgumentArrayOutput() ArgumentArrayOutput {
	return i.ToArgumentArrayOutputWithContext(context.Background())
}

func (i ArgumentArray) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentArrayOutput)
}

// Input/output argument of a function or a stored procedure.
type ArgumentOutput struct{ *pulumi.OutputState }

func (ArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (o ArgumentOutput) ToArgumentOutput() ArgumentOutput {
	return o
}

func (o ArgumentOutput) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return o
}

// Optional. Defaults to FIXED_TYPE.
func (o ArgumentOutput) ArgumentKind() ArgumentArgumentKindPtrOutput {
	return o.ApplyT(func(v Argument) *ArgumentArgumentKind { return v.ArgumentKind }).(ArgumentArgumentKindPtrOutput)
}

// Required unless argument_kind = ANY_TYPE.
func (o ArgumentOutput) DataType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v Argument) *StandardSqlDataType { return v.DataType }).(StandardSqlDataTypePtrOutput)
}

// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
func (o ArgumentOutput) IsAggregate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Argument) *bool { return v.IsAggregate }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
func (o ArgumentOutput) Mode() ArgumentModePtrOutput {
	return o.ApplyT(func(v Argument) *ArgumentMode { return v.Mode }).(ArgumentModePtrOutput)
}

// Optional. The name of this argument. Can be absent for function return argument.
func (o ArgumentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Argument) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ArgumentArrayOutput struct{ *pulumi.OutputState }

func (ArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (o ArgumentArrayOutput) ToArgumentArrayOutput() ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) Index(i pulumi.IntInput) ArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Argument {
		return vs[0].([]Argument)[vs[1].(int)]
	}).(ArgumentOutput)
}

// Input/output argument of a function or a stored procedure.
type ArgumentResponse struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind string `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType StandardSqlDataTypeResponse `pulumi:"dataType"`
	// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
	IsAggregate bool `pulumi:"isAggregate"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode string `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name string `pulumi:"name"`
}

// Input/output argument of a function or a stored procedure.
type ArgumentResponseOutput struct{ *pulumi.OutputState }

func (ArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgumentResponse)(nil)).Elem()
}

func (o ArgumentResponseOutput) ToArgumentResponseOutput() ArgumentResponseOutput {
	return o
}

func (o ArgumentResponseOutput) ToArgumentResponseOutputWithContext(ctx context.Context) ArgumentResponseOutput {
	return o
}

// Optional. Defaults to FIXED_TYPE.
func (o ArgumentResponseOutput) ArgumentKind() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.ArgumentKind }).(pulumi.StringOutput)
}

// Required unless argument_kind = ANY_TYPE.
func (o ArgumentResponseOutput) DataType() StandardSqlDataTypeResponseOutput {
	return o.ApplyT(func(v ArgumentResponse) StandardSqlDataTypeResponse { return v.DataType }).(StandardSqlDataTypeResponseOutput)
}

// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
func (o ArgumentResponseOutput) IsAggregate() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgumentResponse) bool { return v.IsAggregate }).(pulumi.BoolOutput)
}

// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
func (o ArgumentResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Optional. The name of this argument. Can be absent for function return argument.
func (o ArgumentResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (ArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgumentResponse)(nil)).Elem()
}

func (o ArgumentResponseArrayOutput) ToArgumentResponseArrayOutput() ArgumentResponseArrayOutput {
	return o
}

func (o ArgumentResponseArrayOutput) ToArgumentResponseArrayOutputWithContext(ctx context.Context) ArgumentResponseArrayOutput {
	return o
}

func (o ArgumentResponseArrayOutput) Index(i pulumi.IntInput) ArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgumentResponse {
		return vs[0].([]ArgumentResponse)[vs[1].(int)]
	}).(ArgumentResponseOutput)
}

// Arima coefficients.
type ArimaCoefficientsResponse struct {
	// Auto-regressive coefficients, an array of double.
	AutoRegressiveCoefficients []float64 `pulumi:"autoRegressiveCoefficients"`
	// Intercept coefficient, just a double not an array.
	InterceptCoefficient float64 `pulumi:"interceptCoefficient"`
	// Moving-average coefficients, an array of double.
	MovingAverageCoefficients []float64 `pulumi:"movingAverageCoefficients"`
}

// Arima coefficients.
type ArimaCoefficientsResponseOutput struct{ *pulumi.OutputState }

func (ArimaCoefficientsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArimaCoefficientsResponse)(nil)).Elem()
}

func (o ArimaCoefficientsResponseOutput) ToArimaCoefficientsResponseOutput() ArimaCoefficientsResponseOutput {
	return o
}

func (o ArimaCoefficientsResponseOutput) ToArimaCoefficientsResponseOutputWithContext(ctx context.Context) ArimaCoefficientsResponseOutput {
	return o
}

// Auto-regressive coefficients, an array of double.
func (o ArimaCoefficientsResponseOutput) AutoRegressiveCoefficients() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v ArimaCoefficientsResponse) []float64 { return v.AutoRegressiveCoefficients }).(pulumi.Float64ArrayOutput)
}

// Intercept coefficient, just a double not an array.
func (o ArimaCoefficientsResponseOutput) InterceptCoefficient() pulumi.Float64Output {
	return o.ApplyT(func(v ArimaCoefficientsResponse) float64 { return v.InterceptCoefficient }).(pulumi.Float64Output)
}

// Moving-average coefficients, an array of double.
func (o ArimaCoefficientsResponseOutput) MovingAverageCoefficients() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v ArimaCoefficientsResponse) []float64 { return v.MovingAverageCoefficients }).(pulumi.Float64ArrayOutput)
}

// ARIMA model fitting metrics.
type ArimaFittingMetricsResponse struct {
	// AIC.
	Aic float64 `pulumi:"aic"`
	// Log-likelihood.
	LogLikelihood float64 `pulumi:"logLikelihood"`
	// Variance.
	Variance float64 `pulumi:"variance"`
}

// ARIMA model fitting metrics.
type ArimaFittingMetricsResponseOutput struct{ *pulumi.OutputState }

func (ArimaFittingMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArimaFittingMetricsResponse)(nil)).Elem()
}

func (o ArimaFittingMetricsResponseOutput) ToArimaFittingMetricsResponseOutput() ArimaFittingMetricsResponseOutput {
	return o
}

func (o ArimaFittingMetricsResponseOutput) ToArimaFittingMetricsResponseOutputWithContext(ctx context.Context) ArimaFittingMetricsResponseOutput {
	return o
}

// AIC.
func (o ArimaFittingMetricsResponseOutput) Aic() pulumi.Float64Output {
	return o.ApplyT(func(v ArimaFittingMetricsResponse) float64 { return v.Aic }).(pulumi.Float64Output)
}

// Log-likelihood.
func (o ArimaFittingMetricsResponseOutput) LogLikelihood() pulumi.Float64Output {
	return o.ApplyT(func(v ArimaFittingMetricsResponse) float64 { return v.LogLikelihood }).(pulumi.Float64Output)
}

// Variance.
func (o ArimaFittingMetricsResponseOutput) Variance() pulumi.Float64Output {
	return o.ApplyT(func(v ArimaFittingMetricsResponse) float64 { return v.Variance }).(pulumi.Float64Output)
}

type ArimaFittingMetricsResponseArrayOutput struct{ *pulumi.OutputState }

func (ArimaFittingMetricsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArimaFittingMetricsResponse)(nil)).Elem()
}

func (o ArimaFittingMetricsResponseArrayOutput) ToArimaFittingMetricsResponseArrayOutput() ArimaFittingMetricsResponseArrayOutput {
	return o
}

func (o ArimaFittingMetricsResponseArrayOutput) ToArimaFittingMetricsResponseArrayOutputWithContext(ctx context.Context) ArimaFittingMetricsResponseArrayOutput {
	return o
}

func (o ArimaFittingMetricsResponseArrayOutput) Index(i pulumi.IntInput) ArimaFittingMetricsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArimaFittingMetricsResponse {
		return vs[0].([]ArimaFittingMetricsResponse)[vs[1].(int)]
	}).(ArimaFittingMetricsResponseOutput)
}

// Model evaluation metrics for ARIMA forecasting models.
type ArimaForecastingMetricsResponse struct {
	// Arima model fitting metrics.
	ArimaFittingMetrics []ArimaFittingMetricsResponse `pulumi:"arimaFittingMetrics"`
	// Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
	ArimaSingleModelForecastingMetrics []ArimaSingleModelForecastingMetricsResponse `pulumi:"arimaSingleModelForecastingMetrics"`
	// Whether Arima model fitted with drift or not. It is always false when d is not 1.
	HasDrift []bool `pulumi:"hasDrift"`
	// Non-seasonal order.
	NonSeasonalOrder []ArimaOrderResponse `pulumi:"nonSeasonalOrder"`
	// Seasonal periods. Repeated because multiple periods are supported for one time series.
	SeasonalPeriods []string `pulumi:"seasonalPeriods"`
	// Id to differentiate different time series for the large-scale case.
	TimeSeriesId []string `pulumi:"timeSeriesId"`
}

// Model evaluation metrics for ARIMA forecasting models.
type ArimaForecastingMetricsResponseOutput struct{ *pulumi.OutputState }

func (ArimaForecastingMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArimaForecastingMetricsResponse)(nil)).Elem()
}

func (o ArimaForecastingMetricsResponseOutput) ToArimaForecastingMetricsResponseOutput() ArimaForecastingMetricsResponseOutput {
	return o
}

func (o ArimaForecastingMetricsResponseOutput) ToArimaForecastingMetricsResponseOutputWithContext(ctx context.Context) ArimaForecastingMetricsResponseOutput {
	return o
}

// Arima model fitting metrics.
func (o ArimaForecastingMetricsResponseOutput) ArimaFittingMetrics() ArimaFittingMetricsResponseArrayOutput {
	return o.ApplyT(func(v ArimaForecastingMetricsResponse) []ArimaFittingMetricsResponse { return v.ArimaFittingMetrics }).(ArimaFittingMetricsResponseArrayOutput)
}

// Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case.
func (o ArimaForecastingMetricsResponseOutput) ArimaSingleModelForecastingMetrics() ArimaSingleModelForecastingMetricsResponseArrayOutput {
	return o.ApplyT(func(v ArimaForecastingMetricsResponse) []ArimaSingleModelForecastingMetricsResponse {
		return v.ArimaSingleModelForecastingMetrics
	}).(ArimaSingleModelForecastingMetricsResponseArrayOutput)
}

// Whether Arima model fitted with drift or not. It is always false when d is not 1.
func (o ArimaForecastingMetricsResponseOutput) HasDrift() pulumi.BoolArrayOutput {
	return o.ApplyT(func(v ArimaForecastingMetricsResponse) []bool { return v.HasDrift }).(pulumi.BoolArrayOutput)
}

// Non-seasonal order.
func (o ArimaForecastingMetricsResponseOutput) NonSeasonalOrder() ArimaOrderResponseArrayOutput {
	return o.ApplyT(func(v ArimaForecastingMetricsResponse) []ArimaOrderResponse { return v.NonSeasonalOrder }).(ArimaOrderResponseArrayOutput)
}

// Seasonal periods. Repeated because multiple periods are supported for one time series.
func (o ArimaForecastingMetricsResponseOutput) SeasonalPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArimaForecastingMetricsResponse) []string { return v.SeasonalPeriods }).(pulumi.StringArrayOutput)
}

// Id to differentiate different time series for the large-scale case.
func (o ArimaForecastingMetricsResponseOutput) TimeSeriesId() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArimaForecastingMetricsResponse) []string { return v.TimeSeriesId }).(pulumi.StringArrayOutput)
}

// Arima model information.
type ArimaModelInfoResponse struct {
	// Arima coefficients.
	ArimaCoefficients ArimaCoefficientsResponse `pulumi:"arimaCoefficients"`
	// Arima fitting metrics.
	ArimaFittingMetrics ArimaFittingMetricsResponse `pulumi:"arimaFittingMetrics"`
	// Whether Arima model fitted with drift or not. It is always false when d is not 1.
	HasDrift bool `pulumi:"hasDrift"`
	// If true, holiday_effect is a part of time series decomposition result.
	HasHolidayEffect bool `pulumi:"hasHolidayEffect"`
	// If true, spikes_and_dips is a part of time series decomposition result.
	HasSpikesAndDips bool `pulumi:"hasSpikesAndDips"`
	// If true, step_changes is a part of time series decomposition result.
	HasStepChanges bool `pulumi:"hasStepChanges"`
	// Non-seasonal order.
	NonSeasonalOrder ArimaOrderResponse `pulumi:"nonSeasonalOrder"`
	// Seasonal periods. Repeated because multiple periods are supported for one time series.
	SeasonalPeriods []string `pulumi:"seasonalPeriods"`
	// The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
	TimeSeriesId string `pulumi:"timeSeriesId"`
	// The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
	TimeSeriesIds []string `pulumi:"timeSeriesIds"`
}

// Arima model information.
type ArimaModelInfoResponseOutput struct{ *pulumi.OutputState }

func (ArimaModelInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArimaModelInfoResponse)(nil)).Elem()
}

func (o ArimaModelInfoResponseOutput) ToArimaModelInfoResponseOutput() ArimaModelInfoResponseOutput {
	return o
}

func (o ArimaModelInfoResponseOutput) ToArimaModelInfoResponseOutputWithContext(ctx context.Context) ArimaModelInfoResponseOutput {
	return o
}

// Arima coefficients.
func (o ArimaModelInfoResponseOutput) ArimaCoefficients() ArimaCoefficientsResponseOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) ArimaCoefficientsResponse { return v.ArimaCoefficients }).(ArimaCoefficientsResponseOutput)
}

// Arima fitting metrics.
func (o ArimaModelInfoResponseOutput) ArimaFittingMetrics() ArimaFittingMetricsResponseOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) ArimaFittingMetricsResponse { return v.ArimaFittingMetrics }).(ArimaFittingMetricsResponseOutput)
}

// Whether Arima model fitted with drift or not. It is always false when d is not 1.
func (o ArimaModelInfoResponseOutput) HasDrift() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) bool { return v.HasDrift }).(pulumi.BoolOutput)
}

// If true, holiday_effect is a part of time series decomposition result.
func (o ArimaModelInfoResponseOutput) HasHolidayEffect() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) bool { return v.HasHolidayEffect }).(pulumi.BoolOutput)
}

// If true, spikes_and_dips is a part of time series decomposition result.
func (o ArimaModelInfoResponseOutput) HasSpikesAndDips() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) bool { return v.HasSpikesAndDips }).(pulumi.BoolOutput)
}

// If true, step_changes is a part of time series decomposition result.
func (o ArimaModelInfoResponseOutput) HasStepChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) bool { return v.HasStepChanges }).(pulumi.BoolOutput)
}

// Non-seasonal order.
func (o ArimaModelInfoResponseOutput) NonSeasonalOrder() ArimaOrderResponseOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) ArimaOrderResponse { return v.NonSeasonalOrder }).(ArimaOrderResponseOutput)
}

// Seasonal periods. Repeated because multiple periods are supported for one time series.
func (o ArimaModelInfoResponseOutput) SeasonalPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) []string { return v.SeasonalPeriods }).(pulumi.StringArrayOutput)
}

// The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
func (o ArimaModelInfoResponseOutput) TimeSeriesId() pulumi.StringOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) string { return v.TimeSeriesId }).(pulumi.StringOutput)
}

// The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
func (o ArimaModelInfoResponseOutput) TimeSeriesIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArimaModelInfoResponse) []string { return v.TimeSeriesIds }).(pulumi.StringArrayOutput)
}

type ArimaModelInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ArimaModelInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArimaModelInfoResponse)(nil)).Elem()
}

func (o ArimaModelInfoResponseArrayOutput) ToArimaModelInfoResponseArrayOutput() ArimaModelInfoResponseArrayOutput {
	return o
}

func (o ArimaModelInfoResponseArrayOutput) ToArimaModelInfoResponseArrayOutputWithContext(ctx context.Context) ArimaModelInfoResponseArrayOutput {
	return o
}

func (o ArimaModelInfoResponseArrayOutput) Index(i pulumi.IntInput) ArimaModelInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArimaModelInfoResponse {
		return vs[0].([]ArimaModelInfoResponse)[vs[1].(int)]
	}).(ArimaModelInfoResponseOutput)
}

// Arima order, can be used for both non-seasonal and seasonal parts.
type ArimaOrderResponse struct {
	// Order of the differencing part.
	D string `pulumi:"d"`
	// Order of the autoregressive part.
	P string `pulumi:"p"`
	// Order of the moving-average part.
	Q string `pulumi:"q"`
}

// Arima order, can be used for both non-seasonal and seasonal parts.
type ArimaOrderResponseOutput struct{ *pulumi.OutputState }

func (ArimaOrderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArimaOrderResponse)(nil)).Elem()
}

func (o ArimaOrderResponseOutput) ToArimaOrderResponseOutput() ArimaOrderResponseOutput {
	return o
}

func (o ArimaOrderResponseOutput) ToArimaOrderResponseOutputWithContext(ctx context.Context) ArimaOrderResponseOutput {
	return o
}

// Order of the differencing part.
func (o ArimaOrderResponseOutput) D() pulumi.StringOutput {
	return o.ApplyT(func(v ArimaOrderResponse) string { return v.D }).(pulumi.StringOutput)
}

// Order of the autoregressive part.
func (o ArimaOrderResponseOutput) P() pulumi.StringOutput {
	return o.ApplyT(func(v ArimaOrderResponse) string { return v.P }).(pulumi.StringOutput)
}

// Order of the moving-average part.
func (o ArimaOrderResponseOutput) Q() pulumi.StringOutput {
	return o.ApplyT(func(v ArimaOrderResponse) string { return v.Q }).(pulumi.StringOutput)
}

type ArimaOrderResponseArrayOutput struct{ *pulumi.OutputState }

func (ArimaOrderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArimaOrderResponse)(nil)).Elem()
}

func (o ArimaOrderResponseArrayOutput) ToArimaOrderResponseArrayOutput() ArimaOrderResponseArrayOutput {
	return o
}

func (o ArimaOrderResponseArrayOutput) ToArimaOrderResponseArrayOutputWithContext(ctx context.Context) ArimaOrderResponseArrayOutput {
	return o
}

func (o ArimaOrderResponseArrayOutput) Index(i pulumi.IntInput) ArimaOrderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArimaOrderResponse {
		return vs[0].([]ArimaOrderResponse)[vs[1].(int)]
	}).(ArimaOrderResponseOutput)
}

// (Auto-)arima fitting result. Wrap everything in ArimaResult for easier refactoring if we want to use model-specific iteration results.
type ArimaResultResponse struct {
	// This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.
	ArimaModelInfo []ArimaModelInfoResponse `pulumi:"arimaModelInfo"`
	// Seasonal periods. Repeated because multiple periods are supported for one time series.
	SeasonalPeriods []string `pulumi:"seasonalPeriods"`
}

// (Auto-)arima fitting result. Wrap everything in ArimaResult for easier refactoring if we want to use model-specific iteration results.
type ArimaResultResponseOutput struct{ *pulumi.OutputState }

func (ArimaResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArimaResultResponse)(nil)).Elem()
}

func (o ArimaResultResponseOutput) ToArimaResultResponseOutput() ArimaResultResponseOutput {
	return o
}

func (o ArimaResultResponseOutput) ToArimaResultResponseOutputWithContext(ctx context.Context) ArimaResultResponseOutput {
	return o
}

// This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.
func (o ArimaResultResponseOutput) ArimaModelInfo() ArimaModelInfoResponseArrayOutput {
	return o.ApplyT(func(v ArimaResultResponse) []ArimaModelInfoResponse { return v.ArimaModelInfo }).(ArimaModelInfoResponseArrayOutput)
}

// Seasonal periods. Repeated because multiple periods are supported for one time series.
func (o ArimaResultResponseOutput) SeasonalPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArimaResultResponse) []string { return v.SeasonalPeriods }).(pulumi.StringArrayOutput)
}

// Model evaluation metrics for a single ARIMA forecasting model.
type ArimaSingleModelForecastingMetricsResponse struct {
	// Arima fitting metrics.
	ArimaFittingMetrics ArimaFittingMetricsResponse `pulumi:"arimaFittingMetrics"`
	// Is arima model fitted with drift or not. It is always false when d is not 1.
	HasDrift bool `pulumi:"hasDrift"`
	// If true, holiday_effect is a part of time series decomposition result.
	HasHolidayEffect bool `pulumi:"hasHolidayEffect"`
	// If true, spikes_and_dips is a part of time series decomposition result.
	HasSpikesAndDips bool `pulumi:"hasSpikesAndDips"`
	// If true, step_changes is a part of time series decomposition result.
	HasStepChanges bool `pulumi:"hasStepChanges"`
	// Non-seasonal order.
	NonSeasonalOrder ArimaOrderResponse `pulumi:"nonSeasonalOrder"`
	// Seasonal periods. Repeated because multiple periods are supported for one time series.
	SeasonalPeriods []string `pulumi:"seasonalPeriods"`
	// The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
	TimeSeriesId string `pulumi:"timeSeriesId"`
	// The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
	TimeSeriesIds []string `pulumi:"timeSeriesIds"`
}

// Model evaluation metrics for a single ARIMA forecasting model.
type ArimaSingleModelForecastingMetricsResponseOutput struct{ *pulumi.OutputState }

func (ArimaSingleModelForecastingMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArimaSingleModelForecastingMetricsResponse)(nil)).Elem()
}

func (o ArimaSingleModelForecastingMetricsResponseOutput) ToArimaSingleModelForecastingMetricsResponseOutput() ArimaSingleModelForecastingMetricsResponseOutput {
	return o
}

func (o ArimaSingleModelForecastingMetricsResponseOutput) ToArimaSingleModelForecastingMetricsResponseOutputWithContext(ctx context.Context) ArimaSingleModelForecastingMetricsResponseOutput {
	return o
}

// Arima fitting metrics.
func (o ArimaSingleModelForecastingMetricsResponseOutput) ArimaFittingMetrics() ArimaFittingMetricsResponseOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) ArimaFittingMetricsResponse {
		return v.ArimaFittingMetrics
	}).(ArimaFittingMetricsResponseOutput)
}

// Is arima model fitted with drift or not. It is always false when d is not 1.
func (o ArimaSingleModelForecastingMetricsResponseOutput) HasDrift() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) bool { return v.HasDrift }).(pulumi.BoolOutput)
}

// If true, holiday_effect is a part of time series decomposition result.
func (o ArimaSingleModelForecastingMetricsResponseOutput) HasHolidayEffect() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) bool { return v.HasHolidayEffect }).(pulumi.BoolOutput)
}

// If true, spikes_and_dips is a part of time series decomposition result.
func (o ArimaSingleModelForecastingMetricsResponseOutput) HasSpikesAndDips() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) bool { return v.HasSpikesAndDips }).(pulumi.BoolOutput)
}

// If true, step_changes is a part of time series decomposition result.
func (o ArimaSingleModelForecastingMetricsResponseOutput) HasStepChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) bool { return v.HasStepChanges }).(pulumi.BoolOutput)
}

// Non-seasonal order.
func (o ArimaSingleModelForecastingMetricsResponseOutput) NonSeasonalOrder() ArimaOrderResponseOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) ArimaOrderResponse { return v.NonSeasonalOrder }).(ArimaOrderResponseOutput)
}

// Seasonal periods. Repeated because multiple periods are supported for one time series.
func (o ArimaSingleModelForecastingMetricsResponseOutput) SeasonalPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) []string { return v.SeasonalPeriods }).(pulumi.StringArrayOutput)
}

// The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.
func (o ArimaSingleModelForecastingMetricsResponseOutput) TimeSeriesId() pulumi.StringOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) string { return v.TimeSeriesId }).(pulumi.StringOutput)
}

// The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.
func (o ArimaSingleModelForecastingMetricsResponseOutput) TimeSeriesIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArimaSingleModelForecastingMetricsResponse) []string { return v.TimeSeriesIds }).(pulumi.StringArrayOutput)
}

type ArimaSingleModelForecastingMetricsResponseArrayOutput struct{ *pulumi.OutputState }

func (ArimaSingleModelForecastingMetricsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArimaSingleModelForecastingMetricsResponse)(nil)).Elem()
}

func (o ArimaSingleModelForecastingMetricsResponseArrayOutput) ToArimaSingleModelForecastingMetricsResponseArrayOutput() ArimaSingleModelForecastingMetricsResponseArrayOutput {
	return o
}

func (o ArimaSingleModelForecastingMetricsResponseArrayOutput) ToArimaSingleModelForecastingMetricsResponseArrayOutputWithContext(ctx context.Context) ArimaSingleModelForecastingMetricsResponseArrayOutput {
	return o
}

func (o ArimaSingleModelForecastingMetricsResponseArrayOutput) Index(i pulumi.IntInput) ArimaSingleModelForecastingMetricsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArimaSingleModelForecastingMetricsResponse {
		return vs[0].([]ArimaSingleModelForecastingMetricsResponse)[vs[1].(int)]
	}).(ArimaSingleModelForecastingMetricsResponseOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Options for external data sources.
type AvroOptions struct {
	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
}

// AvroOptionsInput is an input type that accepts AvroOptionsArgs and AvroOptionsOutput values.
// You can construct a concrete instance of `AvroOptionsInput` via:
//
//	AvroOptionsArgs{...}
type AvroOptionsInput interface {
	pulumi.Input

	ToAvroOptionsOutput() AvroOptionsOutput
	ToAvroOptionsOutputWithContext(context.Context) AvroOptionsOutput
}

// Options for external data sources.
type AvroOptionsArgs struct {
	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
}

func (AvroOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroOptions)(nil)).Elem()
}

func (i AvroOptionsArgs) ToAvroOptionsOutput() AvroOptionsOutput {
	return i.ToAvroOptionsOutputWithContext(context.Background())
}

func (i AvroOptionsArgs) ToAvroOptionsOutputWithContext(ctx context.Context) AvroOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroOptionsOutput)
}

func (i AvroOptionsArgs) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return i.ToAvroOptionsPtrOutputWithContext(context.Background())
}

func (i AvroOptionsArgs) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroOptionsOutput).ToAvroOptionsPtrOutputWithContext(ctx)
}

// AvroOptionsPtrInput is an input type that accepts AvroOptionsArgs, AvroOptionsPtr and AvroOptionsPtrOutput values.
// You can construct a concrete instance of `AvroOptionsPtrInput` via:
//
//	        AvroOptionsArgs{...}
//
//	or:
//
//	        nil
type AvroOptionsPtrInput interface {
	pulumi.Input

	ToAvroOptionsPtrOutput() AvroOptionsPtrOutput
	ToAvroOptionsPtrOutputWithContext(context.Context) AvroOptionsPtrOutput
}

type avroOptionsPtrType AvroOptionsArgs

func AvroOptionsPtr(v *AvroOptionsArgs) AvroOptionsPtrInput {
	return (*avroOptionsPtrType)(v)
}

func (*avroOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroOptions)(nil)).Elem()
}

func (i *avroOptionsPtrType) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return i.ToAvroOptionsPtrOutputWithContext(context.Background())
}

func (i *avroOptionsPtrType) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroOptionsPtrOutput)
}

// Options for external data sources.
type AvroOptionsOutput struct{ *pulumi.OutputState }

func (AvroOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroOptions)(nil)).Elem()
}

func (o AvroOptionsOutput) ToAvroOptionsOutput() AvroOptionsOutput {
	return o
}

func (o AvroOptionsOutput) ToAvroOptionsOutputWithContext(ctx context.Context) AvroOptionsOutput {
	return o
}

func (o AvroOptionsOutput) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return o.ToAvroOptionsPtrOutputWithContext(context.Background())
}

func (o AvroOptionsOutput) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroOptions) *AvroOptions {
		return &v
	}).(AvroOptionsPtrOutput)
}

// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o AvroOptionsOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AvroOptions) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

type AvroOptionsPtrOutput struct{ *pulumi.OutputState }

func (AvroOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroOptions)(nil)).Elem()
}

func (o AvroOptionsPtrOutput) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return o
}

func (o AvroOptionsPtrOutput) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return o
}

func (o AvroOptionsPtrOutput) Elem() AvroOptionsOutput {
	return o.ApplyT(func(v *AvroOptions) AvroOptions {
		if v != nil {
			return *v
		}
		var ret AvroOptions
		return ret
	}).(AvroOptionsOutput)
}

// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o AvroOptionsPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvroOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

// Options for external data sources.
type AvroOptionsResponse struct {
	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes bool `pulumi:"useAvroLogicalTypes"`
}

// Options for external data sources.
type AvroOptionsResponseOutput struct{ *pulumi.OutputState }

func (AvroOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroOptionsResponse)(nil)).Elem()
}

func (o AvroOptionsResponseOutput) ToAvroOptionsResponseOutput() AvroOptionsResponseOutput {
	return o
}

func (o AvroOptionsResponseOutput) ToAvroOptionsResponseOutputWithContext(ctx context.Context) AvroOptionsResponseOutput {
	return o
}

// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o AvroOptionsResponseOutput) UseAvroLogicalTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v AvroOptionsResponse) bool { return v.UseAvroLogicalTypes }).(pulumi.BoolOutput)
}

// Reason why BI Engine didn't accelerate the query (or sub-query).
type BiEngineReasonResponse struct {
	// High-level BI Engine reason for partial or disabled acceleration
	Code string `pulumi:"code"`
	// Free form human-readable reason for partial or disabled acceleration.
	Message string `pulumi:"message"`
}

// Reason why BI Engine didn't accelerate the query (or sub-query).
type BiEngineReasonResponseOutput struct{ *pulumi.OutputState }

func (BiEngineReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BiEngineReasonResponse)(nil)).Elem()
}

func (o BiEngineReasonResponseOutput) ToBiEngineReasonResponseOutput() BiEngineReasonResponseOutput {
	return o
}

func (o BiEngineReasonResponseOutput) ToBiEngineReasonResponseOutputWithContext(ctx context.Context) BiEngineReasonResponseOutput {
	return o
}

// High-level BI Engine reason for partial or disabled acceleration
func (o BiEngineReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Free form human-readable reason for partial or disabled acceleration.
func (o BiEngineReasonResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineReasonResponse) string { return v.Message }).(pulumi.StringOutput)
}

type BiEngineReasonResponseArrayOutput struct{ *pulumi.OutputState }

func (BiEngineReasonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BiEngineReasonResponse)(nil)).Elem()
}

func (o BiEngineReasonResponseArrayOutput) ToBiEngineReasonResponseArrayOutput() BiEngineReasonResponseArrayOutput {
	return o
}

func (o BiEngineReasonResponseArrayOutput) ToBiEngineReasonResponseArrayOutputWithContext(ctx context.Context) BiEngineReasonResponseArrayOutput {
	return o
}

func (o BiEngineReasonResponseArrayOutput) Index(i pulumi.IntInput) BiEngineReasonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BiEngineReasonResponse {
		return vs[0].([]BiEngineReasonResponse)[vs[1].(int)]
	}).(BiEngineReasonResponseOutput)
}

// Statistics for a BI Engine specific query. Populated as part of JobStatistics2
type BiEngineStatisticsResponse struct {
	// Specifies which mode of BI Engine acceleration was performed (if any).
	AccelerationMode string `pulumi:"accelerationMode"`
	// Specifies which mode of BI Engine acceleration was performed (if any).
	BiEngineMode string `pulumi:"biEngineMode"`
	// In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
	BiEngineReasons []BiEngineReasonResponse `pulumi:"biEngineReasons"`
}

// Statistics for a BI Engine specific query. Populated as part of JobStatistics2
type BiEngineStatisticsResponseOutput struct{ *pulumi.OutputState }

func (BiEngineStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BiEngineStatisticsResponse)(nil)).Elem()
}

func (o BiEngineStatisticsResponseOutput) ToBiEngineStatisticsResponseOutput() BiEngineStatisticsResponseOutput {
	return o
}

func (o BiEngineStatisticsResponseOutput) ToBiEngineStatisticsResponseOutputWithContext(ctx context.Context) BiEngineStatisticsResponseOutput {
	return o
}

// Specifies which mode of BI Engine acceleration was performed (if any).
func (o BiEngineStatisticsResponseOutput) AccelerationMode() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineStatisticsResponse) string { return v.AccelerationMode }).(pulumi.StringOutput)
}

// Specifies which mode of BI Engine acceleration was performed (if any).
func (o BiEngineStatisticsResponseOutput) BiEngineMode() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineStatisticsResponse) string { return v.BiEngineMode }).(pulumi.StringOutput)
}

// In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
func (o BiEngineStatisticsResponseOutput) BiEngineReasons() BiEngineReasonResponseArrayOutput {
	return o.ApplyT(func(v BiEngineStatisticsResponse) []BiEngineReasonResponse { return v.BiEngineReasons }).(BiEngineReasonResponseArrayOutput)
}

// Configuration for BigLake managed tables.
type BigLakeConfiguration struct {
	// The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
	ConnectionId string `pulumi:"connectionId"`
	// The file format the table data is stored in.
	FileFormat BigLakeConfigurationFileFormat `pulumi:"fileFormat"`
	// The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format "gs://bucket/path_to_table/"
	StorageUri string `pulumi:"storageUri"`
	// The table format the metadata only snapshots are stored in.
	TableFormat BigLakeConfigurationTableFormat `pulumi:"tableFormat"`
}

// BigLakeConfigurationInput is an input type that accepts BigLakeConfigurationArgs and BigLakeConfigurationOutput values.
// You can construct a concrete instance of `BigLakeConfigurationInput` via:
//
//	BigLakeConfigurationArgs{...}
type BigLakeConfigurationInput interface {
	pulumi.Input

	ToBigLakeConfigurationOutput() BigLakeConfigurationOutput
	ToBigLakeConfigurationOutputWithContext(context.Context) BigLakeConfigurationOutput
}

// Configuration for BigLake managed tables.
type BigLakeConfigurationArgs struct {
	// The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
	ConnectionId pulumi.StringInput `pulumi:"connectionId"`
	// The file format the table data is stored in.
	FileFormat BigLakeConfigurationFileFormatInput `pulumi:"fileFormat"`
	// The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format "gs://bucket/path_to_table/"
	StorageUri pulumi.StringInput `pulumi:"storageUri"`
	// The table format the metadata only snapshots are stored in.
	TableFormat BigLakeConfigurationTableFormatInput `pulumi:"tableFormat"`
}

func (BigLakeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigLakeConfiguration)(nil)).Elem()
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationOutput() BigLakeConfigurationOutput {
	return i.ToBigLakeConfigurationOutputWithContext(context.Background())
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationOutputWithContext(ctx context.Context) BigLakeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigLakeConfigurationOutput)
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return i.ToBigLakeConfigurationPtrOutputWithContext(context.Background())
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigLakeConfigurationOutput).ToBigLakeConfigurationPtrOutputWithContext(ctx)
}

// BigLakeConfigurationPtrInput is an input type that accepts BigLakeConfigurationArgs, BigLakeConfigurationPtr and BigLakeConfigurationPtrOutput values.
// You can construct a concrete instance of `BigLakeConfigurationPtrInput` via:
//
//	        BigLakeConfigurationArgs{...}
//
//	or:
//
//	        nil
type BigLakeConfigurationPtrInput interface {
	pulumi.Input

	ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput
	ToBigLakeConfigurationPtrOutputWithContext(context.Context) BigLakeConfigurationPtrOutput
}

type bigLakeConfigurationPtrType BigLakeConfigurationArgs

func BigLakeConfigurationPtr(v *BigLakeConfigurationArgs) BigLakeConfigurationPtrInput {
	return (*bigLakeConfigurationPtrType)(v)
}

func (*bigLakeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigLakeConfiguration)(nil)).Elem()
}

func (i *bigLakeConfigurationPtrType) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return i.ToBigLakeConfigurationPtrOutputWithContext(context.Background())
}

func (i *bigLakeConfigurationPtrType) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigLakeConfigurationPtrOutput)
}

// Configuration for BigLake managed tables.
type BigLakeConfigurationOutput struct{ *pulumi.OutputState }

func (BigLakeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigLakeConfiguration)(nil)).Elem()
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationOutput() BigLakeConfigurationOutput {
	return o
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationOutputWithContext(ctx context.Context) BigLakeConfigurationOutput {
	return o
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return o.ToBigLakeConfigurationPtrOutputWithContext(context.Background())
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigLakeConfiguration) *BigLakeConfiguration {
		return &v
	}).(BigLakeConfigurationPtrOutput)
}

// The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
func (o BigLakeConfigurationOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfiguration) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The file format the table data is stored in.
func (o BigLakeConfigurationOutput) FileFormat() BigLakeConfigurationFileFormatOutput {
	return o.ApplyT(func(v BigLakeConfiguration) BigLakeConfigurationFileFormat { return v.FileFormat }).(BigLakeConfigurationFileFormatOutput)
}

// The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format "gs://bucket/path_to_table/"
func (o BigLakeConfigurationOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfiguration) string { return v.StorageUri }).(pulumi.StringOutput)
}

// The table format the metadata only snapshots are stored in.
func (o BigLakeConfigurationOutput) TableFormat() BigLakeConfigurationTableFormatOutput {
	return o.ApplyT(func(v BigLakeConfiguration) BigLakeConfigurationTableFormat { return v.TableFormat }).(BigLakeConfigurationTableFormatOutput)
}

type BigLakeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BigLakeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigLakeConfiguration)(nil)).Elem()
}

func (o BigLakeConfigurationPtrOutput) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return o
}

func (o BigLakeConfigurationPtrOutput) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return o
}

func (o BigLakeConfigurationPtrOutput) Elem() BigLakeConfigurationOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) BigLakeConfiguration {
		if v != nil {
			return *v
		}
		var ret BigLakeConfiguration
		return ret
	}).(BigLakeConfigurationOutput)
}

// The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
func (o BigLakeConfigurationPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// The file format the table data is stored in.
func (o BigLakeConfigurationPtrOutput) FileFormat() BigLakeConfigurationFileFormatPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *BigLakeConfigurationFileFormat {
		if v == nil {
			return nil
		}
		return &v.FileFormat
	}).(BigLakeConfigurationFileFormatPtrOutput)
}

// The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format "gs://bucket/path_to_table/"
func (o BigLakeConfigurationPtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// The table format the metadata only snapshots are stored in.
func (o BigLakeConfigurationPtrOutput) TableFormat() BigLakeConfigurationTableFormatPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *BigLakeConfigurationTableFormat {
		if v == nil {
			return nil
		}
		return &v.TableFormat
	}).(BigLakeConfigurationTableFormatPtrOutput)
}

// Configuration for BigLake managed tables.
type BigLakeConfigurationResponse struct {
	// The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
	ConnectionId string `pulumi:"connectionId"`
	// The file format the table data is stored in.
	FileFormat string `pulumi:"fileFormat"`
	// The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format "gs://bucket/path_to_table/"
	StorageUri string `pulumi:"storageUri"`
	// The table format the metadata only snapshots are stored in.
	TableFormat string `pulumi:"tableFormat"`
}

// Configuration for BigLake managed tables.
type BigLakeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (BigLakeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigLakeConfigurationResponse)(nil)).Elem()
}

func (o BigLakeConfigurationResponseOutput) ToBigLakeConfigurationResponseOutput() BigLakeConfigurationResponseOutput {
	return o
}

func (o BigLakeConfigurationResponseOutput) ToBigLakeConfigurationResponseOutputWithContext(ctx context.Context) BigLakeConfigurationResponseOutput {
	return o
}

// The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
func (o BigLakeConfigurationResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// The file format the table data is stored in.
func (o BigLakeConfigurationResponseOutput) FileFormat() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.FileFormat }).(pulumi.StringOutput)
}

// The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format "gs://bucket/path_to_table/"
func (o BigLakeConfigurationResponseOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.StorageUri }).(pulumi.StringOutput)
}

// The table format the metadata only snapshots are stored in.
func (o BigLakeConfigurationResponseOutput) TableFormat() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.TableFormat }).(pulumi.StringOutput)
}

type BigQueryModelTrainingResponse struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	CurrentIteration int `pulumi:"currentIteration"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	ExpectedTotalIterations string `pulumi:"expectedTotalIterations"`
}

type BigQueryModelTrainingResponseOutput struct{ *pulumi.OutputState }

func (BigQueryModelTrainingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryModelTrainingResponse)(nil)).Elem()
}

func (o BigQueryModelTrainingResponseOutput) ToBigQueryModelTrainingResponseOutput() BigQueryModelTrainingResponseOutput {
	return o
}

func (o BigQueryModelTrainingResponseOutput) ToBigQueryModelTrainingResponseOutputWithContext(ctx context.Context) BigQueryModelTrainingResponseOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BigQueryModelTrainingResponseOutput) CurrentIteration() pulumi.IntOutput {
	return o.ApplyT(func(v BigQueryModelTrainingResponse) int { return v.CurrentIteration }).(pulumi.IntOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BigQueryModelTrainingResponseOutput) ExpectedTotalIterations() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryModelTrainingResponse) string { return v.ExpectedTotalIterations }).(pulumi.StringOutput)
}

// Information related to a Bigtable column.
type BigtableColumn struct {
	// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding *string `pulumi:"encoding"`
	// Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName *string `pulumi:"fieldName"`
	// Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest *bool `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
	QualifierEncoded *string `pulumi:"qualifierEncoded"`
	// Qualifier string.
	QualifierString *string `pulumi:"qualifierString"`
	// Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type *string `pulumi:"type"`
}

// BigtableColumnInput is an input type that accepts BigtableColumnArgs and BigtableColumnOutput values.
// You can construct a concrete instance of `BigtableColumnInput` via:
//
//	BigtableColumnArgs{...}
type BigtableColumnInput interface {
	pulumi.Input

	ToBigtableColumnOutput() BigtableColumnOutput
	ToBigtableColumnOutputWithContext(context.Context) BigtableColumnOutput
}

// Information related to a Bigtable column.
type BigtableColumnArgs struct {
	// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
	// Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest pulumi.BoolPtrInput `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
	QualifierEncoded pulumi.StringPtrInput `pulumi:"qualifierEncoded"`
	// Qualifier string.
	QualifierString pulumi.StringPtrInput `pulumi:"qualifierString"`
	// Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BigtableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumn)(nil)).Elem()
}

func (i BigtableColumnArgs) ToBigtableColumnOutput() BigtableColumnOutput {
	return i.ToBigtableColumnOutputWithContext(context.Background())
}

func (i BigtableColumnArgs) ToBigtableColumnOutputWithContext(ctx context.Context) BigtableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnOutput)
}

// BigtableColumnArrayInput is an input type that accepts BigtableColumnArray and BigtableColumnArrayOutput values.
// You can construct a concrete instance of `BigtableColumnArrayInput` via:
//
//	BigtableColumnArray{ BigtableColumnArgs{...} }
type BigtableColumnArrayInput interface {
	pulumi.Input

	ToBigtableColumnArrayOutput() BigtableColumnArrayOutput
	ToBigtableColumnArrayOutputWithContext(context.Context) BigtableColumnArrayOutput
}

type BigtableColumnArray []BigtableColumnInput

func (BigtableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumn)(nil)).Elem()
}

func (i BigtableColumnArray) ToBigtableColumnArrayOutput() BigtableColumnArrayOutput {
	return i.ToBigtableColumnArrayOutputWithContext(context.Background())
}

func (i BigtableColumnArray) ToBigtableColumnArrayOutputWithContext(ctx context.Context) BigtableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnArrayOutput)
}

// Information related to a Bigtable column.
type BigtableColumnOutput struct{ *pulumi.OutputState }

func (BigtableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumn)(nil)).Elem()
}

func (o BigtableColumnOutput) ToBigtableColumnOutput() BigtableColumnOutput {
	return o
}

func (o BigtableColumnOutput) ToBigtableColumnOutputWithContext(ctx context.Context) BigtableColumnOutput {
	return o
}

// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
func (o BigtableColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
func (o BigtableColumnOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

// Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
func (o BigtableColumnOutput) OnlyReadLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *bool { return v.OnlyReadLatest }).(pulumi.BoolPtrOutput)
}

// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
func (o BigtableColumnOutput) QualifierEncoded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.QualifierEncoded }).(pulumi.StringPtrOutput)
}

// Qualifier string.
func (o BigtableColumnOutput) QualifierString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.QualifierString }).(pulumi.StringPtrOutput)
}

// Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
func (o BigtableColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BigtableColumnArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumn)(nil)).Elem()
}

func (o BigtableColumnArrayOutput) ToBigtableColumnArrayOutput() BigtableColumnArrayOutput {
	return o
}

func (o BigtableColumnArrayOutput) ToBigtableColumnArrayOutputWithContext(ctx context.Context) BigtableColumnArrayOutput {
	return o
}

func (o BigtableColumnArrayOutput) Index(i pulumi.IntInput) BigtableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumn {
		return vs[0].([]BigtableColumn)[vs[1].(int)]
	}).(BigtableColumnOutput)
}

// Information related to a Bigtable column family.
type BigtableColumnFamily struct {
	// Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns []BigtableColumn `pulumi:"columns"`
	// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding *string `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId *string `pulumi:"familyId"`
	// Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest *bool `pulumi:"onlyReadLatest"`
	// Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type *string `pulumi:"type"`
}

// BigtableColumnFamilyInput is an input type that accepts BigtableColumnFamilyArgs and BigtableColumnFamilyOutput values.
// You can construct a concrete instance of `BigtableColumnFamilyInput` via:
//
//	BigtableColumnFamilyArgs{...}
type BigtableColumnFamilyInput interface {
	pulumi.Input

	ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput
	ToBigtableColumnFamilyOutputWithContext(context.Context) BigtableColumnFamilyOutput
}

// Information related to a Bigtable column family.
type BigtableColumnFamilyArgs struct {
	// Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns BigtableColumnArrayInput `pulumi:"columns"`
	// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId pulumi.StringPtrInput `pulumi:"familyId"`
	// Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest pulumi.BoolPtrInput `pulumi:"onlyReadLatest"`
	// Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BigtableColumnFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamily)(nil)).Elem()
}

func (i BigtableColumnFamilyArgs) ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput {
	return i.ToBigtableColumnFamilyOutputWithContext(context.Background())
}

func (i BigtableColumnFamilyArgs) ToBigtableColumnFamilyOutputWithContext(ctx context.Context) BigtableColumnFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnFamilyOutput)
}

// BigtableColumnFamilyArrayInput is an input type that accepts BigtableColumnFamilyArray and BigtableColumnFamilyArrayOutput values.
// You can construct a concrete instance of `BigtableColumnFamilyArrayInput` via:
//
//	BigtableColumnFamilyArray{ BigtableColumnFamilyArgs{...} }
type BigtableColumnFamilyArrayInput interface {
	pulumi.Input

	ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput
	ToBigtableColumnFamilyArrayOutputWithContext(context.Context) BigtableColumnFamilyArrayOutput
}

type BigtableColumnFamilyArray []BigtableColumnFamilyInput

func (BigtableColumnFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamily)(nil)).Elem()
}

func (i BigtableColumnFamilyArray) ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput {
	return i.ToBigtableColumnFamilyArrayOutputWithContext(context.Background())
}

func (i BigtableColumnFamilyArray) ToBigtableColumnFamilyArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnFamilyArrayOutput)
}

// Information related to a Bigtable column family.
type BigtableColumnFamilyOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamily)(nil)).Elem()
}

func (o BigtableColumnFamilyOutput) ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput {
	return o
}

func (o BigtableColumnFamilyOutput) ToBigtableColumnFamilyOutputWithContext(ctx context.Context) BigtableColumnFamilyOutput {
	return o
}

// Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
func (o BigtableColumnFamilyOutput) Columns() BigtableColumnArrayOutput {
	return o.ApplyT(func(v BigtableColumnFamily) []BigtableColumn { return v.Columns }).(BigtableColumnArrayOutput)
}

// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
func (o BigtableColumnFamilyOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Identifier of the column family.
func (o BigtableColumnFamilyOutput) FamilyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.FamilyId }).(pulumi.StringPtrOutput)
}

// Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
func (o BigtableColumnFamilyOutput) OnlyReadLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *bool { return v.OnlyReadLatest }).(pulumi.BoolPtrOutput)
}

// Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
func (o BigtableColumnFamilyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BigtableColumnFamilyArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamily)(nil)).Elem()
}

func (o BigtableColumnFamilyArrayOutput) ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput {
	return o
}

func (o BigtableColumnFamilyArrayOutput) ToBigtableColumnFamilyArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyArrayOutput {
	return o
}

func (o BigtableColumnFamilyArrayOutput) Index(i pulumi.IntInput) BigtableColumnFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumnFamily {
		return vs[0].([]BigtableColumnFamily)[vs[1].(int)]
	}).(BigtableColumnFamilyOutput)
}

// Information related to a Bigtable column family.
type BigtableColumnFamilyResponse struct {
	// Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns []BigtableColumnResponse `pulumi:"columns"`
	// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding string `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId string `pulumi:"familyId"`
	// Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest bool `pulumi:"onlyReadLatest"`
	// Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type string `pulumi:"type"`
}

// Information related to a Bigtable column family.
type BigtableColumnFamilyResponseOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamilyResponse)(nil)).Elem()
}

func (o BigtableColumnFamilyResponseOutput) ToBigtableColumnFamilyResponseOutput() BigtableColumnFamilyResponseOutput {
	return o
}

func (o BigtableColumnFamilyResponseOutput) ToBigtableColumnFamilyResponseOutputWithContext(ctx context.Context) BigtableColumnFamilyResponseOutput {
	return o
}

// Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
func (o BigtableColumnFamilyResponseOutput) Columns() BigtableColumnResponseArrayOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) []BigtableColumnResponse { return v.Columns }).(BigtableColumnResponseArrayOutput)
}

// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
func (o BigtableColumnFamilyResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Identifier of the column family.
func (o BigtableColumnFamilyResponseOutput) FamilyId() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) string { return v.FamilyId }).(pulumi.StringOutput)
}

// Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
func (o BigtableColumnFamilyResponseOutput) OnlyReadLatest() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) bool { return v.OnlyReadLatest }).(pulumi.BoolOutput)
}

// Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
func (o BigtableColumnFamilyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BigtableColumnFamilyResponseArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamilyResponse)(nil)).Elem()
}

func (o BigtableColumnFamilyResponseArrayOutput) ToBigtableColumnFamilyResponseArrayOutput() BigtableColumnFamilyResponseArrayOutput {
	return o
}

func (o BigtableColumnFamilyResponseArrayOutput) ToBigtableColumnFamilyResponseArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyResponseArrayOutput {
	return o
}

func (o BigtableColumnFamilyResponseArrayOutput) Index(i pulumi.IntInput) BigtableColumnFamilyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumnFamilyResponse {
		return vs[0].([]BigtableColumnFamilyResponse)[vs[1].(int)]
	}).(BigtableColumnFamilyResponseOutput)
}

// Information related to a Bigtable column.
type BigtableColumnResponse struct {
	// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding string `pulumi:"encoding"`
	// Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName string `pulumi:"fieldName"`
	// Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest bool `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
	QualifierEncoded string `pulumi:"qualifierEncoded"`
	// Qualifier string.
	QualifierString string `pulumi:"qualifierString"`
	// Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type string `pulumi:"type"`
}

// Information related to a Bigtable column.
type BigtableColumnResponseOutput struct{ *pulumi.OutputState }

func (BigtableColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnResponse)(nil)).Elem()
}

func (o BigtableColumnResponseOutput) ToBigtableColumnResponseOutput() BigtableColumnResponseOutput {
	return o
}

func (o BigtableColumnResponseOutput) ToBigtableColumnResponseOutputWithContext(ctx context.Context) BigtableColumnResponseOutput {
	return o
}

// Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
func (o BigtableColumnResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.
func (o BigtableColumnResponseOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.FieldName }).(pulumi.StringOutput)
}

// Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
func (o BigtableColumnResponseOutput) OnlyReadLatest() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableColumnResponse) bool { return v.OnlyReadLatest }).(pulumi.BoolOutput)
}

// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.
func (o BigtableColumnResponseOutput) QualifierEncoded() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.QualifierEncoded }).(pulumi.StringOutput)
}

// Qualifier string.
func (o BigtableColumnResponseOutput) QualifierString() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.QualifierString }).(pulumi.StringOutput)
}

// Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
func (o BigtableColumnResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BigtableColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnResponse)(nil)).Elem()
}

func (o BigtableColumnResponseArrayOutput) ToBigtableColumnResponseArrayOutput() BigtableColumnResponseArrayOutput {
	return o
}

func (o BigtableColumnResponseArrayOutput) ToBigtableColumnResponseArrayOutputWithContext(ctx context.Context) BigtableColumnResponseArrayOutput {
	return o
}

func (o BigtableColumnResponseArrayOutput) Index(i pulumi.IntInput) BigtableColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumnResponse {
		return vs[0].([]BigtableColumnResponse)[vs[1].(int)]
	}).(BigtableColumnResponseOutput)
}

// Options specific to Google Cloud Bigtable data sources.
type BigtableOptions struct {
	// Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies []BigtableColumnFamily `pulumi:"columnFamilies"`
	// Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies *bool `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
	OutputColumnFamiliesAsJson *bool `pulumi:"outputColumnFamiliesAsJson"`
	// Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString *bool `pulumi:"readRowkeyAsString"`
}

// BigtableOptionsInput is an input type that accepts BigtableOptionsArgs and BigtableOptionsOutput values.
// You can construct a concrete instance of `BigtableOptionsInput` via:
//
//	BigtableOptionsArgs{...}
type BigtableOptionsInput interface {
	pulumi.Input

	ToBigtableOptionsOutput() BigtableOptionsOutput
	ToBigtableOptionsOutputWithContext(context.Context) BigtableOptionsOutput
}

// Options specific to Google Cloud Bigtable data sources.
type BigtableOptionsArgs struct {
	// Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies BigtableColumnFamilyArrayInput `pulumi:"columnFamilies"`
	// Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies pulumi.BoolPtrInput `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
	OutputColumnFamiliesAsJson pulumi.BoolPtrInput `pulumi:"outputColumnFamiliesAsJson"`
	// Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString pulumi.BoolPtrInput `pulumi:"readRowkeyAsString"`
}

func (BigtableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptions)(nil)).Elem()
}

func (i BigtableOptionsArgs) ToBigtableOptionsOutput() BigtableOptionsOutput {
	return i.ToBigtableOptionsOutputWithContext(context.Background())
}

func (i BigtableOptionsArgs) ToBigtableOptionsOutputWithContext(ctx context.Context) BigtableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsOutput)
}

func (i BigtableOptionsArgs) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return i.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (i BigtableOptionsArgs) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsOutput).ToBigtableOptionsPtrOutputWithContext(ctx)
}

// BigtableOptionsPtrInput is an input type that accepts BigtableOptionsArgs, BigtableOptionsPtr and BigtableOptionsPtrOutput values.
// You can construct a concrete instance of `BigtableOptionsPtrInput` via:
//
//	        BigtableOptionsArgs{...}
//
//	or:
//
//	        nil
type BigtableOptionsPtrInput interface {
	pulumi.Input

	ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput
	ToBigtableOptionsPtrOutputWithContext(context.Context) BigtableOptionsPtrOutput
}

type bigtableOptionsPtrType BigtableOptionsArgs

func BigtableOptionsPtr(v *BigtableOptionsArgs) BigtableOptionsPtrInput {
	return (*bigtableOptionsPtrType)(v)
}

func (*bigtableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableOptions)(nil)).Elem()
}

func (i *bigtableOptionsPtrType) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return i.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (i *bigtableOptionsPtrType) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsPtrOutput)
}

// Options specific to Google Cloud Bigtable data sources.
type BigtableOptionsOutput struct{ *pulumi.OutputState }

func (BigtableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptions)(nil)).Elem()
}

func (o BigtableOptionsOutput) ToBigtableOptionsOutput() BigtableOptionsOutput {
	return o
}

func (o BigtableOptionsOutput) ToBigtableOptionsOutputWithContext(ctx context.Context) BigtableOptionsOutput {
	return o
}

func (o BigtableOptionsOutput) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return o.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (o BigtableOptionsOutput) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigtableOptions) *BigtableOptions {
		return &v
	}).(BigtableOptionsPtrOutput)
}

// Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsOutput) ColumnFamilies() BigtableColumnFamilyArrayOutput {
	return o.ApplyT(func(v BigtableOptions) []BigtableColumnFamily { return v.ColumnFamilies }).(BigtableColumnFamilyArrayOutput)
}

// Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *bool { return v.IgnoreUnspecifiedColumnFamilies }).(pulumi.BoolPtrOutput)
}

// Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
func (o BigtableOptionsOutput) OutputColumnFamiliesAsJson() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *bool { return v.OutputColumnFamiliesAsJson }).(pulumi.BoolPtrOutput)
}

// Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsOutput) ReadRowkeyAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *bool { return v.ReadRowkeyAsString }).(pulumi.BoolPtrOutput)
}

type BigtableOptionsPtrOutput struct{ *pulumi.OutputState }

func (BigtableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableOptions)(nil)).Elem()
}

func (o BigtableOptionsPtrOutput) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return o
}

func (o BigtableOptionsPtrOutput) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return o
}

func (o BigtableOptionsPtrOutput) Elem() BigtableOptionsOutput {
	return o.ApplyT(func(v *BigtableOptions) BigtableOptions {
		if v != nil {
			return *v
		}
		var ret BigtableOptions
		return ret
	}).(BigtableOptionsOutput)
}

// Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsPtrOutput) ColumnFamilies() BigtableColumnFamilyArrayOutput {
	return o.ApplyT(func(v *BigtableOptions) []BigtableColumnFamily {
		if v == nil {
			return nil
		}
		return v.ColumnFamilies
	}).(BigtableColumnFamilyArrayOutput)
}

// Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsPtrOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnspecifiedColumnFamilies
	}).(pulumi.BoolPtrOutput)
}

// Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
func (o BigtableOptionsPtrOutput) OutputColumnFamiliesAsJson() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableOptions) *bool {
		if v == nil {
			return nil
		}
		return v.OutputColumnFamiliesAsJson
	}).(pulumi.BoolPtrOutput)
}

// Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsPtrOutput) ReadRowkeyAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ReadRowkeyAsString
	}).(pulumi.BoolPtrOutput)
}

// Options specific to Google Cloud Bigtable data sources.
type BigtableOptionsResponse struct {
	// Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies []BigtableColumnFamilyResponse `pulumi:"columnFamilies"`
	// Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies bool `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
	OutputColumnFamiliesAsJson bool `pulumi:"outputColumnFamiliesAsJson"`
	// Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString bool `pulumi:"readRowkeyAsString"`
}

// Options specific to Google Cloud Bigtable data sources.
type BigtableOptionsResponseOutput struct{ *pulumi.OutputState }

func (BigtableOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptionsResponse)(nil)).Elem()
}

func (o BigtableOptionsResponseOutput) ToBigtableOptionsResponseOutput() BigtableOptionsResponseOutput {
	return o
}

func (o BigtableOptionsResponseOutput) ToBigtableOptionsResponseOutputWithContext(ctx context.Context) BigtableOptionsResponseOutput {
	return o
}

// Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsResponseOutput) ColumnFamilies() BigtableColumnFamilyResponseArrayOutput {
	return o.ApplyT(func(v BigtableOptionsResponse) []BigtableColumnFamilyResponse { return v.ColumnFamilies }).(BigtableColumnFamilyResponseArrayOutput)
}

// Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsResponseOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableOptionsResponse) bool { return v.IgnoreUnspecifiedColumnFamilies }).(pulumi.BoolOutput)
}

// Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.
func (o BigtableOptionsResponseOutput) OutputColumnFamiliesAsJson() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableOptionsResponse) bool { return v.OutputColumnFamiliesAsJson }).(pulumi.BoolOutput)
}

// Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsResponseOutput) ReadRowkeyAsString() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableOptionsResponse) bool { return v.ReadRowkeyAsString }).(pulumi.BoolOutput)
}

// Evaluation metrics for binary classification/classifier models.
type BinaryClassificationMetricsResponse struct {
	// Aggregate classification metrics.
	AggregateClassificationMetrics AggregateClassificationMetricsResponse `pulumi:"aggregateClassificationMetrics"`
	// Binary confusion matrix at multiple thresholds.
	BinaryConfusionMatrixList []BinaryConfusionMatrixResponse `pulumi:"binaryConfusionMatrixList"`
	// Label representing the negative class.
	NegativeLabel string `pulumi:"negativeLabel"`
	// Label representing the positive class.
	PositiveLabel string `pulumi:"positiveLabel"`
}

// Evaluation metrics for binary classification/classifier models.
type BinaryClassificationMetricsResponseOutput struct{ *pulumi.OutputState }

func (BinaryClassificationMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryClassificationMetricsResponse)(nil)).Elem()
}

func (o BinaryClassificationMetricsResponseOutput) ToBinaryClassificationMetricsResponseOutput() BinaryClassificationMetricsResponseOutput {
	return o
}

func (o BinaryClassificationMetricsResponseOutput) ToBinaryClassificationMetricsResponseOutputWithContext(ctx context.Context) BinaryClassificationMetricsResponseOutput {
	return o
}

// Aggregate classification metrics.
func (o BinaryClassificationMetricsResponseOutput) AggregateClassificationMetrics() AggregateClassificationMetricsResponseOutput {
	return o.ApplyT(func(v BinaryClassificationMetricsResponse) AggregateClassificationMetricsResponse {
		return v.AggregateClassificationMetrics
	}).(AggregateClassificationMetricsResponseOutput)
}

// Binary confusion matrix at multiple thresholds.
func (o BinaryClassificationMetricsResponseOutput) BinaryConfusionMatrixList() BinaryConfusionMatrixResponseArrayOutput {
	return o.ApplyT(func(v BinaryClassificationMetricsResponse) []BinaryConfusionMatrixResponse {
		return v.BinaryConfusionMatrixList
	}).(BinaryConfusionMatrixResponseArrayOutput)
}

// Label representing the negative class.
func (o BinaryClassificationMetricsResponseOutput) NegativeLabel() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryClassificationMetricsResponse) string { return v.NegativeLabel }).(pulumi.StringOutput)
}

// Label representing the positive class.
func (o BinaryClassificationMetricsResponseOutput) PositiveLabel() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryClassificationMetricsResponse) string { return v.PositiveLabel }).(pulumi.StringOutput)
}

// Confusion matrix for binary classification models.
type BinaryConfusionMatrixResponse struct {
	// The fraction of predictions given the correct label.
	Accuracy float64 `pulumi:"accuracy"`
	// The equally weighted average of recall and precision.
	F1Score float64 `pulumi:"f1Score"`
	// Number of false samples predicted as false.
	FalseNegatives string `pulumi:"falseNegatives"`
	// Number of false samples predicted as true.
	FalsePositives string `pulumi:"falsePositives"`
	// Threshold value used when computing each of the following metric.
	PositiveClassThreshold float64 `pulumi:"positiveClassThreshold"`
	// The fraction of actual positive predictions that had positive actual labels.
	Precision float64 `pulumi:"precision"`
	// The fraction of actual positive labels that were given a positive prediction.
	Recall float64 `pulumi:"recall"`
	// Number of true samples predicted as false.
	TrueNegatives string `pulumi:"trueNegatives"`
	// Number of true samples predicted as true.
	TruePositives string `pulumi:"truePositives"`
}

// Confusion matrix for binary classification models.
type BinaryConfusionMatrixResponseOutput struct{ *pulumi.OutputState }

func (BinaryConfusionMatrixResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryConfusionMatrixResponse)(nil)).Elem()
}

func (o BinaryConfusionMatrixResponseOutput) ToBinaryConfusionMatrixResponseOutput() BinaryConfusionMatrixResponseOutput {
	return o
}

func (o BinaryConfusionMatrixResponseOutput) ToBinaryConfusionMatrixResponseOutputWithContext(ctx context.Context) BinaryConfusionMatrixResponseOutput {
	return o
}

// The fraction of predictions given the correct label.
func (o BinaryConfusionMatrixResponseOutput) Accuracy() pulumi.Float64Output {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) float64 { return v.Accuracy }).(pulumi.Float64Output)
}

// The equally weighted average of recall and precision.
func (o BinaryConfusionMatrixResponseOutput) F1Score() pulumi.Float64Output {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) float64 { return v.F1Score }).(pulumi.Float64Output)
}

// Number of false samples predicted as false.
func (o BinaryConfusionMatrixResponseOutput) FalseNegatives() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) string { return v.FalseNegatives }).(pulumi.StringOutput)
}

// Number of false samples predicted as true.
func (o BinaryConfusionMatrixResponseOutput) FalsePositives() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) string { return v.FalsePositives }).(pulumi.StringOutput)
}

// Threshold value used when computing each of the following metric.
func (o BinaryConfusionMatrixResponseOutput) PositiveClassThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) float64 { return v.PositiveClassThreshold }).(pulumi.Float64Output)
}

// The fraction of actual positive predictions that had positive actual labels.
func (o BinaryConfusionMatrixResponseOutput) Precision() pulumi.Float64Output {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) float64 { return v.Precision }).(pulumi.Float64Output)
}

// The fraction of actual positive labels that were given a positive prediction.
func (o BinaryConfusionMatrixResponseOutput) Recall() pulumi.Float64Output {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) float64 { return v.Recall }).(pulumi.Float64Output)
}

// Number of true samples predicted as false.
func (o BinaryConfusionMatrixResponseOutput) TrueNegatives() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) string { return v.TrueNegatives }).(pulumi.StringOutput)
}

// Number of true samples predicted as true.
func (o BinaryConfusionMatrixResponseOutput) TruePositives() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryConfusionMatrixResponse) string { return v.TruePositives }).(pulumi.StringOutput)
}

type BinaryConfusionMatrixResponseArrayOutput struct{ *pulumi.OutputState }

func (BinaryConfusionMatrixResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BinaryConfusionMatrixResponse)(nil)).Elem()
}

func (o BinaryConfusionMatrixResponseArrayOutput) ToBinaryConfusionMatrixResponseArrayOutput() BinaryConfusionMatrixResponseArrayOutput {
	return o
}

func (o BinaryConfusionMatrixResponseArrayOutput) ToBinaryConfusionMatrixResponseArrayOutputWithContext(ctx context.Context) BinaryConfusionMatrixResponseArrayOutput {
	return o
}

func (o BinaryConfusionMatrixResponseArrayOutput) Index(i pulumi.IntInput) BinaryConfusionMatrixResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BinaryConfusionMatrixResponse {
		return vs[0].([]BinaryConfusionMatrixResponse)[vs[1].(int)]
	}).(BinaryConfusionMatrixResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

type BqmlIterationResult struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	DurationMs *string `pulumi:"durationMs"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	EvalLoss *float64 `pulumi:"evalLoss"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Index *int `pulumi:"index"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	LearnRate *float64 `pulumi:"learnRate"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingLoss *float64 `pulumi:"trainingLoss"`
}

// BqmlIterationResultInput is an input type that accepts BqmlIterationResultArgs and BqmlIterationResultOutput values.
// You can construct a concrete instance of `BqmlIterationResultInput` via:
//
//	BqmlIterationResultArgs{...}
type BqmlIterationResultInput interface {
	pulumi.Input

	ToBqmlIterationResultOutput() BqmlIterationResultOutput
	ToBqmlIterationResultOutputWithContext(context.Context) BqmlIterationResultOutput
}

type BqmlIterationResultArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	DurationMs pulumi.StringPtrInput `pulumi:"durationMs"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	EvalLoss pulumi.Float64PtrInput `pulumi:"evalLoss"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Index pulumi.IntPtrInput `pulumi:"index"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	LearnRate pulumi.Float64PtrInput `pulumi:"learnRate"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingLoss pulumi.Float64PtrInput `pulumi:"trainingLoss"`
}

func (BqmlIterationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResult)(nil)).Elem()
}

func (i BqmlIterationResultArgs) ToBqmlIterationResultOutput() BqmlIterationResultOutput {
	return i.ToBqmlIterationResultOutputWithContext(context.Background())
}

func (i BqmlIterationResultArgs) ToBqmlIterationResultOutputWithContext(ctx context.Context) BqmlIterationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlIterationResultOutput)
}

// BqmlIterationResultArrayInput is an input type that accepts BqmlIterationResultArray and BqmlIterationResultArrayOutput values.
// You can construct a concrete instance of `BqmlIterationResultArrayInput` via:
//
//	BqmlIterationResultArray{ BqmlIterationResultArgs{...} }
type BqmlIterationResultArrayInput interface {
	pulumi.Input

	ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput
	ToBqmlIterationResultArrayOutputWithContext(context.Context) BqmlIterationResultArrayOutput
}

type BqmlIterationResultArray []BqmlIterationResultInput

func (BqmlIterationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResult)(nil)).Elem()
}

func (i BqmlIterationResultArray) ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput {
	return i.ToBqmlIterationResultArrayOutputWithContext(context.Background())
}

func (i BqmlIterationResultArray) ToBqmlIterationResultArrayOutputWithContext(ctx context.Context) BqmlIterationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlIterationResultArrayOutput)
}

type BqmlIterationResultOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResult)(nil)).Elem()
}

func (o BqmlIterationResultOutput) ToBqmlIterationResultOutput() BqmlIterationResultOutput {
	return o
}

func (o BqmlIterationResultOutput) ToBqmlIterationResultOutputWithContext(ctx context.Context) BqmlIterationResultOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultOutput) DurationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *string { return v.DurationMs }).(pulumi.StringPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultOutput) EvalLoss() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.EvalLoss }).(pulumi.Float64PtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultOutput) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *int { return v.Index }).(pulumi.IntPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultOutput) LearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.LearnRate }).(pulumi.Float64PtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultOutput) TrainingLoss() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.TrainingLoss }).(pulumi.Float64PtrOutput)
}

type BqmlIterationResultArrayOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResult)(nil)).Elem()
}

func (o BqmlIterationResultArrayOutput) ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput {
	return o
}

func (o BqmlIterationResultArrayOutput) ToBqmlIterationResultArrayOutputWithContext(ctx context.Context) BqmlIterationResultArrayOutput {
	return o
}

func (o BqmlIterationResultArrayOutput) Index(i pulumi.IntInput) BqmlIterationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlIterationResult {
		return vs[0].([]BqmlIterationResult)[vs[1].(int)]
	}).(BqmlIterationResultOutput)
}

type BqmlIterationResultResponse struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	DurationMs string `pulumi:"durationMs"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	EvalLoss float64 `pulumi:"evalLoss"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Index int `pulumi:"index"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	LearnRate float64 `pulumi:"learnRate"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingLoss float64 `pulumi:"trainingLoss"`
}

type BqmlIterationResultResponseOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResultResponse)(nil)).Elem()
}

func (o BqmlIterationResultResponseOutput) ToBqmlIterationResultResponseOutput() BqmlIterationResultResponseOutput {
	return o
}

func (o BqmlIterationResultResponseOutput) ToBqmlIterationResultResponseOutputWithContext(ctx context.Context) BqmlIterationResultResponseOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultResponseOutput) DurationMs() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlIterationResultResponse) string { return v.DurationMs }).(pulumi.StringOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultResponseOutput) EvalLoss() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlIterationResultResponse) float64 { return v.EvalLoss }).(pulumi.Float64Output)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultResponseOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v BqmlIterationResultResponse) int { return v.Index }).(pulumi.IntOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultResponseOutput) LearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlIterationResultResponse) float64 { return v.LearnRate }).(pulumi.Float64Output)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlIterationResultResponseOutput) TrainingLoss() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlIterationResultResponse) float64 { return v.TrainingLoss }).(pulumi.Float64Output)
}

type BqmlIterationResultResponseArrayOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResultResponse)(nil)).Elem()
}

func (o BqmlIterationResultResponseArrayOutput) ToBqmlIterationResultResponseArrayOutput() BqmlIterationResultResponseArrayOutput {
	return o
}

func (o BqmlIterationResultResponseArrayOutput) ToBqmlIterationResultResponseArrayOutputWithContext(ctx context.Context) BqmlIterationResultResponseArrayOutput {
	return o
}

func (o BqmlIterationResultResponseArrayOutput) Index(i pulumi.IntInput) BqmlIterationResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlIterationResultResponse {
		return vs[0].([]BqmlIterationResultResponse)[vs[1].(int)]
	}).(BqmlIterationResultResponseOutput)
}

type BqmlTrainingRun struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	IterationResults []BqmlIterationResult `pulumi:"iterationResults"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	StartTime *string `pulumi:"startTime"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	State *string `pulumi:"state"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingOptions *BqmlTrainingRunTrainingOptions `pulumi:"trainingOptions"`
}

// BqmlTrainingRunInput is an input type that accepts BqmlTrainingRunArgs and BqmlTrainingRunOutput values.
// You can construct a concrete instance of `BqmlTrainingRunInput` via:
//
//	BqmlTrainingRunArgs{...}
type BqmlTrainingRunInput interface {
	pulumi.Input

	ToBqmlTrainingRunOutput() BqmlTrainingRunOutput
	ToBqmlTrainingRunOutputWithContext(context.Context) BqmlTrainingRunOutput
}

type BqmlTrainingRunArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	IterationResults BqmlIterationResultArrayInput `pulumi:"iterationResults"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	State pulumi.StringPtrInput `pulumi:"state"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingOptions BqmlTrainingRunTrainingOptionsPtrInput `pulumi:"trainingOptions"`
}

func (BqmlTrainingRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRun)(nil)).Elem()
}

func (i BqmlTrainingRunArgs) ToBqmlTrainingRunOutput() BqmlTrainingRunOutput {
	return i.ToBqmlTrainingRunOutputWithContext(context.Background())
}

func (i BqmlTrainingRunArgs) ToBqmlTrainingRunOutputWithContext(ctx context.Context) BqmlTrainingRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunOutput)
}

// BqmlTrainingRunArrayInput is an input type that accepts BqmlTrainingRunArray and BqmlTrainingRunArrayOutput values.
// You can construct a concrete instance of `BqmlTrainingRunArrayInput` via:
//
//	BqmlTrainingRunArray{ BqmlTrainingRunArgs{...} }
type BqmlTrainingRunArrayInput interface {
	pulumi.Input

	ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput
	ToBqmlTrainingRunArrayOutputWithContext(context.Context) BqmlTrainingRunArrayOutput
}

type BqmlTrainingRunArray []BqmlTrainingRunInput

func (BqmlTrainingRunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRun)(nil)).Elem()
}

func (i BqmlTrainingRunArray) ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput {
	return i.ToBqmlTrainingRunArrayOutputWithContext(context.Background())
}

func (i BqmlTrainingRunArray) ToBqmlTrainingRunArrayOutputWithContext(ctx context.Context) BqmlTrainingRunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunArrayOutput)
}

type BqmlTrainingRunOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRun)(nil)).Elem()
}

func (o BqmlTrainingRunOutput) ToBqmlTrainingRunOutput() BqmlTrainingRunOutput {
	return o
}

func (o BqmlTrainingRunOutput) ToBqmlTrainingRunOutputWithContext(ctx context.Context) BqmlTrainingRunOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunOutput) IterationResults() BqmlIterationResultArrayOutput {
	return o.ApplyT(func(v BqmlTrainingRun) []BqmlIterationResult { return v.IterationResults }).(BqmlIterationResultArrayOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *string { return v.State }).(pulumi.StringPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunOutput) TrainingOptions() BqmlTrainingRunTrainingOptionsPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *BqmlTrainingRunTrainingOptions { return v.TrainingOptions }).(BqmlTrainingRunTrainingOptionsPtrOutput)
}

type BqmlTrainingRunArrayOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRun)(nil)).Elem()
}

func (o BqmlTrainingRunArrayOutput) ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput {
	return o
}

func (o BqmlTrainingRunArrayOutput) ToBqmlTrainingRunArrayOutputWithContext(ctx context.Context) BqmlTrainingRunArrayOutput {
	return o
}

func (o BqmlTrainingRunArrayOutput) Index(i pulumi.IntInput) BqmlTrainingRunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlTrainingRun {
		return vs[0].([]BqmlTrainingRun)[vs[1].(int)]
	}).(BqmlTrainingRunOutput)
}

type BqmlTrainingRunResponse struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	IterationResults []BqmlIterationResultResponse `pulumi:"iterationResults"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	StartTime string `pulumi:"startTime"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	State string `pulumi:"state"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingOptions BqmlTrainingRunTrainingOptionsResponse `pulumi:"trainingOptions"`
}

type BqmlTrainingRunResponseOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunResponse)(nil)).Elem()
}

func (o BqmlTrainingRunResponseOutput) ToBqmlTrainingRunResponseOutput() BqmlTrainingRunResponseOutput {
	return o
}

func (o BqmlTrainingRunResponseOutput) ToBqmlTrainingRunResponseOutputWithContext(ctx context.Context) BqmlTrainingRunResponseOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunResponseOutput) IterationResults() BqmlIterationResultResponseArrayOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) []BqmlIterationResultResponse { return v.IterationResults }).(BqmlIterationResultResponseArrayOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) string { return v.State }).(pulumi.StringOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o BqmlTrainingRunResponseOutput) TrainingOptions() BqmlTrainingRunTrainingOptionsResponseOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) BqmlTrainingRunTrainingOptionsResponse { return v.TrainingOptions }).(BqmlTrainingRunTrainingOptionsResponseOutput)
}

type BqmlTrainingRunResponseArrayOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRunResponse)(nil)).Elem()
}

func (o BqmlTrainingRunResponseArrayOutput) ToBqmlTrainingRunResponseArrayOutput() BqmlTrainingRunResponseArrayOutput {
	return o
}

func (o BqmlTrainingRunResponseArrayOutput) ToBqmlTrainingRunResponseArrayOutputWithContext(ctx context.Context) BqmlTrainingRunResponseArrayOutput {
	return o
}

func (o BqmlTrainingRunResponseArrayOutput) Index(i pulumi.IntInput) BqmlTrainingRunResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlTrainingRunResponse {
		return vs[0].([]BqmlTrainingRunResponse)[vs[1].(int)]
	}).(BqmlTrainingRunResponseOutput)
}

// Deprecated.
type BqmlTrainingRunTrainingOptions struct {
	EarlyStop               *bool    `pulumi:"earlyStop"`
	L1Reg                   *float64 `pulumi:"l1Reg"`
	L2Reg                   *float64 `pulumi:"l2Reg"`
	LearnRate               *float64 `pulumi:"learnRate"`
	LearnRateStrategy       *string  `pulumi:"learnRateStrategy"`
	LineSearchInitLearnRate *float64 `pulumi:"lineSearchInitLearnRate"`
	MaxIteration            *string  `pulumi:"maxIteration"`
	MinRelProgress          *float64 `pulumi:"minRelProgress"`
	WarmStart               *bool    `pulumi:"warmStart"`
}

// BqmlTrainingRunTrainingOptionsInput is an input type that accepts BqmlTrainingRunTrainingOptionsArgs and BqmlTrainingRunTrainingOptionsOutput values.
// You can construct a concrete instance of `BqmlTrainingRunTrainingOptionsInput` via:
//
//	BqmlTrainingRunTrainingOptionsArgs{...}
type BqmlTrainingRunTrainingOptionsInput interface {
	pulumi.Input

	ToBqmlTrainingRunTrainingOptionsOutput() BqmlTrainingRunTrainingOptionsOutput
	ToBqmlTrainingRunTrainingOptionsOutputWithContext(context.Context) BqmlTrainingRunTrainingOptionsOutput
}

// Deprecated.
type BqmlTrainingRunTrainingOptionsArgs struct {
	EarlyStop               pulumi.BoolPtrInput    `pulumi:"earlyStop"`
	L1Reg                   pulumi.Float64PtrInput `pulumi:"l1Reg"`
	L2Reg                   pulumi.Float64PtrInput `pulumi:"l2Reg"`
	LearnRate               pulumi.Float64PtrInput `pulumi:"learnRate"`
	LearnRateStrategy       pulumi.StringPtrInput  `pulumi:"learnRateStrategy"`
	LineSearchInitLearnRate pulumi.Float64PtrInput `pulumi:"lineSearchInitLearnRate"`
	MaxIteration            pulumi.StringPtrInput  `pulumi:"maxIteration"`
	MinRelProgress          pulumi.Float64PtrInput `pulumi:"minRelProgress"`
	WarmStart               pulumi.BoolPtrInput    `pulumi:"warmStart"`
}

func (BqmlTrainingRunTrainingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsOutput() BqmlTrainingRunTrainingOptionsOutput {
	return i.ToBqmlTrainingRunTrainingOptionsOutputWithContext(context.Background())
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunTrainingOptionsOutput)
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return i.ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Background())
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunTrainingOptionsOutput).ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx)
}

// BqmlTrainingRunTrainingOptionsPtrInput is an input type that accepts BqmlTrainingRunTrainingOptionsArgs, BqmlTrainingRunTrainingOptionsPtr and BqmlTrainingRunTrainingOptionsPtrOutput values.
// You can construct a concrete instance of `BqmlTrainingRunTrainingOptionsPtrInput` via:
//
//	        BqmlTrainingRunTrainingOptionsArgs{...}
//
//	or:
//
//	        nil
type BqmlTrainingRunTrainingOptionsPtrInput interface {
	pulumi.Input

	ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput
	ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Context) BqmlTrainingRunTrainingOptionsPtrOutput
}

type bqmlTrainingRunTrainingOptionsPtrType BqmlTrainingRunTrainingOptionsArgs

func BqmlTrainingRunTrainingOptionsPtr(v *BqmlTrainingRunTrainingOptionsArgs) BqmlTrainingRunTrainingOptionsPtrInput {
	return (*bqmlTrainingRunTrainingOptionsPtrType)(v)
}

func (*bqmlTrainingRunTrainingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (i *bqmlTrainingRunTrainingOptionsPtrType) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return i.ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Background())
}

func (i *bqmlTrainingRunTrainingOptionsPtrType) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunTrainingOptionsPtrOutput)
}

// Deprecated.
type BqmlTrainingRunTrainingOptionsOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunTrainingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsOutput() BqmlTrainingRunTrainingOptionsOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return o.ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Background())
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BqmlTrainingRunTrainingOptions) *BqmlTrainingRunTrainingOptions {
		return &v
	}).(BqmlTrainingRunTrainingOptionsPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) EarlyStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *bool { return v.EarlyStop }).(pulumi.BoolPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) L1Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.L1Reg }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) L2Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.L2Reg }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) LearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.LearnRate }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) LearnRateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *string { return v.LearnRateStrategy }).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) LineSearchInitLearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.LineSearchInitLearnRate }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) MaxIteration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *string { return v.MaxIteration }).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) MinRelProgress() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.MinRelProgress }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) WarmStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *bool { return v.WarmStart }).(pulumi.BoolPtrOutput)
}

type BqmlTrainingRunTrainingOptionsPtrOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunTrainingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) Elem() BqmlTrainingRunTrainingOptionsOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) BqmlTrainingRunTrainingOptions {
		if v != nil {
			return *v
		}
		var ret BqmlTrainingRunTrainingOptions
		return ret
	}).(BqmlTrainingRunTrainingOptionsOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) EarlyStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStop
	}).(pulumi.BoolPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) L1Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.L1Reg
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) L2Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.L2Reg
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) LearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.LearnRate
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) LearnRateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *string {
		if v == nil {
			return nil
		}
		return v.LearnRateStrategy
	}).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) LineSearchInitLearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.LineSearchInitLearnRate
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) MaxIteration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *string {
		if v == nil {
			return nil
		}
		return v.MaxIteration
	}).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) MinRelProgress() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MinRelProgress
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) WarmStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.WarmStart
	}).(pulumi.BoolPtrOutput)
}

// Deprecated.
type BqmlTrainingRunTrainingOptionsResponse struct {
	EarlyStop               bool    `pulumi:"earlyStop"`
	L1Reg                   float64 `pulumi:"l1Reg"`
	L2Reg                   float64 `pulumi:"l2Reg"`
	LearnRate               float64 `pulumi:"learnRate"`
	LearnRateStrategy       string  `pulumi:"learnRateStrategy"`
	LineSearchInitLearnRate float64 `pulumi:"lineSearchInitLearnRate"`
	MaxIteration            string  `pulumi:"maxIteration"`
	MinRelProgress          float64 `pulumi:"minRelProgress"`
	WarmStart               bool    `pulumi:"warmStart"`
}

// Deprecated.
type BqmlTrainingRunTrainingOptionsResponseOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunTrainingOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunTrainingOptionsResponse)(nil)).Elem()
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) ToBqmlTrainingRunTrainingOptionsResponseOutput() BqmlTrainingRunTrainingOptionsResponseOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) ToBqmlTrainingRunTrainingOptionsResponseOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsResponseOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) EarlyStop() pulumi.BoolOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) bool { return v.EarlyStop }).(pulumi.BoolOutput)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) L1Reg() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.L1Reg }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) L2Reg() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.L2Reg }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) LearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.LearnRate }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) LearnRateStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) string { return v.LearnRateStrategy }).(pulumi.StringOutput)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) LineSearchInitLearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.LineSearchInitLearnRate }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) MaxIteration() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) string { return v.MaxIteration }).(pulumi.StringOutput)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) MinRelProgress() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.MinRelProgress }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) WarmStart() pulumi.BoolOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) bool { return v.WarmStart }).(pulumi.BoolOutput)
}

// Representative value of a categorical feature.
type CategoricalValueResponse struct {
	// Counts of all categories for the categorical feature. If there are more than ten categories, we return top ten (by count) and return one more CategoryCount with category "_OTHER_" and count as aggregate counts of remaining categories.
	CategoryCounts []CategoryCountResponse `pulumi:"categoryCounts"`
}

// Representative value of a categorical feature.
type CategoricalValueResponseOutput struct{ *pulumi.OutputState }

func (CategoricalValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoricalValueResponse)(nil)).Elem()
}

func (o CategoricalValueResponseOutput) ToCategoricalValueResponseOutput() CategoricalValueResponseOutput {
	return o
}

func (o CategoricalValueResponseOutput) ToCategoricalValueResponseOutputWithContext(ctx context.Context) CategoricalValueResponseOutput {
	return o
}

// Counts of all categories for the categorical feature. If there are more than ten categories, we return top ten (by count) and return one more CategoryCount with category "_OTHER_" and count as aggregate counts of remaining categories.
func (o CategoricalValueResponseOutput) CategoryCounts() CategoryCountResponseArrayOutput {
	return o.ApplyT(func(v CategoricalValueResponse) []CategoryCountResponse { return v.CategoryCounts }).(CategoryCountResponseArrayOutput)
}

// Represents the count of a single category within the cluster.
type CategoryCountResponse struct {
	// The name of category.
	Category string `pulumi:"category"`
	// The count of training samples matching the category within the cluster.
	Count string `pulumi:"count"`
}

// Represents the count of a single category within the cluster.
type CategoryCountResponseOutput struct{ *pulumi.OutputState }

func (CategoryCountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CategoryCountResponse)(nil)).Elem()
}

func (o CategoryCountResponseOutput) ToCategoryCountResponseOutput() CategoryCountResponseOutput {
	return o
}

func (o CategoryCountResponseOutput) ToCategoryCountResponseOutputWithContext(ctx context.Context) CategoryCountResponseOutput {
	return o
}

// The name of category.
func (o CategoryCountResponseOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v CategoryCountResponse) string { return v.Category }).(pulumi.StringOutput)
}

// The count of training samples matching the category within the cluster.
func (o CategoryCountResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v CategoryCountResponse) string { return v.Count }).(pulumi.StringOutput)
}

type CategoryCountResponseArrayOutput struct{ *pulumi.OutputState }

func (CategoryCountResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CategoryCountResponse)(nil)).Elem()
}

func (o CategoryCountResponseArrayOutput) ToCategoryCountResponseArrayOutput() CategoryCountResponseArrayOutput {
	return o
}

func (o CategoryCountResponseArrayOutput) ToCategoryCountResponseArrayOutputWithContext(ctx context.Context) CategoryCountResponseArrayOutput {
	return o
}

func (o CategoryCountResponseArrayOutput) Index(i pulumi.IntInput) CategoryCountResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CategoryCountResponse {
		return vs[0].([]CategoryCountResponse)[vs[1].(int)]
	}).(CategoryCountResponseOutput)
}

// Information about base table and clone time of a table clone.
type CloneDefinitionResponse struct {
	// Reference describing the ID of the table that was cloned.
	BaseTableReference TableReferenceResponse `pulumi:"baseTableReference"`
	// The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format.
	CloneTime string `pulumi:"cloneTime"`
}

// Information about base table and clone time of a table clone.
type CloneDefinitionResponseOutput struct{ *pulumi.OutputState }

func (CloneDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloneDefinitionResponse)(nil)).Elem()
}

func (o CloneDefinitionResponseOutput) ToCloneDefinitionResponseOutput() CloneDefinitionResponseOutput {
	return o
}

func (o CloneDefinitionResponseOutput) ToCloneDefinitionResponseOutputWithContext(ctx context.Context) CloneDefinitionResponseOutput {
	return o
}

// Reference describing the ID of the table that was cloned.
func (o CloneDefinitionResponseOutput) BaseTableReference() TableReferenceResponseOutput {
	return o.ApplyT(func(v CloneDefinitionResponse) TableReferenceResponse { return v.BaseTableReference }).(TableReferenceResponseOutput)
}

// The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format.
func (o CloneDefinitionResponseOutput) CloneTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneDefinitionResponse) string { return v.CloneTime }).(pulumi.StringOutput)
}

// Information about a single cluster for clustering model.
type ClusterInfoResponse struct {
	// Centroid id.
	CentroidId string `pulumi:"centroidId"`
	// Cluster radius, the average distance from centroid to each point assigned to the cluster.
	ClusterRadius float64 `pulumi:"clusterRadius"`
	// Cluster size, the total number of points assigned to the cluster.
	ClusterSize string `pulumi:"clusterSize"`
}

// Information about a single cluster for clustering model.
type ClusterInfoResponseOutput struct{ *pulumi.OutputState }

func (ClusterInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterInfoResponse)(nil)).Elem()
}

func (o ClusterInfoResponseOutput) ToClusterInfoResponseOutput() ClusterInfoResponseOutput {
	return o
}

func (o ClusterInfoResponseOutput) ToClusterInfoResponseOutputWithContext(ctx context.Context) ClusterInfoResponseOutput {
	return o
}

// Centroid id.
func (o ClusterInfoResponseOutput) CentroidId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterInfoResponse) string { return v.CentroidId }).(pulumi.StringOutput)
}

// Cluster radius, the average distance from centroid to each point assigned to the cluster.
func (o ClusterInfoResponseOutput) ClusterRadius() pulumi.Float64Output {
	return o.ApplyT(func(v ClusterInfoResponse) float64 { return v.ClusterRadius }).(pulumi.Float64Output)
}

// Cluster size, the total number of points assigned to the cluster.
func (o ClusterInfoResponseOutput) ClusterSize() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterInfoResponse) string { return v.ClusterSize }).(pulumi.StringOutput)
}

type ClusterInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterInfoResponse)(nil)).Elem()
}

func (o ClusterInfoResponseArrayOutput) ToClusterInfoResponseArrayOutput() ClusterInfoResponseArrayOutput {
	return o
}

func (o ClusterInfoResponseArrayOutput) ToClusterInfoResponseArrayOutputWithContext(ctx context.Context) ClusterInfoResponseArrayOutput {
	return o
}

func (o ClusterInfoResponseArrayOutput) Index(i pulumi.IntInput) ClusterInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterInfoResponse {
		return vs[0].([]ClusterInfoResponse)[vs[1].(int)]
	}).(ClusterInfoResponseOutput)
}

// Message containing the information about one cluster.
type ClusterResponse struct {
	// Centroid id.
	CentroidId string `pulumi:"centroidId"`
	// Count of training data rows that were assigned to this cluster.
	Count string `pulumi:"count"`
	// Values of highly variant features for this cluster.
	FeatureValues []FeatureValueResponse `pulumi:"featureValues"`
}

// Message containing the information about one cluster.
type ClusterResponseOutput struct{ *pulumi.OutputState }

func (ClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterResponse)(nil)).Elem()
}

func (o ClusterResponseOutput) ToClusterResponseOutput() ClusterResponseOutput {
	return o
}

func (o ClusterResponseOutput) ToClusterResponseOutputWithContext(ctx context.Context) ClusterResponseOutput {
	return o
}

// Centroid id.
func (o ClusterResponseOutput) CentroidId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResponse) string { return v.CentroidId }).(pulumi.StringOutput)
}

// Count of training data rows that were assigned to this cluster.
func (o ClusterResponseOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterResponse) string { return v.Count }).(pulumi.StringOutput)
}

// Values of highly variant features for this cluster.
func (o ClusterResponseOutput) FeatureValues() FeatureValueResponseArrayOutput {
	return o.ApplyT(func(v ClusterResponse) []FeatureValueResponse { return v.FeatureValues }).(FeatureValueResponseArrayOutput)
}

type ClusterResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterResponse)(nil)).Elem()
}

func (o ClusterResponseArrayOutput) ToClusterResponseArrayOutput() ClusterResponseArrayOutput {
	return o
}

func (o ClusterResponseArrayOutput) ToClusterResponseArrayOutputWithContext(ctx context.Context) ClusterResponseArrayOutput {
	return o
}

func (o ClusterResponseArrayOutput) Index(i pulumi.IntInput) ClusterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterResponse {
		return vs[0].([]ClusterResponse)[vs[1].(int)]
	}).(ClusterResponseOutput)
}

// Configures table clustering.
type Clustering struct {
	// One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
	Fields []string `pulumi:"fields"`
}

// ClusteringInput is an input type that accepts ClusteringArgs and ClusteringOutput values.
// You can construct a concrete instance of `ClusteringInput` via:
//
//	ClusteringArgs{...}
type ClusteringInput interface {
	pulumi.Input

	ToClusteringOutput() ClusteringOutput
	ToClusteringOutputWithContext(context.Context) ClusteringOutput
}

// Configures table clustering.
type ClusteringArgs struct {
	// One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
	Fields pulumi.StringArrayInput `pulumi:"fields"`
}

func (ClusteringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Clustering)(nil)).Elem()
}

func (i ClusteringArgs) ToClusteringOutput() ClusteringOutput {
	return i.ToClusteringOutputWithContext(context.Background())
}

func (i ClusteringArgs) ToClusteringOutputWithContext(ctx context.Context) ClusteringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringOutput)
}

func (i ClusteringArgs) ToClusteringPtrOutput() ClusteringPtrOutput {
	return i.ToClusteringPtrOutputWithContext(context.Background())
}

func (i ClusteringArgs) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringOutput).ToClusteringPtrOutputWithContext(ctx)
}

// ClusteringPtrInput is an input type that accepts ClusteringArgs, ClusteringPtr and ClusteringPtrOutput values.
// You can construct a concrete instance of `ClusteringPtrInput` via:
//
//	        ClusteringArgs{...}
//
//	or:
//
//	        nil
type ClusteringPtrInput interface {
	pulumi.Input

	ToClusteringPtrOutput() ClusteringPtrOutput
	ToClusteringPtrOutputWithContext(context.Context) ClusteringPtrOutput
}

type clusteringPtrType ClusteringArgs

func ClusteringPtr(v *ClusteringArgs) ClusteringPtrInput {
	return (*clusteringPtrType)(v)
}

func (*clusteringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustering)(nil)).Elem()
}

func (i *clusteringPtrType) ToClusteringPtrOutput() ClusteringPtrOutput {
	return i.ToClusteringPtrOutputWithContext(context.Background())
}

func (i *clusteringPtrType) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringPtrOutput)
}

// Configures table clustering.
type ClusteringOutput struct{ *pulumi.OutputState }

func (ClusteringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Clustering)(nil)).Elem()
}

func (o ClusteringOutput) ToClusteringOutput() ClusteringOutput {
	return o
}

func (o ClusteringOutput) ToClusteringOutputWithContext(ctx context.Context) ClusteringOutput {
	return o
}

func (o ClusteringOutput) ToClusteringPtrOutput() ClusteringPtrOutput {
	return o.ToClusteringPtrOutputWithContext(context.Background())
}

func (o ClusteringOutput) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Clustering) *Clustering {
		return &v
	}).(ClusteringPtrOutput)
}

// One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
func (o ClusteringOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Clustering) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

type ClusteringPtrOutput struct{ *pulumi.OutputState }

func (ClusteringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustering)(nil)).Elem()
}

func (o ClusteringPtrOutput) ToClusteringPtrOutput() ClusteringPtrOutput {
	return o
}

func (o ClusteringPtrOutput) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return o
}

func (o ClusteringPtrOutput) Elem() ClusteringOutput {
	return o.ApplyT(func(v *Clustering) Clustering {
		if v != nil {
			return *v
		}
		var ret Clustering
		return ret
	}).(ClusteringOutput)
}

// One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
func (o ClusteringPtrOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Clustering) []string {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(pulumi.StringArrayOutput)
}

// Evaluation metrics for clustering models.
type ClusteringMetricsResponse struct {
	// Information for all clusters.
	Clusters []ClusterResponse `pulumi:"clusters"`
	// Davies-Bouldin index.
	DaviesBouldinIndex float64 `pulumi:"daviesBouldinIndex"`
	// Mean of squared distances between each sample to its cluster centroid.
	MeanSquaredDistance float64 `pulumi:"meanSquaredDistance"`
}

// Evaluation metrics for clustering models.
type ClusteringMetricsResponseOutput struct{ *pulumi.OutputState }

func (ClusteringMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusteringMetricsResponse)(nil)).Elem()
}

func (o ClusteringMetricsResponseOutput) ToClusteringMetricsResponseOutput() ClusteringMetricsResponseOutput {
	return o
}

func (o ClusteringMetricsResponseOutput) ToClusteringMetricsResponseOutputWithContext(ctx context.Context) ClusteringMetricsResponseOutput {
	return o
}

// Information for all clusters.
func (o ClusteringMetricsResponseOutput) Clusters() ClusterResponseArrayOutput {
	return o.ApplyT(func(v ClusteringMetricsResponse) []ClusterResponse { return v.Clusters }).(ClusterResponseArrayOutput)
}

// Davies-Bouldin index.
func (o ClusteringMetricsResponseOutput) DaviesBouldinIndex() pulumi.Float64Output {
	return o.ApplyT(func(v ClusteringMetricsResponse) float64 { return v.DaviesBouldinIndex }).(pulumi.Float64Output)
}

// Mean of squared distances between each sample to its cluster centroid.
func (o ClusteringMetricsResponseOutput) MeanSquaredDistance() pulumi.Float64Output {
	return o.ApplyT(func(v ClusteringMetricsResponse) float64 { return v.MeanSquaredDistance }).(pulumi.Float64Output)
}

// Configures table clustering.
type ClusteringResponse struct {
	// One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
	Fields []string `pulumi:"fields"`
}

// Configures table clustering.
type ClusteringResponseOutput struct{ *pulumi.OutputState }

func (ClusteringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusteringResponse)(nil)).Elem()
}

func (o ClusteringResponseOutput) ToClusteringResponseOutput() ClusteringResponseOutput {
	return o
}

func (o ClusteringResponseOutput) ToClusteringResponseOutputWithContext(ctx context.Context) ClusteringResponseOutput {
	return o
}

// One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations
func (o ClusteringResponseOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusteringResponse) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Confusion matrix for multi-class classification models.
type ConfusionMatrixResponse struct {
	// Confidence threshold used when computing the entries of the confusion matrix.
	ConfidenceThreshold float64 `pulumi:"confidenceThreshold"`
	// One row per actual label.
	Rows []RowResponse `pulumi:"rows"`
}

// Confusion matrix for multi-class classification models.
type ConfusionMatrixResponseOutput struct{ *pulumi.OutputState }

func (ConfusionMatrixResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfusionMatrixResponse)(nil)).Elem()
}

func (o ConfusionMatrixResponseOutput) ToConfusionMatrixResponseOutput() ConfusionMatrixResponseOutput {
	return o
}

func (o ConfusionMatrixResponseOutput) ToConfusionMatrixResponseOutputWithContext(ctx context.Context) ConfusionMatrixResponseOutput {
	return o
}

// Confidence threshold used when computing the entries of the confusion matrix.
func (o ConfusionMatrixResponseOutput) ConfidenceThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v ConfusionMatrixResponse) float64 { return v.ConfidenceThreshold }).(pulumi.Float64Output)
}

// One row per actual label.
func (o ConfusionMatrixResponseOutput) Rows() RowResponseArrayOutput {
	return o.ApplyT(func(v ConfusionMatrixResponse) []RowResponse { return v.Rows }).(RowResponseArrayOutput)
}

type ConfusionMatrixResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfusionMatrixResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfusionMatrixResponse)(nil)).Elem()
}

func (o ConfusionMatrixResponseArrayOutput) ToConfusionMatrixResponseArrayOutput() ConfusionMatrixResponseArrayOutput {
	return o
}

func (o ConfusionMatrixResponseArrayOutput) ToConfusionMatrixResponseArrayOutputWithContext(ctx context.Context) ConfusionMatrixResponseArrayOutput {
	return o
}

func (o ConfusionMatrixResponseArrayOutput) Index(i pulumi.IntInput) ConfusionMatrixResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfusionMatrixResponse {
		return vs[0].([]ConfusionMatrixResponse)[vs[1].(int)]
	}).(ConfusionMatrixResponseOutput)
}

// A connection-level property to customize query behavior. Under JDBC, these correspond directly to connection properties passed to the DriverManager. Under ODBC, these correspond to properties in the connection string. Currently supported connection properties: * **dataset_project_id**: represents the default project for datasets that are used in the query. Setting the system variable `@@dataset_project_id` achieves the same behavior. For more information about system variables, see: https://cloud.google.com/bigquery/docs/reference/system-variables * **time_zone**: represents the default timezone used to run the query. * **session_id**: associates the query with a given session. * **query_label**: associates the query with a given job label. If set, all subsequent queries in a script or session will have this label. For the format in which a you can specify a query label, see labels in the JobConfiguration resource type: https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration Additional properties are allowed, but ignored. Specifying multiple connection properties with the same key returns an error.
type ConnectionProperty struct {
	// The key of the property to set.
	Key *string `pulumi:"key"`
	// The value of the property to set.
	Value *string `pulumi:"value"`
}

// ConnectionPropertyInput is an input type that accepts ConnectionPropertyArgs and ConnectionPropertyOutput values.
// You can construct a concrete instance of `ConnectionPropertyInput` via:
//
//	ConnectionPropertyArgs{...}
type ConnectionPropertyInput interface {
	pulumi.Input

	ToConnectionPropertyOutput() ConnectionPropertyOutput
	ToConnectionPropertyOutputWithContext(context.Context) ConnectionPropertyOutput
}

// A connection-level property to customize query behavior. Under JDBC, these correspond directly to connection properties passed to the DriverManager. Under ODBC, these correspond to properties in the connection string. Currently supported connection properties: * **dataset_project_id**: represents the default project for datasets that are used in the query. Setting the system variable `@@dataset_project_id` achieves the same behavior. For more information about system variables, see: https://cloud.google.com/bigquery/docs/reference/system-variables * **time_zone**: represents the default timezone used to run the query. * **session_id**: associates the query with a given session. * **query_label**: associates the query with a given job label. If set, all subsequent queries in a script or session will have this label. For the format in which a you can specify a query label, see labels in the JobConfiguration resource type: https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration Additional properties are allowed, but ignored. Specifying multiple connection properties with the same key returns an error.
type ConnectionPropertyArgs struct {
	// The key of the property to set.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The value of the property to set.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConnectionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperty)(nil)).Elem()
}

func (i ConnectionPropertyArgs) ToConnectionPropertyOutput() ConnectionPropertyOutput {
	return i.ToConnectionPropertyOutputWithContext(context.Background())
}

func (i ConnectionPropertyArgs) ToConnectionPropertyOutputWithContext(ctx context.Context) ConnectionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertyOutput)
}

// ConnectionPropertyArrayInput is an input type that accepts ConnectionPropertyArray and ConnectionPropertyArrayOutput values.
// You can construct a concrete instance of `ConnectionPropertyArrayInput` via:
//
//	ConnectionPropertyArray{ ConnectionPropertyArgs{...} }
type ConnectionPropertyArrayInput interface {
	pulumi.Input

	ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput
	ToConnectionPropertyArrayOutputWithContext(context.Context) ConnectionPropertyArrayOutput
}

type ConnectionPropertyArray []ConnectionPropertyInput

func (ConnectionPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionProperty)(nil)).Elem()
}

func (i ConnectionPropertyArray) ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput {
	return i.ToConnectionPropertyArrayOutputWithContext(context.Background())
}

func (i ConnectionPropertyArray) ToConnectionPropertyArrayOutputWithContext(ctx context.Context) ConnectionPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertyArrayOutput)
}

// A connection-level property to customize query behavior. Under JDBC, these correspond directly to connection properties passed to the DriverManager. Under ODBC, these correspond to properties in the connection string. Currently supported connection properties: * **dataset_project_id**: represents the default project for datasets that are used in the query. Setting the system variable `@@dataset_project_id` achieves the same behavior. For more information about system variables, see: https://cloud.google.com/bigquery/docs/reference/system-variables * **time_zone**: represents the default timezone used to run the query. * **session_id**: associates the query with a given session. * **query_label**: associates the query with a given job label. If set, all subsequent queries in a script or session will have this label. For the format in which a you can specify a query label, see labels in the JobConfiguration resource type: https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration Additional properties are allowed, but ignored. Specifying multiple connection properties with the same key returns an error.
type ConnectionPropertyOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperty)(nil)).Elem()
}

func (o ConnectionPropertyOutput) ToConnectionPropertyOutput() ConnectionPropertyOutput {
	return o
}

func (o ConnectionPropertyOutput) ToConnectionPropertyOutputWithContext(ctx context.Context) ConnectionPropertyOutput {
	return o
}

// The key of the property to set.
func (o ConnectionPropertyOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperty) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The value of the property to set.
func (o ConnectionPropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConnectionPropertyArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionProperty)(nil)).Elem()
}

func (o ConnectionPropertyArrayOutput) ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput {
	return o
}

func (o ConnectionPropertyArrayOutput) ToConnectionPropertyArrayOutputWithContext(ctx context.Context) ConnectionPropertyArrayOutput {
	return o
}

func (o ConnectionPropertyArrayOutput) Index(i pulumi.IntInput) ConnectionPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionProperty {
		return vs[0].([]ConnectionProperty)[vs[1].(int)]
	}).(ConnectionPropertyOutput)
}

// A connection-level property to customize query behavior. Under JDBC, these correspond directly to connection properties passed to the DriverManager. Under ODBC, these correspond to properties in the connection string. Currently supported connection properties: * **dataset_project_id**: represents the default project for datasets that are used in the query. Setting the system variable `@@dataset_project_id` achieves the same behavior. For more information about system variables, see: https://cloud.google.com/bigquery/docs/reference/system-variables * **time_zone**: represents the default timezone used to run the query. * **session_id**: associates the query with a given session. * **query_label**: associates the query with a given job label. If set, all subsequent queries in a script or session will have this label. For the format in which a you can specify a query label, see labels in the JobConfiguration resource type: https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration Additional properties are allowed, but ignored. Specifying multiple connection properties with the same key returns an error.
type ConnectionPropertyResponse struct {
	// The key of the property to set.
	Key string `pulumi:"key"`
	// The value of the property to set.
	Value string `pulumi:"value"`
}

// A connection-level property to customize query behavior. Under JDBC, these correspond directly to connection properties passed to the DriverManager. Under ODBC, these correspond to properties in the connection string. Currently supported connection properties: * **dataset_project_id**: represents the default project for datasets that are used in the query. Setting the system variable `@@dataset_project_id` achieves the same behavior. For more information about system variables, see: https://cloud.google.com/bigquery/docs/reference/system-variables * **time_zone**: represents the default timezone used to run the query. * **session_id**: associates the query with a given session. * **query_label**: associates the query with a given job label. If set, all subsequent queries in a script or session will have this label. For the format in which a you can specify a query label, see labels in the JobConfiguration resource type: https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#jobconfiguration Additional properties are allowed, but ignored. Specifying multiple connection properties with the same key returns an error.
type ConnectionPropertyResponseOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPropertyResponse)(nil)).Elem()
}

func (o ConnectionPropertyResponseOutput) ToConnectionPropertyResponseOutput() ConnectionPropertyResponseOutput {
	return o
}

func (o ConnectionPropertyResponseOutput) ToConnectionPropertyResponseOutputWithContext(ctx context.Context) ConnectionPropertyResponseOutput {
	return o
}

// The key of the property to set.
func (o ConnectionPropertyResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertyResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The value of the property to set.
func (o ConnectionPropertyResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertyResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ConnectionPropertyResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionPropertyResponse)(nil)).Elem()
}

func (o ConnectionPropertyResponseArrayOutput) ToConnectionPropertyResponseArrayOutput() ConnectionPropertyResponseArrayOutput {
	return o
}

func (o ConnectionPropertyResponseArrayOutput) ToConnectionPropertyResponseArrayOutputWithContext(ctx context.Context) ConnectionPropertyResponseArrayOutput {
	return o
}

func (o ConnectionPropertyResponseArrayOutput) Index(i pulumi.IntInput) ConnectionPropertyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionPropertyResponse {
		return vs[0].([]ConnectionPropertyResponse)[vs[1].(int)]
	}).(ConnectionPropertyResponseOutput)
}

// Information related to a CSV data source.
type CsvOptions struct {
	// Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding *string `pulumi:"encoding"`
	// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// [Optional] A custom string that will represent a NULL value in CSV import data.
	NullMarker *string `pulumi:"nullMarker"`
	// Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters *bool `pulumi:"preserveAsciiControlCharacters"`
	// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ("). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '.
	Quote *string `pulumi:"quote"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *string `pulumi:"skipLeadingRows"`
}

// CsvOptionsInput is an input type that accepts CsvOptionsArgs and CsvOptionsOutput values.
// You can construct a concrete instance of `CsvOptionsInput` via:
//
//	CsvOptionsArgs{...}
type CsvOptionsInput interface {
	pulumi.Input

	ToCsvOptionsOutput() CsvOptionsOutput
	ToCsvOptionsOutputWithContext(context.Context) CsvOptionsOutput
}

// Information related to a CSV data source.
type CsvOptionsArgs struct {
	// Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// [Optional] A custom string that will represent a NULL value in CSV import data.
	NullMarker pulumi.StringPtrInput `pulumi:"nullMarker"`
	// Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters pulumi.BoolPtrInput `pulumi:"preserveAsciiControlCharacters"`
	// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ("). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '.
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.StringPtrInput `pulumi:"skipLeadingRows"`
}

func (CsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptions)(nil)).Elem()
}

func (i CsvOptionsArgs) ToCsvOptionsOutput() CsvOptionsOutput {
	return i.ToCsvOptionsOutputWithContext(context.Background())
}

func (i CsvOptionsArgs) ToCsvOptionsOutputWithContext(ctx context.Context) CsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsOutput)
}

func (i CsvOptionsArgs) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return i.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (i CsvOptionsArgs) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsOutput).ToCsvOptionsPtrOutputWithContext(ctx)
}

// CsvOptionsPtrInput is an input type that accepts CsvOptionsArgs, CsvOptionsPtr and CsvOptionsPtrOutput values.
// You can construct a concrete instance of `CsvOptionsPtrInput` via:
//
//	        CsvOptionsArgs{...}
//
//	or:
//
//	        nil
type CsvOptionsPtrInput interface {
	pulumi.Input

	ToCsvOptionsPtrOutput() CsvOptionsPtrOutput
	ToCsvOptionsPtrOutputWithContext(context.Context) CsvOptionsPtrOutput
}

type csvOptionsPtrType CsvOptionsArgs

func CsvOptionsPtr(v *CsvOptionsArgs) CsvOptionsPtrInput {
	return (*csvOptionsPtrType)(v)
}

func (*csvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvOptions)(nil)).Elem()
}

func (i *csvOptionsPtrType) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return i.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *csvOptionsPtrType) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsPtrOutput)
}

// Information related to a CSV data source.
type CsvOptionsOutput struct{ *pulumi.OutputState }

func (CsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptions)(nil)).Elem()
}

func (o CsvOptionsOutput) ToCsvOptionsOutput() CsvOptionsOutput {
	return o
}

func (o CsvOptionsOutput) ToCsvOptionsOutputWithContext(ctx context.Context) CsvOptionsOutput {
	return o
}

func (o CsvOptionsOutput) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return o.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (o CsvOptionsOutput) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsvOptions) *CsvOptions {
		return &v
	}).(CsvOptionsPtrOutput)
}

// Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
func (o CsvOptionsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// [Optional] A custom string that will represent a NULL value in CSV import data.
func (o CsvOptionsOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.NullMarker }).(pulumi.StringPtrOutput)
}

// Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
func (o CsvOptionsOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolPtrOutput)
}

// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ("). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '.
func (o CsvOptionsOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.SkipLeadingRows }).(pulumi.StringPtrOutput)
}

type CsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (CsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvOptions)(nil)).Elem()
}

func (o CsvOptionsPtrOutput) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return o
}

func (o CsvOptionsPtrOutput) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return o
}

func (o CsvOptionsPtrOutput) Elem() CsvOptionsOutput {
	return o.ApplyT(func(v *CsvOptions) CsvOptions {
		if v != nil {
			return *v
		}
		var ret CsvOptions
		return ret
	}).(CsvOptionsOutput)
}

// Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
func (o CsvOptionsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// [Optional] A custom string that will represent a NULL value in CSV import data.
func (o CsvOptionsPtrOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.NullMarker
	}).(pulumi.StringPtrOutput)
}

// Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
func (o CsvOptionsPtrOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveAsciiControlCharacters
	}).(pulumi.BoolPtrOutput)
}

// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ("). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '.
func (o CsvOptionsPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Quote
	}).(pulumi.StringPtrOutput)
}

// Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsPtrOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.StringPtrOutput)
}

// Information related to a CSV data source.
type CsvOptionsResponse struct {
	// Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows bool `pulumi:"allowJaggedRows"`
	// Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines bool `pulumi:"allowQuotedNewlines"`
	// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding string `pulumi:"encoding"`
	// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
	FieldDelimiter string `pulumi:"fieldDelimiter"`
	// [Optional] A custom string that will represent a NULL value in CSV import data.
	NullMarker string `pulumi:"nullMarker"`
	// Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters bool `pulumi:"preserveAsciiControlCharacters"`
	// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ("). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '.
	Quote string `pulumi:"quote"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows string `pulumi:"skipLeadingRows"`
}

// Information related to a CSV data source.
type CsvOptionsResponseOutput struct{ *pulumi.OutputState }

func (CsvOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptionsResponse)(nil)).Elem()
}

func (o CsvOptionsResponseOutput) ToCsvOptionsResponseOutput() CsvOptionsResponseOutput {
	return o
}

func (o CsvOptionsResponseOutput) ToCsvOptionsResponseOutputWithContext(ctx context.Context) CsvOptionsResponseOutput {
	return o
}

// Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsResponseOutput) AllowJaggedRows() pulumi.BoolOutput {
	return o.ApplyT(func(v CsvOptionsResponse) bool { return v.AllowJaggedRows }).(pulumi.BoolOutput)
}

// Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsResponseOutput) AllowQuotedNewlines() pulumi.BoolOutput {
	return o.ApplyT(func(v CsvOptionsResponse) bool { return v.AllowQuotedNewlines }).(pulumi.BoolOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
func (o CsvOptionsResponseOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// [Optional] A custom string that will represent a NULL value in CSV import data.
func (o CsvOptionsResponseOutput) NullMarker() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.NullMarker }).(pulumi.StringOutput)
}

// Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
func (o CsvOptionsResponseOutput) PreserveAsciiControlCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v CsvOptionsResponse) bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolOutput)
}

// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ("). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '.
func (o CsvOptionsResponseOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.Quote }).(pulumi.StringOutput)
}

// Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsResponseOutput) SkipLeadingRows() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.SkipLeadingRows }).(pulumi.StringOutput)
}

// Statistics for data-masking.
type DataMaskingStatisticsResponse struct {
	// Whether any accessed data was protected by the data masking.
	DataMaskingApplied bool `pulumi:"dataMaskingApplied"`
}

// Statistics for data-masking.
type DataMaskingStatisticsResponseOutput struct{ *pulumi.OutputState }

func (DataMaskingStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMaskingStatisticsResponse)(nil)).Elem()
}

func (o DataMaskingStatisticsResponseOutput) ToDataMaskingStatisticsResponseOutput() DataMaskingStatisticsResponseOutput {
	return o
}

func (o DataMaskingStatisticsResponseOutput) ToDataMaskingStatisticsResponseOutputWithContext(ctx context.Context) DataMaskingStatisticsResponseOutput {
	return o
}

// Whether any accessed data was protected by the data masking.
func (o DataMaskingStatisticsResponseOutput) DataMaskingApplied() pulumi.BoolOutput {
	return o.ApplyT(func(v DataMaskingStatisticsResponse) bool { return v.DataMaskingApplied }).(pulumi.BoolOutput)
}

// Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
type DatasetAccessEntry struct {
	// The dataset this entry applies to
	Dataset *DatasetReference `pulumi:"dataset"`
	// Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
	TargetTypes []DatasetAccessEntryTargetTypesItem `pulumi:"targetTypes"`
}

// DatasetAccessEntryInput is an input type that accepts DatasetAccessEntryArgs and DatasetAccessEntryOutput values.
// You can construct a concrete instance of `DatasetAccessEntryInput` via:
//
//	DatasetAccessEntryArgs{...}
type DatasetAccessEntryInput interface {
	pulumi.Input

	ToDatasetAccessEntryOutput() DatasetAccessEntryOutput
	ToDatasetAccessEntryOutputWithContext(context.Context) DatasetAccessEntryOutput
}

// Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
type DatasetAccessEntryArgs struct {
	// The dataset this entry applies to
	Dataset DatasetReferencePtrInput `pulumi:"dataset"`
	// Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
	TargetTypes DatasetAccessEntryTargetTypesItemArrayInput `pulumi:"targetTypes"`
}

func (DatasetAccessEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntry)(nil)).Elem()
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryOutput() DatasetAccessEntryOutput {
	return i.ToDatasetAccessEntryOutputWithContext(context.Background())
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryOutputWithContext(ctx context.Context) DatasetAccessEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessEntryOutput)
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return i.ToDatasetAccessEntryPtrOutputWithContext(context.Background())
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessEntryOutput).ToDatasetAccessEntryPtrOutputWithContext(ctx)
}

// DatasetAccessEntryPtrInput is an input type that accepts DatasetAccessEntryArgs, DatasetAccessEntryPtr and DatasetAccessEntryPtrOutput values.
// You can construct a concrete instance of `DatasetAccessEntryPtrInput` via:
//
//	        DatasetAccessEntryArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessEntryPtrInput interface {
	pulumi.Input

	ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput
	ToDatasetAccessEntryPtrOutputWithContext(context.Context) DatasetAccessEntryPtrOutput
}

type datasetAccessEntryPtrType DatasetAccessEntryArgs

func DatasetAccessEntryPtr(v *DatasetAccessEntryArgs) DatasetAccessEntryPtrInput {
	return (*datasetAccessEntryPtrType)(v)
}

func (*datasetAccessEntryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessEntry)(nil)).Elem()
}

func (i *datasetAccessEntryPtrType) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return i.ToDatasetAccessEntryPtrOutputWithContext(context.Background())
}

func (i *datasetAccessEntryPtrType) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessEntryPtrOutput)
}

// Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
type DatasetAccessEntryOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntry)(nil)).Elem()
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryOutput() DatasetAccessEntryOutput {
	return o
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryOutputWithContext(ctx context.Context) DatasetAccessEntryOutput {
	return o
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return o.ToDatasetAccessEntryPtrOutputWithContext(context.Background())
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessEntry) *DatasetAccessEntry {
		return &v
	}).(DatasetAccessEntryPtrOutput)
}

// The dataset this entry applies to
func (o DatasetAccessEntryOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v DatasetAccessEntry) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

// Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
func (o DatasetAccessEntryOutput) TargetTypes() DatasetAccessEntryTargetTypesItemArrayOutput {
	return o.ApplyT(func(v DatasetAccessEntry) []DatasetAccessEntryTargetTypesItem { return v.TargetTypes }).(DatasetAccessEntryTargetTypesItemArrayOutput)
}

type DatasetAccessEntryPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessEntry)(nil)).Elem()
}

func (o DatasetAccessEntryPtrOutput) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return o
}

func (o DatasetAccessEntryPtrOutput) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return o
}

func (o DatasetAccessEntryPtrOutput) Elem() DatasetAccessEntryOutput {
	return o.ApplyT(func(v *DatasetAccessEntry) DatasetAccessEntry {
		if v != nil {
			return *v
		}
		var ret DatasetAccessEntry
		return ret
	}).(DatasetAccessEntryOutput)
}

// The dataset this entry applies to
func (o DatasetAccessEntryPtrOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v *DatasetAccessEntry) *DatasetReference {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(DatasetReferencePtrOutput)
}

// Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
func (o DatasetAccessEntryPtrOutput) TargetTypes() DatasetAccessEntryTargetTypesItemArrayOutput {
	return o.ApplyT(func(v *DatasetAccessEntry) []DatasetAccessEntryTargetTypesItem {
		if v == nil {
			return nil
		}
		return v.TargetTypes
	}).(DatasetAccessEntryTargetTypesItemArrayOutput)
}

// Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
type DatasetAccessEntryResponse struct {
	// The dataset this entry applies to
	Dataset DatasetReferenceResponse `pulumi:"dataset"`
	// Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
	TargetTypes []string `pulumi:"targetTypes"`
}

// Grants all resources of particular types in a particular dataset read access to the current dataset. Similar to how individually authorized views work, updates to any resource granted through its dataset (including creation of new resources) requires read permission to referenced resources, plus write permission to the authorizing dataset.
type DatasetAccessEntryResponseOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntryResponse)(nil)).Elem()
}

func (o DatasetAccessEntryResponseOutput) ToDatasetAccessEntryResponseOutput() DatasetAccessEntryResponseOutput {
	return o
}

func (o DatasetAccessEntryResponseOutput) ToDatasetAccessEntryResponseOutputWithContext(ctx context.Context) DatasetAccessEntryResponseOutput {
	return o
}

// The dataset this entry applies to
func (o DatasetAccessEntryResponseOutput) Dataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v DatasetAccessEntryResponse) DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponseOutput)
}

// Which resources in the dataset this entry applies to. Currently, only views are supported, but additional target types may be added in the future.
func (o DatasetAccessEntryResponseOutput) TargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatasetAccessEntryResponse) []string { return v.TargetTypes }).(pulumi.StringArrayOutput)
}

// An object that defines dataset access for an entity.
type DatasetAccessItem struct {
	// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
	Dataset *DatasetAccessEntry `pulumi:"dataset"`
	// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
	Domain *string `pulumi:"domain"`
	// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
	GroupByEmail *string `pulumi:"groupByEmail"`
	// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
	IamMember *string `pulumi:"iamMember"`
	// An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
	Role *string `pulumi:"role"`
	// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
	Routine *RoutineReference `pulumi:"routine"`
	// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
	SpecialGroup *string `pulumi:"specialGroup"`
	// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
	UserByEmail *string `pulumi:"userByEmail"`
	// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to views/tables/routines in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
	View *TableReference `pulumi:"view"`
}

// DatasetAccessItemInput is an input type that accepts DatasetAccessItemArgs and DatasetAccessItemOutput values.
// You can construct a concrete instance of `DatasetAccessItemInput` via:
//
//	DatasetAccessItemArgs{...}
type DatasetAccessItemInput interface {
	pulumi.Input

	ToDatasetAccessItemOutput() DatasetAccessItemOutput
	ToDatasetAccessItemOutputWithContext(context.Context) DatasetAccessItemOutput
}

// An object that defines dataset access for an entity.
type DatasetAccessItemArgs struct {
	// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
	Dataset DatasetAccessEntryPtrInput `pulumi:"dataset"`
	// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
	GroupByEmail pulumi.StringPtrInput `pulumi:"groupByEmail"`
	// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
	IamMember pulumi.StringPtrInput `pulumi:"iamMember"`
	// An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
	Role pulumi.StringPtrInput `pulumi:"role"`
	// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
	Routine RoutineReferencePtrInput `pulumi:"routine"`
	// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
	SpecialGroup pulumi.StringPtrInput `pulumi:"specialGroup"`
	// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
	UserByEmail pulumi.StringPtrInput `pulumi:"userByEmail"`
	// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to views/tables/routines in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
	View TableReferencePtrInput `pulumi:"view"`
}

func (DatasetAccessItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessItem)(nil)).Elem()
}

func (i DatasetAccessItemArgs) ToDatasetAccessItemOutput() DatasetAccessItemOutput {
	return i.ToDatasetAccessItemOutputWithContext(context.Background())
}

func (i DatasetAccessItemArgs) ToDatasetAccessItemOutputWithContext(ctx context.Context) DatasetAccessItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessItemOutput)
}

// DatasetAccessItemArrayInput is an input type that accepts DatasetAccessItemArray and DatasetAccessItemArrayOutput values.
// You can construct a concrete instance of `DatasetAccessItemArrayInput` via:
//
//	DatasetAccessItemArray{ DatasetAccessItemArgs{...} }
type DatasetAccessItemArrayInput interface {
	pulumi.Input

	ToDatasetAccessItemArrayOutput() DatasetAccessItemArrayOutput
	ToDatasetAccessItemArrayOutputWithContext(context.Context) DatasetAccessItemArrayOutput
}

type DatasetAccessItemArray []DatasetAccessItemInput

func (DatasetAccessItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessItem)(nil)).Elem()
}

func (i DatasetAccessItemArray) ToDatasetAccessItemArrayOutput() DatasetAccessItemArrayOutput {
	return i.ToDatasetAccessItemArrayOutputWithContext(context.Background())
}

func (i DatasetAccessItemArray) ToDatasetAccessItemArrayOutputWithContext(ctx context.Context) DatasetAccessItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessItemArrayOutput)
}

// An object that defines dataset access for an entity.
type DatasetAccessItemOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessItem)(nil)).Elem()
}

func (o DatasetAccessItemOutput) ToDatasetAccessItemOutput() DatasetAccessItemOutput {
	return o
}

func (o DatasetAccessItemOutput) ToDatasetAccessItemOutputWithContext(ctx context.Context) DatasetAccessItemOutput {
	return o
}

// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
func (o DatasetAccessItemOutput) Dataset() DatasetAccessEntryPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *DatasetAccessEntry { return v.Dataset }).(DatasetAccessEntryPtrOutput)
}

// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
func (o DatasetAccessItemOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
func (o DatasetAccessItemOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
func (o DatasetAccessItemOutput) IamMember() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.IamMember }).(pulumi.StringPtrOutput)
}

// An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
func (o DatasetAccessItemOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
func (o DatasetAccessItemOutput) Routine() RoutineReferencePtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *RoutineReference { return v.Routine }).(RoutineReferencePtrOutput)
}

// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
func (o DatasetAccessItemOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
func (o DatasetAccessItemOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to views/tables/routines in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
func (o DatasetAccessItemOutput) View() TableReferencePtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *TableReference { return v.View }).(TableReferencePtrOutput)
}

type DatasetAccessItemArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessItem)(nil)).Elem()
}

func (o DatasetAccessItemArrayOutput) ToDatasetAccessItemArrayOutput() DatasetAccessItemArrayOutput {
	return o
}

func (o DatasetAccessItemArrayOutput) ToDatasetAccessItemArrayOutputWithContext(ctx context.Context) DatasetAccessItemArrayOutput {
	return o
}

func (o DatasetAccessItemArrayOutput) Index(i pulumi.IntInput) DatasetAccessItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessItem {
		return vs[0].([]DatasetAccessItem)[vs[1].(int)]
	}).(DatasetAccessItemOutput)
}

// An object that defines dataset access for an entity.
type DatasetAccessItemResponse struct {
	// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
	Dataset DatasetAccessEntryResponse `pulumi:"dataset"`
	// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
	Domain string `pulumi:"domain"`
	// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
	GroupByEmail string `pulumi:"groupByEmail"`
	// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
	IamMember string `pulumi:"iamMember"`
	// An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
	Role string `pulumi:"role"`
	// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
	Routine RoutineReferenceResponse `pulumi:"routine"`
	// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
	SpecialGroup string `pulumi:"specialGroup"`
	// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
	UserByEmail string `pulumi:"userByEmail"`
	// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to views/tables/routines in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
	View TableReferenceResponse `pulumi:"view"`
}

// An object that defines dataset access for an entity.
type DatasetAccessItemResponseOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessItemResponse)(nil)).Elem()
}

func (o DatasetAccessItemResponseOutput) ToDatasetAccessItemResponseOutput() DatasetAccessItemResponseOutput {
	return o
}

func (o DatasetAccessItemResponseOutput) ToDatasetAccessItemResponseOutputWithContext(ctx context.Context) DatasetAccessItemResponseOutput {
	return o
}

// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
func (o DatasetAccessItemResponseOutput) Dataset() DatasetAccessEntryResponseOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) DatasetAccessEntryResponse { return v.Dataset }).(DatasetAccessEntryResponseOutput)
}

// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
func (o DatasetAccessItemResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
func (o DatasetAccessItemResponseOutput) GroupByEmail() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.GroupByEmail }).(pulumi.StringOutput)
}

// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
func (o DatasetAccessItemResponseOutput) IamMember() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.IamMember }).(pulumi.StringOutput)
}

// An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
func (o DatasetAccessItemResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.Role }).(pulumi.StringOutput)
}

// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
func (o DatasetAccessItemResponseOutput) Routine() RoutineReferenceResponseOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) RoutineReferenceResponse { return v.Routine }).(RoutineReferenceResponseOutput)
}

// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
func (o DatasetAccessItemResponseOutput) SpecialGroup() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.SpecialGroup }).(pulumi.StringOutput)
}

// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
func (o DatasetAccessItemResponseOutput) UserByEmail() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.UserByEmail }).(pulumi.StringOutput)
}

// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to views/tables/routines in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
func (o DatasetAccessItemResponseOutput) View() TableReferenceResponseOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) TableReferenceResponse { return v.View }).(TableReferenceResponseOutput)
}

type DatasetAccessItemResponseArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessItemResponse)(nil)).Elem()
}

func (o DatasetAccessItemResponseArrayOutput) ToDatasetAccessItemResponseArrayOutput() DatasetAccessItemResponseArrayOutput {
	return o
}

func (o DatasetAccessItemResponseArrayOutput) ToDatasetAccessItemResponseArrayOutputWithContext(ctx context.Context) DatasetAccessItemResponseArrayOutput {
	return o
}

func (o DatasetAccessItemResponseArrayOutput) Index(i pulumi.IntInput) DatasetAccessItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessItemResponse {
		return vs[0].([]DatasetAccessItemResponse)[vs[1].(int)]
	}).(DatasetAccessItemResponseOutput)
}

type DatasetReference struct {
	// A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId string `pulumi:"datasetId"`
	// Optional. The ID of the project containing this dataset.
	Project *string `pulumi:"project"`
}

// DatasetReferenceInput is an input type that accepts DatasetReferenceArgs and DatasetReferenceOutput values.
// You can construct a concrete instance of `DatasetReferenceInput` via:
//
//	DatasetReferenceArgs{...}
type DatasetReferenceInput interface {
	pulumi.Input

	ToDatasetReferenceOutput() DatasetReferenceOutput
	ToDatasetReferenceOutputWithContext(context.Context) DatasetReferenceOutput
}

type DatasetReferenceArgs struct {
	// A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// Optional. The ID of the project containing this dataset.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (DatasetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return i.ToDatasetReferenceOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput)
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput).ToDatasetReferencePtrOutputWithContext(ctx)
}

// DatasetReferencePtrInput is an input type that accepts DatasetReferenceArgs, DatasetReferencePtr and DatasetReferencePtrOutput values.
// You can construct a concrete instance of `DatasetReferencePtrInput` via:
//
//	        DatasetReferenceArgs{...}
//
//	or:
//
//	        nil
type DatasetReferencePtrInput interface {
	pulumi.Input

	ToDatasetReferencePtrOutput() DatasetReferencePtrOutput
	ToDatasetReferencePtrOutputWithContext(context.Context) DatasetReferencePtrOutput
}

type datasetReferencePtrType DatasetReferenceArgs

func DatasetReferencePtr(v *DatasetReferenceArgs) DatasetReferencePtrInput {
	return (*datasetReferencePtrType)(v)
}

func (*datasetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferencePtrOutput)
}

type DatasetReferenceOutput struct{ *pulumi.OutputState }

func (DatasetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetReference) *DatasetReference {
		return &v
	}).(DatasetReferencePtrOutput)
}

// A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferenceOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReference) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Optional. The ID of the project containing this dataset.
func (o DatasetReferenceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetReference) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type DatasetReferencePtrOutput struct{ *pulumi.OutputState }

func (DatasetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) Elem() DatasetReferenceOutput {
	return o.ApplyT(func(v *DatasetReference) DatasetReference {
		if v != nil {
			return *v
		}
		var ret DatasetReference
		return ret
	}).(DatasetReferenceOutput)
}

// A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// Optional. The ID of the project containing this dataset.
func (o DatasetReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

type DatasetReferenceResponse struct {
	// A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId string `pulumi:"datasetId"`
	// Optional. The ID of the project containing this dataset.
	Project string `pulumi:"project"`
}

type DatasetReferenceResponseOutput struct{ *pulumi.OutputState }

func (DatasetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReferenceResponse)(nil)).Elem()
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutput() DatasetReferenceResponseOutput {
	return o
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutputWithContext(ctx context.Context) DatasetReferenceResponseOutput {
	return o
}

// A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// Optional. The ID of the project containing this dataset.
func (o DatasetReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// A global tag managed by Resource Manager. https://cloud.google.com/iam/docs/tags-access-control#definitions
type DatasetTagsItemResponse struct {
	// The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
	TagKey string `pulumi:"tagKey"`
	// The friendly short name of the tag value, e.g. "production".
	TagValue string `pulumi:"tagValue"`
}

// A global tag managed by Resource Manager. https://cloud.google.com/iam/docs/tags-access-control#definitions
type DatasetTagsItemResponseOutput struct{ *pulumi.OutputState }

func (DatasetTagsItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTagsItemResponse)(nil)).Elem()
}

func (o DatasetTagsItemResponseOutput) ToDatasetTagsItemResponseOutput() DatasetTagsItemResponseOutput {
	return o
}

func (o DatasetTagsItemResponseOutput) ToDatasetTagsItemResponseOutputWithContext(ctx context.Context) DatasetTagsItemResponseOutput {
	return o
}

// The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
func (o DatasetTagsItemResponseOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTagsItemResponse) string { return v.TagKey }).(pulumi.StringOutput)
}

// The friendly short name of the tag value, e.g. "production".
func (o DatasetTagsItemResponseOutput) TagValue() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTagsItemResponse) string { return v.TagValue }).(pulumi.StringOutput)
}

type DatasetTagsItemResponseArrayOutput struct{ *pulumi.OutputState }

func (DatasetTagsItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetTagsItemResponse)(nil)).Elem()
}

func (o DatasetTagsItemResponseArrayOutput) ToDatasetTagsItemResponseArrayOutput() DatasetTagsItemResponseArrayOutput {
	return o
}

func (o DatasetTagsItemResponseArrayOutput) ToDatasetTagsItemResponseArrayOutputWithContext(ctx context.Context) DatasetTagsItemResponseArrayOutput {
	return o
}

func (o DatasetTagsItemResponseArrayOutput) Index(i pulumi.IntInput) DatasetTagsItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetTagsItemResponse {
		return vs[0].([]DatasetTagsItemResponse)[vs[1].(int)]
	}).(DatasetTagsItemResponseOutput)
}

// Properties for the destination table.
type DestinationTableProperties struct {
	// Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description *string `pulumi:"description"`
	// Internal use only.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.
	FriendlyName *string `pulumi:"friendlyName"`
	// Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels map[string]string `pulumi:"labels"`
}

// DestinationTablePropertiesInput is an input type that accepts DestinationTablePropertiesArgs and DestinationTablePropertiesOutput values.
// You can construct a concrete instance of `DestinationTablePropertiesInput` via:
//
//	DestinationTablePropertiesArgs{...}
type DestinationTablePropertiesInput interface {
	pulumi.Input

	ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput
	ToDestinationTablePropertiesOutputWithContext(context.Context) DestinationTablePropertiesOutput
}

// Properties for the destination table.
type DestinationTablePropertiesArgs struct {
	// Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Internal use only.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (DestinationTablePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTableProperties)(nil)).Elem()
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput {
	return i.ToDestinationTablePropertiesOutputWithContext(context.Background())
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesOutputWithContext(ctx context.Context) DestinationTablePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesOutput)
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return i.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesOutput).ToDestinationTablePropertiesPtrOutputWithContext(ctx)
}

// DestinationTablePropertiesPtrInput is an input type that accepts DestinationTablePropertiesArgs, DestinationTablePropertiesPtr and DestinationTablePropertiesPtrOutput values.
// You can construct a concrete instance of `DestinationTablePropertiesPtrInput` via:
//
//	        DestinationTablePropertiesArgs{...}
//
//	or:
//
//	        nil
type DestinationTablePropertiesPtrInput interface {
	pulumi.Input

	ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput
	ToDestinationTablePropertiesPtrOutputWithContext(context.Context) DestinationTablePropertiesPtrOutput
}

type destinationTablePropertiesPtrType DestinationTablePropertiesArgs

func DestinationTablePropertiesPtr(v *DestinationTablePropertiesArgs) DestinationTablePropertiesPtrInput {
	return (*destinationTablePropertiesPtrType)(v)
}

func (*destinationTablePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTableProperties)(nil)).Elem()
}

func (i *destinationTablePropertiesPtrType) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return i.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (i *destinationTablePropertiesPtrType) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesPtrOutput)
}

// Properties for the destination table.
type DestinationTablePropertiesOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTableProperties)(nil)).Elem()
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput {
	return o
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesOutputWithContext(ctx context.Context) DestinationTablePropertiesOutput {
	return o
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return o.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationTableProperties) *DestinationTableProperties {
		return &v
	}).(DestinationTablePropertiesPtrOutput)
}

// Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Internal use only.
func (o DestinationTablePropertiesOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.
func (o DestinationTablePropertiesOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationTableProperties) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type DestinationTablePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTableProperties)(nil)).Elem()
}

func (o DestinationTablePropertiesPtrOutput) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return o
}

func (o DestinationTablePropertiesPtrOutput) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return o
}

func (o DestinationTablePropertiesPtrOutput) Elem() DestinationTablePropertiesOutput {
	return o.ApplyT(func(v *DestinationTableProperties) DestinationTableProperties {
		if v != nil {
			return *v
		}
		var ret DestinationTableProperties
		return ret
	}).(DestinationTablePropertiesOutput)
}

// Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Internal use only.
func (o DestinationTablePropertiesPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.
func (o DestinationTablePropertiesPtrOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.FriendlyName
	}).(pulumi.StringPtrOutput)
}

// Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DestinationTableProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Properties for the destination table.
type DestinationTablePropertiesResponse struct {
	// Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description string `pulumi:"description"`
	// Internal use only.
	ExpirationTime string `pulumi:"expirationTime"`
	// Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.
	FriendlyName string `pulumi:"friendlyName"`
	// Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels map[string]string `pulumi:"labels"`
}

// Properties for the destination table.
type DestinationTablePropertiesResponseOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTablePropertiesResponse)(nil)).Elem()
}

func (o DestinationTablePropertiesResponseOutput) ToDestinationTablePropertiesResponseOutput() DestinationTablePropertiesResponseOutput {
	return o
}

func (o DestinationTablePropertiesResponseOutput) ToDestinationTablePropertiesResponseOutputWithContext(ctx context.Context) DestinationTablePropertiesResponseOutput {
	return o
}

// Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Internal use only.
func (o DestinationTablePropertiesResponseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.
func (o DestinationTablePropertiesResponseOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) string { return v.FriendlyName }).(pulumi.StringOutput)
}

// Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Model evaluation metrics for dimensionality reduction models.
type DimensionalityReductionMetricsResponse struct {
	// Total percentage of variance explained by the selected principal components.
	TotalExplainedVarianceRatio float64 `pulumi:"totalExplainedVarianceRatio"`
}

// Model evaluation metrics for dimensionality reduction models.
type DimensionalityReductionMetricsResponseOutput struct{ *pulumi.OutputState }

func (DimensionalityReductionMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DimensionalityReductionMetricsResponse)(nil)).Elem()
}

func (o DimensionalityReductionMetricsResponseOutput) ToDimensionalityReductionMetricsResponseOutput() DimensionalityReductionMetricsResponseOutput {
	return o
}

func (o DimensionalityReductionMetricsResponseOutput) ToDimensionalityReductionMetricsResponseOutputWithContext(ctx context.Context) DimensionalityReductionMetricsResponseOutput {
	return o
}

// Total percentage of variance explained by the selected principal components.
func (o DimensionalityReductionMetricsResponseOutput) TotalExplainedVarianceRatio() pulumi.Float64Output {
	return o.ApplyT(func(v DimensionalityReductionMetricsResponse) float64 { return v.TotalExplainedVarianceRatio }).(pulumi.Float64Output)
}

// Detailed statistics for DML statements
type DmlStatisticsResponse struct {
	// Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE statements.
	DeletedRowCount string `pulumi:"deletedRowCount"`
	// Number of inserted Rows. Populated by DML INSERT and MERGE statements
	InsertedRowCount string `pulumi:"insertedRowCount"`
	// Number of updated Rows. Populated by DML UPDATE and MERGE statements.
	UpdatedRowCount string `pulumi:"updatedRowCount"`
}

// Detailed statistics for DML statements
type DmlStatisticsResponseOutput struct{ *pulumi.OutputState }

func (DmlStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DmlStatisticsResponse)(nil)).Elem()
}

func (o DmlStatisticsResponseOutput) ToDmlStatisticsResponseOutput() DmlStatisticsResponseOutput {
	return o
}

func (o DmlStatisticsResponseOutput) ToDmlStatisticsResponseOutputWithContext(ctx context.Context) DmlStatisticsResponseOutput {
	return o
}

// Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE statements.
func (o DmlStatisticsResponseOutput) DeletedRowCount() pulumi.StringOutput {
	return o.ApplyT(func(v DmlStatisticsResponse) string { return v.DeletedRowCount }).(pulumi.StringOutput)
}

// Number of inserted Rows. Populated by DML INSERT and MERGE statements
func (o DmlStatisticsResponseOutput) InsertedRowCount() pulumi.StringOutput {
	return o.ApplyT(func(v DmlStatisticsResponse) string { return v.InsertedRowCount }).(pulumi.StringOutput)
}

// Number of updated Rows. Populated by DML UPDATE and MERGE statements.
func (o DmlStatisticsResponseOutput) UpdatedRowCount() pulumi.StringOutput {
	return o.ApplyT(func(v DmlStatisticsResponse) string { return v.UpdatedRowCount }).(pulumi.StringOutput)
}

type EncryptionConfiguration struct {
	// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigurationInput is an input type that accepts EncryptionConfigurationArgs and EncryptionConfigurationOutput values.
// You can construct a concrete instance of `EncryptionConfigurationInput` via:
//
//	EncryptionConfigurationArgs{...}
type EncryptionConfigurationInput interface {
	pulumi.Input

	ToEncryptionConfigurationOutput() EncryptionConfigurationOutput
	ToEncryptionConfigurationOutputWithContext(context.Context) EncryptionConfigurationOutput
}

type EncryptionConfigurationArgs struct {
	// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return i.ToEncryptionConfigurationOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput)
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput).ToEncryptionConfigurationPtrOutputWithContext(ctx)
}

// EncryptionConfigurationPtrInput is an input type that accepts EncryptionConfigurationArgs, EncryptionConfigurationPtr and EncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigurationPtrInput` via:
//
//	        EncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput
	ToEncryptionConfigurationPtrOutputWithContext(context.Context) EncryptionConfigurationPtrOutput
}

type encryptionConfigurationPtrType EncryptionConfigurationArgs

func EncryptionConfigurationPtr(v *EncryptionConfigurationArgs) EncryptionConfigurationPtrInput {
	return (*encryptionConfigurationPtrType)(v)
}

func (*encryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationPtrOutput)
}

type EncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfiguration) *EncryptionConfiguration {
		return &v
	}).(EncryptionConfigurationPtrOutput)
}

// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) Elem() EncryptionConfigurationOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) EncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret EncryptionConfiguration
		return ret
	}).(EncryptionConfigurationOutput)
}

// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type EncryptionConfigurationResponse struct {
	// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type EncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutput() EncryptionConfigurationResponseOutput {
	return o
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutputWithContext(ctx context.Context) EncryptionConfigurationResponseOutput {
	return o
}

// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// A single entry in the confusion matrix.
type EntryResponse struct {
	// Number of items being predicted as this label.
	ItemCount string `pulumi:"itemCount"`
	// The predicted label. For confidence_threshold > 0, we will also add an entry indicating the number of items under the confidence threshold.
	PredictedLabel string `pulumi:"predictedLabel"`
}

// A single entry in the confusion matrix.
type EntryResponseOutput struct{ *pulumi.OutputState }

func (EntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntryResponse)(nil)).Elem()
}

func (o EntryResponseOutput) ToEntryResponseOutput() EntryResponseOutput {
	return o
}

func (o EntryResponseOutput) ToEntryResponseOutputWithContext(ctx context.Context) EntryResponseOutput {
	return o
}

// Number of items being predicted as this label.
func (o EntryResponseOutput) ItemCount() pulumi.StringOutput {
	return o.ApplyT(func(v EntryResponse) string { return v.ItemCount }).(pulumi.StringOutput)
}

// The predicted label. For confidence_threshold > 0, we will also add an entry indicating the number of items under the confidence threshold.
func (o EntryResponseOutput) PredictedLabel() pulumi.StringOutput {
	return o.ApplyT(func(v EntryResponse) string { return v.PredictedLabel }).(pulumi.StringOutput)
}

type EntryResponseArrayOutput struct{ *pulumi.OutputState }

func (EntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EntryResponse)(nil)).Elem()
}

func (o EntryResponseArrayOutput) ToEntryResponseArrayOutput() EntryResponseArrayOutput {
	return o
}

func (o EntryResponseArrayOutput) ToEntryResponseArrayOutputWithContext(ctx context.Context) EntryResponseArrayOutput {
	return o
}

func (o EntryResponseArrayOutput) Index(i pulumi.IntInput) EntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EntryResponse {
		return vs[0].([]EntryResponse)[vs[1].(int)]
	}).(EntryResponseOutput)
}

// Error details.
type ErrorProtoResponse struct {
	// Debugging information. This property is internal to Google and should not be used.
	DebugInfo string `pulumi:"debugInfo"`
	// Specifies where the error occurred, if present.
	Location string `pulumi:"location"`
	// A human-readable description of the error.
	Message string `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason string `pulumi:"reason"`
}

// Error details.
type ErrorProtoResponseOutput struct{ *pulumi.OutputState }

func (ErrorProtoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorProtoResponse)(nil)).Elem()
}

func (o ErrorProtoResponseOutput) ToErrorProtoResponseOutput() ErrorProtoResponseOutput {
	return o
}

func (o ErrorProtoResponseOutput) ToErrorProtoResponseOutputWithContext(ctx context.Context) ErrorProtoResponseOutput {
	return o
}

// Debugging information. This property is internal to Google and should not be used.
func (o ErrorProtoResponseOutput) DebugInfo() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.DebugInfo }).(pulumi.StringOutput)
}

// Specifies where the error occurred, if present.
func (o ErrorProtoResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.Location }).(pulumi.StringOutput)
}

// A human-readable description of the error.
func (o ErrorProtoResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.Message }).(pulumi.StringOutput)
}

// A short error code that summarizes the error.
func (o ErrorProtoResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.Reason }).(pulumi.StringOutput)
}

type ErrorProtoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorProtoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorProtoResponse)(nil)).Elem()
}

func (o ErrorProtoResponseArrayOutput) ToErrorProtoResponseArrayOutput() ErrorProtoResponseArrayOutput {
	return o
}

func (o ErrorProtoResponseArrayOutput) ToErrorProtoResponseArrayOutputWithContext(ctx context.Context) ErrorProtoResponseArrayOutput {
	return o
}

func (o ErrorProtoResponseArrayOutput) Index(i pulumi.IntInput) ErrorProtoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorProtoResponse {
		return vs[0].([]ErrorProtoResponse)[vs[1].(int)]
	}).(ErrorProtoResponseOutput)
}

// Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
type EvaluationMetricsResponse struct {
	// Populated for ARIMA models.
	ArimaForecastingMetrics ArimaForecastingMetricsResponse `pulumi:"arimaForecastingMetrics"`
	// Populated for binary classification/classifier models.
	BinaryClassificationMetrics BinaryClassificationMetricsResponse `pulumi:"binaryClassificationMetrics"`
	// Populated for clustering models.
	ClusteringMetrics ClusteringMetricsResponse `pulumi:"clusteringMetrics"`
	// Evaluation metrics when the model is a dimensionality reduction model, which currently includes PCA.
	DimensionalityReductionMetrics DimensionalityReductionMetricsResponse `pulumi:"dimensionalityReductionMetrics"`
	// Populated for multi-class classification/classifier models.
	MultiClassClassificationMetrics MultiClassClassificationMetricsResponse `pulumi:"multiClassClassificationMetrics"`
	// Populated for implicit feedback type matrix factorization models.
	RankingMetrics RankingMetricsResponse `pulumi:"rankingMetrics"`
	// Populated for regression models and explicit feedback type matrix factorization models.
	RegressionMetrics RegressionMetricsResponse `pulumi:"regressionMetrics"`
}

// Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
type EvaluationMetricsResponseOutput struct{ *pulumi.OutputState }

func (EvaluationMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EvaluationMetricsResponse)(nil)).Elem()
}

func (o EvaluationMetricsResponseOutput) ToEvaluationMetricsResponseOutput() EvaluationMetricsResponseOutput {
	return o
}

func (o EvaluationMetricsResponseOutput) ToEvaluationMetricsResponseOutputWithContext(ctx context.Context) EvaluationMetricsResponseOutput {
	return o
}

// Populated for ARIMA models.
func (o EvaluationMetricsResponseOutput) ArimaForecastingMetrics() ArimaForecastingMetricsResponseOutput {
	return o.ApplyT(func(v EvaluationMetricsResponse) ArimaForecastingMetricsResponse { return v.ArimaForecastingMetrics }).(ArimaForecastingMetricsResponseOutput)
}

// Populated for binary classification/classifier models.
func (o EvaluationMetricsResponseOutput) BinaryClassificationMetrics() BinaryClassificationMetricsResponseOutput {
	return o.ApplyT(func(v EvaluationMetricsResponse) BinaryClassificationMetricsResponse {
		return v.BinaryClassificationMetrics
	}).(BinaryClassificationMetricsResponseOutput)
}

// Populated for clustering models.
func (o EvaluationMetricsResponseOutput) ClusteringMetrics() ClusteringMetricsResponseOutput {
	return o.ApplyT(func(v EvaluationMetricsResponse) ClusteringMetricsResponse { return v.ClusteringMetrics }).(ClusteringMetricsResponseOutput)
}

// Evaluation metrics when the model is a dimensionality reduction model, which currently includes PCA.
func (o EvaluationMetricsResponseOutput) DimensionalityReductionMetrics() DimensionalityReductionMetricsResponseOutput {
	return o.ApplyT(func(v EvaluationMetricsResponse) DimensionalityReductionMetricsResponse {
		return v.DimensionalityReductionMetrics
	}).(DimensionalityReductionMetricsResponseOutput)
}

// Populated for multi-class classification/classifier models.
func (o EvaluationMetricsResponseOutput) MultiClassClassificationMetrics() MultiClassClassificationMetricsResponseOutput {
	return o.ApplyT(func(v EvaluationMetricsResponse) MultiClassClassificationMetricsResponse {
		return v.MultiClassClassificationMetrics
	}).(MultiClassClassificationMetricsResponseOutput)
}

// Populated for implicit feedback type matrix factorization models.
func (o EvaluationMetricsResponseOutput) RankingMetrics() RankingMetricsResponseOutput {
	return o.ApplyT(func(v EvaluationMetricsResponse) RankingMetricsResponse { return v.RankingMetrics }).(RankingMetricsResponseOutput)
}

// Populated for regression models and explicit feedback type matrix factorization models.
func (o EvaluationMetricsResponseOutput) RegressionMetrics() RegressionMetricsResponseOutput {
	return o.ApplyT(func(v EvaluationMetricsResponse) RegressionMetricsResponse { return v.RegressionMetrics }).(RegressionMetricsResponseOutput)
}

// A single stage of query execution.
type ExplainQueryStageResponse struct {
	// Number of parallel input segments completed.
	CompletedParallelInputs string `pulumi:"completedParallelInputs"`
	// Compute mode for this stage.
	ComputeMode string `pulumi:"computeMode"`
	// Milliseconds the average shard spent on CPU-bound tasks.
	ComputeMsAvg string `pulumi:"computeMsAvg"`
	// Milliseconds the slowest shard spent on CPU-bound tasks.
	ComputeMsMax string `pulumi:"computeMsMax"`
	// Relative amount of time the average shard spent on CPU-bound tasks.
	ComputeRatioAvg float64 `pulumi:"computeRatioAvg"`
	// Relative amount of time the slowest shard spent on CPU-bound tasks.
	ComputeRatioMax float64 `pulumi:"computeRatioMax"`
	// Stage end time represented as milliseconds since the epoch.
	EndMs string `pulumi:"endMs"`
	// IDs for stages that are inputs to this stage.
	InputStages []string `pulumi:"inputStages"`
	// Human-readable name for the stage.
	Name string `pulumi:"name"`
	// Number of parallel input segments to be processed
	ParallelInputs string `pulumi:"parallelInputs"`
	// Milliseconds the average shard spent reading input.
	ReadMsAvg string `pulumi:"readMsAvg"`
	// Milliseconds the slowest shard spent reading input.
	ReadMsMax string `pulumi:"readMsMax"`
	// Relative amount of time the average shard spent reading input.
	ReadRatioAvg float64 `pulumi:"readRatioAvg"`
	// Relative amount of time the slowest shard spent reading input.
	ReadRatioMax float64 `pulumi:"readRatioMax"`
	// Number of records read into the stage.
	RecordsRead string `pulumi:"recordsRead"`
	// Number of records written by the stage.
	RecordsWritten string `pulumi:"recordsWritten"`
	// Total number of bytes written to shuffle.
	ShuffleOutputBytes string `pulumi:"shuffleOutputBytes"`
	// Total number of bytes written to shuffle and spilled to disk.
	ShuffleOutputBytesSpilled string `pulumi:"shuffleOutputBytesSpilled"`
	// Slot-milliseconds used by the stage.
	SlotMs string `pulumi:"slotMs"`
	// Stage start time represented as milliseconds since the epoch.
	StartMs string `pulumi:"startMs"`
	// Current status for this stage.
	Status string `pulumi:"status"`
	// List of operations within the stage in dependency order (approximately chronological).
	Steps []ExplainQueryStepResponse `pulumi:"steps"`
	// Milliseconds the average shard spent waiting to be scheduled.
	WaitMsAvg string `pulumi:"waitMsAvg"`
	// Milliseconds the slowest shard spent waiting to be scheduled.
	WaitMsMax string `pulumi:"waitMsMax"`
	// Relative amount of time the average shard spent waiting to be scheduled.
	WaitRatioAvg float64 `pulumi:"waitRatioAvg"`
	// Relative amount of time the slowest shard spent waiting to be scheduled.
	WaitRatioMax float64 `pulumi:"waitRatioMax"`
	// Milliseconds the average shard spent on writing output.
	WriteMsAvg string `pulumi:"writeMsAvg"`
	// Milliseconds the slowest shard spent on writing output.
	WriteMsMax string `pulumi:"writeMsMax"`
	// Relative amount of time the average shard spent on writing output.
	WriteRatioAvg float64 `pulumi:"writeRatioAvg"`
	// Relative amount of time the slowest shard spent on writing output.
	WriteRatioMax float64 `pulumi:"writeRatioMax"`
}

// A single stage of query execution.
type ExplainQueryStageResponseOutput struct{ *pulumi.OutputState }

func (ExplainQueryStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStageResponse)(nil)).Elem()
}

func (o ExplainQueryStageResponseOutput) ToExplainQueryStageResponseOutput() ExplainQueryStageResponseOutput {
	return o
}

func (o ExplainQueryStageResponseOutput) ToExplainQueryStageResponseOutputWithContext(ctx context.Context) ExplainQueryStageResponseOutput {
	return o
}

// Number of parallel input segments completed.
func (o ExplainQueryStageResponseOutput) CompletedParallelInputs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.CompletedParallelInputs }).(pulumi.StringOutput)
}

// Compute mode for this stage.
func (o ExplainQueryStageResponseOutput) ComputeMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ComputeMode }).(pulumi.StringOutput)
}

// Milliseconds the average shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ComputeMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ComputeMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ComputeRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ComputeRatioMax }).(pulumi.Float64Output)
}

// Stage end time represented as milliseconds since the epoch.
func (o ExplainQueryStageResponseOutput) EndMs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.EndMs }).(pulumi.StringOutput)
}

// IDs for stages that are inputs to this stage.
func (o ExplainQueryStageResponseOutput) InputStages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) []string { return v.InputStages }).(pulumi.StringArrayOutput)
}

// Human-readable name for the stage.
func (o ExplainQueryStageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Number of parallel input segments to be processed
func (o ExplainQueryStageResponseOutput) ParallelInputs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ParallelInputs }).(pulumi.StringOutput)
}

// Milliseconds the average shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ReadMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ReadMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ReadRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ReadRatioMax }).(pulumi.Float64Output)
}

// Number of records read into the stage.
func (o ExplainQueryStageResponseOutput) RecordsRead() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.RecordsRead }).(pulumi.StringOutput)
}

// Number of records written by the stage.
func (o ExplainQueryStageResponseOutput) RecordsWritten() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.RecordsWritten }).(pulumi.StringOutput)
}

// Total number of bytes written to shuffle.
func (o ExplainQueryStageResponseOutput) ShuffleOutputBytes() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ShuffleOutputBytes }).(pulumi.StringOutput)
}

// Total number of bytes written to shuffle and spilled to disk.
func (o ExplainQueryStageResponseOutput) ShuffleOutputBytesSpilled() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ShuffleOutputBytesSpilled }).(pulumi.StringOutput)
}

// Slot-milliseconds used by the stage.
func (o ExplainQueryStageResponseOutput) SlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.SlotMs }).(pulumi.StringOutput)
}

// Stage start time represented as milliseconds since the epoch.
func (o ExplainQueryStageResponseOutput) StartMs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.StartMs }).(pulumi.StringOutput)
}

// Current status for this stage.
func (o ExplainQueryStageResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.Status }).(pulumi.StringOutput)
}

// List of operations within the stage in dependency order (approximately chronological).
func (o ExplainQueryStageResponseOutput) Steps() ExplainQueryStepResponseArrayOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) []ExplainQueryStepResponse { return v.Steps }).(ExplainQueryStepResponseArrayOutput)
}

// Milliseconds the average shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WaitMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WaitMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WaitRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WaitRatioMax }).(pulumi.Float64Output)
}

// Milliseconds the average shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WriteMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WriteMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WriteRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WriteRatioMax }).(pulumi.Float64Output)
}

type ExplainQueryStageResponseArrayOutput struct{ *pulumi.OutputState }

func (ExplainQueryStageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStageResponse)(nil)).Elem()
}

func (o ExplainQueryStageResponseArrayOutput) ToExplainQueryStageResponseArrayOutput() ExplainQueryStageResponseArrayOutput {
	return o
}

func (o ExplainQueryStageResponseArrayOutput) ToExplainQueryStageResponseArrayOutputWithContext(ctx context.Context) ExplainQueryStageResponseArrayOutput {
	return o
}

func (o ExplainQueryStageResponseArrayOutput) Index(i pulumi.IntInput) ExplainQueryStageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExplainQueryStageResponse {
		return vs[0].([]ExplainQueryStageResponse)[vs[1].(int)]
	}).(ExplainQueryStageResponseOutput)
}

// An operation within a stage.
type ExplainQueryStepResponse struct {
	// Machine-readable operation type.
	Kind string `pulumi:"kind"`
	// Human-readable description of the step(s).
	Substeps []string `pulumi:"substeps"`
}

// An operation within a stage.
type ExplainQueryStepResponseOutput struct{ *pulumi.OutputState }

func (ExplainQueryStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStepResponse)(nil)).Elem()
}

func (o ExplainQueryStepResponseOutput) ToExplainQueryStepResponseOutput() ExplainQueryStepResponseOutput {
	return o
}

func (o ExplainQueryStepResponseOutput) ToExplainQueryStepResponseOutputWithContext(ctx context.Context) ExplainQueryStepResponseOutput {
	return o
}

// Machine-readable operation type.
func (o ExplainQueryStepResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStepResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Human-readable description of the step(s).
func (o ExplainQueryStepResponseOutput) Substeps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExplainQueryStepResponse) []string { return v.Substeps }).(pulumi.StringArrayOutput)
}

type ExplainQueryStepResponseArrayOutput struct{ *pulumi.OutputState }

func (ExplainQueryStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStepResponse)(nil)).Elem()
}

func (o ExplainQueryStepResponseArrayOutput) ToExplainQueryStepResponseArrayOutput() ExplainQueryStepResponseArrayOutput {
	return o
}

func (o ExplainQueryStepResponseArrayOutput) ToExplainQueryStepResponseArrayOutputWithContext(ctx context.Context) ExplainQueryStepResponseArrayOutput {
	return o
}

func (o ExplainQueryStepResponseArrayOutput) Index(i pulumi.IntInput) ExplainQueryStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExplainQueryStepResponse {
		return vs[0].([]ExplainQueryStepResponse)[vs[1].(int)]
	}).(ExplainQueryStepResponseOutput)
}

// Statistics for the EXPORT DATA statement as part of Query Job. EXTRACT JOB statistics are populated in JobStatistics4.
type ExportDataStatisticsResponse struct {
	// Number of destination files generated in case of EXPORT DATA statement only.
	FileCount string `pulumi:"fileCount"`
	// [Alpha] Number of destination rows generated in case of EXPORT DATA statement only.
	RowCount string `pulumi:"rowCount"`
}

// Statistics for the EXPORT DATA statement as part of Query Job. EXTRACT JOB statistics are populated in JobStatistics4.
type ExportDataStatisticsResponseOutput struct{ *pulumi.OutputState }

func (ExportDataStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExportDataStatisticsResponse)(nil)).Elem()
}

func (o ExportDataStatisticsResponseOutput) ToExportDataStatisticsResponseOutput() ExportDataStatisticsResponseOutput {
	return o
}

func (o ExportDataStatisticsResponseOutput) ToExportDataStatisticsResponseOutputWithContext(ctx context.Context) ExportDataStatisticsResponseOutput {
	return o
}

// Number of destination files generated in case of EXPORT DATA statement only.
func (o ExportDataStatisticsResponseOutput) FileCount() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDataStatisticsResponse) string { return v.FileCount }).(pulumi.StringOutput)
}

// [Alpha] Number of destination rows generated in case of EXPORT DATA statement only.
func (o ExportDataStatisticsResponseOutput) RowCount() pulumi.StringOutput {
	return o.ApplyT(func(v ExportDataStatisticsResponse) string { return v.RowCount }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

type ExternalDataConfiguration struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect *bool `pulumi:"autodetect"`
	// Optional. Additional properties to set if sourceFormat is set to AVRO.
	AvroOptions *AvroOptions `pulumi:"avroOptions"`
	// Optional. Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions *BigtableOptions `pulumi:"bigtableOptions"`
	// Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
	Compression *string `pulumi:"compression"`
	// Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
	ConnectionId *string `pulumi:"connectionId"`
	// Optional. Additional properties to set if sourceFormat is set to CSV.
	CsvOptions *CsvOptions `pulumi:"csvOptions"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []ExternalDataConfigurationDecimalTargetTypesItem `pulumi:"decimalTargetTypes"`
	// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType *ExternalDataConfigurationFileSetSpecType `pulumi:"fileSetSpecType"`
	// Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions *GoogleSheetsOptions `pulumi:"googleSheetsOptions"`
	// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
	HivePartitioningOptions *HivePartitioningOptions `pulumi:"hivePartitioningOptions"`
	// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
	JsonExtension *ExternalDataConfigurationJsonExtension `pulumi:"jsonExtension"`
	// Optional. Additional properties to set if sourceFormat is set to JSON.
	JsonOptions *JsonOptions `pulumi:"jsonOptions"`
	// Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
	MetadataCacheMode *ExternalDataConfigurationMetadataCacheMode `pulumi:"metadataCacheMode"`
	// Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
	ObjectMetadata *ExternalDataConfigurationObjectMetadata `pulumi:"objectMetadata"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions *ParquetOptions `pulumi:"parquetOptions"`
	// Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri *string `pulumi:"referenceFileSchemaUri"`
	// Optional. The schema for the data. Schema is required for CSV and JSON formats if autodetect is not on. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
	Schema *TableSchema `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables, specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat *string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
}

// ExternalDataConfigurationInput is an input type that accepts ExternalDataConfigurationArgs and ExternalDataConfigurationOutput values.
// You can construct a concrete instance of `ExternalDataConfigurationInput` via:
//
//	ExternalDataConfigurationArgs{...}
type ExternalDataConfigurationInput interface {
	pulumi.Input

	ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput
	ToExternalDataConfigurationOutputWithContext(context.Context) ExternalDataConfigurationOutput
}

type ExternalDataConfigurationArgs struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect pulumi.BoolPtrInput `pulumi:"autodetect"`
	// Optional. Additional properties to set if sourceFormat is set to AVRO.
	AvroOptions AvroOptionsPtrInput `pulumi:"avroOptions"`
	// Optional. Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions BigtableOptionsPtrInput `pulumi:"bigtableOptions"`
	// Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
	ConnectionId pulumi.StringPtrInput `pulumi:"connectionId"`
	// Optional. Additional properties to set if sourceFormat is set to CSV.
	CsvOptions CsvOptionsPtrInput `pulumi:"csvOptions"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes ExternalDataConfigurationDecimalTargetTypesItemArrayInput `pulumi:"decimalTargetTypes"`
	// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType ExternalDataConfigurationFileSetSpecTypePtrInput `pulumi:"fileSetSpecType"`
	// Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions GoogleSheetsOptionsPtrInput `pulumi:"googleSheetsOptions"`
	// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
	HivePartitioningOptions HivePartitioningOptionsPtrInput `pulumi:"hivePartitioningOptions"`
	// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
	JsonExtension ExternalDataConfigurationJsonExtensionPtrInput `pulumi:"jsonExtension"`
	// Optional. Additional properties to set if sourceFormat is set to JSON.
	JsonOptions JsonOptionsPtrInput `pulumi:"jsonOptions"`
	// Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
	MetadataCacheMode ExternalDataConfigurationMetadataCacheModePtrInput `pulumi:"metadataCacheMode"`
	// Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
	ObjectMetadata ExternalDataConfigurationObjectMetadataPtrInput `pulumi:"objectMetadata"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions ParquetOptionsPtrInput `pulumi:"parquetOptions"`
	// Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri pulumi.StringPtrInput `pulumi:"referenceFileSchemaUri"`
	// Optional. The schema for the data. Schema is required for CSV and JSON formats if autodetect is not on. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
	Schema TableSchemaPtrInput `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables, specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (ExternalDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfiguration)(nil)).Elem()
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput {
	return i.ToExternalDataConfigurationOutputWithContext(context.Background())
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationOutputWithContext(ctx context.Context) ExternalDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationOutput)
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return i.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationOutput).ToExternalDataConfigurationPtrOutputWithContext(ctx)
}

// ExternalDataConfigurationPtrInput is an input type that accepts ExternalDataConfigurationArgs, ExternalDataConfigurationPtr and ExternalDataConfigurationPtrOutput values.
// You can construct a concrete instance of `ExternalDataConfigurationPtrInput` via:
//
//	        ExternalDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type ExternalDataConfigurationPtrInput interface {
	pulumi.Input

	ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput
	ToExternalDataConfigurationPtrOutputWithContext(context.Context) ExternalDataConfigurationPtrOutput
}

type externalDataConfigurationPtrType ExternalDataConfigurationArgs

func ExternalDataConfigurationPtr(v *ExternalDataConfigurationArgs) ExternalDataConfigurationPtrInput {
	return (*externalDataConfigurationPtrType)(v)
}

func (*externalDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDataConfiguration)(nil)).Elem()
}

func (i *externalDataConfigurationPtrType) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return i.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *externalDataConfigurationPtrType) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationPtrOutput)
}

type ExternalDataConfigurationOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfiguration)(nil)).Elem()
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput {
	return o
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationOutputWithContext(ctx context.Context) ExternalDataConfigurationOutput {
	return o
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return o.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalDataConfiguration) *ExternalDataConfiguration {
		return &v
	}).(ExternalDataConfigurationPtrOutput)
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *bool { return v.Autodetect }).(pulumi.BoolPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to AVRO.
func (o ExternalDataConfigurationOutput) AvroOptions() AvroOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *AvroOptions { return v.AvroOptions }).(AvroOptionsPtrOutput)
}

// Optional. Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationOutput) BigtableOptions() BigtableOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *BigtableOptions { return v.BigtableOptions }).(BigtableOptionsPtrOutput)
}

// Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
func (o ExternalDataConfigurationOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
func (o ExternalDataConfigurationOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationOutput) CsvOptions() CsvOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *CsvOptions { return v.CsvOptions }).(CsvOptionsPtrOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o ExternalDataConfigurationOutput) DecimalTargetTypes() ExternalDataConfigurationDecimalTargetTypesItemArrayOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) []ExternalDataConfigurationDecimalTargetTypesItem {
		return v.DecimalTargetTypes
	}).(ExternalDataConfigurationDecimalTargetTypesItemArrayOutput)
}

// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o ExternalDataConfigurationOutput) FileSetSpecType() ExternalDataConfigurationFileSetSpecTypePtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ExternalDataConfigurationFileSetSpecType { return v.FileSetSpecType }).(ExternalDataConfigurationFileSetSpecTypePtrOutput)
}

// Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationOutput) GoogleSheetsOptions() GoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *GoogleSheetsOptions { return v.GoogleSheetsOptions }).(GoogleSheetsOptionsPtrOutput)
}

// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
func (o ExternalDataConfigurationOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *HivePartitioningOptions { return v.HivePartitioningOptions }).(HivePartitioningOptionsPtrOutput)
}

// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
func (o ExternalDataConfigurationOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
func (o ExternalDataConfigurationOutput) JsonExtension() ExternalDataConfigurationJsonExtensionPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ExternalDataConfigurationJsonExtension { return v.JsonExtension }).(ExternalDataConfigurationJsonExtensionPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to JSON.
func (o ExternalDataConfigurationOutput) JsonOptions() JsonOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *JsonOptions { return v.JsonOptions }).(JsonOptionsPtrOutput)
}

// Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
func (o ExternalDataConfigurationOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
func (o ExternalDataConfigurationOutput) MetadataCacheMode() ExternalDataConfigurationMetadataCacheModePtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ExternalDataConfigurationMetadataCacheMode {
		return v.MetadataCacheMode
	}).(ExternalDataConfigurationMetadataCacheModePtrOutput)
}

// Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
func (o ExternalDataConfigurationOutput) ObjectMetadata() ExternalDataConfigurationObjectMetadataPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ExternalDataConfigurationObjectMetadata { return v.ObjectMetadata }).(ExternalDataConfigurationObjectMetadataPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to PARQUET.
func (o ExternalDataConfigurationOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ParquetOptions { return v.ParquetOptions }).(ParquetOptionsPtrOutput)
}

// Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
func (o ExternalDataConfigurationOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.ReferenceFileSchemaUri }).(pulumi.StringPtrOutput)
}

// Optional. The schema for the data. Schema is required for CSV and JSON formats if autodetect is not on. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
func (o ExternalDataConfigurationOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *TableSchema { return v.Schema }).(TableSchemaPtrOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables, specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type ExternalDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDataConfiguration)(nil)).Elem()
}

func (o ExternalDataConfigurationPtrOutput) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return o
}

func (o ExternalDataConfigurationPtrOutput) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return o
}

func (o ExternalDataConfigurationPtrOutput) Elem() ExternalDataConfigurationOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) ExternalDataConfiguration {
		if v != nil {
			return *v
		}
		var ret ExternalDataConfiguration
		return ret
	}).(ExternalDataConfigurationOutput)
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to AVRO.
func (o ExternalDataConfigurationPtrOutput) AvroOptions() AvroOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *AvroOptions {
		if v == nil {
			return nil
		}
		return v.AvroOptions
	}).(AvroOptionsPtrOutput)
}

// Optional. Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationPtrOutput) BigtableOptions() BigtableOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *BigtableOptions {
		if v == nil {
			return nil
		}
		return v.BigtableOptions
	}).(BigtableOptionsPtrOutput)
}

// Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
func (o ExternalDataConfigurationPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
func (o ExternalDataConfigurationPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationPtrOutput) CsvOptions() CsvOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *CsvOptions {
		if v == nil {
			return nil
		}
		return v.CsvOptions
	}).(CsvOptionsPtrOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o ExternalDataConfigurationPtrOutput) DecimalTargetTypes() ExternalDataConfigurationDecimalTargetTypesItemArrayOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) []ExternalDataConfigurationDecimalTargetTypesItem {
		if v == nil {
			return nil
		}
		return v.DecimalTargetTypes
	}).(ExternalDataConfigurationDecimalTargetTypesItemArrayOutput)
}

// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o ExternalDataConfigurationPtrOutput) FileSetSpecType() ExternalDataConfigurationFileSetSpecTypePtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *ExternalDataConfigurationFileSetSpecType {
		if v == nil {
			return nil
		}
		return v.FileSetSpecType
	}).(ExternalDataConfigurationFileSetSpecTypePtrOutput)
}

// Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationPtrOutput) GoogleSheetsOptions() GoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *GoogleSheetsOptions {
		if v == nil {
			return nil
		}
		return v.GoogleSheetsOptions
	}).(GoogleSheetsOptionsPtrOutput)
}

// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
func (o ExternalDataConfigurationPtrOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *HivePartitioningOptions {
		if v == nil {
			return nil
		}
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsPtrOutput)
}

// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
func (o ExternalDataConfigurationPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
func (o ExternalDataConfigurationPtrOutput) JsonExtension() ExternalDataConfigurationJsonExtensionPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *ExternalDataConfigurationJsonExtension {
		if v == nil {
			return nil
		}
		return v.JsonExtension
	}).(ExternalDataConfigurationJsonExtensionPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to JSON.
func (o ExternalDataConfigurationPtrOutput) JsonOptions() JsonOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *JsonOptions {
		if v == nil {
			return nil
		}
		return v.JsonOptions
	}).(JsonOptionsPtrOutput)
}

// Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
func (o ExternalDataConfigurationPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
func (o ExternalDataConfigurationPtrOutput) MetadataCacheMode() ExternalDataConfigurationMetadataCacheModePtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *ExternalDataConfigurationMetadataCacheMode {
		if v == nil {
			return nil
		}
		return v.MetadataCacheMode
	}).(ExternalDataConfigurationMetadataCacheModePtrOutput)
}

// Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
func (o ExternalDataConfigurationPtrOutput) ObjectMetadata() ExternalDataConfigurationObjectMetadataPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *ExternalDataConfigurationObjectMetadata {
		if v == nil {
			return nil
		}
		return v.ObjectMetadata
	}).(ExternalDataConfigurationObjectMetadataPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to PARQUET.
func (o ExternalDataConfigurationPtrOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *ParquetOptions {
		if v == nil {
			return nil
		}
		return v.ParquetOptions
	}).(ParquetOptionsPtrOutput)
}

// Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
func (o ExternalDataConfigurationPtrOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceFileSchemaUri
	}).(pulumi.StringPtrOutput)
}

// Optional. The schema for the data. Schema is required for CSV and JSON formats if autodetect is not on. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
func (o ExternalDataConfigurationPtrOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *TableSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(TableSchemaPtrOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables, specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

type ExternalDataConfigurationResponse struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect bool `pulumi:"autodetect"`
	// Optional. Additional properties to set if sourceFormat is set to AVRO.
	AvroOptions AvroOptionsResponse `pulumi:"avroOptions"`
	// Optional. Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions BigtableOptionsResponse `pulumi:"bigtableOptions"`
	// Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
	Compression string `pulumi:"compression"`
	// Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
	ConnectionId string `pulumi:"connectionId"`
	// Optional. Additional properties to set if sourceFormat is set to CSV.
	CsvOptions CsvOptionsResponse `pulumi:"csvOptions"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []string `pulumi:"decimalTargetTypes"`
	// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType string `pulumi:"fileSetSpecType"`
	// Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions GoogleSheetsOptionsResponse `pulumi:"googleSheetsOptions"`
	// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
	HivePartitioningOptions HivePartitioningOptionsResponse `pulumi:"hivePartitioningOptions"`
	// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
	IgnoreUnknownValues bool `pulumi:"ignoreUnknownValues"`
	// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
	JsonExtension string `pulumi:"jsonExtension"`
	// Optional. Additional properties to set if sourceFormat is set to JSON.
	JsonOptions JsonOptionsResponse `pulumi:"jsonOptions"`
	// Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
	MaxBadRecords int `pulumi:"maxBadRecords"`
	// Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
	MetadataCacheMode string `pulumi:"metadataCacheMode"`
	// Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
	ObjectMetadata string `pulumi:"objectMetadata"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions ParquetOptionsResponse `pulumi:"parquetOptions"`
	// Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri string `pulumi:"referenceFileSchemaUri"`
	// Optional. The schema for the data. Schema is required for CSV and JSON formats if autodetect is not on. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
	Schema TableSchemaResponse `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables, specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
}

type ExternalDataConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfigurationResponse)(nil)).Elem()
}

func (o ExternalDataConfigurationResponseOutput) ToExternalDataConfigurationResponseOutput() ExternalDataConfigurationResponseOutput {
	return o
}

func (o ExternalDataConfigurationResponseOutput) ToExternalDataConfigurationResponseOutputWithContext(ctx context.Context) ExternalDataConfigurationResponseOutput {
	return o
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationResponseOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// Optional. Additional properties to set if sourceFormat is set to AVRO.
func (o ExternalDataConfigurationResponseOutput) AvroOptions() AvroOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) AvroOptionsResponse { return v.AvroOptions }).(AvroOptionsResponseOutput)
}

// Optional. Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationResponseOutput) BigtableOptions() BigtableOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) BigtableOptionsResponse { return v.BigtableOptions }).(BigtableOptionsResponseOutput)
}

// Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.
func (o ExternalDataConfigurationResponseOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.Compression }).(pulumi.StringOutput)
}

// Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form "<project\_id>.<location\_id>.<connection\_id>" or "projects/<project\_id>/locations/<location\_id>/connections/<connection\_id>".
func (o ExternalDataConfigurationResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// Optional. Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationResponseOutput) CsvOptions() CsvOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) CsvOptionsResponse { return v.CsvOptions }).(CsvOptionsResponseOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o ExternalDataConfigurationResponseOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) []string { return v.DecimalTargetTypes }).(pulumi.StringArrayOutput)
}

// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o ExternalDataConfigurationResponseOutput) FileSetSpecType() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.FileSetSpecType }).(pulumi.StringOutput)
}

// Optional. Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationResponseOutput) GoogleSheetsOptions() GoogleSheetsOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) GoogleSheetsOptionsResponse { return v.GoogleSheetsOptions }).(GoogleSheetsOptionsResponseOutput)
}

// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
func (o ExternalDataConfigurationResponseOutput) HivePartitioningOptions() HivePartitioningOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) HivePartitioningOptionsResponse {
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsResponseOutput)
}

// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.
func (o ExternalDataConfigurationResponseOutput) IgnoreUnknownValues() pulumi.BoolOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) bool { return v.IgnoreUnknownValues }).(pulumi.BoolOutput)
}

// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
func (o ExternalDataConfigurationResponseOutput) JsonExtension() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.JsonExtension }).(pulumi.StringOutput)
}

// Optional. Additional properties to set if sourceFormat is set to JSON.
func (o ExternalDataConfigurationResponseOutput) JsonOptions() JsonOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) JsonOptionsResponse { return v.JsonOptions }).(JsonOptionsResponseOutput)
}

// Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.
func (o ExternalDataConfigurationResponseOutput) MaxBadRecords() pulumi.IntOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) int { return v.MaxBadRecords }).(pulumi.IntOutput)
}

// Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
func (o ExternalDataConfigurationResponseOutput) MetadataCacheMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.MetadataCacheMode }).(pulumi.StringOutput)
}

// Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
func (o ExternalDataConfigurationResponseOutput) ObjectMetadata() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.ObjectMetadata }).(pulumi.StringOutput)
}

// Optional. Additional properties to set if sourceFormat is set to PARQUET.
func (o ExternalDataConfigurationResponseOutput) ParquetOptions() ParquetOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) ParquetOptionsResponse { return v.ParquetOptions }).(ParquetOptionsResponseOutput)
}

// Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.
func (o ExternalDataConfigurationResponseOutput) ReferenceFileSchemaUri() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.ReferenceFileSchemaUri }).(pulumi.StringOutput)
}

// Optional. The schema for the data. Schema is required for CSV and JSON formats if autodetect is not on. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, Avro, ORC and Parquet formats.
func (o ExternalDataConfigurationResponseOutput) Schema() TableSchemaResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) TableSchemaResponse { return v.Schema }).(TableSchemaResponseOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". For Apache Iceberg tables, specify "ICEBERG". For ORC files, specify "ORC". For Parquet files, specify "PARQUET". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationResponseOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationResponseOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

// Configures the access a dataset defined in an external metadata storage.
type ExternalDatasetReference struct {
	// The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
	Connection string `pulumi:"connection"`
	// External source that backs this dataset.
	ExternalSource string `pulumi:"externalSource"`
}

// ExternalDatasetReferenceInput is an input type that accepts ExternalDatasetReferenceArgs and ExternalDatasetReferenceOutput values.
// You can construct a concrete instance of `ExternalDatasetReferenceInput` via:
//
//	ExternalDatasetReferenceArgs{...}
type ExternalDatasetReferenceInput interface {
	pulumi.Input

	ToExternalDatasetReferenceOutput() ExternalDatasetReferenceOutput
	ToExternalDatasetReferenceOutputWithContext(context.Context) ExternalDatasetReferenceOutput
}

// Configures the access a dataset defined in an external metadata storage.
type ExternalDatasetReferenceArgs struct {
	// The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
	Connection pulumi.StringInput `pulumi:"connection"`
	// External source that backs this dataset.
	ExternalSource pulumi.StringInput `pulumi:"externalSource"`
}

func (ExternalDatasetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDatasetReference)(nil)).Elem()
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferenceOutput() ExternalDatasetReferenceOutput {
	return i.ToExternalDatasetReferenceOutputWithContext(context.Background())
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferenceOutputWithContext(ctx context.Context) ExternalDatasetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDatasetReferenceOutput)
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return i.ToExternalDatasetReferencePtrOutputWithContext(context.Background())
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDatasetReferenceOutput).ToExternalDatasetReferencePtrOutputWithContext(ctx)
}

// ExternalDatasetReferencePtrInput is an input type that accepts ExternalDatasetReferenceArgs, ExternalDatasetReferencePtr and ExternalDatasetReferencePtrOutput values.
// You can construct a concrete instance of `ExternalDatasetReferencePtrInput` via:
//
//	        ExternalDatasetReferenceArgs{...}
//
//	or:
//
//	        nil
type ExternalDatasetReferencePtrInput interface {
	pulumi.Input

	ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput
	ToExternalDatasetReferencePtrOutputWithContext(context.Context) ExternalDatasetReferencePtrOutput
}

type externalDatasetReferencePtrType ExternalDatasetReferenceArgs

func ExternalDatasetReferencePtr(v *ExternalDatasetReferenceArgs) ExternalDatasetReferencePtrInput {
	return (*externalDatasetReferencePtrType)(v)
}

func (*externalDatasetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDatasetReference)(nil)).Elem()
}

func (i *externalDatasetReferencePtrType) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return i.ToExternalDatasetReferencePtrOutputWithContext(context.Background())
}

func (i *externalDatasetReferencePtrType) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDatasetReferencePtrOutput)
}

// Configures the access a dataset defined in an external metadata storage.
type ExternalDatasetReferenceOutput struct{ *pulumi.OutputState }

func (ExternalDatasetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDatasetReference)(nil)).Elem()
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferenceOutput() ExternalDatasetReferenceOutput {
	return o
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferenceOutputWithContext(ctx context.Context) ExternalDatasetReferenceOutput {
	return o
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return o.ToExternalDatasetReferencePtrOutputWithContext(context.Background())
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalDatasetReference) *ExternalDatasetReference {
		return &v
	}).(ExternalDatasetReferencePtrOutput)
}

// The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
func (o ExternalDatasetReferenceOutput) Connection() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDatasetReference) string { return v.Connection }).(pulumi.StringOutput)
}

// External source that backs this dataset.
func (o ExternalDatasetReferenceOutput) ExternalSource() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDatasetReference) string { return v.ExternalSource }).(pulumi.StringOutput)
}

type ExternalDatasetReferencePtrOutput struct{ *pulumi.OutputState }

func (ExternalDatasetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDatasetReference)(nil)).Elem()
}

func (o ExternalDatasetReferencePtrOutput) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return o
}

func (o ExternalDatasetReferencePtrOutput) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return o
}

func (o ExternalDatasetReferencePtrOutput) Elem() ExternalDatasetReferenceOutput {
	return o.ApplyT(func(v *ExternalDatasetReference) ExternalDatasetReference {
		if v != nil {
			return *v
		}
		var ret ExternalDatasetReference
		return ret
	}).(ExternalDatasetReferenceOutput)
}

// The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
func (o ExternalDatasetReferencePtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDatasetReference) *string {
		if v == nil {
			return nil
		}
		return &v.Connection
	}).(pulumi.StringPtrOutput)
}

// External source that backs this dataset.
func (o ExternalDatasetReferencePtrOutput) ExternalSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDatasetReference) *string {
		if v == nil {
			return nil
		}
		return &v.ExternalSource
	}).(pulumi.StringPtrOutput)
}

// Configures the access a dataset defined in an external metadata storage.
type ExternalDatasetReferenceResponse struct {
	// The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
	Connection string `pulumi:"connection"`
	// External source that backs this dataset.
	ExternalSource string `pulumi:"externalSource"`
}

// Configures the access a dataset defined in an external metadata storage.
type ExternalDatasetReferenceResponseOutput struct{ *pulumi.OutputState }

func (ExternalDatasetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDatasetReferenceResponse)(nil)).Elem()
}

func (o ExternalDatasetReferenceResponseOutput) ToExternalDatasetReferenceResponseOutput() ExternalDatasetReferenceResponseOutput {
	return o
}

func (o ExternalDatasetReferenceResponseOutput) ToExternalDatasetReferenceResponseOutputWithContext(ctx context.Context) ExternalDatasetReferenceResponseOutput {
	return o
}

// The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
func (o ExternalDatasetReferenceResponseOutput) Connection() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDatasetReferenceResponse) string { return v.Connection }).(pulumi.StringOutput)
}

// External source that backs this dataset.
func (o ExternalDatasetReferenceResponseOutput) ExternalSource() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDatasetReferenceResponse) string { return v.ExternalSource }).(pulumi.StringOutput)
}

// The external service cost is a portion of the total cost, these costs are not additive with total_bytes_billed. Moreover, this field only track external service costs that will show up as BigQuery costs (e.g. training BigQuery ML job with google cloud CAIP or Automl Tables services), not other costs which may be accrued by running the query (e.g. reading from Bigtable or Cloud Storage). The external service costs with different billing sku (e.g. CAIP job is charged based on VM usage) are converted to BigQuery billed_bytes and slot_ms with equivalent amount of US dollars. Services may not directly correlate to these metrics, but these are the equivalents for billing purposes. Output only.
type ExternalServiceCostResponse struct {
	// External service cost in terms of bigquery bytes billed.
	BytesBilled string `pulumi:"bytesBilled"`
	// External service cost in terms of bigquery bytes processed.
	BytesProcessed string `pulumi:"bytesProcessed"`
	// External service name.
	ExternalService string `pulumi:"externalService"`
	// Non-preemptable reserved slots used for external job. For example, reserved slots for Cloua AI Platform job are the VM usages converted to BigQuery slot with equivalent mount of price.
	ReservedSlotCount string `pulumi:"reservedSlotCount"`
	// External service cost in terms of bigquery slot milliseconds.
	SlotMs string `pulumi:"slotMs"`
}

// The external service cost is a portion of the total cost, these costs are not additive with total_bytes_billed. Moreover, this field only track external service costs that will show up as BigQuery costs (e.g. training BigQuery ML job with google cloud CAIP or Automl Tables services), not other costs which may be accrued by running the query (e.g. reading from Bigtable or Cloud Storage). The external service costs with different billing sku (e.g. CAIP job is charged based on VM usage) are converted to BigQuery billed_bytes and slot_ms with equivalent amount of US dollars. Services may not directly correlate to these metrics, but these are the equivalents for billing purposes. Output only.
type ExternalServiceCostResponseOutput struct{ *pulumi.OutputState }

func (ExternalServiceCostResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalServiceCostResponse)(nil)).Elem()
}

func (o ExternalServiceCostResponseOutput) ToExternalServiceCostResponseOutput() ExternalServiceCostResponseOutput {
	return o
}

func (o ExternalServiceCostResponseOutput) ToExternalServiceCostResponseOutputWithContext(ctx context.Context) ExternalServiceCostResponseOutput {
	return o
}

// External service cost in terms of bigquery bytes billed.
func (o ExternalServiceCostResponseOutput) BytesBilled() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalServiceCostResponse) string { return v.BytesBilled }).(pulumi.StringOutput)
}

// External service cost in terms of bigquery bytes processed.
func (o ExternalServiceCostResponseOutput) BytesProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalServiceCostResponse) string { return v.BytesProcessed }).(pulumi.StringOutput)
}

// External service name.
func (o ExternalServiceCostResponseOutput) ExternalService() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalServiceCostResponse) string { return v.ExternalService }).(pulumi.StringOutput)
}

// Non-preemptable reserved slots used for external job. For example, reserved slots for Cloua AI Platform job are the VM usages converted to BigQuery slot with equivalent mount of price.
func (o ExternalServiceCostResponseOutput) ReservedSlotCount() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalServiceCostResponse) string { return v.ReservedSlotCount }).(pulumi.StringOutput)
}

// External service cost in terms of bigquery slot milliseconds.
func (o ExternalServiceCostResponseOutput) SlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalServiceCostResponse) string { return v.SlotMs }).(pulumi.StringOutput)
}

type ExternalServiceCostResponseArrayOutput struct{ *pulumi.OutputState }

func (ExternalServiceCostResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExternalServiceCostResponse)(nil)).Elem()
}

func (o ExternalServiceCostResponseArrayOutput) ToExternalServiceCostResponseArrayOutput() ExternalServiceCostResponseArrayOutput {
	return o
}

func (o ExternalServiceCostResponseArrayOutput) ToExternalServiceCostResponseArrayOutputWithContext(ctx context.Context) ExternalServiceCostResponseArrayOutput {
	return o
}

func (o ExternalServiceCostResponseArrayOutput) Index(i pulumi.IntInput) ExternalServiceCostResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExternalServiceCostResponse {
		return vs[0].([]ExternalServiceCostResponse)[vs[1].(int)]
	}).(ExternalServiceCostResponseOutput)
}

// Representative value of a single feature within the cluster.
type FeatureValueResponse struct {
	// The categorical feature value.
	CategoricalValue CategoricalValueResponse `pulumi:"categoricalValue"`
	// The feature column name.
	FeatureColumn string `pulumi:"featureColumn"`
	// The numerical feature value. This is the centroid value for this feature.
	NumericalValue float64 `pulumi:"numericalValue"`
}

// Representative value of a single feature within the cluster.
type FeatureValueResponseOutput struct{ *pulumi.OutputState }

func (FeatureValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureValueResponse)(nil)).Elem()
}

func (o FeatureValueResponseOutput) ToFeatureValueResponseOutput() FeatureValueResponseOutput {
	return o
}

func (o FeatureValueResponseOutput) ToFeatureValueResponseOutputWithContext(ctx context.Context) FeatureValueResponseOutput {
	return o
}

// The categorical feature value.
func (o FeatureValueResponseOutput) CategoricalValue() CategoricalValueResponseOutput {
	return o.ApplyT(func(v FeatureValueResponse) CategoricalValueResponse { return v.CategoricalValue }).(CategoricalValueResponseOutput)
}

// The feature column name.
func (o FeatureValueResponseOutput) FeatureColumn() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureValueResponse) string { return v.FeatureColumn }).(pulumi.StringOutput)
}

// The numerical feature value. This is the centroid value for this feature.
func (o FeatureValueResponseOutput) NumericalValue() pulumi.Float64Output {
	return o.ApplyT(func(v FeatureValueResponse) float64 { return v.NumericalValue }).(pulumi.Float64Output)
}

type FeatureValueResponseArrayOutput struct{ *pulumi.OutputState }

func (FeatureValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FeatureValueResponse)(nil)).Elem()
}

func (o FeatureValueResponseArrayOutput) ToFeatureValueResponseArrayOutput() FeatureValueResponseArrayOutput {
	return o
}

func (o FeatureValueResponseArrayOutput) ToFeatureValueResponseArrayOutputWithContext(ctx context.Context) FeatureValueResponseArrayOutput {
	return o
}

func (o FeatureValueResponseArrayOutput) Index(i pulumi.IntInput) FeatureValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FeatureValueResponse {
		return vs[0].([]FeatureValueResponse)[vs[1].(int)]
	}).(FeatureValueResponseOutput)
}

// Options specific to Google Sheets data sources.
type GoogleSheetsOptions struct {
	// Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range *string `pulumi:"range"`
	// Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *string `pulumi:"skipLeadingRows"`
}

// GoogleSheetsOptionsInput is an input type that accepts GoogleSheetsOptionsArgs and GoogleSheetsOptionsOutput values.
// You can construct a concrete instance of `GoogleSheetsOptionsInput` via:
//
//	GoogleSheetsOptionsArgs{...}
type GoogleSheetsOptionsInput interface {
	pulumi.Input

	ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput
	ToGoogleSheetsOptionsOutputWithContext(context.Context) GoogleSheetsOptionsOutput
}

// Options specific to Google Sheets data sources.
type GoogleSheetsOptionsArgs struct {
	// Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range pulumi.StringPtrInput `pulumi:"range"`
	// Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.StringPtrInput `pulumi:"skipLeadingRows"`
}

func (GoogleSheetsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptions)(nil)).Elem()
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput {
	return i.ToGoogleSheetsOptionsOutputWithContext(context.Background())
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsOutputWithContext(ctx context.Context) GoogleSheetsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsOutput)
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return i.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsOutput).ToGoogleSheetsOptionsPtrOutputWithContext(ctx)
}

// GoogleSheetsOptionsPtrInput is an input type that accepts GoogleSheetsOptionsArgs, GoogleSheetsOptionsPtr and GoogleSheetsOptionsPtrOutput values.
// You can construct a concrete instance of `GoogleSheetsOptionsPtrInput` via:
//
//	        GoogleSheetsOptionsArgs{...}
//
//	or:
//
//	        nil
type GoogleSheetsOptionsPtrInput interface {
	pulumi.Input

	ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput
	ToGoogleSheetsOptionsPtrOutputWithContext(context.Context) GoogleSheetsOptionsPtrOutput
}

type googleSheetsOptionsPtrType GoogleSheetsOptionsArgs

func GoogleSheetsOptionsPtr(v *GoogleSheetsOptionsArgs) GoogleSheetsOptionsPtrInput {
	return (*googleSheetsOptionsPtrType)(v)
}

func (*googleSheetsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleSheetsOptions)(nil)).Elem()
}

func (i *googleSheetsOptionsPtrType) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return i.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i *googleSheetsOptionsPtrType) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsPtrOutput)
}

// Options specific to Google Sheets data sources.
type GoogleSheetsOptionsOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptions)(nil)).Elem()
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput {
	return o
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsOutputWithContext(ctx context.Context) GoogleSheetsOptionsOutput {
	return o
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return o.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleSheetsOptions) *GoogleSheetsOptions {
		return &v
	}).(GoogleSheetsOptionsPtrOutput)
}

// Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsOptions) *string { return v.SkipLeadingRows }).(pulumi.StringPtrOutput)
}

type GoogleSheetsOptionsPtrOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleSheetsOptions)(nil)).Elem()
}

func (o GoogleSheetsOptionsPtrOutput) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return o
}

func (o GoogleSheetsOptionsPtrOutput) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return o
}

func (o GoogleSheetsOptionsPtrOutput) Elem() GoogleSheetsOptionsOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) GoogleSheetsOptions {
		if v != nil {
			return *v
		}
		var ret GoogleSheetsOptions
		return ret
	}).(GoogleSheetsOptionsOutput)
}

// Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsPtrOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.StringPtrOutput)
}

// Options specific to Google Sheets data sources.
type GoogleSheetsOptionsResponse struct {
	// Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range string `pulumi:"range"`
	// Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows string `pulumi:"skipLeadingRows"`
}

// Options specific to Google Sheets data sources.
type GoogleSheetsOptionsResponseOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptionsResponse)(nil)).Elem()
}

func (o GoogleSheetsOptionsResponseOutput) ToGoogleSheetsOptionsResponseOutput() GoogleSheetsOptionsResponseOutput {
	return o
}

func (o GoogleSheetsOptionsResponseOutput) ToGoogleSheetsOptionsResponseOutputWithContext(ctx context.Context) GoogleSheetsOptionsResponseOutput {
	return o
}

// Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsResponseOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleSheetsOptionsResponse) string { return v.Range }).(pulumi.StringOutput)
}

// Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsResponseOutput) SkipLeadingRows() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleSheetsOptionsResponse) string { return v.SkipLeadingRows }).(pulumi.StringOutput)
}

// High cardinality join detailed information.
type HighCardinalityJoinResponse struct {
	// Count of left input rows.
	LeftRows string `pulumi:"leftRows"`
	// Count of the output rows.
	OutputRows string `pulumi:"outputRows"`
	// Count of right input rows.
	RightRows string `pulumi:"rightRows"`
	// The index of the join operator in the ExplainQueryStep lists.
	StepIndex int `pulumi:"stepIndex"`
}

// High cardinality join detailed information.
type HighCardinalityJoinResponseOutput struct{ *pulumi.OutputState }

func (HighCardinalityJoinResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HighCardinalityJoinResponse)(nil)).Elem()
}

func (o HighCardinalityJoinResponseOutput) ToHighCardinalityJoinResponseOutput() HighCardinalityJoinResponseOutput {
	return o
}

func (o HighCardinalityJoinResponseOutput) ToHighCardinalityJoinResponseOutputWithContext(ctx context.Context) HighCardinalityJoinResponseOutput {
	return o
}

// Count of left input rows.
func (o HighCardinalityJoinResponseOutput) LeftRows() pulumi.StringOutput {
	return o.ApplyT(func(v HighCardinalityJoinResponse) string { return v.LeftRows }).(pulumi.StringOutput)
}

// Count of the output rows.
func (o HighCardinalityJoinResponseOutput) OutputRows() pulumi.StringOutput {
	return o.ApplyT(func(v HighCardinalityJoinResponse) string { return v.OutputRows }).(pulumi.StringOutput)
}

// Count of right input rows.
func (o HighCardinalityJoinResponseOutput) RightRows() pulumi.StringOutput {
	return o.ApplyT(func(v HighCardinalityJoinResponse) string { return v.RightRows }).(pulumi.StringOutput)
}

// The index of the join operator in the ExplainQueryStep lists.
func (o HighCardinalityJoinResponseOutput) StepIndex() pulumi.IntOutput {
	return o.ApplyT(func(v HighCardinalityJoinResponse) int { return v.StepIndex }).(pulumi.IntOutput)
}

type HighCardinalityJoinResponseArrayOutput struct{ *pulumi.OutputState }

func (HighCardinalityJoinResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HighCardinalityJoinResponse)(nil)).Elem()
}

func (o HighCardinalityJoinResponseArrayOutput) ToHighCardinalityJoinResponseArrayOutput() HighCardinalityJoinResponseArrayOutput {
	return o
}

func (o HighCardinalityJoinResponseArrayOutput) ToHighCardinalityJoinResponseArrayOutputWithContext(ctx context.Context) HighCardinalityJoinResponseArrayOutput {
	return o
}

func (o HighCardinalityJoinResponseArrayOutput) Index(i pulumi.IntInput) HighCardinalityJoinResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HighCardinalityJoinResponse {
		return vs[0].([]HighCardinalityJoinResponse)[vs[1].(int)]
	}).(HighCardinalityJoinResponseOutput)
}

// Options for configuring hive partitioning detect.
type HivePartitioningOptions struct {
	// Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
	Mode *string `pulumi:"mode"`
	// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
	SourceUriPrefix *string `pulumi:"sourceUriPrefix"`
}

// HivePartitioningOptionsInput is an input type that accepts HivePartitioningOptionsArgs and HivePartitioningOptionsOutput values.
// You can construct a concrete instance of `HivePartitioningOptionsInput` via:
//
//	HivePartitioningOptionsArgs{...}
type HivePartitioningOptionsInput interface {
	pulumi.Input

	ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput
	ToHivePartitioningOptionsOutputWithContext(context.Context) HivePartitioningOptionsOutput
}

// Options for configuring hive partitioning detect.
type HivePartitioningOptionsArgs struct {
	// Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
	SourceUriPrefix pulumi.StringPtrInput `pulumi:"sourceUriPrefix"`
}

func (HivePartitioningOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptions)(nil)).Elem()
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput {
	return i.ToHivePartitioningOptionsOutputWithContext(context.Background())
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsOutputWithContext(ctx context.Context) HivePartitioningOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsOutput)
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return i.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsOutput).ToHivePartitioningOptionsPtrOutputWithContext(ctx)
}

// HivePartitioningOptionsPtrInput is an input type that accepts HivePartitioningOptionsArgs, HivePartitioningOptionsPtr and HivePartitioningOptionsPtrOutput values.
// You can construct a concrete instance of `HivePartitioningOptionsPtrInput` via:
//
//	        HivePartitioningOptionsArgs{...}
//
//	or:
//
//	        nil
type HivePartitioningOptionsPtrInput interface {
	pulumi.Input

	ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput
	ToHivePartitioningOptionsPtrOutputWithContext(context.Context) HivePartitioningOptionsPtrOutput
}

type hivePartitioningOptionsPtrType HivePartitioningOptionsArgs

func HivePartitioningOptionsPtr(v *HivePartitioningOptionsArgs) HivePartitioningOptionsPtrInput {
	return (*hivePartitioningOptionsPtrType)(v)
}

func (*hivePartitioningOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HivePartitioningOptions)(nil)).Elem()
}

func (i *hivePartitioningOptionsPtrType) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return i.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i *hivePartitioningOptionsPtrType) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsPtrOutput)
}

// Options for configuring hive partitioning detect.
type HivePartitioningOptionsOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptions)(nil)).Elem()
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput {
	return o
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsOutputWithContext(ctx context.Context) HivePartitioningOptionsOutput {
	return o
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return o.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HivePartitioningOptions) *HivePartitioningOptions {
		return &v
	}).(HivePartitioningOptionsPtrOutput)
}

// Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
func (o HivePartitioningOptionsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
func (o HivePartitioningOptionsOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
func (o HivePartitioningOptionsOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *string { return v.SourceUriPrefix }).(pulumi.StringPtrOutput)
}

type HivePartitioningOptionsPtrOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HivePartitioningOptions)(nil)).Elem()
}

func (o HivePartitioningOptionsPtrOutput) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return o
}

func (o HivePartitioningOptionsPtrOutput) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return o
}

func (o HivePartitioningOptionsPtrOutput) Elem() HivePartitioningOptionsOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) HivePartitioningOptions {
		if v != nil {
			return *v
		}
		var ret HivePartitioningOptions
		return ret
	}).(HivePartitioningOptionsOutput)
}

// Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
func (o HivePartitioningOptionsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
func (o HivePartitioningOptionsPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
func (o HivePartitioningOptionsPtrOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.SourceUriPrefix
	}).(pulumi.StringPtrOutput)
}

// Options for configuring hive partitioning detect.
type HivePartitioningOptionsResponse struct {
	// For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.
	Fields []string `pulumi:"fields"`
	// Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
	Mode string `pulumi:"mode"`
	// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
	RequirePartitionFilter bool `pulumi:"requirePartitionFilter"`
	// Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
	SourceUriPrefix string `pulumi:"sourceUriPrefix"`
}

// Options for configuring hive partitioning detect.
type HivePartitioningOptionsResponseOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptionsResponse)(nil)).Elem()
}

func (o HivePartitioningOptionsResponseOutput) ToHivePartitioningOptionsResponseOutput() HivePartitioningOptionsResponseOutput {
	return o
}

func (o HivePartitioningOptionsResponseOutput) ToHivePartitioningOptionsResponseOutputWithContext(ctx context.Context) HivePartitioningOptionsResponseOutput {
	return o
}

// For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.
func (o HivePartitioningOptionsResponseOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.
func (o HivePartitioningOptionsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.
func (o HivePartitioningOptionsResponseOutput) RequirePartitionFilter() pulumi.BoolOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) bool { return v.RequirePartitionFilter }).(pulumi.BoolOutput)
}

// Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.
func (o HivePartitioningOptionsResponseOutput) SourceUriPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) string { return v.SourceUriPrefix }).(pulumi.StringOutput)
}

// Training info of a trial in [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models.
type HparamTuningTrialResponse struct {
	// Ending time of the trial.
	EndTimeMs string `pulumi:"endTimeMs"`
	// Error message for FAILED and INFEASIBLE trial.
	ErrorMessage string `pulumi:"errorMessage"`
	// Loss computed on the eval data at the end of trial.
	EvalLoss float64 `pulumi:"evalLoss"`
	// Evaluation metrics of this trial calculated on the test data. Empty in Job API.
	EvaluationMetrics EvaluationMetricsResponse `pulumi:"evaluationMetrics"`
	// Hyperparameter tuning evaluation metrics of this trial calculated on the eval data. Unlike evaluation_metrics, only the fields corresponding to the hparam_tuning_objectives are set.
	HparamTuningEvaluationMetrics EvaluationMetricsResponse `pulumi:"hparamTuningEvaluationMetrics"`
	// The hyperprameters selected for this trial.
	Hparams TrainingOptionsResponse `pulumi:"hparams"`
	// Starting time of the trial.
	StartTimeMs string `pulumi:"startTimeMs"`
	// The status of the trial.
	Status string `pulumi:"status"`
	// Loss computed on the training data at the end of trial.
	TrainingLoss float64 `pulumi:"trainingLoss"`
	// 1-based index of the trial.
	TrialId string `pulumi:"trialId"`
}

// Training info of a trial in [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models.
type HparamTuningTrialResponseOutput struct{ *pulumi.OutputState }

func (HparamTuningTrialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HparamTuningTrialResponse)(nil)).Elem()
}

func (o HparamTuningTrialResponseOutput) ToHparamTuningTrialResponseOutput() HparamTuningTrialResponseOutput {
	return o
}

func (o HparamTuningTrialResponseOutput) ToHparamTuningTrialResponseOutputWithContext(ctx context.Context) HparamTuningTrialResponseOutput {
	return o
}

// Ending time of the trial.
func (o HparamTuningTrialResponseOutput) EndTimeMs() pulumi.StringOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) string { return v.EndTimeMs }).(pulumi.StringOutput)
}

// Error message for FAILED and INFEASIBLE trial.
func (o HparamTuningTrialResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Loss computed on the eval data at the end of trial.
func (o HparamTuningTrialResponseOutput) EvalLoss() pulumi.Float64Output {
	return o.ApplyT(func(v HparamTuningTrialResponse) float64 { return v.EvalLoss }).(pulumi.Float64Output)
}

// Evaluation metrics of this trial calculated on the test data. Empty in Job API.
func (o HparamTuningTrialResponseOutput) EvaluationMetrics() EvaluationMetricsResponseOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) EvaluationMetricsResponse { return v.EvaluationMetrics }).(EvaluationMetricsResponseOutput)
}

// Hyperparameter tuning evaluation metrics of this trial calculated on the eval data. Unlike evaluation_metrics, only the fields corresponding to the hparam_tuning_objectives are set.
func (o HparamTuningTrialResponseOutput) HparamTuningEvaluationMetrics() EvaluationMetricsResponseOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) EvaluationMetricsResponse { return v.HparamTuningEvaluationMetrics }).(EvaluationMetricsResponseOutput)
}

// The hyperprameters selected for this trial.
func (o HparamTuningTrialResponseOutput) Hparams() TrainingOptionsResponseOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) TrainingOptionsResponse { return v.Hparams }).(TrainingOptionsResponseOutput)
}

// Starting time of the trial.
func (o HparamTuningTrialResponseOutput) StartTimeMs() pulumi.StringOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) string { return v.StartTimeMs }).(pulumi.StringOutput)
}

// The status of the trial.
func (o HparamTuningTrialResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Loss computed on the training data at the end of trial.
func (o HparamTuningTrialResponseOutput) TrainingLoss() pulumi.Float64Output {
	return o.ApplyT(func(v HparamTuningTrialResponse) float64 { return v.TrainingLoss }).(pulumi.Float64Output)
}

// 1-based index of the trial.
func (o HparamTuningTrialResponseOutput) TrialId() pulumi.StringOutput {
	return o.ApplyT(func(v HparamTuningTrialResponse) string { return v.TrialId }).(pulumi.StringOutput)
}

type HparamTuningTrialResponseArrayOutput struct{ *pulumi.OutputState }

func (HparamTuningTrialResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HparamTuningTrialResponse)(nil)).Elem()
}

func (o HparamTuningTrialResponseArrayOutput) ToHparamTuningTrialResponseArrayOutput() HparamTuningTrialResponseArrayOutput {
	return o
}

func (o HparamTuningTrialResponseArrayOutput) ToHparamTuningTrialResponseArrayOutputWithContext(ctx context.Context) HparamTuningTrialResponseArrayOutput {
	return o
}

func (o HparamTuningTrialResponseArrayOutput) Index(i pulumi.IntInput) HparamTuningTrialResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HparamTuningTrialResponse {
		return vs[0].([]HparamTuningTrialResponse)[vs[1].(int)]
	}).(HparamTuningTrialResponseOutput)
}

// Reason about why no search index was used in the search query (or sub-query).
type IndexUnusedReasonResponse struct {
	// Specifies the base table involved in the reason that no search index was used.
	BaseTable TableReferenceResponse `pulumi:"baseTable"`
	// Specifies the high-level reason for the scenario when no search index was used.
	Code string `pulumi:"code"`
	// Specifies the name of the unused search index, if available.
	IndexName string `pulumi:"indexName"`
	// Free form human-readable reason for the scenario when no search index was used.
	Message string `pulumi:"message"`
}

// Reason about why no search index was used in the search query (or sub-query).
type IndexUnusedReasonResponseOutput struct{ *pulumi.OutputState }

func (IndexUnusedReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexUnusedReasonResponse)(nil)).Elem()
}

func (o IndexUnusedReasonResponseOutput) ToIndexUnusedReasonResponseOutput() IndexUnusedReasonResponseOutput {
	return o
}

func (o IndexUnusedReasonResponseOutput) ToIndexUnusedReasonResponseOutputWithContext(ctx context.Context) IndexUnusedReasonResponseOutput {
	return o
}

// Specifies the base table involved in the reason that no search index was used.
func (o IndexUnusedReasonResponseOutput) BaseTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) TableReferenceResponse { return v.BaseTable }).(TableReferenceResponseOutput)
}

// Specifies the high-level reason for the scenario when no search index was used.
func (o IndexUnusedReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Specifies the name of the unused search index, if available.
func (o IndexUnusedReasonResponseOutput) IndexName() pulumi.StringOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) string { return v.IndexName }).(pulumi.StringOutput)
}

// Free form human-readable reason for the scenario when no search index was used.
func (o IndexUnusedReasonResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) string { return v.Message }).(pulumi.StringOutput)
}

type IndexUnusedReasonResponseArrayOutput struct{ *pulumi.OutputState }

func (IndexUnusedReasonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexUnusedReasonResponse)(nil)).Elem()
}

func (o IndexUnusedReasonResponseArrayOutput) ToIndexUnusedReasonResponseArrayOutput() IndexUnusedReasonResponseArrayOutput {
	return o
}

func (o IndexUnusedReasonResponseArrayOutput) ToIndexUnusedReasonResponseArrayOutputWithContext(ctx context.Context) IndexUnusedReasonResponseArrayOutput {
	return o
}

func (o IndexUnusedReasonResponseArrayOutput) Index(i pulumi.IntInput) IndexUnusedReasonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexUnusedReasonResponse {
		return vs[0].([]IndexUnusedReasonResponse)[vs[1].(int)]
	}).(IndexUnusedReasonResponseOutput)
}

// Details about the input data change insight.
type InputDataChangeResponse struct {
	// Records read difference percentage compared to a previous run.
	RecordsReadDiffPercentage float64 `pulumi:"recordsReadDiffPercentage"`
}

// Details about the input data change insight.
type InputDataChangeResponseOutput struct{ *pulumi.OutputState }

func (InputDataChangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputDataChangeResponse)(nil)).Elem()
}

func (o InputDataChangeResponseOutput) ToInputDataChangeResponseOutput() InputDataChangeResponseOutput {
	return o
}

func (o InputDataChangeResponseOutput) ToInputDataChangeResponseOutputWithContext(ctx context.Context) InputDataChangeResponseOutput {
	return o
}

// Records read difference percentage compared to a previous run.
func (o InputDataChangeResponseOutput) RecordsReadDiffPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v InputDataChangeResponse) float64 { return v.RecordsReadDiffPercentage }).(pulumi.Float64Output)
}

// Information about a single iteration of the training run.
type IterationResultResponse struct {
	// Arima result.
	ArimaResult ArimaResultResponse `pulumi:"arimaResult"`
	// Information about top clusters for clustering models.
	ClusterInfos []ClusterInfoResponse `pulumi:"clusterInfos"`
	// Time taken to run the iteration in milliseconds.
	DurationMs string `pulumi:"durationMs"`
	// Loss computed on the eval data at the end of iteration.
	EvalLoss float64 `pulumi:"evalLoss"`
	// Index of the iteration, 0 based.
	Index int `pulumi:"index"`
	// Learn rate used for this iteration.
	LearnRate float64 `pulumi:"learnRate"`
	// The information of the principal components.
	PrincipalComponentInfos []PrincipalComponentInfoResponse `pulumi:"principalComponentInfos"`
	// Loss computed on the training data at the end of iteration.
	TrainingLoss float64 `pulumi:"trainingLoss"`
}

// Information about a single iteration of the training run.
type IterationResultResponseOutput struct{ *pulumi.OutputState }

func (IterationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IterationResultResponse)(nil)).Elem()
}

func (o IterationResultResponseOutput) ToIterationResultResponseOutput() IterationResultResponseOutput {
	return o
}

func (o IterationResultResponseOutput) ToIterationResultResponseOutputWithContext(ctx context.Context) IterationResultResponseOutput {
	return o
}

// Arima result.
func (o IterationResultResponseOutput) ArimaResult() ArimaResultResponseOutput {
	return o.ApplyT(func(v IterationResultResponse) ArimaResultResponse { return v.ArimaResult }).(ArimaResultResponseOutput)
}

// Information about top clusters for clustering models.
func (o IterationResultResponseOutput) ClusterInfos() ClusterInfoResponseArrayOutput {
	return o.ApplyT(func(v IterationResultResponse) []ClusterInfoResponse { return v.ClusterInfos }).(ClusterInfoResponseArrayOutput)
}

// Time taken to run the iteration in milliseconds.
func (o IterationResultResponseOutput) DurationMs() pulumi.StringOutput {
	return o.ApplyT(func(v IterationResultResponse) string { return v.DurationMs }).(pulumi.StringOutput)
}

// Loss computed on the eval data at the end of iteration.
func (o IterationResultResponseOutput) EvalLoss() pulumi.Float64Output {
	return o.ApplyT(func(v IterationResultResponse) float64 { return v.EvalLoss }).(pulumi.Float64Output)
}

// Index of the iteration, 0 based.
func (o IterationResultResponseOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v IterationResultResponse) int { return v.Index }).(pulumi.IntOutput)
}

// Learn rate used for this iteration.
func (o IterationResultResponseOutput) LearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v IterationResultResponse) float64 { return v.LearnRate }).(pulumi.Float64Output)
}

// The information of the principal components.
func (o IterationResultResponseOutput) PrincipalComponentInfos() PrincipalComponentInfoResponseArrayOutput {
	return o.ApplyT(func(v IterationResultResponse) []PrincipalComponentInfoResponse { return v.PrincipalComponentInfos }).(PrincipalComponentInfoResponseArrayOutput)
}

// Loss computed on the training data at the end of iteration.
func (o IterationResultResponseOutput) TrainingLoss() pulumi.Float64Output {
	return o.ApplyT(func(v IterationResultResponse) float64 { return v.TrainingLoss }).(pulumi.Float64Output)
}

type IterationResultResponseArrayOutput struct{ *pulumi.OutputState }

func (IterationResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IterationResultResponse)(nil)).Elem()
}

func (o IterationResultResponseArrayOutput) ToIterationResultResponseArrayOutput() IterationResultResponseArrayOutput {
	return o
}

func (o IterationResultResponseArrayOutput) ToIterationResultResponseArrayOutputWithContext(ctx context.Context) IterationResultResponseArrayOutput {
	return o
}

func (o IterationResultResponseArrayOutput) Index(i pulumi.IntInput) IterationResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IterationResultResponse {
		return vs[0].([]IterationResultResponse)[vs[1].(int)]
	}).(IterationResultResponseOutput)
}

type JobConfiguration struct {
	// [Pick one] Copies a table.
	Copy *JobConfigurationTableCopy `pulumi:"copy"`
	// Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun *bool `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract *JobConfigurationExtract `pulumi:"extract"`
	// Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.
	JobTimeoutMs *string `pulumi:"jobTimeoutMs"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels map[string]string `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load *JobConfigurationLoad `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query *JobConfigurationQuery `pulumi:"query"`
}

// JobConfigurationInput is an input type that accepts JobConfigurationArgs and JobConfigurationOutput values.
// You can construct a concrete instance of `JobConfigurationInput` via:
//
//	JobConfigurationArgs{...}
type JobConfigurationInput interface {
	pulumi.Input

	ToJobConfigurationOutput() JobConfigurationOutput
	ToJobConfigurationOutputWithContext(context.Context) JobConfigurationOutput
}

type JobConfigurationArgs struct {
	// [Pick one] Copies a table.
	Copy JobConfigurationTableCopyPtrInput `pulumi:"copy"`
	// Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun pulumi.BoolPtrInput `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract JobConfigurationExtractPtrInput `pulumi:"extract"`
	// Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.
	JobTimeoutMs pulumi.StringPtrInput `pulumi:"jobTimeoutMs"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load JobConfigurationLoadPtrInput `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query JobConfigurationQueryPtrInput `pulumi:"query"`
}

func (JobConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (i JobConfigurationArgs) ToJobConfigurationOutput() JobConfigurationOutput {
	return i.ToJobConfigurationOutputWithContext(context.Background())
}

func (i JobConfigurationArgs) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationOutput)
}

type JobConfigurationOutput struct{ *pulumi.OutputState }

func (JobConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (o JobConfigurationOutput) ToJobConfigurationOutput() JobConfigurationOutput {
	return o
}

func (o JobConfigurationOutput) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return o
}

// [Pick one] Copies a table.
func (o JobConfigurationOutput) Copy() JobConfigurationTableCopyPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationTableCopy { return v.Copy }).(JobConfigurationTableCopyPtrOutput)
}

// Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
func (o JobConfigurationOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// [Pick one] Configures an extract job.
func (o JobConfigurationOutput) Extract() JobConfigurationExtractPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationExtract { return v.Extract }).(JobConfigurationExtractPtrOutput)
}

// Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.
func (o JobConfigurationOutput) JobTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *string { return v.JobTimeoutMs }).(pulumi.StringPtrOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o JobConfigurationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfiguration) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// [Pick one] Configures a load job.
func (o JobConfigurationOutput) Load() JobConfigurationLoadPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationLoad { return v.Load }).(JobConfigurationLoadPtrOutput)
}

// [Pick one] Configures a query job.
func (o JobConfigurationOutput) Query() JobConfigurationQueryPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationQuery { return v.Query }).(JobConfigurationQueryPtrOutput)
}

// JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
type JobConfigurationExtract struct {
	// Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
	Compression *string `pulumi:"compression"`
	// Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat *string `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri *string `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris []string `pulumi:"destinationUris"`
	// Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Optional. Model extract options only applicable when extracting models.
	ModelExtractOptions *ModelExtractOptions `pulumi:"modelExtractOptions"`
	// Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader *bool `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel *ModelReference `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable *TableReference `pulumi:"sourceTable"`
	// Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
}

// JobConfigurationExtractInput is an input type that accepts JobConfigurationExtractArgs and JobConfigurationExtractOutput values.
// You can construct a concrete instance of `JobConfigurationExtractInput` via:
//
//	JobConfigurationExtractArgs{...}
type JobConfigurationExtractInput interface {
	pulumi.Input

	ToJobConfigurationExtractOutput() JobConfigurationExtractOutput
	ToJobConfigurationExtractOutputWithContext(context.Context) JobConfigurationExtractOutput
}

// JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
type JobConfigurationExtractArgs struct {
	// Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat pulumi.StringPtrInput `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri pulumi.StringPtrInput `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris pulumi.StringArrayInput `pulumi:"destinationUris"`
	// Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Optional. Model extract options only applicable when extracting models.
	ModelExtractOptions ModelExtractOptionsPtrInput `pulumi:"modelExtractOptions"`
	// Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader pulumi.BoolPtrInput `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel ModelReferencePtrInput `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable TableReferencePtrInput `pulumi:"sourceTable"`
	// Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
}

func (JobConfigurationExtractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtract)(nil)).Elem()
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractOutput() JobConfigurationExtractOutput {
	return i.ToJobConfigurationExtractOutputWithContext(context.Background())
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractOutputWithContext(ctx context.Context) JobConfigurationExtractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractOutput)
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return i.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractOutput).ToJobConfigurationExtractPtrOutputWithContext(ctx)
}

// JobConfigurationExtractPtrInput is an input type that accepts JobConfigurationExtractArgs, JobConfigurationExtractPtr and JobConfigurationExtractPtrOutput values.
// You can construct a concrete instance of `JobConfigurationExtractPtrInput` via:
//
//	        JobConfigurationExtractArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationExtractPtrInput interface {
	pulumi.Input

	ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput
	ToJobConfigurationExtractPtrOutputWithContext(context.Context) JobConfigurationExtractPtrOutput
}

type jobConfigurationExtractPtrType JobConfigurationExtractArgs

func JobConfigurationExtractPtr(v *JobConfigurationExtractArgs) JobConfigurationExtractPtrInput {
	return (*jobConfigurationExtractPtrType)(v)
}

func (*jobConfigurationExtractPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationExtract)(nil)).Elem()
}

func (i *jobConfigurationExtractPtrType) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return i.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationExtractPtrType) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractPtrOutput)
}

// JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
type JobConfigurationExtractOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtract)(nil)).Elem()
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractOutput() JobConfigurationExtractOutput {
	return o
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractOutputWithContext(ctx context.Context) JobConfigurationExtractOutput {
	return o
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return o.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationExtract) *JobConfigurationExtract {
		return &v
	}).(JobConfigurationExtractPtrOutput)
}

// Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.DestinationFormat }).(pulumi.StringPtrOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractOutput) DestinationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.DestinationUri }).(pulumi.StringPtrOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationExtract) []string { return v.DestinationUris }).(pulumi.StringArrayOutput)
}

// Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Optional. Model extract options only applicable when extracting models.
func (o JobConfigurationExtractOutput) ModelExtractOptions() ModelExtractOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *ModelExtractOptions { return v.ModelExtractOptions }).(ModelExtractOptionsPtrOutput)
}

// Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *bool { return v.PrintHeader }).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractOutput) SourceModel() ModelReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *ModelReference { return v.SourceModel }).(ModelReferencePtrOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *TableReference { return v.SourceTable }).(TableReferencePtrOutput)
}

// Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

type JobConfigurationExtractPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationExtract)(nil)).Elem()
}

func (o JobConfigurationExtractPtrOutput) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return o
}

func (o JobConfigurationExtractPtrOutput) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return o
}

func (o JobConfigurationExtractPtrOutput) Elem() JobConfigurationExtractOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) JobConfigurationExtract {
		if v != nil {
			return *v
		}
		var ret JobConfigurationExtract
		return ret
	}).(JobConfigurationExtractOutput)
}

// Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractPtrOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.DestinationFormat
	}).(pulumi.StringPtrOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractPtrOutput) DestinationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.DestinationUri
	}).(pulumi.StringPtrOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractPtrOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) []string {
		if v == nil {
			return nil
		}
		return v.DestinationUris
	}).(pulumi.StringArrayOutput)
}

// Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Optional. Model extract options only applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) ModelExtractOptions() ModelExtractOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *ModelExtractOptions {
		if v == nil {
			return nil
		}
		return v.ModelExtractOptions
	}).(ModelExtractOptionsPtrOutput)
}

// Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *bool {
		if v == nil {
			return nil
		}
		return v.PrintHeader
	}).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractPtrOutput) SourceModel() ModelReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *ModelReference {
		if v == nil {
			return nil
		}
		return v.SourceModel
	}).(ModelReferencePtrOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractPtrOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(TableReferencePtrOutput)
}

// Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

// JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
type JobConfigurationExtractResponse struct {
	// Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
	Compression string `pulumi:"compression"`
	// Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat string `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri string `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris []string `pulumi:"destinationUris"`
	// Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter string `pulumi:"fieldDelimiter"`
	// Optional. Model extract options only applicable when extracting models.
	ModelExtractOptions ModelExtractOptionsResponse `pulumi:"modelExtractOptions"`
	// Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader bool `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel ModelReferenceResponse `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable TableReferenceResponse `pulumi:"sourceTable"`
	// Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
	UseAvroLogicalTypes bool `pulumi:"useAvroLogicalTypes"`
}

// JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.
type JobConfigurationExtractResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtractResponse)(nil)).Elem()
}

func (o JobConfigurationExtractResponseOutput) ToJobConfigurationExtractResponseOutput() JobConfigurationExtractResponseOutput {
	return o
}

func (o JobConfigurationExtractResponseOutput) ToJobConfigurationExtractResponseOutputWithContext(ctx context.Context) JobConfigurationExtractResponseOutput {
	return o
}

// Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.Compression }).(pulumi.StringOutput)
}

// Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractResponseOutput) DestinationFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.DestinationFormat }).(pulumi.StringOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractResponseOutput) DestinationUri() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.DestinationUri }).(pulumi.StringOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractResponseOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) []string { return v.DestinationUris }).(pulumi.StringArrayOutput)
}

// Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// Optional. Model extract options only applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) ModelExtractOptions() ModelExtractOptionsResponseOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) ModelExtractOptionsResponse { return v.ModelExtractOptions }).(ModelExtractOptionsResponseOutput)
}

// Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) PrintHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) bool { return v.PrintHeader }).(pulumi.BoolOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractResponseOutput) SourceModel() ModelReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) ModelReferenceResponse { return v.SourceModel }).(ModelReferenceResponseOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractResponseOutput) SourceTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) TableReferenceResponse { return v.SourceTable }).(TableReferenceResponseOutput)
}

// Whether to use logical types when extracting to AVRO format. Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) UseAvroLogicalTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) bool { return v.UseAvroLogicalTypes }).(pulumi.BoolOutput)
}

// JobConfigurationLoad contains the configuration properties for loading data into a destination table.
type JobConfigurationLoad struct {
	// Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect *bool `pulumi:"autodetect"`
	// Clustering specification for the destination table.
	Clustering *Clustering `pulumi:"clustering"`
	// Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
	ConnectionProperties []ConnectionProperty `pulumi:"connectionProperties"`
	// Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.
	CopyFilesOnly *bool `pulumi:"copyFilesOnly"`
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
	CreateSession *bool `pulumi:"createSession"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []JobConfigurationLoadDecimalTargetTypesItem `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// Optional. [Experimental] Properties with which to create the destination table if it is new.
	DestinationTableProperties *DestinationTableProperties `pulumi:"destinationTableProperties"`
	// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.
	Encoding *string `pulumi:"encoding"`
	// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
	FileSetSpecType *JobConfigurationLoadFileSetSpecType `pulumi:"fileSetSpecType"`
	// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
	HivePartitioningOptions *HivePartitioningOptions `pulumi:"hivePartitioningOptions"`
	// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
	JsonExtension *JobConfigurationLoadJsonExtension `pulumi:"jsonExtension"`
	// Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker *string `pulumi:"nullMarker"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions *ParquetOptions `pulumi:"parquetOptions"`
	// Optional. When sourceFormat is set to "CSV", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters *bool `pulumi:"preserveAsciiControlCharacters"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields []string `pulumi:"projectionFields"`
	// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '. @default "
	Quote *string `pulumi:"quote"`
	// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `pulumi:"rangePartitioning"`
	// Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri *string `pulumi:"referenceFileSchemaUri"`
	// Optional. The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema *TableSchema `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	//
	// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline *string `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	//
	// Deprecated: [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat *string `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
	// Optional. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat *string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `pulumi:"timePartitioning"`
	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationLoadInput is an input type that accepts JobConfigurationLoadArgs and JobConfigurationLoadOutput values.
// You can construct a concrete instance of `JobConfigurationLoadInput` via:
//
//	JobConfigurationLoadArgs{...}
type JobConfigurationLoadInput interface {
	pulumi.Input

	ToJobConfigurationLoadOutput() JobConfigurationLoadOutput
	ToJobConfigurationLoadOutputWithContext(context.Context) JobConfigurationLoadOutput
}

// JobConfigurationLoad contains the configuration properties for loading data into a destination table.
type JobConfigurationLoadArgs struct {
	// Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect pulumi.BoolPtrInput `pulumi:"autodetect"`
	// Clustering specification for the destination table.
	Clustering ClusteringPtrInput `pulumi:"clustering"`
	// Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
	ConnectionProperties ConnectionPropertyArrayInput `pulumi:"connectionProperties"`
	// Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.
	CopyFilesOnly pulumi.BoolPtrInput `pulumi:"copyFilesOnly"`
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
	CreateSession pulumi.BoolPtrInput `pulumi:"createSession"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes JobConfigurationLoadDecimalTargetTypesItemArrayInput `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// Optional. [Experimental] Properties with which to create the destination table if it is new.
	DestinationTableProperties DestinationTablePropertiesPtrInput `pulumi:"destinationTableProperties"`
	// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
	FileSetSpecType JobConfigurationLoadFileSetSpecTypePtrInput `pulumi:"fileSetSpecType"`
	// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
	HivePartitioningOptions HivePartitioningOptionsPtrInput `pulumi:"hivePartitioningOptions"`
	// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
	JsonExtension JobConfigurationLoadJsonExtensionPtrInput `pulumi:"jsonExtension"`
	// Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker pulumi.StringPtrInput `pulumi:"nullMarker"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions ParquetOptionsPtrInput `pulumi:"parquetOptions"`
	// Optional. When sourceFormat is set to "CSV", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters pulumi.BoolPtrInput `pulumi:"preserveAsciiControlCharacters"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields pulumi.StringArrayInput `pulumi:"projectionFields"`
	// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '. @default "
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningPtrInput `pulumi:"rangePartitioning"`
	// Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri pulumi.StringPtrInput `pulumi:"referenceFileSchemaUri"`
	// Optional. The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema TableSchemaPtrInput `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	//
	// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline pulumi.StringPtrInput `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	//
	// Deprecated: [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat pulumi.StringPtrInput `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
	// Optional. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningPtrInput `pulumi:"timePartitioning"`
	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationLoadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoad)(nil)).Elem()
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadOutput() JobConfigurationLoadOutput {
	return i.ToJobConfigurationLoadOutputWithContext(context.Background())
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadOutputWithContext(ctx context.Context) JobConfigurationLoadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadOutput)
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return i.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadOutput).ToJobConfigurationLoadPtrOutputWithContext(ctx)
}

// JobConfigurationLoadPtrInput is an input type that accepts JobConfigurationLoadArgs, JobConfigurationLoadPtr and JobConfigurationLoadPtrOutput values.
// You can construct a concrete instance of `JobConfigurationLoadPtrInput` via:
//
//	        JobConfigurationLoadArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationLoadPtrInput interface {
	pulumi.Input

	ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput
	ToJobConfigurationLoadPtrOutputWithContext(context.Context) JobConfigurationLoadPtrOutput
}

type jobConfigurationLoadPtrType JobConfigurationLoadArgs

func JobConfigurationLoadPtr(v *JobConfigurationLoadArgs) JobConfigurationLoadPtrInput {
	return (*jobConfigurationLoadPtrType)(v)
}

func (*jobConfigurationLoadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationLoad)(nil)).Elem()
}

func (i *jobConfigurationLoadPtrType) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return i.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationLoadPtrType) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadPtrOutput)
}

// JobConfigurationLoad contains the configuration properties for loading data into a destination table.
type JobConfigurationLoadOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoad)(nil)).Elem()
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadOutput() JobConfigurationLoadOutput {
	return o
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadOutputWithContext(ctx context.Context) JobConfigurationLoadOutput {
	return o
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return o.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationLoad) *JobConfigurationLoad {
		return &v
	}).(JobConfigurationLoadPtrOutput)
}

// Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.Autodetect }).(pulumi.BoolPtrOutput)
}

// Clustering specification for the destination table.
func (o JobConfigurationLoadOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *Clustering { return v.Clustering }).(ClusteringPtrOutput)
}

// Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
func (o JobConfigurationLoadOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []ConnectionProperty { return v.ConnectionProperties }).(ConnectionPropertyArrayOutput)
}

// Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.
func (o JobConfigurationLoadOutput) CopyFilesOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.CopyFilesOnly }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
func (o JobConfigurationLoadOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.CreateSession }).(pulumi.BoolPtrOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadOutput) DecimalTargetTypes() JobConfigurationLoadDecimalTargetTypesItemArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []JobConfigurationLoadDecimalTargetTypesItem { return v.DecimalTargetTypes }).(JobConfigurationLoadDecimalTargetTypesItemArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
func (o JobConfigurationLoadOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *EncryptionConfiguration { return v.DestinationEncryptionConfiguration }).(EncryptionConfigurationPtrOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// Optional. [Experimental] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadOutput) DestinationTableProperties() DestinationTablePropertiesPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *DestinationTableProperties { return v.DestinationTableProperties }).(DestinationTablePropertiesPtrOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.
func (o JobConfigurationLoadOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
func (o JobConfigurationLoadOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
func (o JobConfigurationLoadOutput) FileSetSpecType() JobConfigurationLoadFileSetSpecTypePtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *JobConfigurationLoadFileSetSpecType { return v.FileSetSpecType }).(JobConfigurationLoadFileSetSpecTypePtrOutput)
}

// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
func (o JobConfigurationLoadOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *HivePartitioningOptions { return v.HivePartitioningOptions }).(HivePartitioningOptionsPtrOutput)
}

// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.
func (o JobConfigurationLoadOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
func (o JobConfigurationLoadOutput) JsonExtension() JobConfigurationLoadJsonExtensionPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *JobConfigurationLoadJsonExtension { return v.JsonExtension }).(JobConfigurationLoadJsonExtensionPtrOutput)
}

// Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
func (o JobConfigurationLoadOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.NullMarker }).(pulumi.StringPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to PARQUET.
func (o JobConfigurationLoadOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *ParquetOptions { return v.ParquetOptions }).(ParquetOptionsPtrOutput)
}

// Optional. When sourceFormat is set to "CSV", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
func (o JobConfigurationLoadOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.ProjectionFields }).(pulumi.StringArrayOutput)
}

// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '. @default "
func (o JobConfigurationLoadOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *RangePartitioning { return v.RangePartitioning }).(RangePartitioningPtrOutput)
}

// Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
func (o JobConfigurationLoadOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.ReferenceFileSchemaUri }).(pulumi.StringPtrOutput)
}

// Optional. The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TableSchema { return v.Schema }).(TableSchemaPtrOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
//
// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadOutput) SchemaInline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SchemaInline }).(pulumi.StringPtrOutput)
}

// [Deprecated] The format of the schemaInline property.
//
// Deprecated: [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadOutput) SchemaInlineFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SchemaInlineFormat }).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o JobConfigurationLoadOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

// Optional. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TimePartitioning { return v.TimePartitioning }).(TimePartitioningPtrOutput)
}

// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o JobConfigurationLoadOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationLoadPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationLoad)(nil)).Elem()
}

func (o JobConfigurationLoadPtrOutput) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return o
}

func (o JobConfigurationLoadPtrOutput) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return o
}

func (o JobConfigurationLoadPtrOutput) Elem() JobConfigurationLoadOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) JobConfigurationLoad {
		if v != nil {
			return *v
		}
		var ret JobConfigurationLoad
		return ret
	}).(JobConfigurationLoadOutput)
}

// Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// Clustering specification for the destination table.
func (o JobConfigurationLoadPtrOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *Clustering {
		if v == nil {
			return nil
		}
		return v.Clustering
	}).(ClusteringPtrOutput)
}

// Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
func (o JobConfigurationLoadPtrOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []ConnectionProperty {
		if v == nil {
			return nil
		}
		return v.ConnectionProperties
	}).(ConnectionPropertyArrayOutput)
}

// Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.
func (o JobConfigurationLoadPtrOutput) CopyFilesOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.CopyFilesOnly
	}).(pulumi.BoolPtrOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
func (o JobConfigurationLoadPtrOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSession
	}).(pulumi.BoolPtrOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadPtrOutput) DecimalTargetTypes() JobConfigurationLoadDecimalTargetTypesItemArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []JobConfigurationLoadDecimalTargetTypesItem {
		if v == nil {
			return nil
		}
		return v.DecimalTargetTypes
	}).(JobConfigurationLoadDecimalTargetTypesItemArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
func (o JobConfigurationLoadPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// Optional. [Experimental] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadPtrOutput) DestinationTableProperties() DestinationTablePropertiesPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *DestinationTableProperties {
		if v == nil {
			return nil
		}
		return v.DestinationTableProperties
	}).(DestinationTablePropertiesPtrOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.
func (o JobConfigurationLoadPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
func (o JobConfigurationLoadPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
func (o JobConfigurationLoadPtrOutput) FileSetSpecType() JobConfigurationLoadFileSetSpecTypePtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *JobConfigurationLoadFileSetSpecType {
		if v == nil {
			return nil
		}
		return v.FileSetSpecType
	}).(JobConfigurationLoadFileSetSpecTypePtrOutput)
}

// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
func (o JobConfigurationLoadPtrOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *HivePartitioningOptions {
		if v == nil {
			return nil
		}
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsPtrOutput)
}

// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.
func (o JobConfigurationLoadPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
func (o JobConfigurationLoadPtrOutput) JsonExtension() JobConfigurationLoadJsonExtensionPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *JobConfigurationLoadJsonExtension {
		if v == nil {
			return nil
		}
		return v.JsonExtension
	}).(JobConfigurationLoadJsonExtensionPtrOutput)
}

// Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
func (o JobConfigurationLoadPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadPtrOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.NullMarker
	}).(pulumi.StringPtrOutput)
}

// Optional. Additional properties to set if sourceFormat is set to PARQUET.
func (o JobConfigurationLoadPtrOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *ParquetOptions {
		if v == nil {
			return nil
		}
		return v.ParquetOptions
	}).(ParquetOptionsPtrOutput)
}

// Optional. When sourceFormat is set to "CSV", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
func (o JobConfigurationLoadPtrOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveAsciiControlCharacters
	}).(pulumi.BoolPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadPtrOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.ProjectionFields
	}).(pulumi.StringArrayOutput)
}

// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '. @default "
func (o JobConfigurationLoadPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.Quote
	}).(pulumi.StringPtrOutput)
}

// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadPtrOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *RangePartitioning {
		if v == nil {
			return nil
		}
		return v.RangePartitioning
	}).(RangePartitioningPtrOutput)
}

// Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
func (o JobConfigurationLoadPtrOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceFileSchemaUri
	}).(pulumi.StringPtrOutput)
}

// Optional. The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadPtrOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TableSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(TableSchemaPtrOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
//
// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadPtrOutput) SchemaInline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SchemaInline
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] The format of the schemaInline property.
//
// Deprecated: [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadPtrOutput) SchemaInlineFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SchemaInlineFormat
	}).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o JobConfigurationLoadPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

// Optional. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadPtrOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TimePartitioning {
		if v == nil {
			return nil
		}
		return v.TimePartitioning
	}).(TimePartitioningPtrOutput)
}

// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o JobConfigurationLoadPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

// JobConfigurationLoad contains the configuration properties for loading data into a destination table.
type JobConfigurationLoadResponse struct {
	// Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines bool `pulumi:"allowQuotedNewlines"`
	// Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect bool `pulumi:"autodetect"`
	// Clustering specification for the destination table.
	Clustering ClusteringResponse `pulumi:"clustering"`
	// Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
	ConnectionProperties []ConnectionPropertyResponse `pulumi:"connectionProperties"`
	// Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.
	CopyFilesOnly bool `pulumi:"copyFilesOnly"`
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition string `pulumi:"createDisposition"`
	// Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
	CreateSession bool `pulumi:"createSession"`
	// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []string `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration EncryptionConfigurationResponse `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable TableReferenceResponse `pulumi:"destinationTable"`
	// Optional. [Experimental] Properties with which to create the destination table if it is new.
	DestinationTableProperties DestinationTablePropertiesResponse `pulumi:"destinationTableProperties"`
	// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.
	Encoding string `pulumi:"encoding"`
	// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
	FieldDelimiter string `pulumi:"fieldDelimiter"`
	// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
	FileSetSpecType string `pulumi:"fileSetSpecType"`
	// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
	HivePartitioningOptions HivePartitioningOptionsResponse `pulumi:"hivePartitioningOptions"`
	// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.
	IgnoreUnknownValues bool `pulumi:"ignoreUnknownValues"`
	// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
	JsonExtension string `pulumi:"jsonExtension"`
	// Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
	MaxBadRecords int `pulumi:"maxBadRecords"`
	// Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker string `pulumi:"nullMarker"`
	// Optional. Additional properties to set if sourceFormat is set to PARQUET.
	ParquetOptions ParquetOptionsResponse `pulumi:"parquetOptions"`
	// Optional. When sourceFormat is set to "CSV", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
	PreserveAsciiControlCharacters bool `pulumi:"preserveAsciiControlCharacters"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields []string `pulumi:"projectionFields"`
	// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '. @default "
	Quote string `pulumi:"quote"`
	// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningResponse `pulumi:"rangePartitioning"`
	// Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri string `pulumi:"referenceFileSchemaUri"`
	// Optional. The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema TableSchemaResponse `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	//
	// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline string `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	//
	// Deprecated: [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat string `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows int `pulumi:"skipLeadingRows"`
	// Optional. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningResponse `pulumi:"timePartitioning"`
	// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes bool `pulumi:"useAvroLogicalTypes"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition string `pulumi:"writeDisposition"`
}

// JobConfigurationLoad contains the configuration properties for loading data into a destination table.
type JobConfigurationLoadResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoadResponse)(nil)).Elem()
}

func (o JobConfigurationLoadResponseOutput) ToJobConfigurationLoadResponseOutput() JobConfigurationLoadResponseOutput {
	return o
}

func (o JobConfigurationLoadResponseOutput) ToJobConfigurationLoadResponseOutputWithContext(ctx context.Context) JobConfigurationLoadResponseOutput {
	return o
}

// Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadResponseOutput) AllowJaggedRows() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.AllowJaggedRows }).(pulumi.BoolOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadResponseOutput) AllowQuotedNewlines() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.AllowQuotedNewlines }).(pulumi.BoolOutput)
}

// Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadResponseOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// Clustering specification for the destination table.
func (o JobConfigurationLoadResponseOutput) Clustering() ClusteringResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) ClusteringResponse { return v.Clustering }).(ClusteringResponseOutput)
}

// Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.
func (o JobConfigurationLoadResponseOutput) ConnectionProperties() ConnectionPropertyResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []ConnectionPropertyResponse { return v.ConnectionProperties }).(ConnectionPropertyResponseArrayOutput)
}

// Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.
func (o JobConfigurationLoadResponseOutput) CopyFilesOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.CopyFilesOnly }).(pulumi.BoolOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadResponseOutput) CreateDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.CreateDisposition }).(pulumi.StringOutput)
}

// Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
func (o JobConfigurationLoadResponseOutput) CreateSession() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.CreateSession }).(pulumi.BoolOutput)
}

// Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadResponseOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.DecimalTargetTypes }).(pulumi.StringArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
func (o JobConfigurationLoadResponseOutput) DestinationEncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) EncryptionConfigurationResponse {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationResponseOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadResponseOutput) DestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) TableReferenceResponse { return v.DestinationTable }).(TableReferenceResponseOutput)
}

// Optional. [Experimental] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadResponseOutput) DestinationTableProperties() DestinationTablePropertiesResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) DestinationTablePropertiesResponse {
		return v.DestinationTableProperties
	}).(DestinationTablePropertiesResponseOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.
func (o JobConfigurationLoadResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence "\t" (U+0009) to specify a tab separator. The default value is comma (",", U+002C).
func (o JobConfigurationLoadResponseOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.
func (o JobConfigurationLoadResponseOutput) FileSetSpecType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.FileSetSpecType }).(pulumi.StringOutput)
}

// Optional. When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.
func (o JobConfigurationLoadResponseOutput) HivePartitioningOptions() HivePartitioningOptionsResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) HivePartitioningOptionsResponse { return v.HivePartitioningOptions }).(HivePartitioningOptionsResponseOutput)
}

// Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.
func (o JobConfigurationLoadResponseOutput) IgnoreUnknownValues() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.IgnoreUnknownValues }).(pulumi.BoolOutput)
}

// Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).
func (o JobConfigurationLoadResponseOutput) JsonExtension() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.JsonExtension }).(pulumi.StringOutput)
}

// Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.
func (o JobConfigurationLoadResponseOutput) MaxBadRecords() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) int { return v.MaxBadRecords }).(pulumi.IntOutput)
}

// Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadResponseOutput) NullMarker() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.NullMarker }).(pulumi.StringOutput)
}

// Optional. Additional properties to set if sourceFormat is set to PARQUET.
func (o JobConfigurationLoadResponseOutput) ParquetOptions() ParquetOptionsResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) ParquetOptionsResponse { return v.ParquetOptions }).(ParquetOptionsResponseOutput)
}

// Optional. When sourceFormat is set to "CSV", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') are preserved.
func (o JobConfigurationLoadResponseOutput) PreserveAsciiControlCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadResponseOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.ProjectionFields }).(pulumi.StringArrayOutput)
}

// Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' " ', use ' "" '. @default "
func (o JobConfigurationLoadResponseOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.Quote }).(pulumi.StringOutput)
}

// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadResponseOutput) RangePartitioning() RangePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) RangePartitioningResponse { return v.RangePartitioning }).(RangePartitioningResponseOutput)
}

// Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.
func (o JobConfigurationLoadResponseOutput) ReferenceFileSchemaUri() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.ReferenceFileSchemaUri }).(pulumi.StringOutput)
}

// Optional. The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadResponseOutput) Schema() TableSchemaResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) TableSchemaResponse { return v.Schema }).(TableSchemaResponseOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
//
// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadResponseOutput) SchemaInline() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.SchemaInline }).(pulumi.StringOutput)
}

// [Deprecated] The format of the schemaInline property.
//
// Deprecated: [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadResponseOutput) SchemaInlineFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.SchemaInlineFormat }).(pulumi.StringOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadResponseOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o JobConfigurationLoadResponseOutput) SkipLeadingRows() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) int { return v.SkipLeadingRows }).(pulumi.IntOutput)
}

// Optional. The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadResponseOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadResponseOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadResponseOutput) TimePartitioning() TimePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) TimePartitioningResponse { return v.TimePartitioning }).(TimePartitioningResponseOutput)
}

// Optional. If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o JobConfigurationLoadResponseOutput) UseAvroLogicalTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.UseAvroLogicalTypes }).(pulumi.BoolOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

// JobConfigurationQuery configures a BigQuery query job.
type JobConfigurationQuery struct {
	// Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults *bool `pulumi:"allowLargeResults"`
	// Clustering specification for the destination table.
	Clustering *Clustering `pulumi:"clustering"`
	// Connection properties which can modify the query behavior.
	ConnectionProperties []ConnectionProperty `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
	Continuous *bool `pulumi:"continuous"`
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
	CreateSession *bool `pulumi:"createSession"`
	// Optional. Specifies the default dataset to use for unqualified table names in the query. This setting does not alter behavior of unqualified dataset names. Setting the system variable `@@dataset_id` achieves the same behavior. See https://cloud.google.com/bigquery/docs/reference/system-variables for more information on system variables.
	DefaultDataset *DatasetReference `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// Optional. Describes the table where the query results should be stored. This property must be set for large results that exceed the maximum response size. For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened.
	FlattenResults *bool `pulumi:"flattenResults"`
	// Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
	//
	// Deprecated: Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
	MaximumBillingTier *int `pulumi:"maximumBillingTier"`
	// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled *string `pulumi:"maximumBytesBilled"`
	// GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode *string `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	//
	// Deprecated: [Deprecated] This property is deprecated.
	PreserveNulls *bool `pulumi:"preserveNulls"`
	// Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority *string `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.
	Query *string `pulumi:"query"`
	// Query parameters for GoogleSQL queries.
	QueryParameters []QueryParameter `pulumi:"queryParameters"`
	// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// Options controlling the execution of scripts.
	ScriptOptions *ScriptOptions `pulumi:"scriptOptions"`
	// Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.
	TableDefinitions map[string]string `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `pulumi:"timePartitioning"`
	// Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql *bool `pulumi:"useLegacySql"`
	// Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache *bool `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResource `pulumi:"userDefinedFunctionResources"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationQueryInput is an input type that accepts JobConfigurationQueryArgs and JobConfigurationQueryOutput values.
// You can construct a concrete instance of `JobConfigurationQueryInput` via:
//
//	JobConfigurationQueryArgs{...}
type JobConfigurationQueryInput interface {
	pulumi.Input

	ToJobConfigurationQueryOutput() JobConfigurationQueryOutput
	ToJobConfigurationQueryOutputWithContext(context.Context) JobConfigurationQueryOutput
}

// JobConfigurationQuery configures a BigQuery query job.
type JobConfigurationQueryArgs struct {
	// Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults pulumi.BoolPtrInput `pulumi:"allowLargeResults"`
	// Clustering specification for the destination table.
	Clustering ClusteringPtrInput `pulumi:"clustering"`
	// Connection properties which can modify the query behavior.
	ConnectionProperties ConnectionPropertyArrayInput `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
	Continuous pulumi.BoolPtrInput `pulumi:"continuous"`
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
	CreateSession pulumi.BoolPtrInput `pulumi:"createSession"`
	// Optional. Specifies the default dataset to use for unqualified table names in the query. This setting does not alter behavior of unqualified dataset names. Setting the system variable `@@dataset_id` achieves the same behavior. See https://cloud.google.com/bigquery/docs/reference/system-variables for more information on system variables.
	DefaultDataset DatasetReferencePtrInput `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// Optional. Describes the table where the query results should be stored. This property must be set for large results that exceed the maximum response size. For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened.
	FlattenResults pulumi.BoolPtrInput `pulumi:"flattenResults"`
	// Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
	//
	// Deprecated: Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
	MaximumBillingTier pulumi.IntPtrInput `pulumi:"maximumBillingTier"`
	// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled pulumi.StringPtrInput `pulumi:"maximumBytesBilled"`
	// GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode pulumi.StringPtrInput `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	//
	// Deprecated: [Deprecated] This property is deprecated.
	PreserveNulls pulumi.BoolPtrInput `pulumi:"preserveNulls"`
	// Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Query parameters for GoogleSQL queries.
	QueryParameters QueryParameterArrayInput `pulumi:"queryParameters"`
	// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningPtrInput `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// Options controlling the execution of scripts.
	ScriptOptions ScriptOptionsPtrInput `pulumi:"scriptOptions"`
	// Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.
	TableDefinitions pulumi.StringMapInput `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningPtrInput `pulumi:"timePartitioning"`
	// Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
	// Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache pulumi.BoolPtrInput `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources UserDefinedFunctionResourceArrayInput `pulumi:"userDefinedFunctionResources"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQuery)(nil)).Elem()
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryOutput() JobConfigurationQueryOutput {
	return i.ToJobConfigurationQueryOutputWithContext(context.Background())
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryOutputWithContext(ctx context.Context) JobConfigurationQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryOutput)
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return i.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryOutput).ToJobConfigurationQueryPtrOutputWithContext(ctx)
}

// JobConfigurationQueryPtrInput is an input type that accepts JobConfigurationQueryArgs, JobConfigurationQueryPtr and JobConfigurationQueryPtrOutput values.
// You can construct a concrete instance of `JobConfigurationQueryPtrInput` via:
//
//	        JobConfigurationQueryArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationQueryPtrInput interface {
	pulumi.Input

	ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput
	ToJobConfigurationQueryPtrOutputWithContext(context.Context) JobConfigurationQueryPtrOutput
}

type jobConfigurationQueryPtrType JobConfigurationQueryArgs

func JobConfigurationQueryPtr(v *JobConfigurationQueryArgs) JobConfigurationQueryPtrInput {
	return (*jobConfigurationQueryPtrType)(v)
}

func (*jobConfigurationQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationQuery)(nil)).Elem()
}

func (i *jobConfigurationQueryPtrType) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return i.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationQueryPtrType) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryPtrOutput)
}

// JobConfigurationQuery configures a BigQuery query job.
type JobConfigurationQueryOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQuery)(nil)).Elem()
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryOutput() JobConfigurationQueryOutput {
	return o
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryOutputWithContext(ctx context.Context) JobConfigurationQueryOutput {
	return o
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return o.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationQuery) *JobConfigurationQuery {
		return &v
	}).(JobConfigurationQueryPtrOutput)
}

// Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.AllowLargeResults }).(pulumi.BoolPtrOutput)
}

// Clustering specification for the destination table.
func (o JobConfigurationQueryOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *Clustering { return v.Clustering }).(ClusteringPtrOutput)
}

// Connection properties which can modify the query behavior.
func (o JobConfigurationQueryOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []ConnectionProperty { return v.ConnectionProperties }).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
func (o JobConfigurationQueryOutput) Continuous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.Continuous }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
func (o JobConfigurationQueryOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.CreateSession }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies the default dataset to use for unqualified table names in the query. This setting does not alter behavior of unqualified dataset names. Setting the system variable `@@dataset_id` achieves the same behavior. See https://cloud.google.com/bigquery/docs/reference/system-variables for more information on system variables.
func (o JobConfigurationQueryOutput) DefaultDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *DatasetReference { return v.DefaultDataset }).(DatasetReferencePtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
func (o JobConfigurationQueryOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *EncryptionConfiguration { return v.DestinationEncryptionConfiguration }).(EncryptionConfigurationPtrOutput)
}

// Optional. Describes the table where the query results should be stored. This property must be set for large results that exceed the maximum response size. For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
func (o JobConfigurationQueryOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.FlattenResults }).(pulumi.BoolPtrOutput)
}

// Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
//
// Deprecated: Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
func (o JobConfigurationQueryOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *int { return v.MaximumBillingTier }).(pulumi.IntPtrOutput)
}

// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.MaximumBytesBilled }).(pulumi.StringPtrOutput)
}

// GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.ParameterMode }).(pulumi.StringPtrOutput)
}

// [Deprecated] This property is deprecated.
//
// Deprecated: [Deprecated] This property is deprecated.
func (o JobConfigurationQueryOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.PreserveNulls }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.
func (o JobConfigurationQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Query parameters for GoogleSQL queries.
func (o JobConfigurationQueryOutput) QueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []QueryParameter { return v.QueryParameters }).(QueryParameterArrayOutput)
}

// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *RangePartitioning { return v.RangePartitioning }).(RangePartitioningPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// Options controlling the execution of scripts.
func (o JobConfigurationQueryOutput) ScriptOptions() ScriptOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *ScriptOptions { return v.ScriptOptions }).(ScriptOptionsPtrOutput)
}

// Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.
func (o JobConfigurationQueryOutput) TableDefinitions() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfigurationQuery) map[string]string { return v.TableDefinitions }).(pulumi.StringMapOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *TimePartitioning { return v.TimePartitioning }).(TimePartitioningPtrOutput)
}

// Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

// Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.UseQueryCache }).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []UserDefinedFunctionResource { return v.UserDefinedFunctionResources }).(UserDefinedFunctionResourceArrayOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationQueryPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationQuery)(nil)).Elem()
}

func (o JobConfigurationQueryPtrOutput) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return o
}

func (o JobConfigurationQueryPtrOutput) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return o
}

func (o JobConfigurationQueryPtrOutput) Elem() JobConfigurationQueryOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) JobConfigurationQuery {
		if v != nil {
			return *v
		}
		var ret JobConfigurationQuery
		return ret
	}).(JobConfigurationQueryOutput)
}

// Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryPtrOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.AllowLargeResults
	}).(pulumi.BoolPtrOutput)
}

// Clustering specification for the destination table.
func (o JobConfigurationQueryPtrOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *Clustering {
		if v == nil {
			return nil
		}
		return v.Clustering
	}).(ClusteringPtrOutput)
}

// Connection properties which can modify the query behavior.
func (o JobConfigurationQueryPtrOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []ConnectionProperty {
		if v == nil {
			return nil
		}
		return v.ConnectionProperties
	}).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
func (o JobConfigurationQueryPtrOutput) Continuous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.Continuous
	}).(pulumi.BoolPtrOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
func (o JobConfigurationQueryPtrOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSession
	}).(pulumi.BoolPtrOutput)
}

// Optional. Specifies the default dataset to use for unqualified table names in the query. This setting does not alter behavior of unqualified dataset names. Setting the system variable `@@dataset_id` achieves the same behavior. See https://cloud.google.com/bigquery/docs/reference/system-variables for more information on system variables.
func (o JobConfigurationQueryPtrOutput) DefaultDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *DatasetReference {
		if v == nil {
			return nil
		}
		return v.DefaultDataset
	}).(DatasetReferencePtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
func (o JobConfigurationQueryPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// Optional. Describes the table where the query results should be stored. This property must be set for large results that exceed the maximum response size. For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
func (o JobConfigurationQueryPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryPtrOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.FlattenResults
	}).(pulumi.BoolPtrOutput)
}

// Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
//
// Deprecated: Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
func (o JobConfigurationQueryPtrOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBillingTier
	}).(pulumi.IntPtrOutput)
}

// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryPtrOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.MaximumBytesBilled
	}).(pulumi.StringPtrOutput)
}

// GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryPtrOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.ParameterMode
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] This property is deprecated.
//
// Deprecated: [Deprecated] This property is deprecated.
func (o JobConfigurationQueryPtrOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveNulls
	}).(pulumi.BoolPtrOutput)
}

// Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.
func (o JobConfigurationQueryPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Query parameters for GoogleSQL queries.
func (o JobConfigurationQueryPtrOutput) QueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []QueryParameter {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(QueryParameterArrayOutput)
}

// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryPtrOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *RangePartitioning {
		if v == nil {
			return nil
		}
		return v.RangePartitioning
	}).(RangePartitioningPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// Options controlling the execution of scripts.
func (o JobConfigurationQueryPtrOutput) ScriptOptions() ScriptOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *ScriptOptions {
		if v == nil {
			return nil
		}
		return v.ScriptOptions
	}).(ScriptOptionsPtrOutput)
}

// Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.
func (o JobConfigurationQueryPtrOutput) TableDefinitions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) map[string]string {
		if v == nil {
			return nil
		}
		return v.TableDefinitions
	}).(pulumi.StringMapOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryPtrOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *TimePartitioning {
		if v == nil {
			return nil
		}
		return v.TimePartitioning
	}).(TimePartitioningPtrOutput)
}

// Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

// Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryPtrOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseQueryCache
	}).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryPtrOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []UserDefinedFunctionResource {
		if v == nil {
			return nil
		}
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceArrayOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

// JobConfigurationQuery configures a BigQuery query job.
type JobConfigurationQueryResponse struct {
	// Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults bool `pulumi:"allowLargeResults"`
	// Clustering specification for the destination table.
	Clustering ClusteringResponse `pulumi:"clustering"`
	// Connection properties which can modify the query behavior.
	ConnectionProperties []ConnectionPropertyResponse `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
	Continuous bool `pulumi:"continuous"`
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition string `pulumi:"createDisposition"`
	// If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
	CreateSession bool `pulumi:"createSession"`
	// Optional. Specifies the default dataset to use for unqualified table names in the query. This setting does not alter behavior of unqualified dataset names. Setting the system variable `@@dataset_id` achieves the same behavior. See https://cloud.google.com/bigquery/docs/reference/system-variables for more information on system variables.
	DefaultDataset DatasetReferenceResponse `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys)
	DestinationEncryptionConfiguration EncryptionConfigurationResponse `pulumi:"destinationEncryptionConfiguration"`
	// Optional. Describes the table where the query results should be stored. This property must be set for large results that exceed the maximum response size. For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
	DestinationTable TableReferenceResponse `pulumi:"destinationTable"`
	// Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened.
	FlattenResults bool `pulumi:"flattenResults"`
	// Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
	//
	// Deprecated: Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
	MaximumBillingTier int `pulumi:"maximumBillingTier"`
	// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled string `pulumi:"maximumBytesBilled"`
	// GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode string `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	//
	// Deprecated: [Deprecated] This property is deprecated.
	PreserveNulls bool `pulumi:"preserveNulls"`
	// Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority string `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.
	Query string `pulumi:"query"`
	// Query parameters for GoogleSQL queries.
	QueryParameters []QueryParameterResponse `pulumi:"queryParameters"`
	// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningResponse `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// Options controlling the execution of scripts.
	ScriptOptions ScriptOptionsResponse `pulumi:"scriptOptions"`
	// System variables for GoogleSQL queries. A system variable is output if the variable is settable and its value differs from the system default. "@@" prefix is not included in the name of the System variables.
	SystemVariables SystemVariablesResponse `pulumi:"systemVariables"`
	// Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.
	TableDefinitions map[string]string `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningResponse `pulumi:"timePartitioning"`
	// Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql bool `pulumi:"useLegacySql"`
	// Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache bool `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResourceResponse `pulumi:"userDefinedFunctionResources"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition string `pulumi:"writeDisposition"`
}

// JobConfigurationQuery configures a BigQuery query job.
type JobConfigurationQueryResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQueryResponse)(nil)).Elem()
}

func (o JobConfigurationQueryResponseOutput) ToJobConfigurationQueryResponseOutput() JobConfigurationQueryResponseOutput {
	return o
}

func (o JobConfigurationQueryResponseOutput) ToJobConfigurationQueryResponseOutputWithContext(ctx context.Context) JobConfigurationQueryResponseOutput {
	return o
}

// Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryResponseOutput) AllowLargeResults() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.AllowLargeResults }).(pulumi.BoolOutput)
}

// Clustering specification for the destination table.
func (o JobConfigurationQueryResponseOutput) Clustering() ClusteringResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) ClusteringResponse { return v.Clustering }).(ClusteringResponseOutput)
}

// Connection properties which can modify the query behavior.
func (o JobConfigurationQueryResponseOutput) ConnectionProperties() ConnectionPropertyResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []ConnectionPropertyResponse { return v.ConnectionProperties }).(ConnectionPropertyResponseArrayOutput)
}

// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
func (o JobConfigurationQueryResponseOutput) Continuous() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.Continuous }).(pulumi.BoolOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryResponseOutput) CreateDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.CreateDisposition }).(pulumi.StringOutput)
}

// If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.
func (o JobConfigurationQueryResponseOutput) CreateSession() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.CreateSession }).(pulumi.BoolOutput)
}

// Optional. Specifies the default dataset to use for unqualified table names in the query. This setting does not alter behavior of unqualified dataset names. Setting the system variable `@@dataset_id` achieves the same behavior. See https://cloud.google.com/bigquery/docs/reference/system-variables for more information on system variables.
func (o JobConfigurationQueryResponseOutput) DefaultDataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) DatasetReferenceResponse { return v.DefaultDataset }).(DatasetReferenceResponseOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys)
func (o JobConfigurationQueryResponseOutput) DestinationEncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) EncryptionConfigurationResponse {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationResponseOutput)
}

// Optional. Describes the table where the query results should be stored. This property must be set for large results that exceed the maximum response size. For queries that produce anonymous (cached) results, this field will be populated by BigQuery.
func (o JobConfigurationQueryResponseOutput) DestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) TableReferenceResponse { return v.DestinationTable }).(TableReferenceResponseOutput)
}

// Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryResponseOutput) FlattenResults() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.FlattenResults }).(pulumi.BoolOutput)
}

// Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
//
// Deprecated: Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it.
func (o JobConfigurationQueryResponseOutput) MaximumBillingTier() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) int { return v.MaximumBillingTier }).(pulumi.IntOutput)
}

// Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryResponseOutput) MaximumBytesBilled() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.MaximumBytesBilled }).(pulumi.StringOutput)
}

// GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryResponseOutput) ParameterMode() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.ParameterMode }).(pulumi.StringOutput)
}

// [Deprecated] This property is deprecated.
//
// Deprecated: [Deprecated] This property is deprecated.
func (o JobConfigurationQueryResponseOutput) PreserveNulls() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.PreserveNulls }).(pulumi.BoolOutput)
}

// Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryResponseOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.Priority }).(pulumi.StringOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.
func (o JobConfigurationQueryResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.Query }).(pulumi.StringOutput)
}

// Query parameters for GoogleSQL queries.
func (o JobConfigurationQueryResponseOutput) QueryParameters() QueryParameterResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []QueryParameterResponse { return v.QueryParameters }).(QueryParameterResponseArrayOutput)
}

// Range partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryResponseOutput) RangePartitioning() RangePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) RangePartitioningResponse { return v.RangePartitioning }).(RangePartitioningResponseOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryResponseOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// Options controlling the execution of scripts.
func (o JobConfigurationQueryResponseOutput) ScriptOptions() ScriptOptionsResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) ScriptOptionsResponse { return v.ScriptOptions }).(ScriptOptionsResponseOutput)
}

// System variables for GoogleSQL queries. A system variable is output if the variable is settable and its value differs from the system default. "@@" prefix is not included in the name of the System variables.
func (o JobConfigurationQueryResponseOutput) SystemVariables() SystemVariablesResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) SystemVariablesResponse { return v.SystemVariables }).(SystemVariablesResponseOutput)
}

// Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.
func (o JobConfigurationQueryResponseOutput) TableDefinitions() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) map[string]string { return v.TableDefinitions }).(pulumi.StringMapOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryResponseOutput) TimePartitioning() TimePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) TimePartitioningResponse { return v.TimePartitioning }).(TimePartitioningResponseOutput)
}

// Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryResponseOutput) UseLegacySql() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.UseLegacySql }).(pulumi.BoolOutput)
}

// Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryResponseOutput) UseQueryCache() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.UseQueryCache }).(pulumi.BoolOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryResponseOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []UserDefinedFunctionResourceResponse {
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceResponseArrayOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

type JobConfigurationResponse struct {
	// [Pick one] Copies a table.
	Copy JobConfigurationTableCopyResponse `pulumi:"copy"`
	// Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun bool `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract JobConfigurationExtractResponse `pulumi:"extract"`
	// Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.
	JobTimeoutMs string `pulumi:"jobTimeoutMs"`
	// The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
	JobType string `pulumi:"jobType"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels map[string]string `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load JobConfigurationLoadResponse `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query JobConfigurationQueryResponse `pulumi:"query"`
}

type JobConfigurationResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationResponse)(nil)).Elem()
}

func (o JobConfigurationResponseOutput) ToJobConfigurationResponseOutput() JobConfigurationResponseOutput {
	return o
}

func (o JobConfigurationResponseOutput) ToJobConfigurationResponseOutputWithContext(ctx context.Context) JobConfigurationResponseOutput {
	return o
}

// [Pick one] Copies a table.
func (o JobConfigurationResponseOutput) Copy() JobConfigurationTableCopyResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationTableCopyResponse { return v.Copy }).(JobConfigurationTableCopyResponseOutput)
}

// Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
func (o JobConfigurationResponseOutput) DryRun() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationResponse) bool { return v.DryRun }).(pulumi.BoolOutput)
}

// [Pick one] Configures an extract job.
func (o JobConfigurationResponseOutput) Extract() JobConfigurationExtractResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationExtractResponse { return v.Extract }).(JobConfigurationExtractResponseOutput)
}

// Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.
func (o JobConfigurationResponseOutput) JobTimeoutMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationResponse) string { return v.JobTimeoutMs }).(pulumi.StringOutput)
}

// The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
func (o JobConfigurationResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o JobConfigurationResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfigurationResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// [Pick one] Configures a load job.
func (o JobConfigurationResponseOutput) Load() JobConfigurationLoadResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationLoadResponse { return v.Load }).(JobConfigurationLoadResponseOutput)
}

// [Pick one] Configures a query job.
func (o JobConfigurationResponseOutput) Query() JobConfigurationQueryResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationQueryResponse { return v.Query }).(JobConfigurationQueryResponseOutput)
}

// JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
type JobConfigurationTableCopy struct {
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime *string `pulumi:"destinationExpirationTime"`
	// [Required] The destination table.
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// Optional. Supported operation types in table copy job.
	OperationType *JobConfigurationTableCopyOperationType `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable *TableReference `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables []TableReference `pulumi:"sourceTables"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationTableCopyInput is an input type that accepts JobConfigurationTableCopyArgs and JobConfigurationTableCopyOutput values.
// You can construct a concrete instance of `JobConfigurationTableCopyInput` via:
//
//	JobConfigurationTableCopyArgs{...}
type JobConfigurationTableCopyInput interface {
	pulumi.Input

	ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput
	ToJobConfigurationTableCopyOutputWithContext(context.Context) JobConfigurationTableCopyOutput
}

// JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
type JobConfigurationTableCopyArgs struct {
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime pulumi.StringPtrInput `pulumi:"destinationExpirationTime"`
	// [Required] The destination table.
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// Optional. Supported operation types in table copy job.
	OperationType JobConfigurationTableCopyOperationTypePtrInput `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable TableReferencePtrInput `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables TableReferenceArrayInput `pulumi:"sourceTables"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationTableCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopy)(nil)).Elem()
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput {
	return i.ToJobConfigurationTableCopyOutputWithContext(context.Background())
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyOutputWithContext(ctx context.Context) JobConfigurationTableCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyOutput)
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return i.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyOutput).ToJobConfigurationTableCopyPtrOutputWithContext(ctx)
}

// JobConfigurationTableCopyPtrInput is an input type that accepts JobConfigurationTableCopyArgs, JobConfigurationTableCopyPtr and JobConfigurationTableCopyPtrOutput values.
// You can construct a concrete instance of `JobConfigurationTableCopyPtrInput` via:
//
//	        JobConfigurationTableCopyArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationTableCopyPtrInput interface {
	pulumi.Input

	ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput
	ToJobConfigurationTableCopyPtrOutputWithContext(context.Context) JobConfigurationTableCopyPtrOutput
}

type jobConfigurationTableCopyPtrType JobConfigurationTableCopyArgs

func JobConfigurationTableCopyPtr(v *JobConfigurationTableCopyArgs) JobConfigurationTableCopyPtrInput {
	return (*jobConfigurationTableCopyPtrType)(v)
}

func (*jobConfigurationTableCopyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationTableCopy)(nil)).Elem()
}

func (i *jobConfigurationTableCopyPtrType) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return i.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationTableCopyPtrType) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyPtrOutput)
}

// JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
type JobConfigurationTableCopyOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopy)(nil)).Elem()
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput {
	return o
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyOutputWithContext(ctx context.Context) JobConfigurationTableCopyOutput {
	return o
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return o.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationTableCopy) *JobConfigurationTableCopy {
		return &v
	}).(JobConfigurationTableCopyPtrOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *EncryptionConfiguration {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyOutput) DestinationExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.DestinationExpirationTime }).(pulumi.StringPtrOutput)
}

// [Required] The destination table.
func (o JobConfigurationTableCopyOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// Optional. Supported operation types in table copy job.
func (o JobConfigurationTableCopyOutput) OperationType() JobConfigurationTableCopyOperationTypePtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *JobConfigurationTableCopyOperationType { return v.OperationType }).(JobConfigurationTableCopyOperationTypePtrOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *TableReference { return v.SourceTable }).(TableReferencePtrOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyOutput) SourceTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) []TableReference { return v.SourceTables }).(TableReferenceArrayOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationTableCopyPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationTableCopy)(nil)).Elem()
}

func (o JobConfigurationTableCopyPtrOutput) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return o
}

func (o JobConfigurationTableCopyPtrOutput) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return o
}

func (o JobConfigurationTableCopyPtrOutput) Elem() JobConfigurationTableCopyOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) JobConfigurationTableCopy {
		if v != nil {
			return *v
		}
		var ret JobConfigurationTableCopy
		return ret
	}).(JobConfigurationTableCopyOutput)
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyPtrOutput) DestinationExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.DestinationExpirationTime
	}).(pulumi.StringPtrOutput)
}

// [Required] The destination table.
func (o JobConfigurationTableCopyPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// Optional. Supported operation types in table copy job.
func (o JobConfigurationTableCopyPtrOutput) OperationType() JobConfigurationTableCopyOperationTypePtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *JobConfigurationTableCopyOperationType {
		if v == nil {
			return nil
		}
		return v.OperationType
	}).(JobConfigurationTableCopyOperationTypePtrOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyPtrOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(TableReferencePtrOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyPtrOutput) SourceTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) []TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTables
	}).(TableReferenceArrayOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

// JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
type JobConfigurationTableCopyResponse struct {
	// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition string `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationResponse `pulumi:"destinationEncryptionConfiguration"`
	// Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime string `pulumi:"destinationExpirationTime"`
	// [Required] The destination table.
	DestinationTable TableReferenceResponse `pulumi:"destinationTable"`
	// Optional. Supported operation types in table copy job.
	OperationType string `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable TableReferenceResponse `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables []TableReferenceResponse `pulumi:"sourceTables"`
	// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition string `pulumi:"writeDisposition"`
}

// JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
type JobConfigurationTableCopyResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopyResponse)(nil)).Elem()
}

func (o JobConfigurationTableCopyResponseOutput) ToJobConfigurationTableCopyResponseOutput() JobConfigurationTableCopyResponseOutput {
	return o
}

func (o JobConfigurationTableCopyResponseOutput) ToJobConfigurationTableCopyResponseOutputWithContext(ctx context.Context) JobConfigurationTableCopyResponseOutput {
	return o
}

// Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyResponseOutput) CreateDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) string { return v.CreateDisposition }).(pulumi.StringOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyResponseOutput) DestinationEncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) EncryptionConfigurationResponse {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationResponseOutput)
}

// Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyResponseOutput) DestinationExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) string { return v.DestinationExpirationTime }).(pulumi.StringOutput)
}

// [Required] The destination table.
func (o JobConfigurationTableCopyResponseOutput) DestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) TableReferenceResponse { return v.DestinationTable }).(TableReferenceResponseOutput)
}

// Optional. Supported operation types in table copy job.
func (o JobConfigurationTableCopyResponseOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) string { return v.OperationType }).(pulumi.StringOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyResponseOutput) SourceTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) TableReferenceResponse { return v.SourceTable }).(TableReferenceResponseOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyResponseOutput) SourceTables() TableReferenceResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) []TableReferenceResponse { return v.SourceTables }).(TableReferenceResponseArrayOutput)
}

// Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

// Reason about why a Job was created from a [`jobs.query`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query) method when used with `JOB_CREATION_OPTIONAL` Job creation mode. For [`jobs.insert`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert) method calls it will always be `REQUESTED`. This feature is not yet available. Jobs will always be created.
type JobCreationReasonResponse struct {
	// Specifies the high level reason why a Job was created.
	Code string `pulumi:"code"`
}

// Reason about why a Job was created from a [`jobs.query`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query) method when used with `JOB_CREATION_OPTIONAL` Job creation mode. For [`jobs.insert`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert) method calls it will always be `REQUESTED`. This feature is not yet available. Jobs will always be created.
type JobCreationReasonResponseOutput struct{ *pulumi.OutputState }

func (JobCreationReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobCreationReasonResponse)(nil)).Elem()
}

func (o JobCreationReasonResponseOutput) ToJobCreationReasonResponseOutput() JobCreationReasonResponseOutput {
	return o
}

func (o JobCreationReasonResponseOutput) ToJobCreationReasonResponseOutputWithContext(ctx context.Context) JobCreationReasonResponseOutput {
	return o
}

// Specifies the high level reason why a Job was created.
func (o JobCreationReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v JobCreationReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A job reference is a fully qualified identifier for referring to a job.
type JobReference struct {
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId string `pulumi:"jobId"`
	// Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations
	Location *string `pulumi:"location"`
	// The ID of the project containing this job.
	Project string `pulumi:"project"`
}

// JobReferenceInput is an input type that accepts JobReferenceArgs and JobReferenceOutput values.
// You can construct a concrete instance of `JobReferenceInput` via:
//
//	JobReferenceArgs{...}
type JobReferenceInput interface {
	pulumi.Input

	ToJobReferenceOutput() JobReferenceOutput
	ToJobReferenceOutputWithContext(context.Context) JobReferenceOutput
}

// A job reference is a fully qualified identifier for referring to a job.
type JobReferenceArgs struct {
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId pulumi.StringInput `pulumi:"jobId"`
	// Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The ID of the project containing this job.
	Project pulumi.StringInput `pulumi:"project"`
}

func (JobReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReference)(nil)).Elem()
}

func (i JobReferenceArgs) ToJobReferenceOutput() JobReferenceOutput {
	return i.ToJobReferenceOutputWithContext(context.Background())
}

func (i JobReferenceArgs) ToJobReferenceOutputWithContext(ctx context.Context) JobReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferenceOutput)
}

func (i JobReferenceArgs) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return i.ToJobReferencePtrOutputWithContext(context.Background())
}

func (i JobReferenceArgs) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferenceOutput).ToJobReferencePtrOutputWithContext(ctx)
}

// JobReferencePtrInput is an input type that accepts JobReferenceArgs, JobReferencePtr and JobReferencePtrOutput values.
// You can construct a concrete instance of `JobReferencePtrInput` via:
//
//	        JobReferenceArgs{...}
//
//	or:
//
//	        nil
type JobReferencePtrInput interface {
	pulumi.Input

	ToJobReferencePtrOutput() JobReferencePtrOutput
	ToJobReferencePtrOutputWithContext(context.Context) JobReferencePtrOutput
}

type jobReferencePtrType JobReferenceArgs

func JobReferencePtr(v *JobReferenceArgs) JobReferencePtrInput {
	return (*jobReferencePtrType)(v)
}

func (*jobReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobReference)(nil)).Elem()
}

func (i *jobReferencePtrType) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return i.ToJobReferencePtrOutputWithContext(context.Background())
}

func (i *jobReferencePtrType) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferencePtrOutput)
}

// A job reference is a fully qualified identifier for referring to a job.
type JobReferenceOutput struct{ *pulumi.OutputState }

func (JobReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReference)(nil)).Elem()
}

func (o JobReferenceOutput) ToJobReferenceOutput() JobReferenceOutput {
	return o
}

func (o JobReferenceOutput) ToJobReferenceOutputWithContext(ctx context.Context) JobReferenceOutput {
	return o
}

func (o JobReferenceOutput) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return o.ToJobReferencePtrOutputWithContext(context.Background())
}

func (o JobReferenceOutput) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobReference) *JobReference {
		return &v
	}).(JobReferencePtrOutput)
}

// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferenceOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v JobReference) string { return v.JobId }).(pulumi.StringOutput)
}

// Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations
func (o JobReferenceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobReference) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The ID of the project containing this job.
func (o JobReferenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v JobReference) string { return v.Project }).(pulumi.StringOutput)
}

type JobReferencePtrOutput struct{ *pulumi.OutputState }

func (JobReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobReference)(nil)).Elem()
}

func (o JobReferencePtrOutput) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return o
}

func (o JobReferencePtrOutput) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return o
}

func (o JobReferencePtrOutput) Elem() JobReferenceOutput {
	return o.ApplyT(func(v *JobReference) JobReference {
		if v != nil {
			return *v
		}
		var ret JobReference
		return ret
	}).(JobReferenceOutput)
}

// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferencePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return &v.JobId
	}).(pulumi.StringPtrOutput)
}

// Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations
func (o JobReferencePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this job.
func (o JobReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// A job reference is a fully qualified identifier for referring to a job.
type JobReferenceResponse struct {
	// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId string `pulumi:"jobId"`
	// Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations
	Location string `pulumi:"location"`
	// The ID of the project containing this job.
	Project string `pulumi:"project"`
}

// A job reference is a fully qualified identifier for referring to a job.
type JobReferenceResponseOutput struct{ *pulumi.OutputState }

func (JobReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReferenceResponse)(nil)).Elem()
}

func (o JobReferenceResponseOutput) ToJobReferenceResponseOutput() JobReferenceResponseOutput {
	return o
}

func (o JobReferenceResponseOutput) ToJobReferenceResponseOutputWithContext(ctx context.Context) JobReferenceResponseOutput {
	return o
}

// The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferenceResponseOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v JobReferenceResponse) string { return v.JobId }).(pulumi.StringOutput)
}

// Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations
func (o JobReferenceResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v JobReferenceResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The ID of the project containing this job.
func (o JobReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v JobReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Job resource usage breakdown by reservation.
type JobStatistics2ReservationUsageItemResponse struct {
	// Reservation name or "unreserved" for on-demand resources usage.
	Name string `pulumi:"name"`
	// Total slot milliseconds used by the reservation for a particular job.
	SlotMs string `pulumi:"slotMs"`
}

// Job resource usage breakdown by reservation.
type JobStatistics2ReservationUsageItemResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics2ReservationUsageItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics2ReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatistics2ReservationUsageItemResponseOutput) ToJobStatistics2ReservationUsageItemResponseOutput() JobStatistics2ReservationUsageItemResponseOutput {
	return o
}

func (o JobStatistics2ReservationUsageItemResponseOutput) ToJobStatistics2ReservationUsageItemResponseOutputWithContext(ctx context.Context) JobStatistics2ReservationUsageItemResponseOutput {
	return o
}

// Reservation name or "unreserved" for on-demand resources usage.
func (o JobStatistics2ReservationUsageItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2ReservationUsageItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Total slot milliseconds used by the reservation for a particular job.
func (o JobStatistics2ReservationUsageItemResponseOutput) SlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2ReservationUsageItemResponse) string { return v.SlotMs }).(pulumi.StringOutput)
}

type JobStatistics2ReservationUsageItemResponseArrayOutput struct{ *pulumi.OutputState }

func (JobStatistics2ReservationUsageItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatistics2ReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatistics2ReservationUsageItemResponseArrayOutput) ToJobStatistics2ReservationUsageItemResponseArrayOutput() JobStatistics2ReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatistics2ReservationUsageItemResponseArrayOutput) ToJobStatistics2ReservationUsageItemResponseArrayOutputWithContext(ctx context.Context) JobStatistics2ReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatistics2ReservationUsageItemResponseArrayOutput) Index(i pulumi.IntInput) JobStatistics2ReservationUsageItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatistics2ReservationUsageItemResponse {
		return vs[0].([]JobStatistics2ReservationUsageItemResponse)[vs[1].(int)]
	}).(JobStatistics2ReservationUsageItemResponseOutput)
}

// Statistics for a query job.
type JobStatistics2Response struct {
	// BI Engine specific Statistics.
	BiEngineStatistics BiEngineStatisticsResponse `pulumi:"biEngineStatistics"`
	// Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of "free tier". The value here is a measure of the query's resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.
	BillingTier int `pulumi:"billingTier"`
	// Whether the query result was fetched from the query cache.
	CacheHit bool `pulumi:"cacheHit"`
	// Referenced dataset for DCL statement.
	DclTargetDataset DatasetReferenceResponse `pulumi:"dclTargetDataset"`
	// Referenced table for DCL statement.
	DclTargetTable TableReferenceResponse `pulumi:"dclTargetTable"`
	// Referenced view for DCL statement.
	DclTargetView TableReferenceResponse `pulumi:"dclTargetView"`
	// The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
	DdlAffectedRowAccessPolicyCount string `pulumi:"ddlAffectedRowAccessPolicyCount"`
	// The table after rename. Present only for ALTER TABLE RENAME TO query.
	DdlDestinationTable TableReferenceResponse `pulumi:"ddlDestinationTable"`
	// The DDL operation performed, possibly dependent on the pre-existence of the DDL target.
	DdlOperationPerformed string `pulumi:"ddlOperationPerformed"`
	// The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA(dataset) queries.
	DdlTargetDataset DatasetReferenceResponse `pulumi:"ddlTargetDataset"`
	// [Beta] The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
	DdlTargetRoutine RoutineReferenceResponse `pulumi:"ddlTargetRoutine"`
	// The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
	DdlTargetRowAccessPolicy RowAccessPolicyReferenceResponse `pulumi:"ddlTargetRowAccessPolicy"`
	// The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
	DdlTargetTable TableReferenceResponse `pulumi:"ddlTargetTable"`
	// Detailed statistics for DML statements INSERT, UPDATE, DELETE, MERGE or TRUNCATE.
	DmlStats DmlStatisticsResponse `pulumi:"dmlStats"`
	// The original estimate of bytes processed for the job.
	EstimatedBytesProcessed string `pulumi:"estimatedBytesProcessed"`
	// Stats for EXPORT DATA statement.
	ExportDataStatistics ExportDataStatisticsResponse `pulumi:"exportDataStatistics"`
	// Job cost breakdown as bigquery internal cost and external service costs.
	ExternalServiceCosts []ExternalServiceCostResponse `pulumi:"externalServiceCosts"`
	// Statistics for a LOAD query.
	LoadQueryStatistics LoadQueryStatisticsResponse `pulumi:"loadQueryStatistics"`
	// Statistics of materialized views of a query job.
	MaterializedViewStatistics MaterializedViewStatisticsResponse `pulumi:"materializedViewStatistics"`
	// Statistics of metadata cache usage in a query for BigLake tables.
	MetadataCacheStatistics MetadataCacheStatisticsResponse `pulumi:"metadataCacheStatistics"`
	// Statistics of a BigQuery ML training job.
	MlStatistics MlStatisticsResponse `pulumi:"mlStatistics"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	ModelTraining BigQueryModelTrainingResponse `pulumi:"modelTraining"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	ModelTrainingCurrentIteration int `pulumi:"modelTrainingCurrentIteration"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	ModelTrainingExpectedTotalIteration string `pulumi:"modelTrainingExpectedTotalIteration"`
	// The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
	NumDmlAffectedRows string `pulumi:"numDmlAffectedRows"`
	// Performance insights.
	PerformanceInsights PerformanceInsightsResponse `pulumi:"performanceInsights"`
	// Query optimization information for a QUERY job.
	QueryInfo QueryInfoResponse `pulumi:"queryInfo"`
	// Describes execution plan for the query.
	QueryPlan []ExplainQueryStageResponse `pulumi:"queryPlan"`
	// Referenced routines for the job.
	ReferencedRoutines []RoutineReferenceResponse `pulumi:"referencedRoutines"`
	// Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
	ReferencedTables []TableReferenceResponse `pulumi:"referencedTables"`
	// Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
	ReservationUsage []JobStatistics2ReservationUsageItemResponse `pulumi:"reservationUsage"`
	// The schema of the results. Present only for successful dry run of non-legacy SQL queries.
	Schema TableSchemaResponse `pulumi:"schema"`
	// Search query specific statistics.
	SearchStatistics SearchStatisticsResponse `pulumi:"searchStatistics"`
	// Statistics of a Spark procedure job.
	SparkStatistics SparkStatisticsResponse `pulumi:"sparkStatistics"`
	// The type of query statement, if valid. Possible values: * `SELECT`: [`SELECT`](/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * `ASSERT`: [`ASSERT`](/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * `INSERT`: [`INSERT`](/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * `UPDATE`: [`UPDATE`](/bigquery/docs/reference/standard-sql/query-syntax#update_statement) statement. * `DELETE`: [`DELETE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `MERGE`: [`MERGE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `CREATE_TABLE`: [`CREATE TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS SELECT`](/bigquery/docs/reference/standard-sql/data-definition-language#query_statement) statement. * `CREATE_VIEW`: [`CREATE VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * `CREATE_MODEL`: [`CREATE MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * `CREATE_FUNCTION`: [`CREATE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * `CREATE_PROCEDURE`: [`CREATE PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS POLICY`](/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * `CREATE_SCHEMA`: [`CREATE SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * `DROP_TABLE`: [`DROP TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * `DROP_VIEW`: [`DROP VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * `DROP_MODEL`: [`DROP MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * `DROP_FUNCTION` : [`DROP FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * `DROP_PROCEDURE`: [`DROP PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * `DROP_SCHEMA`: [`DROP SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS POLICY|POLICIES`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * `ALTER_TABLE`: [`ALTER TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * `ALTER_VIEW`: [`ALTER VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * `ALTER_SCHEMA`: [`ALTER SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement) statement. * `SCRIPT`: [`SCRIPT`](/bigquery/docs/reference/standard-sql/procedural-language). * `TRUNCATE_TABLE`: [`TRUNCATE TABLE`](/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * `EXPORT_DATA`: [`EXPORT DATA`](/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * `EXPORT_MODEL`: [`EXPORT MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * `LOAD_DATA`: [`LOAD DATA`](/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * `CALL`: [`CALL`](/bigquery/docs/reference/standard-sql/procedural-language#call) statement.
	StatementType string `pulumi:"statementType"`
	// Describes a timeline of job execution.
	Timeline []QueryTimelineSampleResponse `pulumi:"timeline"`
	// If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.
	TotalBytesBilled string `pulumi:"totalBytesBilled"`
	// Total bytes processed for the job.
	TotalBytesProcessed string `pulumi:"totalBytesProcessed"`
	// For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
	TotalBytesProcessedAccuracy string `pulumi:"totalBytesProcessedAccuracy"`
	// Total number of partitions processed from all partitioned tables referenced in the job.
	TotalPartitionsProcessed string `pulumi:"totalPartitionsProcessed"`
	// Slot-milliseconds for the job.
	TotalSlotMs string `pulumi:"totalSlotMs"`
	// Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
	TransferredBytes string `pulumi:"transferredBytes"`
	// GoogleSQL only: list of undeclared query parameters detected during a dry run validation.
	UndeclaredQueryParameters []QueryParameterResponse `pulumi:"undeclaredQueryParameters"`
	// Vector Search query specific statistics.
	VectorSearchStatistics VectorSearchStatisticsResponse `pulumi:"vectorSearchStatistics"`
}

// Statistics for a query job.
type JobStatistics2ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics2ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics2Response)(nil)).Elem()
}

func (o JobStatistics2ResponseOutput) ToJobStatistics2ResponseOutput() JobStatistics2ResponseOutput {
	return o
}

func (o JobStatistics2ResponseOutput) ToJobStatistics2ResponseOutputWithContext(ctx context.Context) JobStatistics2ResponseOutput {
	return o
}

// BI Engine specific Statistics.
func (o JobStatistics2ResponseOutput) BiEngineStatistics() BiEngineStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) BiEngineStatisticsResponse { return v.BiEngineStatistics }).(BiEngineStatisticsResponseOutput)
}

// Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of "free tier". The value here is a measure of the query's resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.
func (o JobStatistics2ResponseOutput) BillingTier() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatistics2Response) int { return v.BillingTier }).(pulumi.IntOutput)
}

// Whether the query result was fetched from the query cache.
func (o JobStatistics2ResponseOutput) CacheHit() pulumi.BoolOutput {
	return o.ApplyT(func(v JobStatistics2Response) bool { return v.CacheHit }).(pulumi.BoolOutput)
}

// Referenced dataset for DCL statement.
func (o JobStatistics2ResponseOutput) DclTargetDataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) DatasetReferenceResponse { return v.DclTargetDataset }).(DatasetReferenceResponseOutput)
}

// Referenced table for DCL statement.
func (o JobStatistics2ResponseOutput) DclTargetTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableReferenceResponse { return v.DclTargetTable }).(TableReferenceResponseOutput)
}

// Referenced view for DCL statement.
func (o JobStatistics2ResponseOutput) DclTargetView() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableReferenceResponse { return v.DclTargetView }).(TableReferenceResponseOutput)
}

// The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2ResponseOutput) DdlAffectedRowAccessPolicyCount() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.DdlAffectedRowAccessPolicyCount }).(pulumi.StringOutput)
}

// The table after rename. Present only for ALTER TABLE RENAME TO query.
func (o JobStatistics2ResponseOutput) DdlDestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableReferenceResponse { return v.DdlDestinationTable }).(TableReferenceResponseOutput)
}

// The DDL operation performed, possibly dependent on the pre-existence of the DDL target.
func (o JobStatistics2ResponseOutput) DdlOperationPerformed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.DdlOperationPerformed }).(pulumi.StringOutput)
}

// The DDL target dataset. Present only for CREATE/ALTER/DROP SCHEMA(dataset) queries.
func (o JobStatistics2ResponseOutput) DdlTargetDataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) DatasetReferenceResponse { return v.DdlTargetDataset }).(DatasetReferenceResponseOutput)
}

// [Beta] The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
func (o JobStatistics2ResponseOutput) DdlTargetRoutine() RoutineReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) RoutineReferenceResponse { return v.DdlTargetRoutine }).(RoutineReferenceResponseOutput)
}

// The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
func (o JobStatistics2ResponseOutput) DdlTargetRowAccessPolicy() RowAccessPolicyReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) RowAccessPolicyReferenceResponse { return v.DdlTargetRowAccessPolicy }).(RowAccessPolicyReferenceResponseOutput)
}

// The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2ResponseOutput) DdlTargetTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableReferenceResponse { return v.DdlTargetTable }).(TableReferenceResponseOutput)
}

// Detailed statistics for DML statements INSERT, UPDATE, DELETE, MERGE or TRUNCATE.
func (o JobStatistics2ResponseOutput) DmlStats() DmlStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) DmlStatisticsResponse { return v.DmlStats }).(DmlStatisticsResponseOutput)
}

// The original estimate of bytes processed for the job.
func (o JobStatistics2ResponseOutput) EstimatedBytesProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.EstimatedBytesProcessed }).(pulumi.StringOutput)
}

// Stats for EXPORT DATA statement.
func (o JobStatistics2ResponseOutput) ExportDataStatistics() ExportDataStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) ExportDataStatisticsResponse { return v.ExportDataStatistics }).(ExportDataStatisticsResponseOutput)
}

// Job cost breakdown as bigquery internal cost and external service costs.
func (o JobStatistics2ResponseOutput) ExternalServiceCosts() ExternalServiceCostResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []ExternalServiceCostResponse { return v.ExternalServiceCosts }).(ExternalServiceCostResponseArrayOutput)
}

// Statistics for a LOAD query.
func (o JobStatistics2ResponseOutput) LoadQueryStatistics() LoadQueryStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) LoadQueryStatisticsResponse { return v.LoadQueryStatistics }).(LoadQueryStatisticsResponseOutput)
}

// Statistics of materialized views of a query job.
func (o JobStatistics2ResponseOutput) MaterializedViewStatistics() MaterializedViewStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) MaterializedViewStatisticsResponse { return v.MaterializedViewStatistics }).(MaterializedViewStatisticsResponseOutput)
}

// Statistics of metadata cache usage in a query for BigLake tables.
func (o JobStatistics2ResponseOutput) MetadataCacheStatistics() MetadataCacheStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) MetadataCacheStatisticsResponse { return v.MetadataCacheStatistics }).(MetadataCacheStatisticsResponseOutput)
}

// Statistics of a BigQuery ML training job.
func (o JobStatistics2ResponseOutput) MlStatistics() MlStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) MlStatisticsResponse { return v.MlStatistics }).(MlStatisticsResponseOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o JobStatistics2ResponseOutput) ModelTraining() BigQueryModelTrainingResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) BigQueryModelTrainingResponse { return v.ModelTraining }).(BigQueryModelTrainingResponseOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o JobStatistics2ResponseOutput) ModelTrainingCurrentIteration() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatistics2Response) int { return v.ModelTrainingCurrentIteration }).(pulumi.IntOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o JobStatistics2ResponseOutput) ModelTrainingExpectedTotalIteration() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.ModelTrainingExpectedTotalIteration }).(pulumi.StringOutput)
}

// The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
func (o JobStatistics2ResponseOutput) NumDmlAffectedRows() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.NumDmlAffectedRows }).(pulumi.StringOutput)
}

// Performance insights.
func (o JobStatistics2ResponseOutput) PerformanceInsights() PerformanceInsightsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) PerformanceInsightsResponse { return v.PerformanceInsights }).(PerformanceInsightsResponseOutput)
}

// Query optimization information for a QUERY job.
func (o JobStatistics2ResponseOutput) QueryInfo() QueryInfoResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) QueryInfoResponse { return v.QueryInfo }).(QueryInfoResponseOutput)
}

// Describes execution plan for the query.
func (o JobStatistics2ResponseOutput) QueryPlan() ExplainQueryStageResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []ExplainQueryStageResponse { return v.QueryPlan }).(ExplainQueryStageResponseArrayOutput)
}

// Referenced routines for the job.
func (o JobStatistics2ResponseOutput) ReferencedRoutines() RoutineReferenceResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []RoutineReferenceResponse { return v.ReferencedRoutines }).(RoutineReferenceResponseArrayOutput)
}

// Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
func (o JobStatistics2ResponseOutput) ReferencedTables() TableReferenceResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []TableReferenceResponse { return v.ReferencedTables }).(TableReferenceResponseArrayOutput)
}

// Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
func (o JobStatistics2ResponseOutput) ReservationUsage() JobStatistics2ReservationUsageItemResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []JobStatistics2ReservationUsageItemResponse { return v.ReservationUsage }).(JobStatistics2ReservationUsageItemResponseArrayOutput)
}

// The schema of the results. Present only for successful dry run of non-legacy SQL queries.
func (o JobStatistics2ResponseOutput) Schema() TableSchemaResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableSchemaResponse { return v.Schema }).(TableSchemaResponseOutput)
}

// Search query specific statistics.
func (o JobStatistics2ResponseOutput) SearchStatistics() SearchStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) SearchStatisticsResponse { return v.SearchStatistics }).(SearchStatisticsResponseOutput)
}

// Statistics of a Spark procedure job.
func (o JobStatistics2ResponseOutput) SparkStatistics() SparkStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) SparkStatisticsResponse { return v.SparkStatistics }).(SparkStatisticsResponseOutput)
}

// The type of query statement, if valid. Possible values: * `SELECT`: [`SELECT`](/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * `ASSERT`: [`ASSERT`](/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * `INSERT`: [`INSERT`](/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * `UPDATE`: [`UPDATE`](/bigquery/docs/reference/standard-sql/query-syntax#update_statement) statement. * `DELETE`: [`DELETE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `MERGE`: [`MERGE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `CREATE_TABLE`: [`CREATE TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS SELECT`](/bigquery/docs/reference/standard-sql/data-definition-language#query_statement) statement. * `CREATE_VIEW`: [`CREATE VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * `CREATE_MODEL`: [`CREATE MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * `CREATE_FUNCTION`: [`CREATE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * `CREATE_PROCEDURE`: [`CREATE PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS POLICY`](/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * `CREATE_SCHEMA`: [`CREATE SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * `DROP_TABLE`: [`DROP TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * `DROP_VIEW`: [`DROP VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * `DROP_MODEL`: [`DROP MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * `DROP_FUNCTION` : [`DROP FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * `DROP_PROCEDURE`: [`DROP PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * `DROP_SCHEMA`: [`DROP SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS POLICY|POLICIES`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * `ALTER_TABLE`: [`ALTER TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * `ALTER_VIEW`: [`ALTER VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * `ALTER_SCHEMA`: [`ALTER SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement) statement. * `SCRIPT`: [`SCRIPT`](/bigquery/docs/reference/standard-sql/procedural-language). * `TRUNCATE_TABLE`: [`TRUNCATE TABLE`](/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * `EXPORT_DATA`: [`EXPORT DATA`](/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * `EXPORT_MODEL`: [`EXPORT MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * `LOAD_DATA`: [`LOAD DATA`](/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * `CALL`: [`CALL`](/bigquery/docs/reference/standard-sql/procedural-language#call) statement.
func (o JobStatistics2ResponseOutput) StatementType() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.StatementType }).(pulumi.StringOutput)
}

// Describes a timeline of job execution.
func (o JobStatistics2ResponseOutput) Timeline() QueryTimelineSampleResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []QueryTimelineSampleResponse { return v.Timeline }).(QueryTimelineSampleResponseArrayOutput)
}

// If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.
func (o JobStatistics2ResponseOutput) TotalBytesBilled() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalBytesBilled }).(pulumi.StringOutput)
}

// Total bytes processed for the job.
func (o JobStatistics2ResponseOutput) TotalBytesProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalBytesProcessed }).(pulumi.StringOutput)
}

// For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
func (o JobStatistics2ResponseOutput) TotalBytesProcessedAccuracy() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalBytesProcessedAccuracy }).(pulumi.StringOutput)
}

// Total number of partitions processed from all partitioned tables referenced in the job.
func (o JobStatistics2ResponseOutput) TotalPartitionsProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalPartitionsProcessed }).(pulumi.StringOutput)
}

// Slot-milliseconds for the job.
func (o JobStatistics2ResponseOutput) TotalSlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalSlotMs }).(pulumi.StringOutput)
}

// Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
func (o JobStatistics2ResponseOutput) TransferredBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TransferredBytes }).(pulumi.StringOutput)
}

// GoogleSQL only: list of undeclared query parameters detected during a dry run validation.
func (o JobStatistics2ResponseOutput) UndeclaredQueryParameters() QueryParameterResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []QueryParameterResponse { return v.UndeclaredQueryParameters }).(QueryParameterResponseArrayOutput)
}

// Vector Search query specific statistics.
func (o JobStatistics2ResponseOutput) VectorSearchStatistics() VectorSearchStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) VectorSearchStatisticsResponse { return v.VectorSearchStatistics }).(VectorSearchStatisticsResponseOutput)
}

// Statistics for a load job.
type JobStatistics3Response struct {
	// The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
	BadRecords string `pulumi:"badRecords"`
	// Number of bytes of source data in a load job.
	InputFileBytes string `pulumi:"inputFileBytes"`
	// Number of source files in a load job.
	InputFiles string `pulumi:"inputFiles"`
	// Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
	OutputBytes string `pulumi:"outputBytes"`
	// Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
	OutputRows string `pulumi:"outputRows"`
	// Describes a timeline of job execution.
	Timeline []QueryTimelineSampleResponse `pulumi:"timeline"`
}

// Statistics for a load job.
type JobStatistics3ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics3ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics3Response)(nil)).Elem()
}

func (o JobStatistics3ResponseOutput) ToJobStatistics3ResponseOutput() JobStatistics3ResponseOutput {
	return o
}

func (o JobStatistics3ResponseOutput) ToJobStatistics3ResponseOutputWithContext(ctx context.Context) JobStatistics3ResponseOutput {
	return o
}

// The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
func (o JobStatistics3ResponseOutput) BadRecords() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.BadRecords }).(pulumi.StringOutput)
}

// Number of bytes of source data in a load job.
func (o JobStatistics3ResponseOutput) InputFileBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.InputFileBytes }).(pulumi.StringOutput)
}

// Number of source files in a load job.
func (o JobStatistics3ResponseOutput) InputFiles() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.InputFiles }).(pulumi.StringOutput)
}

// Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
func (o JobStatistics3ResponseOutput) OutputBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.OutputBytes }).(pulumi.StringOutput)
}

// Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
func (o JobStatistics3ResponseOutput) OutputRows() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.OutputRows }).(pulumi.StringOutput)
}

// Describes a timeline of job execution.
func (o JobStatistics3ResponseOutput) Timeline() QueryTimelineSampleResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics3Response) []QueryTimelineSampleResponse { return v.Timeline }).(QueryTimelineSampleResponseArrayOutput)
}

// Statistics for an extract job.
type JobStatistics4Response struct {
	// Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
	DestinationUriFileCounts []string `pulumi:"destinationUriFileCounts"`
	// Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes and doesn't have any relationship with the number of actual result bytes extracted in the desired format.
	InputBytes string `pulumi:"inputBytes"`
	// Describes a timeline of job execution.
	Timeline []QueryTimelineSampleResponse `pulumi:"timeline"`
}

// Statistics for an extract job.
type JobStatistics4ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics4ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics4Response)(nil)).Elem()
}

func (o JobStatistics4ResponseOutput) ToJobStatistics4ResponseOutput() JobStatistics4ResponseOutput {
	return o
}

func (o JobStatistics4ResponseOutput) ToJobStatistics4ResponseOutputWithContext(ctx context.Context) JobStatistics4ResponseOutput {
	return o
}

// Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
func (o JobStatistics4ResponseOutput) DestinationUriFileCounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobStatistics4Response) []string { return v.DestinationUriFileCounts }).(pulumi.StringArrayOutput)
}

// Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes and doesn't have any relationship with the number of actual result bytes extracted in the desired format.
func (o JobStatistics4ResponseOutput) InputBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics4Response) string { return v.InputBytes }).(pulumi.StringOutput)
}

// Describes a timeline of job execution.
func (o JobStatistics4ResponseOutput) Timeline() QueryTimelineSampleResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics4Response) []QueryTimelineSampleResponse { return v.Timeline }).(QueryTimelineSampleResponseArrayOutput)
}

// Statistics for a copy job.
type JobStatistics5Response struct {
	// Number of logical bytes copied to the destination table.
	CopiedLogicalBytes string `pulumi:"copiedLogicalBytes"`
	// Number of rows copied to the destination table.
	CopiedRows string `pulumi:"copiedRows"`
}

// Statistics for a copy job.
type JobStatistics5ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics5ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics5Response)(nil)).Elem()
}

func (o JobStatistics5ResponseOutput) ToJobStatistics5ResponseOutput() JobStatistics5ResponseOutput {
	return o
}

func (o JobStatistics5ResponseOutput) ToJobStatistics5ResponseOutputWithContext(ctx context.Context) JobStatistics5ResponseOutput {
	return o
}

// Number of logical bytes copied to the destination table.
func (o JobStatistics5ResponseOutput) CopiedLogicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics5Response) string { return v.CopiedLogicalBytes }).(pulumi.StringOutput)
}

// Number of rows copied to the destination table.
func (o JobStatistics5ResponseOutput) CopiedRows() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics5Response) string { return v.CopiedRows }).(pulumi.StringOutput)
}

// Job resource usage breakdown by reservation.
type JobStatisticsReservationUsageItemResponse struct {
	// Reservation name or "unreserved" for on-demand resources usage.
	Name string `pulumi:"name"`
	// Total slot milliseconds used by the reservation for a particular job.
	SlotMs string `pulumi:"slotMs"`
}

// Job resource usage breakdown by reservation.
type JobStatisticsReservationUsageItemResponseOutput struct{ *pulumi.OutputState }

func (JobStatisticsReservationUsageItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticsReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatisticsReservationUsageItemResponseOutput) ToJobStatisticsReservationUsageItemResponseOutput() JobStatisticsReservationUsageItemResponseOutput {
	return o
}

func (o JobStatisticsReservationUsageItemResponseOutput) ToJobStatisticsReservationUsageItemResponseOutputWithContext(ctx context.Context) JobStatisticsReservationUsageItemResponseOutput {
	return o
}

// Reservation name or "unreserved" for on-demand resources usage.
func (o JobStatisticsReservationUsageItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsReservationUsageItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Total slot milliseconds used by the reservation for a particular job.
func (o JobStatisticsReservationUsageItemResponseOutput) SlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsReservationUsageItemResponse) string { return v.SlotMs }).(pulumi.StringOutput)
}

type JobStatisticsReservationUsageItemResponseArrayOutput struct{ *pulumi.OutputState }

func (JobStatisticsReservationUsageItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatisticsReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatisticsReservationUsageItemResponseArrayOutput) ToJobStatisticsReservationUsageItemResponseArrayOutput() JobStatisticsReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatisticsReservationUsageItemResponseArrayOutput) ToJobStatisticsReservationUsageItemResponseArrayOutputWithContext(ctx context.Context) JobStatisticsReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatisticsReservationUsageItemResponseArrayOutput) Index(i pulumi.IntInput) JobStatisticsReservationUsageItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatisticsReservationUsageItemResponse {
		return vs[0].([]JobStatisticsReservationUsageItemResponse)[vs[1].(int)]
	}).(JobStatisticsReservationUsageItemResponseOutput)
}

// Statistics for a single job execution.
type JobStatisticsResponse struct {
	// [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
	CompletionRatio float64 `pulumi:"completionRatio"`
	// Statistics for a copy job.
	Copy JobStatistics5Response `pulumi:"copy"`
	// Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
	CreationTime string `pulumi:"creationTime"`
	// Statistics for data-masking. Present only for query and extract jobs.
	DataMaskingStatistics DataMaskingStatisticsResponse `pulumi:"dataMaskingStatistics"`
	// End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
	EndTime string `pulumi:"endTime"`
	// Statistics for an extract job.
	Extract JobStatistics4Response `pulumi:"extract"`
	// The duration in milliseconds of the execution of the final attempt of this job, as BigQuery may internally re-attempt to execute the job.
	FinalExecutionDurationMs string `pulumi:"finalExecutionDurationMs"`
	// Statistics for a load job.
	Load JobStatistics3Response `pulumi:"load"`
	// Number of child jobs executed.
	NumChildJobs string `pulumi:"numChildJobs"`
	// If this is a child job, specifies the job ID of the parent.
	ParentJobId string `pulumi:"parentJobId"`
	// Statistics for a query job.
	Query JobStatistics2Response `pulumi:"query"`
	// Quotas which delayed this job's start time.
	QuotaDeferments []string `pulumi:"quotaDeferments"`
	// Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
	ReservationId string `pulumi:"reservationId"`
	// Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
	ReservationUsage []JobStatisticsReservationUsageItemResponse `pulumi:"reservationUsage"`
	// Statistics for row-level security. Present only for query and extract jobs.
	RowLevelSecurityStatistics RowLevelSecurityStatisticsResponse `pulumi:"rowLevelSecurityStatistics"`
	// If this a child job of a script, specifies information about the context of this job within the script.
	ScriptStatistics ScriptStatisticsResponse `pulumi:"scriptStatistics"`
	// Information of the session if this job is part of one.
	SessionInfo SessionInfoResponse `pulumi:"sessionInfo"`
	// Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
	StartTime string `pulumi:"startTime"`
	// Total bytes processed for the job.
	TotalBytesProcessed string `pulumi:"totalBytesProcessed"`
	// Slot-milliseconds for the job.
	TotalSlotMs string `pulumi:"totalSlotMs"`
	// [Alpha] Information of the multi-statement transaction if this job is part of one. This property is only expected on a child job or a job that is in a session. A script parent job is not part of the transaction started in the script.
	TransactionInfo TransactionInfoResponse `pulumi:"transactionInfo"`
}

// Statistics for a single job execution.
type JobStatisticsResponseOutput struct{ *pulumi.OutputState }

func (JobStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticsResponse)(nil)).Elem()
}

func (o JobStatisticsResponseOutput) ToJobStatisticsResponseOutput() JobStatisticsResponseOutput {
	return o
}

func (o JobStatisticsResponseOutput) ToJobStatisticsResponseOutputWithContext(ctx context.Context) JobStatisticsResponseOutput {
	return o
}

// [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
func (o JobStatisticsResponseOutput) CompletionRatio() pulumi.Float64Output {
	return o.ApplyT(func(v JobStatisticsResponse) float64 { return v.CompletionRatio }).(pulumi.Float64Output)
}

// Statistics for a copy job.
func (o JobStatisticsResponseOutput) Copy() JobStatistics5ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics5Response { return v.Copy }).(JobStatistics5ResponseOutput)
}

// Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
func (o JobStatisticsResponseOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.CreationTime }).(pulumi.StringOutput)
}

// Statistics for data-masking. Present only for query and extract jobs.
func (o JobStatisticsResponseOutput) DataMaskingStatistics() DataMaskingStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) DataMaskingStatisticsResponse { return v.DataMaskingStatistics }).(DataMaskingStatisticsResponseOutput)
}

// End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
func (o JobStatisticsResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Statistics for an extract job.
func (o JobStatisticsResponseOutput) Extract() JobStatistics4ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics4Response { return v.Extract }).(JobStatistics4ResponseOutput)
}

// The duration in milliseconds of the execution of the final attempt of this job, as BigQuery may internally re-attempt to execute the job.
func (o JobStatisticsResponseOutput) FinalExecutionDurationMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.FinalExecutionDurationMs }).(pulumi.StringOutput)
}

// Statistics for a load job.
func (o JobStatisticsResponseOutput) Load() JobStatistics3ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics3Response { return v.Load }).(JobStatistics3ResponseOutput)
}

// Number of child jobs executed.
func (o JobStatisticsResponseOutput) NumChildJobs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.NumChildJobs }).(pulumi.StringOutput)
}

// If this is a child job, specifies the job ID of the parent.
func (o JobStatisticsResponseOutput) ParentJobId() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.ParentJobId }).(pulumi.StringOutput)
}

// Statistics for a query job.
func (o JobStatisticsResponseOutput) Query() JobStatistics2ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics2Response { return v.Query }).(JobStatistics2ResponseOutput)
}

// Quotas which delayed this job's start time.
func (o JobStatisticsResponseOutput) QuotaDeferments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobStatisticsResponse) []string { return v.QuotaDeferments }).(pulumi.StringArrayOutput)
}

// Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
func (o JobStatisticsResponseOutput) ReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.ReservationId }).(pulumi.StringOutput)
}

// Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.
func (o JobStatisticsResponseOutput) ReservationUsage() JobStatisticsReservationUsageItemResponseArrayOutput {
	return o.ApplyT(func(v JobStatisticsResponse) []JobStatisticsReservationUsageItemResponse { return v.ReservationUsage }).(JobStatisticsReservationUsageItemResponseArrayOutput)
}

// Statistics for row-level security. Present only for query and extract jobs.
func (o JobStatisticsResponseOutput) RowLevelSecurityStatistics() RowLevelSecurityStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) RowLevelSecurityStatisticsResponse { return v.RowLevelSecurityStatistics }).(RowLevelSecurityStatisticsResponseOutput)
}

// If this a child job of a script, specifies information about the context of this job within the script.
func (o JobStatisticsResponseOutput) ScriptStatistics() ScriptStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) ScriptStatisticsResponse { return v.ScriptStatistics }).(ScriptStatisticsResponseOutput)
}

// Information of the session if this job is part of one.
func (o JobStatisticsResponseOutput) SessionInfo() SessionInfoResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) SessionInfoResponse { return v.SessionInfo }).(SessionInfoResponseOutput)
}

// Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
func (o JobStatisticsResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Total bytes processed for the job.
func (o JobStatisticsResponseOutput) TotalBytesProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.TotalBytesProcessed }).(pulumi.StringOutput)
}

// Slot-milliseconds for the job.
func (o JobStatisticsResponseOutput) TotalSlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.TotalSlotMs }).(pulumi.StringOutput)
}

// [Alpha] Information of the multi-statement transaction if this job is part of one. This property is only expected on a child job or a job that is in a session. A script parent job is not part of the transaction started in the script.
func (o JobStatisticsResponseOutput) TransactionInfo() TransactionInfoResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) TransactionInfoResponse { return v.TransactionInfo }).(TransactionInfoResponseOutput)
}

type JobStatusResponse struct {
	// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
	ErrorResult ErrorProtoResponse `pulumi:"errorResult"`
	// The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has not completed or was unsuccessful.
	Errors []ErrorProtoResponse `pulumi:"errors"`
	// Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
	State string `pulumi:"state"`
}

type JobStatusResponseOutput struct{ *pulumi.OutputState }

func (JobStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusResponse)(nil)).Elem()
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutput() JobStatusResponseOutput {
	return o
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutputWithContext(ctx context.Context) JobStatusResponseOutput {
	return o
}

// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
func (o JobStatusResponseOutput) ErrorResult() ErrorProtoResponseOutput {
	return o.ApplyT(func(v JobStatusResponse) ErrorProtoResponse { return v.ErrorResult }).(ErrorProtoResponseOutput)
}

// The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has not completed or was unsuccessful.
func (o JobStatusResponseOutput) Errors() ErrorProtoResponseArrayOutput {
	return o.ApplyT(func(v JobStatusResponse) []ErrorProtoResponse { return v.Errors }).(ErrorProtoResponseArrayOutput)
}

// Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'.
func (o JobStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

// Json Options for load and make external tables.
type JsonOptions struct {
	// Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
	Encoding *string `pulumi:"encoding"`
}

// JsonOptionsInput is an input type that accepts JsonOptionsArgs and JsonOptionsOutput values.
// You can construct a concrete instance of `JsonOptionsInput` via:
//
//	JsonOptionsArgs{...}
type JsonOptionsInput interface {
	pulumi.Input

	ToJsonOptionsOutput() JsonOptionsOutput
	ToJsonOptionsOutputWithContext(context.Context) JsonOptionsOutput
}

// Json Options for load and make external tables.
type JsonOptionsArgs struct {
	// Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
}

func (JsonOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOptions)(nil)).Elem()
}

func (i JsonOptionsArgs) ToJsonOptionsOutput() JsonOptionsOutput {
	return i.ToJsonOptionsOutputWithContext(context.Background())
}

func (i JsonOptionsArgs) ToJsonOptionsOutputWithContext(ctx context.Context) JsonOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonOptionsOutput)
}

func (i JsonOptionsArgs) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return i.ToJsonOptionsPtrOutputWithContext(context.Background())
}

func (i JsonOptionsArgs) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonOptionsOutput).ToJsonOptionsPtrOutputWithContext(ctx)
}

// JsonOptionsPtrInput is an input type that accepts JsonOptionsArgs, JsonOptionsPtr and JsonOptionsPtrOutput values.
// You can construct a concrete instance of `JsonOptionsPtrInput` via:
//
//	        JsonOptionsArgs{...}
//
//	or:
//
//	        nil
type JsonOptionsPtrInput interface {
	pulumi.Input

	ToJsonOptionsPtrOutput() JsonOptionsPtrOutput
	ToJsonOptionsPtrOutputWithContext(context.Context) JsonOptionsPtrOutput
}

type jsonOptionsPtrType JsonOptionsArgs

func JsonOptionsPtr(v *JsonOptionsArgs) JsonOptionsPtrInput {
	return (*jsonOptionsPtrType)(v)
}

func (*jsonOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonOptions)(nil)).Elem()
}

func (i *jsonOptionsPtrType) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return i.ToJsonOptionsPtrOutputWithContext(context.Background())
}

func (i *jsonOptionsPtrType) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonOptionsPtrOutput)
}

// Json Options for load and make external tables.
type JsonOptionsOutput struct{ *pulumi.OutputState }

func (JsonOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOptions)(nil)).Elem()
}

func (o JsonOptionsOutput) ToJsonOptionsOutput() JsonOptionsOutput {
	return o
}

func (o JsonOptionsOutput) ToJsonOptionsOutputWithContext(ctx context.Context) JsonOptionsOutput {
	return o
}

func (o JsonOptionsOutput) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return o.ToJsonOptionsPtrOutputWithContext(context.Background())
}

func (o JsonOptionsOutput) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonOptions) *JsonOptions {
		return &v
	}).(JsonOptionsPtrOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
func (o JsonOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

type JsonOptionsPtrOutput struct{ *pulumi.OutputState }

func (JsonOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonOptions)(nil)).Elem()
}

func (o JsonOptionsPtrOutput) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return o
}

func (o JsonOptionsPtrOutput) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return o
}

func (o JsonOptionsPtrOutput) Elem() JsonOptionsOutput {
	return o.ApplyT(func(v *JsonOptions) JsonOptions {
		if v != nil {
			return *v
		}
		var ret JsonOptions
		return ret
	}).(JsonOptionsOutput)
}

// Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
func (o JsonOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonOptions) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// Json Options for load and make external tables.
type JsonOptionsResponse struct {
	// Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
	Encoding string `pulumi:"encoding"`
}

// Json Options for load and make external tables.
type JsonOptionsResponseOutput struct{ *pulumi.OutputState }

func (JsonOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOptionsResponse)(nil)).Elem()
}

func (o JsonOptionsResponseOutput) ToJsonOptionsResponseOutput() JsonOptionsResponseOutput {
	return o
}

func (o JsonOptionsResponseOutput) ToJsonOptionsResponseOutputWithContext(ctx context.Context) JsonOptionsResponseOutput {
	return o
}

// Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
func (o JsonOptionsResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v JsonOptionsResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Metadata about the Linked Dataset.
type LinkedDatasetMetadataResponse struct {
	// Specifies whether Linked Dataset is currently in a linked state or not.
	LinkState string `pulumi:"linkState"`
}

// Metadata about the Linked Dataset.
type LinkedDatasetMetadataResponseOutput struct{ *pulumi.OutputState }

func (LinkedDatasetMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedDatasetMetadataResponse)(nil)).Elem()
}

func (o LinkedDatasetMetadataResponseOutput) ToLinkedDatasetMetadataResponseOutput() LinkedDatasetMetadataResponseOutput {
	return o
}

func (o LinkedDatasetMetadataResponseOutput) ToLinkedDatasetMetadataResponseOutputWithContext(ctx context.Context) LinkedDatasetMetadataResponseOutput {
	return o
}

// Specifies whether Linked Dataset is currently in a linked state or not.
func (o LinkedDatasetMetadataResponseOutput) LinkState() pulumi.StringOutput {
	return o.ApplyT(func(v LinkedDatasetMetadataResponse) string { return v.LinkState }).(pulumi.StringOutput)
}

// A dataset source type which refers to another BigQuery dataset.
type LinkedDatasetSource struct {
	// The source dataset reference contains project numbers and not project ids.
	SourceDataset *DatasetReference `pulumi:"sourceDataset"`
}

// LinkedDatasetSourceInput is an input type that accepts LinkedDatasetSourceArgs and LinkedDatasetSourceOutput values.
// You can construct a concrete instance of `LinkedDatasetSourceInput` via:
//
//	LinkedDatasetSourceArgs{...}
type LinkedDatasetSourceInput interface {
	pulumi.Input

	ToLinkedDatasetSourceOutput() LinkedDatasetSourceOutput
	ToLinkedDatasetSourceOutputWithContext(context.Context) LinkedDatasetSourceOutput
}

// A dataset source type which refers to another BigQuery dataset.
type LinkedDatasetSourceArgs struct {
	// The source dataset reference contains project numbers and not project ids.
	SourceDataset DatasetReferencePtrInput `pulumi:"sourceDataset"`
}

func (LinkedDatasetSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedDatasetSource)(nil)).Elem()
}

func (i LinkedDatasetSourceArgs) ToLinkedDatasetSourceOutput() LinkedDatasetSourceOutput {
	return i.ToLinkedDatasetSourceOutputWithContext(context.Background())
}

func (i LinkedDatasetSourceArgs) ToLinkedDatasetSourceOutputWithContext(ctx context.Context) LinkedDatasetSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedDatasetSourceOutput)
}

func (i LinkedDatasetSourceArgs) ToLinkedDatasetSourcePtrOutput() LinkedDatasetSourcePtrOutput {
	return i.ToLinkedDatasetSourcePtrOutputWithContext(context.Background())
}

func (i LinkedDatasetSourceArgs) ToLinkedDatasetSourcePtrOutputWithContext(ctx context.Context) LinkedDatasetSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedDatasetSourceOutput).ToLinkedDatasetSourcePtrOutputWithContext(ctx)
}

// LinkedDatasetSourcePtrInput is an input type that accepts LinkedDatasetSourceArgs, LinkedDatasetSourcePtr and LinkedDatasetSourcePtrOutput values.
// You can construct a concrete instance of `LinkedDatasetSourcePtrInput` via:
//
//	        LinkedDatasetSourceArgs{...}
//
//	or:
//
//	        nil
type LinkedDatasetSourcePtrInput interface {
	pulumi.Input

	ToLinkedDatasetSourcePtrOutput() LinkedDatasetSourcePtrOutput
	ToLinkedDatasetSourcePtrOutputWithContext(context.Context) LinkedDatasetSourcePtrOutput
}

type linkedDatasetSourcePtrType LinkedDatasetSourceArgs

func LinkedDatasetSourcePtr(v *LinkedDatasetSourceArgs) LinkedDatasetSourcePtrInput {
	return (*linkedDatasetSourcePtrType)(v)
}

func (*linkedDatasetSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedDatasetSource)(nil)).Elem()
}

func (i *linkedDatasetSourcePtrType) ToLinkedDatasetSourcePtrOutput() LinkedDatasetSourcePtrOutput {
	return i.ToLinkedDatasetSourcePtrOutputWithContext(context.Background())
}

func (i *linkedDatasetSourcePtrType) ToLinkedDatasetSourcePtrOutputWithContext(ctx context.Context) LinkedDatasetSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LinkedDatasetSourcePtrOutput)
}

// A dataset source type which refers to another BigQuery dataset.
type LinkedDatasetSourceOutput struct{ *pulumi.OutputState }

func (LinkedDatasetSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedDatasetSource)(nil)).Elem()
}

func (o LinkedDatasetSourceOutput) ToLinkedDatasetSourceOutput() LinkedDatasetSourceOutput {
	return o
}

func (o LinkedDatasetSourceOutput) ToLinkedDatasetSourceOutputWithContext(ctx context.Context) LinkedDatasetSourceOutput {
	return o
}

func (o LinkedDatasetSourceOutput) ToLinkedDatasetSourcePtrOutput() LinkedDatasetSourcePtrOutput {
	return o.ToLinkedDatasetSourcePtrOutputWithContext(context.Background())
}

func (o LinkedDatasetSourceOutput) ToLinkedDatasetSourcePtrOutputWithContext(ctx context.Context) LinkedDatasetSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LinkedDatasetSource) *LinkedDatasetSource {
		return &v
	}).(LinkedDatasetSourcePtrOutput)
}

// The source dataset reference contains project numbers and not project ids.
func (o LinkedDatasetSourceOutput) SourceDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v LinkedDatasetSource) *DatasetReference { return v.SourceDataset }).(DatasetReferencePtrOutput)
}

type LinkedDatasetSourcePtrOutput struct{ *pulumi.OutputState }

func (LinkedDatasetSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LinkedDatasetSource)(nil)).Elem()
}

func (o LinkedDatasetSourcePtrOutput) ToLinkedDatasetSourcePtrOutput() LinkedDatasetSourcePtrOutput {
	return o
}

func (o LinkedDatasetSourcePtrOutput) ToLinkedDatasetSourcePtrOutputWithContext(ctx context.Context) LinkedDatasetSourcePtrOutput {
	return o
}

func (o LinkedDatasetSourcePtrOutput) Elem() LinkedDatasetSourceOutput {
	return o.ApplyT(func(v *LinkedDatasetSource) LinkedDatasetSource {
		if v != nil {
			return *v
		}
		var ret LinkedDatasetSource
		return ret
	}).(LinkedDatasetSourceOutput)
}

// The source dataset reference contains project numbers and not project ids.
func (o LinkedDatasetSourcePtrOutput) SourceDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v *LinkedDatasetSource) *DatasetReference {
		if v == nil {
			return nil
		}
		return v.SourceDataset
	}).(DatasetReferencePtrOutput)
}

// A dataset source type which refers to another BigQuery dataset.
type LinkedDatasetSourceResponse struct {
	// The source dataset reference contains project numbers and not project ids.
	SourceDataset DatasetReferenceResponse `pulumi:"sourceDataset"`
}

// A dataset source type which refers to another BigQuery dataset.
type LinkedDatasetSourceResponseOutput struct{ *pulumi.OutputState }

func (LinkedDatasetSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LinkedDatasetSourceResponse)(nil)).Elem()
}

func (o LinkedDatasetSourceResponseOutput) ToLinkedDatasetSourceResponseOutput() LinkedDatasetSourceResponseOutput {
	return o
}

func (o LinkedDatasetSourceResponseOutput) ToLinkedDatasetSourceResponseOutputWithContext(ctx context.Context) LinkedDatasetSourceResponseOutput {
	return o
}

// The source dataset reference contains project numbers and not project ids.
func (o LinkedDatasetSourceResponseOutput) SourceDataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v LinkedDatasetSourceResponse) DatasetReferenceResponse { return v.SourceDataset }).(DatasetReferenceResponseOutput)
}

// Statistics for a LOAD query.
type LoadQueryStatisticsResponse struct {
	// The number of bad records encountered while processing a LOAD query. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
	BadRecords string `pulumi:"badRecords"`
	// This field is deprecated. The number of bytes of source data copied over the network for a `LOAD` query. `transferred_bytes` has the canonical value for physical transferred bytes, which is used for BigQuery Omni billing.
	//
	// Deprecated: Output only. This field is deprecated. The number of bytes of source data copied over the network for a `LOAD` query. `transferred_bytes` has the canonical value for physical transferred bytes, which is used for BigQuery Omni billing.
	BytesTransferred string `pulumi:"bytesTransferred"`
	// Number of bytes of source data in a LOAD query.
	InputFileBytes string `pulumi:"inputFileBytes"`
	// Number of source files in a LOAD query.
	InputFiles string `pulumi:"inputFiles"`
	// Size of the loaded data in bytes. Note that while a LOAD query is in the running state, this value may change.
	OutputBytes string `pulumi:"outputBytes"`
	// Number of rows imported in a LOAD query. Note that while a LOAD query is in the running state, this value may change.
	OutputRows string `pulumi:"outputRows"`
}

// Statistics for a LOAD query.
type LoadQueryStatisticsResponseOutput struct{ *pulumi.OutputState }

func (LoadQueryStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadQueryStatisticsResponse)(nil)).Elem()
}

func (o LoadQueryStatisticsResponseOutput) ToLoadQueryStatisticsResponseOutput() LoadQueryStatisticsResponseOutput {
	return o
}

func (o LoadQueryStatisticsResponseOutput) ToLoadQueryStatisticsResponseOutputWithContext(ctx context.Context) LoadQueryStatisticsResponseOutput {
	return o
}

// The number of bad records encountered while processing a LOAD query. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
func (o LoadQueryStatisticsResponseOutput) BadRecords() pulumi.StringOutput {
	return o.ApplyT(func(v LoadQueryStatisticsResponse) string { return v.BadRecords }).(pulumi.StringOutput)
}

// This field is deprecated. The number of bytes of source data copied over the network for a `LOAD` query. `transferred_bytes` has the canonical value for physical transferred bytes, which is used for BigQuery Omni billing.
//
// Deprecated: Output only. This field is deprecated. The number of bytes of source data copied over the network for a `LOAD` query. `transferred_bytes` has the canonical value for physical transferred bytes, which is used for BigQuery Omni billing.
func (o LoadQueryStatisticsResponseOutput) BytesTransferred() pulumi.StringOutput {
	return o.ApplyT(func(v LoadQueryStatisticsResponse) string { return v.BytesTransferred }).(pulumi.StringOutput)
}

// Number of bytes of source data in a LOAD query.
func (o LoadQueryStatisticsResponseOutput) InputFileBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LoadQueryStatisticsResponse) string { return v.InputFileBytes }).(pulumi.StringOutput)
}

// Number of source files in a LOAD query.
func (o LoadQueryStatisticsResponseOutput) InputFiles() pulumi.StringOutput {
	return o.ApplyT(func(v LoadQueryStatisticsResponse) string { return v.InputFiles }).(pulumi.StringOutput)
}

// Size of the loaded data in bytes. Note that while a LOAD query is in the running state, this value may change.
func (o LoadQueryStatisticsResponseOutput) OutputBytes() pulumi.StringOutput {
	return o.ApplyT(func(v LoadQueryStatisticsResponse) string { return v.OutputBytes }).(pulumi.StringOutput)
}

// Number of rows imported in a LOAD query. Note that while a LOAD query is in the running state, this value may change.
func (o LoadQueryStatisticsResponseOutput) OutputRows() pulumi.StringOutput {
	return o.ApplyT(func(v LoadQueryStatisticsResponse) string { return v.OutputRows }).(pulumi.StringOutput)
}

// Definition and configuration of a materialized view.
type MaterializedViewDefinition struct {
	// Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.
	AllowNonIncrementalDefinition *bool `pulumi:"allowNonIncrementalDefinition"`
	// Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh *bool `pulumi:"enableRefresh"`
	// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
	MaxStaleness *string `pulumi:"maxStaleness"`
	// A query whose results are persisted.
	Query string `pulumi:"query"`
	// Optional. The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs *string `pulumi:"refreshIntervalMs"`
}

// MaterializedViewDefinitionInput is an input type that accepts MaterializedViewDefinitionArgs and MaterializedViewDefinitionOutput values.
// You can construct a concrete instance of `MaterializedViewDefinitionInput` via:
//
//	MaterializedViewDefinitionArgs{...}
type MaterializedViewDefinitionInput interface {
	pulumi.Input

	ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput
	ToMaterializedViewDefinitionOutputWithContext(context.Context) MaterializedViewDefinitionOutput
}

// Definition and configuration of a materialized view.
type MaterializedViewDefinitionArgs struct {
	// Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.
	AllowNonIncrementalDefinition pulumi.BoolPtrInput `pulumi:"allowNonIncrementalDefinition"`
	// Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh pulumi.BoolPtrInput `pulumi:"enableRefresh"`
	// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
	MaxStaleness pulumi.StringPtrInput `pulumi:"maxStaleness"`
	// A query whose results are persisted.
	Query pulumi.StringInput `pulumi:"query"`
	// Optional. The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs pulumi.StringPtrInput `pulumi:"refreshIntervalMs"`
}

func (MaterializedViewDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinition)(nil)).Elem()
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput {
	return i.ToMaterializedViewDefinitionOutputWithContext(context.Background())
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionOutputWithContext(ctx context.Context) MaterializedViewDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionOutput)
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return i.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionOutput).ToMaterializedViewDefinitionPtrOutputWithContext(ctx)
}

// MaterializedViewDefinitionPtrInput is an input type that accepts MaterializedViewDefinitionArgs, MaterializedViewDefinitionPtr and MaterializedViewDefinitionPtrOutput values.
// You can construct a concrete instance of `MaterializedViewDefinitionPtrInput` via:
//
//	        MaterializedViewDefinitionArgs{...}
//
//	or:
//
//	        nil
type MaterializedViewDefinitionPtrInput interface {
	pulumi.Input

	ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput
	ToMaterializedViewDefinitionPtrOutputWithContext(context.Context) MaterializedViewDefinitionPtrOutput
}

type materializedViewDefinitionPtrType MaterializedViewDefinitionArgs

func MaterializedViewDefinitionPtr(v *MaterializedViewDefinitionArgs) MaterializedViewDefinitionPtrInput {
	return (*materializedViewDefinitionPtrType)(v)
}

func (*materializedViewDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedViewDefinition)(nil)).Elem()
}

func (i *materializedViewDefinitionPtrType) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return i.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (i *materializedViewDefinitionPtrType) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionPtrOutput)
}

// Definition and configuration of a materialized view.
type MaterializedViewDefinitionOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinition)(nil)).Elem()
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput {
	return o
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionOutputWithContext(ctx context.Context) MaterializedViewDefinitionOutput {
	return o
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return o.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializedViewDefinition) *MaterializedViewDefinition {
		return &v
	}).(MaterializedViewDefinitionPtrOutput)
}

// Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.
func (o MaterializedViewDefinitionOutput) AllowNonIncrementalDefinition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *bool { return v.AllowNonIncrementalDefinition }).(pulumi.BoolPtrOutput)
}

// Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *bool { return v.EnableRefresh }).(pulumi.BoolPtrOutput)
}

// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
func (o MaterializedViewDefinitionOutput) MaxStaleness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.MaxStaleness }).(pulumi.StringPtrOutput)
}

// A query whose results are persisted.
func (o MaterializedViewDefinitionOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) string { return v.Query }).(pulumi.StringOutput)
}

// Optional. The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionOutput) RefreshIntervalMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.RefreshIntervalMs }).(pulumi.StringPtrOutput)
}

type MaterializedViewDefinitionPtrOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedViewDefinition)(nil)).Elem()
}

func (o MaterializedViewDefinitionPtrOutput) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return o
}

func (o MaterializedViewDefinitionPtrOutput) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return o
}

func (o MaterializedViewDefinitionPtrOutput) Elem() MaterializedViewDefinitionOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) MaterializedViewDefinition {
		if v != nil {
			return *v
		}
		var ret MaterializedViewDefinition
		return ret
	}).(MaterializedViewDefinitionOutput)
}

// Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.
func (o MaterializedViewDefinitionPtrOutput) AllowNonIncrementalDefinition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNonIncrementalDefinition
	}).(pulumi.BoolPtrOutput)
}

// Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionPtrOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.EnableRefresh
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
func (o MaterializedViewDefinitionPtrOutput) MaxStaleness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.MaxStaleness
	}).(pulumi.StringPtrOutput)
}

// A query whose results are persisted.
func (o MaterializedViewDefinitionPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// Optional. The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionPtrOutput) RefreshIntervalMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.RefreshIntervalMs
	}).(pulumi.StringPtrOutput)
}

// Definition and configuration of a materialized view.
type MaterializedViewDefinitionResponse struct {
	// Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.
	AllowNonIncrementalDefinition bool `pulumi:"allowNonIncrementalDefinition"`
	// Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh bool `pulumi:"enableRefresh"`
	// The time when this materialized view was last refreshed, in milliseconds since the epoch.
	LastRefreshTime string `pulumi:"lastRefreshTime"`
	// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
	MaxStaleness string `pulumi:"maxStaleness"`
	// A query whose results are persisted.
	Query string `pulumi:"query"`
	// Optional. The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs string `pulumi:"refreshIntervalMs"`
}

// Definition and configuration of a materialized view.
type MaterializedViewDefinitionResponseOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinitionResponse)(nil)).Elem()
}

func (o MaterializedViewDefinitionResponseOutput) ToMaterializedViewDefinitionResponseOutput() MaterializedViewDefinitionResponseOutput {
	return o
}

func (o MaterializedViewDefinitionResponseOutput) ToMaterializedViewDefinitionResponseOutputWithContext(ctx context.Context) MaterializedViewDefinitionResponseOutput {
	return o
}

// Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.
func (o MaterializedViewDefinitionResponseOutput) AllowNonIncrementalDefinition() pulumi.BoolOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) bool { return v.AllowNonIncrementalDefinition }).(pulumi.BoolOutput)
}

// Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionResponseOutput) EnableRefresh() pulumi.BoolOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) bool { return v.EnableRefresh }).(pulumi.BoolOutput)
}

// The time when this materialized view was last refreshed, in milliseconds since the epoch.
func (o MaterializedViewDefinitionResponseOutput) LastRefreshTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.LastRefreshTime }).(pulumi.StringOutput)
}

// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
func (o MaterializedViewDefinitionResponseOutput) MaxStaleness() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.MaxStaleness }).(pulumi.StringOutput)
}

// A query whose results are persisted.
func (o MaterializedViewDefinitionResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.Query }).(pulumi.StringOutput)
}

// Optional. The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionResponseOutput) RefreshIntervalMs() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.RefreshIntervalMs }).(pulumi.StringOutput)
}

// A materialized view considered for a query job.
type MaterializedViewResponse struct {
	// Whether the materialized view is chosen for the query. A materialized view can be chosen to rewrite multiple parts of the same query. If a materialized view is chosen to rewrite any part of the query, then this field is true, even if the materialized view was not chosen to rewrite others parts.
	Chosen bool `pulumi:"chosen"`
	// If present, specifies a best-effort estimation of the bytes saved by using the materialized view rather than its base tables.
	EstimatedBytesSaved string `pulumi:"estimatedBytesSaved"`
	// If present, specifies the reason why the materialized view was not chosen for the query.
	RejectedReason string `pulumi:"rejectedReason"`
	// The candidate materialized view.
	TableReference TableReferenceResponse `pulumi:"tableReference"`
}

// A materialized view considered for a query job.
type MaterializedViewResponseOutput struct{ *pulumi.OutputState }

func (MaterializedViewResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewResponse)(nil)).Elem()
}

func (o MaterializedViewResponseOutput) ToMaterializedViewResponseOutput() MaterializedViewResponseOutput {
	return o
}

func (o MaterializedViewResponseOutput) ToMaterializedViewResponseOutputWithContext(ctx context.Context) MaterializedViewResponseOutput {
	return o
}

// Whether the materialized view is chosen for the query. A materialized view can be chosen to rewrite multiple parts of the same query. If a materialized view is chosen to rewrite any part of the query, then this field is true, even if the materialized view was not chosen to rewrite others parts.
func (o MaterializedViewResponseOutput) Chosen() pulumi.BoolOutput {
	return o.ApplyT(func(v MaterializedViewResponse) bool { return v.Chosen }).(pulumi.BoolOutput)
}

// If present, specifies a best-effort estimation of the bytes saved by using the materialized view rather than its base tables.
func (o MaterializedViewResponseOutput) EstimatedBytesSaved() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewResponse) string { return v.EstimatedBytesSaved }).(pulumi.StringOutput)
}

// If present, specifies the reason why the materialized view was not chosen for the query.
func (o MaterializedViewResponseOutput) RejectedReason() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewResponse) string { return v.RejectedReason }).(pulumi.StringOutput)
}

// The candidate materialized view.
func (o MaterializedViewResponseOutput) TableReference() TableReferenceResponseOutput {
	return o.ApplyT(func(v MaterializedViewResponse) TableReferenceResponse { return v.TableReference }).(TableReferenceResponseOutput)
}

type MaterializedViewResponseArrayOutput struct{ *pulumi.OutputState }

func (MaterializedViewResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MaterializedViewResponse)(nil)).Elem()
}

func (o MaterializedViewResponseArrayOutput) ToMaterializedViewResponseArrayOutput() MaterializedViewResponseArrayOutput {
	return o
}

func (o MaterializedViewResponseArrayOutput) ToMaterializedViewResponseArrayOutputWithContext(ctx context.Context) MaterializedViewResponseArrayOutput {
	return o
}

func (o MaterializedViewResponseArrayOutput) Index(i pulumi.IntInput) MaterializedViewResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MaterializedViewResponse {
		return vs[0].([]MaterializedViewResponse)[vs[1].(int)]
	}).(MaterializedViewResponseOutput)
}

// Statistics of materialized views considered in a query job.
type MaterializedViewStatisticsResponse struct {
	// Materialized views considered for the query job. Only certain materialized views are used. For a detailed list, see the child message. If many materialized views are considered, then the list might be incomplete.
	MaterializedView []MaterializedViewResponse `pulumi:"materializedView"`
}

// Statistics of materialized views considered in a query job.
type MaterializedViewStatisticsResponseOutput struct{ *pulumi.OutputState }

func (MaterializedViewStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewStatisticsResponse)(nil)).Elem()
}

func (o MaterializedViewStatisticsResponseOutput) ToMaterializedViewStatisticsResponseOutput() MaterializedViewStatisticsResponseOutput {
	return o
}

func (o MaterializedViewStatisticsResponseOutput) ToMaterializedViewStatisticsResponseOutputWithContext(ctx context.Context) MaterializedViewStatisticsResponseOutput {
	return o
}

// Materialized views considered for the query job. Only certain materialized views are used. For a detailed list, see the child message. If many materialized views are considered, then the list might be incomplete.
func (o MaterializedViewStatisticsResponseOutput) MaterializedView() MaterializedViewResponseArrayOutput {
	return o.ApplyT(func(v MaterializedViewStatisticsResponse) []MaterializedViewResponse { return v.MaterializedView }).(MaterializedViewResponseArrayOutput)
}

// Status of a materialized view. The last refresh timestamp status is omitted here, but is present in the MaterializedViewDefinition message.
type MaterializedViewStatusResponse struct {
	// Error result of the last automatic refresh. If present, indicates that the last automatic refresh was unsuccessful.
	LastRefreshStatus ErrorProtoResponse `pulumi:"lastRefreshStatus"`
	// Refresh watermark of materialized view. The base tables' data were collected into the materialized view cache until this time.
	RefreshWatermark string `pulumi:"refreshWatermark"`
}

// Status of a materialized view. The last refresh timestamp status is omitted here, but is present in the MaterializedViewDefinition message.
type MaterializedViewStatusResponseOutput struct{ *pulumi.OutputState }

func (MaterializedViewStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewStatusResponse)(nil)).Elem()
}

func (o MaterializedViewStatusResponseOutput) ToMaterializedViewStatusResponseOutput() MaterializedViewStatusResponseOutput {
	return o
}

func (o MaterializedViewStatusResponseOutput) ToMaterializedViewStatusResponseOutputWithContext(ctx context.Context) MaterializedViewStatusResponseOutput {
	return o
}

// Error result of the last automatic refresh. If present, indicates that the last automatic refresh was unsuccessful.
func (o MaterializedViewStatusResponseOutput) LastRefreshStatus() ErrorProtoResponseOutput {
	return o.ApplyT(func(v MaterializedViewStatusResponse) ErrorProtoResponse { return v.LastRefreshStatus }).(ErrorProtoResponseOutput)
}

// Refresh watermark of materialized view. The base tables' data were collected into the materialized view cache until this time.
func (o MaterializedViewStatusResponseOutput) RefreshWatermark() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewStatusResponse) string { return v.RefreshWatermark }).(pulumi.StringOutput)
}

// Statistics for metadata caching in BigLake tables.
type MetadataCacheStatisticsResponse struct {
	// Set for the Metadata caching eligible tables referenced in the query.
	TableMetadataCacheUsage []TableMetadataCacheUsageResponse `pulumi:"tableMetadataCacheUsage"`
}

// Statistics for metadata caching in BigLake tables.
type MetadataCacheStatisticsResponseOutput struct{ *pulumi.OutputState }

func (MetadataCacheStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataCacheStatisticsResponse)(nil)).Elem()
}

func (o MetadataCacheStatisticsResponseOutput) ToMetadataCacheStatisticsResponseOutput() MetadataCacheStatisticsResponseOutput {
	return o
}

func (o MetadataCacheStatisticsResponseOutput) ToMetadataCacheStatisticsResponseOutputWithContext(ctx context.Context) MetadataCacheStatisticsResponseOutput {
	return o
}

// Set for the Metadata caching eligible tables referenced in the query.
func (o MetadataCacheStatisticsResponseOutput) TableMetadataCacheUsage() TableMetadataCacheUsageResponseArrayOutput {
	return o.ApplyT(func(v MetadataCacheStatisticsResponse) []TableMetadataCacheUsageResponse {
		return v.TableMetadataCacheUsage
	}).(TableMetadataCacheUsageResponseArrayOutput)
}

// Job statistics specific to a BigQuery ML training job.
type MlStatisticsResponse struct {
	// Trials of a [hyperparameter tuning job](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.
	HparamTrials []HparamTuningTrialResponse `pulumi:"hparamTrials"`
	// Results for all completed iterations. Empty for [hyperparameter tuning jobs](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
	IterationResults []IterationResultResponse `pulumi:"iterationResults"`
	// Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.
	MaxIterations string `pulumi:"maxIterations"`
	// The type of the model that is being trained.
	ModelType string `pulumi:"modelType"`
	// Training type of the job.
	TrainingType string `pulumi:"trainingType"`
}

// Job statistics specific to a BigQuery ML training job.
type MlStatisticsResponseOutput struct{ *pulumi.OutputState }

func (MlStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlStatisticsResponse)(nil)).Elem()
}

func (o MlStatisticsResponseOutput) ToMlStatisticsResponseOutput() MlStatisticsResponseOutput {
	return o
}

func (o MlStatisticsResponseOutput) ToMlStatisticsResponseOutputWithContext(ctx context.Context) MlStatisticsResponseOutput {
	return o
}

// Trials of a [hyperparameter tuning job](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.
func (o MlStatisticsResponseOutput) HparamTrials() HparamTuningTrialResponseArrayOutput {
	return o.ApplyT(func(v MlStatisticsResponse) []HparamTuningTrialResponse { return v.HparamTrials }).(HparamTuningTrialResponseArrayOutput)
}

// Results for all completed iterations. Empty for [hyperparameter tuning jobs](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
func (o MlStatisticsResponseOutput) IterationResults() IterationResultResponseArrayOutput {
	return o.ApplyT(func(v MlStatisticsResponse) []IterationResultResponse { return v.IterationResults }).(IterationResultResponseArrayOutput)
}

// Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.
func (o MlStatisticsResponseOutput) MaxIterations() pulumi.StringOutput {
	return o.ApplyT(func(v MlStatisticsResponse) string { return v.MaxIterations }).(pulumi.StringOutput)
}

// The type of the model that is being trained.
func (o MlStatisticsResponseOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v MlStatisticsResponse) string { return v.ModelType }).(pulumi.StringOutput)
}

// Training type of the job.
func (o MlStatisticsResponseOutput) TrainingType() pulumi.StringOutput {
	return o.ApplyT(func(v MlStatisticsResponse) string { return v.TrainingType }).(pulumi.StringOutput)
}

type ModelDefinition struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	ModelOptions *ModelDefinitionModelOptions `pulumi:"modelOptions"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingRuns []BqmlTrainingRun `pulumi:"trainingRuns"`
}

// ModelDefinitionInput is an input type that accepts ModelDefinitionArgs and ModelDefinitionOutput values.
// You can construct a concrete instance of `ModelDefinitionInput` via:
//
//	ModelDefinitionArgs{...}
type ModelDefinitionInput interface {
	pulumi.Input

	ToModelDefinitionOutput() ModelDefinitionOutput
	ToModelDefinitionOutputWithContext(context.Context) ModelDefinitionOutput
}

type ModelDefinitionArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	ModelOptions ModelDefinitionModelOptionsPtrInput `pulumi:"modelOptions"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingRuns BqmlTrainingRunArrayInput `pulumi:"trainingRuns"`
}

func (ModelDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinition)(nil)).Elem()
}

func (i ModelDefinitionArgs) ToModelDefinitionOutput() ModelDefinitionOutput {
	return i.ToModelDefinitionOutputWithContext(context.Background())
}

func (i ModelDefinitionArgs) ToModelDefinitionOutputWithContext(ctx context.Context) ModelDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionOutput)
}

func (i ModelDefinitionArgs) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return i.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (i ModelDefinitionArgs) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionOutput).ToModelDefinitionPtrOutputWithContext(ctx)
}

// ModelDefinitionPtrInput is an input type that accepts ModelDefinitionArgs, ModelDefinitionPtr and ModelDefinitionPtrOutput values.
// You can construct a concrete instance of `ModelDefinitionPtrInput` via:
//
//	        ModelDefinitionArgs{...}
//
//	or:
//
//	        nil
type ModelDefinitionPtrInput interface {
	pulumi.Input

	ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput
	ToModelDefinitionPtrOutputWithContext(context.Context) ModelDefinitionPtrOutput
}

type modelDefinitionPtrType ModelDefinitionArgs

func ModelDefinitionPtr(v *ModelDefinitionArgs) ModelDefinitionPtrInput {
	return (*modelDefinitionPtrType)(v)
}

func (*modelDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinition)(nil)).Elem()
}

func (i *modelDefinitionPtrType) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return i.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (i *modelDefinitionPtrType) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionPtrOutput)
}

type ModelDefinitionOutput struct{ *pulumi.OutputState }

func (ModelDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinition)(nil)).Elem()
}

func (o ModelDefinitionOutput) ToModelDefinitionOutput() ModelDefinitionOutput {
	return o
}

func (o ModelDefinitionOutput) ToModelDefinitionOutputWithContext(ctx context.Context) ModelDefinitionOutput {
	return o
}

func (o ModelDefinitionOutput) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return o.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (o ModelDefinitionOutput) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelDefinition) *ModelDefinition {
		return &v
	}).(ModelDefinitionPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o ModelDefinitionOutput) ModelOptions() ModelDefinitionModelOptionsPtrOutput {
	return o.ApplyT(func(v ModelDefinition) *ModelDefinitionModelOptions { return v.ModelOptions }).(ModelDefinitionModelOptionsPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o ModelDefinitionOutput) TrainingRuns() BqmlTrainingRunArrayOutput {
	return o.ApplyT(func(v ModelDefinition) []BqmlTrainingRun { return v.TrainingRuns }).(BqmlTrainingRunArrayOutput)
}

type ModelDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ModelDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinition)(nil)).Elem()
}

func (o ModelDefinitionPtrOutput) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return o
}

func (o ModelDefinitionPtrOutput) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return o
}

func (o ModelDefinitionPtrOutput) Elem() ModelDefinitionOutput {
	return o.ApplyT(func(v *ModelDefinition) ModelDefinition {
		if v != nil {
			return *v
		}
		var ret ModelDefinition
		return ret
	}).(ModelDefinitionOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o ModelDefinitionPtrOutput) ModelOptions() ModelDefinitionModelOptionsPtrOutput {
	return o.ApplyT(func(v *ModelDefinition) *ModelDefinitionModelOptions {
		if v == nil {
			return nil
		}
		return v.ModelOptions
	}).(ModelDefinitionModelOptionsPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o ModelDefinitionPtrOutput) TrainingRuns() BqmlTrainingRunArrayOutput {
	return o.ApplyT(func(v *ModelDefinition) []BqmlTrainingRun {
		if v == nil {
			return nil
		}
		return v.TrainingRuns
	}).(BqmlTrainingRunArrayOutput)
}

// Deprecated.
type ModelDefinitionModelOptions struct {
	Labels    []string `pulumi:"labels"`
	LossType  *string  `pulumi:"lossType"`
	ModelType *string  `pulumi:"modelType"`
}

// ModelDefinitionModelOptionsInput is an input type that accepts ModelDefinitionModelOptionsArgs and ModelDefinitionModelOptionsOutput values.
// You can construct a concrete instance of `ModelDefinitionModelOptionsInput` via:
//
//	ModelDefinitionModelOptionsArgs{...}
type ModelDefinitionModelOptionsInput interface {
	pulumi.Input

	ToModelDefinitionModelOptionsOutput() ModelDefinitionModelOptionsOutput
	ToModelDefinitionModelOptionsOutputWithContext(context.Context) ModelDefinitionModelOptionsOutput
}

// Deprecated.
type ModelDefinitionModelOptionsArgs struct {
	Labels    pulumi.StringArrayInput `pulumi:"labels"`
	LossType  pulumi.StringPtrInput   `pulumi:"lossType"`
	ModelType pulumi.StringPtrInput   `pulumi:"modelType"`
}

func (ModelDefinitionModelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionModelOptions)(nil)).Elem()
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsOutput() ModelDefinitionModelOptionsOutput {
	return i.ToModelDefinitionModelOptionsOutputWithContext(context.Background())
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionModelOptionsOutput)
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return i.ToModelDefinitionModelOptionsPtrOutputWithContext(context.Background())
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionModelOptionsOutput).ToModelDefinitionModelOptionsPtrOutputWithContext(ctx)
}

// ModelDefinitionModelOptionsPtrInput is an input type that accepts ModelDefinitionModelOptionsArgs, ModelDefinitionModelOptionsPtr and ModelDefinitionModelOptionsPtrOutput values.
// You can construct a concrete instance of `ModelDefinitionModelOptionsPtrInput` via:
//
//	        ModelDefinitionModelOptionsArgs{...}
//
//	or:
//
//	        nil
type ModelDefinitionModelOptionsPtrInput interface {
	pulumi.Input

	ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput
	ToModelDefinitionModelOptionsPtrOutputWithContext(context.Context) ModelDefinitionModelOptionsPtrOutput
}

type modelDefinitionModelOptionsPtrType ModelDefinitionModelOptionsArgs

func ModelDefinitionModelOptionsPtr(v *ModelDefinitionModelOptionsArgs) ModelDefinitionModelOptionsPtrInput {
	return (*modelDefinitionModelOptionsPtrType)(v)
}

func (*modelDefinitionModelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinitionModelOptions)(nil)).Elem()
}

func (i *modelDefinitionModelOptionsPtrType) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return i.ToModelDefinitionModelOptionsPtrOutputWithContext(context.Background())
}

func (i *modelDefinitionModelOptionsPtrType) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionModelOptionsPtrOutput)
}

// Deprecated.
type ModelDefinitionModelOptionsOutput struct{ *pulumi.OutputState }

func (ModelDefinitionModelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionModelOptions)(nil)).Elem()
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsOutput() ModelDefinitionModelOptionsOutput {
	return o
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsOutput {
	return o
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return o.ToModelDefinitionModelOptionsPtrOutputWithContext(context.Background())
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelDefinitionModelOptions) *ModelDefinitionModelOptions {
		return &v
	}).(ModelDefinitionModelOptionsPtrOutput)
}

func (o ModelDefinitionModelOptionsOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptions) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o ModelDefinitionModelOptionsOutput) LossType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptions) *string { return v.LossType }).(pulumi.StringPtrOutput)
}

func (o ModelDefinitionModelOptionsOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptions) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

type ModelDefinitionModelOptionsPtrOutput struct{ *pulumi.OutputState }

func (ModelDefinitionModelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinitionModelOptions)(nil)).Elem()
}

func (o ModelDefinitionModelOptionsPtrOutput) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return o
}

func (o ModelDefinitionModelOptionsPtrOutput) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return o
}

func (o ModelDefinitionModelOptionsPtrOutput) Elem() ModelDefinitionModelOptionsOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) ModelDefinitionModelOptions {
		if v != nil {
			return *v
		}
		var ret ModelDefinitionModelOptions
		return ret
	}).(ModelDefinitionModelOptionsOutput)
}

func (o ModelDefinitionModelOptionsPtrOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) []string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringArrayOutput)
}

func (o ModelDefinitionModelOptionsPtrOutput) LossType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) *string {
		if v == nil {
			return nil
		}
		return v.LossType
	}).(pulumi.StringPtrOutput)
}

func (o ModelDefinitionModelOptionsPtrOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) *string {
		if v == nil {
			return nil
		}
		return v.ModelType
	}).(pulumi.StringPtrOutput)
}

// Deprecated.
type ModelDefinitionModelOptionsResponse struct {
	Labels    []string `pulumi:"labels"`
	LossType  string   `pulumi:"lossType"`
	ModelType string   `pulumi:"modelType"`
}

// Deprecated.
type ModelDefinitionModelOptionsResponseOutput struct{ *pulumi.OutputState }

func (ModelDefinitionModelOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionModelOptionsResponse)(nil)).Elem()
}

func (o ModelDefinitionModelOptionsResponseOutput) ToModelDefinitionModelOptionsResponseOutput() ModelDefinitionModelOptionsResponseOutput {
	return o
}

func (o ModelDefinitionModelOptionsResponseOutput) ToModelDefinitionModelOptionsResponseOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsResponseOutput {
	return o
}

func (o ModelDefinitionModelOptionsResponseOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptionsResponse) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o ModelDefinitionModelOptionsResponseOutput) LossType() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptionsResponse) string { return v.LossType }).(pulumi.StringOutput)
}

func (o ModelDefinitionModelOptionsResponseOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptionsResponse) string { return v.ModelType }).(pulumi.StringOutput)
}

type ModelDefinitionResponse struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	ModelOptions ModelDefinitionModelOptionsResponse `pulumi:"modelOptions"`
	// Deprecated.
	//
	// Deprecated: Deprecated.
	TrainingRuns []BqmlTrainingRunResponse `pulumi:"trainingRuns"`
}

type ModelDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ModelDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionResponse)(nil)).Elem()
}

func (o ModelDefinitionResponseOutput) ToModelDefinitionResponseOutput() ModelDefinitionResponseOutput {
	return o
}

func (o ModelDefinitionResponseOutput) ToModelDefinitionResponseOutputWithContext(ctx context.Context) ModelDefinitionResponseOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o ModelDefinitionResponseOutput) ModelOptions() ModelDefinitionModelOptionsResponseOutput {
	return o.ApplyT(func(v ModelDefinitionResponse) ModelDefinitionModelOptionsResponse { return v.ModelOptions }).(ModelDefinitionModelOptionsResponseOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o ModelDefinitionResponseOutput) TrainingRuns() BqmlTrainingRunResponseArrayOutput {
	return o.ApplyT(func(v ModelDefinitionResponse) []BqmlTrainingRunResponse { return v.TrainingRuns }).(BqmlTrainingRunResponseArrayOutput)
}

// Options related to model extraction.
type ModelExtractOptions struct {
	// The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning.
	TrialId *string `pulumi:"trialId"`
}

// ModelExtractOptionsInput is an input type that accepts ModelExtractOptionsArgs and ModelExtractOptionsOutput values.
// You can construct a concrete instance of `ModelExtractOptionsInput` via:
//
//	ModelExtractOptionsArgs{...}
type ModelExtractOptionsInput interface {
	pulumi.Input

	ToModelExtractOptionsOutput() ModelExtractOptionsOutput
	ToModelExtractOptionsOutputWithContext(context.Context) ModelExtractOptionsOutput
}

// Options related to model extraction.
type ModelExtractOptionsArgs struct {
	// The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning.
	TrialId pulumi.StringPtrInput `pulumi:"trialId"`
}

func (ModelExtractOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelExtractOptions)(nil)).Elem()
}

func (i ModelExtractOptionsArgs) ToModelExtractOptionsOutput() ModelExtractOptionsOutput {
	return i.ToModelExtractOptionsOutputWithContext(context.Background())
}

func (i ModelExtractOptionsArgs) ToModelExtractOptionsOutputWithContext(ctx context.Context) ModelExtractOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelExtractOptionsOutput)
}

func (i ModelExtractOptionsArgs) ToModelExtractOptionsPtrOutput() ModelExtractOptionsPtrOutput {
	return i.ToModelExtractOptionsPtrOutputWithContext(context.Background())
}

func (i ModelExtractOptionsArgs) ToModelExtractOptionsPtrOutputWithContext(ctx context.Context) ModelExtractOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelExtractOptionsOutput).ToModelExtractOptionsPtrOutputWithContext(ctx)
}

// ModelExtractOptionsPtrInput is an input type that accepts ModelExtractOptionsArgs, ModelExtractOptionsPtr and ModelExtractOptionsPtrOutput values.
// You can construct a concrete instance of `ModelExtractOptionsPtrInput` via:
//
//	        ModelExtractOptionsArgs{...}
//
//	or:
//
//	        nil
type ModelExtractOptionsPtrInput interface {
	pulumi.Input

	ToModelExtractOptionsPtrOutput() ModelExtractOptionsPtrOutput
	ToModelExtractOptionsPtrOutputWithContext(context.Context) ModelExtractOptionsPtrOutput
}

type modelExtractOptionsPtrType ModelExtractOptionsArgs

func ModelExtractOptionsPtr(v *ModelExtractOptionsArgs) ModelExtractOptionsPtrInput {
	return (*modelExtractOptionsPtrType)(v)
}

func (*modelExtractOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelExtractOptions)(nil)).Elem()
}

func (i *modelExtractOptionsPtrType) ToModelExtractOptionsPtrOutput() ModelExtractOptionsPtrOutput {
	return i.ToModelExtractOptionsPtrOutputWithContext(context.Background())
}

func (i *modelExtractOptionsPtrType) ToModelExtractOptionsPtrOutputWithContext(ctx context.Context) ModelExtractOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelExtractOptionsPtrOutput)
}

// Options related to model extraction.
type ModelExtractOptionsOutput struct{ *pulumi.OutputState }

func (ModelExtractOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelExtractOptions)(nil)).Elem()
}

func (o ModelExtractOptionsOutput) ToModelExtractOptionsOutput() ModelExtractOptionsOutput {
	return o
}

func (o ModelExtractOptionsOutput) ToModelExtractOptionsOutputWithContext(ctx context.Context) ModelExtractOptionsOutput {
	return o
}

func (o ModelExtractOptionsOutput) ToModelExtractOptionsPtrOutput() ModelExtractOptionsPtrOutput {
	return o.ToModelExtractOptionsPtrOutputWithContext(context.Background())
}

func (o ModelExtractOptionsOutput) ToModelExtractOptionsPtrOutputWithContext(ctx context.Context) ModelExtractOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelExtractOptions) *ModelExtractOptions {
		return &v
	}).(ModelExtractOptionsPtrOutput)
}

// The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning.
func (o ModelExtractOptionsOutput) TrialId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelExtractOptions) *string { return v.TrialId }).(pulumi.StringPtrOutput)
}

type ModelExtractOptionsPtrOutput struct{ *pulumi.OutputState }

func (ModelExtractOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelExtractOptions)(nil)).Elem()
}

func (o ModelExtractOptionsPtrOutput) ToModelExtractOptionsPtrOutput() ModelExtractOptionsPtrOutput {
	return o
}

func (o ModelExtractOptionsPtrOutput) ToModelExtractOptionsPtrOutputWithContext(ctx context.Context) ModelExtractOptionsPtrOutput {
	return o
}

func (o ModelExtractOptionsPtrOutput) Elem() ModelExtractOptionsOutput {
	return o.ApplyT(func(v *ModelExtractOptions) ModelExtractOptions {
		if v != nil {
			return *v
		}
		var ret ModelExtractOptions
		return ret
	}).(ModelExtractOptionsOutput)
}

// The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning.
func (o ModelExtractOptionsPtrOutput) TrialId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelExtractOptions) *string {
		if v == nil {
			return nil
		}
		return v.TrialId
	}).(pulumi.StringPtrOutput)
}

// Options related to model extraction.
type ModelExtractOptionsResponse struct {
	// The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning.
	TrialId string `pulumi:"trialId"`
}

// Options related to model extraction.
type ModelExtractOptionsResponseOutput struct{ *pulumi.OutputState }

func (ModelExtractOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelExtractOptionsResponse)(nil)).Elem()
}

func (o ModelExtractOptionsResponseOutput) ToModelExtractOptionsResponseOutput() ModelExtractOptionsResponseOutput {
	return o
}

func (o ModelExtractOptionsResponseOutput) ToModelExtractOptionsResponseOutputWithContext(ctx context.Context) ModelExtractOptionsResponseOutput {
	return o
}

// The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning.
func (o ModelExtractOptionsResponseOutput) TrialId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelExtractOptionsResponse) string { return v.TrialId }).(pulumi.StringOutput)
}

// Id path of a model.
type ModelReference struct {
	// The ID of the dataset containing this model.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId string `pulumi:"modelId"`
	// The ID of the project containing this model.
	Project string `pulumi:"project"`
}

// ModelReferenceInput is an input type that accepts ModelReferenceArgs and ModelReferenceOutput values.
// You can construct a concrete instance of `ModelReferenceInput` via:
//
//	ModelReferenceArgs{...}
type ModelReferenceInput interface {
	pulumi.Input

	ToModelReferenceOutput() ModelReferenceOutput
	ToModelReferenceOutputWithContext(context.Context) ModelReferenceOutput
}

// Id path of a model.
type ModelReferenceArgs struct {
	// The ID of the dataset containing this model.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId pulumi.StringInput `pulumi:"modelId"`
	// The ID of the project containing this model.
	Project pulumi.StringInput `pulumi:"project"`
}

func (ModelReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReference)(nil)).Elem()
}

func (i ModelReferenceArgs) ToModelReferenceOutput() ModelReferenceOutput {
	return i.ToModelReferenceOutputWithContext(context.Background())
}

func (i ModelReferenceArgs) ToModelReferenceOutputWithContext(ctx context.Context) ModelReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferenceOutput)
}

func (i ModelReferenceArgs) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return i.ToModelReferencePtrOutputWithContext(context.Background())
}

func (i ModelReferenceArgs) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferenceOutput).ToModelReferencePtrOutputWithContext(ctx)
}

// ModelReferencePtrInput is an input type that accepts ModelReferenceArgs, ModelReferencePtr and ModelReferencePtrOutput values.
// You can construct a concrete instance of `ModelReferencePtrInput` via:
//
//	        ModelReferenceArgs{...}
//
//	or:
//
//	        nil
type ModelReferencePtrInput interface {
	pulumi.Input

	ToModelReferencePtrOutput() ModelReferencePtrOutput
	ToModelReferencePtrOutputWithContext(context.Context) ModelReferencePtrOutput
}

type modelReferencePtrType ModelReferenceArgs

func ModelReferencePtr(v *ModelReferenceArgs) ModelReferencePtrInput {
	return (*modelReferencePtrType)(v)
}

func (*modelReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelReference)(nil)).Elem()
}

func (i *modelReferencePtrType) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return i.ToModelReferencePtrOutputWithContext(context.Background())
}

func (i *modelReferencePtrType) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferencePtrOutput)
}

// Id path of a model.
type ModelReferenceOutput struct{ *pulumi.OutputState }

func (ModelReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReference)(nil)).Elem()
}

func (o ModelReferenceOutput) ToModelReferenceOutput() ModelReferenceOutput {
	return o
}

func (o ModelReferenceOutput) ToModelReferenceOutputWithContext(ctx context.Context) ModelReferenceOutput {
	return o
}

func (o ModelReferenceOutput) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return o.ToModelReferencePtrOutputWithContext(context.Background())
}

func (o ModelReferenceOutput) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelReference) *ModelReference {
		return &v
	}).(ModelReferencePtrOutput)
}

// The ID of the dataset containing this model.
func (o ModelReferenceOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReference) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferenceOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReference) string { return v.ModelId }).(pulumi.StringOutput)
}

// The ID of the project containing this model.
func (o ModelReferenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReference) string { return v.Project }).(pulumi.StringOutput)
}

type ModelReferencePtrOutput struct{ *pulumi.OutputState }

func (ModelReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelReference)(nil)).Elem()
}

func (o ModelReferencePtrOutput) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return o
}

func (o ModelReferencePtrOutput) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return o
}

func (o ModelReferencePtrOutput) Elem() ModelReferenceOutput {
	return o.ApplyT(func(v *ModelReference) ModelReference {
		if v != nil {
			return *v
		}
		var ret ModelReference
		return ret
	}).(ModelReferenceOutput)
}

// The ID of the dataset containing this model.
func (o ModelReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferencePtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return &v.ModelId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this model.
func (o ModelReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// Id path of a model.
type ModelReferenceResponse struct {
	// The ID of the dataset containing this model.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId string `pulumi:"modelId"`
	// The ID of the project containing this model.
	Project string `pulumi:"project"`
}

// Id path of a model.
type ModelReferenceResponseOutput struct{ *pulumi.OutputState }

func (ModelReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReferenceResponse)(nil)).Elem()
}

func (o ModelReferenceResponseOutput) ToModelReferenceResponseOutput() ModelReferenceResponseOutput {
	return o
}

func (o ModelReferenceResponseOutput) ToModelReferenceResponseOutputWithContext(ctx context.Context) ModelReferenceResponseOutput {
	return o
}

// The ID of the dataset containing this model.
func (o ModelReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferenceResponseOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReferenceResponse) string { return v.ModelId }).(pulumi.StringOutput)
}

// The ID of the project containing this model.
func (o ModelReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Evaluation metrics for multi-class classification/classifier models.
type MultiClassClassificationMetricsResponse struct {
	// Aggregate classification metrics.
	AggregateClassificationMetrics AggregateClassificationMetricsResponse `pulumi:"aggregateClassificationMetrics"`
	// Confusion matrix at different thresholds.
	ConfusionMatrixList []ConfusionMatrixResponse `pulumi:"confusionMatrixList"`
}

// Evaluation metrics for multi-class classification/classifier models.
type MultiClassClassificationMetricsResponseOutput struct{ *pulumi.OutputState }

func (MultiClassClassificationMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClassClassificationMetricsResponse)(nil)).Elem()
}

func (o MultiClassClassificationMetricsResponseOutput) ToMultiClassClassificationMetricsResponseOutput() MultiClassClassificationMetricsResponseOutput {
	return o
}

func (o MultiClassClassificationMetricsResponseOutput) ToMultiClassClassificationMetricsResponseOutputWithContext(ctx context.Context) MultiClassClassificationMetricsResponseOutput {
	return o
}

// Aggregate classification metrics.
func (o MultiClassClassificationMetricsResponseOutput) AggregateClassificationMetrics() AggregateClassificationMetricsResponseOutput {
	return o.ApplyT(func(v MultiClassClassificationMetricsResponse) AggregateClassificationMetricsResponse {
		return v.AggregateClassificationMetrics
	}).(AggregateClassificationMetricsResponseOutput)
}

// Confusion matrix at different thresholds.
func (o MultiClassClassificationMetricsResponseOutput) ConfusionMatrixList() ConfusionMatrixResponseArrayOutput {
	return o.ApplyT(func(v MultiClassClassificationMetricsResponse) []ConfusionMatrixResponse {
		return v.ConfusionMatrixList
	}).(ConfusionMatrixResponseArrayOutput)
}

// Parquet Options for load and make external tables.
type ParquetOptions struct {
	// Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference *bool `pulumi:"enableListInference"`
	// Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString *bool `pulumi:"enumAsString"`
}

// ParquetOptionsInput is an input type that accepts ParquetOptionsArgs and ParquetOptionsOutput values.
// You can construct a concrete instance of `ParquetOptionsInput` via:
//
//	ParquetOptionsArgs{...}
type ParquetOptionsInput interface {
	pulumi.Input

	ToParquetOptionsOutput() ParquetOptionsOutput
	ToParquetOptionsOutputWithContext(context.Context) ParquetOptionsOutput
}

// Parquet Options for load and make external tables.
type ParquetOptionsArgs struct {
	// Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference pulumi.BoolPtrInput `pulumi:"enableListInference"`
	// Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString pulumi.BoolPtrInput `pulumi:"enumAsString"`
}

func (ParquetOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptions)(nil)).Elem()
}

func (i ParquetOptionsArgs) ToParquetOptionsOutput() ParquetOptionsOutput {
	return i.ToParquetOptionsOutputWithContext(context.Background())
}

func (i ParquetOptionsArgs) ToParquetOptionsOutputWithContext(ctx context.Context) ParquetOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsOutput)
}

func (i ParquetOptionsArgs) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return i.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (i ParquetOptionsArgs) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsOutput).ToParquetOptionsPtrOutputWithContext(ctx)
}

// ParquetOptionsPtrInput is an input type that accepts ParquetOptionsArgs, ParquetOptionsPtr and ParquetOptionsPtrOutput values.
// You can construct a concrete instance of `ParquetOptionsPtrInput` via:
//
//	        ParquetOptionsArgs{...}
//
//	or:
//
//	        nil
type ParquetOptionsPtrInput interface {
	pulumi.Input

	ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput
	ToParquetOptionsPtrOutputWithContext(context.Context) ParquetOptionsPtrOutput
}

type parquetOptionsPtrType ParquetOptionsArgs

func ParquetOptionsPtr(v *ParquetOptionsArgs) ParquetOptionsPtrInput {
	return (*parquetOptionsPtrType)(v)
}

func (*parquetOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetOptions)(nil)).Elem()
}

func (i *parquetOptionsPtrType) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return i.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (i *parquetOptionsPtrType) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsPtrOutput)
}

// Parquet Options for load and make external tables.
type ParquetOptionsOutput struct{ *pulumi.OutputState }

func (ParquetOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptions)(nil)).Elem()
}

func (o ParquetOptionsOutput) ToParquetOptionsOutput() ParquetOptionsOutput {
	return o
}

func (o ParquetOptionsOutput) ToParquetOptionsOutputWithContext(ctx context.Context) ParquetOptionsOutput {
	return o
}

func (o ParquetOptionsOutput) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return o.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (o ParquetOptionsOutput) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParquetOptions) *ParquetOptions {
		return &v
	}).(ParquetOptionsPtrOutput)
}

// Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsOutput) EnableListInference() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParquetOptions) *bool { return v.EnableListInference }).(pulumi.BoolPtrOutput)
}

// Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsOutput) EnumAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParquetOptions) *bool { return v.EnumAsString }).(pulumi.BoolPtrOutput)
}

type ParquetOptionsPtrOutput struct{ *pulumi.OutputState }

func (ParquetOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetOptions)(nil)).Elem()
}

func (o ParquetOptionsPtrOutput) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return o
}

func (o ParquetOptionsPtrOutput) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return o
}

func (o ParquetOptionsPtrOutput) Elem() ParquetOptionsOutput {
	return o.ApplyT(func(v *ParquetOptions) ParquetOptions {
		if v != nil {
			return *v
		}
		var ret ParquetOptions
		return ret
	}).(ParquetOptionsOutput)
}

// Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsPtrOutput) EnableListInference() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParquetOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableListInference
	}).(pulumi.BoolPtrOutput)
}

// Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsPtrOutput) EnumAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParquetOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnumAsString
	}).(pulumi.BoolPtrOutput)
}

// Parquet Options for load and make external tables.
type ParquetOptionsResponse struct {
	// Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference bool `pulumi:"enableListInference"`
	// Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString bool `pulumi:"enumAsString"`
}

// Parquet Options for load and make external tables.
type ParquetOptionsResponseOutput struct{ *pulumi.OutputState }

func (ParquetOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptionsResponse)(nil)).Elem()
}

func (o ParquetOptionsResponseOutput) ToParquetOptionsResponseOutput() ParquetOptionsResponseOutput {
	return o
}

func (o ParquetOptionsResponseOutput) ToParquetOptionsResponseOutputWithContext(ctx context.Context) ParquetOptionsResponseOutput {
	return o
}

// Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsResponseOutput) EnableListInference() pulumi.BoolOutput {
	return o.ApplyT(func(v ParquetOptionsResponse) bool { return v.EnableListInference }).(pulumi.BoolOutput)
}

// Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsResponseOutput) EnumAsString() pulumi.BoolOutput {
	return o.ApplyT(func(v ParquetOptionsResponse) bool { return v.EnumAsString }).(pulumi.BoolOutput)
}

// The partitioning column information.
type PartitionedColumnResponse struct {
	// The name of the partition column.
	Field string `pulumi:"field"`
}

// The partitioning column information.
type PartitionedColumnResponseOutput struct{ *pulumi.OutputState }

func (PartitionedColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitionedColumnResponse)(nil)).Elem()
}

func (o PartitionedColumnResponseOutput) ToPartitionedColumnResponseOutput() PartitionedColumnResponseOutput {
	return o
}

func (o PartitionedColumnResponseOutput) ToPartitionedColumnResponseOutputWithContext(ctx context.Context) PartitionedColumnResponseOutput {
	return o
}

// The name of the partition column.
func (o PartitionedColumnResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v PartitionedColumnResponse) string { return v.Field }).(pulumi.StringOutput)
}

type PartitionedColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (PartitionedColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PartitionedColumnResponse)(nil)).Elem()
}

func (o PartitionedColumnResponseArrayOutput) ToPartitionedColumnResponseArrayOutput() PartitionedColumnResponseArrayOutput {
	return o
}

func (o PartitionedColumnResponseArrayOutput) ToPartitionedColumnResponseArrayOutputWithContext(ctx context.Context) PartitionedColumnResponseArrayOutput {
	return o
}

func (o PartitionedColumnResponseArrayOutput) Index(i pulumi.IntInput) PartitionedColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PartitionedColumnResponse {
		return vs[0].([]PartitionedColumnResponse)[vs[1].(int)]
	}).(PartitionedColumnResponseOutput)
}

// The partitioning information, which includes managed table and external table partition information.
type PartitioningDefinitionResponse struct {
	// Details about each partitioning column. BigQuery native tables only support 1 partitioning column. Other table types may support 0, 1 or more partitioning columns.
	PartitionedColumn []PartitionedColumnResponse `pulumi:"partitionedColumn"`
}

// The partitioning information, which includes managed table and external table partition information.
type PartitioningDefinitionResponseOutput struct{ *pulumi.OutputState }

func (PartitioningDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PartitioningDefinitionResponse)(nil)).Elem()
}

func (o PartitioningDefinitionResponseOutput) ToPartitioningDefinitionResponseOutput() PartitioningDefinitionResponseOutput {
	return o
}

func (o PartitioningDefinitionResponseOutput) ToPartitioningDefinitionResponseOutputWithContext(ctx context.Context) PartitioningDefinitionResponseOutput {
	return o
}

// Details about each partitioning column. BigQuery native tables only support 1 partitioning column. Other table types may support 0, 1 or more partitioning columns.
func (o PartitioningDefinitionResponseOutput) PartitionedColumn() PartitionedColumnResponseArrayOutput {
	return o.ApplyT(func(v PartitioningDefinitionResponse) []PartitionedColumnResponse { return v.PartitionedColumn }).(PartitionedColumnResponseArrayOutput)
}

// Performance insights for the job.
type PerformanceInsightsResponse struct {
	// Average execution ms of previous runs. Indicates the job ran slow compared to previous executions. To find previous executions, use INFORMATION_SCHEMA tables and filter jobs with same query hash.
	AvgPreviousExecutionMs string `pulumi:"avgPreviousExecutionMs"`
	// Query stage performance insights compared to previous runs, for diagnosing performance regression.
	StagePerformanceChangeInsights []StagePerformanceChangeInsightResponse `pulumi:"stagePerformanceChangeInsights"`
	// Standalone query stage performance insights, for exploring potential improvements.
	StagePerformanceStandaloneInsights []StagePerformanceStandaloneInsightResponse `pulumi:"stagePerformanceStandaloneInsights"`
}

// Performance insights for the job.
type PerformanceInsightsResponseOutput struct{ *pulumi.OutputState }

func (PerformanceInsightsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PerformanceInsightsResponse)(nil)).Elem()
}

func (o PerformanceInsightsResponseOutput) ToPerformanceInsightsResponseOutput() PerformanceInsightsResponseOutput {
	return o
}

func (o PerformanceInsightsResponseOutput) ToPerformanceInsightsResponseOutputWithContext(ctx context.Context) PerformanceInsightsResponseOutput {
	return o
}

// Average execution ms of previous runs. Indicates the job ran slow compared to previous executions. To find previous executions, use INFORMATION_SCHEMA tables and filter jobs with same query hash.
func (o PerformanceInsightsResponseOutput) AvgPreviousExecutionMs() pulumi.StringOutput {
	return o.ApplyT(func(v PerformanceInsightsResponse) string { return v.AvgPreviousExecutionMs }).(pulumi.StringOutput)
}

// Query stage performance insights compared to previous runs, for diagnosing performance regression.
func (o PerformanceInsightsResponseOutput) StagePerformanceChangeInsights() StagePerformanceChangeInsightResponseArrayOutput {
	return o.ApplyT(func(v PerformanceInsightsResponse) []StagePerformanceChangeInsightResponse {
		return v.StagePerformanceChangeInsights
	}).(StagePerformanceChangeInsightResponseArrayOutput)
}

// Standalone query stage performance insights, for exploring potential improvements.
func (o PerformanceInsightsResponseOutput) StagePerformanceStandaloneInsights() StagePerformanceStandaloneInsightResponseArrayOutput {
	return o.ApplyT(func(v PerformanceInsightsResponse) []StagePerformanceStandaloneInsightResponse {
		return v.StagePerformanceStandaloneInsights
	}).(StagePerformanceStandaloneInsightResponseArrayOutput)
}

// Principal component infos, used only for eigen decomposition based models, e.g., PCA. Ordered by explained_variance in the descending order.
type PrincipalComponentInfoResponse struct {
	// The explained_variance is pre-ordered in the descending order to compute the cumulative explained variance ratio.
	CumulativeExplainedVarianceRatio float64 `pulumi:"cumulativeExplainedVarianceRatio"`
	// Explained variance by this principal component, which is simply the eigenvalue.
	ExplainedVariance float64 `pulumi:"explainedVariance"`
	// Explained_variance over the total explained variance.
	ExplainedVarianceRatio float64 `pulumi:"explainedVarianceRatio"`
	// Id of the principal component.
	PrincipalComponentId string `pulumi:"principalComponentId"`
}

// Principal component infos, used only for eigen decomposition based models, e.g., PCA. Ordered by explained_variance in the descending order.
type PrincipalComponentInfoResponseOutput struct{ *pulumi.OutputState }

func (PrincipalComponentInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrincipalComponentInfoResponse)(nil)).Elem()
}

func (o PrincipalComponentInfoResponseOutput) ToPrincipalComponentInfoResponseOutput() PrincipalComponentInfoResponseOutput {
	return o
}

func (o PrincipalComponentInfoResponseOutput) ToPrincipalComponentInfoResponseOutputWithContext(ctx context.Context) PrincipalComponentInfoResponseOutput {
	return o
}

// The explained_variance is pre-ordered in the descending order to compute the cumulative explained variance ratio.
func (o PrincipalComponentInfoResponseOutput) CumulativeExplainedVarianceRatio() pulumi.Float64Output {
	return o.ApplyT(func(v PrincipalComponentInfoResponse) float64 { return v.CumulativeExplainedVarianceRatio }).(pulumi.Float64Output)
}

// Explained variance by this principal component, which is simply the eigenvalue.
func (o PrincipalComponentInfoResponseOutput) ExplainedVariance() pulumi.Float64Output {
	return o.ApplyT(func(v PrincipalComponentInfoResponse) float64 { return v.ExplainedVariance }).(pulumi.Float64Output)
}

// Explained_variance over the total explained variance.
func (o PrincipalComponentInfoResponseOutput) ExplainedVarianceRatio() pulumi.Float64Output {
	return o.ApplyT(func(v PrincipalComponentInfoResponse) float64 { return v.ExplainedVarianceRatio }).(pulumi.Float64Output)
}

// Id of the principal component.
func (o PrincipalComponentInfoResponseOutput) PrincipalComponentId() pulumi.StringOutput {
	return o.ApplyT(func(v PrincipalComponentInfoResponse) string { return v.PrincipalComponentId }).(pulumi.StringOutput)
}

type PrincipalComponentInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (PrincipalComponentInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrincipalComponentInfoResponse)(nil)).Elem()
}

func (o PrincipalComponentInfoResponseArrayOutput) ToPrincipalComponentInfoResponseArrayOutput() PrincipalComponentInfoResponseArrayOutput {
	return o
}

func (o PrincipalComponentInfoResponseArrayOutput) ToPrincipalComponentInfoResponseArrayOutputWithContext(ctx context.Context) PrincipalComponentInfoResponseArrayOutput {
	return o
}

func (o PrincipalComponentInfoResponseArrayOutput) Index(i pulumi.IntInput) PrincipalComponentInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrincipalComponentInfoResponse {
		return vs[0].([]PrincipalComponentInfoResponse)[vs[1].(int)]
	}).(PrincipalComponentInfoResponseOutput)
}

// Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.
type PrivacyPolicy struct {
	// Optional. Policy used for aggregation thresholds.
	AggregationThresholdPolicy *AggregationThresholdPolicy `pulumi:"aggregationThresholdPolicy"`
}

// PrivacyPolicyInput is an input type that accepts PrivacyPolicyArgs and PrivacyPolicyOutput values.
// You can construct a concrete instance of `PrivacyPolicyInput` via:
//
//	PrivacyPolicyArgs{...}
type PrivacyPolicyInput interface {
	pulumi.Input

	ToPrivacyPolicyOutput() PrivacyPolicyOutput
	ToPrivacyPolicyOutputWithContext(context.Context) PrivacyPolicyOutput
}

// Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.
type PrivacyPolicyArgs struct {
	// Optional. Policy used for aggregation thresholds.
	AggregationThresholdPolicy AggregationThresholdPolicyPtrInput `pulumi:"aggregationThresholdPolicy"`
}

func (PrivacyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivacyPolicy)(nil)).Elem()
}

func (i PrivacyPolicyArgs) ToPrivacyPolicyOutput() PrivacyPolicyOutput {
	return i.ToPrivacyPolicyOutputWithContext(context.Background())
}

func (i PrivacyPolicyArgs) ToPrivacyPolicyOutputWithContext(ctx context.Context) PrivacyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivacyPolicyOutput)
}

func (i PrivacyPolicyArgs) ToPrivacyPolicyPtrOutput() PrivacyPolicyPtrOutput {
	return i.ToPrivacyPolicyPtrOutputWithContext(context.Background())
}

func (i PrivacyPolicyArgs) ToPrivacyPolicyPtrOutputWithContext(ctx context.Context) PrivacyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivacyPolicyOutput).ToPrivacyPolicyPtrOutputWithContext(ctx)
}

// PrivacyPolicyPtrInput is an input type that accepts PrivacyPolicyArgs, PrivacyPolicyPtr and PrivacyPolicyPtrOutput values.
// You can construct a concrete instance of `PrivacyPolicyPtrInput` via:
//
//	        PrivacyPolicyArgs{...}
//
//	or:
//
//	        nil
type PrivacyPolicyPtrInput interface {
	pulumi.Input

	ToPrivacyPolicyPtrOutput() PrivacyPolicyPtrOutput
	ToPrivacyPolicyPtrOutputWithContext(context.Context) PrivacyPolicyPtrOutput
}

type privacyPolicyPtrType PrivacyPolicyArgs

func PrivacyPolicyPtr(v *PrivacyPolicyArgs) PrivacyPolicyPtrInput {
	return (*privacyPolicyPtrType)(v)
}

func (*privacyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivacyPolicy)(nil)).Elem()
}

func (i *privacyPolicyPtrType) ToPrivacyPolicyPtrOutput() PrivacyPolicyPtrOutput {
	return i.ToPrivacyPolicyPtrOutputWithContext(context.Background())
}

func (i *privacyPolicyPtrType) ToPrivacyPolicyPtrOutputWithContext(ctx context.Context) PrivacyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivacyPolicyPtrOutput)
}

// Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.
type PrivacyPolicyOutput struct{ *pulumi.OutputState }

func (PrivacyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivacyPolicy)(nil)).Elem()
}

func (o PrivacyPolicyOutput) ToPrivacyPolicyOutput() PrivacyPolicyOutput {
	return o
}

func (o PrivacyPolicyOutput) ToPrivacyPolicyOutputWithContext(ctx context.Context) PrivacyPolicyOutput {
	return o
}

func (o PrivacyPolicyOutput) ToPrivacyPolicyPtrOutput() PrivacyPolicyPtrOutput {
	return o.ToPrivacyPolicyPtrOutputWithContext(context.Background())
}

func (o PrivacyPolicyOutput) ToPrivacyPolicyPtrOutputWithContext(ctx context.Context) PrivacyPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivacyPolicy) *PrivacyPolicy {
		return &v
	}).(PrivacyPolicyPtrOutput)
}

// Optional. Policy used for aggregation thresholds.
func (o PrivacyPolicyOutput) AggregationThresholdPolicy() AggregationThresholdPolicyPtrOutput {
	return o.ApplyT(func(v PrivacyPolicy) *AggregationThresholdPolicy { return v.AggregationThresholdPolicy }).(AggregationThresholdPolicyPtrOutput)
}

type PrivacyPolicyPtrOutput struct{ *pulumi.OutputState }

func (PrivacyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivacyPolicy)(nil)).Elem()
}

func (o PrivacyPolicyPtrOutput) ToPrivacyPolicyPtrOutput() PrivacyPolicyPtrOutput {
	return o
}

func (o PrivacyPolicyPtrOutput) ToPrivacyPolicyPtrOutputWithContext(ctx context.Context) PrivacyPolicyPtrOutput {
	return o
}

func (o PrivacyPolicyPtrOutput) Elem() PrivacyPolicyOutput {
	return o.ApplyT(func(v *PrivacyPolicy) PrivacyPolicy {
		if v != nil {
			return *v
		}
		var ret PrivacyPolicy
		return ret
	}).(PrivacyPolicyOutput)
}

// Optional. Policy used for aggregation thresholds.
func (o PrivacyPolicyPtrOutput) AggregationThresholdPolicy() AggregationThresholdPolicyPtrOutput {
	return o.ApplyT(func(v *PrivacyPolicy) *AggregationThresholdPolicy {
		if v == nil {
			return nil
		}
		return v.AggregationThresholdPolicy
	}).(AggregationThresholdPolicyPtrOutput)
}

// Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.
type PrivacyPolicyResponse struct {
	// Optional. Policy used for aggregation thresholds.
	AggregationThresholdPolicy AggregationThresholdPolicyResponse `pulumi:"aggregationThresholdPolicy"`
}

// Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.
type PrivacyPolicyResponseOutput struct{ *pulumi.OutputState }

func (PrivacyPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivacyPolicyResponse)(nil)).Elem()
}

func (o PrivacyPolicyResponseOutput) ToPrivacyPolicyResponseOutput() PrivacyPolicyResponseOutput {
	return o
}

func (o PrivacyPolicyResponseOutput) ToPrivacyPolicyResponseOutputWithContext(ctx context.Context) PrivacyPolicyResponseOutput {
	return o
}

// Optional. Policy used for aggregation thresholds.
func (o PrivacyPolicyResponseOutput) AggregationThresholdPolicy() AggregationThresholdPolicyResponseOutput {
	return o.ApplyT(func(v PrivacyPolicyResponse) AggregationThresholdPolicyResponse { return v.AggregationThresholdPolicy }).(AggregationThresholdPolicyResponseOutput)
}

// Query optimization information for a QUERY job.
type QueryInfoResponse struct {
	// Information about query optimizations.
	OptimizationDetails map[string]string `pulumi:"optimizationDetails"`
}

// Query optimization information for a QUERY job.
type QueryInfoResponseOutput struct{ *pulumi.OutputState }

func (QueryInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryInfoResponse)(nil)).Elem()
}

func (o QueryInfoResponseOutput) ToQueryInfoResponseOutput() QueryInfoResponseOutput {
	return o
}

func (o QueryInfoResponseOutput) ToQueryInfoResponseOutputWithContext(ctx context.Context) QueryInfoResponseOutput {
	return o
}

// Information about query optimizations.
func (o QueryInfoResponseOutput) OptimizationDetails() pulumi.StringMapOutput {
	return o.ApplyT(func(v QueryInfoResponse) map[string]string { return v.OptimizationDetails }).(pulumi.StringMapOutput)
}

// A parameter given to a query.
type QueryParameter struct {
	// Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name *string `pulumi:"name"`
	// The type of this parameter.
	ParameterType QueryParameterType `pulumi:"parameterType"`
	// The value of this parameter.
	ParameterValue QueryParameterValue `pulumi:"parameterValue"`
}

// QueryParameterInput is an input type that accepts QueryParameterArgs and QueryParameterOutput values.
// You can construct a concrete instance of `QueryParameterInput` via:
//
//	QueryParameterArgs{...}
type QueryParameterInput interface {
	pulumi.Input

	ToQueryParameterOutput() QueryParameterOutput
	ToQueryParameterOutputWithContext(context.Context) QueryParameterOutput
}

// A parameter given to a query.
type QueryParameterArgs struct {
	// Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of this parameter.
	ParameterType QueryParameterTypeInput `pulumi:"parameterType"`
	// The value of this parameter.
	ParameterValue QueryParameterValueInput `pulumi:"parameterValue"`
}

func (QueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameter)(nil)).Elem()
}

func (i QueryParameterArgs) ToQueryParameterOutput() QueryParameterOutput {
	return i.ToQueryParameterOutputWithContext(context.Background())
}

func (i QueryParameterArgs) ToQueryParameterOutputWithContext(ctx context.Context) QueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterOutput)
}

// QueryParameterArrayInput is an input type that accepts QueryParameterArray and QueryParameterArrayOutput values.
// You can construct a concrete instance of `QueryParameterArrayInput` via:
//
//	QueryParameterArray{ QueryParameterArgs{...} }
type QueryParameterArrayInput interface {
	pulumi.Input

	ToQueryParameterArrayOutput() QueryParameterArrayOutput
	ToQueryParameterArrayOutputWithContext(context.Context) QueryParameterArrayOutput
}

type QueryParameterArray []QueryParameterInput

func (QueryParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameter)(nil)).Elem()
}

func (i QueryParameterArray) ToQueryParameterArrayOutput() QueryParameterArrayOutput {
	return i.ToQueryParameterArrayOutputWithContext(context.Background())
}

func (i QueryParameterArray) ToQueryParameterArrayOutputWithContext(ctx context.Context) QueryParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterArrayOutput)
}

// A parameter given to a query.
type QueryParameterOutput struct{ *pulumi.OutputState }

func (QueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameter)(nil)).Elem()
}

func (o QueryParameterOutput) ToQueryParameterOutput() QueryParameterOutput {
	return o
}

func (o QueryParameterOutput) ToQueryParameterOutputWithContext(ctx context.Context) QueryParameterOutput {
	return o
}

// Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.
func (o QueryParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of this parameter.
func (o QueryParameterOutput) ParameterType() QueryParameterTypeOutput {
	return o.ApplyT(func(v QueryParameter) QueryParameterType { return v.ParameterType }).(QueryParameterTypeOutput)
}

// The value of this parameter.
func (o QueryParameterOutput) ParameterValue() QueryParameterValueOutput {
	return o.ApplyT(func(v QueryParameter) QueryParameterValue { return v.ParameterValue }).(QueryParameterValueOutput)
}

type QueryParameterArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameter)(nil)).Elem()
}

func (o QueryParameterArrayOutput) ToQueryParameterArrayOutput() QueryParameterArrayOutput {
	return o
}

func (o QueryParameterArrayOutput) ToQueryParameterArrayOutputWithContext(ctx context.Context) QueryParameterArrayOutput {
	return o
}

func (o QueryParameterArrayOutput) Index(i pulumi.IntInput) QueryParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameter {
		return vs[0].([]QueryParameter)[vs[1].(int)]
	}).(QueryParameterOutput)
}

// A parameter given to a query.
type QueryParameterResponse struct {
	// Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name string `pulumi:"name"`
	// The type of this parameter.
	ParameterType QueryParameterTypeResponse `pulumi:"parameterType"`
	// The value of this parameter.
	ParameterValue QueryParameterValueResponse `pulumi:"parameterValue"`
}

// A parameter given to a query.
type QueryParameterResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterResponse)(nil)).Elem()
}

func (o QueryParameterResponseOutput) ToQueryParameterResponseOutput() QueryParameterResponseOutput {
	return o
}

func (o QueryParameterResponseOutput) ToQueryParameterResponseOutputWithContext(ctx context.Context) QueryParameterResponseOutput {
	return o
}

// Optional. If unset, this is a positional parameter. Otherwise, should be unique within a query.
func (o QueryParameterResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of this parameter.
func (o QueryParameterResponseOutput) ParameterType() QueryParameterTypeResponseOutput {
	return o.ApplyT(func(v QueryParameterResponse) QueryParameterTypeResponse { return v.ParameterType }).(QueryParameterTypeResponseOutput)
}

// The value of this parameter.
func (o QueryParameterResponseOutput) ParameterValue() QueryParameterValueResponseOutput {
	return o.ApplyT(func(v QueryParameterResponse) QueryParameterValueResponse { return v.ParameterValue }).(QueryParameterValueResponseOutput)
}

type QueryParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterResponse)(nil)).Elem()
}

func (o QueryParameterResponseArrayOutput) ToQueryParameterResponseArrayOutput() QueryParameterResponseArrayOutput {
	return o
}

func (o QueryParameterResponseArrayOutput) ToQueryParameterResponseArrayOutputWithContext(ctx context.Context) QueryParameterResponseArrayOutput {
	return o
}

func (o QueryParameterResponseArrayOutput) Index(i pulumi.IntInput) QueryParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterResponse {
		return vs[0].([]QueryParameterResponse)[vs[1].(int)]
	}).(QueryParameterResponseOutput)
}

// The type of a query parameter.
type QueryParameterType struct {
	// Optional. The type of the array's elements, if this is an array.
	ArrayType *QueryParameterType `pulumi:"arrayType"`
	// Optional. The element type of the range, if this is a range.
	RangeElementType *QueryParameterType `pulumi:"rangeElementType"`
	// Optional. The types of the fields of this struct, in order, if this is a struct.
	StructTypes []QueryParameterTypeStructTypesItem `pulumi:"structTypes"`
	// The top level type of this field.
	Type string `pulumi:"type"`
}

// QueryParameterTypeInput is an input type that accepts QueryParameterTypeArgs and QueryParameterTypeOutput values.
// You can construct a concrete instance of `QueryParameterTypeInput` via:
//
//	QueryParameterTypeArgs{...}
type QueryParameterTypeInput interface {
	pulumi.Input

	ToQueryParameterTypeOutput() QueryParameterTypeOutput
	ToQueryParameterTypeOutputWithContext(context.Context) QueryParameterTypeOutput
}

// The type of a query parameter.
type QueryParameterTypeArgs struct {
	// Optional. The type of the array's elements, if this is an array.
	ArrayType QueryParameterTypePtrInput `pulumi:"arrayType"`
	// Optional. The element type of the range, if this is a range.
	RangeElementType QueryParameterTypePtrInput `pulumi:"rangeElementType"`
	// Optional. The types of the fields of this struct, in order, if this is a struct.
	StructTypes QueryParameterTypeStructTypesItemArrayInput `pulumi:"structTypes"`
	// The top level type of this field.
	Type pulumi.StringInput `pulumi:"type"`
}

func (QueryParameterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterType)(nil)).Elem()
}

func (i QueryParameterTypeArgs) ToQueryParameterTypeOutput() QueryParameterTypeOutput {
	return i.ToQueryParameterTypeOutputWithContext(context.Background())
}

func (i QueryParameterTypeArgs) ToQueryParameterTypeOutputWithContext(ctx context.Context) QueryParameterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeOutput)
}

func (i QueryParameterTypeArgs) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return i.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (i QueryParameterTypeArgs) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeOutput).ToQueryParameterTypePtrOutputWithContext(ctx)
}

// QueryParameterTypePtrInput is an input type that accepts QueryParameterTypeArgs, QueryParameterTypePtr and QueryParameterTypePtrOutput values.
// You can construct a concrete instance of `QueryParameterTypePtrInput` via:
//
//	        QueryParameterTypeArgs{...}
//
//	or:
//
//	        nil
type QueryParameterTypePtrInput interface {
	pulumi.Input

	ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput
	ToQueryParameterTypePtrOutputWithContext(context.Context) QueryParameterTypePtrOutput
}

type queryParameterTypePtrType QueryParameterTypeArgs

func QueryParameterTypePtr(v *QueryParameterTypeArgs) QueryParameterTypePtrInput {
	return (*queryParameterTypePtrType)(v)
}

func (*queryParameterTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterType)(nil)).Elem()
}

func (i *queryParameterTypePtrType) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return i.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (i *queryParameterTypePtrType) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypePtrOutput)
}

// The type of a query parameter.
type QueryParameterTypeOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterType)(nil)).Elem()
}

func (o QueryParameterTypeOutput) ToQueryParameterTypeOutput() QueryParameterTypeOutput {
	return o
}

func (o QueryParameterTypeOutput) ToQueryParameterTypeOutputWithContext(ctx context.Context) QueryParameterTypeOutput {
	return o
}

func (o QueryParameterTypeOutput) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return o.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (o QueryParameterTypeOutput) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryParameterType) *QueryParameterType {
		return &v
	}).(QueryParameterTypePtrOutput)
}

// Optional. The type of the array's elements, if this is an array.
func (o QueryParameterTypeOutput) ArrayType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameterType) *QueryParameterType { return v.ArrayType }).(QueryParameterTypePtrOutput)
}

// Optional. The element type of the range, if this is a range.
func (o QueryParameterTypeOutput) RangeElementType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameterType) *QueryParameterType { return v.RangeElementType }).(QueryParameterTypePtrOutput)
}

// Optional. The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypeOutput) StructTypes() QueryParameterTypeStructTypesItemArrayOutput {
	return o.ApplyT(func(v QueryParameterType) []QueryParameterTypeStructTypesItem { return v.StructTypes }).(QueryParameterTypeStructTypesItemArrayOutput)
}

// The top level type of this field.
func (o QueryParameterTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterType) string { return v.Type }).(pulumi.StringOutput)
}

type QueryParameterTypePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterType)(nil)).Elem()
}

func (o QueryParameterTypePtrOutput) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return o
}

func (o QueryParameterTypePtrOutput) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return o
}

func (o QueryParameterTypePtrOutput) Elem() QueryParameterTypeOutput {
	return o.ApplyT(func(v *QueryParameterType) QueryParameterType {
		if v != nil {
			return *v
		}
		var ret QueryParameterType
		return ret
	}).(QueryParameterTypeOutput)
}

// Optional. The type of the array's elements, if this is an array.
func (o QueryParameterTypePtrOutput) ArrayType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v *QueryParameterType) *QueryParameterType {
		if v == nil {
			return nil
		}
		return v.ArrayType
	}).(QueryParameterTypePtrOutput)
}

// Optional. The element type of the range, if this is a range.
func (o QueryParameterTypePtrOutput) RangeElementType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v *QueryParameterType) *QueryParameterType {
		if v == nil {
			return nil
		}
		return v.RangeElementType
	}).(QueryParameterTypePtrOutput)
}

// Optional. The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypePtrOutput) StructTypes() QueryParameterTypeStructTypesItemArrayOutput {
	return o.ApplyT(func(v *QueryParameterType) []QueryParameterTypeStructTypesItem {
		if v == nil {
			return nil
		}
		return v.StructTypes
	}).(QueryParameterTypeStructTypesItemArrayOutput)
}

// The top level type of this field.
func (o QueryParameterTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The type of a query parameter.
type QueryParameterTypeResponse struct {
	// Optional. The type of the array's elements, if this is an array.
	ArrayType *QueryParameterTypeResponse `pulumi:"arrayType"`
	// Optional. The element type of the range, if this is a range.
	RangeElementType *QueryParameterTypeResponse `pulumi:"rangeElementType"`
	// Optional. The types of the fields of this struct, in order, if this is a struct.
	StructTypes []QueryParameterTypeStructTypesItemResponse `pulumi:"structTypes"`
	// The top level type of this field.
	Type string `pulumi:"type"`
}

// The type of a query parameter.
type QueryParameterTypeResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeResponse)(nil)).Elem()
}

func (o QueryParameterTypeResponseOutput) ToQueryParameterTypeResponseOutput() QueryParameterTypeResponseOutput {
	return o
}

func (o QueryParameterTypeResponseOutput) ToQueryParameterTypeResponseOutputWithContext(ctx context.Context) QueryParameterTypeResponseOutput {
	return o
}

// Optional. The type of the array's elements, if this is an array.
func (o QueryParameterTypeResponseOutput) ArrayType() QueryParameterTypeResponsePtrOutput {
	return o.ApplyT(func(v QueryParameterTypeResponse) *QueryParameterTypeResponse { return v.ArrayType }).(QueryParameterTypeResponsePtrOutput)
}

// Optional. The element type of the range, if this is a range.
func (o QueryParameterTypeResponseOutput) RangeElementType() QueryParameterTypeResponsePtrOutput {
	return o.ApplyT(func(v QueryParameterTypeResponse) *QueryParameterTypeResponse { return v.RangeElementType }).(QueryParameterTypeResponsePtrOutput)
}

// Optional. The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypeResponseOutput) StructTypes() QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o.ApplyT(func(v QueryParameterTypeResponse) []QueryParameterTypeStructTypesItemResponse { return v.StructTypes }).(QueryParameterTypeStructTypesItemResponseArrayOutput)
}

// The top level type of this field.
func (o QueryParameterTypeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterTypeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type QueryParameterTypeResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterTypeResponse)(nil)).Elem()
}

func (o QueryParameterTypeResponsePtrOutput) ToQueryParameterTypeResponsePtrOutput() QueryParameterTypeResponsePtrOutput {
	return o
}

func (o QueryParameterTypeResponsePtrOutput) ToQueryParameterTypeResponsePtrOutputWithContext(ctx context.Context) QueryParameterTypeResponsePtrOutput {
	return o
}

func (o QueryParameterTypeResponsePtrOutput) Elem() QueryParameterTypeResponseOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) QueryParameterTypeResponse {
		if v != nil {
			return *v
		}
		var ret QueryParameterTypeResponse
		return ret
	}).(QueryParameterTypeResponseOutput)
}

// Optional. The type of the array's elements, if this is an array.
func (o QueryParameterTypeResponsePtrOutput) ArrayType() QueryParameterTypeResponsePtrOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) *QueryParameterTypeResponse {
		if v == nil {
			return nil
		}
		return v.ArrayType
	}).(QueryParameterTypeResponsePtrOutput)
}

// Optional. The element type of the range, if this is a range.
func (o QueryParameterTypeResponsePtrOutput) RangeElementType() QueryParameterTypeResponsePtrOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) *QueryParameterTypeResponse {
		if v == nil {
			return nil
		}
		return v.RangeElementType
	}).(QueryParameterTypeResponsePtrOutput)
}

// Optional. The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypeResponsePtrOutput) StructTypes() QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) []QueryParameterTypeStructTypesItemResponse {
		if v == nil {
			return nil
		}
		return v.StructTypes
	}).(QueryParameterTypeStructTypesItemResponseArrayOutput)
}

// The top level type of this field.
func (o QueryParameterTypeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// The type of a struct parameter.
type QueryParameterTypeStructTypesItem struct {
	// Optional. Human-oriented description of the field.
	Description *string `pulumi:"description"`
	// Optional. The name of this field.
	Name *string `pulumi:"name"`
	// The type of this field.
	Type QueryParameterType `pulumi:"type"`
}

// QueryParameterTypeStructTypesItemInput is an input type that accepts QueryParameterTypeStructTypesItemArgs and QueryParameterTypeStructTypesItemOutput values.
// You can construct a concrete instance of `QueryParameterTypeStructTypesItemInput` via:
//
//	QueryParameterTypeStructTypesItemArgs{...}
type QueryParameterTypeStructTypesItemInput interface {
	pulumi.Input

	ToQueryParameterTypeStructTypesItemOutput() QueryParameterTypeStructTypesItemOutput
	ToQueryParameterTypeStructTypesItemOutputWithContext(context.Context) QueryParameterTypeStructTypesItemOutput
}

// The type of a struct parameter.
type QueryParameterTypeStructTypesItemArgs struct {
	// Optional. Human-oriented description of the field.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. The name of this field.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The type of this field.
	Type QueryParameterTypeInput `pulumi:"type"`
}

func (QueryParameterTypeStructTypesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (i QueryParameterTypeStructTypesItemArgs) ToQueryParameterTypeStructTypesItemOutput() QueryParameterTypeStructTypesItemOutput {
	return i.ToQueryParameterTypeStructTypesItemOutputWithContext(context.Background())
}

func (i QueryParameterTypeStructTypesItemArgs) ToQueryParameterTypeStructTypesItemOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeStructTypesItemOutput)
}

// QueryParameterTypeStructTypesItemArrayInput is an input type that accepts QueryParameterTypeStructTypesItemArray and QueryParameterTypeStructTypesItemArrayOutput values.
// You can construct a concrete instance of `QueryParameterTypeStructTypesItemArrayInput` via:
//
//	QueryParameterTypeStructTypesItemArray{ QueryParameterTypeStructTypesItemArgs{...} }
type QueryParameterTypeStructTypesItemArrayInput interface {
	pulumi.Input

	ToQueryParameterTypeStructTypesItemArrayOutput() QueryParameterTypeStructTypesItemArrayOutput
	ToQueryParameterTypeStructTypesItemArrayOutputWithContext(context.Context) QueryParameterTypeStructTypesItemArrayOutput
}

type QueryParameterTypeStructTypesItemArray []QueryParameterTypeStructTypesItemInput

func (QueryParameterTypeStructTypesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (i QueryParameterTypeStructTypesItemArray) ToQueryParameterTypeStructTypesItemArrayOutput() QueryParameterTypeStructTypesItemArrayOutput {
	return i.ToQueryParameterTypeStructTypesItemArrayOutputWithContext(context.Background())
}

func (i QueryParameterTypeStructTypesItemArray) ToQueryParameterTypeStructTypesItemArrayOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeStructTypesItemArrayOutput)
}

// The type of a struct parameter.
type QueryParameterTypeStructTypesItemOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemOutput) ToQueryParameterTypeStructTypesItemOutput() QueryParameterTypeStructTypesItemOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemOutput) ToQueryParameterTypeStructTypesItemOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemOutput {
	return o
}

// Optional. Human-oriented description of the field.
func (o QueryParameterTypeStructTypesItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItem) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. The name of this field.
func (o QueryParameterTypeStructTypesItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The type of this field.
func (o QueryParameterTypeStructTypesItemOutput) Type() QueryParameterTypeOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItem) QueryParameterType { return v.Type }).(QueryParameterTypeOutput)
}

type QueryParameterTypeStructTypesItemArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemArrayOutput) ToQueryParameterTypeStructTypesItemArrayOutput() QueryParameterTypeStructTypesItemArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemArrayOutput) ToQueryParameterTypeStructTypesItemArrayOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemArrayOutput) Index(i pulumi.IntInput) QueryParameterTypeStructTypesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterTypeStructTypesItem {
		return vs[0].([]QueryParameterTypeStructTypesItem)[vs[1].(int)]
	}).(QueryParameterTypeStructTypesItemOutput)
}

// The type of a struct parameter.
type QueryParameterTypeStructTypesItemResponse struct {
	// Optional. Human-oriented description of the field.
	Description string `pulumi:"description"`
	// Optional. The name of this field.
	Name string `pulumi:"name"`
	// The type of this field.
	Type QueryParameterTypeResponse `pulumi:"type"`
}

// The type of a struct parameter.
type QueryParameterTypeStructTypesItemResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeStructTypesItemResponse)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemResponseOutput) ToQueryParameterTypeStructTypesItemResponseOutput() QueryParameterTypeStructTypesItemResponseOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemResponseOutput) ToQueryParameterTypeStructTypesItemResponseOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemResponseOutput {
	return o
}

// Optional. Human-oriented description of the field.
func (o QueryParameterTypeStructTypesItemResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItemResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. The name of this field.
func (o QueryParameterTypeStructTypesItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The type of this field.
func (o QueryParameterTypeStructTypesItemResponseOutput) Type() QueryParameterTypeResponseOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItemResponse) QueryParameterTypeResponse { return v.Type }).(QueryParameterTypeResponseOutput)
}

type QueryParameterTypeStructTypesItemResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterTypeStructTypesItemResponse)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemResponseArrayOutput) ToQueryParameterTypeStructTypesItemResponseArrayOutput() QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemResponseArrayOutput) ToQueryParameterTypeStructTypesItemResponseArrayOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemResponseArrayOutput) Index(i pulumi.IntInput) QueryParameterTypeStructTypesItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterTypeStructTypesItemResponse {
		return vs[0].([]QueryParameterTypeStructTypesItemResponse)[vs[1].(int)]
	}).(QueryParameterTypeStructTypesItemResponseOutput)
}

// The value of a query parameter.
type QueryParameterValue struct {
	// Optional. The array values, if this is an array type.
	ArrayValues []QueryParameterValue `pulumi:"arrayValues"`
	// Optional. The range value, if this is a range type.
	RangeValue *RangeValue `pulumi:"rangeValue"`
	// The struct field values.
	StructValues map[string]string `pulumi:"structValues"`
	// Optional. The value of this value, if a simple scalar type.
	Value *string `pulumi:"value"`
}

// QueryParameterValueInput is an input type that accepts QueryParameterValueArgs and QueryParameterValueOutput values.
// You can construct a concrete instance of `QueryParameterValueInput` via:
//
//	QueryParameterValueArgs{...}
type QueryParameterValueInput interface {
	pulumi.Input

	ToQueryParameterValueOutput() QueryParameterValueOutput
	ToQueryParameterValueOutputWithContext(context.Context) QueryParameterValueOutput
}

// The value of a query parameter.
type QueryParameterValueArgs struct {
	// Optional. The array values, if this is an array type.
	ArrayValues QueryParameterValueArrayInput `pulumi:"arrayValues"`
	// Optional. The range value, if this is a range type.
	RangeValue RangeValuePtrInput `pulumi:"rangeValue"`
	// The struct field values.
	StructValues pulumi.StringMapInput `pulumi:"structValues"`
	// Optional. The value of this value, if a simple scalar type.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (QueryParameterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValue)(nil)).Elem()
}

func (i QueryParameterValueArgs) ToQueryParameterValueOutput() QueryParameterValueOutput {
	return i.ToQueryParameterValueOutputWithContext(context.Background())
}

func (i QueryParameterValueArgs) ToQueryParameterValueOutputWithContext(ctx context.Context) QueryParameterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueOutput)
}

func (i QueryParameterValueArgs) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return i.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (i QueryParameterValueArgs) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueOutput).ToQueryParameterValuePtrOutputWithContext(ctx)
}

// QueryParameterValuePtrInput is an input type that accepts QueryParameterValueArgs, QueryParameterValuePtr and QueryParameterValuePtrOutput values.
// You can construct a concrete instance of `QueryParameterValuePtrInput` via:
//
//	        QueryParameterValueArgs{...}
//
//	or:
//
//	        nil
type QueryParameterValuePtrInput interface {
	pulumi.Input

	ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput
	ToQueryParameterValuePtrOutputWithContext(context.Context) QueryParameterValuePtrOutput
}

type queryParameterValuePtrType QueryParameterValueArgs

func QueryParameterValuePtr(v *QueryParameterValueArgs) QueryParameterValuePtrInput {
	return (*queryParameterValuePtrType)(v)
}

func (*queryParameterValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValue)(nil)).Elem()
}

func (i *queryParameterValuePtrType) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return i.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (i *queryParameterValuePtrType) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValuePtrOutput)
}

// QueryParameterValueArrayInput is an input type that accepts QueryParameterValueArray and QueryParameterValueArrayOutput values.
// You can construct a concrete instance of `QueryParameterValueArrayInput` via:
//
//	QueryParameterValueArray{ QueryParameterValueArgs{...} }
type QueryParameterValueArrayInput interface {
	pulumi.Input

	ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput
	ToQueryParameterValueArrayOutputWithContext(context.Context) QueryParameterValueArrayOutput
}

type QueryParameterValueArray []QueryParameterValueInput

func (QueryParameterValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValue)(nil)).Elem()
}

func (i QueryParameterValueArray) ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput {
	return i.ToQueryParameterValueArrayOutputWithContext(context.Background())
}

func (i QueryParameterValueArray) ToQueryParameterValueArrayOutputWithContext(ctx context.Context) QueryParameterValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueArrayOutput)
}

// The value of a query parameter.
type QueryParameterValueOutput struct{ *pulumi.OutputState }

func (QueryParameterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValueOutput) ToQueryParameterValueOutput() QueryParameterValueOutput {
	return o
}

func (o QueryParameterValueOutput) ToQueryParameterValueOutputWithContext(ctx context.Context) QueryParameterValueOutput {
	return o
}

func (o QueryParameterValueOutput) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return o.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (o QueryParameterValueOutput) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryParameterValue) *QueryParameterValue {
		return &v
	}).(QueryParameterValuePtrOutput)
}

// Optional. The array values, if this is an array type.
func (o QueryParameterValueOutput) ArrayValues() QueryParameterValueArrayOutput {
	return o.ApplyT(func(v QueryParameterValue) []QueryParameterValue { return v.ArrayValues }).(QueryParameterValueArrayOutput)
}

// Optional. The range value, if this is a range type.
func (o QueryParameterValueOutput) RangeValue() RangeValuePtrOutput {
	return o.ApplyT(func(v QueryParameterValue) *RangeValue { return v.RangeValue }).(RangeValuePtrOutput)
}

// The struct field values.
func (o QueryParameterValueOutput) StructValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v QueryParameterValue) map[string]string { return v.StructValues }).(pulumi.StringMapOutput)
}

// Optional. The value of this value, if a simple scalar type.
func (o QueryParameterValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type QueryParameterValuePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValuePtrOutput) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return o
}

func (o QueryParameterValuePtrOutput) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return o
}

func (o QueryParameterValuePtrOutput) Elem() QueryParameterValueOutput {
	return o.ApplyT(func(v *QueryParameterValue) QueryParameterValue {
		if v != nil {
			return *v
		}
		var ret QueryParameterValue
		return ret
	}).(QueryParameterValueOutput)
}

// Optional. The array values, if this is an array type.
func (o QueryParameterValuePtrOutput) ArrayValues() QueryParameterValueArrayOutput {
	return o.ApplyT(func(v *QueryParameterValue) []QueryParameterValue {
		if v == nil {
			return nil
		}
		return v.ArrayValues
	}).(QueryParameterValueArrayOutput)
}

// Optional. The range value, if this is a range type.
func (o QueryParameterValuePtrOutput) RangeValue() RangeValuePtrOutput {
	return o.ApplyT(func(v *QueryParameterValue) *RangeValue {
		if v == nil {
			return nil
		}
		return v.RangeValue
	}).(RangeValuePtrOutput)
}

// The struct field values.
func (o QueryParameterValuePtrOutput) StructValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QueryParameterValue) map[string]string {
		if v == nil {
			return nil
		}
		return v.StructValues
	}).(pulumi.StringMapOutput)
}

// Optional. The value of this value, if a simple scalar type.
func (o QueryParameterValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterValue) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type QueryParameterValueArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValueArrayOutput) ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput {
	return o
}

func (o QueryParameterValueArrayOutput) ToQueryParameterValueArrayOutputWithContext(ctx context.Context) QueryParameterValueArrayOutput {
	return o
}

func (o QueryParameterValueArrayOutput) Index(i pulumi.IntInput) QueryParameterValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterValue {
		return vs[0].([]QueryParameterValue)[vs[1].(int)]
	}).(QueryParameterValueOutput)
}

// The value of a query parameter.
type QueryParameterValueResponse struct {
	// Optional. The array values, if this is an array type.
	ArrayValues []QueryParameterValueResponse `pulumi:"arrayValues"`
	// Optional. The range value, if this is a range type.
	RangeValue *RangeValueResponse `pulumi:"rangeValue"`
	// The struct field values.
	StructValues map[string]string `pulumi:"structValues"`
	// Optional. The value of this value, if a simple scalar type.
	Value string `pulumi:"value"`
}

// The value of a query parameter.
type QueryParameterValueResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValueResponse)(nil)).Elem()
}

func (o QueryParameterValueResponseOutput) ToQueryParameterValueResponseOutput() QueryParameterValueResponseOutput {
	return o
}

func (o QueryParameterValueResponseOutput) ToQueryParameterValueResponseOutputWithContext(ctx context.Context) QueryParameterValueResponseOutput {
	return o
}

// Optional. The array values, if this is an array type.
func (o QueryParameterValueResponseOutput) ArrayValues() QueryParameterValueResponseArrayOutput {
	return o.ApplyT(func(v QueryParameterValueResponse) []QueryParameterValueResponse { return v.ArrayValues }).(QueryParameterValueResponseArrayOutput)
}

// Optional. The range value, if this is a range type.
func (o QueryParameterValueResponseOutput) RangeValue() RangeValueResponsePtrOutput {
	return o.ApplyT(func(v QueryParameterValueResponse) *RangeValueResponse { return v.RangeValue }).(RangeValueResponsePtrOutput)
}

// The struct field values.
func (o QueryParameterValueResponseOutput) StructValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v QueryParameterValueResponse) map[string]string { return v.StructValues }).(pulumi.StringMapOutput)
}

// Optional. The value of this value, if a simple scalar type.
func (o QueryParameterValueResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterValueResponse) string { return v.Value }).(pulumi.StringOutput)
}

type QueryParameterValueResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterValueResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValueResponse)(nil)).Elem()
}

func (o QueryParameterValueResponsePtrOutput) ToQueryParameterValueResponsePtrOutput() QueryParameterValueResponsePtrOutput {
	return o
}

func (o QueryParameterValueResponsePtrOutput) ToQueryParameterValueResponsePtrOutputWithContext(ctx context.Context) QueryParameterValueResponsePtrOutput {
	return o
}

func (o QueryParameterValueResponsePtrOutput) Elem() QueryParameterValueResponseOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) QueryParameterValueResponse {
		if v != nil {
			return *v
		}
		var ret QueryParameterValueResponse
		return ret
	}).(QueryParameterValueResponseOutput)
}

// Optional. The array values, if this is an array type.
func (o QueryParameterValueResponsePtrOutput) ArrayValues() QueryParameterValueResponseArrayOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) []QueryParameterValueResponse {
		if v == nil {
			return nil
		}
		return v.ArrayValues
	}).(QueryParameterValueResponseArrayOutput)
}

// Optional. The range value, if this is a range type.
func (o QueryParameterValueResponsePtrOutput) RangeValue() RangeValueResponsePtrOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) *RangeValueResponse {
		if v == nil {
			return nil
		}
		return v.RangeValue
	}).(RangeValueResponsePtrOutput)
}

// The struct field values.
func (o QueryParameterValueResponsePtrOutput) StructValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.StructValues
	}).(pulumi.StringMapOutput)
}

// Optional. The value of this value, if a simple scalar type.
func (o QueryParameterValueResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type QueryParameterValueResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValueResponse)(nil)).Elem()
}

func (o QueryParameterValueResponseArrayOutput) ToQueryParameterValueResponseArrayOutput() QueryParameterValueResponseArrayOutput {
	return o
}

func (o QueryParameterValueResponseArrayOutput) ToQueryParameterValueResponseArrayOutputWithContext(ctx context.Context) QueryParameterValueResponseArrayOutput {
	return o
}

func (o QueryParameterValueResponseArrayOutput) Index(i pulumi.IntInput) QueryParameterValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterValueResponse {
		return vs[0].([]QueryParameterValueResponse)[vs[1].(int)]
	}).(QueryParameterValueResponseOutput)
}

// Summary of the state of query execution at a given time.
type QueryTimelineSampleResponse struct {
	// Total number of active workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
	ActiveUnits string `pulumi:"activeUnits"`
	// Total parallel units of work completed by this query.
	CompletedUnits string `pulumi:"completedUnits"`
	// Milliseconds elapsed since the start of query execution.
	ElapsedMs string `pulumi:"elapsedMs"`
	// Units of work that can be scheduled immediately. Providing additional slots for these units of work will accelerate the query, if no other query in the reservation needs additional slots.
	EstimatedRunnableUnits string `pulumi:"estimatedRunnableUnits"`
	// Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
	PendingUnits string `pulumi:"pendingUnits"`
	// Cumulative slot-ms consumed by the query.
	TotalSlotMs string `pulumi:"totalSlotMs"`
}

// Summary of the state of query execution at a given time.
type QueryTimelineSampleResponseOutput struct{ *pulumi.OutputState }

func (QueryTimelineSampleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimelineSampleResponse)(nil)).Elem()
}

func (o QueryTimelineSampleResponseOutput) ToQueryTimelineSampleResponseOutput() QueryTimelineSampleResponseOutput {
	return o
}

func (o QueryTimelineSampleResponseOutput) ToQueryTimelineSampleResponseOutputWithContext(ctx context.Context) QueryTimelineSampleResponseOutput {
	return o
}

// Total number of active workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
func (o QueryTimelineSampleResponseOutput) ActiveUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.ActiveUnits }).(pulumi.StringOutput)
}

// Total parallel units of work completed by this query.
func (o QueryTimelineSampleResponseOutput) CompletedUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.CompletedUnits }).(pulumi.StringOutput)
}

// Milliseconds elapsed since the start of query execution.
func (o QueryTimelineSampleResponseOutput) ElapsedMs() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.ElapsedMs }).(pulumi.StringOutput)
}

// Units of work that can be scheduled immediately. Providing additional slots for these units of work will accelerate the query, if no other query in the reservation needs additional slots.
func (o QueryTimelineSampleResponseOutput) EstimatedRunnableUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.EstimatedRunnableUnits }).(pulumi.StringOutput)
}

// Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
func (o QueryTimelineSampleResponseOutput) PendingUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.PendingUnits }).(pulumi.StringOutput)
}

// Cumulative slot-ms consumed by the query.
func (o QueryTimelineSampleResponseOutput) TotalSlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.TotalSlotMs }).(pulumi.StringOutput)
}

type QueryTimelineSampleResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryTimelineSampleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryTimelineSampleResponse)(nil)).Elem()
}

func (o QueryTimelineSampleResponseArrayOutput) ToQueryTimelineSampleResponseArrayOutput() QueryTimelineSampleResponseArrayOutput {
	return o
}

func (o QueryTimelineSampleResponseArrayOutput) ToQueryTimelineSampleResponseArrayOutputWithContext(ctx context.Context) QueryTimelineSampleResponseArrayOutput {
	return o
}

func (o QueryTimelineSampleResponseArrayOutput) Index(i pulumi.IntInput) QueryTimelineSampleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryTimelineSampleResponse {
		return vs[0].([]QueryTimelineSampleResponse)[vs[1].(int)]
	}).(QueryTimelineSampleResponseOutput)
}

type RangePartitioning struct {
	// [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field string `pulumi:"field"`
	// [Experimental] Defines the ranges for range partitioning.
	Range *RangePartitioningRange `pulumi:"range"`
}

// RangePartitioningInput is an input type that accepts RangePartitioningArgs and RangePartitioningOutput values.
// You can construct a concrete instance of `RangePartitioningInput` via:
//
//	RangePartitioningArgs{...}
type RangePartitioningInput interface {
	pulumi.Input

	ToRangePartitioningOutput() RangePartitioningOutput
	ToRangePartitioningOutputWithContext(context.Context) RangePartitioningOutput
}

type RangePartitioningArgs struct {
	// [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field pulumi.StringInput `pulumi:"field"`
	// [Experimental] Defines the ranges for range partitioning.
	Range RangePartitioningRangePtrInput `pulumi:"range"`
}

func (RangePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioning)(nil)).Elem()
}

func (i RangePartitioningArgs) ToRangePartitioningOutput() RangePartitioningOutput {
	return i.ToRangePartitioningOutputWithContext(context.Background())
}

func (i RangePartitioningArgs) ToRangePartitioningOutputWithContext(ctx context.Context) RangePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningOutput)
}

func (i RangePartitioningArgs) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return i.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (i RangePartitioningArgs) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningOutput).ToRangePartitioningPtrOutputWithContext(ctx)
}

// RangePartitioningPtrInput is an input type that accepts RangePartitioningArgs, RangePartitioningPtr and RangePartitioningPtrOutput values.
// You can construct a concrete instance of `RangePartitioningPtrInput` via:
//
//	        RangePartitioningArgs{...}
//
//	or:
//
//	        nil
type RangePartitioningPtrInput interface {
	pulumi.Input

	ToRangePartitioningPtrOutput() RangePartitioningPtrOutput
	ToRangePartitioningPtrOutputWithContext(context.Context) RangePartitioningPtrOutput
}

type rangePartitioningPtrType RangePartitioningArgs

func RangePartitioningPtr(v *RangePartitioningArgs) RangePartitioningPtrInput {
	return (*rangePartitioningPtrType)(v)
}

func (*rangePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioning)(nil)).Elem()
}

func (i *rangePartitioningPtrType) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return i.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (i *rangePartitioningPtrType) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningPtrOutput)
}

type RangePartitioningOutput struct{ *pulumi.OutputState }

func (RangePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioning)(nil)).Elem()
}

func (o RangePartitioningOutput) ToRangePartitioningOutput() RangePartitioningOutput {
	return o
}

func (o RangePartitioningOutput) ToRangePartitioningOutputWithContext(ctx context.Context) RangePartitioningOutput {
	return o
}

func (o RangePartitioningOutput) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return o.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (o RangePartitioningOutput) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangePartitioning) *RangePartitioning {
		return &v
	}).(RangePartitioningPtrOutput)
}

// [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioning) string { return v.Field }).(pulumi.StringOutput)
}

// [Experimental] Defines the ranges for range partitioning.
func (o RangePartitioningOutput) Range() RangePartitioningRangePtrOutput {
	return o.ApplyT(func(v RangePartitioning) *RangePartitioningRange { return v.Range }).(RangePartitioningRangePtrOutput)
}

type RangePartitioningPtrOutput struct{ *pulumi.OutputState }

func (RangePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioning)(nil)).Elem()
}

func (o RangePartitioningPtrOutput) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return o
}

func (o RangePartitioningPtrOutput) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return o
}

func (o RangePartitioningPtrOutput) Elem() RangePartitioningOutput {
	return o.ApplyT(func(v *RangePartitioning) RangePartitioning {
		if v != nil {
			return *v
		}
		var ret RangePartitioning
		return ret
	}).(RangePartitioningOutput)
}

// [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioning) *string {
		if v == nil {
			return nil
		}
		return &v.Field
	}).(pulumi.StringPtrOutput)
}

// [Experimental] Defines the ranges for range partitioning.
func (o RangePartitioningPtrOutput) Range() RangePartitioningRangePtrOutput {
	return o.ApplyT(func(v *RangePartitioning) *RangePartitioningRange {
		if v == nil {
			return nil
		}
		return v.Range
	}).(RangePartitioningRangePtrOutput)
}

// [Experimental] Defines the ranges for range partitioning.
type RangePartitioningRange struct {
	// [Experimental] The end of range partitioning, exclusive.
	End *string `pulumi:"end"`
	// [Experimental] The width of each interval.
	Interval *string `pulumi:"interval"`
	// [Experimental] The start of range partitioning, inclusive.
	Start *string `pulumi:"start"`
}

// RangePartitioningRangeInput is an input type that accepts RangePartitioningRangeArgs and RangePartitioningRangeOutput values.
// You can construct a concrete instance of `RangePartitioningRangeInput` via:
//
//	RangePartitioningRangeArgs{...}
type RangePartitioningRangeInput interface {
	pulumi.Input

	ToRangePartitioningRangeOutput() RangePartitioningRangeOutput
	ToRangePartitioningRangeOutputWithContext(context.Context) RangePartitioningRangeOutput
}

// [Experimental] Defines the ranges for range partitioning.
type RangePartitioningRangeArgs struct {
	// [Experimental] The end of range partitioning, exclusive.
	End pulumi.StringPtrInput `pulumi:"end"`
	// [Experimental] The width of each interval.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// [Experimental] The start of range partitioning, inclusive.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (RangePartitioningRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningRange)(nil)).Elem()
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangeOutput() RangePartitioningRangeOutput {
	return i.ToRangePartitioningRangeOutputWithContext(context.Background())
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangeOutputWithContext(ctx context.Context) RangePartitioningRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningRangeOutput)
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return i.ToRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningRangeOutput).ToRangePartitioningRangePtrOutputWithContext(ctx)
}

// RangePartitioningRangePtrInput is an input type that accepts RangePartitioningRangeArgs, RangePartitioningRangePtr and RangePartitioningRangePtrOutput values.
// You can construct a concrete instance of `RangePartitioningRangePtrInput` via:
//
//	        RangePartitioningRangeArgs{...}
//
//	or:
//
//	        nil
type RangePartitioningRangePtrInput interface {
	pulumi.Input

	ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput
	ToRangePartitioningRangePtrOutputWithContext(context.Context) RangePartitioningRangePtrOutput
}

type rangePartitioningRangePtrType RangePartitioningRangeArgs

func RangePartitioningRangePtr(v *RangePartitioningRangeArgs) RangePartitioningRangePtrInput {
	return (*rangePartitioningRangePtrType)(v)
}

func (*rangePartitioningRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioningRange)(nil)).Elem()
}

func (i *rangePartitioningRangePtrType) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return i.ToRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i *rangePartitioningRangePtrType) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningRangePtrOutput)
}

// [Experimental] Defines the ranges for range partitioning.
type RangePartitioningRangeOutput struct{ *pulumi.OutputState }

func (RangePartitioningRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningRange)(nil)).Elem()
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangeOutput() RangePartitioningRangeOutput {
	return o
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangeOutputWithContext(ctx context.Context) RangePartitioningRangeOutput {
	return o
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return o.ToRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangePartitioningRange) *RangePartitioningRange {
		return &v
	}).(RangePartitioningRangePtrOutput)
}

// [Experimental] The end of range partitioning, exclusive.
func (o RangePartitioningRangeOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioningRange) *string { return v.End }).(pulumi.StringPtrOutput)
}

// [Experimental] The width of each interval.
func (o RangePartitioningRangeOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioningRange) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// [Experimental] The start of range partitioning, inclusive.
func (o RangePartitioningRangeOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioningRange) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type RangePartitioningRangePtrOutput struct{ *pulumi.OutputState }

func (RangePartitioningRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioningRange)(nil)).Elem()
}

func (o RangePartitioningRangePtrOutput) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return o
}

func (o RangePartitioningRangePtrOutput) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return o
}

func (o RangePartitioningRangePtrOutput) Elem() RangePartitioningRangeOutput {
	return o.ApplyT(func(v *RangePartitioningRange) RangePartitioningRange {
		if v != nil {
			return *v
		}
		var ret RangePartitioningRange
		return ret
	}).(RangePartitioningRangeOutput)
}

// [Experimental] The end of range partitioning, exclusive.
func (o RangePartitioningRangePtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioningRange) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// [Experimental] The width of each interval.
func (o RangePartitioningRangePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioningRange) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// [Experimental] The start of range partitioning, inclusive.
func (o RangePartitioningRangePtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioningRange) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

// [Experimental] Defines the ranges for range partitioning.
type RangePartitioningRangeResponse struct {
	// [Experimental] The end of range partitioning, exclusive.
	End string `pulumi:"end"`
	// [Experimental] The width of each interval.
	Interval string `pulumi:"interval"`
	// [Experimental] The start of range partitioning, inclusive.
	Start string `pulumi:"start"`
}

// [Experimental] Defines the ranges for range partitioning.
type RangePartitioningRangeResponseOutput struct{ *pulumi.OutputState }

func (RangePartitioningRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningRangeResponse)(nil)).Elem()
}

func (o RangePartitioningRangeResponseOutput) ToRangePartitioningRangeResponseOutput() RangePartitioningRangeResponseOutput {
	return o
}

func (o RangePartitioningRangeResponseOutput) ToRangePartitioningRangeResponseOutputWithContext(ctx context.Context) RangePartitioningRangeResponseOutput {
	return o
}

// [Experimental] The end of range partitioning, exclusive.
func (o RangePartitioningRangeResponseOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningRangeResponse) string { return v.End }).(pulumi.StringOutput)
}

// [Experimental] The width of each interval.
func (o RangePartitioningRangeResponseOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningRangeResponse) string { return v.Interval }).(pulumi.StringOutput)
}

// [Experimental] The start of range partitioning, inclusive.
func (o RangePartitioningRangeResponseOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningRangeResponse) string { return v.Start }).(pulumi.StringOutput)
}

type RangePartitioningResponse struct {
	// [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field string `pulumi:"field"`
	// [Experimental] Defines the ranges for range partitioning.
	Range RangePartitioningRangeResponse `pulumi:"range"`
}

type RangePartitioningResponseOutput struct{ *pulumi.OutputState }

func (RangePartitioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningResponse)(nil)).Elem()
}

func (o RangePartitioningResponseOutput) ToRangePartitioningResponseOutput() RangePartitioningResponseOutput {
	return o
}

func (o RangePartitioningResponseOutput) ToRangePartitioningResponseOutputWithContext(ctx context.Context) RangePartitioningResponseOutput {
	return o
}

// [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningResponse) string { return v.Field }).(pulumi.StringOutput)
}

// [Experimental] Defines the ranges for range partitioning.
func (o RangePartitioningResponseOutput) Range() RangePartitioningRangeResponseOutput {
	return o.ApplyT(func(v RangePartitioningResponse) RangePartitioningRangeResponse { return v.Range }).(RangePartitioningRangeResponseOutput)
}

// Represents the value of a range.
type RangeValue struct {
	// Optional. The end value of the range. A missing value represents an unbounded end.
	End *QueryParameterValue `pulumi:"end"`
	// Optional. The start value of the range. A missing value represents an unbounded start.
	Start *QueryParameterValue `pulumi:"start"`
}

// RangeValueInput is an input type that accepts RangeValueArgs and RangeValueOutput values.
// You can construct a concrete instance of `RangeValueInput` via:
//
//	RangeValueArgs{...}
type RangeValueInput interface {
	pulumi.Input

	ToRangeValueOutput() RangeValueOutput
	ToRangeValueOutputWithContext(context.Context) RangeValueOutput
}

// Represents the value of a range.
type RangeValueArgs struct {
	// Optional. The end value of the range. A missing value represents an unbounded end.
	End QueryParameterValuePtrInput `pulumi:"end"`
	// Optional. The start value of the range. A missing value represents an unbounded start.
	Start QueryParameterValuePtrInput `pulumi:"start"`
}

func (RangeValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangeValue)(nil)).Elem()
}

func (i RangeValueArgs) ToRangeValueOutput() RangeValueOutput {
	return i.ToRangeValueOutputWithContext(context.Background())
}

func (i RangeValueArgs) ToRangeValueOutputWithContext(ctx context.Context) RangeValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangeValueOutput)
}

func (i RangeValueArgs) ToRangeValuePtrOutput() RangeValuePtrOutput {
	return i.ToRangeValuePtrOutputWithContext(context.Background())
}

func (i RangeValueArgs) ToRangeValuePtrOutputWithContext(ctx context.Context) RangeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangeValueOutput).ToRangeValuePtrOutputWithContext(ctx)
}

// RangeValuePtrInput is an input type that accepts RangeValueArgs, RangeValuePtr and RangeValuePtrOutput values.
// You can construct a concrete instance of `RangeValuePtrInput` via:
//
//	        RangeValueArgs{...}
//
//	or:
//
//	        nil
type RangeValuePtrInput interface {
	pulumi.Input

	ToRangeValuePtrOutput() RangeValuePtrOutput
	ToRangeValuePtrOutputWithContext(context.Context) RangeValuePtrOutput
}

type rangeValuePtrType RangeValueArgs

func RangeValuePtr(v *RangeValueArgs) RangeValuePtrInput {
	return (*rangeValuePtrType)(v)
}

func (*rangeValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangeValue)(nil)).Elem()
}

func (i *rangeValuePtrType) ToRangeValuePtrOutput() RangeValuePtrOutput {
	return i.ToRangeValuePtrOutputWithContext(context.Background())
}

func (i *rangeValuePtrType) ToRangeValuePtrOutputWithContext(ctx context.Context) RangeValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangeValuePtrOutput)
}

// Represents the value of a range.
type RangeValueOutput struct{ *pulumi.OutputState }

func (RangeValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangeValue)(nil)).Elem()
}

func (o RangeValueOutput) ToRangeValueOutput() RangeValueOutput {
	return o
}

func (o RangeValueOutput) ToRangeValueOutputWithContext(ctx context.Context) RangeValueOutput {
	return o
}

func (o RangeValueOutput) ToRangeValuePtrOutput() RangeValuePtrOutput {
	return o.ToRangeValuePtrOutputWithContext(context.Background())
}

func (o RangeValueOutput) ToRangeValuePtrOutputWithContext(ctx context.Context) RangeValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangeValue) *RangeValue {
		return &v
	}).(RangeValuePtrOutput)
}

// Optional. The end value of the range. A missing value represents an unbounded end.
func (o RangeValueOutput) End() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v RangeValue) *QueryParameterValue { return v.End }).(QueryParameterValuePtrOutput)
}

// Optional. The start value of the range. A missing value represents an unbounded start.
func (o RangeValueOutput) Start() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v RangeValue) *QueryParameterValue { return v.Start }).(QueryParameterValuePtrOutput)
}

type RangeValuePtrOutput struct{ *pulumi.OutputState }

func (RangeValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangeValue)(nil)).Elem()
}

func (o RangeValuePtrOutput) ToRangeValuePtrOutput() RangeValuePtrOutput {
	return o
}

func (o RangeValuePtrOutput) ToRangeValuePtrOutputWithContext(ctx context.Context) RangeValuePtrOutput {
	return o
}

func (o RangeValuePtrOutput) Elem() RangeValueOutput {
	return o.ApplyT(func(v *RangeValue) RangeValue {
		if v != nil {
			return *v
		}
		var ret RangeValue
		return ret
	}).(RangeValueOutput)
}

// Optional. The end value of the range. A missing value represents an unbounded end.
func (o RangeValuePtrOutput) End() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v *RangeValue) *QueryParameterValue {
		if v == nil {
			return nil
		}
		return v.End
	}).(QueryParameterValuePtrOutput)
}

// Optional. The start value of the range. A missing value represents an unbounded start.
func (o RangeValuePtrOutput) Start() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v *RangeValue) *QueryParameterValue {
		if v == nil {
			return nil
		}
		return v.Start
	}).(QueryParameterValuePtrOutput)
}

// Represents the value of a range.
type RangeValueResponse struct {
	// Optional. The end value of the range. A missing value represents an unbounded end.
	End *QueryParameterValueResponse `pulumi:"end"`
	// Optional. The start value of the range. A missing value represents an unbounded start.
	Start *QueryParameterValueResponse `pulumi:"start"`
}

// Represents the value of a range.
type RangeValueResponseOutput struct{ *pulumi.OutputState }

func (RangeValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangeValueResponse)(nil)).Elem()
}

func (o RangeValueResponseOutput) ToRangeValueResponseOutput() RangeValueResponseOutput {
	return o
}

func (o RangeValueResponseOutput) ToRangeValueResponseOutputWithContext(ctx context.Context) RangeValueResponseOutput {
	return o
}

// Optional. The end value of the range. A missing value represents an unbounded end.
func (o RangeValueResponseOutput) End() QueryParameterValueResponsePtrOutput {
	return o.ApplyT(func(v RangeValueResponse) *QueryParameterValueResponse { return v.End }).(QueryParameterValueResponsePtrOutput)
}

// Optional. The start value of the range. A missing value represents an unbounded start.
func (o RangeValueResponseOutput) Start() QueryParameterValueResponsePtrOutput {
	return o.ApplyT(func(v RangeValueResponse) *QueryParameterValueResponse { return v.Start }).(QueryParameterValueResponsePtrOutput)
}

type RangeValueResponsePtrOutput struct{ *pulumi.OutputState }

func (RangeValueResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangeValueResponse)(nil)).Elem()
}

func (o RangeValueResponsePtrOutput) ToRangeValueResponsePtrOutput() RangeValueResponsePtrOutput {
	return o
}

func (o RangeValueResponsePtrOutput) ToRangeValueResponsePtrOutputWithContext(ctx context.Context) RangeValueResponsePtrOutput {
	return o
}

func (o RangeValueResponsePtrOutput) Elem() RangeValueResponseOutput {
	return o.ApplyT(func(v *RangeValueResponse) RangeValueResponse {
		if v != nil {
			return *v
		}
		var ret RangeValueResponse
		return ret
	}).(RangeValueResponseOutput)
}

// Optional. The end value of the range. A missing value represents an unbounded end.
func (o RangeValueResponsePtrOutput) End() QueryParameterValueResponsePtrOutput {
	return o.ApplyT(func(v *RangeValueResponse) *QueryParameterValueResponse {
		if v == nil {
			return nil
		}
		return v.End
	}).(QueryParameterValueResponsePtrOutput)
}

// Optional. The start value of the range. A missing value represents an unbounded start.
func (o RangeValueResponsePtrOutput) Start() QueryParameterValueResponsePtrOutput {
	return o.ApplyT(func(v *RangeValueResponse) *QueryParameterValueResponse {
		if v == nil {
			return nil
		}
		return v.Start
	}).(QueryParameterValueResponsePtrOutput)
}

// Evaluation metrics used by weighted-ALS models specified by feedback_type=implicit.
type RankingMetricsResponse struct {
	// Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
	AverageRank float64 `pulumi:"averageRank"`
	// Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
	MeanAveragePrecision float64 `pulumi:"meanAveragePrecision"`
	// Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
	MeanSquaredError float64 `pulumi:"meanSquaredError"`
	// A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
	NormalizedDiscountedCumulativeGain float64 `pulumi:"normalizedDiscountedCumulativeGain"`
}

// Evaluation metrics used by weighted-ALS models specified by feedback_type=implicit.
type RankingMetricsResponseOutput struct{ *pulumi.OutputState }

func (RankingMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RankingMetricsResponse)(nil)).Elem()
}

func (o RankingMetricsResponseOutput) ToRankingMetricsResponseOutput() RankingMetricsResponseOutput {
	return o
}

func (o RankingMetricsResponseOutput) ToRankingMetricsResponseOutputWithContext(ctx context.Context) RankingMetricsResponseOutput {
	return o
}

// Determines the goodness of a ranking by computing the percentile rank from the predicted confidence and dividing it by the original rank.
func (o RankingMetricsResponseOutput) AverageRank() pulumi.Float64Output {
	return o.ApplyT(func(v RankingMetricsResponse) float64 { return v.AverageRank }).(pulumi.Float64Output)
}

// Calculates a precision per user for all the items by ranking them and then averages all the precisions across all the users.
func (o RankingMetricsResponseOutput) MeanAveragePrecision() pulumi.Float64Output {
	return o.ApplyT(func(v RankingMetricsResponse) float64 { return v.MeanAveragePrecision }).(pulumi.Float64Output)
}

// Similar to the mean squared error computed in regression and explicit recommendation models except instead of computing the rating directly, the output from evaluate is computed against a preference which is 1 or 0 depending on if the rating exists or not.
func (o RankingMetricsResponseOutput) MeanSquaredError() pulumi.Float64Output {
	return o.ApplyT(func(v RankingMetricsResponse) float64 { return v.MeanSquaredError }).(pulumi.Float64Output)
}

// A metric to determine the goodness of a ranking calculated from the predicted confidence by comparing it to an ideal rank measured by the original ratings.
func (o RankingMetricsResponseOutput) NormalizedDiscountedCumulativeGain() pulumi.Float64Output {
	return o.ApplyT(func(v RankingMetricsResponse) float64 { return v.NormalizedDiscountedCumulativeGain }).(pulumi.Float64Output)
}

// Evaluation metrics for regression and explicit feedback type matrix factorization models.
type RegressionMetricsResponse struct {
	// Mean absolute error.
	MeanAbsoluteError float64 `pulumi:"meanAbsoluteError"`
	// Mean squared error.
	MeanSquaredError float64 `pulumi:"meanSquaredError"`
	// Mean squared log error.
	MeanSquaredLogError float64 `pulumi:"meanSquaredLogError"`
	// Median absolute error.
	MedianAbsoluteError float64 `pulumi:"medianAbsoluteError"`
	// R^2 score. This corresponds to r2_score in ML.EVALUATE.
	RSquared float64 `pulumi:"rSquared"`
}

// Evaluation metrics for regression and explicit feedback type matrix factorization models.
type RegressionMetricsResponseOutput struct{ *pulumi.OutputState }

func (RegressionMetricsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegressionMetricsResponse)(nil)).Elem()
}

func (o RegressionMetricsResponseOutput) ToRegressionMetricsResponseOutput() RegressionMetricsResponseOutput {
	return o
}

func (o RegressionMetricsResponseOutput) ToRegressionMetricsResponseOutputWithContext(ctx context.Context) RegressionMetricsResponseOutput {
	return o
}

// Mean absolute error.
func (o RegressionMetricsResponseOutput) MeanAbsoluteError() pulumi.Float64Output {
	return o.ApplyT(func(v RegressionMetricsResponse) float64 { return v.MeanAbsoluteError }).(pulumi.Float64Output)
}

// Mean squared error.
func (o RegressionMetricsResponseOutput) MeanSquaredError() pulumi.Float64Output {
	return o.ApplyT(func(v RegressionMetricsResponse) float64 { return v.MeanSquaredError }).(pulumi.Float64Output)
}

// Mean squared log error.
func (o RegressionMetricsResponseOutput) MeanSquaredLogError() pulumi.Float64Output {
	return o.ApplyT(func(v RegressionMetricsResponse) float64 { return v.MeanSquaredLogError }).(pulumi.Float64Output)
}

// Median absolute error.
func (o RegressionMetricsResponseOutput) MedianAbsoluteError() pulumi.Float64Output {
	return o.ApplyT(func(v RegressionMetricsResponse) float64 { return v.MedianAbsoluteError }).(pulumi.Float64Output)
}

// R^2 score. This corresponds to r2_score in ML.EVALUATE.
func (o RegressionMetricsResponseOutput) RSquared() pulumi.Float64Output {
	return o.ApplyT(func(v RegressionMetricsResponse) float64 { return v.RSquared }).(pulumi.Float64Output)
}

// Options for a remote user-defined function.
type RemoteFunctionOptions struct {
	// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
	Connection *string `pulumi:"connection"`
	// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
	Endpoint *string `pulumi:"endpoint"`
	// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
	MaxBatchingRows *string `pulumi:"maxBatchingRows"`
	// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
	UserDefinedContext map[string]string `pulumi:"userDefinedContext"`
}

// RemoteFunctionOptionsInput is an input type that accepts RemoteFunctionOptionsArgs and RemoteFunctionOptionsOutput values.
// You can construct a concrete instance of `RemoteFunctionOptionsInput` via:
//
//	RemoteFunctionOptionsArgs{...}
type RemoteFunctionOptionsInput interface {
	pulumi.Input

	ToRemoteFunctionOptionsOutput() RemoteFunctionOptionsOutput
	ToRemoteFunctionOptionsOutputWithContext(context.Context) RemoteFunctionOptionsOutput
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsArgs struct {
	// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
	MaxBatchingRows pulumi.StringPtrInput `pulumi:"maxBatchingRows"`
	// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
	UserDefinedContext pulumi.StringMapInput `pulumi:"userDefinedContext"`
}

func (RemoteFunctionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteFunctionOptions)(nil)).Elem()
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsOutput() RemoteFunctionOptionsOutput {
	return i.ToRemoteFunctionOptionsOutputWithContext(context.Background())
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsOutputWithContext(ctx context.Context) RemoteFunctionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFunctionOptionsOutput)
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return i.ToRemoteFunctionOptionsPtrOutputWithContext(context.Background())
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFunctionOptionsOutput).ToRemoteFunctionOptionsPtrOutputWithContext(ctx)
}

// RemoteFunctionOptionsPtrInput is an input type that accepts RemoteFunctionOptionsArgs, RemoteFunctionOptionsPtr and RemoteFunctionOptionsPtrOutput values.
// You can construct a concrete instance of `RemoteFunctionOptionsPtrInput` via:
//
//	        RemoteFunctionOptionsArgs{...}
//
//	or:
//
//	        nil
type RemoteFunctionOptionsPtrInput interface {
	pulumi.Input

	ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput
	ToRemoteFunctionOptionsPtrOutputWithContext(context.Context) RemoteFunctionOptionsPtrOutput
}

type remoteFunctionOptionsPtrType RemoteFunctionOptionsArgs

func RemoteFunctionOptionsPtr(v *RemoteFunctionOptionsArgs) RemoteFunctionOptionsPtrInput {
	return (*remoteFunctionOptionsPtrType)(v)
}

func (*remoteFunctionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteFunctionOptions)(nil)).Elem()
}

func (i *remoteFunctionOptionsPtrType) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return i.ToRemoteFunctionOptionsPtrOutputWithContext(context.Background())
}

func (i *remoteFunctionOptionsPtrType) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFunctionOptionsPtrOutput)
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsOutput struct{ *pulumi.OutputState }

func (RemoteFunctionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteFunctionOptions)(nil)).Elem()
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsOutput() RemoteFunctionOptionsOutput {
	return o
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsOutputWithContext(ctx context.Context) RemoteFunctionOptionsOutput {
	return o
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return o.ToRemoteFunctionOptionsPtrOutputWithContext(context.Background())
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteFunctionOptions) *RemoteFunctionOptions {
		return &v
	}).(RemoteFunctionOptionsPtrOutput)
}

// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
func (o RemoteFunctionOptionsOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
func (o RemoteFunctionOptionsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
func (o RemoteFunctionOptionsOutput) MaxBatchingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) *string { return v.MaxBatchingRows }).(pulumi.StringPtrOutput)
}

// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
func (o RemoteFunctionOptionsOutput) UserDefinedContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) map[string]string { return v.UserDefinedContext }).(pulumi.StringMapOutput)
}

type RemoteFunctionOptionsPtrOutput struct{ *pulumi.OutputState }

func (RemoteFunctionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteFunctionOptions)(nil)).Elem()
}

func (o RemoteFunctionOptionsPtrOutput) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return o
}

func (o RemoteFunctionOptionsPtrOutput) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return o
}

func (o RemoteFunctionOptionsPtrOutput) Elem() RemoteFunctionOptionsOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) RemoteFunctionOptions {
		if v != nil {
			return *v
		}
		var ret RemoteFunctionOptions
		return ret
	}).(RemoteFunctionOptionsOutput)
}

// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
func (o RemoteFunctionOptionsPtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
func (o RemoteFunctionOptionsPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
func (o RemoteFunctionOptionsPtrOutput) MaxBatchingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) *string {
		if v == nil {
			return nil
		}
		return v.MaxBatchingRows
	}).(pulumi.StringPtrOutput)
}

// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
func (o RemoteFunctionOptionsPtrOutput) UserDefinedContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.UserDefinedContext
	}).(pulumi.StringMapOutput)
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsResponse struct {
	// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
	Connection string `pulumi:"connection"`
	// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
	Endpoint string `pulumi:"endpoint"`
	// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
	MaxBatchingRows string `pulumi:"maxBatchingRows"`
	// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
	UserDefinedContext map[string]string `pulumi:"userDefinedContext"`
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsResponseOutput struct{ *pulumi.OutputState }

func (RemoteFunctionOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteFunctionOptionsResponse)(nil)).Elem()
}

func (o RemoteFunctionOptionsResponseOutput) ToRemoteFunctionOptionsResponseOutput() RemoteFunctionOptionsResponseOutput {
	return o
}

func (o RemoteFunctionOptionsResponseOutput) ToRemoteFunctionOptionsResponseOutputWithContext(ctx context.Context) RemoteFunctionOptionsResponseOutput {
	return o
}

// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
func (o RemoteFunctionOptionsResponseOutput) Connection() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) string { return v.Connection }).(pulumi.StringOutput)
}

// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
func (o RemoteFunctionOptionsResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
func (o RemoteFunctionOptionsResponseOutput) MaxBatchingRows() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) string { return v.MaxBatchingRows }).(pulumi.StringOutput)
}

// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
func (o RemoteFunctionOptionsResponseOutput) UserDefinedContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) map[string]string { return v.UserDefinedContext }).(pulumi.StringMapOutput)
}

// Id path of a routine.
type RoutineReference struct {
	// The ID of the dataset containing this routine.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this routine.
	Project string `pulumi:"project"`
	// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId string `pulumi:"routineId"`
}

// RoutineReferenceInput is an input type that accepts RoutineReferenceArgs and RoutineReferenceOutput values.
// You can construct a concrete instance of `RoutineReferenceInput` via:
//
//	RoutineReferenceArgs{...}
type RoutineReferenceInput interface {
	pulumi.Input

	ToRoutineReferenceOutput() RoutineReferenceOutput
	ToRoutineReferenceOutputWithContext(context.Context) RoutineReferenceOutput
}

// Id path of a routine.
type RoutineReferenceArgs struct {
	// The ID of the dataset containing this routine.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this routine.
	Project pulumi.StringInput `pulumi:"project"`
	// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId pulumi.StringInput `pulumi:"routineId"`
}

func (RoutineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReference)(nil)).Elem()
}

func (i RoutineReferenceArgs) ToRoutineReferenceOutput() RoutineReferenceOutput {
	return i.ToRoutineReferenceOutputWithContext(context.Background())
}

func (i RoutineReferenceArgs) ToRoutineReferenceOutputWithContext(ctx context.Context) RoutineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferenceOutput)
}

func (i RoutineReferenceArgs) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return i.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (i RoutineReferenceArgs) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferenceOutput).ToRoutineReferencePtrOutputWithContext(ctx)
}

// RoutineReferencePtrInput is an input type that accepts RoutineReferenceArgs, RoutineReferencePtr and RoutineReferencePtrOutput values.
// You can construct a concrete instance of `RoutineReferencePtrInput` via:
//
//	        RoutineReferenceArgs{...}
//
//	or:
//
//	        nil
type RoutineReferencePtrInput interface {
	pulumi.Input

	ToRoutineReferencePtrOutput() RoutineReferencePtrOutput
	ToRoutineReferencePtrOutputWithContext(context.Context) RoutineReferencePtrOutput
}

type routineReferencePtrType RoutineReferenceArgs

func RoutineReferencePtr(v *RoutineReferenceArgs) RoutineReferencePtrInput {
	return (*routineReferencePtrType)(v)
}

func (*routineReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineReference)(nil)).Elem()
}

func (i *routineReferencePtrType) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return i.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (i *routineReferencePtrType) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferencePtrOutput)
}

// Id path of a routine.
type RoutineReferenceOutput struct{ *pulumi.OutputState }

func (RoutineReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReference)(nil)).Elem()
}

func (o RoutineReferenceOutput) ToRoutineReferenceOutput() RoutineReferenceOutput {
	return o
}

func (o RoutineReferenceOutput) ToRoutineReferenceOutputWithContext(ctx context.Context) RoutineReferenceOutput {
	return o
}

func (o RoutineReferenceOutput) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return o.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (o RoutineReferenceOutput) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutineReference) *RoutineReference {
		return &v
	}).(RoutineReferencePtrOutput)
}

// The ID of the dataset containing this routine.
func (o RoutineReferenceOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReference) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this routine.
func (o RoutineReferenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReference) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferenceOutput) RoutineId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReference) string { return v.RoutineId }).(pulumi.StringOutput)
}

type RoutineReferencePtrOutput struct{ *pulumi.OutputState }

func (RoutineReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineReference)(nil)).Elem()
}

func (o RoutineReferencePtrOutput) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return o
}

func (o RoutineReferencePtrOutput) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return o
}

func (o RoutineReferencePtrOutput) Elem() RoutineReferenceOutput {
	return o.ApplyT(func(v *RoutineReference) RoutineReference {
		if v != nil {
			return *v
		}
		var ret RoutineReference
		return ret
	}).(RoutineReferenceOutput)
}

// The ID of the dataset containing this routine.
func (o RoutineReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this routine.
func (o RoutineReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferencePtrOutput) RoutineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return &v.RoutineId
	}).(pulumi.StringPtrOutput)
}

// Id path of a routine.
type RoutineReferenceResponse struct {
	// The ID of the dataset containing this routine.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this routine.
	Project string `pulumi:"project"`
	// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId string `pulumi:"routineId"`
}

// Id path of a routine.
type RoutineReferenceResponseOutput struct{ *pulumi.OutputState }

func (RoutineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReferenceResponse)(nil)).Elem()
}

func (o RoutineReferenceResponseOutput) ToRoutineReferenceResponseOutput() RoutineReferenceResponseOutput {
	return o
}

func (o RoutineReferenceResponseOutput) ToRoutineReferenceResponseOutputWithContext(ctx context.Context) RoutineReferenceResponseOutput {
	return o
}

// The ID of the dataset containing this routine.
func (o RoutineReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this routine.
func (o RoutineReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferenceResponseOutput) RoutineId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReferenceResponse) string { return v.RoutineId }).(pulumi.StringOutput)
}

type RoutineReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (RoutineReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutineReferenceResponse)(nil)).Elem()
}

func (o RoutineReferenceResponseArrayOutput) ToRoutineReferenceResponseArrayOutput() RoutineReferenceResponseArrayOutput {
	return o
}

func (o RoutineReferenceResponseArrayOutput) ToRoutineReferenceResponseArrayOutputWithContext(ctx context.Context) RoutineReferenceResponseArrayOutput {
	return o
}

func (o RoutineReferenceResponseArrayOutput) Index(i pulumi.IntInput) RoutineReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutineReferenceResponse {
		return vs[0].([]RoutineReferenceResponse)[vs[1].(int)]
	}).(RoutineReferenceResponseOutput)
}

// Id path of a row access policy.
type RowAccessPolicyReferenceResponse struct {
	// The ID of the dataset containing this row access policy.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	PolicyId string `pulumi:"policyId"`
	// The ID of the project containing this row access policy.
	Project string `pulumi:"project"`
	// The ID of the table containing this row access policy.
	TableId string `pulumi:"tableId"`
}

// Id path of a row access policy.
type RowAccessPolicyReferenceResponseOutput struct{ *pulumi.OutputState }

func (RowAccessPolicyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowAccessPolicyReferenceResponse)(nil)).Elem()
}

func (o RowAccessPolicyReferenceResponseOutput) ToRowAccessPolicyReferenceResponseOutput() RowAccessPolicyReferenceResponseOutput {
	return o
}

func (o RowAccessPolicyReferenceResponseOutput) ToRowAccessPolicyReferenceResponseOutputWithContext(ctx context.Context) RowAccessPolicyReferenceResponseOutput {
	return o
}

// The ID of the dataset containing this row access policy.
func (o RowAccessPolicyReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RowAccessPolicyReferenceResponseOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.PolicyId }).(pulumi.StringOutput)
}

// The ID of the project containing this row access policy.
func (o RowAccessPolicyReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the table containing this row access policy.
func (o RowAccessPolicyReferenceResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.TableId }).(pulumi.StringOutput)
}

// Statistics for row-level security.
type RowLevelSecurityStatisticsResponse struct {
	// Whether any accessed data was protected by row access policies.
	RowLevelSecurityApplied bool `pulumi:"rowLevelSecurityApplied"`
}

// Statistics for row-level security.
type RowLevelSecurityStatisticsResponseOutput struct{ *pulumi.OutputState }

func (RowLevelSecurityStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowLevelSecurityStatisticsResponse)(nil)).Elem()
}

func (o RowLevelSecurityStatisticsResponseOutput) ToRowLevelSecurityStatisticsResponseOutput() RowLevelSecurityStatisticsResponseOutput {
	return o
}

func (o RowLevelSecurityStatisticsResponseOutput) ToRowLevelSecurityStatisticsResponseOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsResponseOutput {
	return o
}

// Whether any accessed data was protected by row access policies.
func (o RowLevelSecurityStatisticsResponseOutput) RowLevelSecurityApplied() pulumi.BoolOutput {
	return o.ApplyT(func(v RowLevelSecurityStatisticsResponse) bool { return v.RowLevelSecurityApplied }).(pulumi.BoolOutput)
}

// A single row in the confusion matrix.
type RowResponse struct {
	// The original label of this row.
	ActualLabel string `pulumi:"actualLabel"`
	// Info describing predicted label distribution.
	Entries []EntryResponse `pulumi:"entries"`
}

// A single row in the confusion matrix.
type RowResponseOutput struct{ *pulumi.OutputState }

func (RowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowResponse)(nil)).Elem()
}

func (o RowResponseOutput) ToRowResponseOutput() RowResponseOutput {
	return o
}

func (o RowResponseOutput) ToRowResponseOutputWithContext(ctx context.Context) RowResponseOutput {
	return o
}

// The original label of this row.
func (o RowResponseOutput) ActualLabel() pulumi.StringOutput {
	return o.ApplyT(func(v RowResponse) string { return v.ActualLabel }).(pulumi.StringOutput)
}

// Info describing predicted label distribution.
func (o RowResponseOutput) Entries() EntryResponseArrayOutput {
	return o.ApplyT(func(v RowResponse) []EntryResponse { return v.Entries }).(EntryResponseArrayOutput)
}

type RowResponseArrayOutput struct{ *pulumi.OutputState }

func (RowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RowResponse)(nil)).Elem()
}

func (o RowResponseArrayOutput) ToRowResponseArrayOutput() RowResponseArrayOutput {
	return o
}

func (o RowResponseArrayOutput) ToRowResponseArrayOutputWithContext(ctx context.Context) RowResponseArrayOutput {
	return o
}

func (o RowResponseArrayOutput) Index(i pulumi.IntInput) RowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RowResponse {
		return vs[0].([]RowResponse)[vs[1].(int)]
	}).(RowResponseOutput)
}

// Options related to script execution.
type ScriptOptions struct {
	// Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
	KeyResultStatement *ScriptOptionsKeyResultStatement `pulumi:"keyResultStatement"`
	// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
	StatementByteBudget *string `pulumi:"statementByteBudget"`
	// Timeout period for each statement in a script.
	StatementTimeoutMs *string `pulumi:"statementTimeoutMs"`
}

// ScriptOptionsInput is an input type that accepts ScriptOptionsArgs and ScriptOptionsOutput values.
// You can construct a concrete instance of `ScriptOptionsInput` via:
//
//	ScriptOptionsArgs{...}
type ScriptOptionsInput interface {
	pulumi.Input

	ToScriptOptionsOutput() ScriptOptionsOutput
	ToScriptOptionsOutputWithContext(context.Context) ScriptOptionsOutput
}

// Options related to script execution.
type ScriptOptionsArgs struct {
	// Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
	KeyResultStatement ScriptOptionsKeyResultStatementPtrInput `pulumi:"keyResultStatement"`
	// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
	StatementByteBudget pulumi.StringPtrInput `pulumi:"statementByteBudget"`
	// Timeout period for each statement in a script.
	StatementTimeoutMs pulumi.StringPtrInput `pulumi:"statementTimeoutMs"`
}

func (ScriptOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptOptions)(nil)).Elem()
}

func (i ScriptOptionsArgs) ToScriptOptionsOutput() ScriptOptionsOutput {
	return i.ToScriptOptionsOutputWithContext(context.Background())
}

func (i ScriptOptionsArgs) ToScriptOptionsOutputWithContext(ctx context.Context) ScriptOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptOptionsOutput)
}

func (i ScriptOptionsArgs) ToScriptOptionsPtrOutput() ScriptOptionsPtrOutput {
	return i.ToScriptOptionsPtrOutputWithContext(context.Background())
}

func (i ScriptOptionsArgs) ToScriptOptionsPtrOutputWithContext(ctx context.Context) ScriptOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptOptionsOutput).ToScriptOptionsPtrOutputWithContext(ctx)
}

// ScriptOptionsPtrInput is an input type that accepts ScriptOptionsArgs, ScriptOptionsPtr and ScriptOptionsPtrOutput values.
// You can construct a concrete instance of `ScriptOptionsPtrInput` via:
//
//	        ScriptOptionsArgs{...}
//
//	or:
//
//	        nil
type ScriptOptionsPtrInput interface {
	pulumi.Input

	ToScriptOptionsPtrOutput() ScriptOptionsPtrOutput
	ToScriptOptionsPtrOutputWithContext(context.Context) ScriptOptionsPtrOutput
}

type scriptOptionsPtrType ScriptOptionsArgs

func ScriptOptionsPtr(v *ScriptOptionsArgs) ScriptOptionsPtrInput {
	return (*scriptOptionsPtrType)(v)
}

func (*scriptOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptOptions)(nil)).Elem()
}

func (i *scriptOptionsPtrType) ToScriptOptionsPtrOutput() ScriptOptionsPtrOutput {
	return i.ToScriptOptionsPtrOutputWithContext(context.Background())
}

func (i *scriptOptionsPtrType) ToScriptOptionsPtrOutputWithContext(ctx context.Context) ScriptOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScriptOptionsPtrOutput)
}

// Options related to script execution.
type ScriptOptionsOutput struct{ *pulumi.OutputState }

func (ScriptOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptOptions)(nil)).Elem()
}

func (o ScriptOptionsOutput) ToScriptOptionsOutput() ScriptOptionsOutput {
	return o
}

func (o ScriptOptionsOutput) ToScriptOptionsOutputWithContext(ctx context.Context) ScriptOptionsOutput {
	return o
}

func (o ScriptOptionsOutput) ToScriptOptionsPtrOutput() ScriptOptionsPtrOutput {
	return o.ToScriptOptionsPtrOutputWithContext(context.Background())
}

func (o ScriptOptionsOutput) ToScriptOptionsPtrOutputWithContext(ctx context.Context) ScriptOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScriptOptions) *ScriptOptions {
		return &v
	}).(ScriptOptionsPtrOutput)
}

// Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
func (o ScriptOptionsOutput) KeyResultStatement() ScriptOptionsKeyResultStatementPtrOutput {
	return o.ApplyT(func(v ScriptOptions) *ScriptOptionsKeyResultStatement { return v.KeyResultStatement }).(ScriptOptionsKeyResultStatementPtrOutput)
}

// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
func (o ScriptOptionsOutput) StatementByteBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptOptions) *string { return v.StatementByteBudget }).(pulumi.StringPtrOutput)
}

// Timeout period for each statement in a script.
func (o ScriptOptionsOutput) StatementTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ScriptOptions) *string { return v.StatementTimeoutMs }).(pulumi.StringPtrOutput)
}

type ScriptOptionsPtrOutput struct{ *pulumi.OutputState }

func (ScriptOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScriptOptions)(nil)).Elem()
}

func (o ScriptOptionsPtrOutput) ToScriptOptionsPtrOutput() ScriptOptionsPtrOutput {
	return o
}

func (o ScriptOptionsPtrOutput) ToScriptOptionsPtrOutputWithContext(ctx context.Context) ScriptOptionsPtrOutput {
	return o
}

func (o ScriptOptionsPtrOutput) Elem() ScriptOptionsOutput {
	return o.ApplyT(func(v *ScriptOptions) ScriptOptions {
		if v != nil {
			return *v
		}
		var ret ScriptOptions
		return ret
	}).(ScriptOptionsOutput)
}

// Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
func (o ScriptOptionsPtrOutput) KeyResultStatement() ScriptOptionsKeyResultStatementPtrOutput {
	return o.ApplyT(func(v *ScriptOptions) *ScriptOptionsKeyResultStatement {
		if v == nil {
			return nil
		}
		return v.KeyResultStatement
	}).(ScriptOptionsKeyResultStatementPtrOutput)
}

// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
func (o ScriptOptionsPtrOutput) StatementByteBudget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptOptions) *string {
		if v == nil {
			return nil
		}
		return v.StatementByteBudget
	}).(pulumi.StringPtrOutput)
}

// Timeout period for each statement in a script.
func (o ScriptOptionsPtrOutput) StatementTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScriptOptions) *string {
		if v == nil {
			return nil
		}
		return v.StatementTimeoutMs
	}).(pulumi.StringPtrOutput)
}

// Options related to script execution.
type ScriptOptionsResponse struct {
	// Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
	KeyResultStatement string `pulumi:"keyResultStatement"`
	// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
	StatementByteBudget string `pulumi:"statementByteBudget"`
	// Timeout period for each statement in a script.
	StatementTimeoutMs string `pulumi:"statementTimeoutMs"`
}

// Options related to script execution.
type ScriptOptionsResponseOutput struct{ *pulumi.OutputState }

func (ScriptOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptOptionsResponse)(nil)).Elem()
}

func (o ScriptOptionsResponseOutput) ToScriptOptionsResponseOutput() ScriptOptionsResponseOutput {
	return o
}

func (o ScriptOptionsResponseOutput) ToScriptOptionsResponseOutputWithContext(ctx context.Context) ScriptOptionsResponseOutput {
	return o
}

// Determines which statement in the script represents the "key result", used to populate the schema and query results of the script job. Default is LAST.
func (o ScriptOptionsResponseOutput) KeyResultStatement() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptOptionsResponse) string { return v.KeyResultStatement }).(pulumi.StringOutput)
}

// Limit on the number of bytes billed per statement. Exceeding this budget results in an error.
func (o ScriptOptionsResponseOutput) StatementByteBudget() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptOptionsResponse) string { return v.StatementByteBudget }).(pulumi.StringOutput)
}

// Timeout period for each statement in a script.
func (o ScriptOptionsResponseOutput) StatementTimeoutMs() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptOptionsResponse) string { return v.StatementTimeoutMs }).(pulumi.StringOutput)
}

// Represents the location of the statement/expression being evaluated. Line and column numbers are defined as follows: - Line and column numbers start with one. That is, line 1 column 1 denotes the start of the script. - When inside a stored procedure, all line/column numbers are relative to the procedure body, not the script in which the procedure was defined. - Start/end positions exclude leading/trailing comments and whitespace. The end position always ends with a ";", when present. - Multi-byte Unicode characters are treated as just one column. - If the original script (or procedure definition) contains TAB characters, a tab "snaps" the indentation forward to the nearest multiple of 8 characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column 9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next character to column 17.
type ScriptStackFrameResponse struct {
	// One-based end column.
	EndColumn int `pulumi:"endColumn"`
	// One-based end line.
	EndLine int `pulumi:"endLine"`
	// Name of the active procedure, empty if in a top-level script.
	ProcedureId string `pulumi:"procedureId"`
	// One-based start column.
	StartColumn int `pulumi:"startColumn"`
	// One-based start line.
	StartLine int `pulumi:"startLine"`
	// Text of the current statement/expression.
	Text string `pulumi:"text"`
}

// Represents the location of the statement/expression being evaluated. Line and column numbers are defined as follows: - Line and column numbers start with one. That is, line 1 column 1 denotes the start of the script. - When inside a stored procedure, all line/column numbers are relative to the procedure body, not the script in which the procedure was defined. - Start/end positions exclude leading/trailing comments and whitespace. The end position always ends with a ";", when present. - Multi-byte Unicode characters are treated as just one column. - If the original script (or procedure definition) contains TAB characters, a tab "snaps" the indentation forward to the nearest multiple of 8 characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8 will advance the next character to column 9. A TAB on column 9, 10, 11, 12, 13, 14, 15, or 16 will advance the next character to column 17.
type ScriptStackFrameResponseOutput struct{ *pulumi.OutputState }

func (ScriptStackFrameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStackFrameResponse)(nil)).Elem()
}

func (o ScriptStackFrameResponseOutput) ToScriptStackFrameResponseOutput() ScriptStackFrameResponseOutput {
	return o
}

func (o ScriptStackFrameResponseOutput) ToScriptStackFrameResponseOutputWithContext(ctx context.Context) ScriptStackFrameResponseOutput {
	return o
}

// One-based end column.
func (o ScriptStackFrameResponseOutput) EndColumn() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.EndColumn }).(pulumi.IntOutput)
}

// One-based end line.
func (o ScriptStackFrameResponseOutput) EndLine() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.EndLine }).(pulumi.IntOutput)
}

// Name of the active procedure, empty if in a top-level script.
func (o ScriptStackFrameResponseOutput) ProcedureId() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) string { return v.ProcedureId }).(pulumi.StringOutput)
}

// One-based start column.
func (o ScriptStackFrameResponseOutput) StartColumn() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.StartColumn }).(pulumi.IntOutput)
}

// One-based start line.
func (o ScriptStackFrameResponseOutput) StartLine() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.StartLine }).(pulumi.IntOutput)
}

// Text of the current statement/expression.
func (o ScriptStackFrameResponseOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) string { return v.Text }).(pulumi.StringOutput)
}

type ScriptStackFrameResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptStackFrameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptStackFrameResponse)(nil)).Elem()
}

func (o ScriptStackFrameResponseArrayOutput) ToScriptStackFrameResponseArrayOutput() ScriptStackFrameResponseArrayOutput {
	return o
}

func (o ScriptStackFrameResponseArrayOutput) ToScriptStackFrameResponseArrayOutputWithContext(ctx context.Context) ScriptStackFrameResponseArrayOutput {
	return o
}

func (o ScriptStackFrameResponseArrayOutput) Index(i pulumi.IntInput) ScriptStackFrameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptStackFrameResponse {
		return vs[0].([]ScriptStackFrameResponse)[vs[1].(int)]
	}).(ScriptStackFrameResponseOutput)
}

// Job statistics specific to the child job of a script.
type ScriptStatisticsResponse struct {
	// Whether this child job was a statement or expression.
	EvaluationKind string `pulumi:"evaluationKind"`
	// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
	StackFrames []ScriptStackFrameResponse `pulumi:"stackFrames"`
}

// Job statistics specific to the child job of a script.
type ScriptStatisticsResponseOutput struct{ *pulumi.OutputState }

func (ScriptStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStatisticsResponse)(nil)).Elem()
}

func (o ScriptStatisticsResponseOutput) ToScriptStatisticsResponseOutput() ScriptStatisticsResponseOutput {
	return o
}

func (o ScriptStatisticsResponseOutput) ToScriptStatisticsResponseOutputWithContext(ctx context.Context) ScriptStatisticsResponseOutput {
	return o
}

// Whether this child job was a statement or expression.
func (o ScriptStatisticsResponseOutput) EvaluationKind() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStatisticsResponse) string { return v.EvaluationKind }).(pulumi.StringOutput)
}

// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
func (o ScriptStatisticsResponseOutput) StackFrames() ScriptStackFrameResponseArrayOutput {
	return o.ApplyT(func(v ScriptStatisticsResponse) []ScriptStackFrameResponse { return v.StackFrames }).(ScriptStackFrameResponseArrayOutput)
}

// Statistics for a search query. Populated as part of JobStatistics2.
type SearchStatisticsResponse struct {
	// When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.
	IndexUnusedReasons []IndexUnusedReasonResponse `pulumi:"indexUnusedReasons"`
	// Specifies the index usage mode for the query.
	IndexUsageMode string `pulumi:"indexUsageMode"`
}

// Statistics for a search query. Populated as part of JobStatistics2.
type SearchStatisticsResponseOutput struct{ *pulumi.OutputState }

func (SearchStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchStatisticsResponse)(nil)).Elem()
}

func (o SearchStatisticsResponseOutput) ToSearchStatisticsResponseOutput() SearchStatisticsResponseOutput {
	return o
}

func (o SearchStatisticsResponseOutput) ToSearchStatisticsResponseOutputWithContext(ctx context.Context) SearchStatisticsResponseOutput {
	return o
}

// When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.
func (o SearchStatisticsResponseOutput) IndexUnusedReasons() IndexUnusedReasonResponseArrayOutput {
	return o.ApplyT(func(v SearchStatisticsResponse) []IndexUnusedReasonResponse { return v.IndexUnusedReasons }).(IndexUnusedReasonResponseArrayOutput)
}

// Specifies the index usage mode for the query.
func (o SearchStatisticsResponseOutput) IndexUsageMode() pulumi.StringOutput {
	return o.ApplyT(func(v SearchStatisticsResponse) string { return v.IndexUsageMode }).(pulumi.StringOutput)
}

// [Preview] Information related to sessions.
type SessionInfoResponse struct {
	// The id of the session.
	SessionId string `pulumi:"sessionId"`
}

// [Preview] Information related to sessions.
type SessionInfoResponseOutput struct{ *pulumi.OutputState }

func (SessionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionInfoResponse)(nil)).Elem()
}

func (o SessionInfoResponseOutput) ToSessionInfoResponseOutput() SessionInfoResponseOutput {
	return o
}

func (o SessionInfoResponseOutput) ToSessionInfoResponseOutputWithContext(ctx context.Context) SessionInfoResponseOutput {
	return o
}

// The id of the session.
func (o SessionInfoResponseOutput) SessionId() pulumi.StringOutput {
	return o.ApplyT(func(v SessionInfoResponse) string { return v.SessionId }).(pulumi.StringOutput)
}

// Information about base table and snapshot time of the snapshot.
type SnapshotDefinitionResponse struct {
	// Reference describing the ID of the table that was snapshot.
	BaseTableReference TableReferenceResponse `pulumi:"baseTableReference"`
	// The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format.
	SnapshotTime string `pulumi:"snapshotTime"`
}

// Information about base table and snapshot time of the snapshot.
type SnapshotDefinitionResponseOutput struct{ *pulumi.OutputState }

func (SnapshotDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotDefinitionResponse)(nil)).Elem()
}

func (o SnapshotDefinitionResponseOutput) ToSnapshotDefinitionResponseOutput() SnapshotDefinitionResponseOutput {
	return o
}

func (o SnapshotDefinitionResponseOutput) ToSnapshotDefinitionResponseOutputWithContext(ctx context.Context) SnapshotDefinitionResponseOutput {
	return o
}

// Reference describing the ID of the table that was snapshot.
func (o SnapshotDefinitionResponseOutput) BaseTableReference() TableReferenceResponseOutput {
	return o.ApplyT(func(v SnapshotDefinitionResponse) TableReferenceResponse { return v.BaseTableReference }).(TableReferenceResponseOutput)
}

// The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format.
func (o SnapshotDefinitionResponseOutput) SnapshotTime() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotDefinitionResponse) string { return v.SnapshotTime }).(pulumi.StringOutput)
}

// Spark job logs can be filtered by these fields in Cloud Logging.
type SparkLoggingInfoResponse struct {
	// Project ID where the Spark logs were written.
	Project string `pulumi:"project"`
	// Resource type used for logging.
	ResourceType string `pulumi:"resourceType"`
}

// Spark job logs can be filtered by these fields in Cloud Logging.
type SparkLoggingInfoResponseOutput struct{ *pulumi.OutputState }

func (SparkLoggingInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLoggingInfoResponse)(nil)).Elem()
}

func (o SparkLoggingInfoResponseOutput) ToSparkLoggingInfoResponseOutput() SparkLoggingInfoResponseOutput {
	return o
}

func (o SparkLoggingInfoResponseOutput) ToSparkLoggingInfoResponseOutputWithContext(ctx context.Context) SparkLoggingInfoResponseOutput {
	return o
}

// Project ID where the Spark logs were written.
func (o SparkLoggingInfoResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLoggingInfoResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Resource type used for logging.
func (o SparkLoggingInfoResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLoggingInfoResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Options for a user-defined Spark routine.
type SparkOptions struct {
	// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	ArchiveUris []string `pulumi:"archiveUris"`
	// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	Connection *string `pulumi:"connection"`
	// Custom container image for the runtime environment.
	ContainerImage *string `pulumi:"containerImage"`
	// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	FileUris []string `pulumi:"fileUris"`
	// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	JarUris []string `pulumi:"jarUris"`
	// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
	MainClass *string `pulumi:"mainClass"`
	// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
	MainFileUri *string `pulumi:"mainFileUri"`
	// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
	Properties map[string]string `pulumi:"properties"`
	// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	PyFileUris []string `pulumi:"pyFileUris"`
	// Runtime version. If not specified, the default runtime version is used.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// SparkOptionsInput is an input type that accepts SparkOptionsArgs and SparkOptionsOutput values.
// You can construct a concrete instance of `SparkOptionsInput` via:
//
//	SparkOptionsArgs{...}
type SparkOptionsInput interface {
	pulumi.Input

	ToSparkOptionsOutput() SparkOptionsOutput
	ToSparkOptionsOutputWithContext(context.Context) SparkOptionsOutput
}

// Options for a user-defined Spark routine.
type SparkOptionsArgs struct {
	// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	ArchiveUris pulumi.StringArrayInput `pulumi:"archiveUris"`
	// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// Custom container image for the runtime environment.
	ContainerImage pulumi.StringPtrInput `pulumi:"containerImage"`
	// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	FileUris pulumi.StringArrayInput `pulumi:"fileUris"`
	// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	JarUris pulumi.StringArrayInput `pulumi:"jarUris"`
	// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
	MainClass pulumi.StringPtrInput `pulumi:"mainClass"`
	// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
	MainFileUri pulumi.StringPtrInput `pulumi:"mainFileUri"`
	// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	PyFileUris pulumi.StringArrayInput `pulumi:"pyFileUris"`
	// Runtime version. If not specified, the default runtime version is used.
	RuntimeVersion pulumi.StringPtrInput `pulumi:"runtimeVersion"`
}

func (SparkOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkOptions)(nil)).Elem()
}

func (i SparkOptionsArgs) ToSparkOptionsOutput() SparkOptionsOutput {
	return i.ToSparkOptionsOutputWithContext(context.Background())
}

func (i SparkOptionsArgs) ToSparkOptionsOutputWithContext(ctx context.Context) SparkOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkOptionsOutput)
}

func (i SparkOptionsArgs) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return i.ToSparkOptionsPtrOutputWithContext(context.Background())
}

func (i SparkOptionsArgs) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkOptionsOutput).ToSparkOptionsPtrOutputWithContext(ctx)
}

// SparkOptionsPtrInput is an input type that accepts SparkOptionsArgs, SparkOptionsPtr and SparkOptionsPtrOutput values.
// You can construct a concrete instance of `SparkOptionsPtrInput` via:
//
//	        SparkOptionsArgs{...}
//
//	or:
//
//	        nil
type SparkOptionsPtrInput interface {
	pulumi.Input

	ToSparkOptionsPtrOutput() SparkOptionsPtrOutput
	ToSparkOptionsPtrOutputWithContext(context.Context) SparkOptionsPtrOutput
}

type sparkOptionsPtrType SparkOptionsArgs

func SparkOptionsPtr(v *SparkOptionsArgs) SparkOptionsPtrInput {
	return (*sparkOptionsPtrType)(v)
}

func (*sparkOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkOptions)(nil)).Elem()
}

func (i *sparkOptionsPtrType) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return i.ToSparkOptionsPtrOutputWithContext(context.Background())
}

func (i *sparkOptionsPtrType) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkOptionsPtrOutput)
}

// Options for a user-defined Spark routine.
type SparkOptionsOutput struct{ *pulumi.OutputState }

func (SparkOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkOptions)(nil)).Elem()
}

func (o SparkOptionsOutput) ToSparkOptionsOutput() SparkOptionsOutput {
	return o
}

func (o SparkOptionsOutput) ToSparkOptionsOutputWithContext(ctx context.Context) SparkOptionsOutput {
	return o
}

func (o SparkOptionsOutput) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return o.ToSparkOptionsPtrOutputWithContext(context.Background())
}

func (o SparkOptionsOutput) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkOptions) *SparkOptions {
		return &v
	}).(SparkOptionsPtrOutput)
}

// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) ArchiveUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.ArchiveUris }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
func (o SparkOptionsOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// Custom container image for the runtime environment.
func (o SparkOptionsOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.ContainerImage }).(pulumi.StringPtrOutput)
}

// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) FileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.FileUris }).(pulumi.StringArrayOutput)
}

// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) JarUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.JarUris }).(pulumi.StringArrayOutput)
}

// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
func (o SparkOptionsOutput) MainClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.MainClass }).(pulumi.StringPtrOutput)
}

// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
func (o SparkOptionsOutput) MainFileUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.MainFileUri }).(pulumi.StringPtrOutput)
}

// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
func (o SparkOptionsOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkOptions) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) PyFileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.PyFileUris }).(pulumi.StringArrayOutput)
}

// Runtime version. If not specified, the default runtime version is used.
func (o SparkOptionsOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type SparkOptionsPtrOutput struct{ *pulumi.OutputState }

func (SparkOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkOptions)(nil)).Elem()
}

func (o SparkOptionsPtrOutput) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return o
}

func (o SparkOptionsPtrOutput) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return o
}

func (o SparkOptionsPtrOutput) Elem() SparkOptionsOutput {
	return o.ApplyT(func(v *SparkOptions) SparkOptions {
		if v != nil {
			return *v
		}
		var ret SparkOptions
		return ret
	}).(SparkOptionsOutput)
}

// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) ArchiveUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.ArchiveUris
	}).(pulumi.StringArrayOutput)
}

// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
func (o SparkOptionsPtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// Custom container image for the runtime environment.
func (o SparkOptionsPtrOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.ContainerImage
	}).(pulumi.StringPtrOutput)
}

// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) FileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.FileUris
	}).(pulumi.StringArrayOutput)
}

// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) JarUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.JarUris
	}).(pulumi.StringArrayOutput)
}

// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
func (o SparkOptionsPtrOutput) MainClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.MainClass
	}).(pulumi.StringPtrOutput)
}

// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
func (o SparkOptionsPtrOutput) MainFileUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.MainFileUri
	}).(pulumi.StringPtrOutput)
}

// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
func (o SparkOptionsPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SparkOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) PyFileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.PyFileUris
	}).(pulumi.StringArrayOutput)
}

// Runtime version. If not specified, the default runtime version is used.
func (o SparkOptionsPtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// Options for a user-defined Spark routine.
type SparkOptionsResponse struct {
	// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	ArchiveUris []string `pulumi:"archiveUris"`
	// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	Connection string `pulumi:"connection"`
	// Custom container image for the runtime environment.
	ContainerImage string `pulumi:"containerImage"`
	// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	FileUris []string `pulumi:"fileUris"`
	// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	JarUris []string `pulumi:"jarUris"`
	// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
	MainClass string `pulumi:"mainClass"`
	// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
	MainFileUri string `pulumi:"mainFileUri"`
	// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
	Properties map[string]string `pulumi:"properties"`
	// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	PyFileUris []string `pulumi:"pyFileUris"`
	// Runtime version. If not specified, the default runtime version is used.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

// Options for a user-defined Spark routine.
type SparkOptionsResponseOutput struct{ *pulumi.OutputState }

func (SparkOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkOptionsResponse)(nil)).Elem()
}

func (o SparkOptionsResponseOutput) ToSparkOptionsResponseOutput() SparkOptionsResponseOutput {
	return o
}

func (o SparkOptionsResponseOutput) ToSparkOptionsResponseOutputWithContext(ctx context.Context) SparkOptionsResponseOutput {
	return o
}

// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) ArchiveUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.ArchiveUris }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
func (o SparkOptionsResponseOutput) Connection() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.Connection }).(pulumi.StringOutput)
}

// Custom container image for the runtime environment.
func (o SparkOptionsResponseOutput) ContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.ContainerImage }).(pulumi.StringOutput)
}

// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) FileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.FileUris }).(pulumi.StringArrayOutput)
}

// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) JarUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.JarUris }).(pulumi.StringArrayOutput)
}

// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
func (o SparkOptionsResponseOutput) MainClass() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.MainClass }).(pulumi.StringOutput)
}

// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
func (o SparkOptionsResponseOutput) MainFileUri() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.MainFileUri }).(pulumi.StringOutput)
}

// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
func (o SparkOptionsResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkOptionsResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) PyFileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.PyFileUris }).(pulumi.StringArrayOutput)
}

// Runtime version. If not specified, the default runtime version is used.
func (o SparkOptionsResponseOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

// Statistics for a BigSpark query. Populated as part of JobStatistics2
type SparkStatisticsResponse struct {
	// Endpoints returned from Dataproc. Key list: - history_server_endpoint: A link to Spark job UI.
	Endpoints map[string]string `pulumi:"endpoints"`
	// The Google Cloud Storage bucket that is used as the default file system by the Spark application. This field is only filled when the Spark procedure uses the invoker security mode. The `gcsStagingBucket` bucket is inferred from the `@@spark_proc_properties.staging_bucket` system variable (if it is provided). Otherwise, BigQuery creates a default staging bucket for the job and returns the bucket name in this field. Example: * `gs://[bucket_name]`
	GcsStagingBucket string `pulumi:"gcsStagingBucket"`
	// The Cloud KMS encryption key that is used to protect the resources created by the Spark job. If the Spark procedure uses the invoker security mode, the Cloud KMS encryption key is either inferred from the provided system variable, `@@spark_proc_properties.kms_key_name`, or the default key of the BigQuery job's project (if the CMEK organization policy is enforced). Otherwise, the Cloud KMS key is either inferred from the Spark connection associated with the procedure (if it is provided), or from the default key of the Spark connection's project if the CMEK organization policy is enforced. Example: * `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Logging info is used to generate a link to Cloud Logging.
	LoggingInfo SparkLoggingInfoResponse `pulumi:"loggingInfo"`
	// Spark job ID if a Spark job is created successfully.
	SparkJobId string `pulumi:"sparkJobId"`
	// Location where the Spark job is executed. A location is selected by BigQueury for jobs configured to run in a multi-region.
	SparkJobLocation string `pulumi:"sparkJobLocation"`
}

// Statistics for a BigSpark query. Populated as part of JobStatistics2
type SparkStatisticsResponseOutput struct{ *pulumi.OutputState }

func (SparkStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkStatisticsResponse)(nil)).Elem()
}

func (o SparkStatisticsResponseOutput) ToSparkStatisticsResponseOutput() SparkStatisticsResponseOutput {
	return o
}

func (o SparkStatisticsResponseOutput) ToSparkStatisticsResponseOutputWithContext(ctx context.Context) SparkStatisticsResponseOutput {
	return o
}

// Endpoints returned from Dataproc. Key list: - history_server_endpoint: A link to Spark job UI.
func (o SparkStatisticsResponseOutput) Endpoints() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) map[string]string { return v.Endpoints }).(pulumi.StringMapOutput)
}

// The Google Cloud Storage bucket that is used as the default file system by the Spark application. This field is only filled when the Spark procedure uses the invoker security mode. The `gcsStagingBucket` bucket is inferred from the `@@spark_proc_properties.staging_bucket` system variable (if it is provided). Otherwise, BigQuery creates a default staging bucket for the job and returns the bucket name in this field. Example: * `gs://[bucket_name]`
func (o SparkStatisticsResponseOutput) GcsStagingBucket() pulumi.StringOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) string { return v.GcsStagingBucket }).(pulumi.StringOutput)
}

// The Cloud KMS encryption key that is used to protect the resources created by the Spark job. If the Spark procedure uses the invoker security mode, the Cloud KMS encryption key is either inferred from the provided system variable, `@@spark_proc_properties.kms_key_name`, or the default key of the BigQuery job's project (if the CMEK organization policy is enforced). Otherwise, the Cloud KMS key is either inferred from the Spark connection associated with the procedure (if it is provided), or from the default key of the Spark connection's project if the CMEK organization policy is enforced. Example: * `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
func (o SparkStatisticsResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Logging info is used to generate a link to Cloud Logging.
func (o SparkStatisticsResponseOutput) LoggingInfo() SparkLoggingInfoResponseOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) SparkLoggingInfoResponse { return v.LoggingInfo }).(SparkLoggingInfoResponseOutput)
}

// Spark job ID if a Spark job is created successfully.
func (o SparkStatisticsResponseOutput) SparkJobId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) string { return v.SparkJobId }).(pulumi.StringOutput)
}

// Location where the Spark job is executed. A location is selected by BigQueury for jobs configured to run in a multi-region.
func (o SparkStatisticsResponseOutput) SparkJobLocation() pulumi.StringOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) string { return v.SparkJobLocation }).(pulumi.StringOutput)
}

// Performance insights compared to the previous executions for a specific stage.
type StagePerformanceChangeInsightResponse struct {
	// Input data change insight of the query stage.
	InputDataChange InputDataChangeResponse `pulumi:"inputDataChange"`
	// The stage id that the insight mapped to.
	StageId string `pulumi:"stageId"`
}

// Performance insights compared to the previous executions for a specific stage.
type StagePerformanceChangeInsightResponseOutput struct{ *pulumi.OutputState }

func (StagePerformanceChangeInsightResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StagePerformanceChangeInsightResponse)(nil)).Elem()
}

func (o StagePerformanceChangeInsightResponseOutput) ToStagePerformanceChangeInsightResponseOutput() StagePerformanceChangeInsightResponseOutput {
	return o
}

func (o StagePerformanceChangeInsightResponseOutput) ToStagePerformanceChangeInsightResponseOutputWithContext(ctx context.Context) StagePerformanceChangeInsightResponseOutput {
	return o
}

// Input data change insight of the query stage.
func (o StagePerformanceChangeInsightResponseOutput) InputDataChange() InputDataChangeResponseOutput {
	return o.ApplyT(func(v StagePerformanceChangeInsightResponse) InputDataChangeResponse { return v.InputDataChange }).(InputDataChangeResponseOutput)
}

// The stage id that the insight mapped to.
func (o StagePerformanceChangeInsightResponseOutput) StageId() pulumi.StringOutput {
	return o.ApplyT(func(v StagePerformanceChangeInsightResponse) string { return v.StageId }).(pulumi.StringOutput)
}

type StagePerformanceChangeInsightResponseArrayOutput struct{ *pulumi.OutputState }

func (StagePerformanceChangeInsightResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StagePerformanceChangeInsightResponse)(nil)).Elem()
}

func (o StagePerformanceChangeInsightResponseArrayOutput) ToStagePerformanceChangeInsightResponseArrayOutput() StagePerformanceChangeInsightResponseArrayOutput {
	return o
}

func (o StagePerformanceChangeInsightResponseArrayOutput) ToStagePerformanceChangeInsightResponseArrayOutputWithContext(ctx context.Context) StagePerformanceChangeInsightResponseArrayOutput {
	return o
}

func (o StagePerformanceChangeInsightResponseArrayOutput) Index(i pulumi.IntInput) StagePerformanceChangeInsightResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StagePerformanceChangeInsightResponse {
		return vs[0].([]StagePerformanceChangeInsightResponse)[vs[1].(int)]
	}).(StagePerformanceChangeInsightResponseOutput)
}

// Standalone performance insights for a specific stage.
type StagePerformanceStandaloneInsightResponse struct {
	// If present, the stage had the following reasons for being disqualified from BI Engine execution.
	BiEngineReasons []BiEngineReasonResponse `pulumi:"biEngineReasons"`
	// High cardinality joins in the stage.
	HighCardinalityJoins []HighCardinalityJoinResponse `pulumi:"highCardinalityJoins"`
	// True if the stage has insufficient shuffle quota.
	InsufficientShuffleQuota bool `pulumi:"insufficientShuffleQuota"`
	// True if the stage has a slot contention issue.
	SlotContention bool `pulumi:"slotContention"`
	// The stage id that the insight mapped to.
	StageId string `pulumi:"stageId"`
}

// Standalone performance insights for a specific stage.
type StagePerformanceStandaloneInsightResponseOutput struct{ *pulumi.OutputState }

func (StagePerformanceStandaloneInsightResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StagePerformanceStandaloneInsightResponse)(nil)).Elem()
}

func (o StagePerformanceStandaloneInsightResponseOutput) ToStagePerformanceStandaloneInsightResponseOutput() StagePerformanceStandaloneInsightResponseOutput {
	return o
}

func (o StagePerformanceStandaloneInsightResponseOutput) ToStagePerformanceStandaloneInsightResponseOutputWithContext(ctx context.Context) StagePerformanceStandaloneInsightResponseOutput {
	return o
}

// If present, the stage had the following reasons for being disqualified from BI Engine execution.
func (o StagePerformanceStandaloneInsightResponseOutput) BiEngineReasons() BiEngineReasonResponseArrayOutput {
	return o.ApplyT(func(v StagePerformanceStandaloneInsightResponse) []BiEngineReasonResponse { return v.BiEngineReasons }).(BiEngineReasonResponseArrayOutput)
}

// High cardinality joins in the stage.
func (o StagePerformanceStandaloneInsightResponseOutput) HighCardinalityJoins() HighCardinalityJoinResponseArrayOutput {
	return o.ApplyT(func(v StagePerformanceStandaloneInsightResponse) []HighCardinalityJoinResponse {
		return v.HighCardinalityJoins
	}).(HighCardinalityJoinResponseArrayOutput)
}

// True if the stage has insufficient shuffle quota.
func (o StagePerformanceStandaloneInsightResponseOutput) InsufficientShuffleQuota() pulumi.BoolOutput {
	return o.ApplyT(func(v StagePerformanceStandaloneInsightResponse) bool { return v.InsufficientShuffleQuota }).(pulumi.BoolOutput)
}

// True if the stage has a slot contention issue.
func (o StagePerformanceStandaloneInsightResponseOutput) SlotContention() pulumi.BoolOutput {
	return o.ApplyT(func(v StagePerformanceStandaloneInsightResponse) bool { return v.SlotContention }).(pulumi.BoolOutput)
}

// The stage id that the insight mapped to.
func (o StagePerformanceStandaloneInsightResponseOutput) StageId() pulumi.StringOutput {
	return o.ApplyT(func(v StagePerformanceStandaloneInsightResponse) string { return v.StageId }).(pulumi.StringOutput)
}

type StagePerformanceStandaloneInsightResponseArrayOutput struct{ *pulumi.OutputState }

func (StagePerformanceStandaloneInsightResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StagePerformanceStandaloneInsightResponse)(nil)).Elem()
}

func (o StagePerformanceStandaloneInsightResponseArrayOutput) ToStagePerformanceStandaloneInsightResponseArrayOutput() StagePerformanceStandaloneInsightResponseArrayOutput {
	return o
}

func (o StagePerformanceStandaloneInsightResponseArrayOutput) ToStagePerformanceStandaloneInsightResponseArrayOutputWithContext(ctx context.Context) StagePerformanceStandaloneInsightResponseArrayOutput {
	return o
}

func (o StagePerformanceStandaloneInsightResponseArrayOutput) Index(i pulumi.IntInput) StagePerformanceStandaloneInsightResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StagePerformanceStandaloneInsightResponse {
		return vs[0].([]StagePerformanceStandaloneInsightResponse)[vs[1].(int)]
	}).(StagePerformanceStandaloneInsightResponseOutput)
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataType struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType *StandardSqlDataType `pulumi:"arrayElementType"`
	// The type of the range's elements, if type_kind = "RANGE".
	RangeElementType *StandardSqlDataType `pulumi:"rangeElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType *StandardSqlStructType `pulumi:"structType"`
	// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind StandardSqlDataTypeTypeKind `pulumi:"typeKind"`
}

// StandardSqlDataTypeInput is an input type that accepts StandardSqlDataTypeArgs and StandardSqlDataTypeOutput values.
// You can construct a concrete instance of `StandardSqlDataTypeInput` via:
//
//	StandardSqlDataTypeArgs{...}
type StandardSqlDataTypeInput interface {
	pulumi.Input

	ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput
	ToStandardSqlDataTypeOutputWithContext(context.Context) StandardSqlDataTypeOutput
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeArgs struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType StandardSqlDataTypePtrInput `pulumi:"arrayElementType"`
	// The type of the range's elements, if type_kind = "RANGE".
	RangeElementType StandardSqlDataTypePtrInput `pulumi:"rangeElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType StandardSqlStructTypePtrInput `pulumi:"structType"`
	// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind StandardSqlDataTypeTypeKindInput `pulumi:"typeKind"`
}

func (StandardSqlDataTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataType)(nil)).Elem()
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput {
	return i.ToStandardSqlDataTypeOutputWithContext(context.Background())
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypeOutputWithContext(ctx context.Context) StandardSqlDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypeOutput)
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return i.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypeOutput).ToStandardSqlDataTypePtrOutputWithContext(ctx)
}

// StandardSqlDataTypePtrInput is an input type that accepts StandardSqlDataTypeArgs, StandardSqlDataTypePtr and StandardSqlDataTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlDataTypePtrInput` via:
//
//	        StandardSqlDataTypeArgs{...}
//
//	or:
//
//	        nil
type StandardSqlDataTypePtrInput interface {
	pulumi.Input

	ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput
	ToStandardSqlDataTypePtrOutputWithContext(context.Context) StandardSqlDataTypePtrOutput
}

type standardSqlDataTypePtrType StandardSqlDataTypeArgs

func StandardSqlDataTypePtr(v *StandardSqlDataTypeArgs) StandardSqlDataTypePtrInput {
	return (*standardSqlDataTypePtrType)(v)
}

func (*standardSqlDataTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataType)(nil)).Elem()
}

func (i *standardSqlDataTypePtrType) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return i.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlDataTypePtrType) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypePtrOutput)
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataType)(nil)).Elem()
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput {
	return o
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypeOutputWithContext(ctx context.Context) StandardSqlDataTypeOutput {
	return o
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return o.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSqlDataType) *StandardSqlDataType {
		return &v
	}).(StandardSqlDataTypePtrOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypeOutput) ArrayElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlDataType { return v.ArrayElementType }).(StandardSqlDataTypePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypeOutput) RangeElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlDataType { return v.RangeElementType }).(StandardSqlDataTypePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypeOutput) StructType() StandardSqlStructTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlStructType { return v.StructType }).(StandardSqlStructTypePtrOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypeOutput) TypeKind() StandardSqlDataTypeTypeKindOutput {
	return o.ApplyT(func(v StandardSqlDataType) StandardSqlDataTypeTypeKind { return v.TypeKind }).(StandardSqlDataTypeTypeKindOutput)
}

type StandardSqlDataTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataType)(nil)).Elem()
}

func (o StandardSqlDataTypePtrOutput) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return o
}

func (o StandardSqlDataTypePtrOutput) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return o
}

func (o StandardSqlDataTypePtrOutput) Elem() StandardSqlDataTypeOutput {
	return o.ApplyT(func(v *StandardSqlDataType) StandardSqlDataType {
		if v != nil {
			return *v
		}
		var ret StandardSqlDataType
		return ret
	}).(StandardSqlDataTypeOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypePtrOutput) ArrayElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlDataType {
		if v == nil {
			return nil
		}
		return v.ArrayElementType
	}).(StandardSqlDataTypePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypePtrOutput) RangeElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlDataType {
		if v == nil {
			return nil
		}
		return v.RangeElementType
	}).(StandardSqlDataTypePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypePtrOutput) StructType() StandardSqlStructTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlStructType {
		if v == nil {
			return nil
		}
		return v.StructType
	}).(StandardSqlStructTypePtrOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypePtrOutput) TypeKind() StandardSqlDataTypeTypeKindPtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlDataTypeTypeKind {
		if v == nil {
			return nil
		}
		return &v.TypeKind
	}).(StandardSqlDataTypeTypeKindPtrOutput)
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeResponse struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType *StandardSqlDataTypeResponse `pulumi:"arrayElementType"`
	// The type of the range's elements, if type_kind = "RANGE".
	RangeElementType *StandardSqlDataTypeResponse `pulumi:"rangeElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType StandardSqlStructTypeResponse `pulumi:"structType"`
	// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind string `pulumi:"typeKind"`
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataTypeResponse)(nil)).Elem()
}

func (o StandardSqlDataTypeResponseOutput) ToStandardSqlDataTypeResponseOutput() StandardSqlDataTypeResponseOutput {
	return o
}

func (o StandardSqlDataTypeResponseOutput) ToStandardSqlDataTypeResponseOutputWithContext(ctx context.Context) StandardSqlDataTypeResponseOutput {
	return o
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypeResponseOutput) ArrayElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse { return v.ArrayElementType }).(StandardSqlDataTypeResponsePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypeResponseOutput) RangeElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse { return v.RangeElementType }).(StandardSqlDataTypeResponsePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypeResponseOutput) StructType() StandardSqlStructTypeResponseOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) StandardSqlStructTypeResponse { return v.StructType }).(StandardSqlStructTypeResponseOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypeResponseOutput) TypeKind() pulumi.StringOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) string { return v.TypeKind }).(pulumi.StringOutput)
}

type StandardSqlDataTypeResponsePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataTypeResponse)(nil)).Elem()
}

func (o StandardSqlDataTypeResponsePtrOutput) ToStandardSqlDataTypeResponsePtrOutput() StandardSqlDataTypeResponsePtrOutput {
	return o
}

func (o StandardSqlDataTypeResponsePtrOutput) ToStandardSqlDataTypeResponsePtrOutputWithContext(ctx context.Context) StandardSqlDataTypeResponsePtrOutput {
	return o
}

func (o StandardSqlDataTypeResponsePtrOutput) Elem() StandardSqlDataTypeResponseOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) StandardSqlDataTypeResponse {
		if v != nil {
			return *v
		}
		var ret StandardSqlDataTypeResponse
		return ret
	}).(StandardSqlDataTypeResponseOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypeResponsePtrOutput) ArrayElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse {
		if v == nil {
			return nil
		}
		return v.ArrayElementType
	}).(StandardSqlDataTypeResponsePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypeResponsePtrOutput) RangeElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse {
		if v == nil {
			return nil
		}
		return v.RangeElementType
	}).(StandardSqlDataTypeResponsePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypeResponsePtrOutput) StructType() StandardSqlStructTypeResponsePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *StandardSqlStructTypeResponse {
		if v == nil {
			return nil
		}
		return &v.StructType
	}).(StandardSqlStructTypeResponsePtrOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypeResponsePtrOutput) TypeKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TypeKind
	}).(pulumi.StringPtrOutput)
}

// A field or a column.
type StandardSqlField struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name *string `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type *StandardSqlDataType `pulumi:"type"`
}

// StandardSqlFieldInput is an input type that accepts StandardSqlFieldArgs and StandardSqlFieldOutput values.
// You can construct a concrete instance of `StandardSqlFieldInput` via:
//
//	StandardSqlFieldArgs{...}
type StandardSqlFieldInput interface {
	pulumi.Input

	ToStandardSqlFieldOutput() StandardSqlFieldOutput
	ToStandardSqlFieldOutputWithContext(context.Context) StandardSqlFieldOutput
}

// A field or a column.
type StandardSqlFieldArgs struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type StandardSqlDataTypePtrInput `pulumi:"type"`
}

func (StandardSqlFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlField)(nil)).Elem()
}

func (i StandardSqlFieldArgs) ToStandardSqlFieldOutput() StandardSqlFieldOutput {
	return i.ToStandardSqlFieldOutputWithContext(context.Background())
}

func (i StandardSqlFieldArgs) ToStandardSqlFieldOutputWithContext(ctx context.Context) StandardSqlFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlFieldOutput)
}

// StandardSqlFieldArrayInput is an input type that accepts StandardSqlFieldArray and StandardSqlFieldArrayOutput values.
// You can construct a concrete instance of `StandardSqlFieldArrayInput` via:
//
//	StandardSqlFieldArray{ StandardSqlFieldArgs{...} }
type StandardSqlFieldArrayInput interface {
	pulumi.Input

	ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput
	ToStandardSqlFieldArrayOutputWithContext(context.Context) StandardSqlFieldArrayOutput
}

type StandardSqlFieldArray []StandardSqlFieldInput

func (StandardSqlFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlField)(nil)).Elem()
}

func (i StandardSqlFieldArray) ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput {
	return i.ToStandardSqlFieldArrayOutputWithContext(context.Background())
}

func (i StandardSqlFieldArray) ToStandardSqlFieldArrayOutputWithContext(ctx context.Context) StandardSqlFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlFieldArrayOutput)
}

// A field or a column.
type StandardSqlFieldOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlField)(nil)).Elem()
}

func (o StandardSqlFieldOutput) ToStandardSqlFieldOutput() StandardSqlFieldOutput {
	return o
}

func (o StandardSqlFieldOutput) ToStandardSqlFieldOutputWithContext(ctx context.Context) StandardSqlFieldOutput {
	return o
}

// Optional. The name of this field. Can be absent for struct fields.
func (o StandardSqlFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardSqlField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
func (o StandardSqlFieldOutput) Type() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlField) *StandardSqlDataType { return v.Type }).(StandardSqlDataTypePtrOutput)
}

type StandardSqlFieldArrayOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlField)(nil)).Elem()
}

func (o StandardSqlFieldArrayOutput) ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput {
	return o
}

func (o StandardSqlFieldArrayOutput) ToStandardSqlFieldArrayOutputWithContext(ctx context.Context) StandardSqlFieldArrayOutput {
	return o
}

func (o StandardSqlFieldArrayOutput) Index(i pulumi.IntInput) StandardSqlFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardSqlField {
		return vs[0].([]StandardSqlField)[vs[1].(int)]
	}).(StandardSqlFieldOutput)
}

// A field or a column.
type StandardSqlFieldResponse struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name string `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type StandardSqlDataTypeResponse `pulumi:"type"`
}

// A field or a column.
type StandardSqlFieldResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlFieldResponse)(nil)).Elem()
}

func (o StandardSqlFieldResponseOutput) ToStandardSqlFieldResponseOutput() StandardSqlFieldResponseOutput {
	return o
}

func (o StandardSqlFieldResponseOutput) ToStandardSqlFieldResponseOutputWithContext(ctx context.Context) StandardSqlFieldResponseOutput {
	return o
}

// Optional. The name of this field. Can be absent for struct fields.
func (o StandardSqlFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StandardSqlFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
func (o StandardSqlFieldResponseOutput) Type() StandardSqlDataTypeResponseOutput {
	return o.ApplyT(func(v StandardSqlFieldResponse) StandardSqlDataTypeResponse { return v.Type }).(StandardSqlDataTypeResponseOutput)
}

type StandardSqlFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlFieldResponse)(nil)).Elem()
}

func (o StandardSqlFieldResponseArrayOutput) ToStandardSqlFieldResponseArrayOutput() StandardSqlFieldResponseArrayOutput {
	return o
}

func (o StandardSqlFieldResponseArrayOutput) ToStandardSqlFieldResponseArrayOutputWithContext(ctx context.Context) StandardSqlFieldResponseArrayOutput {
	return o
}

func (o StandardSqlFieldResponseArrayOutput) Index(i pulumi.IntInput) StandardSqlFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardSqlFieldResponse {
		return vs[0].([]StandardSqlFieldResponse)[vs[1].(int)]
	}).(StandardSqlFieldResponseOutput)
}

// The representation of a SQL STRUCT type.
type StandardSqlStructType struct {
	// Fields within the struct.
	Fields []StandardSqlField `pulumi:"fields"`
}

// StandardSqlStructTypeInput is an input type that accepts StandardSqlStructTypeArgs and StandardSqlStructTypeOutput values.
// You can construct a concrete instance of `StandardSqlStructTypeInput` via:
//
//	StandardSqlStructTypeArgs{...}
type StandardSqlStructTypeInput interface {
	pulumi.Input

	ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput
	ToStandardSqlStructTypeOutputWithContext(context.Context) StandardSqlStructTypeOutput
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeArgs struct {
	// Fields within the struct.
	Fields StandardSqlFieldArrayInput `pulumi:"fields"`
}

func (StandardSqlStructTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructType)(nil)).Elem()
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput {
	return i.ToStandardSqlStructTypeOutputWithContext(context.Background())
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypeOutputWithContext(ctx context.Context) StandardSqlStructTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypeOutput)
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return i.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypeOutput).ToStandardSqlStructTypePtrOutputWithContext(ctx)
}

// StandardSqlStructTypePtrInput is an input type that accepts StandardSqlStructTypeArgs, StandardSqlStructTypePtr and StandardSqlStructTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlStructTypePtrInput` via:
//
//	        StandardSqlStructTypeArgs{...}
//
//	or:
//
//	        nil
type StandardSqlStructTypePtrInput interface {
	pulumi.Input

	ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput
	ToStandardSqlStructTypePtrOutputWithContext(context.Context) StandardSqlStructTypePtrOutput
}

type standardSqlStructTypePtrType StandardSqlStructTypeArgs

func StandardSqlStructTypePtr(v *StandardSqlStructTypeArgs) StandardSqlStructTypePtrInput {
	return (*standardSqlStructTypePtrType)(v)
}

func (*standardSqlStructTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructType)(nil)).Elem()
}

func (i *standardSqlStructTypePtrType) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return i.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlStructTypePtrType) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypePtrOutput)
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructType)(nil)).Elem()
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput {
	return o
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypeOutputWithContext(ctx context.Context) StandardSqlStructTypeOutput {
	return o
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return o.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSqlStructType) *StandardSqlStructType {
		return &v
	}).(StandardSqlStructTypePtrOutput)
}

// Fields within the struct.
func (o StandardSqlStructTypeOutput) Fields() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v StandardSqlStructType) []StandardSqlField { return v.Fields }).(StandardSqlFieldArrayOutput)
}

type StandardSqlStructTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructType)(nil)).Elem()
}

func (o StandardSqlStructTypePtrOutput) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return o
}

func (o StandardSqlStructTypePtrOutput) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return o
}

func (o StandardSqlStructTypePtrOutput) Elem() StandardSqlStructTypeOutput {
	return o.ApplyT(func(v *StandardSqlStructType) StandardSqlStructType {
		if v != nil {
			return *v
		}
		var ret StandardSqlStructType
		return ret
	}).(StandardSqlStructTypeOutput)
}

// Fields within the struct.
func (o StandardSqlStructTypePtrOutput) Fields() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v *StandardSqlStructType) []StandardSqlField {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(StandardSqlFieldArrayOutput)
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeResponse struct {
	// Fields within the struct.
	Fields []StandardSqlFieldResponse `pulumi:"fields"`
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructTypeResponse)(nil)).Elem()
}

func (o StandardSqlStructTypeResponseOutput) ToStandardSqlStructTypeResponseOutput() StandardSqlStructTypeResponseOutput {
	return o
}

func (o StandardSqlStructTypeResponseOutput) ToStandardSqlStructTypeResponseOutputWithContext(ctx context.Context) StandardSqlStructTypeResponseOutput {
	return o
}

// Fields within the struct.
func (o StandardSqlStructTypeResponseOutput) Fields() StandardSqlFieldResponseArrayOutput {
	return o.ApplyT(func(v StandardSqlStructTypeResponse) []StandardSqlFieldResponse { return v.Fields }).(StandardSqlFieldResponseArrayOutput)
}

type StandardSqlStructTypeResponsePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructTypeResponse)(nil)).Elem()
}

func (o StandardSqlStructTypeResponsePtrOutput) ToStandardSqlStructTypeResponsePtrOutput() StandardSqlStructTypeResponsePtrOutput {
	return o
}

func (o StandardSqlStructTypeResponsePtrOutput) ToStandardSqlStructTypeResponsePtrOutputWithContext(ctx context.Context) StandardSqlStructTypeResponsePtrOutput {
	return o
}

func (o StandardSqlStructTypeResponsePtrOutput) Elem() StandardSqlStructTypeResponseOutput {
	return o.ApplyT(func(v *StandardSqlStructTypeResponse) StandardSqlStructTypeResponse {
		if v != nil {
			return *v
		}
		var ret StandardSqlStructTypeResponse
		return ret
	}).(StandardSqlStructTypeResponseOutput)
}

// Fields within the struct.
func (o StandardSqlStructTypeResponsePtrOutput) Fields() StandardSqlFieldResponseArrayOutput {
	return o.ApplyT(func(v *StandardSqlStructTypeResponse) []StandardSqlFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(StandardSqlFieldResponseArrayOutput)
}

// A table type
type StandardSqlTableType struct {
	// The columns in this table type
	Columns []StandardSqlField `pulumi:"columns"`
}

// StandardSqlTableTypeInput is an input type that accepts StandardSqlTableTypeArgs and StandardSqlTableTypeOutput values.
// You can construct a concrete instance of `StandardSqlTableTypeInput` via:
//
//	StandardSqlTableTypeArgs{...}
type StandardSqlTableTypeInput interface {
	pulumi.Input

	ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput
	ToStandardSqlTableTypeOutputWithContext(context.Context) StandardSqlTableTypeOutput
}

// A table type
type StandardSqlTableTypeArgs struct {
	// The columns in this table type
	Columns StandardSqlFieldArrayInput `pulumi:"columns"`
}

func (StandardSqlTableTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableType)(nil)).Elem()
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput {
	return i.ToStandardSqlTableTypeOutputWithContext(context.Background())
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypeOutputWithContext(ctx context.Context) StandardSqlTableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypeOutput)
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return i.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypeOutput).ToStandardSqlTableTypePtrOutputWithContext(ctx)
}

// StandardSqlTableTypePtrInput is an input type that accepts StandardSqlTableTypeArgs, StandardSqlTableTypePtr and StandardSqlTableTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlTableTypePtrInput` via:
//
//	        StandardSqlTableTypeArgs{...}
//
//	or:
//
//	        nil
type StandardSqlTableTypePtrInput interface {
	pulumi.Input

	ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput
	ToStandardSqlTableTypePtrOutputWithContext(context.Context) StandardSqlTableTypePtrOutput
}

type standardSqlTableTypePtrType StandardSqlTableTypeArgs

func StandardSqlTableTypePtr(v *StandardSqlTableTypeArgs) StandardSqlTableTypePtrInput {
	return (*standardSqlTableTypePtrType)(v)
}

func (*standardSqlTableTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlTableType)(nil)).Elem()
}

func (i *standardSqlTableTypePtrType) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return i.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlTableTypePtrType) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypePtrOutput)
}

// A table type
type StandardSqlTableTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableType)(nil)).Elem()
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput {
	return o
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypeOutputWithContext(ctx context.Context) StandardSqlTableTypeOutput {
	return o
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return o.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSqlTableType) *StandardSqlTableType {
		return &v
	}).(StandardSqlTableTypePtrOutput)
}

// The columns in this table type
func (o StandardSqlTableTypeOutput) Columns() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v StandardSqlTableType) []StandardSqlField { return v.Columns }).(StandardSqlFieldArrayOutput)
}

type StandardSqlTableTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlTableType)(nil)).Elem()
}

func (o StandardSqlTableTypePtrOutput) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return o
}

func (o StandardSqlTableTypePtrOutput) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return o
}

func (o StandardSqlTableTypePtrOutput) Elem() StandardSqlTableTypeOutput {
	return o.ApplyT(func(v *StandardSqlTableType) StandardSqlTableType {
		if v != nil {
			return *v
		}
		var ret StandardSqlTableType
		return ret
	}).(StandardSqlTableTypeOutput)
}

// The columns in this table type
func (o StandardSqlTableTypePtrOutput) Columns() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v *StandardSqlTableType) []StandardSqlField {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(StandardSqlFieldArrayOutput)
}

// A table type
type StandardSqlTableTypeResponse struct {
	// The columns in this table type
	Columns []StandardSqlFieldResponse `pulumi:"columns"`
}

// A table type
type StandardSqlTableTypeResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableTypeResponse)(nil)).Elem()
}

func (o StandardSqlTableTypeResponseOutput) ToStandardSqlTableTypeResponseOutput() StandardSqlTableTypeResponseOutput {
	return o
}

func (o StandardSqlTableTypeResponseOutput) ToStandardSqlTableTypeResponseOutputWithContext(ctx context.Context) StandardSqlTableTypeResponseOutput {
	return o
}

// The columns in this table type
func (o StandardSqlTableTypeResponseOutput) Columns() StandardSqlFieldResponseArrayOutput {
	return o.ApplyT(func(v StandardSqlTableTypeResponse) []StandardSqlFieldResponse { return v.Columns }).(StandardSqlFieldResponseArrayOutput)
}

type StreamingbufferResponse struct {
	// A lower-bound estimate of the number of bytes currently in the streaming buffer.
	EstimatedBytes string `pulumi:"estimatedBytes"`
	// A lower-bound estimate of the number of rows currently in the streaming buffer.
	EstimatedRows string `pulumi:"estimatedRows"`
	// Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
	OldestEntryTime string `pulumi:"oldestEntryTime"`
}

type StreamingbufferResponseOutput struct{ *pulumi.OutputState }

func (StreamingbufferResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingbufferResponse)(nil)).Elem()
}

func (o StreamingbufferResponseOutput) ToStreamingbufferResponseOutput() StreamingbufferResponseOutput {
	return o
}

func (o StreamingbufferResponseOutput) ToStreamingbufferResponseOutputWithContext(ctx context.Context) StreamingbufferResponseOutput {
	return o
}

// A lower-bound estimate of the number of bytes currently in the streaming buffer.
func (o StreamingbufferResponseOutput) EstimatedBytes() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingbufferResponse) string { return v.EstimatedBytes }).(pulumi.StringOutput)
}

// A lower-bound estimate of the number of rows currently in the streaming buffer.
func (o StreamingbufferResponseOutput) EstimatedRows() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingbufferResponse) string { return v.EstimatedRows }).(pulumi.StringOutput)
}

// Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
func (o StreamingbufferResponseOutput) OldestEntryTime() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingbufferResponse) string { return v.OldestEntryTime }).(pulumi.StringOutput)
}

// System variables given to a query.
type SystemVariablesResponse struct {
	// Data type for each system variable.
	Types map[string]string `pulumi:"types"`
	// Value for each system variable.
	Values map[string]string `pulumi:"values"`
}

// System variables given to a query.
type SystemVariablesResponseOutput struct{ *pulumi.OutputState }

func (SystemVariablesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemVariablesResponse)(nil)).Elem()
}

func (o SystemVariablesResponseOutput) ToSystemVariablesResponseOutput() SystemVariablesResponseOutput {
	return o
}

func (o SystemVariablesResponseOutput) ToSystemVariablesResponseOutputWithContext(ctx context.Context) SystemVariablesResponseOutput {
	return o
}

// Data type for each system variable.
func (o SystemVariablesResponseOutput) Types() pulumi.StringMapOutput {
	return o.ApplyT(func(v SystemVariablesResponse) map[string]string { return v.Types }).(pulumi.StringMapOutput)
}

// Value for each system variable.
func (o SystemVariablesResponseOutput) Values() pulumi.StringMapOutput {
	return o.ApplyT(func(v SystemVariablesResponse) map[string]string { return v.Values }).(pulumi.StringMapOutput)
}

// The TableConstraints defines the primary key and foreign key.
type TableConstraints struct {
	// Optional. Present only if the table has a foreign key. The foreign key is not enforced.
	ForeignKeys []TableConstraintsForeignKeysItem `pulumi:"foreignKeys"`
	// Represents the primary key constraint on a table's columns.
	PrimaryKey *TableConstraintsPrimaryKey `pulumi:"primaryKey"`
}

// TableConstraintsInput is an input type that accepts TableConstraintsArgs and TableConstraintsOutput values.
// You can construct a concrete instance of `TableConstraintsInput` via:
//
//	TableConstraintsArgs{...}
type TableConstraintsInput interface {
	pulumi.Input

	ToTableConstraintsOutput() TableConstraintsOutput
	ToTableConstraintsOutputWithContext(context.Context) TableConstraintsOutput
}

// The TableConstraints defines the primary key and foreign key.
type TableConstraintsArgs struct {
	// Optional. Present only if the table has a foreign key. The foreign key is not enforced.
	ForeignKeys TableConstraintsForeignKeysItemArrayInput `pulumi:"foreignKeys"`
	// Represents the primary key constraint on a table's columns.
	PrimaryKey TableConstraintsPrimaryKeyPtrInput `pulumi:"primaryKey"`
}

func (TableConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraints)(nil)).Elem()
}

func (i TableConstraintsArgs) ToTableConstraintsOutput() TableConstraintsOutput {
	return i.ToTableConstraintsOutputWithContext(context.Background())
}

func (i TableConstraintsArgs) ToTableConstraintsOutputWithContext(ctx context.Context) TableConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsOutput)
}

func (i TableConstraintsArgs) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return i.ToTableConstraintsPtrOutputWithContext(context.Background())
}

func (i TableConstraintsArgs) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsOutput).ToTableConstraintsPtrOutputWithContext(ctx)
}

// TableConstraintsPtrInput is an input type that accepts TableConstraintsArgs, TableConstraintsPtr and TableConstraintsPtrOutput values.
// You can construct a concrete instance of `TableConstraintsPtrInput` via:
//
//	        TableConstraintsArgs{...}
//
//	or:
//
//	        nil
type TableConstraintsPtrInput interface {
	pulumi.Input

	ToTableConstraintsPtrOutput() TableConstraintsPtrOutput
	ToTableConstraintsPtrOutputWithContext(context.Context) TableConstraintsPtrOutput
}

type tableConstraintsPtrType TableConstraintsArgs

func TableConstraintsPtr(v *TableConstraintsArgs) TableConstraintsPtrInput {
	return (*tableConstraintsPtrType)(v)
}

func (*tableConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraints)(nil)).Elem()
}

func (i *tableConstraintsPtrType) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return i.ToTableConstraintsPtrOutputWithContext(context.Background())
}

func (i *tableConstraintsPtrType) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPtrOutput)
}

// The TableConstraints defines the primary key and foreign key.
type TableConstraintsOutput struct{ *pulumi.OutputState }

func (TableConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraints)(nil)).Elem()
}

func (o TableConstraintsOutput) ToTableConstraintsOutput() TableConstraintsOutput {
	return o
}

func (o TableConstraintsOutput) ToTableConstraintsOutputWithContext(ctx context.Context) TableConstraintsOutput {
	return o
}

func (o TableConstraintsOutput) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return o.ToTableConstraintsPtrOutputWithContext(context.Background())
}

func (o TableConstraintsOutput) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraints) *TableConstraints {
		return &v
	}).(TableConstraintsPtrOutput)
}

// Optional. Present only if the table has a foreign key. The foreign key is not enforced.
func (o TableConstraintsOutput) ForeignKeys() TableConstraintsForeignKeysItemArrayOutput {
	return o.ApplyT(func(v TableConstraints) []TableConstraintsForeignKeysItem { return v.ForeignKeys }).(TableConstraintsForeignKeysItemArrayOutput)
}

// Represents the primary key constraint on a table's columns.
func (o TableConstraintsOutput) PrimaryKey() TableConstraintsPrimaryKeyPtrOutput {
	return o.ApplyT(func(v TableConstraints) *TableConstraintsPrimaryKey { return v.PrimaryKey }).(TableConstraintsPrimaryKeyPtrOutput)
}

type TableConstraintsPtrOutput struct{ *pulumi.OutputState }

func (TableConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraints)(nil)).Elem()
}

func (o TableConstraintsPtrOutput) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return o
}

func (o TableConstraintsPtrOutput) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return o
}

func (o TableConstraintsPtrOutput) Elem() TableConstraintsOutput {
	return o.ApplyT(func(v *TableConstraints) TableConstraints {
		if v != nil {
			return *v
		}
		var ret TableConstraints
		return ret
	}).(TableConstraintsOutput)
}

// Optional. Present only if the table has a foreign key. The foreign key is not enforced.
func (o TableConstraintsPtrOutput) ForeignKeys() TableConstraintsForeignKeysItemArrayOutput {
	return o.ApplyT(func(v *TableConstraints) []TableConstraintsForeignKeysItem {
		if v == nil {
			return nil
		}
		return v.ForeignKeys
	}).(TableConstraintsForeignKeysItemArrayOutput)
}

// Represents the primary key constraint on a table's columns.
func (o TableConstraintsPtrOutput) PrimaryKey() TableConstraintsPrimaryKeyPtrOutput {
	return o.ApplyT(func(v *TableConstraints) *TableConstraintsPrimaryKey {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(TableConstraintsPrimaryKeyPtrOutput)
}

// Represents a foreign key constraint on a table's columns.
type TableConstraintsForeignKeysItem struct {
	// The columns that compose the foreign key.
	ColumnReferences []TableConstraintsForeignKeysItemColumnReferencesItem `pulumi:"columnReferences"`
	// Optional. Set only if the foreign key constraint is named.
	Name            *string                                         `pulumi:"name"`
	ReferencedTable *TableConstraintsForeignKeysItemReferencedTable `pulumi:"referencedTable"`
}

// TableConstraintsForeignKeysItemInput is an input type that accepts TableConstraintsForeignKeysItemArgs and TableConstraintsForeignKeysItemOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemInput` via:
//
//	TableConstraintsForeignKeysItemArgs{...}
type TableConstraintsForeignKeysItemInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemOutput() TableConstraintsForeignKeysItemOutput
	ToTableConstraintsForeignKeysItemOutputWithContext(context.Context) TableConstraintsForeignKeysItemOutput
}

// Represents a foreign key constraint on a table's columns.
type TableConstraintsForeignKeysItemArgs struct {
	// The columns that compose the foreign key.
	ColumnReferences TableConstraintsForeignKeysItemColumnReferencesItemArrayInput `pulumi:"columnReferences"`
	// Optional. Set only if the foreign key constraint is named.
	Name            pulumi.StringPtrInput                                  `pulumi:"name"`
	ReferencedTable TableConstraintsForeignKeysItemReferencedTablePtrInput `pulumi:"referencedTable"`
}

func (TableConstraintsForeignKeysItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemArgs) ToTableConstraintsForeignKeysItemOutput() TableConstraintsForeignKeysItemOutput {
	return i.ToTableConstraintsForeignKeysItemOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemArgs) ToTableConstraintsForeignKeysItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemOutput)
}

// TableConstraintsForeignKeysItemArrayInput is an input type that accepts TableConstraintsForeignKeysItemArray and TableConstraintsForeignKeysItemArrayOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemArrayInput` via:
//
//	TableConstraintsForeignKeysItemArray{ TableConstraintsForeignKeysItemArgs{...} }
type TableConstraintsForeignKeysItemArrayInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemArrayOutput() TableConstraintsForeignKeysItemArrayOutput
	ToTableConstraintsForeignKeysItemArrayOutputWithContext(context.Context) TableConstraintsForeignKeysItemArrayOutput
}

type TableConstraintsForeignKeysItemArray []TableConstraintsForeignKeysItemInput

func (TableConstraintsForeignKeysItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemArray) ToTableConstraintsForeignKeysItemArrayOutput() TableConstraintsForeignKeysItemArrayOutput {
	return i.ToTableConstraintsForeignKeysItemArrayOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemArray) ToTableConstraintsForeignKeysItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemArrayOutput)
}

// Represents a foreign key constraint on a table's columns.
type TableConstraintsForeignKeysItemOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemOutput) ToTableConstraintsForeignKeysItemOutput() TableConstraintsForeignKeysItemOutput {
	return o
}

func (o TableConstraintsForeignKeysItemOutput) ToTableConstraintsForeignKeysItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemOutput {
	return o
}

// The columns that compose the foreign key.
func (o TableConstraintsForeignKeysItemOutput) ColumnReferences() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItem) []TableConstraintsForeignKeysItemColumnReferencesItem {
		return v.ColumnReferences
	}).(TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput)
}

// Optional. Set only if the foreign key constraint is named.
func (o TableConstraintsForeignKeysItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemOutput) ReferencedTable() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItem) *TableConstraintsForeignKeysItemReferencedTable {
		return v.ReferencedTable
	}).(TableConstraintsForeignKeysItemReferencedTablePtrOutput)
}

type TableConstraintsForeignKeysItemArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemArrayOutput) ToTableConstraintsForeignKeysItemArrayOutput() TableConstraintsForeignKeysItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemArrayOutput) ToTableConstraintsForeignKeysItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItem {
		return vs[0].([]TableConstraintsForeignKeysItem)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemOutput)
}

// The pair of the foreign key column and primary key column.
type TableConstraintsForeignKeysItemColumnReferencesItem struct {
	// The column in the primary key that are referenced by the referencing_column.
	ReferencedColumn string `pulumi:"referencedColumn"`
	// The column that composes the foreign key.
	ReferencingColumn string `pulumi:"referencingColumn"`
}

// TableConstraintsForeignKeysItemColumnReferencesItemInput is an input type that accepts TableConstraintsForeignKeysItemColumnReferencesItemArgs and TableConstraintsForeignKeysItemColumnReferencesItemOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemColumnReferencesItemInput` via:
//
//	TableConstraintsForeignKeysItemColumnReferencesItemArgs{...}
type TableConstraintsForeignKeysItemColumnReferencesItemInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemColumnReferencesItemOutput() TableConstraintsForeignKeysItemColumnReferencesItemOutput
	ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(context.Context) TableConstraintsForeignKeysItemColumnReferencesItemOutput
}

// The pair of the foreign key column and primary key column.
type TableConstraintsForeignKeysItemColumnReferencesItemArgs struct {
	// The column in the primary key that are referenced by the referencing_column.
	ReferencedColumn pulumi.StringInput `pulumi:"referencedColumn"`
	// The column that composes the foreign key.
	ReferencingColumn pulumi.StringInput `pulumi:"referencingColumn"`
}

func (TableConstraintsForeignKeysItemColumnReferencesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArgs) ToTableConstraintsForeignKeysItemColumnReferencesItemOutput() TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return i.ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArgs) ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemColumnReferencesItemOutput)
}

// TableConstraintsForeignKeysItemColumnReferencesItemArrayInput is an input type that accepts TableConstraintsForeignKeysItemColumnReferencesItemArray and TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemColumnReferencesItemArrayInput` via:
//
//	TableConstraintsForeignKeysItemColumnReferencesItemArray{ TableConstraintsForeignKeysItemColumnReferencesItemArgs{...} }
type TableConstraintsForeignKeysItemColumnReferencesItemArrayInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput
	ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(context.Context) TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput
}

type TableConstraintsForeignKeysItemColumnReferencesItemArray []TableConstraintsForeignKeysItemColumnReferencesItemInput

func (TableConstraintsForeignKeysItemColumnReferencesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArray) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return i.ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArray) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput)
}

// The pair of the foreign key column and primary key column.
type TableConstraintsForeignKeysItemColumnReferencesItemOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemOutput() TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return o
}

// The column in the primary key that are referenced by the referencing_column.
func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ReferencedColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItem) string { return v.ReferencedColumn }).(pulumi.StringOutput)
}

// The column that composes the foreign key.
func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ReferencingColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItem) string { return v.ReferencingColumn }).(pulumi.StringOutput)
}

type TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItemColumnReferencesItem {
		return vs[0].([]TableConstraintsForeignKeysItemColumnReferencesItem)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemColumnReferencesItemOutput)
}

// The pair of the foreign key column and primary key column.
type TableConstraintsForeignKeysItemColumnReferencesItemResponse struct {
	// The column in the primary key that are referenced by the referencing_column.
	ReferencedColumn string `pulumi:"referencedColumn"`
	// The column that composes the foreign key.
	ReferencingColumn string `pulumi:"referencingColumn"`
}

// The pair of the foreign key column and primary key column.
type TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseOutput() TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput {
	return o
}

// The column in the primary key that are referenced by the referencing_column.
func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ReferencedColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItemResponse) string { return v.ReferencedColumn }).(pulumi.StringOutput)
}

// The column that composes the foreign key.
func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ReferencingColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItemResponse) string { return v.ReferencingColumn }).(pulumi.StringOutput)
}

type TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemColumnReferencesItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItemColumnReferencesItemResponse {
		return vs[0].([]TableConstraintsForeignKeysItemColumnReferencesItemResponse)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput)
}

type TableConstraintsForeignKeysItemReferencedTable struct {
	DatasetId *string `pulumi:"datasetId"`
	Project   *string `pulumi:"project"`
	TableId   *string `pulumi:"tableId"`
}

// TableConstraintsForeignKeysItemReferencedTableInput is an input type that accepts TableConstraintsForeignKeysItemReferencedTableArgs and TableConstraintsForeignKeysItemReferencedTableOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemReferencedTableInput` via:
//
//	TableConstraintsForeignKeysItemReferencedTableArgs{...}
type TableConstraintsForeignKeysItemReferencedTableInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemReferencedTableOutput() TableConstraintsForeignKeysItemReferencedTableOutput
	ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(context.Context) TableConstraintsForeignKeysItemReferencedTableOutput
}

type TableConstraintsForeignKeysItemReferencedTableArgs struct {
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	TableId   pulumi.StringPtrInput `pulumi:"tableId"`
}

func (TableConstraintsForeignKeysItemReferencedTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTableOutput() TableConstraintsForeignKeysItemReferencedTableOutput {
	return i.ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemReferencedTableOutput)
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return i.ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemReferencedTableOutput).ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx)
}

// TableConstraintsForeignKeysItemReferencedTablePtrInput is an input type that accepts TableConstraintsForeignKeysItemReferencedTableArgs, TableConstraintsForeignKeysItemReferencedTablePtr and TableConstraintsForeignKeysItemReferencedTablePtrOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemReferencedTablePtrInput` via:
//
//	        TableConstraintsForeignKeysItemReferencedTableArgs{...}
//
//	or:
//
//	        nil
type TableConstraintsForeignKeysItemReferencedTablePtrInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput
	ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput
}

type tableConstraintsForeignKeysItemReferencedTablePtrType TableConstraintsForeignKeysItemReferencedTableArgs

func TableConstraintsForeignKeysItemReferencedTablePtr(v *TableConstraintsForeignKeysItemReferencedTableArgs) TableConstraintsForeignKeysItemReferencedTablePtrInput {
	return (*tableConstraintsForeignKeysItemReferencedTablePtrType)(v)
}

func (*tableConstraintsForeignKeysItemReferencedTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (i *tableConstraintsForeignKeysItemReferencedTablePtrType) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return i.ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Background())
}

func (i *tableConstraintsForeignKeysItemReferencedTablePtrType) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemReferencedTablePtrOutput)
}

type TableConstraintsForeignKeysItemReferencedTableOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemReferencedTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTableOutput() TableConstraintsForeignKeysItemReferencedTableOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTableOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o.ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Background())
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraintsForeignKeysItemReferencedTable) *TableConstraintsForeignKeysItemReferencedTable {
		return &v
	}).(TableConstraintsForeignKeysItemReferencedTablePtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTable) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTable) *string { return v.TableId }).(pulumi.StringPtrOutput)
}

type TableConstraintsForeignKeysItemReferencedTablePtrOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemReferencedTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) Elem() TableConstraintsForeignKeysItemReferencedTableOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) TableConstraintsForeignKeysItemReferencedTable {
		if v != nil {
			return *v
		}
		var ret TableConstraintsForeignKeysItemReferencedTable
		return ret
	}).(TableConstraintsForeignKeysItemReferencedTableOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) *string {
		if v == nil {
			return nil
		}
		return v.TableId
	}).(pulumi.StringPtrOutput)
}

type TableConstraintsForeignKeysItemReferencedTableResponse struct {
	DatasetId string `pulumi:"datasetId"`
	Project   string `pulumi:"project"`
	TableId   string `pulumi:"tableId"`
}

type TableConstraintsForeignKeysItemReferencedTableResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemReferencedTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTableResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) ToTableConstraintsForeignKeysItemReferencedTableResponseOutput() TableConstraintsForeignKeysItemReferencedTableResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) ToTableConstraintsForeignKeysItemReferencedTableResponseOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTableResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTableResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTableResponse) string { return v.Project }).(pulumi.StringOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTableResponse) string { return v.TableId }).(pulumi.StringOutput)
}

// Represents a foreign key constraint on a table's columns.
type TableConstraintsForeignKeysItemResponse struct {
	// The columns that compose the foreign key.
	ColumnReferences []TableConstraintsForeignKeysItemColumnReferencesItemResponse `pulumi:"columnReferences"`
	// Optional. Set only if the foreign key constraint is named.
	Name            string                                                 `pulumi:"name"`
	ReferencedTable TableConstraintsForeignKeysItemReferencedTableResponse `pulumi:"referencedTable"`
}

// Represents a foreign key constraint on a table's columns.
type TableConstraintsForeignKeysItemResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemResponseOutput) ToTableConstraintsForeignKeysItemResponseOutput() TableConstraintsForeignKeysItemResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemResponseOutput) ToTableConstraintsForeignKeysItemResponseOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemResponseOutput {
	return o
}

// The columns that compose the foreign key.
func (o TableConstraintsForeignKeysItemResponseOutput) ColumnReferences() TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemResponse) []TableConstraintsForeignKeysItemColumnReferencesItemResponse {
		return v.ColumnReferences
	}).(TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput)
}

// Optional. Set only if the foreign key constraint is named.
func (o TableConstraintsForeignKeysItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o TableConstraintsForeignKeysItemResponseOutput) ReferencedTable() TableConstraintsForeignKeysItemReferencedTableResponseOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemResponse) TableConstraintsForeignKeysItemReferencedTableResponse {
		return v.ReferencedTable
	}).(TableConstraintsForeignKeysItemReferencedTableResponseOutput)
}

type TableConstraintsForeignKeysItemResponseArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemResponseArrayOutput) ToTableConstraintsForeignKeysItemResponseArrayOutput() TableConstraintsForeignKeysItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemResponseArrayOutput) ToTableConstraintsForeignKeysItemResponseArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemResponseArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItemResponse {
		return vs[0].([]TableConstraintsForeignKeysItemResponse)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemResponseOutput)
}

// Represents the primary key constraint on a table's columns.
type TableConstraintsPrimaryKey struct {
	// The columns that are composed of the primary key constraint.
	Columns []string `pulumi:"columns"`
}

// TableConstraintsPrimaryKeyInput is an input type that accepts TableConstraintsPrimaryKeyArgs and TableConstraintsPrimaryKeyOutput values.
// You can construct a concrete instance of `TableConstraintsPrimaryKeyInput` via:
//
//	TableConstraintsPrimaryKeyArgs{...}
type TableConstraintsPrimaryKeyInput interface {
	pulumi.Input

	ToTableConstraintsPrimaryKeyOutput() TableConstraintsPrimaryKeyOutput
	ToTableConstraintsPrimaryKeyOutputWithContext(context.Context) TableConstraintsPrimaryKeyOutput
}

// Represents the primary key constraint on a table's columns.
type TableConstraintsPrimaryKeyArgs struct {
	// The columns that are composed of the primary key constraint.
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (TableConstraintsPrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsPrimaryKey)(nil)).Elem()
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyOutput() TableConstraintsPrimaryKeyOutput {
	return i.ToTableConstraintsPrimaryKeyOutputWithContext(context.Background())
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPrimaryKeyOutput)
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return i.ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Background())
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPrimaryKeyOutput).ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx)
}

// TableConstraintsPrimaryKeyPtrInput is an input type that accepts TableConstraintsPrimaryKeyArgs, TableConstraintsPrimaryKeyPtr and TableConstraintsPrimaryKeyPtrOutput values.
// You can construct a concrete instance of `TableConstraintsPrimaryKeyPtrInput` via:
//
//	        TableConstraintsPrimaryKeyArgs{...}
//
//	or:
//
//	        nil
type TableConstraintsPrimaryKeyPtrInput interface {
	pulumi.Input

	ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput
	ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Context) TableConstraintsPrimaryKeyPtrOutput
}

type tableConstraintsPrimaryKeyPtrType TableConstraintsPrimaryKeyArgs

func TableConstraintsPrimaryKeyPtr(v *TableConstraintsPrimaryKeyArgs) TableConstraintsPrimaryKeyPtrInput {
	return (*tableConstraintsPrimaryKeyPtrType)(v)
}

func (*tableConstraintsPrimaryKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsPrimaryKey)(nil)).Elem()
}

func (i *tableConstraintsPrimaryKeyPtrType) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return i.ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Background())
}

func (i *tableConstraintsPrimaryKeyPtrType) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPrimaryKeyPtrOutput)
}

// Represents the primary key constraint on a table's columns.
type TableConstraintsPrimaryKeyOutput struct{ *pulumi.OutputState }

func (TableConstraintsPrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsPrimaryKey)(nil)).Elem()
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyOutput() TableConstraintsPrimaryKeyOutput {
	return o
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyOutput {
	return o
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return o.ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Background())
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraintsPrimaryKey) *TableConstraintsPrimaryKey {
		return &v
	}).(TableConstraintsPrimaryKeyPtrOutput)
}

// The columns that are composed of the primary key constraint.
func (o TableConstraintsPrimaryKeyOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableConstraintsPrimaryKey) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type TableConstraintsPrimaryKeyPtrOutput struct{ *pulumi.OutputState }

func (TableConstraintsPrimaryKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsPrimaryKey)(nil)).Elem()
}

func (o TableConstraintsPrimaryKeyPtrOutput) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return o
}

func (o TableConstraintsPrimaryKeyPtrOutput) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return o
}

func (o TableConstraintsPrimaryKeyPtrOutput) Elem() TableConstraintsPrimaryKeyOutput {
	return o.ApplyT(func(v *TableConstraintsPrimaryKey) TableConstraintsPrimaryKey {
		if v != nil {
			return *v
		}
		var ret TableConstraintsPrimaryKey
		return ret
	}).(TableConstraintsPrimaryKeyOutput)
}

// The columns that are composed of the primary key constraint.
func (o TableConstraintsPrimaryKeyPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableConstraintsPrimaryKey) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// Represents the primary key constraint on a table's columns.
type TableConstraintsPrimaryKeyResponse struct {
	// The columns that are composed of the primary key constraint.
	Columns []string `pulumi:"columns"`
}

// Represents the primary key constraint on a table's columns.
type TableConstraintsPrimaryKeyResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsPrimaryKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsPrimaryKeyResponse)(nil)).Elem()
}

func (o TableConstraintsPrimaryKeyResponseOutput) ToTableConstraintsPrimaryKeyResponseOutput() TableConstraintsPrimaryKeyResponseOutput {
	return o
}

func (o TableConstraintsPrimaryKeyResponseOutput) ToTableConstraintsPrimaryKeyResponseOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyResponseOutput {
	return o
}

// The columns that are composed of the primary key constraint.
func (o TableConstraintsPrimaryKeyResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableConstraintsPrimaryKeyResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

// The TableConstraints defines the primary key and foreign key.
type TableConstraintsResponse struct {
	// Optional. Present only if the table has a foreign key. The foreign key is not enforced.
	ForeignKeys []TableConstraintsForeignKeysItemResponse `pulumi:"foreignKeys"`
	// Represents the primary key constraint on a table's columns.
	PrimaryKey TableConstraintsPrimaryKeyResponse `pulumi:"primaryKey"`
}

// The TableConstraints defines the primary key and foreign key.
type TableConstraintsResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsResponse)(nil)).Elem()
}

func (o TableConstraintsResponseOutput) ToTableConstraintsResponseOutput() TableConstraintsResponseOutput {
	return o
}

func (o TableConstraintsResponseOutput) ToTableConstraintsResponseOutputWithContext(ctx context.Context) TableConstraintsResponseOutput {
	return o
}

// Optional. Present only if the table has a foreign key. The foreign key is not enforced.
func (o TableConstraintsResponseOutput) ForeignKeys() TableConstraintsForeignKeysItemResponseArrayOutput {
	return o.ApplyT(func(v TableConstraintsResponse) []TableConstraintsForeignKeysItemResponse { return v.ForeignKeys }).(TableConstraintsForeignKeysItemResponseArrayOutput)
}

// Represents the primary key constraint on a table's columns.
func (o TableConstraintsResponseOutput) PrimaryKey() TableConstraintsPrimaryKeyResponseOutput {
	return o.ApplyT(func(v TableConstraintsResponse) TableConstraintsPrimaryKeyResponse { return v.PrimaryKey }).(TableConstraintsPrimaryKeyResponseOutput)
}

// A field in TableSchema
type TableFieldSchema struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Categories *TableFieldSchemaCategories `pulumi:"categories"`
	// Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
	Collation *string `pulumi:"collation"`
	// Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.
	DefaultValueExpression *string `pulumi:"defaultValueExpression"`
	// Optional. The field description. The maximum length is 1,024 characters.
	Description *string `pulumi:"description"`
	// Optional. Describes the nested schema fields if the type property is set to RECORD.
	Fields []TableFieldSchema `pulumi:"fields"`
	// Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength *string `pulumi:"maxLength"`
	// Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode *string `pulumi:"mode"`
	// The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
	Name string `pulumi:"name"`
	// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
	PolicyTags *TableFieldSchemaPolicyTags `pulumi:"policyTags"`
	// Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = "NUMERIC": 1 ≤ precision ≤ 29. * If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision *string `pulumi:"precision"`
	// Represents the type of a field element.
	RangeElementType *TableFieldSchemaRangeElementType `pulumi:"rangeElementType"`
	// Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.
	RoundingMode *TableFieldSchemaRoundingMode `pulumi:"roundingMode"`
	// Optional. See documentation for precision.
	Scale *string `pulumi:"scale"`
	// The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) * RANGE ([Preview](/products/#product-launch-stages)) Use of RECORD/STRUCT indicates that the field contains a nested schema.
	Type string `pulumi:"type"`
}

// TableFieldSchemaInput is an input type that accepts TableFieldSchemaArgs and TableFieldSchemaOutput values.
// You can construct a concrete instance of `TableFieldSchemaInput` via:
//
//	TableFieldSchemaArgs{...}
type TableFieldSchemaInput interface {
	pulumi.Input

	ToTableFieldSchemaOutput() TableFieldSchemaOutput
	ToTableFieldSchemaOutputWithContext(context.Context) TableFieldSchemaOutput
}

// A field in TableSchema
type TableFieldSchemaArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Categories TableFieldSchemaCategoriesPtrInput `pulumi:"categories"`
	// Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.
	DefaultValueExpression pulumi.StringPtrInput `pulumi:"defaultValueExpression"`
	// Optional. The field description. The maximum length is 1,024 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. Describes the nested schema fields if the type property is set to RECORD.
	Fields TableFieldSchemaArrayInput `pulumi:"fields"`
	// Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength pulumi.StringPtrInput `pulumi:"maxLength"`
	// Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
	Name pulumi.StringInput `pulumi:"name"`
	// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
	PolicyTags TableFieldSchemaPolicyTagsPtrInput `pulumi:"policyTags"`
	// Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = "NUMERIC": 1 ≤ precision ≤ 29. * If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision pulumi.StringPtrInput `pulumi:"precision"`
	// Represents the type of a field element.
	RangeElementType TableFieldSchemaRangeElementTypePtrInput `pulumi:"rangeElementType"`
	// Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.
	RoundingMode TableFieldSchemaRoundingModePtrInput `pulumi:"roundingMode"`
	// Optional. See documentation for precision.
	Scale pulumi.StringPtrInput `pulumi:"scale"`
	// The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) * RANGE ([Preview](/products/#product-launch-stages)) Use of RECORD/STRUCT indicates that the field contains a nested schema.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableFieldSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchema)(nil)).Elem()
}

func (i TableFieldSchemaArgs) ToTableFieldSchemaOutput() TableFieldSchemaOutput {
	return i.ToTableFieldSchemaOutputWithContext(context.Background())
}

func (i TableFieldSchemaArgs) ToTableFieldSchemaOutputWithContext(ctx context.Context) TableFieldSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaOutput)
}

// TableFieldSchemaArrayInput is an input type that accepts TableFieldSchemaArray and TableFieldSchemaArrayOutput values.
// You can construct a concrete instance of `TableFieldSchemaArrayInput` via:
//
//	TableFieldSchemaArray{ TableFieldSchemaArgs{...} }
type TableFieldSchemaArrayInput interface {
	pulumi.Input

	ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput
	ToTableFieldSchemaArrayOutputWithContext(context.Context) TableFieldSchemaArrayOutput
}

type TableFieldSchemaArray []TableFieldSchemaInput

func (TableFieldSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchema)(nil)).Elem()
}

func (i TableFieldSchemaArray) ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput {
	return i.ToTableFieldSchemaArrayOutputWithContext(context.Background())
}

func (i TableFieldSchemaArray) ToTableFieldSchemaArrayOutputWithContext(ctx context.Context) TableFieldSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaArrayOutput)
}

// A field in TableSchema
type TableFieldSchemaOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchema)(nil)).Elem()
}

func (o TableFieldSchemaOutput) ToTableFieldSchemaOutput() TableFieldSchemaOutput {
	return o
}

func (o TableFieldSchemaOutput) ToTableFieldSchemaOutputWithContext(ctx context.Context) TableFieldSchemaOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o TableFieldSchemaOutput) Categories() TableFieldSchemaCategoriesPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *TableFieldSchemaCategories { return v.Categories }).(TableFieldSchemaCategoriesPtrOutput)
}

// Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * ”: empty string. Default to case-sensitive behavior.
func (o TableFieldSchemaOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.
func (o TableFieldSchemaOutput) DefaultValueExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.DefaultValueExpression }).(pulumi.StringPtrOutput)
}

// Optional. The field description. The maximum length is 1,024 characters.
func (o TableFieldSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. Describes the nested schema fields if the type property is set to RECORD.
func (o TableFieldSchemaOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v TableFieldSchema) []TableFieldSchema { return v.Fields }).(TableFieldSchemaArrayOutput)
}

// Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
func (o TableFieldSchemaOutput) MaxLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.MaxLength }).(pulumi.StringPtrOutput)
}

// Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
func (o TableFieldSchemaOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
func (o TableFieldSchemaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchema) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
func (o TableFieldSchemaOutput) PolicyTags() TableFieldSchemaPolicyTagsPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *TableFieldSchemaPolicyTags { return v.PolicyTags }).(TableFieldSchemaPolicyTagsPtrOutput)
}

// Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = "NUMERIC": 1 ≤ precision ≤ 29. * If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
func (o TableFieldSchemaOutput) Precision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Precision }).(pulumi.StringPtrOutput)
}

// Represents the type of a field element.
func (o TableFieldSchemaOutput) RangeElementType() TableFieldSchemaRangeElementTypePtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *TableFieldSchemaRangeElementType { return v.RangeElementType }).(TableFieldSchemaRangeElementTypePtrOutput)
}

// Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.
func (o TableFieldSchemaOutput) RoundingMode() TableFieldSchemaRoundingModePtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *TableFieldSchemaRoundingMode { return v.RoundingMode }).(TableFieldSchemaRoundingModePtrOutput)
}

// Optional. See documentation for precision.
func (o TableFieldSchemaOutput) Scale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Scale }).(pulumi.StringPtrOutput)
}

// The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) * RANGE ([Preview](/products/#product-launch-stages)) Use of RECORD/STRUCT indicates that the field contains a nested schema.
func (o TableFieldSchemaOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchema) string { return v.Type }).(pulumi.StringOutput)
}

type TableFieldSchemaArrayOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchema)(nil)).Elem()
}

func (o TableFieldSchemaArrayOutput) ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput {
	return o
}

func (o TableFieldSchemaArrayOutput) ToTableFieldSchemaArrayOutputWithContext(ctx context.Context) TableFieldSchemaArrayOutput {
	return o
}

func (o TableFieldSchemaArrayOutput) Index(i pulumi.IntInput) TableFieldSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableFieldSchema {
		return vs[0].([]TableFieldSchema)[vs[1].(int)]
	}).(TableFieldSchemaOutput)
}

// Deprecated.
type TableFieldSchemaCategories struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Names []string `pulumi:"names"`
}

// TableFieldSchemaCategoriesInput is an input type that accepts TableFieldSchemaCategoriesArgs and TableFieldSchemaCategoriesOutput values.
// You can construct a concrete instance of `TableFieldSchemaCategoriesInput` via:
//
//	TableFieldSchemaCategoriesArgs{...}
type TableFieldSchemaCategoriesInput interface {
	pulumi.Input

	ToTableFieldSchemaCategoriesOutput() TableFieldSchemaCategoriesOutput
	ToTableFieldSchemaCategoriesOutputWithContext(context.Context) TableFieldSchemaCategoriesOutput
}

// Deprecated.
type TableFieldSchemaCategoriesArgs struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (TableFieldSchemaCategoriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaCategories)(nil)).Elem()
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesOutput() TableFieldSchemaCategoriesOutput {
	return i.ToTableFieldSchemaCategoriesOutputWithContext(context.Background())
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaCategoriesOutput)
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return i.ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Background())
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaCategoriesOutput).ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx)
}

// TableFieldSchemaCategoriesPtrInput is an input type that accepts TableFieldSchemaCategoriesArgs, TableFieldSchemaCategoriesPtr and TableFieldSchemaCategoriesPtrOutput values.
// You can construct a concrete instance of `TableFieldSchemaCategoriesPtrInput` via:
//
//	        TableFieldSchemaCategoriesArgs{...}
//
//	or:
//
//	        nil
type TableFieldSchemaCategoriesPtrInput interface {
	pulumi.Input

	ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput
	ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Context) TableFieldSchemaCategoriesPtrOutput
}

type tableFieldSchemaCategoriesPtrType TableFieldSchemaCategoriesArgs

func TableFieldSchemaCategoriesPtr(v *TableFieldSchemaCategoriesArgs) TableFieldSchemaCategoriesPtrInput {
	return (*tableFieldSchemaCategoriesPtrType)(v)
}

func (*tableFieldSchemaCategoriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaCategories)(nil)).Elem()
}

func (i *tableFieldSchemaCategoriesPtrType) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return i.ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Background())
}

func (i *tableFieldSchemaCategoriesPtrType) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaCategoriesPtrOutput)
}

// Deprecated.
type TableFieldSchemaCategoriesOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaCategoriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaCategories)(nil)).Elem()
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesOutput() TableFieldSchemaCategoriesOutput {
	return o
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesOutput {
	return o
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return o.ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Background())
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableFieldSchemaCategories) *TableFieldSchemaCategories {
		return &v
	}).(TableFieldSchemaCategoriesPtrOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o TableFieldSchemaCategoriesOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaCategories) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type TableFieldSchemaCategoriesPtrOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaCategoriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaCategories)(nil)).Elem()
}

func (o TableFieldSchemaCategoriesPtrOutput) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return o
}

func (o TableFieldSchemaCategoriesPtrOutput) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return o
}

func (o TableFieldSchemaCategoriesPtrOutput) Elem() TableFieldSchemaCategoriesOutput {
	return o.ApplyT(func(v *TableFieldSchemaCategories) TableFieldSchemaCategories {
		if v != nil {
			return *v
		}
		var ret TableFieldSchemaCategories
		return ret
	}).(TableFieldSchemaCategoriesOutput)
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o TableFieldSchemaCategoriesPtrOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableFieldSchemaCategories) []string {
		if v == nil {
			return nil
		}
		return v.Names
	}).(pulumi.StringArrayOutput)
}

// Deprecated.
type TableFieldSchemaCategoriesResponse struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Names []string `pulumi:"names"`
}

// Deprecated.
type TableFieldSchemaCategoriesResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaCategoriesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaCategoriesResponse)(nil)).Elem()
}

func (o TableFieldSchemaCategoriesResponseOutput) ToTableFieldSchemaCategoriesResponseOutput() TableFieldSchemaCategoriesResponseOutput {
	return o
}

func (o TableFieldSchemaCategoriesResponseOutput) ToTableFieldSchemaCategoriesResponseOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesResponseOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o TableFieldSchemaCategoriesResponseOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaCategoriesResponse) []string { return v.Names }).(pulumi.StringArrayOutput)
}

// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
type TableFieldSchemaPolicyTags struct {
	// A list of policy tag resource names. For example, "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag is currently allowed.
	Names []string `pulumi:"names"`
}

// TableFieldSchemaPolicyTagsInput is an input type that accepts TableFieldSchemaPolicyTagsArgs and TableFieldSchemaPolicyTagsOutput values.
// You can construct a concrete instance of `TableFieldSchemaPolicyTagsInput` via:
//
//	TableFieldSchemaPolicyTagsArgs{...}
type TableFieldSchemaPolicyTagsInput interface {
	pulumi.Input

	ToTableFieldSchemaPolicyTagsOutput() TableFieldSchemaPolicyTagsOutput
	ToTableFieldSchemaPolicyTagsOutputWithContext(context.Context) TableFieldSchemaPolicyTagsOutput
}

// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
type TableFieldSchemaPolicyTagsArgs struct {
	// A list of policy tag resource names. For example, "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag is currently allowed.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (TableFieldSchemaPolicyTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsOutput() TableFieldSchemaPolicyTagsOutput {
	return i.ToTableFieldSchemaPolicyTagsOutputWithContext(context.Background())
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaPolicyTagsOutput)
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return i.ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Background())
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaPolicyTagsOutput).ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx)
}

// TableFieldSchemaPolicyTagsPtrInput is an input type that accepts TableFieldSchemaPolicyTagsArgs, TableFieldSchemaPolicyTagsPtr and TableFieldSchemaPolicyTagsPtrOutput values.
// You can construct a concrete instance of `TableFieldSchemaPolicyTagsPtrInput` via:
//
//	        TableFieldSchemaPolicyTagsArgs{...}
//
//	or:
//
//	        nil
type TableFieldSchemaPolicyTagsPtrInput interface {
	pulumi.Input

	ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput
	ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Context) TableFieldSchemaPolicyTagsPtrOutput
}

type tableFieldSchemaPolicyTagsPtrType TableFieldSchemaPolicyTagsArgs

func TableFieldSchemaPolicyTagsPtr(v *TableFieldSchemaPolicyTagsArgs) TableFieldSchemaPolicyTagsPtrInput {
	return (*tableFieldSchemaPolicyTagsPtrType)(v)
}

func (*tableFieldSchemaPolicyTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (i *tableFieldSchemaPolicyTagsPtrType) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return i.ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Background())
}

func (i *tableFieldSchemaPolicyTagsPtrType) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaPolicyTagsPtrOutput)
}

// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
type TableFieldSchemaPolicyTagsOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaPolicyTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsOutput() TableFieldSchemaPolicyTagsOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return o.ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Background())
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableFieldSchemaPolicyTags) *TableFieldSchemaPolicyTags {
		return &v
	}).(TableFieldSchemaPolicyTagsPtrOutput)
}

// A list of policy tag resource names. For example, "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag is currently allowed.
func (o TableFieldSchemaPolicyTagsOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaPolicyTags) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type TableFieldSchemaPolicyTagsPtrOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaPolicyTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (o TableFieldSchemaPolicyTagsPtrOutput) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsPtrOutput) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsPtrOutput) Elem() TableFieldSchemaPolicyTagsOutput {
	return o.ApplyT(func(v *TableFieldSchemaPolicyTags) TableFieldSchemaPolicyTags {
		if v != nil {
			return *v
		}
		var ret TableFieldSchemaPolicyTags
		return ret
	}).(TableFieldSchemaPolicyTagsOutput)
}

// A list of policy tag resource names. For example, "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag is currently allowed.
func (o TableFieldSchemaPolicyTagsPtrOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableFieldSchemaPolicyTags) []string {
		if v == nil {
			return nil
		}
		return v.Names
	}).(pulumi.StringArrayOutput)
}

// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
type TableFieldSchemaPolicyTagsResponse struct {
	// A list of policy tag resource names. For example, "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag is currently allowed.
	Names []string `pulumi:"names"`
}

// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
type TableFieldSchemaPolicyTagsResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaPolicyTagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaPolicyTagsResponse)(nil)).Elem()
}

func (o TableFieldSchemaPolicyTagsResponseOutput) ToTableFieldSchemaPolicyTagsResponseOutput() TableFieldSchemaPolicyTagsResponseOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsResponseOutput) ToTableFieldSchemaPolicyTagsResponseOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsResponseOutput {
	return o
}

// A list of policy tag resource names. For example, "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag is currently allowed.
func (o TableFieldSchemaPolicyTagsResponseOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaPolicyTagsResponse) []string { return v.Names }).(pulumi.StringArrayOutput)
}

// Represents the type of a field element.
type TableFieldSchemaRangeElementType struct {
	// The type of a field element. For more information, see TableFieldSchema.type.
	Type string `pulumi:"type"`
}

// TableFieldSchemaRangeElementTypeInput is an input type that accepts TableFieldSchemaRangeElementTypeArgs and TableFieldSchemaRangeElementTypeOutput values.
// You can construct a concrete instance of `TableFieldSchemaRangeElementTypeInput` via:
//
//	TableFieldSchemaRangeElementTypeArgs{...}
type TableFieldSchemaRangeElementTypeInput interface {
	pulumi.Input

	ToTableFieldSchemaRangeElementTypeOutput() TableFieldSchemaRangeElementTypeOutput
	ToTableFieldSchemaRangeElementTypeOutputWithContext(context.Context) TableFieldSchemaRangeElementTypeOutput
}

// Represents the type of a field element.
type TableFieldSchemaRangeElementTypeArgs struct {
	// The type of a field element. For more information, see TableFieldSchema.type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TableFieldSchemaRangeElementTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypeOutput() TableFieldSchemaRangeElementTypeOutput {
	return i.ToTableFieldSchemaRangeElementTypeOutputWithContext(context.Background())
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypeOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaRangeElementTypeOutput)
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return i.ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Background())
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaRangeElementTypeOutput).ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx)
}

// TableFieldSchemaRangeElementTypePtrInput is an input type that accepts TableFieldSchemaRangeElementTypeArgs, TableFieldSchemaRangeElementTypePtr and TableFieldSchemaRangeElementTypePtrOutput values.
// You can construct a concrete instance of `TableFieldSchemaRangeElementTypePtrInput` via:
//
//	        TableFieldSchemaRangeElementTypeArgs{...}
//
//	or:
//
//	        nil
type TableFieldSchemaRangeElementTypePtrInput interface {
	pulumi.Input

	ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput
	ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Context) TableFieldSchemaRangeElementTypePtrOutput
}

type tableFieldSchemaRangeElementTypePtrType TableFieldSchemaRangeElementTypeArgs

func TableFieldSchemaRangeElementTypePtr(v *TableFieldSchemaRangeElementTypeArgs) TableFieldSchemaRangeElementTypePtrInput {
	return (*tableFieldSchemaRangeElementTypePtrType)(v)
}

func (*tableFieldSchemaRangeElementTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (i *tableFieldSchemaRangeElementTypePtrType) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return i.ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Background())
}

func (i *tableFieldSchemaRangeElementTypePtrType) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaRangeElementTypePtrOutput)
}

// Represents the type of a field element.
type TableFieldSchemaRangeElementTypeOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaRangeElementTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypeOutput() TableFieldSchemaRangeElementTypeOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypeOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypeOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return o.ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Background())
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableFieldSchemaRangeElementType) *TableFieldSchemaRangeElementType {
		return &v
	}).(TableFieldSchemaRangeElementTypePtrOutput)
}

// The type of a field element. For more information, see TableFieldSchema.type.
func (o TableFieldSchemaRangeElementTypeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaRangeElementType) string { return v.Type }).(pulumi.StringOutput)
}

type TableFieldSchemaRangeElementTypePtrOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaRangeElementTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (o TableFieldSchemaRangeElementTypePtrOutput) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypePtrOutput) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypePtrOutput) Elem() TableFieldSchemaRangeElementTypeOutput {
	return o.ApplyT(func(v *TableFieldSchemaRangeElementType) TableFieldSchemaRangeElementType {
		if v != nil {
			return *v
		}
		var ret TableFieldSchemaRangeElementType
		return ret
	}).(TableFieldSchemaRangeElementTypeOutput)
}

// The type of a field element. For more information, see TableFieldSchema.type.
func (o TableFieldSchemaRangeElementTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFieldSchemaRangeElementType) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// Represents the type of a field element.
type TableFieldSchemaRangeElementTypeResponse struct {
	// The type of a field element. For more information, see TableFieldSchema.type.
	Type string `pulumi:"type"`
}

// Represents the type of a field element.
type TableFieldSchemaRangeElementTypeResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaRangeElementTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaRangeElementTypeResponse)(nil)).Elem()
}

func (o TableFieldSchemaRangeElementTypeResponseOutput) ToTableFieldSchemaRangeElementTypeResponseOutput() TableFieldSchemaRangeElementTypeResponseOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypeResponseOutput) ToTableFieldSchemaRangeElementTypeResponseOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypeResponseOutput {
	return o
}

// The type of a field element. For more information, see TableFieldSchema.type.
func (o TableFieldSchemaRangeElementTypeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaRangeElementTypeResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A field in TableSchema
type TableFieldSchemaResponse struct {
	// Deprecated.
	//
	// Deprecated: Deprecated.
	Categories TableFieldSchemaCategoriesResponse `pulumi:"categories"`
	// Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.
	Collation string `pulumi:"collation"`
	// Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.
	DefaultValueExpression string `pulumi:"defaultValueExpression"`
	// Optional. The field description. The maximum length is 1,024 characters.
	Description string `pulumi:"description"`
	// Optional. Describes the nested schema fields if the type property is set to RECORD.
	Fields []TableFieldSchemaResponse `pulumi:"fields"`
	// Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength string `pulumi:"maxLength"`
	// Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode string `pulumi:"mode"`
	// The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
	Name string `pulumi:"name"`
	// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
	PolicyTags TableFieldSchemaPolicyTagsResponse `pulumi:"policyTags"`
	// Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = "NUMERIC": 1 ≤ precision ≤ 29. * If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision string `pulumi:"precision"`
	// Represents the type of a field element.
	RangeElementType TableFieldSchemaRangeElementTypeResponse `pulumi:"rangeElementType"`
	// Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.
	RoundingMode string `pulumi:"roundingMode"`
	// Optional. See documentation for precision.
	Scale string `pulumi:"scale"`
	// The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) * RANGE ([Preview](/products/#product-launch-stages)) Use of RECORD/STRUCT indicates that the field contains a nested schema.
	Type string `pulumi:"type"`
}

// A field in TableSchema
type TableFieldSchemaResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaResponse)(nil)).Elem()
}

func (o TableFieldSchemaResponseOutput) ToTableFieldSchemaResponseOutput() TableFieldSchemaResponseOutput {
	return o
}

func (o TableFieldSchemaResponseOutput) ToTableFieldSchemaResponseOutputWithContext(ctx context.Context) TableFieldSchemaResponseOutput {
	return o
}

// Deprecated.
//
// Deprecated: Deprecated.
func (o TableFieldSchemaResponseOutput) Categories() TableFieldSchemaCategoriesResponseOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) TableFieldSchemaCategoriesResponse { return v.Categories }).(TableFieldSchemaCategoriesResponseOutput)
}

// Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * ”: empty string. Default to case-sensitive behavior.
func (o TableFieldSchemaResponseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Collation }).(pulumi.StringOutput)
}

// Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.
func (o TableFieldSchemaResponseOutput) DefaultValueExpression() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.DefaultValueExpression }).(pulumi.StringOutput)
}

// Optional. The field description. The maximum length is 1,024 characters.
func (o TableFieldSchemaResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. Describes the nested schema fields if the type property is set to RECORD.
func (o TableFieldSchemaResponseOutput) Fields() TableFieldSchemaResponseArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) []TableFieldSchemaResponse { return v.Fields }).(TableFieldSchemaResponseArrayOutput)
}

// Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
func (o TableFieldSchemaResponseOutput) MaxLength() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.MaxLength }).(pulumi.StringOutput)
}

// Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
func (o TableFieldSchemaResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
func (o TableFieldSchemaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.
func (o TableFieldSchemaResponseOutput) PolicyTags() TableFieldSchemaPolicyTagsResponseOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) TableFieldSchemaPolicyTagsResponse { return v.PolicyTags }).(TableFieldSchemaPolicyTagsResponseOutput)
}

// Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = "NUMERIC": 1 ≤ precision ≤ 29. * If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
func (o TableFieldSchemaResponseOutput) Precision() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Precision }).(pulumi.StringOutput)
}

// Represents the type of a field element.
func (o TableFieldSchemaResponseOutput) RangeElementType() TableFieldSchemaRangeElementTypeResponseOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) TableFieldSchemaRangeElementTypeResponse { return v.RangeElementType }).(TableFieldSchemaRangeElementTypeResponseOutput)
}

// Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.
func (o TableFieldSchemaResponseOutput) RoundingMode() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.RoundingMode }).(pulumi.StringOutput)
}

// Optional. See documentation for precision.
func (o TableFieldSchemaResponseOutput) Scale() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Scale }).(pulumi.StringOutput)
}

// The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) * RANGE ([Preview](/products/#product-launch-stages)) Use of RECORD/STRUCT indicates that the field contains a nested schema.
func (o TableFieldSchemaResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TableFieldSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchemaResponse)(nil)).Elem()
}

func (o TableFieldSchemaResponseArrayOutput) ToTableFieldSchemaResponseArrayOutput() TableFieldSchemaResponseArrayOutput {
	return o
}

func (o TableFieldSchemaResponseArrayOutput) ToTableFieldSchemaResponseArrayOutputWithContext(ctx context.Context) TableFieldSchemaResponseArrayOutput {
	return o
}

func (o TableFieldSchemaResponseArrayOutput) Index(i pulumi.IntInput) TableFieldSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableFieldSchemaResponse {
		return vs[0].([]TableFieldSchemaResponse)[vs[1].(int)]
	}).(TableFieldSchemaResponseOutput)
}

// Table level detail on the usage of metadata caching. Only set for Metadata caching eligible tables referenced in the query.
type TableMetadataCacheUsageResponse struct {
	// Free form human-readable reason metadata caching was unused for the job.
	Explanation string `pulumi:"explanation"`
	// Metadata caching eligible table referenced in the query.
	TableReference TableReferenceResponse `pulumi:"tableReference"`
	// [Table type](/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
	TableType string `pulumi:"tableType"`
	// Reason for not using metadata caching for the table.
	UnusedReason string `pulumi:"unusedReason"`
}

// Table level detail on the usage of metadata caching. Only set for Metadata caching eligible tables referenced in the query.
type TableMetadataCacheUsageResponseOutput struct{ *pulumi.OutputState }

func (TableMetadataCacheUsageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableMetadataCacheUsageResponse)(nil)).Elem()
}

func (o TableMetadataCacheUsageResponseOutput) ToTableMetadataCacheUsageResponseOutput() TableMetadataCacheUsageResponseOutput {
	return o
}

func (o TableMetadataCacheUsageResponseOutput) ToTableMetadataCacheUsageResponseOutputWithContext(ctx context.Context) TableMetadataCacheUsageResponseOutput {
	return o
}

// Free form human-readable reason metadata caching was unused for the job.
func (o TableMetadataCacheUsageResponseOutput) Explanation() pulumi.StringOutput {
	return o.ApplyT(func(v TableMetadataCacheUsageResponse) string { return v.Explanation }).(pulumi.StringOutput)
}

// Metadata caching eligible table referenced in the query.
func (o TableMetadataCacheUsageResponseOutput) TableReference() TableReferenceResponseOutput {
	return o.ApplyT(func(v TableMetadataCacheUsageResponse) TableReferenceResponse { return v.TableReference }).(TableReferenceResponseOutput)
}

// [Table type](/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
func (o TableMetadataCacheUsageResponseOutput) TableType() pulumi.StringOutput {
	return o.ApplyT(func(v TableMetadataCacheUsageResponse) string { return v.TableType }).(pulumi.StringOutput)
}

// Reason for not using metadata caching for the table.
func (o TableMetadataCacheUsageResponseOutput) UnusedReason() pulumi.StringOutput {
	return o.ApplyT(func(v TableMetadataCacheUsageResponse) string { return v.UnusedReason }).(pulumi.StringOutput)
}

type TableMetadataCacheUsageResponseArrayOutput struct{ *pulumi.OutputState }

func (TableMetadataCacheUsageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableMetadataCacheUsageResponse)(nil)).Elem()
}

func (o TableMetadataCacheUsageResponseArrayOutput) ToTableMetadataCacheUsageResponseArrayOutput() TableMetadataCacheUsageResponseArrayOutput {
	return o
}

func (o TableMetadataCacheUsageResponseArrayOutput) ToTableMetadataCacheUsageResponseArrayOutputWithContext(ctx context.Context) TableMetadataCacheUsageResponseArrayOutput {
	return o
}

func (o TableMetadataCacheUsageResponseArrayOutput) Index(i pulumi.IntInput) TableMetadataCacheUsageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableMetadataCacheUsageResponse {
		return vs[0].([]TableMetadataCacheUsageResponse)[vs[1].(int)]
	}).(TableMetadataCacheUsageResponseOutput)
}

type TableReference struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	Project string `pulumi:"project"`
	// The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.
	TableId string `pulumi:"tableId"`
}

// TableReferenceInput is an input type that accepts TableReferenceArgs and TableReferenceOutput values.
// You can construct a concrete instance of `TableReferenceInput` via:
//
//	TableReferenceArgs{...}
type TableReferenceInput interface {
	pulumi.Input

	ToTableReferenceOutput() TableReferenceOutput
	ToTableReferenceOutputWithContext(context.Context) TableReferenceOutput
}

type TableReferenceArgs struct {
	// The ID of the dataset containing this table.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this table.
	Project pulumi.StringInput `pulumi:"project"`
	// The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.
	TableId pulumi.StringInput `pulumi:"tableId"`
}

func (TableReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReference)(nil)).Elem()
}

func (i TableReferenceArgs) ToTableReferenceOutput() TableReferenceOutput {
	return i.ToTableReferenceOutputWithContext(context.Background())
}

func (i TableReferenceArgs) ToTableReferenceOutputWithContext(ctx context.Context) TableReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceOutput)
}

func (i TableReferenceArgs) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return i.ToTableReferencePtrOutputWithContext(context.Background())
}

func (i TableReferenceArgs) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceOutput).ToTableReferencePtrOutputWithContext(ctx)
}

// TableReferencePtrInput is an input type that accepts TableReferenceArgs, TableReferencePtr and TableReferencePtrOutput values.
// You can construct a concrete instance of `TableReferencePtrInput` via:
//
//	        TableReferenceArgs{...}
//
//	or:
//
//	        nil
type TableReferencePtrInput interface {
	pulumi.Input

	ToTableReferencePtrOutput() TableReferencePtrOutput
	ToTableReferencePtrOutputWithContext(context.Context) TableReferencePtrOutput
}

type tableReferencePtrType TableReferenceArgs

func TableReferencePtr(v *TableReferenceArgs) TableReferencePtrInput {
	return (*tableReferencePtrType)(v)
}

func (*tableReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReference)(nil)).Elem()
}

func (i *tableReferencePtrType) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return i.ToTableReferencePtrOutputWithContext(context.Background())
}

func (i *tableReferencePtrType) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferencePtrOutput)
}

// TableReferenceArrayInput is an input type that accepts TableReferenceArray and TableReferenceArrayOutput values.
// You can construct a concrete instance of `TableReferenceArrayInput` via:
//
//	TableReferenceArray{ TableReferenceArgs{...} }
type TableReferenceArrayInput interface {
	pulumi.Input

	ToTableReferenceArrayOutput() TableReferenceArrayOutput
	ToTableReferenceArrayOutputWithContext(context.Context) TableReferenceArrayOutput
}

type TableReferenceArray []TableReferenceInput

func (TableReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReference)(nil)).Elem()
}

func (i TableReferenceArray) ToTableReferenceArrayOutput() TableReferenceArrayOutput {
	return i.ToTableReferenceArrayOutputWithContext(context.Background())
}

func (i TableReferenceArray) ToTableReferenceArrayOutputWithContext(ctx context.Context) TableReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceArrayOutput)
}

type TableReferenceOutput struct{ *pulumi.OutputState }

func (TableReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReference)(nil)).Elem()
}

func (o TableReferenceOutput) ToTableReferenceOutput() TableReferenceOutput {
	return o
}

func (o TableReferenceOutput) ToTableReferenceOutputWithContext(ctx context.Context) TableReferenceOutput {
	return o
}

func (o TableReferenceOutput) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return o.ToTableReferencePtrOutputWithContext(context.Background())
}

func (o TableReferenceOutput) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableReference) *TableReference {
		return &v
	}).(TableReferencePtrOutput)
}

// The ID of the dataset containing this table.
func (o TableReferenceOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v TableReference) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o TableReferenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v TableReference) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.
func (o TableReferenceOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v TableReference) string { return v.TableId }).(pulumi.StringOutput)
}

type TableReferencePtrOutput struct{ *pulumi.OutputState }

func (TableReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReference)(nil)).Elem()
}

func (o TableReferencePtrOutput) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return o
}

func (o TableReferencePtrOutput) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return o
}

func (o TableReferencePtrOutput) Elem() TableReferenceOutput {
	return o.ApplyT(func(v *TableReference) TableReference {
		if v != nil {
			return *v
		}
		var ret TableReference
		return ret
	}).(TableReferenceOutput)
}

// The ID of the dataset containing this table.
func (o TableReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this table.
func (o TableReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.
func (o TableReferencePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return &v.TableId
	}).(pulumi.StringPtrOutput)
}

type TableReferenceArrayOutput struct{ *pulumi.OutputState }

func (TableReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReference)(nil)).Elem()
}

func (o TableReferenceArrayOutput) ToTableReferenceArrayOutput() TableReferenceArrayOutput {
	return o
}

func (o TableReferenceArrayOutput) ToTableReferenceArrayOutputWithContext(ctx context.Context) TableReferenceArrayOutput {
	return o
}

func (o TableReferenceArrayOutput) Index(i pulumi.IntInput) TableReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReference {
		return vs[0].([]TableReference)[vs[1].(int)]
	}).(TableReferenceOutput)
}

type TableReferenceResponse struct {
	// The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this table.
	Project string `pulumi:"project"`
	// The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.
	TableId string `pulumi:"tableId"`
}

type TableReferenceResponseOutput struct{ *pulumi.OutputState }

func (TableReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReferenceResponse)(nil)).Elem()
}

func (o TableReferenceResponseOutput) ToTableReferenceResponseOutput() TableReferenceResponseOutput {
	return o
}

func (o TableReferenceResponseOutput) ToTableReferenceResponseOutputWithContext(ctx context.Context) TableReferenceResponseOutput {
	return o
}

// The ID of the dataset containing this table.
func (o TableReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v TableReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this table.
func (o TableReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v TableReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.
func (o TableReferenceResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v TableReferenceResponse) string { return v.TableId }).(pulumi.StringOutput)
}

type TableReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (TableReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReferenceResponse)(nil)).Elem()
}

func (o TableReferenceResponseArrayOutput) ToTableReferenceResponseArrayOutput() TableReferenceResponseArrayOutput {
	return o
}

func (o TableReferenceResponseArrayOutput) ToTableReferenceResponseArrayOutputWithContext(ctx context.Context) TableReferenceResponseArrayOutput {
	return o
}

func (o TableReferenceResponseArrayOutput) Index(i pulumi.IntInput) TableReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReferenceResponse {
		return vs[0].([]TableReferenceResponse)[vs[1].(int)]
	}).(TableReferenceResponseOutput)
}

// Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
type TableReplicationInfo struct {
	// Specifies the interval at which the source table is polled for updates.
	ReplicationIntervalMs string `pulumi:"replicationIntervalMs"`
	// Source table reference that is replicated.
	SourceTable TableReference `pulumi:"sourceTable"`
}

// TableReplicationInfoInput is an input type that accepts TableReplicationInfoArgs and TableReplicationInfoOutput values.
// You can construct a concrete instance of `TableReplicationInfoInput` via:
//
//	TableReplicationInfoArgs{...}
type TableReplicationInfoInput interface {
	pulumi.Input

	ToTableReplicationInfoOutput() TableReplicationInfoOutput
	ToTableReplicationInfoOutputWithContext(context.Context) TableReplicationInfoOutput
}

// Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
type TableReplicationInfoArgs struct {
	// Specifies the interval at which the source table is polled for updates.
	ReplicationIntervalMs pulumi.StringInput `pulumi:"replicationIntervalMs"`
	// Source table reference that is replicated.
	SourceTable TableReferenceInput `pulumi:"sourceTable"`
}

func (TableReplicationInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicationInfo)(nil)).Elem()
}

func (i TableReplicationInfoArgs) ToTableReplicationInfoOutput() TableReplicationInfoOutput {
	return i.ToTableReplicationInfoOutputWithContext(context.Background())
}

func (i TableReplicationInfoArgs) ToTableReplicationInfoOutputWithContext(ctx context.Context) TableReplicationInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicationInfoOutput)
}

func (i TableReplicationInfoArgs) ToTableReplicationInfoPtrOutput() TableReplicationInfoPtrOutput {
	return i.ToTableReplicationInfoPtrOutputWithContext(context.Background())
}

func (i TableReplicationInfoArgs) ToTableReplicationInfoPtrOutputWithContext(ctx context.Context) TableReplicationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicationInfoOutput).ToTableReplicationInfoPtrOutputWithContext(ctx)
}

// TableReplicationInfoPtrInput is an input type that accepts TableReplicationInfoArgs, TableReplicationInfoPtr and TableReplicationInfoPtrOutput values.
// You can construct a concrete instance of `TableReplicationInfoPtrInput` via:
//
//	        TableReplicationInfoArgs{...}
//
//	or:
//
//	        nil
type TableReplicationInfoPtrInput interface {
	pulumi.Input

	ToTableReplicationInfoPtrOutput() TableReplicationInfoPtrOutput
	ToTableReplicationInfoPtrOutputWithContext(context.Context) TableReplicationInfoPtrOutput
}

type tableReplicationInfoPtrType TableReplicationInfoArgs

func TableReplicationInfoPtr(v *TableReplicationInfoArgs) TableReplicationInfoPtrInput {
	return (*tableReplicationInfoPtrType)(v)
}

func (*tableReplicationInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReplicationInfo)(nil)).Elem()
}

func (i *tableReplicationInfoPtrType) ToTableReplicationInfoPtrOutput() TableReplicationInfoPtrOutput {
	return i.ToTableReplicationInfoPtrOutputWithContext(context.Background())
}

func (i *tableReplicationInfoPtrType) ToTableReplicationInfoPtrOutputWithContext(ctx context.Context) TableReplicationInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReplicationInfoPtrOutput)
}

// Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
type TableReplicationInfoOutput struct{ *pulumi.OutputState }

func (TableReplicationInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicationInfo)(nil)).Elem()
}

func (o TableReplicationInfoOutput) ToTableReplicationInfoOutput() TableReplicationInfoOutput {
	return o
}

func (o TableReplicationInfoOutput) ToTableReplicationInfoOutputWithContext(ctx context.Context) TableReplicationInfoOutput {
	return o
}

func (o TableReplicationInfoOutput) ToTableReplicationInfoPtrOutput() TableReplicationInfoPtrOutput {
	return o.ToTableReplicationInfoPtrOutputWithContext(context.Background())
}

func (o TableReplicationInfoOutput) ToTableReplicationInfoPtrOutputWithContext(ctx context.Context) TableReplicationInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableReplicationInfo) *TableReplicationInfo {
		return &v
	}).(TableReplicationInfoPtrOutput)
}

// Specifies the interval at which the source table is polled for updates.
func (o TableReplicationInfoOutput) ReplicationIntervalMs() pulumi.StringOutput {
	return o.ApplyT(func(v TableReplicationInfo) string { return v.ReplicationIntervalMs }).(pulumi.StringOutput)
}

// Source table reference that is replicated.
func (o TableReplicationInfoOutput) SourceTable() TableReferenceOutput {
	return o.ApplyT(func(v TableReplicationInfo) TableReference { return v.SourceTable }).(TableReferenceOutput)
}

type TableReplicationInfoPtrOutput struct{ *pulumi.OutputState }

func (TableReplicationInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReplicationInfo)(nil)).Elem()
}

func (o TableReplicationInfoPtrOutput) ToTableReplicationInfoPtrOutput() TableReplicationInfoPtrOutput {
	return o
}

func (o TableReplicationInfoPtrOutput) ToTableReplicationInfoPtrOutputWithContext(ctx context.Context) TableReplicationInfoPtrOutput {
	return o
}

func (o TableReplicationInfoPtrOutput) Elem() TableReplicationInfoOutput {
	return o.ApplyT(func(v *TableReplicationInfo) TableReplicationInfo {
		if v != nil {
			return *v
		}
		var ret TableReplicationInfo
		return ret
	}).(TableReplicationInfoOutput)
}

// Specifies the interval at which the source table is polled for updates.
func (o TableReplicationInfoPtrOutput) ReplicationIntervalMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReplicationInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationIntervalMs
	}).(pulumi.StringPtrOutput)
}

// Source table reference that is replicated.
func (o TableReplicationInfoPtrOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *TableReplicationInfo) *TableReference {
		if v == nil {
			return nil
		}
		return &v.SourceTable
	}).(TableReferencePtrOutput)
}

// Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
type TableReplicationInfoResponse struct {
	// Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.
	ReplicatedSourceLastRefreshTime string `pulumi:"replicatedSourceLastRefreshTime"`
	// Optional. Output only. Replication error that will permanently stopped table replication.
	ReplicationError ErrorProtoResponse `pulumi:"replicationError"`
	// Specifies the interval at which the source table is polled for updates.
	ReplicationIntervalMs string `pulumi:"replicationIntervalMs"`
	// Optional. Output only. Replication status of configured replication.
	ReplicationStatus string `pulumi:"replicationStatus"`
	// Source table reference that is replicated.
	SourceTable TableReferenceResponse `pulumi:"sourceTable"`
}

// Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
type TableReplicationInfoResponseOutput struct{ *pulumi.OutputState }

func (TableReplicationInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReplicationInfoResponse)(nil)).Elem()
}

func (o TableReplicationInfoResponseOutput) ToTableReplicationInfoResponseOutput() TableReplicationInfoResponseOutput {
	return o
}

func (o TableReplicationInfoResponseOutput) ToTableReplicationInfoResponseOutputWithContext(ctx context.Context) TableReplicationInfoResponseOutput {
	return o
}

// Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.
func (o TableReplicationInfoResponseOutput) ReplicatedSourceLastRefreshTime() pulumi.StringOutput {
	return o.ApplyT(func(v TableReplicationInfoResponse) string { return v.ReplicatedSourceLastRefreshTime }).(pulumi.StringOutput)
}

// Optional. Output only. Replication error that will permanently stopped table replication.
func (o TableReplicationInfoResponseOutput) ReplicationError() ErrorProtoResponseOutput {
	return o.ApplyT(func(v TableReplicationInfoResponse) ErrorProtoResponse { return v.ReplicationError }).(ErrorProtoResponseOutput)
}

// Specifies the interval at which the source table is polled for updates.
func (o TableReplicationInfoResponseOutput) ReplicationIntervalMs() pulumi.StringOutput {
	return o.ApplyT(func(v TableReplicationInfoResponse) string { return v.ReplicationIntervalMs }).(pulumi.StringOutput)
}

// Optional. Output only. Replication status of configured replication.
func (o TableReplicationInfoResponseOutput) ReplicationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v TableReplicationInfoResponse) string { return v.ReplicationStatus }).(pulumi.StringOutput)
}

// Source table reference that is replicated.
func (o TableReplicationInfoResponseOutput) SourceTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v TableReplicationInfoResponse) TableReferenceResponse { return v.SourceTable }).(TableReferenceResponseOutput)
}

// Schema of a table
type TableSchema struct {
	// Describes the fields in a table.
	Fields []TableFieldSchema `pulumi:"fields"`
}

// TableSchemaInput is an input type that accepts TableSchemaArgs and TableSchemaOutput values.
// You can construct a concrete instance of `TableSchemaInput` via:
//
//	TableSchemaArgs{...}
type TableSchemaInput interface {
	pulumi.Input

	ToTableSchemaOutput() TableSchemaOutput
	ToTableSchemaOutputWithContext(context.Context) TableSchemaOutput
}

// Schema of a table
type TableSchemaArgs struct {
	// Describes the fields in a table.
	Fields TableFieldSchemaArrayInput `pulumi:"fields"`
}

func (TableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (i TableSchemaArgs) ToTableSchemaOutput() TableSchemaOutput {
	return i.ToTableSchemaOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput)
}

func (i TableSchemaArgs) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput).ToTableSchemaPtrOutputWithContext(ctx)
}

// TableSchemaPtrInput is an input type that accepts TableSchemaArgs, TableSchemaPtr and TableSchemaPtrOutput values.
// You can construct a concrete instance of `TableSchemaPtrInput` via:
//
//	        TableSchemaArgs{...}
//
//	or:
//
//	        nil
type TableSchemaPtrInput interface {
	pulumi.Input

	ToTableSchemaPtrOutput() TableSchemaPtrOutput
	ToTableSchemaPtrOutputWithContext(context.Context) TableSchemaPtrOutput
}

type tableSchemaPtrType TableSchemaArgs

func TableSchemaPtr(v *TableSchemaArgs) TableSchemaPtrInput {
	return (*tableSchemaPtrType)(v)
}

func (*tableSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaPtrOutput)
}

// Schema of a table
type TableSchemaOutput struct{ *pulumi.OutputState }

func (TableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (o TableSchemaOutput) ToTableSchemaOutput() TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (o TableSchemaOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSchema) *TableSchema {
		return &v
	}).(TableSchemaPtrOutput)
}

// Describes the fields in a table.
func (o TableSchemaOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v TableSchema) []TableFieldSchema { return v.Fields }).(TableFieldSchemaArrayOutput)
}

type TableSchemaPtrOutput struct{ *pulumi.OutputState }

func (TableSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) Elem() TableSchemaOutput {
	return o.ApplyT(func(v *TableSchema) TableSchema {
		if v != nil {
			return *v
		}
		var ret TableSchema
		return ret
	}).(TableSchemaOutput)
}

// Describes the fields in a table.
func (o TableSchemaPtrOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v *TableSchema) []TableFieldSchema {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(TableFieldSchemaArrayOutput)
}

// Schema of a table
type TableSchemaResponse struct {
	// Describes the fields in a table.
	Fields []TableFieldSchemaResponse `pulumi:"fields"`
}

// Schema of a table
type TableSchemaResponseOutput struct{ *pulumi.OutputState }

func (TableSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaResponse)(nil)).Elem()
}

func (o TableSchemaResponseOutput) ToTableSchemaResponseOutput() TableSchemaResponseOutput {
	return o
}

func (o TableSchemaResponseOutput) ToTableSchemaResponseOutputWithContext(ctx context.Context) TableSchemaResponseOutput {
	return o
}

// Describes the fields in a table.
func (o TableSchemaResponseOutput) Fields() TableFieldSchemaResponseArrayOutput {
	return o.ApplyT(func(v TableSchemaResponse) []TableFieldSchemaResponse { return v.Fields }).(TableFieldSchemaResponseArrayOutput)
}

type TimePartitioning struct {
	// Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
	ExpirationMs *string `pulumi:"expirationMs"`
	// Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
	Field *string `pulumi:"field"`
	// If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
	//
	// Deprecated: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
	Type string `pulumi:"type"`
}

// TimePartitioningInput is an input type that accepts TimePartitioningArgs and TimePartitioningOutput values.
// You can construct a concrete instance of `TimePartitioningInput` via:
//
//	TimePartitioningArgs{...}
type TimePartitioningInput interface {
	pulumi.Input

	ToTimePartitioningOutput() TimePartitioningOutput
	ToTimePartitioningOutputWithContext(context.Context) TimePartitioningOutput
}

type TimePartitioningArgs struct {
	// Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
	ExpirationMs pulumi.StringPtrInput `pulumi:"expirationMs"`
	// Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
	//
	// Deprecated: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (i TimePartitioningArgs) ToTimePartitioningOutput() TimePartitioningOutput {
	return i.ToTimePartitioningOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput)
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput).ToTimePartitioningPtrOutputWithContext(ctx)
}

// TimePartitioningPtrInput is an input type that accepts TimePartitioningArgs, TimePartitioningPtr and TimePartitioningPtrOutput values.
// You can construct a concrete instance of `TimePartitioningPtrInput` via:
//
//	        TimePartitioningArgs{...}
//
//	or:
//
//	        nil
type TimePartitioningPtrInput interface {
	pulumi.Input

	ToTimePartitioningPtrOutput() TimePartitioningPtrOutput
	ToTimePartitioningPtrOutputWithContext(context.Context) TimePartitioningPtrOutput
}

type timePartitioningPtrType TimePartitioningArgs

func TimePartitioningPtr(v *TimePartitioningArgs) TimePartitioningPtrInput {
	return (*timePartitioningPtrType)(v)
}

func (*timePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningPtrOutput)
}

type TimePartitioningOutput struct{ *pulumi.OutputState }

func (TimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningOutput) ToTimePartitioningOutput() TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimePartitioning) *TimePartitioning {
		return &v
	}).(TimePartitioningPtrOutput)
}

// Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
func (o TimePartitioningOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.ExpirationMs }).(pulumi.StringPtrOutput)
}

// Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
func (o TimePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
//
// Deprecated: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
func (o TimePartitioningOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
func (o TimePartitioningOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioning) string { return v.Type }).(pulumi.StringOutput)
}

type TimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) Elem() TimePartitioningOutput {
	return o.ApplyT(func(v *TimePartitioning) TimePartitioning {
		if v != nil {
			return *v
		}
		var ret TimePartitioning
		return ret
	}).(TimePartitioningOutput)
}

// Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
func (o TimePartitioningPtrOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationMs
	}).(pulumi.StringPtrOutput)
}

// Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
func (o TimePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
//
// Deprecated: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
func (o TimePartitioningPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
func (o TimePartitioningPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type TimePartitioningResponse struct {
	// Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
	ExpirationMs string `pulumi:"expirationMs"`
	// Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
	Field string `pulumi:"field"`
	// If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
	//
	// Deprecated: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
	RequirePartitionFilter bool `pulumi:"requirePartitionFilter"`
	// The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
	Type string `pulumi:"type"`
}

type TimePartitioningResponseOutput struct{ *pulumi.OutputState }

func (TimePartitioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioningResponse)(nil)).Elem()
}

func (o TimePartitioningResponseOutput) ToTimePartitioningResponseOutput() TimePartitioningResponseOutput {
	return o
}

func (o TimePartitioningResponseOutput) ToTimePartitioningResponseOutputWithContext(ctx context.Context) TimePartitioningResponseOutput {
	return o
}

// Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.
func (o TimePartitioningResponseOutput) ExpirationMs() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.ExpirationMs }).(pulumi.StringOutput)
}

// Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.
func (o TimePartitioningResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.Field }).(pulumi.StringOutput)
}

// If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
//
// Deprecated: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.
func (o TimePartitioningResponseOutput) RequirePartitionFilter() pulumi.BoolOutput {
	return o.ApplyT(func(v TimePartitioningResponse) bool { return v.RequirePartitionFilter }).(pulumi.BoolOutput)
}

// The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.
func (o TimePartitioningResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Options used in model training.
type TrainingOptionsResponse struct {
	// Activation function of the neural nets.
	ActivationFn string `pulumi:"activationFn"`
	// If true, detect step changes and make data adjustment in the input time series.
	AdjustStepChanges bool `pulumi:"adjustStepChanges"`
	// Whether to use approximate feature contribution method in XGBoost model explanation for global explain.
	ApproxGlobalFeatureContrib bool `pulumi:"approxGlobalFeatureContrib"`
	// Whether to enable auto ARIMA or not.
	AutoArima bool `pulumi:"autoArima"`
	// The max value of the sum of non-seasonal p and q.
	AutoArimaMaxOrder string `pulumi:"autoArimaMaxOrder"`
	// The min value of the sum of non-seasonal p and q.
	AutoArimaMinOrder string `pulumi:"autoArimaMinOrder"`
	// Whether to calculate class weights automatically based on the popularity of each label.
	AutoClassWeights bool `pulumi:"autoClassWeights"`
	// Batch size for dnn models.
	BatchSize string `pulumi:"batchSize"`
	// Booster type for boosted tree models.
	BoosterType string `pulumi:"boosterType"`
	// Budget in hours for AutoML training.
	BudgetHours float64 `pulumi:"budgetHours"`
	// Whether or not p-value test should be computed for this model. Only available for linear and logistic regression models.
	CalculatePValues bool `pulumi:"calculatePValues"`
	// Categorical feature encoding method.
	CategoryEncodingMethod string `pulumi:"categoryEncodingMethod"`
	// If true, clean spikes and dips in the input time series.
	CleanSpikesAndDips bool `pulumi:"cleanSpikesAndDips"`
	// Enums for color space, used for processing images in Object Table. See more details at https://www.tensorflow.org/io/tutorials/colorspace.
	ColorSpace string `pulumi:"colorSpace"`
	// Subsample ratio of columns for each level for boosted tree models.
	ColsampleBylevel float64 `pulumi:"colsampleBylevel"`
	// Subsample ratio of columns for each node(split) for boosted tree models.
	ColsampleBynode float64 `pulumi:"colsampleBynode"`
	// Subsample ratio of columns when constructing each tree for boosted tree models.
	ColsampleBytree float64 `pulumi:"colsampleBytree"`
	// Type of normalization algorithm for boosted tree models using dart booster.
	DartNormalizeType string `pulumi:"dartNormalizeType"`
	// The data frequency of a time series.
	DataFrequency string `pulumi:"dataFrequency"`
	// The column to split data with. This column won't be used as a feature. 1. When data_split_method is CUSTOM, the corresponding column should be boolean. The rows with true value tag are eval data, and the false are training data. 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the corresponding column are used as training data, and the rest are eval data. It respects the order in Orderable data types: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
	DataSplitColumn string `pulumi:"dataSplitColumn"`
	// The fraction of evaluation data over the whole input data. The rest of data will be used as training data. The format should be double. Accurate to two decimal places. Default value is 0.2.
	DataSplitEvalFraction float64 `pulumi:"dataSplitEvalFraction"`
	// The data split type for training and evaluation, e.g. RANDOM.
	DataSplitMethod string `pulumi:"dataSplitMethod"`
	// If true, perform decompose time series and save the results.
	DecomposeTimeSeries bool `pulumi:"decomposeTimeSeries"`
	// Distance type for clustering models.
	DistanceType string `pulumi:"distanceType"`
	// Dropout probability for dnn models.
	Dropout float64 `pulumi:"dropout"`
	// Whether to stop early when the loss doesn't improve significantly any more (compared to min_relative_progress). Used only for iterative training algorithms.
	EarlyStop bool `pulumi:"earlyStop"`
	// If true, enable global explanation during training.
	EnableGlobalExplain bool `pulumi:"enableGlobalExplain"`
	// Feedback type that specifies which algorithm to run for matrix factorization.
	FeedbackType string `pulumi:"feedbackType"`
	// Whether the model should include intercept during model training.
	FitIntercept bool `pulumi:"fitIntercept"`
	// Hidden units for dnn models.
	HiddenUnits []string `pulumi:"hiddenUnits"`
	// The geographical region based on which the holidays are considered in time series modeling. If a valid value is specified, then holiday effects modeling is enabled.
	HolidayRegion string `pulumi:"holidayRegion"`
	// A list of geographical regions that are used for time series modeling.
	HolidayRegions []string `pulumi:"holidayRegions"`
	// The number of periods ahead that need to be forecasted.
	Horizon string `pulumi:"horizon"`
	// The target evaluation metrics to optimize the hyperparameters for.
	HparamTuningObjectives []string `pulumi:"hparamTuningObjectives"`
	// Include drift when fitting an ARIMA model.
	IncludeDrift bool `pulumi:"includeDrift"`
	// Specifies the initial learning rate for the line search learn rate strategy.
	InitialLearnRate float64 `pulumi:"initialLearnRate"`
	// Name of input label columns in training data.
	InputLabelColumns []string `pulumi:"inputLabelColumns"`
	// Name of the instance weight column for training data. This column isn't be used as a feature.
	InstanceWeightColumn string `pulumi:"instanceWeightColumn"`
	// Number of integral steps for the integrated gradients explain method.
	IntegratedGradientsNumSteps string `pulumi:"integratedGradientsNumSteps"`
	// Item column specified for matrix factorization models.
	ItemColumn string `pulumi:"itemColumn"`
	// The column used to provide the initial centroids for kmeans algorithm when kmeans_initialization_method is CUSTOM.
	KmeansInitializationColumn string `pulumi:"kmeansInitializationColumn"`
	// The method used to initialize the centroids for kmeans algorithm.
	KmeansInitializationMethod string `pulumi:"kmeansInitializationMethod"`
	// L1 regularization coefficient to activations.
	L1RegActivation float64 `pulumi:"l1RegActivation"`
	// L1 regularization coefficient.
	L1Regularization float64 `pulumi:"l1Regularization"`
	// L2 regularization coefficient.
	L2Regularization float64 `pulumi:"l2Regularization"`
	// Weights associated with each label class, for rebalancing the training data. Only applicable for classification models.
	LabelClassWeights map[string]string `pulumi:"labelClassWeights"`
	// Learning rate in training. Used only for iterative training algorithms.
	LearnRate float64 `pulumi:"learnRate"`
	// The strategy to determine learn rate for the current iteration.
	LearnRateStrategy string `pulumi:"learnRateStrategy"`
	// Type of loss function used during training run.
	LossType string `pulumi:"lossType"`
	// The maximum number of iterations in training. Used only for iterative training algorithms.
	MaxIterations string `pulumi:"maxIterations"`
	// Maximum number of trials to run in parallel.
	MaxParallelTrials string `pulumi:"maxParallelTrials"`
	// The maximum number of time points in a time series that can be used in modeling the trend component of the time series. Don't use this option with the `timeSeriesLengthFraction` or `minTimeSeriesLength` options.
	MaxTimeSeriesLength string `pulumi:"maxTimeSeriesLength"`
	// Maximum depth of a tree for boosted tree models.
	MaxTreeDepth string `pulumi:"maxTreeDepth"`
	// When early_stop is true, stops training when accuracy improvement is less than 'min_relative_progress'. Used only for iterative training algorithms.
	MinRelativeProgress float64 `pulumi:"minRelativeProgress"`
	// Minimum split loss for boosted tree models.
	MinSplitLoss float64 `pulumi:"minSplitLoss"`
	// The minimum number of time points in a time series that are used in modeling the trend component of the time series. If you use this option you must also set the `timeSeriesLengthFraction` option. This training option ensures that enough time points are available when you use `timeSeriesLengthFraction` in trend modeling. This is particularly important when forecasting multiple time series in a single query using `timeSeriesIdColumn`. If the total number of time points is less than the `minTimeSeriesLength` value, then the query uses all available time points.
	MinTimeSeriesLength string `pulumi:"minTimeSeriesLength"`
	// Minimum sum of instance weight needed in a child for boosted tree models.
	MinTreeChildWeight string `pulumi:"minTreeChildWeight"`
	// The model registry.
	ModelRegistry string `pulumi:"modelRegistry"`
	// Google Cloud Storage URI from which the model was imported. Only applicable for imported models.
	ModelUri string `pulumi:"modelUri"`
	// A specification of the non-seasonal part of the ARIMA model: the three components (p, d, q) are the AR order, the degree of differencing, and the MA order.
	NonSeasonalOrder ArimaOrderResponse `pulumi:"nonSeasonalOrder"`
	// Number of clusters for clustering models.
	NumClusters string `pulumi:"numClusters"`
	// Num factors specified for matrix factorization models.
	NumFactors string `pulumi:"numFactors"`
	// Number of parallel trees constructed during each iteration for boosted tree models.
	NumParallelTree string `pulumi:"numParallelTree"`
	// Number of principal components to keep in the PCA model. Must be <= the number of features.
	NumPrincipalComponents string `pulumi:"numPrincipalComponents"`
	// Number of trials to run this hyperparameter tuning job.
	NumTrials string `pulumi:"numTrials"`
	// Optimization strategy for training linear regression models.
	OptimizationStrategy string `pulumi:"optimizationStrategy"`
	// Optimizer used for training the neural nets.
	Optimizer string `pulumi:"optimizer"`
	// The minimum ratio of cumulative explained variance that needs to be given by the PCA model.
	PcaExplainedVarianceRatio float64 `pulumi:"pcaExplainedVarianceRatio"`
	// The solver for PCA.
	PcaSolver string `pulumi:"pcaSolver"`
	// Number of paths for the sampled Shapley explain method.
	SampledShapleyNumPaths string `pulumi:"sampledShapleyNumPaths"`
	// If true, scale the feature values by dividing the feature standard deviation. Currently only apply to PCA.
	ScaleFeatures bool `pulumi:"scaleFeatures"`
	// Whether to standardize numerical features. Default to true.
	StandardizeFeatures bool `pulumi:"standardizeFeatures"`
	// Subsample fraction of the training data to grow tree to prevent overfitting for boosted tree models.
	Subsample float64 `pulumi:"subsample"`
	// Based on the selected TF version, the corresponding docker image is used to train external models.
	TfVersion string `pulumi:"tfVersion"`
	// Column to be designated as time series data for ARIMA model.
	TimeSeriesDataColumn string `pulumi:"timeSeriesDataColumn"`
	// The time series id column that was used during ARIMA model training.
	TimeSeriesIdColumn string `pulumi:"timeSeriesIdColumn"`
	// The time series id columns that were used during ARIMA model training.
	TimeSeriesIdColumns []string `pulumi:"timeSeriesIdColumns"`
	// The fraction of the interpolated length of the time series that's used to model the time series trend component. All of the time points of the time series are used to model the non-trend component. This training option accelerates modeling training without sacrificing much forecasting accuracy. You can use this option with `minTimeSeriesLength` but not with `maxTimeSeriesLength`.
	TimeSeriesLengthFraction float64 `pulumi:"timeSeriesLengthFraction"`
	// Column to be designated as time series timestamp for ARIMA model.
	TimeSeriesTimestampColumn string `pulumi:"timeSeriesTimestampColumn"`
	// Tree construction algorithm for boosted tree models.
	TreeMethod string `pulumi:"treeMethod"`
	// Smoothing window size for the trend component. When a positive value is specified, a center moving average smoothing is applied on the history trend. When the smoothing window is out of the boundary at the beginning or the end of the trend, the first element or the last element is padded to fill the smoothing window before the average is applied.
	TrendSmoothingWindowSize string `pulumi:"trendSmoothingWindowSize"`
	// User column specified for matrix factorization models.
	UserColumn string `pulumi:"userColumn"`
	// The version aliases to apply in Vertex AI model registry. Always overwrite if the version aliases exists in a existing model.
	VertexAiModelVersionAliases []string `pulumi:"vertexAiModelVersionAliases"`
	// Hyperparameter for matrix factoration when implicit feedback type is specified.
	WalsAlpha float64 `pulumi:"walsAlpha"`
	// Whether to train a model from the last checkpoint.
	WarmStart bool `pulumi:"warmStart"`
	// User-selected XGBoost versions for training of XGBoost models.
	XgboostVersion string `pulumi:"xgboostVersion"`
}

// Options used in model training.
type TrainingOptionsResponseOutput struct{ *pulumi.OutputState }

func (TrainingOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrainingOptionsResponse)(nil)).Elem()
}

func (o TrainingOptionsResponseOutput) ToTrainingOptionsResponseOutput() TrainingOptionsResponseOutput {
	return o
}

func (o TrainingOptionsResponseOutput) ToTrainingOptionsResponseOutputWithContext(ctx context.Context) TrainingOptionsResponseOutput {
	return o
}

// Activation function of the neural nets.
func (o TrainingOptionsResponseOutput) ActivationFn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.ActivationFn }).(pulumi.StringOutput)
}

// If true, detect step changes and make data adjustment in the input time series.
func (o TrainingOptionsResponseOutput) AdjustStepChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.AdjustStepChanges }).(pulumi.BoolOutput)
}

// Whether to use approximate feature contribution method in XGBoost model explanation for global explain.
func (o TrainingOptionsResponseOutput) ApproxGlobalFeatureContrib() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.ApproxGlobalFeatureContrib }).(pulumi.BoolOutput)
}

// Whether to enable auto ARIMA or not.
func (o TrainingOptionsResponseOutput) AutoArima() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.AutoArima }).(pulumi.BoolOutput)
}

// The max value of the sum of non-seasonal p and q.
func (o TrainingOptionsResponseOutput) AutoArimaMaxOrder() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.AutoArimaMaxOrder }).(pulumi.StringOutput)
}

// The min value of the sum of non-seasonal p and q.
func (o TrainingOptionsResponseOutput) AutoArimaMinOrder() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.AutoArimaMinOrder }).(pulumi.StringOutput)
}

// Whether to calculate class weights automatically based on the popularity of each label.
func (o TrainingOptionsResponseOutput) AutoClassWeights() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.AutoClassWeights }).(pulumi.BoolOutput)
}

// Batch size for dnn models.
func (o TrainingOptionsResponseOutput) BatchSize() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.BatchSize }).(pulumi.StringOutput)
}

// Booster type for boosted tree models.
func (o TrainingOptionsResponseOutput) BoosterType() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.BoosterType }).(pulumi.StringOutput)
}

// Budget in hours for AutoML training.
func (o TrainingOptionsResponseOutput) BudgetHours() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.BudgetHours }).(pulumi.Float64Output)
}

// Whether or not p-value test should be computed for this model. Only available for linear and logistic regression models.
func (o TrainingOptionsResponseOutput) CalculatePValues() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.CalculatePValues }).(pulumi.BoolOutput)
}

// Categorical feature encoding method.
func (o TrainingOptionsResponseOutput) CategoryEncodingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.CategoryEncodingMethod }).(pulumi.StringOutput)
}

// If true, clean spikes and dips in the input time series.
func (o TrainingOptionsResponseOutput) CleanSpikesAndDips() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.CleanSpikesAndDips }).(pulumi.BoolOutput)
}

// Enums for color space, used for processing images in Object Table. See more details at https://www.tensorflow.org/io/tutorials/colorspace.
func (o TrainingOptionsResponseOutput) ColorSpace() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.ColorSpace }).(pulumi.StringOutput)
}

// Subsample ratio of columns for each level for boosted tree models.
func (o TrainingOptionsResponseOutput) ColsampleBylevel() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.ColsampleBylevel }).(pulumi.Float64Output)
}

// Subsample ratio of columns for each node(split) for boosted tree models.
func (o TrainingOptionsResponseOutput) ColsampleBynode() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.ColsampleBynode }).(pulumi.Float64Output)
}

// Subsample ratio of columns when constructing each tree for boosted tree models.
func (o TrainingOptionsResponseOutput) ColsampleBytree() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.ColsampleBytree }).(pulumi.Float64Output)
}

// Type of normalization algorithm for boosted tree models using dart booster.
func (o TrainingOptionsResponseOutput) DartNormalizeType() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.DartNormalizeType }).(pulumi.StringOutput)
}

// The data frequency of a time series.
func (o TrainingOptionsResponseOutput) DataFrequency() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.DataFrequency }).(pulumi.StringOutput)
}

// The column to split data with. This column won't be used as a feature. 1. When data_split_method is CUSTOM, the corresponding column should be boolean. The rows with true value tag are eval data, and the false are training data. 2. When data_split_method is SEQ, the first DATA_SPLIT_EVAL_FRACTION rows (from smallest to largest) in the corresponding column are used as training data, and the rest are eval data. It respects the order in Orderable data types: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types#data-type-properties
func (o TrainingOptionsResponseOutput) DataSplitColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.DataSplitColumn }).(pulumi.StringOutput)
}

// The fraction of evaluation data over the whole input data. The rest of data will be used as training data. The format should be double. Accurate to two decimal places. Default value is 0.2.
func (o TrainingOptionsResponseOutput) DataSplitEvalFraction() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.DataSplitEvalFraction }).(pulumi.Float64Output)
}

// The data split type for training and evaluation, e.g. RANDOM.
func (o TrainingOptionsResponseOutput) DataSplitMethod() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.DataSplitMethod }).(pulumi.StringOutput)
}

// If true, perform decompose time series and save the results.
func (o TrainingOptionsResponseOutput) DecomposeTimeSeries() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.DecomposeTimeSeries }).(pulumi.BoolOutput)
}

// Distance type for clustering models.
func (o TrainingOptionsResponseOutput) DistanceType() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.DistanceType }).(pulumi.StringOutput)
}

// Dropout probability for dnn models.
func (o TrainingOptionsResponseOutput) Dropout() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.Dropout }).(pulumi.Float64Output)
}

// Whether to stop early when the loss doesn't improve significantly any more (compared to min_relative_progress). Used only for iterative training algorithms.
func (o TrainingOptionsResponseOutput) EarlyStop() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.EarlyStop }).(pulumi.BoolOutput)
}

// If true, enable global explanation during training.
func (o TrainingOptionsResponseOutput) EnableGlobalExplain() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.EnableGlobalExplain }).(pulumi.BoolOutput)
}

// Feedback type that specifies which algorithm to run for matrix factorization.
func (o TrainingOptionsResponseOutput) FeedbackType() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.FeedbackType }).(pulumi.StringOutput)
}

// Whether the model should include intercept during model training.
func (o TrainingOptionsResponseOutput) FitIntercept() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.FitIntercept }).(pulumi.BoolOutput)
}

// Hidden units for dnn models.
func (o TrainingOptionsResponseOutput) HiddenUnits() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) []string { return v.HiddenUnits }).(pulumi.StringArrayOutput)
}

// The geographical region based on which the holidays are considered in time series modeling. If a valid value is specified, then holiday effects modeling is enabled.
func (o TrainingOptionsResponseOutput) HolidayRegion() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.HolidayRegion }).(pulumi.StringOutput)
}

// A list of geographical regions that are used for time series modeling.
func (o TrainingOptionsResponseOutput) HolidayRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) []string { return v.HolidayRegions }).(pulumi.StringArrayOutput)
}

// The number of periods ahead that need to be forecasted.
func (o TrainingOptionsResponseOutput) Horizon() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.Horizon }).(pulumi.StringOutput)
}

// The target evaluation metrics to optimize the hyperparameters for.
func (o TrainingOptionsResponseOutput) HparamTuningObjectives() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) []string { return v.HparamTuningObjectives }).(pulumi.StringArrayOutput)
}

// Include drift when fitting an ARIMA model.
func (o TrainingOptionsResponseOutput) IncludeDrift() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.IncludeDrift }).(pulumi.BoolOutput)
}

// Specifies the initial learning rate for the line search learn rate strategy.
func (o TrainingOptionsResponseOutput) InitialLearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.InitialLearnRate }).(pulumi.Float64Output)
}

// Name of input label columns in training data.
func (o TrainingOptionsResponseOutput) InputLabelColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) []string { return v.InputLabelColumns }).(pulumi.StringArrayOutput)
}

// Name of the instance weight column for training data. This column isn't be used as a feature.
func (o TrainingOptionsResponseOutput) InstanceWeightColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.InstanceWeightColumn }).(pulumi.StringOutput)
}

// Number of integral steps for the integrated gradients explain method.
func (o TrainingOptionsResponseOutput) IntegratedGradientsNumSteps() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.IntegratedGradientsNumSteps }).(pulumi.StringOutput)
}

// Item column specified for matrix factorization models.
func (o TrainingOptionsResponseOutput) ItemColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.ItemColumn }).(pulumi.StringOutput)
}

// The column used to provide the initial centroids for kmeans algorithm when kmeans_initialization_method is CUSTOM.
func (o TrainingOptionsResponseOutput) KmeansInitializationColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.KmeansInitializationColumn }).(pulumi.StringOutput)
}

// The method used to initialize the centroids for kmeans algorithm.
func (o TrainingOptionsResponseOutput) KmeansInitializationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.KmeansInitializationMethod }).(pulumi.StringOutput)
}

// L1 regularization coefficient to activations.
func (o TrainingOptionsResponseOutput) L1RegActivation() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.L1RegActivation }).(pulumi.Float64Output)
}

// L1 regularization coefficient.
func (o TrainingOptionsResponseOutput) L1Regularization() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.L1Regularization }).(pulumi.Float64Output)
}

// L2 regularization coefficient.
func (o TrainingOptionsResponseOutput) L2Regularization() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.L2Regularization }).(pulumi.Float64Output)
}

// Weights associated with each label class, for rebalancing the training data. Only applicable for classification models.
func (o TrainingOptionsResponseOutput) LabelClassWeights() pulumi.StringMapOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) map[string]string { return v.LabelClassWeights }).(pulumi.StringMapOutput)
}

// Learning rate in training. Used only for iterative training algorithms.
func (o TrainingOptionsResponseOutput) LearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.LearnRate }).(pulumi.Float64Output)
}

// The strategy to determine learn rate for the current iteration.
func (o TrainingOptionsResponseOutput) LearnRateStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.LearnRateStrategy }).(pulumi.StringOutput)
}

// Type of loss function used during training run.
func (o TrainingOptionsResponseOutput) LossType() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.LossType }).(pulumi.StringOutput)
}

// The maximum number of iterations in training. Used only for iterative training algorithms.
func (o TrainingOptionsResponseOutput) MaxIterations() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.MaxIterations }).(pulumi.StringOutput)
}

// Maximum number of trials to run in parallel.
func (o TrainingOptionsResponseOutput) MaxParallelTrials() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.MaxParallelTrials }).(pulumi.StringOutput)
}

// The maximum number of time points in a time series that can be used in modeling the trend component of the time series. Don't use this option with the `timeSeriesLengthFraction` or `minTimeSeriesLength` options.
func (o TrainingOptionsResponseOutput) MaxTimeSeriesLength() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.MaxTimeSeriesLength }).(pulumi.StringOutput)
}

// Maximum depth of a tree for boosted tree models.
func (o TrainingOptionsResponseOutput) MaxTreeDepth() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.MaxTreeDepth }).(pulumi.StringOutput)
}

// When early_stop is true, stops training when accuracy improvement is less than 'min_relative_progress'. Used only for iterative training algorithms.
func (o TrainingOptionsResponseOutput) MinRelativeProgress() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.MinRelativeProgress }).(pulumi.Float64Output)
}

// Minimum split loss for boosted tree models.
func (o TrainingOptionsResponseOutput) MinSplitLoss() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.MinSplitLoss }).(pulumi.Float64Output)
}

// The minimum number of time points in a time series that are used in modeling the trend component of the time series. If you use this option you must also set the `timeSeriesLengthFraction` option. This training option ensures that enough time points are available when you use `timeSeriesLengthFraction` in trend modeling. This is particularly important when forecasting multiple time series in a single query using `timeSeriesIdColumn`. If the total number of time points is less than the `minTimeSeriesLength` value, then the query uses all available time points.
func (o TrainingOptionsResponseOutput) MinTimeSeriesLength() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.MinTimeSeriesLength }).(pulumi.StringOutput)
}

// Minimum sum of instance weight needed in a child for boosted tree models.
func (o TrainingOptionsResponseOutput) MinTreeChildWeight() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.MinTreeChildWeight }).(pulumi.StringOutput)
}

// The model registry.
func (o TrainingOptionsResponseOutput) ModelRegistry() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.ModelRegistry }).(pulumi.StringOutput)
}

// Google Cloud Storage URI from which the model was imported. Only applicable for imported models.
func (o TrainingOptionsResponseOutput) ModelUri() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.ModelUri }).(pulumi.StringOutput)
}

// A specification of the non-seasonal part of the ARIMA model: the three components (p, d, q) are the AR order, the degree of differencing, and the MA order.
func (o TrainingOptionsResponseOutput) NonSeasonalOrder() ArimaOrderResponseOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) ArimaOrderResponse { return v.NonSeasonalOrder }).(ArimaOrderResponseOutput)
}

// Number of clusters for clustering models.
func (o TrainingOptionsResponseOutput) NumClusters() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.NumClusters }).(pulumi.StringOutput)
}

// Num factors specified for matrix factorization models.
func (o TrainingOptionsResponseOutput) NumFactors() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.NumFactors }).(pulumi.StringOutput)
}

// Number of parallel trees constructed during each iteration for boosted tree models.
func (o TrainingOptionsResponseOutput) NumParallelTree() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.NumParallelTree }).(pulumi.StringOutput)
}

// Number of principal components to keep in the PCA model. Must be <= the number of features.
func (o TrainingOptionsResponseOutput) NumPrincipalComponents() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.NumPrincipalComponents }).(pulumi.StringOutput)
}

// Number of trials to run this hyperparameter tuning job.
func (o TrainingOptionsResponseOutput) NumTrials() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.NumTrials }).(pulumi.StringOutput)
}

// Optimization strategy for training linear regression models.
func (o TrainingOptionsResponseOutput) OptimizationStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.OptimizationStrategy }).(pulumi.StringOutput)
}

// Optimizer used for training the neural nets.
func (o TrainingOptionsResponseOutput) Optimizer() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.Optimizer }).(pulumi.StringOutput)
}

// The minimum ratio of cumulative explained variance that needs to be given by the PCA model.
func (o TrainingOptionsResponseOutput) PcaExplainedVarianceRatio() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.PcaExplainedVarianceRatio }).(pulumi.Float64Output)
}

// The solver for PCA.
func (o TrainingOptionsResponseOutput) PcaSolver() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.PcaSolver }).(pulumi.StringOutput)
}

// Number of paths for the sampled Shapley explain method.
func (o TrainingOptionsResponseOutput) SampledShapleyNumPaths() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.SampledShapleyNumPaths }).(pulumi.StringOutput)
}

// If true, scale the feature values by dividing the feature standard deviation. Currently only apply to PCA.
func (o TrainingOptionsResponseOutput) ScaleFeatures() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.ScaleFeatures }).(pulumi.BoolOutput)
}

// Whether to standardize numerical features. Default to true.
func (o TrainingOptionsResponseOutput) StandardizeFeatures() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.StandardizeFeatures }).(pulumi.BoolOutput)
}

// Subsample fraction of the training data to grow tree to prevent overfitting for boosted tree models.
func (o TrainingOptionsResponseOutput) Subsample() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.Subsample }).(pulumi.Float64Output)
}

// Based on the selected TF version, the corresponding docker image is used to train external models.
func (o TrainingOptionsResponseOutput) TfVersion() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.TfVersion }).(pulumi.StringOutput)
}

// Column to be designated as time series data for ARIMA model.
func (o TrainingOptionsResponseOutput) TimeSeriesDataColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.TimeSeriesDataColumn }).(pulumi.StringOutput)
}

// The time series id column that was used during ARIMA model training.
func (o TrainingOptionsResponseOutput) TimeSeriesIdColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.TimeSeriesIdColumn }).(pulumi.StringOutput)
}

// The time series id columns that were used during ARIMA model training.
func (o TrainingOptionsResponseOutput) TimeSeriesIdColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) []string { return v.TimeSeriesIdColumns }).(pulumi.StringArrayOutput)
}

// The fraction of the interpolated length of the time series that's used to model the time series trend component. All of the time points of the time series are used to model the non-trend component. This training option accelerates modeling training without sacrificing much forecasting accuracy. You can use this option with `minTimeSeriesLength` but not with `maxTimeSeriesLength`.
func (o TrainingOptionsResponseOutput) TimeSeriesLengthFraction() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.TimeSeriesLengthFraction }).(pulumi.Float64Output)
}

// Column to be designated as time series timestamp for ARIMA model.
func (o TrainingOptionsResponseOutput) TimeSeriesTimestampColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.TimeSeriesTimestampColumn }).(pulumi.StringOutput)
}

// Tree construction algorithm for boosted tree models.
func (o TrainingOptionsResponseOutput) TreeMethod() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.TreeMethod }).(pulumi.StringOutput)
}

// Smoothing window size for the trend component. When a positive value is specified, a center moving average smoothing is applied on the history trend. When the smoothing window is out of the boundary at the beginning or the end of the trend, the first element or the last element is padded to fill the smoothing window before the average is applied.
func (o TrainingOptionsResponseOutput) TrendSmoothingWindowSize() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.TrendSmoothingWindowSize }).(pulumi.StringOutput)
}

// User column specified for matrix factorization models.
func (o TrainingOptionsResponseOutput) UserColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.UserColumn }).(pulumi.StringOutput)
}

// The version aliases to apply in Vertex AI model registry. Always overwrite if the version aliases exists in a existing model.
func (o TrainingOptionsResponseOutput) VertexAiModelVersionAliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) []string { return v.VertexAiModelVersionAliases }).(pulumi.StringArrayOutput)
}

// Hyperparameter for matrix factoration when implicit feedback type is specified.
func (o TrainingOptionsResponseOutput) WalsAlpha() pulumi.Float64Output {
	return o.ApplyT(func(v TrainingOptionsResponse) float64 { return v.WalsAlpha }).(pulumi.Float64Output)
}

// Whether to train a model from the last checkpoint.
func (o TrainingOptionsResponseOutput) WarmStart() pulumi.BoolOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) bool { return v.WarmStart }).(pulumi.BoolOutput)
}

// User-selected XGBoost versions for training of XGBoost models.
func (o TrainingOptionsResponseOutput) XgboostVersion() pulumi.StringOutput {
	return o.ApplyT(func(v TrainingOptionsResponse) string { return v.XgboostVersion }).(pulumi.StringOutput)
}

// [Alpha] Information of a multi-statement transaction.
type TransactionInfoResponse struct {
	// [Alpha] Id of the transaction.
	TransactionId string `pulumi:"transactionId"`
}

// [Alpha] Information of a multi-statement transaction.
type TransactionInfoResponseOutput struct{ *pulumi.OutputState }

func (TransactionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransactionInfoResponse)(nil)).Elem()
}

func (o TransactionInfoResponseOutput) ToTransactionInfoResponseOutput() TransactionInfoResponseOutput {
	return o
}

func (o TransactionInfoResponseOutput) ToTransactionInfoResponseOutputWithContext(ctx context.Context) TransactionInfoResponseOutput {
	return o
}

// [Alpha] Id of the transaction.
func (o TransactionInfoResponseOutput) TransactionId() pulumi.StringOutput {
	return o.ApplyT(func(v TransactionInfoResponse) string { return v.TransactionId }).(pulumi.StringOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResource struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode *string `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri *string `pulumi:"resourceUri"`
}

// UserDefinedFunctionResourceInput is an input type that accepts UserDefinedFunctionResourceArgs and UserDefinedFunctionResourceOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceInput` via:
//
//	UserDefinedFunctionResourceArgs{...}
type UserDefinedFunctionResourceInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput
	ToUserDefinedFunctionResourceOutputWithContext(context.Context) UserDefinedFunctionResourceOutput
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceArgs struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode pulumi.StringPtrInput `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (UserDefinedFunctionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResource)(nil)).Elem()
}

func (i UserDefinedFunctionResourceArgs) ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput {
	return i.ToUserDefinedFunctionResourceOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceArgs) ToUserDefinedFunctionResourceOutputWithContext(ctx context.Context) UserDefinedFunctionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceOutput)
}

// UserDefinedFunctionResourceArrayInput is an input type that accepts UserDefinedFunctionResourceArray and UserDefinedFunctionResourceArrayOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceArrayInput` via:
//
//	UserDefinedFunctionResourceArray{ UserDefinedFunctionResourceArgs{...} }
type UserDefinedFunctionResourceArrayInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput
	ToUserDefinedFunctionResourceArrayOutputWithContext(context.Context) UserDefinedFunctionResourceArrayOutput
}

type UserDefinedFunctionResourceArray []UserDefinedFunctionResourceInput

func (UserDefinedFunctionResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResource)(nil)).Elem()
}

func (i UserDefinedFunctionResourceArray) ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput {
	return i.ToUserDefinedFunctionResourceArrayOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceArray) ToUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceArrayOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResource)(nil)).Elem()
}

func (o UserDefinedFunctionResourceOutput) ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput {
	return o
}

func (o UserDefinedFunctionResourceOutput) ToUserDefinedFunctionResourceOutputWithContext(ctx context.Context) UserDefinedFunctionResourceOutput {
	return o
}

// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
func (o UserDefinedFunctionResourceOutput) InlineCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserDefinedFunctionResource) *string { return v.InlineCode }).(pulumi.StringPtrOutput)
}

// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
func (o UserDefinedFunctionResourceOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserDefinedFunctionResource) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type UserDefinedFunctionResourceArrayOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResource)(nil)).Elem()
}

func (o UserDefinedFunctionResourceArrayOutput) ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceArrayOutput) ToUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceArrayOutput) Index(i pulumi.IntInput) UserDefinedFunctionResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDefinedFunctionResource {
		return vs[0].([]UserDefinedFunctionResource)[vs[1].(int)]
	}).(UserDefinedFunctionResourceOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceResponse struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode string `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri string `pulumi:"resourceUri"`
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceResponseOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResourceResponse)(nil)).Elem()
}

func (o UserDefinedFunctionResourceResponseOutput) ToUserDefinedFunctionResourceResponseOutput() UserDefinedFunctionResourceResponseOutput {
	return o
}

func (o UserDefinedFunctionResourceResponseOutput) ToUserDefinedFunctionResourceResponseOutputWithContext(ctx context.Context) UserDefinedFunctionResourceResponseOutput {
	return o
}

// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
func (o UserDefinedFunctionResourceResponseOutput) InlineCode() pulumi.StringOutput {
	return o.ApplyT(func(v UserDefinedFunctionResourceResponse) string { return v.InlineCode }).(pulumi.StringOutput)
}

// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
func (o UserDefinedFunctionResourceResponseOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v UserDefinedFunctionResourceResponse) string { return v.ResourceUri }).(pulumi.StringOutput)
}

type UserDefinedFunctionResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResourceResponse)(nil)).Elem()
}

func (o UserDefinedFunctionResourceResponseArrayOutput) ToUserDefinedFunctionResourceResponseArrayOutput() UserDefinedFunctionResourceResponseArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceResponseArrayOutput) ToUserDefinedFunctionResourceResponseArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceResponseArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceResponseArrayOutput) Index(i pulumi.IntInput) UserDefinedFunctionResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDefinedFunctionResourceResponse {
		return vs[0].([]UserDefinedFunctionResourceResponse)[vs[1].(int)]
	}).(UserDefinedFunctionResourceResponseOutput)
}

// Statistics for a vector search query. Populated as part of JobStatistics2.
type VectorSearchStatisticsResponse struct {
	// When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the vector search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.
	IndexUnusedReasons []IndexUnusedReasonResponse `pulumi:"indexUnusedReasons"`
	// Specifies the index usage mode for the query.
	IndexUsageMode string `pulumi:"indexUsageMode"`
}

// Statistics for a vector search query. Populated as part of JobStatistics2.
type VectorSearchStatisticsResponseOutput struct{ *pulumi.OutputState }

func (VectorSearchStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VectorSearchStatisticsResponse)(nil)).Elem()
}

func (o VectorSearchStatisticsResponseOutput) ToVectorSearchStatisticsResponseOutput() VectorSearchStatisticsResponseOutput {
	return o
}

func (o VectorSearchStatisticsResponseOutput) ToVectorSearchStatisticsResponseOutputWithContext(ctx context.Context) VectorSearchStatisticsResponseOutput {
	return o
}

// When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the vector search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.
func (o VectorSearchStatisticsResponseOutput) IndexUnusedReasons() IndexUnusedReasonResponseArrayOutput {
	return o.ApplyT(func(v VectorSearchStatisticsResponse) []IndexUnusedReasonResponse { return v.IndexUnusedReasons }).(IndexUnusedReasonResponseArrayOutput)
}

// Specifies the index usage mode for the query.
func (o VectorSearchStatisticsResponseOutput) IndexUsageMode() pulumi.StringOutput {
	return o.ApplyT(func(v VectorSearchStatisticsResponse) string { return v.IndexUsageMode }).(pulumi.StringOutput)
}

// Describes the definition of a logical view.
type ViewDefinition struct {
	// Optional. Specifices the privacy policy for the view.
	PrivacyPolicy *PrivacyPolicy `pulumi:"privacyPolicy"`
	// A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
	UseExplicitColumnNames *bool `pulumi:"useExplicitColumnNames"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
	UseLegacySql *bool `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResource `pulumi:"userDefinedFunctionResources"`
}

// ViewDefinitionInput is an input type that accepts ViewDefinitionArgs and ViewDefinitionOutput values.
// You can construct a concrete instance of `ViewDefinitionInput` via:
//
//	ViewDefinitionArgs{...}
type ViewDefinitionInput interface {
	pulumi.Input

	ToViewDefinitionOutput() ViewDefinitionOutput
	ToViewDefinitionOutputWithContext(context.Context) ViewDefinitionOutput
}

// Describes the definition of a logical view.
type ViewDefinitionArgs struct {
	// Optional. Specifices the privacy policy for the view.
	PrivacyPolicy PrivacyPolicyPtrInput `pulumi:"privacyPolicy"`
	// A query that BigQuery executes when the view is referenced.
	Query pulumi.StringInput `pulumi:"query"`
	// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
	UseExplicitColumnNames pulumi.BoolPtrInput `pulumi:"useExplicitColumnNames"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources UserDefinedFunctionResourceArrayInput `pulumi:"userDefinedFunctionResources"`
}

func (ViewDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinition)(nil)).Elem()
}

func (i ViewDefinitionArgs) ToViewDefinitionOutput() ViewDefinitionOutput {
	return i.ToViewDefinitionOutputWithContext(context.Background())
}

func (i ViewDefinitionArgs) ToViewDefinitionOutputWithContext(ctx context.Context) ViewDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionOutput)
}

func (i ViewDefinitionArgs) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return i.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (i ViewDefinitionArgs) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionOutput).ToViewDefinitionPtrOutputWithContext(ctx)
}

// ViewDefinitionPtrInput is an input type that accepts ViewDefinitionArgs, ViewDefinitionPtr and ViewDefinitionPtrOutput values.
// You can construct a concrete instance of `ViewDefinitionPtrInput` via:
//
//	        ViewDefinitionArgs{...}
//
//	or:
//
//	        nil
type ViewDefinitionPtrInput interface {
	pulumi.Input

	ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput
	ToViewDefinitionPtrOutputWithContext(context.Context) ViewDefinitionPtrOutput
}

type viewDefinitionPtrType ViewDefinitionArgs

func ViewDefinitionPtr(v *ViewDefinitionArgs) ViewDefinitionPtrInput {
	return (*viewDefinitionPtrType)(v)
}

func (*viewDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewDefinition)(nil)).Elem()
}

func (i *viewDefinitionPtrType) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return i.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (i *viewDefinitionPtrType) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionPtrOutput)
}

// Describes the definition of a logical view.
type ViewDefinitionOutput struct{ *pulumi.OutputState }

func (ViewDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinition)(nil)).Elem()
}

func (o ViewDefinitionOutput) ToViewDefinitionOutput() ViewDefinitionOutput {
	return o
}

func (o ViewDefinitionOutput) ToViewDefinitionOutputWithContext(ctx context.Context) ViewDefinitionOutput {
	return o
}

func (o ViewDefinitionOutput) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return o.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (o ViewDefinitionOutput) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ViewDefinition) *ViewDefinition {
		return &v
	}).(ViewDefinitionPtrOutput)
}

// Optional. Specifices the privacy policy for the view.
func (o ViewDefinitionOutput) PrivacyPolicy() PrivacyPolicyPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *PrivacyPolicy { return v.PrivacyPolicy }).(PrivacyPolicyPtrOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v ViewDefinition) string { return v.Query }).(pulumi.StringOutput)
}

// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
func (o ViewDefinitionOutput) UseExplicitColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *bool { return v.UseExplicitColumnNames }).(pulumi.BoolPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
func (o ViewDefinitionOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v ViewDefinition) []UserDefinedFunctionResource { return v.UserDefinedFunctionResources }).(UserDefinedFunctionResourceArrayOutput)
}

type ViewDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ViewDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewDefinition)(nil)).Elem()
}

func (o ViewDefinitionPtrOutput) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return o
}

func (o ViewDefinitionPtrOutput) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return o
}

func (o ViewDefinitionPtrOutput) Elem() ViewDefinitionOutput {
	return o.ApplyT(func(v *ViewDefinition) ViewDefinition {
		if v != nil {
			return *v
		}
		var ret ViewDefinition
		return ret
	}).(ViewDefinitionOutput)
}

// Optional. Specifices the privacy policy for the view.
func (o ViewDefinitionPtrOutput) PrivacyPolicy() PrivacyPolicyPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *PrivacyPolicy {
		if v == nil {
			return nil
		}
		return v.PrivacyPolicy
	}).(PrivacyPolicyPtrOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
func (o ViewDefinitionPtrOutput) UseExplicitColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.UseExplicitColumnNames
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
func (o ViewDefinitionPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionPtrOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v *ViewDefinition) []UserDefinedFunctionResource {
		if v == nil {
			return nil
		}
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceArrayOutput)
}

// Describes the definition of a logical view.
type ViewDefinitionResponse struct {
	// Optional. Specifices the privacy policy for the view.
	PrivacyPolicy PrivacyPolicyResponse `pulumi:"privacyPolicy"`
	// A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
	UseExplicitColumnNames bool `pulumi:"useExplicitColumnNames"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
	UseLegacySql bool `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResourceResponse `pulumi:"userDefinedFunctionResources"`
}

// Describes the definition of a logical view.
type ViewDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ViewDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinitionResponse)(nil)).Elem()
}

func (o ViewDefinitionResponseOutput) ToViewDefinitionResponseOutput() ViewDefinitionResponseOutput {
	return o
}

func (o ViewDefinitionResponseOutput) ToViewDefinitionResponseOutputWithContext(ctx context.Context) ViewDefinitionResponseOutput {
	return o
}

// Optional. Specifices the privacy policy for the view.
func (o ViewDefinitionResponseOutput) PrivacyPolicy() PrivacyPolicyResponseOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) PrivacyPolicyResponse { return v.PrivacyPolicy }).(PrivacyPolicyResponseOutput)
}

// A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) string { return v.Query }).(pulumi.StringOutput)
}

// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.
func (o ViewDefinitionResponseOutput) UseExplicitColumnNames() pulumi.BoolOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) bool { return v.UseExplicitColumnNames }).(pulumi.BoolOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.
func (o ViewDefinitionResponseOutput) UseLegacySql() pulumi.BoolOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) bool { return v.UseLegacySql }).(pulumi.BoolOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionResponseOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceResponseArrayOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) []UserDefinedFunctionResourceResponse {
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationThresholdPolicyInput)(nil)).Elem(), AggregationThresholdPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AggregationThresholdPolicyPtrInput)(nil)).Elem(), AggregationThresholdPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentInput)(nil)).Elem(), ArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentArrayInput)(nil)).Elem(), ArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroOptionsInput)(nil)).Elem(), AvroOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroOptionsPtrInput)(nil)).Elem(), AvroOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigLakeConfigurationInput)(nil)).Elem(), BigLakeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigLakeConfigurationPtrInput)(nil)).Elem(), BigLakeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnInput)(nil)).Elem(), BigtableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnArrayInput)(nil)).Elem(), BigtableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnFamilyInput)(nil)).Elem(), BigtableColumnFamilyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnFamilyArrayInput)(nil)).Elem(), BigtableColumnFamilyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableOptionsInput)(nil)).Elem(), BigtableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableOptionsPtrInput)(nil)).Elem(), BigtableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlIterationResultInput)(nil)).Elem(), BqmlIterationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlIterationResultArrayInput)(nil)).Elem(), BqmlIterationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunInput)(nil)).Elem(), BqmlTrainingRunArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunArrayInput)(nil)).Elem(), BqmlTrainingRunArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunTrainingOptionsInput)(nil)).Elem(), BqmlTrainingRunTrainingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunTrainingOptionsPtrInput)(nil)).Elem(), BqmlTrainingRunTrainingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusteringInput)(nil)).Elem(), ClusteringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusteringPtrInput)(nil)).Elem(), ClusteringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPropertyInput)(nil)).Elem(), ConnectionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPropertyArrayInput)(nil)).Elem(), ConnectionPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsvOptionsInput)(nil)).Elem(), CsvOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsvOptionsPtrInput)(nil)).Elem(), CsvOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessEntryInput)(nil)).Elem(), DatasetAccessEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessEntryPtrInput)(nil)).Elem(), DatasetAccessEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessItemInput)(nil)).Elem(), DatasetAccessItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessItemArrayInput)(nil)).Elem(), DatasetAccessItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetReferenceInput)(nil)).Elem(), DatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetReferencePtrInput)(nil)).Elem(), DatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTablePropertiesInput)(nil)).Elem(), DestinationTablePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTablePropertiesPtrInput)(nil)).Elem(), DestinationTablePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigurationInput)(nil)).Elem(), EncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigurationPtrInput)(nil)).Elem(), EncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDataConfigurationInput)(nil)).Elem(), ExternalDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDataConfigurationPtrInput)(nil)).Elem(), ExternalDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDatasetReferenceInput)(nil)).Elem(), ExternalDatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDatasetReferencePtrInput)(nil)).Elem(), ExternalDatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleSheetsOptionsInput)(nil)).Elem(), GoogleSheetsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleSheetsOptionsPtrInput)(nil)).Elem(), GoogleSheetsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HivePartitioningOptionsInput)(nil)).Elem(), HivePartitioningOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HivePartitioningOptionsPtrInput)(nil)).Elem(), HivePartitioningOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationInput)(nil)).Elem(), JobConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationExtractInput)(nil)).Elem(), JobConfigurationExtractArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationExtractPtrInput)(nil)).Elem(), JobConfigurationExtractArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationLoadInput)(nil)).Elem(), JobConfigurationLoadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationLoadPtrInput)(nil)).Elem(), JobConfigurationLoadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationQueryInput)(nil)).Elem(), JobConfigurationQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationQueryPtrInput)(nil)).Elem(), JobConfigurationQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationTableCopyInput)(nil)).Elem(), JobConfigurationTableCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationTableCopyPtrInput)(nil)).Elem(), JobConfigurationTableCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobReferenceInput)(nil)).Elem(), JobReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobReferencePtrInput)(nil)).Elem(), JobReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonOptionsInput)(nil)).Elem(), JsonOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonOptionsPtrInput)(nil)).Elem(), JsonOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedDatasetSourceInput)(nil)).Elem(), LinkedDatasetSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LinkedDatasetSourcePtrInput)(nil)).Elem(), LinkedDatasetSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewDefinitionInput)(nil)).Elem(), MaterializedViewDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewDefinitionPtrInput)(nil)).Elem(), MaterializedViewDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionInput)(nil)).Elem(), ModelDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionPtrInput)(nil)).Elem(), ModelDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionModelOptionsInput)(nil)).Elem(), ModelDefinitionModelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionModelOptionsPtrInput)(nil)).Elem(), ModelDefinitionModelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelExtractOptionsInput)(nil)).Elem(), ModelExtractOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelExtractOptionsPtrInput)(nil)).Elem(), ModelExtractOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelReferenceInput)(nil)).Elem(), ModelReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelReferencePtrInput)(nil)).Elem(), ModelReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParquetOptionsInput)(nil)).Elem(), ParquetOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParquetOptionsPtrInput)(nil)).Elem(), ParquetOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivacyPolicyInput)(nil)).Elem(), PrivacyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivacyPolicyPtrInput)(nil)).Elem(), PrivacyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterInput)(nil)).Elem(), QueryParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterArrayInput)(nil)).Elem(), QueryParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypeInput)(nil)).Elem(), QueryParameterTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypePtrInput)(nil)).Elem(), QueryParameterTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypeStructTypesItemInput)(nil)).Elem(), QueryParameterTypeStructTypesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypeStructTypesItemArrayInput)(nil)).Elem(), QueryParameterTypeStructTypesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterValueInput)(nil)).Elem(), QueryParameterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterValuePtrInput)(nil)).Elem(), QueryParameterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterValueArrayInput)(nil)).Elem(), QueryParameterValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningInput)(nil)).Elem(), RangePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningPtrInput)(nil)).Elem(), RangePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningRangeInput)(nil)).Elem(), RangePartitioningRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningRangePtrInput)(nil)).Elem(), RangePartitioningRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangeValueInput)(nil)).Elem(), RangeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangeValuePtrInput)(nil)).Elem(), RangeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteFunctionOptionsInput)(nil)).Elem(), RemoteFunctionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteFunctionOptionsPtrInput)(nil)).Elem(), RemoteFunctionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineReferenceInput)(nil)).Elem(), RoutineReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineReferencePtrInput)(nil)).Elem(), RoutineReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptOptionsInput)(nil)).Elem(), ScriptOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScriptOptionsPtrInput)(nil)).Elem(), ScriptOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkOptionsInput)(nil)).Elem(), SparkOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkOptionsPtrInput)(nil)).Elem(), SparkOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlDataTypeInput)(nil)).Elem(), StandardSqlDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlDataTypePtrInput)(nil)).Elem(), StandardSqlDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlFieldInput)(nil)).Elem(), StandardSqlFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlFieldArrayInput)(nil)).Elem(), StandardSqlFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlStructTypeInput)(nil)).Elem(), StandardSqlStructTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlStructTypePtrInput)(nil)).Elem(), StandardSqlStructTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlTableTypeInput)(nil)).Elem(), StandardSqlTableTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlTableTypePtrInput)(nil)).Elem(), StandardSqlTableTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsInput)(nil)).Elem(), TableConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsPtrInput)(nil)).Elem(), TableConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemInput)(nil)).Elem(), TableConstraintsForeignKeysItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemArrayInput)(nil)).Elem(), TableConstraintsForeignKeysItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItemInput)(nil)).Elem(), TableConstraintsForeignKeysItemColumnReferencesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItemArrayInput)(nil)).Elem(), TableConstraintsForeignKeysItemColumnReferencesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTableInput)(nil)).Elem(), TableConstraintsForeignKeysItemReferencedTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTablePtrInput)(nil)).Elem(), TableConstraintsForeignKeysItemReferencedTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsPrimaryKeyInput)(nil)).Elem(), TableConstraintsPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsPrimaryKeyPtrInput)(nil)).Elem(), TableConstraintsPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaInput)(nil)).Elem(), TableFieldSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaArrayInput)(nil)).Elem(), TableFieldSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaCategoriesInput)(nil)).Elem(), TableFieldSchemaCategoriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaCategoriesPtrInput)(nil)).Elem(), TableFieldSchemaCategoriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaPolicyTagsInput)(nil)).Elem(), TableFieldSchemaPolicyTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaPolicyTagsPtrInput)(nil)).Elem(), TableFieldSchemaPolicyTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaRangeElementTypeInput)(nil)).Elem(), TableFieldSchemaRangeElementTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaRangeElementTypePtrInput)(nil)).Elem(), TableFieldSchemaRangeElementTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReferenceInput)(nil)).Elem(), TableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReferencePtrInput)(nil)).Elem(), TableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReferenceArrayInput)(nil)).Elem(), TableReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicationInfoInput)(nil)).Elem(), TableReplicationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReplicationInfoPtrInput)(nil)).Elem(), TableReplicationInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaInput)(nil)).Elem(), TableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaPtrInput)(nil)).Elem(), TableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimePartitioningInput)(nil)).Elem(), TimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimePartitioningPtrInput)(nil)).Elem(), TimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDefinedFunctionResourceInput)(nil)).Elem(), UserDefinedFunctionResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDefinedFunctionResourceArrayInput)(nil)).Elem(), UserDefinedFunctionResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewDefinitionInput)(nil)).Elem(), ViewDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewDefinitionPtrInput)(nil)).Elem(), ViewDefinitionArgs{})
	pulumi.RegisterOutputType(AggregateClassificationMetricsResponseOutput{})
	pulumi.RegisterOutputType(AggregationThresholdPolicyOutput{})
	pulumi.RegisterOutputType(AggregationThresholdPolicyPtrOutput{})
	pulumi.RegisterOutputType(AggregationThresholdPolicyResponseOutput{})
	pulumi.RegisterOutputType(ArgumentOutput{})
	pulumi.RegisterOutputType(ArgumentArrayOutput{})
	pulumi.RegisterOutputType(ArgumentResponseOutput{})
	pulumi.RegisterOutputType(ArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(ArimaCoefficientsResponseOutput{})
	pulumi.RegisterOutputType(ArimaFittingMetricsResponseOutput{})
	pulumi.RegisterOutputType(ArimaFittingMetricsResponseArrayOutput{})
	pulumi.RegisterOutputType(ArimaForecastingMetricsResponseOutput{})
	pulumi.RegisterOutputType(ArimaModelInfoResponseOutput{})
	pulumi.RegisterOutputType(ArimaModelInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ArimaOrderResponseOutput{})
	pulumi.RegisterOutputType(ArimaOrderResponseArrayOutput{})
	pulumi.RegisterOutputType(ArimaResultResponseOutput{})
	pulumi.RegisterOutputType(ArimaSingleModelForecastingMetricsResponseOutput{})
	pulumi.RegisterOutputType(ArimaSingleModelForecastingMetricsResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AvroOptionsOutput{})
	pulumi.RegisterOutputType(AvroOptionsPtrOutput{})
	pulumi.RegisterOutputType(AvroOptionsResponseOutput{})
	pulumi.RegisterOutputType(BiEngineReasonResponseOutput{})
	pulumi.RegisterOutputType(BiEngineReasonResponseArrayOutput{})
	pulumi.RegisterOutputType(BiEngineStatisticsResponseOutput{})
	pulumi.RegisterOutputType(BigLakeConfigurationOutput{})
	pulumi.RegisterOutputType(BigLakeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BigLakeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(BigQueryModelTrainingResponseOutput{})
	pulumi.RegisterOutputType(BigtableColumnOutput{})
	pulumi.RegisterOutputType(BigtableColumnArrayOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyArrayOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyResponseOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyResponseArrayOutput{})
	pulumi.RegisterOutputType(BigtableColumnResponseOutput{})
	pulumi.RegisterOutputType(BigtableColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(BigtableOptionsOutput{})
	pulumi.RegisterOutputType(BigtableOptionsPtrOutput{})
	pulumi.RegisterOutputType(BigtableOptionsResponseOutput{})
	pulumi.RegisterOutputType(BinaryClassificationMetricsResponseOutput{})
	pulumi.RegisterOutputType(BinaryConfusionMatrixResponseOutput{})
	pulumi.RegisterOutputType(BinaryConfusionMatrixResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultArrayOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultResponseOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultResponseArrayOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunArrayOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunResponseOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunResponseArrayOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunTrainingOptionsOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunTrainingOptionsPtrOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunTrainingOptionsResponseOutput{})
	pulumi.RegisterOutputType(CategoricalValueResponseOutput{})
	pulumi.RegisterOutputType(CategoryCountResponseOutput{})
	pulumi.RegisterOutputType(CategoryCountResponseArrayOutput{})
	pulumi.RegisterOutputType(CloneDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ClusterInfoResponseOutput{})
	pulumi.RegisterOutputType(ClusterInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterResponseOutput{})
	pulumi.RegisterOutputType(ClusterResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusteringOutput{})
	pulumi.RegisterOutputType(ClusteringPtrOutput{})
	pulumi.RegisterOutputType(ClusteringMetricsResponseOutput{})
	pulumi.RegisterOutputType(ClusteringResponseOutput{})
	pulumi.RegisterOutputType(ConfusionMatrixResponseOutput{})
	pulumi.RegisterOutputType(ConfusionMatrixResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyArrayOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyResponseOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyResponseArrayOutput{})
	pulumi.RegisterOutputType(CsvOptionsOutput{})
	pulumi.RegisterOutputType(CsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(CsvOptionsResponseOutput{})
	pulumi.RegisterOutputType(DataMaskingStatisticsResponseOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryResponseOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemResponseOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemResponseArrayOutput{})
	pulumi.RegisterOutputType(DatasetReferenceOutput{})
	pulumi.RegisterOutputType(DatasetReferencePtrOutput{})
	pulumi.RegisterOutputType(DatasetReferenceResponseOutput{})
	pulumi.RegisterOutputType(DatasetTagsItemResponseOutput{})
	pulumi.RegisterOutputType(DatasetTagsItemResponseArrayOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesResponseOutput{})
	pulumi.RegisterOutputType(DimensionalityReductionMetricsResponseOutput{})
	pulumi.RegisterOutputType(DmlStatisticsResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(EntryResponseOutput{})
	pulumi.RegisterOutputType(EntryResponseArrayOutput{})
	pulumi.RegisterOutputType(ErrorProtoResponseOutput{})
	pulumi.RegisterOutputType(ErrorProtoResponseArrayOutput{})
	pulumi.RegisterOutputType(EvaluationMetricsResponseOutput{})
	pulumi.RegisterOutputType(ExplainQueryStageResponseOutput{})
	pulumi.RegisterOutputType(ExplainQueryStageResponseArrayOutput{})
	pulumi.RegisterOutputType(ExplainQueryStepResponseOutput{})
	pulumi.RegisterOutputType(ExplainQueryStepResponseArrayOutput{})
	pulumi.RegisterOutputType(ExportDataStatisticsResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ExternalDatasetReferenceOutput{})
	pulumi.RegisterOutputType(ExternalDatasetReferencePtrOutput{})
	pulumi.RegisterOutputType(ExternalDatasetReferenceResponseOutput{})
	pulumi.RegisterOutputType(ExternalServiceCostResponseOutput{})
	pulumi.RegisterOutputType(ExternalServiceCostResponseArrayOutput{})
	pulumi.RegisterOutputType(FeatureValueResponseOutput{})
	pulumi.RegisterOutputType(FeatureValueResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsPtrOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsResponseOutput{})
	pulumi.RegisterOutputType(HighCardinalityJoinResponseOutput{})
	pulumi.RegisterOutputType(HighCardinalityJoinResponseArrayOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsPtrOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsResponseOutput{})
	pulumi.RegisterOutputType(HparamTuningTrialResponseOutput{})
	pulumi.RegisterOutputType(HparamTuningTrialResponseArrayOutput{})
	pulumi.RegisterOutputType(IndexUnusedReasonResponseOutput{})
	pulumi.RegisterOutputType(IndexUnusedReasonResponseArrayOutput{})
	pulumi.RegisterOutputType(InputDataChangeResponseOutput{})
	pulumi.RegisterOutputType(IterationResultResponseOutput{})
	pulumi.RegisterOutputType(IterationResultResponseArrayOutput{})
	pulumi.RegisterOutputType(JobConfigurationOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyResponseOutput{})
	pulumi.RegisterOutputType(JobCreationReasonResponseOutput{})
	pulumi.RegisterOutputType(JobReferenceOutput{})
	pulumi.RegisterOutputType(JobReferencePtrOutput{})
	pulumi.RegisterOutputType(JobReferenceResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics2ReservationUsageItemResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics2ReservationUsageItemResponseArrayOutput{})
	pulumi.RegisterOutputType(JobStatistics2ResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics3ResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics4ResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics5ResponseOutput{})
	pulumi.RegisterOutputType(JobStatisticsReservationUsageItemResponseOutput{})
	pulumi.RegisterOutputType(JobStatisticsReservationUsageItemResponseArrayOutput{})
	pulumi.RegisterOutputType(JobStatisticsResponseOutput{})
	pulumi.RegisterOutputType(JobStatusResponseOutput{})
	pulumi.RegisterOutputType(JsonOptionsOutput{})
	pulumi.RegisterOutputType(JsonOptionsPtrOutput{})
	pulumi.RegisterOutputType(JsonOptionsResponseOutput{})
	pulumi.RegisterOutputType(LinkedDatasetMetadataResponseOutput{})
	pulumi.RegisterOutputType(LinkedDatasetSourceOutput{})
	pulumi.RegisterOutputType(LinkedDatasetSourcePtrOutput{})
	pulumi.RegisterOutputType(LinkedDatasetSourceResponseOutput{})
	pulumi.RegisterOutputType(LoadQueryStatisticsResponseOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionPtrOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionResponseOutput{})
	pulumi.RegisterOutputType(MaterializedViewResponseOutput{})
	pulumi.RegisterOutputType(MaterializedViewResponseArrayOutput{})
	pulumi.RegisterOutputType(MaterializedViewStatisticsResponseOutput{})
	pulumi.RegisterOutputType(MaterializedViewStatusResponseOutput{})
	pulumi.RegisterOutputType(MetadataCacheStatisticsResponseOutput{})
	pulumi.RegisterOutputType(MlStatisticsResponseOutput{})
	pulumi.RegisterOutputType(ModelDefinitionOutput{})
	pulumi.RegisterOutputType(ModelDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ModelDefinitionModelOptionsOutput{})
	pulumi.RegisterOutputType(ModelDefinitionModelOptionsPtrOutput{})
	pulumi.RegisterOutputType(ModelDefinitionModelOptionsResponseOutput{})
	pulumi.RegisterOutputType(ModelDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ModelExtractOptionsOutput{})
	pulumi.RegisterOutputType(ModelExtractOptionsPtrOutput{})
	pulumi.RegisterOutputType(ModelExtractOptionsResponseOutput{})
	pulumi.RegisterOutputType(ModelReferenceOutput{})
	pulumi.RegisterOutputType(ModelReferencePtrOutput{})
	pulumi.RegisterOutputType(ModelReferenceResponseOutput{})
	pulumi.RegisterOutputType(MultiClassClassificationMetricsResponseOutput{})
	pulumi.RegisterOutputType(ParquetOptionsOutput{})
	pulumi.RegisterOutputType(ParquetOptionsPtrOutput{})
	pulumi.RegisterOutputType(ParquetOptionsResponseOutput{})
	pulumi.RegisterOutputType(PartitionedColumnResponseOutput{})
	pulumi.RegisterOutputType(PartitionedColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(PartitioningDefinitionResponseOutput{})
	pulumi.RegisterOutputType(PerformanceInsightsResponseOutput{})
	pulumi.RegisterOutputType(PrincipalComponentInfoResponseOutput{})
	pulumi.RegisterOutputType(PrincipalComponentInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivacyPolicyOutput{})
	pulumi.RegisterOutputType(PrivacyPolicyPtrOutput{})
	pulumi.RegisterOutputType(PrivacyPolicyResponseOutput{})
	pulumi.RegisterOutputType(QueryInfoResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterOutput{})
	pulumi.RegisterOutputType(QueryParameterArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeOutput{})
	pulumi.RegisterOutputType(QueryParameterTypePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterValueOutput{})
	pulumi.RegisterOutputType(QueryParameterValuePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterValueArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterValueResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterValueResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterValueResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryTimelineSampleResponseOutput{})
	pulumi.RegisterOutputType(QueryTimelineSampleResponseArrayOutput{})
	pulumi.RegisterOutputType(RangePartitioningOutput{})
	pulumi.RegisterOutputType(RangePartitioningPtrOutput{})
	pulumi.RegisterOutputType(RangePartitioningRangeOutput{})
	pulumi.RegisterOutputType(RangePartitioningRangePtrOutput{})
	pulumi.RegisterOutputType(RangePartitioningRangeResponseOutput{})
	pulumi.RegisterOutputType(RangePartitioningResponseOutput{})
	pulumi.RegisterOutputType(RangeValueOutput{})
	pulumi.RegisterOutputType(RangeValuePtrOutput{})
	pulumi.RegisterOutputType(RangeValueResponseOutput{})
	pulumi.RegisterOutputType(RangeValueResponsePtrOutput{})
	pulumi.RegisterOutputType(RankingMetricsResponseOutput{})
	pulumi.RegisterOutputType(RegressionMetricsResponseOutput{})
	pulumi.RegisterOutputType(RemoteFunctionOptionsOutput{})
	pulumi.RegisterOutputType(RemoteFunctionOptionsPtrOutput{})
	pulumi.RegisterOutputType(RemoteFunctionOptionsResponseOutput{})
	pulumi.RegisterOutputType(RoutineReferenceOutput{})
	pulumi.RegisterOutputType(RoutineReferencePtrOutput{})
	pulumi.RegisterOutputType(RoutineReferenceResponseOutput{})
	pulumi.RegisterOutputType(RoutineReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(RowAccessPolicyReferenceResponseOutput{})
	pulumi.RegisterOutputType(RowLevelSecurityStatisticsResponseOutput{})
	pulumi.RegisterOutputType(RowResponseOutput{})
	pulumi.RegisterOutputType(RowResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptOptionsOutput{})
	pulumi.RegisterOutputType(ScriptOptionsPtrOutput{})
	pulumi.RegisterOutputType(ScriptOptionsResponseOutput{})
	pulumi.RegisterOutputType(ScriptStackFrameResponseOutput{})
	pulumi.RegisterOutputType(ScriptStackFrameResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptStatisticsResponseOutput{})
	pulumi.RegisterOutputType(SearchStatisticsResponseOutput{})
	pulumi.RegisterOutputType(SessionInfoResponseOutput{})
	pulumi.RegisterOutputType(SnapshotDefinitionResponseOutput{})
	pulumi.RegisterOutputType(SparkLoggingInfoResponseOutput{})
	pulumi.RegisterOutputType(SparkOptionsOutput{})
	pulumi.RegisterOutputType(SparkOptionsPtrOutput{})
	pulumi.RegisterOutputType(SparkOptionsResponseOutput{})
	pulumi.RegisterOutputType(SparkStatisticsResponseOutput{})
	pulumi.RegisterOutputType(StagePerformanceChangeInsightResponseOutput{})
	pulumi.RegisterOutputType(StagePerformanceChangeInsightResponseArrayOutput{})
	pulumi.RegisterOutputType(StagePerformanceStandaloneInsightResponseOutput{})
	pulumi.RegisterOutputType(StagePerformanceStandaloneInsightResponseArrayOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeResponseOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeResponsePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldArrayOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldResponseOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypeResponseOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypeResponsePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypeResponseOutput{})
	pulumi.RegisterOutputType(StreamingbufferResponseOutput{})
	pulumi.RegisterOutputType(SystemVariablesResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsOutput{})
	pulumi.RegisterOutputType(TableConstraintsPtrOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemReferencedTableOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemReferencedTablePtrOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemReferencedTableResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemResponseArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsPrimaryKeyOutput{})
	pulumi.RegisterOutputType(TableConstraintsPrimaryKeyPtrOutput{})
	pulumi.RegisterOutputType(TableConstraintsPrimaryKeyResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaArrayOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaCategoriesOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaCategoriesPtrOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaCategoriesResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaPolicyTagsOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaPolicyTagsPtrOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaPolicyTagsResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaRangeElementTypeOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaRangeElementTypePtrOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaRangeElementTypeResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(TableMetadataCacheUsageResponseOutput{})
	pulumi.RegisterOutputType(TableMetadataCacheUsageResponseArrayOutput{})
	pulumi.RegisterOutputType(TableReferenceOutput{})
	pulumi.RegisterOutputType(TableReferencePtrOutput{})
	pulumi.RegisterOutputType(TableReferenceArrayOutput{})
	pulumi.RegisterOutputType(TableReferenceResponseOutput{})
	pulumi.RegisterOutputType(TableReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(TableReplicationInfoOutput{})
	pulumi.RegisterOutputType(TableReplicationInfoPtrOutput{})
	pulumi.RegisterOutputType(TableReplicationInfoResponseOutput{})
	pulumi.RegisterOutputType(TableSchemaOutput{})
	pulumi.RegisterOutputType(TableSchemaPtrOutput{})
	pulumi.RegisterOutputType(TableSchemaResponseOutput{})
	pulumi.RegisterOutputType(TimePartitioningOutput{})
	pulumi.RegisterOutputType(TimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TimePartitioningResponseOutput{})
	pulumi.RegisterOutputType(TrainingOptionsResponseOutput{})
	pulumi.RegisterOutputType(TransactionInfoResponseOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceArrayOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceResponseOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(VectorSearchStatisticsResponseOutput{})
	pulumi.RegisterOutputType(ViewDefinitionOutput{})
	pulumi.RegisterOutputType(ViewDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ViewDefinitionResponseOutput{})
}
