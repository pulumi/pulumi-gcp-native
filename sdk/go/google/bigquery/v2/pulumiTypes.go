// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Input/output argument of a function or a stored procedure.
type Argument struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind *ArgumentArgumentKind `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType *StandardSqlDataType `pulumi:"dataType"`
	// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
	IsAggregate *bool `pulumi:"isAggregate"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode *ArgumentMode `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name *string `pulumi:"name"`
}

// ArgumentInput is an input type that accepts ArgumentArgs and ArgumentOutput values.
// You can construct a concrete instance of `ArgumentInput` via:
//
//	ArgumentArgs{...}
type ArgumentInput interface {
	pulumi.Input

	ToArgumentOutput() ArgumentOutput
	ToArgumentOutputWithContext(context.Context) ArgumentOutput
}

// Input/output argument of a function or a stored procedure.
type ArgumentArgs struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind ArgumentArgumentKindPtrInput `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType StandardSqlDataTypePtrInput `pulumi:"dataType"`
	// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
	IsAggregate pulumi.BoolPtrInput `pulumi:"isAggregate"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode ArgumentModePtrInput `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ArgumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (i ArgumentArgs) ToArgumentOutput() ArgumentOutput {
	return i.ToArgumentOutputWithContext(context.Background())
}

func (i ArgumentArgs) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentOutput)
}

// ArgumentArrayInput is an input type that accepts ArgumentArray and ArgumentArrayOutput values.
// You can construct a concrete instance of `ArgumentArrayInput` via:
//
//	ArgumentArray{ ArgumentArgs{...} }
type ArgumentArrayInput interface {
	pulumi.Input

	ToArgumentArrayOutput() ArgumentArrayOutput
	ToArgumentArrayOutputWithContext(context.Context) ArgumentArrayOutput
}

type ArgumentArray []ArgumentInput

func (ArgumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (i ArgumentArray) ToArgumentArrayOutput() ArgumentArrayOutput {
	return i.ToArgumentArrayOutputWithContext(context.Background())
}

func (i ArgumentArray) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArgumentArrayOutput)
}

// Input/output argument of a function or a stored procedure.
type ArgumentOutput struct{ *pulumi.OutputState }

func (ArgumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Argument)(nil)).Elem()
}

func (o ArgumentOutput) ToArgumentOutput() ArgumentOutput {
	return o
}

func (o ArgumentOutput) ToArgumentOutputWithContext(ctx context.Context) ArgumentOutput {
	return o
}

// Optional. Defaults to FIXED_TYPE.
func (o ArgumentOutput) ArgumentKind() ArgumentArgumentKindPtrOutput {
	return o.ApplyT(func(v Argument) *ArgumentArgumentKind { return v.ArgumentKind }).(ArgumentArgumentKindPtrOutput)
}

// Required unless argument_kind = ANY_TYPE.
func (o ArgumentOutput) DataType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v Argument) *StandardSqlDataType { return v.DataType }).(StandardSqlDataTypePtrOutput)
}

// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
func (o ArgumentOutput) IsAggregate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Argument) *bool { return v.IsAggregate }).(pulumi.BoolPtrOutput)
}

// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
func (o ArgumentOutput) Mode() ArgumentModePtrOutput {
	return o.ApplyT(func(v Argument) *ArgumentMode { return v.Mode }).(ArgumentModePtrOutput)
}

// Optional. The name of this argument. Can be absent for function return argument.
func (o ArgumentOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Argument) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ArgumentArrayOutput struct{ *pulumi.OutputState }

func (ArgumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Argument)(nil)).Elem()
}

func (o ArgumentArrayOutput) ToArgumentArrayOutput() ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) ToArgumentArrayOutputWithContext(ctx context.Context) ArgumentArrayOutput {
	return o
}

func (o ArgumentArrayOutput) Index(i pulumi.IntInput) ArgumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Argument {
		return vs[0].([]Argument)[vs[1].(int)]
	}).(ArgumentOutput)
}

// Input/output argument of a function or a stored procedure.
type ArgumentResponse struct {
	// Optional. Defaults to FIXED_TYPE.
	ArgumentKind string `pulumi:"argumentKind"`
	// Required unless argument_kind = ANY_TYPE.
	DataType StandardSqlDataTypeResponse `pulumi:"dataType"`
	// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
	IsAggregate bool `pulumi:"isAggregate"`
	// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
	Mode string `pulumi:"mode"`
	// Optional. The name of this argument. Can be absent for function return argument.
	Name string `pulumi:"name"`
}

// Input/output argument of a function or a stored procedure.
type ArgumentResponseOutput struct{ *pulumi.OutputState }

func (ArgumentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArgumentResponse)(nil)).Elem()
}

func (o ArgumentResponseOutput) ToArgumentResponseOutput() ArgumentResponseOutput {
	return o
}

func (o ArgumentResponseOutput) ToArgumentResponseOutputWithContext(ctx context.Context) ArgumentResponseOutput {
	return o
}

// Optional. Defaults to FIXED_TYPE.
func (o ArgumentResponseOutput) ArgumentKind() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.ArgumentKind }).(pulumi.StringOutput)
}

// Required unless argument_kind = ANY_TYPE.
func (o ArgumentResponseOutput) DataType() StandardSqlDataTypeResponseOutput {
	return o.ApplyT(func(v ArgumentResponse) StandardSqlDataTypeResponse { return v.DataType }).(StandardSqlDataTypeResponseOutput)
}

// Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding "NOT AGGREGATE" clause in DDL; Otherwise, it is equivalent to omitting "NOT AGGREGATE" clause in DDL.
func (o ArgumentResponseOutput) IsAggregate() pulumi.BoolOutput {
	return o.ApplyT(func(v ArgumentResponse) bool { return v.IsAggregate }).(pulumi.BoolOutput)
}

// Optional. Specifies whether the argument is input or output. Can be set for procedures only.
func (o ArgumentResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Optional. The name of this argument. Can be absent for function return argument.
func (o ArgumentResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArgumentResponse) string { return v.Name }).(pulumi.StringOutput)
}

type ArgumentResponseArrayOutput struct{ *pulumi.OutputState }

func (ArgumentResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArgumentResponse)(nil)).Elem()
}

func (o ArgumentResponseArrayOutput) ToArgumentResponseArrayOutput() ArgumentResponseArrayOutput {
	return o
}

func (o ArgumentResponseArrayOutput) ToArgumentResponseArrayOutputWithContext(ctx context.Context) ArgumentResponseArrayOutput {
	return o
}

func (o ArgumentResponseArrayOutput) Index(i pulumi.IntInput) ArgumentResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArgumentResponse {
		return vs[0].([]ArgumentResponse)[vs[1].(int)]
	}).(ArgumentResponseOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

type AvroOptions struct {
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
}

// AvroOptionsInput is an input type that accepts AvroOptionsArgs and AvroOptionsOutput values.
// You can construct a concrete instance of `AvroOptionsInput` via:
//
//	AvroOptionsArgs{...}
type AvroOptionsInput interface {
	pulumi.Input

	ToAvroOptionsOutput() AvroOptionsOutput
	ToAvroOptionsOutputWithContext(context.Context) AvroOptionsOutput
}

type AvroOptionsArgs struct {
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
}

func (AvroOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroOptions)(nil)).Elem()
}

func (i AvroOptionsArgs) ToAvroOptionsOutput() AvroOptionsOutput {
	return i.ToAvroOptionsOutputWithContext(context.Background())
}

func (i AvroOptionsArgs) ToAvroOptionsOutputWithContext(ctx context.Context) AvroOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroOptionsOutput)
}

func (i AvroOptionsArgs) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return i.ToAvroOptionsPtrOutputWithContext(context.Background())
}

func (i AvroOptionsArgs) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroOptionsOutput).ToAvroOptionsPtrOutputWithContext(ctx)
}

// AvroOptionsPtrInput is an input type that accepts AvroOptionsArgs, AvroOptionsPtr and AvroOptionsPtrOutput values.
// You can construct a concrete instance of `AvroOptionsPtrInput` via:
//
//	        AvroOptionsArgs{...}
//
//	or:
//
//	        nil
type AvroOptionsPtrInput interface {
	pulumi.Input

	ToAvroOptionsPtrOutput() AvroOptionsPtrOutput
	ToAvroOptionsPtrOutputWithContext(context.Context) AvroOptionsPtrOutput
}

type avroOptionsPtrType AvroOptionsArgs

func AvroOptionsPtr(v *AvroOptionsArgs) AvroOptionsPtrInput {
	return (*avroOptionsPtrType)(v)
}

func (*avroOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroOptions)(nil)).Elem()
}

func (i *avroOptionsPtrType) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return i.ToAvroOptionsPtrOutputWithContext(context.Background())
}

func (i *avroOptionsPtrType) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroOptionsPtrOutput)
}

type AvroOptionsOutput struct{ *pulumi.OutputState }

func (AvroOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroOptions)(nil)).Elem()
}

func (o AvroOptionsOutput) ToAvroOptionsOutput() AvroOptionsOutput {
	return o
}

func (o AvroOptionsOutput) ToAvroOptionsOutputWithContext(ctx context.Context) AvroOptionsOutput {
	return o
}

func (o AvroOptionsOutput) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return o.ToAvroOptionsPtrOutputWithContext(context.Background())
}

func (o AvroOptionsOutput) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroOptions) *AvroOptions {
		return &v
	}).(AvroOptionsPtrOutput)
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o AvroOptionsOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AvroOptions) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

type AvroOptionsPtrOutput struct{ *pulumi.OutputState }

func (AvroOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroOptions)(nil)).Elem()
}

func (o AvroOptionsPtrOutput) ToAvroOptionsPtrOutput() AvroOptionsPtrOutput {
	return o
}

func (o AvroOptionsPtrOutput) ToAvroOptionsPtrOutputWithContext(ctx context.Context) AvroOptionsPtrOutput {
	return o
}

func (o AvroOptionsPtrOutput) Elem() AvroOptionsOutput {
	return o.ApplyT(func(v *AvroOptions) AvroOptions {
		if v != nil {
			return *v
		}
		var ret AvroOptions
		return ret
	}).(AvroOptionsOutput)
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o AvroOptionsPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AvroOptions) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

type AvroOptionsResponse struct {
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes bool `pulumi:"useAvroLogicalTypes"`
}

type AvroOptionsResponseOutput struct{ *pulumi.OutputState }

func (AvroOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroOptionsResponse)(nil)).Elem()
}

func (o AvroOptionsResponseOutput) ToAvroOptionsResponseOutput() AvroOptionsResponseOutput {
	return o
}

func (o AvroOptionsResponseOutput) ToAvroOptionsResponseOutputWithContext(ctx context.Context) AvroOptionsResponseOutput {
	return o
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o AvroOptionsResponseOutput) UseAvroLogicalTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v AvroOptionsResponse) bool { return v.UseAvroLogicalTypes }).(pulumi.BoolOutput)
}

type BiEngineReasonResponse struct {
	// High-level BI Engine reason for partial or disabled acceleration.
	Code string `pulumi:"code"`
	// Free form human-readable reason for partial or disabled acceleration.
	Message string `pulumi:"message"`
}

type BiEngineReasonResponseOutput struct{ *pulumi.OutputState }

func (BiEngineReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BiEngineReasonResponse)(nil)).Elem()
}

func (o BiEngineReasonResponseOutput) ToBiEngineReasonResponseOutput() BiEngineReasonResponseOutput {
	return o
}

func (o BiEngineReasonResponseOutput) ToBiEngineReasonResponseOutputWithContext(ctx context.Context) BiEngineReasonResponseOutput {
	return o
}

// High-level BI Engine reason for partial or disabled acceleration.
func (o BiEngineReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Free form human-readable reason for partial or disabled acceleration.
func (o BiEngineReasonResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineReasonResponse) string { return v.Message }).(pulumi.StringOutput)
}

type BiEngineReasonResponseArrayOutput struct{ *pulumi.OutputState }

func (BiEngineReasonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BiEngineReasonResponse)(nil)).Elem()
}

func (o BiEngineReasonResponseArrayOutput) ToBiEngineReasonResponseArrayOutput() BiEngineReasonResponseArrayOutput {
	return o
}

func (o BiEngineReasonResponseArrayOutput) ToBiEngineReasonResponseArrayOutputWithContext(ctx context.Context) BiEngineReasonResponseArrayOutput {
	return o
}

func (o BiEngineReasonResponseArrayOutput) Index(i pulumi.IntInput) BiEngineReasonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BiEngineReasonResponse {
		return vs[0].([]BiEngineReasonResponse)[vs[1].(int)]
	}).(BiEngineReasonResponseOutput)
}

type BiEngineStatisticsResponse struct {
	// Specifies which mode of BI Engine acceleration was performed (if any).
	AccelerationMode string `pulumi:"accelerationMode"`
	// Specifies which mode of BI Engine acceleration was performed (if any).
	BiEngineMode string `pulumi:"biEngineMode"`
	// In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
	BiEngineReasons []BiEngineReasonResponse `pulumi:"biEngineReasons"`
}

type BiEngineStatisticsResponseOutput struct{ *pulumi.OutputState }

func (BiEngineStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BiEngineStatisticsResponse)(nil)).Elem()
}

func (o BiEngineStatisticsResponseOutput) ToBiEngineStatisticsResponseOutput() BiEngineStatisticsResponseOutput {
	return o
}

func (o BiEngineStatisticsResponseOutput) ToBiEngineStatisticsResponseOutputWithContext(ctx context.Context) BiEngineStatisticsResponseOutput {
	return o
}

// Specifies which mode of BI Engine acceleration was performed (if any).
func (o BiEngineStatisticsResponseOutput) AccelerationMode() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineStatisticsResponse) string { return v.AccelerationMode }).(pulumi.StringOutput)
}

// Specifies which mode of BI Engine acceleration was performed (if any).
func (o BiEngineStatisticsResponseOutput) BiEngineMode() pulumi.StringOutput {
	return o.ApplyT(func(v BiEngineStatisticsResponse) string { return v.BiEngineMode }).(pulumi.StringOutput)
}

// In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.
func (o BiEngineStatisticsResponseOutput) BiEngineReasons() BiEngineReasonResponseArrayOutput {
	return o.ApplyT(func(v BiEngineStatisticsResponse) []BiEngineReasonResponse { return v.BiEngineReasons }).(BiEngineReasonResponseArrayOutput)
}

type BigLakeConfiguration struct {
	// [Required] Required and immutable. Credential reference for accessing external storage system. Normalized as project_id.location_id.connection_id.
	ConnectionId *string `pulumi:"connectionId"`
	// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
	FileFormat *string `pulumi:"fileFormat"`
	// [Required] Required and immutable. Fully qualified location prefix of the external folder where data is stored. Normalized to standard format: "gs:////". Starts with "gs://" rather than "/bigstore/". Ends with "/". Does not contain "*". See also BigLakeStorageMetadata on how it is used.
	StorageUri *string `pulumi:"storageUri"`
	// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
	TableFormat *string `pulumi:"tableFormat"`
}

// BigLakeConfigurationInput is an input type that accepts BigLakeConfigurationArgs and BigLakeConfigurationOutput values.
// You can construct a concrete instance of `BigLakeConfigurationInput` via:
//
//	BigLakeConfigurationArgs{...}
type BigLakeConfigurationInput interface {
	pulumi.Input

	ToBigLakeConfigurationOutput() BigLakeConfigurationOutput
	ToBigLakeConfigurationOutputWithContext(context.Context) BigLakeConfigurationOutput
}

type BigLakeConfigurationArgs struct {
	// [Required] Required and immutable. Credential reference for accessing external storage system. Normalized as project_id.location_id.connection_id.
	ConnectionId pulumi.StringPtrInput `pulumi:"connectionId"`
	// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
	FileFormat pulumi.StringPtrInput `pulumi:"fileFormat"`
	// [Required] Required and immutable. Fully qualified location prefix of the external folder where data is stored. Normalized to standard format: "gs:////". Starts with "gs://" rather than "/bigstore/". Ends with "/". Does not contain "*". See also BigLakeStorageMetadata on how it is used.
	StorageUri pulumi.StringPtrInput `pulumi:"storageUri"`
	// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
	TableFormat pulumi.StringPtrInput `pulumi:"tableFormat"`
}

func (BigLakeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigLakeConfiguration)(nil)).Elem()
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationOutput() BigLakeConfigurationOutput {
	return i.ToBigLakeConfigurationOutputWithContext(context.Background())
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationOutputWithContext(ctx context.Context) BigLakeConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigLakeConfigurationOutput)
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return i.ToBigLakeConfigurationPtrOutputWithContext(context.Background())
}

func (i BigLakeConfigurationArgs) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigLakeConfigurationOutput).ToBigLakeConfigurationPtrOutputWithContext(ctx)
}

// BigLakeConfigurationPtrInput is an input type that accepts BigLakeConfigurationArgs, BigLakeConfigurationPtr and BigLakeConfigurationPtrOutput values.
// You can construct a concrete instance of `BigLakeConfigurationPtrInput` via:
//
//	        BigLakeConfigurationArgs{...}
//
//	or:
//
//	        nil
type BigLakeConfigurationPtrInput interface {
	pulumi.Input

	ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput
	ToBigLakeConfigurationPtrOutputWithContext(context.Context) BigLakeConfigurationPtrOutput
}

type bigLakeConfigurationPtrType BigLakeConfigurationArgs

func BigLakeConfigurationPtr(v *BigLakeConfigurationArgs) BigLakeConfigurationPtrInput {
	return (*bigLakeConfigurationPtrType)(v)
}

func (*bigLakeConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigLakeConfiguration)(nil)).Elem()
}

func (i *bigLakeConfigurationPtrType) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return i.ToBigLakeConfigurationPtrOutputWithContext(context.Background())
}

func (i *bigLakeConfigurationPtrType) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigLakeConfigurationPtrOutput)
}

type BigLakeConfigurationOutput struct{ *pulumi.OutputState }

func (BigLakeConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigLakeConfiguration)(nil)).Elem()
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationOutput() BigLakeConfigurationOutput {
	return o
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationOutputWithContext(ctx context.Context) BigLakeConfigurationOutput {
	return o
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return o.ToBigLakeConfigurationPtrOutputWithContext(context.Background())
}

func (o BigLakeConfigurationOutput) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigLakeConfiguration) *BigLakeConfiguration {
		return &v
	}).(BigLakeConfigurationPtrOutput)
}

// [Required] Required and immutable. Credential reference for accessing external storage system. Normalized as project_id.location_id.connection_id.
func (o BigLakeConfigurationOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigLakeConfiguration) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
func (o BigLakeConfigurationOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigLakeConfiguration) *string { return v.FileFormat }).(pulumi.StringPtrOutput)
}

// [Required] Required and immutable. Fully qualified location prefix of the external folder where data is stored. Normalized to standard format: "gs:////". Starts with "gs://" rather than "/bigstore/". Ends with "/". Does not contain "*". See also BigLakeStorageMetadata on how it is used.
func (o BigLakeConfigurationOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigLakeConfiguration) *string { return v.StorageUri }).(pulumi.StringPtrOutput)
}

// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
func (o BigLakeConfigurationOutput) TableFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigLakeConfiguration) *string { return v.TableFormat }).(pulumi.StringPtrOutput)
}

type BigLakeConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BigLakeConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigLakeConfiguration)(nil)).Elem()
}

func (o BigLakeConfigurationPtrOutput) ToBigLakeConfigurationPtrOutput() BigLakeConfigurationPtrOutput {
	return o
}

func (o BigLakeConfigurationPtrOutput) ToBigLakeConfigurationPtrOutputWithContext(ctx context.Context) BigLakeConfigurationPtrOutput {
	return o
}

func (o BigLakeConfigurationPtrOutput) Elem() BigLakeConfigurationOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) BigLakeConfiguration {
		if v != nil {
			return *v
		}
		var ret BigLakeConfiguration
		return ret
	}).(BigLakeConfigurationOutput)
}

// [Required] Required and immutable. Credential reference for accessing external storage system. Normalized as project_id.location_id.connection_id.
func (o BigLakeConfigurationPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
func (o BigLakeConfigurationPtrOutput) FileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FileFormat
	}).(pulumi.StringPtrOutput)
}

// [Required] Required and immutable. Fully qualified location prefix of the external folder where data is stored. Normalized to standard format: "gs:////". Starts with "gs://" rather than "/bigstore/". Ends with "/". Does not contain "*". See also BigLakeStorageMetadata on how it is used.
func (o BigLakeConfigurationPtrOutput) StorageUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.StorageUri
	}).(pulumi.StringPtrOutput)
}

// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
func (o BigLakeConfigurationPtrOutput) TableFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigLakeConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.TableFormat
	}).(pulumi.StringPtrOutput)
}

type BigLakeConfigurationResponse struct {
	// [Required] Required and immutable. Credential reference for accessing external storage system. Normalized as project_id.location_id.connection_id.
	ConnectionId string `pulumi:"connectionId"`
	// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
	FileFormat string `pulumi:"fileFormat"`
	// [Required] Required and immutable. Fully qualified location prefix of the external folder where data is stored. Normalized to standard format: "gs:////". Starts with "gs://" rather than "/bigstore/". Ends with "/". Does not contain "*". See also BigLakeStorageMetadata on how it is used.
	StorageUri string `pulumi:"storageUri"`
	// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
	TableFormat string `pulumi:"tableFormat"`
}

type BigLakeConfigurationResponseOutput struct{ *pulumi.OutputState }

func (BigLakeConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigLakeConfigurationResponse)(nil)).Elem()
}

func (o BigLakeConfigurationResponseOutput) ToBigLakeConfigurationResponseOutput() BigLakeConfigurationResponseOutput {
	return o
}

func (o BigLakeConfigurationResponseOutput) ToBigLakeConfigurationResponseOutputWithContext(ctx context.Context) BigLakeConfigurationResponseOutput {
	return o
}

// [Required] Required and immutable. Credential reference for accessing external storage system. Normalized as project_id.location_id.connection_id.
func (o BigLakeConfigurationResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
func (o BigLakeConfigurationResponseOutput) FileFormat() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.FileFormat }).(pulumi.StringOutput)
}

// [Required] Required and immutable. Fully qualified location prefix of the external folder where data is stored. Normalized to standard format: "gs:////". Starts with "gs://" rather than "/bigstore/". Ends with "/". Does not contain "*". See also BigLakeStorageMetadata on how it is used.
func (o BigLakeConfigurationResponseOutput) StorageUri() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.StorageUri }).(pulumi.StringOutput)
}

// [Required] Required and immutable. Open source file format that the table data is stored in. Currently only PARQUET is supported.
func (o BigLakeConfigurationResponseOutput) TableFormat() pulumi.StringOutput {
	return o.ApplyT(func(v BigLakeConfigurationResponse) string { return v.TableFormat }).(pulumi.StringOutput)
}

type BigQueryModelTrainingResponse struct {
	// [Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.
	CurrentIteration int `pulumi:"currentIteration"`
	// [Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.
	ExpectedTotalIterations string `pulumi:"expectedTotalIterations"`
}

type BigQueryModelTrainingResponseOutput struct{ *pulumi.OutputState }

func (BigQueryModelTrainingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryModelTrainingResponse)(nil)).Elem()
}

func (o BigQueryModelTrainingResponseOutput) ToBigQueryModelTrainingResponseOutput() BigQueryModelTrainingResponseOutput {
	return o
}

func (o BigQueryModelTrainingResponseOutput) ToBigQueryModelTrainingResponseOutputWithContext(ctx context.Context) BigQueryModelTrainingResponseOutput {
	return o
}

// [Output-only, Beta] Index of current ML training iteration. Updated during create model query job to show job progress.
func (o BigQueryModelTrainingResponseOutput) CurrentIteration() pulumi.IntOutput {
	return o.ApplyT(func(v BigQueryModelTrainingResponse) int { return v.CurrentIteration }).(pulumi.IntOutput)
}

// [Output-only, Beta] Expected number of iterations for the create model query job specified as num_iterations in the input query. The actual total number of iterations may be less than this number due to early stop.
func (o BigQueryModelTrainingResponseOutput) ExpectedTotalIterations() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryModelTrainingResponse) string { return v.ExpectedTotalIterations }).(pulumi.StringOutput)
}

type BigtableColumn struct {
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding *string `pulumi:"encoding"`
	// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName *string `pulumi:"fieldName"`
	// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest *bool `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
	QualifierEncoded *string `pulumi:"qualifierEncoded"`
	QualifierString  *string `pulumi:"qualifierString"`
	// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type *string `pulumi:"type"`
}

// BigtableColumnInput is an input type that accepts BigtableColumnArgs and BigtableColumnOutput values.
// You can construct a concrete instance of `BigtableColumnInput` via:
//
//	BigtableColumnArgs{...}
type BigtableColumnInput interface {
	pulumi.Input

	ToBigtableColumnOutput() BigtableColumnOutput
	ToBigtableColumnOutputWithContext(context.Context) BigtableColumnOutput
}

type BigtableColumnArgs struct {
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName pulumi.StringPtrInput `pulumi:"fieldName"`
	// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest pulumi.BoolPtrInput `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
	QualifierEncoded pulumi.StringPtrInput `pulumi:"qualifierEncoded"`
	QualifierString  pulumi.StringPtrInput `pulumi:"qualifierString"`
	// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BigtableColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumn)(nil)).Elem()
}

func (i BigtableColumnArgs) ToBigtableColumnOutput() BigtableColumnOutput {
	return i.ToBigtableColumnOutputWithContext(context.Background())
}

func (i BigtableColumnArgs) ToBigtableColumnOutputWithContext(ctx context.Context) BigtableColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnOutput)
}

// BigtableColumnArrayInput is an input type that accepts BigtableColumnArray and BigtableColumnArrayOutput values.
// You can construct a concrete instance of `BigtableColumnArrayInput` via:
//
//	BigtableColumnArray{ BigtableColumnArgs{...} }
type BigtableColumnArrayInput interface {
	pulumi.Input

	ToBigtableColumnArrayOutput() BigtableColumnArrayOutput
	ToBigtableColumnArrayOutputWithContext(context.Context) BigtableColumnArrayOutput
}

type BigtableColumnArray []BigtableColumnInput

func (BigtableColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumn)(nil)).Elem()
}

func (i BigtableColumnArray) ToBigtableColumnArrayOutput() BigtableColumnArrayOutput {
	return i.ToBigtableColumnArrayOutputWithContext(context.Background())
}

func (i BigtableColumnArray) ToBigtableColumnArrayOutputWithContext(ctx context.Context) BigtableColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnArrayOutput)
}

type BigtableColumnOutput struct{ *pulumi.OutputState }

func (BigtableColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumn)(nil)).Elem()
}

func (o BigtableColumnOutput) ToBigtableColumnOutput() BigtableColumnOutput {
	return o
}

func (o BigtableColumnOutput) ToBigtableColumnOutputWithContext(ctx context.Context) BigtableColumnOutput {
	return o
}

// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
func (o BigtableColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
func (o BigtableColumnOutput) FieldName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.FieldName }).(pulumi.StringPtrOutput)
}

// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
func (o BigtableColumnOutput) OnlyReadLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *bool { return v.OnlyReadLatest }).(pulumi.BoolPtrOutput)
}

// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
func (o BigtableColumnOutput) QualifierEncoded() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.QualifierEncoded }).(pulumi.StringPtrOutput)
}

func (o BigtableColumnOutput) QualifierString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.QualifierString }).(pulumi.StringPtrOutput)
}

// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
func (o BigtableColumnOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumn) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BigtableColumnArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumn)(nil)).Elem()
}

func (o BigtableColumnArrayOutput) ToBigtableColumnArrayOutput() BigtableColumnArrayOutput {
	return o
}

func (o BigtableColumnArrayOutput) ToBigtableColumnArrayOutputWithContext(ctx context.Context) BigtableColumnArrayOutput {
	return o
}

func (o BigtableColumnArrayOutput) Index(i pulumi.IntInput) BigtableColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumn {
		return vs[0].([]BigtableColumn)[vs[1].(int)]
	}).(BigtableColumnOutput)
}

type BigtableColumnFamily struct {
	// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns []BigtableColumn `pulumi:"columns"`
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding *string `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId *string `pulumi:"familyId"`
	// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest *bool `pulumi:"onlyReadLatest"`
	// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type *string `pulumi:"type"`
}

// BigtableColumnFamilyInput is an input type that accepts BigtableColumnFamilyArgs and BigtableColumnFamilyOutput values.
// You can construct a concrete instance of `BigtableColumnFamilyInput` via:
//
//	BigtableColumnFamilyArgs{...}
type BigtableColumnFamilyInput interface {
	pulumi.Input

	ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput
	ToBigtableColumnFamilyOutputWithContext(context.Context) BigtableColumnFamilyOutput
}

type BigtableColumnFamilyArgs struct {
	// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns BigtableColumnArrayInput `pulumi:"columns"`
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId pulumi.StringPtrInput `pulumi:"familyId"`
	// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest pulumi.BoolPtrInput `pulumi:"onlyReadLatest"`
	// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BigtableColumnFamilyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamily)(nil)).Elem()
}

func (i BigtableColumnFamilyArgs) ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput {
	return i.ToBigtableColumnFamilyOutputWithContext(context.Background())
}

func (i BigtableColumnFamilyArgs) ToBigtableColumnFamilyOutputWithContext(ctx context.Context) BigtableColumnFamilyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnFamilyOutput)
}

// BigtableColumnFamilyArrayInput is an input type that accepts BigtableColumnFamilyArray and BigtableColumnFamilyArrayOutput values.
// You can construct a concrete instance of `BigtableColumnFamilyArrayInput` via:
//
//	BigtableColumnFamilyArray{ BigtableColumnFamilyArgs{...} }
type BigtableColumnFamilyArrayInput interface {
	pulumi.Input

	ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput
	ToBigtableColumnFamilyArrayOutputWithContext(context.Context) BigtableColumnFamilyArrayOutput
}

type BigtableColumnFamilyArray []BigtableColumnFamilyInput

func (BigtableColumnFamilyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamily)(nil)).Elem()
}

func (i BigtableColumnFamilyArray) ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput {
	return i.ToBigtableColumnFamilyArrayOutputWithContext(context.Background())
}

func (i BigtableColumnFamilyArray) ToBigtableColumnFamilyArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableColumnFamilyArrayOutput)
}

type BigtableColumnFamilyOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamily)(nil)).Elem()
}

func (o BigtableColumnFamilyOutput) ToBigtableColumnFamilyOutput() BigtableColumnFamilyOutput {
	return o
}

func (o BigtableColumnFamilyOutput) ToBigtableColumnFamilyOutputWithContext(ctx context.Context) BigtableColumnFamilyOutput {
	return o
}

// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
func (o BigtableColumnFamilyOutput) Columns() BigtableColumnArrayOutput {
	return o.ApplyT(func(v BigtableColumnFamily) []BigtableColumn { return v.Columns }).(BigtableColumnArrayOutput)
}

// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
func (o BigtableColumnFamilyOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Identifier of the column family.
func (o BigtableColumnFamilyOutput) FamilyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.FamilyId }).(pulumi.StringPtrOutput)
}

// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
func (o BigtableColumnFamilyOutput) OnlyReadLatest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *bool { return v.OnlyReadLatest }).(pulumi.BoolPtrOutput)
}

// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
func (o BigtableColumnFamilyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigtableColumnFamily) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BigtableColumnFamilyArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamily)(nil)).Elem()
}

func (o BigtableColumnFamilyArrayOutput) ToBigtableColumnFamilyArrayOutput() BigtableColumnFamilyArrayOutput {
	return o
}

func (o BigtableColumnFamilyArrayOutput) ToBigtableColumnFamilyArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyArrayOutput {
	return o
}

func (o BigtableColumnFamilyArrayOutput) Index(i pulumi.IntInput) BigtableColumnFamilyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumnFamily {
		return vs[0].([]BigtableColumnFamily)[vs[1].(int)]
	}).(BigtableColumnFamilyOutput)
}

type BigtableColumnFamilyResponse struct {
	// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
	Columns []BigtableColumnResponse `pulumi:"columns"`
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
	Encoding string `pulumi:"encoding"`
	// Identifier of the column family.
	FamilyId string `pulumi:"familyId"`
	// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
	OnlyReadLatest bool `pulumi:"onlyReadLatest"`
	// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
	Type string `pulumi:"type"`
}

type BigtableColumnFamilyResponseOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnFamilyResponse)(nil)).Elem()
}

func (o BigtableColumnFamilyResponseOutput) ToBigtableColumnFamilyResponseOutput() BigtableColumnFamilyResponseOutput {
	return o
}

func (o BigtableColumnFamilyResponseOutput) ToBigtableColumnFamilyResponseOutputWithContext(ctx context.Context) BigtableColumnFamilyResponseOutput {
	return o
}

// [Optional] Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.
func (o BigtableColumnFamilyResponseOutput) Columns() BigtableColumnResponseArrayOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) []BigtableColumnResponse { return v.Columns }).(BigtableColumnResponseArrayOutput)
}

// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.
func (o BigtableColumnFamilyResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Identifier of the column family.
func (o BigtableColumnFamilyResponseOutput) FamilyId() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) string { return v.FamilyId }).(pulumi.StringOutput)
}

// [Optional] If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.
func (o BigtableColumnFamilyResponseOutput) OnlyReadLatest() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) bool { return v.OnlyReadLatest }).(pulumi.BoolOutput)
}

// [Optional] The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.
func (o BigtableColumnFamilyResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnFamilyResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BigtableColumnFamilyResponseArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnFamilyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnFamilyResponse)(nil)).Elem()
}

func (o BigtableColumnFamilyResponseArrayOutput) ToBigtableColumnFamilyResponseArrayOutput() BigtableColumnFamilyResponseArrayOutput {
	return o
}

func (o BigtableColumnFamilyResponseArrayOutput) ToBigtableColumnFamilyResponseArrayOutputWithContext(ctx context.Context) BigtableColumnFamilyResponseArrayOutput {
	return o
}

func (o BigtableColumnFamilyResponseArrayOutput) Index(i pulumi.IntInput) BigtableColumnFamilyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumnFamilyResponse {
		return vs[0].([]BigtableColumnFamilyResponse)[vs[1].(int)]
	}).(BigtableColumnFamilyResponseOutput)
}

type BigtableColumnResponse struct {
	// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
	Encoding string `pulumi:"encoding"`
	// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
	FieldName string `pulumi:"fieldName"`
	// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
	OnlyReadLatest bool `pulumi:"onlyReadLatest"`
	// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
	QualifierEncoded string `pulumi:"qualifierEncoded"`
	QualifierString  string `pulumi:"qualifierString"`
	// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
	Type string `pulumi:"type"`
}

type BigtableColumnResponseOutput struct{ *pulumi.OutputState }

func (BigtableColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableColumnResponse)(nil)).Elem()
}

func (o BigtableColumnResponseOutput) ToBigtableColumnResponseOutput() BigtableColumnResponseOutput {
	return o
}

func (o BigtableColumnResponseOutput) ToBigtableColumnResponseOutputWithContext(ctx context.Context) BigtableColumnResponseOutput {
	return o
}

// [Optional] The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.
func (o BigtableColumnResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// [Optional] If the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as the column field name and is used as field name in queries.
func (o BigtableColumnResponseOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.FieldName }).(pulumi.StringOutput)
}

// [Optional] If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.
func (o BigtableColumnResponseOutput) OnlyReadLatest() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableColumnResponse) bool { return v.OnlyReadLatest }).(pulumi.BoolOutput)
}

// [Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match [a-zA-Z][a-zA-Z0-9_]*, a valid identifier must be provided as field_name.
func (o BigtableColumnResponseOutput) QualifierEncoded() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.QualifierEncoded }).(pulumi.StringOutput)
}

func (o BigtableColumnResponseOutput) QualifierString() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.QualifierString }).(pulumi.StringOutput)
}

// [Optional] The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive) - BYTES STRING INTEGER FLOAT BOOLEAN Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.
func (o BigtableColumnResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v BigtableColumnResponse) string { return v.Type }).(pulumi.StringOutput)
}

type BigtableColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (BigtableColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigtableColumnResponse)(nil)).Elem()
}

func (o BigtableColumnResponseArrayOutput) ToBigtableColumnResponseArrayOutput() BigtableColumnResponseArrayOutput {
	return o
}

func (o BigtableColumnResponseArrayOutput) ToBigtableColumnResponseArrayOutputWithContext(ctx context.Context) BigtableColumnResponseArrayOutput {
	return o
}

func (o BigtableColumnResponseArrayOutput) Index(i pulumi.IntInput) BigtableColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigtableColumnResponse {
		return vs[0].([]BigtableColumnResponse)[vs[1].(int)]
	}).(BigtableColumnResponseOutput)
}

type BigtableOptions struct {
	// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies []BigtableColumnFamily `pulumi:"columnFamilies"`
	// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies *bool `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString *bool `pulumi:"readRowkeyAsString"`
}

// BigtableOptionsInput is an input type that accepts BigtableOptionsArgs and BigtableOptionsOutput values.
// You can construct a concrete instance of `BigtableOptionsInput` via:
//
//	BigtableOptionsArgs{...}
type BigtableOptionsInput interface {
	pulumi.Input

	ToBigtableOptionsOutput() BigtableOptionsOutput
	ToBigtableOptionsOutputWithContext(context.Context) BigtableOptionsOutput
}

type BigtableOptionsArgs struct {
	// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies BigtableColumnFamilyArrayInput `pulumi:"columnFamilies"`
	// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies pulumi.BoolPtrInput `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString pulumi.BoolPtrInput `pulumi:"readRowkeyAsString"`
}

func (BigtableOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptions)(nil)).Elem()
}

func (i BigtableOptionsArgs) ToBigtableOptionsOutput() BigtableOptionsOutput {
	return i.ToBigtableOptionsOutputWithContext(context.Background())
}

func (i BigtableOptionsArgs) ToBigtableOptionsOutputWithContext(ctx context.Context) BigtableOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsOutput)
}

func (i BigtableOptionsArgs) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return i.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (i BigtableOptionsArgs) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsOutput).ToBigtableOptionsPtrOutputWithContext(ctx)
}

// BigtableOptionsPtrInput is an input type that accepts BigtableOptionsArgs, BigtableOptionsPtr and BigtableOptionsPtrOutput values.
// You can construct a concrete instance of `BigtableOptionsPtrInput` via:
//
//	        BigtableOptionsArgs{...}
//
//	or:
//
//	        nil
type BigtableOptionsPtrInput interface {
	pulumi.Input

	ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput
	ToBigtableOptionsPtrOutputWithContext(context.Context) BigtableOptionsPtrOutput
}

type bigtableOptionsPtrType BigtableOptionsArgs

func BigtableOptionsPtr(v *BigtableOptionsArgs) BigtableOptionsPtrInput {
	return (*bigtableOptionsPtrType)(v)
}

func (*bigtableOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableOptions)(nil)).Elem()
}

func (i *bigtableOptionsPtrType) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return i.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (i *bigtableOptionsPtrType) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigtableOptionsPtrOutput)
}

type BigtableOptionsOutput struct{ *pulumi.OutputState }

func (BigtableOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptions)(nil)).Elem()
}

func (o BigtableOptionsOutput) ToBigtableOptionsOutput() BigtableOptionsOutput {
	return o
}

func (o BigtableOptionsOutput) ToBigtableOptionsOutputWithContext(ctx context.Context) BigtableOptionsOutput {
	return o
}

func (o BigtableOptionsOutput) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return o.ToBigtableOptionsPtrOutputWithContext(context.Background())
}

func (o BigtableOptionsOutput) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigtableOptions) *BigtableOptions {
		return &v
	}).(BigtableOptionsPtrOutput)
}

// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsOutput) ColumnFamilies() BigtableColumnFamilyArrayOutput {
	return o.ApplyT(func(v BigtableOptions) []BigtableColumnFamily { return v.ColumnFamilies }).(BigtableColumnFamilyArrayOutput)
}

// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *bool { return v.IgnoreUnspecifiedColumnFamilies }).(pulumi.BoolPtrOutput)
}

// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsOutput) ReadRowkeyAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BigtableOptions) *bool { return v.ReadRowkeyAsString }).(pulumi.BoolPtrOutput)
}

type BigtableOptionsPtrOutput struct{ *pulumi.OutputState }

func (BigtableOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigtableOptions)(nil)).Elem()
}

func (o BigtableOptionsPtrOutput) ToBigtableOptionsPtrOutput() BigtableOptionsPtrOutput {
	return o
}

func (o BigtableOptionsPtrOutput) ToBigtableOptionsPtrOutputWithContext(ctx context.Context) BigtableOptionsPtrOutput {
	return o
}

func (o BigtableOptionsPtrOutput) Elem() BigtableOptionsOutput {
	return o.ApplyT(func(v *BigtableOptions) BigtableOptions {
		if v != nil {
			return *v
		}
		var ret BigtableOptions
		return ret
	}).(BigtableOptionsOutput)
}

// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsPtrOutput) ColumnFamilies() BigtableColumnFamilyArrayOutput {
	return o.ApplyT(func(v *BigtableOptions) []BigtableColumnFamily {
		if v == nil {
			return nil
		}
		return v.ColumnFamilies
	}).(BigtableColumnFamilyArrayOutput)
}

// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsPtrOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableOptions) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnspecifiedColumnFamilies
	}).(pulumi.BoolPtrOutput)
}

// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsPtrOutput) ReadRowkeyAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BigtableOptions) *bool {
		if v == nil {
			return nil
		}
		return v.ReadRowkeyAsString
	}).(pulumi.BoolPtrOutput)
}

type BigtableOptionsResponse struct {
	// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
	ColumnFamilies []BigtableColumnFamilyResponse `pulumi:"columnFamilies"`
	// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
	IgnoreUnspecifiedColumnFamilies bool `pulumi:"ignoreUnspecifiedColumnFamilies"`
	// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
	ReadRowkeyAsString bool `pulumi:"readRowkeyAsString"`
}

type BigtableOptionsResponseOutput struct{ *pulumi.OutputState }

func (BigtableOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigtableOptionsResponse)(nil)).Elem()
}

func (o BigtableOptionsResponseOutput) ToBigtableOptionsResponseOutput() BigtableOptionsResponseOutput {
	return o
}

func (o BigtableOptionsResponseOutput) ToBigtableOptionsResponseOutputWithContext(ctx context.Context) BigtableOptionsResponseOutput {
	return o
}

// [Optional] List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.
func (o BigtableOptionsResponseOutput) ColumnFamilies() BigtableColumnFamilyResponseArrayOutput {
	return o.ApplyT(func(v BigtableOptionsResponse) []BigtableColumnFamilyResponse { return v.ColumnFamilies }).(BigtableColumnFamilyResponseArrayOutput)
}

// [Optional] If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.
func (o BigtableOptionsResponseOutput) IgnoreUnspecifiedColumnFamilies() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableOptionsResponse) bool { return v.IgnoreUnspecifiedColumnFamilies }).(pulumi.BoolOutput)
}

// [Optional] If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.
func (o BigtableOptionsResponseOutput) ReadRowkeyAsString() pulumi.BoolOutput {
	return o.ApplyT(func(v BigtableOptionsResponse) bool { return v.ReadRowkeyAsString }).(pulumi.BoolOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

type BqmlIterationResult struct {
	// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
	DurationMs *string `pulumi:"durationMs"`
	// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
	EvalLoss *float64 `pulumi:"evalLoss"`
	// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
	Index *int `pulumi:"index"`
	// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
	LearnRate *float64 `pulumi:"learnRate"`
	// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
	TrainingLoss *float64 `pulumi:"trainingLoss"`
}

// BqmlIterationResultInput is an input type that accepts BqmlIterationResultArgs and BqmlIterationResultOutput values.
// You can construct a concrete instance of `BqmlIterationResultInput` via:
//
//	BqmlIterationResultArgs{...}
type BqmlIterationResultInput interface {
	pulumi.Input

	ToBqmlIterationResultOutput() BqmlIterationResultOutput
	ToBqmlIterationResultOutputWithContext(context.Context) BqmlIterationResultOutput
}

type BqmlIterationResultArgs struct {
	// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
	DurationMs pulumi.StringPtrInput `pulumi:"durationMs"`
	// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
	EvalLoss pulumi.Float64PtrInput `pulumi:"evalLoss"`
	// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
	Index pulumi.IntPtrInput `pulumi:"index"`
	// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
	LearnRate pulumi.Float64PtrInput `pulumi:"learnRate"`
	// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
	TrainingLoss pulumi.Float64PtrInput `pulumi:"trainingLoss"`
}

func (BqmlIterationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResult)(nil)).Elem()
}

func (i BqmlIterationResultArgs) ToBqmlIterationResultOutput() BqmlIterationResultOutput {
	return i.ToBqmlIterationResultOutputWithContext(context.Background())
}

func (i BqmlIterationResultArgs) ToBqmlIterationResultOutputWithContext(ctx context.Context) BqmlIterationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlIterationResultOutput)
}

// BqmlIterationResultArrayInput is an input type that accepts BqmlIterationResultArray and BqmlIterationResultArrayOutput values.
// You can construct a concrete instance of `BqmlIterationResultArrayInput` via:
//
//	BqmlIterationResultArray{ BqmlIterationResultArgs{...} }
type BqmlIterationResultArrayInput interface {
	pulumi.Input

	ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput
	ToBqmlIterationResultArrayOutputWithContext(context.Context) BqmlIterationResultArrayOutput
}

type BqmlIterationResultArray []BqmlIterationResultInput

func (BqmlIterationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResult)(nil)).Elem()
}

func (i BqmlIterationResultArray) ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput {
	return i.ToBqmlIterationResultArrayOutputWithContext(context.Background())
}

func (i BqmlIterationResultArray) ToBqmlIterationResultArrayOutputWithContext(ctx context.Context) BqmlIterationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlIterationResultArrayOutput)
}

type BqmlIterationResultOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResult)(nil)).Elem()
}

func (o BqmlIterationResultOutput) ToBqmlIterationResultOutput() BqmlIterationResultOutput {
	return o
}

func (o BqmlIterationResultOutput) ToBqmlIterationResultOutputWithContext(ctx context.Context) BqmlIterationResultOutput {
	return o
}

// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
func (o BqmlIterationResultOutput) DurationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *string { return v.DurationMs }).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
func (o BqmlIterationResultOutput) EvalLoss() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.EvalLoss }).(pulumi.Float64PtrOutput)
}

// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
func (o BqmlIterationResultOutput) Index() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *int { return v.Index }).(pulumi.IntPtrOutput)
}

// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
func (o BqmlIterationResultOutput) LearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.LearnRate }).(pulumi.Float64PtrOutput)
}

// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
func (o BqmlIterationResultOutput) TrainingLoss() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlIterationResult) *float64 { return v.TrainingLoss }).(pulumi.Float64PtrOutput)
}

type BqmlIterationResultArrayOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResult)(nil)).Elem()
}

func (o BqmlIterationResultArrayOutput) ToBqmlIterationResultArrayOutput() BqmlIterationResultArrayOutput {
	return o
}

func (o BqmlIterationResultArrayOutput) ToBqmlIterationResultArrayOutputWithContext(ctx context.Context) BqmlIterationResultArrayOutput {
	return o
}

func (o BqmlIterationResultArrayOutput) Index(i pulumi.IntInput) BqmlIterationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlIterationResult {
		return vs[0].([]BqmlIterationResult)[vs[1].(int)]
	}).(BqmlIterationResultOutput)
}

type BqmlIterationResultResponse struct {
	// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
	DurationMs string `pulumi:"durationMs"`
	// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
	EvalLoss float64 `pulumi:"evalLoss"`
	// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
	Index int `pulumi:"index"`
	// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
	LearnRate float64 `pulumi:"learnRate"`
	// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
	TrainingLoss float64 `pulumi:"trainingLoss"`
}

type BqmlIterationResultResponseOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlIterationResultResponse)(nil)).Elem()
}

func (o BqmlIterationResultResponseOutput) ToBqmlIterationResultResponseOutput() BqmlIterationResultResponseOutput {
	return o
}

func (o BqmlIterationResultResponseOutput) ToBqmlIterationResultResponseOutputWithContext(ctx context.Context) BqmlIterationResultResponseOutput {
	return o
}

// [Output-only, Beta] Time taken to run the training iteration in milliseconds.
func (o BqmlIterationResultResponseOutput) DurationMs() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlIterationResultResponse) string { return v.DurationMs }).(pulumi.StringOutput)
}

// [Output-only, Beta] Eval loss computed on the eval data at the end of the iteration. The eval loss is used for early stopping to avoid overfitting. No eval loss if eval_split_method option is specified as no_split or auto_split with input data size less than 500 rows.
func (o BqmlIterationResultResponseOutput) EvalLoss() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlIterationResultResponse) float64 { return v.EvalLoss }).(pulumi.Float64Output)
}

// [Output-only, Beta] Index of the ML training iteration, starting from zero for each training run.
func (o BqmlIterationResultResponseOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v BqmlIterationResultResponse) int { return v.Index }).(pulumi.IntOutput)
}

// [Output-only, Beta] Learning rate used for this iteration, it varies for different training iterations if learn_rate_strategy option is not constant.
func (o BqmlIterationResultResponseOutput) LearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlIterationResultResponse) float64 { return v.LearnRate }).(pulumi.Float64Output)
}

// [Output-only, Beta] Training loss computed on the training data at the end of the iteration. The training loss function is defined by model type.
func (o BqmlIterationResultResponseOutput) TrainingLoss() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlIterationResultResponse) float64 { return v.TrainingLoss }).(pulumi.Float64Output)
}

type BqmlIterationResultResponseArrayOutput struct{ *pulumi.OutputState }

func (BqmlIterationResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlIterationResultResponse)(nil)).Elem()
}

func (o BqmlIterationResultResponseArrayOutput) ToBqmlIterationResultResponseArrayOutput() BqmlIterationResultResponseArrayOutput {
	return o
}

func (o BqmlIterationResultResponseArrayOutput) ToBqmlIterationResultResponseArrayOutputWithContext(ctx context.Context) BqmlIterationResultResponseArrayOutput {
	return o
}

func (o BqmlIterationResultResponseArrayOutput) Index(i pulumi.IntInput) BqmlIterationResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlIterationResultResponse {
		return vs[0].([]BqmlIterationResultResponse)[vs[1].(int)]
	}).(BqmlIterationResultResponseOutput)
}

type BqmlTrainingRun struct {
	// [Output-only, Beta] List of each iteration results.
	IterationResults []BqmlIterationResult `pulumi:"iterationResults"`
	// [Output-only, Beta] Training run start time in milliseconds since the epoch.
	StartTime *string `pulumi:"startTime"`
	// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
	State *string `pulumi:"state"`
	// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
	TrainingOptions *BqmlTrainingRunTrainingOptions `pulumi:"trainingOptions"`
}

// BqmlTrainingRunInput is an input type that accepts BqmlTrainingRunArgs and BqmlTrainingRunOutput values.
// You can construct a concrete instance of `BqmlTrainingRunInput` via:
//
//	BqmlTrainingRunArgs{...}
type BqmlTrainingRunInput interface {
	pulumi.Input

	ToBqmlTrainingRunOutput() BqmlTrainingRunOutput
	ToBqmlTrainingRunOutputWithContext(context.Context) BqmlTrainingRunOutput
}

type BqmlTrainingRunArgs struct {
	// [Output-only, Beta] List of each iteration results.
	IterationResults BqmlIterationResultArrayInput `pulumi:"iterationResults"`
	// [Output-only, Beta] Training run start time in milliseconds since the epoch.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
	State pulumi.StringPtrInput `pulumi:"state"`
	// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
	TrainingOptions BqmlTrainingRunTrainingOptionsPtrInput `pulumi:"trainingOptions"`
}

func (BqmlTrainingRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRun)(nil)).Elem()
}

func (i BqmlTrainingRunArgs) ToBqmlTrainingRunOutput() BqmlTrainingRunOutput {
	return i.ToBqmlTrainingRunOutputWithContext(context.Background())
}

func (i BqmlTrainingRunArgs) ToBqmlTrainingRunOutputWithContext(ctx context.Context) BqmlTrainingRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunOutput)
}

// BqmlTrainingRunArrayInput is an input type that accepts BqmlTrainingRunArray and BqmlTrainingRunArrayOutput values.
// You can construct a concrete instance of `BqmlTrainingRunArrayInput` via:
//
//	BqmlTrainingRunArray{ BqmlTrainingRunArgs{...} }
type BqmlTrainingRunArrayInput interface {
	pulumi.Input

	ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput
	ToBqmlTrainingRunArrayOutputWithContext(context.Context) BqmlTrainingRunArrayOutput
}

type BqmlTrainingRunArray []BqmlTrainingRunInput

func (BqmlTrainingRunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRun)(nil)).Elem()
}

func (i BqmlTrainingRunArray) ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput {
	return i.ToBqmlTrainingRunArrayOutputWithContext(context.Background())
}

func (i BqmlTrainingRunArray) ToBqmlTrainingRunArrayOutputWithContext(ctx context.Context) BqmlTrainingRunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunArrayOutput)
}

type BqmlTrainingRunOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRun)(nil)).Elem()
}

func (o BqmlTrainingRunOutput) ToBqmlTrainingRunOutput() BqmlTrainingRunOutput {
	return o
}

func (o BqmlTrainingRunOutput) ToBqmlTrainingRunOutputWithContext(ctx context.Context) BqmlTrainingRunOutput {
	return o
}

// [Output-only, Beta] List of each iteration results.
func (o BqmlTrainingRunOutput) IterationResults() BqmlIterationResultArrayOutput {
	return o.ApplyT(func(v BqmlTrainingRun) []BqmlIterationResult { return v.IterationResults }).(BqmlIterationResultArrayOutput)
}

// [Output-only, Beta] Training run start time in milliseconds since the epoch.
func (o BqmlTrainingRunOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
func (o BqmlTrainingRunOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *string { return v.State }).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
func (o BqmlTrainingRunOutput) TrainingOptions() BqmlTrainingRunTrainingOptionsPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRun) *BqmlTrainingRunTrainingOptions { return v.TrainingOptions }).(BqmlTrainingRunTrainingOptionsPtrOutput)
}

type BqmlTrainingRunArrayOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRun)(nil)).Elem()
}

func (o BqmlTrainingRunArrayOutput) ToBqmlTrainingRunArrayOutput() BqmlTrainingRunArrayOutput {
	return o
}

func (o BqmlTrainingRunArrayOutput) ToBqmlTrainingRunArrayOutputWithContext(ctx context.Context) BqmlTrainingRunArrayOutput {
	return o
}

func (o BqmlTrainingRunArrayOutput) Index(i pulumi.IntInput) BqmlTrainingRunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlTrainingRun {
		return vs[0].([]BqmlTrainingRun)[vs[1].(int)]
	}).(BqmlTrainingRunOutput)
}

type BqmlTrainingRunResponse struct {
	// [Output-only, Beta] List of each iteration results.
	IterationResults []BqmlIterationResultResponse `pulumi:"iterationResults"`
	// [Output-only, Beta] Training run start time in milliseconds since the epoch.
	StartTime string `pulumi:"startTime"`
	// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
	State string `pulumi:"state"`
	// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
	TrainingOptions BqmlTrainingRunTrainingOptionsResponse `pulumi:"trainingOptions"`
}

type BqmlTrainingRunResponseOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunResponse)(nil)).Elem()
}

func (o BqmlTrainingRunResponseOutput) ToBqmlTrainingRunResponseOutput() BqmlTrainingRunResponseOutput {
	return o
}

func (o BqmlTrainingRunResponseOutput) ToBqmlTrainingRunResponseOutputWithContext(ctx context.Context) BqmlTrainingRunResponseOutput {
	return o
}

// [Output-only, Beta] List of each iteration results.
func (o BqmlTrainingRunResponseOutput) IterationResults() BqmlIterationResultResponseArrayOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) []BqmlIterationResultResponse { return v.IterationResults }).(BqmlIterationResultResponseArrayOutput)
}

// [Output-only, Beta] Training run start time in milliseconds since the epoch.
func (o BqmlTrainingRunResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
func (o BqmlTrainingRunResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) string { return v.State }).(pulumi.StringOutput)
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
func (o BqmlTrainingRunResponseOutput) TrainingOptions() BqmlTrainingRunTrainingOptionsResponseOutput {
	return o.ApplyT(func(v BqmlTrainingRunResponse) BqmlTrainingRunTrainingOptionsResponse { return v.TrainingOptions }).(BqmlTrainingRunTrainingOptionsResponseOutput)
}

type BqmlTrainingRunResponseArrayOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BqmlTrainingRunResponse)(nil)).Elem()
}

func (o BqmlTrainingRunResponseArrayOutput) ToBqmlTrainingRunResponseArrayOutput() BqmlTrainingRunResponseArrayOutput {
	return o
}

func (o BqmlTrainingRunResponseArrayOutput) ToBqmlTrainingRunResponseArrayOutputWithContext(ctx context.Context) BqmlTrainingRunResponseArrayOutput {
	return o
}

func (o BqmlTrainingRunResponseArrayOutput) Index(i pulumi.IntInput) BqmlTrainingRunResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BqmlTrainingRunResponse {
		return vs[0].([]BqmlTrainingRunResponse)[vs[1].(int)]
	}).(BqmlTrainingRunResponseOutput)
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
type BqmlTrainingRunTrainingOptions struct {
	EarlyStop               *bool    `pulumi:"earlyStop"`
	L1Reg                   *float64 `pulumi:"l1Reg"`
	L2Reg                   *float64 `pulumi:"l2Reg"`
	LearnRate               *float64 `pulumi:"learnRate"`
	LearnRateStrategy       *string  `pulumi:"learnRateStrategy"`
	LineSearchInitLearnRate *float64 `pulumi:"lineSearchInitLearnRate"`
	MaxIteration            *string  `pulumi:"maxIteration"`
	MinRelProgress          *float64 `pulumi:"minRelProgress"`
	WarmStart               *bool    `pulumi:"warmStart"`
}

// BqmlTrainingRunTrainingOptionsInput is an input type that accepts BqmlTrainingRunTrainingOptionsArgs and BqmlTrainingRunTrainingOptionsOutput values.
// You can construct a concrete instance of `BqmlTrainingRunTrainingOptionsInput` via:
//
//	BqmlTrainingRunTrainingOptionsArgs{...}
type BqmlTrainingRunTrainingOptionsInput interface {
	pulumi.Input

	ToBqmlTrainingRunTrainingOptionsOutput() BqmlTrainingRunTrainingOptionsOutput
	ToBqmlTrainingRunTrainingOptionsOutputWithContext(context.Context) BqmlTrainingRunTrainingOptionsOutput
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
type BqmlTrainingRunTrainingOptionsArgs struct {
	EarlyStop               pulumi.BoolPtrInput    `pulumi:"earlyStop"`
	L1Reg                   pulumi.Float64PtrInput `pulumi:"l1Reg"`
	L2Reg                   pulumi.Float64PtrInput `pulumi:"l2Reg"`
	LearnRate               pulumi.Float64PtrInput `pulumi:"learnRate"`
	LearnRateStrategy       pulumi.StringPtrInput  `pulumi:"learnRateStrategy"`
	LineSearchInitLearnRate pulumi.Float64PtrInput `pulumi:"lineSearchInitLearnRate"`
	MaxIteration            pulumi.StringPtrInput  `pulumi:"maxIteration"`
	MinRelProgress          pulumi.Float64PtrInput `pulumi:"minRelProgress"`
	WarmStart               pulumi.BoolPtrInput    `pulumi:"warmStart"`
}

func (BqmlTrainingRunTrainingOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsOutput() BqmlTrainingRunTrainingOptionsOutput {
	return i.ToBqmlTrainingRunTrainingOptionsOutputWithContext(context.Background())
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunTrainingOptionsOutput)
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return i.ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Background())
}

func (i BqmlTrainingRunTrainingOptionsArgs) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunTrainingOptionsOutput).ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx)
}

// BqmlTrainingRunTrainingOptionsPtrInput is an input type that accepts BqmlTrainingRunTrainingOptionsArgs, BqmlTrainingRunTrainingOptionsPtr and BqmlTrainingRunTrainingOptionsPtrOutput values.
// You can construct a concrete instance of `BqmlTrainingRunTrainingOptionsPtrInput` via:
//
//	        BqmlTrainingRunTrainingOptionsArgs{...}
//
//	or:
//
//	        nil
type BqmlTrainingRunTrainingOptionsPtrInput interface {
	pulumi.Input

	ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput
	ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Context) BqmlTrainingRunTrainingOptionsPtrOutput
}

type bqmlTrainingRunTrainingOptionsPtrType BqmlTrainingRunTrainingOptionsArgs

func BqmlTrainingRunTrainingOptionsPtr(v *BqmlTrainingRunTrainingOptionsArgs) BqmlTrainingRunTrainingOptionsPtrInput {
	return (*bqmlTrainingRunTrainingOptionsPtrType)(v)
}

func (*bqmlTrainingRunTrainingOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (i *bqmlTrainingRunTrainingOptionsPtrType) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return i.ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Background())
}

func (i *bqmlTrainingRunTrainingOptionsPtrType) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BqmlTrainingRunTrainingOptionsPtrOutput)
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
type BqmlTrainingRunTrainingOptionsOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunTrainingOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsOutput() BqmlTrainingRunTrainingOptionsOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return o.ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(context.Background())
}

func (o BqmlTrainingRunTrainingOptionsOutput) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BqmlTrainingRunTrainingOptions) *BqmlTrainingRunTrainingOptions {
		return &v
	}).(BqmlTrainingRunTrainingOptionsPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) EarlyStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *bool { return v.EarlyStop }).(pulumi.BoolPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) L1Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.L1Reg }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) L2Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.L2Reg }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) LearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.LearnRate }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) LearnRateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *string { return v.LearnRateStrategy }).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) LineSearchInitLearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.LineSearchInitLearnRate }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) MaxIteration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *string { return v.MaxIteration }).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) MinRelProgress() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *float64 { return v.MinRelProgress }).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsOutput) WarmStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptions) *bool { return v.WarmStart }).(pulumi.BoolPtrOutput)
}

type BqmlTrainingRunTrainingOptionsPtrOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunTrainingOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BqmlTrainingRunTrainingOptions)(nil)).Elem()
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) ToBqmlTrainingRunTrainingOptionsPtrOutput() BqmlTrainingRunTrainingOptionsPtrOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) ToBqmlTrainingRunTrainingOptionsPtrOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsPtrOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) Elem() BqmlTrainingRunTrainingOptionsOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) BqmlTrainingRunTrainingOptions {
		if v != nil {
			return *v
		}
		var ret BqmlTrainingRunTrainingOptions
		return ret
	}).(BqmlTrainingRunTrainingOptionsOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) EarlyStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EarlyStop
	}).(pulumi.BoolPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) L1Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.L1Reg
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) L2Reg() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.L2Reg
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) LearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.LearnRate
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) LearnRateStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *string {
		if v == nil {
			return nil
		}
		return v.LearnRateStrategy
	}).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) LineSearchInitLearnRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.LineSearchInitLearnRate
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) MaxIteration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *string {
		if v == nil {
			return nil
		}
		return v.MaxIteration
	}).(pulumi.StringPtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) MinRelProgress() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *float64 {
		if v == nil {
			return nil
		}
		return v.MinRelProgress
	}).(pulumi.Float64PtrOutput)
}

func (o BqmlTrainingRunTrainingOptionsPtrOutput) WarmStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BqmlTrainingRunTrainingOptions) *bool {
		if v == nil {
			return nil
		}
		return v.WarmStart
	}).(pulumi.BoolPtrOutput)
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
type BqmlTrainingRunTrainingOptionsResponse struct {
	EarlyStop               bool    `pulumi:"earlyStop"`
	L1Reg                   float64 `pulumi:"l1Reg"`
	L2Reg                   float64 `pulumi:"l2Reg"`
	LearnRate               float64 `pulumi:"learnRate"`
	LearnRateStrategy       string  `pulumi:"learnRateStrategy"`
	LineSearchInitLearnRate float64 `pulumi:"lineSearchInitLearnRate"`
	MaxIteration            string  `pulumi:"maxIteration"`
	MinRelProgress          float64 `pulumi:"minRelProgress"`
	WarmStart               bool    `pulumi:"warmStart"`
}

// [Output-only, Beta] Training options used by this training run. These options are mutable for subsequent training runs. Default values are explicitly stored for options not specified in the input query of the first training run. For subsequent training runs, any option not explicitly specified in the input query will be copied from the previous training run.
type BqmlTrainingRunTrainingOptionsResponseOutput struct{ *pulumi.OutputState }

func (BqmlTrainingRunTrainingOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BqmlTrainingRunTrainingOptionsResponse)(nil)).Elem()
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) ToBqmlTrainingRunTrainingOptionsResponseOutput() BqmlTrainingRunTrainingOptionsResponseOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) ToBqmlTrainingRunTrainingOptionsResponseOutputWithContext(ctx context.Context) BqmlTrainingRunTrainingOptionsResponseOutput {
	return o
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) EarlyStop() pulumi.BoolOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) bool { return v.EarlyStop }).(pulumi.BoolOutput)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) L1Reg() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.L1Reg }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) L2Reg() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.L2Reg }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) LearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.LearnRate }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) LearnRateStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) string { return v.LearnRateStrategy }).(pulumi.StringOutput)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) LineSearchInitLearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.LineSearchInitLearnRate }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) MaxIteration() pulumi.StringOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) string { return v.MaxIteration }).(pulumi.StringOutput)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) MinRelProgress() pulumi.Float64Output {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) float64 { return v.MinRelProgress }).(pulumi.Float64Output)
}

func (o BqmlTrainingRunTrainingOptionsResponseOutput) WarmStart() pulumi.BoolOutput {
	return o.ApplyT(func(v BqmlTrainingRunTrainingOptionsResponse) bool { return v.WarmStart }).(pulumi.BoolOutput)
}

type CloneDefinitionResponse struct {
	// [Required] Reference describing the ID of the table that was cloned.
	BaseTableReference TableReferenceResponse `pulumi:"baseTableReference"`
	// [Required] The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format.
	CloneTime string `pulumi:"cloneTime"`
}

type CloneDefinitionResponseOutput struct{ *pulumi.OutputState }

func (CloneDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloneDefinitionResponse)(nil)).Elem()
}

func (o CloneDefinitionResponseOutput) ToCloneDefinitionResponseOutput() CloneDefinitionResponseOutput {
	return o
}

func (o CloneDefinitionResponseOutput) ToCloneDefinitionResponseOutputWithContext(ctx context.Context) CloneDefinitionResponseOutput {
	return o
}

// [Required] Reference describing the ID of the table that was cloned.
func (o CloneDefinitionResponseOutput) BaseTableReference() TableReferenceResponseOutput {
	return o.ApplyT(func(v CloneDefinitionResponse) TableReferenceResponse { return v.BaseTableReference }).(TableReferenceResponseOutput)
}

// [Required] The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format.
func (o CloneDefinitionResponseOutput) CloneTime() pulumi.StringOutput {
	return o.ApplyT(func(v CloneDefinitionResponse) string { return v.CloneTime }).(pulumi.StringOutput)
}

type Clustering struct {
	// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
	Fields []string `pulumi:"fields"`
}

// ClusteringInput is an input type that accepts ClusteringArgs and ClusteringOutput values.
// You can construct a concrete instance of `ClusteringInput` via:
//
//	ClusteringArgs{...}
type ClusteringInput interface {
	pulumi.Input

	ToClusteringOutput() ClusteringOutput
	ToClusteringOutputWithContext(context.Context) ClusteringOutput
}

type ClusteringArgs struct {
	// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
	Fields pulumi.StringArrayInput `pulumi:"fields"`
}

func (ClusteringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Clustering)(nil)).Elem()
}

func (i ClusteringArgs) ToClusteringOutput() ClusteringOutput {
	return i.ToClusteringOutputWithContext(context.Background())
}

func (i ClusteringArgs) ToClusteringOutputWithContext(ctx context.Context) ClusteringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringOutput)
}

func (i ClusteringArgs) ToClusteringPtrOutput() ClusteringPtrOutput {
	return i.ToClusteringPtrOutputWithContext(context.Background())
}

func (i ClusteringArgs) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringOutput).ToClusteringPtrOutputWithContext(ctx)
}

// ClusteringPtrInput is an input type that accepts ClusteringArgs, ClusteringPtr and ClusteringPtrOutput values.
// You can construct a concrete instance of `ClusteringPtrInput` via:
//
//	        ClusteringArgs{...}
//
//	or:
//
//	        nil
type ClusteringPtrInput interface {
	pulumi.Input

	ToClusteringPtrOutput() ClusteringPtrOutput
	ToClusteringPtrOutputWithContext(context.Context) ClusteringPtrOutput
}

type clusteringPtrType ClusteringArgs

func ClusteringPtr(v *ClusteringArgs) ClusteringPtrInput {
	return (*clusteringPtrType)(v)
}

func (*clusteringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustering)(nil)).Elem()
}

func (i *clusteringPtrType) ToClusteringPtrOutput() ClusteringPtrOutput {
	return i.ToClusteringPtrOutputWithContext(context.Background())
}

func (i *clusteringPtrType) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusteringPtrOutput)
}

type ClusteringOutput struct{ *pulumi.OutputState }

func (ClusteringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Clustering)(nil)).Elem()
}

func (o ClusteringOutput) ToClusteringOutput() ClusteringOutput {
	return o
}

func (o ClusteringOutput) ToClusteringOutputWithContext(ctx context.Context) ClusteringOutput {
	return o
}

func (o ClusteringOutput) ToClusteringPtrOutput() ClusteringPtrOutput {
	return o.ToClusteringPtrOutputWithContext(context.Background())
}

func (o ClusteringOutput) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Clustering) *Clustering {
		return &v
	}).(ClusteringPtrOutput)
}

// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
func (o ClusteringOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Clustering) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

type ClusteringPtrOutput struct{ *pulumi.OutputState }

func (ClusteringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clustering)(nil)).Elem()
}

func (o ClusteringPtrOutput) ToClusteringPtrOutput() ClusteringPtrOutput {
	return o
}

func (o ClusteringPtrOutput) ToClusteringPtrOutputWithContext(ctx context.Context) ClusteringPtrOutput {
	return o
}

func (o ClusteringPtrOutput) Elem() ClusteringOutput {
	return o.ApplyT(func(v *Clustering) Clustering {
		if v != nil {
			return *v
		}
		var ret Clustering
		return ret
	}).(ClusteringOutput)
}

// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
func (o ClusteringPtrOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Clustering) []string {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(pulumi.StringArrayOutput)
}

type ClusteringResponse struct {
	// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
	Fields []string `pulumi:"fields"`
}

type ClusteringResponseOutput struct{ *pulumi.OutputState }

func (ClusteringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusteringResponse)(nil)).Elem()
}

func (o ClusteringResponseOutput) ToClusteringResponseOutput() ClusteringResponseOutput {
	return o
}

func (o ClusteringResponseOutput) ToClusteringResponseOutputWithContext(ctx context.Context) ClusteringResponseOutput {
	return o
}

// [Repeated] One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. When you cluster a table using multiple columns, the order of columns you specify is important. The order of the specified columns determines the sort order of the data.
func (o ClusteringResponseOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusteringResponse) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

type ConnectionProperty struct {
	// [Required] Name of the connection property to set.
	Key *string `pulumi:"key"`
	// [Required] Value of the connection property.
	Value *string `pulumi:"value"`
}

// ConnectionPropertyInput is an input type that accepts ConnectionPropertyArgs and ConnectionPropertyOutput values.
// You can construct a concrete instance of `ConnectionPropertyInput` via:
//
//	ConnectionPropertyArgs{...}
type ConnectionPropertyInput interface {
	pulumi.Input

	ToConnectionPropertyOutput() ConnectionPropertyOutput
	ToConnectionPropertyOutputWithContext(context.Context) ConnectionPropertyOutput
}

type ConnectionPropertyArgs struct {
	// [Required] Name of the connection property to set.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// [Required] Value of the connection property.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConnectionPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperty)(nil)).Elem()
}

func (i ConnectionPropertyArgs) ToConnectionPropertyOutput() ConnectionPropertyOutput {
	return i.ToConnectionPropertyOutputWithContext(context.Background())
}

func (i ConnectionPropertyArgs) ToConnectionPropertyOutputWithContext(ctx context.Context) ConnectionPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertyOutput)
}

// ConnectionPropertyArrayInput is an input type that accepts ConnectionPropertyArray and ConnectionPropertyArrayOutput values.
// You can construct a concrete instance of `ConnectionPropertyArrayInput` via:
//
//	ConnectionPropertyArray{ ConnectionPropertyArgs{...} }
type ConnectionPropertyArrayInput interface {
	pulumi.Input

	ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput
	ToConnectionPropertyArrayOutputWithContext(context.Context) ConnectionPropertyArrayOutput
}

type ConnectionPropertyArray []ConnectionPropertyInput

func (ConnectionPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionProperty)(nil)).Elem()
}

func (i ConnectionPropertyArray) ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput {
	return i.ToConnectionPropertyArrayOutputWithContext(context.Background())
}

func (i ConnectionPropertyArray) ToConnectionPropertyArrayOutputWithContext(ctx context.Context) ConnectionPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionPropertyArrayOutput)
}

type ConnectionPropertyOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionProperty)(nil)).Elem()
}

func (o ConnectionPropertyOutput) ToConnectionPropertyOutput() ConnectionPropertyOutput {
	return o
}

func (o ConnectionPropertyOutput) ToConnectionPropertyOutputWithContext(ctx context.Context) ConnectionPropertyOutput {
	return o
}

// [Required] Name of the connection property to set.
func (o ConnectionPropertyOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperty) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// [Required] Value of the connection property.
func (o ConnectionPropertyOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionProperty) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConnectionPropertyArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionProperty)(nil)).Elem()
}

func (o ConnectionPropertyArrayOutput) ToConnectionPropertyArrayOutput() ConnectionPropertyArrayOutput {
	return o
}

func (o ConnectionPropertyArrayOutput) ToConnectionPropertyArrayOutputWithContext(ctx context.Context) ConnectionPropertyArrayOutput {
	return o
}

func (o ConnectionPropertyArrayOutput) Index(i pulumi.IntInput) ConnectionPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionProperty {
		return vs[0].([]ConnectionProperty)[vs[1].(int)]
	}).(ConnectionPropertyOutput)
}

type ConnectionPropertyResponse struct {
	// [Required] Name of the connection property to set.
	Key string `pulumi:"key"`
	// [Required] Value of the connection property.
	Value string `pulumi:"value"`
}

type ConnectionPropertyResponseOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionPropertyResponse)(nil)).Elem()
}

func (o ConnectionPropertyResponseOutput) ToConnectionPropertyResponseOutput() ConnectionPropertyResponseOutput {
	return o
}

func (o ConnectionPropertyResponseOutput) ToConnectionPropertyResponseOutputWithContext(ctx context.Context) ConnectionPropertyResponseOutput {
	return o
}

// [Required] Name of the connection property to set.
func (o ConnectionPropertyResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertyResponse) string { return v.Key }).(pulumi.StringOutput)
}

// [Required] Value of the connection property.
func (o ConnectionPropertyResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionPropertyResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ConnectionPropertyResponseArrayOutput struct{ *pulumi.OutputState }

func (ConnectionPropertyResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionPropertyResponse)(nil)).Elem()
}

func (o ConnectionPropertyResponseArrayOutput) ToConnectionPropertyResponseArrayOutput() ConnectionPropertyResponseArrayOutput {
	return o
}

func (o ConnectionPropertyResponseArrayOutput) ToConnectionPropertyResponseArrayOutputWithContext(ctx context.Context) ConnectionPropertyResponseArrayOutput {
	return o
}

func (o ConnectionPropertyResponseArrayOutput) Index(i pulumi.IntInput) ConnectionPropertyResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionPropertyResponse {
		return vs[0].([]ConnectionPropertyResponse)[vs[1].(int)]
	}).(ConnectionPropertyResponseOutput)
}

type CsvOptions struct {
	// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding *string `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// [Optional] An custom string that will represent a NULL value in CSV import data.
	NullMarker *string `pulumi:"nullMarker"`
	// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
	PreserveAsciiControlCharacters *bool `pulumi:"preserveAsciiControlCharacters"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote *string `pulumi:"quote"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *string `pulumi:"skipLeadingRows"`
}

// CsvOptionsInput is an input type that accepts CsvOptionsArgs and CsvOptionsOutput values.
// You can construct a concrete instance of `CsvOptionsInput` via:
//
//	CsvOptionsArgs{...}
type CsvOptionsInput interface {
	pulumi.Input

	ToCsvOptionsOutput() CsvOptionsOutput
	ToCsvOptionsOutputWithContext(context.Context) CsvOptionsOutput
}

type CsvOptionsArgs struct {
	// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// [Optional] An custom string that will represent a NULL value in CSV import data.
	NullMarker pulumi.StringPtrInput `pulumi:"nullMarker"`
	// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
	PreserveAsciiControlCharacters pulumi.BoolPtrInput `pulumi:"preserveAsciiControlCharacters"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.StringPtrInput `pulumi:"skipLeadingRows"`
}

func (CsvOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptions)(nil)).Elem()
}

func (i CsvOptionsArgs) ToCsvOptionsOutput() CsvOptionsOutput {
	return i.ToCsvOptionsOutputWithContext(context.Background())
}

func (i CsvOptionsArgs) ToCsvOptionsOutputWithContext(ctx context.Context) CsvOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsOutput)
}

func (i CsvOptionsArgs) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return i.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (i CsvOptionsArgs) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsOutput).ToCsvOptionsPtrOutputWithContext(ctx)
}

// CsvOptionsPtrInput is an input type that accepts CsvOptionsArgs, CsvOptionsPtr and CsvOptionsPtrOutput values.
// You can construct a concrete instance of `CsvOptionsPtrInput` via:
//
//	        CsvOptionsArgs{...}
//
//	or:
//
//	        nil
type CsvOptionsPtrInput interface {
	pulumi.Input

	ToCsvOptionsPtrOutput() CsvOptionsPtrOutput
	ToCsvOptionsPtrOutputWithContext(context.Context) CsvOptionsPtrOutput
}

type csvOptionsPtrType CsvOptionsArgs

func CsvOptionsPtr(v *CsvOptionsArgs) CsvOptionsPtrInput {
	return (*csvOptionsPtrType)(v)
}

func (*csvOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvOptions)(nil)).Elem()
}

func (i *csvOptionsPtrType) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return i.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (i *csvOptionsPtrType) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CsvOptionsPtrOutput)
}

type CsvOptionsOutput struct{ *pulumi.OutputState }

func (CsvOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptions)(nil)).Elem()
}

func (o CsvOptionsOutput) ToCsvOptionsOutput() CsvOptionsOutput {
	return o
}

func (o CsvOptionsOutput) ToCsvOptionsOutputWithContext(ctx context.Context) CsvOptionsOutput {
	return o
}

func (o CsvOptionsOutput) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return o.ToCsvOptionsPtrOutputWithContext(context.Background())
}

func (o CsvOptionsOutput) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CsvOptions) *CsvOptions {
		return &v
	}).(CsvOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o CsvOptionsOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// [Optional] An custom string that will represent a NULL value in CSV import data.
func (o CsvOptionsOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.NullMarker }).(pulumi.StringPtrOutput)
}

// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
func (o CsvOptionsOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CsvOptions) *bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolPtrOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o CsvOptionsOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CsvOptions) *string { return v.SkipLeadingRows }).(pulumi.StringPtrOutput)
}

type CsvOptionsPtrOutput struct{ *pulumi.OutputState }

func (CsvOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CsvOptions)(nil)).Elem()
}

func (o CsvOptionsPtrOutput) ToCsvOptionsPtrOutput() CsvOptionsPtrOutput {
	return o
}

func (o CsvOptionsPtrOutput) ToCsvOptionsPtrOutputWithContext(ctx context.Context) CsvOptionsPtrOutput {
	return o
}

func (o CsvOptionsPtrOutput) Elem() CsvOptionsOutput {
	return o.ApplyT(func(v *CsvOptions) CsvOptions {
		if v != nil {
			return *v
		}
		var ret CsvOptions
		return ret
	}).(CsvOptionsOutput)
}

// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o CsvOptionsPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// [Optional] An custom string that will represent a NULL value in CSV import data.
func (o CsvOptionsPtrOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.NullMarker
	}).(pulumi.StringPtrOutput)
}

// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
func (o CsvOptionsPtrOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveAsciiControlCharacters
	}).(pulumi.BoolPtrOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o CsvOptionsPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.Quote
	}).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsPtrOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CsvOptions) *string {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.StringPtrOutput)
}

type CsvOptionsResponse struct {
	// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
	AllowJaggedRows bool `pulumi:"allowJaggedRows"`
	// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines bool `pulumi:"allowQuotedNewlines"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding string `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter string `pulumi:"fieldDelimiter"`
	// [Optional] An custom string that will represent a NULL value in CSV import data.
	NullMarker string `pulumi:"nullMarker"`
	// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
	PreserveAsciiControlCharacters bool `pulumi:"preserveAsciiControlCharacters"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote string `pulumi:"quote"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows string `pulumi:"skipLeadingRows"`
}

type CsvOptionsResponseOutput struct{ *pulumi.OutputState }

func (CsvOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvOptionsResponse)(nil)).Elem()
}

func (o CsvOptionsResponseOutput) ToCsvOptionsResponseOutput() CsvOptionsResponseOutput {
	return o
}

func (o CsvOptionsResponseOutput) ToCsvOptionsResponseOutputWithContext(ctx context.Context) CsvOptionsResponseOutput {
	return o
}

// [Optional] Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.
func (o CsvOptionsResponseOutput) AllowJaggedRows() pulumi.BoolOutput {
	return o.ApplyT(func(v CsvOptionsResponse) bool { return v.AllowJaggedRows }).(pulumi.BoolOutput)
}

// [Optional] Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o CsvOptionsResponseOutput) AllowQuotedNewlines() pulumi.BoolOutput {
	return o.ApplyT(func(v CsvOptionsResponse) bool { return v.AllowQuotedNewlines }).(pulumi.BoolOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o CsvOptionsResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// [Optional] The separator for fields in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o CsvOptionsResponseOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// [Optional] An custom string that will represent a NULL value in CSV import data.
func (o CsvOptionsResponseOutput) NullMarker() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.NullMarker }).(pulumi.StringOutput)
}

// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
func (o CsvOptionsResponseOutput) PreserveAsciiControlCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v CsvOptionsResponse) bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o CsvOptionsResponseOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.Quote }).(pulumi.StringOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o CsvOptionsResponseOutput) SkipLeadingRows() pulumi.StringOutput {
	return o.ApplyT(func(v CsvOptionsResponse) string { return v.SkipLeadingRows }).(pulumi.StringOutput)
}

type DataMaskingStatisticsResponse struct {
	// [Preview] Whether any accessed data was protected by data masking. The actual evaluation is done by accessStats.masked_field_count > 0. Since this is only used for the discovery_doc generation purpose, as long as the type (boolean) matches, client library can leverage this. The actual evaluation of the variable is done else-where.
	DataMaskingApplied bool `pulumi:"dataMaskingApplied"`
}

type DataMaskingStatisticsResponseOutput struct{ *pulumi.OutputState }

func (DataMaskingStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataMaskingStatisticsResponse)(nil)).Elem()
}

func (o DataMaskingStatisticsResponseOutput) ToDataMaskingStatisticsResponseOutput() DataMaskingStatisticsResponseOutput {
	return o
}

func (o DataMaskingStatisticsResponseOutput) ToDataMaskingStatisticsResponseOutputWithContext(ctx context.Context) DataMaskingStatisticsResponseOutput {
	return o
}

// [Preview] Whether any accessed data was protected by data masking. The actual evaluation is done by accessStats.masked_field_count > 0. Since this is only used for the discovery_doc generation purpose, as long as the type (boolean) matches, client library can leverage this. The actual evaluation of the variable is done else-where.
func (o DataMaskingStatisticsResponseOutput) DataMaskingApplied() pulumi.BoolOutput {
	return o.ApplyT(func(v DataMaskingStatisticsResponse) bool { return v.DataMaskingApplied }).(pulumi.BoolOutput)
}

type DatasetAccessEntry struct {
	// [Required] The dataset this entry applies to.
	Dataset     *DatasetReference                   `pulumi:"dataset"`
	TargetTypes []DatasetAccessEntryTargetTypesItem `pulumi:"targetTypes"`
}

// DatasetAccessEntryInput is an input type that accepts DatasetAccessEntryArgs and DatasetAccessEntryOutput values.
// You can construct a concrete instance of `DatasetAccessEntryInput` via:
//
//	DatasetAccessEntryArgs{...}
type DatasetAccessEntryInput interface {
	pulumi.Input

	ToDatasetAccessEntryOutput() DatasetAccessEntryOutput
	ToDatasetAccessEntryOutputWithContext(context.Context) DatasetAccessEntryOutput
}

type DatasetAccessEntryArgs struct {
	// [Required] The dataset this entry applies to.
	Dataset     DatasetReferencePtrInput                    `pulumi:"dataset"`
	TargetTypes DatasetAccessEntryTargetTypesItemArrayInput `pulumi:"targetTypes"`
}

func (DatasetAccessEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntry)(nil)).Elem()
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryOutput() DatasetAccessEntryOutput {
	return i.ToDatasetAccessEntryOutputWithContext(context.Background())
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryOutputWithContext(ctx context.Context) DatasetAccessEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessEntryOutput)
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return i.ToDatasetAccessEntryPtrOutputWithContext(context.Background())
}

func (i DatasetAccessEntryArgs) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessEntryOutput).ToDatasetAccessEntryPtrOutputWithContext(ctx)
}

// DatasetAccessEntryPtrInput is an input type that accepts DatasetAccessEntryArgs, DatasetAccessEntryPtr and DatasetAccessEntryPtrOutput values.
// You can construct a concrete instance of `DatasetAccessEntryPtrInput` via:
//
//	        DatasetAccessEntryArgs{...}
//
//	or:
//
//	        nil
type DatasetAccessEntryPtrInput interface {
	pulumi.Input

	ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput
	ToDatasetAccessEntryPtrOutputWithContext(context.Context) DatasetAccessEntryPtrOutput
}

type datasetAccessEntryPtrType DatasetAccessEntryArgs

func DatasetAccessEntryPtr(v *DatasetAccessEntryArgs) DatasetAccessEntryPtrInput {
	return (*datasetAccessEntryPtrType)(v)
}

func (*datasetAccessEntryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessEntry)(nil)).Elem()
}

func (i *datasetAccessEntryPtrType) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return i.ToDatasetAccessEntryPtrOutputWithContext(context.Background())
}

func (i *datasetAccessEntryPtrType) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessEntryPtrOutput)
}

type DatasetAccessEntryOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntry)(nil)).Elem()
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryOutput() DatasetAccessEntryOutput {
	return o
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryOutputWithContext(ctx context.Context) DatasetAccessEntryOutput {
	return o
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return o.ToDatasetAccessEntryPtrOutputWithContext(context.Background())
}

func (o DatasetAccessEntryOutput) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetAccessEntry) *DatasetAccessEntry {
		return &v
	}).(DatasetAccessEntryPtrOutput)
}

// [Required] The dataset this entry applies to.
func (o DatasetAccessEntryOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v DatasetAccessEntry) *DatasetReference { return v.Dataset }).(DatasetReferencePtrOutput)
}

func (o DatasetAccessEntryOutput) TargetTypes() DatasetAccessEntryTargetTypesItemArrayOutput {
	return o.ApplyT(func(v DatasetAccessEntry) []DatasetAccessEntryTargetTypesItem { return v.TargetTypes }).(DatasetAccessEntryTargetTypesItemArrayOutput)
}

type DatasetAccessEntryPtrOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetAccessEntry)(nil)).Elem()
}

func (o DatasetAccessEntryPtrOutput) ToDatasetAccessEntryPtrOutput() DatasetAccessEntryPtrOutput {
	return o
}

func (o DatasetAccessEntryPtrOutput) ToDatasetAccessEntryPtrOutputWithContext(ctx context.Context) DatasetAccessEntryPtrOutput {
	return o
}

func (o DatasetAccessEntryPtrOutput) Elem() DatasetAccessEntryOutput {
	return o.ApplyT(func(v *DatasetAccessEntry) DatasetAccessEntry {
		if v != nil {
			return *v
		}
		var ret DatasetAccessEntry
		return ret
	}).(DatasetAccessEntryOutput)
}

// [Required] The dataset this entry applies to.
func (o DatasetAccessEntryPtrOutput) Dataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v *DatasetAccessEntry) *DatasetReference {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(DatasetReferencePtrOutput)
}

func (o DatasetAccessEntryPtrOutput) TargetTypes() DatasetAccessEntryTargetTypesItemArrayOutput {
	return o.ApplyT(func(v *DatasetAccessEntry) []DatasetAccessEntryTargetTypesItem {
		if v == nil {
			return nil
		}
		return v.TargetTypes
	}).(DatasetAccessEntryTargetTypesItemArrayOutput)
}

type DatasetAccessEntryResponse struct {
	// [Required] The dataset this entry applies to.
	Dataset     DatasetReferenceResponse `pulumi:"dataset"`
	TargetTypes []string                 `pulumi:"targetTypes"`
}

type DatasetAccessEntryResponseOutput struct{ *pulumi.OutputState }

func (DatasetAccessEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessEntryResponse)(nil)).Elem()
}

func (o DatasetAccessEntryResponseOutput) ToDatasetAccessEntryResponseOutput() DatasetAccessEntryResponseOutput {
	return o
}

func (o DatasetAccessEntryResponseOutput) ToDatasetAccessEntryResponseOutputWithContext(ctx context.Context) DatasetAccessEntryResponseOutput {
	return o
}

// [Required] The dataset this entry applies to.
func (o DatasetAccessEntryResponseOutput) Dataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v DatasetAccessEntryResponse) DatasetReferenceResponse { return v.Dataset }).(DatasetReferenceResponseOutput)
}

func (o DatasetAccessEntryResponseOutput) TargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DatasetAccessEntryResponse) []string { return v.TargetTypes }).(pulumi.StringArrayOutput)
}

type DatasetAccessItem struct {
	// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
	Dataset *DatasetAccessEntry `pulumi:"dataset"`
	// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
	Domain *string `pulumi:"domain"`
	// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
	GroupByEmail *string `pulumi:"groupByEmail"`
	// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
	IamMember *string `pulumi:"iamMember"`
	// [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
	Role *string `pulumi:"role"`
	// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
	Routine *RoutineReference `pulumi:"routine"`
	// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
	SpecialGroup *string `pulumi:"specialGroup"`
	// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
	UserByEmail *string `pulumi:"userByEmail"`
	// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
	View *TableReference `pulumi:"view"`
}

// DatasetAccessItemInput is an input type that accepts DatasetAccessItemArgs and DatasetAccessItemOutput values.
// You can construct a concrete instance of `DatasetAccessItemInput` via:
//
//	DatasetAccessItemArgs{...}
type DatasetAccessItemInput interface {
	pulumi.Input

	ToDatasetAccessItemOutput() DatasetAccessItemOutput
	ToDatasetAccessItemOutputWithContext(context.Context) DatasetAccessItemOutput
}

type DatasetAccessItemArgs struct {
	// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
	Dataset DatasetAccessEntryPtrInput `pulumi:"dataset"`
	// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
	GroupByEmail pulumi.StringPtrInput `pulumi:"groupByEmail"`
	// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
	IamMember pulumi.StringPtrInput `pulumi:"iamMember"`
	// [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
	Role pulumi.StringPtrInput `pulumi:"role"`
	// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
	Routine RoutineReferencePtrInput `pulumi:"routine"`
	// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
	SpecialGroup pulumi.StringPtrInput `pulumi:"specialGroup"`
	// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
	UserByEmail pulumi.StringPtrInput `pulumi:"userByEmail"`
	// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
	View TableReferencePtrInput `pulumi:"view"`
}

func (DatasetAccessItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessItem)(nil)).Elem()
}

func (i DatasetAccessItemArgs) ToDatasetAccessItemOutput() DatasetAccessItemOutput {
	return i.ToDatasetAccessItemOutputWithContext(context.Background())
}

func (i DatasetAccessItemArgs) ToDatasetAccessItemOutputWithContext(ctx context.Context) DatasetAccessItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessItemOutput)
}

// DatasetAccessItemArrayInput is an input type that accepts DatasetAccessItemArray and DatasetAccessItemArrayOutput values.
// You can construct a concrete instance of `DatasetAccessItemArrayInput` via:
//
//	DatasetAccessItemArray{ DatasetAccessItemArgs{...} }
type DatasetAccessItemArrayInput interface {
	pulumi.Input

	ToDatasetAccessItemArrayOutput() DatasetAccessItemArrayOutput
	ToDatasetAccessItemArrayOutputWithContext(context.Context) DatasetAccessItemArrayOutput
}

type DatasetAccessItemArray []DatasetAccessItemInput

func (DatasetAccessItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessItem)(nil)).Elem()
}

func (i DatasetAccessItemArray) ToDatasetAccessItemArrayOutput() DatasetAccessItemArrayOutput {
	return i.ToDatasetAccessItemArrayOutputWithContext(context.Background())
}

func (i DatasetAccessItemArray) ToDatasetAccessItemArrayOutputWithContext(ctx context.Context) DatasetAccessItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetAccessItemArrayOutput)
}

type DatasetAccessItemOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessItem)(nil)).Elem()
}

func (o DatasetAccessItemOutput) ToDatasetAccessItemOutput() DatasetAccessItemOutput {
	return o
}

func (o DatasetAccessItemOutput) ToDatasetAccessItemOutputWithContext(ctx context.Context) DatasetAccessItemOutput {
	return o
}

// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
func (o DatasetAccessItemOutput) Dataset() DatasetAccessEntryPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *DatasetAccessEntry { return v.Dataset }).(DatasetAccessEntryPtrOutput)
}

// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
func (o DatasetAccessItemOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
func (o DatasetAccessItemOutput) GroupByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.GroupByEmail }).(pulumi.StringPtrOutput)
}

// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
func (o DatasetAccessItemOutput) IamMember() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.IamMember }).(pulumi.StringPtrOutput)
}

// [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
func (o DatasetAccessItemOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
func (o DatasetAccessItemOutput) Routine() RoutineReferencePtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *RoutineReference { return v.Routine }).(RoutineReferencePtrOutput)
}

// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
func (o DatasetAccessItemOutput) SpecialGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.SpecialGroup }).(pulumi.StringPtrOutput)
}

// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
func (o DatasetAccessItemOutput) UserByEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *string { return v.UserByEmail }).(pulumi.StringPtrOutput)
}

// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
func (o DatasetAccessItemOutput) View() TableReferencePtrOutput {
	return o.ApplyT(func(v DatasetAccessItem) *TableReference { return v.View }).(TableReferencePtrOutput)
}

type DatasetAccessItemArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessItem)(nil)).Elem()
}

func (o DatasetAccessItemArrayOutput) ToDatasetAccessItemArrayOutput() DatasetAccessItemArrayOutput {
	return o
}

func (o DatasetAccessItemArrayOutput) ToDatasetAccessItemArrayOutputWithContext(ctx context.Context) DatasetAccessItemArrayOutput {
	return o
}

func (o DatasetAccessItemArrayOutput) Index(i pulumi.IntInput) DatasetAccessItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessItem {
		return vs[0].([]DatasetAccessItem)[vs[1].(int)]
	}).(DatasetAccessItemOutput)
}

type DatasetAccessItemResponse struct {
	// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
	Dataset DatasetAccessEntryResponse `pulumi:"dataset"`
	// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
	Domain string `pulumi:"domain"`
	// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
	GroupByEmail string `pulumi:"groupByEmail"`
	// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
	IamMember string `pulumi:"iamMember"`
	// [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
	Role string `pulumi:"role"`
	// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
	Routine RoutineReferenceResponse `pulumi:"routine"`
	// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
	SpecialGroup string `pulumi:"specialGroup"`
	// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
	UserByEmail string `pulumi:"userByEmail"`
	// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
	View TableReferenceResponse `pulumi:"view"`
}

type DatasetAccessItemResponseOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetAccessItemResponse)(nil)).Elem()
}

func (o DatasetAccessItemResponseOutput) ToDatasetAccessItemResponseOutput() DatasetAccessItemResponseOutput {
	return o
}

func (o DatasetAccessItemResponseOutput) ToDatasetAccessItemResponseOutputWithContext(ctx context.Context) DatasetAccessItemResponseOutput {
	return o
}

// [Pick one] A grant authorizing all resources of a particular type in a particular dataset access to this dataset. Only views are supported for now. The role field is not required when this field is set. If that dataset is deleted and re-created, its access needs to be granted again via an update operation.
func (o DatasetAccessItemResponseOutput) Dataset() DatasetAccessEntryResponseOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) DatasetAccessEntryResponse { return v.Dataset }).(DatasetAccessEntryResponseOutput)
}

// [Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: "example.com". Maps to IAM policy member "domain:DOMAIN".
func (o DatasetAccessItemResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// [Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member "group:GROUP".
func (o DatasetAccessItemResponseOutput) GroupByEmail() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.GroupByEmail }).(pulumi.StringOutput)
}

// [Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.
func (o DatasetAccessItemResponseOutput) IamMember() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.IamMember }).(pulumi.StringOutput)
}

// [Required] An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER  roles/bigquery.dataOwner WRITER  roles/bigquery.dataEditor READER  roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to "roles/bigquery.dataOwner", it will be returned back as "OWNER".
func (o DatasetAccessItemResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.Role }).(pulumi.StringOutput)
}

// [Pick one] A routine from a different dataset to grant access to. Queries executed against that routine will have read access to views/tables/routines in this dataset. Only UDF is supported for now. The role field is not required when this field is set. If that routine is updated by any user, access to the routine needs to be granted again via an update operation.
func (o DatasetAccessItemResponseOutput) Routine() RoutineReferenceResponseOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) RoutineReferenceResponse { return v.Routine }).(RoutineReferenceResponseOutput)
}

// [Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.
func (o DatasetAccessItemResponseOutput) SpecialGroup() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.SpecialGroup }).(pulumi.StringOutput)
}

// [Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member "user:EMAIL" or "serviceAccount:EMAIL".
func (o DatasetAccessItemResponseOutput) UserByEmail() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) string { return v.UserByEmail }).(pulumi.StringOutput)
}

// [Pick one] A view from a different dataset to grant access to. Queries executed against that view will have read access to tables in this dataset. The role field is not required when this field is set. If that view is updated by any user, access to the view needs to be granted again via an update operation.
func (o DatasetAccessItemResponseOutput) View() TableReferenceResponseOutput {
	return o.ApplyT(func(v DatasetAccessItemResponse) TableReferenceResponse { return v.View }).(TableReferenceResponseOutput)
}

type DatasetAccessItemResponseArrayOutput struct{ *pulumi.OutputState }

func (DatasetAccessItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetAccessItemResponse)(nil)).Elem()
}

func (o DatasetAccessItemResponseArrayOutput) ToDatasetAccessItemResponseArrayOutput() DatasetAccessItemResponseArrayOutput {
	return o
}

func (o DatasetAccessItemResponseArrayOutput) ToDatasetAccessItemResponseArrayOutputWithContext(ctx context.Context) DatasetAccessItemResponseArrayOutput {
	return o
}

func (o DatasetAccessItemResponseArrayOutput) Index(i pulumi.IntInput) DatasetAccessItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetAccessItemResponse {
		return vs[0].([]DatasetAccessItemResponse)[vs[1].(int)]
	}).(DatasetAccessItemResponseOutput)
}

type DatasetReference struct {
	// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId *string `pulumi:"datasetId"`
	// [Optional] The ID of the project containing this dataset.
	Project *string `pulumi:"project"`
}

// DatasetReferenceInput is an input type that accepts DatasetReferenceArgs and DatasetReferenceOutput values.
// You can construct a concrete instance of `DatasetReferenceInput` via:
//
//	DatasetReferenceArgs{...}
type DatasetReferenceInput interface {
	pulumi.Input

	ToDatasetReferenceOutput() DatasetReferenceOutput
	ToDatasetReferenceOutputWithContext(context.Context) DatasetReferenceOutput
}

type DatasetReferenceArgs struct {
	// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// [Optional] The ID of the project containing this dataset.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (DatasetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return i.ToDatasetReferenceOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput)
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i DatasetReferenceArgs) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferenceOutput).ToDatasetReferencePtrOutputWithContext(ctx)
}

// DatasetReferencePtrInput is an input type that accepts DatasetReferenceArgs, DatasetReferencePtr and DatasetReferencePtrOutput values.
// You can construct a concrete instance of `DatasetReferencePtrInput` via:
//
//	        DatasetReferenceArgs{...}
//
//	or:
//
//	        nil
type DatasetReferencePtrInput interface {
	pulumi.Input

	ToDatasetReferencePtrOutput() DatasetReferencePtrOutput
	ToDatasetReferencePtrOutputWithContext(context.Context) DatasetReferencePtrOutput
}

type datasetReferencePtrType DatasetReferenceArgs

func DatasetReferencePtr(v *DatasetReferenceArgs) DatasetReferencePtrInput {
	return (*datasetReferencePtrType)(v)
}

func (*datasetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return i.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (i *datasetReferencePtrType) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetReferencePtrOutput)
}

type DatasetReferenceOutput struct{ *pulumi.OutputState }

func (DatasetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReference)(nil)).Elem()
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutput() DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferenceOutputWithContext(ctx context.Context) DatasetReferenceOutput {
	return o
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o.ToDatasetReferencePtrOutputWithContext(context.Background())
}

func (o DatasetReferenceOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetReference) *DatasetReference {
		return &v
	}).(DatasetReferencePtrOutput)
}

// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferenceOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetReference) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// [Optional] The ID of the project containing this dataset.
func (o DatasetReferenceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetReference) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type DatasetReferencePtrOutput struct{ *pulumi.OutputState }

func (DatasetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetReference)(nil)).Elem()
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutput() DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) ToDatasetReferencePtrOutputWithContext(ctx context.Context) DatasetReferencePtrOutput {
	return o
}

func (o DatasetReferencePtrOutput) Elem() DatasetReferenceOutput {
	return o.ApplyT(func(v *DatasetReference) DatasetReference {
		if v != nil {
			return *v
		}
		var ret DatasetReference
		return ret
	}).(DatasetReferenceOutput)
}

// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// [Optional] The ID of the project containing this dataset.
func (o DatasetReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetReference) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

type DatasetReferenceResponse struct {
	// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	DatasetId string `pulumi:"datasetId"`
	// [Optional] The ID of the project containing this dataset.
	Project string `pulumi:"project"`
}

type DatasetReferenceResponseOutput struct{ *pulumi.OutputState }

func (DatasetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetReferenceResponse)(nil)).Elem()
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutput() DatasetReferenceResponseOutput {
	return o
}

func (o DatasetReferenceResponseOutput) ToDatasetReferenceResponseOutputWithContext(ctx context.Context) DatasetReferenceResponseOutput {
	return o
}

// [Required] A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o DatasetReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// [Optional] The ID of the project containing this dataset.
func (o DatasetReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

type DatasetTagsItem struct {
	// [Required] The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
	TagKey *string `pulumi:"tagKey"`
	// [Required] Friendly short name of the tag value, e.g. "production".
	TagValue *string `pulumi:"tagValue"`
}

// DatasetTagsItemInput is an input type that accepts DatasetTagsItemArgs and DatasetTagsItemOutput values.
// You can construct a concrete instance of `DatasetTagsItemInput` via:
//
//	DatasetTagsItemArgs{...}
type DatasetTagsItemInput interface {
	pulumi.Input

	ToDatasetTagsItemOutput() DatasetTagsItemOutput
	ToDatasetTagsItemOutputWithContext(context.Context) DatasetTagsItemOutput
}

type DatasetTagsItemArgs struct {
	// [Required] The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
	TagKey pulumi.StringPtrInput `pulumi:"tagKey"`
	// [Required] Friendly short name of the tag value, e.g. "production".
	TagValue pulumi.StringPtrInput `pulumi:"tagValue"`
}

func (DatasetTagsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTagsItem)(nil)).Elem()
}

func (i DatasetTagsItemArgs) ToDatasetTagsItemOutput() DatasetTagsItemOutput {
	return i.ToDatasetTagsItemOutputWithContext(context.Background())
}

func (i DatasetTagsItemArgs) ToDatasetTagsItemOutputWithContext(ctx context.Context) DatasetTagsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTagsItemOutput)
}

// DatasetTagsItemArrayInput is an input type that accepts DatasetTagsItemArray and DatasetTagsItemArrayOutput values.
// You can construct a concrete instance of `DatasetTagsItemArrayInput` via:
//
//	DatasetTagsItemArray{ DatasetTagsItemArgs{...} }
type DatasetTagsItemArrayInput interface {
	pulumi.Input

	ToDatasetTagsItemArrayOutput() DatasetTagsItemArrayOutput
	ToDatasetTagsItemArrayOutputWithContext(context.Context) DatasetTagsItemArrayOutput
}

type DatasetTagsItemArray []DatasetTagsItemInput

func (DatasetTagsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetTagsItem)(nil)).Elem()
}

func (i DatasetTagsItemArray) ToDatasetTagsItemArrayOutput() DatasetTagsItemArrayOutput {
	return i.ToDatasetTagsItemArrayOutputWithContext(context.Background())
}

func (i DatasetTagsItemArray) ToDatasetTagsItemArrayOutputWithContext(ctx context.Context) DatasetTagsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTagsItemArrayOutput)
}

type DatasetTagsItemOutput struct{ *pulumi.OutputState }

func (DatasetTagsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTagsItem)(nil)).Elem()
}

func (o DatasetTagsItemOutput) ToDatasetTagsItemOutput() DatasetTagsItemOutput {
	return o
}

func (o DatasetTagsItemOutput) ToDatasetTagsItemOutputWithContext(ctx context.Context) DatasetTagsItemOutput {
	return o
}

// [Required] The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
func (o DatasetTagsItemOutput) TagKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetTagsItem) *string { return v.TagKey }).(pulumi.StringPtrOutput)
}

// [Required] Friendly short name of the tag value, e.g. "production".
func (o DatasetTagsItemOutput) TagValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetTagsItem) *string { return v.TagValue }).(pulumi.StringPtrOutput)
}

type DatasetTagsItemArrayOutput struct{ *pulumi.OutputState }

func (DatasetTagsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetTagsItem)(nil)).Elem()
}

func (o DatasetTagsItemArrayOutput) ToDatasetTagsItemArrayOutput() DatasetTagsItemArrayOutput {
	return o
}

func (o DatasetTagsItemArrayOutput) ToDatasetTagsItemArrayOutputWithContext(ctx context.Context) DatasetTagsItemArrayOutput {
	return o
}

func (o DatasetTagsItemArrayOutput) Index(i pulumi.IntInput) DatasetTagsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetTagsItem {
		return vs[0].([]DatasetTagsItem)[vs[1].(int)]
	}).(DatasetTagsItemOutput)
}

type DatasetTagsItemResponse struct {
	// [Required] The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
	TagKey string `pulumi:"tagKey"`
	// [Required] Friendly short name of the tag value, e.g. "production".
	TagValue string `pulumi:"tagValue"`
}

type DatasetTagsItemResponseOutput struct{ *pulumi.OutputState }

func (DatasetTagsItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTagsItemResponse)(nil)).Elem()
}

func (o DatasetTagsItemResponseOutput) ToDatasetTagsItemResponseOutput() DatasetTagsItemResponseOutput {
	return o
}

func (o DatasetTagsItemResponseOutput) ToDatasetTagsItemResponseOutputWithContext(ctx context.Context) DatasetTagsItemResponseOutput {
	return o
}

// [Required] The namespaced friendly name of the tag key, e.g. "12345/environment" where 12345 is org id.
func (o DatasetTagsItemResponseOutput) TagKey() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTagsItemResponse) string { return v.TagKey }).(pulumi.StringOutput)
}

// [Required] Friendly short name of the tag value, e.g. "production".
func (o DatasetTagsItemResponseOutput) TagValue() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTagsItemResponse) string { return v.TagValue }).(pulumi.StringOutput)
}

type DatasetTagsItemResponseArrayOutput struct{ *pulumi.OutputState }

func (DatasetTagsItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatasetTagsItemResponse)(nil)).Elem()
}

func (o DatasetTagsItemResponseArrayOutput) ToDatasetTagsItemResponseArrayOutput() DatasetTagsItemResponseArrayOutput {
	return o
}

func (o DatasetTagsItemResponseArrayOutput) ToDatasetTagsItemResponseArrayOutputWithContext(ctx context.Context) DatasetTagsItemResponseArrayOutput {
	return o
}

func (o DatasetTagsItemResponseArrayOutput) Index(i pulumi.IntInput) DatasetTagsItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatasetTagsItemResponse {
		return vs[0].([]DatasetTagsItemResponse)[vs[1].(int)]
	}).(DatasetTagsItemResponseOutput)
}

type DestinationTableProperties struct {
	// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description *string `pulumi:"description"`
	// [Internal] This field is for Google internal use only.
	ExpirationTime *string `pulumi:"expirationTime"`
	// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
	FriendlyName *string `pulumi:"friendlyName"`
	// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels map[string]string `pulumi:"labels"`
}

// DestinationTablePropertiesInput is an input type that accepts DestinationTablePropertiesArgs and DestinationTablePropertiesOutput values.
// You can construct a concrete instance of `DestinationTablePropertiesInput` via:
//
//	DestinationTablePropertiesArgs{...}
type DestinationTablePropertiesInput interface {
	pulumi.Input

	ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput
	ToDestinationTablePropertiesOutputWithContext(context.Context) DestinationTablePropertiesOutput
}

type DestinationTablePropertiesArgs struct {
	// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Internal] This field is for Google internal use only.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
	FriendlyName pulumi.StringPtrInput `pulumi:"friendlyName"`
	// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (DestinationTablePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTableProperties)(nil)).Elem()
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput {
	return i.ToDestinationTablePropertiesOutputWithContext(context.Background())
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesOutputWithContext(ctx context.Context) DestinationTablePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesOutput)
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return i.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (i DestinationTablePropertiesArgs) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesOutput).ToDestinationTablePropertiesPtrOutputWithContext(ctx)
}

// DestinationTablePropertiesPtrInput is an input type that accepts DestinationTablePropertiesArgs, DestinationTablePropertiesPtr and DestinationTablePropertiesPtrOutput values.
// You can construct a concrete instance of `DestinationTablePropertiesPtrInput` via:
//
//	        DestinationTablePropertiesArgs{...}
//
//	or:
//
//	        nil
type DestinationTablePropertiesPtrInput interface {
	pulumi.Input

	ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput
	ToDestinationTablePropertiesPtrOutputWithContext(context.Context) DestinationTablePropertiesPtrOutput
}

type destinationTablePropertiesPtrType DestinationTablePropertiesArgs

func DestinationTablePropertiesPtr(v *DestinationTablePropertiesArgs) DestinationTablePropertiesPtrInput {
	return (*destinationTablePropertiesPtrType)(v)
}

func (*destinationTablePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTableProperties)(nil)).Elem()
}

func (i *destinationTablePropertiesPtrType) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return i.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (i *destinationTablePropertiesPtrType) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationTablePropertiesPtrOutput)
}

type DestinationTablePropertiesOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTableProperties)(nil)).Elem()
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesOutput() DestinationTablePropertiesOutput {
	return o
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesOutputWithContext(ctx context.Context) DestinationTablePropertiesOutput {
	return o
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return o.ToDestinationTablePropertiesPtrOutputWithContext(context.Background())
}

func (o DestinationTablePropertiesOutput) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationTableProperties) *DestinationTableProperties {
		return &v
	}).(DestinationTablePropertiesPtrOutput)
}

// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Internal] This field is for Google internal use only.
func (o DestinationTablePropertiesOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
func (o DestinationTablePropertiesOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DestinationTableProperties) *string { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationTableProperties) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type DestinationTablePropertiesPtrOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationTableProperties)(nil)).Elem()
}

func (o DestinationTablePropertiesPtrOutput) ToDestinationTablePropertiesPtrOutput() DestinationTablePropertiesPtrOutput {
	return o
}

func (o DestinationTablePropertiesPtrOutput) ToDestinationTablePropertiesPtrOutputWithContext(ctx context.Context) DestinationTablePropertiesPtrOutput {
	return o
}

func (o DestinationTablePropertiesPtrOutput) Elem() DestinationTablePropertiesOutput {
	return o.ApplyT(func(v *DestinationTableProperties) DestinationTableProperties {
		if v != nil {
			return *v
		}
		var ret DestinationTableProperties
		return ret
	}).(DestinationTablePropertiesOutput)
}

// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// [Internal] This field is for Google internal use only.
func (o DestinationTablePropertiesPtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationTableProperties) *string {
		if v == nil {
			return nil
		}
		return v.FriendlyName
	}).(pulumi.StringPtrOutput)
}

// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DestinationTableProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

type DestinationTablePropertiesResponse struct {
	// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
	Description string `pulumi:"description"`
	// [Internal] This field is for Google internal use only.
	ExpirationTime string `pulumi:"expirationTime"`
	// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
	FriendlyName string `pulumi:"friendlyName"`
	// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
	Labels map[string]string `pulumi:"labels"`
}

type DestinationTablePropertiesResponseOutput struct{ *pulumi.OutputState }

func (DestinationTablePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationTablePropertiesResponse)(nil)).Elem()
}

func (o DestinationTablePropertiesResponseOutput) ToDestinationTablePropertiesResponseOutput() DestinationTablePropertiesResponseOutput {
	return o
}

func (o DestinationTablePropertiesResponseOutput) ToDestinationTablePropertiesResponseOutputWithContext(ctx context.Context) DestinationTablePropertiesResponseOutput {
	return o
}

// [Optional] The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.
func (o DestinationTablePropertiesResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) string { return v.Description }).(pulumi.StringOutput)
}

// [Internal] This field is for Google internal use only.
func (o DestinationTablePropertiesResponseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// [Optional] The friendly name for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current friendly name is provided, the job will fail.
func (o DestinationTablePropertiesResponseOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) string { return v.FriendlyName }).(pulumi.StringOutput)
}

// [Optional] The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail.
func (o DestinationTablePropertiesResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v DestinationTablePropertiesResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type DmlStatisticsResponse struct {
	// Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE statements.
	DeletedRowCount string `pulumi:"deletedRowCount"`
	// Number of inserted Rows. Populated by DML INSERT and MERGE statements.
	InsertedRowCount string `pulumi:"insertedRowCount"`
	// Number of updated Rows. Populated by DML UPDATE and MERGE statements.
	UpdatedRowCount string `pulumi:"updatedRowCount"`
}

type DmlStatisticsResponseOutput struct{ *pulumi.OutputState }

func (DmlStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DmlStatisticsResponse)(nil)).Elem()
}

func (o DmlStatisticsResponseOutput) ToDmlStatisticsResponseOutput() DmlStatisticsResponseOutput {
	return o
}

func (o DmlStatisticsResponseOutput) ToDmlStatisticsResponseOutputWithContext(ctx context.Context) DmlStatisticsResponseOutput {
	return o
}

// Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE statements.
func (o DmlStatisticsResponseOutput) DeletedRowCount() pulumi.StringOutput {
	return o.ApplyT(func(v DmlStatisticsResponse) string { return v.DeletedRowCount }).(pulumi.StringOutput)
}

// Number of inserted Rows. Populated by DML INSERT and MERGE statements.
func (o DmlStatisticsResponseOutput) InsertedRowCount() pulumi.StringOutput {
	return o.ApplyT(func(v DmlStatisticsResponse) string { return v.InsertedRowCount }).(pulumi.StringOutput)
}

// Number of updated Rows. Populated by DML UPDATE and MERGE statements.
func (o DmlStatisticsResponseOutput) UpdatedRowCount() pulumi.StringOutput {
	return o.ApplyT(func(v DmlStatisticsResponse) string { return v.UpdatedRowCount }).(pulumi.StringOutput)
}

type EncryptionConfiguration struct {
	// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// EncryptionConfigurationInput is an input type that accepts EncryptionConfigurationArgs and EncryptionConfigurationOutput values.
// You can construct a concrete instance of `EncryptionConfigurationInput` via:
//
//	EncryptionConfigurationArgs{...}
type EncryptionConfigurationInput interface {
	pulumi.Input

	ToEncryptionConfigurationOutput() EncryptionConfigurationOutput
	ToEncryptionConfigurationOutputWithContext(context.Context) EncryptionConfigurationOutput
}

type EncryptionConfigurationArgs struct {
	// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (EncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return i.ToEncryptionConfigurationOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput)
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i EncryptionConfigurationArgs) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationOutput).ToEncryptionConfigurationPtrOutputWithContext(ctx)
}

// EncryptionConfigurationPtrInput is an input type that accepts EncryptionConfigurationArgs, EncryptionConfigurationPtr and EncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `EncryptionConfigurationPtrInput` via:
//
//	        EncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type EncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput
	ToEncryptionConfigurationPtrOutputWithContext(context.Context) EncryptionConfigurationPtrOutput
}

type encryptionConfigurationPtrType EncryptionConfigurationArgs

func EncryptionConfigurationPtr(v *EncryptionConfigurationArgs) EncryptionConfigurationPtrInput {
	return (*encryptionConfigurationPtrType)(v)
}

func (*encryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return i.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *encryptionConfigurationPtrType) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionConfigurationPtrOutput)
}

type EncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutput() EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationOutputWithContext(ctx context.Context) EncryptionConfigurationOutput {
	return o
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o.ToEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o EncryptionConfigurationOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EncryptionConfiguration) *EncryptionConfiguration {
		return &v
	}).(EncryptionConfigurationPtrOutput)
}

// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EncryptionConfiguration) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type EncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EncryptionConfiguration)(nil)).Elem()
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutput() EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) ToEncryptionConfigurationPtrOutputWithContext(ctx context.Context) EncryptionConfigurationPtrOutput {
	return o
}

func (o EncryptionConfigurationPtrOutput) Elem() EncryptionConfigurationOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) EncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret EncryptionConfiguration
		return ret
	}).(EncryptionConfigurationOutput)
}

// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

type EncryptionConfigurationResponse struct {
	// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
	KmsKeyName string `pulumi:"kmsKeyName"`
}

type EncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (EncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionConfigurationResponse)(nil)).Elem()
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutput() EncryptionConfigurationResponseOutput {
	return o
}

func (o EncryptionConfigurationResponseOutput) ToEncryptionConfigurationResponseOutputWithContext(ctx context.Context) EncryptionConfigurationResponseOutput {
	return o
}

// Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.
func (o EncryptionConfigurationResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionConfigurationResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type ErrorProtoResponse struct {
	// Debugging information. This property is internal to Google and should not be used.
	DebugInfo string `pulumi:"debugInfo"`
	// Specifies where the error occurred, if present.
	Location string `pulumi:"location"`
	// A human-readable description of the error.
	Message string `pulumi:"message"`
	// A short error code that summarizes the error.
	Reason string `pulumi:"reason"`
}

type ErrorProtoResponseOutput struct{ *pulumi.OutputState }

func (ErrorProtoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorProtoResponse)(nil)).Elem()
}

func (o ErrorProtoResponseOutput) ToErrorProtoResponseOutput() ErrorProtoResponseOutput {
	return o
}

func (o ErrorProtoResponseOutput) ToErrorProtoResponseOutputWithContext(ctx context.Context) ErrorProtoResponseOutput {
	return o
}

// Debugging information. This property is internal to Google and should not be used.
func (o ErrorProtoResponseOutput) DebugInfo() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.DebugInfo }).(pulumi.StringOutput)
}

// Specifies where the error occurred, if present.
func (o ErrorProtoResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.Location }).(pulumi.StringOutput)
}

// A human-readable description of the error.
func (o ErrorProtoResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.Message }).(pulumi.StringOutput)
}

// A short error code that summarizes the error.
func (o ErrorProtoResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorProtoResponse) string { return v.Reason }).(pulumi.StringOutput)
}

type ErrorProtoResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorProtoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorProtoResponse)(nil)).Elem()
}

func (o ErrorProtoResponseArrayOutput) ToErrorProtoResponseArrayOutput() ErrorProtoResponseArrayOutput {
	return o
}

func (o ErrorProtoResponseArrayOutput) ToErrorProtoResponseArrayOutputWithContext(ctx context.Context) ErrorProtoResponseArrayOutput {
	return o
}

func (o ErrorProtoResponseArrayOutput) Index(i pulumi.IntInput) ErrorProtoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorProtoResponse {
		return vs[0].([]ErrorProtoResponse)[vs[1].(int)]
	}).(ErrorProtoResponseOutput)
}

type ExplainQueryStageResponse struct {
	// Number of parallel input segments completed.
	CompletedParallelInputs string `pulumi:"completedParallelInputs"`
	// Milliseconds the average shard spent on CPU-bound tasks.
	ComputeMsAvg string `pulumi:"computeMsAvg"`
	// Milliseconds the slowest shard spent on CPU-bound tasks.
	ComputeMsMax string `pulumi:"computeMsMax"`
	// Relative amount of time the average shard spent on CPU-bound tasks.
	ComputeRatioAvg float64 `pulumi:"computeRatioAvg"`
	// Relative amount of time the slowest shard spent on CPU-bound tasks.
	ComputeRatioMax float64 `pulumi:"computeRatioMax"`
	// Stage end time represented as milliseconds since epoch.
	EndMs string `pulumi:"endMs"`
	// IDs for stages that are inputs to this stage.
	InputStages []string `pulumi:"inputStages"`
	// Human-readable name for stage.
	Name string `pulumi:"name"`
	// Number of parallel input segments to be processed.
	ParallelInputs string `pulumi:"parallelInputs"`
	// Milliseconds the average shard spent reading input.
	ReadMsAvg string `pulumi:"readMsAvg"`
	// Milliseconds the slowest shard spent reading input.
	ReadMsMax string `pulumi:"readMsMax"`
	// Relative amount of time the average shard spent reading input.
	ReadRatioAvg float64 `pulumi:"readRatioAvg"`
	// Relative amount of time the slowest shard spent reading input.
	ReadRatioMax float64 `pulumi:"readRatioMax"`
	// Number of records read into the stage.
	RecordsRead string `pulumi:"recordsRead"`
	// Number of records written by the stage.
	RecordsWritten string `pulumi:"recordsWritten"`
	// Total number of bytes written to shuffle.
	ShuffleOutputBytes string `pulumi:"shuffleOutputBytes"`
	// Total number of bytes written to shuffle and spilled to disk.
	ShuffleOutputBytesSpilled string `pulumi:"shuffleOutputBytesSpilled"`
	// Slot-milliseconds used by the stage.
	SlotMs string `pulumi:"slotMs"`
	// Stage start time represented as milliseconds since epoch.
	StartMs string `pulumi:"startMs"`
	// Current status for the stage.
	Status string `pulumi:"status"`
	// List of operations within the stage in dependency order (approximately chronological).
	Steps []ExplainQueryStepResponse `pulumi:"steps"`
	// Milliseconds the average shard spent waiting to be scheduled.
	WaitMsAvg string `pulumi:"waitMsAvg"`
	// Milliseconds the slowest shard spent waiting to be scheduled.
	WaitMsMax string `pulumi:"waitMsMax"`
	// Relative amount of time the average shard spent waiting to be scheduled.
	WaitRatioAvg float64 `pulumi:"waitRatioAvg"`
	// Relative amount of time the slowest shard spent waiting to be scheduled.
	WaitRatioMax float64 `pulumi:"waitRatioMax"`
	// Milliseconds the average shard spent on writing output.
	WriteMsAvg string `pulumi:"writeMsAvg"`
	// Milliseconds the slowest shard spent on writing output.
	WriteMsMax string `pulumi:"writeMsMax"`
	// Relative amount of time the average shard spent on writing output.
	WriteRatioAvg float64 `pulumi:"writeRatioAvg"`
	// Relative amount of time the slowest shard spent on writing output.
	WriteRatioMax float64 `pulumi:"writeRatioMax"`
}

type ExplainQueryStageResponseOutput struct{ *pulumi.OutputState }

func (ExplainQueryStageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStageResponse)(nil)).Elem()
}

func (o ExplainQueryStageResponseOutput) ToExplainQueryStageResponseOutput() ExplainQueryStageResponseOutput {
	return o
}

func (o ExplainQueryStageResponseOutput) ToExplainQueryStageResponseOutputWithContext(ctx context.Context) ExplainQueryStageResponseOutput {
	return o
}

// Number of parallel input segments completed.
func (o ExplainQueryStageResponseOutput) CompletedParallelInputs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.CompletedParallelInputs }).(pulumi.StringOutput)
}

// Milliseconds the average shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ComputeMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ComputeMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ComputeRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent on CPU-bound tasks.
func (o ExplainQueryStageResponseOutput) ComputeRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ComputeRatioMax }).(pulumi.Float64Output)
}

// Stage end time represented as milliseconds since epoch.
func (o ExplainQueryStageResponseOutput) EndMs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.EndMs }).(pulumi.StringOutput)
}

// IDs for stages that are inputs to this stage.
func (o ExplainQueryStageResponseOutput) InputStages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) []string { return v.InputStages }).(pulumi.StringArrayOutput)
}

// Human-readable name for stage.
func (o ExplainQueryStageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Number of parallel input segments to be processed.
func (o ExplainQueryStageResponseOutput) ParallelInputs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ParallelInputs }).(pulumi.StringOutput)
}

// Milliseconds the average shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ReadMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ReadMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ReadRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent reading input.
func (o ExplainQueryStageResponseOutput) ReadRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.ReadRatioMax }).(pulumi.Float64Output)
}

// Number of records read into the stage.
func (o ExplainQueryStageResponseOutput) RecordsRead() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.RecordsRead }).(pulumi.StringOutput)
}

// Number of records written by the stage.
func (o ExplainQueryStageResponseOutput) RecordsWritten() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.RecordsWritten }).(pulumi.StringOutput)
}

// Total number of bytes written to shuffle.
func (o ExplainQueryStageResponseOutput) ShuffleOutputBytes() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ShuffleOutputBytes }).(pulumi.StringOutput)
}

// Total number of bytes written to shuffle and spilled to disk.
func (o ExplainQueryStageResponseOutput) ShuffleOutputBytesSpilled() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.ShuffleOutputBytesSpilled }).(pulumi.StringOutput)
}

// Slot-milliseconds used by the stage.
func (o ExplainQueryStageResponseOutput) SlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.SlotMs }).(pulumi.StringOutput)
}

// Stage start time represented as milliseconds since epoch.
func (o ExplainQueryStageResponseOutput) StartMs() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.StartMs }).(pulumi.StringOutput)
}

// Current status for the stage.
func (o ExplainQueryStageResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.Status }).(pulumi.StringOutput)
}

// List of operations within the stage in dependency order (approximately chronological).
func (o ExplainQueryStageResponseOutput) Steps() ExplainQueryStepResponseArrayOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) []ExplainQueryStepResponse { return v.Steps }).(ExplainQueryStepResponseArrayOutput)
}

// Milliseconds the average shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WaitMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WaitMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WaitRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent waiting to be scheduled.
func (o ExplainQueryStageResponseOutput) WaitRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WaitRatioMax }).(pulumi.Float64Output)
}

// Milliseconds the average shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteMsAvg() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WriteMsAvg }).(pulumi.StringOutput)
}

// Milliseconds the slowest shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteMsMax() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStageResponse) string { return v.WriteMsMax }).(pulumi.StringOutput)
}

// Relative amount of time the average shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteRatioAvg() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WriteRatioAvg }).(pulumi.Float64Output)
}

// Relative amount of time the slowest shard spent on writing output.
func (o ExplainQueryStageResponseOutput) WriteRatioMax() pulumi.Float64Output {
	return o.ApplyT(func(v ExplainQueryStageResponse) float64 { return v.WriteRatioMax }).(pulumi.Float64Output)
}

type ExplainQueryStageResponseArrayOutput struct{ *pulumi.OutputState }

func (ExplainQueryStageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStageResponse)(nil)).Elem()
}

func (o ExplainQueryStageResponseArrayOutput) ToExplainQueryStageResponseArrayOutput() ExplainQueryStageResponseArrayOutput {
	return o
}

func (o ExplainQueryStageResponseArrayOutput) ToExplainQueryStageResponseArrayOutputWithContext(ctx context.Context) ExplainQueryStageResponseArrayOutput {
	return o
}

func (o ExplainQueryStageResponseArrayOutput) Index(i pulumi.IntInput) ExplainQueryStageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExplainQueryStageResponse {
		return vs[0].([]ExplainQueryStageResponse)[vs[1].(int)]
	}).(ExplainQueryStageResponseOutput)
}

type ExplainQueryStepResponse struct {
	// Machine-readable operation type.
	Kind string `pulumi:"kind"`
	// Human-readable stage descriptions.
	Substeps []string `pulumi:"substeps"`
}

type ExplainQueryStepResponseOutput struct{ *pulumi.OutputState }

func (ExplainQueryStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExplainQueryStepResponse)(nil)).Elem()
}

func (o ExplainQueryStepResponseOutput) ToExplainQueryStepResponseOutput() ExplainQueryStepResponseOutput {
	return o
}

func (o ExplainQueryStepResponseOutput) ToExplainQueryStepResponseOutputWithContext(ctx context.Context) ExplainQueryStepResponseOutput {
	return o
}

// Machine-readable operation type.
func (o ExplainQueryStepResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ExplainQueryStepResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Human-readable stage descriptions.
func (o ExplainQueryStepResponseOutput) Substeps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExplainQueryStepResponse) []string { return v.Substeps }).(pulumi.StringArrayOutput)
}

type ExplainQueryStepResponseArrayOutput struct{ *pulumi.OutputState }

func (ExplainQueryStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExplainQueryStepResponse)(nil)).Elem()
}

func (o ExplainQueryStepResponseArrayOutput) ToExplainQueryStepResponseArrayOutput() ExplainQueryStepResponseArrayOutput {
	return o
}

func (o ExplainQueryStepResponseArrayOutput) ToExplainQueryStepResponseArrayOutputWithContext(ctx context.Context) ExplainQueryStepResponseArrayOutput {
	return o
}

func (o ExplainQueryStepResponseArrayOutput) Index(i pulumi.IntInput) ExplainQueryStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExplainQueryStepResponse {
		return vs[0].([]ExplainQueryStepResponse)[vs[1].(int)]
	}).(ExplainQueryStepResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

type ExternalDataConfiguration struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect *bool `pulumi:"autodetect"`
	// Additional properties to set if sourceFormat is set to Avro.
	AvroOptions *AvroOptions `pulumi:"avroOptions"`
	// [Optional] Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions *BigtableOptions `pulumi:"bigtableOptions"`
	// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	Compression *string `pulumi:"compression"`
	// [Optional, Trusted Tester] Connection for external data source.
	ConnectionId *string `pulumi:"connectionId"`
	// Additional properties to set if sourceFormat is set to CSV.
	CsvOptions *CsvOptions `pulumi:"csvOptions"`
	// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []string `pulumi:"decimalTargetTypes"`
	// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType *string `pulumi:"fileSetSpecType"`
	// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions *GoogleSheetsOptions `pulumi:"googleSheetsOptions"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions *HivePartitioningOptions `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// Additional properties to set if `sourceFormat` is set to `NEWLINE_DELIMITED_JSON`.
	JsonOptions *JsonOptions `pulumi:"jsonOptions"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// [Optional] Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
	MetadataCacheMode *string `pulumi:"metadataCacheMode"`
	// ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
	ObjectMetadata *string `pulumi:"objectMetadata"`
	// Additional properties to set if sourceFormat is set to Parquet.
	ParquetOptions *ParquetOptions `pulumi:"parquetOptions"`
	// [Optional] Provide a referencing file with the expected table schema. Enabled for the format: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri *string `pulumi:"referenceFileSchemaUri"`
	// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
	Schema *TableSchema `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat *string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
}

// ExternalDataConfigurationInput is an input type that accepts ExternalDataConfigurationArgs and ExternalDataConfigurationOutput values.
// You can construct a concrete instance of `ExternalDataConfigurationInput` via:
//
//	ExternalDataConfigurationArgs{...}
type ExternalDataConfigurationInput interface {
	pulumi.Input

	ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput
	ToExternalDataConfigurationOutputWithContext(context.Context) ExternalDataConfigurationOutput
}

type ExternalDataConfigurationArgs struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect pulumi.BoolPtrInput `pulumi:"autodetect"`
	// Additional properties to set if sourceFormat is set to Avro.
	AvroOptions AvroOptionsPtrInput `pulumi:"avroOptions"`
	// [Optional] Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions BigtableOptionsPtrInput `pulumi:"bigtableOptions"`
	// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// [Optional, Trusted Tester] Connection for external data source.
	ConnectionId pulumi.StringPtrInput `pulumi:"connectionId"`
	// Additional properties to set if sourceFormat is set to CSV.
	CsvOptions CsvOptionsPtrInput `pulumi:"csvOptions"`
	// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes pulumi.StringArrayInput `pulumi:"decimalTargetTypes"`
	// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType pulumi.StringPtrInput `pulumi:"fileSetSpecType"`
	// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions GoogleSheetsOptionsPtrInput `pulumi:"googleSheetsOptions"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions HivePartitioningOptionsPtrInput `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// Additional properties to set if `sourceFormat` is set to `NEWLINE_DELIMITED_JSON`.
	JsonOptions JsonOptionsPtrInput `pulumi:"jsonOptions"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// [Optional] Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
	MetadataCacheMode pulumi.StringPtrInput `pulumi:"metadataCacheMode"`
	// ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
	ObjectMetadata pulumi.StringPtrInput `pulumi:"objectMetadata"`
	// Additional properties to set if sourceFormat is set to Parquet.
	ParquetOptions ParquetOptionsPtrInput `pulumi:"parquetOptions"`
	// [Optional] Provide a referencing file with the expected table schema. Enabled for the format: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri pulumi.StringPtrInput `pulumi:"referenceFileSchemaUri"`
	// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
	Schema TableSchemaPtrInput `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
}

func (ExternalDataConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfiguration)(nil)).Elem()
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput {
	return i.ToExternalDataConfigurationOutputWithContext(context.Background())
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationOutputWithContext(ctx context.Context) ExternalDataConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationOutput)
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return i.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i ExternalDataConfigurationArgs) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationOutput).ToExternalDataConfigurationPtrOutputWithContext(ctx)
}

// ExternalDataConfigurationPtrInput is an input type that accepts ExternalDataConfigurationArgs, ExternalDataConfigurationPtr and ExternalDataConfigurationPtrOutput values.
// You can construct a concrete instance of `ExternalDataConfigurationPtrInput` via:
//
//	        ExternalDataConfigurationArgs{...}
//
//	or:
//
//	        nil
type ExternalDataConfigurationPtrInput interface {
	pulumi.Input

	ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput
	ToExternalDataConfigurationPtrOutputWithContext(context.Context) ExternalDataConfigurationPtrOutput
}

type externalDataConfigurationPtrType ExternalDataConfigurationArgs

func ExternalDataConfigurationPtr(v *ExternalDataConfigurationArgs) ExternalDataConfigurationPtrInput {
	return (*externalDataConfigurationPtrType)(v)
}

func (*externalDataConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDataConfiguration)(nil)).Elem()
}

func (i *externalDataConfigurationPtrType) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return i.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (i *externalDataConfigurationPtrType) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDataConfigurationPtrOutput)
}

type ExternalDataConfigurationOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfiguration)(nil)).Elem()
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationOutput() ExternalDataConfigurationOutput {
	return o
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationOutputWithContext(ctx context.Context) ExternalDataConfigurationOutput {
	return o
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return o.ToExternalDataConfigurationPtrOutputWithContext(context.Background())
}

func (o ExternalDataConfigurationOutput) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalDataConfiguration) *ExternalDataConfiguration {
		return &v
	}).(ExternalDataConfigurationPtrOutput)
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *bool { return v.Autodetect }).(pulumi.BoolPtrOutput)
}

// Additional properties to set if sourceFormat is set to Avro.
func (o ExternalDataConfigurationOutput) AvroOptions() AvroOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *AvroOptions { return v.AvroOptions }).(AvroOptionsPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationOutput) BigtableOptions() BigtableOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *BigtableOptions { return v.BigtableOptions }).(BigtableOptionsPtrOutput)
}

// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// [Optional, Trusted Tester] Connection for external data source.
func (o ExternalDataConfigurationOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationOutput) CsvOptions() CsvOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *CsvOptions { return v.CsvOptions }).(CsvOptionsPtrOutput)
}

// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o ExternalDataConfigurationOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) []string { return v.DecimalTargetTypes }).(pulumi.StringArrayOutput)
}

// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o ExternalDataConfigurationOutput) FileSetSpecType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.FileSetSpecType }).(pulumi.StringPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationOutput) GoogleSheetsOptions() GoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *GoogleSheetsOptions { return v.GoogleSheetsOptions }).(GoogleSheetsOptionsPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o ExternalDataConfigurationOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *HivePartitioningOptions { return v.HivePartitioningOptions }).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
func (o ExternalDataConfigurationOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// Additional properties to set if `sourceFormat` is set to `NEWLINE_DELIMITED_JSON`.
func (o ExternalDataConfigurationOutput) JsonOptions() JsonOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *JsonOptions { return v.JsonOptions }).(JsonOptionsPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// [Optional] Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
func (o ExternalDataConfigurationOutput) MetadataCacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.MetadataCacheMode }).(pulumi.StringPtrOutput)
}

// ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
func (o ExternalDataConfigurationOutput) ObjectMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.ObjectMetadata }).(pulumi.StringPtrOutput)
}

// Additional properties to set if sourceFormat is set to Parquet.
func (o ExternalDataConfigurationOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *ParquetOptions { return v.ParquetOptions }).(ParquetOptionsPtrOutput)
}

// [Optional] Provide a referencing file with the expected table schema. Enabled for the format: AVRO, PARQUET, ORC.
func (o ExternalDataConfigurationOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.ReferenceFileSchemaUri }).(pulumi.StringPtrOutput)
}

// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
func (o ExternalDataConfigurationOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *TableSchema { return v.Schema }).(TableSchemaPtrOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfiguration) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type ExternalDataConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDataConfiguration)(nil)).Elem()
}

func (o ExternalDataConfigurationPtrOutput) ToExternalDataConfigurationPtrOutput() ExternalDataConfigurationPtrOutput {
	return o
}

func (o ExternalDataConfigurationPtrOutput) ToExternalDataConfigurationPtrOutputWithContext(ctx context.Context) ExternalDataConfigurationPtrOutput {
	return o
}

func (o ExternalDataConfigurationPtrOutput) Elem() ExternalDataConfigurationOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) ExternalDataConfiguration {
		if v != nil {
			return *v
		}
		var ret ExternalDataConfiguration
		return ret
	}).(ExternalDataConfigurationOutput)
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// Additional properties to set if sourceFormat is set to Avro.
func (o ExternalDataConfigurationPtrOutput) AvroOptions() AvroOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *AvroOptions {
		if v == nil {
			return nil
		}
		return v.AvroOptions
	}).(AvroOptionsPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationPtrOutput) BigtableOptions() BigtableOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *BigtableOptions {
		if v == nil {
			return nil
		}
		return v.BigtableOptions
	}).(BigtableOptionsPtrOutput)
}

// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// [Optional, Trusted Tester] Connection for external data source.
func (o ExternalDataConfigurationPtrOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ConnectionId
	}).(pulumi.StringPtrOutput)
}

// Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationPtrOutput) CsvOptions() CsvOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *CsvOptions {
		if v == nil {
			return nil
		}
		return v.CsvOptions
	}).(CsvOptionsPtrOutput)
}

// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o ExternalDataConfigurationPtrOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.DecimalTargetTypes
	}).(pulumi.StringArrayOutput)
}

// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o ExternalDataConfigurationPtrOutput) FileSetSpecType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.FileSetSpecType
	}).(pulumi.StringPtrOutput)
}

// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationPtrOutput) GoogleSheetsOptions() GoogleSheetsOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *GoogleSheetsOptions {
		if v == nil {
			return nil
		}
		return v.GoogleSheetsOptions
	}).(GoogleSheetsOptionsPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o ExternalDataConfigurationPtrOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *HivePartitioningOptions {
		if v == nil {
			return nil
		}
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
func (o ExternalDataConfigurationPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// Additional properties to set if `sourceFormat` is set to `NEWLINE_DELIMITED_JSON`.
func (o ExternalDataConfigurationPtrOutput) JsonOptions() JsonOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *JsonOptions {
		if v == nil {
			return nil
		}
		return v.JsonOptions
	}).(JsonOptionsPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// [Optional] Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
func (o ExternalDataConfigurationPtrOutput) MetadataCacheMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MetadataCacheMode
	}).(pulumi.StringPtrOutput)
}

// ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
func (o ExternalDataConfigurationPtrOutput) ObjectMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ObjectMetadata
	}).(pulumi.StringPtrOutput)
}

// Additional properties to set if sourceFormat is set to Parquet.
func (o ExternalDataConfigurationPtrOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *ParquetOptions {
		if v == nil {
			return nil
		}
		return v.ParquetOptions
	}).(ParquetOptionsPtrOutput)
}

// [Optional] Provide a referencing file with the expected table schema. Enabled for the format: AVRO, PARQUET, ORC.
func (o ExternalDataConfigurationPtrOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceFileSchemaUri
	}).(pulumi.StringPtrOutput)
}

// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
func (o ExternalDataConfigurationPtrOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *TableSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(TableSchemaPtrOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ExternalDataConfiguration) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

type ExternalDataConfigurationResponse struct {
	// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
	Autodetect bool `pulumi:"autodetect"`
	// Additional properties to set if sourceFormat is set to Avro.
	AvroOptions AvroOptionsResponse `pulumi:"avroOptions"`
	// [Optional] Additional options if sourceFormat is set to BIGTABLE.
	BigtableOptions BigtableOptionsResponse `pulumi:"bigtableOptions"`
	// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	Compression string `pulumi:"compression"`
	// [Optional, Trusted Tester] Connection for external data source.
	ConnectionId string `pulumi:"connectionId"`
	// Additional properties to set if sourceFormat is set to CSV.
	CsvOptions CsvOptionsResponse `pulumi:"csvOptions"`
	// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []string `pulumi:"decimalTargetTypes"`
	// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType string `pulumi:"fileSetSpecType"`
	// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
	GoogleSheetsOptions GoogleSheetsOptionsResponse `pulumi:"googleSheetsOptions"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions HivePartitioningOptionsResponse `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
	IgnoreUnknownValues bool `pulumi:"ignoreUnknownValues"`
	// Additional properties to set if `sourceFormat` is set to `NEWLINE_DELIMITED_JSON`.
	JsonOptions JsonOptionsResponse `pulumi:"jsonOptions"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
	MaxBadRecords int `pulumi:"maxBadRecords"`
	// [Optional] Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
	MetadataCacheMode string `pulumi:"metadataCacheMode"`
	// ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
	ObjectMetadata string `pulumi:"objectMetadata"`
	// Additional properties to set if sourceFormat is set to Parquet.
	ParquetOptions ParquetOptionsResponse `pulumi:"parquetOptions"`
	// [Optional] Provide a referencing file with the expected table schema. Enabled for the format: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri string `pulumi:"referenceFileSchemaUri"`
	// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
	Schema TableSchemaResponse `pulumi:"schema"`
	// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
	SourceFormat string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
}

type ExternalDataConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ExternalDataConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDataConfigurationResponse)(nil)).Elem()
}

func (o ExternalDataConfigurationResponseOutput) ToExternalDataConfigurationResponseOutput() ExternalDataConfigurationResponseOutput {
	return o
}

func (o ExternalDataConfigurationResponseOutput) ToExternalDataConfigurationResponseOutputWithContext(ctx context.Context) ExternalDataConfigurationResponseOutput {
	return o
}

// Try to detect schema and format options automatically. Any option specified explicitly will be honored.
func (o ExternalDataConfigurationResponseOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// Additional properties to set if sourceFormat is set to Avro.
func (o ExternalDataConfigurationResponseOutput) AvroOptions() AvroOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) AvroOptionsResponse { return v.AvroOptions }).(AvroOptionsResponseOutput)
}

// [Optional] Additional options if sourceFormat is set to BIGTABLE.
func (o ExternalDataConfigurationResponseOutput) BigtableOptions() BigtableOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) BigtableOptionsResponse { return v.BigtableOptions }).(BigtableOptionsResponseOutput)
}

// [Optional] The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationResponseOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.Compression }).(pulumi.StringOutput)
}

// [Optional, Trusted Tester] Connection for external data source.
func (o ExternalDataConfigurationResponseOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.ConnectionId }).(pulumi.StringOutput)
}

// Additional properties to set if sourceFormat is set to CSV.
func (o ExternalDataConfigurationResponseOutput) CsvOptions() CsvOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) CsvOptionsResponse { return v.CsvOptions }).(CsvOptionsResponseOutput)
}

// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o ExternalDataConfigurationResponseOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) []string { return v.DecimalTargetTypes }).(pulumi.StringArrayOutput)
}

// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o ExternalDataConfigurationResponseOutput) FileSetSpecType() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.FileSetSpecType }).(pulumi.StringOutput)
}

// [Optional] Additional options if sourceFormat is set to GOOGLE_SHEETS.
func (o ExternalDataConfigurationResponseOutput) GoogleSheetsOptions() GoogleSheetsOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) GoogleSheetsOptionsResponse { return v.GoogleSheetsOptions }).(GoogleSheetsOptionsResponseOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o ExternalDataConfigurationResponseOutput) HivePartitioningOptions() HivePartitioningOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) HivePartitioningOptionsResponse {
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsResponseOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored.
func (o ExternalDataConfigurationResponseOutput) IgnoreUnknownValues() pulumi.BoolOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) bool { return v.IgnoreUnknownValues }).(pulumi.BoolOutput)
}

// Additional properties to set if `sourceFormat` is set to `NEWLINE_DELIMITED_JSON`.
func (o ExternalDataConfigurationResponseOutput) JsonOptions() JsonOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) JsonOptionsResponse { return v.JsonOptions }).(JsonOptionsResponseOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV, JSON, and Google Sheets. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups and Avro formats.
func (o ExternalDataConfigurationResponseOutput) MaxBadRecords() pulumi.IntOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) int { return v.MaxBadRecords }).(pulumi.IntOutput)
}

// [Optional] Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.
func (o ExternalDataConfigurationResponseOutput) MetadataCacheMode() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.MetadataCacheMode }).(pulumi.StringOutput)
}

// ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.
func (o ExternalDataConfigurationResponseOutput) ObjectMetadata() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.ObjectMetadata }).(pulumi.StringOutput)
}

// Additional properties to set if sourceFormat is set to Parquet.
func (o ExternalDataConfigurationResponseOutput) ParquetOptions() ParquetOptionsResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) ParquetOptionsResponse { return v.ParquetOptions }).(ParquetOptionsResponseOutput)
}

// [Optional] Provide a referencing file with the expected table schema. Enabled for the format: AVRO, PARQUET, ORC.
func (o ExternalDataConfigurationResponseOutput) ReferenceFileSchemaUri() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.ReferenceFileSchemaUri }).(pulumi.StringOutput)
}

// [Optional] The schema for the data. Schema is required for CSV and JSON formats. Schema is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats.
func (o ExternalDataConfigurationResponseOutput) Schema() TableSchemaResponseOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) TableSchemaResponse { return v.Schema }).(TableSchemaResponseOutput)
}

// [Required] The data format. For CSV files, specify "CSV". For Google sheets, specify "GOOGLE_SHEETS". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro files, specify "AVRO". For Google Cloud Datastore backups, specify "DATASTORE_BACKUP". [Beta] For Google Cloud Bigtable, specify "BIGTABLE".
func (o ExternalDataConfigurationResponseOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o ExternalDataConfigurationResponseOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExternalDataConfigurationResponse) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

type ExternalDatasetReference struct {
	// [Required] The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
	Connection *string `pulumi:"connection"`
	// [Required] External source that backs this dataset.
	ExternalSource *string `pulumi:"externalSource"`
}

// ExternalDatasetReferenceInput is an input type that accepts ExternalDatasetReferenceArgs and ExternalDatasetReferenceOutput values.
// You can construct a concrete instance of `ExternalDatasetReferenceInput` via:
//
//	ExternalDatasetReferenceArgs{...}
type ExternalDatasetReferenceInput interface {
	pulumi.Input

	ToExternalDatasetReferenceOutput() ExternalDatasetReferenceOutput
	ToExternalDatasetReferenceOutputWithContext(context.Context) ExternalDatasetReferenceOutput
}

type ExternalDatasetReferenceArgs struct {
	// [Required] The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// [Required] External source that backs this dataset.
	ExternalSource pulumi.StringPtrInput `pulumi:"externalSource"`
}

func (ExternalDatasetReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDatasetReference)(nil)).Elem()
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferenceOutput() ExternalDatasetReferenceOutput {
	return i.ToExternalDatasetReferenceOutputWithContext(context.Background())
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferenceOutputWithContext(ctx context.Context) ExternalDatasetReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDatasetReferenceOutput)
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return i.ToExternalDatasetReferencePtrOutputWithContext(context.Background())
}

func (i ExternalDatasetReferenceArgs) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDatasetReferenceOutput).ToExternalDatasetReferencePtrOutputWithContext(ctx)
}

// ExternalDatasetReferencePtrInput is an input type that accepts ExternalDatasetReferenceArgs, ExternalDatasetReferencePtr and ExternalDatasetReferencePtrOutput values.
// You can construct a concrete instance of `ExternalDatasetReferencePtrInput` via:
//
//	        ExternalDatasetReferenceArgs{...}
//
//	or:
//
//	        nil
type ExternalDatasetReferencePtrInput interface {
	pulumi.Input

	ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput
	ToExternalDatasetReferencePtrOutputWithContext(context.Context) ExternalDatasetReferencePtrOutput
}

type externalDatasetReferencePtrType ExternalDatasetReferenceArgs

func ExternalDatasetReferencePtr(v *ExternalDatasetReferenceArgs) ExternalDatasetReferencePtrInput {
	return (*externalDatasetReferencePtrType)(v)
}

func (*externalDatasetReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDatasetReference)(nil)).Elem()
}

func (i *externalDatasetReferencePtrType) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return i.ToExternalDatasetReferencePtrOutputWithContext(context.Background())
}

func (i *externalDatasetReferencePtrType) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExternalDatasetReferencePtrOutput)
}

type ExternalDatasetReferenceOutput struct{ *pulumi.OutputState }

func (ExternalDatasetReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDatasetReference)(nil)).Elem()
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferenceOutput() ExternalDatasetReferenceOutput {
	return o
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferenceOutputWithContext(ctx context.Context) ExternalDatasetReferenceOutput {
	return o
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return o.ToExternalDatasetReferencePtrOutputWithContext(context.Background())
}

func (o ExternalDatasetReferenceOutput) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExternalDatasetReference) *ExternalDatasetReference {
		return &v
	}).(ExternalDatasetReferencePtrOutput)
}

// [Required] The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
func (o ExternalDatasetReferenceOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDatasetReference) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// [Required] External source that backs this dataset.
func (o ExternalDatasetReferenceOutput) ExternalSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExternalDatasetReference) *string { return v.ExternalSource }).(pulumi.StringPtrOutput)
}

type ExternalDatasetReferencePtrOutput struct{ *pulumi.OutputState }

func (ExternalDatasetReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExternalDatasetReference)(nil)).Elem()
}

func (o ExternalDatasetReferencePtrOutput) ToExternalDatasetReferencePtrOutput() ExternalDatasetReferencePtrOutput {
	return o
}

func (o ExternalDatasetReferencePtrOutput) ToExternalDatasetReferencePtrOutputWithContext(ctx context.Context) ExternalDatasetReferencePtrOutput {
	return o
}

func (o ExternalDatasetReferencePtrOutput) Elem() ExternalDatasetReferenceOutput {
	return o.ApplyT(func(v *ExternalDatasetReference) ExternalDatasetReference {
		if v != nil {
			return *v
		}
		var ret ExternalDatasetReference
		return ret
	}).(ExternalDatasetReferenceOutput)
}

// [Required] The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
func (o ExternalDatasetReferencePtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDatasetReference) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// [Required] External source that backs this dataset.
func (o ExternalDatasetReferencePtrOutput) ExternalSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExternalDatasetReference) *string {
		if v == nil {
			return nil
		}
		return v.ExternalSource
	}).(pulumi.StringPtrOutput)
}

type ExternalDatasetReferenceResponse struct {
	// [Required] The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
	Connection string `pulumi:"connection"`
	// [Required] External source that backs this dataset.
	ExternalSource string `pulumi:"externalSource"`
}

type ExternalDatasetReferenceResponseOutput struct{ *pulumi.OutputState }

func (ExternalDatasetReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExternalDatasetReferenceResponse)(nil)).Elem()
}

func (o ExternalDatasetReferenceResponseOutput) ToExternalDatasetReferenceResponseOutput() ExternalDatasetReferenceResponseOutput {
	return o
}

func (o ExternalDatasetReferenceResponseOutput) ToExternalDatasetReferenceResponseOutputWithContext(ctx context.Context) ExternalDatasetReferenceResponseOutput {
	return o
}

// [Required] The connection id that is used to access the external_source. Format: projects/{project_id}/locations/{location_id}/connections/{connection_id}
func (o ExternalDatasetReferenceResponseOutput) Connection() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDatasetReferenceResponse) string { return v.Connection }).(pulumi.StringOutput)
}

// [Required] External source that backs this dataset.
func (o ExternalDatasetReferenceResponseOutput) ExternalSource() pulumi.StringOutput {
	return o.ApplyT(func(v ExternalDatasetReferenceResponse) string { return v.ExternalSource }).(pulumi.StringOutput)
}

type GoogleSheetsOptions struct {
	// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range *string `pulumi:"range"`
	// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows *string `pulumi:"skipLeadingRows"`
}

// GoogleSheetsOptionsInput is an input type that accepts GoogleSheetsOptionsArgs and GoogleSheetsOptionsOutput values.
// You can construct a concrete instance of `GoogleSheetsOptionsInput` via:
//
//	GoogleSheetsOptionsArgs{...}
type GoogleSheetsOptionsInput interface {
	pulumi.Input

	ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput
	ToGoogleSheetsOptionsOutputWithContext(context.Context) GoogleSheetsOptionsOutput
}

type GoogleSheetsOptionsArgs struct {
	// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range pulumi.StringPtrInput `pulumi:"range"`
	// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows pulumi.StringPtrInput `pulumi:"skipLeadingRows"`
}

func (GoogleSheetsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptions)(nil)).Elem()
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput {
	return i.ToGoogleSheetsOptionsOutputWithContext(context.Background())
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsOutputWithContext(ctx context.Context) GoogleSheetsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsOutput)
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return i.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i GoogleSheetsOptionsArgs) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsOutput).ToGoogleSheetsOptionsPtrOutputWithContext(ctx)
}

// GoogleSheetsOptionsPtrInput is an input type that accepts GoogleSheetsOptionsArgs, GoogleSheetsOptionsPtr and GoogleSheetsOptionsPtrOutput values.
// You can construct a concrete instance of `GoogleSheetsOptionsPtrInput` via:
//
//	        GoogleSheetsOptionsArgs{...}
//
//	or:
//
//	        nil
type GoogleSheetsOptionsPtrInput interface {
	pulumi.Input

	ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput
	ToGoogleSheetsOptionsPtrOutputWithContext(context.Context) GoogleSheetsOptionsPtrOutput
}

type googleSheetsOptionsPtrType GoogleSheetsOptionsArgs

func GoogleSheetsOptionsPtr(v *GoogleSheetsOptionsArgs) GoogleSheetsOptionsPtrInput {
	return (*googleSheetsOptionsPtrType)(v)
}

func (*googleSheetsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleSheetsOptions)(nil)).Elem()
}

func (i *googleSheetsOptionsPtrType) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return i.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (i *googleSheetsOptionsPtrType) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleSheetsOptionsPtrOutput)
}

type GoogleSheetsOptionsOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptions)(nil)).Elem()
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsOutput() GoogleSheetsOptionsOutput {
	return o
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsOutputWithContext(ctx context.Context) GoogleSheetsOptionsOutput {
	return o
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return o.ToGoogleSheetsOptionsPtrOutputWithContext(context.Background())
}

func (o GoogleSheetsOptionsOutput) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleSheetsOptions) *GoogleSheetsOptions {
		return &v
	}).(GoogleSheetsOptionsPtrOutput)
}

// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsOptions) *string { return v.Range }).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleSheetsOptions) *string { return v.SkipLeadingRows }).(pulumi.StringPtrOutput)
}

type GoogleSheetsOptionsPtrOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleSheetsOptions)(nil)).Elem()
}

func (o GoogleSheetsOptionsPtrOutput) ToGoogleSheetsOptionsPtrOutput() GoogleSheetsOptionsPtrOutput {
	return o
}

func (o GoogleSheetsOptionsPtrOutput) ToGoogleSheetsOptionsPtrOutputWithContext(ctx context.Context) GoogleSheetsOptionsPtrOutput {
	return o
}

func (o GoogleSheetsOptionsPtrOutput) Elem() GoogleSheetsOptionsOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) GoogleSheetsOptions {
		if v != nil {
			return *v
		}
		var ret GoogleSheetsOptions
		return ret
	}).(GoogleSheetsOptionsOutput)
}

// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsPtrOutput) Range() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.Range
	}).(pulumi.StringPtrOutput)
}

// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsPtrOutput) SkipLeadingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleSheetsOptions) *string {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.StringPtrOutput)
}

type GoogleSheetsOptionsResponse struct {
	// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
	Range string `pulumi:"range"`
	// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
	SkipLeadingRows string `pulumi:"skipLeadingRows"`
}

type GoogleSheetsOptionsResponseOutput struct{ *pulumi.OutputState }

func (GoogleSheetsOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleSheetsOptionsResponse)(nil)).Elem()
}

func (o GoogleSheetsOptionsResponseOutput) ToGoogleSheetsOptionsResponseOutput() GoogleSheetsOptionsResponseOutput {
	return o
}

func (o GoogleSheetsOptionsResponseOutput) ToGoogleSheetsOptionsResponseOutputWithContext(ctx context.Context) GoogleSheetsOptionsResponseOutput {
	return o
}

// [Optional] Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20
func (o GoogleSheetsOptionsResponseOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleSheetsOptionsResponse) string { return v.Range }).(pulumi.StringOutput)
}

// [Optional] The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.
func (o GoogleSheetsOptionsResponseOutput) SkipLeadingRows() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleSheetsOptionsResponse) string { return v.SkipLeadingRows }).(pulumi.StringOutput)
}

type HivePartitioningOptions struct {
	// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
	Mode *string `pulumi:"mode"`
	// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
	RequirePartitionFilter *bool `pulumi:"requirePartitionFilter"`
	// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
	SourceUriPrefix *string `pulumi:"sourceUriPrefix"`
}

// HivePartitioningOptionsInput is an input type that accepts HivePartitioningOptionsArgs and HivePartitioningOptionsOutput values.
// You can construct a concrete instance of `HivePartitioningOptionsInput` via:
//
//	HivePartitioningOptionsArgs{...}
type HivePartitioningOptionsInput interface {
	pulumi.Input

	ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput
	ToHivePartitioningOptionsOutputWithContext(context.Context) HivePartitioningOptionsOutput
}

type HivePartitioningOptionsArgs struct {
	// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
	RequirePartitionFilter pulumi.BoolPtrInput `pulumi:"requirePartitionFilter"`
	// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
	SourceUriPrefix pulumi.StringPtrInput `pulumi:"sourceUriPrefix"`
}

func (HivePartitioningOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptions)(nil)).Elem()
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput {
	return i.ToHivePartitioningOptionsOutputWithContext(context.Background())
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsOutputWithContext(ctx context.Context) HivePartitioningOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsOutput)
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return i.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i HivePartitioningOptionsArgs) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsOutput).ToHivePartitioningOptionsPtrOutputWithContext(ctx)
}

// HivePartitioningOptionsPtrInput is an input type that accepts HivePartitioningOptionsArgs, HivePartitioningOptionsPtr and HivePartitioningOptionsPtrOutput values.
// You can construct a concrete instance of `HivePartitioningOptionsPtrInput` via:
//
//	        HivePartitioningOptionsArgs{...}
//
//	or:
//
//	        nil
type HivePartitioningOptionsPtrInput interface {
	pulumi.Input

	ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput
	ToHivePartitioningOptionsPtrOutputWithContext(context.Context) HivePartitioningOptionsPtrOutput
}

type hivePartitioningOptionsPtrType HivePartitioningOptionsArgs

func HivePartitioningOptionsPtr(v *HivePartitioningOptionsArgs) HivePartitioningOptionsPtrInput {
	return (*hivePartitioningOptionsPtrType)(v)
}

func (*hivePartitioningOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HivePartitioningOptions)(nil)).Elem()
}

func (i *hivePartitioningOptionsPtrType) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return i.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (i *hivePartitioningOptionsPtrType) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HivePartitioningOptionsPtrOutput)
}

type HivePartitioningOptionsOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptions)(nil)).Elem()
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsOutput() HivePartitioningOptionsOutput {
	return o
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsOutputWithContext(ctx context.Context) HivePartitioningOptionsOutput {
	return o
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return o.ToHivePartitioningOptionsPtrOutputWithContext(context.Background())
}

func (o HivePartitioningOptionsOutput) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HivePartitioningOptions) *HivePartitioningOptions {
		return &v
	}).(HivePartitioningOptionsPtrOutput)
}

// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
func (o HivePartitioningOptionsOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
func (o HivePartitioningOptionsOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
func (o HivePartitioningOptionsOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HivePartitioningOptions) *string { return v.SourceUriPrefix }).(pulumi.StringPtrOutput)
}

type HivePartitioningOptionsPtrOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HivePartitioningOptions)(nil)).Elem()
}

func (o HivePartitioningOptionsPtrOutput) ToHivePartitioningOptionsPtrOutput() HivePartitioningOptionsPtrOutput {
	return o
}

func (o HivePartitioningOptionsPtrOutput) ToHivePartitioningOptionsPtrOutputWithContext(ctx context.Context) HivePartitioningOptionsPtrOutput {
	return o
}

func (o HivePartitioningOptionsPtrOutput) Elem() HivePartitioningOptionsOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) HivePartitioningOptions {
		if v != nil {
			return *v
		}
		var ret HivePartitioningOptions
		return ret
	}).(HivePartitioningOptionsOutput)
}

// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
func (o HivePartitioningOptionsPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
func (o HivePartitioningOptionsPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
func (o HivePartitioningOptionsPtrOutput) SourceUriPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HivePartitioningOptions) *string {
		if v == nil {
			return nil
		}
		return v.SourceUriPrefix
	}).(pulumi.StringPtrOutput)
}

type HivePartitioningOptionsResponse struct {
	// For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.
	Fields []string `pulumi:"fields"`
	// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
	Mode string `pulumi:"mode"`
	// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
	RequirePartitionFilter bool `pulumi:"requirePartitionFilter"`
	// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
	SourceUriPrefix string `pulumi:"sourceUriPrefix"`
}

type HivePartitioningOptionsResponseOutput struct{ *pulumi.OutputState }

func (HivePartitioningOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HivePartitioningOptionsResponse)(nil)).Elem()
}

func (o HivePartitioningOptionsResponseOutput) ToHivePartitioningOptionsResponseOutput() HivePartitioningOptionsResponseOutput {
	return o
}

func (o HivePartitioningOptionsResponseOutput) ToHivePartitioningOptionsResponseOutputWithContext(ctx context.Context) HivePartitioningOptionsResponseOutput {
	return o
}

// For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.
func (o HivePartitioningOptionsResponseOutput) Fields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) []string { return v.Fields }).(pulumi.StringArrayOutput)
}

// [Optional] When set, what mode of hive partitioning to use when reading data. The following modes are supported. (1) AUTO: automatically infer partition key name(s) and type(s). (2) STRINGS: automatically infer partition key name(s). All types are interpreted as strings. (3) CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported types include: AVRO, CSV, JSON, ORC and Parquet.
func (o HivePartitioningOptionsResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Optional] If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with requirePartitionFilter explicitly set to true will fail.
func (o HivePartitioningOptionsResponseOutput) RequirePartitionFilter() pulumi.BoolOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) bool { return v.RequirePartitionFilter }).(pulumi.BoolOutput)
}

// [Optional] When hive partition detection is requested, a common prefix for all source uris should be supplied. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout. gs://bucket/path_to_table/dt=2019-01-01/country=BR/id=7/file.avro gs://bucket/path_to_table/dt=2018-12-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/ (trailing slash does not matter).
func (o HivePartitioningOptionsResponseOutput) SourceUriPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v HivePartitioningOptionsResponse) string { return v.SourceUriPrefix }).(pulumi.StringOutput)
}

type IndexUnusedReasonResponse struct {
	// Specifies the base table involved in the reason that no search index was used.
	BaseTable TableReferenceResponse `pulumi:"baseTable"`
	// Specifies the high-level reason for the scenario when no search index was used.
	Code string `pulumi:"code"`
	// Specifies the name of the unused search index, if available.
	IndexName string `pulumi:"indexName"`
	// Free form human-readable reason for the scenario when no search index was used.
	Message string `pulumi:"message"`
}

type IndexUnusedReasonResponseOutput struct{ *pulumi.OutputState }

func (IndexUnusedReasonResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexUnusedReasonResponse)(nil)).Elem()
}

func (o IndexUnusedReasonResponseOutput) ToIndexUnusedReasonResponseOutput() IndexUnusedReasonResponseOutput {
	return o
}

func (o IndexUnusedReasonResponseOutput) ToIndexUnusedReasonResponseOutputWithContext(ctx context.Context) IndexUnusedReasonResponseOutput {
	return o
}

// Specifies the base table involved in the reason that no search index was used.
func (o IndexUnusedReasonResponseOutput) BaseTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) TableReferenceResponse { return v.BaseTable }).(TableReferenceResponseOutput)
}

// Specifies the high-level reason for the scenario when no search index was used.
func (o IndexUnusedReasonResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Specifies the name of the unused search index, if available.
func (o IndexUnusedReasonResponseOutput) IndexName() pulumi.StringOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) string { return v.IndexName }).(pulumi.StringOutput)
}

// Free form human-readable reason for the scenario when no search index was used.
func (o IndexUnusedReasonResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v IndexUnusedReasonResponse) string { return v.Message }).(pulumi.StringOutput)
}

type IndexUnusedReasonResponseArrayOutput struct{ *pulumi.OutputState }

func (IndexUnusedReasonResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IndexUnusedReasonResponse)(nil)).Elem()
}

func (o IndexUnusedReasonResponseArrayOutput) ToIndexUnusedReasonResponseArrayOutput() IndexUnusedReasonResponseArrayOutput {
	return o
}

func (o IndexUnusedReasonResponseArrayOutput) ToIndexUnusedReasonResponseArrayOutputWithContext(ctx context.Context) IndexUnusedReasonResponseArrayOutput {
	return o
}

func (o IndexUnusedReasonResponseArrayOutput) Index(i pulumi.IntInput) IndexUnusedReasonResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IndexUnusedReasonResponse {
		return vs[0].([]IndexUnusedReasonResponse)[vs[1].(int)]
	}).(IndexUnusedReasonResponseOutput)
}

type IterationResultResponse struct {
	// Time taken to run the iteration in milliseconds.
	DurationMs string `pulumi:"durationMs"`
	// Loss computed on the eval data at the end of iteration.
	EvalLoss float64 `pulumi:"evalLoss"`
	// Index of the iteration, 0 based.
	Index int `pulumi:"index"`
	// Learn rate used for this iteration.
	LearnRate float64 `pulumi:"learnRate"`
	// Loss computed on the training data at the end of iteration.
	TrainingLoss float64 `pulumi:"trainingLoss"`
}

type IterationResultResponseOutput struct{ *pulumi.OutputState }

func (IterationResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IterationResultResponse)(nil)).Elem()
}

func (o IterationResultResponseOutput) ToIterationResultResponseOutput() IterationResultResponseOutput {
	return o
}

func (o IterationResultResponseOutput) ToIterationResultResponseOutputWithContext(ctx context.Context) IterationResultResponseOutput {
	return o
}

// Time taken to run the iteration in milliseconds.
func (o IterationResultResponseOutput) DurationMs() pulumi.StringOutput {
	return o.ApplyT(func(v IterationResultResponse) string { return v.DurationMs }).(pulumi.StringOutput)
}

// Loss computed on the eval data at the end of iteration.
func (o IterationResultResponseOutput) EvalLoss() pulumi.Float64Output {
	return o.ApplyT(func(v IterationResultResponse) float64 { return v.EvalLoss }).(pulumi.Float64Output)
}

// Index of the iteration, 0 based.
func (o IterationResultResponseOutput) Index() pulumi.IntOutput {
	return o.ApplyT(func(v IterationResultResponse) int { return v.Index }).(pulumi.IntOutput)
}

// Learn rate used for this iteration.
func (o IterationResultResponseOutput) LearnRate() pulumi.Float64Output {
	return o.ApplyT(func(v IterationResultResponse) float64 { return v.LearnRate }).(pulumi.Float64Output)
}

// Loss computed on the training data at the end of iteration.
func (o IterationResultResponseOutput) TrainingLoss() pulumi.Float64Output {
	return o.ApplyT(func(v IterationResultResponse) float64 { return v.TrainingLoss }).(pulumi.Float64Output)
}

type IterationResultResponseArrayOutput struct{ *pulumi.OutputState }

func (IterationResultResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IterationResultResponse)(nil)).Elem()
}

func (o IterationResultResponseArrayOutput) ToIterationResultResponseArrayOutput() IterationResultResponseArrayOutput {
	return o
}

func (o IterationResultResponseArrayOutput) ToIterationResultResponseArrayOutputWithContext(ctx context.Context) IterationResultResponseArrayOutput {
	return o
}

func (o IterationResultResponseArrayOutput) Index(i pulumi.IntInput) IterationResultResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IterationResultResponse {
		return vs[0].([]IterationResultResponse)[vs[1].(int)]
	}).(IterationResultResponseOutput)
}

type JobConfiguration struct {
	// [Pick one] Copies a table.
	Copy *JobConfigurationTableCopy `pulumi:"copy"`
	// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun *bool `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract *JobConfigurationExtract `pulumi:"extract"`
	// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs *string `pulumi:"jobTimeoutMs"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels map[string]string `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load *JobConfigurationLoad `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query *JobConfigurationQuery `pulumi:"query"`
}

// JobConfigurationInput is an input type that accepts JobConfigurationArgs and JobConfigurationOutput values.
// You can construct a concrete instance of `JobConfigurationInput` via:
//
//	JobConfigurationArgs{...}
type JobConfigurationInput interface {
	pulumi.Input

	ToJobConfigurationOutput() JobConfigurationOutput
	ToJobConfigurationOutputWithContext(context.Context) JobConfigurationOutput
}

type JobConfigurationArgs struct {
	// [Pick one] Copies a table.
	Copy JobConfigurationTableCopyPtrInput `pulumi:"copy"`
	// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun pulumi.BoolPtrInput `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract JobConfigurationExtractPtrInput `pulumi:"extract"`
	// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs pulumi.StringPtrInput `pulumi:"jobTimeoutMs"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load JobConfigurationLoadPtrInput `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query JobConfigurationQueryPtrInput `pulumi:"query"`
}

func (JobConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (i JobConfigurationArgs) ToJobConfigurationOutput() JobConfigurationOutput {
	return i.ToJobConfigurationOutputWithContext(context.Background())
}

func (i JobConfigurationArgs) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationOutput)
}

func (i JobConfigurationArgs) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return i.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (i JobConfigurationArgs) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationOutput).ToJobConfigurationPtrOutputWithContext(ctx)
}

// JobConfigurationPtrInput is an input type that accepts JobConfigurationArgs, JobConfigurationPtr and JobConfigurationPtrOutput values.
// You can construct a concrete instance of `JobConfigurationPtrInput` via:
//
//	        JobConfigurationArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationPtrInput interface {
	pulumi.Input

	ToJobConfigurationPtrOutput() JobConfigurationPtrOutput
	ToJobConfigurationPtrOutputWithContext(context.Context) JobConfigurationPtrOutput
}

type jobConfigurationPtrType JobConfigurationArgs

func JobConfigurationPtr(v *JobConfigurationArgs) JobConfigurationPtrInput {
	return (*jobConfigurationPtrType)(v)
}

func (*jobConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfiguration)(nil)).Elem()
}

func (i *jobConfigurationPtrType) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return i.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationPtrType) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationPtrOutput)
}

type JobConfigurationOutput struct{ *pulumi.OutputState }

func (JobConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfiguration)(nil)).Elem()
}

func (o JobConfigurationOutput) ToJobConfigurationOutput() JobConfigurationOutput {
	return o
}

func (o JobConfigurationOutput) ToJobConfigurationOutputWithContext(ctx context.Context) JobConfigurationOutput {
	return o
}

func (o JobConfigurationOutput) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return o.ToJobConfigurationPtrOutputWithContext(context.Background())
}

func (o JobConfigurationOutput) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfiguration) *JobConfiguration {
		return &v
	}).(JobConfigurationPtrOutput)
}

// [Pick one] Copies a table.
func (o JobConfigurationOutput) Copy() JobConfigurationTableCopyPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationTableCopy { return v.Copy }).(JobConfigurationTableCopyPtrOutput)
}

// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
func (o JobConfigurationOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *bool { return v.DryRun }).(pulumi.BoolPtrOutput)
}

// [Pick one] Configures an extract job.
func (o JobConfigurationOutput) Extract() JobConfigurationExtractPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationExtract { return v.Extract }).(JobConfigurationExtractPtrOutput)
}

// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
func (o JobConfigurationOutput) JobTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *string { return v.JobTimeoutMs }).(pulumi.StringPtrOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o JobConfigurationOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfiguration) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// [Pick one] Configures a load job.
func (o JobConfigurationOutput) Load() JobConfigurationLoadPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationLoad { return v.Load }).(JobConfigurationLoadPtrOutput)
}

// [Pick one] Configures a query job.
func (o JobConfigurationOutput) Query() JobConfigurationQueryPtrOutput {
	return o.ApplyT(func(v JobConfiguration) *JobConfigurationQuery { return v.Query }).(JobConfigurationQueryPtrOutput)
}

type JobConfigurationPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfiguration)(nil)).Elem()
}

func (o JobConfigurationPtrOutput) ToJobConfigurationPtrOutput() JobConfigurationPtrOutput {
	return o
}

func (o JobConfigurationPtrOutput) ToJobConfigurationPtrOutputWithContext(ctx context.Context) JobConfigurationPtrOutput {
	return o
}

func (o JobConfigurationPtrOutput) Elem() JobConfigurationOutput {
	return o.ApplyT(func(v *JobConfiguration) JobConfiguration {
		if v != nil {
			return *v
		}
		var ret JobConfiguration
		return ret
	}).(JobConfigurationOutput)
}

// [Pick one] Copies a table.
func (o JobConfigurationPtrOutput) Copy() JobConfigurationTableCopyPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationTableCopy {
		if v == nil {
			return nil
		}
		return v.Copy
	}).(JobConfigurationTableCopyPtrOutput)
}

// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
func (o JobConfigurationPtrOutput) DryRun() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.DryRun
	}).(pulumi.BoolPtrOutput)
}

// [Pick one] Configures an extract job.
func (o JobConfigurationPtrOutput) Extract() JobConfigurationExtractPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationExtract {
		if v == nil {
			return nil
		}
		return v.Extract
	}).(JobConfigurationExtractPtrOutput)
}

// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
func (o JobConfigurationPtrOutput) JobTimeoutMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.JobTimeoutMs
	}).(pulumi.StringPtrOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o JobConfigurationPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobConfiguration) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// [Pick one] Configures a load job.
func (o JobConfigurationPtrOutput) Load() JobConfigurationLoadPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationLoad {
		if v == nil {
			return nil
		}
		return v.Load
	}).(JobConfigurationLoadPtrOutput)
}

// [Pick one] Configures a query job.
func (o JobConfigurationPtrOutput) Query() JobConfigurationQueryPtrOutput {
	return o.ApplyT(func(v *JobConfiguration) *JobConfigurationQuery {
		if v == nil {
			return nil
		}
		return v.Query
	}).(JobConfigurationQueryPtrOutput)
}

type JobConfigurationExtract struct {
	// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
	Compression *string `pulumi:"compression"`
	// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat *string `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri *string `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris []string `pulumi:"destinationUris"`
	// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader *bool `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel *ModelReference `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable *TableReference `pulumi:"sourceTable"`
	// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
}

// JobConfigurationExtractInput is an input type that accepts JobConfigurationExtractArgs and JobConfigurationExtractOutput values.
// You can construct a concrete instance of `JobConfigurationExtractInput` via:
//
//	JobConfigurationExtractArgs{...}
type JobConfigurationExtractInput interface {
	pulumi.Input

	ToJobConfigurationExtractOutput() JobConfigurationExtractOutput
	ToJobConfigurationExtractOutputWithContext(context.Context) JobConfigurationExtractOutput
}

type JobConfigurationExtractArgs struct {
	// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat pulumi.StringPtrInput `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri pulumi.StringPtrInput `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris pulumi.StringArrayInput `pulumi:"destinationUris"`
	// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader pulumi.BoolPtrInput `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel ModelReferencePtrInput `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable TableReferencePtrInput `pulumi:"sourceTable"`
	// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
}

func (JobConfigurationExtractArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtract)(nil)).Elem()
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractOutput() JobConfigurationExtractOutput {
	return i.ToJobConfigurationExtractOutputWithContext(context.Background())
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractOutputWithContext(ctx context.Context) JobConfigurationExtractOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractOutput)
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return i.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (i JobConfigurationExtractArgs) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractOutput).ToJobConfigurationExtractPtrOutputWithContext(ctx)
}

// JobConfigurationExtractPtrInput is an input type that accepts JobConfigurationExtractArgs, JobConfigurationExtractPtr and JobConfigurationExtractPtrOutput values.
// You can construct a concrete instance of `JobConfigurationExtractPtrInput` via:
//
//	        JobConfigurationExtractArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationExtractPtrInput interface {
	pulumi.Input

	ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput
	ToJobConfigurationExtractPtrOutputWithContext(context.Context) JobConfigurationExtractPtrOutput
}

type jobConfigurationExtractPtrType JobConfigurationExtractArgs

func JobConfigurationExtractPtr(v *JobConfigurationExtractArgs) JobConfigurationExtractPtrInput {
	return (*jobConfigurationExtractPtrType)(v)
}

func (*jobConfigurationExtractPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationExtract)(nil)).Elem()
}

func (i *jobConfigurationExtractPtrType) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return i.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationExtractPtrType) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationExtractPtrOutput)
}

type JobConfigurationExtractOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtract)(nil)).Elem()
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractOutput() JobConfigurationExtractOutput {
	return o
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractOutputWithContext(ctx context.Context) JobConfigurationExtractOutput {
	return o
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return o.ToJobConfigurationExtractPtrOutputWithContext(context.Background())
}

func (o JobConfigurationExtractOutput) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationExtract) *JobConfigurationExtract {
		return &v
	}).(JobConfigurationExtractPtrOutput)
}

// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.DestinationFormat }).(pulumi.StringPtrOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractOutput) DestinationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.DestinationUri }).(pulumi.StringPtrOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationExtract) []string { return v.DestinationUris }).(pulumi.StringArrayOutput)
}

// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *bool { return v.PrintHeader }).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractOutput) SourceModel() ModelReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *ModelReference { return v.SourceModel }).(ModelReferencePtrOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *TableReference { return v.SourceTable }).(TableReferencePtrOutput)
}

// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
func (o JobConfigurationExtractOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationExtract) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

type JobConfigurationExtractPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationExtract)(nil)).Elem()
}

func (o JobConfigurationExtractPtrOutput) ToJobConfigurationExtractPtrOutput() JobConfigurationExtractPtrOutput {
	return o
}

func (o JobConfigurationExtractPtrOutput) ToJobConfigurationExtractPtrOutputWithContext(ctx context.Context) JobConfigurationExtractPtrOutput {
	return o
}

func (o JobConfigurationExtractPtrOutput) Elem() JobConfigurationExtractOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) JobConfigurationExtract {
		if v != nil {
			return *v
		}
		var ret JobConfigurationExtract
		return ret
	}).(JobConfigurationExtractOutput)
}

// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractPtrOutput) DestinationFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.DestinationFormat
	}).(pulumi.StringPtrOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractPtrOutput) DestinationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.DestinationUri
	}).(pulumi.StringPtrOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractPtrOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) []string {
		if v == nil {
			return nil
		}
		return v.DestinationUris
	}).(pulumi.StringArrayOutput)
}

// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) PrintHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *bool {
		if v == nil {
			return nil
		}
		return v.PrintHeader
	}).(pulumi.BoolPtrOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractPtrOutput) SourceModel() ModelReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *ModelReference {
		if v == nil {
			return nil
		}
		return v.SourceModel
	}).(ModelReferencePtrOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractPtrOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(TableReferencePtrOutput)
}

// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
func (o JobConfigurationExtractPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationExtract) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

type JobConfigurationExtractResponse struct {
	// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
	Compression string `pulumi:"compression"`
	// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
	DestinationFormat string `pulumi:"destinationFormat"`
	// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
	DestinationUri string `pulumi:"destinationUri"`
	// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
	DestinationUris []string `pulumi:"destinationUris"`
	// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
	FieldDelimiter string `pulumi:"fieldDelimiter"`
	// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
	PrintHeader bool `pulumi:"printHeader"`
	// A reference to the model being exported.
	SourceModel ModelReferenceResponse `pulumi:"sourceModel"`
	// A reference to the table being exported.
	SourceTable TableReferenceResponse `pulumi:"sourceTable"`
	// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
	UseAvroLogicalTypes bool `pulumi:"useAvroLogicalTypes"`
}

type JobConfigurationExtractResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationExtractResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationExtractResponse)(nil)).Elem()
}

func (o JobConfigurationExtractResponseOutput) ToJobConfigurationExtractResponseOutput() JobConfigurationExtractResponseOutput {
	return o
}

func (o JobConfigurationExtractResponseOutput) ToJobConfigurationExtractResponseOutputWithContext(ctx context.Context) JobConfigurationExtractResponseOutput {
	return o
}

// [Optional] The compression type to use for exported files. Possible values include GZIP, DEFLATE, SNAPPY, and NONE. The default value is NONE. DEFLATE and SNAPPY are only supported for Avro. Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.Compression }).(pulumi.StringOutput)
}

// [Optional] The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.
func (o JobConfigurationExtractResponseOutput) DestinationFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.DestinationFormat }).(pulumi.StringOutput)
}

// [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.
func (o JobConfigurationExtractResponseOutput) DestinationUri() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.DestinationUri }).(pulumi.StringOutput)
}

// [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.
func (o JobConfigurationExtractResponseOutput) DestinationUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) []string { return v.DestinationUris }).(pulumi.StringArrayOutput)
}

// [Optional] Delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) string { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// [Optional] Whether to print out a header row in the results. Default is true. Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) PrintHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) bool { return v.PrintHeader }).(pulumi.BoolOutput)
}

// A reference to the model being exported.
func (o JobConfigurationExtractResponseOutput) SourceModel() ModelReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) ModelReferenceResponse { return v.SourceModel }).(ModelReferenceResponseOutput)
}

// A reference to the table being exported.
func (o JobConfigurationExtractResponseOutput) SourceTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) TableReferenceResponse { return v.SourceTable }).(TableReferenceResponseOutput)
}

// [Optional] If destinationFormat is set to "AVRO", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). Not applicable when extracting models.
func (o JobConfigurationExtractResponseOutput) UseAvroLogicalTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationExtractResponse) bool { return v.UseAvroLogicalTypes }).(pulumi.BoolOutput)
}

type JobConfigurationLoad struct {
	// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows *bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines *bool `pulumi:"allowQuotedNewlines"`
	// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect *bool `pulumi:"autodetect"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering *Clustering `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties []ConnectionProperty `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs the load job in non-session mode.
	CreateSession *bool `pulumi:"createSession"`
	// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []string `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// [Beta] [Optional] Properties with which to create the destination table if it is new.
	DestinationTableProperties *DestinationTableProperties `pulumi:"destinationTableProperties"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding *string `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter *string `pulumi:"fieldDelimiter"`
	// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType *string `pulumi:"fileSetSpecType"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions *HivePartitioningOptions `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
	IgnoreUnknownValues *bool `pulumi:"ignoreUnknownValues"`
	// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
	JsonExtension *string `pulumi:"jsonExtension"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
	MaxBadRecords *int `pulumi:"maxBadRecords"`
	// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker *string `pulumi:"nullMarker"`
	// [Optional] Options to configure parquet support.
	ParquetOptions *ParquetOptions `pulumi:"parquetOptions"`
	// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
	PreserveAsciiControlCharacters *bool `pulumi:"preserveAsciiControlCharacters"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields []string `pulumi:"projectionFields"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote *string `pulumi:"quote"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `pulumi:"rangePartitioning"`
	// User provided referencing file with the expected reader schema, Available for the format: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri *string `pulumi:"referenceFileSchemaUri"`
	// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema *TableSchema `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	//
	// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline *string `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	//
	// Deprecated: [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat *string `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	SkipLeadingRows *int `pulumi:"skipLeadingRows"`
	// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat *string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `pulumi:"timePartitioning"`
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes *bool `pulumi:"useAvroLogicalTypes"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationLoadInput is an input type that accepts JobConfigurationLoadArgs and JobConfigurationLoadOutput values.
// You can construct a concrete instance of `JobConfigurationLoadInput` via:
//
//	JobConfigurationLoadArgs{...}
type JobConfigurationLoadInput interface {
	pulumi.Input

	ToJobConfigurationLoadOutput() JobConfigurationLoadOutput
	ToJobConfigurationLoadOutputWithContext(context.Context) JobConfigurationLoadOutput
}

type JobConfigurationLoadArgs struct {
	// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows pulumi.BoolPtrInput `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines pulumi.BoolPtrInput `pulumi:"allowQuotedNewlines"`
	// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect pulumi.BoolPtrInput `pulumi:"autodetect"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringPtrInput `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties ConnectionPropertyArrayInput `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs the load job in non-session mode.
	CreateSession pulumi.BoolPtrInput `pulumi:"createSession"`
	// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes pulumi.StringArrayInput `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// [Beta] [Optional] Properties with which to create the destination table if it is new.
	DestinationTableProperties DestinationTablePropertiesPtrInput `pulumi:"destinationTableProperties"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter pulumi.StringPtrInput `pulumi:"fieldDelimiter"`
	// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType pulumi.StringPtrInput `pulumi:"fileSetSpecType"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions HivePartitioningOptionsPtrInput `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
	IgnoreUnknownValues pulumi.BoolPtrInput `pulumi:"ignoreUnknownValues"`
	// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
	JsonExtension pulumi.StringPtrInput `pulumi:"jsonExtension"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
	MaxBadRecords pulumi.IntPtrInput `pulumi:"maxBadRecords"`
	// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker pulumi.StringPtrInput `pulumi:"nullMarker"`
	// [Optional] Options to configure parquet support.
	ParquetOptions ParquetOptionsPtrInput `pulumi:"parquetOptions"`
	// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
	PreserveAsciiControlCharacters pulumi.BoolPtrInput `pulumi:"preserveAsciiControlCharacters"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields pulumi.StringArrayInput `pulumi:"projectionFields"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote pulumi.StringPtrInput `pulumi:"quote"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningPtrInput `pulumi:"rangePartitioning"`
	// User provided referencing file with the expected reader schema, Available for the format: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri pulumi.StringPtrInput `pulumi:"referenceFileSchemaUri"`
	// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema TableSchemaPtrInput `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	//
	// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline pulumi.StringPtrInput `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	//
	// Deprecated: [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat pulumi.StringPtrInput `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	SkipLeadingRows pulumi.IntPtrInput `pulumi:"skipLeadingRows"`
	// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris pulumi.StringArrayInput `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningPtrInput `pulumi:"timePartitioning"`
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes pulumi.BoolPtrInput `pulumi:"useAvroLogicalTypes"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationLoadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoad)(nil)).Elem()
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadOutput() JobConfigurationLoadOutput {
	return i.ToJobConfigurationLoadOutputWithContext(context.Background())
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadOutputWithContext(ctx context.Context) JobConfigurationLoadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadOutput)
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return i.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (i JobConfigurationLoadArgs) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadOutput).ToJobConfigurationLoadPtrOutputWithContext(ctx)
}

// JobConfigurationLoadPtrInput is an input type that accepts JobConfigurationLoadArgs, JobConfigurationLoadPtr and JobConfigurationLoadPtrOutput values.
// You can construct a concrete instance of `JobConfigurationLoadPtrInput` via:
//
//	        JobConfigurationLoadArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationLoadPtrInput interface {
	pulumi.Input

	ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput
	ToJobConfigurationLoadPtrOutputWithContext(context.Context) JobConfigurationLoadPtrOutput
}

type jobConfigurationLoadPtrType JobConfigurationLoadArgs

func JobConfigurationLoadPtr(v *JobConfigurationLoadArgs) JobConfigurationLoadPtrInput {
	return (*jobConfigurationLoadPtrType)(v)
}

func (*jobConfigurationLoadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationLoad)(nil)).Elem()
}

func (i *jobConfigurationLoadPtrType) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return i.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationLoadPtrType) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationLoadPtrOutput)
}

type JobConfigurationLoadOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoad)(nil)).Elem()
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadOutput() JobConfigurationLoadOutput {
	return o
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadOutputWithContext(ctx context.Context) JobConfigurationLoadOutput {
	return o
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return o.ToJobConfigurationLoadPtrOutputWithContext(context.Background())
}

func (o JobConfigurationLoadOutput) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationLoad) *JobConfigurationLoad {
		return &v
	}).(JobConfigurationLoadPtrOutput)
}

// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.AllowJaggedRows }).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.AllowQuotedNewlines }).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.Autodetect }).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationLoadOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *Clustering { return v.Clustering }).(ClusteringPtrOutput)
}

// Connection properties.
func (o JobConfigurationLoadOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []ConnectionProperty { return v.ConnectionProperties }).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs the load job in non-session mode.
func (o JobConfigurationLoadOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.CreateSession }).(pulumi.BoolPtrOutput)
}

// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.DecimalTargetTypes }).(pulumi.StringArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationLoadOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *EncryptionConfiguration { return v.DestinationEncryptionConfiguration }).(EncryptionConfigurationPtrOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// [Beta] [Optional] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadOutput) DestinationTableProperties() DestinationTablePropertiesPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *DestinationTableProperties { return v.DestinationTableProperties }).(DestinationTablePropertiesPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o JobConfigurationLoadOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o JobConfigurationLoadOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.FieldDelimiter }).(pulumi.StringPtrOutput)
}

// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o JobConfigurationLoadOutput) FileSetSpecType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.FileSetSpecType }).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o JobConfigurationLoadOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *HivePartitioningOptions { return v.HivePartitioningOptions }).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
func (o JobConfigurationLoadOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.IgnoreUnknownValues }).(pulumi.BoolPtrOutput)
}

// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
func (o JobConfigurationLoadOutput) JsonExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.JsonExtension }).(pulumi.StringPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
func (o JobConfigurationLoadOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *int { return v.MaxBadRecords }).(pulumi.IntPtrOutput)
}

// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.NullMarker }).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure parquet support.
func (o JobConfigurationLoadOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *ParquetOptions { return v.ParquetOptions }).(ParquetOptionsPtrOutput)
}

// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.ProjectionFields }).(pulumi.StringArrayOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o JobConfigurationLoadOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.Quote }).(pulumi.StringPtrOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *RangePartitioning { return v.RangePartitioning }).(RangePartitioningPtrOutput)
}

// User provided referencing file with the expected reader schema, Available for the format: AVRO, PARQUET, ORC.
func (o JobConfigurationLoadOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.ReferenceFileSchemaUri }).(pulumi.StringPtrOutput)
}

// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TableSchema { return v.Schema }).(TableSchemaPtrOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
//
// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadOutput) SchemaInline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SchemaInline }).(pulumi.StringPtrOutput)
}

// [Deprecated] The format of the schemaInline property.
//
// Deprecated: [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadOutput) SchemaInlineFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SchemaInlineFormat }).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
func (o JobConfigurationLoadOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *int { return v.SkipLeadingRows }).(pulumi.IntPtrOutput)
}

// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoad) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *TimePartitioning { return v.TimePartitioning }).(TimePartitioningPtrOutput)
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o JobConfigurationLoadOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *bool { return v.UseAvroLogicalTypes }).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationLoad) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationLoadPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationLoad)(nil)).Elem()
}

func (o JobConfigurationLoadPtrOutput) ToJobConfigurationLoadPtrOutput() JobConfigurationLoadPtrOutput {
	return o
}

func (o JobConfigurationLoadPtrOutput) ToJobConfigurationLoadPtrOutputWithContext(ctx context.Context) JobConfigurationLoadPtrOutput {
	return o
}

func (o JobConfigurationLoadPtrOutput) Elem() JobConfigurationLoadOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) JobConfigurationLoad {
		if v != nil {
			return *v
		}
		var ret JobConfigurationLoad
		return ret
	}).(JobConfigurationLoadOutput)
}

// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadPtrOutput) AllowJaggedRows() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowJaggedRows
	}).(pulumi.BoolPtrOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadPtrOutput) AllowQuotedNewlines() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.AllowQuotedNewlines
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadPtrOutput) Autodetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.Autodetect
	}).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationLoadPtrOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *Clustering {
		if v == nil {
			return nil
		}
		return v.Clustering
	}).(ClusteringPtrOutput)
}

// Connection properties.
func (o JobConfigurationLoadPtrOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []ConnectionProperty {
		if v == nil {
			return nil
		}
		return v.ConnectionProperties
	}).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs the load job in non-session mode.
func (o JobConfigurationLoadPtrOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSession
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadPtrOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.DecimalTargetTypes
	}).(pulumi.StringArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationLoadPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// [Beta] [Optional] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadPtrOutput) DestinationTableProperties() DestinationTablePropertiesPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *DestinationTableProperties {
		if v == nil {
			return nil
		}
		return v.DestinationTableProperties
	}).(DestinationTablePropertiesPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o JobConfigurationLoadPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o JobConfigurationLoadPtrOutput) FieldDelimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.FieldDelimiter
	}).(pulumi.StringPtrOutput)
}

// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o JobConfigurationLoadPtrOutput) FileSetSpecType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.FileSetSpecType
	}).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o JobConfigurationLoadPtrOutput) HivePartitioningOptions() HivePartitioningOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *HivePartitioningOptions {
		if v == nil {
			return nil
		}
		return v.HivePartitioningOptions
	}).(HivePartitioningOptionsPtrOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
func (o JobConfigurationLoadPtrOutput) IgnoreUnknownValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.IgnoreUnknownValues
	}).(pulumi.BoolPtrOutput)
}

// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
func (o JobConfigurationLoadPtrOutput) JsonExtension() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.JsonExtension
	}).(pulumi.StringPtrOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
func (o JobConfigurationLoadPtrOutput) MaxBadRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *int {
		if v == nil {
			return nil
		}
		return v.MaxBadRecords
	}).(pulumi.IntPtrOutput)
}

// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadPtrOutput) NullMarker() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.NullMarker
	}).(pulumi.StringPtrOutput)
}

// [Optional] Options to configure parquet support.
func (o JobConfigurationLoadPtrOutput) ParquetOptions() ParquetOptionsPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *ParquetOptions {
		if v == nil {
			return nil
		}
		return v.ParquetOptions
	}).(ParquetOptionsPtrOutput)
}

// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadPtrOutput) PreserveAsciiControlCharacters() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveAsciiControlCharacters
	}).(pulumi.BoolPtrOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadPtrOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.ProjectionFields
	}).(pulumi.StringArrayOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o JobConfigurationLoadPtrOutput) Quote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.Quote
	}).(pulumi.StringPtrOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadPtrOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *RangePartitioning {
		if v == nil {
			return nil
		}
		return v.RangePartitioning
	}).(RangePartitioningPtrOutput)
}

// User provided referencing file with the expected reader schema, Available for the format: AVRO, PARQUET, ORC.
func (o JobConfigurationLoadPtrOutput) ReferenceFileSchemaUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.ReferenceFileSchemaUri
	}).(pulumi.StringPtrOutput)
}

// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadPtrOutput) Schema() TableSchemaPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TableSchema {
		if v == nil {
			return nil
		}
		return v.Schema
	}).(TableSchemaPtrOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
//
// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadPtrOutput) SchemaInline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SchemaInline
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] The format of the schemaInline property.
//
// Deprecated: [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadPtrOutput) SchemaInlineFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SchemaInlineFormat
	}).(pulumi.StringPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
func (o JobConfigurationLoadPtrOutput) SkipLeadingRows() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *int {
		if v == nil {
			return nil
		}
		return v.SkipLeadingRows
	}).(pulumi.IntPtrOutput)
}

// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadPtrOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) []string {
		if v == nil {
			return nil
		}
		return v.SourceUris
	}).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadPtrOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *TimePartitioning {
		if v == nil {
			return nil
		}
		return v.TimePartitioning
	}).(TimePartitioningPtrOutput)
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o JobConfigurationLoadPtrOutput) UseAvroLogicalTypes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *bool {
		if v == nil {
			return nil
		}
		return v.UseAvroLogicalTypes
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationLoad) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobConfigurationLoadResponse struct {
	// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
	AllowJaggedRows bool `pulumi:"allowJaggedRows"`
	// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
	AllowQuotedNewlines bool `pulumi:"allowQuotedNewlines"`
	// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
	Autodetect bool `pulumi:"autodetect"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringResponse `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties []ConnectionPropertyResponse `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition string `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs the load job in non-session mode.
	CreateSession bool `pulumi:"createSession"`
	// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
	DecimalTargetTypes []string `pulumi:"decimalTargetTypes"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationResponse `pulumi:"destinationEncryptionConfiguration"`
	// [Required] The destination table to load the data into.
	DestinationTable TableReferenceResponse `pulumi:"destinationTable"`
	// [Beta] [Optional] Properties with which to create the destination table if it is new.
	DestinationTableProperties DestinationTablePropertiesResponse `pulumi:"destinationTableProperties"`
	// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
	Encoding string `pulumi:"encoding"`
	// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
	FieldDelimiter string `pulumi:"fieldDelimiter"`
	// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
	FileSetSpecType string `pulumi:"fileSetSpecType"`
	// [Optional] Options to configure hive partitioning support.
	HivePartitioningOptions HivePartitioningOptionsResponse `pulumi:"hivePartitioningOptions"`
	// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
	IgnoreUnknownValues bool `pulumi:"ignoreUnknownValues"`
	// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
	JsonExtension string `pulumi:"jsonExtension"`
	// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
	MaxBadRecords int `pulumi:"maxBadRecords"`
	// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
	NullMarker string `pulumi:"nullMarker"`
	// [Optional] Options to configure parquet support.
	ParquetOptions ParquetOptionsResponse `pulumi:"parquetOptions"`
	// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
	PreserveAsciiControlCharacters bool `pulumi:"preserveAsciiControlCharacters"`
	// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
	ProjectionFields []string `pulumi:"projectionFields"`
	// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
	Quote string `pulumi:"quote"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningResponse `pulumi:"rangePartitioning"`
	// User provided referencing file with the expected reader schema, Available for the format: AVRO, PARQUET, ORC.
	ReferenceFileSchemaUri string `pulumi:"referenceFileSchemaUri"`
	// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
	Schema TableSchemaResponse `pulumi:"schema"`
	// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	//
	// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
	SchemaInline string `pulumi:"schemaInline"`
	// [Deprecated] The format of the schemaInline property.
	//
	// Deprecated: [Deprecated] The format of the schemaInline property.
	SchemaInlineFormat string `pulumi:"schemaInlineFormat"`
	// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
	SkipLeadingRows int `pulumi:"skipLeadingRows"`
	// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
	SourceFormat string `pulumi:"sourceFormat"`
	// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
	SourceUris []string `pulumi:"sourceUris"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningResponse `pulumi:"timePartitioning"`
	// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
	UseAvroLogicalTypes bool `pulumi:"useAvroLogicalTypes"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition string `pulumi:"writeDisposition"`
}

type JobConfigurationLoadResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationLoadResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationLoadResponse)(nil)).Elem()
}

func (o JobConfigurationLoadResponseOutput) ToJobConfigurationLoadResponseOutput() JobConfigurationLoadResponseOutput {
	return o
}

func (o JobConfigurationLoadResponseOutput) ToJobConfigurationLoadResponseOutputWithContext(ctx context.Context) JobConfigurationLoadResponseOutput {
	return o
}

// [Optional] Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadResponseOutput) AllowJaggedRows() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.AllowJaggedRows }).(pulumi.BoolOutput)
}

// Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.
func (o JobConfigurationLoadResponseOutput) AllowQuotedNewlines() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.AllowQuotedNewlines }).(pulumi.BoolOutput)
}

// [Optional] Indicates if we should automatically infer the options and schema for CSV and JSON sources.
func (o JobConfigurationLoadResponseOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationLoadResponseOutput) Clustering() ClusteringResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) ClusteringResponse { return v.Clustering }).(ClusteringResponseOutput)
}

// Connection properties.
func (o JobConfigurationLoadResponseOutput) ConnectionProperties() ConnectionPropertyResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []ConnectionPropertyResponse { return v.ConnectionProperties }).(ConnectionPropertyResponseArrayOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadResponseOutput) CreateDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.CreateDisposition }).(pulumi.StringOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs the load job in non-session mode.
func (o JobConfigurationLoadResponseOutput) CreateSession() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.CreateSession }).(pulumi.BoolOutput)
}

// [Optional] Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is ["NUMERIC", "BIGNUMERIC"]. If (precision,scale) is: (38,9) -> NUMERIC; (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); (76,38) -> BIGNUMERIC; (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, ["BIGNUMERIC", "NUMERIC"] is the same as ["NUMERIC", "BIGNUMERIC"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to ["NUMERIC", "STRING"] for ORC and ["NUMERIC"] for the other file formats.
func (o JobConfigurationLoadResponseOutput) DecimalTargetTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.DecimalTargetTypes }).(pulumi.StringArrayOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationLoadResponseOutput) DestinationEncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) EncryptionConfigurationResponse {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationResponseOutput)
}

// [Required] The destination table to load the data into.
func (o JobConfigurationLoadResponseOutput) DestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) TableReferenceResponse { return v.DestinationTable }).(TableReferenceResponseOutput)
}

// [Beta] [Optional] Properties with which to create the destination table if it is new.
func (o JobConfigurationLoadResponseOutput) DestinationTableProperties() DestinationTablePropertiesResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) DestinationTablePropertiesResponse {
		return v.DestinationTableProperties
	}).(DestinationTablePropertiesResponseOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.
func (o JobConfigurationLoadResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// [Optional] The separator for fields in a CSV file. The separator can be any ISO-8859-1 single-byte character. To use a character in the range 128-255, you must encode the character as UTF8. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence "\t" to specify a tab separator. The default value is a comma (',').
func (o JobConfigurationLoadResponseOutput) FieldDelimiter() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.FieldDelimiter }).(pulumi.StringOutput)
}

// [Optional] Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.
func (o JobConfigurationLoadResponseOutput) FileSetSpecType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.FileSetSpecType }).(pulumi.StringOutput)
}

// [Optional] Options to configure hive partitioning support.
func (o JobConfigurationLoadResponseOutput) HivePartitioningOptions() HivePartitioningOptionsResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) HivePartitioningOptionsResponse { return v.HivePartitioningOptions }).(HivePartitioningOptionsResponseOutput)
}

// [Optional] Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names
func (o JobConfigurationLoadResponseOutput) IgnoreUnknownValues() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.IgnoreUnknownValues }).(pulumi.BoolOutput)
}

// [Optional] If sourceFormat is set to newline-delimited JSON, indicates whether it should be processed as a JSON variant such as GeoJSON. For a sourceFormat other than JSON, omit this field. If the sourceFormat is newline-delimited JSON: - for newline-delimited GeoJSON: set to GEOJSON.
func (o JobConfigurationLoadResponseOutput) JsonExtension() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.JsonExtension }).(pulumi.StringOutput)
}

// [Optional] The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. This is only valid for CSV and JSON. The default value is 0, which requires that all records are valid.
func (o JobConfigurationLoadResponseOutput) MaxBadRecords() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) int { return v.MaxBadRecords }).(pulumi.IntOutput)
}

// [Optional] Specifies a string that represents a null value in a CSV file. For example, if you specify "\N", BigQuery interprets "\N" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.
func (o JobConfigurationLoadResponseOutput) NullMarker() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.NullMarker }).(pulumi.StringOutput)
}

// [Optional] Options to configure parquet support.
func (o JobConfigurationLoadResponseOutput) ParquetOptions() ParquetOptionsResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) ParquetOptionsResponse { return v.ParquetOptions }).(ParquetOptionsResponseOutput)
}

// [Optional] Preserves the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\x00' to '\x1F') when loading from CSV. Only applicable to CSV, ignored for other formats.
func (o JobConfigurationLoadResponseOutput) PreserveAsciiControlCharacters() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.PreserveAsciiControlCharacters }).(pulumi.BoolOutput)
}

// If sourceFormat is set to "DATASTORE_BACKUP", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.
func (o JobConfigurationLoadResponseOutput) ProjectionFields() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.ProjectionFields }).(pulumi.StringArrayOutput)
}

// [Optional] The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true.
func (o JobConfigurationLoadResponseOutput) Quote() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.Quote }).(pulumi.StringOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadResponseOutput) RangePartitioning() RangePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) RangePartitioningResponse { return v.RangePartitioning }).(RangePartitioningResponseOutput)
}

// User provided referencing file with the expected reader schema, Available for the format: AVRO, PARQUET, ORC.
func (o JobConfigurationLoadResponseOutput) ReferenceFileSchemaUri() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.ReferenceFileSchemaUri }).(pulumi.StringOutput)
}

// [Optional] The schema for the destination table. The schema can be omitted if the destination table already exists, or if you're loading data from Google Cloud Datastore.
func (o JobConfigurationLoadResponseOutput) Schema() TableSchemaResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) TableSchemaResponse { return v.Schema }).(TableSchemaResponseOutput)
}

// [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
//
// Deprecated: [Deprecated] The inline schema. For CSV schemas, specify as "Field1:Type1[,Field2:Type2]*". For example, "foo:STRING, bar:INTEGER, baz:FLOAT".
func (o JobConfigurationLoadResponseOutput) SchemaInline() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.SchemaInline }).(pulumi.StringOutput)
}

// [Deprecated] The format of the schemaInline property.
//
// Deprecated: [Deprecated] The format of the schemaInline property.
func (o JobConfigurationLoadResponseOutput) SchemaInlineFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.SchemaInlineFormat }).(pulumi.StringOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationLoadResponseOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// [Optional] The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped.
func (o JobConfigurationLoadResponseOutput) SkipLeadingRows() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) int { return v.SkipLeadingRows }).(pulumi.IntOutput)
}

// [Optional] The format of the data files. For CSV files, specify "CSV". For datastore backups, specify "DATASTORE_BACKUP". For newline-delimited JSON, specify "NEWLINE_DELIMITED_JSON". For Avro, specify "AVRO". For parquet, specify "PARQUET". For orc, specify "ORC". The default value is CSV.
func (o JobConfigurationLoadResponseOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.
func (o JobConfigurationLoadResponseOutput) SourceUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) []string { return v.SourceUris }).(pulumi.StringArrayOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationLoadResponseOutput) TimePartitioning() TimePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) TimePartitioningResponse { return v.TimePartitioning }).(TimePartitioningResponseOutput)
}

// [Optional] If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).
func (o JobConfigurationLoadResponseOutput) UseAvroLogicalTypes() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) bool { return v.UseAvroLogicalTypes }).(pulumi.BoolOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationLoadResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationLoadResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

type JobConfigurationQuery struct {
	// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults *bool `pulumi:"allowLargeResults"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering *Clustering `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties []ConnectionProperty `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
	Continuous *bool `pulumi:"continuous"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
	CreateSession *bool `pulumi:"createSession"`
	// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	DefaultDataset *DatasetReference `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	FlattenResults *bool `pulumi:"flattenResults"`
	// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBillingTier *int `pulumi:"maximumBillingTier"`
	// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled *string `pulumi:"maximumBytesBilled"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode *string `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	//
	// Deprecated: [Deprecated] This property is deprecated.
	PreserveNulls *bool `pulumi:"preserveNulls"`
	// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority *string `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	Query *string `pulumi:"query"`
	// Query parameters for standard SQL queries.
	QueryParameters []QueryParameter `pulumi:"queryParameters"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning *RangePartitioning `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	TableDefinitions *ExternalDataConfiguration `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning *TimePartitioning `pulumi:"timePartitioning"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql *bool `pulumi:"useLegacySql"`
	// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache *bool `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResource `pulumi:"userDefinedFunctionResources"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationQueryInput is an input type that accepts JobConfigurationQueryArgs and JobConfigurationQueryOutput values.
// You can construct a concrete instance of `JobConfigurationQueryInput` via:
//
//	JobConfigurationQueryArgs{...}
type JobConfigurationQueryInput interface {
	pulumi.Input

	ToJobConfigurationQueryOutput() JobConfigurationQueryOutput
	ToJobConfigurationQueryOutputWithContext(context.Context) JobConfigurationQueryOutput
}

type JobConfigurationQueryArgs struct {
	// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults pulumi.BoolPtrInput `pulumi:"allowLargeResults"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringPtrInput `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties ConnectionPropertyArrayInput `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
	Continuous pulumi.BoolPtrInput `pulumi:"continuous"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
	CreateSession pulumi.BoolPtrInput `pulumi:"createSession"`
	// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	DefaultDataset DatasetReferencePtrInput `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	FlattenResults pulumi.BoolPtrInput `pulumi:"flattenResults"`
	// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBillingTier pulumi.IntPtrInput `pulumi:"maximumBillingTier"`
	// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled pulumi.StringPtrInput `pulumi:"maximumBytesBilled"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode pulumi.StringPtrInput `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	//
	// Deprecated: [Deprecated] This property is deprecated.
	PreserveNulls pulumi.BoolPtrInput `pulumi:"preserveNulls"`
	// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority pulumi.StringPtrInput `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Query parameters for standard SQL queries.
	QueryParameters QueryParameterArrayInput `pulumi:"queryParameters"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningPtrInput `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions pulumi.StringArrayInput `pulumi:"schemaUpdateOptions"`
	// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	TableDefinitions ExternalDataConfigurationPtrInput `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningPtrInput `pulumi:"timePartitioning"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
	// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache pulumi.BoolPtrInput `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources UserDefinedFunctionResourceArrayInput `pulumi:"userDefinedFunctionResources"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQuery)(nil)).Elem()
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryOutput() JobConfigurationQueryOutput {
	return i.ToJobConfigurationQueryOutputWithContext(context.Background())
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryOutputWithContext(ctx context.Context) JobConfigurationQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryOutput)
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return i.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (i JobConfigurationQueryArgs) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryOutput).ToJobConfigurationQueryPtrOutputWithContext(ctx)
}

// JobConfigurationQueryPtrInput is an input type that accepts JobConfigurationQueryArgs, JobConfigurationQueryPtr and JobConfigurationQueryPtrOutput values.
// You can construct a concrete instance of `JobConfigurationQueryPtrInput` via:
//
//	        JobConfigurationQueryArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationQueryPtrInput interface {
	pulumi.Input

	ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput
	ToJobConfigurationQueryPtrOutputWithContext(context.Context) JobConfigurationQueryPtrOutput
}

type jobConfigurationQueryPtrType JobConfigurationQueryArgs

func JobConfigurationQueryPtr(v *JobConfigurationQueryArgs) JobConfigurationQueryPtrInput {
	return (*jobConfigurationQueryPtrType)(v)
}

func (*jobConfigurationQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationQuery)(nil)).Elem()
}

func (i *jobConfigurationQueryPtrType) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return i.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationQueryPtrType) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationQueryPtrOutput)
}

type JobConfigurationQueryOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQuery)(nil)).Elem()
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryOutput() JobConfigurationQueryOutput {
	return o
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryOutputWithContext(ctx context.Context) JobConfigurationQueryOutput {
	return o
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return o.ToJobConfigurationQueryPtrOutputWithContext(context.Background())
}

func (o JobConfigurationQueryOutput) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationQuery) *JobConfigurationQuery {
		return &v
	}).(JobConfigurationQueryPtrOutput)
}

// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.AllowLargeResults }).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationQueryOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *Clustering { return v.Clustering }).(ClusteringPtrOutput)
}

// Connection properties.
func (o JobConfigurationQueryOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []ConnectionProperty { return v.ConnectionProperties }).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
func (o JobConfigurationQueryOutput) Continuous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.Continuous }).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
func (o JobConfigurationQueryOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.CreateSession }).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
func (o JobConfigurationQueryOutput) DefaultDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *DatasetReference { return v.DefaultDataset }).(DatasetReferencePtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationQueryOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *EncryptionConfiguration { return v.DestinationEncryptionConfiguration }).(EncryptionConfigurationPtrOutput)
}

// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
func (o JobConfigurationQueryOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.FlattenResults }).(pulumi.BoolPtrOutput)
}

// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *int { return v.MaximumBillingTier }).(pulumi.IntPtrOutput)
}

// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.MaximumBytesBilled }).(pulumi.StringPtrOutput)
}

// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.ParameterMode }).(pulumi.StringPtrOutput)
}

// [Deprecated] This property is deprecated.
//
// Deprecated: [Deprecated] This property is deprecated.
func (o JobConfigurationQueryOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.PreserveNulls }).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.Priority }).(pulumi.StringPtrOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
func (o JobConfigurationQueryOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Query parameters for standard SQL queries.
func (o JobConfigurationQueryOutput) QueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []QueryParameter { return v.QueryParameters }).(QueryParameterArrayOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *RangePartitioning { return v.RangePartitioning }).(RangePartitioningPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
func (o JobConfigurationQueryOutput) TableDefinitions() ExternalDataConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *ExternalDataConfiguration { return v.TableDefinitions }).(ExternalDataConfigurationPtrOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *TimePartitioning { return v.TimePartitioning }).(TimePartitioningPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *bool { return v.UseQueryCache }).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v JobConfigurationQuery) []UserDefinedFunctionResource { return v.UserDefinedFunctionResources }).(UserDefinedFunctionResourceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationQuery) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationQueryPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationQuery)(nil)).Elem()
}

func (o JobConfigurationQueryPtrOutput) ToJobConfigurationQueryPtrOutput() JobConfigurationQueryPtrOutput {
	return o
}

func (o JobConfigurationQueryPtrOutput) ToJobConfigurationQueryPtrOutputWithContext(ctx context.Context) JobConfigurationQueryPtrOutput {
	return o
}

func (o JobConfigurationQueryPtrOutput) Elem() JobConfigurationQueryOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) JobConfigurationQuery {
		if v != nil {
			return *v
		}
		var ret JobConfigurationQuery
		return ret
	}).(JobConfigurationQueryOutput)
}

// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryPtrOutput) AllowLargeResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.AllowLargeResults
	}).(pulumi.BoolPtrOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationQueryPtrOutput) Clustering() ClusteringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *Clustering {
		if v == nil {
			return nil
		}
		return v.Clustering
	}).(ClusteringPtrOutput)
}

// Connection properties.
func (o JobConfigurationQueryPtrOutput) ConnectionProperties() ConnectionPropertyArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []ConnectionProperty {
		if v == nil {
			return nil
		}
		return v.ConnectionProperties
	}).(ConnectionPropertyArrayOutput)
}

// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
func (o JobConfigurationQueryPtrOutput) Continuous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.Continuous
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
func (o JobConfigurationQueryPtrOutput) CreateSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.CreateSession
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
func (o JobConfigurationQueryPtrOutput) DefaultDataset() DatasetReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *DatasetReference {
		if v == nil {
			return nil
		}
		return v.DefaultDataset
	}).(DatasetReferencePtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationQueryPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
func (o JobConfigurationQueryPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryPtrOutput) FlattenResults() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.FlattenResults
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryPtrOutput) MaximumBillingTier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *int {
		if v == nil {
			return nil
		}
		return v.MaximumBillingTier
	}).(pulumi.IntPtrOutput)
}

// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryPtrOutput) MaximumBytesBilled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.MaximumBytesBilled
	}).(pulumi.StringPtrOutput)
}

// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryPtrOutput) ParameterMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.ParameterMode
	}).(pulumi.StringPtrOutput)
}

// [Deprecated] This property is deprecated.
//
// Deprecated: [Deprecated] This property is deprecated.
func (o JobConfigurationQueryPtrOutput) PreserveNulls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.PreserveNulls
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryPtrOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.Priority
	}).(pulumi.StringPtrOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
func (o JobConfigurationQueryPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// Query parameters for standard SQL queries.
func (o JobConfigurationQueryPtrOutput) QueryParameters() QueryParameterArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []QueryParameter {
		if v == nil {
			return nil
		}
		return v.QueryParameters
	}).(QueryParameterArrayOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryPtrOutput) RangePartitioning() RangePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *RangePartitioning {
		if v == nil {
			return nil
		}
		return v.RangePartitioning
	}).(RangePartitioningPtrOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryPtrOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []string {
		if v == nil {
			return nil
		}
		return v.SchemaUpdateOptions
	}).(pulumi.StringArrayOutput)
}

// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
func (o JobConfigurationQueryPtrOutput) TableDefinitions() ExternalDataConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *ExternalDataConfiguration {
		if v == nil {
			return nil
		}
		return v.TableDefinitions
	}).(ExternalDataConfigurationPtrOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryPtrOutput) TimePartitioning() TimePartitioningPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *TimePartitioning {
		if v == nil {
			return nil
		}
		return v.TimePartitioning
	}).(TimePartitioningPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryPtrOutput) UseQueryCache() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *bool {
		if v == nil {
			return nil
		}
		return v.UseQueryCache
	}).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryPtrOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) []UserDefinedFunctionResource {
		if v == nil {
			return nil
		}
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationQuery) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobConfigurationQueryResponse struct {
	// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
	AllowLargeResults bool `pulumi:"allowLargeResults"`
	// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
	Clustering ClusteringResponse `pulumi:"clustering"`
	// Connection properties.
	ConnectionProperties []ConnectionPropertyResponse `pulumi:"connectionProperties"`
	// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
	Continuous bool `pulumi:"continuous"`
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition string `pulumi:"createDisposition"`
	// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
	CreateSession bool `pulumi:"createSession"`
	// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
	DefaultDataset DatasetReferenceResponse `pulumi:"defaultDataset"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationResponse `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
	DestinationTable TableReferenceResponse `pulumi:"destinationTable"`
	// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
	FlattenResults bool `pulumi:"flattenResults"`
	// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBillingTier int `pulumi:"maximumBillingTier"`
	// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
	MaximumBytesBilled string `pulumi:"maximumBytesBilled"`
	// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
	ParameterMode string `pulumi:"parameterMode"`
	// [Deprecated] This property is deprecated.
	//
	// Deprecated: [Deprecated] This property is deprecated.
	PreserveNulls bool `pulumi:"preserveNulls"`
	// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
	Priority string `pulumi:"priority"`
	// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
	Query string `pulumi:"query"`
	// Query parameters for standard SQL queries.
	QueryParameters []QueryParameterResponse `pulumi:"queryParameters"`
	// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
	RangePartitioning RangePartitioningResponse `pulumi:"rangePartitioning"`
	// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
	SchemaUpdateOptions []string `pulumi:"schemaUpdateOptions"`
	// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
	TableDefinitions ExternalDataConfigurationResponse `pulumi:"tableDefinitions"`
	// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
	TimePartitioning TimePartitioningResponse `pulumi:"timePartitioning"`
	// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
	UseLegacySql bool `pulumi:"useLegacySql"`
	// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
	UseQueryCache bool `pulumi:"useQueryCache"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResourceResponse `pulumi:"userDefinedFunctionResources"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition string `pulumi:"writeDisposition"`
}

type JobConfigurationQueryResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationQueryResponse)(nil)).Elem()
}

func (o JobConfigurationQueryResponseOutput) ToJobConfigurationQueryResponseOutput() JobConfigurationQueryResponseOutput {
	return o
}

func (o JobConfigurationQueryResponseOutput) ToJobConfigurationQueryResponseOutputWithContext(ctx context.Context) JobConfigurationQueryResponseOutput {
	return o
}

// [Optional] If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For standard SQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size.
func (o JobConfigurationQueryResponseOutput) AllowLargeResults() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.AllowLargeResults }).(pulumi.BoolOutput)
}

// [Beta] Clustering specification for the destination table. Must be specified with time-based partitioning, data in the table will be first partitioned and subsequently clustered.
func (o JobConfigurationQueryResponseOutput) Clustering() ClusteringResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) ClusteringResponse { return v.Clustering }).(ClusteringResponseOutput)
}

// Connection properties.
func (o JobConfigurationQueryResponseOutput) ConnectionProperties() ConnectionPropertyResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []ConnectionPropertyResponse { return v.ConnectionProperties }).(ConnectionPropertyResponseArrayOutput)
}

// [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.
func (o JobConfigurationQueryResponseOutput) Continuous() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.Continuous }).(pulumi.BoolOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryResponseOutput) CreateDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.CreateDisposition }).(pulumi.StringOutput)
}

// If true, creates a new session, where session id will be a server generated random id. If false, runs query with an existing session_id passed in ConnectionProperty, otherwise runs query in non-session mode.
func (o JobConfigurationQueryResponseOutput) CreateSession() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.CreateSession }).(pulumi.BoolOutput)
}

// [Optional] Specifies the default dataset to use for unqualified table names in the query. Note that this does not alter behavior of unqualified dataset names.
func (o JobConfigurationQueryResponseOutput) DefaultDataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) DatasetReferenceResponse { return v.DefaultDataset }).(DatasetReferenceResponseOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationQueryResponseOutput) DestinationEncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) EncryptionConfigurationResponse {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationResponseOutput)
}

// [Optional] Describes the table where the query results should be stored. If not present, a new table will be created to store the results. This property must be set for large results that exceed the maximum response size.
func (o JobConfigurationQueryResponseOutput) DestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) TableReferenceResponse { return v.DestinationTable }).(TableReferenceResponseOutput)
}

// [Optional] If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For standard SQL queries, this flag is ignored and results are never flattened.
func (o JobConfigurationQueryResponseOutput) FlattenResults() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.FlattenResults }).(pulumi.BoolOutput)
}

// [Optional] Limits the billing tier for this job. Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryResponseOutput) MaximumBillingTier() pulumi.IntOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) int { return v.MaximumBillingTier }).(pulumi.IntOutput)
}

// [Optional] Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.
func (o JobConfigurationQueryResponseOutput) MaximumBytesBilled() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.MaximumBytesBilled }).(pulumi.StringOutput)
}

// Standard SQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.
func (o JobConfigurationQueryResponseOutput) ParameterMode() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.ParameterMode }).(pulumi.StringOutput)
}

// [Deprecated] This property is deprecated.
//
// Deprecated: [Deprecated] This property is deprecated.
func (o JobConfigurationQueryResponseOutput) PreserveNulls() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.PreserveNulls }).(pulumi.BoolOutput)
}

// [Optional] Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.
func (o JobConfigurationQueryResponseOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.Priority }).(pulumi.StringOutput)
}

// [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or standard SQL.
func (o JobConfigurationQueryResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.Query }).(pulumi.StringOutput)
}

// Query parameters for standard SQL queries.
func (o JobConfigurationQueryResponseOutput) QueryParameters() QueryParameterResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []QueryParameterResponse { return v.QueryParameters }).(QueryParameterResponseArrayOutput)
}

// [TrustedTester] Range partitioning specification for this table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryResponseOutput) RangePartitioning() RangePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) RangePartitioningResponse { return v.RangePartitioning }).(RangePartitioningResponseOutput)
}

// Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.
func (o JobConfigurationQueryResponseOutput) SchemaUpdateOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []string { return v.SchemaUpdateOptions }).(pulumi.StringArrayOutput)
}

// [Optional] If querying an external data source outside of BigQuery, describes the data format, location and other properties of the data source. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.
func (o JobConfigurationQueryResponseOutput) TableDefinitions() ExternalDataConfigurationResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) ExternalDataConfigurationResponse { return v.TableDefinitions }).(ExternalDataConfigurationResponseOutput)
}

// Time-based partitioning specification for the destination table. Only one of timePartitioning and rangePartitioning should be specified.
func (o JobConfigurationQueryResponseOutput) TimePartitioning() TimePartitioningResponseOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) TimePartitioningResponse { return v.TimePartitioning }).(TimePartitioningResponseOutput)
}

// Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false.
func (o JobConfigurationQueryResponseOutput) UseLegacySql() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.UseLegacySql }).(pulumi.BoolOutput)
}

// [Optional] Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true.
func (o JobConfigurationQueryResponseOutput) UseQueryCache() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) bool { return v.UseQueryCache }).(pulumi.BoolOutput)
}

// Describes user-defined function resources used in the query.
func (o JobConfigurationQueryResponseOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) []UserDefinedFunctionResourceResponse {
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceResponseArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema from the query result. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationQueryResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationQueryResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

type JobConfigurationResponse struct {
	// [Pick one] Copies a table.
	Copy JobConfigurationTableCopyResponse `pulumi:"copy"`
	// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
	DryRun bool `pulumi:"dryRun"`
	// [Pick one] Configures an extract job.
	Extract JobConfigurationExtractResponse `pulumi:"extract"`
	// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
	JobTimeoutMs string `pulumi:"jobTimeoutMs"`
	// The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
	JobType string `pulumi:"jobType"`
	// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
	Labels map[string]string `pulumi:"labels"`
	// [Pick one] Configures a load job.
	Load JobConfigurationLoadResponse `pulumi:"load"`
	// [Pick one] Configures a query job.
	Query JobConfigurationQueryResponse `pulumi:"query"`
}

type JobConfigurationResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationResponse)(nil)).Elem()
}

func (o JobConfigurationResponseOutput) ToJobConfigurationResponseOutput() JobConfigurationResponseOutput {
	return o
}

func (o JobConfigurationResponseOutput) ToJobConfigurationResponseOutputWithContext(ctx context.Context) JobConfigurationResponseOutput {
	return o
}

// [Pick one] Copies a table.
func (o JobConfigurationResponseOutput) Copy() JobConfigurationTableCopyResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationTableCopyResponse { return v.Copy }).(JobConfigurationTableCopyResponseOutput)
}

// [Optional] If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.
func (o JobConfigurationResponseOutput) DryRun() pulumi.BoolOutput {
	return o.ApplyT(func(v JobConfigurationResponse) bool { return v.DryRun }).(pulumi.BoolOutput)
}

// [Pick one] Configures an extract job.
func (o JobConfigurationResponseOutput) Extract() JobConfigurationExtractResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationExtractResponse { return v.Extract }).(JobConfigurationExtractResponseOutput)
}

// [Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job.
func (o JobConfigurationResponseOutput) JobTimeoutMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationResponse) string { return v.JobTimeoutMs }).(pulumi.StringOutput)
}

// The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.
func (o JobConfigurationResponseOutput) JobType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationResponse) string { return v.JobType }).(pulumi.StringOutput)
}

// The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.
func (o JobConfigurationResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobConfigurationResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// [Pick one] Configures a load job.
func (o JobConfigurationResponseOutput) Load() JobConfigurationLoadResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationLoadResponse { return v.Load }).(JobConfigurationLoadResponseOutput)
}

// [Pick one] Configures a query job.
func (o JobConfigurationResponseOutput) Query() JobConfigurationQueryResponseOutput {
	return o.ApplyT(func(v JobConfigurationResponse) JobConfigurationQueryResponse { return v.Query }).(JobConfigurationQueryResponseOutput)
}

type JobConfigurationTableCopy struct {
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition *string `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration *EncryptionConfiguration `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime interface{} `pulumi:"destinationExpirationTime"`
	// [Required] The destination table
	DestinationTable *TableReference `pulumi:"destinationTable"`
	// [Optional] Supported operation types in table copy job.
	OperationType *string `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable *TableReference `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables []TableReference `pulumi:"sourceTables"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition *string `pulumi:"writeDisposition"`
}

// JobConfigurationTableCopyInput is an input type that accepts JobConfigurationTableCopyArgs and JobConfigurationTableCopyOutput values.
// You can construct a concrete instance of `JobConfigurationTableCopyInput` via:
//
//	JobConfigurationTableCopyArgs{...}
type JobConfigurationTableCopyInput interface {
	pulumi.Input

	ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput
	ToJobConfigurationTableCopyOutputWithContext(context.Context) JobConfigurationTableCopyOutput
}

type JobConfigurationTableCopyArgs struct {
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition pulumi.StringPtrInput `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationPtrInput `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime pulumi.Input `pulumi:"destinationExpirationTime"`
	// [Required] The destination table
	DestinationTable TableReferencePtrInput `pulumi:"destinationTable"`
	// [Optional] Supported operation types in table copy job.
	OperationType pulumi.StringPtrInput `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable TableReferencePtrInput `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables TableReferenceArrayInput `pulumi:"sourceTables"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition pulumi.StringPtrInput `pulumi:"writeDisposition"`
}

func (JobConfigurationTableCopyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopy)(nil)).Elem()
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput {
	return i.ToJobConfigurationTableCopyOutputWithContext(context.Background())
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyOutputWithContext(ctx context.Context) JobConfigurationTableCopyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyOutput)
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return i.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (i JobConfigurationTableCopyArgs) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyOutput).ToJobConfigurationTableCopyPtrOutputWithContext(ctx)
}

// JobConfigurationTableCopyPtrInput is an input type that accepts JobConfigurationTableCopyArgs, JobConfigurationTableCopyPtr and JobConfigurationTableCopyPtrOutput values.
// You can construct a concrete instance of `JobConfigurationTableCopyPtrInput` via:
//
//	        JobConfigurationTableCopyArgs{...}
//
//	or:
//
//	        nil
type JobConfigurationTableCopyPtrInput interface {
	pulumi.Input

	ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput
	ToJobConfigurationTableCopyPtrOutputWithContext(context.Context) JobConfigurationTableCopyPtrOutput
}

type jobConfigurationTableCopyPtrType JobConfigurationTableCopyArgs

func JobConfigurationTableCopyPtr(v *JobConfigurationTableCopyArgs) JobConfigurationTableCopyPtrInput {
	return (*jobConfigurationTableCopyPtrType)(v)
}

func (*jobConfigurationTableCopyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationTableCopy)(nil)).Elem()
}

func (i *jobConfigurationTableCopyPtrType) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return i.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (i *jobConfigurationTableCopyPtrType) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigurationTableCopyPtrOutput)
}

type JobConfigurationTableCopyOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopy)(nil)).Elem()
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyOutput() JobConfigurationTableCopyOutput {
	return o
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyOutputWithContext(ctx context.Context) JobConfigurationTableCopyOutput {
	return o
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return o.ToJobConfigurationTableCopyPtrOutputWithContext(context.Background())
}

func (o JobConfigurationTableCopyOutput) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigurationTableCopy) *JobConfigurationTableCopy {
		return &v
	}).(JobConfigurationTableCopyPtrOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.CreateDisposition }).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *EncryptionConfiguration {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyOutput) DestinationExpirationTime() pulumi.AnyOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) interface{} { return v.DestinationExpirationTime }).(pulumi.AnyOutput)
}

// [Required] The destination table
func (o JobConfigurationTableCopyOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *TableReference { return v.DestinationTable }).(TableReferencePtrOutput)
}

// [Optional] Supported operation types in table copy job.
func (o JobConfigurationTableCopyOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.OperationType }).(pulumi.StringPtrOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *TableReference { return v.SourceTable }).(TableReferencePtrOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyOutput) SourceTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) []TableReference { return v.SourceTables }).(TableReferenceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobConfigurationTableCopy) *string { return v.WriteDisposition }).(pulumi.StringPtrOutput)
}

type JobConfigurationTableCopyPtrOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigurationTableCopy)(nil)).Elem()
}

func (o JobConfigurationTableCopyPtrOutput) ToJobConfigurationTableCopyPtrOutput() JobConfigurationTableCopyPtrOutput {
	return o
}

func (o JobConfigurationTableCopyPtrOutput) ToJobConfigurationTableCopyPtrOutputWithContext(ctx context.Context) JobConfigurationTableCopyPtrOutput {
	return o
}

func (o JobConfigurationTableCopyPtrOutput) Elem() JobConfigurationTableCopyOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) JobConfigurationTableCopy {
		if v != nil {
			return *v
		}
		var ret JobConfigurationTableCopy
		return ret
	}).(JobConfigurationTableCopyOutput)
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyPtrOutput) CreateDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.CreateDisposition
	}).(pulumi.StringPtrOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyPtrOutput) DestinationEncryptionConfiguration() EncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *EncryptionConfiguration {
		if v == nil {
			return nil
		}
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationPtrOutput)
}

// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyPtrOutput) DestinationExpirationTime() pulumi.AnyOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) interface{} {
		if v == nil {
			return nil
		}
		return v.DestinationExpirationTime
	}).(pulumi.AnyOutput)
}

// [Required] The destination table
func (o JobConfigurationTableCopyPtrOutput) DestinationTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *TableReference {
		if v == nil {
			return nil
		}
		return v.DestinationTable
	}).(TableReferencePtrOutput)
}

// [Optional] Supported operation types in table copy job.
func (o JobConfigurationTableCopyPtrOutput) OperationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.OperationType
	}).(pulumi.StringPtrOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyPtrOutput) SourceTable() TableReferencePtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTable
	}).(TableReferencePtrOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyPtrOutput) SourceTables() TableReferenceArrayOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) []TableReference {
		if v == nil {
			return nil
		}
		return v.SourceTables
	}).(TableReferenceArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyPtrOutput) WriteDisposition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobConfigurationTableCopy) *string {
		if v == nil {
			return nil
		}
		return v.WriteDisposition
	}).(pulumi.StringPtrOutput)
}

type JobConfigurationTableCopyResponse struct {
	// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
	CreateDisposition string `pulumi:"createDisposition"`
	// Custom encryption configuration (e.g., Cloud KMS keys).
	DestinationEncryptionConfiguration EncryptionConfigurationResponse `pulumi:"destinationEncryptionConfiguration"`
	// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
	DestinationExpirationTime interface{} `pulumi:"destinationExpirationTime"`
	// [Required] The destination table
	DestinationTable TableReferenceResponse `pulumi:"destinationTable"`
	// [Optional] Supported operation types in table copy job.
	OperationType string `pulumi:"operationType"`
	// [Pick one] Source table to copy.
	SourceTable TableReferenceResponse `pulumi:"sourceTable"`
	// [Pick one] Source tables to copy.
	SourceTables []TableReferenceResponse `pulumi:"sourceTables"`
	// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
	WriteDisposition string `pulumi:"writeDisposition"`
}

type JobConfigurationTableCopyResponseOutput struct{ *pulumi.OutputState }

func (JobConfigurationTableCopyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigurationTableCopyResponse)(nil)).Elem()
}

func (o JobConfigurationTableCopyResponseOutput) ToJobConfigurationTableCopyResponseOutput() JobConfigurationTableCopyResponseOutput {
	return o
}

func (o JobConfigurationTableCopyResponseOutput) ToJobConfigurationTableCopyResponseOutputWithContext(ctx context.Context) JobConfigurationTableCopyResponseOutput {
	return o
}

// [Optional] Specifies whether the job is allowed to create new tables. The following values are supported: CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyResponseOutput) CreateDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) string { return v.CreateDisposition }).(pulumi.StringOutput)
}

// Custom encryption configuration (e.g., Cloud KMS keys).
func (o JobConfigurationTableCopyResponseOutput) DestinationEncryptionConfiguration() EncryptionConfigurationResponseOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) EncryptionConfigurationResponse {
		return v.DestinationEncryptionConfiguration
	}).(EncryptionConfigurationResponseOutput)
}

// [Optional] The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.
func (o JobConfigurationTableCopyResponseOutput) DestinationExpirationTime() pulumi.AnyOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) interface{} { return v.DestinationExpirationTime }).(pulumi.AnyOutput)
}

// [Required] The destination table
func (o JobConfigurationTableCopyResponseOutput) DestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) TableReferenceResponse { return v.DestinationTable }).(TableReferenceResponseOutput)
}

// [Optional] Supported operation types in table copy job.
func (o JobConfigurationTableCopyResponseOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) string { return v.OperationType }).(pulumi.StringOutput)
}

// [Pick one] Source table to copy.
func (o JobConfigurationTableCopyResponseOutput) SourceTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) TableReferenceResponse { return v.SourceTable }).(TableReferenceResponseOutput)
}

// [Pick one] Source tables to copy.
func (o JobConfigurationTableCopyResponseOutput) SourceTables() TableReferenceResponseArrayOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) []TableReferenceResponse { return v.SourceTables }).(TableReferenceResponseArrayOutput)
}

// [Optional] Specifies the action that occurs if the destination table already exists. The following values are supported: WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data. WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.
func (o JobConfigurationTableCopyResponseOutput) WriteDisposition() pulumi.StringOutput {
	return o.ApplyT(func(v JobConfigurationTableCopyResponse) string { return v.WriteDisposition }).(pulumi.StringOutput)
}

type JobReference struct {
	// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId *string `pulumi:"jobId"`
	// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
	Location *string `pulumi:"location"`
	// [Required] The ID of the project containing this job.
	Project *string `pulumi:"project"`
}

// JobReferenceInput is an input type that accepts JobReferenceArgs and JobReferenceOutput values.
// You can construct a concrete instance of `JobReferenceInput` via:
//
//	JobReferenceArgs{...}
type JobReferenceInput interface {
	pulumi.Input

	ToJobReferenceOutput() JobReferenceOutput
	ToJobReferenceOutputWithContext(context.Context) JobReferenceOutput
}

type JobReferenceArgs struct {
	// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId pulumi.StringPtrInput `pulumi:"jobId"`
	// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// [Required] The ID of the project containing this job.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (JobReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReference)(nil)).Elem()
}

func (i JobReferenceArgs) ToJobReferenceOutput() JobReferenceOutput {
	return i.ToJobReferenceOutputWithContext(context.Background())
}

func (i JobReferenceArgs) ToJobReferenceOutputWithContext(ctx context.Context) JobReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferenceOutput)
}

func (i JobReferenceArgs) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return i.ToJobReferencePtrOutputWithContext(context.Background())
}

func (i JobReferenceArgs) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferenceOutput).ToJobReferencePtrOutputWithContext(ctx)
}

// JobReferencePtrInput is an input type that accepts JobReferenceArgs, JobReferencePtr and JobReferencePtrOutput values.
// You can construct a concrete instance of `JobReferencePtrInput` via:
//
//	        JobReferenceArgs{...}
//
//	or:
//
//	        nil
type JobReferencePtrInput interface {
	pulumi.Input

	ToJobReferencePtrOutput() JobReferencePtrOutput
	ToJobReferencePtrOutputWithContext(context.Context) JobReferencePtrOutput
}

type jobReferencePtrType JobReferenceArgs

func JobReferencePtr(v *JobReferenceArgs) JobReferencePtrInput {
	return (*jobReferencePtrType)(v)
}

func (*jobReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobReference)(nil)).Elem()
}

func (i *jobReferencePtrType) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return i.ToJobReferencePtrOutputWithContext(context.Background())
}

func (i *jobReferencePtrType) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobReferencePtrOutput)
}

type JobReferenceOutput struct{ *pulumi.OutputState }

func (JobReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReference)(nil)).Elem()
}

func (o JobReferenceOutput) ToJobReferenceOutput() JobReferenceOutput {
	return o
}

func (o JobReferenceOutput) ToJobReferenceOutputWithContext(ctx context.Context) JobReferenceOutput {
	return o
}

func (o JobReferenceOutput) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return o.ToJobReferencePtrOutputWithContext(context.Background())
}

func (o JobReferenceOutput) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobReference) *JobReference {
		return &v
	}).(JobReferencePtrOutput)
}

// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferenceOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobReference) *string { return v.JobId }).(pulumi.StringPtrOutput)
}

// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
func (o JobReferenceOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobReference) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this job.
func (o JobReferenceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JobReference) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type JobReferencePtrOutput struct{ *pulumi.OutputState }

func (JobReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobReference)(nil)).Elem()
}

func (o JobReferencePtrOutput) ToJobReferencePtrOutput() JobReferencePtrOutput {
	return o
}

func (o JobReferencePtrOutput) ToJobReferencePtrOutputWithContext(ctx context.Context) JobReferencePtrOutput {
	return o
}

func (o JobReferencePtrOutput) Elem() JobReferenceOutput {
	return o.ApplyT(func(v *JobReference) JobReference {
		if v != nil {
			return *v
		}
		var ret JobReference
		return ret
	}).(JobReferenceOutput)
}

// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferencePtrOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return v.JobId
	}).(pulumi.StringPtrOutput)
}

// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
func (o JobReferencePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this job.
func (o JobReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JobReference) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

type JobReferenceResponse struct {
	// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
	JobId string `pulumi:"jobId"`
	// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
	Location string `pulumi:"location"`
	// [Required] The ID of the project containing this job.
	Project string `pulumi:"project"`
}

type JobReferenceResponseOutput struct{ *pulumi.OutputState }

func (JobReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobReferenceResponse)(nil)).Elem()
}

func (o JobReferenceResponseOutput) ToJobReferenceResponseOutput() JobReferenceResponseOutput {
	return o
}

func (o JobReferenceResponseOutput) ToJobReferenceResponseOutputWithContext(ctx context.Context) JobReferenceResponseOutput {
	return o
}

// [Required] The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.
func (o JobReferenceResponseOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v JobReferenceResponse) string { return v.JobId }).(pulumi.StringOutput)
}

// The geographic location of the job. See details at https://cloud.google.com/bigquery/docs/locations#specifying_your_location.
func (o JobReferenceResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v JobReferenceResponse) string { return v.Location }).(pulumi.StringOutput)
}

// [Required] The ID of the project containing this job.
func (o JobReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v JobReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

type JobStatistics2ReservationUsageItemResponse struct {
	// [Output only] Reservation name or "unreserved" for on-demand resources usage.
	Name string `pulumi:"name"`
	// [Output only] Slot-milliseconds the job spent in the given reservation.
	SlotMs string `pulumi:"slotMs"`
}

type JobStatistics2ReservationUsageItemResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics2ReservationUsageItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics2ReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatistics2ReservationUsageItemResponseOutput) ToJobStatistics2ReservationUsageItemResponseOutput() JobStatistics2ReservationUsageItemResponseOutput {
	return o
}

func (o JobStatistics2ReservationUsageItemResponseOutput) ToJobStatistics2ReservationUsageItemResponseOutputWithContext(ctx context.Context) JobStatistics2ReservationUsageItemResponseOutput {
	return o
}

// [Output only] Reservation name or "unreserved" for on-demand resources usage.
func (o JobStatistics2ReservationUsageItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2ReservationUsageItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

// [Output only] Slot-milliseconds the job spent in the given reservation.
func (o JobStatistics2ReservationUsageItemResponseOutput) SlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2ReservationUsageItemResponse) string { return v.SlotMs }).(pulumi.StringOutput)
}

type JobStatistics2ReservationUsageItemResponseArrayOutput struct{ *pulumi.OutputState }

func (JobStatistics2ReservationUsageItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatistics2ReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatistics2ReservationUsageItemResponseArrayOutput) ToJobStatistics2ReservationUsageItemResponseArrayOutput() JobStatistics2ReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatistics2ReservationUsageItemResponseArrayOutput) ToJobStatistics2ReservationUsageItemResponseArrayOutputWithContext(ctx context.Context) JobStatistics2ReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatistics2ReservationUsageItemResponseArrayOutput) Index(i pulumi.IntInput) JobStatistics2ReservationUsageItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatistics2ReservationUsageItemResponse {
		return vs[0].([]JobStatistics2ReservationUsageItemResponse)[vs[1].(int)]
	}).(JobStatistics2ReservationUsageItemResponseOutput)
}

type JobStatistics2Response struct {
	// BI Engine specific Statistics. [Output only] BI Engine specific Statistics.
	BiEngineStatistics BiEngineStatisticsResponse `pulumi:"biEngineStatistics"`
	// [Output only] Billing tier for the job.
	BillingTier int `pulumi:"billingTier"`
	// [Output only] Whether the query result was fetched from the query cache.
	CacheHit bool `pulumi:"cacheHit"`
	// [Output only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
	DdlAffectedRowAccessPolicyCount string `pulumi:"ddlAffectedRowAccessPolicyCount"`
	// [Output only] The DDL destination table. Present only for ALTER TABLE RENAME TO queries. Note that ddl_target_table is used just for its type information.
	DdlDestinationTable TableReferenceResponse `pulumi:"ddlDestinationTable"`
	// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
	DdlOperationPerformed string `pulumi:"ddlOperationPerformed"`
	// [Output only] The DDL target dataset. Present only for CREATE/ALTER/DROP/UNDROP SCHEMA queries.
	DdlTargetDataset DatasetReferenceResponse `pulumi:"ddlTargetDataset"`
	// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
	DdlTargetRoutine RoutineReferenceResponse `pulumi:"ddlTargetRoutine"`
	// [Output only] [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
	DdlTargetRowAccessPolicy RowAccessPolicyReferenceResponse `pulumi:"ddlTargetRowAccessPolicy"`
	// [Output only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
	DdlTargetTable TableReferenceResponse `pulumi:"ddlTargetTable"`
	// [Output only] Detailed statistics for DML statements Present only for DML statements INSERT, UPDATE, DELETE or TRUNCATE.
	DmlStats DmlStatisticsResponse `pulumi:"dmlStats"`
	// [Output only] The original estimate of bytes processed for the job.
	EstimatedBytesProcessed string `pulumi:"estimatedBytesProcessed"`
	// [Output only] Statistics of a BigQuery ML training job.
	MlStatistics MlStatisticsResponse `pulumi:"mlStatistics"`
	// [Output only, Beta] Information about create model query job progress.
	ModelTraining BigQueryModelTrainingResponse `pulumi:"modelTraining"`
	// [Output only, Beta] Deprecated; do not use.
	//
	// Deprecated: [Output only, Beta] Deprecated; do not use.
	ModelTrainingCurrentIteration int `pulumi:"modelTrainingCurrentIteration"`
	// [Output only, Beta] Deprecated; do not use.
	//
	// Deprecated: [Output only, Beta] Deprecated; do not use.
	ModelTrainingExpectedTotalIteration string `pulumi:"modelTrainingExpectedTotalIteration"`
	// [Output only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
	NumDmlAffectedRows string `pulumi:"numDmlAffectedRows"`
	// [Output only] Describes execution plan for the query.
	QueryPlan []ExplainQueryStageResponse `pulumi:"queryPlan"`
	// [Output only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
	ReferencedRoutines []RoutineReferenceResponse `pulumi:"referencedRoutines"`
	// [Output only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
	ReferencedTables []TableReferenceResponse `pulumi:"referencedTables"`
	// [Output only] Job resource usage breakdown by reservation.
	ReservationUsage []JobStatistics2ReservationUsageItemResponse `pulumi:"reservationUsage"`
	// [Output only] The schema of the results. Present only for successful dry run of non-legacy SQL queries.
	Schema TableSchemaResponse `pulumi:"schema"`
	// [Output only] Search query specific statistics.
	SearchStatistics SearchStatisticsResponse `pulumi:"searchStatistics"`
	// [Output only] Statistics of a Spark procedure job.
	SparkStatistics SparkStatisticsResponse `pulumi:"sparkStatistics"`
	// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
	StatementType string `pulumi:"statementType"`
	// [Output only] [Beta] Describes a timeline of job execution.
	Timeline []QueryTimelineSampleResponse `pulumi:"timeline"`
	// [Output only] Total bytes billed for the job.
	TotalBytesBilled string `pulumi:"totalBytesBilled"`
	// [Output only] Total bytes processed for the job.
	TotalBytesProcessed string `pulumi:"totalBytesProcessed"`
	// [Output only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
	TotalBytesProcessedAccuracy string `pulumi:"totalBytesProcessedAccuracy"`
	// [Output only] Total number of partitions processed from all partitioned tables referenced in the job.
	TotalPartitionsProcessed string `pulumi:"totalPartitionsProcessed"`
	// [Output only] Slot-milliseconds for the job.
	TotalSlotMs string `pulumi:"totalSlotMs"`
	// Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
	TransferredBytes string `pulumi:"transferredBytes"`
	// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
	UndeclaredQueryParameters []QueryParameterResponse `pulumi:"undeclaredQueryParameters"`
}

type JobStatistics2ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics2ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics2Response)(nil)).Elem()
}

func (o JobStatistics2ResponseOutput) ToJobStatistics2ResponseOutput() JobStatistics2ResponseOutput {
	return o
}

func (o JobStatistics2ResponseOutput) ToJobStatistics2ResponseOutputWithContext(ctx context.Context) JobStatistics2ResponseOutput {
	return o
}

// BI Engine specific Statistics. [Output only] BI Engine specific Statistics.
func (o JobStatistics2ResponseOutput) BiEngineStatistics() BiEngineStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) BiEngineStatisticsResponse { return v.BiEngineStatistics }).(BiEngineStatisticsResponseOutput)
}

// [Output only] Billing tier for the job.
func (o JobStatistics2ResponseOutput) BillingTier() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatistics2Response) int { return v.BillingTier }).(pulumi.IntOutput)
}

// [Output only] Whether the query result was fetched from the query cache.
func (o JobStatistics2ResponseOutput) CacheHit() pulumi.BoolOutput {
	return o.ApplyT(func(v JobStatistics2Response) bool { return v.CacheHit }).(pulumi.BoolOutput)
}

// [Output only] [Preview] The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2ResponseOutput) DdlAffectedRowAccessPolicyCount() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.DdlAffectedRowAccessPolicyCount }).(pulumi.StringOutput)
}

// [Output only] The DDL destination table. Present only for ALTER TABLE RENAME TO queries. Note that ddl_target_table is used just for its type information.
func (o JobStatistics2ResponseOutput) DdlDestinationTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableReferenceResponse { return v.DdlDestinationTable }).(TableReferenceResponseOutput)
}

// The DDL operation performed, possibly dependent on the pre-existence of the DDL target. Possible values (new values might be added in the future): "CREATE": The query created the DDL target. "SKIP": No-op. Example cases: the query is CREATE TABLE IF NOT EXISTS while the table already exists, or the query is DROP TABLE IF EXISTS while the table does not exist. "REPLACE": The query replaced the DDL target. Example case: the query is CREATE OR REPLACE TABLE, and the table already exists. "DROP": The query deleted the DDL target.
func (o JobStatistics2ResponseOutput) DdlOperationPerformed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.DdlOperationPerformed }).(pulumi.StringOutput)
}

// [Output only] The DDL target dataset. Present only for CREATE/ALTER/DROP/UNDROP SCHEMA queries.
func (o JobStatistics2ResponseOutput) DdlTargetDataset() DatasetReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) DatasetReferenceResponse { return v.DdlTargetDataset }).(DatasetReferenceResponseOutput)
}

// The DDL target routine. Present only for CREATE/DROP FUNCTION/PROCEDURE queries.
func (o JobStatistics2ResponseOutput) DdlTargetRoutine() RoutineReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) RoutineReferenceResponse { return v.DdlTargetRoutine }).(RoutineReferenceResponseOutput)
}

// [Output only] [Preview] The DDL target row access policy. Present only for CREATE/DROP ROW ACCESS POLICY queries.
func (o JobStatistics2ResponseOutput) DdlTargetRowAccessPolicy() RowAccessPolicyReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) RowAccessPolicyReferenceResponse { return v.DdlTargetRowAccessPolicy }).(RowAccessPolicyReferenceResponseOutput)
}

// [Output only] The DDL target table. Present only for CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
func (o JobStatistics2ResponseOutput) DdlTargetTable() TableReferenceResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableReferenceResponse { return v.DdlTargetTable }).(TableReferenceResponseOutput)
}

// [Output only] Detailed statistics for DML statements Present only for DML statements INSERT, UPDATE, DELETE or TRUNCATE.
func (o JobStatistics2ResponseOutput) DmlStats() DmlStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) DmlStatisticsResponse { return v.DmlStats }).(DmlStatisticsResponseOutput)
}

// [Output only] The original estimate of bytes processed for the job.
func (o JobStatistics2ResponseOutput) EstimatedBytesProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.EstimatedBytesProcessed }).(pulumi.StringOutput)
}

// [Output only] Statistics of a BigQuery ML training job.
func (o JobStatistics2ResponseOutput) MlStatistics() MlStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) MlStatisticsResponse { return v.MlStatistics }).(MlStatisticsResponseOutput)
}

// [Output only, Beta] Information about create model query job progress.
func (o JobStatistics2ResponseOutput) ModelTraining() BigQueryModelTrainingResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) BigQueryModelTrainingResponse { return v.ModelTraining }).(BigQueryModelTrainingResponseOutput)
}

// [Output only, Beta] Deprecated; do not use.
//
// Deprecated: [Output only, Beta] Deprecated; do not use.
func (o JobStatistics2ResponseOutput) ModelTrainingCurrentIteration() pulumi.IntOutput {
	return o.ApplyT(func(v JobStatistics2Response) int { return v.ModelTrainingCurrentIteration }).(pulumi.IntOutput)
}

// [Output only, Beta] Deprecated; do not use.
//
// Deprecated: [Output only, Beta] Deprecated; do not use.
func (o JobStatistics2ResponseOutput) ModelTrainingExpectedTotalIteration() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.ModelTrainingExpectedTotalIteration }).(pulumi.StringOutput)
}

// [Output only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
func (o JobStatistics2ResponseOutput) NumDmlAffectedRows() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.NumDmlAffectedRows }).(pulumi.StringOutput)
}

// [Output only] Describes execution plan for the query.
func (o JobStatistics2ResponseOutput) QueryPlan() ExplainQueryStageResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []ExplainQueryStageResponse { return v.QueryPlan }).(ExplainQueryStageResponseArrayOutput)
}

// [Output only] Referenced routines (persistent user-defined functions and stored procedures) for the job.
func (o JobStatistics2ResponseOutput) ReferencedRoutines() RoutineReferenceResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []RoutineReferenceResponse { return v.ReferencedRoutines }).(RoutineReferenceResponseArrayOutput)
}

// [Output only] Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.
func (o JobStatistics2ResponseOutput) ReferencedTables() TableReferenceResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []TableReferenceResponse { return v.ReferencedTables }).(TableReferenceResponseArrayOutput)
}

// [Output only] Job resource usage breakdown by reservation.
func (o JobStatistics2ResponseOutput) ReservationUsage() JobStatistics2ReservationUsageItemResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []JobStatistics2ReservationUsageItemResponse { return v.ReservationUsage }).(JobStatistics2ReservationUsageItemResponseArrayOutput)
}

// [Output only] The schema of the results. Present only for successful dry run of non-legacy SQL queries.
func (o JobStatistics2ResponseOutput) Schema() TableSchemaResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) TableSchemaResponse { return v.Schema }).(TableSchemaResponseOutput)
}

// [Output only] Search query specific statistics.
func (o JobStatistics2ResponseOutput) SearchStatistics() SearchStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) SearchStatisticsResponse { return v.SearchStatistics }).(SearchStatisticsResponseOutput)
}

// [Output only] Statistics of a Spark procedure job.
func (o JobStatistics2ResponseOutput) SparkStatistics() SparkStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatistics2Response) SparkStatisticsResponse { return v.SparkStatistics }).(SparkStatisticsResponseOutput)
}

// The type of query statement, if valid. Possible values (new values might be added in the future): "SELECT": SELECT query. "INSERT": INSERT query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "UPDATE": UPDATE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "DELETE": DELETE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "MERGE": MERGE query; see https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language. "ALTER_TABLE": ALTER TABLE query. "ALTER_VIEW": ALTER VIEW query. "ASSERT": ASSERT condition AS 'description'. "CREATE_FUNCTION": CREATE FUNCTION query. "CREATE_MODEL": CREATE [OR REPLACE] MODEL ... AS SELECT ... . "CREATE_PROCEDURE": CREATE PROCEDURE query. "CREATE_TABLE": CREATE [OR REPLACE] TABLE without AS SELECT. "CREATE_TABLE_AS_SELECT": CREATE [OR REPLACE] TABLE ... AS SELECT ... . "CREATE_VIEW": CREATE [OR REPLACE] VIEW ... AS SELECT ... . "DROP_FUNCTION" : DROP FUNCTION query. "DROP_PROCEDURE": DROP PROCEDURE query. "DROP_TABLE": DROP TABLE query. "DROP_VIEW": DROP VIEW query.
func (o JobStatistics2ResponseOutput) StatementType() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.StatementType }).(pulumi.StringOutput)
}

// [Output only] [Beta] Describes a timeline of job execution.
func (o JobStatistics2ResponseOutput) Timeline() QueryTimelineSampleResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []QueryTimelineSampleResponse { return v.Timeline }).(QueryTimelineSampleResponseArrayOutput)
}

// [Output only] Total bytes billed for the job.
func (o JobStatistics2ResponseOutput) TotalBytesBilled() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalBytesBilled }).(pulumi.StringOutput)
}

// [Output only] Total bytes processed for the job.
func (o JobStatistics2ResponseOutput) TotalBytesProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalBytesProcessed }).(pulumi.StringOutput)
}

// [Output only] For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.
func (o JobStatistics2ResponseOutput) TotalBytesProcessedAccuracy() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalBytesProcessedAccuracy }).(pulumi.StringOutput)
}

// [Output only] Total number of partitions processed from all partitioned tables referenced in the job.
func (o JobStatistics2ResponseOutput) TotalPartitionsProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalPartitionsProcessed }).(pulumi.StringOutput)
}

// [Output only] Slot-milliseconds for the job.
func (o JobStatistics2ResponseOutput) TotalSlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TotalSlotMs }).(pulumi.StringOutput)
}

// Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
func (o JobStatistics2ResponseOutput) TransferredBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics2Response) string { return v.TransferredBytes }).(pulumi.StringOutput)
}

// Standard SQL only: list of undeclared query parameters detected during a dry run validation.
func (o JobStatistics2ResponseOutput) UndeclaredQueryParameters() QueryParameterResponseArrayOutput {
	return o.ApplyT(func(v JobStatistics2Response) []QueryParameterResponse { return v.UndeclaredQueryParameters }).(QueryParameterResponseArrayOutput)
}

type JobStatistics3Response struct {
	// The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
	BadRecords string `pulumi:"badRecords"`
	// Number of bytes of source data in a load job.
	InputFileBytes string `pulumi:"inputFileBytes"`
	// Number of source files in a load job.
	InputFiles string `pulumi:"inputFiles"`
	// Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
	OutputBytes string `pulumi:"outputBytes"`
	// Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
	OutputRows string `pulumi:"outputRows"`
}

type JobStatistics3ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics3ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics3Response)(nil)).Elem()
}

func (o JobStatistics3ResponseOutput) ToJobStatistics3ResponseOutput() JobStatistics3ResponseOutput {
	return o
}

func (o JobStatistics3ResponseOutput) ToJobStatistics3ResponseOutputWithContext(ctx context.Context) JobStatistics3ResponseOutput {
	return o
}

// The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.
func (o JobStatistics3ResponseOutput) BadRecords() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.BadRecords }).(pulumi.StringOutput)
}

// Number of bytes of source data in a load job.
func (o JobStatistics3ResponseOutput) InputFileBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.InputFileBytes }).(pulumi.StringOutput)
}

// Number of source files in a load job.
func (o JobStatistics3ResponseOutput) InputFiles() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.InputFiles }).(pulumi.StringOutput)
}

// Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.
func (o JobStatistics3ResponseOutput) OutputBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.OutputBytes }).(pulumi.StringOutput)
}

// Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.
func (o JobStatistics3ResponseOutput) OutputRows() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics3Response) string { return v.OutputRows }).(pulumi.StringOutput)
}

type JobStatistics4Response struct {
	// Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
	DestinationUriFileCounts []string `pulumi:"destinationUriFileCounts"`
	// Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.
	InputBytes string `pulumi:"inputBytes"`
}

type JobStatistics4ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics4ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics4Response)(nil)).Elem()
}

func (o JobStatistics4ResponseOutput) ToJobStatistics4ResponseOutput() JobStatistics4ResponseOutput {
	return o
}

func (o JobStatistics4ResponseOutput) ToJobStatistics4ResponseOutputWithContext(ctx context.Context) JobStatistics4ResponseOutput {
	return o
}

// Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.
func (o JobStatistics4ResponseOutput) DestinationUriFileCounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobStatistics4Response) []string { return v.DestinationUriFileCounts }).(pulumi.StringArrayOutput)
}

// Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes.
func (o JobStatistics4ResponseOutput) InputBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics4Response) string { return v.InputBytes }).(pulumi.StringOutput)
}

type JobStatistics5Response struct {
	// Number of logical bytes copied to the destination table.
	CopiedLogicalBytes string `pulumi:"copiedLogicalBytes"`
	// Number of rows copied to the destination table.
	CopiedRows string `pulumi:"copiedRows"`
}

type JobStatistics5ResponseOutput struct{ *pulumi.OutputState }

func (JobStatistics5ResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatistics5Response)(nil)).Elem()
}

func (o JobStatistics5ResponseOutput) ToJobStatistics5ResponseOutput() JobStatistics5ResponseOutput {
	return o
}

func (o JobStatistics5ResponseOutput) ToJobStatistics5ResponseOutputWithContext(ctx context.Context) JobStatistics5ResponseOutput {
	return o
}

// Number of logical bytes copied to the destination table.
func (o JobStatistics5ResponseOutput) CopiedLogicalBytes() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics5Response) string { return v.CopiedLogicalBytes }).(pulumi.StringOutput)
}

// Number of rows copied to the destination table.
func (o JobStatistics5ResponseOutput) CopiedRows() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatistics5Response) string { return v.CopiedRows }).(pulumi.StringOutput)
}

type JobStatisticsReservationUsageItemResponse struct {
	// Reservation name or "unreserved" for on-demand resources usage.
	Name string `pulumi:"name"`
	// Slot-milliseconds the job spent in the given reservation.
	SlotMs string `pulumi:"slotMs"`
}

type JobStatisticsReservationUsageItemResponseOutput struct{ *pulumi.OutputState }

func (JobStatisticsReservationUsageItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticsReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatisticsReservationUsageItemResponseOutput) ToJobStatisticsReservationUsageItemResponseOutput() JobStatisticsReservationUsageItemResponseOutput {
	return o
}

func (o JobStatisticsReservationUsageItemResponseOutput) ToJobStatisticsReservationUsageItemResponseOutputWithContext(ctx context.Context) JobStatisticsReservationUsageItemResponseOutput {
	return o
}

// Reservation name or "unreserved" for on-demand resources usage.
func (o JobStatisticsReservationUsageItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsReservationUsageItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Slot-milliseconds the job spent in the given reservation.
func (o JobStatisticsReservationUsageItemResponseOutput) SlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsReservationUsageItemResponse) string { return v.SlotMs }).(pulumi.StringOutput)
}

type JobStatisticsReservationUsageItemResponseArrayOutput struct{ *pulumi.OutputState }

func (JobStatisticsReservationUsageItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]JobStatisticsReservationUsageItemResponse)(nil)).Elem()
}

func (o JobStatisticsReservationUsageItemResponseArrayOutput) ToJobStatisticsReservationUsageItemResponseArrayOutput() JobStatisticsReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatisticsReservationUsageItemResponseArrayOutput) ToJobStatisticsReservationUsageItemResponseArrayOutputWithContext(ctx context.Context) JobStatisticsReservationUsageItemResponseArrayOutput {
	return o
}

func (o JobStatisticsReservationUsageItemResponseArrayOutput) Index(i pulumi.IntInput) JobStatisticsReservationUsageItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) JobStatisticsReservationUsageItemResponse {
		return vs[0].([]JobStatisticsReservationUsageItemResponse)[vs[1].(int)]
	}).(JobStatisticsReservationUsageItemResponseOutput)
}

type JobStatisticsResponse struct {
	// [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
	CompletionRatio float64 `pulumi:"completionRatio"`
	// Statistics for a copy job.
	Copy JobStatistics5Response `pulumi:"copy"`
	// Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
	CreationTime string `pulumi:"creationTime"`
	// Statistics for data masking. Present only for query and extract jobs.
	DataMaskingStatistics DataMaskingStatisticsResponse `pulumi:"dataMaskingStatistics"`
	// End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
	EndTime string `pulumi:"endTime"`
	// Statistics for an extract job.
	Extract JobStatistics4Response `pulumi:"extract"`
	// Statistics for a load job.
	Load JobStatistics3Response `pulumi:"load"`
	// Number of child jobs executed.
	NumChildJobs string `pulumi:"numChildJobs"`
	// If this is a child job, the id of the parent.
	ParentJobId string `pulumi:"parentJobId"`
	// Statistics for a query job.
	Query JobStatistics2Response `pulumi:"query"`
	// Quotas which delayed this job's start time.
	QuotaDeferments []string `pulumi:"quotaDeferments"`
	// Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
	ReservationId string `pulumi:"reservationId"`
	// Job resource usage breakdown by reservation.
	ReservationUsage []JobStatisticsReservationUsageItemResponse `pulumi:"reservationUsage"`
	// [Preview] Statistics for row-level security. Present only for query and extract jobs.
	RowLevelSecurityStatistics RowLevelSecurityStatisticsResponse `pulumi:"rowLevelSecurityStatistics"`
	// Statistics for a child job of a script.
	ScriptStatistics ScriptStatisticsResponse `pulumi:"scriptStatistics"`
	// [Preview] Information of the session if this job is part of one.
	SessionInfo SessionInfoResponse `pulumi:"sessionInfo"`
	// Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
	StartTime string `pulumi:"startTime"`
	// [Deprecated] Use the bytes processed in the query statistics instead.
	//
	// Deprecated: [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
	TotalBytesProcessed string `pulumi:"totalBytesProcessed"`
	// Slot-milliseconds for the job.
	TotalSlotMs string `pulumi:"totalSlotMs"`
	// [Alpha] Information of the multi-statement transaction if this job is part of one.
	TransactionInfo TransactionInfoResponse `pulumi:"transactionInfo"`
}

type JobStatisticsResponseOutput struct{ *pulumi.OutputState }

func (JobStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatisticsResponse)(nil)).Elem()
}

func (o JobStatisticsResponseOutput) ToJobStatisticsResponseOutput() JobStatisticsResponseOutput {
	return o
}

func (o JobStatisticsResponseOutput) ToJobStatisticsResponseOutputWithContext(ctx context.Context) JobStatisticsResponseOutput {
	return o
}

// [TrustedTester] [Output-only] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.
func (o JobStatisticsResponseOutput) CompletionRatio() pulumi.Float64Output {
	return o.ApplyT(func(v JobStatisticsResponse) float64 { return v.CompletionRatio }).(pulumi.Float64Output)
}

// Statistics for a copy job.
func (o JobStatisticsResponseOutput) Copy() JobStatistics5ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics5Response { return v.Copy }).(JobStatistics5ResponseOutput)
}

// Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.
func (o JobStatisticsResponseOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.CreationTime }).(pulumi.StringOutput)
}

// Statistics for data masking. Present only for query and extract jobs.
func (o JobStatisticsResponseOutput) DataMaskingStatistics() DataMaskingStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) DataMaskingStatisticsResponse { return v.DataMaskingStatistics }).(DataMaskingStatisticsResponseOutput)
}

// End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.
func (o JobStatisticsResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Statistics for an extract job.
func (o JobStatisticsResponseOutput) Extract() JobStatistics4ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics4Response { return v.Extract }).(JobStatistics4ResponseOutput)
}

// Statistics for a load job.
func (o JobStatisticsResponseOutput) Load() JobStatistics3ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics3Response { return v.Load }).(JobStatistics3ResponseOutput)
}

// Number of child jobs executed.
func (o JobStatisticsResponseOutput) NumChildJobs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.NumChildJobs }).(pulumi.StringOutput)
}

// If this is a child job, the id of the parent.
func (o JobStatisticsResponseOutput) ParentJobId() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.ParentJobId }).(pulumi.StringOutput)
}

// Statistics for a query job.
func (o JobStatisticsResponseOutput) Query() JobStatistics2ResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) JobStatistics2Response { return v.Query }).(JobStatistics2ResponseOutput)
}

// Quotas which delayed this job's start time.
func (o JobStatisticsResponseOutput) QuotaDeferments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobStatisticsResponse) []string { return v.QuotaDeferments }).(pulumi.StringArrayOutput)
}

// Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.
func (o JobStatisticsResponseOutput) ReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.ReservationId }).(pulumi.StringOutput)
}

// Job resource usage breakdown by reservation.
func (o JobStatisticsResponseOutput) ReservationUsage() JobStatisticsReservationUsageItemResponseArrayOutput {
	return o.ApplyT(func(v JobStatisticsResponse) []JobStatisticsReservationUsageItemResponse { return v.ReservationUsage }).(JobStatisticsReservationUsageItemResponseArrayOutput)
}

// [Preview] Statistics for row-level security. Present only for query and extract jobs.
func (o JobStatisticsResponseOutput) RowLevelSecurityStatistics() RowLevelSecurityStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) RowLevelSecurityStatisticsResponse { return v.RowLevelSecurityStatistics }).(RowLevelSecurityStatisticsResponseOutput)
}

// Statistics for a child job of a script.
func (o JobStatisticsResponseOutput) ScriptStatistics() ScriptStatisticsResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) ScriptStatisticsResponse { return v.ScriptStatistics }).(ScriptStatisticsResponseOutput)
}

// [Preview] Information of the session if this job is part of one.
func (o JobStatisticsResponseOutput) SessionInfo() SessionInfoResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) SessionInfoResponse { return v.SessionInfo }).(SessionInfoResponseOutput)
}

// Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.
func (o JobStatisticsResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// [Deprecated] Use the bytes processed in the query statistics instead.
//
// Deprecated: [Output-only] [Deprecated] Use the bytes processed in the query statistics instead.
func (o JobStatisticsResponseOutput) TotalBytesProcessed() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.TotalBytesProcessed }).(pulumi.StringOutput)
}

// Slot-milliseconds for the job.
func (o JobStatisticsResponseOutput) TotalSlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatisticsResponse) string { return v.TotalSlotMs }).(pulumi.StringOutput)
}

// [Alpha] Information of the multi-statement transaction if this job is part of one.
func (o JobStatisticsResponseOutput) TransactionInfo() TransactionInfoResponseOutput {
	return o.ApplyT(func(v JobStatisticsResponse) TransactionInfoResponse { return v.TransactionInfo }).(TransactionInfoResponseOutput)
}

type JobStatusResponse struct {
	// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
	ErrorResult ErrorProtoResponse `pulumi:"errorResult"`
	// The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
	Errors []ErrorProtoResponse `pulumi:"errors"`
	// Running state of the job.
	State string `pulumi:"state"`
}

type JobStatusResponseOutput struct{ *pulumi.OutputState }

func (JobStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobStatusResponse)(nil)).Elem()
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutput() JobStatusResponseOutput {
	return o
}

func (o JobStatusResponseOutput) ToJobStatusResponseOutputWithContext(ctx context.Context) JobStatusResponseOutput {
	return o
}

// Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
func (o JobStatusResponseOutput) ErrorResult() ErrorProtoResponseOutput {
	return o.ApplyT(func(v JobStatusResponse) ErrorProtoResponse { return v.ErrorResult }).(ErrorProtoResponseOutput)
}

// The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
func (o JobStatusResponseOutput) Errors() ErrorProtoResponseArrayOutput {
	return o.ApplyT(func(v JobStatusResponse) []ErrorProtoResponse { return v.Errors }).(ErrorProtoResponseArrayOutput)
}

// Running state of the job.
func (o JobStatusResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v JobStatusResponse) string { return v.State }).(pulumi.StringOutput)
}

type JsonOptions struct {
	// [Optional] The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
	Encoding *string `pulumi:"encoding"`
}

// JsonOptionsInput is an input type that accepts JsonOptionsArgs and JsonOptionsOutput values.
// You can construct a concrete instance of `JsonOptionsInput` via:
//
//	JsonOptionsArgs{...}
type JsonOptionsInput interface {
	pulumi.Input

	ToJsonOptionsOutput() JsonOptionsOutput
	ToJsonOptionsOutputWithContext(context.Context) JsonOptionsOutput
}

type JsonOptionsArgs struct {
	// [Optional] The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
}

func (JsonOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOptions)(nil)).Elem()
}

func (i JsonOptionsArgs) ToJsonOptionsOutput() JsonOptionsOutput {
	return i.ToJsonOptionsOutputWithContext(context.Background())
}

func (i JsonOptionsArgs) ToJsonOptionsOutputWithContext(ctx context.Context) JsonOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonOptionsOutput)
}

func (i JsonOptionsArgs) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return i.ToJsonOptionsPtrOutputWithContext(context.Background())
}

func (i JsonOptionsArgs) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonOptionsOutput).ToJsonOptionsPtrOutputWithContext(ctx)
}

// JsonOptionsPtrInput is an input type that accepts JsonOptionsArgs, JsonOptionsPtr and JsonOptionsPtrOutput values.
// You can construct a concrete instance of `JsonOptionsPtrInput` via:
//
//	        JsonOptionsArgs{...}
//
//	or:
//
//	        nil
type JsonOptionsPtrInput interface {
	pulumi.Input

	ToJsonOptionsPtrOutput() JsonOptionsPtrOutput
	ToJsonOptionsPtrOutputWithContext(context.Context) JsonOptionsPtrOutput
}

type jsonOptionsPtrType JsonOptionsArgs

func JsonOptionsPtr(v *JsonOptionsArgs) JsonOptionsPtrInput {
	return (*jsonOptionsPtrType)(v)
}

func (*jsonOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonOptions)(nil)).Elem()
}

func (i *jsonOptionsPtrType) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return i.ToJsonOptionsPtrOutputWithContext(context.Background())
}

func (i *jsonOptionsPtrType) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonOptionsPtrOutput)
}

type JsonOptionsOutput struct{ *pulumi.OutputState }

func (JsonOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOptions)(nil)).Elem()
}

func (o JsonOptionsOutput) ToJsonOptionsOutput() JsonOptionsOutput {
	return o
}

func (o JsonOptionsOutput) ToJsonOptionsOutputWithContext(ctx context.Context) JsonOptionsOutput {
	return o
}

func (o JsonOptionsOutput) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return o.ToJsonOptionsPtrOutputWithContext(context.Background())
}

func (o JsonOptionsOutput) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonOptions) *JsonOptions {
		return &v
	}).(JsonOptionsPtrOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
func (o JsonOptionsOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v JsonOptions) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

type JsonOptionsPtrOutput struct{ *pulumi.OutputState }

func (JsonOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonOptions)(nil)).Elem()
}

func (o JsonOptionsPtrOutput) ToJsonOptionsPtrOutput() JsonOptionsPtrOutput {
	return o
}

func (o JsonOptionsPtrOutput) ToJsonOptionsPtrOutputWithContext(ctx context.Context) JsonOptionsPtrOutput {
	return o
}

func (o JsonOptionsPtrOutput) Elem() JsonOptionsOutput {
	return o.ApplyT(func(v *JsonOptions) JsonOptions {
		if v != nil {
			return *v
		}
		var ret JsonOptions
		return ret
	}).(JsonOptionsOutput)
}

// [Optional] The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
func (o JsonOptionsPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonOptions) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

type JsonOptionsResponse struct {
	// [Optional] The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
	Encoding string `pulumi:"encoding"`
}

type JsonOptionsResponseOutput struct{ *pulumi.OutputState }

func (JsonOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonOptionsResponse)(nil)).Elem()
}

func (o JsonOptionsResponseOutput) ToJsonOptionsResponseOutput() JsonOptionsResponseOutput {
	return o
}

func (o JsonOptionsResponseOutput) ToJsonOptionsResponseOutputWithContext(ctx context.Context) JsonOptionsResponseOutput {
	return o
}

// [Optional] The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.
func (o JsonOptionsResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v JsonOptionsResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

type MaterializedViewDefinition struct {
	// [Optional] Allow non incremental materialized view definition. The default value is "false".
	AllowNonIncrementalDefinition *bool `pulumi:"allowNonIncrementalDefinition"`
	// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh *bool `pulumi:"enableRefresh"`
	// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
	MaxStaleness *string `pulumi:"maxStaleness"`
	// [Required] A query whose result is persisted.
	Query *string `pulumi:"query"`
	// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs *string `pulumi:"refreshIntervalMs"`
}

// MaterializedViewDefinitionInput is an input type that accepts MaterializedViewDefinitionArgs and MaterializedViewDefinitionOutput values.
// You can construct a concrete instance of `MaterializedViewDefinitionInput` via:
//
//	MaterializedViewDefinitionArgs{...}
type MaterializedViewDefinitionInput interface {
	pulumi.Input

	ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput
	ToMaterializedViewDefinitionOutputWithContext(context.Context) MaterializedViewDefinitionOutput
}

type MaterializedViewDefinitionArgs struct {
	// [Optional] Allow non incremental materialized view definition. The default value is "false".
	AllowNonIncrementalDefinition pulumi.BoolPtrInput `pulumi:"allowNonIncrementalDefinition"`
	// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh pulumi.BoolPtrInput `pulumi:"enableRefresh"`
	// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
	MaxStaleness pulumi.StringPtrInput `pulumi:"maxStaleness"`
	// [Required] A query whose result is persisted.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs pulumi.StringPtrInput `pulumi:"refreshIntervalMs"`
}

func (MaterializedViewDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinition)(nil)).Elem()
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput {
	return i.ToMaterializedViewDefinitionOutputWithContext(context.Background())
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionOutputWithContext(ctx context.Context) MaterializedViewDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionOutput)
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return i.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (i MaterializedViewDefinitionArgs) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionOutput).ToMaterializedViewDefinitionPtrOutputWithContext(ctx)
}

// MaterializedViewDefinitionPtrInput is an input type that accepts MaterializedViewDefinitionArgs, MaterializedViewDefinitionPtr and MaterializedViewDefinitionPtrOutput values.
// You can construct a concrete instance of `MaterializedViewDefinitionPtrInput` via:
//
//	        MaterializedViewDefinitionArgs{...}
//
//	or:
//
//	        nil
type MaterializedViewDefinitionPtrInput interface {
	pulumi.Input

	ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput
	ToMaterializedViewDefinitionPtrOutputWithContext(context.Context) MaterializedViewDefinitionPtrOutput
}

type materializedViewDefinitionPtrType MaterializedViewDefinitionArgs

func MaterializedViewDefinitionPtr(v *MaterializedViewDefinitionArgs) MaterializedViewDefinitionPtrInput {
	return (*materializedViewDefinitionPtrType)(v)
}

func (*materializedViewDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedViewDefinition)(nil)).Elem()
}

func (i *materializedViewDefinitionPtrType) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return i.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (i *materializedViewDefinitionPtrType) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaterializedViewDefinitionPtrOutput)
}

type MaterializedViewDefinitionOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinition)(nil)).Elem()
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionOutput() MaterializedViewDefinitionOutput {
	return o
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionOutputWithContext(ctx context.Context) MaterializedViewDefinitionOutput {
	return o
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return o.ToMaterializedViewDefinitionPtrOutputWithContext(context.Background())
}

func (o MaterializedViewDefinitionOutput) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaterializedViewDefinition) *MaterializedViewDefinition {
		return &v
	}).(MaterializedViewDefinitionPtrOutput)
}

// [Optional] Allow non incremental materialized view definition. The default value is "false".
func (o MaterializedViewDefinitionOutput) AllowNonIncrementalDefinition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *bool { return v.AllowNonIncrementalDefinition }).(pulumi.BoolPtrOutput)
}

// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *bool { return v.EnableRefresh }).(pulumi.BoolPtrOutput)
}

// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
func (o MaterializedViewDefinitionOutput) MaxStaleness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.MaxStaleness }).(pulumi.StringPtrOutput)
}

// [Required] A query whose result is persisted.
func (o MaterializedViewDefinitionOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionOutput) RefreshIntervalMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaterializedViewDefinition) *string { return v.RefreshIntervalMs }).(pulumi.StringPtrOutput)
}

type MaterializedViewDefinitionPtrOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaterializedViewDefinition)(nil)).Elem()
}

func (o MaterializedViewDefinitionPtrOutput) ToMaterializedViewDefinitionPtrOutput() MaterializedViewDefinitionPtrOutput {
	return o
}

func (o MaterializedViewDefinitionPtrOutput) ToMaterializedViewDefinitionPtrOutputWithContext(ctx context.Context) MaterializedViewDefinitionPtrOutput {
	return o
}

func (o MaterializedViewDefinitionPtrOutput) Elem() MaterializedViewDefinitionOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) MaterializedViewDefinition {
		if v != nil {
			return *v
		}
		var ret MaterializedViewDefinition
		return ret
	}).(MaterializedViewDefinitionOutput)
}

// [Optional] Allow non incremental materialized view definition. The default value is "false".
func (o MaterializedViewDefinitionPtrOutput) AllowNonIncrementalDefinition() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.AllowNonIncrementalDefinition
	}).(pulumi.BoolPtrOutput)
}

// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionPtrOutput) EnableRefresh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.EnableRefresh
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
func (o MaterializedViewDefinitionPtrOutput) MaxStaleness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.MaxStaleness
	}).(pulumi.StringPtrOutput)
}

// [Required] A query whose result is persisted.
func (o MaterializedViewDefinitionPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionPtrOutput) RefreshIntervalMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaterializedViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.RefreshIntervalMs
	}).(pulumi.StringPtrOutput)
}

type MaterializedViewDefinitionResponse struct {
	// [Optional] Allow non incremental materialized view definition. The default value is "false".
	AllowNonIncrementalDefinition bool `pulumi:"allowNonIncrementalDefinition"`
	// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
	EnableRefresh bool `pulumi:"enableRefresh"`
	// [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.
	LastRefreshTime string `pulumi:"lastRefreshTime"`
	// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
	MaxStaleness string `pulumi:"maxStaleness"`
	// [Required] A query whose result is persisted.
	Query string `pulumi:"query"`
	// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
	RefreshIntervalMs string `pulumi:"refreshIntervalMs"`
}

type MaterializedViewDefinitionResponseOutput struct{ *pulumi.OutputState }

func (MaterializedViewDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaterializedViewDefinitionResponse)(nil)).Elem()
}

func (o MaterializedViewDefinitionResponseOutput) ToMaterializedViewDefinitionResponseOutput() MaterializedViewDefinitionResponseOutput {
	return o
}

func (o MaterializedViewDefinitionResponseOutput) ToMaterializedViewDefinitionResponseOutputWithContext(ctx context.Context) MaterializedViewDefinitionResponseOutput {
	return o
}

// [Optional] Allow non incremental materialized view definition. The default value is "false".
func (o MaterializedViewDefinitionResponseOutput) AllowNonIncrementalDefinition() pulumi.BoolOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) bool { return v.AllowNonIncrementalDefinition }).(pulumi.BoolOutput)
}

// [Optional] [TrustedTester] Enable automatic refresh of the materialized view when the base table is updated. The default value is "true".
func (o MaterializedViewDefinitionResponseOutput) EnableRefresh() pulumi.BoolOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) bool { return v.EnableRefresh }).(pulumi.BoolOutput)
}

// [TrustedTester] The time when this materialized view was last modified, in milliseconds since the epoch.
func (o MaterializedViewDefinitionResponseOutput) LastRefreshTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.LastRefreshTime }).(pulumi.StringOutput)
}

// [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).
func (o MaterializedViewDefinitionResponseOutput) MaxStaleness() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.MaxStaleness }).(pulumi.StringOutput)
}

// [Required] A query whose result is persisted.
func (o MaterializedViewDefinitionResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.Query }).(pulumi.StringOutput)
}

// [Optional] [TrustedTester] The maximum frequency at which this materialized view will be refreshed. The default value is "1800000" (30 minutes).
func (o MaterializedViewDefinitionResponseOutput) RefreshIntervalMs() pulumi.StringOutput {
	return o.ApplyT(func(v MaterializedViewDefinitionResponse) string { return v.RefreshIntervalMs }).(pulumi.StringOutput)
}

type MlStatisticsResponse struct {
	// Results for all completed iterations.
	IterationResults []IterationResultResponse `pulumi:"iterationResults"`
	// Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.
	MaxIterations string `pulumi:"maxIterations"`
}

type MlStatisticsResponseOutput struct{ *pulumi.OutputState }

func (MlStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MlStatisticsResponse)(nil)).Elem()
}

func (o MlStatisticsResponseOutput) ToMlStatisticsResponseOutput() MlStatisticsResponseOutput {
	return o
}

func (o MlStatisticsResponseOutput) ToMlStatisticsResponseOutputWithContext(ctx context.Context) MlStatisticsResponseOutput {
	return o
}

// Results for all completed iterations.
func (o MlStatisticsResponseOutput) IterationResults() IterationResultResponseArrayOutput {
	return o.ApplyT(func(v MlStatisticsResponse) []IterationResultResponse { return v.IterationResults }).(IterationResultResponseArrayOutput)
}

// Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.
func (o MlStatisticsResponseOutput) MaxIterations() pulumi.StringOutput {
	return o.ApplyT(func(v MlStatisticsResponse) string { return v.MaxIterations }).(pulumi.StringOutput)
}

type ModelDefinition struct {
	// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
	ModelOptions *ModelDefinitionModelOptions `pulumi:"modelOptions"`
	// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
	TrainingRuns []BqmlTrainingRun `pulumi:"trainingRuns"`
}

// ModelDefinitionInput is an input type that accepts ModelDefinitionArgs and ModelDefinitionOutput values.
// You can construct a concrete instance of `ModelDefinitionInput` via:
//
//	ModelDefinitionArgs{...}
type ModelDefinitionInput interface {
	pulumi.Input

	ToModelDefinitionOutput() ModelDefinitionOutput
	ToModelDefinitionOutputWithContext(context.Context) ModelDefinitionOutput
}

type ModelDefinitionArgs struct {
	// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
	ModelOptions ModelDefinitionModelOptionsPtrInput `pulumi:"modelOptions"`
	// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
	TrainingRuns BqmlTrainingRunArrayInput `pulumi:"trainingRuns"`
}

func (ModelDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinition)(nil)).Elem()
}

func (i ModelDefinitionArgs) ToModelDefinitionOutput() ModelDefinitionOutput {
	return i.ToModelDefinitionOutputWithContext(context.Background())
}

func (i ModelDefinitionArgs) ToModelDefinitionOutputWithContext(ctx context.Context) ModelDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionOutput)
}

func (i ModelDefinitionArgs) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return i.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (i ModelDefinitionArgs) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionOutput).ToModelDefinitionPtrOutputWithContext(ctx)
}

// ModelDefinitionPtrInput is an input type that accepts ModelDefinitionArgs, ModelDefinitionPtr and ModelDefinitionPtrOutput values.
// You can construct a concrete instance of `ModelDefinitionPtrInput` via:
//
//	        ModelDefinitionArgs{...}
//
//	or:
//
//	        nil
type ModelDefinitionPtrInput interface {
	pulumi.Input

	ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput
	ToModelDefinitionPtrOutputWithContext(context.Context) ModelDefinitionPtrOutput
}

type modelDefinitionPtrType ModelDefinitionArgs

func ModelDefinitionPtr(v *ModelDefinitionArgs) ModelDefinitionPtrInput {
	return (*modelDefinitionPtrType)(v)
}

func (*modelDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinition)(nil)).Elem()
}

func (i *modelDefinitionPtrType) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return i.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (i *modelDefinitionPtrType) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionPtrOutput)
}

type ModelDefinitionOutput struct{ *pulumi.OutputState }

func (ModelDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinition)(nil)).Elem()
}

func (o ModelDefinitionOutput) ToModelDefinitionOutput() ModelDefinitionOutput {
	return o
}

func (o ModelDefinitionOutput) ToModelDefinitionOutputWithContext(ctx context.Context) ModelDefinitionOutput {
	return o
}

func (o ModelDefinitionOutput) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return o.ToModelDefinitionPtrOutputWithContext(context.Background())
}

func (o ModelDefinitionOutput) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelDefinition) *ModelDefinition {
		return &v
	}).(ModelDefinitionPtrOutput)
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
func (o ModelDefinitionOutput) ModelOptions() ModelDefinitionModelOptionsPtrOutput {
	return o.ApplyT(func(v ModelDefinition) *ModelDefinitionModelOptions { return v.ModelOptions }).(ModelDefinitionModelOptionsPtrOutput)
}

// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
func (o ModelDefinitionOutput) TrainingRuns() BqmlTrainingRunArrayOutput {
	return o.ApplyT(func(v ModelDefinition) []BqmlTrainingRun { return v.TrainingRuns }).(BqmlTrainingRunArrayOutput)
}

type ModelDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ModelDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinition)(nil)).Elem()
}

func (o ModelDefinitionPtrOutput) ToModelDefinitionPtrOutput() ModelDefinitionPtrOutput {
	return o
}

func (o ModelDefinitionPtrOutput) ToModelDefinitionPtrOutputWithContext(ctx context.Context) ModelDefinitionPtrOutput {
	return o
}

func (o ModelDefinitionPtrOutput) Elem() ModelDefinitionOutput {
	return o.ApplyT(func(v *ModelDefinition) ModelDefinition {
		if v != nil {
			return *v
		}
		var ret ModelDefinition
		return ret
	}).(ModelDefinitionOutput)
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
func (o ModelDefinitionPtrOutput) ModelOptions() ModelDefinitionModelOptionsPtrOutput {
	return o.ApplyT(func(v *ModelDefinition) *ModelDefinitionModelOptions {
		if v == nil {
			return nil
		}
		return v.ModelOptions
	}).(ModelDefinitionModelOptionsPtrOutput)
}

// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
func (o ModelDefinitionPtrOutput) TrainingRuns() BqmlTrainingRunArrayOutput {
	return o.ApplyT(func(v *ModelDefinition) []BqmlTrainingRun {
		if v == nil {
			return nil
		}
		return v.TrainingRuns
	}).(BqmlTrainingRunArrayOutput)
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
type ModelDefinitionModelOptions struct {
	Labels    []string `pulumi:"labels"`
	LossType  *string  `pulumi:"lossType"`
	ModelType *string  `pulumi:"modelType"`
}

// ModelDefinitionModelOptionsInput is an input type that accepts ModelDefinitionModelOptionsArgs and ModelDefinitionModelOptionsOutput values.
// You can construct a concrete instance of `ModelDefinitionModelOptionsInput` via:
//
//	ModelDefinitionModelOptionsArgs{...}
type ModelDefinitionModelOptionsInput interface {
	pulumi.Input

	ToModelDefinitionModelOptionsOutput() ModelDefinitionModelOptionsOutput
	ToModelDefinitionModelOptionsOutputWithContext(context.Context) ModelDefinitionModelOptionsOutput
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
type ModelDefinitionModelOptionsArgs struct {
	Labels    pulumi.StringArrayInput `pulumi:"labels"`
	LossType  pulumi.StringPtrInput   `pulumi:"lossType"`
	ModelType pulumi.StringPtrInput   `pulumi:"modelType"`
}

func (ModelDefinitionModelOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionModelOptions)(nil)).Elem()
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsOutput() ModelDefinitionModelOptionsOutput {
	return i.ToModelDefinitionModelOptionsOutputWithContext(context.Background())
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionModelOptionsOutput)
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return i.ToModelDefinitionModelOptionsPtrOutputWithContext(context.Background())
}

func (i ModelDefinitionModelOptionsArgs) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionModelOptionsOutput).ToModelDefinitionModelOptionsPtrOutputWithContext(ctx)
}

// ModelDefinitionModelOptionsPtrInput is an input type that accepts ModelDefinitionModelOptionsArgs, ModelDefinitionModelOptionsPtr and ModelDefinitionModelOptionsPtrOutput values.
// You can construct a concrete instance of `ModelDefinitionModelOptionsPtrInput` via:
//
//	        ModelDefinitionModelOptionsArgs{...}
//
//	or:
//
//	        nil
type ModelDefinitionModelOptionsPtrInput interface {
	pulumi.Input

	ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput
	ToModelDefinitionModelOptionsPtrOutputWithContext(context.Context) ModelDefinitionModelOptionsPtrOutput
}

type modelDefinitionModelOptionsPtrType ModelDefinitionModelOptionsArgs

func ModelDefinitionModelOptionsPtr(v *ModelDefinitionModelOptionsArgs) ModelDefinitionModelOptionsPtrInput {
	return (*modelDefinitionModelOptionsPtrType)(v)
}

func (*modelDefinitionModelOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinitionModelOptions)(nil)).Elem()
}

func (i *modelDefinitionModelOptionsPtrType) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return i.ToModelDefinitionModelOptionsPtrOutputWithContext(context.Background())
}

func (i *modelDefinitionModelOptionsPtrType) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelDefinitionModelOptionsPtrOutput)
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
type ModelDefinitionModelOptionsOutput struct{ *pulumi.OutputState }

func (ModelDefinitionModelOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionModelOptions)(nil)).Elem()
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsOutput() ModelDefinitionModelOptionsOutput {
	return o
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsOutput {
	return o
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return o.ToModelDefinitionModelOptionsPtrOutputWithContext(context.Background())
}

func (o ModelDefinitionModelOptionsOutput) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelDefinitionModelOptions) *ModelDefinitionModelOptions {
		return &v
	}).(ModelDefinitionModelOptionsPtrOutput)
}

func (o ModelDefinitionModelOptionsOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptions) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o ModelDefinitionModelOptionsOutput) LossType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptions) *string { return v.LossType }).(pulumi.StringPtrOutput)
}

func (o ModelDefinitionModelOptionsOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptions) *string { return v.ModelType }).(pulumi.StringPtrOutput)
}

type ModelDefinitionModelOptionsPtrOutput struct{ *pulumi.OutputState }

func (ModelDefinitionModelOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelDefinitionModelOptions)(nil)).Elem()
}

func (o ModelDefinitionModelOptionsPtrOutput) ToModelDefinitionModelOptionsPtrOutput() ModelDefinitionModelOptionsPtrOutput {
	return o
}

func (o ModelDefinitionModelOptionsPtrOutput) ToModelDefinitionModelOptionsPtrOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsPtrOutput {
	return o
}

func (o ModelDefinitionModelOptionsPtrOutput) Elem() ModelDefinitionModelOptionsOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) ModelDefinitionModelOptions {
		if v != nil {
			return *v
		}
		var ret ModelDefinitionModelOptions
		return ret
	}).(ModelDefinitionModelOptionsOutput)
}

func (o ModelDefinitionModelOptionsPtrOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) []string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringArrayOutput)
}

func (o ModelDefinitionModelOptionsPtrOutput) LossType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) *string {
		if v == nil {
			return nil
		}
		return v.LossType
	}).(pulumi.StringPtrOutput)
}

func (o ModelDefinitionModelOptionsPtrOutput) ModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelDefinitionModelOptions) *string {
		if v == nil {
			return nil
		}
		return v.ModelType
	}).(pulumi.StringPtrOutput)
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
type ModelDefinitionModelOptionsResponse struct {
	Labels    []string `pulumi:"labels"`
	LossType  string   `pulumi:"lossType"`
	ModelType string   `pulumi:"modelType"`
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
type ModelDefinitionModelOptionsResponseOutput struct{ *pulumi.OutputState }

func (ModelDefinitionModelOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionModelOptionsResponse)(nil)).Elem()
}

func (o ModelDefinitionModelOptionsResponseOutput) ToModelDefinitionModelOptionsResponseOutput() ModelDefinitionModelOptionsResponseOutput {
	return o
}

func (o ModelDefinitionModelOptionsResponseOutput) ToModelDefinitionModelOptionsResponseOutputWithContext(ctx context.Context) ModelDefinitionModelOptionsResponseOutput {
	return o
}

func (o ModelDefinitionModelOptionsResponseOutput) Labels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptionsResponse) []string { return v.Labels }).(pulumi.StringArrayOutput)
}

func (o ModelDefinitionModelOptionsResponseOutput) LossType() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptionsResponse) string { return v.LossType }).(pulumi.StringOutput)
}

func (o ModelDefinitionModelOptionsResponseOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v ModelDefinitionModelOptionsResponse) string { return v.ModelType }).(pulumi.StringOutput)
}

type ModelDefinitionResponse struct {
	// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
	ModelOptions ModelDefinitionModelOptionsResponse `pulumi:"modelOptions"`
	// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
	TrainingRuns []BqmlTrainingRunResponse `pulumi:"trainingRuns"`
}

type ModelDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ModelDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelDefinitionResponse)(nil)).Elem()
}

func (o ModelDefinitionResponseOutput) ToModelDefinitionResponseOutput() ModelDefinitionResponseOutput {
	return o
}

func (o ModelDefinitionResponseOutput) ToModelDefinitionResponseOutputWithContext(ctx context.Context) ModelDefinitionResponseOutput {
	return o
}

// [Output-only, Beta] Model options used for the first training run. These options are immutable for subsequent training runs. Default values are used for any options not specified in the input query.
func (o ModelDefinitionResponseOutput) ModelOptions() ModelDefinitionModelOptionsResponseOutput {
	return o.ApplyT(func(v ModelDefinitionResponse) ModelDefinitionModelOptionsResponse { return v.ModelOptions }).(ModelDefinitionModelOptionsResponseOutput)
}

// [Output-only, Beta] Information about ml training runs, each training run comprises of multiple iterations and there may be multiple training runs for the model if warm start is used or if a user decides to continue a previously cancelled query.
func (o ModelDefinitionResponseOutput) TrainingRuns() BqmlTrainingRunResponseArrayOutput {
	return o.ApplyT(func(v ModelDefinitionResponse) []BqmlTrainingRunResponse { return v.TrainingRuns }).(BqmlTrainingRunResponseArrayOutput)
}

type ModelReference struct {
	// The ID of the dataset containing this model.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId string `pulumi:"modelId"`
	// The ID of the project containing this model.
	Project string `pulumi:"project"`
}

// ModelReferenceInput is an input type that accepts ModelReferenceArgs and ModelReferenceOutput values.
// You can construct a concrete instance of `ModelReferenceInput` via:
//
//	ModelReferenceArgs{...}
type ModelReferenceInput interface {
	pulumi.Input

	ToModelReferenceOutput() ModelReferenceOutput
	ToModelReferenceOutputWithContext(context.Context) ModelReferenceOutput
}

type ModelReferenceArgs struct {
	// The ID of the dataset containing this model.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId pulumi.StringInput `pulumi:"modelId"`
	// The ID of the project containing this model.
	Project pulumi.StringInput `pulumi:"project"`
}

func (ModelReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReference)(nil)).Elem()
}

func (i ModelReferenceArgs) ToModelReferenceOutput() ModelReferenceOutput {
	return i.ToModelReferenceOutputWithContext(context.Background())
}

func (i ModelReferenceArgs) ToModelReferenceOutputWithContext(ctx context.Context) ModelReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferenceOutput)
}

func (i ModelReferenceArgs) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return i.ToModelReferencePtrOutputWithContext(context.Background())
}

func (i ModelReferenceArgs) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferenceOutput).ToModelReferencePtrOutputWithContext(ctx)
}

// ModelReferencePtrInput is an input type that accepts ModelReferenceArgs, ModelReferencePtr and ModelReferencePtrOutput values.
// You can construct a concrete instance of `ModelReferencePtrInput` via:
//
//	        ModelReferenceArgs{...}
//
//	or:
//
//	        nil
type ModelReferencePtrInput interface {
	pulumi.Input

	ToModelReferencePtrOutput() ModelReferencePtrOutput
	ToModelReferencePtrOutputWithContext(context.Context) ModelReferencePtrOutput
}

type modelReferencePtrType ModelReferenceArgs

func ModelReferencePtr(v *ModelReferenceArgs) ModelReferencePtrInput {
	return (*modelReferencePtrType)(v)
}

func (*modelReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelReference)(nil)).Elem()
}

func (i *modelReferencePtrType) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return i.ToModelReferencePtrOutputWithContext(context.Background())
}

func (i *modelReferencePtrType) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ModelReferencePtrOutput)
}

type ModelReferenceOutput struct{ *pulumi.OutputState }

func (ModelReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReference)(nil)).Elem()
}

func (o ModelReferenceOutput) ToModelReferenceOutput() ModelReferenceOutput {
	return o
}

func (o ModelReferenceOutput) ToModelReferenceOutputWithContext(ctx context.Context) ModelReferenceOutput {
	return o
}

func (o ModelReferenceOutput) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return o.ToModelReferencePtrOutputWithContext(context.Background())
}

func (o ModelReferenceOutput) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ModelReference) *ModelReference {
		return &v
	}).(ModelReferencePtrOutput)
}

// The ID of the dataset containing this model.
func (o ModelReferenceOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReference) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferenceOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReference) string { return v.ModelId }).(pulumi.StringOutput)
}

// The ID of the project containing this model.
func (o ModelReferenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReference) string { return v.Project }).(pulumi.StringOutput)
}

type ModelReferencePtrOutput struct{ *pulumi.OutputState }

func (ModelReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ModelReference)(nil)).Elem()
}

func (o ModelReferencePtrOutput) ToModelReferencePtrOutput() ModelReferencePtrOutput {
	return o
}

func (o ModelReferencePtrOutput) ToModelReferencePtrOutputWithContext(ctx context.Context) ModelReferencePtrOutput {
	return o
}

func (o ModelReferencePtrOutput) Elem() ModelReferenceOutput {
	return o.ApplyT(func(v *ModelReference) ModelReference {
		if v != nil {
			return *v
		}
		var ret ModelReference
		return ret
	}).(ModelReferenceOutput)
}

// The ID of the dataset containing this model.
func (o ModelReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferencePtrOutput) ModelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return &v.ModelId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this model.
func (o ModelReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ModelReference) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

type ModelReferenceResponse struct {
	// The ID of the dataset containing this model.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	ModelId string `pulumi:"modelId"`
	// The ID of the project containing this model.
	Project string `pulumi:"project"`
}

type ModelReferenceResponseOutput struct{ *pulumi.OutputState }

func (ModelReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ModelReferenceResponse)(nil)).Elem()
}

func (o ModelReferenceResponseOutput) ToModelReferenceResponseOutput() ModelReferenceResponseOutput {
	return o
}

func (o ModelReferenceResponseOutput) ToModelReferenceResponseOutputWithContext(ctx context.Context) ModelReferenceResponseOutput {
	return o
}

// The ID of the dataset containing this model.
func (o ModelReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o ModelReferenceResponseOutput) ModelId() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReferenceResponse) string { return v.ModelId }).(pulumi.StringOutput)
}

// The ID of the project containing this model.
func (o ModelReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v ModelReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

type ParquetOptions struct {
	// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference *bool `pulumi:"enableListInference"`
	// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString *bool `pulumi:"enumAsString"`
}

// ParquetOptionsInput is an input type that accepts ParquetOptionsArgs and ParquetOptionsOutput values.
// You can construct a concrete instance of `ParquetOptionsInput` via:
//
//	ParquetOptionsArgs{...}
type ParquetOptionsInput interface {
	pulumi.Input

	ToParquetOptionsOutput() ParquetOptionsOutput
	ToParquetOptionsOutputWithContext(context.Context) ParquetOptionsOutput
}

type ParquetOptionsArgs struct {
	// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference pulumi.BoolPtrInput `pulumi:"enableListInference"`
	// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString pulumi.BoolPtrInput `pulumi:"enumAsString"`
}

func (ParquetOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptions)(nil)).Elem()
}

func (i ParquetOptionsArgs) ToParquetOptionsOutput() ParquetOptionsOutput {
	return i.ToParquetOptionsOutputWithContext(context.Background())
}

func (i ParquetOptionsArgs) ToParquetOptionsOutputWithContext(ctx context.Context) ParquetOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsOutput)
}

func (i ParquetOptionsArgs) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return i.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (i ParquetOptionsArgs) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsOutput).ToParquetOptionsPtrOutputWithContext(ctx)
}

// ParquetOptionsPtrInput is an input type that accepts ParquetOptionsArgs, ParquetOptionsPtr and ParquetOptionsPtrOutput values.
// You can construct a concrete instance of `ParquetOptionsPtrInput` via:
//
//	        ParquetOptionsArgs{...}
//
//	or:
//
//	        nil
type ParquetOptionsPtrInput interface {
	pulumi.Input

	ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput
	ToParquetOptionsPtrOutputWithContext(context.Context) ParquetOptionsPtrOutput
}

type parquetOptionsPtrType ParquetOptionsArgs

func ParquetOptionsPtr(v *ParquetOptionsArgs) ParquetOptionsPtrInput {
	return (*parquetOptionsPtrType)(v)
}

func (*parquetOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetOptions)(nil)).Elem()
}

func (i *parquetOptionsPtrType) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return i.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (i *parquetOptionsPtrType) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParquetOptionsPtrOutput)
}

type ParquetOptionsOutput struct{ *pulumi.OutputState }

func (ParquetOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptions)(nil)).Elem()
}

func (o ParquetOptionsOutput) ToParquetOptionsOutput() ParquetOptionsOutput {
	return o
}

func (o ParquetOptionsOutput) ToParquetOptionsOutputWithContext(ctx context.Context) ParquetOptionsOutput {
	return o
}

func (o ParquetOptionsOutput) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return o.ToParquetOptionsPtrOutputWithContext(context.Background())
}

func (o ParquetOptionsOutput) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ParquetOptions) *ParquetOptions {
		return &v
	}).(ParquetOptionsPtrOutput)
}

// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsOutput) EnableListInference() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParquetOptions) *bool { return v.EnableListInference }).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsOutput) EnumAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ParquetOptions) *bool { return v.EnumAsString }).(pulumi.BoolPtrOutput)
}

type ParquetOptionsPtrOutput struct{ *pulumi.OutputState }

func (ParquetOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParquetOptions)(nil)).Elem()
}

func (o ParquetOptionsPtrOutput) ToParquetOptionsPtrOutput() ParquetOptionsPtrOutput {
	return o
}

func (o ParquetOptionsPtrOutput) ToParquetOptionsPtrOutputWithContext(ctx context.Context) ParquetOptionsPtrOutput {
	return o
}

func (o ParquetOptionsPtrOutput) Elem() ParquetOptionsOutput {
	return o.ApplyT(func(v *ParquetOptions) ParquetOptions {
		if v != nil {
			return *v
		}
		var ret ParquetOptions
		return ret
	}).(ParquetOptionsOutput)
}

// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsPtrOutput) EnableListInference() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParquetOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableListInference
	}).(pulumi.BoolPtrOutput)
}

// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsPtrOutput) EnumAsString() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ParquetOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnumAsString
	}).(pulumi.BoolPtrOutput)
}

type ParquetOptionsResponse struct {
	// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
	EnableListInference bool `pulumi:"enableListInference"`
	// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
	EnumAsString bool `pulumi:"enumAsString"`
}

type ParquetOptionsResponseOutput struct{ *pulumi.OutputState }

func (ParquetOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParquetOptionsResponse)(nil)).Elem()
}

func (o ParquetOptionsResponseOutput) ToParquetOptionsResponseOutput() ParquetOptionsResponseOutput {
	return o
}

func (o ParquetOptionsResponseOutput) ToParquetOptionsResponseOutputWithContext(ctx context.Context) ParquetOptionsResponseOutput {
	return o
}

// [Optional] Indicates whether to use schema inference specifically for Parquet LIST logical type.
func (o ParquetOptionsResponseOutput) EnableListInference() pulumi.BoolOutput {
	return o.ApplyT(func(v ParquetOptionsResponse) bool { return v.EnableListInference }).(pulumi.BoolOutput)
}

// [Optional] Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.
func (o ParquetOptionsResponseOutput) EnumAsString() pulumi.BoolOutput {
	return o.ApplyT(func(v ParquetOptionsResponse) bool { return v.EnumAsString }).(pulumi.BoolOutput)
}

type QueryParameter struct {
	// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name *string `pulumi:"name"`
	// [Required] The type of this parameter.
	ParameterType *QueryParameterType `pulumi:"parameterType"`
	// [Required] The value of this parameter.
	ParameterValue *QueryParameterValue `pulumi:"parameterValue"`
}

// QueryParameterInput is an input type that accepts QueryParameterArgs and QueryParameterOutput values.
// You can construct a concrete instance of `QueryParameterInput` via:
//
//	QueryParameterArgs{...}
type QueryParameterInput interface {
	pulumi.Input

	ToQueryParameterOutput() QueryParameterOutput
	ToQueryParameterOutputWithContext(context.Context) QueryParameterOutput
}

type QueryParameterArgs struct {
	// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [Required] The type of this parameter.
	ParameterType QueryParameterTypePtrInput `pulumi:"parameterType"`
	// [Required] The value of this parameter.
	ParameterValue QueryParameterValuePtrInput `pulumi:"parameterValue"`
}

func (QueryParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameter)(nil)).Elem()
}

func (i QueryParameterArgs) ToQueryParameterOutput() QueryParameterOutput {
	return i.ToQueryParameterOutputWithContext(context.Background())
}

func (i QueryParameterArgs) ToQueryParameterOutputWithContext(ctx context.Context) QueryParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterOutput)
}

// QueryParameterArrayInput is an input type that accepts QueryParameterArray and QueryParameterArrayOutput values.
// You can construct a concrete instance of `QueryParameterArrayInput` via:
//
//	QueryParameterArray{ QueryParameterArgs{...} }
type QueryParameterArrayInput interface {
	pulumi.Input

	ToQueryParameterArrayOutput() QueryParameterArrayOutput
	ToQueryParameterArrayOutputWithContext(context.Context) QueryParameterArrayOutput
}

type QueryParameterArray []QueryParameterInput

func (QueryParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameter)(nil)).Elem()
}

func (i QueryParameterArray) ToQueryParameterArrayOutput() QueryParameterArrayOutput {
	return i.ToQueryParameterArrayOutputWithContext(context.Background())
}

func (i QueryParameterArray) ToQueryParameterArrayOutputWithContext(ctx context.Context) QueryParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterArrayOutput)
}

type QueryParameterOutput struct{ *pulumi.OutputState }

func (QueryParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameter)(nil)).Elem()
}

func (o QueryParameterOutput) ToQueryParameterOutput() QueryParameterOutput {
	return o
}

func (o QueryParameterOutput) ToQueryParameterOutputWithContext(ctx context.Context) QueryParameterOutput {
	return o
}

// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
func (o QueryParameterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameter) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [Required] The type of this parameter.
func (o QueryParameterOutput) ParameterType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameter) *QueryParameterType { return v.ParameterType }).(QueryParameterTypePtrOutput)
}

// [Required] The value of this parameter.
func (o QueryParameterOutput) ParameterValue() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v QueryParameter) *QueryParameterValue { return v.ParameterValue }).(QueryParameterValuePtrOutput)
}

type QueryParameterArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameter)(nil)).Elem()
}

func (o QueryParameterArrayOutput) ToQueryParameterArrayOutput() QueryParameterArrayOutput {
	return o
}

func (o QueryParameterArrayOutput) ToQueryParameterArrayOutputWithContext(ctx context.Context) QueryParameterArrayOutput {
	return o
}

func (o QueryParameterArrayOutput) Index(i pulumi.IntInput) QueryParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameter {
		return vs[0].([]QueryParameter)[vs[1].(int)]
	}).(QueryParameterOutput)
}

type QueryParameterResponse struct {
	// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
	Name string `pulumi:"name"`
	// [Required] The type of this parameter.
	ParameterType QueryParameterTypeResponse `pulumi:"parameterType"`
	// [Required] The value of this parameter.
	ParameterValue QueryParameterValueResponse `pulumi:"parameterValue"`
}

type QueryParameterResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterResponse)(nil)).Elem()
}

func (o QueryParameterResponseOutput) ToQueryParameterResponseOutput() QueryParameterResponseOutput {
	return o
}

func (o QueryParameterResponseOutput) ToQueryParameterResponseOutputWithContext(ctx context.Context) QueryParameterResponseOutput {
	return o
}

// [Optional] If unset, this is a positional parameter. Otherwise, should be unique within a query.
func (o QueryParameterResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterResponse) string { return v.Name }).(pulumi.StringOutput)
}

// [Required] The type of this parameter.
func (o QueryParameterResponseOutput) ParameterType() QueryParameterTypeResponseOutput {
	return o.ApplyT(func(v QueryParameterResponse) QueryParameterTypeResponse { return v.ParameterType }).(QueryParameterTypeResponseOutput)
}

// [Required] The value of this parameter.
func (o QueryParameterResponseOutput) ParameterValue() QueryParameterValueResponseOutput {
	return o.ApplyT(func(v QueryParameterResponse) QueryParameterValueResponse { return v.ParameterValue }).(QueryParameterValueResponseOutput)
}

type QueryParameterResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterResponse)(nil)).Elem()
}

func (o QueryParameterResponseArrayOutput) ToQueryParameterResponseArrayOutput() QueryParameterResponseArrayOutput {
	return o
}

func (o QueryParameterResponseArrayOutput) ToQueryParameterResponseArrayOutputWithContext(ctx context.Context) QueryParameterResponseArrayOutput {
	return o
}

func (o QueryParameterResponseArrayOutput) Index(i pulumi.IntInput) QueryParameterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterResponse {
		return vs[0].([]QueryParameterResponse)[vs[1].(int)]
	}).(QueryParameterResponseOutput)
}

type QueryParameterType struct {
	// [Optional] The type of the array's elements, if this is an array.
	ArrayType *QueryParameterType `pulumi:"arrayType"`
	// [Optional] The types of the fields of this struct, in order, if this is a struct.
	StructTypes []QueryParameterTypeStructTypesItem `pulumi:"structTypes"`
	// [Required] The top level type of this field.
	Type *string `pulumi:"type"`
}

// QueryParameterTypeInput is an input type that accepts QueryParameterTypeArgs and QueryParameterTypeOutput values.
// You can construct a concrete instance of `QueryParameterTypeInput` via:
//
//	QueryParameterTypeArgs{...}
type QueryParameterTypeInput interface {
	pulumi.Input

	ToQueryParameterTypeOutput() QueryParameterTypeOutput
	ToQueryParameterTypeOutputWithContext(context.Context) QueryParameterTypeOutput
}

type QueryParameterTypeArgs struct {
	// [Optional] The type of the array's elements, if this is an array.
	ArrayType QueryParameterTypePtrInput `pulumi:"arrayType"`
	// [Optional] The types of the fields of this struct, in order, if this is a struct.
	StructTypes QueryParameterTypeStructTypesItemArrayInput `pulumi:"structTypes"`
	// [Required] The top level type of this field.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (QueryParameterTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterType)(nil)).Elem()
}

func (i QueryParameterTypeArgs) ToQueryParameterTypeOutput() QueryParameterTypeOutput {
	return i.ToQueryParameterTypeOutputWithContext(context.Background())
}

func (i QueryParameterTypeArgs) ToQueryParameterTypeOutputWithContext(ctx context.Context) QueryParameterTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeOutput)
}

func (i QueryParameterTypeArgs) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return i.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (i QueryParameterTypeArgs) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeOutput).ToQueryParameterTypePtrOutputWithContext(ctx)
}

// QueryParameterTypePtrInput is an input type that accepts QueryParameterTypeArgs, QueryParameterTypePtr and QueryParameterTypePtrOutput values.
// You can construct a concrete instance of `QueryParameterTypePtrInput` via:
//
//	        QueryParameterTypeArgs{...}
//
//	or:
//
//	        nil
type QueryParameterTypePtrInput interface {
	pulumi.Input

	ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput
	ToQueryParameterTypePtrOutputWithContext(context.Context) QueryParameterTypePtrOutput
}

type queryParameterTypePtrType QueryParameterTypeArgs

func QueryParameterTypePtr(v *QueryParameterTypeArgs) QueryParameterTypePtrInput {
	return (*queryParameterTypePtrType)(v)
}

func (*queryParameterTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterType)(nil)).Elem()
}

func (i *queryParameterTypePtrType) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return i.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (i *queryParameterTypePtrType) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypePtrOutput)
}

type QueryParameterTypeOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterType)(nil)).Elem()
}

func (o QueryParameterTypeOutput) ToQueryParameterTypeOutput() QueryParameterTypeOutput {
	return o
}

func (o QueryParameterTypeOutput) ToQueryParameterTypeOutputWithContext(ctx context.Context) QueryParameterTypeOutput {
	return o
}

func (o QueryParameterTypeOutput) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return o.ToQueryParameterTypePtrOutputWithContext(context.Background())
}

func (o QueryParameterTypeOutput) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryParameterType) *QueryParameterType {
		return &v
	}).(QueryParameterTypePtrOutput)
}

// [Optional] The type of the array's elements, if this is an array.
func (o QueryParameterTypeOutput) ArrayType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameterType) *QueryParameterType { return v.ArrayType }).(QueryParameterTypePtrOutput)
}

// [Optional] The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypeOutput) StructTypes() QueryParameterTypeStructTypesItemArrayOutput {
	return o.ApplyT(func(v QueryParameterType) []QueryParameterTypeStructTypesItem { return v.StructTypes }).(QueryParameterTypeStructTypesItemArrayOutput)
}

// [Required] The top level type of this field.
func (o QueryParameterTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type QueryParameterTypePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterType)(nil)).Elem()
}

func (o QueryParameterTypePtrOutput) ToQueryParameterTypePtrOutput() QueryParameterTypePtrOutput {
	return o
}

func (o QueryParameterTypePtrOutput) ToQueryParameterTypePtrOutputWithContext(ctx context.Context) QueryParameterTypePtrOutput {
	return o
}

func (o QueryParameterTypePtrOutput) Elem() QueryParameterTypeOutput {
	return o.ApplyT(func(v *QueryParameterType) QueryParameterType {
		if v != nil {
			return *v
		}
		var ret QueryParameterType
		return ret
	}).(QueryParameterTypeOutput)
}

// [Optional] The type of the array's elements, if this is an array.
func (o QueryParameterTypePtrOutput) ArrayType() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v *QueryParameterType) *QueryParameterType {
		if v == nil {
			return nil
		}
		return v.ArrayType
	}).(QueryParameterTypePtrOutput)
}

// [Optional] The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypePtrOutput) StructTypes() QueryParameterTypeStructTypesItemArrayOutput {
	return o.ApplyT(func(v *QueryParameterType) []QueryParameterTypeStructTypesItem {
		if v == nil {
			return nil
		}
		return v.StructTypes
	}).(QueryParameterTypeStructTypesItemArrayOutput)
}

// [Required] The top level type of this field.
func (o QueryParameterTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterType) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type QueryParameterTypeResponse struct {
	// [Optional] The type of the array's elements, if this is an array.
	ArrayType *QueryParameterTypeResponse `pulumi:"arrayType"`
	// [Optional] The types of the fields of this struct, in order, if this is a struct.
	StructTypes []QueryParameterTypeStructTypesItemResponse `pulumi:"structTypes"`
	// [Required] The top level type of this field.
	Type string `pulumi:"type"`
}

type QueryParameterTypeResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeResponse)(nil)).Elem()
}

func (o QueryParameterTypeResponseOutput) ToQueryParameterTypeResponseOutput() QueryParameterTypeResponseOutput {
	return o
}

func (o QueryParameterTypeResponseOutput) ToQueryParameterTypeResponseOutputWithContext(ctx context.Context) QueryParameterTypeResponseOutput {
	return o
}

// [Optional] The type of the array's elements, if this is an array.
func (o QueryParameterTypeResponseOutput) ArrayType() QueryParameterTypeResponsePtrOutput {
	return o.ApplyT(func(v QueryParameterTypeResponse) *QueryParameterTypeResponse { return v.ArrayType }).(QueryParameterTypeResponsePtrOutput)
}

// [Optional] The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypeResponseOutput) StructTypes() QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o.ApplyT(func(v QueryParameterTypeResponse) []QueryParameterTypeStructTypesItemResponse { return v.StructTypes }).(QueryParameterTypeStructTypesItemResponseArrayOutput)
}

// [Required] The top level type of this field.
func (o QueryParameterTypeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterTypeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type QueryParameterTypeResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterTypeResponse)(nil)).Elem()
}

func (o QueryParameterTypeResponsePtrOutput) ToQueryParameterTypeResponsePtrOutput() QueryParameterTypeResponsePtrOutput {
	return o
}

func (o QueryParameterTypeResponsePtrOutput) ToQueryParameterTypeResponsePtrOutputWithContext(ctx context.Context) QueryParameterTypeResponsePtrOutput {
	return o
}

func (o QueryParameterTypeResponsePtrOutput) Elem() QueryParameterTypeResponseOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) QueryParameterTypeResponse {
		if v != nil {
			return *v
		}
		var ret QueryParameterTypeResponse
		return ret
	}).(QueryParameterTypeResponseOutput)
}

// [Optional] The type of the array's elements, if this is an array.
func (o QueryParameterTypeResponsePtrOutput) ArrayType() QueryParameterTypeResponsePtrOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) *QueryParameterTypeResponse {
		if v == nil {
			return nil
		}
		return v.ArrayType
	}).(QueryParameterTypeResponsePtrOutput)
}

// [Optional] The types of the fields of this struct, in order, if this is a struct.
func (o QueryParameterTypeResponsePtrOutput) StructTypes() QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) []QueryParameterTypeStructTypesItemResponse {
		if v == nil {
			return nil
		}
		return v.StructTypes
	}).(QueryParameterTypeStructTypesItemResponseArrayOutput)
}

// [Required] The top level type of this field.
func (o QueryParameterTypeResponsePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterTypeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type QueryParameterTypeStructTypesItem struct {
	// [Optional] Human-oriented description of the field.
	Description *string `pulumi:"description"`
	// [Optional] The name of this field.
	Name *string `pulumi:"name"`
	// [Required] The type of this field.
	Type *QueryParameterType `pulumi:"type"`
}

// QueryParameterTypeStructTypesItemInput is an input type that accepts QueryParameterTypeStructTypesItemArgs and QueryParameterTypeStructTypesItemOutput values.
// You can construct a concrete instance of `QueryParameterTypeStructTypesItemInput` via:
//
//	QueryParameterTypeStructTypesItemArgs{...}
type QueryParameterTypeStructTypesItemInput interface {
	pulumi.Input

	ToQueryParameterTypeStructTypesItemOutput() QueryParameterTypeStructTypesItemOutput
	ToQueryParameterTypeStructTypesItemOutputWithContext(context.Context) QueryParameterTypeStructTypesItemOutput
}

type QueryParameterTypeStructTypesItemArgs struct {
	// [Optional] Human-oriented description of the field.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Optional] The name of this field.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// [Required] The type of this field.
	Type QueryParameterTypePtrInput `pulumi:"type"`
}

func (QueryParameterTypeStructTypesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (i QueryParameterTypeStructTypesItemArgs) ToQueryParameterTypeStructTypesItemOutput() QueryParameterTypeStructTypesItemOutput {
	return i.ToQueryParameterTypeStructTypesItemOutputWithContext(context.Background())
}

func (i QueryParameterTypeStructTypesItemArgs) ToQueryParameterTypeStructTypesItemOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeStructTypesItemOutput)
}

// QueryParameterTypeStructTypesItemArrayInput is an input type that accepts QueryParameterTypeStructTypesItemArray and QueryParameterTypeStructTypesItemArrayOutput values.
// You can construct a concrete instance of `QueryParameterTypeStructTypesItemArrayInput` via:
//
//	QueryParameterTypeStructTypesItemArray{ QueryParameterTypeStructTypesItemArgs{...} }
type QueryParameterTypeStructTypesItemArrayInput interface {
	pulumi.Input

	ToQueryParameterTypeStructTypesItemArrayOutput() QueryParameterTypeStructTypesItemArrayOutput
	ToQueryParameterTypeStructTypesItemArrayOutputWithContext(context.Context) QueryParameterTypeStructTypesItemArrayOutput
}

type QueryParameterTypeStructTypesItemArray []QueryParameterTypeStructTypesItemInput

func (QueryParameterTypeStructTypesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (i QueryParameterTypeStructTypesItemArray) ToQueryParameterTypeStructTypesItemArrayOutput() QueryParameterTypeStructTypesItemArrayOutput {
	return i.ToQueryParameterTypeStructTypesItemArrayOutputWithContext(context.Background())
}

func (i QueryParameterTypeStructTypesItemArray) ToQueryParameterTypeStructTypesItemArrayOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterTypeStructTypesItemArrayOutput)
}

type QueryParameterTypeStructTypesItemOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemOutput) ToQueryParameterTypeStructTypesItemOutput() QueryParameterTypeStructTypesItemOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemOutput) ToQueryParameterTypeStructTypesItemOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemOutput {
	return o
}

// [Optional] Human-oriented description of the field.
func (o QueryParameterTypeStructTypesItemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItem) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Optional] The name of this field.
func (o QueryParameterTypeStructTypesItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// [Required] The type of this field.
func (o QueryParameterTypeStructTypesItemOutput) Type() QueryParameterTypePtrOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItem) *QueryParameterType { return v.Type }).(QueryParameterTypePtrOutput)
}

type QueryParameterTypeStructTypesItemArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterTypeStructTypesItem)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemArrayOutput) ToQueryParameterTypeStructTypesItemArrayOutput() QueryParameterTypeStructTypesItemArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemArrayOutput) ToQueryParameterTypeStructTypesItemArrayOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemArrayOutput) Index(i pulumi.IntInput) QueryParameterTypeStructTypesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterTypeStructTypesItem {
		return vs[0].([]QueryParameterTypeStructTypesItem)[vs[1].(int)]
	}).(QueryParameterTypeStructTypesItemOutput)
}

type QueryParameterTypeStructTypesItemResponse struct {
	// [Optional] Human-oriented description of the field.
	Description string `pulumi:"description"`
	// [Optional] The name of this field.
	Name string `pulumi:"name"`
	// [Required] The type of this field.
	Type QueryParameterTypeResponse `pulumi:"type"`
}

type QueryParameterTypeStructTypesItemResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterTypeStructTypesItemResponse)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemResponseOutput) ToQueryParameterTypeStructTypesItemResponseOutput() QueryParameterTypeStructTypesItemResponseOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemResponseOutput) ToQueryParameterTypeStructTypesItemResponseOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemResponseOutput {
	return o
}

// [Optional] Human-oriented description of the field.
func (o QueryParameterTypeStructTypesItemResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItemResponse) string { return v.Description }).(pulumi.StringOutput)
}

// [Optional] The name of this field.
func (o QueryParameterTypeStructTypesItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

// [Required] The type of this field.
func (o QueryParameterTypeStructTypesItemResponseOutput) Type() QueryParameterTypeResponseOutput {
	return o.ApplyT(func(v QueryParameterTypeStructTypesItemResponse) QueryParameterTypeResponse { return v.Type }).(QueryParameterTypeResponseOutput)
}

type QueryParameterTypeStructTypesItemResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterTypeStructTypesItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterTypeStructTypesItemResponse)(nil)).Elem()
}

func (o QueryParameterTypeStructTypesItemResponseArrayOutput) ToQueryParameterTypeStructTypesItemResponseArrayOutput() QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemResponseArrayOutput) ToQueryParameterTypeStructTypesItemResponseArrayOutputWithContext(ctx context.Context) QueryParameterTypeStructTypesItemResponseArrayOutput {
	return o
}

func (o QueryParameterTypeStructTypesItemResponseArrayOutput) Index(i pulumi.IntInput) QueryParameterTypeStructTypesItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterTypeStructTypesItemResponse {
		return vs[0].([]QueryParameterTypeStructTypesItemResponse)[vs[1].(int)]
	}).(QueryParameterTypeStructTypesItemResponseOutput)
}

type QueryParameterValue struct {
	// [Optional] The array values, if this is an array type.
	ArrayValues []QueryParameterValue `pulumi:"arrayValues"`
	// [Optional] The struct field values, in order of the struct type's declaration.
	StructValues *QueryParameterValue `pulumi:"structValues"`
	// [Optional] The value of this value, if a simple scalar type.
	Value *string `pulumi:"value"`
}

// QueryParameterValueInput is an input type that accepts QueryParameterValueArgs and QueryParameterValueOutput values.
// You can construct a concrete instance of `QueryParameterValueInput` via:
//
//	QueryParameterValueArgs{...}
type QueryParameterValueInput interface {
	pulumi.Input

	ToQueryParameterValueOutput() QueryParameterValueOutput
	ToQueryParameterValueOutputWithContext(context.Context) QueryParameterValueOutput
}

type QueryParameterValueArgs struct {
	// [Optional] The array values, if this is an array type.
	ArrayValues QueryParameterValueArrayInput `pulumi:"arrayValues"`
	// [Optional] The struct field values, in order of the struct type's declaration.
	StructValues QueryParameterValuePtrInput `pulumi:"structValues"`
	// [Optional] The value of this value, if a simple scalar type.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (QueryParameterValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValue)(nil)).Elem()
}

func (i QueryParameterValueArgs) ToQueryParameterValueOutput() QueryParameterValueOutput {
	return i.ToQueryParameterValueOutputWithContext(context.Background())
}

func (i QueryParameterValueArgs) ToQueryParameterValueOutputWithContext(ctx context.Context) QueryParameterValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueOutput)
}

func (i QueryParameterValueArgs) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return i.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (i QueryParameterValueArgs) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueOutput).ToQueryParameterValuePtrOutputWithContext(ctx)
}

// QueryParameterValuePtrInput is an input type that accepts QueryParameterValueArgs, QueryParameterValuePtr and QueryParameterValuePtrOutput values.
// You can construct a concrete instance of `QueryParameterValuePtrInput` via:
//
//	        QueryParameterValueArgs{...}
//
//	or:
//
//	        nil
type QueryParameterValuePtrInput interface {
	pulumi.Input

	ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput
	ToQueryParameterValuePtrOutputWithContext(context.Context) QueryParameterValuePtrOutput
}

type queryParameterValuePtrType QueryParameterValueArgs

func QueryParameterValuePtr(v *QueryParameterValueArgs) QueryParameterValuePtrInput {
	return (*queryParameterValuePtrType)(v)
}

func (*queryParameterValuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValue)(nil)).Elem()
}

func (i *queryParameterValuePtrType) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return i.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (i *queryParameterValuePtrType) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValuePtrOutput)
}

// QueryParameterValueArrayInput is an input type that accepts QueryParameterValueArray and QueryParameterValueArrayOutput values.
// You can construct a concrete instance of `QueryParameterValueArrayInput` via:
//
//	QueryParameterValueArray{ QueryParameterValueArgs{...} }
type QueryParameterValueArrayInput interface {
	pulumi.Input

	ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput
	ToQueryParameterValueArrayOutputWithContext(context.Context) QueryParameterValueArrayOutput
}

type QueryParameterValueArray []QueryParameterValueInput

func (QueryParameterValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValue)(nil)).Elem()
}

func (i QueryParameterValueArray) ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput {
	return i.ToQueryParameterValueArrayOutputWithContext(context.Background())
}

func (i QueryParameterValueArray) ToQueryParameterValueArrayOutputWithContext(ctx context.Context) QueryParameterValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryParameterValueArrayOutput)
}

type QueryParameterValueOutput struct{ *pulumi.OutputState }

func (QueryParameterValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValueOutput) ToQueryParameterValueOutput() QueryParameterValueOutput {
	return o
}

func (o QueryParameterValueOutput) ToQueryParameterValueOutputWithContext(ctx context.Context) QueryParameterValueOutput {
	return o
}

func (o QueryParameterValueOutput) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return o.ToQueryParameterValuePtrOutputWithContext(context.Background())
}

func (o QueryParameterValueOutput) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueryParameterValue) *QueryParameterValue {
		return &v
	}).(QueryParameterValuePtrOutput)
}

// [Optional] The array values, if this is an array type.
func (o QueryParameterValueOutput) ArrayValues() QueryParameterValueArrayOutput {
	return o.ApplyT(func(v QueryParameterValue) []QueryParameterValue { return v.ArrayValues }).(QueryParameterValueArrayOutput)
}

// [Optional] The struct field values, in order of the struct type's declaration.
func (o QueryParameterValueOutput) StructValues() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v QueryParameterValue) *QueryParameterValue { return v.StructValues }).(QueryParameterValuePtrOutput)
}

// [Optional] The value of this value, if a simple scalar type.
func (o QueryParameterValueOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueryParameterValue) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type QueryParameterValuePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterValuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValuePtrOutput) ToQueryParameterValuePtrOutput() QueryParameterValuePtrOutput {
	return o
}

func (o QueryParameterValuePtrOutput) ToQueryParameterValuePtrOutputWithContext(ctx context.Context) QueryParameterValuePtrOutput {
	return o
}

func (o QueryParameterValuePtrOutput) Elem() QueryParameterValueOutput {
	return o.ApplyT(func(v *QueryParameterValue) QueryParameterValue {
		if v != nil {
			return *v
		}
		var ret QueryParameterValue
		return ret
	}).(QueryParameterValueOutput)
}

// [Optional] The array values, if this is an array type.
func (o QueryParameterValuePtrOutput) ArrayValues() QueryParameterValueArrayOutput {
	return o.ApplyT(func(v *QueryParameterValue) []QueryParameterValue {
		if v == nil {
			return nil
		}
		return v.ArrayValues
	}).(QueryParameterValueArrayOutput)
}

// [Optional] The struct field values, in order of the struct type's declaration.
func (o QueryParameterValuePtrOutput) StructValues() QueryParameterValuePtrOutput {
	return o.ApplyT(func(v *QueryParameterValue) *QueryParameterValue {
		if v == nil {
			return nil
		}
		return v.StructValues
	}).(QueryParameterValuePtrOutput)
}

// [Optional] The value of this value, if a simple scalar type.
func (o QueryParameterValuePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterValue) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

type QueryParameterValueArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValue)(nil)).Elem()
}

func (o QueryParameterValueArrayOutput) ToQueryParameterValueArrayOutput() QueryParameterValueArrayOutput {
	return o
}

func (o QueryParameterValueArrayOutput) ToQueryParameterValueArrayOutputWithContext(ctx context.Context) QueryParameterValueArrayOutput {
	return o
}

func (o QueryParameterValueArrayOutput) Index(i pulumi.IntInput) QueryParameterValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterValue {
		return vs[0].([]QueryParameterValue)[vs[1].(int)]
	}).(QueryParameterValueOutput)
}

type QueryParameterValueResponse struct {
	// [Optional] The array values, if this is an array type.
	ArrayValues []QueryParameterValueResponse `pulumi:"arrayValues"`
	// [Optional] The struct field values, in order of the struct type's declaration.
	StructValues *QueryParameterValueResponse `pulumi:"structValues"`
	// [Optional] The value of this value, if a simple scalar type.
	Value string `pulumi:"value"`
}

type QueryParameterValueResponseOutput struct{ *pulumi.OutputState }

func (QueryParameterValueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryParameterValueResponse)(nil)).Elem()
}

func (o QueryParameterValueResponseOutput) ToQueryParameterValueResponseOutput() QueryParameterValueResponseOutput {
	return o
}

func (o QueryParameterValueResponseOutput) ToQueryParameterValueResponseOutputWithContext(ctx context.Context) QueryParameterValueResponseOutput {
	return o
}

// [Optional] The array values, if this is an array type.
func (o QueryParameterValueResponseOutput) ArrayValues() QueryParameterValueResponseArrayOutput {
	return o.ApplyT(func(v QueryParameterValueResponse) []QueryParameterValueResponse { return v.ArrayValues }).(QueryParameterValueResponseArrayOutput)
}

// [Optional] The struct field values, in order of the struct type's declaration.
func (o QueryParameterValueResponseOutput) StructValues() QueryParameterValueResponsePtrOutput {
	return o.ApplyT(func(v QueryParameterValueResponse) *QueryParameterValueResponse { return v.StructValues }).(QueryParameterValueResponsePtrOutput)
}

// [Optional] The value of this value, if a simple scalar type.
func (o QueryParameterValueResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v QueryParameterValueResponse) string { return v.Value }).(pulumi.StringOutput)
}

type QueryParameterValueResponsePtrOutput struct{ *pulumi.OutputState }

func (QueryParameterValueResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueryParameterValueResponse)(nil)).Elem()
}

func (o QueryParameterValueResponsePtrOutput) ToQueryParameterValueResponsePtrOutput() QueryParameterValueResponsePtrOutput {
	return o
}

func (o QueryParameterValueResponsePtrOutput) ToQueryParameterValueResponsePtrOutputWithContext(ctx context.Context) QueryParameterValueResponsePtrOutput {
	return o
}

func (o QueryParameterValueResponsePtrOutput) Elem() QueryParameterValueResponseOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) QueryParameterValueResponse {
		if v != nil {
			return *v
		}
		var ret QueryParameterValueResponse
		return ret
	}).(QueryParameterValueResponseOutput)
}

// [Optional] The array values, if this is an array type.
func (o QueryParameterValueResponsePtrOutput) ArrayValues() QueryParameterValueResponseArrayOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) []QueryParameterValueResponse {
		if v == nil {
			return nil
		}
		return v.ArrayValues
	}).(QueryParameterValueResponseArrayOutput)
}

// [Optional] The struct field values, in order of the struct type's declaration.
func (o QueryParameterValueResponsePtrOutput) StructValues() QueryParameterValueResponsePtrOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) *QueryParameterValueResponse {
		if v == nil {
			return nil
		}
		return v.StructValues
	}).(QueryParameterValueResponsePtrOutput)
}

// [Optional] The value of this value, if a simple scalar type.
func (o QueryParameterValueResponsePtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueryParameterValueResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.StringPtrOutput)
}

type QueryParameterValueResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryParameterValueResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryParameterValueResponse)(nil)).Elem()
}

func (o QueryParameterValueResponseArrayOutput) ToQueryParameterValueResponseArrayOutput() QueryParameterValueResponseArrayOutput {
	return o
}

func (o QueryParameterValueResponseArrayOutput) ToQueryParameterValueResponseArrayOutputWithContext(ctx context.Context) QueryParameterValueResponseArrayOutput {
	return o
}

func (o QueryParameterValueResponseArrayOutput) Index(i pulumi.IntInput) QueryParameterValueResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryParameterValueResponse {
		return vs[0].([]QueryParameterValueResponse)[vs[1].(int)]
	}).(QueryParameterValueResponseOutput)
}

type QueryTimelineSampleResponse struct {
	// Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
	ActiveUnits string `pulumi:"activeUnits"`
	// Total parallel units of work completed by this query.
	CompletedUnits string `pulumi:"completedUnits"`
	// Milliseconds elapsed since the start of query execution.
	ElapsedMs string `pulumi:"elapsedMs"`
	// Units of work that can be scheduled immediately. Providing additional slots for these units of work will speed up the query, provided no other query in the reservation needs additional slots.
	EstimatedRunnableUnits string `pulumi:"estimatedRunnableUnits"`
	// Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
	PendingUnits string `pulumi:"pendingUnits"`
	// Cumulative slot-ms consumed by the query.
	TotalSlotMs string `pulumi:"totalSlotMs"`
}

type QueryTimelineSampleResponseOutput struct{ *pulumi.OutputState }

func (QueryTimelineSampleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueryTimelineSampleResponse)(nil)).Elem()
}

func (o QueryTimelineSampleResponseOutput) ToQueryTimelineSampleResponseOutput() QueryTimelineSampleResponseOutput {
	return o
}

func (o QueryTimelineSampleResponseOutput) ToQueryTimelineSampleResponseOutputWithContext(ctx context.Context) QueryTimelineSampleResponseOutput {
	return o
}

// Total number of units currently being processed by workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.
func (o QueryTimelineSampleResponseOutput) ActiveUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.ActiveUnits }).(pulumi.StringOutput)
}

// Total parallel units of work completed by this query.
func (o QueryTimelineSampleResponseOutput) CompletedUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.CompletedUnits }).(pulumi.StringOutput)
}

// Milliseconds elapsed since the start of query execution.
func (o QueryTimelineSampleResponseOutput) ElapsedMs() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.ElapsedMs }).(pulumi.StringOutput)
}

// Units of work that can be scheduled immediately. Providing additional slots for these units of work will speed up the query, provided no other query in the reservation needs additional slots.
func (o QueryTimelineSampleResponseOutput) EstimatedRunnableUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.EstimatedRunnableUnits }).(pulumi.StringOutput)
}

// Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.
func (o QueryTimelineSampleResponseOutput) PendingUnits() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.PendingUnits }).(pulumi.StringOutput)
}

// Cumulative slot-ms consumed by the query.
func (o QueryTimelineSampleResponseOutput) TotalSlotMs() pulumi.StringOutput {
	return o.ApplyT(func(v QueryTimelineSampleResponse) string { return v.TotalSlotMs }).(pulumi.StringOutput)
}

type QueryTimelineSampleResponseArrayOutput struct{ *pulumi.OutputState }

func (QueryTimelineSampleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueryTimelineSampleResponse)(nil)).Elem()
}

func (o QueryTimelineSampleResponseArrayOutput) ToQueryTimelineSampleResponseArrayOutput() QueryTimelineSampleResponseArrayOutput {
	return o
}

func (o QueryTimelineSampleResponseArrayOutput) ToQueryTimelineSampleResponseArrayOutputWithContext(ctx context.Context) QueryTimelineSampleResponseArrayOutput {
	return o
}

func (o QueryTimelineSampleResponseArrayOutput) Index(i pulumi.IntInput) QueryTimelineSampleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueryTimelineSampleResponse {
		return vs[0].([]QueryTimelineSampleResponse)[vs[1].(int)]
	}).(QueryTimelineSampleResponseOutput)
}

type RangePartitioning struct {
	// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field *string `pulumi:"field"`
	// [TrustedTester] [Required] Defines the ranges for range partitioning.
	Range *RangePartitioningRange `pulumi:"range"`
}

// RangePartitioningInput is an input type that accepts RangePartitioningArgs and RangePartitioningOutput values.
// You can construct a concrete instance of `RangePartitioningInput` via:
//
//	RangePartitioningArgs{...}
type RangePartitioningInput interface {
	pulumi.Input

	ToRangePartitioningOutput() RangePartitioningOutput
	ToRangePartitioningOutputWithContext(context.Context) RangePartitioningOutput
}

type RangePartitioningArgs struct {
	// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field pulumi.StringPtrInput `pulumi:"field"`
	// [TrustedTester] [Required] Defines the ranges for range partitioning.
	Range RangePartitioningRangePtrInput `pulumi:"range"`
}

func (RangePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioning)(nil)).Elem()
}

func (i RangePartitioningArgs) ToRangePartitioningOutput() RangePartitioningOutput {
	return i.ToRangePartitioningOutputWithContext(context.Background())
}

func (i RangePartitioningArgs) ToRangePartitioningOutputWithContext(ctx context.Context) RangePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningOutput)
}

func (i RangePartitioningArgs) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return i.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (i RangePartitioningArgs) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningOutput).ToRangePartitioningPtrOutputWithContext(ctx)
}

// RangePartitioningPtrInput is an input type that accepts RangePartitioningArgs, RangePartitioningPtr and RangePartitioningPtrOutput values.
// You can construct a concrete instance of `RangePartitioningPtrInput` via:
//
//	        RangePartitioningArgs{...}
//
//	or:
//
//	        nil
type RangePartitioningPtrInput interface {
	pulumi.Input

	ToRangePartitioningPtrOutput() RangePartitioningPtrOutput
	ToRangePartitioningPtrOutputWithContext(context.Context) RangePartitioningPtrOutput
}

type rangePartitioningPtrType RangePartitioningArgs

func RangePartitioningPtr(v *RangePartitioningArgs) RangePartitioningPtrInput {
	return (*rangePartitioningPtrType)(v)
}

func (*rangePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioning)(nil)).Elem()
}

func (i *rangePartitioningPtrType) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return i.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (i *rangePartitioningPtrType) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningPtrOutput)
}

type RangePartitioningOutput struct{ *pulumi.OutputState }

func (RangePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioning)(nil)).Elem()
}

func (o RangePartitioningOutput) ToRangePartitioningOutput() RangePartitioningOutput {
	return o
}

func (o RangePartitioningOutput) ToRangePartitioningOutputWithContext(ctx context.Context) RangePartitioningOutput {
	return o
}

func (o RangePartitioningOutput) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return o.ToRangePartitioningPtrOutputWithContext(context.Background())
}

func (o RangePartitioningOutput) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangePartitioning) *RangePartitioning {
		return &v
	}).(RangePartitioningPtrOutput)
}

// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
func (o RangePartitioningOutput) Range() RangePartitioningRangePtrOutput {
	return o.ApplyT(func(v RangePartitioning) *RangePartitioningRange { return v.Range }).(RangePartitioningRangePtrOutput)
}

type RangePartitioningPtrOutput struct{ *pulumi.OutputState }

func (RangePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioning)(nil)).Elem()
}

func (o RangePartitioningPtrOutput) ToRangePartitioningPtrOutput() RangePartitioningPtrOutput {
	return o
}

func (o RangePartitioningPtrOutput) ToRangePartitioningPtrOutputWithContext(ctx context.Context) RangePartitioningPtrOutput {
	return o
}

func (o RangePartitioningPtrOutput) Elem() RangePartitioningOutput {
	return o.ApplyT(func(v *RangePartitioning) RangePartitioning {
		if v != nil {
			return *v
		}
		var ret RangePartitioning
		return ret
	}).(RangePartitioningOutput)
}

// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
func (o RangePartitioningPtrOutput) Range() RangePartitioningRangePtrOutput {
	return o.ApplyT(func(v *RangePartitioning) *RangePartitioningRange {
		if v == nil {
			return nil
		}
		return v.Range
	}).(RangePartitioningRangePtrOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
type RangePartitioningRange struct {
	// [TrustedTester] [Required] The end of range partitioning, exclusive.
	End *string `pulumi:"end"`
	// [TrustedTester] [Required] The width of each interval.
	Interval *string `pulumi:"interval"`
	// [TrustedTester] [Required] The start of range partitioning, inclusive.
	Start *string `pulumi:"start"`
}

// RangePartitioningRangeInput is an input type that accepts RangePartitioningRangeArgs and RangePartitioningRangeOutput values.
// You can construct a concrete instance of `RangePartitioningRangeInput` via:
//
//	RangePartitioningRangeArgs{...}
type RangePartitioningRangeInput interface {
	pulumi.Input

	ToRangePartitioningRangeOutput() RangePartitioningRangeOutput
	ToRangePartitioningRangeOutputWithContext(context.Context) RangePartitioningRangeOutput
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
type RangePartitioningRangeArgs struct {
	// [TrustedTester] [Required] The end of range partitioning, exclusive.
	End pulumi.StringPtrInput `pulumi:"end"`
	// [TrustedTester] [Required] The width of each interval.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// [TrustedTester] [Required] The start of range partitioning, inclusive.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (RangePartitioningRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningRange)(nil)).Elem()
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangeOutput() RangePartitioningRangeOutput {
	return i.ToRangePartitioningRangeOutputWithContext(context.Background())
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangeOutputWithContext(ctx context.Context) RangePartitioningRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningRangeOutput)
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return i.ToRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i RangePartitioningRangeArgs) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningRangeOutput).ToRangePartitioningRangePtrOutputWithContext(ctx)
}

// RangePartitioningRangePtrInput is an input type that accepts RangePartitioningRangeArgs, RangePartitioningRangePtr and RangePartitioningRangePtrOutput values.
// You can construct a concrete instance of `RangePartitioningRangePtrInput` via:
//
//	        RangePartitioningRangeArgs{...}
//
//	or:
//
//	        nil
type RangePartitioningRangePtrInput interface {
	pulumi.Input

	ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput
	ToRangePartitioningRangePtrOutputWithContext(context.Context) RangePartitioningRangePtrOutput
}

type rangePartitioningRangePtrType RangePartitioningRangeArgs

func RangePartitioningRangePtr(v *RangePartitioningRangeArgs) RangePartitioningRangePtrInput {
	return (*rangePartitioningRangePtrType)(v)
}

func (*rangePartitioningRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioningRange)(nil)).Elem()
}

func (i *rangePartitioningRangePtrType) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return i.ToRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (i *rangePartitioningRangePtrType) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RangePartitioningRangePtrOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
type RangePartitioningRangeOutput struct{ *pulumi.OutputState }

func (RangePartitioningRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningRange)(nil)).Elem()
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangeOutput() RangePartitioningRangeOutput {
	return o
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangeOutputWithContext(ctx context.Context) RangePartitioningRangeOutput {
	return o
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return o.ToRangePartitioningRangePtrOutputWithContext(context.Background())
}

func (o RangePartitioningRangeOutput) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RangePartitioningRange) *RangePartitioningRange {
		return &v
	}).(RangePartitioningRangePtrOutput)
}

// [TrustedTester] [Required] The end of range partitioning, exclusive.
func (o RangePartitioningRangeOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioningRange) *string { return v.End }).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] The width of each interval.
func (o RangePartitioningRangeOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioningRange) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] The start of range partitioning, inclusive.
func (o RangePartitioningRangeOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RangePartitioningRange) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type RangePartitioningRangePtrOutput struct{ *pulumi.OutputState }

func (RangePartitioningRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RangePartitioningRange)(nil)).Elem()
}

func (o RangePartitioningRangePtrOutput) ToRangePartitioningRangePtrOutput() RangePartitioningRangePtrOutput {
	return o
}

func (o RangePartitioningRangePtrOutput) ToRangePartitioningRangePtrOutputWithContext(ctx context.Context) RangePartitioningRangePtrOutput {
	return o
}

func (o RangePartitioningRangePtrOutput) Elem() RangePartitioningRangeOutput {
	return o.ApplyT(func(v *RangePartitioningRange) RangePartitioningRange {
		if v != nil {
			return *v
		}
		var ret RangePartitioningRange
		return ret
	}).(RangePartitioningRangeOutput)
}

// [TrustedTester] [Required] The end of range partitioning, exclusive.
func (o RangePartitioningRangePtrOutput) End() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioningRange) *string {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] The width of each interval.
func (o RangePartitioningRangePtrOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioningRange) *string {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] The start of range partitioning, inclusive.
func (o RangePartitioningRangePtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RangePartitioningRange) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
type RangePartitioningRangeResponse struct {
	// [TrustedTester] [Required] The end of range partitioning, exclusive.
	End string `pulumi:"end"`
	// [TrustedTester] [Required] The width of each interval.
	Interval string `pulumi:"interval"`
	// [TrustedTester] [Required] The start of range partitioning, inclusive.
	Start string `pulumi:"start"`
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
type RangePartitioningRangeResponseOutput struct{ *pulumi.OutputState }

func (RangePartitioningRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningRangeResponse)(nil)).Elem()
}

func (o RangePartitioningRangeResponseOutput) ToRangePartitioningRangeResponseOutput() RangePartitioningRangeResponseOutput {
	return o
}

func (o RangePartitioningRangeResponseOutput) ToRangePartitioningRangeResponseOutputWithContext(ctx context.Context) RangePartitioningRangeResponseOutput {
	return o
}

// [TrustedTester] [Required] The end of range partitioning, exclusive.
func (o RangePartitioningRangeResponseOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningRangeResponse) string { return v.End }).(pulumi.StringOutput)
}

// [TrustedTester] [Required] The width of each interval.
func (o RangePartitioningRangeResponseOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningRangeResponse) string { return v.Interval }).(pulumi.StringOutput)
}

// [TrustedTester] [Required] The start of range partitioning, inclusive.
func (o RangePartitioningRangeResponseOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningRangeResponse) string { return v.Start }).(pulumi.StringOutput)
}

type RangePartitioningResponse struct {
	// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
	Field string `pulumi:"field"`
	// [TrustedTester] [Required] Defines the ranges for range partitioning.
	Range RangePartitioningRangeResponse `pulumi:"range"`
}

type RangePartitioningResponseOutput struct{ *pulumi.OutputState }

func (RangePartitioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangePartitioningResponse)(nil)).Elem()
}

func (o RangePartitioningResponseOutput) ToRangePartitioningResponseOutput() RangePartitioningResponseOutput {
	return o
}

func (o RangePartitioningResponseOutput) ToRangePartitioningResponseOutputWithContext(ctx context.Context) RangePartitioningResponseOutput {
	return o
}

// [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
func (o RangePartitioningResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v RangePartitioningResponse) string { return v.Field }).(pulumi.StringOutput)
}

// [TrustedTester] [Required] Defines the ranges for range partitioning.
func (o RangePartitioningResponseOutput) Range() RangePartitioningRangeResponseOutput {
	return o.ApplyT(func(v RangePartitioningResponse) RangePartitioningRangeResponse { return v.Range }).(RangePartitioningRangeResponseOutput)
}

// Options for a remote user-defined function.
type RemoteFunctionOptions struct {
	// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
	Connection *string `pulumi:"connection"`
	// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
	Endpoint *string `pulumi:"endpoint"`
	// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
	MaxBatchingRows *string `pulumi:"maxBatchingRows"`
	// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
	UserDefinedContext map[string]string `pulumi:"userDefinedContext"`
}

// RemoteFunctionOptionsInput is an input type that accepts RemoteFunctionOptionsArgs and RemoteFunctionOptionsOutput values.
// You can construct a concrete instance of `RemoteFunctionOptionsInput` via:
//
//	RemoteFunctionOptionsArgs{...}
type RemoteFunctionOptionsInput interface {
	pulumi.Input

	ToRemoteFunctionOptionsOutput() RemoteFunctionOptionsOutput
	ToRemoteFunctionOptionsOutputWithContext(context.Context) RemoteFunctionOptionsOutput
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsArgs struct {
	// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
	Endpoint pulumi.StringPtrInput `pulumi:"endpoint"`
	// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
	MaxBatchingRows pulumi.StringPtrInput `pulumi:"maxBatchingRows"`
	// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
	UserDefinedContext pulumi.StringMapInput `pulumi:"userDefinedContext"`
}

func (RemoteFunctionOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteFunctionOptions)(nil)).Elem()
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsOutput() RemoteFunctionOptionsOutput {
	return i.ToRemoteFunctionOptionsOutputWithContext(context.Background())
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsOutputWithContext(ctx context.Context) RemoteFunctionOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFunctionOptionsOutput)
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return i.ToRemoteFunctionOptionsPtrOutputWithContext(context.Background())
}

func (i RemoteFunctionOptionsArgs) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFunctionOptionsOutput).ToRemoteFunctionOptionsPtrOutputWithContext(ctx)
}

// RemoteFunctionOptionsPtrInput is an input type that accepts RemoteFunctionOptionsArgs, RemoteFunctionOptionsPtr and RemoteFunctionOptionsPtrOutput values.
// You can construct a concrete instance of `RemoteFunctionOptionsPtrInput` via:
//
//	        RemoteFunctionOptionsArgs{...}
//
//	or:
//
//	        nil
type RemoteFunctionOptionsPtrInput interface {
	pulumi.Input

	ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput
	ToRemoteFunctionOptionsPtrOutputWithContext(context.Context) RemoteFunctionOptionsPtrOutput
}

type remoteFunctionOptionsPtrType RemoteFunctionOptionsArgs

func RemoteFunctionOptionsPtr(v *RemoteFunctionOptionsArgs) RemoteFunctionOptionsPtrInput {
	return (*remoteFunctionOptionsPtrType)(v)
}

func (*remoteFunctionOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteFunctionOptions)(nil)).Elem()
}

func (i *remoteFunctionOptionsPtrType) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return i.ToRemoteFunctionOptionsPtrOutputWithContext(context.Background())
}

func (i *remoteFunctionOptionsPtrType) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteFunctionOptionsPtrOutput)
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsOutput struct{ *pulumi.OutputState }

func (RemoteFunctionOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteFunctionOptions)(nil)).Elem()
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsOutput() RemoteFunctionOptionsOutput {
	return o
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsOutputWithContext(ctx context.Context) RemoteFunctionOptionsOutput {
	return o
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return o.ToRemoteFunctionOptionsPtrOutputWithContext(context.Background())
}

func (o RemoteFunctionOptionsOutput) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RemoteFunctionOptions) *RemoteFunctionOptions {
		return &v
	}).(RemoteFunctionOptionsPtrOutput)
}

// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
func (o RemoteFunctionOptionsOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
func (o RemoteFunctionOptionsOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) *string { return v.Endpoint }).(pulumi.StringPtrOutput)
}

// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
func (o RemoteFunctionOptionsOutput) MaxBatchingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) *string { return v.MaxBatchingRows }).(pulumi.StringPtrOutput)
}

// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
func (o RemoteFunctionOptionsOutput) UserDefinedContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteFunctionOptions) map[string]string { return v.UserDefinedContext }).(pulumi.StringMapOutput)
}

type RemoteFunctionOptionsPtrOutput struct{ *pulumi.OutputState }

func (RemoteFunctionOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteFunctionOptions)(nil)).Elem()
}

func (o RemoteFunctionOptionsPtrOutput) ToRemoteFunctionOptionsPtrOutput() RemoteFunctionOptionsPtrOutput {
	return o
}

func (o RemoteFunctionOptionsPtrOutput) ToRemoteFunctionOptionsPtrOutputWithContext(ctx context.Context) RemoteFunctionOptionsPtrOutput {
	return o
}

func (o RemoteFunctionOptionsPtrOutput) Elem() RemoteFunctionOptionsOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) RemoteFunctionOptions {
		if v != nil {
			return *v
		}
		var ret RemoteFunctionOptions
		return ret
	}).(RemoteFunctionOptionsOutput)
}

// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
func (o RemoteFunctionOptionsPtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
func (o RemoteFunctionOptionsPtrOutput) Endpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) *string {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(pulumi.StringPtrOutput)
}

// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
func (o RemoteFunctionOptionsPtrOutput) MaxBatchingRows() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) *string {
		if v == nil {
			return nil
		}
		return v.MaxBatchingRows
	}).(pulumi.StringPtrOutput)
}

// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
func (o RemoteFunctionOptionsPtrOutput) UserDefinedContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RemoteFunctionOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.UserDefinedContext
	}).(pulumi.StringMapOutput)
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsResponse struct {
	// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
	Connection string `pulumi:"connection"`
	// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
	Endpoint string `pulumi:"endpoint"`
	// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
	MaxBatchingRows string `pulumi:"maxBatchingRows"`
	// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
	UserDefinedContext map[string]string `pulumi:"userDefinedContext"`
}

// Options for a remote user-defined function.
type RemoteFunctionOptionsResponseOutput struct{ *pulumi.OutputState }

func (RemoteFunctionOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RemoteFunctionOptionsResponse)(nil)).Elem()
}

func (o RemoteFunctionOptionsResponseOutput) ToRemoteFunctionOptionsResponseOutput() RemoteFunctionOptionsResponseOutput {
	return o
}

func (o RemoteFunctionOptionsResponseOutput) ToRemoteFunctionOptionsResponseOutputWithContext(ctx context.Context) RemoteFunctionOptionsResponseOutput {
	return o
}

// Fully qualified name of the user-provided connection object which holds the authentication information to send requests to the remote service. Format: ```"projects/{projectId}/locations/{locationId}/connections/{connectionId}"```
func (o RemoteFunctionOptionsResponseOutput) Connection() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) string { return v.Connection }).(pulumi.StringOutput)
}

// Endpoint of the user-provided remote service, e.g. ```https://us-east1-my_gcf_project.cloudfunctions.net/remote_add```
func (o RemoteFunctionOptionsResponseOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) string { return v.Endpoint }).(pulumi.StringOutput)
}

// Max number of rows in each batch sent to the remote service. If absent or if 0, BigQuery dynamically decides the number of rows in a batch.
func (o RemoteFunctionOptionsResponseOutput) MaxBatchingRows() pulumi.StringOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) string { return v.MaxBatchingRows }).(pulumi.StringOutput)
}

// User-defined context as a set of key/value pairs, which will be sent as function invocation context together with batched arguments in the requests to the remote service. The total number of bytes of keys and values must be less than 8KB.
func (o RemoteFunctionOptionsResponseOutput) UserDefinedContext() pulumi.StringMapOutput {
	return o.ApplyT(func(v RemoteFunctionOptionsResponse) map[string]string { return v.UserDefinedContext }).(pulumi.StringMapOutput)
}

type RoutineReference struct {
	// The ID of the dataset containing this routine.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this routine.
	Project string `pulumi:"project"`
	// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId string `pulumi:"routineId"`
}

// RoutineReferenceInput is an input type that accepts RoutineReferenceArgs and RoutineReferenceOutput values.
// You can construct a concrete instance of `RoutineReferenceInput` via:
//
//	RoutineReferenceArgs{...}
type RoutineReferenceInput interface {
	pulumi.Input

	ToRoutineReferenceOutput() RoutineReferenceOutput
	ToRoutineReferenceOutputWithContext(context.Context) RoutineReferenceOutput
}

type RoutineReferenceArgs struct {
	// The ID of the dataset containing this routine.
	DatasetId pulumi.StringInput `pulumi:"datasetId"`
	// The ID of the project containing this routine.
	Project pulumi.StringInput `pulumi:"project"`
	// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId pulumi.StringInput `pulumi:"routineId"`
}

func (RoutineReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReference)(nil)).Elem()
}

func (i RoutineReferenceArgs) ToRoutineReferenceOutput() RoutineReferenceOutput {
	return i.ToRoutineReferenceOutputWithContext(context.Background())
}

func (i RoutineReferenceArgs) ToRoutineReferenceOutputWithContext(ctx context.Context) RoutineReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferenceOutput)
}

func (i RoutineReferenceArgs) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return i.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (i RoutineReferenceArgs) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferenceOutput).ToRoutineReferencePtrOutputWithContext(ctx)
}

// RoutineReferencePtrInput is an input type that accepts RoutineReferenceArgs, RoutineReferencePtr and RoutineReferencePtrOutput values.
// You can construct a concrete instance of `RoutineReferencePtrInput` via:
//
//	        RoutineReferenceArgs{...}
//
//	or:
//
//	        nil
type RoutineReferencePtrInput interface {
	pulumi.Input

	ToRoutineReferencePtrOutput() RoutineReferencePtrOutput
	ToRoutineReferencePtrOutputWithContext(context.Context) RoutineReferencePtrOutput
}

type routineReferencePtrType RoutineReferenceArgs

func RoutineReferencePtr(v *RoutineReferenceArgs) RoutineReferencePtrInput {
	return (*routineReferencePtrType)(v)
}

func (*routineReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineReference)(nil)).Elem()
}

func (i *routineReferencePtrType) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return i.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (i *routineReferencePtrType) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutineReferencePtrOutput)
}

type RoutineReferenceOutput struct{ *pulumi.OutputState }

func (RoutineReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReference)(nil)).Elem()
}

func (o RoutineReferenceOutput) ToRoutineReferenceOutput() RoutineReferenceOutput {
	return o
}

func (o RoutineReferenceOutput) ToRoutineReferenceOutputWithContext(ctx context.Context) RoutineReferenceOutput {
	return o
}

func (o RoutineReferenceOutput) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return o.ToRoutineReferencePtrOutputWithContext(context.Background())
}

func (o RoutineReferenceOutput) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoutineReference) *RoutineReference {
		return &v
	}).(RoutineReferencePtrOutput)
}

// The ID of the dataset containing this routine.
func (o RoutineReferenceOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReference) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this routine.
func (o RoutineReferenceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReference) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferenceOutput) RoutineId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReference) string { return v.RoutineId }).(pulumi.StringOutput)
}

type RoutineReferencePtrOutput struct{ *pulumi.OutputState }

func (RoutineReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutineReference)(nil)).Elem()
}

func (o RoutineReferencePtrOutput) ToRoutineReferencePtrOutput() RoutineReferencePtrOutput {
	return o
}

func (o RoutineReferencePtrOutput) ToRoutineReferencePtrOutputWithContext(ctx context.Context) RoutineReferencePtrOutput {
	return o
}

func (o RoutineReferencePtrOutput) Elem() RoutineReferenceOutput {
	return o.ApplyT(func(v *RoutineReference) RoutineReference {
		if v != nil {
			return *v
		}
		var ret RoutineReference
		return ret
	}).(RoutineReferenceOutput)
}

// The ID of the dataset containing this routine.
func (o RoutineReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return &v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// The ID of the project containing this routine.
func (o RoutineReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return &v.Project
	}).(pulumi.StringPtrOutput)
}

// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferencePtrOutput) RoutineId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutineReference) *string {
		if v == nil {
			return nil
		}
		return &v.RoutineId
	}).(pulumi.StringPtrOutput)
}

type RoutineReferenceResponse struct {
	// The ID of the dataset containing this routine.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the project containing this routine.
	Project string `pulumi:"project"`
	// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	RoutineId string `pulumi:"routineId"`
}

type RoutineReferenceResponseOutput struct{ *pulumi.OutputState }

func (RoutineReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoutineReferenceResponse)(nil)).Elem()
}

func (o RoutineReferenceResponseOutput) ToRoutineReferenceResponseOutput() RoutineReferenceResponseOutput {
	return o
}

func (o RoutineReferenceResponseOutput) ToRoutineReferenceResponseOutputWithContext(ctx context.Context) RoutineReferenceResponseOutput {
	return o
}

// The ID of the dataset containing this routine.
func (o RoutineReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the project containing this routine.
func (o RoutineReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RoutineReferenceResponseOutput) RoutineId() pulumi.StringOutput {
	return o.ApplyT(func(v RoutineReferenceResponse) string { return v.RoutineId }).(pulumi.StringOutput)
}

type RoutineReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (RoutineReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoutineReferenceResponse)(nil)).Elem()
}

func (o RoutineReferenceResponseArrayOutput) ToRoutineReferenceResponseArrayOutput() RoutineReferenceResponseArrayOutput {
	return o
}

func (o RoutineReferenceResponseArrayOutput) ToRoutineReferenceResponseArrayOutputWithContext(ctx context.Context) RoutineReferenceResponseArrayOutput {
	return o
}

func (o RoutineReferenceResponseArrayOutput) Index(i pulumi.IntInput) RoutineReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoutineReferenceResponse {
		return vs[0].([]RoutineReferenceResponse)[vs[1].(int)]
	}).(RoutineReferenceResponseOutput)
}

type RowAccessPolicyReferenceResponse struct {
	// The ID of the dataset containing this row access policy.
	DatasetId string `pulumi:"datasetId"`
	// The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
	PolicyId string `pulumi:"policyId"`
	// The ID of the project containing this row access policy.
	Project string `pulumi:"project"`
	// The ID of the table containing this row access policy.
	TableId string `pulumi:"tableId"`
}

type RowAccessPolicyReferenceResponseOutput struct{ *pulumi.OutputState }

func (RowAccessPolicyReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowAccessPolicyReferenceResponse)(nil)).Elem()
}

func (o RowAccessPolicyReferenceResponseOutput) ToRowAccessPolicyReferenceResponseOutput() RowAccessPolicyReferenceResponseOutput {
	return o
}

func (o RowAccessPolicyReferenceResponseOutput) ToRowAccessPolicyReferenceResponseOutputWithContext(ctx context.Context) RowAccessPolicyReferenceResponseOutput {
	return o
}

// The ID of the dataset containing this row access policy.
func (o RowAccessPolicyReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.
func (o RowAccessPolicyReferenceResponseOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.PolicyId }).(pulumi.StringOutput)
}

// The ID of the project containing this row access policy.
func (o RowAccessPolicyReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The ID of the table containing this row access policy.
func (o RowAccessPolicyReferenceResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v RowAccessPolicyReferenceResponse) string { return v.TableId }).(pulumi.StringOutput)
}

type RowLevelSecurityStatisticsResponse struct {
	// [Preview] Whether any accessed data was protected by row access policies.
	RowLevelSecurityApplied bool `pulumi:"rowLevelSecurityApplied"`
}

type RowLevelSecurityStatisticsResponseOutput struct{ *pulumi.OutputState }

func (RowLevelSecurityStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RowLevelSecurityStatisticsResponse)(nil)).Elem()
}

func (o RowLevelSecurityStatisticsResponseOutput) ToRowLevelSecurityStatisticsResponseOutput() RowLevelSecurityStatisticsResponseOutput {
	return o
}

func (o RowLevelSecurityStatisticsResponseOutput) ToRowLevelSecurityStatisticsResponseOutputWithContext(ctx context.Context) RowLevelSecurityStatisticsResponseOutput {
	return o
}

// [Preview] Whether any accessed data was protected by row access policies.
func (o RowLevelSecurityStatisticsResponseOutput) RowLevelSecurityApplied() pulumi.BoolOutput {
	return o.ApplyT(func(v RowLevelSecurityStatisticsResponse) bool { return v.RowLevelSecurityApplied }).(pulumi.BoolOutput)
}

type ScriptStackFrameResponse struct {
	// One-based end column.
	EndColumn int `pulumi:"endColumn"`
	// One-based end line.
	EndLine int `pulumi:"endLine"`
	// Name of the active procedure, empty if in a top-level script.
	ProcedureId string `pulumi:"procedureId"`
	// One-based start column.
	StartColumn int `pulumi:"startColumn"`
	// One-based start line.
	StartLine int `pulumi:"startLine"`
	// Text of the current statement/expression.
	Text string `pulumi:"text"`
}

type ScriptStackFrameResponseOutput struct{ *pulumi.OutputState }

func (ScriptStackFrameResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStackFrameResponse)(nil)).Elem()
}

func (o ScriptStackFrameResponseOutput) ToScriptStackFrameResponseOutput() ScriptStackFrameResponseOutput {
	return o
}

func (o ScriptStackFrameResponseOutput) ToScriptStackFrameResponseOutputWithContext(ctx context.Context) ScriptStackFrameResponseOutput {
	return o
}

// One-based end column.
func (o ScriptStackFrameResponseOutput) EndColumn() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.EndColumn }).(pulumi.IntOutput)
}

// One-based end line.
func (o ScriptStackFrameResponseOutput) EndLine() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.EndLine }).(pulumi.IntOutput)
}

// Name of the active procedure, empty if in a top-level script.
func (o ScriptStackFrameResponseOutput) ProcedureId() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) string { return v.ProcedureId }).(pulumi.StringOutput)
}

// One-based start column.
func (o ScriptStackFrameResponseOutput) StartColumn() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.StartColumn }).(pulumi.IntOutput)
}

// One-based start line.
func (o ScriptStackFrameResponseOutput) StartLine() pulumi.IntOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) int { return v.StartLine }).(pulumi.IntOutput)
}

// Text of the current statement/expression.
func (o ScriptStackFrameResponseOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStackFrameResponse) string { return v.Text }).(pulumi.StringOutput)
}

type ScriptStackFrameResponseArrayOutput struct{ *pulumi.OutputState }

func (ScriptStackFrameResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScriptStackFrameResponse)(nil)).Elem()
}

func (o ScriptStackFrameResponseArrayOutput) ToScriptStackFrameResponseArrayOutput() ScriptStackFrameResponseArrayOutput {
	return o
}

func (o ScriptStackFrameResponseArrayOutput) ToScriptStackFrameResponseArrayOutputWithContext(ctx context.Context) ScriptStackFrameResponseArrayOutput {
	return o
}

func (o ScriptStackFrameResponseArrayOutput) Index(i pulumi.IntInput) ScriptStackFrameResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScriptStackFrameResponse {
		return vs[0].([]ScriptStackFrameResponse)[vs[1].(int)]
	}).(ScriptStackFrameResponseOutput)
}

type ScriptStatisticsResponse struct {
	// Whether this child job was a statement or expression.
	EvaluationKind string `pulumi:"evaluationKind"`
	// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
	StackFrames []ScriptStackFrameResponse `pulumi:"stackFrames"`
}

type ScriptStatisticsResponseOutput struct{ *pulumi.OutputState }

func (ScriptStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScriptStatisticsResponse)(nil)).Elem()
}

func (o ScriptStatisticsResponseOutput) ToScriptStatisticsResponseOutput() ScriptStatisticsResponseOutput {
	return o
}

func (o ScriptStatisticsResponseOutput) ToScriptStatisticsResponseOutputWithContext(ctx context.Context) ScriptStatisticsResponseOutput {
	return o
}

// Whether this child job was a statement or expression.
func (o ScriptStatisticsResponseOutput) EvaluationKind() pulumi.StringOutput {
	return o.ApplyT(func(v ScriptStatisticsResponse) string { return v.EvaluationKind }).(pulumi.StringOutput)
}

// Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty.
func (o ScriptStatisticsResponseOutput) StackFrames() ScriptStackFrameResponseArrayOutput {
	return o.ApplyT(func(v ScriptStatisticsResponse) []ScriptStackFrameResponse { return v.StackFrames }).(ScriptStackFrameResponseArrayOutput)
}

type SearchStatisticsResponse struct {
	// When index_usage_mode is UNUSED or PARTIALLY_USED, this field explains why index was not used in all or part of the search query. If index_usage_mode is FULLLY_USED, this field is not populated.
	IndexUnusedReasons []IndexUnusedReasonResponse `pulumi:"indexUnusedReasons"`
	// Specifies index usage mode for the query.
	IndexUsageMode string `pulumi:"indexUsageMode"`
}

type SearchStatisticsResponseOutput struct{ *pulumi.OutputState }

func (SearchStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SearchStatisticsResponse)(nil)).Elem()
}

func (o SearchStatisticsResponseOutput) ToSearchStatisticsResponseOutput() SearchStatisticsResponseOutput {
	return o
}

func (o SearchStatisticsResponseOutput) ToSearchStatisticsResponseOutputWithContext(ctx context.Context) SearchStatisticsResponseOutput {
	return o
}

// When index_usage_mode is UNUSED or PARTIALLY_USED, this field explains why index was not used in all or part of the search query. If index_usage_mode is FULLLY_USED, this field is not populated.
func (o SearchStatisticsResponseOutput) IndexUnusedReasons() IndexUnusedReasonResponseArrayOutput {
	return o.ApplyT(func(v SearchStatisticsResponse) []IndexUnusedReasonResponse { return v.IndexUnusedReasons }).(IndexUnusedReasonResponseArrayOutput)
}

// Specifies index usage mode for the query.
func (o SearchStatisticsResponseOutput) IndexUsageMode() pulumi.StringOutput {
	return o.ApplyT(func(v SearchStatisticsResponse) string { return v.IndexUsageMode }).(pulumi.StringOutput)
}

type SessionInfoResponse struct {
	// // [Preview] Id of the session.
	SessionId string `pulumi:"sessionId"`
}

type SessionInfoResponseOutput struct{ *pulumi.OutputState }

func (SessionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SessionInfoResponse)(nil)).Elem()
}

func (o SessionInfoResponseOutput) ToSessionInfoResponseOutput() SessionInfoResponseOutput {
	return o
}

func (o SessionInfoResponseOutput) ToSessionInfoResponseOutputWithContext(ctx context.Context) SessionInfoResponseOutput {
	return o
}

// // [Preview] Id of the session.
func (o SessionInfoResponseOutput) SessionId() pulumi.StringOutput {
	return o.ApplyT(func(v SessionInfoResponse) string { return v.SessionId }).(pulumi.StringOutput)
}

type SnapshotDefinitionResponse struct {
	// [Required] Reference describing the ID of the table that was snapshot.
	BaseTableReference TableReferenceResponse `pulumi:"baseTableReference"`
	// [Required] The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format.
	SnapshotTime string `pulumi:"snapshotTime"`
}

type SnapshotDefinitionResponseOutput struct{ *pulumi.OutputState }

func (SnapshotDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotDefinitionResponse)(nil)).Elem()
}

func (o SnapshotDefinitionResponseOutput) ToSnapshotDefinitionResponseOutput() SnapshotDefinitionResponseOutput {
	return o
}

func (o SnapshotDefinitionResponseOutput) ToSnapshotDefinitionResponseOutputWithContext(ctx context.Context) SnapshotDefinitionResponseOutput {
	return o
}

// [Required] Reference describing the ID of the table that was snapshot.
func (o SnapshotDefinitionResponseOutput) BaseTableReference() TableReferenceResponseOutput {
	return o.ApplyT(func(v SnapshotDefinitionResponse) TableReferenceResponse { return v.BaseTableReference }).(TableReferenceResponseOutput)
}

// [Required] The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format.
func (o SnapshotDefinitionResponseOutput) SnapshotTime() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotDefinitionResponse) string { return v.SnapshotTime }).(pulumi.StringOutput)
}

type SparkLoggingInfoResponse struct {
	// Project ID used for logging
	Project string `pulumi:"project"`
	// Resource type used for logging
	ResourceType string `pulumi:"resourceType"`
}

type SparkLoggingInfoResponseOutput struct{ *pulumi.OutputState }

func (SparkLoggingInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkLoggingInfoResponse)(nil)).Elem()
}

func (o SparkLoggingInfoResponseOutput) ToSparkLoggingInfoResponseOutput() SparkLoggingInfoResponseOutput {
	return o
}

func (o SparkLoggingInfoResponseOutput) ToSparkLoggingInfoResponseOutputWithContext(ctx context.Context) SparkLoggingInfoResponseOutput {
	return o
}

// Project ID used for logging
func (o SparkLoggingInfoResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLoggingInfoResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Resource type used for logging
func (o SparkLoggingInfoResponseOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v SparkLoggingInfoResponse) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Options for a user-defined Spark routine.
type SparkOptions struct {
	// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	ArchiveUris []string `pulumi:"archiveUris"`
	// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	Connection *string `pulumi:"connection"`
	// Custom container image for the runtime environment.
	ContainerImage *string `pulumi:"containerImage"`
	// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	FileUris []string `pulumi:"fileUris"`
	// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	JarUris []string `pulumi:"jarUris"`
	// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
	MainClass *string `pulumi:"mainClass"`
	// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
	MainFileUri *string `pulumi:"mainFileUri"`
	// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
	Properties map[string]string `pulumi:"properties"`
	// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	PyFileUris []string `pulumi:"pyFileUris"`
	// Runtime version. If not specified, the default runtime version is used.
	RuntimeVersion *string `pulumi:"runtimeVersion"`
}

// SparkOptionsInput is an input type that accepts SparkOptionsArgs and SparkOptionsOutput values.
// You can construct a concrete instance of `SparkOptionsInput` via:
//
//	SparkOptionsArgs{...}
type SparkOptionsInput interface {
	pulumi.Input

	ToSparkOptionsOutput() SparkOptionsOutput
	ToSparkOptionsOutputWithContext(context.Context) SparkOptionsOutput
}

// Options for a user-defined Spark routine.
type SparkOptionsArgs struct {
	// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	ArchiveUris pulumi.StringArrayInput `pulumi:"archiveUris"`
	// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	Connection pulumi.StringPtrInput `pulumi:"connection"`
	// Custom container image for the runtime environment.
	ContainerImage pulumi.StringPtrInput `pulumi:"containerImage"`
	// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	FileUris pulumi.StringArrayInput `pulumi:"fileUris"`
	// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	JarUris pulumi.StringArrayInput `pulumi:"jarUris"`
	// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
	MainClass pulumi.StringPtrInput `pulumi:"mainClass"`
	// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
	MainFileUri pulumi.StringPtrInput `pulumi:"mainFileUri"`
	// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
	Properties pulumi.StringMapInput `pulumi:"properties"`
	// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	PyFileUris pulumi.StringArrayInput `pulumi:"pyFileUris"`
	// Runtime version. If not specified, the default runtime version is used.
	RuntimeVersion pulumi.StringPtrInput `pulumi:"runtimeVersion"`
}

func (SparkOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkOptions)(nil)).Elem()
}

func (i SparkOptionsArgs) ToSparkOptionsOutput() SparkOptionsOutput {
	return i.ToSparkOptionsOutputWithContext(context.Background())
}

func (i SparkOptionsArgs) ToSparkOptionsOutputWithContext(ctx context.Context) SparkOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkOptionsOutput)
}

func (i SparkOptionsArgs) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return i.ToSparkOptionsPtrOutputWithContext(context.Background())
}

func (i SparkOptionsArgs) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkOptionsOutput).ToSparkOptionsPtrOutputWithContext(ctx)
}

// SparkOptionsPtrInput is an input type that accepts SparkOptionsArgs, SparkOptionsPtr and SparkOptionsPtrOutput values.
// You can construct a concrete instance of `SparkOptionsPtrInput` via:
//
//	        SparkOptionsArgs{...}
//
//	or:
//
//	        nil
type SparkOptionsPtrInput interface {
	pulumi.Input

	ToSparkOptionsPtrOutput() SparkOptionsPtrOutput
	ToSparkOptionsPtrOutputWithContext(context.Context) SparkOptionsPtrOutput
}

type sparkOptionsPtrType SparkOptionsArgs

func SparkOptionsPtr(v *SparkOptionsArgs) SparkOptionsPtrInput {
	return (*sparkOptionsPtrType)(v)
}

func (*sparkOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkOptions)(nil)).Elem()
}

func (i *sparkOptionsPtrType) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return i.ToSparkOptionsPtrOutputWithContext(context.Background())
}

func (i *sparkOptionsPtrType) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkOptionsPtrOutput)
}

// Options for a user-defined Spark routine.
type SparkOptionsOutput struct{ *pulumi.OutputState }

func (SparkOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkOptions)(nil)).Elem()
}

func (o SparkOptionsOutput) ToSparkOptionsOutput() SparkOptionsOutput {
	return o
}

func (o SparkOptionsOutput) ToSparkOptionsOutputWithContext(ctx context.Context) SparkOptionsOutput {
	return o
}

func (o SparkOptionsOutput) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return o.ToSparkOptionsPtrOutputWithContext(context.Background())
}

func (o SparkOptionsOutput) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkOptions) *SparkOptions {
		return &v
	}).(SparkOptionsPtrOutput)
}

// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) ArchiveUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.ArchiveUris }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
func (o SparkOptionsOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.Connection }).(pulumi.StringPtrOutput)
}

// Custom container image for the runtime environment.
func (o SparkOptionsOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.ContainerImage }).(pulumi.StringPtrOutput)
}

// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) FileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.FileUris }).(pulumi.StringArrayOutput)
}

// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) JarUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.JarUris }).(pulumi.StringArrayOutput)
}

// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
func (o SparkOptionsOutput) MainClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.MainClass }).(pulumi.StringPtrOutput)
}

// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
func (o SparkOptionsOutput) MainFileUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.MainFileUri }).(pulumi.StringPtrOutput)
}

// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
func (o SparkOptionsOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkOptions) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsOutput) PyFileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptions) []string { return v.PyFileUris }).(pulumi.StringArrayOutput)
}

// Runtime version. If not specified, the default runtime version is used.
func (o SparkOptionsOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkOptions) *string { return v.RuntimeVersion }).(pulumi.StringPtrOutput)
}

type SparkOptionsPtrOutput struct{ *pulumi.OutputState }

func (SparkOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkOptions)(nil)).Elem()
}

func (o SparkOptionsPtrOutput) ToSparkOptionsPtrOutput() SparkOptionsPtrOutput {
	return o
}

func (o SparkOptionsPtrOutput) ToSparkOptionsPtrOutputWithContext(ctx context.Context) SparkOptionsPtrOutput {
	return o
}

func (o SparkOptionsPtrOutput) Elem() SparkOptionsOutput {
	return o.ApplyT(func(v *SparkOptions) SparkOptions {
		if v != nil {
			return *v
		}
		var ret SparkOptions
		return ret
	}).(SparkOptionsOutput)
}

// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) ArchiveUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.ArchiveUris
	}).(pulumi.StringArrayOutput)
}

// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
func (o SparkOptionsPtrOutput) Connection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.Connection
	}).(pulumi.StringPtrOutput)
}

// Custom container image for the runtime environment.
func (o SparkOptionsPtrOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.ContainerImage
	}).(pulumi.StringPtrOutput)
}

// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) FileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.FileUris
	}).(pulumi.StringArrayOutput)
}

// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) JarUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.JarUris
	}).(pulumi.StringArrayOutput)
}

// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
func (o SparkOptionsPtrOutput) MainClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.MainClass
	}).(pulumi.StringPtrOutput)
}

// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
func (o SparkOptionsPtrOutput) MainFileUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.MainFileUri
	}).(pulumi.StringPtrOutput)
}

// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
func (o SparkOptionsPtrOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SparkOptions) map[string]string {
		if v == nil {
			return nil
		}
		return v.Properties
	}).(pulumi.StringMapOutput)
}

// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsPtrOutput) PyFileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkOptions) []string {
		if v == nil {
			return nil
		}
		return v.PyFileUris
	}).(pulumi.StringArrayOutput)
}

// Runtime version. If not specified, the default runtime version is used.
func (o SparkOptionsPtrOutput) RuntimeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkOptions) *string {
		if v == nil {
			return nil
		}
		return v.RuntimeVersion
	}).(pulumi.StringPtrOutput)
}

// Options for a user-defined Spark routine.
type SparkOptionsResponse struct {
	// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	ArchiveUris []string `pulumi:"archiveUris"`
	// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
	Connection string `pulumi:"connection"`
	// Custom container image for the runtime environment.
	ContainerImage string `pulumi:"containerImage"`
	// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	FileUris []string `pulumi:"fileUris"`
	// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	JarUris []string `pulumi:"jarUris"`
	// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
	MainClass string `pulumi:"mainClass"`
	// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
	MainFileUri string `pulumi:"mainFileUri"`
	// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
	Properties map[string]string `pulumi:"properties"`
	// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
	PyFileUris []string `pulumi:"pyFileUris"`
	// Runtime version. If not specified, the default runtime version is used.
	RuntimeVersion string `pulumi:"runtimeVersion"`
}

// Options for a user-defined Spark routine.
type SparkOptionsResponseOutput struct{ *pulumi.OutputState }

func (SparkOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkOptionsResponse)(nil)).Elem()
}

func (o SparkOptionsResponseOutput) ToSparkOptionsResponseOutput() SparkOptionsResponseOutput {
	return o
}

func (o SparkOptionsResponseOutput) ToSparkOptionsResponseOutputWithContext(ctx context.Context) SparkOptionsResponseOutput {
	return o
}

// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) ArchiveUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.ArchiveUris }).(pulumi.StringArrayOutput)
}

// Fully qualified name of the user-provided Spark connection object. Format: ```"projects/{project_id}/locations/{location_id}/connections/{connection_id}"```
func (o SparkOptionsResponseOutput) Connection() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.Connection }).(pulumi.StringOutput)
}

// Custom container image for the runtime environment.
func (o SparkOptionsResponseOutput) ContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.ContainerImage }).(pulumi.StringOutput)
}

// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) FileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.FileUris }).(pulumi.StringArrayOutput)
}

// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) JarUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.JarUris }).(pulumi.StringArrayOutput)
}

// The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.
func (o SparkOptionsResponseOutput) MainClass() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.MainClass }).(pulumi.StringOutput)
}

// The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.
func (o SparkOptionsResponseOutput) MainFileUri() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.MainFileUri }).(pulumi.StringOutput)
}

// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).
func (o SparkOptionsResponseOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkOptionsResponse) map[string]string { return v.Properties }).(pulumi.StringMapOutput)
}

// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
func (o SparkOptionsResponseOutput) PyFileUris() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SparkOptionsResponse) []string { return v.PyFileUris }).(pulumi.StringArrayOutput)
}

// Runtime version. If not specified, the default runtime version is used.
func (o SparkOptionsResponseOutput) RuntimeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SparkOptionsResponse) string { return v.RuntimeVersion }).(pulumi.StringOutput)
}

type SparkStatisticsResponse struct {
	// Endpoints generated for the Spark job.
	Endpoints map[string]string `pulumi:"endpoints"`
	// Logging info is used to generate a link to Cloud Logging.
	LoggingInfo SparkLoggingInfoResponse `pulumi:"loggingInfo"`
	// Spark job id if a Spark job is created successfully.
	SparkJobId string `pulumi:"sparkJobId"`
	// Location where the Spark job is executed.
	SparkJobLocation string `pulumi:"sparkJobLocation"`
}

type SparkStatisticsResponseOutput struct{ *pulumi.OutputState }

func (SparkStatisticsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkStatisticsResponse)(nil)).Elem()
}

func (o SparkStatisticsResponseOutput) ToSparkStatisticsResponseOutput() SparkStatisticsResponseOutput {
	return o
}

func (o SparkStatisticsResponseOutput) ToSparkStatisticsResponseOutputWithContext(ctx context.Context) SparkStatisticsResponseOutput {
	return o
}

// Endpoints generated for the Spark job.
func (o SparkStatisticsResponseOutput) Endpoints() pulumi.StringMapOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) map[string]string { return v.Endpoints }).(pulumi.StringMapOutput)
}

// Logging info is used to generate a link to Cloud Logging.
func (o SparkStatisticsResponseOutput) LoggingInfo() SparkLoggingInfoResponseOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) SparkLoggingInfoResponse { return v.LoggingInfo }).(SparkLoggingInfoResponseOutput)
}

// Spark job id if a Spark job is created successfully.
func (o SparkStatisticsResponseOutput) SparkJobId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) string { return v.SparkJobId }).(pulumi.StringOutput)
}

// Location where the Spark job is executed.
func (o SparkStatisticsResponseOutput) SparkJobLocation() pulumi.StringOutput {
	return o.ApplyT(func(v SparkStatisticsResponse) string { return v.SparkJobLocation }).(pulumi.StringOutput)
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataType struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType *StandardSqlDataType `pulumi:"arrayElementType"`
	// The type of the range's elements, if type_kind = "RANGE".
	RangeElementType *StandardSqlDataType `pulumi:"rangeElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType *StandardSqlStructType `pulumi:"structType"`
	// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind StandardSqlDataTypeTypeKind `pulumi:"typeKind"`
}

// StandardSqlDataTypeInput is an input type that accepts StandardSqlDataTypeArgs and StandardSqlDataTypeOutput values.
// You can construct a concrete instance of `StandardSqlDataTypeInput` via:
//
//	StandardSqlDataTypeArgs{...}
type StandardSqlDataTypeInput interface {
	pulumi.Input

	ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput
	ToStandardSqlDataTypeOutputWithContext(context.Context) StandardSqlDataTypeOutput
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeArgs struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType StandardSqlDataTypePtrInput `pulumi:"arrayElementType"`
	// The type of the range's elements, if type_kind = "RANGE".
	RangeElementType StandardSqlDataTypePtrInput `pulumi:"rangeElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType StandardSqlStructTypePtrInput `pulumi:"structType"`
	// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind StandardSqlDataTypeTypeKindInput `pulumi:"typeKind"`
}

func (StandardSqlDataTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataType)(nil)).Elem()
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput {
	return i.ToStandardSqlDataTypeOutputWithContext(context.Background())
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypeOutputWithContext(ctx context.Context) StandardSqlDataTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypeOutput)
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return i.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlDataTypeArgs) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypeOutput).ToStandardSqlDataTypePtrOutputWithContext(ctx)
}

// StandardSqlDataTypePtrInput is an input type that accepts StandardSqlDataTypeArgs, StandardSqlDataTypePtr and StandardSqlDataTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlDataTypePtrInput` via:
//
//	        StandardSqlDataTypeArgs{...}
//
//	or:
//
//	        nil
type StandardSqlDataTypePtrInput interface {
	pulumi.Input

	ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput
	ToStandardSqlDataTypePtrOutputWithContext(context.Context) StandardSqlDataTypePtrOutput
}

type standardSqlDataTypePtrType StandardSqlDataTypeArgs

func StandardSqlDataTypePtr(v *StandardSqlDataTypeArgs) StandardSqlDataTypePtrInput {
	return (*standardSqlDataTypePtrType)(v)
}

func (*standardSqlDataTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataType)(nil)).Elem()
}

func (i *standardSqlDataTypePtrType) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return i.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlDataTypePtrType) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlDataTypePtrOutput)
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataType)(nil)).Elem()
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypeOutput() StandardSqlDataTypeOutput {
	return o
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypeOutputWithContext(ctx context.Context) StandardSqlDataTypeOutput {
	return o
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return o.ToStandardSqlDataTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlDataTypeOutput) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSqlDataType) *StandardSqlDataType {
		return &v
	}).(StandardSqlDataTypePtrOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypeOutput) ArrayElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlDataType { return v.ArrayElementType }).(StandardSqlDataTypePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypeOutput) RangeElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlDataType { return v.RangeElementType }).(StandardSqlDataTypePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypeOutput) StructType() StandardSqlStructTypePtrOutput {
	return o.ApplyT(func(v StandardSqlDataType) *StandardSqlStructType { return v.StructType }).(StandardSqlStructTypePtrOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypeOutput) TypeKind() StandardSqlDataTypeTypeKindOutput {
	return o.ApplyT(func(v StandardSqlDataType) StandardSqlDataTypeTypeKind { return v.TypeKind }).(StandardSqlDataTypeTypeKindOutput)
}

type StandardSqlDataTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataType)(nil)).Elem()
}

func (o StandardSqlDataTypePtrOutput) ToStandardSqlDataTypePtrOutput() StandardSqlDataTypePtrOutput {
	return o
}

func (o StandardSqlDataTypePtrOutput) ToStandardSqlDataTypePtrOutputWithContext(ctx context.Context) StandardSqlDataTypePtrOutput {
	return o
}

func (o StandardSqlDataTypePtrOutput) Elem() StandardSqlDataTypeOutput {
	return o.ApplyT(func(v *StandardSqlDataType) StandardSqlDataType {
		if v != nil {
			return *v
		}
		var ret StandardSqlDataType
		return ret
	}).(StandardSqlDataTypeOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypePtrOutput) ArrayElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlDataType {
		if v == nil {
			return nil
		}
		return v.ArrayElementType
	}).(StandardSqlDataTypePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypePtrOutput) RangeElementType() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlDataType {
		if v == nil {
			return nil
		}
		return v.RangeElementType
	}).(StandardSqlDataTypePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypePtrOutput) StructType() StandardSqlStructTypePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlStructType {
		if v == nil {
			return nil
		}
		return v.StructType
	}).(StandardSqlStructTypePtrOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypePtrOutput) TypeKind() StandardSqlDataTypeTypeKindPtrOutput {
	return o.ApplyT(func(v *StandardSqlDataType) *StandardSqlDataTypeTypeKind {
		if v == nil {
			return nil
		}
		return &v.TypeKind
	}).(StandardSqlDataTypeTypeKindPtrOutput)
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeResponse struct {
	// The type of the array's elements, if type_kind = "ARRAY".
	ArrayElementType *StandardSqlDataTypeResponse `pulumi:"arrayElementType"`
	// The type of the range's elements, if type_kind = "RANGE".
	RangeElementType *StandardSqlDataTypeResponse `pulumi:"rangeElementType"`
	// The fields of this struct, in order, if type_kind = "STRUCT".
	StructType StandardSqlStructTypeResponse `pulumi:"structType"`
	// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
	TypeKind string `pulumi:"typeKind"`
}

// The data type of a variable such as a function argument. Examples include: * INT64: `{"typeKind": "INT64"}` * ARRAY: { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "STRING"} } * STRUCT>: { "typeKind": "STRUCT", "structType": { "fields": [ { "name": "x", "type": {"typeKind": "STRING"} }, { "name": "y", "type": { "typeKind": "ARRAY", "arrayElementType": {"typeKind": "DATE"} } } ] } }
type StandardSqlDataTypeResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlDataTypeResponse)(nil)).Elem()
}

func (o StandardSqlDataTypeResponseOutput) ToStandardSqlDataTypeResponseOutput() StandardSqlDataTypeResponseOutput {
	return o
}

func (o StandardSqlDataTypeResponseOutput) ToStandardSqlDataTypeResponseOutputWithContext(ctx context.Context) StandardSqlDataTypeResponseOutput {
	return o
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypeResponseOutput) ArrayElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse { return v.ArrayElementType }).(StandardSqlDataTypeResponsePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypeResponseOutput) RangeElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse { return v.RangeElementType }).(StandardSqlDataTypeResponsePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypeResponseOutput) StructType() StandardSqlStructTypeResponseOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) StandardSqlStructTypeResponse { return v.StructType }).(StandardSqlStructTypeResponseOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypeResponseOutput) TypeKind() pulumi.StringOutput {
	return o.ApplyT(func(v StandardSqlDataTypeResponse) string { return v.TypeKind }).(pulumi.StringOutput)
}

type StandardSqlDataTypeResponsePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlDataTypeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlDataTypeResponse)(nil)).Elem()
}

func (o StandardSqlDataTypeResponsePtrOutput) ToStandardSqlDataTypeResponsePtrOutput() StandardSqlDataTypeResponsePtrOutput {
	return o
}

func (o StandardSqlDataTypeResponsePtrOutput) ToStandardSqlDataTypeResponsePtrOutputWithContext(ctx context.Context) StandardSqlDataTypeResponsePtrOutput {
	return o
}

func (o StandardSqlDataTypeResponsePtrOutput) Elem() StandardSqlDataTypeResponseOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) StandardSqlDataTypeResponse {
		if v != nil {
			return *v
		}
		var ret StandardSqlDataTypeResponse
		return ret
	}).(StandardSqlDataTypeResponseOutput)
}

// The type of the array's elements, if type_kind = "ARRAY".
func (o StandardSqlDataTypeResponsePtrOutput) ArrayElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse {
		if v == nil {
			return nil
		}
		return v.ArrayElementType
	}).(StandardSqlDataTypeResponsePtrOutput)
}

// The type of the range's elements, if type_kind = "RANGE".
func (o StandardSqlDataTypeResponsePtrOutput) RangeElementType() StandardSqlDataTypeResponsePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *StandardSqlDataTypeResponse {
		if v == nil {
			return nil
		}
		return v.RangeElementType
	}).(StandardSqlDataTypeResponsePtrOutput)
}

// The fields of this struct, in order, if type_kind = "STRUCT".
func (o StandardSqlDataTypeResponsePtrOutput) StructType() StandardSqlStructTypeResponsePtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *StandardSqlStructTypeResponse {
		if v == nil {
			return nil
		}
		return &v.StructType
	}).(StandardSqlStructTypeResponsePtrOutput)
}

// The top level type of this field. Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
func (o StandardSqlDataTypeResponsePtrOutput) TypeKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StandardSqlDataTypeResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TypeKind
	}).(pulumi.StringPtrOutput)
}

// A field or a column.
type StandardSqlField struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name *string `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type *StandardSqlDataType `pulumi:"type"`
}

// StandardSqlFieldInput is an input type that accepts StandardSqlFieldArgs and StandardSqlFieldOutput values.
// You can construct a concrete instance of `StandardSqlFieldInput` via:
//
//	StandardSqlFieldArgs{...}
type StandardSqlFieldInput interface {
	pulumi.Input

	ToStandardSqlFieldOutput() StandardSqlFieldOutput
	ToStandardSqlFieldOutputWithContext(context.Context) StandardSqlFieldOutput
}

// A field or a column.
type StandardSqlFieldArgs struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type StandardSqlDataTypePtrInput `pulumi:"type"`
}

func (StandardSqlFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlField)(nil)).Elem()
}

func (i StandardSqlFieldArgs) ToStandardSqlFieldOutput() StandardSqlFieldOutput {
	return i.ToStandardSqlFieldOutputWithContext(context.Background())
}

func (i StandardSqlFieldArgs) ToStandardSqlFieldOutputWithContext(ctx context.Context) StandardSqlFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlFieldOutput)
}

// StandardSqlFieldArrayInput is an input type that accepts StandardSqlFieldArray and StandardSqlFieldArrayOutput values.
// You can construct a concrete instance of `StandardSqlFieldArrayInput` via:
//
//	StandardSqlFieldArray{ StandardSqlFieldArgs{...} }
type StandardSqlFieldArrayInput interface {
	pulumi.Input

	ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput
	ToStandardSqlFieldArrayOutputWithContext(context.Context) StandardSqlFieldArrayOutput
}

type StandardSqlFieldArray []StandardSqlFieldInput

func (StandardSqlFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlField)(nil)).Elem()
}

func (i StandardSqlFieldArray) ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput {
	return i.ToStandardSqlFieldArrayOutputWithContext(context.Background())
}

func (i StandardSqlFieldArray) ToStandardSqlFieldArrayOutputWithContext(ctx context.Context) StandardSqlFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlFieldArrayOutput)
}

// A field or a column.
type StandardSqlFieldOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlField)(nil)).Elem()
}

func (o StandardSqlFieldOutput) ToStandardSqlFieldOutput() StandardSqlFieldOutput {
	return o
}

func (o StandardSqlFieldOutput) ToStandardSqlFieldOutputWithContext(ctx context.Context) StandardSqlFieldOutput {
	return o
}

// Optional. The name of this field. Can be absent for struct fields.
func (o StandardSqlFieldOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StandardSqlField) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
func (o StandardSqlFieldOutput) Type() StandardSqlDataTypePtrOutput {
	return o.ApplyT(func(v StandardSqlField) *StandardSqlDataType { return v.Type }).(StandardSqlDataTypePtrOutput)
}

type StandardSqlFieldArrayOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlField)(nil)).Elem()
}

func (o StandardSqlFieldArrayOutput) ToStandardSqlFieldArrayOutput() StandardSqlFieldArrayOutput {
	return o
}

func (o StandardSqlFieldArrayOutput) ToStandardSqlFieldArrayOutputWithContext(ctx context.Context) StandardSqlFieldArrayOutput {
	return o
}

func (o StandardSqlFieldArrayOutput) Index(i pulumi.IntInput) StandardSqlFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardSqlField {
		return vs[0].([]StandardSqlField)[vs[1].(int)]
	}).(StandardSqlFieldOutput)
}

// A field or a column.
type StandardSqlFieldResponse struct {
	// Optional. The name of this field. Can be absent for struct fields.
	Name string `pulumi:"name"`
	// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
	Type StandardSqlDataTypeResponse `pulumi:"type"`
}

// A field or a column.
type StandardSqlFieldResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlFieldResponse)(nil)).Elem()
}

func (o StandardSqlFieldResponseOutput) ToStandardSqlFieldResponseOutput() StandardSqlFieldResponseOutput {
	return o
}

func (o StandardSqlFieldResponseOutput) ToStandardSqlFieldResponseOutputWithContext(ctx context.Context) StandardSqlFieldResponseOutput {
	return o
}

// Optional. The name of this field. Can be absent for struct fields.
func (o StandardSqlFieldResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StandardSqlFieldResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The type of this parameter. Absent if not explicitly specified (e.g., CREATE FUNCTION statement can omit the return type; in this case the output parameter does not have this "type" field).
func (o StandardSqlFieldResponseOutput) Type() StandardSqlDataTypeResponseOutput {
	return o.ApplyT(func(v StandardSqlFieldResponse) StandardSqlDataTypeResponse { return v.Type }).(StandardSqlDataTypeResponseOutput)
}

type StandardSqlFieldResponseArrayOutput struct{ *pulumi.OutputState }

func (StandardSqlFieldResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StandardSqlFieldResponse)(nil)).Elem()
}

func (o StandardSqlFieldResponseArrayOutput) ToStandardSqlFieldResponseArrayOutput() StandardSqlFieldResponseArrayOutput {
	return o
}

func (o StandardSqlFieldResponseArrayOutput) ToStandardSqlFieldResponseArrayOutputWithContext(ctx context.Context) StandardSqlFieldResponseArrayOutput {
	return o
}

func (o StandardSqlFieldResponseArrayOutput) Index(i pulumi.IntInput) StandardSqlFieldResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StandardSqlFieldResponse {
		return vs[0].([]StandardSqlFieldResponse)[vs[1].(int)]
	}).(StandardSqlFieldResponseOutput)
}

// The representation of a SQL STRUCT type.
type StandardSqlStructType struct {
	// Fields within the struct.
	Fields []StandardSqlField `pulumi:"fields"`
}

// StandardSqlStructTypeInput is an input type that accepts StandardSqlStructTypeArgs and StandardSqlStructTypeOutput values.
// You can construct a concrete instance of `StandardSqlStructTypeInput` via:
//
//	StandardSqlStructTypeArgs{...}
type StandardSqlStructTypeInput interface {
	pulumi.Input

	ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput
	ToStandardSqlStructTypeOutputWithContext(context.Context) StandardSqlStructTypeOutput
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeArgs struct {
	// Fields within the struct.
	Fields StandardSqlFieldArrayInput `pulumi:"fields"`
}

func (StandardSqlStructTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructType)(nil)).Elem()
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput {
	return i.ToStandardSqlStructTypeOutputWithContext(context.Background())
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypeOutputWithContext(ctx context.Context) StandardSqlStructTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypeOutput)
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return i.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlStructTypeArgs) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypeOutput).ToStandardSqlStructTypePtrOutputWithContext(ctx)
}

// StandardSqlStructTypePtrInput is an input type that accepts StandardSqlStructTypeArgs, StandardSqlStructTypePtr and StandardSqlStructTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlStructTypePtrInput` via:
//
//	        StandardSqlStructTypeArgs{...}
//
//	or:
//
//	        nil
type StandardSqlStructTypePtrInput interface {
	pulumi.Input

	ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput
	ToStandardSqlStructTypePtrOutputWithContext(context.Context) StandardSqlStructTypePtrOutput
}

type standardSqlStructTypePtrType StandardSqlStructTypeArgs

func StandardSqlStructTypePtr(v *StandardSqlStructTypeArgs) StandardSqlStructTypePtrInput {
	return (*standardSqlStructTypePtrType)(v)
}

func (*standardSqlStructTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructType)(nil)).Elem()
}

func (i *standardSqlStructTypePtrType) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return i.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlStructTypePtrType) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlStructTypePtrOutput)
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructType)(nil)).Elem()
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypeOutput() StandardSqlStructTypeOutput {
	return o
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypeOutputWithContext(ctx context.Context) StandardSqlStructTypeOutput {
	return o
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return o.ToStandardSqlStructTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlStructTypeOutput) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSqlStructType) *StandardSqlStructType {
		return &v
	}).(StandardSqlStructTypePtrOutput)
}

// Fields within the struct.
func (o StandardSqlStructTypeOutput) Fields() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v StandardSqlStructType) []StandardSqlField { return v.Fields }).(StandardSqlFieldArrayOutput)
}

type StandardSqlStructTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructType)(nil)).Elem()
}

func (o StandardSqlStructTypePtrOutput) ToStandardSqlStructTypePtrOutput() StandardSqlStructTypePtrOutput {
	return o
}

func (o StandardSqlStructTypePtrOutput) ToStandardSqlStructTypePtrOutputWithContext(ctx context.Context) StandardSqlStructTypePtrOutput {
	return o
}

func (o StandardSqlStructTypePtrOutput) Elem() StandardSqlStructTypeOutput {
	return o.ApplyT(func(v *StandardSqlStructType) StandardSqlStructType {
		if v != nil {
			return *v
		}
		var ret StandardSqlStructType
		return ret
	}).(StandardSqlStructTypeOutput)
}

// Fields within the struct.
func (o StandardSqlStructTypePtrOutput) Fields() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v *StandardSqlStructType) []StandardSqlField {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(StandardSqlFieldArrayOutput)
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeResponse struct {
	// Fields within the struct.
	Fields []StandardSqlFieldResponse `pulumi:"fields"`
}

// The representation of a SQL STRUCT type.
type StandardSqlStructTypeResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlStructTypeResponse)(nil)).Elem()
}

func (o StandardSqlStructTypeResponseOutput) ToStandardSqlStructTypeResponseOutput() StandardSqlStructTypeResponseOutput {
	return o
}

func (o StandardSqlStructTypeResponseOutput) ToStandardSqlStructTypeResponseOutputWithContext(ctx context.Context) StandardSqlStructTypeResponseOutput {
	return o
}

// Fields within the struct.
func (o StandardSqlStructTypeResponseOutput) Fields() StandardSqlFieldResponseArrayOutput {
	return o.ApplyT(func(v StandardSqlStructTypeResponse) []StandardSqlFieldResponse { return v.Fields }).(StandardSqlFieldResponseArrayOutput)
}

type StandardSqlStructTypeResponsePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlStructTypeResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlStructTypeResponse)(nil)).Elem()
}

func (o StandardSqlStructTypeResponsePtrOutput) ToStandardSqlStructTypeResponsePtrOutput() StandardSqlStructTypeResponsePtrOutput {
	return o
}

func (o StandardSqlStructTypeResponsePtrOutput) ToStandardSqlStructTypeResponsePtrOutputWithContext(ctx context.Context) StandardSqlStructTypeResponsePtrOutput {
	return o
}

func (o StandardSqlStructTypeResponsePtrOutput) Elem() StandardSqlStructTypeResponseOutput {
	return o.ApplyT(func(v *StandardSqlStructTypeResponse) StandardSqlStructTypeResponse {
		if v != nil {
			return *v
		}
		var ret StandardSqlStructTypeResponse
		return ret
	}).(StandardSqlStructTypeResponseOutput)
}

// Fields within the struct.
func (o StandardSqlStructTypeResponsePtrOutput) Fields() StandardSqlFieldResponseArrayOutput {
	return o.ApplyT(func(v *StandardSqlStructTypeResponse) []StandardSqlFieldResponse {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(StandardSqlFieldResponseArrayOutput)
}

// A table type
type StandardSqlTableType struct {
	// The columns in this table type
	Columns []StandardSqlField `pulumi:"columns"`
}

// StandardSqlTableTypeInput is an input type that accepts StandardSqlTableTypeArgs and StandardSqlTableTypeOutput values.
// You can construct a concrete instance of `StandardSqlTableTypeInput` via:
//
//	StandardSqlTableTypeArgs{...}
type StandardSqlTableTypeInput interface {
	pulumi.Input

	ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput
	ToStandardSqlTableTypeOutputWithContext(context.Context) StandardSqlTableTypeOutput
}

// A table type
type StandardSqlTableTypeArgs struct {
	// The columns in this table type
	Columns StandardSqlFieldArrayInput `pulumi:"columns"`
}

func (StandardSqlTableTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableType)(nil)).Elem()
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput {
	return i.ToStandardSqlTableTypeOutputWithContext(context.Background())
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypeOutputWithContext(ctx context.Context) StandardSqlTableTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypeOutput)
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return i.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (i StandardSqlTableTypeArgs) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypeOutput).ToStandardSqlTableTypePtrOutputWithContext(ctx)
}

// StandardSqlTableTypePtrInput is an input type that accepts StandardSqlTableTypeArgs, StandardSqlTableTypePtr and StandardSqlTableTypePtrOutput values.
// You can construct a concrete instance of `StandardSqlTableTypePtrInput` via:
//
//	        StandardSqlTableTypeArgs{...}
//
//	or:
//
//	        nil
type StandardSqlTableTypePtrInput interface {
	pulumi.Input

	ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput
	ToStandardSqlTableTypePtrOutputWithContext(context.Context) StandardSqlTableTypePtrOutput
}

type standardSqlTableTypePtrType StandardSqlTableTypeArgs

func StandardSqlTableTypePtr(v *StandardSqlTableTypeArgs) StandardSqlTableTypePtrInput {
	return (*standardSqlTableTypePtrType)(v)
}

func (*standardSqlTableTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlTableType)(nil)).Elem()
}

func (i *standardSqlTableTypePtrType) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return i.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (i *standardSqlTableTypePtrType) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StandardSqlTableTypePtrOutput)
}

// A table type
type StandardSqlTableTypeOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableType)(nil)).Elem()
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypeOutput() StandardSqlTableTypeOutput {
	return o
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypeOutputWithContext(ctx context.Context) StandardSqlTableTypeOutput {
	return o
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return o.ToStandardSqlTableTypePtrOutputWithContext(context.Background())
}

func (o StandardSqlTableTypeOutput) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StandardSqlTableType) *StandardSqlTableType {
		return &v
	}).(StandardSqlTableTypePtrOutput)
}

// The columns in this table type
func (o StandardSqlTableTypeOutput) Columns() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v StandardSqlTableType) []StandardSqlField { return v.Columns }).(StandardSqlFieldArrayOutput)
}

type StandardSqlTableTypePtrOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StandardSqlTableType)(nil)).Elem()
}

func (o StandardSqlTableTypePtrOutput) ToStandardSqlTableTypePtrOutput() StandardSqlTableTypePtrOutput {
	return o
}

func (o StandardSqlTableTypePtrOutput) ToStandardSqlTableTypePtrOutputWithContext(ctx context.Context) StandardSqlTableTypePtrOutput {
	return o
}

func (o StandardSqlTableTypePtrOutput) Elem() StandardSqlTableTypeOutput {
	return o.ApplyT(func(v *StandardSqlTableType) StandardSqlTableType {
		if v != nil {
			return *v
		}
		var ret StandardSqlTableType
		return ret
	}).(StandardSqlTableTypeOutput)
}

// The columns in this table type
func (o StandardSqlTableTypePtrOutput) Columns() StandardSqlFieldArrayOutput {
	return o.ApplyT(func(v *StandardSqlTableType) []StandardSqlField {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(StandardSqlFieldArrayOutput)
}

// A table type
type StandardSqlTableTypeResponse struct {
	// The columns in this table type
	Columns []StandardSqlFieldResponse `pulumi:"columns"`
}

// A table type
type StandardSqlTableTypeResponseOutput struct{ *pulumi.OutputState }

func (StandardSqlTableTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StandardSqlTableTypeResponse)(nil)).Elem()
}

func (o StandardSqlTableTypeResponseOutput) ToStandardSqlTableTypeResponseOutput() StandardSqlTableTypeResponseOutput {
	return o
}

func (o StandardSqlTableTypeResponseOutput) ToStandardSqlTableTypeResponseOutputWithContext(ctx context.Context) StandardSqlTableTypeResponseOutput {
	return o
}

// The columns in this table type
func (o StandardSqlTableTypeResponseOutput) Columns() StandardSqlFieldResponseArrayOutput {
	return o.ApplyT(func(v StandardSqlTableTypeResponse) []StandardSqlFieldResponse { return v.Columns }).(StandardSqlFieldResponseArrayOutput)
}

type StreamingbufferResponse struct {
	// A lower-bound estimate of the number of bytes currently in the streaming buffer.
	EstimatedBytes string `pulumi:"estimatedBytes"`
	// A lower-bound estimate of the number of rows currently in the streaming buffer.
	EstimatedRows string `pulumi:"estimatedRows"`
	// Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
	OldestEntryTime string `pulumi:"oldestEntryTime"`
}

type StreamingbufferResponseOutput struct{ *pulumi.OutputState }

func (StreamingbufferResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingbufferResponse)(nil)).Elem()
}

func (o StreamingbufferResponseOutput) ToStreamingbufferResponseOutput() StreamingbufferResponseOutput {
	return o
}

func (o StreamingbufferResponseOutput) ToStreamingbufferResponseOutputWithContext(ctx context.Context) StreamingbufferResponseOutput {
	return o
}

// A lower-bound estimate of the number of bytes currently in the streaming buffer.
func (o StreamingbufferResponseOutput) EstimatedBytes() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingbufferResponse) string { return v.EstimatedBytes }).(pulumi.StringOutput)
}

// A lower-bound estimate of the number of rows currently in the streaming buffer.
func (o StreamingbufferResponseOutput) EstimatedRows() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingbufferResponse) string { return v.EstimatedRows }).(pulumi.StringOutput)
}

// Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.
func (o StreamingbufferResponseOutput) OldestEntryTime() pulumi.StringOutput {
	return o.ApplyT(func(v StreamingbufferResponse) string { return v.OldestEntryTime }).(pulumi.StringOutput)
}

type TableConstraints struct {
	// [Optional] The foreign keys of the tables.
	ForeignKeys []TableConstraintsForeignKeysItem `pulumi:"foreignKeys"`
	// [Optional] The primary key of the table.
	PrimaryKey *TableConstraintsPrimaryKey `pulumi:"primaryKey"`
}

// TableConstraintsInput is an input type that accepts TableConstraintsArgs and TableConstraintsOutput values.
// You can construct a concrete instance of `TableConstraintsInput` via:
//
//	TableConstraintsArgs{...}
type TableConstraintsInput interface {
	pulumi.Input

	ToTableConstraintsOutput() TableConstraintsOutput
	ToTableConstraintsOutputWithContext(context.Context) TableConstraintsOutput
}

type TableConstraintsArgs struct {
	// [Optional] The foreign keys of the tables.
	ForeignKeys TableConstraintsForeignKeysItemArrayInput `pulumi:"foreignKeys"`
	// [Optional] The primary key of the table.
	PrimaryKey TableConstraintsPrimaryKeyPtrInput `pulumi:"primaryKey"`
}

func (TableConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraints)(nil)).Elem()
}

func (i TableConstraintsArgs) ToTableConstraintsOutput() TableConstraintsOutput {
	return i.ToTableConstraintsOutputWithContext(context.Background())
}

func (i TableConstraintsArgs) ToTableConstraintsOutputWithContext(ctx context.Context) TableConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsOutput)
}

func (i TableConstraintsArgs) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return i.ToTableConstraintsPtrOutputWithContext(context.Background())
}

func (i TableConstraintsArgs) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsOutput).ToTableConstraintsPtrOutputWithContext(ctx)
}

// TableConstraintsPtrInput is an input type that accepts TableConstraintsArgs, TableConstraintsPtr and TableConstraintsPtrOutput values.
// You can construct a concrete instance of `TableConstraintsPtrInput` via:
//
//	        TableConstraintsArgs{...}
//
//	or:
//
//	        nil
type TableConstraintsPtrInput interface {
	pulumi.Input

	ToTableConstraintsPtrOutput() TableConstraintsPtrOutput
	ToTableConstraintsPtrOutputWithContext(context.Context) TableConstraintsPtrOutput
}

type tableConstraintsPtrType TableConstraintsArgs

func TableConstraintsPtr(v *TableConstraintsArgs) TableConstraintsPtrInput {
	return (*tableConstraintsPtrType)(v)
}

func (*tableConstraintsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraints)(nil)).Elem()
}

func (i *tableConstraintsPtrType) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return i.ToTableConstraintsPtrOutputWithContext(context.Background())
}

func (i *tableConstraintsPtrType) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPtrOutput)
}

type TableConstraintsOutput struct{ *pulumi.OutputState }

func (TableConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraints)(nil)).Elem()
}

func (o TableConstraintsOutput) ToTableConstraintsOutput() TableConstraintsOutput {
	return o
}

func (o TableConstraintsOutput) ToTableConstraintsOutputWithContext(ctx context.Context) TableConstraintsOutput {
	return o
}

func (o TableConstraintsOutput) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return o.ToTableConstraintsPtrOutputWithContext(context.Background())
}

func (o TableConstraintsOutput) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraints) *TableConstraints {
		return &v
	}).(TableConstraintsPtrOutput)
}

// [Optional] The foreign keys of the tables.
func (o TableConstraintsOutput) ForeignKeys() TableConstraintsForeignKeysItemArrayOutput {
	return o.ApplyT(func(v TableConstraints) []TableConstraintsForeignKeysItem { return v.ForeignKeys }).(TableConstraintsForeignKeysItemArrayOutput)
}

// [Optional] The primary key of the table.
func (o TableConstraintsOutput) PrimaryKey() TableConstraintsPrimaryKeyPtrOutput {
	return o.ApplyT(func(v TableConstraints) *TableConstraintsPrimaryKey { return v.PrimaryKey }).(TableConstraintsPrimaryKeyPtrOutput)
}

type TableConstraintsPtrOutput struct{ *pulumi.OutputState }

func (TableConstraintsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraints)(nil)).Elem()
}

func (o TableConstraintsPtrOutput) ToTableConstraintsPtrOutput() TableConstraintsPtrOutput {
	return o
}

func (o TableConstraintsPtrOutput) ToTableConstraintsPtrOutputWithContext(ctx context.Context) TableConstraintsPtrOutput {
	return o
}

func (o TableConstraintsPtrOutput) Elem() TableConstraintsOutput {
	return o.ApplyT(func(v *TableConstraints) TableConstraints {
		if v != nil {
			return *v
		}
		var ret TableConstraints
		return ret
	}).(TableConstraintsOutput)
}

// [Optional] The foreign keys of the tables.
func (o TableConstraintsPtrOutput) ForeignKeys() TableConstraintsForeignKeysItemArrayOutput {
	return o.ApplyT(func(v *TableConstraints) []TableConstraintsForeignKeysItem {
		if v == nil {
			return nil
		}
		return v.ForeignKeys
	}).(TableConstraintsForeignKeysItemArrayOutput)
}

// [Optional] The primary key of the table.
func (o TableConstraintsPtrOutput) PrimaryKey() TableConstraintsPrimaryKeyPtrOutput {
	return o.ApplyT(func(v *TableConstraints) *TableConstraintsPrimaryKey {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(TableConstraintsPrimaryKeyPtrOutput)
}

type TableConstraintsForeignKeysItem struct {
	ColumnReferences []TableConstraintsForeignKeysItemColumnReferencesItem `pulumi:"columnReferences"`
	Name             *string                                               `pulumi:"name"`
	ReferencedTable  *TableConstraintsForeignKeysItemReferencedTable       `pulumi:"referencedTable"`
}

// TableConstraintsForeignKeysItemInput is an input type that accepts TableConstraintsForeignKeysItemArgs and TableConstraintsForeignKeysItemOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemInput` via:
//
//	TableConstraintsForeignKeysItemArgs{...}
type TableConstraintsForeignKeysItemInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemOutput() TableConstraintsForeignKeysItemOutput
	ToTableConstraintsForeignKeysItemOutputWithContext(context.Context) TableConstraintsForeignKeysItemOutput
}

type TableConstraintsForeignKeysItemArgs struct {
	ColumnReferences TableConstraintsForeignKeysItemColumnReferencesItemArrayInput `pulumi:"columnReferences"`
	Name             pulumi.StringPtrInput                                         `pulumi:"name"`
	ReferencedTable  TableConstraintsForeignKeysItemReferencedTablePtrInput        `pulumi:"referencedTable"`
}

func (TableConstraintsForeignKeysItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemArgs) ToTableConstraintsForeignKeysItemOutput() TableConstraintsForeignKeysItemOutput {
	return i.ToTableConstraintsForeignKeysItemOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemArgs) ToTableConstraintsForeignKeysItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemOutput)
}

// TableConstraintsForeignKeysItemArrayInput is an input type that accepts TableConstraintsForeignKeysItemArray and TableConstraintsForeignKeysItemArrayOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemArrayInput` via:
//
//	TableConstraintsForeignKeysItemArray{ TableConstraintsForeignKeysItemArgs{...} }
type TableConstraintsForeignKeysItemArrayInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemArrayOutput() TableConstraintsForeignKeysItemArrayOutput
	ToTableConstraintsForeignKeysItemArrayOutputWithContext(context.Context) TableConstraintsForeignKeysItemArrayOutput
}

type TableConstraintsForeignKeysItemArray []TableConstraintsForeignKeysItemInput

func (TableConstraintsForeignKeysItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemArray) ToTableConstraintsForeignKeysItemArrayOutput() TableConstraintsForeignKeysItemArrayOutput {
	return i.ToTableConstraintsForeignKeysItemArrayOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemArray) ToTableConstraintsForeignKeysItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemArrayOutput)
}

type TableConstraintsForeignKeysItemOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemOutput) ToTableConstraintsForeignKeysItemOutput() TableConstraintsForeignKeysItemOutput {
	return o
}

func (o TableConstraintsForeignKeysItemOutput) ToTableConstraintsForeignKeysItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemOutput {
	return o
}

func (o TableConstraintsForeignKeysItemOutput) ColumnReferences() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItem) []TableConstraintsForeignKeysItemColumnReferencesItem {
		return v.ColumnReferences
	}).(TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput)
}

func (o TableConstraintsForeignKeysItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemOutput) ReferencedTable() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItem) *TableConstraintsForeignKeysItemReferencedTable {
		return v.ReferencedTable
	}).(TableConstraintsForeignKeysItemReferencedTablePtrOutput)
}

type TableConstraintsForeignKeysItemArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemArrayOutput) ToTableConstraintsForeignKeysItemArrayOutput() TableConstraintsForeignKeysItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemArrayOutput) ToTableConstraintsForeignKeysItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItem {
		return vs[0].([]TableConstraintsForeignKeysItem)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemOutput)
}

type TableConstraintsForeignKeysItemColumnReferencesItem struct {
	ReferencedColumn  *string `pulumi:"referencedColumn"`
	ReferencingColumn *string `pulumi:"referencingColumn"`
}

// TableConstraintsForeignKeysItemColumnReferencesItemInput is an input type that accepts TableConstraintsForeignKeysItemColumnReferencesItemArgs and TableConstraintsForeignKeysItemColumnReferencesItemOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemColumnReferencesItemInput` via:
//
//	TableConstraintsForeignKeysItemColumnReferencesItemArgs{...}
type TableConstraintsForeignKeysItemColumnReferencesItemInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemColumnReferencesItemOutput() TableConstraintsForeignKeysItemColumnReferencesItemOutput
	ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(context.Context) TableConstraintsForeignKeysItemColumnReferencesItemOutput
}

type TableConstraintsForeignKeysItemColumnReferencesItemArgs struct {
	ReferencedColumn  pulumi.StringPtrInput `pulumi:"referencedColumn"`
	ReferencingColumn pulumi.StringPtrInput `pulumi:"referencingColumn"`
}

func (TableConstraintsForeignKeysItemColumnReferencesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArgs) ToTableConstraintsForeignKeysItemColumnReferencesItemOutput() TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return i.ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArgs) ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemColumnReferencesItemOutput)
}

// TableConstraintsForeignKeysItemColumnReferencesItemArrayInput is an input type that accepts TableConstraintsForeignKeysItemColumnReferencesItemArray and TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemColumnReferencesItemArrayInput` via:
//
//	TableConstraintsForeignKeysItemColumnReferencesItemArray{ TableConstraintsForeignKeysItemColumnReferencesItemArgs{...} }
type TableConstraintsForeignKeysItemColumnReferencesItemArrayInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput
	ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(context.Context) TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput
}

type TableConstraintsForeignKeysItemColumnReferencesItemArray []TableConstraintsForeignKeysItemColumnReferencesItemInput

func (TableConstraintsForeignKeysItemColumnReferencesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArray) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return i.ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemColumnReferencesItemArray) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput)
}

type TableConstraintsForeignKeysItemColumnReferencesItemOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemOutput() TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ReferencedColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItem) *string { return v.ReferencedColumn }).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemOutput) ReferencingColumn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItem) *string { return v.ReferencingColumn }).(pulumi.StringPtrOutput)
}

type TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemColumnReferencesItem)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemColumnReferencesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItemColumnReferencesItem {
		return vs[0].([]TableConstraintsForeignKeysItemColumnReferencesItem)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemColumnReferencesItemOutput)
}

type TableConstraintsForeignKeysItemColumnReferencesItemResponse struct {
	ReferencedColumn  string `pulumi:"referencedColumn"`
	ReferencingColumn string `pulumi:"referencingColumn"`
}

type TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseOutput() TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ReferencedColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItemResponse) string { return v.ReferencedColumn }).(pulumi.StringOutput)
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput) ReferencingColumn() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemColumnReferencesItemResponse) string { return v.ReferencingColumn }).(pulumi.StringOutput)
}

type TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemColumnReferencesItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput() TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) ToTableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItemColumnReferencesItemResponse {
		return vs[0].([]TableConstraintsForeignKeysItemColumnReferencesItemResponse)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput)
}

type TableConstraintsForeignKeysItemReferencedTable struct {
	DatasetId *string `pulumi:"datasetId"`
	Project   *string `pulumi:"project"`
	TableId   *string `pulumi:"tableId"`
}

// TableConstraintsForeignKeysItemReferencedTableInput is an input type that accepts TableConstraintsForeignKeysItemReferencedTableArgs and TableConstraintsForeignKeysItemReferencedTableOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemReferencedTableInput` via:
//
//	TableConstraintsForeignKeysItemReferencedTableArgs{...}
type TableConstraintsForeignKeysItemReferencedTableInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemReferencedTableOutput() TableConstraintsForeignKeysItemReferencedTableOutput
	ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(context.Context) TableConstraintsForeignKeysItemReferencedTableOutput
}

type TableConstraintsForeignKeysItemReferencedTableArgs struct {
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	TableId   pulumi.StringPtrInput `pulumi:"tableId"`
}

func (TableConstraintsForeignKeysItemReferencedTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTableOutput() TableConstraintsForeignKeysItemReferencedTableOutput {
	return i.ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemReferencedTableOutput)
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return i.ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Background())
}

func (i TableConstraintsForeignKeysItemReferencedTableArgs) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemReferencedTableOutput).ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx)
}

// TableConstraintsForeignKeysItemReferencedTablePtrInput is an input type that accepts TableConstraintsForeignKeysItemReferencedTableArgs, TableConstraintsForeignKeysItemReferencedTablePtr and TableConstraintsForeignKeysItemReferencedTablePtrOutput values.
// You can construct a concrete instance of `TableConstraintsForeignKeysItemReferencedTablePtrInput` via:
//
//	        TableConstraintsForeignKeysItemReferencedTableArgs{...}
//
//	or:
//
//	        nil
type TableConstraintsForeignKeysItemReferencedTablePtrInput interface {
	pulumi.Input

	ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput
	ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput
}

type tableConstraintsForeignKeysItemReferencedTablePtrType TableConstraintsForeignKeysItemReferencedTableArgs

func TableConstraintsForeignKeysItemReferencedTablePtr(v *TableConstraintsForeignKeysItemReferencedTableArgs) TableConstraintsForeignKeysItemReferencedTablePtrInput {
	return (*tableConstraintsForeignKeysItemReferencedTablePtrType)(v)
}

func (*tableConstraintsForeignKeysItemReferencedTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (i *tableConstraintsForeignKeysItemReferencedTablePtrType) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return i.ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Background())
}

func (i *tableConstraintsForeignKeysItemReferencedTablePtrType) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsForeignKeysItemReferencedTablePtrOutput)
}

type TableConstraintsForeignKeysItemReferencedTableOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemReferencedTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTableOutput() TableConstraintsForeignKeysItemReferencedTableOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTableOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTableOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o.ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(context.Background())
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraintsForeignKeysItemReferencedTable) *TableConstraintsForeignKeysItemReferencedTable {
		return &v
	}).(TableConstraintsForeignKeysItemReferencedTablePtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTable) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTable) *string { return v.Project }).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTable) *string { return v.TableId }).(pulumi.StringPtrOutput)
}

type TableConstraintsForeignKeysItemReferencedTablePtrOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemReferencedTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsForeignKeysItemReferencedTable)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutput() TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) ToTableConstraintsForeignKeysItemReferencedTablePtrOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTablePtrOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) Elem() TableConstraintsForeignKeysItemReferencedTableOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) TableConstraintsForeignKeysItemReferencedTable {
		if v != nil {
			return *v
		}
		var ret TableConstraintsForeignKeysItemReferencedTable
		return ret
	}).(TableConstraintsForeignKeysItemReferencedTableOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTablePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableConstraintsForeignKeysItemReferencedTable) *string {
		if v == nil {
			return nil
		}
		return v.TableId
	}).(pulumi.StringPtrOutput)
}

type TableConstraintsForeignKeysItemReferencedTableResponse struct {
	DatasetId string `pulumi:"datasetId"`
	Project   string `pulumi:"project"`
	TableId   string `pulumi:"tableId"`
}

type TableConstraintsForeignKeysItemReferencedTableResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemReferencedTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTableResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) ToTableConstraintsForeignKeysItemReferencedTableResponseOutput() TableConstraintsForeignKeysItemReferencedTableResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) ToTableConstraintsForeignKeysItemReferencedTableResponseOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemReferencedTableResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTableResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTableResponse) string { return v.Project }).(pulumi.StringOutput)
}

func (o TableConstraintsForeignKeysItemReferencedTableResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemReferencedTableResponse) string { return v.TableId }).(pulumi.StringOutput)
}

type TableConstraintsForeignKeysItemResponse struct {
	ColumnReferences []TableConstraintsForeignKeysItemColumnReferencesItemResponse `pulumi:"columnReferences"`
	Name             string                                                        `pulumi:"name"`
	ReferencedTable  TableConstraintsForeignKeysItemReferencedTableResponse        `pulumi:"referencedTable"`
}

type TableConstraintsForeignKeysItemResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsForeignKeysItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemResponseOutput) ToTableConstraintsForeignKeysItemResponseOutput() TableConstraintsForeignKeysItemResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemResponseOutput) ToTableConstraintsForeignKeysItemResponseOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemResponseOutput {
	return o
}

func (o TableConstraintsForeignKeysItemResponseOutput) ColumnReferences() TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemResponse) []TableConstraintsForeignKeysItemColumnReferencesItemResponse {
		return v.ColumnReferences
	}).(TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput)
}

func (o TableConstraintsForeignKeysItemResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o TableConstraintsForeignKeysItemResponseOutput) ReferencedTable() TableConstraintsForeignKeysItemReferencedTableResponseOutput {
	return o.ApplyT(func(v TableConstraintsForeignKeysItemResponse) TableConstraintsForeignKeysItemReferencedTableResponse {
		return v.ReferencedTable
	}).(TableConstraintsForeignKeysItemReferencedTableResponseOutput)
}

type TableConstraintsForeignKeysItemResponseArrayOutput struct{ *pulumi.OutputState }

func (TableConstraintsForeignKeysItemResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableConstraintsForeignKeysItemResponse)(nil)).Elem()
}

func (o TableConstraintsForeignKeysItemResponseArrayOutput) ToTableConstraintsForeignKeysItemResponseArrayOutput() TableConstraintsForeignKeysItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemResponseArrayOutput) ToTableConstraintsForeignKeysItemResponseArrayOutputWithContext(ctx context.Context) TableConstraintsForeignKeysItemResponseArrayOutput {
	return o
}

func (o TableConstraintsForeignKeysItemResponseArrayOutput) Index(i pulumi.IntInput) TableConstraintsForeignKeysItemResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableConstraintsForeignKeysItemResponse {
		return vs[0].([]TableConstraintsForeignKeysItemResponse)[vs[1].(int)]
	}).(TableConstraintsForeignKeysItemResponseOutput)
}

// [Optional] The primary key of the table.
type TableConstraintsPrimaryKey struct {
	Columns []string `pulumi:"columns"`
}

// TableConstraintsPrimaryKeyInput is an input type that accepts TableConstraintsPrimaryKeyArgs and TableConstraintsPrimaryKeyOutput values.
// You can construct a concrete instance of `TableConstraintsPrimaryKeyInput` via:
//
//	TableConstraintsPrimaryKeyArgs{...}
type TableConstraintsPrimaryKeyInput interface {
	pulumi.Input

	ToTableConstraintsPrimaryKeyOutput() TableConstraintsPrimaryKeyOutput
	ToTableConstraintsPrimaryKeyOutputWithContext(context.Context) TableConstraintsPrimaryKeyOutput
}

// [Optional] The primary key of the table.
type TableConstraintsPrimaryKeyArgs struct {
	Columns pulumi.StringArrayInput `pulumi:"columns"`
}

func (TableConstraintsPrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsPrimaryKey)(nil)).Elem()
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyOutput() TableConstraintsPrimaryKeyOutput {
	return i.ToTableConstraintsPrimaryKeyOutputWithContext(context.Background())
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPrimaryKeyOutput)
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return i.ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Background())
}

func (i TableConstraintsPrimaryKeyArgs) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPrimaryKeyOutput).ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx)
}

// TableConstraintsPrimaryKeyPtrInput is an input type that accepts TableConstraintsPrimaryKeyArgs, TableConstraintsPrimaryKeyPtr and TableConstraintsPrimaryKeyPtrOutput values.
// You can construct a concrete instance of `TableConstraintsPrimaryKeyPtrInput` via:
//
//	        TableConstraintsPrimaryKeyArgs{...}
//
//	or:
//
//	        nil
type TableConstraintsPrimaryKeyPtrInput interface {
	pulumi.Input

	ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput
	ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Context) TableConstraintsPrimaryKeyPtrOutput
}

type tableConstraintsPrimaryKeyPtrType TableConstraintsPrimaryKeyArgs

func TableConstraintsPrimaryKeyPtr(v *TableConstraintsPrimaryKeyArgs) TableConstraintsPrimaryKeyPtrInput {
	return (*tableConstraintsPrimaryKeyPtrType)(v)
}

func (*tableConstraintsPrimaryKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsPrimaryKey)(nil)).Elem()
}

func (i *tableConstraintsPrimaryKeyPtrType) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return i.ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Background())
}

func (i *tableConstraintsPrimaryKeyPtrType) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableConstraintsPrimaryKeyPtrOutput)
}

// [Optional] The primary key of the table.
type TableConstraintsPrimaryKeyOutput struct{ *pulumi.OutputState }

func (TableConstraintsPrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsPrimaryKey)(nil)).Elem()
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyOutput() TableConstraintsPrimaryKeyOutput {
	return o
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyOutput {
	return o
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return o.ToTableConstraintsPrimaryKeyPtrOutputWithContext(context.Background())
}

func (o TableConstraintsPrimaryKeyOutput) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableConstraintsPrimaryKey) *TableConstraintsPrimaryKey {
		return &v
	}).(TableConstraintsPrimaryKeyPtrOutput)
}

func (o TableConstraintsPrimaryKeyOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableConstraintsPrimaryKey) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type TableConstraintsPrimaryKeyPtrOutput struct{ *pulumi.OutputState }

func (TableConstraintsPrimaryKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableConstraintsPrimaryKey)(nil)).Elem()
}

func (o TableConstraintsPrimaryKeyPtrOutput) ToTableConstraintsPrimaryKeyPtrOutput() TableConstraintsPrimaryKeyPtrOutput {
	return o
}

func (o TableConstraintsPrimaryKeyPtrOutput) ToTableConstraintsPrimaryKeyPtrOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyPtrOutput {
	return o
}

func (o TableConstraintsPrimaryKeyPtrOutput) Elem() TableConstraintsPrimaryKeyOutput {
	return o.ApplyT(func(v *TableConstraintsPrimaryKey) TableConstraintsPrimaryKey {
		if v != nil {
			return *v
		}
		var ret TableConstraintsPrimaryKey
		return ret
	}).(TableConstraintsPrimaryKeyOutput)
}

func (o TableConstraintsPrimaryKeyPtrOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableConstraintsPrimaryKey) []string {
		if v == nil {
			return nil
		}
		return v.Columns
	}).(pulumi.StringArrayOutput)
}

// [Optional] The primary key of the table.
type TableConstraintsPrimaryKeyResponse struct {
	Columns []string `pulumi:"columns"`
}

// [Optional] The primary key of the table.
type TableConstraintsPrimaryKeyResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsPrimaryKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsPrimaryKeyResponse)(nil)).Elem()
}

func (o TableConstraintsPrimaryKeyResponseOutput) ToTableConstraintsPrimaryKeyResponseOutput() TableConstraintsPrimaryKeyResponseOutput {
	return o
}

func (o TableConstraintsPrimaryKeyResponseOutput) ToTableConstraintsPrimaryKeyResponseOutputWithContext(ctx context.Context) TableConstraintsPrimaryKeyResponseOutput {
	return o
}

func (o TableConstraintsPrimaryKeyResponseOutput) Columns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableConstraintsPrimaryKeyResponse) []string { return v.Columns }).(pulumi.StringArrayOutput)
}

type TableConstraintsResponse struct {
	// [Optional] The foreign keys of the tables.
	ForeignKeys []TableConstraintsForeignKeysItemResponse `pulumi:"foreignKeys"`
	// [Optional] The primary key of the table.
	PrimaryKey TableConstraintsPrimaryKeyResponse `pulumi:"primaryKey"`
}

type TableConstraintsResponseOutput struct{ *pulumi.OutputState }

func (TableConstraintsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableConstraintsResponse)(nil)).Elem()
}

func (o TableConstraintsResponseOutput) ToTableConstraintsResponseOutput() TableConstraintsResponseOutput {
	return o
}

func (o TableConstraintsResponseOutput) ToTableConstraintsResponseOutputWithContext(ctx context.Context) TableConstraintsResponseOutput {
	return o
}

// [Optional] The foreign keys of the tables.
func (o TableConstraintsResponseOutput) ForeignKeys() TableConstraintsForeignKeysItemResponseArrayOutput {
	return o.ApplyT(func(v TableConstraintsResponse) []TableConstraintsForeignKeysItemResponse { return v.ForeignKeys }).(TableConstraintsForeignKeysItemResponseArrayOutput)
}

// [Optional] The primary key of the table.
func (o TableConstraintsResponseOutput) PrimaryKey() TableConstraintsPrimaryKeyResponseOutput {
	return o.ApplyT(func(v TableConstraintsResponse) TableConstraintsPrimaryKeyResponse { return v.PrimaryKey }).(TableConstraintsPrimaryKeyResponseOutput)
}

type TableFieldSchema struct {
	// [Optional] The categories attached to this field, used for field-level access control.
	Categories *TableFieldSchemaCategories `pulumi:"categories"`
	// Optional. Collation specification of the field. It only can be set on string type field.
	Collation *string `pulumi:"collation"`
	// Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE '2020-01-01']
	DefaultValueExpression *string `pulumi:"defaultValueExpression"`
	// [Optional] The field description. The maximum length is 1,024 characters.
	Description *string `pulumi:"description"`
	// [Optional] Describes the nested schema fields if the type property is set to RECORD.
	Fields []TableFieldSchema `pulumi:"fields"`
	// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength *string `pulumi:"maxLength"`
	// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode *string `pulumi:"mode"`
	// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
	Name       *string                     `pulumi:"name"`
	PolicyTags *TableFieldSchemaPolicyTags `pulumi:"policyTags"`
	// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision *string `pulumi:"precision"`
	// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
	RangeElementType *TableFieldSchemaRangeElementType `pulumi:"rangeElementType"`
	// Optional. Rounding Mode specification of the field. It only can be set on NUMERIC or BIGNUMERIC type fields.
	RoundingMode *string `pulumi:"roundingMode"`
	// [Optional] See documentation for precision.
	Scale *string `pulumi:"scale"`
	// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
	Type *string `pulumi:"type"`
}

// TableFieldSchemaInput is an input type that accepts TableFieldSchemaArgs and TableFieldSchemaOutput values.
// You can construct a concrete instance of `TableFieldSchemaInput` via:
//
//	TableFieldSchemaArgs{...}
type TableFieldSchemaInput interface {
	pulumi.Input

	ToTableFieldSchemaOutput() TableFieldSchemaOutput
	ToTableFieldSchemaOutputWithContext(context.Context) TableFieldSchemaOutput
}

type TableFieldSchemaArgs struct {
	// [Optional] The categories attached to this field, used for field-level access control.
	Categories TableFieldSchemaCategoriesPtrInput `pulumi:"categories"`
	// Optional. Collation specification of the field. It only can be set on string type field.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE '2020-01-01']
	DefaultValueExpression pulumi.StringPtrInput `pulumi:"defaultValueExpression"`
	// [Optional] The field description. The maximum length is 1,024 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// [Optional] Describes the nested schema fields if the type property is set to RECORD.
	Fields TableFieldSchemaArrayInput `pulumi:"fields"`
	// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength pulumi.StringPtrInput `pulumi:"maxLength"`
	// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
	Name       pulumi.StringPtrInput              `pulumi:"name"`
	PolicyTags TableFieldSchemaPolicyTagsPtrInput `pulumi:"policyTags"`
	// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision pulumi.StringPtrInput `pulumi:"precision"`
	// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
	RangeElementType TableFieldSchemaRangeElementTypePtrInput `pulumi:"rangeElementType"`
	// Optional. Rounding Mode specification of the field. It only can be set on NUMERIC or BIGNUMERIC type fields.
	RoundingMode pulumi.StringPtrInput `pulumi:"roundingMode"`
	// [Optional] See documentation for precision.
	Scale pulumi.StringPtrInput `pulumi:"scale"`
	// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TableFieldSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchema)(nil)).Elem()
}

func (i TableFieldSchemaArgs) ToTableFieldSchemaOutput() TableFieldSchemaOutput {
	return i.ToTableFieldSchemaOutputWithContext(context.Background())
}

func (i TableFieldSchemaArgs) ToTableFieldSchemaOutputWithContext(ctx context.Context) TableFieldSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaOutput)
}

// TableFieldSchemaArrayInput is an input type that accepts TableFieldSchemaArray and TableFieldSchemaArrayOutput values.
// You can construct a concrete instance of `TableFieldSchemaArrayInput` via:
//
//	TableFieldSchemaArray{ TableFieldSchemaArgs{...} }
type TableFieldSchemaArrayInput interface {
	pulumi.Input

	ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput
	ToTableFieldSchemaArrayOutputWithContext(context.Context) TableFieldSchemaArrayOutput
}

type TableFieldSchemaArray []TableFieldSchemaInput

func (TableFieldSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchema)(nil)).Elem()
}

func (i TableFieldSchemaArray) ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput {
	return i.ToTableFieldSchemaArrayOutputWithContext(context.Background())
}

func (i TableFieldSchemaArray) ToTableFieldSchemaArrayOutputWithContext(ctx context.Context) TableFieldSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaArrayOutput)
}

type TableFieldSchemaOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchema)(nil)).Elem()
}

func (o TableFieldSchemaOutput) ToTableFieldSchemaOutput() TableFieldSchemaOutput {
	return o
}

func (o TableFieldSchemaOutput) ToTableFieldSchemaOutputWithContext(ctx context.Context) TableFieldSchemaOutput {
	return o
}

// [Optional] The categories attached to this field, used for field-level access control.
func (o TableFieldSchemaOutput) Categories() TableFieldSchemaCategoriesPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *TableFieldSchemaCategories { return v.Categories }).(TableFieldSchemaCategoriesPtrOutput)
}

// Optional. Collation specification of the field. It only can be set on string type field.
func (o TableFieldSchemaOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE '2020-01-01']
func (o TableFieldSchemaOutput) DefaultValueExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.DefaultValueExpression }).(pulumi.StringPtrOutput)
}

// [Optional] The field description. The maximum length is 1,024 characters.
func (o TableFieldSchemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// [Optional] Describes the nested schema fields if the type property is set to RECORD.
func (o TableFieldSchemaOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v TableFieldSchema) []TableFieldSchema { return v.Fields }).(TableFieldSchemaArrayOutput)
}

// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
func (o TableFieldSchemaOutput) MaxLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.MaxLength }).(pulumi.StringPtrOutput)
}

// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
func (o TableFieldSchemaOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
func (o TableFieldSchemaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o TableFieldSchemaOutput) PolicyTags() TableFieldSchemaPolicyTagsPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *TableFieldSchemaPolicyTags { return v.PolicyTags }).(TableFieldSchemaPolicyTagsPtrOutput)
}

// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
func (o TableFieldSchemaOutput) Precision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Precision }).(pulumi.StringPtrOutput)
}

// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
func (o TableFieldSchemaOutput) RangeElementType() TableFieldSchemaRangeElementTypePtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *TableFieldSchemaRangeElementType { return v.RangeElementType }).(TableFieldSchemaRangeElementTypePtrOutput)
}

// Optional. Rounding Mode specification of the field. It only can be set on NUMERIC or BIGNUMERIC type fields.
func (o TableFieldSchemaOutput) RoundingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.RoundingMode }).(pulumi.StringPtrOutput)
}

// [Optional] See documentation for precision.
func (o TableFieldSchemaOutput) Scale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Scale }).(pulumi.StringPtrOutput)
}

// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
func (o TableFieldSchemaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchema) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TableFieldSchemaArrayOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchema)(nil)).Elem()
}

func (o TableFieldSchemaArrayOutput) ToTableFieldSchemaArrayOutput() TableFieldSchemaArrayOutput {
	return o
}

func (o TableFieldSchemaArrayOutput) ToTableFieldSchemaArrayOutputWithContext(ctx context.Context) TableFieldSchemaArrayOutput {
	return o
}

func (o TableFieldSchemaArrayOutput) Index(i pulumi.IntInput) TableFieldSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableFieldSchema {
		return vs[0].([]TableFieldSchema)[vs[1].(int)]
	}).(TableFieldSchemaOutput)
}

// [Optional] The categories attached to this field, used for field-level access control.
type TableFieldSchemaCategories struct {
	// A list of category resource names. For example, "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
	Names []string `pulumi:"names"`
}

// TableFieldSchemaCategoriesInput is an input type that accepts TableFieldSchemaCategoriesArgs and TableFieldSchemaCategoriesOutput values.
// You can construct a concrete instance of `TableFieldSchemaCategoriesInput` via:
//
//	TableFieldSchemaCategoriesArgs{...}
type TableFieldSchemaCategoriesInput interface {
	pulumi.Input

	ToTableFieldSchemaCategoriesOutput() TableFieldSchemaCategoriesOutput
	ToTableFieldSchemaCategoriesOutputWithContext(context.Context) TableFieldSchemaCategoriesOutput
}

// [Optional] The categories attached to this field, used for field-level access control.
type TableFieldSchemaCategoriesArgs struct {
	// A list of category resource names. For example, "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (TableFieldSchemaCategoriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaCategories)(nil)).Elem()
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesOutput() TableFieldSchemaCategoriesOutput {
	return i.ToTableFieldSchemaCategoriesOutputWithContext(context.Background())
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaCategoriesOutput)
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return i.ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Background())
}

func (i TableFieldSchemaCategoriesArgs) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaCategoriesOutput).ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx)
}

// TableFieldSchemaCategoriesPtrInput is an input type that accepts TableFieldSchemaCategoriesArgs, TableFieldSchemaCategoriesPtr and TableFieldSchemaCategoriesPtrOutput values.
// You can construct a concrete instance of `TableFieldSchemaCategoriesPtrInput` via:
//
//	        TableFieldSchemaCategoriesArgs{...}
//
//	or:
//
//	        nil
type TableFieldSchemaCategoriesPtrInput interface {
	pulumi.Input

	ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput
	ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Context) TableFieldSchemaCategoriesPtrOutput
}

type tableFieldSchemaCategoriesPtrType TableFieldSchemaCategoriesArgs

func TableFieldSchemaCategoriesPtr(v *TableFieldSchemaCategoriesArgs) TableFieldSchemaCategoriesPtrInput {
	return (*tableFieldSchemaCategoriesPtrType)(v)
}

func (*tableFieldSchemaCategoriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaCategories)(nil)).Elem()
}

func (i *tableFieldSchemaCategoriesPtrType) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return i.ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Background())
}

func (i *tableFieldSchemaCategoriesPtrType) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaCategoriesPtrOutput)
}

// [Optional] The categories attached to this field, used for field-level access control.
type TableFieldSchemaCategoriesOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaCategoriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaCategories)(nil)).Elem()
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesOutput() TableFieldSchemaCategoriesOutput {
	return o
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesOutput {
	return o
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return o.ToTableFieldSchemaCategoriesPtrOutputWithContext(context.Background())
}

func (o TableFieldSchemaCategoriesOutput) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableFieldSchemaCategories) *TableFieldSchemaCategories {
		return &v
	}).(TableFieldSchemaCategoriesPtrOutput)
}

// A list of category resource names. For example, "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
func (o TableFieldSchemaCategoriesOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaCategories) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type TableFieldSchemaCategoriesPtrOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaCategoriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaCategories)(nil)).Elem()
}

func (o TableFieldSchemaCategoriesPtrOutput) ToTableFieldSchemaCategoriesPtrOutput() TableFieldSchemaCategoriesPtrOutput {
	return o
}

func (o TableFieldSchemaCategoriesPtrOutput) ToTableFieldSchemaCategoriesPtrOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesPtrOutput {
	return o
}

func (o TableFieldSchemaCategoriesPtrOutput) Elem() TableFieldSchemaCategoriesOutput {
	return o.ApplyT(func(v *TableFieldSchemaCategories) TableFieldSchemaCategories {
		if v != nil {
			return *v
		}
		var ret TableFieldSchemaCategories
		return ret
	}).(TableFieldSchemaCategoriesOutput)
}

// A list of category resource names. For example, "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
func (o TableFieldSchemaCategoriesPtrOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableFieldSchemaCategories) []string {
		if v == nil {
			return nil
		}
		return v.Names
	}).(pulumi.StringArrayOutput)
}

// [Optional] The categories attached to this field, used for field-level access control.
type TableFieldSchemaCategoriesResponse struct {
	// A list of category resource names. For example, "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
	Names []string `pulumi:"names"`
}

// [Optional] The categories attached to this field, used for field-level access control.
type TableFieldSchemaCategoriesResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaCategoriesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaCategoriesResponse)(nil)).Elem()
}

func (o TableFieldSchemaCategoriesResponseOutput) ToTableFieldSchemaCategoriesResponseOutput() TableFieldSchemaCategoriesResponseOutput {
	return o
}

func (o TableFieldSchemaCategoriesResponseOutput) ToTableFieldSchemaCategoriesResponseOutputWithContext(ctx context.Context) TableFieldSchemaCategoriesResponseOutput {
	return o
}

// A list of category resource names. For example, "projects/1/taxonomies/2/categories/3". At most 5 categories are allowed.
func (o TableFieldSchemaCategoriesResponseOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaCategoriesResponse) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type TableFieldSchemaPolicyTags struct {
	// A list of category resource names. For example, "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is allowed.
	Names []string `pulumi:"names"`
}

// TableFieldSchemaPolicyTagsInput is an input type that accepts TableFieldSchemaPolicyTagsArgs and TableFieldSchemaPolicyTagsOutput values.
// You can construct a concrete instance of `TableFieldSchemaPolicyTagsInput` via:
//
//	TableFieldSchemaPolicyTagsArgs{...}
type TableFieldSchemaPolicyTagsInput interface {
	pulumi.Input

	ToTableFieldSchemaPolicyTagsOutput() TableFieldSchemaPolicyTagsOutput
	ToTableFieldSchemaPolicyTagsOutputWithContext(context.Context) TableFieldSchemaPolicyTagsOutput
}

type TableFieldSchemaPolicyTagsArgs struct {
	// A list of category resource names. For example, "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is allowed.
	Names pulumi.StringArrayInput `pulumi:"names"`
}

func (TableFieldSchemaPolicyTagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsOutput() TableFieldSchemaPolicyTagsOutput {
	return i.ToTableFieldSchemaPolicyTagsOutputWithContext(context.Background())
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaPolicyTagsOutput)
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return i.ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Background())
}

func (i TableFieldSchemaPolicyTagsArgs) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaPolicyTagsOutput).ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx)
}

// TableFieldSchemaPolicyTagsPtrInput is an input type that accepts TableFieldSchemaPolicyTagsArgs, TableFieldSchemaPolicyTagsPtr and TableFieldSchemaPolicyTagsPtrOutput values.
// You can construct a concrete instance of `TableFieldSchemaPolicyTagsPtrInput` via:
//
//	        TableFieldSchemaPolicyTagsArgs{...}
//
//	or:
//
//	        nil
type TableFieldSchemaPolicyTagsPtrInput interface {
	pulumi.Input

	ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput
	ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Context) TableFieldSchemaPolicyTagsPtrOutput
}

type tableFieldSchemaPolicyTagsPtrType TableFieldSchemaPolicyTagsArgs

func TableFieldSchemaPolicyTagsPtr(v *TableFieldSchemaPolicyTagsArgs) TableFieldSchemaPolicyTagsPtrInput {
	return (*tableFieldSchemaPolicyTagsPtrType)(v)
}

func (*tableFieldSchemaPolicyTagsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (i *tableFieldSchemaPolicyTagsPtrType) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return i.ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Background())
}

func (i *tableFieldSchemaPolicyTagsPtrType) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaPolicyTagsPtrOutput)
}

type TableFieldSchemaPolicyTagsOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaPolicyTagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsOutput() TableFieldSchemaPolicyTagsOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return o.ToTableFieldSchemaPolicyTagsPtrOutputWithContext(context.Background())
}

func (o TableFieldSchemaPolicyTagsOutput) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableFieldSchemaPolicyTags) *TableFieldSchemaPolicyTags {
		return &v
	}).(TableFieldSchemaPolicyTagsPtrOutput)
}

// A list of category resource names. For example, "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is allowed.
func (o TableFieldSchemaPolicyTagsOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaPolicyTags) []string { return v.Names }).(pulumi.StringArrayOutput)
}

type TableFieldSchemaPolicyTagsPtrOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaPolicyTagsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaPolicyTags)(nil)).Elem()
}

func (o TableFieldSchemaPolicyTagsPtrOutput) ToTableFieldSchemaPolicyTagsPtrOutput() TableFieldSchemaPolicyTagsPtrOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsPtrOutput) ToTableFieldSchemaPolicyTagsPtrOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsPtrOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsPtrOutput) Elem() TableFieldSchemaPolicyTagsOutput {
	return o.ApplyT(func(v *TableFieldSchemaPolicyTags) TableFieldSchemaPolicyTags {
		if v != nil {
			return *v
		}
		var ret TableFieldSchemaPolicyTags
		return ret
	}).(TableFieldSchemaPolicyTagsOutput)
}

// A list of category resource names. For example, "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is allowed.
func (o TableFieldSchemaPolicyTagsPtrOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TableFieldSchemaPolicyTags) []string {
		if v == nil {
			return nil
		}
		return v.Names
	}).(pulumi.StringArrayOutput)
}

type TableFieldSchemaPolicyTagsResponse struct {
	// A list of category resource names. For example, "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is allowed.
	Names []string `pulumi:"names"`
}

type TableFieldSchemaPolicyTagsResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaPolicyTagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaPolicyTagsResponse)(nil)).Elem()
}

func (o TableFieldSchemaPolicyTagsResponseOutput) ToTableFieldSchemaPolicyTagsResponseOutput() TableFieldSchemaPolicyTagsResponseOutput {
	return o
}

func (o TableFieldSchemaPolicyTagsResponseOutput) ToTableFieldSchemaPolicyTagsResponseOutputWithContext(ctx context.Context) TableFieldSchemaPolicyTagsResponseOutput {
	return o
}

// A list of category resource names. For example, "projects/1/location/eu/taxonomies/2/policyTags/3". At most 1 policy tag is allowed.
func (o TableFieldSchemaPolicyTagsResponseOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaPolicyTagsResponse) []string { return v.Names }).(pulumi.StringArrayOutput)
}

// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
type TableFieldSchemaRangeElementType struct {
	// The field element type of a RANGE
	Type *string `pulumi:"type"`
}

// TableFieldSchemaRangeElementTypeInput is an input type that accepts TableFieldSchemaRangeElementTypeArgs and TableFieldSchemaRangeElementTypeOutput values.
// You can construct a concrete instance of `TableFieldSchemaRangeElementTypeInput` via:
//
//	TableFieldSchemaRangeElementTypeArgs{...}
type TableFieldSchemaRangeElementTypeInput interface {
	pulumi.Input

	ToTableFieldSchemaRangeElementTypeOutput() TableFieldSchemaRangeElementTypeOutput
	ToTableFieldSchemaRangeElementTypeOutputWithContext(context.Context) TableFieldSchemaRangeElementTypeOutput
}

// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
type TableFieldSchemaRangeElementTypeArgs struct {
	// The field element type of a RANGE
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TableFieldSchemaRangeElementTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypeOutput() TableFieldSchemaRangeElementTypeOutput {
	return i.ToTableFieldSchemaRangeElementTypeOutputWithContext(context.Background())
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypeOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaRangeElementTypeOutput)
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return i.ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Background())
}

func (i TableFieldSchemaRangeElementTypeArgs) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaRangeElementTypeOutput).ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx)
}

// TableFieldSchemaRangeElementTypePtrInput is an input type that accepts TableFieldSchemaRangeElementTypeArgs, TableFieldSchemaRangeElementTypePtr and TableFieldSchemaRangeElementTypePtrOutput values.
// You can construct a concrete instance of `TableFieldSchemaRangeElementTypePtrInput` via:
//
//	        TableFieldSchemaRangeElementTypeArgs{...}
//
//	or:
//
//	        nil
type TableFieldSchemaRangeElementTypePtrInput interface {
	pulumi.Input

	ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput
	ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Context) TableFieldSchemaRangeElementTypePtrOutput
}

type tableFieldSchemaRangeElementTypePtrType TableFieldSchemaRangeElementTypeArgs

func TableFieldSchemaRangeElementTypePtr(v *TableFieldSchemaRangeElementTypeArgs) TableFieldSchemaRangeElementTypePtrInput {
	return (*tableFieldSchemaRangeElementTypePtrType)(v)
}

func (*tableFieldSchemaRangeElementTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (i *tableFieldSchemaRangeElementTypePtrType) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return i.ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Background())
}

func (i *tableFieldSchemaRangeElementTypePtrType) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableFieldSchemaRangeElementTypePtrOutput)
}

// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
type TableFieldSchemaRangeElementTypeOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaRangeElementTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypeOutput() TableFieldSchemaRangeElementTypeOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypeOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypeOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return o.ToTableFieldSchemaRangeElementTypePtrOutputWithContext(context.Background())
}

func (o TableFieldSchemaRangeElementTypeOutput) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableFieldSchemaRangeElementType) *TableFieldSchemaRangeElementType {
		return &v
	}).(TableFieldSchemaRangeElementTypePtrOutput)
}

// The field element type of a RANGE
func (o TableFieldSchemaRangeElementTypeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableFieldSchemaRangeElementType) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TableFieldSchemaRangeElementTypePtrOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaRangeElementTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableFieldSchemaRangeElementType)(nil)).Elem()
}

func (o TableFieldSchemaRangeElementTypePtrOutput) ToTableFieldSchemaRangeElementTypePtrOutput() TableFieldSchemaRangeElementTypePtrOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypePtrOutput) ToTableFieldSchemaRangeElementTypePtrOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypePtrOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypePtrOutput) Elem() TableFieldSchemaRangeElementTypeOutput {
	return o.ApplyT(func(v *TableFieldSchemaRangeElementType) TableFieldSchemaRangeElementType {
		if v != nil {
			return *v
		}
		var ret TableFieldSchemaRangeElementType
		return ret
	}).(TableFieldSchemaRangeElementTypeOutput)
}

// The field element type of a RANGE
func (o TableFieldSchemaRangeElementTypePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableFieldSchemaRangeElementType) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
type TableFieldSchemaRangeElementTypeResponse struct {
	// The field element type of a RANGE
	Type string `pulumi:"type"`
}

// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
type TableFieldSchemaRangeElementTypeResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaRangeElementTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaRangeElementTypeResponse)(nil)).Elem()
}

func (o TableFieldSchemaRangeElementTypeResponseOutput) ToTableFieldSchemaRangeElementTypeResponseOutput() TableFieldSchemaRangeElementTypeResponseOutput {
	return o
}

func (o TableFieldSchemaRangeElementTypeResponseOutput) ToTableFieldSchemaRangeElementTypeResponseOutputWithContext(ctx context.Context) TableFieldSchemaRangeElementTypeResponseOutput {
	return o
}

// The field element type of a RANGE
func (o TableFieldSchemaRangeElementTypeResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaRangeElementTypeResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TableFieldSchemaResponse struct {
	// [Optional] The categories attached to this field, used for field-level access control.
	Categories TableFieldSchemaCategoriesResponse `pulumi:"categories"`
	// Optional. Collation specification of the field. It only can be set on string type field.
	Collation string `pulumi:"collation"`
	// Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE '2020-01-01']
	DefaultValueExpression string `pulumi:"defaultValueExpression"`
	// [Optional] The field description. The maximum length is 1,024 characters.
	Description string `pulumi:"description"`
	// [Optional] Describes the nested schema fields if the type property is set to RECORD.
	Fields []TableFieldSchemaResponse `pulumi:"fields"`
	// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
	MaxLength string `pulumi:"maxLength"`
	// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
	Mode string `pulumi:"mode"`
	// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
	Name       string                             `pulumi:"name"`
	PolicyTags TableFieldSchemaPolicyTagsResponse `pulumi:"policyTags"`
	// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
	Precision string `pulumi:"precision"`
	// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
	RangeElementType TableFieldSchemaRangeElementTypeResponse `pulumi:"rangeElementType"`
	// Optional. Rounding Mode specification of the field. It only can be set on NUMERIC or BIGNUMERIC type fields.
	RoundingMode string `pulumi:"roundingMode"`
	// [Optional] See documentation for precision.
	Scale string `pulumi:"scale"`
	// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
	Type string `pulumi:"type"`
}

type TableFieldSchemaResponseOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableFieldSchemaResponse)(nil)).Elem()
}

func (o TableFieldSchemaResponseOutput) ToTableFieldSchemaResponseOutput() TableFieldSchemaResponseOutput {
	return o
}

func (o TableFieldSchemaResponseOutput) ToTableFieldSchemaResponseOutputWithContext(ctx context.Context) TableFieldSchemaResponseOutput {
	return o
}

// [Optional] The categories attached to this field, used for field-level access control.
func (o TableFieldSchemaResponseOutput) Categories() TableFieldSchemaCategoriesResponseOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) TableFieldSchemaCategoriesResponse { return v.Categories }).(TableFieldSchemaCategoriesResponseOutput)
}

// Optional. Collation specification of the field. It only can be set on string type field.
func (o TableFieldSchemaResponseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Collation }).(pulumi.StringOutput)
}

// Optional. A SQL expression to specify the default value for this field. It can only be set for top level fields (columns). You can use struct or array expression to specify default value for the entire struct or array. The valid SQL expressions are: - Literals for all data types, including STRUCT and ARRAY. - Following functions: - CURRENT_TIMESTAMP - CURRENT_TIME - CURRENT_DATE - CURRENT_DATETIME - GENERATE_UUID - RAND - SESSION_USER - ST_GEOGPOINT - Struct or array composed with the above allowed functions, for example, [CURRENT_DATE(), DATE '2020-01-01']
func (o TableFieldSchemaResponseOutput) DefaultValueExpression() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.DefaultValueExpression }).(pulumi.StringOutput)
}

// [Optional] The field description. The maximum length is 1,024 characters.
func (o TableFieldSchemaResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Description }).(pulumi.StringOutput)
}

// [Optional] Describes the nested schema fields if the type property is set to RECORD.
func (o TableFieldSchemaResponseOutput) Fields() TableFieldSchemaResponseArrayOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) []TableFieldSchemaResponse { return v.Fields }).(TableFieldSchemaResponseArrayOutput)
}

// [Optional] Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = "STRING", then max_length represents the maximum UTF-8 length of strings in this field. If type = "BYTES", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ "STRING" and ≠ "BYTES".
func (o TableFieldSchemaResponseOutput) MaxLength() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.MaxLength }).(pulumi.StringOutput)
}

// [Optional] The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.
func (o TableFieldSchemaResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// [Required] The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.
func (o TableFieldSchemaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Name }).(pulumi.StringOutput)
}

func (o TableFieldSchemaResponseOutput) PolicyTags() TableFieldSchemaPolicyTagsResponseOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) TableFieldSchemaPolicyTagsResponse { return v.PolicyTags }).(TableFieldSchemaPolicyTagsResponseOutput)
}

// [Optional] Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ "NUMERIC" and ≠ "BIGNUMERIC". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: - Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] - Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: - If type = "NUMERIC": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. - If type = "BIGNUMERIC": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): - If type = "NUMERIC": 1 ≤ precision ≤ 29. - If type = "BIGNUMERIC": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.
func (o TableFieldSchemaResponseOutput) Precision() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Precision }).(pulumi.StringOutput)
}

// Optional. The subtype of the RANGE, if the type of this field is RANGE. If the type is RANGE, this field is required. Possible values for the field element type of a RANGE include: - DATE - DATETIME - TIMESTAMP
func (o TableFieldSchemaResponseOutput) RangeElementType() TableFieldSchemaRangeElementTypeResponseOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) TableFieldSchemaRangeElementTypeResponse { return v.RangeElementType }).(TableFieldSchemaRangeElementTypeResponseOutput)
}

// Optional. Rounding Mode specification of the field. It only can be set on NUMERIC or BIGNUMERIC type fields.
func (o TableFieldSchemaResponseOutput) RoundingMode() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.RoundingMode }).(pulumi.StringOutput)
}

// [Optional] See documentation for precision.
func (o TableFieldSchemaResponseOutput) Scale() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Scale }).(pulumi.StringOutput)
}

// [Required] The field data type. Possible values include STRING, BYTES, INTEGER, INT64 (same as INTEGER), FLOAT, FLOAT64 (same as FLOAT), NUMERIC, BIGNUMERIC, BOOLEAN, BOOL (same as BOOLEAN), TIMESTAMP, DATE, TIME, DATETIME, INTERVAL, RECORD (where RECORD indicates that the field contains a nested schema) or STRUCT (same as RECORD).
func (o TableFieldSchemaResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TableFieldSchemaResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TableFieldSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (TableFieldSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableFieldSchemaResponse)(nil)).Elem()
}

func (o TableFieldSchemaResponseArrayOutput) ToTableFieldSchemaResponseArrayOutput() TableFieldSchemaResponseArrayOutput {
	return o
}

func (o TableFieldSchemaResponseArrayOutput) ToTableFieldSchemaResponseArrayOutputWithContext(ctx context.Context) TableFieldSchemaResponseArrayOutput {
	return o
}

func (o TableFieldSchemaResponseArrayOutput) Index(i pulumi.IntInput) TableFieldSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableFieldSchemaResponse {
		return vs[0].([]TableFieldSchemaResponse)[vs[1].(int)]
	}).(TableFieldSchemaResponseOutput)
}

type TableReference struct {
	// [Required] The ID of the dataset containing this table.
	DatasetId *string `pulumi:"datasetId"`
	// [Required] The ID of the project containing this table.
	Project *string `pulumi:"project"`
	// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	TableId *string `pulumi:"tableId"`
}

// TableReferenceInput is an input type that accepts TableReferenceArgs and TableReferenceOutput values.
// You can construct a concrete instance of `TableReferenceInput` via:
//
//	TableReferenceArgs{...}
type TableReferenceInput interface {
	pulumi.Input

	ToTableReferenceOutput() TableReferenceOutput
	ToTableReferenceOutputWithContext(context.Context) TableReferenceOutput
}

type TableReferenceArgs struct {
	// [Required] The ID of the dataset containing this table.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
	// [Required] The ID of the project containing this table.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	TableId pulumi.StringPtrInput `pulumi:"tableId"`
}

func (TableReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReference)(nil)).Elem()
}

func (i TableReferenceArgs) ToTableReferenceOutput() TableReferenceOutput {
	return i.ToTableReferenceOutputWithContext(context.Background())
}

func (i TableReferenceArgs) ToTableReferenceOutputWithContext(ctx context.Context) TableReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceOutput)
}

func (i TableReferenceArgs) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return i.ToTableReferencePtrOutputWithContext(context.Background())
}

func (i TableReferenceArgs) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceOutput).ToTableReferencePtrOutputWithContext(ctx)
}

// TableReferencePtrInput is an input type that accepts TableReferenceArgs, TableReferencePtr and TableReferencePtrOutput values.
// You can construct a concrete instance of `TableReferencePtrInput` via:
//
//	        TableReferenceArgs{...}
//
//	or:
//
//	        nil
type TableReferencePtrInput interface {
	pulumi.Input

	ToTableReferencePtrOutput() TableReferencePtrOutput
	ToTableReferencePtrOutputWithContext(context.Context) TableReferencePtrOutput
}

type tableReferencePtrType TableReferenceArgs

func TableReferencePtr(v *TableReferenceArgs) TableReferencePtrInput {
	return (*tableReferencePtrType)(v)
}

func (*tableReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReference)(nil)).Elem()
}

func (i *tableReferencePtrType) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return i.ToTableReferencePtrOutputWithContext(context.Background())
}

func (i *tableReferencePtrType) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferencePtrOutput)
}

// TableReferenceArrayInput is an input type that accepts TableReferenceArray and TableReferenceArrayOutput values.
// You can construct a concrete instance of `TableReferenceArrayInput` via:
//
//	TableReferenceArray{ TableReferenceArgs{...} }
type TableReferenceArrayInput interface {
	pulumi.Input

	ToTableReferenceArrayOutput() TableReferenceArrayOutput
	ToTableReferenceArrayOutputWithContext(context.Context) TableReferenceArrayOutput
}

type TableReferenceArray []TableReferenceInput

func (TableReferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReference)(nil)).Elem()
}

func (i TableReferenceArray) ToTableReferenceArrayOutput() TableReferenceArrayOutput {
	return i.ToTableReferenceArrayOutputWithContext(context.Background())
}

func (i TableReferenceArray) ToTableReferenceArrayOutputWithContext(ctx context.Context) TableReferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableReferenceArrayOutput)
}

type TableReferenceOutput struct{ *pulumi.OutputState }

func (TableReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReference)(nil)).Elem()
}

func (o TableReferenceOutput) ToTableReferenceOutput() TableReferenceOutput {
	return o
}

func (o TableReferenceOutput) ToTableReferenceOutputWithContext(ctx context.Context) TableReferenceOutput {
	return o
}

func (o TableReferenceOutput) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return o.ToTableReferencePtrOutputWithContext(context.Background())
}

func (o TableReferenceOutput) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableReference) *TableReference {
		return &v
	}).(TableReferencePtrOutput)
}

// [Required] The ID of the dataset containing this table.
func (o TableReferenceOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReference) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this table.
func (o TableReferenceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReference) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o TableReferenceOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TableReference) *string { return v.TableId }).(pulumi.StringPtrOutput)
}

type TableReferencePtrOutput struct{ *pulumi.OutputState }

func (TableReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableReference)(nil)).Elem()
}

func (o TableReferencePtrOutput) ToTableReferencePtrOutput() TableReferencePtrOutput {
	return o
}

func (o TableReferencePtrOutput) ToTableReferencePtrOutputWithContext(ctx context.Context) TableReferencePtrOutput {
	return o
}

func (o TableReferencePtrOutput) Elem() TableReferenceOutput {
	return o.ApplyT(func(v *TableReference) TableReference {
		if v != nil {
			return *v
		}
		var ret TableReference
		return ret
	}).(TableReferenceOutput)
}

// [Required] The ID of the dataset containing this table.
func (o TableReferencePtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the project containing this table.
func (o TableReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o TableReferencePtrOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TableReference) *string {
		if v == nil {
			return nil
		}
		return v.TableId
	}).(pulumi.StringPtrOutput)
}

type TableReferenceArrayOutput struct{ *pulumi.OutputState }

func (TableReferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReference)(nil)).Elem()
}

func (o TableReferenceArrayOutput) ToTableReferenceArrayOutput() TableReferenceArrayOutput {
	return o
}

func (o TableReferenceArrayOutput) ToTableReferenceArrayOutputWithContext(ctx context.Context) TableReferenceArrayOutput {
	return o
}

func (o TableReferenceArrayOutput) Index(i pulumi.IntInput) TableReferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReference {
		return vs[0].([]TableReference)[vs[1].(int)]
	}).(TableReferenceOutput)
}

type TableReferenceResponse struct {
	// [Required] The ID of the dataset containing this table.
	DatasetId string `pulumi:"datasetId"`
	// [Required] The ID of the project containing this table.
	Project string `pulumi:"project"`
	// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
	TableId string `pulumi:"tableId"`
}

type TableReferenceResponseOutput struct{ *pulumi.OutputState }

func (TableReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableReferenceResponse)(nil)).Elem()
}

func (o TableReferenceResponseOutput) ToTableReferenceResponseOutput() TableReferenceResponseOutput {
	return o
}

func (o TableReferenceResponseOutput) ToTableReferenceResponseOutputWithContext(ctx context.Context) TableReferenceResponseOutput {
	return o
}

// [Required] The ID of the dataset containing this table.
func (o TableReferenceResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v TableReferenceResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// [Required] The ID of the project containing this table.
func (o TableReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v TableReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// [Required] The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.
func (o TableReferenceResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v TableReferenceResponse) string { return v.TableId }).(pulumi.StringOutput)
}

type TableReferenceResponseArrayOutput struct{ *pulumi.OutputState }

func (TableReferenceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TableReferenceResponse)(nil)).Elem()
}

func (o TableReferenceResponseArrayOutput) ToTableReferenceResponseArrayOutput() TableReferenceResponseArrayOutput {
	return o
}

func (o TableReferenceResponseArrayOutput) ToTableReferenceResponseArrayOutputWithContext(ctx context.Context) TableReferenceResponseArrayOutput {
	return o
}

func (o TableReferenceResponseArrayOutput) Index(i pulumi.IntInput) TableReferenceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TableReferenceResponse {
		return vs[0].([]TableReferenceResponse)[vs[1].(int)]
	}).(TableReferenceResponseOutput)
}

type TableSchema struct {
	// Describes the fields in a table.
	Fields []TableFieldSchema `pulumi:"fields"`
}

// TableSchemaInput is an input type that accepts TableSchemaArgs and TableSchemaOutput values.
// You can construct a concrete instance of `TableSchemaInput` via:
//
//	TableSchemaArgs{...}
type TableSchemaInput interface {
	pulumi.Input

	ToTableSchemaOutput() TableSchemaOutput
	ToTableSchemaOutputWithContext(context.Context) TableSchemaOutput
}

type TableSchemaArgs struct {
	// Describes the fields in a table.
	Fields TableFieldSchemaArrayInput `pulumi:"fields"`
}

func (TableSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (i TableSchemaArgs) ToTableSchemaOutput() TableSchemaOutput {
	return i.ToTableSchemaOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput)
}

func (i TableSchemaArgs) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i TableSchemaArgs) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaOutput).ToTableSchemaPtrOutputWithContext(ctx)
}

// TableSchemaPtrInput is an input type that accepts TableSchemaArgs, TableSchemaPtr and TableSchemaPtrOutput values.
// You can construct a concrete instance of `TableSchemaPtrInput` via:
//
//	        TableSchemaArgs{...}
//
//	or:
//
//	        nil
type TableSchemaPtrInput interface {
	pulumi.Input

	ToTableSchemaPtrOutput() TableSchemaPtrOutput
	ToTableSchemaPtrOutputWithContext(context.Context) TableSchemaPtrOutput
}

type tableSchemaPtrType TableSchemaArgs

func TableSchemaPtr(v *TableSchemaArgs) TableSchemaPtrInput {
	return (*tableSchemaPtrType)(v)
}

func (*tableSchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return i.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (i *tableSchemaPtrType) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TableSchemaPtrOutput)
}

type TableSchemaOutput struct{ *pulumi.OutputState }

func (TableSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchema)(nil)).Elem()
}

func (o TableSchemaOutput) ToTableSchemaOutput() TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaOutputWithContext(ctx context.Context) TableSchemaOutput {
	return o
}

func (o TableSchemaOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o.ToTableSchemaPtrOutputWithContext(context.Background())
}

func (o TableSchemaOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TableSchema) *TableSchema {
		return &v
	}).(TableSchemaPtrOutput)
}

// Describes the fields in a table.
func (o TableSchemaOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v TableSchema) []TableFieldSchema { return v.Fields }).(TableFieldSchemaArrayOutput)
}

type TableSchemaPtrOutput struct{ *pulumi.OutputState }

func (TableSchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TableSchema)(nil)).Elem()
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutput() TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) ToTableSchemaPtrOutputWithContext(ctx context.Context) TableSchemaPtrOutput {
	return o
}

func (o TableSchemaPtrOutput) Elem() TableSchemaOutput {
	return o.ApplyT(func(v *TableSchema) TableSchema {
		if v != nil {
			return *v
		}
		var ret TableSchema
		return ret
	}).(TableSchemaOutput)
}

// Describes the fields in a table.
func (o TableSchemaPtrOutput) Fields() TableFieldSchemaArrayOutput {
	return o.ApplyT(func(v *TableSchema) []TableFieldSchema {
		if v == nil {
			return nil
		}
		return v.Fields
	}).(TableFieldSchemaArrayOutput)
}

type TableSchemaResponse struct {
	// Describes the fields in a table.
	Fields []TableFieldSchemaResponse `pulumi:"fields"`
}

type TableSchemaResponseOutput struct{ *pulumi.OutputState }

func (TableSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TableSchemaResponse)(nil)).Elem()
}

func (o TableSchemaResponseOutput) ToTableSchemaResponseOutput() TableSchemaResponseOutput {
	return o
}

func (o TableSchemaResponseOutput) ToTableSchemaResponseOutputWithContext(ctx context.Context) TableSchemaResponseOutput {
	return o
}

// Describes the fields in a table.
func (o TableSchemaResponseOutput) Fields() TableFieldSchemaResponseArrayOutput {
	return o.ApplyT(func(v TableSchemaResponse) []TableFieldSchemaResponse { return v.Fields }).(TableFieldSchemaResponseArrayOutput)
}

type TimePartitioning struct {
	// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
	ExpirationMs *string `pulumi:"expirationMs"`
	// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	Field                  *string `pulumi:"field"`
	RequirePartitionFilter *bool   `pulumi:"requirePartitionFilter"`
	// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
	Type *string `pulumi:"type"`
}

// TimePartitioningInput is an input type that accepts TimePartitioningArgs and TimePartitioningOutput values.
// You can construct a concrete instance of `TimePartitioningInput` via:
//
//	TimePartitioningArgs{...}
type TimePartitioningInput interface {
	pulumi.Input

	ToTimePartitioningOutput() TimePartitioningOutput
	ToTimePartitioningOutputWithContext(context.Context) TimePartitioningOutput
}

type TimePartitioningArgs struct {
	// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
	ExpirationMs pulumi.StringPtrInput `pulumi:"expirationMs"`
	// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	Field                  pulumi.StringPtrInput `pulumi:"field"`
	RequirePartitionFilter pulumi.BoolPtrInput   `pulumi:"requirePartitionFilter"`
	// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TimePartitioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (i TimePartitioningArgs) ToTimePartitioningOutput() TimePartitioningOutput {
	return i.ToTimePartitioningOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput)
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i TimePartitioningArgs) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningOutput).ToTimePartitioningPtrOutputWithContext(ctx)
}

// TimePartitioningPtrInput is an input type that accepts TimePartitioningArgs, TimePartitioningPtr and TimePartitioningPtrOutput values.
// You can construct a concrete instance of `TimePartitioningPtrInput` via:
//
//	        TimePartitioningArgs{...}
//
//	or:
//
//	        nil
type TimePartitioningPtrInput interface {
	pulumi.Input

	ToTimePartitioningPtrOutput() TimePartitioningPtrOutput
	ToTimePartitioningPtrOutputWithContext(context.Context) TimePartitioningPtrOutput
}

type timePartitioningPtrType TimePartitioningArgs

func TimePartitioningPtr(v *TimePartitioningArgs) TimePartitioningPtrInput {
	return (*timePartitioningPtrType)(v)
}

func (*timePartitioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return i.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (i *timePartitioningPtrType) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimePartitioningPtrOutput)
}

type TimePartitioningOutput struct{ *pulumi.OutputState }

func (TimePartitioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningOutput) ToTimePartitioningOutput() TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningOutputWithContext(ctx context.Context) TimePartitioningOutput {
	return o
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o.ToTimePartitioningPtrOutputWithContext(context.Background())
}

func (o TimePartitioningOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TimePartitioning) *TimePartitioning {
		return &v
	}).(TimePartitioningPtrOutput)
}

// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
func (o TimePartitioningOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.ExpirationMs }).(pulumi.StringPtrOutput)
}

// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
func (o TimePartitioningOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.Field }).(pulumi.StringPtrOutput)
}

func (o TimePartitioningOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *bool { return v.RequirePartitionFilter }).(pulumi.BoolPtrOutput)
}

// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
func (o TimePartitioningOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimePartitioning) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TimePartitioningPtrOutput struct{ *pulumi.OutputState }

func (TimePartitioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimePartitioning)(nil)).Elem()
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutput() TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) ToTimePartitioningPtrOutputWithContext(ctx context.Context) TimePartitioningPtrOutput {
	return o
}

func (o TimePartitioningPtrOutput) Elem() TimePartitioningOutput {
	return o.ApplyT(func(v *TimePartitioning) TimePartitioning {
		if v != nil {
			return *v
		}
		var ret TimePartitioning
		return ret
	}).(TimePartitioningOutput)
}

// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
func (o TimePartitioningPtrOutput) ExpirationMs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationMs
	}).(pulumi.StringPtrOutput)
}

// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
func (o TimePartitioningPtrOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Field
	}).(pulumi.StringPtrOutput)
}

func (o TimePartitioningPtrOutput) RequirePartitionFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *bool {
		if v == nil {
			return nil
		}
		return v.RequirePartitionFilter
	}).(pulumi.BoolPtrOutput)
}

// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
func (o TimePartitioningPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TimePartitioning) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

type TimePartitioningResponse struct {
	// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
	ExpirationMs string `pulumi:"expirationMs"`
	// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
	Field                  string `pulumi:"field"`
	RequirePartitionFilter bool   `pulumi:"requirePartitionFilter"`
	// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
	Type string `pulumi:"type"`
}

type TimePartitioningResponseOutput struct{ *pulumi.OutputState }

func (TimePartitioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimePartitioningResponse)(nil)).Elem()
}

func (o TimePartitioningResponseOutput) ToTimePartitioningResponseOutput() TimePartitioningResponseOutput {
	return o
}

func (o TimePartitioningResponseOutput) ToTimePartitioningResponseOutputWithContext(ctx context.Context) TimePartitioningResponseOutput {
	return o
}

// [Optional] Number of milliseconds for which to keep the storage for partitions in the table. The storage in a partition will have an expiration time of its partition time plus this value.
func (o TimePartitioningResponseOutput) ExpirationMs() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.ExpirationMs }).(pulumi.StringOutput)
}

// [Beta] [Optional] If not set, the table is partitioned by pseudo column, referenced via either '_PARTITIONTIME' as TIMESTAMP type, or '_PARTITIONDATE' as DATE type. If field is specified, the table is instead partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED.
func (o TimePartitioningResponseOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.Field }).(pulumi.StringOutput)
}

func (o TimePartitioningResponseOutput) RequirePartitionFilter() pulumi.BoolOutput {
	return o.ApplyT(func(v TimePartitioningResponse) bool { return v.RequirePartitionFilter }).(pulumi.BoolOutput)
}

// [Required] The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively. When the type is not specified, the default behavior is DAY.
func (o TimePartitioningResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TimePartitioningResponse) string { return v.Type }).(pulumi.StringOutput)
}

type TransactionInfoResponse struct {
	// // [Alpha] Id of the transaction.
	TransactionId string `pulumi:"transactionId"`
}

type TransactionInfoResponseOutput struct{ *pulumi.OutputState }

func (TransactionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransactionInfoResponse)(nil)).Elem()
}

func (o TransactionInfoResponseOutput) ToTransactionInfoResponseOutput() TransactionInfoResponseOutput {
	return o
}

func (o TransactionInfoResponseOutput) ToTransactionInfoResponseOutputWithContext(ctx context.Context) TransactionInfoResponseOutput {
	return o
}

// // [Alpha] Id of the transaction.
func (o TransactionInfoResponseOutput) TransactionId() pulumi.StringOutput {
	return o.ApplyT(func(v TransactionInfoResponse) string { return v.TransactionId }).(pulumi.StringOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResource struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode *string `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri *string `pulumi:"resourceUri"`
}

// UserDefinedFunctionResourceInput is an input type that accepts UserDefinedFunctionResourceArgs and UserDefinedFunctionResourceOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceInput` via:
//
//	UserDefinedFunctionResourceArgs{...}
type UserDefinedFunctionResourceInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput
	ToUserDefinedFunctionResourceOutputWithContext(context.Context) UserDefinedFunctionResourceOutput
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceArgs struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode pulumi.StringPtrInput `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri pulumi.StringPtrInput `pulumi:"resourceUri"`
}

func (UserDefinedFunctionResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResource)(nil)).Elem()
}

func (i UserDefinedFunctionResourceArgs) ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput {
	return i.ToUserDefinedFunctionResourceOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceArgs) ToUserDefinedFunctionResourceOutputWithContext(ctx context.Context) UserDefinedFunctionResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceOutput)
}

// UserDefinedFunctionResourceArrayInput is an input type that accepts UserDefinedFunctionResourceArray and UserDefinedFunctionResourceArrayOutput values.
// You can construct a concrete instance of `UserDefinedFunctionResourceArrayInput` via:
//
//	UserDefinedFunctionResourceArray{ UserDefinedFunctionResourceArgs{...} }
type UserDefinedFunctionResourceArrayInput interface {
	pulumi.Input

	ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput
	ToUserDefinedFunctionResourceArrayOutputWithContext(context.Context) UserDefinedFunctionResourceArrayOutput
}

type UserDefinedFunctionResourceArray []UserDefinedFunctionResourceInput

func (UserDefinedFunctionResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResource)(nil)).Elem()
}

func (i UserDefinedFunctionResourceArray) ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput {
	return i.ToUserDefinedFunctionResourceArrayOutputWithContext(context.Background())
}

func (i UserDefinedFunctionResourceArray) ToUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserDefinedFunctionResourceArrayOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResource)(nil)).Elem()
}

func (o UserDefinedFunctionResourceOutput) ToUserDefinedFunctionResourceOutput() UserDefinedFunctionResourceOutput {
	return o
}

func (o UserDefinedFunctionResourceOutput) ToUserDefinedFunctionResourceOutputWithContext(ctx context.Context) UserDefinedFunctionResourceOutput {
	return o
}

// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
func (o UserDefinedFunctionResourceOutput) InlineCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserDefinedFunctionResource) *string { return v.InlineCode }).(pulumi.StringPtrOutput)
}

// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
func (o UserDefinedFunctionResourceOutput) ResourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserDefinedFunctionResource) *string { return v.ResourceUri }).(pulumi.StringPtrOutput)
}

type UserDefinedFunctionResourceArrayOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResource)(nil)).Elem()
}

func (o UserDefinedFunctionResourceArrayOutput) ToUserDefinedFunctionResourceArrayOutput() UserDefinedFunctionResourceArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceArrayOutput) ToUserDefinedFunctionResourceArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceArrayOutput) Index(i pulumi.IntInput) UserDefinedFunctionResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDefinedFunctionResource {
		return vs[0].([]UserDefinedFunctionResource)[vs[1].(int)]
	}).(UserDefinedFunctionResourceOutput)
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceResponse struct {
	// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
	InlineCode string `pulumi:"inlineCode"`
	// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
	ResourceUri string `pulumi:"resourceUri"`
}

// This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of Standard SQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions
type UserDefinedFunctionResourceResponseOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserDefinedFunctionResourceResponse)(nil)).Elem()
}

func (o UserDefinedFunctionResourceResponseOutput) ToUserDefinedFunctionResourceResponseOutput() UserDefinedFunctionResourceResponseOutput {
	return o
}

func (o UserDefinedFunctionResourceResponseOutput) ToUserDefinedFunctionResourceResponseOutputWithContext(ctx context.Context) UserDefinedFunctionResourceResponseOutput {
	return o
}

// [Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.
func (o UserDefinedFunctionResourceResponseOutput) InlineCode() pulumi.StringOutput {
	return o.ApplyT(func(v UserDefinedFunctionResourceResponse) string { return v.InlineCode }).(pulumi.StringOutput)
}

// [Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).
func (o UserDefinedFunctionResourceResponseOutput) ResourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v UserDefinedFunctionResourceResponse) string { return v.ResourceUri }).(pulumi.StringOutput)
}

type UserDefinedFunctionResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (UserDefinedFunctionResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserDefinedFunctionResourceResponse)(nil)).Elem()
}

func (o UserDefinedFunctionResourceResponseArrayOutput) ToUserDefinedFunctionResourceResponseArrayOutput() UserDefinedFunctionResourceResponseArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceResponseArrayOutput) ToUserDefinedFunctionResourceResponseArrayOutputWithContext(ctx context.Context) UserDefinedFunctionResourceResponseArrayOutput {
	return o
}

func (o UserDefinedFunctionResourceResponseArrayOutput) Index(i pulumi.IntInput) UserDefinedFunctionResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserDefinedFunctionResourceResponse {
		return vs[0].([]UserDefinedFunctionResourceResponse)[vs[1].(int)]
	}).(UserDefinedFunctionResourceResponseOutput)
}

type ViewDefinition struct {
	// [Required] A query that BigQuery executes when the view is referenced.
	Query *string `pulumi:"query"`
	// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
	UseExplicitColumnNames *bool `pulumi:"useExplicitColumnNames"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
	UseLegacySql *bool `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResource `pulumi:"userDefinedFunctionResources"`
}

// ViewDefinitionInput is an input type that accepts ViewDefinitionArgs and ViewDefinitionOutput values.
// You can construct a concrete instance of `ViewDefinitionInput` via:
//
//	ViewDefinitionArgs{...}
type ViewDefinitionInput interface {
	pulumi.Input

	ToViewDefinitionOutput() ViewDefinitionOutput
	ToViewDefinitionOutputWithContext(context.Context) ViewDefinitionOutput
}

type ViewDefinitionArgs struct {
	// [Required] A query that BigQuery executes when the view is referenced.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
	UseExplicitColumnNames pulumi.BoolPtrInput `pulumi:"useExplicitColumnNames"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
	UseLegacySql pulumi.BoolPtrInput `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources UserDefinedFunctionResourceArrayInput `pulumi:"userDefinedFunctionResources"`
}

func (ViewDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinition)(nil)).Elem()
}

func (i ViewDefinitionArgs) ToViewDefinitionOutput() ViewDefinitionOutput {
	return i.ToViewDefinitionOutputWithContext(context.Background())
}

func (i ViewDefinitionArgs) ToViewDefinitionOutputWithContext(ctx context.Context) ViewDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionOutput)
}

func (i ViewDefinitionArgs) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return i.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (i ViewDefinitionArgs) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionOutput).ToViewDefinitionPtrOutputWithContext(ctx)
}

// ViewDefinitionPtrInput is an input type that accepts ViewDefinitionArgs, ViewDefinitionPtr and ViewDefinitionPtrOutput values.
// You can construct a concrete instance of `ViewDefinitionPtrInput` via:
//
//	        ViewDefinitionArgs{...}
//
//	or:
//
//	        nil
type ViewDefinitionPtrInput interface {
	pulumi.Input

	ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput
	ToViewDefinitionPtrOutputWithContext(context.Context) ViewDefinitionPtrOutput
}

type viewDefinitionPtrType ViewDefinitionArgs

func ViewDefinitionPtr(v *ViewDefinitionArgs) ViewDefinitionPtrInput {
	return (*viewDefinitionPtrType)(v)
}

func (*viewDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewDefinition)(nil)).Elem()
}

func (i *viewDefinitionPtrType) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return i.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (i *viewDefinitionPtrType) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ViewDefinitionPtrOutput)
}

type ViewDefinitionOutput struct{ *pulumi.OutputState }

func (ViewDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinition)(nil)).Elem()
}

func (o ViewDefinitionOutput) ToViewDefinitionOutput() ViewDefinitionOutput {
	return o
}

func (o ViewDefinitionOutput) ToViewDefinitionOutputWithContext(ctx context.Context) ViewDefinitionOutput {
	return o
}

func (o ViewDefinitionOutput) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return o.ToViewDefinitionPtrOutputWithContext(context.Background())
}

func (o ViewDefinitionOutput) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ViewDefinition) *ViewDefinition {
		return &v
	}).(ViewDefinitionPtrOutput)
}

// [Required] A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
func (o ViewDefinitionOutput) UseExplicitColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *bool { return v.UseExplicitColumnNames }).(pulumi.BoolPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
func (o ViewDefinitionOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ViewDefinition) *bool { return v.UseLegacySql }).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v ViewDefinition) []UserDefinedFunctionResource { return v.UserDefinedFunctionResources }).(UserDefinedFunctionResourceArrayOutput)
}

type ViewDefinitionPtrOutput struct{ *pulumi.OutputState }

func (ViewDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ViewDefinition)(nil)).Elem()
}

func (o ViewDefinitionPtrOutput) ToViewDefinitionPtrOutput() ViewDefinitionPtrOutput {
	return o
}

func (o ViewDefinitionPtrOutput) ToViewDefinitionPtrOutputWithContext(ctx context.Context) ViewDefinitionPtrOutput {
	return o
}

func (o ViewDefinitionPtrOutput) Elem() ViewDefinitionOutput {
	return o.ApplyT(func(v *ViewDefinition) ViewDefinition {
		if v != nil {
			return *v
		}
		var ret ViewDefinition
		return ret
	}).(ViewDefinitionOutput)
}

// [Required] A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Query
	}).(pulumi.StringPtrOutput)
}

// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
func (o ViewDefinitionPtrOutput) UseExplicitColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.UseExplicitColumnNames
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
func (o ViewDefinitionPtrOutput) UseLegacySql() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ViewDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.UseLegacySql
	}).(pulumi.BoolPtrOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionPtrOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceArrayOutput {
	return o.ApplyT(func(v *ViewDefinition) []UserDefinedFunctionResource {
		if v == nil {
			return nil
		}
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceArrayOutput)
}

type ViewDefinitionResponse struct {
	// [Required] A query that BigQuery executes when the view is referenced.
	Query string `pulumi:"query"`
	// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
	UseExplicitColumnNames bool `pulumi:"useExplicitColumnNames"`
	// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
	UseLegacySql bool `pulumi:"useLegacySql"`
	// Describes user-defined function resources used in the query.
	UserDefinedFunctionResources []UserDefinedFunctionResourceResponse `pulumi:"userDefinedFunctionResources"`
}

type ViewDefinitionResponseOutput struct{ *pulumi.OutputState }

func (ViewDefinitionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ViewDefinitionResponse)(nil)).Elem()
}

func (o ViewDefinitionResponseOutput) ToViewDefinitionResponseOutput() ViewDefinitionResponseOutput {
	return o
}

func (o ViewDefinitionResponseOutput) ToViewDefinitionResponseOutputWithContext(ctx context.Context) ViewDefinitionResponseOutput {
	return o
}

// [Required] A query that BigQuery executes when the view is referenced.
func (o ViewDefinitionResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) string { return v.Query }).(pulumi.StringOutput)
}

// True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set using BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/
func (o ViewDefinitionResponseOutput) UseExplicitColumnNames() pulumi.BoolOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) bool { return v.UseExplicitColumnNames }).(pulumi.BoolOutput)
}

// Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value.
func (o ViewDefinitionResponseOutput) UseLegacySql() pulumi.BoolOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) bool { return v.UseLegacySql }).(pulumi.BoolOutput)
}

// Describes user-defined function resources used in the query.
func (o ViewDefinitionResponseOutput) UserDefinedFunctionResources() UserDefinedFunctionResourceResponseArrayOutput {
	return o.ApplyT(func(v ViewDefinitionResponse) []UserDefinedFunctionResourceResponse {
		return v.UserDefinedFunctionResources
	}).(UserDefinedFunctionResourceResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentInput)(nil)).Elem(), ArgumentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArgumentArrayInput)(nil)).Elem(), ArgumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroOptionsInput)(nil)).Elem(), AvroOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroOptionsPtrInput)(nil)).Elem(), AvroOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigLakeConfigurationInput)(nil)).Elem(), BigLakeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigLakeConfigurationPtrInput)(nil)).Elem(), BigLakeConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnInput)(nil)).Elem(), BigtableColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnArrayInput)(nil)).Elem(), BigtableColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnFamilyInput)(nil)).Elem(), BigtableColumnFamilyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableColumnFamilyArrayInput)(nil)).Elem(), BigtableColumnFamilyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableOptionsInput)(nil)).Elem(), BigtableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigtableOptionsPtrInput)(nil)).Elem(), BigtableOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlIterationResultInput)(nil)).Elem(), BqmlIterationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlIterationResultArrayInput)(nil)).Elem(), BqmlIterationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunInput)(nil)).Elem(), BqmlTrainingRunArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunArrayInput)(nil)).Elem(), BqmlTrainingRunArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunTrainingOptionsInput)(nil)).Elem(), BqmlTrainingRunTrainingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BqmlTrainingRunTrainingOptionsPtrInput)(nil)).Elem(), BqmlTrainingRunTrainingOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusteringInput)(nil)).Elem(), ClusteringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusteringPtrInput)(nil)).Elem(), ClusteringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPropertyInput)(nil)).Elem(), ConnectionPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionPropertyArrayInput)(nil)).Elem(), ConnectionPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsvOptionsInput)(nil)).Elem(), CsvOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CsvOptionsPtrInput)(nil)).Elem(), CsvOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessEntryInput)(nil)).Elem(), DatasetAccessEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessEntryPtrInput)(nil)).Elem(), DatasetAccessEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessItemInput)(nil)).Elem(), DatasetAccessItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetAccessItemArrayInput)(nil)).Elem(), DatasetAccessItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetReferenceInput)(nil)).Elem(), DatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetReferencePtrInput)(nil)).Elem(), DatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetTagsItemInput)(nil)).Elem(), DatasetTagsItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetTagsItemArrayInput)(nil)).Elem(), DatasetTagsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTablePropertiesInput)(nil)).Elem(), DestinationTablePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationTablePropertiesPtrInput)(nil)).Elem(), DestinationTablePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigurationInput)(nil)).Elem(), EncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionConfigurationPtrInput)(nil)).Elem(), EncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDataConfigurationInput)(nil)).Elem(), ExternalDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDataConfigurationPtrInput)(nil)).Elem(), ExternalDataConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDatasetReferenceInput)(nil)).Elem(), ExternalDatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExternalDatasetReferencePtrInput)(nil)).Elem(), ExternalDatasetReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleSheetsOptionsInput)(nil)).Elem(), GoogleSheetsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleSheetsOptionsPtrInput)(nil)).Elem(), GoogleSheetsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HivePartitioningOptionsInput)(nil)).Elem(), HivePartitioningOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HivePartitioningOptionsPtrInput)(nil)).Elem(), HivePartitioningOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationInput)(nil)).Elem(), JobConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationPtrInput)(nil)).Elem(), JobConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationExtractInput)(nil)).Elem(), JobConfigurationExtractArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationExtractPtrInput)(nil)).Elem(), JobConfigurationExtractArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationLoadInput)(nil)).Elem(), JobConfigurationLoadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationLoadPtrInput)(nil)).Elem(), JobConfigurationLoadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationQueryInput)(nil)).Elem(), JobConfigurationQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationQueryPtrInput)(nil)).Elem(), JobConfigurationQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationTableCopyInput)(nil)).Elem(), JobConfigurationTableCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigurationTableCopyPtrInput)(nil)).Elem(), JobConfigurationTableCopyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobReferenceInput)(nil)).Elem(), JobReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobReferencePtrInput)(nil)).Elem(), JobReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonOptionsInput)(nil)).Elem(), JsonOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonOptionsPtrInput)(nil)).Elem(), JsonOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewDefinitionInput)(nil)).Elem(), MaterializedViewDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaterializedViewDefinitionPtrInput)(nil)).Elem(), MaterializedViewDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionInput)(nil)).Elem(), ModelDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionPtrInput)(nil)).Elem(), ModelDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionModelOptionsInput)(nil)).Elem(), ModelDefinitionModelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelDefinitionModelOptionsPtrInput)(nil)).Elem(), ModelDefinitionModelOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelReferenceInput)(nil)).Elem(), ModelReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ModelReferencePtrInput)(nil)).Elem(), ModelReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParquetOptionsInput)(nil)).Elem(), ParquetOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParquetOptionsPtrInput)(nil)).Elem(), ParquetOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterInput)(nil)).Elem(), QueryParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterArrayInput)(nil)).Elem(), QueryParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypeInput)(nil)).Elem(), QueryParameterTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypePtrInput)(nil)).Elem(), QueryParameterTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypeStructTypesItemInput)(nil)).Elem(), QueryParameterTypeStructTypesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterTypeStructTypesItemArrayInput)(nil)).Elem(), QueryParameterTypeStructTypesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterValueInput)(nil)).Elem(), QueryParameterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterValuePtrInput)(nil)).Elem(), QueryParameterValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryParameterValueArrayInput)(nil)).Elem(), QueryParameterValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningInput)(nil)).Elem(), RangePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningPtrInput)(nil)).Elem(), RangePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningRangeInput)(nil)).Elem(), RangePartitioningRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RangePartitioningRangePtrInput)(nil)).Elem(), RangePartitioningRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteFunctionOptionsInput)(nil)).Elem(), RemoteFunctionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteFunctionOptionsPtrInput)(nil)).Elem(), RemoteFunctionOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineReferenceInput)(nil)).Elem(), RoutineReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutineReferencePtrInput)(nil)).Elem(), RoutineReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkOptionsInput)(nil)).Elem(), SparkOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkOptionsPtrInput)(nil)).Elem(), SparkOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlDataTypeInput)(nil)).Elem(), StandardSqlDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlDataTypePtrInput)(nil)).Elem(), StandardSqlDataTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlFieldInput)(nil)).Elem(), StandardSqlFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlFieldArrayInput)(nil)).Elem(), StandardSqlFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlStructTypeInput)(nil)).Elem(), StandardSqlStructTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlStructTypePtrInput)(nil)).Elem(), StandardSqlStructTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlTableTypeInput)(nil)).Elem(), StandardSqlTableTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StandardSqlTableTypePtrInput)(nil)).Elem(), StandardSqlTableTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsInput)(nil)).Elem(), TableConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsPtrInput)(nil)).Elem(), TableConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemInput)(nil)).Elem(), TableConstraintsForeignKeysItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemArrayInput)(nil)).Elem(), TableConstraintsForeignKeysItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItemInput)(nil)).Elem(), TableConstraintsForeignKeysItemColumnReferencesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemColumnReferencesItemArrayInput)(nil)).Elem(), TableConstraintsForeignKeysItemColumnReferencesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTableInput)(nil)).Elem(), TableConstraintsForeignKeysItemReferencedTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsForeignKeysItemReferencedTablePtrInput)(nil)).Elem(), TableConstraintsForeignKeysItemReferencedTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsPrimaryKeyInput)(nil)).Elem(), TableConstraintsPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableConstraintsPrimaryKeyPtrInput)(nil)).Elem(), TableConstraintsPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaInput)(nil)).Elem(), TableFieldSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaArrayInput)(nil)).Elem(), TableFieldSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaCategoriesInput)(nil)).Elem(), TableFieldSchemaCategoriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaCategoriesPtrInput)(nil)).Elem(), TableFieldSchemaCategoriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaPolicyTagsInput)(nil)).Elem(), TableFieldSchemaPolicyTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaPolicyTagsPtrInput)(nil)).Elem(), TableFieldSchemaPolicyTagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaRangeElementTypeInput)(nil)).Elem(), TableFieldSchemaRangeElementTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableFieldSchemaRangeElementTypePtrInput)(nil)).Elem(), TableFieldSchemaRangeElementTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReferenceInput)(nil)).Elem(), TableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReferencePtrInput)(nil)).Elem(), TableReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableReferenceArrayInput)(nil)).Elem(), TableReferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaInput)(nil)).Elem(), TableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TableSchemaPtrInput)(nil)).Elem(), TableSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimePartitioningInput)(nil)).Elem(), TimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimePartitioningPtrInput)(nil)).Elem(), TimePartitioningArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDefinedFunctionResourceInput)(nil)).Elem(), UserDefinedFunctionResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserDefinedFunctionResourceArrayInput)(nil)).Elem(), UserDefinedFunctionResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewDefinitionInput)(nil)).Elem(), ViewDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ViewDefinitionPtrInput)(nil)).Elem(), ViewDefinitionArgs{})
	pulumi.RegisterOutputType(ArgumentOutput{})
	pulumi.RegisterOutputType(ArgumentArrayOutput{})
	pulumi.RegisterOutputType(ArgumentResponseOutput{})
	pulumi.RegisterOutputType(ArgumentResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AvroOptionsOutput{})
	pulumi.RegisterOutputType(AvroOptionsPtrOutput{})
	pulumi.RegisterOutputType(AvroOptionsResponseOutput{})
	pulumi.RegisterOutputType(BiEngineReasonResponseOutput{})
	pulumi.RegisterOutputType(BiEngineReasonResponseArrayOutput{})
	pulumi.RegisterOutputType(BiEngineStatisticsResponseOutput{})
	pulumi.RegisterOutputType(BigLakeConfigurationOutput{})
	pulumi.RegisterOutputType(BigLakeConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BigLakeConfigurationResponseOutput{})
	pulumi.RegisterOutputType(BigQueryModelTrainingResponseOutput{})
	pulumi.RegisterOutputType(BigtableColumnOutput{})
	pulumi.RegisterOutputType(BigtableColumnArrayOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyArrayOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyResponseOutput{})
	pulumi.RegisterOutputType(BigtableColumnFamilyResponseArrayOutput{})
	pulumi.RegisterOutputType(BigtableColumnResponseOutput{})
	pulumi.RegisterOutputType(BigtableColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(BigtableOptionsOutput{})
	pulumi.RegisterOutputType(BigtableOptionsPtrOutput{})
	pulumi.RegisterOutputType(BigtableOptionsResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultArrayOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultResponseOutput{})
	pulumi.RegisterOutputType(BqmlIterationResultResponseArrayOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunArrayOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunResponseOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunResponseArrayOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunTrainingOptionsOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunTrainingOptionsPtrOutput{})
	pulumi.RegisterOutputType(BqmlTrainingRunTrainingOptionsResponseOutput{})
	pulumi.RegisterOutputType(CloneDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ClusteringOutput{})
	pulumi.RegisterOutputType(ClusteringPtrOutput{})
	pulumi.RegisterOutputType(ClusteringResponseOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyArrayOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyResponseOutput{})
	pulumi.RegisterOutputType(ConnectionPropertyResponseArrayOutput{})
	pulumi.RegisterOutputType(CsvOptionsOutput{})
	pulumi.RegisterOutputType(CsvOptionsPtrOutput{})
	pulumi.RegisterOutputType(CsvOptionsResponseOutput{})
	pulumi.RegisterOutputType(DataMaskingStatisticsResponseOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryPtrOutput{})
	pulumi.RegisterOutputType(DatasetAccessEntryResponseOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemArrayOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemResponseOutput{})
	pulumi.RegisterOutputType(DatasetAccessItemResponseArrayOutput{})
	pulumi.RegisterOutputType(DatasetReferenceOutput{})
	pulumi.RegisterOutputType(DatasetReferencePtrOutput{})
	pulumi.RegisterOutputType(DatasetReferenceResponseOutput{})
	pulumi.RegisterOutputType(DatasetTagsItemOutput{})
	pulumi.RegisterOutputType(DatasetTagsItemArrayOutput{})
	pulumi.RegisterOutputType(DatasetTagsItemResponseOutput{})
	pulumi.RegisterOutputType(DatasetTagsItemResponseArrayOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesPtrOutput{})
	pulumi.RegisterOutputType(DestinationTablePropertiesResponseOutput{})
	pulumi.RegisterOutputType(DmlStatisticsResponseOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(EncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ErrorProtoResponseOutput{})
	pulumi.RegisterOutputType(ErrorProtoResponseArrayOutput{})
	pulumi.RegisterOutputType(ExplainQueryStageResponseOutput{})
	pulumi.RegisterOutputType(ExplainQueryStageResponseArrayOutput{})
	pulumi.RegisterOutputType(ExplainQueryStepResponseOutput{})
	pulumi.RegisterOutputType(ExplainQueryStepResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ExternalDataConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ExternalDatasetReferenceOutput{})
	pulumi.RegisterOutputType(ExternalDatasetReferencePtrOutput{})
	pulumi.RegisterOutputType(ExternalDatasetReferenceResponseOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsPtrOutput{})
	pulumi.RegisterOutputType(GoogleSheetsOptionsResponseOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsPtrOutput{})
	pulumi.RegisterOutputType(HivePartitioningOptionsResponseOutput{})
	pulumi.RegisterOutputType(IndexUnusedReasonResponseOutput{})
	pulumi.RegisterOutputType(IndexUnusedReasonResponseArrayOutput{})
	pulumi.RegisterOutputType(IterationResultResponseOutput{})
	pulumi.RegisterOutputType(IterationResultResponseArrayOutput{})
	pulumi.RegisterOutputType(JobConfigurationOutput{})
	pulumi.RegisterOutputType(JobConfigurationPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationExtractResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationLoadResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationQueryResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationResponseOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyPtrOutput{})
	pulumi.RegisterOutputType(JobConfigurationTableCopyResponseOutput{})
	pulumi.RegisterOutputType(JobReferenceOutput{})
	pulumi.RegisterOutputType(JobReferencePtrOutput{})
	pulumi.RegisterOutputType(JobReferenceResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics2ReservationUsageItemResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics2ReservationUsageItemResponseArrayOutput{})
	pulumi.RegisterOutputType(JobStatistics2ResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics3ResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics4ResponseOutput{})
	pulumi.RegisterOutputType(JobStatistics5ResponseOutput{})
	pulumi.RegisterOutputType(JobStatisticsReservationUsageItemResponseOutput{})
	pulumi.RegisterOutputType(JobStatisticsReservationUsageItemResponseArrayOutput{})
	pulumi.RegisterOutputType(JobStatisticsResponseOutput{})
	pulumi.RegisterOutputType(JobStatusResponseOutput{})
	pulumi.RegisterOutputType(JsonOptionsOutput{})
	pulumi.RegisterOutputType(JsonOptionsPtrOutput{})
	pulumi.RegisterOutputType(JsonOptionsResponseOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionPtrOutput{})
	pulumi.RegisterOutputType(MaterializedViewDefinitionResponseOutput{})
	pulumi.RegisterOutputType(MlStatisticsResponseOutput{})
	pulumi.RegisterOutputType(ModelDefinitionOutput{})
	pulumi.RegisterOutputType(ModelDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ModelDefinitionModelOptionsOutput{})
	pulumi.RegisterOutputType(ModelDefinitionModelOptionsPtrOutput{})
	pulumi.RegisterOutputType(ModelDefinitionModelOptionsResponseOutput{})
	pulumi.RegisterOutputType(ModelDefinitionResponseOutput{})
	pulumi.RegisterOutputType(ModelReferenceOutput{})
	pulumi.RegisterOutputType(ModelReferencePtrOutput{})
	pulumi.RegisterOutputType(ModelReferenceResponseOutput{})
	pulumi.RegisterOutputType(ParquetOptionsOutput{})
	pulumi.RegisterOutputType(ParquetOptionsPtrOutput{})
	pulumi.RegisterOutputType(ParquetOptionsResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterOutput{})
	pulumi.RegisterOutputType(QueryParameterArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeOutput{})
	pulumi.RegisterOutputType(QueryParameterTypePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterTypeStructTypesItemResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterValueOutput{})
	pulumi.RegisterOutputType(QueryParameterValuePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterValueArrayOutput{})
	pulumi.RegisterOutputType(QueryParameterValueResponseOutput{})
	pulumi.RegisterOutputType(QueryParameterValueResponsePtrOutput{})
	pulumi.RegisterOutputType(QueryParameterValueResponseArrayOutput{})
	pulumi.RegisterOutputType(QueryTimelineSampleResponseOutput{})
	pulumi.RegisterOutputType(QueryTimelineSampleResponseArrayOutput{})
	pulumi.RegisterOutputType(RangePartitioningOutput{})
	pulumi.RegisterOutputType(RangePartitioningPtrOutput{})
	pulumi.RegisterOutputType(RangePartitioningRangeOutput{})
	pulumi.RegisterOutputType(RangePartitioningRangePtrOutput{})
	pulumi.RegisterOutputType(RangePartitioningRangeResponseOutput{})
	pulumi.RegisterOutputType(RangePartitioningResponseOutput{})
	pulumi.RegisterOutputType(RemoteFunctionOptionsOutput{})
	pulumi.RegisterOutputType(RemoteFunctionOptionsPtrOutput{})
	pulumi.RegisterOutputType(RemoteFunctionOptionsResponseOutput{})
	pulumi.RegisterOutputType(RoutineReferenceOutput{})
	pulumi.RegisterOutputType(RoutineReferencePtrOutput{})
	pulumi.RegisterOutputType(RoutineReferenceResponseOutput{})
	pulumi.RegisterOutputType(RoutineReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(RowAccessPolicyReferenceResponseOutput{})
	pulumi.RegisterOutputType(RowLevelSecurityStatisticsResponseOutput{})
	pulumi.RegisterOutputType(ScriptStackFrameResponseOutput{})
	pulumi.RegisterOutputType(ScriptStackFrameResponseArrayOutput{})
	pulumi.RegisterOutputType(ScriptStatisticsResponseOutput{})
	pulumi.RegisterOutputType(SearchStatisticsResponseOutput{})
	pulumi.RegisterOutputType(SessionInfoResponseOutput{})
	pulumi.RegisterOutputType(SnapshotDefinitionResponseOutput{})
	pulumi.RegisterOutputType(SparkLoggingInfoResponseOutput{})
	pulumi.RegisterOutputType(SparkOptionsOutput{})
	pulumi.RegisterOutputType(SparkOptionsPtrOutput{})
	pulumi.RegisterOutputType(SparkOptionsResponseOutput{})
	pulumi.RegisterOutputType(SparkStatisticsResponseOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeResponseOutput{})
	pulumi.RegisterOutputType(StandardSqlDataTypeResponsePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldArrayOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldResponseOutput{})
	pulumi.RegisterOutputType(StandardSqlFieldResponseArrayOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypeResponseOutput{})
	pulumi.RegisterOutputType(StandardSqlStructTypeResponsePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypeOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypePtrOutput{})
	pulumi.RegisterOutputType(StandardSqlTableTypeResponseOutput{})
	pulumi.RegisterOutputType(StreamingbufferResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsOutput{})
	pulumi.RegisterOutputType(TableConstraintsPtrOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemColumnReferencesItemResponseArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemReferencedTableOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemReferencedTablePtrOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemReferencedTableResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsForeignKeysItemResponseArrayOutput{})
	pulumi.RegisterOutputType(TableConstraintsPrimaryKeyOutput{})
	pulumi.RegisterOutputType(TableConstraintsPrimaryKeyPtrOutput{})
	pulumi.RegisterOutputType(TableConstraintsPrimaryKeyResponseOutput{})
	pulumi.RegisterOutputType(TableConstraintsResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaArrayOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaCategoriesOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaCategoriesPtrOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaCategoriesResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaPolicyTagsOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaPolicyTagsPtrOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaPolicyTagsResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaRangeElementTypeOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaRangeElementTypePtrOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaRangeElementTypeResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaResponseOutput{})
	pulumi.RegisterOutputType(TableFieldSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(TableReferenceOutput{})
	pulumi.RegisterOutputType(TableReferencePtrOutput{})
	pulumi.RegisterOutputType(TableReferenceArrayOutput{})
	pulumi.RegisterOutputType(TableReferenceResponseOutput{})
	pulumi.RegisterOutputType(TableReferenceResponseArrayOutput{})
	pulumi.RegisterOutputType(TableSchemaOutput{})
	pulumi.RegisterOutputType(TableSchemaPtrOutput{})
	pulumi.RegisterOutputType(TableSchemaResponseOutput{})
	pulumi.RegisterOutputType(TimePartitioningOutput{})
	pulumi.RegisterOutputType(TimePartitioningPtrOutput{})
	pulumi.RegisterOutputType(TimePartitioningResponseOutput{})
	pulumi.RegisterOutputType(TransactionInfoResponseOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceArrayOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceResponseOutput{})
	pulumi.RegisterOutputType(UserDefinedFunctionResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(ViewDefinitionOutput{})
	pulumi.RegisterOutputType(ViewDefinitionPtrOutput{})
	pulumi.RegisterOutputType(ViewDefinitionResponseOutput{})
}
