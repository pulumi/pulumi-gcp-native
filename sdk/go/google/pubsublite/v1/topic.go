// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new topic.
type Topic struct {
	pulumi.CustomResourceState

	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name pulumi.StringOutput `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig PartitionConfigResponseOutput `pulumi:"partitionConfig"`
	Project         pulumi.StringOutput           `pulumi:"project"`
	// The settings for this topic's Reservation usage.
	ReservationConfig ReservationConfigResponseOutput `pulumi:"reservationConfig"`
	// The settings for this topic's message retention.
	RetentionConfig RetentionConfigResponseOutput `pulumi:"retentionConfig"`
	// Required. The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TopicId == nil {
		return nil, errors.New("invalid value for required argument 'TopicId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"topicId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Topic
	err := ctx.RegisterResource("google-native:pubsublite/v1:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("google-native:pubsublite/v1:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
}

type TopicState struct {
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	Location *string `pulumi:"location"`
	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name *string `pulumi:"name"`
	// The settings for this topic's partitions.
	PartitionConfig *PartitionConfig `pulumi:"partitionConfig"`
	Project         *string          `pulumi:"project"`
	// The settings for this topic's Reservation usage.
	ReservationConfig *ReservationConfig `pulumi:"reservationConfig"`
	// The settings for this topic's message retention.
	RetentionConfig *RetentionConfig `pulumi:"retentionConfig"`
	// Required. The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.
	TopicId string `pulumi:"topicId"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	Location pulumi.StringPtrInput
	// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Name pulumi.StringPtrInput
	// The settings for this topic's partitions.
	PartitionConfig PartitionConfigPtrInput
	Project         pulumi.StringPtrInput
	// The settings for this topic's Reservation usage.
	ReservationConfig ReservationConfigPtrInput
	// The settings for this topic's message retention.
	RetentionConfig RetentionConfigPtrInput
	// Required. The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.
	TopicId pulumi.StringInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

func (i *Topic) ToOutput(ctx context.Context) pulumix.Output[*Topic] {
	return pulumix.Output[*Topic]{
		OutputState: i.ToTopicOutputWithContext(ctx).OutputState,
	}
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

func (o TopicOutput) ToOutput(ctx context.Context) pulumix.Output[*Topic] {
	return pulumix.Output[*Topic]{
		OutputState: o.OutputState,
	}
}

func (o TopicOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of the topic. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
func (o TopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The settings for this topic's partitions.
func (o TopicOutput) PartitionConfig() PartitionConfigResponseOutput {
	return o.ApplyT(func(v *Topic) PartitionConfigResponseOutput { return v.PartitionConfig }).(PartitionConfigResponseOutput)
}

func (o TopicOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The settings for this topic's Reservation usage.
func (o TopicOutput) ReservationConfig() ReservationConfigResponseOutput {
	return o.ApplyT(func(v *Topic) ReservationConfigResponseOutput { return v.ReservationConfig }).(ReservationConfigResponseOutput)
}

// The settings for this topic's message retention.
func (o TopicOutput) RetentionConfig() RetentionConfigResponseOutput {
	return o.ApplyT(func(v *Topic) RetentionConfigResponseOutput { return v.RetentionConfig }).(RetentionConfigResponseOutput)
}

// Required. The ID to use for the topic, which will become the final component of the topic's name. This value is structured like: `my-topic-name`.
func (o TopicOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInput)(nil)).Elem(), &Topic{})
	pulumi.RegisterOutputType(TopicOutput{})
}
