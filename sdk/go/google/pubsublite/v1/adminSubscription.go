// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new subscription.
type AdminSubscription struct {
	pulumi.CustomResourceState
}

// NewAdminSubscription registers a new resource with the given unique name, arguments, and options.
func NewAdminSubscription(ctx *pulumi.Context,
	name string, args *AdminSubscriptionArgs, opts ...pulumi.ResourceOption) (*AdminSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.SubscriptionsId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionsId'")
	}
	var resource AdminSubscription
	err := ctx.RegisterResource("google-cloud:pubsublite/v1:AdminSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminSubscription gets an existing AdminSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminSubscriptionState, opts ...pulumi.ResourceOption) (*AdminSubscription, error) {
	var resource AdminSubscription
	err := ctx.ReadResource("google-cloud:pubsublite/v1:AdminSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminSubscription resources.
type adminSubscriptionState struct {
}

type AdminSubscriptionState struct {
}

func (AdminSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminSubscriptionState)(nil)).Elem()
}

type adminSubscriptionArgs struct {
	// The settings for this subscription's message delivery.
	DeliveryConfig *DeliveryConfig `pulumi:"deliveryConfig"`
	LocationsId    string          `pulumi:"locationsId"`
	// The name of the subscription. Structured like: projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
	Name            *string `pulumi:"name"`
	ProjectsId      string  `pulumi:"projectsId"`
	SubscriptionsId string  `pulumi:"subscriptionsId"`
	// The name of the topic this subscription is attached to. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Topic *string `pulumi:"topic"`
}

// The set of arguments for constructing a AdminSubscription resource.
type AdminSubscriptionArgs struct {
	// The settings for this subscription's message delivery.
	DeliveryConfig DeliveryConfigPtrInput
	LocationsId    pulumi.StringInput
	// The name of the subscription. Structured like: projects/{project_number}/locations/{location}/subscriptions/{subscription_id}
	Name            pulumi.StringPtrInput
	ProjectsId      pulumi.StringInput
	SubscriptionsId pulumi.StringInput
	// The name of the topic this subscription is attached to. Structured like: projects/{project_number}/locations/{location}/topics/{topic_id}
	Topic pulumi.StringPtrInput
}

func (AdminSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminSubscriptionArgs)(nil)).Elem()
}

type AdminSubscriptionInput interface {
	pulumi.Input

	ToAdminSubscriptionOutput() AdminSubscriptionOutput
	ToAdminSubscriptionOutputWithContext(ctx context.Context) AdminSubscriptionOutput
}

func (*AdminSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminSubscription)(nil))
}

func (i *AdminSubscription) ToAdminSubscriptionOutput() AdminSubscriptionOutput {
	return i.ToAdminSubscriptionOutputWithContext(context.Background())
}

func (i *AdminSubscription) ToAdminSubscriptionOutputWithContext(ctx context.Context) AdminSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminSubscriptionOutput)
}

type AdminSubscriptionOutput struct {
	*pulumi.OutputState
}

func (AdminSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdminSubscription)(nil))
}

func (o AdminSubscriptionOutput) ToAdminSubscriptionOutput() AdminSubscriptionOutput {
	return o
}

func (o AdminSubscriptionOutput) ToAdminSubscriptionOutputWithContext(ctx context.Context) AdminSubscriptionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(AdminSubscriptionOutput{})
}
