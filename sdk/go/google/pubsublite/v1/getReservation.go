// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the reservation configuration.
func LookupReservation(ctx *pulumi.Context, args *LookupReservationArgs, opts ...pulumi.InvokeOption) (*LookupReservationResult, error) {
	var rv LookupReservationResult
	err := ctx.Invoke("google-native:pubsublite/v1:getReservation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupReservationArgs struct {
	Location      string  `pulumi:"location"`
	Project       *string `pulumi:"project"`
	ReservationId string  `pulumi:"reservationId"`
}

type LookupReservationResult struct {
	// The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
	Name string `pulumi:"name"`
	// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.
	ThroughputCapacity string `pulumi:"throughputCapacity"`
}

func LookupReservationOutput(ctx *pulumi.Context, args LookupReservationOutputArgs, opts ...pulumi.InvokeOption) LookupReservationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReservationResult, error) {
			args := v.(LookupReservationArgs)
			r, err := LookupReservation(ctx, &args, opts...)
			return *r, err
		}).(LookupReservationResultOutput)
}

type LookupReservationOutputArgs struct {
	Location      pulumi.StringInput    `pulumi:"location"`
	Project       pulumi.StringPtrInput `pulumi:"project"`
	ReservationId pulumi.StringInput    `pulumi:"reservationId"`
}

func (LookupReservationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservationArgs)(nil)).Elem()
}

type LookupReservationResultOutput struct{ *pulumi.OutputState }

func (LookupReservationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservationResult)(nil)).Elem()
}

func (o LookupReservationResultOutput) ToLookupReservationResultOutput() LookupReservationResultOutput {
	return o
}

func (o LookupReservationResultOutput) ToLookupReservationResultOutputWithContext(ctx context.Context) LookupReservationResultOutput {
	return o
}

// The name of the reservation. Structured like: projects/{project_number}/locations/{location}/reservations/{reservation_id}
func (o LookupReservationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The reserved throughput capacity. Every unit of throughput capacity is equivalent to 1 MiB/s of published messages or 2 MiB/s of subscribed messages. Any topics which are declared as using capacity from a Reservation will consume resources from this reservation instead of being charged individually.
func (o LookupReservationResultOutput) ThroughputCapacity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservationResult) string { return v.ThroughputCapacity }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReservationResultOutput{})
}
