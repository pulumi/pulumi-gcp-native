// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a phrase matcher.
func LookupPhraseMatcher(ctx *pulumi.Context, args *LookupPhraseMatcherArgs, opts ...pulumi.InvokeOption) (*LookupPhraseMatcherResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPhraseMatcherResult
	err := ctx.Invoke("google-native:contactcenterinsights/v1:getPhraseMatcher", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPhraseMatcherArgs struct {
	Location        string  `pulumi:"location"`
	PhraseMatcherId string  `pulumi:"phraseMatcherId"`
	Project         *string `pulumi:"project"`
}

type LookupPhraseMatcherResult struct {
	// The most recent time at which the activation status was updated.
	ActivationUpdateTime string `pulumi:"activationUpdateTime"`
	// Applies the phrase matcher only when it is active.
	Active bool `pulumi:"active"`
	// The human-readable name of the phrase matcher.
	DisplayName string `pulumi:"displayName"`
	// The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
	Name string `pulumi:"name"`
	// A list of phase match rule groups that are included in this matcher.
	PhraseMatchRuleGroups []GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse `pulumi:"phraseMatchRuleGroups"`
	// The timestamp of when the revision was created. It is also the create time when a new matcher is added.
	RevisionCreateTime string `pulumi:"revisionCreateTime"`
	// Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567
	RevisionId string `pulumi:"revisionId"`
	// The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.
	RoleMatch string `pulumi:"roleMatch"`
	// The type of this phrase matcher.
	Type string `pulumi:"type"`
	// The most recent time at which the phrase matcher was updated.
	UpdateTime string `pulumi:"updateTime"`
	// The customized version tag to use for the phrase matcher. If not specified, it will default to `revision_id`.
	VersionTag string `pulumi:"versionTag"`
}

func LookupPhraseMatcherOutput(ctx *pulumi.Context, args LookupPhraseMatcherOutputArgs, opts ...pulumi.InvokeOption) LookupPhraseMatcherResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPhraseMatcherResult, error) {
			args := v.(LookupPhraseMatcherArgs)
			r, err := LookupPhraseMatcher(ctx, &args, opts...)
			var s LookupPhraseMatcherResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPhraseMatcherResultOutput)
}

type LookupPhraseMatcherOutputArgs struct {
	Location        pulumi.StringInput    `pulumi:"location"`
	PhraseMatcherId pulumi.StringInput    `pulumi:"phraseMatcherId"`
	Project         pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupPhraseMatcherOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPhraseMatcherArgs)(nil)).Elem()
}

type LookupPhraseMatcherResultOutput struct{ *pulumi.OutputState }

func (LookupPhraseMatcherResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPhraseMatcherResult)(nil)).Elem()
}

func (o LookupPhraseMatcherResultOutput) ToLookupPhraseMatcherResultOutput() LookupPhraseMatcherResultOutput {
	return o
}

func (o LookupPhraseMatcherResultOutput) ToLookupPhraseMatcherResultOutputWithContext(ctx context.Context) LookupPhraseMatcherResultOutput {
	return o
}

// The most recent time at which the activation status was updated.
func (o LookupPhraseMatcherResultOutput) ActivationUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.ActivationUpdateTime }).(pulumi.StringOutput)
}

// Applies the phrase matcher only when it is active.
func (o LookupPhraseMatcherResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) bool { return v.Active }).(pulumi.BoolOutput)
}

// The human-readable name of the phrase matcher.
func (o LookupPhraseMatcherResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The resource name of the phrase matcher. Format: projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
func (o LookupPhraseMatcherResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.Name }).(pulumi.StringOutput)
}

// A list of phase match rule groups that are included in this matcher.
func (o LookupPhraseMatcherResultOutput) PhraseMatchRuleGroups() GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponseArrayOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) []GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponse {
		return v.PhraseMatchRuleGroups
	}).(GoogleCloudContactcenterinsightsV1PhraseMatchRuleGroupResponseArrayOutput)
}

// The timestamp of when the revision was created. It is also the create time when a new matcher is added.
func (o LookupPhraseMatcherResultOutput) RevisionCreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.RevisionCreateTime }).(pulumi.StringOutput)
}

// Immutable. The revision ID of the phrase matcher. A new revision is committed whenever the matcher is changed, except when it is activated or deactivated. A server generated random ID will be used. Example: locations/global/phraseMatchers/my-first-matcher@1234567
func (o LookupPhraseMatcherResultOutput) RevisionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.RevisionId }).(pulumi.StringOutput)
}

// The role whose utterances the phrase matcher should be matched against. If the role is ROLE_UNSPECIFIED it will be matched against any utterances in the transcript.
func (o LookupPhraseMatcherResultOutput) RoleMatch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.RoleMatch }).(pulumi.StringOutput)
}

// The type of this phrase matcher.
func (o LookupPhraseMatcherResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.Type }).(pulumi.StringOutput)
}

// The most recent time at which the phrase matcher was updated.
func (o LookupPhraseMatcherResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The customized version tag to use for the phrase matcher. If not specified, it will default to `revision_id`.
func (o LookupPhraseMatcherResultOutput) VersionTag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPhraseMatcherResult) string { return v.VersionTag }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPhraseMatcherResultOutput{})
}
