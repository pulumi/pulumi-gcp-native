// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an analysis. The long running operation is done when the analysis has completed.
type Analysis struct {
	pulumi.CustomResourceState

	// The result of the analysis, which is populated when the analysis finishes.
	AnalysisResult GoogleCloudContactcenterinsightsV1AnalysisResultResponseOutput `pulumi:"analysisResult"`
	// To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.
	AnnotatorSelector GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponseOutput `pulumi:"annotatorSelector"`
	ConversationId    pulumi.StringOutput                                               `pulumi:"conversationId"`
	// The time at which the analysis was created, which occurs when the long-running operation completes.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	Location   pulumi.StringOutput `pulumi:"location"`
	// Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The time at which the analysis was requested.
	RequestTime pulumi.StringOutput `pulumi:"requestTime"`
}

// NewAnalysis registers a new resource with the given unique name, arguments, and options.
func NewAnalysis(ctx *pulumi.Context,
	name string, args *AnalysisArgs, opts ...pulumi.ResourceOption) (*Analysis, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConversationId == nil {
		return nil, errors.New("invalid value for required argument 'ConversationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"conversationId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Analysis
	err := ctx.RegisterResource("google-native:contactcenterinsights/v1:Analysis", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalysis gets an existing Analysis resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalysis(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalysisState, opts ...pulumi.ResourceOption) (*Analysis, error) {
	var resource Analysis
	err := ctx.ReadResource("google-native:contactcenterinsights/v1:Analysis", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Analysis resources.
type analysisState struct {
}

type AnalysisState struct {
}

func (AnalysisState) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisState)(nil)).Elem()
}

type analysisArgs struct {
	// To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.
	AnnotatorSelector *GoogleCloudContactcenterinsightsV1AnnotatorSelector `pulumi:"annotatorSelector"`
	ConversationId    string                                               `pulumi:"conversationId"`
	Location          *string                                              `pulumi:"location"`
	// Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Analysis resource.
type AnalysisArgs struct {
	// To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.
	AnnotatorSelector GoogleCloudContactcenterinsightsV1AnnotatorSelectorPtrInput
	ConversationId    pulumi.StringInput
	Location          pulumi.StringPtrInput
	// Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (AnalysisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analysisArgs)(nil)).Elem()
}

type AnalysisInput interface {
	pulumi.Input

	ToAnalysisOutput() AnalysisOutput
	ToAnalysisOutputWithContext(ctx context.Context) AnalysisOutput
}

func (*Analysis) ElementType() reflect.Type {
	return reflect.TypeOf((**Analysis)(nil)).Elem()
}

func (i *Analysis) ToAnalysisOutput() AnalysisOutput {
	return i.ToAnalysisOutputWithContext(context.Background())
}

func (i *Analysis) ToAnalysisOutputWithContext(ctx context.Context) AnalysisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalysisOutput)
}

type AnalysisOutput struct{ *pulumi.OutputState }

func (AnalysisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Analysis)(nil)).Elem()
}

func (o AnalysisOutput) ToAnalysisOutput() AnalysisOutput {
	return o
}

func (o AnalysisOutput) ToAnalysisOutputWithContext(ctx context.Context) AnalysisOutput {
	return o
}

// The result of the analysis, which is populated when the analysis finishes.
func (o AnalysisOutput) AnalysisResult() GoogleCloudContactcenterinsightsV1AnalysisResultResponseOutput {
	return o.ApplyT(func(v *Analysis) GoogleCloudContactcenterinsightsV1AnalysisResultResponseOutput {
		return v.AnalysisResult
	}).(GoogleCloudContactcenterinsightsV1AnalysisResultResponseOutput)
}

// To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.
func (o AnalysisOutput) AnnotatorSelector() GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponseOutput {
	return o.ApplyT(func(v *Analysis) GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponseOutput {
		return v.AnnotatorSelector
	}).(GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponseOutput)
}

func (o AnalysisOutput) ConversationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.ConversationId }).(pulumi.StringOutput)
}

// The time at which the analysis was created, which occurs when the long-running operation completes.
func (o AnalysisOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o AnalysisOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
func (o AnalysisOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AnalysisOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The time at which the analysis was requested.
func (o AnalysisOutput) RequestTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Analysis) pulumi.StringOutput { return v.RequestTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnalysisInput)(nil)).Elem(), &Analysis{})
	pulumi.RegisterOutputType(AnalysisOutput{})
}
