// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates an issue model.
type IssueModel struct {
	pulumi.CustomResourceState

	// The time at which this issue model was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The representative name for the issue model.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Configs for the input data that used to create the issue model.
	InputDataConfig GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigResponseOutput `pulumi:"inputDataConfig"`
	// Number of issues in this issue model.
	IssueCount pulumi.StringOutput `pulumi:"issueCount"`
	// Language of the model.
	LanguageCode pulumi.StringOutput `pulumi:"languageCode"`
	Location     pulumi.StringOutput `pulumi:"location"`
	// Type of the model.
	ModelType pulumi.StringOutput `pulumi:"modelType"`
	// Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// State of the model.
	State pulumi.StringOutput `pulumi:"state"`
	// Immutable. The issue model's label statistics on its training data.
	TrainingStats GoogleCloudContactcenterinsightsV1IssueModelLabelStatsResponseOutput `pulumi:"trainingStats"`
	// The most recent time at which the issue model was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewIssueModel registers a new resource with the given unique name, arguments, and options.
func NewIssueModel(ctx *pulumi.Context,
	name string, args *IssueModelArgs, opts ...pulumi.ResourceOption) (*IssueModel, error) {
	if args == nil {
		args = &IssueModelArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IssueModel
	err := ctx.RegisterResource("google-native:contactcenterinsights/v1:IssueModel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIssueModel gets an existing IssueModel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIssueModel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IssueModelState, opts ...pulumi.ResourceOption) (*IssueModel, error) {
	var resource IssueModel
	err := ctx.ReadResource("google-native:contactcenterinsights/v1:IssueModel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IssueModel resources.
type issueModelState struct {
}

type IssueModelState struct {
}

func (IssueModelState) ElementType() reflect.Type {
	return reflect.TypeOf((*issueModelState)(nil)).Elem()
}

type issueModelArgs struct {
	// The representative name for the issue model.
	DisplayName *string `pulumi:"displayName"`
	// Configs for the input data that used to create the issue model.
	InputDataConfig *GoogleCloudContactcenterinsightsV1IssueModelInputDataConfig `pulumi:"inputDataConfig"`
	// Language of the model.
	LanguageCode *string `pulumi:"languageCode"`
	Location     *string `pulumi:"location"`
	// Type of the model.
	ModelType *IssueModelModelType `pulumi:"modelType"`
	// Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a IssueModel resource.
type IssueModelArgs struct {
	// The representative name for the issue model.
	DisplayName pulumi.StringPtrInput
	// Configs for the input data that used to create the issue model.
	InputDataConfig GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigPtrInput
	// Language of the model.
	LanguageCode pulumi.StringPtrInput
	Location     pulumi.StringPtrInput
	// Type of the model.
	ModelType IssueModelModelTypePtrInput
	// Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (IssueModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*issueModelArgs)(nil)).Elem()
}

type IssueModelInput interface {
	pulumi.Input

	ToIssueModelOutput() IssueModelOutput
	ToIssueModelOutputWithContext(ctx context.Context) IssueModelOutput
}

func (*IssueModel) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueModel)(nil)).Elem()
}

func (i *IssueModel) ToIssueModelOutput() IssueModelOutput {
	return i.ToIssueModelOutputWithContext(context.Background())
}

func (i *IssueModel) ToIssueModelOutputWithContext(ctx context.Context) IssueModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IssueModelOutput)
}

func (i *IssueModel) ToOutput(ctx context.Context) pulumix.Output[*IssueModel] {
	return pulumix.Output[*IssueModel]{
		OutputState: i.ToIssueModelOutputWithContext(ctx).OutputState,
	}
}

type IssueModelOutput struct{ *pulumi.OutputState }

func (IssueModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IssueModel)(nil)).Elem()
}

func (o IssueModelOutput) ToIssueModelOutput() IssueModelOutput {
	return o
}

func (o IssueModelOutput) ToIssueModelOutputWithContext(ctx context.Context) IssueModelOutput {
	return o
}

func (o IssueModelOutput) ToOutput(ctx context.Context) pulumix.Output[*IssueModel] {
	return pulumix.Output[*IssueModel]{
		OutputState: o.OutputState,
	}
}

// The time at which this issue model was created.
func (o IssueModelOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The representative name for the issue model.
func (o IssueModelOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Configs for the input data that used to create the issue model.
func (o IssueModelOutput) InputDataConfig() GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigResponseOutput {
	return o.ApplyT(func(v *IssueModel) GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigResponseOutput {
		return v.InputDataConfig
	}).(GoogleCloudContactcenterinsightsV1IssueModelInputDataConfigResponseOutput)
}

// Number of issues in this issue model.
func (o IssueModelOutput) IssueCount() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.IssueCount }).(pulumi.StringOutput)
}

// Language of the model.
func (o IssueModelOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o IssueModelOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Type of the model.
func (o IssueModelOutput) ModelType() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.ModelType }).(pulumi.StringOutput)
}

// Immutable. The resource name of the issue model. Format: projects/{project}/locations/{location}/issueModels/{issue_model}
func (o IssueModelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o IssueModelOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// State of the model.
func (o IssueModelOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Immutable. The issue model's label statistics on its training data.
func (o IssueModelOutput) TrainingStats() GoogleCloudContactcenterinsightsV1IssueModelLabelStatsResponseOutput {
	return o.ApplyT(func(v *IssueModel) GoogleCloudContactcenterinsightsV1IssueModelLabelStatsResponseOutput {
		return v.TrainingStats
	}).(GoogleCloudContactcenterinsightsV1IssueModelLabelStatsResponseOutput)
}

// The most recent time at which the issue model was updated.
func (o IssueModelOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *IssueModel) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IssueModelInput)(nil)).Elem(), &IssueModel{})
	pulumi.RegisterOutputType(IssueModelOutput{})
}
