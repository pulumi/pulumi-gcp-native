// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a view.
func LookupView(ctx *pulumi.Context, args *LookupViewArgs, opts ...pulumi.InvokeOption) (*LookupViewResult, error) {
	var rv LookupViewResult
	err := ctx.Invoke("google-native:contactcenterinsights/v1:getView", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupViewArgs struct {
	Location string  `pulumi:"location"`
	Project  *string `pulumi:"project"`
	ViewId   string  `pulumi:"viewId"`
}

type LookupViewResult struct {
	// The time at which this view was created.
	CreateTime string `pulumi:"createTime"`
	// The human-readable display name of the view.
	DisplayName string `pulumi:"displayName"`
	// Immutable. The resource name of the view. Format: projects/{project}/locations/{location}/views/{view}
	Name string `pulumi:"name"`
	// The most recent time at which the view was updated.
	UpdateTime string `pulumi:"updateTime"`
	// String with specific view properties.
	Value string `pulumi:"value"`
}

func LookupViewOutput(ctx *pulumi.Context, args LookupViewOutputArgs, opts ...pulumi.InvokeOption) LookupViewResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupViewResult, error) {
			args := v.(LookupViewArgs)
			r, err := LookupView(ctx, &args, opts...)
			var s LookupViewResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupViewResultOutput)
}

type LookupViewOutputArgs struct {
	Location pulumi.StringInput    `pulumi:"location"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
	ViewId   pulumi.StringInput    `pulumi:"viewId"`
}

func (LookupViewOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupViewArgs)(nil)).Elem()
}

type LookupViewResultOutput struct{ *pulumi.OutputState }

func (LookupViewResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupViewResult)(nil)).Elem()
}

func (o LookupViewResultOutput) ToLookupViewResultOutput() LookupViewResultOutput {
	return o
}

func (o LookupViewResultOutput) ToLookupViewResultOutputWithContext(ctx context.Context) LookupViewResultOutput {
	return o
}

// The time at which this view was created.
func (o LookupViewResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupViewResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The human-readable display name of the view.
func (o LookupViewResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupViewResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Immutable. The resource name of the view. Format: projects/{project}/locations/{location}/views/{view}
func (o LookupViewResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupViewResult) string { return v.Name }).(pulumi.StringOutput)
}

// The most recent time at which the view was updated.
func (o LookupViewResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupViewResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// String with specific view properties.
func (o LookupViewResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LookupViewResult) string { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupViewResultOutput{})
}
