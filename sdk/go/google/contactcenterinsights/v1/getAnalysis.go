// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets an analysis.
func LookupAnalysis(ctx *pulumi.Context, args *LookupAnalysisArgs, opts ...pulumi.InvokeOption) (*LookupAnalysisResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAnalysisResult
	err := ctx.Invoke("google-native:contactcenterinsights/v1:getAnalysis", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupAnalysisArgs struct {
	AnalysisId     string  `pulumi:"analysisId"`
	ConversationId string  `pulumi:"conversationId"`
	Location       string  `pulumi:"location"`
	Project        *string `pulumi:"project"`
}

type LookupAnalysisResult struct {
	// The result of the analysis, which is populated when the analysis finishes.
	AnalysisResult GoogleCloudContactcenterinsightsV1AnalysisResultResponse `pulumi:"analysisResult"`
	// To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.
	AnnotatorSelector GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponse `pulumi:"annotatorSelector"`
	// The time at which the analysis was created, which occurs when the long-running operation completes.
	CreateTime string `pulumi:"createTime"`
	// Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
	Name string `pulumi:"name"`
	// The time at which the analysis was requested.
	RequestTime string `pulumi:"requestTime"`
}

func LookupAnalysisOutput(ctx *pulumi.Context, args LookupAnalysisOutputArgs, opts ...pulumi.InvokeOption) LookupAnalysisResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAnalysisResult, error) {
			args := v.(LookupAnalysisArgs)
			r, err := LookupAnalysis(ctx, &args, opts...)
			var s LookupAnalysisResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAnalysisResultOutput)
}

type LookupAnalysisOutputArgs struct {
	AnalysisId     pulumi.StringInput    `pulumi:"analysisId"`
	ConversationId pulumi.StringInput    `pulumi:"conversationId"`
	Location       pulumi.StringInput    `pulumi:"location"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupAnalysisOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnalysisArgs)(nil)).Elem()
}

type LookupAnalysisResultOutput struct{ *pulumi.OutputState }

func (LookupAnalysisResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAnalysisResult)(nil)).Elem()
}

func (o LookupAnalysisResultOutput) ToLookupAnalysisResultOutput() LookupAnalysisResultOutput {
	return o
}

func (o LookupAnalysisResultOutput) ToLookupAnalysisResultOutputWithContext(ctx context.Context) LookupAnalysisResultOutput {
	return o
}

// The result of the analysis, which is populated when the analysis finishes.
func (o LookupAnalysisResultOutput) AnalysisResult() GoogleCloudContactcenterinsightsV1AnalysisResultResponseOutput {
	return o.ApplyT(func(v LookupAnalysisResult) GoogleCloudContactcenterinsightsV1AnalysisResultResponse {
		return v.AnalysisResult
	}).(GoogleCloudContactcenterinsightsV1AnalysisResultResponseOutput)
}

// To select the annotators to run and the phrase matchers to use (if any). If not specified, all annotators will be run.
func (o LookupAnalysisResultOutput) AnnotatorSelector() GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponseOutput {
	return o.ApplyT(func(v LookupAnalysisResult) GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponse {
		return v.AnnotatorSelector
	}).(GoogleCloudContactcenterinsightsV1AnnotatorSelectorResponseOutput)
}

// The time at which the analysis was created, which occurs when the long-running operation completes.
func (o LookupAnalysisResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAnalysisResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. The resource name of the analysis. Format: projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
func (o LookupAnalysisResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAnalysisResult) string { return v.Name }).(pulumi.StringOutput)
}

// The time at which the analysis was requested.
func (o LookupAnalysisResultOutput) RequestTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAnalysisResult) string { return v.RequestTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAnalysisResultOutput{})
}
