// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Endpoints on each network, for Redis clients to connect to the cluster.
type DiscoveryEndpointResponse struct {
	// Address of the exposed Redis endpoint used by clients to connect to the service. The address could be either IP or hostname.
	Address string `pulumi:"address"`
	// The port number of the exposed Redis endpoint.
	Port int `pulumi:"port"`
	// Customer configuration for where the endpoint is created and accessed from.
	PscConfig PscConfigResponse `pulumi:"pscConfig"`
}

// Endpoints on each network, for Redis clients to connect to the cluster.
type DiscoveryEndpointResponseOutput struct{ *pulumi.OutputState }

func (DiscoveryEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiscoveryEndpointResponse)(nil)).Elem()
}

func (o DiscoveryEndpointResponseOutput) ToDiscoveryEndpointResponseOutput() DiscoveryEndpointResponseOutput {
	return o
}

func (o DiscoveryEndpointResponseOutput) ToDiscoveryEndpointResponseOutputWithContext(ctx context.Context) DiscoveryEndpointResponseOutput {
	return o
}

// Address of the exposed Redis endpoint used by clients to connect to the service. The address could be either IP or hostname.
func (o DiscoveryEndpointResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v DiscoveryEndpointResponse) string { return v.Address }).(pulumi.StringOutput)
}

// The port number of the exposed Redis endpoint.
func (o DiscoveryEndpointResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v DiscoveryEndpointResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Customer configuration for where the endpoint is created and accessed from.
func (o DiscoveryEndpointResponseOutput) PscConfig() PscConfigResponseOutput {
	return o.ApplyT(func(v DiscoveryEndpointResponse) PscConfigResponse { return v.PscConfig }).(PscConfigResponseOutput)
}

type DiscoveryEndpointResponseArrayOutput struct{ *pulumi.OutputState }

func (DiscoveryEndpointResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiscoveryEndpointResponse)(nil)).Elem()
}

func (o DiscoveryEndpointResponseArrayOutput) ToDiscoveryEndpointResponseArrayOutput() DiscoveryEndpointResponseArrayOutput {
	return o
}

func (o DiscoveryEndpointResponseArrayOutput) ToDiscoveryEndpointResponseArrayOutputWithContext(ctx context.Context) DiscoveryEndpointResponseArrayOutput {
	return o
}

func (o DiscoveryEndpointResponseArrayOutput) Index(i pulumi.IntInput) DiscoveryEndpointResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiscoveryEndpointResponse {
		return vs[0].([]DiscoveryEndpointResponse)[vs[1].(int)]
	}).(DiscoveryEndpointResponseOutput)
}

// Maintenance policy for an instance.
type MaintenancePolicy struct {
	// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description *string `pulumi:"description"`
	// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindow `pulumi:"weeklyMaintenanceWindow"`
}

// MaintenancePolicyInput is an input type that accepts MaintenancePolicyArgs and MaintenancePolicyOutput values.
// You can construct a concrete instance of `MaintenancePolicyInput` via:
//
//	MaintenancePolicyArgs{...}
type MaintenancePolicyInput interface {
	pulumi.Input

	ToMaintenancePolicyOutput() MaintenancePolicyOutput
	ToMaintenancePolicyOutputWithContext(context.Context) MaintenancePolicyOutput
}

// Maintenance policy for an instance.
type MaintenancePolicyArgs struct {
	// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
	WeeklyMaintenanceWindow WeeklyMaintenanceWindowArrayInput `pulumi:"weeklyMaintenanceWindow"`
}

func (MaintenancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return i.ToMaintenancePolicyOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput)
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput).ToMaintenancePolicyPtrOutputWithContext(ctx)
}

// MaintenancePolicyPtrInput is an input type that accepts MaintenancePolicyArgs, MaintenancePolicyPtr and MaintenancePolicyPtrOutput values.
// You can construct a concrete instance of `MaintenancePolicyPtrInput` via:
//
//	        MaintenancePolicyArgs{...}
//
//	or:
//
//	        nil
type MaintenancePolicyPtrInput interface {
	pulumi.Input

	ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput
	ToMaintenancePolicyPtrOutputWithContext(context.Context) MaintenancePolicyPtrOutput
}

type maintenancePolicyPtrType MaintenancePolicyArgs

func MaintenancePolicyPtr(v *MaintenancePolicyArgs) MaintenancePolicyPtrInput {
	return (*maintenancePolicyPtrType)(v)
}

func (*maintenancePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyPtrOutput)
}

// Maintenance policy for an instance.
type MaintenancePolicyOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenancePolicy) *MaintenancePolicy {
		return &v
	}).(MaintenancePolicyPtrOutput)
}

// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o MaintenancePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
func (o MaintenancePolicyOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v MaintenancePolicy) []WeeklyMaintenanceWindow { return v.WeeklyMaintenanceWindow }).(WeeklyMaintenanceWindowArrayOutput)
}

type MaintenancePolicyPtrOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) Elem() MaintenancePolicyOutput {
	return o.ApplyT(func(v *MaintenancePolicy) MaintenancePolicy {
		if v != nil {
			return *v
		}
		var ret MaintenancePolicy
		return ret
	}).(MaintenancePolicyOutput)
}

// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o MaintenancePolicyPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
func (o MaintenancePolicyPtrOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *MaintenancePolicy) []WeeklyMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.WeeklyMaintenanceWindow
	}).(WeeklyMaintenanceWindowArrayOutput)
}

// Maintenance policy for an instance.
type MaintenancePolicyResponse struct {
	// The time when the policy was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description string `pulumi:"description"`
	// The time when the policy was last updated.
	UpdateTime string `pulumi:"updateTime"`
	// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindowResponse `pulumi:"weeklyMaintenanceWindow"`
}

// Maintenance policy for an instance.
type MaintenancePolicyResponseOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicyResponse)(nil)).Elem()
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutput() MaintenancePolicyResponseOutput {
	return o
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutputWithContext(ctx context.Context) MaintenancePolicyResponseOutput {
	return o
}

// The time when the policy was created.
func (o MaintenancePolicyResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o MaintenancePolicyResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The time when the policy was last updated.
func (o MaintenancePolicyResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
func (o MaintenancePolicyResponseOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowResponseArrayOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) []WeeklyMaintenanceWindowResponse { return v.WeeklyMaintenanceWindow }).(WeeklyMaintenanceWindowResponseArrayOutput)
}

// Upcoming maintenance schedule. If no maintenance is scheduled, fields are not populated.
type MaintenanceScheduleResponse struct {
	// If the scheduled maintenance can be rescheduled, default is true.
	CanReschedule bool `pulumi:"canReschedule"`
	// The end time of any upcoming scheduled maintenance for this instance.
	EndTime string `pulumi:"endTime"`
	// The deadline that the maintenance schedule start time can not go beyond, including reschedule.
	ScheduleDeadlineTime string `pulumi:"scheduleDeadlineTime"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime string `pulumi:"startTime"`
}

// Upcoming maintenance schedule. If no maintenance is scheduled, fields are not populated.
type MaintenanceScheduleResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceScheduleResponse)(nil)).Elem()
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutput() MaintenanceScheduleResponseOutput {
	return o
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutputWithContext(ctx context.Context) MaintenanceScheduleResponseOutput {
	return o
}

// If the scheduled maintenance can be rescheduled, default is true.
func (o MaintenanceScheduleResponseOutput) CanReschedule() pulumi.BoolOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) bool { return v.CanReschedule }).(pulumi.BoolOutput)
}

// The end time of any upcoming scheduled maintenance for this instance.
func (o MaintenanceScheduleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The deadline that the maintenance schedule start time can not go beyond, including reschedule.
func (o MaintenanceScheduleResponseOutput) ScheduleDeadlineTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.ScheduleDeadlineTime }).(pulumi.StringOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o MaintenanceScheduleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Node specific properties.
type NodeInfoResponse struct {
	// Location of the node.
	Zone string `pulumi:"zone"`
}

// Node specific properties.
type NodeInfoResponseOutput struct{ *pulumi.OutputState }

func (NodeInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeInfoResponse)(nil)).Elem()
}

func (o NodeInfoResponseOutput) ToNodeInfoResponseOutput() NodeInfoResponseOutput {
	return o
}

func (o NodeInfoResponseOutput) ToNodeInfoResponseOutputWithContext(ctx context.Context) NodeInfoResponseOutput {
	return o
}

// Location of the node.
func (o NodeInfoResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v NodeInfoResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type NodeInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeInfoResponse)(nil)).Elem()
}

func (o NodeInfoResponseArrayOutput) ToNodeInfoResponseArrayOutput() NodeInfoResponseArrayOutput {
	return o
}

func (o NodeInfoResponseArrayOutput) ToNodeInfoResponseArrayOutputWithContext(ctx context.Context) NodeInfoResponseArrayOutput {
	return o
}

func (o NodeInfoResponseArrayOutput) Index(i pulumi.IntInput) NodeInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeInfoResponse {
		return vs[0].([]NodeInfoResponse)[vs[1].(int)]
	}).(NodeInfoResponseOutput)
}

// Configuration of the persistence functionality.
type PersistenceConfig struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode *PersistenceConfigPersistenceMode `pulumi:"persistenceMode"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod *PersistenceConfigRdbSnapshotPeriod `pulumi:"rdbSnapshotPeriod"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime *string `pulumi:"rdbSnapshotStartTime"`
}

// PersistenceConfigInput is an input type that accepts PersistenceConfigArgs and PersistenceConfigOutput values.
// You can construct a concrete instance of `PersistenceConfigInput` via:
//
//	PersistenceConfigArgs{...}
type PersistenceConfigInput interface {
	pulumi.Input

	ToPersistenceConfigOutput() PersistenceConfigOutput
	ToPersistenceConfigOutputWithContext(context.Context) PersistenceConfigOutput
}

// Configuration of the persistence functionality.
type PersistenceConfigArgs struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode PersistenceConfigPersistenceModePtrInput `pulumi:"persistenceMode"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod PersistenceConfigRdbSnapshotPeriodPtrInput `pulumi:"rdbSnapshotPeriod"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime pulumi.StringPtrInput `pulumi:"rdbSnapshotStartTime"`
}

func (PersistenceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfig)(nil)).Elem()
}

func (i PersistenceConfigArgs) ToPersistenceConfigOutput() PersistenceConfigOutput {
	return i.ToPersistenceConfigOutputWithContext(context.Background())
}

func (i PersistenceConfigArgs) ToPersistenceConfigOutputWithContext(ctx context.Context) PersistenceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigOutput)
}

func (i PersistenceConfigArgs) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return i.ToPersistenceConfigPtrOutputWithContext(context.Background())
}

func (i PersistenceConfigArgs) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigOutput).ToPersistenceConfigPtrOutputWithContext(ctx)
}

// PersistenceConfigPtrInput is an input type that accepts PersistenceConfigArgs, PersistenceConfigPtr and PersistenceConfigPtrOutput values.
// You can construct a concrete instance of `PersistenceConfigPtrInput` via:
//
//	        PersistenceConfigArgs{...}
//
//	or:
//
//	        nil
type PersistenceConfigPtrInput interface {
	pulumi.Input

	ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput
	ToPersistenceConfigPtrOutputWithContext(context.Context) PersistenceConfigPtrOutput
}

type persistenceConfigPtrType PersistenceConfigArgs

func PersistenceConfigPtr(v *PersistenceConfigArgs) PersistenceConfigPtrInput {
	return (*persistenceConfigPtrType)(v)
}

func (*persistenceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfig)(nil)).Elem()
}

func (i *persistenceConfigPtrType) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return i.ToPersistenceConfigPtrOutputWithContext(context.Background())
}

func (i *persistenceConfigPtrType) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigPtrOutput)
}

// Configuration of the persistence functionality.
type PersistenceConfigOutput struct{ *pulumi.OutputState }

func (PersistenceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfig)(nil)).Elem()
}

func (o PersistenceConfigOutput) ToPersistenceConfigOutput() PersistenceConfigOutput {
	return o
}

func (o PersistenceConfigOutput) ToPersistenceConfigOutputWithContext(ctx context.Context) PersistenceConfigOutput {
	return o
}

func (o PersistenceConfigOutput) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return o.ToPersistenceConfigPtrOutputWithContext(context.Background())
}

func (o PersistenceConfigOutput) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistenceConfig) *PersistenceConfig {
		return &v
	}).(PersistenceConfigPtrOutput)
}

// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
func (o PersistenceConfigOutput) PersistenceMode() PersistenceConfigPersistenceModePtrOutput {
	return o.ApplyT(func(v PersistenceConfig) *PersistenceConfigPersistenceMode { return v.PersistenceMode }).(PersistenceConfigPersistenceModePtrOutput)
}

// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
func (o PersistenceConfigOutput) RdbSnapshotPeriod() PersistenceConfigRdbSnapshotPeriodPtrOutput {
	return o.ApplyT(func(v PersistenceConfig) *PersistenceConfigRdbSnapshotPeriod { return v.RdbSnapshotPeriod }).(PersistenceConfigRdbSnapshotPeriodPtrOutput)
}

// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
func (o PersistenceConfigOutput) RdbSnapshotStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistenceConfig) *string { return v.RdbSnapshotStartTime }).(pulumi.StringPtrOutput)
}

type PersistenceConfigPtrOutput struct{ *pulumi.OutputState }

func (PersistenceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfig)(nil)).Elem()
}

func (o PersistenceConfigPtrOutput) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return o
}

func (o PersistenceConfigPtrOutput) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return o
}

func (o PersistenceConfigPtrOutput) Elem() PersistenceConfigOutput {
	return o.ApplyT(func(v *PersistenceConfig) PersistenceConfig {
		if v != nil {
			return *v
		}
		var ret PersistenceConfig
		return ret
	}).(PersistenceConfigOutput)
}

// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
func (o PersistenceConfigPtrOutput) PersistenceMode() PersistenceConfigPersistenceModePtrOutput {
	return o.ApplyT(func(v *PersistenceConfig) *PersistenceConfigPersistenceMode {
		if v == nil {
			return nil
		}
		return v.PersistenceMode
	}).(PersistenceConfigPersistenceModePtrOutput)
}

// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
func (o PersistenceConfigPtrOutput) RdbSnapshotPeriod() PersistenceConfigRdbSnapshotPeriodPtrOutput {
	return o.ApplyT(func(v *PersistenceConfig) *PersistenceConfigRdbSnapshotPeriod {
		if v == nil {
			return nil
		}
		return v.RdbSnapshotPeriod
	}).(PersistenceConfigRdbSnapshotPeriodPtrOutput)
}

// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
func (o PersistenceConfigPtrOutput) RdbSnapshotStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceConfig) *string {
		if v == nil {
			return nil
		}
		return v.RdbSnapshotStartTime
	}).(pulumi.StringPtrOutput)
}

// Configuration of the persistence functionality.
type PersistenceConfigResponse struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode string `pulumi:"persistenceMode"`
	// The next time that a snapshot attempt is scheduled to occur.
	RdbNextSnapshotTime string `pulumi:"rdbNextSnapshotTime"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod string `pulumi:"rdbSnapshotPeriod"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime string `pulumi:"rdbSnapshotStartTime"`
}

// Configuration of the persistence functionality.
type PersistenceConfigResponseOutput struct{ *pulumi.OutputState }

func (PersistenceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigResponse)(nil)).Elem()
}

func (o PersistenceConfigResponseOutput) ToPersistenceConfigResponseOutput() PersistenceConfigResponseOutput {
	return o
}

func (o PersistenceConfigResponseOutput) ToPersistenceConfigResponseOutputWithContext(ctx context.Context) PersistenceConfigResponseOutput {
	return o
}

// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
func (o PersistenceConfigResponseOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.PersistenceMode }).(pulumi.StringOutput)
}

// The next time that a snapshot attempt is scheduled to occur.
func (o PersistenceConfigResponseOutput) RdbNextSnapshotTime() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.RdbNextSnapshotTime }).(pulumi.StringOutput)
}

// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
func (o PersistenceConfigResponseOutput) RdbSnapshotPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.RdbSnapshotPeriod }).(pulumi.StringOutput)
}

// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
func (o PersistenceConfigResponseOutput) RdbSnapshotStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.RdbSnapshotStartTime }).(pulumi.StringOutput)
}

type PscConfig struct {
	// The network where the IP address of the discovery endpoint will be reserved, in the form of projects/{network_project}/global/networks/{network_id}.
	Network string `pulumi:"network"`
}

// PscConfigInput is an input type that accepts PscConfigArgs and PscConfigOutput values.
// You can construct a concrete instance of `PscConfigInput` via:
//
//	PscConfigArgs{...}
type PscConfigInput interface {
	pulumi.Input

	ToPscConfigOutput() PscConfigOutput
	ToPscConfigOutputWithContext(context.Context) PscConfigOutput
}

type PscConfigArgs struct {
	// The network where the IP address of the discovery endpoint will be reserved, in the form of projects/{network_project}/global/networks/{network_id}.
	Network pulumi.StringInput `pulumi:"network"`
}

func (PscConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConfig)(nil)).Elem()
}

func (i PscConfigArgs) ToPscConfigOutput() PscConfigOutput {
	return i.ToPscConfigOutputWithContext(context.Background())
}

func (i PscConfigArgs) ToPscConfigOutputWithContext(ctx context.Context) PscConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PscConfigOutput)
}

// PscConfigArrayInput is an input type that accepts PscConfigArray and PscConfigArrayOutput values.
// You can construct a concrete instance of `PscConfigArrayInput` via:
//
//	PscConfigArray{ PscConfigArgs{...} }
type PscConfigArrayInput interface {
	pulumi.Input

	ToPscConfigArrayOutput() PscConfigArrayOutput
	ToPscConfigArrayOutputWithContext(context.Context) PscConfigArrayOutput
}

type PscConfigArray []PscConfigInput

func (PscConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PscConfig)(nil)).Elem()
}

func (i PscConfigArray) ToPscConfigArrayOutput() PscConfigArrayOutput {
	return i.ToPscConfigArrayOutputWithContext(context.Background())
}

func (i PscConfigArray) ToPscConfigArrayOutputWithContext(ctx context.Context) PscConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PscConfigArrayOutput)
}

type PscConfigOutput struct{ *pulumi.OutputState }

func (PscConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConfig)(nil)).Elem()
}

func (o PscConfigOutput) ToPscConfigOutput() PscConfigOutput {
	return o
}

func (o PscConfigOutput) ToPscConfigOutputWithContext(ctx context.Context) PscConfigOutput {
	return o
}

// The network where the IP address of the discovery endpoint will be reserved, in the form of projects/{network_project}/global/networks/{network_id}.
func (o PscConfigOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v PscConfig) string { return v.Network }).(pulumi.StringOutput)
}

type PscConfigArrayOutput struct{ *pulumi.OutputState }

func (PscConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PscConfig)(nil)).Elem()
}

func (o PscConfigArrayOutput) ToPscConfigArrayOutput() PscConfigArrayOutput {
	return o
}

func (o PscConfigArrayOutput) ToPscConfigArrayOutputWithContext(ctx context.Context) PscConfigArrayOutput {
	return o
}

func (o PscConfigArrayOutput) Index(i pulumi.IntInput) PscConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PscConfig {
		return vs[0].([]PscConfig)[vs[1].(int)]
	}).(PscConfigOutput)
}

type PscConfigResponse struct {
	// The network where the IP address of the discovery endpoint will be reserved, in the form of projects/{network_project}/global/networks/{network_id}.
	Network string `pulumi:"network"`
}

type PscConfigResponseOutput struct{ *pulumi.OutputState }

func (PscConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConfigResponse)(nil)).Elem()
}

func (o PscConfigResponseOutput) ToPscConfigResponseOutput() PscConfigResponseOutput {
	return o
}

func (o PscConfigResponseOutput) ToPscConfigResponseOutputWithContext(ctx context.Context) PscConfigResponseOutput {
	return o
}

// The network where the IP address of the discovery endpoint will be reserved, in the form of projects/{network_project}/global/networks/{network_id}.
func (o PscConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v PscConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

type PscConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (PscConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PscConfigResponse)(nil)).Elem()
}

func (o PscConfigResponseArrayOutput) ToPscConfigResponseArrayOutput() PscConfigResponseArrayOutput {
	return o
}

func (o PscConfigResponseArrayOutput) ToPscConfigResponseArrayOutputWithContext(ctx context.Context) PscConfigResponseArrayOutput {
	return o
}

func (o PscConfigResponseArrayOutput) Index(i pulumi.IntInput) PscConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PscConfigResponse {
		return vs[0].([]PscConfigResponse)[vs[1].(int)]
	}).(PscConfigResponseOutput)
}

// Details of consumer resources in a PSC connection.
type PscConnectionResponse struct {
	// The IP allocated on the consumer network for the PSC forwarding rule.
	Address string `pulumi:"address"`
	// The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.
	ForwardingRule string `pulumi:"forwardingRule"`
	// The consumer network where the IP address resides, in the form of projects/{project_id}/global/networks/{network_id}.
	Network string `pulumi:"network"`
	// The consumer project_id where the forwarding rule is created from.
	Project string `pulumi:"project"`
	// The PSC connection id of the forwarding rule connected to the service attachment.
	PscConnectionId string `pulumi:"pscConnectionId"`
}

// Details of consumer resources in a PSC connection.
type PscConnectionResponseOutput struct{ *pulumi.OutputState }

func (PscConnectionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PscConnectionResponse)(nil)).Elem()
}

func (o PscConnectionResponseOutput) ToPscConnectionResponseOutput() PscConnectionResponseOutput {
	return o
}

func (o PscConnectionResponseOutput) ToPscConnectionResponseOutputWithContext(ctx context.Context) PscConnectionResponseOutput {
	return o
}

// The IP allocated on the consumer network for the PSC forwarding rule.
func (o PscConnectionResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.Address }).(pulumi.StringOutput)
}

// The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.
func (o PscConnectionResponseOutput) ForwardingRule() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.ForwardingRule }).(pulumi.StringOutput)
}

// The consumer network where the IP address resides, in the form of projects/{project_id}/global/networks/{network_id}.
func (o PscConnectionResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The consumer project_id where the forwarding rule is created from.
func (o PscConnectionResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The PSC connection id of the forwarding rule connected to the service attachment.
func (o PscConnectionResponseOutput) PscConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v PscConnectionResponse) string { return v.PscConnectionId }).(pulumi.StringOutput)
}

type PscConnectionResponseArrayOutput struct{ *pulumi.OutputState }

func (PscConnectionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PscConnectionResponse)(nil)).Elem()
}

func (o PscConnectionResponseArrayOutput) ToPscConnectionResponseArrayOutput() PscConnectionResponseArrayOutput {
	return o
}

func (o PscConnectionResponseArrayOutput) ToPscConnectionResponseArrayOutputWithContext(ctx context.Context) PscConnectionResponseArrayOutput {
	return o
}

func (o PscConnectionResponseArrayOutput) Index(i pulumi.IntInput) PscConnectionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PscConnectionResponse {
		return vs[0].([]PscConnectionResponse)[vs[1].(int)]
	}).(PscConnectionResponseOutput)
}

// Represents additional information about the state of the cluster.
type StateInfoResponse struct {
	// Describes ongoing update on the cluster when cluster state is UPDATING.
	UpdateInfo UpdateInfoResponse `pulumi:"updateInfo"`
}

// Represents additional information about the state of the cluster.
type StateInfoResponseOutput struct{ *pulumi.OutputState }

func (StateInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateInfoResponse)(nil)).Elem()
}

func (o StateInfoResponseOutput) ToStateInfoResponseOutput() StateInfoResponseOutput {
	return o
}

func (o StateInfoResponseOutput) ToStateInfoResponseOutputWithContext(ctx context.Context) StateInfoResponseOutput {
	return o
}

// Describes ongoing update on the cluster when cluster state is UPDATING.
func (o StateInfoResponseOutput) UpdateInfo() UpdateInfoResponseOutput {
	return o.ApplyT(func(v StateInfoResponse) UpdateInfoResponse { return v.UpdateInfo }).(UpdateInfoResponseOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//	TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponse struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds int `pulumi:"seconds"`
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponseOutput struct{ *pulumi.OutputState }

func (TimeOfDayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDayResponse)(nil)).Elem()
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutput() TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutputWithContext(ctx context.Context) TimeOfDayResponseOutput {
	return o
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

// TlsCertificate Resource
type TlsCertificateResponse struct {
	// PEM representation.
	Cert string `pulumi:"cert"`
	// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	CreateTime string `pulumi:"createTime"`
	// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	ExpireTime string `pulumi:"expireTime"`
	// Serial number, as extracted from the certificate.
	SerialNumber string `pulumi:"serialNumber"`
	// Sha1 Fingerprint of the certificate.
	Sha1Fingerprint string `pulumi:"sha1Fingerprint"`
}

// TlsCertificate Resource
type TlsCertificateResponseOutput struct{ *pulumi.OutputState }

func (TlsCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificateResponse)(nil)).Elem()
}

func (o TlsCertificateResponseOutput) ToTlsCertificateResponseOutput() TlsCertificateResponseOutput {
	return o
}

func (o TlsCertificateResponseOutput) ToTlsCertificateResponseOutputWithContext(ctx context.Context) TlsCertificateResponseOutput {
	return o
}

// PEM representation.
func (o TlsCertificateResponseOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.Cert }).(pulumi.StringOutput)
}

// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
func (o TlsCertificateResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
func (o TlsCertificateResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Serial number, as extracted from the certificate.
func (o TlsCertificateResponseOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// Sha1 Fingerprint of the certificate.
func (o TlsCertificateResponseOutput) Sha1Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.Sha1Fingerprint }).(pulumi.StringOutput)
}

type TlsCertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (TlsCertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsCertificateResponse)(nil)).Elem()
}

func (o TlsCertificateResponseArrayOutput) ToTlsCertificateResponseArrayOutput() TlsCertificateResponseArrayOutput {
	return o
}

func (o TlsCertificateResponseArrayOutput) ToTlsCertificateResponseArrayOutputWithContext(ctx context.Context) TlsCertificateResponseArrayOutput {
	return o
}

func (o TlsCertificateResponseArrayOutput) Index(i pulumi.IntInput) TlsCertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsCertificateResponse {
		return vs[0].([]TlsCertificateResponse)[vs[1].(int)]
	}).(TlsCertificateResponseOutput)
}

// Represents information about an updating cluster.
type UpdateInfoResponse struct {
	// Target number of replica nodes per shard.
	TargetReplicaCount int `pulumi:"targetReplicaCount"`
	// Target number of shards for redis cluster
	TargetShardCount int `pulumi:"targetShardCount"`
}

// Represents information about an updating cluster.
type UpdateInfoResponseOutput struct{ *pulumi.OutputState }

func (UpdateInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpdateInfoResponse)(nil)).Elem()
}

func (o UpdateInfoResponseOutput) ToUpdateInfoResponseOutput() UpdateInfoResponseOutput {
	return o
}

func (o UpdateInfoResponseOutput) ToUpdateInfoResponseOutputWithContext(ctx context.Context) UpdateInfoResponseOutput {
	return o
}

// Target number of replica nodes per shard.
func (o UpdateInfoResponseOutput) TargetReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v UpdateInfoResponse) int { return v.TargetReplicaCount }).(pulumi.IntOutput)
}

// Target number of shards for redis cluster
func (o UpdateInfoResponseOutput) TargetShardCount() pulumi.IntOutput {
	return o.ApplyT(func(v UpdateInfoResponse) int { return v.TargetShardCount }).(pulumi.IntOutput)
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindow struct {
	// The day of week that maintenance updates occur.
	Day WeeklyMaintenanceWindowDay `pulumi:"day"`
	// Start time of the window in UTC time.
	StartTime TimeOfDay `pulumi:"startTime"`
}

// WeeklyMaintenanceWindowInput is an input type that accepts WeeklyMaintenanceWindowArgs and WeeklyMaintenanceWindowOutput values.
// You can construct a concrete instance of `WeeklyMaintenanceWindowInput` via:
//
//	WeeklyMaintenanceWindowArgs{...}
type WeeklyMaintenanceWindowInput interface {
	pulumi.Input

	ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput
	ToWeeklyMaintenanceWindowOutputWithContext(context.Context) WeeklyMaintenanceWindowOutput
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowArgs struct {
	// The day of week that maintenance updates occur.
	Day WeeklyMaintenanceWindowDayInput `pulumi:"day"`
	// Start time of the window in UTC time.
	StartTime TimeOfDayInput `pulumi:"startTime"`
}

func (WeeklyMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindow)(nil)).Elem()
}

func (i WeeklyMaintenanceWindowArgs) ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput {
	return i.ToWeeklyMaintenanceWindowOutputWithContext(context.Background())
}

func (i WeeklyMaintenanceWindowArgs) ToWeeklyMaintenanceWindowOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyMaintenanceWindowOutput)
}

// WeeklyMaintenanceWindowArrayInput is an input type that accepts WeeklyMaintenanceWindowArray and WeeklyMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `WeeklyMaintenanceWindowArrayInput` via:
//
//	WeeklyMaintenanceWindowArray{ WeeklyMaintenanceWindowArgs{...} }
type WeeklyMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput
	ToWeeklyMaintenanceWindowArrayOutputWithContext(context.Context) WeeklyMaintenanceWindowArrayOutput
}

type WeeklyMaintenanceWindowArray []WeeklyMaintenanceWindowInput

func (WeeklyMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindow)(nil)).Elem()
}

func (i WeeklyMaintenanceWindowArray) ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput {
	return i.ToWeeklyMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i WeeklyMaintenanceWindowArray) ToWeeklyMaintenanceWindowArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyMaintenanceWindowArrayOutput)
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindow)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowOutput) ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput {
	return o
}

func (o WeeklyMaintenanceWindowOutput) ToWeeklyMaintenanceWindowOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowOutput {
	return o
}

// The day of week that maintenance updates occur.
func (o WeeklyMaintenanceWindowOutput) Day() WeeklyMaintenanceWindowDayOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindow) WeeklyMaintenanceWindowDay { return v.Day }).(WeeklyMaintenanceWindowDayOutput)
}

// Start time of the window in UTC time.
func (o WeeklyMaintenanceWindowOutput) StartTime() TimeOfDayOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindow) TimeOfDay { return v.StartTime }).(TimeOfDayOutput)
}

type WeeklyMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindow)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowArrayOutput) ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowArrayOutput) ToWeeklyMaintenanceWindowArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) WeeklyMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeeklyMaintenanceWindow {
		return vs[0].([]WeeklyMaintenanceWindow)[vs[1].(int)]
	}).(WeeklyMaintenanceWindowOutput)
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowResponse struct {
	// The day of week that maintenance updates occur.
	Day string `pulumi:"day"`
	// Duration of the maintenance window. The current window is fixed at 1 hour.
	Duration string `pulumi:"duration"`
	// Start time of the window in UTC time.
	StartTime TimeOfDayResponse `pulumi:"startTime"`
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindowResponse)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowResponseOutput) ToWeeklyMaintenanceWindowResponseOutput() WeeklyMaintenanceWindowResponseOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseOutput) ToWeeklyMaintenanceWindowResponseOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowResponseOutput {
	return o
}

// The day of week that maintenance updates occur.
func (o WeeklyMaintenanceWindowResponseOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) string { return v.Day }).(pulumi.StringOutput)
}

// Duration of the maintenance window. The current window is fixed at 1 hour.
func (o WeeklyMaintenanceWindowResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Start time of the window in UTC time.
func (o WeeklyMaintenanceWindowResponseOutput) StartTime() TimeOfDayResponseOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) TimeOfDayResponse { return v.StartTime }).(TimeOfDayResponseOutput)
}

type WeeklyMaintenanceWindowResponseArrayOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindowResponse)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) ToWeeklyMaintenanceWindowResponseArrayOutput() WeeklyMaintenanceWindowResponseArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) ToWeeklyMaintenanceWindowResponseArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowResponseArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) Index(i pulumi.IntInput) WeeklyMaintenanceWindowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeeklyMaintenanceWindowResponse {
		return vs[0].([]WeeklyMaintenanceWindowResponse)[vs[1].(int)]
	}).(WeeklyMaintenanceWindowResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenancePolicyInput)(nil)).Elem(), MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenancePolicyPtrInput)(nil)).Elem(), MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistenceConfigInput)(nil)).Elem(), PersistenceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistenceConfigPtrInput)(nil)).Elem(), PersistenceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PscConfigInput)(nil)).Elem(), PscConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PscConfigArrayInput)(nil)).Elem(), PscConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOfDayInput)(nil)).Elem(), TimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyMaintenanceWindowInput)(nil)).Elem(), WeeklyMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyMaintenanceWindowArrayInput)(nil)).Elem(), WeeklyMaintenanceWindowArray{})
	pulumi.RegisterOutputType(DiscoveryEndpointResponseOutput{})
	pulumi.RegisterOutputType(DiscoveryEndpointResponseArrayOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyPtrOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceScheduleResponseOutput{})
	pulumi.RegisterOutputType(NodeInfoResponseOutput{})
	pulumi.RegisterOutputType(NodeInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PersistenceConfigOutput{})
	pulumi.RegisterOutputType(PersistenceConfigPtrOutput{})
	pulumi.RegisterOutputType(PersistenceConfigResponseOutput{})
	pulumi.RegisterOutputType(PscConfigOutput{})
	pulumi.RegisterOutputType(PscConfigArrayOutput{})
	pulumi.RegisterOutputType(PscConfigResponseOutput{})
	pulumi.RegisterOutputType(PscConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(PscConnectionResponseOutput{})
	pulumi.RegisterOutputType(PscConnectionResponseArrayOutput{})
	pulumi.RegisterOutputType(StateInfoResponseOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayResponseOutput{})
	pulumi.RegisterOutputType(TlsCertificateResponseOutput{})
	pulumi.RegisterOutputType(TlsCertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(UpdateInfoResponseOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowResponseArrayOutput{})
}
