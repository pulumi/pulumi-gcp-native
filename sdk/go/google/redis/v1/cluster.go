// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Redis cluster based on the specified properties. The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis cluster will be fully functional. The completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.
type Cluster struct {
	pulumi.CustomResourceState

	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	AuthorizationMode pulumi.StringOutput `pulumi:"authorizationMode"`
	// Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The timestamp associated with the cluster creation request.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
	DiscoveryEndpoints DiscoveryEndpointResponseArrayOutput `pulumi:"discoveryEndpoints"`
	Location           pulumi.StringOutput                  `pulumi:"location"`
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
	PscConfigs PscConfigResponseArrayOutput `pulumi:"pscConfigs"`
	// PSC connections for discovery of the cluster topology and accessing the cluster.
	PscConnections PscConnectionResponseArrayOutput `pulumi:"pscConnections"`
	// Optional. The number of replica nodes per shard.
	ReplicaCount pulumi.IntOutput `pulumi:"replicaCount"`
	// Idempotent request UUID.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Number of shards for the Redis cluster.
	ShardCount pulumi.IntOutput `pulumi:"shardCount"`
	// Redis memory size in GB for the entire cluster.
	SizeGb pulumi.IntOutput `pulumi:"sizeGb"`
	// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
	State pulumi.StringOutput `pulumi:"state"`
	// Additional information about the current state of the cluster.
	StateInfo StateInfoResponseOutput `pulumi:"stateInfo"`
	// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
	TransitEncryptionMode pulumi.StringOutput `pulumi:"transitEncryptionMode"`
	// System assigned, unique identifier for the cluster.
	Uid pulumi.StringOutput `pulumi:"uid"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.PscConfigs == nil {
		return nil, errors.New("invalid value for required argument 'PscConfigs'")
	}
	if args.ShardCount == nil {
		return nil, errors.New("invalid value for required argument 'ShardCount'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"clusterId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("google-native:redis/v1:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("google-native:redis/v1:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
}

type ClusterState struct {
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	AuthorizationMode *ClusterAuthorizationMode `pulumi:"authorizationMode"`
	// Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
	ClusterId string  `pulumi:"clusterId"`
	Location  *string `pulumi:"location"`
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
	PscConfigs []PscConfig `pulumi:"pscConfigs"`
	// Optional. The number of replica nodes per shard.
	ReplicaCount *int `pulumi:"replicaCount"`
	// Idempotent request UUID.
	RequestId *string `pulumi:"requestId"`
	// Number of shards for the Redis cluster.
	ShardCount int `pulumi:"shardCount"`
	// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
	TransitEncryptionMode *ClusterTransitEncryptionMode `pulumi:"transitEncryptionMode"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
	AuthorizationMode ClusterAuthorizationModePtrInput
	// Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
	ClusterId pulumi.StringInput
	Location  pulumi.StringPtrInput
	// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
	PscConfigs PscConfigArrayInput
	// Optional. The number of replica nodes per shard.
	ReplicaCount pulumi.IntPtrInput
	// Idempotent request UUID.
	RequestId pulumi.StringPtrInput
	// Number of shards for the Redis cluster.
	ShardCount pulumi.IntInput
	// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
	TransitEncryptionMode ClusterTransitEncryptionModePtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.
func (o ClusterOutput) AuthorizationMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AuthorizationMode }).(pulumi.StringOutput)
}

// Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location
func (o ClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The timestamp associated with the cluster creation request.
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.
func (o ClusterOutput) DiscoveryEndpoints() DiscoveryEndpointResponseArrayOutput {
	return o.ApplyT(func(v *Cluster) DiscoveryEndpointResponseArrayOutput { return v.DiscoveryEndpoints }).(DiscoveryEndpointResponseArrayOutput)
}

func (o ClusterOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.
func (o ClusterOutput) PscConfigs() PscConfigResponseArrayOutput {
	return o.ApplyT(func(v *Cluster) PscConfigResponseArrayOutput { return v.PscConfigs }).(PscConfigResponseArrayOutput)
}

// PSC connections for discovery of the cluster topology and accessing the cluster.
func (o ClusterOutput) PscConnections() PscConnectionResponseArrayOutput {
	return o.ApplyT(func(v *Cluster) PscConnectionResponseArrayOutput { return v.PscConnections }).(PscConnectionResponseArrayOutput)
}

// Optional. The number of replica nodes per shard.
func (o ClusterOutput) ReplicaCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ReplicaCount }).(pulumi.IntOutput)
}

// Idempotent request UUID.
func (o ClusterOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Number of shards for the Redis cluster.
func (o ClusterOutput) ShardCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ShardCount }).(pulumi.IntOutput)
}

// Redis memory size in GB for the entire cluster.
func (o ClusterOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.SizeGb }).(pulumi.IntOutput)
}

// The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED
func (o ClusterOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Additional information about the current state of the cluster.
func (o ClusterOutput) StateInfo() StateInfoResponseOutput {
	return o.ApplyT(func(v *Cluster) StateInfoResponseOutput { return v.StateInfo }).(StateInfoResponseOutput)
}

// Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.
func (o ClusterOutput) TransitEncryptionMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.TransitEncryptionMode }).(pulumi.StringOutput)
}

// System assigned, unique identifier for the cluster.
func (o ClusterOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterOutputType(ClusterOutput{})
}
