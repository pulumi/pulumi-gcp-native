// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// Maintenance policy for an instance.
type MaintenancePolicy struct {
	// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description *string `pulumi:"description"`
	// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindow `pulumi:"weeklyMaintenanceWindow"`
}

// MaintenancePolicyInput is an input type that accepts MaintenancePolicyArgs and MaintenancePolicyOutput values.
// You can construct a concrete instance of `MaintenancePolicyInput` via:
//
//	MaintenancePolicyArgs{...}
type MaintenancePolicyInput interface {
	pulumi.Input

	ToMaintenancePolicyOutput() MaintenancePolicyOutput
	ToMaintenancePolicyOutputWithContext(context.Context) MaintenancePolicyOutput
}

// Maintenance policy for an instance.
type MaintenancePolicyArgs struct {
	// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
	WeeklyMaintenanceWindow WeeklyMaintenanceWindowArrayInput `pulumi:"weeklyMaintenanceWindow"`
}

func (MaintenancePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return i.ToMaintenancePolicyOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput)
}

func (i MaintenancePolicyArgs) ToOutput(ctx context.Context) pulumix.Output[MaintenancePolicy] {
	return pulumix.Output[MaintenancePolicy]{
		OutputState: i.ToMaintenancePolicyOutputWithContext(ctx).OutputState,
	}
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i MaintenancePolicyArgs) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyOutput).ToMaintenancePolicyPtrOutputWithContext(ctx)
}

// MaintenancePolicyPtrInput is an input type that accepts MaintenancePolicyArgs, MaintenancePolicyPtr and MaintenancePolicyPtrOutput values.
// You can construct a concrete instance of `MaintenancePolicyPtrInput` via:
//
//	        MaintenancePolicyArgs{...}
//
//	or:
//
//	        nil
type MaintenancePolicyPtrInput interface {
	pulumi.Input

	ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput
	ToMaintenancePolicyPtrOutputWithContext(context.Context) MaintenancePolicyPtrOutput
}

type maintenancePolicyPtrType MaintenancePolicyArgs

func MaintenancePolicyPtr(v *MaintenancePolicyArgs) MaintenancePolicyPtrInput {
	return (*maintenancePolicyPtrType)(v)
}

func (*maintenancePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return i.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (i *maintenancePolicyPtrType) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenancePolicyPtrOutput)
}

func (i *maintenancePolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*MaintenancePolicy] {
	return pulumix.Output[*MaintenancePolicy]{
		OutputState: i.ToMaintenancePolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Maintenance policy for an instance.
type MaintenancePolicyOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutput() MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyOutputWithContext(ctx context.Context) MaintenancePolicyOutput {
	return o
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o.ToMaintenancePolicyPtrOutputWithContext(context.Background())
}

func (o MaintenancePolicyOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenancePolicy) *MaintenancePolicy {
		return &v
	}).(MaintenancePolicyPtrOutput)
}

func (o MaintenancePolicyOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenancePolicy] {
	return pulumix.Output[MaintenancePolicy]{
		OutputState: o.OutputState,
	}
}

// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o MaintenancePolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenancePolicy) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
func (o MaintenancePolicyOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v MaintenancePolicy) []WeeklyMaintenanceWindow { return v.WeeklyMaintenanceWindow }).(WeeklyMaintenanceWindowArrayOutput)
}

type MaintenancePolicyPtrOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenancePolicy)(nil)).Elem()
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutput() MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) ToMaintenancePolicyPtrOutputWithContext(ctx context.Context) MaintenancePolicyPtrOutput {
	return o
}

func (o MaintenancePolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MaintenancePolicy] {
	return pulumix.Output[*MaintenancePolicy]{
		OutputState: o.OutputState,
	}
}

func (o MaintenancePolicyPtrOutput) Elem() MaintenancePolicyOutput {
	return o.ApplyT(func(v *MaintenancePolicy) MaintenancePolicy {
		if v != nil {
			return *v
		}
		var ret MaintenancePolicy
		return ret
	}).(MaintenancePolicyOutput)
}

// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o MaintenancePolicyPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenancePolicy) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
func (o MaintenancePolicyPtrOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *MaintenancePolicy) []WeeklyMaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.WeeklyMaintenanceWindow
	}).(WeeklyMaintenanceWindowArrayOutput)
}

// Maintenance policy for an instance.
type MaintenancePolicyResponse struct {
	// The time when the policy was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
	Description string `pulumi:"description"`
	// The time when the policy was last updated.
	UpdateTime string `pulumi:"updateTime"`
	// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
	WeeklyMaintenanceWindow []WeeklyMaintenanceWindowResponse `pulumi:"weeklyMaintenanceWindow"`
}

// Maintenance policy for an instance.
type MaintenancePolicyResponseOutput struct{ *pulumi.OutputState }

func (MaintenancePolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenancePolicyResponse)(nil)).Elem()
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutput() MaintenancePolicyResponseOutput {
	return o
}

func (o MaintenancePolicyResponseOutput) ToMaintenancePolicyResponseOutputWithContext(ctx context.Context) MaintenancePolicyResponseOutput {
	return o
}

func (o MaintenancePolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenancePolicyResponse] {
	return pulumix.Output[MaintenancePolicyResponse]{
		OutputState: o.OutputState,
	}
}

// The time when the policy was created.
func (o MaintenancePolicyResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.
func (o MaintenancePolicyResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The time when the policy was last updated.
func (o MaintenancePolicyResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// Optional. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_window is expected to be one.
func (o MaintenancePolicyResponseOutput) WeeklyMaintenanceWindow() WeeklyMaintenanceWindowResponseArrayOutput {
	return o.ApplyT(func(v MaintenancePolicyResponse) []WeeklyMaintenanceWindowResponse { return v.WeeklyMaintenanceWindow }).(WeeklyMaintenanceWindowResponseArrayOutput)
}

// Upcoming maintenance schedule. If no maintenance is scheduled, fields are not populated.
type MaintenanceScheduleResponse struct {
	// If the scheduled maintenance can be rescheduled, default is true.
	CanReschedule bool `pulumi:"canReschedule"`
	// The end time of any upcoming scheduled maintenance for this instance.
	EndTime string `pulumi:"endTime"`
	// The deadline that the maintenance schedule start time can not go beyond, including reschedule.
	ScheduleDeadlineTime string `pulumi:"scheduleDeadlineTime"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime string `pulumi:"startTime"`
}

// Upcoming maintenance schedule. If no maintenance is scheduled, fields are not populated.
type MaintenanceScheduleResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceScheduleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceScheduleResponse)(nil)).Elem()
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutput() MaintenanceScheduleResponseOutput {
	return o
}

func (o MaintenanceScheduleResponseOutput) ToMaintenanceScheduleResponseOutputWithContext(ctx context.Context) MaintenanceScheduleResponseOutput {
	return o
}

func (o MaintenanceScheduleResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceScheduleResponse] {
	return pulumix.Output[MaintenanceScheduleResponse]{
		OutputState: o.OutputState,
	}
}

// If the scheduled maintenance can be rescheduled, default is true.
func (o MaintenanceScheduleResponseOutput) CanReschedule() pulumi.BoolOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) bool { return v.CanReschedule }).(pulumi.BoolOutput)
}

// The end time of any upcoming scheduled maintenance for this instance.
func (o MaintenanceScheduleResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// The deadline that the maintenance schedule start time can not go beyond, including reschedule.
func (o MaintenanceScheduleResponseOutput) ScheduleDeadlineTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.ScheduleDeadlineTime }).(pulumi.StringOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o MaintenanceScheduleResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceScheduleResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Node specific properties.
type NodeInfoResponse struct {
	// Location of the node.
	Zone string `pulumi:"zone"`
}

// Node specific properties.
type NodeInfoResponseOutput struct{ *pulumi.OutputState }

func (NodeInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeInfoResponse)(nil)).Elem()
}

func (o NodeInfoResponseOutput) ToNodeInfoResponseOutput() NodeInfoResponseOutput {
	return o
}

func (o NodeInfoResponseOutput) ToNodeInfoResponseOutputWithContext(ctx context.Context) NodeInfoResponseOutput {
	return o
}

func (o NodeInfoResponseOutput) ToOutput(ctx context.Context) pulumix.Output[NodeInfoResponse] {
	return pulumix.Output[NodeInfoResponse]{
		OutputState: o.OutputState,
	}
}

// Location of the node.
func (o NodeInfoResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v NodeInfoResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type NodeInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (NodeInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeInfoResponse)(nil)).Elem()
}

func (o NodeInfoResponseArrayOutput) ToNodeInfoResponseArrayOutput() NodeInfoResponseArrayOutput {
	return o
}

func (o NodeInfoResponseArrayOutput) ToNodeInfoResponseArrayOutputWithContext(ctx context.Context) NodeInfoResponseArrayOutput {
	return o
}

func (o NodeInfoResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NodeInfoResponse] {
	return pulumix.Output[[]NodeInfoResponse]{
		OutputState: o.OutputState,
	}
}

func (o NodeInfoResponseArrayOutput) Index(i pulumi.IntInput) NodeInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeInfoResponse {
		return vs[0].([]NodeInfoResponse)[vs[1].(int)]
	}).(NodeInfoResponseOutput)
}

// Configuration of the persistence functionality.
type PersistenceConfig struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode *PersistenceConfigPersistenceMode `pulumi:"persistenceMode"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod *PersistenceConfigRdbSnapshotPeriod `pulumi:"rdbSnapshotPeriod"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime *string `pulumi:"rdbSnapshotStartTime"`
}

// PersistenceConfigInput is an input type that accepts PersistenceConfigArgs and PersistenceConfigOutput values.
// You can construct a concrete instance of `PersistenceConfigInput` via:
//
//	PersistenceConfigArgs{...}
type PersistenceConfigInput interface {
	pulumi.Input

	ToPersistenceConfigOutput() PersistenceConfigOutput
	ToPersistenceConfigOutputWithContext(context.Context) PersistenceConfigOutput
}

// Configuration of the persistence functionality.
type PersistenceConfigArgs struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode PersistenceConfigPersistenceModePtrInput `pulumi:"persistenceMode"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod PersistenceConfigRdbSnapshotPeriodPtrInput `pulumi:"rdbSnapshotPeriod"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime pulumi.StringPtrInput `pulumi:"rdbSnapshotStartTime"`
}

func (PersistenceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfig)(nil)).Elem()
}

func (i PersistenceConfigArgs) ToPersistenceConfigOutput() PersistenceConfigOutput {
	return i.ToPersistenceConfigOutputWithContext(context.Background())
}

func (i PersistenceConfigArgs) ToPersistenceConfigOutputWithContext(ctx context.Context) PersistenceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigOutput)
}

func (i PersistenceConfigArgs) ToOutput(ctx context.Context) pulumix.Output[PersistenceConfig] {
	return pulumix.Output[PersistenceConfig]{
		OutputState: i.ToPersistenceConfigOutputWithContext(ctx).OutputState,
	}
}

func (i PersistenceConfigArgs) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return i.ToPersistenceConfigPtrOutputWithContext(context.Background())
}

func (i PersistenceConfigArgs) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigOutput).ToPersistenceConfigPtrOutputWithContext(ctx)
}

// PersistenceConfigPtrInput is an input type that accepts PersistenceConfigArgs, PersistenceConfigPtr and PersistenceConfigPtrOutput values.
// You can construct a concrete instance of `PersistenceConfigPtrInput` via:
//
//	        PersistenceConfigArgs{...}
//
//	or:
//
//	        nil
type PersistenceConfigPtrInput interface {
	pulumi.Input

	ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput
	ToPersistenceConfigPtrOutputWithContext(context.Context) PersistenceConfigPtrOutput
}

type persistenceConfigPtrType PersistenceConfigArgs

func PersistenceConfigPtr(v *PersistenceConfigArgs) PersistenceConfigPtrInput {
	return (*persistenceConfigPtrType)(v)
}

func (*persistenceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfig)(nil)).Elem()
}

func (i *persistenceConfigPtrType) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return i.ToPersistenceConfigPtrOutputWithContext(context.Background())
}

func (i *persistenceConfigPtrType) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistenceConfigPtrOutput)
}

func (i *persistenceConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*PersistenceConfig] {
	return pulumix.Output[*PersistenceConfig]{
		OutputState: i.ToPersistenceConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Configuration of the persistence functionality.
type PersistenceConfigOutput struct{ *pulumi.OutputState }

func (PersistenceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfig)(nil)).Elem()
}

func (o PersistenceConfigOutput) ToPersistenceConfigOutput() PersistenceConfigOutput {
	return o
}

func (o PersistenceConfigOutput) ToPersistenceConfigOutputWithContext(ctx context.Context) PersistenceConfigOutput {
	return o
}

func (o PersistenceConfigOutput) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return o.ToPersistenceConfigPtrOutputWithContext(context.Background())
}

func (o PersistenceConfigOutput) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PersistenceConfig) *PersistenceConfig {
		return &v
	}).(PersistenceConfigPtrOutput)
}

func (o PersistenceConfigOutput) ToOutput(ctx context.Context) pulumix.Output[PersistenceConfig] {
	return pulumix.Output[PersistenceConfig]{
		OutputState: o.OutputState,
	}
}

// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
func (o PersistenceConfigOutput) PersistenceMode() PersistenceConfigPersistenceModePtrOutput {
	return o.ApplyT(func(v PersistenceConfig) *PersistenceConfigPersistenceMode { return v.PersistenceMode }).(PersistenceConfigPersistenceModePtrOutput)
}

// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
func (o PersistenceConfigOutput) RdbSnapshotPeriod() PersistenceConfigRdbSnapshotPeriodPtrOutput {
	return o.ApplyT(func(v PersistenceConfig) *PersistenceConfigRdbSnapshotPeriod { return v.RdbSnapshotPeriod }).(PersistenceConfigRdbSnapshotPeriodPtrOutput)
}

// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
func (o PersistenceConfigOutput) RdbSnapshotStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistenceConfig) *string { return v.RdbSnapshotStartTime }).(pulumi.StringPtrOutput)
}

type PersistenceConfigPtrOutput struct{ *pulumi.OutputState }

func (PersistenceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PersistenceConfig)(nil)).Elem()
}

func (o PersistenceConfigPtrOutput) ToPersistenceConfigPtrOutput() PersistenceConfigPtrOutput {
	return o
}

func (o PersistenceConfigPtrOutput) ToPersistenceConfigPtrOutputWithContext(ctx context.Context) PersistenceConfigPtrOutput {
	return o
}

func (o PersistenceConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PersistenceConfig] {
	return pulumix.Output[*PersistenceConfig]{
		OutputState: o.OutputState,
	}
}

func (o PersistenceConfigPtrOutput) Elem() PersistenceConfigOutput {
	return o.ApplyT(func(v *PersistenceConfig) PersistenceConfig {
		if v != nil {
			return *v
		}
		var ret PersistenceConfig
		return ret
	}).(PersistenceConfigOutput)
}

// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
func (o PersistenceConfigPtrOutput) PersistenceMode() PersistenceConfigPersistenceModePtrOutput {
	return o.ApplyT(func(v *PersistenceConfig) *PersistenceConfigPersistenceMode {
		if v == nil {
			return nil
		}
		return v.PersistenceMode
	}).(PersistenceConfigPersistenceModePtrOutput)
}

// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
func (o PersistenceConfigPtrOutput) RdbSnapshotPeriod() PersistenceConfigRdbSnapshotPeriodPtrOutput {
	return o.ApplyT(func(v *PersistenceConfig) *PersistenceConfigRdbSnapshotPeriod {
		if v == nil {
			return nil
		}
		return v.RdbSnapshotPeriod
	}).(PersistenceConfigRdbSnapshotPeriodPtrOutput)
}

// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
func (o PersistenceConfigPtrOutput) RdbSnapshotStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PersistenceConfig) *string {
		if v == nil {
			return nil
		}
		return v.RdbSnapshotStartTime
	}).(pulumi.StringPtrOutput)
}

// Configuration of the persistence functionality.
type PersistenceConfigResponse struct {
	// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
	PersistenceMode string `pulumi:"persistenceMode"`
	// The next time that a snapshot attempt is scheduled to occur.
	RdbNextSnapshotTime string `pulumi:"rdbNextSnapshotTime"`
	// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
	RdbSnapshotPeriod string `pulumi:"rdbSnapshotPeriod"`
	// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
	RdbSnapshotStartTime string `pulumi:"rdbSnapshotStartTime"`
}

// Configuration of the persistence functionality.
type PersistenceConfigResponseOutput struct{ *pulumi.OutputState }

func (PersistenceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistenceConfigResponse)(nil)).Elem()
}

func (o PersistenceConfigResponseOutput) ToPersistenceConfigResponseOutput() PersistenceConfigResponseOutput {
	return o
}

func (o PersistenceConfigResponseOutput) ToPersistenceConfigResponseOutputWithContext(ctx context.Context) PersistenceConfigResponseOutput {
	return o
}

func (o PersistenceConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PersistenceConfigResponse] {
	return pulumix.Output[PersistenceConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
func (o PersistenceConfigResponseOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.PersistenceMode }).(pulumi.StringOutput)
}

// The next time that a snapshot attempt is scheduled to occur.
func (o PersistenceConfigResponseOutput) RdbNextSnapshotTime() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.RdbNextSnapshotTime }).(pulumi.StringOutput)
}

// Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default.
func (o PersistenceConfigResponseOutput) RdbSnapshotPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.RdbSnapshotPeriod }).(pulumi.StringOutput)
}

// Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used.
func (o PersistenceConfigResponseOutput) RdbSnapshotStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v PersistenceConfigResponse) string { return v.RdbSnapshotStartTime }).(pulumi.StringOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours *int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes *int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos *int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds *int `pulumi:"seconds"`
}

// TimeOfDayInput is an input type that accepts TimeOfDayArgs and TimeOfDayOutput values.
// You can construct a concrete instance of `TimeOfDayInput` via:
//
//	TimeOfDayArgs{...}
type TimeOfDayInput interface {
	pulumi.Input

	ToTimeOfDayOutput() TimeOfDayOutput
	ToTimeOfDayOutputWithContext(context.Context) TimeOfDayOutput
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayArgs struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours pulumi.IntPtrInput `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes pulumi.IntPtrInput `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds pulumi.IntPtrInput `pulumi:"seconds"`
}

func (TimeOfDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (i TimeOfDayArgs) ToTimeOfDayOutput() TimeOfDayOutput {
	return i.ToTimeOfDayOutputWithContext(context.Background())
}

func (i TimeOfDayArgs) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeOfDayOutput)
}

func (i TimeOfDayArgs) ToOutput(ctx context.Context) pulumix.Output[TimeOfDay] {
	return pulumix.Output[TimeOfDay]{
		OutputState: i.ToTimeOfDayOutputWithContext(ctx).OutputState,
	}
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayOutput struct{ *pulumi.OutputState }

func (TimeOfDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDay)(nil)).Elem()
}

func (o TimeOfDayOutput) ToTimeOfDayOutput() TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToTimeOfDayOutputWithContext(ctx context.Context) TimeOfDayOutput {
	return o
}

func (o TimeOfDayOutput) ToOutput(ctx context.Context) pulumix.Output[TimeOfDay] {
	return pulumix.Output[TimeOfDay]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayOutput) Hours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Hours }).(pulumi.IntPtrOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayOutput) Minutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Minutes }).(pulumi.IntPtrOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayOutput) Seconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TimeOfDay) *int { return v.Seconds }).(pulumi.IntPtrOutput)
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponse struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
	Hours int `pulumi:"hours"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int `pulumi:"minutes"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int `pulumi:"nanos"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
	Seconds int `pulumi:"seconds"`
}

// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
type TimeOfDayResponseOutput struct{ *pulumi.OutputState }

func (TimeOfDayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeOfDayResponse)(nil)).Elem()
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutput() TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToTimeOfDayResponseOutputWithContext(ctx context.Context) TimeOfDayResponseOutput {
	return o
}

func (o TimeOfDayResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TimeOfDayResponse] {
	return pulumix.Output[TimeOfDayResponse]{
		OutputState: o.OutputState,
	}
}

// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
func (o TimeOfDayResponseOutput) Hours() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Hours }).(pulumi.IntOutput)
}

// Minutes of hour of day. Must be from 0 to 59.
func (o TimeOfDayResponseOutput) Minutes() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Minutes }).(pulumi.IntOutput)
}

// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
func (o TimeOfDayResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
func (o TimeOfDayResponseOutput) Seconds() pulumi.IntOutput {
	return o.ApplyT(func(v TimeOfDayResponse) int { return v.Seconds }).(pulumi.IntOutput)
}

// TlsCertificate Resource
type TlsCertificateResponse struct {
	// PEM representation.
	Cert string `pulumi:"cert"`
	// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	CreateTime string `pulumi:"createTime"`
	// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
	ExpireTime string `pulumi:"expireTime"`
	// Serial number, as extracted from the certificate.
	SerialNumber string `pulumi:"serialNumber"`
	// Sha1 Fingerprint of the certificate.
	Sha1Fingerprint string `pulumi:"sha1Fingerprint"`
}

// TlsCertificate Resource
type TlsCertificateResponseOutput struct{ *pulumi.OutputState }

func (TlsCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificateResponse)(nil)).Elem()
}

func (o TlsCertificateResponseOutput) ToTlsCertificateResponseOutput() TlsCertificateResponseOutput {
	return o
}

func (o TlsCertificateResponseOutput) ToTlsCertificateResponseOutputWithContext(ctx context.Context) TlsCertificateResponseOutput {
	return o
}

func (o TlsCertificateResponseOutput) ToOutput(ctx context.Context) pulumix.Output[TlsCertificateResponse] {
	return pulumix.Output[TlsCertificateResponse]{
		OutputState: o.OutputState,
	}
}

// PEM representation.
func (o TlsCertificateResponseOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.Cert }).(pulumi.StringOutput)
}

// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
func (o TlsCertificateResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2020-05-18T00:00:00.094Z`.
func (o TlsCertificateResponseOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Serial number, as extracted from the certificate.
func (o TlsCertificateResponseOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// Sha1 Fingerprint of the certificate.
func (o TlsCertificateResponseOutput) Sha1Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v TlsCertificateResponse) string { return v.Sha1Fingerprint }).(pulumi.StringOutput)
}

type TlsCertificateResponseArrayOutput struct{ *pulumi.OutputState }

func (TlsCertificateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsCertificateResponse)(nil)).Elem()
}

func (o TlsCertificateResponseArrayOutput) ToTlsCertificateResponseArrayOutput() TlsCertificateResponseArrayOutput {
	return o
}

func (o TlsCertificateResponseArrayOutput) ToTlsCertificateResponseArrayOutputWithContext(ctx context.Context) TlsCertificateResponseArrayOutput {
	return o
}

func (o TlsCertificateResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TlsCertificateResponse] {
	return pulumix.Output[[]TlsCertificateResponse]{
		OutputState: o.OutputState,
	}
}

func (o TlsCertificateResponseArrayOutput) Index(i pulumi.IntInput) TlsCertificateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsCertificateResponse {
		return vs[0].([]TlsCertificateResponse)[vs[1].(int)]
	}).(TlsCertificateResponseOutput)
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindow struct {
	// The day of week that maintenance updates occur.
	Day WeeklyMaintenanceWindowDay `pulumi:"day"`
	// Start time of the window in UTC time.
	StartTime TimeOfDay `pulumi:"startTime"`
}

// WeeklyMaintenanceWindowInput is an input type that accepts WeeklyMaintenanceWindowArgs and WeeklyMaintenanceWindowOutput values.
// You can construct a concrete instance of `WeeklyMaintenanceWindowInput` via:
//
//	WeeklyMaintenanceWindowArgs{...}
type WeeklyMaintenanceWindowInput interface {
	pulumi.Input

	ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput
	ToWeeklyMaintenanceWindowOutputWithContext(context.Context) WeeklyMaintenanceWindowOutput
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowArgs struct {
	// The day of week that maintenance updates occur.
	Day WeeklyMaintenanceWindowDayInput `pulumi:"day"`
	// Start time of the window in UTC time.
	StartTime TimeOfDayInput `pulumi:"startTime"`
}

func (WeeklyMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindow)(nil)).Elem()
}

func (i WeeklyMaintenanceWindowArgs) ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput {
	return i.ToWeeklyMaintenanceWindowOutputWithContext(context.Background())
}

func (i WeeklyMaintenanceWindowArgs) ToWeeklyMaintenanceWindowOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyMaintenanceWindowOutput)
}

func (i WeeklyMaintenanceWindowArgs) ToOutput(ctx context.Context) pulumix.Output[WeeklyMaintenanceWindow] {
	return pulumix.Output[WeeklyMaintenanceWindow]{
		OutputState: i.ToWeeklyMaintenanceWindowOutputWithContext(ctx).OutputState,
	}
}

// WeeklyMaintenanceWindowArrayInput is an input type that accepts WeeklyMaintenanceWindowArray and WeeklyMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `WeeklyMaintenanceWindowArrayInput` via:
//
//	WeeklyMaintenanceWindowArray{ WeeklyMaintenanceWindowArgs{...} }
type WeeklyMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput
	ToWeeklyMaintenanceWindowArrayOutputWithContext(context.Context) WeeklyMaintenanceWindowArrayOutput
}

type WeeklyMaintenanceWindowArray []WeeklyMaintenanceWindowInput

func (WeeklyMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindow)(nil)).Elem()
}

func (i WeeklyMaintenanceWindowArray) ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput {
	return i.ToWeeklyMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i WeeklyMaintenanceWindowArray) ToWeeklyMaintenanceWindowArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WeeklyMaintenanceWindowArrayOutput)
}

func (i WeeklyMaintenanceWindowArray) ToOutput(ctx context.Context) pulumix.Output[[]WeeklyMaintenanceWindow] {
	return pulumix.Output[[]WeeklyMaintenanceWindow]{
		OutputState: i.ToWeeklyMaintenanceWindowArrayOutputWithContext(ctx).OutputState,
	}
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindow)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowOutput) ToWeeklyMaintenanceWindowOutput() WeeklyMaintenanceWindowOutput {
	return o
}

func (o WeeklyMaintenanceWindowOutput) ToWeeklyMaintenanceWindowOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowOutput {
	return o
}

func (o WeeklyMaintenanceWindowOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklyMaintenanceWindow] {
	return pulumix.Output[WeeklyMaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

// The day of week that maintenance updates occur.
func (o WeeklyMaintenanceWindowOutput) Day() WeeklyMaintenanceWindowDayOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindow) WeeklyMaintenanceWindowDay { return v.Day }).(WeeklyMaintenanceWindowDayOutput)
}

// Start time of the window in UTC time.
func (o WeeklyMaintenanceWindowOutput) StartTime() TimeOfDayOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindow) TimeOfDay { return v.StartTime }).(TimeOfDayOutput)
}

type WeeklyMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindow)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowArrayOutput) ToWeeklyMaintenanceWindowArrayOutput() WeeklyMaintenanceWindowArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowArrayOutput) ToWeeklyMaintenanceWindowArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WeeklyMaintenanceWindow] {
	return pulumix.Output[[]WeeklyMaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

func (o WeeklyMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) WeeklyMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeeklyMaintenanceWindow {
		return vs[0].([]WeeklyMaintenanceWindow)[vs[1].(int)]
	}).(WeeklyMaintenanceWindowOutput)
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowResponse struct {
	// The day of week that maintenance updates occur.
	Day string `pulumi:"day"`
	// Duration of the maintenance window. The current window is fixed at 1 hour.
	Duration string `pulumi:"duration"`
	// Start time of the window in UTC time.
	StartTime TimeOfDayResponse `pulumi:"startTime"`
}

// Time window in which disruptive maintenance updates occur. Non-disruptive updates can occur inside or outside this window.
type WeeklyMaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WeeklyMaintenanceWindowResponse)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowResponseOutput) ToWeeklyMaintenanceWindowResponseOutput() WeeklyMaintenanceWindowResponseOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseOutput) ToWeeklyMaintenanceWindowResponseOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowResponseOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseOutput) ToOutput(ctx context.Context) pulumix.Output[WeeklyMaintenanceWindowResponse] {
	return pulumix.Output[WeeklyMaintenanceWindowResponse]{
		OutputState: o.OutputState,
	}
}

// The day of week that maintenance updates occur.
func (o WeeklyMaintenanceWindowResponseOutput) Day() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) string { return v.Day }).(pulumi.StringOutput)
}

// Duration of the maintenance window. The current window is fixed at 1 hour.
func (o WeeklyMaintenanceWindowResponseOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) string { return v.Duration }).(pulumi.StringOutput)
}

// Start time of the window in UTC time.
func (o WeeklyMaintenanceWindowResponseOutput) StartTime() TimeOfDayResponseOutput {
	return o.ApplyT(func(v WeeklyMaintenanceWindowResponse) TimeOfDayResponse { return v.StartTime }).(TimeOfDayResponseOutput)
}

type WeeklyMaintenanceWindowResponseArrayOutput struct{ *pulumi.OutputState }

func (WeeklyMaintenanceWindowResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WeeklyMaintenanceWindowResponse)(nil)).Elem()
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) ToWeeklyMaintenanceWindowResponseArrayOutput() WeeklyMaintenanceWindowResponseArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) ToWeeklyMaintenanceWindowResponseArrayOutputWithContext(ctx context.Context) WeeklyMaintenanceWindowResponseArrayOutput {
	return o
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]WeeklyMaintenanceWindowResponse] {
	return pulumix.Output[[]WeeklyMaintenanceWindowResponse]{
		OutputState: o.OutputState,
	}
}

func (o WeeklyMaintenanceWindowResponseArrayOutput) Index(i pulumi.IntInput) WeeklyMaintenanceWindowResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WeeklyMaintenanceWindowResponse {
		return vs[0].([]WeeklyMaintenanceWindowResponse)[vs[1].(int)]
	}).(WeeklyMaintenanceWindowResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenancePolicyInput)(nil)).Elem(), MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenancePolicyPtrInput)(nil)).Elem(), MaintenancePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistenceConfigInput)(nil)).Elem(), PersistenceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistenceConfigPtrInput)(nil)).Elem(), PersistenceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeOfDayInput)(nil)).Elem(), TimeOfDayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyMaintenanceWindowInput)(nil)).Elem(), WeeklyMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WeeklyMaintenanceWindowArrayInput)(nil)).Elem(), WeeklyMaintenanceWindowArray{})
	pulumi.RegisterOutputType(MaintenancePolicyOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyPtrOutput{})
	pulumi.RegisterOutputType(MaintenancePolicyResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceScheduleResponseOutput{})
	pulumi.RegisterOutputType(NodeInfoResponseOutput{})
	pulumi.RegisterOutputType(NodeInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(PersistenceConfigOutput{})
	pulumi.RegisterOutputType(PersistenceConfigPtrOutput{})
	pulumi.RegisterOutputType(PersistenceConfigResponseOutput{})
	pulumi.RegisterOutputType(TimeOfDayOutput{})
	pulumi.RegisterOutputType(TimeOfDayResponseOutput{})
	pulumi.RegisterOutputType(TlsCertificateResponseOutput{})
	pulumi.RegisterOutputType(TlsCertificateResponseArrayOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(WeeklyMaintenanceWindowResponseArrayOutput{})
}
