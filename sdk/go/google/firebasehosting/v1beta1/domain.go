// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a domain mapping on the specified site.
// Auto-naming is currently not supported for this resource.
type Domain struct {
	pulumi.CustomResourceState

	// The domain name of the association.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// If set, the domain should redirect with the provided parameters.
	DomainRedirect DomainRedirectResponseOutput `pulumi:"domainRedirect"`
	Project        pulumi.StringOutput          `pulumi:"project"`
	// Information about the provisioning of certificates and the health of the DNS resolution for the domain.
	Provisioning DomainProvisioningResponseOutput `pulumi:"provisioning"`
	// The site name of the association.
	Site   pulumi.StringOutput `pulumi:"site"`
	SiteId pulumi.StringOutput `pulumi:"siteId"`
	// Additional status of the domain association.
	Status pulumi.StringOutput `pulumi:"status"`
	// The time at which the domain was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Site == nil {
		return nil, errors.New("invalid value for required argument 'Site'")
	}
	if args.SiteId == nil {
		return nil, errors.New("invalid value for required argument 'SiteId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
		"siteId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("google-native:firebasehosting/v1beta1:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("google-native:firebasehosting/v1beta1:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
}

type DomainState struct {
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// The domain name of the association.
	DomainName string `pulumi:"domainName"`
	// If set, the domain should redirect with the provided parameters.
	DomainRedirect *DomainRedirect `pulumi:"domainRedirect"`
	Project        *string         `pulumi:"project"`
	// The site name of the association.
	Site   string `pulumi:"site"`
	SiteId string `pulumi:"siteId"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// The domain name of the association.
	DomainName pulumi.StringInput
	// If set, the domain should redirect with the provided parameters.
	DomainRedirect DomainRedirectPtrInput
	Project        pulumi.StringPtrInput
	// The site name of the association.
	Site   pulumi.StringInput
	SiteId pulumi.StringInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

// The domain name of the association.
func (o DomainOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// If set, the domain should redirect with the provided parameters.
func (o DomainOutput) DomainRedirect() DomainRedirectResponseOutput {
	return o.ApplyT(func(v *Domain) DomainRedirectResponseOutput { return v.DomainRedirect }).(DomainRedirectResponseOutput)
}

func (o DomainOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Information about the provisioning of certificates and the health of the DNS resolution for the domain.
func (o DomainOutput) Provisioning() DomainProvisioningResponseOutput {
	return o.ApplyT(func(v *Domain) DomainProvisioningResponseOutput { return v.Provisioning }).(DomainProvisioningResponseOutput)
}

// The site name of the association.
func (o DomainOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

func (o DomainOutput) SiteId() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.SiteId }).(pulumi.StringOutput)
}

// Additional status of the domain association.
func (o DomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The time at which the domain was last updated.
func (o DomainOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterOutputType(DomainOutput{})
}
