// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new version for the specified site.
type SiteVersion struct {
	pulumi.CustomResourceState
}

// NewSiteVersion registers a new resource with the given unique name, arguments, and options.
func NewSiteVersion(ctx *pulumi.Context,
	name string, args *SiteVersionArgs, opts ...pulumi.ResourceOption) (*SiteVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SitesId == nil {
		return nil, errors.New("invalid value for required argument 'SitesId'")
	}
	if args.VersionsId == nil {
		return nil, errors.New("invalid value for required argument 'VersionsId'")
	}
	var resource SiteVersion
	err := ctx.RegisterResource("google-cloud:firebasehosting/v1beta1:SiteVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSiteVersion gets an existing SiteVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSiteVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SiteVersionState, opts ...pulumi.ResourceOption) (*SiteVersion, error) {
	var resource SiteVersion
	err := ctx.ReadResource("google-cloud:firebasehosting/v1beta1:SiteVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SiteVersion resources.
type siteVersionState struct {
}

type SiteVersionState struct {
}

func (SiteVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*siteVersionState)(nil)).Elem()
}

type siteVersionArgs struct {
	// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
	Config *ServingConfig `pulumi:"config"`
	// The time at which the version was created.
	CreateTime *string `pulumi:"createTime"`
	// Identifies the user who created the version.
	CreateUser *ActingUser `pulumi:"createUser"`
	// The time at which the version was `DELETED`.
	DeleteTime *string `pulumi:"deleteTime"`
	// Identifies the user who `DELETED` the version.
	DeleteUser *ActingUser `pulumi:"deleteUser"`
	// The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
	FileCount *string `pulumi:"fileCount"`
	// The time at which the version was `FINALIZED`.
	FinalizeTime *string `pulumi:"finalizeTime"`
	// Identifies the user who `FINALIZED` the version.
	FinalizeUser *ActingUser `pulumi:"finalizeUser"`
	// The labels used for extra metadata and/or filtering.
	Labels map[string]string `pulumi:"labels"`
	// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
	Name *string `pulumi:"name"`
	// Deprecated in favor of [site channels](sites.channels).
	Preview *PreviewConfig `pulumi:"preview"`
	SitesId string         `pulumi:"sitesId"`
	// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
	Status *string `pulumi:"status"`
	// The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
	VersionBytes *string `pulumi:"versionBytes"`
	VersionsId   string  `pulumi:"versionsId"`
}

// The set of arguments for constructing a SiteVersion resource.
type SiteVersionArgs struct {
	// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
	Config ServingConfigPtrInput
	// The time at which the version was created.
	CreateTime pulumi.StringPtrInput
	// Identifies the user who created the version.
	CreateUser ActingUserPtrInput
	// The time at which the version was `DELETED`.
	DeleteTime pulumi.StringPtrInput
	// Identifies the user who `DELETED` the version.
	DeleteUser ActingUserPtrInput
	// The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
	FileCount pulumi.StringPtrInput
	// The time at which the version was `FINALIZED`.
	FinalizeTime pulumi.StringPtrInput
	// Identifies the user who `FINALIZED` the version.
	FinalizeUser ActingUserPtrInput
	// The labels used for extra metadata and/or filtering.
	Labels pulumi.StringMapInput
	// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
	Name pulumi.StringPtrInput
	// Deprecated in favor of [site channels](sites.channels).
	Preview PreviewConfigPtrInput
	SitesId pulumi.StringInput
	// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
	Status pulumi.StringPtrInput
	// The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
	VersionBytes pulumi.StringPtrInput
	VersionsId   pulumi.StringInput
}

func (SiteVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*siteVersionArgs)(nil)).Elem()
}

type SiteVersionInput interface {
	pulumi.Input

	ToSiteVersionOutput() SiteVersionOutput
	ToSiteVersionOutputWithContext(ctx context.Context) SiteVersionOutput
}

func (*SiteVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteVersion)(nil))
}

func (i *SiteVersion) ToSiteVersionOutput() SiteVersionOutput {
	return i.ToSiteVersionOutputWithContext(context.Background())
}

func (i *SiteVersion) ToSiteVersionOutputWithContext(ctx context.Context) SiteVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SiteVersionOutput)
}

type SiteVersionOutput struct {
	*pulumi.OutputState
}

func (SiteVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SiteVersion)(nil))
}

func (o SiteVersionOutput) ToSiteVersionOutput() SiteVersionOutput {
	return o
}

func (o SiteVersionOutput) ToSiteVersionOutputWithContext(ctx context.Context) SiteVersionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SiteVersionOutput{})
}
