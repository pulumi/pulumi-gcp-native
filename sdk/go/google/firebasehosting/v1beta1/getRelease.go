// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets the specified release for a site or channel. When used to get a release for a site, this can get releases for both the default `live` channel and any active preview channels for the specified site.
func LookupRelease(ctx *pulumi.Context, args *LookupReleaseArgs, opts ...pulumi.InvokeOption) (*LookupReleaseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReleaseResult
	err := ctx.Invoke("google-native:firebasehosting/v1beta1:getRelease", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupReleaseArgs struct {
	ChannelId string  `pulumi:"channelId"`
	Project   *string `pulumi:"project"`
	ReleaseId string  `pulumi:"releaseId"`
	SiteId    string  `pulumi:"siteId"`
}

type LookupReleaseResult struct {
	// The deploy description when the release was created. The value can be up to 512 characters.
	Message string `pulumi:"message"`
	// The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
	Name string `pulumi:"name"`
	// The time at which the version is set to be public.
	ReleaseTime string `pulumi:"releaseTime"`
	// Identifies the user who created the release.
	ReleaseUser ActingUserResponse `pulumi:"releaseUser"`
	// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
	Type string `pulumi:"type"`
	// The configuration and content that was released.
	Version VersionResponse `pulumi:"version"`
}

func LookupReleaseOutput(ctx *pulumi.Context, args LookupReleaseOutputArgs, opts ...pulumi.InvokeOption) LookupReleaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReleaseResult, error) {
			args := v.(LookupReleaseArgs)
			r, err := LookupRelease(ctx, &args, opts...)
			var s LookupReleaseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupReleaseResultOutput)
}

type LookupReleaseOutputArgs struct {
	ChannelId pulumi.StringInput    `pulumi:"channelId"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	ReleaseId pulumi.StringInput    `pulumi:"releaseId"`
	SiteId    pulumi.StringInput    `pulumi:"siteId"`
}

func (LookupReleaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReleaseArgs)(nil)).Elem()
}

type LookupReleaseResultOutput struct{ *pulumi.OutputState }

func (LookupReleaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReleaseResult)(nil)).Elem()
}

func (o LookupReleaseResultOutput) ToLookupReleaseResultOutput() LookupReleaseResultOutput {
	return o
}

func (o LookupReleaseResultOutput) ToLookupReleaseResultOutputWithContext(ctx context.Context) LookupReleaseResultOutput {
	return o
}

func (o LookupReleaseResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupReleaseResult] {
	return pulumix.Output[LookupReleaseResult]{
		OutputState: o.OutputState,
	}
}

// The deploy description when the release was created. The value can be up to 512 characters.
func (o LookupReleaseResultOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.Message }).(pulumi.StringOutput)
}

// The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
func (o LookupReleaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The time at which the version is set to be public.
func (o LookupReleaseResultOutput) ReleaseTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.ReleaseTime }).(pulumi.StringOutput)
}

// Identifies the user who created the release.
func (o LookupReleaseResultOutput) ReleaseUser() ActingUserResponseOutput {
	return o.ApplyT(func(v LookupReleaseResult) ActingUserResponse { return v.ReleaseUser }).(ActingUserResponseOutput)
}

// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
func (o LookupReleaseResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReleaseResult) string { return v.Type }).(pulumi.StringOutput)
}

// The configuration and content that was released.
func (o LookupReleaseResultOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v LookupReleaseResult) VersionResponse { return v.Version }).(VersionResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReleaseResultOutput{})
}
