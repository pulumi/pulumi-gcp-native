// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
type ActingUser struct {
	// The email address of the user when the user performed the action.
	Email *string `pulumi:"email"`
	// A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
	ImageUrl *string `pulumi:"imageUrl"`
}

// ActingUserInput is an input type that accepts ActingUserArgs and ActingUserOutput values.
// You can construct a concrete instance of `ActingUserInput` via:
//
//          ActingUserArgs{...}
type ActingUserInput interface {
	pulumi.Input

	ToActingUserOutput() ActingUserOutput
	ToActingUserOutputWithContext(context.Context) ActingUserOutput
}

// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
type ActingUserArgs struct {
	// The email address of the user when the user performed the action.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
	ImageUrl pulumi.StringPtrInput `pulumi:"imageUrl"`
}

func (ActingUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActingUser)(nil)).Elem()
}

func (i ActingUserArgs) ToActingUserOutput() ActingUserOutput {
	return i.ToActingUserOutputWithContext(context.Background())
}

func (i ActingUserArgs) ToActingUserOutputWithContext(ctx context.Context) ActingUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActingUserOutput)
}

func (i ActingUserArgs) ToActingUserPtrOutput() ActingUserPtrOutput {
	return i.ToActingUserPtrOutputWithContext(context.Background())
}

func (i ActingUserArgs) ToActingUserPtrOutputWithContext(ctx context.Context) ActingUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActingUserOutput).ToActingUserPtrOutputWithContext(ctx)
}

// ActingUserPtrInput is an input type that accepts ActingUserArgs, ActingUserPtr and ActingUserPtrOutput values.
// You can construct a concrete instance of `ActingUserPtrInput` via:
//
//          ActingUserArgs{...}
//
//  or:
//
//          nil
type ActingUserPtrInput interface {
	pulumi.Input

	ToActingUserPtrOutput() ActingUserPtrOutput
	ToActingUserPtrOutputWithContext(context.Context) ActingUserPtrOutput
}

type actingUserPtrType ActingUserArgs

func ActingUserPtr(v *ActingUserArgs) ActingUserPtrInput {
	return (*actingUserPtrType)(v)
}

func (*actingUserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActingUser)(nil)).Elem()
}

func (i *actingUserPtrType) ToActingUserPtrOutput() ActingUserPtrOutput {
	return i.ToActingUserPtrOutputWithContext(context.Background())
}

func (i *actingUserPtrType) ToActingUserPtrOutputWithContext(ctx context.Context) ActingUserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActingUserPtrOutput)
}

// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
type ActingUserOutput struct{ *pulumi.OutputState }

func (ActingUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActingUser)(nil)).Elem()
}

func (o ActingUserOutput) ToActingUserOutput() ActingUserOutput {
	return o
}

func (o ActingUserOutput) ToActingUserOutputWithContext(ctx context.Context) ActingUserOutput {
	return o
}

func (o ActingUserOutput) ToActingUserPtrOutput() ActingUserPtrOutput {
	return o.ToActingUserPtrOutputWithContext(context.Background())
}

func (o ActingUserOutput) ToActingUserPtrOutputWithContext(ctx context.Context) ActingUserPtrOutput {
	return o.ApplyT(func(v ActingUser) *ActingUser {
		return &v
	}).(ActingUserPtrOutput)
}

// The email address of the user when the user performed the action.
func (o ActingUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActingUser) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
func (o ActingUserOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ActingUser) *string { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

type ActingUserPtrOutput struct{ *pulumi.OutputState }

func (ActingUserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActingUser)(nil)).Elem()
}

func (o ActingUserPtrOutput) ToActingUserPtrOutput() ActingUserPtrOutput {
	return o
}

func (o ActingUserPtrOutput) ToActingUserPtrOutputWithContext(ctx context.Context) ActingUserPtrOutput {
	return o
}

func (o ActingUserPtrOutput) Elem() ActingUserOutput {
	return o.ApplyT(func(v *ActingUser) ActingUser { return *v }).(ActingUserOutput)
}

// The email address of the user when the user performed the action.
func (o ActingUserPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActingUser) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
func (o ActingUserPtrOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActingUser) *string {
		if v == nil {
			return nil
		}
		return v.ImageUrl
	}).(pulumi.StringPtrOutput)
}

// Represents a DNS certificate challenge.
type CertDnsChallenge struct {
	// The domain name upon which the DNS challenge must be satisfied.
	DomainName *string `pulumi:"domainName"`
	// The value that must be present as a TXT record on the domain name to satisfy the challenge.
	Token *string `pulumi:"token"`
}

// CertDnsChallengeInput is an input type that accepts CertDnsChallengeArgs and CertDnsChallengeOutput values.
// You can construct a concrete instance of `CertDnsChallengeInput` via:
//
//          CertDnsChallengeArgs{...}
type CertDnsChallengeInput interface {
	pulumi.Input

	ToCertDnsChallengeOutput() CertDnsChallengeOutput
	ToCertDnsChallengeOutputWithContext(context.Context) CertDnsChallengeOutput
}

// Represents a DNS certificate challenge.
type CertDnsChallengeArgs struct {
	// The domain name upon which the DNS challenge must be satisfied.
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
	// The value that must be present as a TXT record on the domain name to satisfy the challenge.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (CertDnsChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertDnsChallenge)(nil)).Elem()
}

func (i CertDnsChallengeArgs) ToCertDnsChallengeOutput() CertDnsChallengeOutput {
	return i.ToCertDnsChallengeOutputWithContext(context.Background())
}

func (i CertDnsChallengeArgs) ToCertDnsChallengeOutputWithContext(ctx context.Context) CertDnsChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertDnsChallengeOutput)
}

func (i CertDnsChallengeArgs) ToCertDnsChallengePtrOutput() CertDnsChallengePtrOutput {
	return i.ToCertDnsChallengePtrOutputWithContext(context.Background())
}

func (i CertDnsChallengeArgs) ToCertDnsChallengePtrOutputWithContext(ctx context.Context) CertDnsChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertDnsChallengeOutput).ToCertDnsChallengePtrOutputWithContext(ctx)
}

// CertDnsChallengePtrInput is an input type that accepts CertDnsChallengeArgs, CertDnsChallengePtr and CertDnsChallengePtrOutput values.
// You can construct a concrete instance of `CertDnsChallengePtrInput` via:
//
//          CertDnsChallengeArgs{...}
//
//  or:
//
//          nil
type CertDnsChallengePtrInput interface {
	pulumi.Input

	ToCertDnsChallengePtrOutput() CertDnsChallengePtrOutput
	ToCertDnsChallengePtrOutputWithContext(context.Context) CertDnsChallengePtrOutput
}

type certDnsChallengePtrType CertDnsChallengeArgs

func CertDnsChallengePtr(v *CertDnsChallengeArgs) CertDnsChallengePtrInput {
	return (*certDnsChallengePtrType)(v)
}

func (*certDnsChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertDnsChallenge)(nil)).Elem()
}

func (i *certDnsChallengePtrType) ToCertDnsChallengePtrOutput() CertDnsChallengePtrOutput {
	return i.ToCertDnsChallengePtrOutputWithContext(context.Background())
}

func (i *certDnsChallengePtrType) ToCertDnsChallengePtrOutputWithContext(ctx context.Context) CertDnsChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertDnsChallengePtrOutput)
}

// Represents a DNS certificate challenge.
type CertDnsChallengeOutput struct{ *pulumi.OutputState }

func (CertDnsChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertDnsChallenge)(nil)).Elem()
}

func (o CertDnsChallengeOutput) ToCertDnsChallengeOutput() CertDnsChallengeOutput {
	return o
}

func (o CertDnsChallengeOutput) ToCertDnsChallengeOutputWithContext(ctx context.Context) CertDnsChallengeOutput {
	return o
}

func (o CertDnsChallengeOutput) ToCertDnsChallengePtrOutput() CertDnsChallengePtrOutput {
	return o.ToCertDnsChallengePtrOutputWithContext(context.Background())
}

func (o CertDnsChallengeOutput) ToCertDnsChallengePtrOutputWithContext(ctx context.Context) CertDnsChallengePtrOutput {
	return o.ApplyT(func(v CertDnsChallenge) *CertDnsChallenge {
		return &v
	}).(CertDnsChallengePtrOutput)
}

// The domain name upon which the DNS challenge must be satisfied.
func (o CertDnsChallengeOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertDnsChallenge) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// The value that must be present as a TXT record on the domain name to satisfy the challenge.
func (o CertDnsChallengeOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertDnsChallenge) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type CertDnsChallengePtrOutput struct{ *pulumi.OutputState }

func (CertDnsChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertDnsChallenge)(nil)).Elem()
}

func (o CertDnsChallengePtrOutput) ToCertDnsChallengePtrOutput() CertDnsChallengePtrOutput {
	return o
}

func (o CertDnsChallengePtrOutput) ToCertDnsChallengePtrOutputWithContext(ctx context.Context) CertDnsChallengePtrOutput {
	return o
}

func (o CertDnsChallengePtrOutput) Elem() CertDnsChallengeOutput {
	return o.ApplyT(func(v *CertDnsChallenge) CertDnsChallenge { return *v }).(CertDnsChallengeOutput)
}

// The domain name upon which the DNS challenge must be satisfied.
func (o CertDnsChallengePtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertDnsChallenge) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The value that must be present as a TXT record on the domain name to satisfy the challenge.
func (o CertDnsChallengePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertDnsChallenge) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// Represents an HTTP certificate challenge.
type CertHttpChallenge struct {
	// The URL path on which to serve the specified token to satisfy the certificate challenge.
	Path *string `pulumi:"path"`
	// The token to serve at the specified URL path to satisfy the certificate challenge.
	Token *string `pulumi:"token"`
}

// CertHttpChallengeInput is an input type that accepts CertHttpChallengeArgs and CertHttpChallengeOutput values.
// You can construct a concrete instance of `CertHttpChallengeInput` via:
//
//          CertHttpChallengeArgs{...}
type CertHttpChallengeInput interface {
	pulumi.Input

	ToCertHttpChallengeOutput() CertHttpChallengeOutput
	ToCertHttpChallengeOutputWithContext(context.Context) CertHttpChallengeOutput
}

// Represents an HTTP certificate challenge.
type CertHttpChallengeArgs struct {
	// The URL path on which to serve the specified token to satisfy the certificate challenge.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The token to serve at the specified URL path to satisfy the certificate challenge.
	Token pulumi.StringPtrInput `pulumi:"token"`
}

func (CertHttpChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertHttpChallenge)(nil)).Elem()
}

func (i CertHttpChallengeArgs) ToCertHttpChallengeOutput() CertHttpChallengeOutput {
	return i.ToCertHttpChallengeOutputWithContext(context.Background())
}

func (i CertHttpChallengeArgs) ToCertHttpChallengeOutputWithContext(ctx context.Context) CertHttpChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertHttpChallengeOutput)
}

func (i CertHttpChallengeArgs) ToCertHttpChallengePtrOutput() CertHttpChallengePtrOutput {
	return i.ToCertHttpChallengePtrOutputWithContext(context.Background())
}

func (i CertHttpChallengeArgs) ToCertHttpChallengePtrOutputWithContext(ctx context.Context) CertHttpChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertHttpChallengeOutput).ToCertHttpChallengePtrOutputWithContext(ctx)
}

// CertHttpChallengePtrInput is an input type that accepts CertHttpChallengeArgs, CertHttpChallengePtr and CertHttpChallengePtrOutput values.
// You can construct a concrete instance of `CertHttpChallengePtrInput` via:
//
//          CertHttpChallengeArgs{...}
//
//  or:
//
//          nil
type CertHttpChallengePtrInput interface {
	pulumi.Input

	ToCertHttpChallengePtrOutput() CertHttpChallengePtrOutput
	ToCertHttpChallengePtrOutputWithContext(context.Context) CertHttpChallengePtrOutput
}

type certHttpChallengePtrType CertHttpChallengeArgs

func CertHttpChallengePtr(v *CertHttpChallengeArgs) CertHttpChallengePtrInput {
	return (*certHttpChallengePtrType)(v)
}

func (*certHttpChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertHttpChallenge)(nil)).Elem()
}

func (i *certHttpChallengePtrType) ToCertHttpChallengePtrOutput() CertHttpChallengePtrOutput {
	return i.ToCertHttpChallengePtrOutputWithContext(context.Background())
}

func (i *certHttpChallengePtrType) ToCertHttpChallengePtrOutputWithContext(ctx context.Context) CertHttpChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertHttpChallengePtrOutput)
}

// Represents an HTTP certificate challenge.
type CertHttpChallengeOutput struct{ *pulumi.OutputState }

func (CertHttpChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertHttpChallenge)(nil)).Elem()
}

func (o CertHttpChallengeOutput) ToCertHttpChallengeOutput() CertHttpChallengeOutput {
	return o
}

func (o CertHttpChallengeOutput) ToCertHttpChallengeOutputWithContext(ctx context.Context) CertHttpChallengeOutput {
	return o
}

func (o CertHttpChallengeOutput) ToCertHttpChallengePtrOutput() CertHttpChallengePtrOutput {
	return o.ToCertHttpChallengePtrOutputWithContext(context.Background())
}

func (o CertHttpChallengeOutput) ToCertHttpChallengePtrOutputWithContext(ctx context.Context) CertHttpChallengePtrOutput {
	return o.ApplyT(func(v CertHttpChallenge) *CertHttpChallenge {
		return &v
	}).(CertHttpChallengePtrOutput)
}

// The URL path on which to serve the specified token to satisfy the certificate challenge.
func (o CertHttpChallengeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertHttpChallenge) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The token to serve at the specified URL path to satisfy the certificate challenge.
func (o CertHttpChallengeOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertHttpChallenge) *string { return v.Token }).(pulumi.StringPtrOutput)
}

type CertHttpChallengePtrOutput struct{ *pulumi.OutputState }

func (CertHttpChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertHttpChallenge)(nil)).Elem()
}

func (o CertHttpChallengePtrOutput) ToCertHttpChallengePtrOutput() CertHttpChallengePtrOutput {
	return o
}

func (o CertHttpChallengePtrOutput) ToCertHttpChallengePtrOutputWithContext(ctx context.Context) CertHttpChallengePtrOutput {
	return o
}

func (o CertHttpChallengePtrOutput) Elem() CertHttpChallengeOutput {
	return o.ApplyT(func(v *CertHttpChallenge) CertHttpChallenge { return *v }).(CertHttpChallengeOutput)
}

// The URL path on which to serve the specified token to satisfy the certificate challenge.
func (o CertHttpChallengePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertHttpChallenge) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The token to serve at the specified URL path to satisfy the certificate challenge.
func (o CertHttpChallengePtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertHttpChallenge) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewrite struct {
	// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
	Region *string `pulumi:"region"`
	// Required. User-defined ID of the Cloud Run service.
	ServiceId *string `pulumi:"serviceId"`
}

// CloudRunRewriteInput is an input type that accepts CloudRunRewriteArgs and CloudRunRewriteOutput values.
// You can construct a concrete instance of `CloudRunRewriteInput` via:
//
//          CloudRunRewriteArgs{...}
type CloudRunRewriteInput interface {
	pulumi.Input

	ToCloudRunRewriteOutput() CloudRunRewriteOutput
	ToCloudRunRewriteOutputWithContext(context.Context) CloudRunRewriteOutput
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewriteArgs struct {
	// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Required. User-defined ID of the Cloud Run service.
	ServiceId pulumi.StringPtrInput `pulumi:"serviceId"`
}

func (CloudRunRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunRewrite)(nil)).Elem()
}

func (i CloudRunRewriteArgs) ToCloudRunRewriteOutput() CloudRunRewriteOutput {
	return i.ToCloudRunRewriteOutputWithContext(context.Background())
}

func (i CloudRunRewriteArgs) ToCloudRunRewriteOutputWithContext(ctx context.Context) CloudRunRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunRewriteOutput)
}

func (i CloudRunRewriteArgs) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return i.ToCloudRunRewritePtrOutputWithContext(context.Background())
}

func (i CloudRunRewriteArgs) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunRewriteOutput).ToCloudRunRewritePtrOutputWithContext(ctx)
}

// CloudRunRewritePtrInput is an input type that accepts CloudRunRewriteArgs, CloudRunRewritePtr and CloudRunRewritePtrOutput values.
// You can construct a concrete instance of `CloudRunRewritePtrInput` via:
//
//          CloudRunRewriteArgs{...}
//
//  or:
//
//          nil
type CloudRunRewritePtrInput interface {
	pulumi.Input

	ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput
	ToCloudRunRewritePtrOutputWithContext(context.Context) CloudRunRewritePtrOutput
}

type cloudRunRewritePtrType CloudRunRewriteArgs

func CloudRunRewritePtr(v *CloudRunRewriteArgs) CloudRunRewritePtrInput {
	return (*cloudRunRewritePtrType)(v)
}

func (*cloudRunRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunRewrite)(nil)).Elem()
}

func (i *cloudRunRewritePtrType) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return i.ToCloudRunRewritePtrOutputWithContext(context.Background())
}

func (i *cloudRunRewritePtrType) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunRewritePtrOutput)
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewriteOutput struct{ *pulumi.OutputState }

func (CloudRunRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunRewrite)(nil)).Elem()
}

func (o CloudRunRewriteOutput) ToCloudRunRewriteOutput() CloudRunRewriteOutput {
	return o
}

func (o CloudRunRewriteOutput) ToCloudRunRewriteOutputWithContext(ctx context.Context) CloudRunRewriteOutput {
	return o
}

func (o CloudRunRewriteOutput) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return o.ToCloudRunRewritePtrOutputWithContext(context.Background())
}

func (o CloudRunRewriteOutput) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return o.ApplyT(func(v CloudRunRewrite) *CloudRunRewrite {
		return &v
	}).(CloudRunRewritePtrOutput)
}

// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
func (o CloudRunRewriteOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRunRewrite) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// Required. User-defined ID of the Cloud Run service.
func (o CloudRunRewriteOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRunRewrite) *string { return v.ServiceId }).(pulumi.StringPtrOutput)
}

type CloudRunRewritePtrOutput struct{ *pulumi.OutputState }

func (CloudRunRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunRewrite)(nil)).Elem()
}

func (o CloudRunRewritePtrOutput) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return o
}

func (o CloudRunRewritePtrOutput) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return o
}

func (o CloudRunRewritePtrOutput) Elem() CloudRunRewriteOutput {
	return o.ApplyT(func(v *CloudRunRewrite) CloudRunRewrite { return *v }).(CloudRunRewriteOutput)
}

// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
func (o CloudRunRewritePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// Required. User-defined ID of the Cloud Run service.
func (o CloudRunRewritePtrOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunRewrite) *string {
		if v == nil {
			return nil
		}
		return v.ServiceId
	}).(pulumi.StringPtrOutput)
}

// The current certificate provisioning status information for a domain.
type DomainProvisioning struct {
	// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
	CertChallengeDiscoveredTxt []string `pulumi:"certChallengeDiscoveredTxt"`
	// The DNS challenge for generating a certificate.
	CertChallengeDns *CertDnsChallenge `pulumi:"certChallengeDns"`
	// The HTTP challenge for generating a certificate.
	CertChallengeHttp *CertHttpChallenge `pulumi:"certChallengeHttp"`
	// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
	CertStatus *string `pulumi:"certStatus"`
	// The IPs found at the last DNS fetch.
	DiscoveredIps []string `pulumi:"discoveredIps"`
	// The time at which the last DNS fetch occurred.
	DnsFetchTime *string `pulumi:"dnsFetchTime"`
	// The DNS record match status as of the last DNS fetch.
	DnsStatus *string `pulumi:"dnsStatus"`
	// The list of IPs to which the domain is expected to resolve.
	ExpectedIps []string `pulumi:"expectedIps"`
}

// DomainProvisioningInput is an input type that accepts DomainProvisioningArgs and DomainProvisioningOutput values.
// You can construct a concrete instance of `DomainProvisioningInput` via:
//
//          DomainProvisioningArgs{...}
type DomainProvisioningInput interface {
	pulumi.Input

	ToDomainProvisioningOutput() DomainProvisioningOutput
	ToDomainProvisioningOutputWithContext(context.Context) DomainProvisioningOutput
}

// The current certificate provisioning status information for a domain.
type DomainProvisioningArgs struct {
	// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
	CertChallengeDiscoveredTxt pulumi.StringArrayInput `pulumi:"certChallengeDiscoveredTxt"`
	// The DNS challenge for generating a certificate.
	CertChallengeDns CertDnsChallengePtrInput `pulumi:"certChallengeDns"`
	// The HTTP challenge for generating a certificate.
	CertChallengeHttp CertHttpChallengePtrInput `pulumi:"certChallengeHttp"`
	// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
	CertStatus pulumi.StringPtrInput `pulumi:"certStatus"`
	// The IPs found at the last DNS fetch.
	DiscoveredIps pulumi.StringArrayInput `pulumi:"discoveredIps"`
	// The time at which the last DNS fetch occurred.
	DnsFetchTime pulumi.StringPtrInput `pulumi:"dnsFetchTime"`
	// The DNS record match status as of the last DNS fetch.
	DnsStatus pulumi.StringPtrInput `pulumi:"dnsStatus"`
	// The list of IPs to which the domain is expected to resolve.
	ExpectedIps pulumi.StringArrayInput `pulumi:"expectedIps"`
}

func (DomainProvisioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainProvisioning)(nil)).Elem()
}

func (i DomainProvisioningArgs) ToDomainProvisioningOutput() DomainProvisioningOutput {
	return i.ToDomainProvisioningOutputWithContext(context.Background())
}

func (i DomainProvisioningArgs) ToDomainProvisioningOutputWithContext(ctx context.Context) DomainProvisioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainProvisioningOutput)
}

func (i DomainProvisioningArgs) ToDomainProvisioningPtrOutput() DomainProvisioningPtrOutput {
	return i.ToDomainProvisioningPtrOutputWithContext(context.Background())
}

func (i DomainProvisioningArgs) ToDomainProvisioningPtrOutputWithContext(ctx context.Context) DomainProvisioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainProvisioningOutput).ToDomainProvisioningPtrOutputWithContext(ctx)
}

// DomainProvisioningPtrInput is an input type that accepts DomainProvisioningArgs, DomainProvisioningPtr and DomainProvisioningPtrOutput values.
// You can construct a concrete instance of `DomainProvisioningPtrInput` via:
//
//          DomainProvisioningArgs{...}
//
//  or:
//
//          nil
type DomainProvisioningPtrInput interface {
	pulumi.Input

	ToDomainProvisioningPtrOutput() DomainProvisioningPtrOutput
	ToDomainProvisioningPtrOutputWithContext(context.Context) DomainProvisioningPtrOutput
}

type domainProvisioningPtrType DomainProvisioningArgs

func DomainProvisioningPtr(v *DomainProvisioningArgs) DomainProvisioningPtrInput {
	return (*domainProvisioningPtrType)(v)
}

func (*domainProvisioningPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainProvisioning)(nil)).Elem()
}

func (i *domainProvisioningPtrType) ToDomainProvisioningPtrOutput() DomainProvisioningPtrOutput {
	return i.ToDomainProvisioningPtrOutputWithContext(context.Background())
}

func (i *domainProvisioningPtrType) ToDomainProvisioningPtrOutputWithContext(ctx context.Context) DomainProvisioningPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainProvisioningPtrOutput)
}

// The current certificate provisioning status information for a domain.
type DomainProvisioningOutput struct{ *pulumi.OutputState }

func (DomainProvisioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainProvisioning)(nil)).Elem()
}

func (o DomainProvisioningOutput) ToDomainProvisioningOutput() DomainProvisioningOutput {
	return o
}

func (o DomainProvisioningOutput) ToDomainProvisioningOutputWithContext(ctx context.Context) DomainProvisioningOutput {
	return o
}

func (o DomainProvisioningOutput) ToDomainProvisioningPtrOutput() DomainProvisioningPtrOutput {
	return o.ToDomainProvisioningPtrOutputWithContext(context.Background())
}

func (o DomainProvisioningOutput) ToDomainProvisioningPtrOutputWithContext(ctx context.Context) DomainProvisioningPtrOutput {
	return o.ApplyT(func(v DomainProvisioning) *DomainProvisioning {
		return &v
	}).(DomainProvisioningPtrOutput)
}

// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
func (o DomainProvisioningOutput) CertChallengeDiscoveredTxt() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainProvisioning) []string { return v.CertChallengeDiscoveredTxt }).(pulumi.StringArrayOutput)
}

// The DNS challenge for generating a certificate.
func (o DomainProvisioningOutput) CertChallengeDns() CertDnsChallengePtrOutput {
	return o.ApplyT(func(v DomainProvisioning) *CertDnsChallenge { return v.CertChallengeDns }).(CertDnsChallengePtrOutput)
}

// The HTTP challenge for generating a certificate.
func (o DomainProvisioningOutput) CertChallengeHttp() CertHttpChallengePtrOutput {
	return o.ApplyT(func(v DomainProvisioning) *CertHttpChallenge { return v.CertChallengeHttp }).(CertHttpChallengePtrOutput)
}

// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
func (o DomainProvisioningOutput) CertStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainProvisioning) *string { return v.CertStatus }).(pulumi.StringPtrOutput)
}

// The IPs found at the last DNS fetch.
func (o DomainProvisioningOutput) DiscoveredIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainProvisioning) []string { return v.DiscoveredIps }).(pulumi.StringArrayOutput)
}

// The time at which the last DNS fetch occurred.
func (o DomainProvisioningOutput) DnsFetchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainProvisioning) *string { return v.DnsFetchTime }).(pulumi.StringPtrOutput)
}

// The DNS record match status as of the last DNS fetch.
func (o DomainProvisioningOutput) DnsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainProvisioning) *string { return v.DnsStatus }).(pulumi.StringPtrOutput)
}

// The list of IPs to which the domain is expected to resolve.
func (o DomainProvisioningOutput) ExpectedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainProvisioning) []string { return v.ExpectedIps }).(pulumi.StringArrayOutput)
}

type DomainProvisioningPtrOutput struct{ *pulumi.OutputState }

func (DomainProvisioningPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainProvisioning)(nil)).Elem()
}

func (o DomainProvisioningPtrOutput) ToDomainProvisioningPtrOutput() DomainProvisioningPtrOutput {
	return o
}

func (o DomainProvisioningPtrOutput) ToDomainProvisioningPtrOutputWithContext(ctx context.Context) DomainProvisioningPtrOutput {
	return o
}

func (o DomainProvisioningPtrOutput) Elem() DomainProvisioningOutput {
	return o.ApplyT(func(v *DomainProvisioning) DomainProvisioning { return *v }).(DomainProvisioningOutput)
}

// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
func (o DomainProvisioningPtrOutput) CertChallengeDiscoveredTxt() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainProvisioning) []string {
		if v == nil {
			return nil
		}
		return v.CertChallengeDiscoveredTxt
	}).(pulumi.StringArrayOutput)
}

// The DNS challenge for generating a certificate.
func (o DomainProvisioningPtrOutput) CertChallengeDns() CertDnsChallengePtrOutput {
	return o.ApplyT(func(v *DomainProvisioning) *CertDnsChallenge {
		if v == nil {
			return nil
		}
		return v.CertChallengeDns
	}).(CertDnsChallengePtrOutput)
}

// The HTTP challenge for generating a certificate.
func (o DomainProvisioningPtrOutput) CertChallengeHttp() CertHttpChallengePtrOutput {
	return o.ApplyT(func(v *DomainProvisioning) *CertHttpChallenge {
		if v == nil {
			return nil
		}
		return v.CertChallengeHttp
	}).(CertHttpChallengePtrOutput)
}

// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
func (o DomainProvisioningPtrOutput) CertStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainProvisioning) *string {
		if v == nil {
			return nil
		}
		return v.CertStatus
	}).(pulumi.StringPtrOutput)
}

// The IPs found at the last DNS fetch.
func (o DomainProvisioningPtrOutput) DiscoveredIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainProvisioning) []string {
		if v == nil {
			return nil
		}
		return v.DiscoveredIps
	}).(pulumi.StringArrayOutput)
}

// The time at which the last DNS fetch occurred.
func (o DomainProvisioningPtrOutput) DnsFetchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainProvisioning) *string {
		if v == nil {
			return nil
		}
		return v.DnsFetchTime
	}).(pulumi.StringPtrOutput)
}

// The DNS record match status as of the last DNS fetch.
func (o DomainProvisioningPtrOutput) DnsStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainProvisioning) *string {
		if v == nil {
			return nil
		}
		return v.DnsStatus
	}).(pulumi.StringPtrOutput)
}

// The list of IPs to which the domain is expected to resolve.
func (o DomainProvisioningPtrOutput) ExpectedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DomainProvisioning) []string {
		if v == nil {
			return nil
		}
		return v.ExpectedIps
	}).(pulumi.StringArrayOutput)
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirect struct {
	// Required. The domain name to redirect to.
	DomainName *string `pulumi:"domainName"`
	// Required. The redirect status code.
	Type *string `pulumi:"type"`
}

// DomainRedirectInput is an input type that accepts DomainRedirectArgs and DomainRedirectOutput values.
// You can construct a concrete instance of `DomainRedirectInput` via:
//
//          DomainRedirectArgs{...}
type DomainRedirectInput interface {
	pulumi.Input

	ToDomainRedirectOutput() DomainRedirectOutput
	ToDomainRedirectOutputWithContext(context.Context) DomainRedirectOutput
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirectArgs struct {
	// Required. The domain name to redirect to.
	DomainName pulumi.StringPtrInput `pulumi:"domainName"`
	// Required. The redirect status code.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (DomainRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (i DomainRedirectArgs) ToDomainRedirectOutput() DomainRedirectOutput {
	return i.ToDomainRedirectOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput)
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput).ToDomainRedirectPtrOutputWithContext(ctx)
}

// DomainRedirectPtrInput is an input type that accepts DomainRedirectArgs, DomainRedirectPtr and DomainRedirectPtrOutput values.
// You can construct a concrete instance of `DomainRedirectPtrInput` via:
//
//          DomainRedirectArgs{...}
//
//  or:
//
//          nil
type DomainRedirectPtrInput interface {
	pulumi.Input

	ToDomainRedirectPtrOutput() DomainRedirectPtrOutput
	ToDomainRedirectPtrOutputWithContext(context.Context) DomainRedirectPtrOutput
}

type domainRedirectPtrType DomainRedirectArgs

func DomainRedirectPtr(v *DomainRedirectArgs) DomainRedirectPtrInput {
	return (*domainRedirectPtrType)(v)
}

func (*domainRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectPtrOutput)
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirectOutput struct{ *pulumi.OutputState }

func (DomainRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectOutput) ToDomainRedirectOutput() DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *DomainRedirect {
		return &v
	}).(DomainRedirectPtrOutput)
}

// Required. The domain name to redirect to.
func (o DomainRedirectOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *string { return v.DomainName }).(pulumi.StringPtrOutput)
}

// Required. The redirect status code.
func (o DomainRedirectOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DomainRedirect) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type DomainRedirectPtrOutput struct{ *pulumi.OutputState }

func (DomainRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) Elem() DomainRedirectOutput {
	return o.ApplyT(func(v *DomainRedirect) DomainRedirect { return *v }).(DomainRedirectOutput)
}

// Required. The domain name to redirect to.
func (o DomainRedirectPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *string {
		if v == nil {
			return nil
		}
		return v.DomainName
	}).(pulumi.StringPtrOutput)
}

// Required. The redirect status code.
func (o DomainRedirectPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type Header struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob *string `pulumi:"glob"`
	// Required. The additional headers to add to the response.
	Headers map[string]string `pulumi:"headers"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex *string `pulumi:"regex"`
}

// HeaderInput is an input type that accepts HeaderArgs and HeaderOutput values.
// You can construct a concrete instance of `HeaderInput` via:
//
//          HeaderArgs{...}
type HeaderInput interface {
	pulumi.Input

	ToHeaderOutput() HeaderOutput
	ToHeaderOutputWithContext(context.Context) HeaderOutput
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type HeaderArgs struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob pulumi.StringPtrInput `pulumi:"glob"`
	// Required. The additional headers to add to the response.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
}

func (HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (i HeaderArgs) ToHeaderOutput() HeaderOutput {
	return i.ToHeaderOutputWithContext(context.Background())
}

func (i HeaderArgs) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderOutput)
}

// HeaderArrayInput is an input type that accepts HeaderArray and HeaderArrayOutput values.
// You can construct a concrete instance of `HeaderArrayInput` via:
//
//          HeaderArray{ HeaderArgs{...} }
type HeaderArrayInput interface {
	pulumi.Input

	ToHeaderArrayOutput() HeaderArrayOutput
	ToHeaderArrayOutputWithContext(context.Context) HeaderArrayOutput
}

type HeaderArray []HeaderInput

func (HeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Header)(nil)).Elem()
}

func (i HeaderArray) ToHeaderArrayOutput() HeaderArrayOutput {
	return i.ToHeaderArrayOutputWithContext(context.Background())
}

func (i HeaderArray) ToHeaderArrayOutputWithContext(ctx context.Context) HeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderArrayOutput)
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type HeaderOutput struct{ *pulumi.OutputState }

func (HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (o HeaderOutput) ToHeaderOutput() HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return o
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o HeaderOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Header) *string { return v.Glob }).(pulumi.StringPtrOutput)
}

// Required. The additional headers to add to the response.
func (o HeaderOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v Header) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o HeaderOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Header) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

type HeaderArrayOutput struct{ *pulumi.OutputState }

func (HeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Header)(nil)).Elem()
}

func (o HeaderArrayOutput) ToHeaderArrayOutput() HeaderArrayOutput {
	return o
}

func (o HeaderArrayOutput) ToHeaderArrayOutputWithContext(ctx context.Context) HeaderArrayOutput {
	return o
}

func (o HeaderArrayOutput) Index(i pulumi.IntInput) HeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Header {
		return vs[0].([]Header)[vs[1].(int)]
	}).(HeaderOutput)
}

// If provided, i18n rewrites are enabled.
type I18nConfig struct {
	// Required. The user-supplied path where country and language specific content will be looked for within the public directory.
	Root *string `pulumi:"root"`
}

// I18nConfigInput is an input type that accepts I18nConfigArgs and I18nConfigOutput values.
// You can construct a concrete instance of `I18nConfigInput` via:
//
//          I18nConfigArgs{...}
type I18nConfigInput interface {
	pulumi.Input

	ToI18nConfigOutput() I18nConfigOutput
	ToI18nConfigOutputWithContext(context.Context) I18nConfigOutput
}

// If provided, i18n rewrites are enabled.
type I18nConfigArgs struct {
	// Required. The user-supplied path where country and language specific content will be looked for within the public directory.
	Root pulumi.StringPtrInput `pulumi:"root"`
}

func (I18nConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*I18nConfig)(nil)).Elem()
}

func (i I18nConfigArgs) ToI18nConfigOutput() I18nConfigOutput {
	return i.ToI18nConfigOutputWithContext(context.Background())
}

func (i I18nConfigArgs) ToI18nConfigOutputWithContext(ctx context.Context) I18nConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(I18nConfigOutput)
}

func (i I18nConfigArgs) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return i.ToI18nConfigPtrOutputWithContext(context.Background())
}

func (i I18nConfigArgs) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(I18nConfigOutput).ToI18nConfigPtrOutputWithContext(ctx)
}

// I18nConfigPtrInput is an input type that accepts I18nConfigArgs, I18nConfigPtr and I18nConfigPtrOutput values.
// You can construct a concrete instance of `I18nConfigPtrInput` via:
//
//          I18nConfigArgs{...}
//
//  or:
//
//          nil
type I18nConfigPtrInput interface {
	pulumi.Input

	ToI18nConfigPtrOutput() I18nConfigPtrOutput
	ToI18nConfigPtrOutputWithContext(context.Context) I18nConfigPtrOutput
}

type i18nConfigPtrType I18nConfigArgs

func I18nConfigPtr(v *I18nConfigArgs) I18nConfigPtrInput {
	return (*i18nConfigPtrType)(v)
}

func (*i18nConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**I18nConfig)(nil)).Elem()
}

func (i *i18nConfigPtrType) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return i.ToI18nConfigPtrOutputWithContext(context.Background())
}

func (i *i18nConfigPtrType) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(I18nConfigPtrOutput)
}

// If provided, i18n rewrites are enabled.
type I18nConfigOutput struct{ *pulumi.OutputState }

func (I18nConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*I18nConfig)(nil)).Elem()
}

func (o I18nConfigOutput) ToI18nConfigOutput() I18nConfigOutput {
	return o
}

func (o I18nConfigOutput) ToI18nConfigOutputWithContext(ctx context.Context) I18nConfigOutput {
	return o
}

func (o I18nConfigOutput) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return o.ToI18nConfigPtrOutputWithContext(context.Background())
}

func (o I18nConfigOutput) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return o.ApplyT(func(v I18nConfig) *I18nConfig {
		return &v
	}).(I18nConfigPtrOutput)
}

// Required. The user-supplied path where country and language specific content will be looked for within the public directory.
func (o I18nConfigOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v I18nConfig) *string { return v.Root }).(pulumi.StringPtrOutput)
}

type I18nConfigPtrOutput struct{ *pulumi.OutputState }

func (I18nConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**I18nConfig)(nil)).Elem()
}

func (o I18nConfigPtrOutput) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return o
}

func (o I18nConfigPtrOutput) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return o
}

func (o I18nConfigPtrOutput) Elem() I18nConfigOutput {
	return o.ApplyT(func(v *I18nConfig) I18nConfig { return *v }).(I18nConfigOutput)
}

// Required. The user-supplied path where country and language specific content will be looked for within the public directory.
func (o I18nConfigPtrOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *I18nConfig) *string {
		if v == nil {
			return nil
		}
		return v.Root
	}).(pulumi.StringPtrOutput)
}

// Deprecated in favor of [site channels](sites.channels).
type PreviewConfig struct {
	// If true, preview URLs are enabled for this version.
	Active *bool `pulumi:"active"`
	// Indicates the expiration time for previewing this version; preview URL requests received after this time will 404.
	ExpireTime *string `pulumi:"expireTime"`
}

// PreviewConfigInput is an input type that accepts PreviewConfigArgs and PreviewConfigOutput values.
// You can construct a concrete instance of `PreviewConfigInput` via:
//
//          PreviewConfigArgs{...}
type PreviewConfigInput interface {
	pulumi.Input

	ToPreviewConfigOutput() PreviewConfigOutput
	ToPreviewConfigOutputWithContext(context.Context) PreviewConfigOutput
}

// Deprecated in favor of [site channels](sites.channels).
type PreviewConfigArgs struct {
	// If true, preview URLs are enabled for this version.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// Indicates the expiration time for previewing this version; preview URL requests received after this time will 404.
	ExpireTime pulumi.StringPtrInput `pulumi:"expireTime"`
}

func (PreviewConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreviewConfig)(nil)).Elem()
}

func (i PreviewConfigArgs) ToPreviewConfigOutput() PreviewConfigOutput {
	return i.ToPreviewConfigOutputWithContext(context.Background())
}

func (i PreviewConfigArgs) ToPreviewConfigOutputWithContext(ctx context.Context) PreviewConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreviewConfigOutput)
}

func (i PreviewConfigArgs) ToPreviewConfigPtrOutput() PreviewConfigPtrOutput {
	return i.ToPreviewConfigPtrOutputWithContext(context.Background())
}

func (i PreviewConfigArgs) ToPreviewConfigPtrOutputWithContext(ctx context.Context) PreviewConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreviewConfigOutput).ToPreviewConfigPtrOutputWithContext(ctx)
}

// PreviewConfigPtrInput is an input type that accepts PreviewConfigArgs, PreviewConfigPtr and PreviewConfigPtrOutput values.
// You can construct a concrete instance of `PreviewConfigPtrInput` via:
//
//          PreviewConfigArgs{...}
//
//  or:
//
//          nil
type PreviewConfigPtrInput interface {
	pulumi.Input

	ToPreviewConfigPtrOutput() PreviewConfigPtrOutput
	ToPreviewConfigPtrOutputWithContext(context.Context) PreviewConfigPtrOutput
}

type previewConfigPtrType PreviewConfigArgs

func PreviewConfigPtr(v *PreviewConfigArgs) PreviewConfigPtrInput {
	return (*previewConfigPtrType)(v)
}

func (*previewConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreviewConfig)(nil)).Elem()
}

func (i *previewConfigPtrType) ToPreviewConfigPtrOutput() PreviewConfigPtrOutput {
	return i.ToPreviewConfigPtrOutputWithContext(context.Background())
}

func (i *previewConfigPtrType) ToPreviewConfigPtrOutputWithContext(ctx context.Context) PreviewConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreviewConfigPtrOutput)
}

// Deprecated in favor of [site channels](sites.channels).
type PreviewConfigOutput struct{ *pulumi.OutputState }

func (PreviewConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreviewConfig)(nil)).Elem()
}

func (o PreviewConfigOutput) ToPreviewConfigOutput() PreviewConfigOutput {
	return o
}

func (o PreviewConfigOutput) ToPreviewConfigOutputWithContext(ctx context.Context) PreviewConfigOutput {
	return o
}

func (o PreviewConfigOutput) ToPreviewConfigPtrOutput() PreviewConfigPtrOutput {
	return o.ToPreviewConfigPtrOutputWithContext(context.Background())
}

func (o PreviewConfigOutput) ToPreviewConfigPtrOutputWithContext(ctx context.Context) PreviewConfigPtrOutput {
	return o.ApplyT(func(v PreviewConfig) *PreviewConfig {
		return &v
	}).(PreviewConfigPtrOutput)
}

// If true, preview URLs are enabled for this version.
func (o PreviewConfigOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PreviewConfig) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

// Indicates the expiration time for previewing this version; preview URL requests received after this time will 404.
func (o PreviewConfigOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PreviewConfig) *string { return v.ExpireTime }).(pulumi.StringPtrOutput)
}

type PreviewConfigPtrOutput struct{ *pulumi.OutputState }

func (PreviewConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreviewConfig)(nil)).Elem()
}

func (o PreviewConfigPtrOutput) ToPreviewConfigPtrOutput() PreviewConfigPtrOutput {
	return o
}

func (o PreviewConfigPtrOutput) ToPreviewConfigPtrOutputWithContext(ctx context.Context) PreviewConfigPtrOutput {
	return o
}

func (o PreviewConfigPtrOutput) Elem() PreviewConfigOutput {
	return o.ApplyT(func(v *PreviewConfig) PreviewConfig { return *v }).(PreviewConfigOutput)
}

// If true, preview URLs are enabled for this version.
func (o PreviewConfigPtrOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PreviewConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Active
	}).(pulumi.BoolPtrOutput)
}

// Indicates the expiration time for previewing this version; preview URL requests received after this time will 404.
func (o PreviewConfigPtrOutput) ExpireTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PreviewConfig) *string {
		if v == nil {
			return nil
		}
		return v.ExpireTime
	}).(pulumi.StringPtrOutput)
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type Redirect struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob *string `pulumi:"glob"`
	// Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
	Location *string `pulumi:"location"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex *string `pulumi:"regex"`
	// Required. The status HTTP code to return in the response. It must be a valid 3xx status code.
	StatusCode *int `pulumi:"statusCode"`
}

// RedirectInput is an input type that accepts RedirectArgs and RedirectOutput values.
// You can construct a concrete instance of `RedirectInput` via:
//
//          RedirectArgs{...}
type RedirectInput interface {
	pulumi.Input

	ToRedirectOutput() RedirectOutput
	ToRedirectOutputWithContext(context.Context) RedirectOutput
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type RedirectArgs struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob pulumi.StringPtrInput `pulumi:"glob"`
	// Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// Required. The status HTTP code to return in the response. It must be a valid 3xx status code.
	StatusCode pulumi.IntPtrInput `pulumi:"statusCode"`
}

func (RedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Redirect)(nil)).Elem()
}

func (i RedirectArgs) ToRedirectOutput() RedirectOutput {
	return i.ToRedirectOutputWithContext(context.Background())
}

func (i RedirectArgs) ToRedirectOutputWithContext(ctx context.Context) RedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectOutput)
}

// RedirectArrayInput is an input type that accepts RedirectArray and RedirectArrayOutput values.
// You can construct a concrete instance of `RedirectArrayInput` via:
//
//          RedirectArray{ RedirectArgs{...} }
type RedirectArrayInput interface {
	pulumi.Input

	ToRedirectArrayOutput() RedirectArrayOutput
	ToRedirectArrayOutputWithContext(context.Context) RedirectArrayOutput
}

type RedirectArray []RedirectInput

func (RedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Redirect)(nil)).Elem()
}

func (i RedirectArray) ToRedirectArrayOutput() RedirectArrayOutput {
	return i.ToRedirectArrayOutputWithContext(context.Background())
}

func (i RedirectArray) ToRedirectArrayOutputWithContext(ctx context.Context) RedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectArrayOutput)
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type RedirectOutput struct{ *pulumi.OutputState }

func (RedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Redirect)(nil)).Elem()
}

func (o RedirectOutput) ToRedirectOutput() RedirectOutput {
	return o
}

func (o RedirectOutput) ToRedirectOutputWithContext(ctx context.Context) RedirectOutput {
	return o
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o RedirectOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Redirect) *string { return v.Glob }).(pulumi.StringPtrOutput)
}

// Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
func (o RedirectOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Redirect) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o RedirectOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Redirect) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// Required. The status HTTP code to return in the response. It must be a valid 3xx status code.
func (o RedirectOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Redirect) *int { return v.StatusCode }).(pulumi.IntPtrOutput)
}

type RedirectArrayOutput struct{ *pulumi.OutputState }

func (RedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Redirect)(nil)).Elem()
}

func (o RedirectArrayOutput) ToRedirectArrayOutput() RedirectArrayOutput {
	return o
}

func (o RedirectArrayOutput) ToRedirectArrayOutputWithContext(ctx context.Context) RedirectArrayOutput {
	return o
}

func (o RedirectArrayOutput) Index(i pulumi.IntInput) RedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Redirect {
		return vs[0].([]Redirect)[vs[1].(int)]
	}).(RedirectOutput)
}

//  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
type Release struct {
	// The deploy description when the release was created. The value can be up to 512 characters.
	Message *string `pulumi:"message"`
	// Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
	Name *string `pulumi:"name"`
	// Output only. The time at which the version is set to be public.
	ReleaseTime *string `pulumi:"releaseTime"`
	// Output only. Identifies the user who created the release.
	ReleaseUser *ActingUser `pulumi:"releaseUser"`
	// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
	Type *string `pulumi:"type"`
	// Output only. The configuration and content that was released.
	Version *Version `pulumi:"version"`
}

// ReleaseInput is an input type that accepts ReleaseArgs and ReleaseOutput values.
// You can construct a concrete instance of `ReleaseInput` via:
//
//          ReleaseArgs{...}
type ReleaseInput interface {
	pulumi.Input

	ToReleaseOutput() ReleaseOutput
	ToReleaseOutputWithContext(context.Context) ReleaseOutput
}

//  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
type ReleaseArgs struct {
	// The deploy description when the release was created. The value can be up to 512 characters.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Output only. The time at which the version is set to be public.
	ReleaseTime pulumi.StringPtrInput `pulumi:"releaseTime"`
	// Output only. Identifies the user who created the release.
	ReleaseUser ActingUserPtrInput `pulumi:"releaseUser"`
	// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Output only. The configuration and content that was released.
	Version VersionPtrInput `pulumi:"version"`
}

func (ReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Release)(nil)).Elem()
}

func (i ReleaseArgs) ToReleaseOutput() ReleaseOutput {
	return i.ToReleaseOutputWithContext(context.Background())
}

func (i ReleaseArgs) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput)
}

func (i ReleaseArgs) ToReleasePtrOutput() ReleasePtrOutput {
	return i.ToReleasePtrOutputWithContext(context.Background())
}

func (i ReleaseArgs) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput).ToReleasePtrOutputWithContext(ctx)
}

// ReleasePtrInput is an input type that accepts ReleaseArgs, ReleasePtr and ReleasePtrOutput values.
// You can construct a concrete instance of `ReleasePtrInput` via:
//
//          ReleaseArgs{...}
//
//  or:
//
//          nil
type ReleasePtrInput interface {
	pulumi.Input

	ToReleasePtrOutput() ReleasePtrOutput
	ToReleasePtrOutputWithContext(context.Context) ReleasePtrOutput
}

type releasePtrType ReleaseArgs

func ReleasePtr(v *ReleaseArgs) ReleasePtrInput {
	return (*releasePtrType)(v)
}

func (*releasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (i *releasePtrType) ToReleasePtrOutput() ReleasePtrOutput {
	return i.ToReleasePtrOutputWithContext(context.Background())
}

func (i *releasePtrType) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleasePtrOutput)
}

//  A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
type ReleaseOutput struct{ *pulumi.OutputState }

func (ReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Release)(nil)).Elem()
}

func (o ReleaseOutput) ToReleaseOutput() ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleasePtrOutput() ReleasePtrOutput {
	return o.ToReleasePtrOutputWithContext(context.Background())
}

func (o ReleaseOutput) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return o.ApplyT(func(v Release) *Release {
		return &v
	}).(ReleasePtrOutput)
}

// The deploy description when the release was created. The value can be up to 512 characters.
func (o ReleaseOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
func (o ReleaseOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Output only. The time at which the version is set to be public.
func (o ReleaseOutput) ReleaseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.ReleaseTime }).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who created the release.
func (o ReleaseOutput) ReleaseUser() ActingUserPtrOutput {
	return o.ApplyT(func(v Release) *ActingUser { return v.ReleaseUser }).(ActingUserPtrOutput)
}

// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
func (o ReleaseOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Release) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Output only. The configuration and content that was released.
func (o ReleaseOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v Release) *Version { return v.Version }).(VersionPtrOutput)
}

type ReleasePtrOutput struct{ *pulumi.OutputState }

func (ReleasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (o ReleasePtrOutput) ToReleasePtrOutput() ReleasePtrOutput {
	return o
}

func (o ReleasePtrOutput) ToReleasePtrOutputWithContext(ctx context.Context) ReleasePtrOutput {
	return o
}

func (o ReleasePtrOutput) Elem() ReleaseOutput {
	return o.ApplyT(func(v *Release) Release { return *v }).(ReleaseOutput)
}

// The deploy description when the release was created. The value can be up to 512 characters.
func (o ReleasePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
func (o ReleasePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Output only. The time at which the version is set to be public.
func (o ReleasePtrOutput) ReleaseTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.ReleaseTime
	}).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who created the release.
func (o ReleasePtrOutput) ReleaseUser() ActingUserPtrOutput {
	return o.ApplyT(func(v *Release) *ActingUser {
		if v == nil {
			return nil
		}
		return v.ReleaseUser
	}).(ActingUserPtrOutput)
}

// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
func (o ReleasePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Output only. The configuration and content that was released.
func (o ReleasePtrOutput) Version() VersionPtrOutput {
	return o.ApplyT(func(v *Release) *Version {
		if v == nil {
			return nil
		}
		return v.Version
	}).(VersionPtrOutput)
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type Rewrite struct {
	// The request will be forwarded to Firebase Dynamic Links.
	DynamicLinks *bool `pulumi:"dynamicLinks"`
	// The function to proxy requests to. Must match the exported function name exactly.
	Function *string `pulumi:"function"`
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob *string `pulumi:"glob"`
	// The URL path to rewrite the request to.
	Path *string `pulumi:"path"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex *string `pulumi:"regex"`
	// The request will be forwarded to Cloud Run.
	Run *CloudRunRewrite `pulumi:"run"`
}

// RewriteInput is an input type that accepts RewriteArgs and RewriteOutput values.
// You can construct a concrete instance of `RewriteInput` via:
//
//          RewriteArgs{...}
type RewriteInput interface {
	pulumi.Input

	ToRewriteOutput() RewriteOutput
	ToRewriteOutputWithContext(context.Context) RewriteOutput
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type RewriteArgs struct {
	// The request will be forwarded to Firebase Dynamic Links.
	DynamicLinks pulumi.BoolPtrInput `pulumi:"dynamicLinks"`
	// The function to proxy requests to. Must match the exported function name exactly.
	Function pulumi.StringPtrInput `pulumi:"function"`
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob pulumi.StringPtrInput `pulumi:"glob"`
	// The URL path to rewrite the request to.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The request will be forwarded to Cloud Run.
	Run CloudRunRewritePtrInput `pulumi:"run"`
}

func (RewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rewrite)(nil)).Elem()
}

func (i RewriteArgs) ToRewriteOutput() RewriteOutput {
	return i.ToRewriteOutputWithContext(context.Background())
}

func (i RewriteArgs) ToRewriteOutputWithContext(ctx context.Context) RewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RewriteOutput)
}

// RewriteArrayInput is an input type that accepts RewriteArray and RewriteArrayOutput values.
// You can construct a concrete instance of `RewriteArrayInput` via:
//
//          RewriteArray{ RewriteArgs{...} }
type RewriteArrayInput interface {
	pulumi.Input

	ToRewriteArrayOutput() RewriteArrayOutput
	ToRewriteArrayOutputWithContext(context.Context) RewriteArrayOutput
}

type RewriteArray []RewriteInput

func (RewriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rewrite)(nil)).Elem()
}

func (i RewriteArray) ToRewriteArrayOutput() RewriteArrayOutput {
	return i.ToRewriteArrayOutputWithContext(context.Background())
}

func (i RewriteArray) ToRewriteArrayOutputWithContext(ctx context.Context) RewriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RewriteArrayOutput)
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type RewriteOutput struct{ *pulumi.OutputState }

func (RewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rewrite)(nil)).Elem()
}

func (o RewriteOutput) ToRewriteOutput() RewriteOutput {
	return o
}

func (o RewriteOutput) ToRewriteOutputWithContext(ctx context.Context) RewriteOutput {
	return o
}

// The request will be forwarded to Firebase Dynamic Links.
func (o RewriteOutput) DynamicLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Rewrite) *bool { return v.DynamicLinks }).(pulumi.BoolPtrOutput)
}

// The function to proxy requests to. Must match the exported function name exactly.
func (o RewriteOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Function }).(pulumi.StringPtrOutput)
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o RewriteOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Glob }).(pulumi.StringPtrOutput)
}

// The URL path to rewrite the request to.
func (o RewriteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o RewriteOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The request will be forwarded to Cloud Run.
func (o RewriteOutput) Run() CloudRunRewritePtrOutput {
	return o.ApplyT(func(v Rewrite) *CloudRunRewrite { return v.Run }).(CloudRunRewritePtrOutput)
}

type RewriteArrayOutput struct{ *pulumi.OutputState }

func (RewriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rewrite)(nil)).Elem()
}

func (o RewriteArrayOutput) ToRewriteArrayOutput() RewriteArrayOutput {
	return o
}

func (o RewriteArrayOutput) ToRewriteArrayOutputWithContext(ctx context.Context) RewriteArrayOutput {
	return o
}

func (o RewriteArrayOutput) Index(i pulumi.IntInput) RewriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Rewrite {
		return vs[0].([]Rewrite)[vs[1].(int)]
	}).(RewriteOutput)
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfig struct {
	// How to handle well known App Association files.
	AppAssociation *string `pulumi:"appAssociation"`
	// Defines whether to drop the file extension from uploaded files.
	CleanUrls *bool `pulumi:"cleanUrls"`
	// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
	Headers []Header `pulumi:"headers"`
	// Optional. Defines i18n rewrite behavior.
	I18n *I18nConfig `pulumi:"i18n"`
	// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
	Redirects []Redirect `pulumi:"redirects"`
	// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
	Rewrites []Rewrite `pulumi:"rewrites"`
	// Defines how to handle a trailing slash in the URL path.
	TrailingSlashBehavior *string `pulumi:"trailingSlashBehavior"`
}

// ServingConfigInput is an input type that accepts ServingConfigArgs and ServingConfigOutput values.
// You can construct a concrete instance of `ServingConfigInput` via:
//
//          ServingConfigArgs{...}
type ServingConfigInput interface {
	pulumi.Input

	ToServingConfigOutput() ServingConfigOutput
	ToServingConfigOutputWithContext(context.Context) ServingConfigOutput
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfigArgs struct {
	// How to handle well known App Association files.
	AppAssociation pulumi.StringPtrInput `pulumi:"appAssociation"`
	// Defines whether to drop the file extension from uploaded files.
	CleanUrls pulumi.BoolPtrInput `pulumi:"cleanUrls"`
	// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
	Headers HeaderArrayInput `pulumi:"headers"`
	// Optional. Defines i18n rewrite behavior.
	I18n I18nConfigPtrInput `pulumi:"i18n"`
	// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
	Redirects RedirectArrayInput `pulumi:"redirects"`
	// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
	Rewrites RewriteArrayInput `pulumi:"rewrites"`
	// Defines how to handle a trailing slash in the URL path.
	TrailingSlashBehavior pulumi.StringPtrInput `pulumi:"trailingSlashBehavior"`
}

func (ServingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServingConfig)(nil)).Elem()
}

func (i ServingConfigArgs) ToServingConfigOutput() ServingConfigOutput {
	return i.ToServingConfigOutputWithContext(context.Background())
}

func (i ServingConfigArgs) ToServingConfigOutputWithContext(ctx context.Context) ServingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServingConfigOutput)
}

func (i ServingConfigArgs) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return i.ToServingConfigPtrOutputWithContext(context.Background())
}

func (i ServingConfigArgs) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServingConfigOutput).ToServingConfigPtrOutputWithContext(ctx)
}

// ServingConfigPtrInput is an input type that accepts ServingConfigArgs, ServingConfigPtr and ServingConfigPtrOutput values.
// You can construct a concrete instance of `ServingConfigPtrInput` via:
//
//          ServingConfigArgs{...}
//
//  or:
//
//          nil
type ServingConfigPtrInput interface {
	pulumi.Input

	ToServingConfigPtrOutput() ServingConfigPtrOutput
	ToServingConfigPtrOutputWithContext(context.Context) ServingConfigPtrOutput
}

type servingConfigPtrType ServingConfigArgs

func ServingConfigPtr(v *ServingConfigArgs) ServingConfigPtrInput {
	return (*servingConfigPtrType)(v)
}

func (*servingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServingConfig)(nil)).Elem()
}

func (i *servingConfigPtrType) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return i.ToServingConfigPtrOutputWithContext(context.Background())
}

func (i *servingConfigPtrType) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServingConfigPtrOutput)
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfigOutput struct{ *pulumi.OutputState }

func (ServingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServingConfig)(nil)).Elem()
}

func (o ServingConfigOutput) ToServingConfigOutput() ServingConfigOutput {
	return o
}

func (o ServingConfigOutput) ToServingConfigOutputWithContext(ctx context.Context) ServingConfigOutput {
	return o
}

func (o ServingConfigOutput) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return o.ToServingConfigPtrOutputWithContext(context.Background())
}

func (o ServingConfigOutput) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return o.ApplyT(func(v ServingConfig) *ServingConfig {
		return &v
	}).(ServingConfigPtrOutput)
}

// How to handle well known App Association files.
func (o ServingConfigOutput) AppAssociation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServingConfig) *string { return v.AppAssociation }).(pulumi.StringPtrOutput)
}

// Defines whether to drop the file extension from uploaded files.
func (o ServingConfigOutput) CleanUrls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServingConfig) *bool { return v.CleanUrls }).(pulumi.BoolPtrOutput)
}

// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
func (o ServingConfigOutput) Headers() HeaderArrayOutput {
	return o.ApplyT(func(v ServingConfig) []Header { return v.Headers }).(HeaderArrayOutput)
}

// Optional. Defines i18n rewrite behavior.
func (o ServingConfigOutput) I18n() I18nConfigPtrOutput {
	return o.ApplyT(func(v ServingConfig) *I18nConfig { return v.I18n }).(I18nConfigPtrOutput)
}

// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
func (o ServingConfigOutput) Redirects() RedirectArrayOutput {
	return o.ApplyT(func(v ServingConfig) []Redirect { return v.Redirects }).(RedirectArrayOutput)
}

// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
func (o ServingConfigOutput) Rewrites() RewriteArrayOutput {
	return o.ApplyT(func(v ServingConfig) []Rewrite { return v.Rewrites }).(RewriteArrayOutput)
}

// Defines how to handle a trailing slash in the URL path.
func (o ServingConfigOutput) TrailingSlashBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServingConfig) *string { return v.TrailingSlashBehavior }).(pulumi.StringPtrOutput)
}

type ServingConfigPtrOutput struct{ *pulumi.OutputState }

func (ServingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServingConfig)(nil)).Elem()
}

func (o ServingConfigPtrOutput) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return o
}

func (o ServingConfigPtrOutput) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return o
}

func (o ServingConfigPtrOutput) Elem() ServingConfigOutput {
	return o.ApplyT(func(v *ServingConfig) ServingConfig { return *v }).(ServingConfigOutput)
}

// How to handle well known App Association files.
func (o ServingConfigPtrOutput) AppAssociation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppAssociation
	}).(pulumi.StringPtrOutput)
}

// Defines whether to drop the file extension from uploaded files.
func (o ServingConfigPtrOutput) CleanUrls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CleanUrls
	}).(pulumi.BoolPtrOutput)
}

// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
func (o ServingConfigPtrOutput) Headers() HeaderArrayOutput {
	return o.ApplyT(func(v *ServingConfig) []Header {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderArrayOutput)
}

// Optional. Defines i18n rewrite behavior.
func (o ServingConfigPtrOutput) I18n() I18nConfigPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *I18nConfig {
		if v == nil {
			return nil
		}
		return v.I18n
	}).(I18nConfigPtrOutput)
}

// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
func (o ServingConfigPtrOutput) Redirects() RedirectArrayOutput {
	return o.ApplyT(func(v *ServingConfig) []Redirect {
		if v == nil {
			return nil
		}
		return v.Redirects
	}).(RedirectArrayOutput)
}

// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
func (o ServingConfigPtrOutput) Rewrites() RewriteArrayOutput {
	return o.ApplyT(func(v *ServingConfig) []Rewrite {
		if v == nil {
			return nil
		}
		return v.Rewrites
	}).(RewriteArrayOutput)
}

// Defines how to handle a trailing slash in the URL path.
func (o ServingConfigPtrOutput) TrailingSlashBehavior() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *string {
		if v == nil {
			return nil
		}
		return v.TrailingSlashBehavior
	}).(pulumi.StringPtrOutput)
}

// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
type Version struct {
	// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
	Config *ServingConfig `pulumi:"config"`
	// Output only. The time at which the version was created.
	CreateTime *string `pulumi:"createTime"`
	// Output only. Identifies the user who created the version.
	CreateUser *ActingUser `pulumi:"createUser"`
	// Output only. The time at which the version was `DELETED`.
	DeleteTime *string `pulumi:"deleteTime"`
	// Output only. Identifies the user who `DELETED` the version.
	DeleteUser *ActingUser `pulumi:"deleteUser"`
	// Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
	FileCount *string `pulumi:"fileCount"`
	// Output only. The time at which the version was `FINALIZED`.
	FinalizeTime *string `pulumi:"finalizeTime"`
	// Output only. Identifies the user who `FINALIZED` the version.
	FinalizeUser *ActingUser `pulumi:"finalizeUser"`
	// The labels used for extra metadata and/or filtering.
	Labels map[string]string `pulumi:"labels"`
	// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
	Name *string `pulumi:"name"`
	// Deprecated in favor of [site channels](sites.channels).
	Preview *PreviewConfig `pulumi:"preview"`
	// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
	Status *string `pulumi:"status"`
	// Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
	VersionBytes *string `pulumi:"versionBytes"`
}

// VersionInput is an input type that accepts VersionArgs and VersionOutput values.
// You can construct a concrete instance of `VersionInput` via:
//
//          VersionArgs{...}
type VersionInput interface {
	pulumi.Input

	ToVersionOutput() VersionOutput
	ToVersionOutputWithContext(context.Context) VersionOutput
}

// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
type VersionArgs struct {
	// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
	Config ServingConfigPtrInput `pulumi:"config"`
	// Output only. The time at which the version was created.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Output only. Identifies the user who created the version.
	CreateUser ActingUserPtrInput `pulumi:"createUser"`
	// Output only. The time at which the version was `DELETED`.
	DeleteTime pulumi.StringPtrInput `pulumi:"deleteTime"`
	// Output only. Identifies the user who `DELETED` the version.
	DeleteUser ActingUserPtrInput `pulumi:"deleteUser"`
	// Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
	FileCount pulumi.StringPtrInput `pulumi:"fileCount"`
	// Output only. The time at which the version was `FINALIZED`.
	FinalizeTime pulumi.StringPtrInput `pulumi:"finalizeTime"`
	// Output only. Identifies the user who `FINALIZED` the version.
	FinalizeUser ActingUserPtrInput `pulumi:"finalizeUser"`
	// The labels used for extra metadata and/or filtering.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Deprecated in favor of [site channels](sites.channels).
	Preview PreviewConfigPtrInput `pulumi:"preview"`
	// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
	VersionBytes pulumi.StringPtrInput `pulumi:"versionBytes"`
}

func (VersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (i VersionArgs) ToVersionOutput() VersionOutput {
	return i.ToVersionOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput)
}

func (i VersionArgs) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i VersionArgs) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionOutput).ToVersionPtrOutputWithContext(ctx)
}

// VersionPtrInput is an input type that accepts VersionArgs, VersionPtr and VersionPtrOutput values.
// You can construct a concrete instance of `VersionPtrInput` via:
//
//          VersionArgs{...}
//
//  or:
//
//          nil
type VersionPtrInput interface {
	pulumi.Input

	ToVersionPtrOutput() VersionPtrOutput
	ToVersionPtrOutputWithContext(context.Context) VersionPtrOutput
}

type versionPtrType VersionArgs

func VersionPtr(v *VersionArgs) VersionPtrInput {
	return (*versionPtrType)(v)
}

func (*versionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (i *versionPtrType) ToVersionPtrOutput() VersionPtrOutput {
	return i.ToVersionPtrOutputWithContext(context.Background())
}

func (i *versionPtrType) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VersionPtrOutput)
}

// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
type VersionOutput struct{ *pulumi.OutputState }

func (VersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Version)(nil)).Elem()
}

func (o VersionOutput) ToVersionOutput() VersionOutput {
	return o
}

func (o VersionOutput) ToVersionOutputWithContext(ctx context.Context) VersionOutput {
	return o
}

func (o VersionOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o.ToVersionPtrOutputWithContext(context.Background())
}

func (o VersionOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o.ApplyT(func(v Version) *Version {
		return &v
	}).(VersionPtrOutput)
}

// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
func (o VersionOutput) Config() ServingConfigPtrOutput {
	return o.ApplyT(func(v Version) *ServingConfig { return v.Config }).(ServingConfigPtrOutput)
}

// Output only. The time at which the version was created.
func (o VersionOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who created the version.
func (o VersionOutput) CreateUser() ActingUserPtrOutput {
	return o.ApplyT(func(v Version) *ActingUser { return v.CreateUser }).(ActingUserPtrOutput)
}

// Output only. The time at which the version was `DELETED`.
func (o VersionOutput) DeleteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.DeleteTime }).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who `DELETED` the version.
func (o VersionOutput) DeleteUser() ActingUserPtrOutput {
	return o.ApplyT(func(v Version) *ActingUser { return v.DeleteUser }).(ActingUserPtrOutput)
}

// Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
func (o VersionOutput) FileCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.FileCount }).(pulumi.StringPtrOutput)
}

// Output only. The time at which the version was `FINALIZED`.
func (o VersionOutput) FinalizeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.FinalizeTime }).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who `FINALIZED` the version.
func (o VersionOutput) FinalizeUser() ActingUserPtrOutput {
	return o.ApplyT(func(v Version) *ActingUser { return v.FinalizeUser }).(ActingUserPtrOutput)
}

// The labels used for extra metadata and/or filtering.
func (o VersionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v Version) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
func (o VersionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Deprecated in favor of [site channels](sites.channels).
func (o VersionOutput) Preview() PreviewConfigPtrOutput {
	return o.ApplyT(func(v Version) *PreviewConfig { return v.Preview }).(PreviewConfigPtrOutput)
}

// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
func (o VersionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
func (o VersionOutput) VersionBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Version) *string { return v.VersionBytes }).(pulumi.StringPtrOutput)
}

type VersionPtrOutput struct{ *pulumi.OutputState }

func (VersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Version)(nil)).Elem()
}

func (o VersionPtrOutput) ToVersionPtrOutput() VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) ToVersionPtrOutputWithContext(ctx context.Context) VersionPtrOutput {
	return o
}

func (o VersionPtrOutput) Elem() VersionOutput {
	return o.ApplyT(func(v *Version) Version { return *v }).(VersionOutput)
}

// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
func (o VersionPtrOutput) Config() ServingConfigPtrOutput {
	return o.ApplyT(func(v *Version) *ServingConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(ServingConfigPtrOutput)
}

// Output only. The time at which the version was created.
func (o VersionPtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who created the version.
func (o VersionPtrOutput) CreateUser() ActingUserPtrOutput {
	return o.ApplyT(func(v *Version) *ActingUser {
		if v == nil {
			return nil
		}
		return v.CreateUser
	}).(ActingUserPtrOutput)
}

// Output only. The time at which the version was `DELETED`.
func (o VersionPtrOutput) DeleteTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.DeleteTime
	}).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who `DELETED` the version.
func (o VersionPtrOutput) DeleteUser() ActingUserPtrOutput {
	return o.ApplyT(func(v *Version) *ActingUser {
		if v == nil {
			return nil
		}
		return v.DeleteUser
	}).(ActingUserPtrOutput)
}

// Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
func (o VersionPtrOutput) FileCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.FileCount
	}).(pulumi.StringPtrOutput)
}

// Output only. The time at which the version was `FINALIZED`.
func (o VersionPtrOutput) FinalizeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.FinalizeTime
	}).(pulumi.StringPtrOutput)
}

// Output only. Identifies the user who `FINALIZED` the version.
func (o VersionPtrOutput) FinalizeUser() ActingUserPtrOutput {
	return o.ApplyT(func(v *Version) *ActingUser {
		if v == nil {
			return nil
		}
		return v.FinalizeUser
	}).(ActingUserPtrOutput)
}

// The labels used for extra metadata and/or filtering.
func (o VersionPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Version) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
func (o VersionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Deprecated in favor of [site channels](sites.channels).
func (o VersionPtrOutput) Preview() PreviewConfigPtrOutput {
	return o.ApplyT(func(v *Version) *PreviewConfig {
		if v == nil {
			return nil
		}
		return v.Preview
	}).(PreviewConfigPtrOutput)
}

// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
func (o VersionPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
func (o VersionPtrOutput) VersionBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Version) *string {
		if v == nil {
			return nil
		}
		return v.VersionBytes
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ActingUserOutput{})
	pulumi.RegisterOutputType(ActingUserPtrOutput{})
	pulumi.RegisterOutputType(CertDnsChallengeOutput{})
	pulumi.RegisterOutputType(CertDnsChallengePtrOutput{})
	pulumi.RegisterOutputType(CertHttpChallengeOutput{})
	pulumi.RegisterOutputType(CertHttpChallengePtrOutput{})
	pulumi.RegisterOutputType(CloudRunRewriteOutput{})
	pulumi.RegisterOutputType(CloudRunRewritePtrOutput{})
	pulumi.RegisterOutputType(DomainProvisioningOutput{})
	pulumi.RegisterOutputType(DomainProvisioningPtrOutput{})
	pulumi.RegisterOutputType(DomainRedirectOutput{})
	pulumi.RegisterOutputType(DomainRedirectPtrOutput{})
	pulumi.RegisterOutputType(HeaderOutput{})
	pulumi.RegisterOutputType(HeaderArrayOutput{})
	pulumi.RegisterOutputType(I18nConfigOutput{})
	pulumi.RegisterOutputType(I18nConfigPtrOutput{})
	pulumi.RegisterOutputType(PreviewConfigOutput{})
	pulumi.RegisterOutputType(PreviewConfigPtrOutput{})
	pulumi.RegisterOutputType(RedirectOutput{})
	pulumi.RegisterOutputType(RedirectArrayOutput{})
	pulumi.RegisterOutputType(ReleaseOutput{})
	pulumi.RegisterOutputType(ReleasePtrOutput{})
	pulumi.RegisterOutputType(RewriteOutput{})
	pulumi.RegisterOutputType(RewriteArrayOutput{})
	pulumi.RegisterOutputType(ServingConfigOutput{})
	pulumi.RegisterOutputType(ServingConfigPtrOutput{})
	pulumi.RegisterOutputType(VersionOutput{})
	pulumi.RegisterOutputType(VersionPtrOutput{})
}
