// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
type ActingUserResponse struct {
	// The email address of the user when the user performed the action.
	Email string `pulumi:"email"`
	// A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
	ImageUrl string `pulumi:"imageUrl"`
}

// Contains metadata about the user who performed an action, such as creating a release or finalizing a version.
type ActingUserResponseOutput struct{ *pulumi.OutputState }

func (ActingUserResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActingUserResponse)(nil)).Elem()
}

func (o ActingUserResponseOutput) ToActingUserResponseOutput() ActingUserResponseOutput {
	return o
}

func (o ActingUserResponseOutput) ToActingUserResponseOutputWithContext(ctx context.Context) ActingUserResponseOutput {
	return o
}

// The email address of the user when the user performed the action.
func (o ActingUserResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ActingUserResponse) string { return v.Email }).(pulumi.StringOutput)
}

// A profile image URL for the user. May not be present if the user has changed their email address or deleted their account.
func (o ActingUserResponseOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ActingUserResponse) string { return v.ImageUrl }).(pulumi.StringOutput)
}

// Represents a DNS certificate challenge.
type CertDnsChallengeResponse struct {
	// The domain name upon which the DNS challenge must be satisfied.
	DomainName string `pulumi:"domainName"`
	// The value that must be present as a TXT record on the domain name to satisfy the challenge.
	Token string `pulumi:"token"`
}

// Represents a DNS certificate challenge.
type CertDnsChallengeResponseOutput struct{ *pulumi.OutputState }

func (CertDnsChallengeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertDnsChallengeResponse)(nil)).Elem()
}

func (o CertDnsChallengeResponseOutput) ToCertDnsChallengeResponseOutput() CertDnsChallengeResponseOutput {
	return o
}

func (o CertDnsChallengeResponseOutput) ToCertDnsChallengeResponseOutputWithContext(ctx context.Context) CertDnsChallengeResponseOutput {
	return o
}

// The domain name upon which the DNS challenge must be satisfied.
func (o CertDnsChallengeResponseOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CertDnsChallengeResponse) string { return v.DomainName }).(pulumi.StringOutput)
}

// The value that must be present as a TXT record on the domain name to satisfy the challenge.
func (o CertDnsChallengeResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v CertDnsChallengeResponse) string { return v.Token }).(pulumi.StringOutput)
}

// Represents an HTTP certificate challenge.
type CertHttpChallengeResponse struct {
	// The URL path on which to serve the specified token to satisfy the certificate challenge.
	Path string `pulumi:"path"`
	// The token to serve at the specified URL path to satisfy the certificate challenge.
	Token string `pulumi:"token"`
}

// Represents an HTTP certificate challenge.
type CertHttpChallengeResponseOutput struct{ *pulumi.OutputState }

func (CertHttpChallengeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertHttpChallengeResponse)(nil)).Elem()
}

func (o CertHttpChallengeResponseOutput) ToCertHttpChallengeResponseOutput() CertHttpChallengeResponseOutput {
	return o
}

func (o CertHttpChallengeResponseOutput) ToCertHttpChallengeResponseOutputWithContext(ctx context.Context) CertHttpChallengeResponseOutput {
	return o
}

// The URL path on which to serve the specified token to satisfy the certificate challenge.
func (o CertHttpChallengeResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CertHttpChallengeResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The token to serve at the specified URL path to satisfy the certificate challenge.
func (o CertHttpChallengeResponseOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v CertHttpChallengeResponse) string { return v.Token }).(pulumi.StringOutput)
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewrite struct {
	// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
	Region *string `pulumi:"region"`
	// User-defined ID of the Cloud Run service.
	ServiceId string `pulumi:"serviceId"`
}

// CloudRunRewriteInput is an input type that accepts CloudRunRewriteArgs and CloudRunRewriteOutput values.
// You can construct a concrete instance of `CloudRunRewriteInput` via:
//
//	CloudRunRewriteArgs{...}
type CloudRunRewriteInput interface {
	pulumi.Input

	ToCloudRunRewriteOutput() CloudRunRewriteOutput
	ToCloudRunRewriteOutputWithContext(context.Context) CloudRunRewriteOutput
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewriteArgs struct {
	// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// User-defined ID of the Cloud Run service.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (CloudRunRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunRewrite)(nil)).Elem()
}

func (i CloudRunRewriteArgs) ToCloudRunRewriteOutput() CloudRunRewriteOutput {
	return i.ToCloudRunRewriteOutputWithContext(context.Background())
}

func (i CloudRunRewriteArgs) ToCloudRunRewriteOutputWithContext(ctx context.Context) CloudRunRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunRewriteOutput)
}

func (i CloudRunRewriteArgs) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return i.ToCloudRunRewritePtrOutputWithContext(context.Background())
}

func (i CloudRunRewriteArgs) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunRewriteOutput).ToCloudRunRewritePtrOutputWithContext(ctx)
}

// CloudRunRewritePtrInput is an input type that accepts CloudRunRewriteArgs, CloudRunRewritePtr and CloudRunRewritePtrOutput values.
// You can construct a concrete instance of `CloudRunRewritePtrInput` via:
//
//	        CloudRunRewriteArgs{...}
//
//	or:
//
//	        nil
type CloudRunRewritePtrInput interface {
	pulumi.Input

	ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput
	ToCloudRunRewritePtrOutputWithContext(context.Context) CloudRunRewritePtrOutput
}

type cloudRunRewritePtrType CloudRunRewriteArgs

func CloudRunRewritePtr(v *CloudRunRewriteArgs) CloudRunRewritePtrInput {
	return (*cloudRunRewritePtrType)(v)
}

func (*cloudRunRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunRewrite)(nil)).Elem()
}

func (i *cloudRunRewritePtrType) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return i.ToCloudRunRewritePtrOutputWithContext(context.Background())
}

func (i *cloudRunRewritePtrType) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunRewritePtrOutput)
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewriteOutput struct{ *pulumi.OutputState }

func (CloudRunRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunRewrite)(nil)).Elem()
}

func (o CloudRunRewriteOutput) ToCloudRunRewriteOutput() CloudRunRewriteOutput {
	return o
}

func (o CloudRunRewriteOutput) ToCloudRunRewriteOutputWithContext(ctx context.Context) CloudRunRewriteOutput {
	return o
}

func (o CloudRunRewriteOutput) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return o.ToCloudRunRewritePtrOutputWithContext(context.Background())
}

func (o CloudRunRewriteOutput) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRunRewrite) *CloudRunRewrite {
		return &v
	}).(CloudRunRewritePtrOutput)
}

// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
func (o CloudRunRewriteOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRunRewrite) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// User-defined ID of the Cloud Run service.
func (o CloudRunRewriteOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunRewrite) string { return v.ServiceId }).(pulumi.StringOutput)
}

type CloudRunRewritePtrOutput struct{ *pulumi.OutputState }

func (CloudRunRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRunRewrite)(nil)).Elem()
}

func (o CloudRunRewritePtrOutput) ToCloudRunRewritePtrOutput() CloudRunRewritePtrOutput {
	return o
}

func (o CloudRunRewritePtrOutput) ToCloudRunRewritePtrOutputWithContext(ctx context.Context) CloudRunRewritePtrOutput {
	return o
}

func (o CloudRunRewritePtrOutput) Elem() CloudRunRewriteOutput {
	return o.ApplyT(func(v *CloudRunRewrite) CloudRunRewrite {
		if v != nil {
			return *v
		}
		var ret CloudRunRewrite
		return ret
	}).(CloudRunRewriteOutput)
}

// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
func (o CloudRunRewritePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunRewrite) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// User-defined ID of the Cloud Run service.
func (o CloudRunRewritePtrOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRunRewrite) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceId
	}).(pulumi.StringPtrOutput)
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewriteResponse struct {
	// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
	Region string `pulumi:"region"`
	// User-defined ID of the Cloud Run service.
	ServiceId string `pulumi:"serviceId"`
}

// A configured rewrite that directs requests to a Cloud Run service. If the Cloud Run service does not exist when setting or updating your Firebase Hosting configuration, then the request fails. Any errors from the Cloud Run service are passed to the end user (for example, if you delete a service, any requests directed to that service receive a `404` error).
type CloudRunRewriteResponseOutput struct{ *pulumi.OutputState }

func (CloudRunRewriteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunRewriteResponse)(nil)).Elem()
}

func (o CloudRunRewriteResponseOutput) ToCloudRunRewriteResponseOutput() CloudRunRewriteResponseOutput {
	return o
}

func (o CloudRunRewriteResponseOutput) ToCloudRunRewriteResponseOutputWithContext(ctx context.Context) CloudRunRewriteResponseOutput {
	return o
}

// Optional. User-provided region where the Cloud Run service is hosted. Defaults to `us-central1` if not supplied.
func (o CloudRunRewriteResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunRewriteResponse) string { return v.Region }).(pulumi.StringOutput)
}

// User-defined ID of the Cloud Run service.
func (o CloudRunRewriteResponseOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunRewriteResponse) string { return v.ServiceId }).(pulumi.StringOutput)
}

// The current certificate provisioning status information for a domain.
type DomainProvisioningResponse struct {
	// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
	CertChallengeDiscoveredTxt []string `pulumi:"certChallengeDiscoveredTxt"`
	// The DNS challenge for generating a certificate.
	CertChallengeDns CertDnsChallengeResponse `pulumi:"certChallengeDns"`
	// The HTTP challenge for generating a certificate.
	CertChallengeHttp CertHttpChallengeResponse `pulumi:"certChallengeHttp"`
	// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
	CertStatus string `pulumi:"certStatus"`
	// The IPs found at the last DNS fetch.
	DiscoveredIps []string `pulumi:"discoveredIps"`
	// The time at which the last DNS fetch occurred.
	DnsFetchTime string `pulumi:"dnsFetchTime"`
	// The DNS record match status as of the last DNS fetch.
	DnsStatus string `pulumi:"dnsStatus"`
	// The list of IPs to which the domain is expected to resolve.
	ExpectedIps []string `pulumi:"expectedIps"`
}

// The current certificate provisioning status information for a domain.
type DomainProvisioningResponseOutput struct{ *pulumi.OutputState }

func (DomainProvisioningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainProvisioningResponse)(nil)).Elem()
}

func (o DomainProvisioningResponseOutput) ToDomainProvisioningResponseOutput() DomainProvisioningResponseOutput {
	return o
}

func (o DomainProvisioningResponseOutput) ToDomainProvisioningResponseOutputWithContext(ctx context.Context) DomainProvisioningResponseOutput {
	return o
}

// The TXT records (for the certificate challenge) that were found at the last DNS fetch.
func (o DomainProvisioningResponseOutput) CertChallengeDiscoveredTxt() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) []string { return v.CertChallengeDiscoveredTxt }).(pulumi.StringArrayOutput)
}

// The DNS challenge for generating a certificate.
func (o DomainProvisioningResponseOutput) CertChallengeDns() CertDnsChallengeResponseOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) CertDnsChallengeResponse { return v.CertChallengeDns }).(CertDnsChallengeResponseOutput)
}

// The HTTP challenge for generating a certificate.
func (o DomainProvisioningResponseOutput) CertChallengeHttp() CertHttpChallengeResponseOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) CertHttpChallengeResponse { return v.CertChallengeHttp }).(CertHttpChallengeResponseOutput)
}

// The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
func (o DomainProvisioningResponseOutput) CertStatus() pulumi.StringOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) string { return v.CertStatus }).(pulumi.StringOutput)
}

// The IPs found at the last DNS fetch.
func (o DomainProvisioningResponseOutput) DiscoveredIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) []string { return v.DiscoveredIps }).(pulumi.StringArrayOutput)
}

// The time at which the last DNS fetch occurred.
func (o DomainProvisioningResponseOutput) DnsFetchTime() pulumi.StringOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) string { return v.DnsFetchTime }).(pulumi.StringOutput)
}

// The DNS record match status as of the last DNS fetch.
func (o DomainProvisioningResponseOutput) DnsStatus() pulumi.StringOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) string { return v.DnsStatus }).(pulumi.StringOutput)
}

// The list of IPs to which the domain is expected to resolve.
func (o DomainProvisioningResponseOutput) ExpectedIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DomainProvisioningResponse) []string { return v.ExpectedIps }).(pulumi.StringArrayOutput)
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirect struct {
	// The domain name to redirect to.
	DomainName string `pulumi:"domainName"`
	// The redirect status code.
	Type DomainRedirectType `pulumi:"type"`
}

// DomainRedirectInput is an input type that accepts DomainRedirectArgs and DomainRedirectOutput values.
// You can construct a concrete instance of `DomainRedirectInput` via:
//
//	DomainRedirectArgs{...}
type DomainRedirectInput interface {
	pulumi.Input

	ToDomainRedirectOutput() DomainRedirectOutput
	ToDomainRedirectOutputWithContext(context.Context) DomainRedirectOutput
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirectArgs struct {
	// The domain name to redirect to.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The redirect status code.
	Type DomainRedirectTypeInput `pulumi:"type"`
}

func (DomainRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (i DomainRedirectArgs) ToDomainRedirectOutput() DomainRedirectOutput {
	return i.ToDomainRedirectOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput)
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i DomainRedirectArgs) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectOutput).ToDomainRedirectPtrOutputWithContext(ctx)
}

// DomainRedirectPtrInput is an input type that accepts DomainRedirectArgs, DomainRedirectPtr and DomainRedirectPtrOutput values.
// You can construct a concrete instance of `DomainRedirectPtrInput` via:
//
//	        DomainRedirectArgs{...}
//
//	or:
//
//	        nil
type DomainRedirectPtrInput interface {
	pulumi.Input

	ToDomainRedirectPtrOutput() DomainRedirectPtrOutput
	ToDomainRedirectPtrOutputWithContext(context.Context) DomainRedirectPtrOutput
}

type domainRedirectPtrType DomainRedirectArgs

func DomainRedirectPtr(v *DomainRedirectArgs) DomainRedirectPtrInput {
	return (*domainRedirectPtrType)(v)
}

func (*domainRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return i.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (i *domainRedirectPtrType) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRedirectPtrOutput)
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirectOutput struct{ *pulumi.OutputState }

func (DomainRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectOutput) ToDomainRedirectOutput() DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectOutputWithContext(ctx context.Context) DomainRedirectOutput {
	return o
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o.ToDomainRedirectPtrOutputWithContext(context.Background())
}

func (o DomainRedirectOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DomainRedirect) *DomainRedirect {
		return &v
	}).(DomainRedirectPtrOutput)
}

// The domain name to redirect to.
func (o DomainRedirectOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRedirect) string { return v.DomainName }).(pulumi.StringOutput)
}

// The redirect status code.
func (o DomainRedirectOutput) Type() DomainRedirectTypeOutput {
	return o.ApplyT(func(v DomainRedirect) DomainRedirectType { return v.Type }).(DomainRedirectTypeOutput)
}

type DomainRedirectPtrOutput struct{ *pulumi.OutputState }

func (DomainRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRedirect)(nil)).Elem()
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutput() DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) ToDomainRedirectPtrOutputWithContext(ctx context.Context) DomainRedirectPtrOutput {
	return o
}

func (o DomainRedirectPtrOutput) Elem() DomainRedirectOutput {
	return o.ApplyT(func(v *DomainRedirect) DomainRedirect {
		if v != nil {
			return *v
		}
		var ret DomainRedirect
		return ret
	}).(DomainRedirectOutput)
}

// The domain name to redirect to.
func (o DomainRedirectPtrOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *string {
		if v == nil {
			return nil
		}
		return &v.DomainName
	}).(pulumi.StringPtrOutput)
}

// The redirect status code.
func (o DomainRedirectPtrOutput) Type() DomainRedirectTypePtrOutput {
	return o.ApplyT(func(v *DomainRedirect) *DomainRedirectType {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(DomainRedirectTypePtrOutput)
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirectResponse struct {
	// The domain name to redirect to.
	DomainName string `pulumi:"domainName"`
	// The redirect status code.
	Type string `pulumi:"type"`
}

// Defines the behavior of a domain-level redirect. Domain redirects preserve the path of the redirect but replace the requested domain with the one specified in the redirect configuration.
type DomainRedirectResponseOutput struct{ *pulumi.OutputState }

func (DomainRedirectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DomainRedirectResponse)(nil)).Elem()
}

func (o DomainRedirectResponseOutput) ToDomainRedirectResponseOutput() DomainRedirectResponseOutput {
	return o
}

func (o DomainRedirectResponseOutput) ToDomainRedirectResponseOutputWithContext(ctx context.Context) DomainRedirectResponseOutput {
	return o
}

// The domain name to redirect to.
func (o DomainRedirectResponseOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRedirectResponse) string { return v.DomainName }).(pulumi.StringOutput)
}

// The redirect status code.
func (o DomainRedirectResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DomainRedirectResponse) string { return v.Type }).(pulumi.StringOutput)
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type Header struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob *string `pulumi:"glob"`
	// The additional headers to add to the response.
	Headers map[string]string `pulumi:"headers"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex *string `pulumi:"regex"`
}

// HeaderInput is an input type that accepts HeaderArgs and HeaderOutput values.
// You can construct a concrete instance of `HeaderInput` via:
//
//	HeaderArgs{...}
type HeaderInput interface {
	pulumi.Input

	ToHeaderOutput() HeaderOutput
	ToHeaderOutputWithContext(context.Context) HeaderOutput
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type HeaderArgs struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob pulumi.StringPtrInput `pulumi:"glob"`
	// The additional headers to add to the response.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
}

func (HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (i HeaderArgs) ToHeaderOutput() HeaderOutput {
	return i.ToHeaderOutputWithContext(context.Background())
}

func (i HeaderArgs) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderOutput)
}

// HeaderArrayInput is an input type that accepts HeaderArray and HeaderArrayOutput values.
// You can construct a concrete instance of `HeaderArrayInput` via:
//
//	HeaderArray{ HeaderArgs{...} }
type HeaderArrayInput interface {
	pulumi.Input

	ToHeaderArrayOutput() HeaderArrayOutput
	ToHeaderArrayOutputWithContext(context.Context) HeaderArrayOutput
}

type HeaderArray []HeaderInput

func (HeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Header)(nil)).Elem()
}

func (i HeaderArray) ToHeaderArrayOutput() HeaderArrayOutput {
	return i.ToHeaderArrayOutputWithContext(context.Background())
}

func (i HeaderArray) ToHeaderArrayOutputWithContext(ctx context.Context) HeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeaderArrayOutput)
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type HeaderOutput struct{ *pulumi.OutputState }

func (HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Header)(nil)).Elem()
}

func (o HeaderOutput) ToHeaderOutput() HeaderOutput {
	return o
}

func (o HeaderOutput) ToHeaderOutputWithContext(ctx context.Context) HeaderOutput {
	return o
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o HeaderOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Header) *string { return v.Glob }).(pulumi.StringPtrOutput)
}

// The additional headers to add to the response.
func (o HeaderOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v Header) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o HeaderOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Header) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

type HeaderArrayOutput struct{ *pulumi.OutputState }

func (HeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Header)(nil)).Elem()
}

func (o HeaderArrayOutput) ToHeaderArrayOutput() HeaderArrayOutput {
	return o
}

func (o HeaderArrayOutput) ToHeaderArrayOutputWithContext(ctx context.Context) HeaderArrayOutput {
	return o
}

func (o HeaderArrayOutput) Index(i pulumi.IntInput) HeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Header {
		return vs[0].([]Header)[vs[1].(int)]
	}).(HeaderOutput)
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type HeaderResponse struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob string `pulumi:"glob"`
	// The additional headers to add to the response.
	Headers map[string]string `pulumi:"headers"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex string `pulumi:"regex"`
}

// A [`Header`](https://firebase.google.com/docs/hosting/full-config#headers) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
type HeaderResponseOutput struct{ *pulumi.OutputState }

func (HeaderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HeaderResponse)(nil)).Elem()
}

func (o HeaderResponseOutput) ToHeaderResponseOutput() HeaderResponseOutput {
	return o
}

func (o HeaderResponseOutput) ToHeaderResponseOutputWithContext(ctx context.Context) HeaderResponseOutput {
	return o
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o HeaderResponseOutput) Glob() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderResponse) string { return v.Glob }).(pulumi.StringOutput)
}

// The additional headers to add to the response.
func (o HeaderResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v HeaderResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o HeaderResponseOutput) Regex() pulumi.StringOutput {
	return o.ApplyT(func(v HeaderResponse) string { return v.Regex }).(pulumi.StringOutput)
}

type HeaderResponseArrayOutput struct{ *pulumi.OutputState }

func (HeaderResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HeaderResponse)(nil)).Elem()
}

func (o HeaderResponseArrayOutput) ToHeaderResponseArrayOutput() HeaderResponseArrayOutput {
	return o
}

func (o HeaderResponseArrayOutput) ToHeaderResponseArrayOutputWithContext(ctx context.Context) HeaderResponseArrayOutput {
	return o
}

func (o HeaderResponseArrayOutput) Index(i pulumi.IntInput) HeaderResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HeaderResponse {
		return vs[0].([]HeaderResponse)[vs[1].(int)]
	}).(HeaderResponseOutput)
}

// If provided, i18n rewrites are enabled.
type I18nConfig struct {
	// The user-supplied path where country and language specific content will be looked for within the public directory.
	Root string `pulumi:"root"`
}

// I18nConfigInput is an input type that accepts I18nConfigArgs and I18nConfigOutput values.
// You can construct a concrete instance of `I18nConfigInput` via:
//
//	I18nConfigArgs{...}
type I18nConfigInput interface {
	pulumi.Input

	ToI18nConfigOutput() I18nConfigOutput
	ToI18nConfigOutputWithContext(context.Context) I18nConfigOutput
}

// If provided, i18n rewrites are enabled.
type I18nConfigArgs struct {
	// The user-supplied path where country and language specific content will be looked for within the public directory.
	Root pulumi.StringInput `pulumi:"root"`
}

func (I18nConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*I18nConfig)(nil)).Elem()
}

func (i I18nConfigArgs) ToI18nConfigOutput() I18nConfigOutput {
	return i.ToI18nConfigOutputWithContext(context.Background())
}

func (i I18nConfigArgs) ToI18nConfigOutputWithContext(ctx context.Context) I18nConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(I18nConfigOutput)
}

func (i I18nConfigArgs) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return i.ToI18nConfigPtrOutputWithContext(context.Background())
}

func (i I18nConfigArgs) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(I18nConfigOutput).ToI18nConfigPtrOutputWithContext(ctx)
}

// I18nConfigPtrInput is an input type that accepts I18nConfigArgs, I18nConfigPtr and I18nConfigPtrOutput values.
// You can construct a concrete instance of `I18nConfigPtrInput` via:
//
//	        I18nConfigArgs{...}
//
//	or:
//
//	        nil
type I18nConfigPtrInput interface {
	pulumi.Input

	ToI18nConfigPtrOutput() I18nConfigPtrOutput
	ToI18nConfigPtrOutputWithContext(context.Context) I18nConfigPtrOutput
}

type i18nConfigPtrType I18nConfigArgs

func I18nConfigPtr(v *I18nConfigArgs) I18nConfigPtrInput {
	return (*i18nConfigPtrType)(v)
}

func (*i18nConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**I18nConfig)(nil)).Elem()
}

func (i *i18nConfigPtrType) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return i.ToI18nConfigPtrOutputWithContext(context.Background())
}

func (i *i18nConfigPtrType) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(I18nConfigPtrOutput)
}

// If provided, i18n rewrites are enabled.
type I18nConfigOutput struct{ *pulumi.OutputState }

func (I18nConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*I18nConfig)(nil)).Elem()
}

func (o I18nConfigOutput) ToI18nConfigOutput() I18nConfigOutput {
	return o
}

func (o I18nConfigOutput) ToI18nConfigOutputWithContext(ctx context.Context) I18nConfigOutput {
	return o
}

func (o I18nConfigOutput) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return o.ToI18nConfigPtrOutputWithContext(context.Background())
}

func (o I18nConfigOutput) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v I18nConfig) *I18nConfig {
		return &v
	}).(I18nConfigPtrOutput)
}

// The user-supplied path where country and language specific content will be looked for within the public directory.
func (o I18nConfigOutput) Root() pulumi.StringOutput {
	return o.ApplyT(func(v I18nConfig) string { return v.Root }).(pulumi.StringOutput)
}

type I18nConfigPtrOutput struct{ *pulumi.OutputState }

func (I18nConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**I18nConfig)(nil)).Elem()
}

func (o I18nConfigPtrOutput) ToI18nConfigPtrOutput() I18nConfigPtrOutput {
	return o
}

func (o I18nConfigPtrOutput) ToI18nConfigPtrOutputWithContext(ctx context.Context) I18nConfigPtrOutput {
	return o
}

func (o I18nConfigPtrOutput) Elem() I18nConfigOutput {
	return o.ApplyT(func(v *I18nConfig) I18nConfig {
		if v != nil {
			return *v
		}
		var ret I18nConfig
		return ret
	}).(I18nConfigOutput)
}

// The user-supplied path where country and language specific content will be looked for within the public directory.
func (o I18nConfigPtrOutput) Root() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *I18nConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Root
	}).(pulumi.StringPtrOutput)
}

// If provided, i18n rewrites are enabled.
type I18nConfigResponse struct {
	// The user-supplied path where country and language specific content will be looked for within the public directory.
	Root string `pulumi:"root"`
}

// If provided, i18n rewrites are enabled.
type I18nConfigResponseOutput struct{ *pulumi.OutputState }

func (I18nConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*I18nConfigResponse)(nil)).Elem()
}

func (o I18nConfigResponseOutput) ToI18nConfigResponseOutput() I18nConfigResponseOutput {
	return o
}

func (o I18nConfigResponseOutput) ToI18nConfigResponseOutputWithContext(ctx context.Context) I18nConfigResponseOutput {
	return o
}

// The user-supplied path where country and language specific content will be looked for within the public directory.
func (o I18nConfigResponseOutput) Root() pulumi.StringOutput {
	return o.ApplyT(func(v I18nConfigResponse) string { return v.Root }).(pulumi.StringOutput)
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type Redirect struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob *string `pulumi:"glob"`
	// The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
	Location string `pulumi:"location"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex *string `pulumi:"regex"`
	// The status HTTP code to return in the response. It must be a valid 3xx status code.
	StatusCode int `pulumi:"statusCode"`
}

// RedirectInput is an input type that accepts RedirectArgs and RedirectOutput values.
// You can construct a concrete instance of `RedirectInput` via:
//
//	RedirectArgs{...}
type RedirectInput interface {
	pulumi.Input

	ToRedirectOutput() RedirectOutput
	ToRedirectOutputWithContext(context.Context) RedirectOutput
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type RedirectArgs struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob pulumi.StringPtrInput `pulumi:"glob"`
	// The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
	Location pulumi.StringInput `pulumi:"location"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The status HTTP code to return in the response. It must be a valid 3xx status code.
	StatusCode pulumi.IntInput `pulumi:"statusCode"`
}

func (RedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Redirect)(nil)).Elem()
}

func (i RedirectArgs) ToRedirectOutput() RedirectOutput {
	return i.ToRedirectOutputWithContext(context.Background())
}

func (i RedirectArgs) ToRedirectOutputWithContext(ctx context.Context) RedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectOutput)
}

// RedirectArrayInput is an input type that accepts RedirectArray and RedirectArrayOutput values.
// You can construct a concrete instance of `RedirectArrayInput` via:
//
//	RedirectArray{ RedirectArgs{...} }
type RedirectArrayInput interface {
	pulumi.Input

	ToRedirectArrayOutput() RedirectArrayOutput
	ToRedirectArrayOutputWithContext(context.Context) RedirectArrayOutput
}

type RedirectArray []RedirectInput

func (RedirectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Redirect)(nil)).Elem()
}

func (i RedirectArray) ToRedirectArrayOutput() RedirectArrayOutput {
	return i.ToRedirectArrayOutputWithContext(context.Background())
}

func (i RedirectArray) ToRedirectArrayOutputWithContext(ctx context.Context) RedirectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectArrayOutput)
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type RedirectOutput struct{ *pulumi.OutputState }

func (RedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Redirect)(nil)).Elem()
}

func (o RedirectOutput) ToRedirectOutput() RedirectOutput {
	return o
}

func (o RedirectOutput) ToRedirectOutputWithContext(ctx context.Context) RedirectOutput {
	return o
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o RedirectOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Redirect) *string { return v.Glob }).(pulumi.StringPtrOutput)
}

// The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
func (o RedirectOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v Redirect) string { return v.Location }).(pulumi.StringOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o RedirectOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Redirect) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The status HTTP code to return in the response. It must be a valid 3xx status code.
func (o RedirectOutput) StatusCode() pulumi.IntOutput {
	return o.ApplyT(func(v Redirect) int { return v.StatusCode }).(pulumi.IntOutput)
}

type RedirectArrayOutput struct{ *pulumi.OutputState }

func (RedirectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Redirect)(nil)).Elem()
}

func (o RedirectArrayOutput) ToRedirectArrayOutput() RedirectArrayOutput {
	return o
}

func (o RedirectArrayOutput) ToRedirectArrayOutputWithContext(ctx context.Context) RedirectArrayOutput {
	return o
}

func (o RedirectArrayOutput) Index(i pulumi.IntInput) RedirectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Redirect {
		return vs[0].([]Redirect)[vs[1].(int)]
	}).(RedirectOutput)
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type RedirectResponse struct {
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob string `pulumi:"glob"`
	// The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
	Location string `pulumi:"location"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex string `pulumi:"regex"`
	// The status HTTP code to return in the response. It must be a valid 3xx status code.
	StatusCode int `pulumi:"statusCode"`
}

// A [`Redirect`](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
type RedirectResponseOutput struct{ *pulumi.OutputState }

func (RedirectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RedirectResponse)(nil)).Elem()
}

func (o RedirectResponseOutput) ToRedirectResponseOutput() RedirectResponseOutput {
	return o
}

func (o RedirectResponseOutput) ToRedirectResponseOutputWithContext(ctx context.Context) RedirectResponseOutput {
	return o
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o RedirectResponseOutput) Glob() pulumi.StringOutput {
	return o.ApplyT(func(v RedirectResponse) string { return v.Glob }).(pulumi.StringOutput)
}

// The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: "glob": "/:capture*", "statusCode": 301, "location": "https://example.com/foo/:capture"
func (o RedirectResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v RedirectResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o RedirectResponseOutput) Regex() pulumi.StringOutput {
	return o.ApplyT(func(v RedirectResponse) string { return v.Regex }).(pulumi.StringOutput)
}

// The status HTTP code to return in the response. It must be a valid 3xx status code.
func (o RedirectResponseOutput) StatusCode() pulumi.IntOutput {
	return o.ApplyT(func(v RedirectResponse) int { return v.StatusCode }).(pulumi.IntOutput)
}

type RedirectResponseArrayOutput struct{ *pulumi.OutputState }

func (RedirectResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RedirectResponse)(nil)).Elem()
}

func (o RedirectResponseArrayOutput) ToRedirectResponseArrayOutput() RedirectResponseArrayOutput {
	return o
}

func (o RedirectResponseArrayOutput) ToRedirectResponseArrayOutputWithContext(ctx context.Context) RedirectResponseArrayOutput {
	return o
}

func (o RedirectResponseArrayOutput) Index(i pulumi.IntInput) RedirectResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RedirectResponse {
		return vs[0].([]RedirectResponse)[vs[1].(int)]
	}).(RedirectResponseOutput)
}

// A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
type ReleaseResponse struct {
	// The deploy description when the release was created. The value can be up to 512 characters.
	Message string `pulumi:"message"`
	// The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
	Name string `pulumi:"name"`
	// The time at which the version is set to be public.
	ReleaseTime string `pulumi:"releaseTime"`
	// Identifies the user who created the release.
	ReleaseUser ActingUserResponse `pulumi:"releaseUser"`
	// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
	Type string `pulumi:"type"`
	// The configuration and content that was released.
	Version VersionResponse `pulumi:"version"`
}

// A `Release` is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
type ReleaseResponseOutput struct{ *pulumi.OutputState }

func (ReleaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleaseResponse)(nil)).Elem()
}

func (o ReleaseResponseOutput) ToReleaseResponseOutput() ReleaseResponseOutput {
	return o
}

func (o ReleaseResponseOutput) ToReleaseResponseOutputWithContext(ctx context.Context) ReleaseResponseOutput {
	return o
}

// The deploy description when the release was created. The value can be up to 512 characters.
func (o ReleaseResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
func (o ReleaseResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The time at which the version is set to be public.
func (o ReleaseResponseOutput) ReleaseTime() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseResponse) string { return v.ReleaseTime }).(pulumi.StringOutput)
}

// Identifies the user who created the release.
func (o ReleaseResponseOutput) ReleaseUser() ActingUserResponseOutput {
	return o.ApplyT(func(v ReleaseResponse) ActingUserResponse { return v.ReleaseUser }).(ActingUserResponseOutput)
}

// Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
func (o ReleaseResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ReleaseResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The configuration and content that was released.
func (o ReleaseResponseOutput) Version() VersionResponseOutput {
	return o.ApplyT(func(v ReleaseResponse) VersionResponse { return v.Version }).(VersionResponseOutput)
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type Rewrite struct {
	// The request will be forwarded to Firebase Dynamic Links.
	DynamicLinks *bool `pulumi:"dynamicLinks"`
	// The function to proxy requests to. Must match the exported function name exactly.
	Function *string `pulumi:"function"`
	// Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
	FunctionRegion *string `pulumi:"functionRegion"`
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob *string `pulumi:"glob"`
	// The URL path to rewrite the request to.
	Path *string `pulumi:"path"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex *string `pulumi:"regex"`
	// The request will be forwarded to Cloud Run.
	Run *CloudRunRewrite `pulumi:"run"`
}

// RewriteInput is an input type that accepts RewriteArgs and RewriteOutput values.
// You can construct a concrete instance of `RewriteInput` via:
//
//	RewriteArgs{...}
type RewriteInput interface {
	pulumi.Input

	ToRewriteOutput() RewriteOutput
	ToRewriteOutputWithContext(context.Context) RewriteOutput
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type RewriteArgs struct {
	// The request will be forwarded to Firebase Dynamic Links.
	DynamicLinks pulumi.BoolPtrInput `pulumi:"dynamicLinks"`
	// The function to proxy requests to. Must match the exported function name exactly.
	Function pulumi.StringPtrInput `pulumi:"function"`
	// Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
	FunctionRegion pulumi.StringPtrInput `pulumi:"functionRegion"`
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob pulumi.StringPtrInput `pulumi:"glob"`
	// The URL path to rewrite the request to.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// The request will be forwarded to Cloud Run.
	Run CloudRunRewritePtrInput `pulumi:"run"`
}

func (RewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rewrite)(nil)).Elem()
}

func (i RewriteArgs) ToRewriteOutput() RewriteOutput {
	return i.ToRewriteOutputWithContext(context.Background())
}

func (i RewriteArgs) ToRewriteOutputWithContext(ctx context.Context) RewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RewriteOutput)
}

// RewriteArrayInput is an input type that accepts RewriteArray and RewriteArrayOutput values.
// You can construct a concrete instance of `RewriteArrayInput` via:
//
//	RewriteArray{ RewriteArgs{...} }
type RewriteArrayInput interface {
	pulumi.Input

	ToRewriteArrayOutput() RewriteArrayOutput
	ToRewriteArrayOutputWithContext(context.Context) RewriteArrayOutput
}

type RewriteArray []RewriteInput

func (RewriteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rewrite)(nil)).Elem()
}

func (i RewriteArray) ToRewriteArrayOutput() RewriteArrayOutput {
	return i.ToRewriteArrayOutputWithContext(context.Background())
}

func (i RewriteArray) ToRewriteArrayOutputWithContext(ctx context.Context) RewriteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RewriteArrayOutput)
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type RewriteOutput struct{ *pulumi.OutputState }

func (RewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rewrite)(nil)).Elem()
}

func (o RewriteOutput) ToRewriteOutput() RewriteOutput {
	return o
}

func (o RewriteOutput) ToRewriteOutputWithContext(ctx context.Context) RewriteOutput {
	return o
}

// The request will be forwarded to Firebase Dynamic Links.
func (o RewriteOutput) DynamicLinks() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Rewrite) *bool { return v.DynamicLinks }).(pulumi.BoolPtrOutput)
}

// The function to proxy requests to. Must match the exported function name exactly.
func (o RewriteOutput) Function() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Function }).(pulumi.StringPtrOutput)
}

// Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
func (o RewriteOutput) FunctionRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.FunctionRegion }).(pulumi.StringPtrOutput)
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o RewriteOutput) Glob() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Glob }).(pulumi.StringPtrOutput)
}

// The URL path to rewrite the request to.
func (o RewriteOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o RewriteOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Rewrite) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// The request will be forwarded to Cloud Run.
func (o RewriteOutput) Run() CloudRunRewritePtrOutput {
	return o.ApplyT(func(v Rewrite) *CloudRunRewrite { return v.Run }).(CloudRunRewritePtrOutput)
}

type RewriteArrayOutput struct{ *pulumi.OutputState }

func (RewriteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rewrite)(nil)).Elem()
}

func (o RewriteArrayOutput) ToRewriteArrayOutput() RewriteArrayOutput {
	return o
}

func (o RewriteArrayOutput) ToRewriteArrayOutputWithContext(ctx context.Context) RewriteArrayOutput {
	return o
}

func (o RewriteArrayOutput) Index(i pulumi.IntInput) RewriteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Rewrite {
		return vs[0].([]Rewrite)[vs[1].(int)]
	}).(RewriteOutput)
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type RewriteResponse struct {
	// The request will be forwarded to Firebase Dynamic Links.
	DynamicLinks bool `pulumi:"dynamicLinks"`
	// The function to proxy requests to. Must match the exported function name exactly.
	Function string `pulumi:"function"`
	// Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
	FunctionRegion string `pulumi:"functionRegion"`
	// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
	Glob string `pulumi:"glob"`
	// The URL path to rewrite the request to.
	Path string `pulumi:"path"`
	// The user-supplied RE2 regular expression to match against the request URL path.
	Regex string `pulumi:"regex"`
	// The request will be forwarded to Cloud Run.
	Run CloudRunRewriteResponse `pulumi:"run"`
}

// A [`Rewrite`](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
type RewriteResponseOutput struct{ *pulumi.OutputState }

func (RewriteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RewriteResponse)(nil)).Elem()
}

func (o RewriteResponseOutput) ToRewriteResponseOutput() RewriteResponseOutput {
	return o
}

func (o RewriteResponseOutput) ToRewriteResponseOutputWithContext(ctx context.Context) RewriteResponseOutput {
	return o
}

// The request will be forwarded to Firebase Dynamic Links.
func (o RewriteResponseOutput) DynamicLinks() pulumi.BoolOutput {
	return o.ApplyT(func(v RewriteResponse) bool { return v.DynamicLinks }).(pulumi.BoolOutput)
}

// The function to proxy requests to. Must match the exported function name exactly.
func (o RewriteResponseOutput) Function() pulumi.StringOutput {
	return o.ApplyT(func(v RewriteResponse) string { return v.Function }).(pulumi.StringOutput)
}

// Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
func (o RewriteResponseOutput) FunctionRegion() pulumi.StringOutput {
	return o.ApplyT(func(v RewriteResponse) string { return v.FunctionRegion }).(pulumi.StringOutput)
}

// The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
func (o RewriteResponseOutput) Glob() pulumi.StringOutput {
	return o.ApplyT(func(v RewriteResponse) string { return v.Glob }).(pulumi.StringOutput)
}

// The URL path to rewrite the request to.
func (o RewriteResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v RewriteResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The user-supplied RE2 regular expression to match against the request URL path.
func (o RewriteResponseOutput) Regex() pulumi.StringOutput {
	return o.ApplyT(func(v RewriteResponse) string { return v.Regex }).(pulumi.StringOutput)
}

// The request will be forwarded to Cloud Run.
func (o RewriteResponseOutput) Run() CloudRunRewriteResponseOutput {
	return o.ApplyT(func(v RewriteResponse) CloudRunRewriteResponse { return v.Run }).(CloudRunRewriteResponseOutput)
}

type RewriteResponseArrayOutput struct{ *pulumi.OutputState }

func (RewriteResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RewriteResponse)(nil)).Elem()
}

func (o RewriteResponseArrayOutput) ToRewriteResponseArrayOutput() RewriteResponseArrayOutput {
	return o
}

func (o RewriteResponseArrayOutput) ToRewriteResponseArrayOutputWithContext(ctx context.Context) RewriteResponseArrayOutput {
	return o
}

func (o RewriteResponseArrayOutput) Index(i pulumi.IntInput) RewriteResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RewriteResponse {
		return vs[0].([]RewriteResponse)[vs[1].(int)]
	}).(RewriteResponseOutput)
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfig struct {
	// How to handle well known App Association files.
	AppAssociation *ServingConfigAppAssociation `pulumi:"appAssociation"`
	// Defines whether to drop the file extension from uploaded files.
	CleanUrls *bool `pulumi:"cleanUrls"`
	// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
	Headers []Header `pulumi:"headers"`
	// Optional. Defines i18n rewrite behavior.
	I18n *I18nConfig `pulumi:"i18n"`
	// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
	Redirects []Redirect `pulumi:"redirects"`
	// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
	Rewrites []Rewrite `pulumi:"rewrites"`
	// Defines how to handle a trailing slash in the URL path.
	TrailingSlashBehavior *ServingConfigTrailingSlashBehavior `pulumi:"trailingSlashBehavior"`
}

// ServingConfigInput is an input type that accepts ServingConfigArgs and ServingConfigOutput values.
// You can construct a concrete instance of `ServingConfigInput` via:
//
//	ServingConfigArgs{...}
type ServingConfigInput interface {
	pulumi.Input

	ToServingConfigOutput() ServingConfigOutput
	ToServingConfigOutputWithContext(context.Context) ServingConfigOutput
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfigArgs struct {
	// How to handle well known App Association files.
	AppAssociation ServingConfigAppAssociationPtrInput `pulumi:"appAssociation"`
	// Defines whether to drop the file extension from uploaded files.
	CleanUrls pulumi.BoolPtrInput `pulumi:"cleanUrls"`
	// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
	Headers HeaderArrayInput `pulumi:"headers"`
	// Optional. Defines i18n rewrite behavior.
	I18n I18nConfigPtrInput `pulumi:"i18n"`
	// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
	Redirects RedirectArrayInput `pulumi:"redirects"`
	// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
	Rewrites RewriteArrayInput `pulumi:"rewrites"`
	// Defines how to handle a trailing slash in the URL path.
	TrailingSlashBehavior ServingConfigTrailingSlashBehaviorPtrInput `pulumi:"trailingSlashBehavior"`
}

func (ServingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServingConfig)(nil)).Elem()
}

func (i ServingConfigArgs) ToServingConfigOutput() ServingConfigOutput {
	return i.ToServingConfigOutputWithContext(context.Background())
}

func (i ServingConfigArgs) ToServingConfigOutputWithContext(ctx context.Context) ServingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServingConfigOutput)
}

func (i ServingConfigArgs) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return i.ToServingConfigPtrOutputWithContext(context.Background())
}

func (i ServingConfigArgs) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServingConfigOutput).ToServingConfigPtrOutputWithContext(ctx)
}

// ServingConfigPtrInput is an input type that accepts ServingConfigArgs, ServingConfigPtr and ServingConfigPtrOutput values.
// You can construct a concrete instance of `ServingConfigPtrInput` via:
//
//	        ServingConfigArgs{...}
//
//	or:
//
//	        nil
type ServingConfigPtrInput interface {
	pulumi.Input

	ToServingConfigPtrOutput() ServingConfigPtrOutput
	ToServingConfigPtrOutputWithContext(context.Context) ServingConfigPtrOutput
}

type servingConfigPtrType ServingConfigArgs

func ServingConfigPtr(v *ServingConfigArgs) ServingConfigPtrInput {
	return (*servingConfigPtrType)(v)
}

func (*servingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServingConfig)(nil)).Elem()
}

func (i *servingConfigPtrType) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return i.ToServingConfigPtrOutputWithContext(context.Background())
}

func (i *servingConfigPtrType) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServingConfigPtrOutput)
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfigOutput struct{ *pulumi.OutputState }

func (ServingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServingConfig)(nil)).Elem()
}

func (o ServingConfigOutput) ToServingConfigOutput() ServingConfigOutput {
	return o
}

func (o ServingConfigOutput) ToServingConfigOutputWithContext(ctx context.Context) ServingConfigOutput {
	return o
}

func (o ServingConfigOutput) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return o.ToServingConfigPtrOutputWithContext(context.Background())
}

func (o ServingConfigOutput) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServingConfig) *ServingConfig {
		return &v
	}).(ServingConfigPtrOutput)
}

// How to handle well known App Association files.
func (o ServingConfigOutput) AppAssociation() ServingConfigAppAssociationPtrOutput {
	return o.ApplyT(func(v ServingConfig) *ServingConfigAppAssociation { return v.AppAssociation }).(ServingConfigAppAssociationPtrOutput)
}

// Defines whether to drop the file extension from uploaded files.
func (o ServingConfigOutput) CleanUrls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServingConfig) *bool { return v.CleanUrls }).(pulumi.BoolPtrOutput)
}

// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
func (o ServingConfigOutput) Headers() HeaderArrayOutput {
	return o.ApplyT(func(v ServingConfig) []Header { return v.Headers }).(HeaderArrayOutput)
}

// Optional. Defines i18n rewrite behavior.
func (o ServingConfigOutput) I18n() I18nConfigPtrOutput {
	return o.ApplyT(func(v ServingConfig) *I18nConfig { return v.I18n }).(I18nConfigPtrOutput)
}

// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
func (o ServingConfigOutput) Redirects() RedirectArrayOutput {
	return o.ApplyT(func(v ServingConfig) []Redirect { return v.Redirects }).(RedirectArrayOutput)
}

// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
func (o ServingConfigOutput) Rewrites() RewriteArrayOutput {
	return o.ApplyT(func(v ServingConfig) []Rewrite { return v.Rewrites }).(RewriteArrayOutput)
}

// Defines how to handle a trailing slash in the URL path.
func (o ServingConfigOutput) TrailingSlashBehavior() ServingConfigTrailingSlashBehaviorPtrOutput {
	return o.ApplyT(func(v ServingConfig) *ServingConfigTrailingSlashBehavior { return v.TrailingSlashBehavior }).(ServingConfigTrailingSlashBehaviorPtrOutput)
}

type ServingConfigPtrOutput struct{ *pulumi.OutputState }

func (ServingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServingConfig)(nil)).Elem()
}

func (o ServingConfigPtrOutput) ToServingConfigPtrOutput() ServingConfigPtrOutput {
	return o
}

func (o ServingConfigPtrOutput) ToServingConfigPtrOutputWithContext(ctx context.Context) ServingConfigPtrOutput {
	return o
}

func (o ServingConfigPtrOutput) Elem() ServingConfigOutput {
	return o.ApplyT(func(v *ServingConfig) ServingConfig {
		if v != nil {
			return *v
		}
		var ret ServingConfig
		return ret
	}).(ServingConfigOutput)
}

// How to handle well known App Association files.
func (o ServingConfigPtrOutput) AppAssociation() ServingConfigAppAssociationPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *ServingConfigAppAssociation {
		if v == nil {
			return nil
		}
		return v.AppAssociation
	}).(ServingConfigAppAssociationPtrOutput)
}

// Defines whether to drop the file extension from uploaded files.
func (o ServingConfigPtrOutput) CleanUrls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.CleanUrls
	}).(pulumi.BoolPtrOutput)
}

// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
func (o ServingConfigPtrOutput) Headers() HeaderArrayOutput {
	return o.ApplyT(func(v *ServingConfig) []Header {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(HeaderArrayOutput)
}

// Optional. Defines i18n rewrite behavior.
func (o ServingConfigPtrOutput) I18n() I18nConfigPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *I18nConfig {
		if v == nil {
			return nil
		}
		return v.I18n
	}).(I18nConfigPtrOutput)
}

// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
func (o ServingConfigPtrOutput) Redirects() RedirectArrayOutput {
	return o.ApplyT(func(v *ServingConfig) []Redirect {
		if v == nil {
			return nil
		}
		return v.Redirects
	}).(RedirectArrayOutput)
}

// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
func (o ServingConfigPtrOutput) Rewrites() RewriteArrayOutput {
	return o.ApplyT(func(v *ServingConfig) []Rewrite {
		if v == nil {
			return nil
		}
		return v.Rewrites
	}).(RewriteArrayOutput)
}

// Defines how to handle a trailing slash in the URL path.
func (o ServingConfigPtrOutput) TrailingSlashBehavior() ServingConfigTrailingSlashBehaviorPtrOutput {
	return o.ApplyT(func(v *ServingConfig) *ServingConfigTrailingSlashBehavior {
		if v == nil {
			return nil
		}
		return v.TrailingSlashBehavior
	}).(ServingConfigTrailingSlashBehaviorPtrOutput)
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfigResponse struct {
	// How to handle well known App Association files.
	AppAssociation string `pulumi:"appAssociation"`
	// Defines whether to drop the file extension from uploaded files.
	CleanUrls bool `pulumi:"cleanUrls"`
	// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
	Headers []HeaderResponse `pulumi:"headers"`
	// Optional. Defines i18n rewrite behavior.
	I18n I18nConfigResponse `pulumi:"i18n"`
	// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
	Redirects []RedirectResponse `pulumi:"redirects"`
	// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
	Rewrites []RewriteResponse `pulumi:"rewrites"`
	// Defines how to handle a trailing slash in the URL path.
	TrailingSlashBehavior string `pulumi:"trailingSlashBehavior"`
}

// The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfigResponseOutput struct{ *pulumi.OutputState }

func (ServingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServingConfigResponse)(nil)).Elem()
}

func (o ServingConfigResponseOutput) ToServingConfigResponseOutput() ServingConfigResponseOutput {
	return o
}

func (o ServingConfigResponseOutput) ToServingConfigResponseOutputWithContext(ctx context.Context) ServingConfigResponseOutput {
	return o
}

// How to handle well known App Association files.
func (o ServingConfigResponseOutput) AppAssociation() pulumi.StringOutput {
	return o.ApplyT(func(v ServingConfigResponse) string { return v.AppAssociation }).(pulumi.StringOutput)
}

// Defines whether to drop the file extension from uploaded files.
func (o ServingConfigResponseOutput) CleanUrls() pulumi.BoolOutput {
	return o.ApplyT(func(v ServingConfigResponse) bool { return v.CleanUrls }).(pulumi.BoolOutput)
}

// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
func (o ServingConfigResponseOutput) Headers() HeaderResponseArrayOutput {
	return o.ApplyT(func(v ServingConfigResponse) []HeaderResponse { return v.Headers }).(HeaderResponseArrayOutput)
}

// Optional. Defines i18n rewrite behavior.
func (o ServingConfigResponseOutput) I18n() I18nConfigResponseOutput {
	return o.ApplyT(func(v ServingConfigResponse) I18nConfigResponse { return v.I18n }).(I18nConfigResponseOutput)
}

// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
func (o ServingConfigResponseOutput) Redirects() RedirectResponseArrayOutput {
	return o.ApplyT(func(v ServingConfigResponse) []RedirectResponse { return v.Redirects }).(RedirectResponseArrayOutput)
}

// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
func (o ServingConfigResponseOutput) Rewrites() RewriteResponseArrayOutput {
	return o.ApplyT(func(v ServingConfigResponse) []RewriteResponse { return v.Rewrites }).(RewriteResponseArrayOutput)
}

// Defines how to handle a trailing slash in the URL path.
func (o ServingConfigResponseOutput) TrailingSlashBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v ServingConfigResponse) string { return v.TrailingSlashBehavior }).(pulumi.StringOutput)
}

// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
type VersionResponse struct {
	// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
	Config ServingConfigResponse `pulumi:"config"`
	// The time at which the version was created.
	CreateTime string `pulumi:"createTime"`
	// Identifies the user who created the version.
	CreateUser ActingUserResponse `pulumi:"createUser"`
	// The time at which the version was `DELETED`.
	DeleteTime string `pulumi:"deleteTime"`
	// Identifies the user who `DELETED` the version.
	DeleteUser ActingUserResponse `pulumi:"deleteUser"`
	// The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
	FileCount string `pulumi:"fileCount"`
	// The time at which the version was `FINALIZED`.
	FinalizeTime string `pulumi:"finalizeTime"`
	// Identifies the user who `FINALIZED` the version.
	FinalizeUser ActingUserResponse `pulumi:"finalizeUser"`
	// The labels used for extra metadata and/or filtering.
	Labels map[string]string `pulumi:"labels"`
	// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
	Name string `pulumi:"name"`
	// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
	Status string `pulumi:"status"`
	// The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
	VersionBytes string `pulumi:"versionBytes"`
}

// A `Version` is a configuration and a collection of static files which determine how a site is displayed.
type VersionResponseOutput struct{ *pulumi.OutputState }

func (VersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VersionResponse)(nil)).Elem()
}

func (o VersionResponseOutput) ToVersionResponseOutput() VersionResponseOutput {
	return o
}

func (o VersionResponseOutput) ToVersionResponseOutputWithContext(ctx context.Context) VersionResponseOutput {
	return o
}

// The configuration for the behavior of the site. This configuration exists in the [`firebase.json`](https://firebase.google.com/docs/cli/#the_firebasejson_file) file.
func (o VersionResponseOutput) Config() ServingConfigResponseOutput {
	return o.ApplyT(func(v VersionResponse) ServingConfigResponse { return v.Config }).(ServingConfigResponseOutput)
}

// The time at which the version was created.
func (o VersionResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Identifies the user who created the version.
func (o VersionResponseOutput) CreateUser() ActingUserResponseOutput {
	return o.ApplyT(func(v VersionResponse) ActingUserResponse { return v.CreateUser }).(ActingUserResponseOutput)
}

// The time at which the version was `DELETED`.
func (o VersionResponseOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.DeleteTime }).(pulumi.StringOutput)
}

// Identifies the user who `DELETED` the version.
func (o VersionResponseOutput) DeleteUser() ActingUserResponseOutput {
	return o.ApplyT(func(v VersionResponse) ActingUserResponse { return v.DeleteUser }).(ActingUserResponseOutput)
}

// The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
func (o VersionResponseOutput) FileCount() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.FileCount }).(pulumi.StringOutput)
}

// The time at which the version was `FINALIZED`.
func (o VersionResponseOutput) FinalizeTime() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.FinalizeTime }).(pulumi.StringOutput)
}

// Identifies the user who `FINALIZED` the version.
func (o VersionResponseOutput) FinalizeUser() ActingUserResponseOutput {
	return o.ApplyT(func(v VersionResponse) ActingUserResponse { return v.FinalizeUser }).(ActingUserResponseOutput)
}

// The labels used for extra metadata and/or filtering.
func (o VersionResponseOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v VersionResponse) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
func (o VersionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
func (o VersionResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.Status }).(pulumi.StringOutput)
}

// The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
func (o VersionResponseOutput) VersionBytes() pulumi.StringOutput {
	return o.ApplyT(func(v VersionResponse) string { return v.VersionBytes }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunRewriteInput)(nil)).Elem(), CloudRunRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunRewritePtrInput)(nil)).Elem(), CloudRunRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectInput)(nil)).Elem(), DomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRedirectPtrInput)(nil)).Elem(), DomainRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeaderInput)(nil)).Elem(), HeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeaderArrayInput)(nil)).Elem(), HeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*I18nConfigInput)(nil)).Elem(), I18nConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*I18nConfigPtrInput)(nil)).Elem(), I18nConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectInput)(nil)).Elem(), RedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectArrayInput)(nil)).Elem(), RedirectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RewriteInput)(nil)).Elem(), RewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RewriteArrayInput)(nil)).Elem(), RewriteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServingConfigInput)(nil)).Elem(), ServingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServingConfigPtrInput)(nil)).Elem(), ServingConfigArgs{})
	pulumi.RegisterOutputType(ActingUserResponseOutput{})
	pulumi.RegisterOutputType(CertDnsChallengeResponseOutput{})
	pulumi.RegisterOutputType(CertHttpChallengeResponseOutput{})
	pulumi.RegisterOutputType(CloudRunRewriteOutput{})
	pulumi.RegisterOutputType(CloudRunRewritePtrOutput{})
	pulumi.RegisterOutputType(CloudRunRewriteResponseOutput{})
	pulumi.RegisterOutputType(DomainProvisioningResponseOutput{})
	pulumi.RegisterOutputType(DomainRedirectOutput{})
	pulumi.RegisterOutputType(DomainRedirectPtrOutput{})
	pulumi.RegisterOutputType(DomainRedirectResponseOutput{})
	pulumi.RegisterOutputType(HeaderOutput{})
	pulumi.RegisterOutputType(HeaderArrayOutput{})
	pulumi.RegisterOutputType(HeaderResponseOutput{})
	pulumi.RegisterOutputType(HeaderResponseArrayOutput{})
	pulumi.RegisterOutputType(I18nConfigOutput{})
	pulumi.RegisterOutputType(I18nConfigPtrOutput{})
	pulumi.RegisterOutputType(I18nConfigResponseOutput{})
	pulumi.RegisterOutputType(RedirectOutput{})
	pulumi.RegisterOutputType(RedirectArrayOutput{})
	pulumi.RegisterOutputType(RedirectResponseOutput{})
	pulumi.RegisterOutputType(RedirectResponseArrayOutput{})
	pulumi.RegisterOutputType(ReleaseResponseOutput{})
	pulumi.RegisterOutputType(RewriteOutput{})
	pulumi.RegisterOutputType(RewriteArrayOutput{})
	pulumi.RegisterOutputType(RewriteResponseOutput{})
	pulumi.RegisterOutputType(RewriteResponseArrayOutput{})
	pulumi.RegisterOutputType(ServingConfigOutput{})
	pulumi.RegisterOutputType(ServingConfigPtrOutput{})
	pulumi.RegisterOutputType(ServingConfigResponseOutput{})
	pulumi.RegisterOutputType(VersionResponseOutput{})
}
