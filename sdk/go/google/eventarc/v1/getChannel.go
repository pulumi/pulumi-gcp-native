// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Get a single Channel.
func LookupChannel(ctx *pulumi.Context, args *LookupChannelArgs, opts ...pulumi.InvokeOption) (*LookupChannelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupChannelResult
	err := ctx.Invoke("google-native:eventarc/v1:getChannel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupChannelArgs struct {
	ChannelId string  `pulumi:"channelId"`
	Location  string  `pulumi:"location"`
	Project   *string `pulumi:"project"`
}

type LookupChannelResult struct {
	// The activation token for the channel. The token must be used by the provider to register the channel for publishing.
	ActivationToken string `pulumi:"activationToken"`
	// The creation time.
	CreateTime string `pulumi:"createTime"`
	// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
	CryptoKeyName string `pulumi:"cryptoKeyName"`
	// The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
	Name string `pulumi:"name"`
	// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
	Provider string `pulumi:"provider"`
	// The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
	PubsubTopic string `pulumi:"pubsubTopic"`
	// The state of a Channel.
	State string `pulumi:"state"`
	// Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid string `pulumi:"uid"`
	// The last-modified time.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupChannelOutput(ctx *pulumi.Context, args LookupChannelOutputArgs, opts ...pulumi.InvokeOption) LookupChannelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupChannelResult, error) {
			args := v.(LookupChannelArgs)
			r, err := LookupChannel(ctx, &args, opts...)
			var s LookupChannelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupChannelResultOutput)
}

type LookupChannelOutputArgs struct {
	ChannelId pulumi.StringInput    `pulumi:"channelId"`
	Location  pulumi.StringInput    `pulumi:"location"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupChannelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelArgs)(nil)).Elem()
}

type LookupChannelResultOutput struct{ *pulumi.OutputState }

func (LookupChannelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupChannelResult)(nil)).Elem()
}

func (o LookupChannelResultOutput) ToLookupChannelResultOutput() LookupChannelResultOutput {
	return o
}

func (o LookupChannelResultOutput) ToLookupChannelResultOutputWithContext(ctx context.Context) LookupChannelResultOutput {
	return o
}

func (o LookupChannelResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupChannelResult] {
	return pulumix.Output[LookupChannelResult]{
		OutputState: o.OutputState,
	}
}

// The activation token for the channel. The token must be used by the provider to register the channel for publishing.
func (o LookupChannelResultOutput) ActivationToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.ActivationToken }).(pulumi.StringOutput)
}

// The creation time.
func (o LookupChannelResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
func (o LookupChannelResultOutput) CryptoKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.CryptoKeyName }).(pulumi.StringOutput)
}

// The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.
func (o LookupChannelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.
func (o LookupChannelResultOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.Provider }).(pulumi.StringOutput)
}

// The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.
func (o LookupChannelResultOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

// The state of a Channel.
func (o LookupChannelResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.State }).(pulumi.StringOutput)
}

// Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
func (o LookupChannelResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The last-modified time.
func (o LookupChannelResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupChannelResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupChannelResultOutput{})
}
