// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a single trigger.
func LookupTrigger(ctx *pulumi.Context, args *LookupTriggerArgs, opts ...pulumi.InvokeOption) (*LookupTriggerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTriggerResult
	err := ctx.Invoke("google-native:eventarc/v1:getTrigger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTriggerArgs struct {
	Location  string  `pulumi:"location"`
	Project   *string `pulumi:"project"`
	TriggerId string  `pulumi:"triggerId"`
}

type LookupTriggerResult struct {
	// Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
	Channel string `pulumi:"channel"`
	// The reason(s) why a trigger is in FAILED state.
	Conditions StateConditionResponse `pulumi:"conditions"`
	// The creation time.
	CreateTime string `pulumi:"createTime"`
	// Destination specifies where the events should be sent to.
	Destination DestinationResponse `pulumi:"destination"`
	// This checksum is computed by the server based on the value of other fields, and might be sent only on create requests to ensure that the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data field. This is set to `application/json` if the value is not defined.
	EventDataContentType string `pulumi:"eventDataContentType"`
	// Unordered list. The list of filters that applies to event attributes. Only events that match all the provided filters are sent to the destination.
	EventFilters []EventFilterResponse `pulumi:"eventFilters"`
	// Optional. User labels attached to the triggers that can be used to group resources.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the trigger. Must be unique within the location of the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
	Name string `pulumi:"name"`
	// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The `iam.serviceAccounts.actAs` permission must be granted on the service account to allow a principal to impersonate the service account. For more information, see the [Roles and permissions](/eventarc/docs/all-roles-permissions) page specific to the trigger destination.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Optional. To deliver messages, Eventarc might use other Google Cloud products as a transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
	Transport TransportResponse `pulumi:"transport"`
	// Server-assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
	Uid string `pulumi:"uid"`
	// The last-modified time.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupTriggerOutput(ctx *pulumi.Context, args LookupTriggerOutputArgs, opts ...pulumi.InvokeOption) LookupTriggerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTriggerResult, error) {
			args := v.(LookupTriggerArgs)
			r, err := LookupTrigger(ctx, &args, opts...)
			var s LookupTriggerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTriggerResultOutput)
}

type LookupTriggerOutputArgs struct {
	Location  pulumi.StringInput    `pulumi:"location"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	TriggerId pulumi.StringInput    `pulumi:"triggerId"`
}

func (LookupTriggerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerArgs)(nil)).Elem()
}

type LookupTriggerResultOutput struct{ *pulumi.OutputState }

func (LookupTriggerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerResult)(nil)).Elem()
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutput() LookupTriggerResultOutput {
	return o
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutputWithContext(ctx context.Context) LookupTriggerResultOutput {
	return o
}

// Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.
func (o LookupTriggerResultOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Channel }).(pulumi.StringOutput)
}

// The reason(s) why a trigger is in FAILED state.
func (o LookupTriggerResultOutput) Conditions() StateConditionResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) StateConditionResponse { return v.Conditions }).(StateConditionResponseOutput)
}

// The creation time.
func (o LookupTriggerResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Destination specifies where the events should be sent to.
func (o LookupTriggerResultOutput) Destination() DestinationResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) DestinationResponse { return v.Destination }).(DestinationResponseOutput)
}

// This checksum is computed by the server based on the value of other fields, and might be sent only on create requests to ensure that the client has an up-to-date value before proceeding.
func (o LookupTriggerResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data field. This is set to `application/json` if the value is not defined.
func (o LookupTriggerResultOutput) EventDataContentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.EventDataContentType }).(pulumi.StringOutput)
}

// Unordered list. The list of filters that applies to event attributes. Only events that match all the provided filters are sent to the destination.
func (o LookupTriggerResultOutput) EventFilters() EventFilterResponseArrayOutput {
	return o.ApplyT(func(v LookupTriggerResult) []EventFilterResponse { return v.EventFilters }).(EventFilterResponseArrayOutput)
}

// Optional. User labels attached to the triggers that can be used to group resources.
func (o LookupTriggerResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupTriggerResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the trigger. Must be unique within the location of the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.
func (o LookupTriggerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The `iam.serviceAccounts.actAs` permission must be granted on the service account to allow a principal to impersonate the service account. For more information, see the [Roles and permissions](/eventarc/docs/all-roles-permissions) page specific to the trigger destination.
func (o LookupTriggerResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Optional. To deliver messages, Eventarc might use other Google Cloud products as a transport intermediary. This field contains a reference to that transport intermediary. This information can be used for debugging purposes.
func (o LookupTriggerResultOutput) Transport() TransportResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) TransportResponse { return v.Transport }).(TransportResponseOutput)
}

// Server-assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.
func (o LookupTriggerResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Uid }).(pulumi.StringOutput)
}

// The last-modified time.
func (o LookupTriggerResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTriggerResultOutput{})
}
