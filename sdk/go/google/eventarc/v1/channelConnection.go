// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new ChannelConnection in a particular project and location.
type ChannelConnection struct {
	pulumi.CustomResourceState

	// Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
	ActivationToken pulumi.StringOutput `pulumi:"activationToken"`
	// The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
	Channel pulumi.StringOutput `pulumi:"channel"`
	// The creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The name of the connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// / Output only. Server assigned ID of the resource. The server guarantees uniqueness and immutability until deleted.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The last-modified time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewChannelConnection registers a new resource with the given unique name, arguments, and options.
func NewChannelConnection(ctx *pulumi.Context,
	name string, args *ChannelConnectionArgs, opts ...pulumi.ResourceOption) (*ChannelConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.ChannelConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ChannelConnectionId'")
	}
	var resource ChannelConnection
	err := ctx.RegisterResource("google-native:eventarc/v1:ChannelConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelConnection gets an existing ChannelConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelConnectionState, opts ...pulumi.ResourceOption) (*ChannelConnection, error) {
	var resource ChannelConnection
	err := ctx.ReadResource("google-native:eventarc/v1:ChannelConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelConnection resources.
type channelConnectionState struct {
}

type ChannelConnectionState struct {
}

func (ChannelConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelConnectionState)(nil)).Elem()
}

type channelConnectionArgs struct {
	// Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
	ActivationToken *string `pulumi:"activationToken"`
	// The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
	Channel string `pulumi:"channel"`
	// Required. The user-provided ID to be assigned to the channel connection.
	ChannelConnectionId string  `pulumi:"channelConnectionId"`
	Location            *string `pulumi:"location"`
	// The name of the connection.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a ChannelConnection resource.
type ChannelConnectionArgs struct {
	// Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
	ActivationToken pulumi.StringPtrInput
	// The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
	Channel pulumi.StringInput
	// Required. The user-provided ID to be assigned to the channel connection.
	ChannelConnectionId pulumi.StringInput
	Location            pulumi.StringPtrInput
	// The name of the connection.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (ChannelConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelConnectionArgs)(nil)).Elem()
}

type ChannelConnectionInput interface {
	pulumi.Input

	ToChannelConnectionOutput() ChannelConnectionOutput
	ToChannelConnectionOutputWithContext(ctx context.Context) ChannelConnectionOutput
}

func (*ChannelConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelConnection)(nil)).Elem()
}

func (i *ChannelConnection) ToChannelConnectionOutput() ChannelConnectionOutput {
	return i.ToChannelConnectionOutputWithContext(context.Background())
}

func (i *ChannelConnection) ToChannelConnectionOutputWithContext(ctx context.Context) ChannelConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelConnectionOutput)
}

type ChannelConnectionOutput struct{ *pulumi.OutputState }

func (ChannelConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelConnection)(nil)).Elem()
}

func (o ChannelConnectionOutput) ToChannelConnectionOutput() ChannelConnectionOutput {
	return o
}

func (o ChannelConnectionOutput) ToChannelConnectionOutputWithContext(ctx context.Context) ChannelConnectionOutput {
	return o
}

// Input only. Activation token for the channel. The token will be used during the creation of ChannelConnection to bind the channel with the provider project. This field will not be stored in the provider resource.
func (o ChannelConnectionOutput) ActivationToken() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelConnection) pulumi.StringOutput { return v.ActivationToken }).(pulumi.StringOutput)
}

// The name of the connected subscriber Channel. This is a weak reference to avoid cross project and cross accounts references. This must be in `projects/{project}/location/{location}/channels/{channel_id}` format.
func (o ChannelConnectionOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelConnection) pulumi.StringOutput { return v.Channel }).(pulumi.StringOutput)
}

// The creation time.
func (o ChannelConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelConnection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of the connection.
func (o ChannelConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// / Output only. Server assigned ID of the resource. The server guarantees uniqueness and immutability until deleted.
func (o ChannelConnectionOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelConnection) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The last-modified time.
func (o ChannelConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelConnection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelConnectionInput)(nil)).Elem(), &ChannelConnection{})
	pulumi.RegisterOutputType(ChannelConnectionOutput{})
}
