// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a Cloud Run destination.
type CloudRun struct {
	// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path *string `pulumi:"path"`
	// The region the Cloud Run service is deployed in.
	Region string `pulumi:"region"`
	// The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project as the trigger object can be addressed.
	Service string `pulumi:"service"`
}

// CloudRunInput is an input type that accepts CloudRunArgs and CloudRunOutput values.
// You can construct a concrete instance of `CloudRunInput` via:
//
//	CloudRunArgs{...}
type CloudRunInput interface {
	pulumi.Input

	ToCloudRunOutput() CloudRunOutput
	ToCloudRunOutputWithContext(context.Context) CloudRunOutput
}

// Represents a Cloud Run destination.
type CloudRunArgs struct {
	// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path pulumi.StringPtrInput `pulumi:"path"`
	// The region the Cloud Run service is deployed in.
	Region pulumi.StringInput `pulumi:"region"`
	// The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project as the trigger object can be addressed.
	Service pulumi.StringInput `pulumi:"service"`
}

func (CloudRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRun)(nil)).Elem()
}

func (i CloudRunArgs) ToCloudRunOutput() CloudRunOutput {
	return i.ToCloudRunOutputWithContext(context.Background())
}

func (i CloudRunArgs) ToCloudRunOutputWithContext(ctx context.Context) CloudRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunOutput)
}

func (i CloudRunArgs) ToCloudRunPtrOutput() CloudRunPtrOutput {
	return i.ToCloudRunPtrOutputWithContext(context.Background())
}

func (i CloudRunArgs) ToCloudRunPtrOutputWithContext(ctx context.Context) CloudRunPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunOutput).ToCloudRunPtrOutputWithContext(ctx)
}

// CloudRunPtrInput is an input type that accepts CloudRunArgs, CloudRunPtr and CloudRunPtrOutput values.
// You can construct a concrete instance of `CloudRunPtrInput` via:
//
//	        CloudRunArgs{...}
//
//	or:
//
//	        nil
type CloudRunPtrInput interface {
	pulumi.Input

	ToCloudRunPtrOutput() CloudRunPtrOutput
	ToCloudRunPtrOutputWithContext(context.Context) CloudRunPtrOutput
}

type cloudRunPtrType CloudRunArgs

func CloudRunPtr(v *CloudRunArgs) CloudRunPtrInput {
	return (*cloudRunPtrType)(v)
}

func (*cloudRunPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRun)(nil)).Elem()
}

func (i *cloudRunPtrType) ToCloudRunPtrOutput() CloudRunPtrOutput {
	return i.ToCloudRunPtrOutputWithContext(context.Background())
}

func (i *cloudRunPtrType) ToCloudRunPtrOutputWithContext(ctx context.Context) CloudRunPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudRunPtrOutput)
}

// Represents a Cloud Run destination.
type CloudRunOutput struct{ *pulumi.OutputState }

func (CloudRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRun)(nil)).Elem()
}

func (o CloudRunOutput) ToCloudRunOutput() CloudRunOutput {
	return o
}

func (o CloudRunOutput) ToCloudRunOutputWithContext(ctx context.Context) CloudRunOutput {
	return o
}

func (o CloudRunOutput) ToCloudRunPtrOutput() CloudRunPtrOutput {
	return o.ToCloudRunPtrOutputWithContext(context.Background())
}

func (o CloudRunOutput) ToCloudRunPtrOutputWithContext(ctx context.Context) CloudRunPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudRun) *CloudRun {
		return &v
	}).(CloudRunPtrOutput)
}

// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o CloudRunOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudRun) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// The region the Cloud Run service is deployed in.
func (o CloudRunOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRun) string { return v.Region }).(pulumi.StringOutput)
}

// The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project as the trigger object can be addressed.
func (o CloudRunOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRun) string { return v.Service }).(pulumi.StringOutput)
}

type CloudRunPtrOutput struct{ *pulumi.OutputState }

func (CloudRunPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudRun)(nil)).Elem()
}

func (o CloudRunPtrOutput) ToCloudRunPtrOutput() CloudRunPtrOutput {
	return o
}

func (o CloudRunPtrOutput) ToCloudRunPtrOutputWithContext(ctx context.Context) CloudRunPtrOutput {
	return o
}

func (o CloudRunPtrOutput) Elem() CloudRunOutput {
	return o.ApplyT(func(v *CloudRun) CloudRun {
		if v != nil {
			return *v
		}
		var ret CloudRun
		return ret
	}).(CloudRunOutput)
}

// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o CloudRunPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRun) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// The region the Cloud Run service is deployed in.
func (o CloudRunPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRun) *string {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.StringPtrOutput)
}

// The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project as the trigger object can be addressed.
func (o CloudRunPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudRun) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Represents a Cloud Run destination.
type CloudRunResponse struct {
	// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path string `pulumi:"path"`
	// The region the Cloud Run service is deployed in.
	Region string `pulumi:"region"`
	// The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project as the trigger object can be addressed.
	Service string `pulumi:"service"`
}

// Represents a Cloud Run destination.
type CloudRunResponseOutput struct{ *pulumi.OutputState }

func (CloudRunResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudRunResponse)(nil)).Elem()
}

func (o CloudRunResponseOutput) ToCloudRunResponseOutput() CloudRunResponseOutput {
	return o
}

func (o CloudRunResponseOutput) ToCloudRunResponseOutputWithContext(ctx context.Context) CloudRunResponseOutput {
	return o
}

// Optional. The relative path on the Cloud Run service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o CloudRunResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunResponse) string { return v.Path }).(pulumi.StringOutput)
}

// The region the Cloud Run service is deployed in.
func (o CloudRunResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunResponse) string { return v.Region }).(pulumi.StringOutput)
}

// The name of the Cloud Run service being addressed. See https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services. Only services located in the same project as the trigger object can be addressed.
func (o CloudRunResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v CloudRunResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Represents a target of an invocation over HTTP.
type Destination struct {
	// The Cloud Function resource name. Cloud Functions V1 and V2 are supported. Format: `projects/{project}/locations/{location}/functions/{function}` This is a read-only field. Creating Cloud Functions V1/V2 triggers is only supported via the Cloud Functions product. An error will be returned if the user sets this value.
	CloudFunction *string `pulumi:"cloudFunction"`
	// Cloud Run fully-managed resource that receives the events. The resource should be in the same project as the trigger.
	CloudRun *CloudRun `pulumi:"cloudRun"`
	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	Gke *GKE `pulumi:"gke"`
	// An HTTP endpoint destination described by an URI.
	HttpEndpoint *HttpEndpoint `pulumi:"httpEndpoint"`
	// Optional. Network config is used to configure how Eventarc resolves and connect to a destination. This should only be used with HttpEndpoint destination type.
	NetworkConfig *NetworkConfig `pulumi:"networkConfig"`
	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
	Workflow *string `pulumi:"workflow"`
}

// DestinationInput is an input type that accepts DestinationArgs and DestinationOutput values.
// You can construct a concrete instance of `DestinationInput` via:
//
//	DestinationArgs{...}
type DestinationInput interface {
	pulumi.Input

	ToDestinationOutput() DestinationOutput
	ToDestinationOutputWithContext(context.Context) DestinationOutput
}

// Represents a target of an invocation over HTTP.
type DestinationArgs struct {
	// The Cloud Function resource name. Cloud Functions V1 and V2 are supported. Format: `projects/{project}/locations/{location}/functions/{function}` This is a read-only field. Creating Cloud Functions V1/V2 triggers is only supported via the Cloud Functions product. An error will be returned if the user sets this value.
	CloudFunction pulumi.StringPtrInput `pulumi:"cloudFunction"`
	// Cloud Run fully-managed resource that receives the events. The resource should be in the same project as the trigger.
	CloudRun CloudRunPtrInput `pulumi:"cloudRun"`
	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	Gke GKEPtrInput `pulumi:"gke"`
	// An HTTP endpoint destination described by an URI.
	HttpEndpoint HttpEndpointPtrInput `pulumi:"httpEndpoint"`
	// Optional. Network config is used to configure how Eventarc resolves and connect to a destination. This should only be used with HttpEndpoint destination type.
	NetworkConfig NetworkConfigPtrInput `pulumi:"networkConfig"`
	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
	Workflow pulumi.StringPtrInput `pulumi:"workflow"`
}

func (DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Destination)(nil)).Elem()
}

func (i DestinationArgs) ToDestinationOutput() DestinationOutput {
	return i.ToDestinationOutputWithContext(context.Background())
}

func (i DestinationArgs) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationOutput)
}

// Represents a target of an invocation over HTTP.
type DestinationOutput struct{ *pulumi.OutputState }

func (DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Destination)(nil)).Elem()
}

func (o DestinationOutput) ToDestinationOutput() DestinationOutput {
	return o
}

func (o DestinationOutput) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return o
}

// The Cloud Function resource name. Cloud Functions V1 and V2 are supported. Format: `projects/{project}/locations/{location}/functions/{function}` This is a read-only field. Creating Cloud Functions V1/V2 triggers is only supported via the Cloud Functions product. An error will be returned if the user sets this value.
func (o DestinationOutput) CloudFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Destination) *string { return v.CloudFunction }).(pulumi.StringPtrOutput)
}

// Cloud Run fully-managed resource that receives the events. The resource should be in the same project as the trigger.
func (o DestinationOutput) CloudRun() CloudRunPtrOutput {
	return o.ApplyT(func(v Destination) *CloudRun { return v.CloudRun }).(CloudRunPtrOutput)
}

// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
func (o DestinationOutput) Gke() GKEPtrOutput {
	return o.ApplyT(func(v Destination) *GKE { return v.Gke }).(GKEPtrOutput)
}

// An HTTP endpoint destination described by an URI.
func (o DestinationOutput) HttpEndpoint() HttpEndpointPtrOutput {
	return o.ApplyT(func(v Destination) *HttpEndpoint { return v.HttpEndpoint }).(HttpEndpointPtrOutput)
}

// Optional. Network config is used to configure how Eventarc resolves and connect to a destination. This should only be used with HttpEndpoint destination type.
func (o DestinationOutput) NetworkConfig() NetworkConfigPtrOutput {
	return o.ApplyT(func(v Destination) *NetworkConfig { return v.NetworkConfig }).(NetworkConfigPtrOutput)
}

// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
func (o DestinationOutput) Workflow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Destination) *string { return v.Workflow }).(pulumi.StringPtrOutput)
}

// Represents a target of an invocation over HTTP.
type DestinationResponse struct {
	// The Cloud Function resource name. Cloud Functions V1 and V2 are supported. Format: `projects/{project}/locations/{location}/functions/{function}` This is a read-only field. Creating Cloud Functions V1/V2 triggers is only supported via the Cloud Functions product. An error will be returned if the user sets this value.
	CloudFunction string `pulumi:"cloudFunction"`
	// Cloud Run fully-managed resource that receives the events. The resource should be in the same project as the trigger.
	CloudRun CloudRunResponse `pulumi:"cloudRun"`
	// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
	Gke GKEResponse `pulumi:"gke"`
	// An HTTP endpoint destination described by an URI.
	HttpEndpoint HttpEndpointResponse `pulumi:"httpEndpoint"`
	// Optional. Network config is used to configure how Eventarc resolves and connect to a destination. This should only be used with HttpEndpoint destination type.
	NetworkConfig NetworkConfigResponse `pulumi:"networkConfig"`
	// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
	Workflow string `pulumi:"workflow"`
}

// Represents a target of an invocation over HTTP.
type DestinationResponseOutput struct{ *pulumi.OutputState }

func (DestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationResponse)(nil)).Elem()
}

func (o DestinationResponseOutput) ToDestinationResponseOutput() DestinationResponseOutput {
	return o
}

func (o DestinationResponseOutput) ToDestinationResponseOutputWithContext(ctx context.Context) DestinationResponseOutput {
	return o
}

// The Cloud Function resource name. Cloud Functions V1 and V2 are supported. Format: `projects/{project}/locations/{location}/functions/{function}` This is a read-only field. Creating Cloud Functions V1/V2 triggers is only supported via the Cloud Functions product. An error will be returned if the user sets this value.
func (o DestinationResponseOutput) CloudFunction() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationResponse) string { return v.CloudFunction }).(pulumi.StringOutput)
}

// Cloud Run fully-managed resource that receives the events. The resource should be in the same project as the trigger.
func (o DestinationResponseOutput) CloudRun() CloudRunResponseOutput {
	return o.ApplyT(func(v DestinationResponse) CloudRunResponse { return v.CloudRun }).(CloudRunResponseOutput)
}

// A GKE service capable of receiving events. The service should be running in the same project as the trigger.
func (o DestinationResponseOutput) Gke() GKEResponseOutput {
	return o.ApplyT(func(v DestinationResponse) GKEResponse { return v.Gke }).(GKEResponseOutput)
}

// An HTTP endpoint destination described by an URI.
func (o DestinationResponseOutput) HttpEndpoint() HttpEndpointResponseOutput {
	return o.ApplyT(func(v DestinationResponse) HttpEndpointResponse { return v.HttpEndpoint }).(HttpEndpointResponseOutput)
}

// Optional. Network config is used to configure how Eventarc resolves and connect to a destination. This should only be used with HttpEndpoint destination type.
func (o DestinationResponseOutput) NetworkConfig() NetworkConfigResponseOutput {
	return o.ApplyT(func(v DestinationResponse) NetworkConfigResponse { return v.NetworkConfig }).(NetworkConfigResponseOutput)
}

// The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`
func (o DestinationResponseOutput) Workflow() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationResponse) string { return v.Workflow }).(pulumi.StringOutput)
}

// Filters events based on exact matches on the CloudEvents attributes.
type EventFilter struct {
	// The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. You can [retrieve a specific provider's supported event types](/eventarc/docs/list-providers#describe-provider). All triggers MUST provide a filter for the 'type' attribute.
	Attribute string `pulumi:"attribute"`
	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The allowed values are `path_pattern` and `match-path-pattern`. `path_pattern` is only allowed for GCFv1 triggers.
	Operator *string `pulumi:"operator"`
	// The value for the attribute.
	Value string `pulumi:"value"`
}

// EventFilterInput is an input type that accepts EventFilterArgs and EventFilterOutput values.
// You can construct a concrete instance of `EventFilterInput` via:
//
//	EventFilterArgs{...}
type EventFilterInput interface {
	pulumi.Input

	ToEventFilterOutput() EventFilterOutput
	ToEventFilterOutputWithContext(context.Context) EventFilterOutput
}

// Filters events based on exact matches on the CloudEvents attributes.
type EventFilterArgs struct {
	// The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. You can [retrieve a specific provider's supported event types](/eventarc/docs/list-providers#describe-provider). All triggers MUST provide a filter for the 'type' attribute.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The allowed values are `path_pattern` and `match-path-pattern`. `path_pattern` is only allowed for GCFv1 triggers.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// The value for the attribute.
	Value pulumi.StringInput `pulumi:"value"`
}

func (EventFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EventFilter)(nil)).Elem()
}

func (i EventFilterArgs) ToEventFilterOutput() EventFilterOutput {
	return i.ToEventFilterOutputWithContext(context.Background())
}

func (i EventFilterArgs) ToEventFilterOutputWithContext(ctx context.Context) EventFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventFilterOutput)
}

// EventFilterArrayInput is an input type that accepts EventFilterArray and EventFilterArrayOutput values.
// You can construct a concrete instance of `EventFilterArrayInput` via:
//
//	EventFilterArray{ EventFilterArgs{...} }
type EventFilterArrayInput interface {
	pulumi.Input

	ToEventFilterArrayOutput() EventFilterArrayOutput
	ToEventFilterArrayOutputWithContext(context.Context) EventFilterArrayOutput
}

type EventFilterArray []EventFilterInput

func (EventFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventFilter)(nil)).Elem()
}

func (i EventFilterArray) ToEventFilterArrayOutput() EventFilterArrayOutput {
	return i.ToEventFilterArrayOutputWithContext(context.Background())
}

func (i EventFilterArray) ToEventFilterArrayOutputWithContext(ctx context.Context) EventFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventFilterArrayOutput)
}

// Filters events based on exact matches on the CloudEvents attributes.
type EventFilterOutput struct{ *pulumi.OutputState }

func (EventFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventFilter)(nil)).Elem()
}

func (o EventFilterOutput) ToEventFilterOutput() EventFilterOutput {
	return o
}

func (o EventFilterOutput) ToEventFilterOutputWithContext(ctx context.Context) EventFilterOutput {
	return o
}

// The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. You can [retrieve a specific provider's supported event types](/eventarc/docs/list-providers#describe-provider). All triggers MUST provide a filter for the 'type' attribute.
func (o EventFilterOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v EventFilter) string { return v.Attribute }).(pulumi.StringOutput)
}

// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The allowed values are `path_pattern` and `match-path-pattern`. `path_pattern` is only allowed for GCFv1 triggers.
func (o EventFilterOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EventFilter) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// The value for the attribute.
func (o EventFilterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventFilter) string { return v.Value }).(pulumi.StringOutput)
}

type EventFilterArrayOutput struct{ *pulumi.OutputState }

func (EventFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventFilter)(nil)).Elem()
}

func (o EventFilterArrayOutput) ToEventFilterArrayOutput() EventFilterArrayOutput {
	return o
}

func (o EventFilterArrayOutput) ToEventFilterArrayOutputWithContext(ctx context.Context) EventFilterArrayOutput {
	return o
}

func (o EventFilterArrayOutput) Index(i pulumi.IntInput) EventFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventFilter {
		return vs[0].([]EventFilter)[vs[1].(int)]
	}).(EventFilterOutput)
}

// Filters events based on exact matches on the CloudEvents attributes.
type EventFilterResponse struct {
	// The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. You can [retrieve a specific provider's supported event types](/eventarc/docs/list-providers#describe-provider). All triggers MUST provide a filter for the 'type' attribute.
	Attribute string `pulumi:"attribute"`
	// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The allowed values are `path_pattern` and `match-path-pattern`. `path_pattern` is only allowed for GCFv1 triggers.
	Operator string `pulumi:"operator"`
	// The value for the attribute.
	Value string `pulumi:"value"`
}

// Filters events based on exact matches on the CloudEvents attributes.
type EventFilterResponseOutput struct{ *pulumi.OutputState }

func (EventFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EventFilterResponse)(nil)).Elem()
}

func (o EventFilterResponseOutput) ToEventFilterResponseOutput() EventFilterResponseOutput {
	return o
}

func (o EventFilterResponseOutput) ToEventFilterResponseOutputWithContext(ctx context.Context) EventFilterResponseOutput {
	return o
}

// The name of a CloudEvents attribute. Currently, only a subset of attributes are supported for filtering. You can [retrieve a specific provider's supported event types](/eventarc/docs/list-providers#describe-provider). All triggers MUST provide a filter for the 'type' attribute.
func (o EventFilterResponseOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v EventFilterResponse) string { return v.Attribute }).(pulumi.StringOutput)
}

// Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The allowed values are `path_pattern` and `match-path-pattern`. `path_pattern` is only allowed for GCFv1 triggers.
func (o EventFilterResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v EventFilterResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// The value for the attribute.
func (o EventFilterResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v EventFilterResponse) string { return v.Value }).(pulumi.StringOutput)
}

type EventFilterResponseArrayOutput struct{ *pulumi.OutputState }

func (EventFilterResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EventFilterResponse)(nil)).Elem()
}

func (o EventFilterResponseArrayOutput) ToEventFilterResponseArrayOutput() EventFilterResponseArrayOutput {
	return o
}

func (o EventFilterResponseArrayOutput) ToEventFilterResponseArrayOutputWithContext(ctx context.Context) EventFilterResponseArrayOutput {
	return o
}

func (o EventFilterResponseArrayOutput) Index(i pulumi.IntInput) EventFilterResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EventFilterResponse {
		return vs[0].([]EventFilterResponse)[vs[1].(int)]
	}).(EventFilterResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Represents a GKE destination.
type GKE struct {
	// The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	Cluster string `pulumi:"cluster"`
	// The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
	Location string `pulumi:"location"`
	// The namespace the GKE service is running in.
	Namespace string `pulumi:"namespace"`
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path *string `pulumi:"path"`
	// Name of the GKE service.
	Service string `pulumi:"service"`
}

// GKEInput is an input type that accepts GKEArgs and GKEOutput values.
// You can construct a concrete instance of `GKEInput` via:
//
//	GKEArgs{...}
type GKEInput interface {
	pulumi.Input

	ToGKEOutput() GKEOutput
	ToGKEOutputWithContext(context.Context) GKEOutput
}

// Represents a GKE destination.
type GKEArgs struct {
	// The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	Cluster pulumi.StringInput `pulumi:"cluster"`
	// The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
	Location pulumi.StringInput `pulumi:"location"`
	// The namespace the GKE service is running in.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name of the GKE service.
	Service pulumi.StringInput `pulumi:"service"`
}

func (GKEArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GKE)(nil)).Elem()
}

func (i GKEArgs) ToGKEOutput() GKEOutput {
	return i.ToGKEOutputWithContext(context.Background())
}

func (i GKEArgs) ToGKEOutputWithContext(ctx context.Context) GKEOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GKEOutput)
}

func (i GKEArgs) ToGKEPtrOutput() GKEPtrOutput {
	return i.ToGKEPtrOutputWithContext(context.Background())
}

func (i GKEArgs) ToGKEPtrOutputWithContext(ctx context.Context) GKEPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GKEOutput).ToGKEPtrOutputWithContext(ctx)
}

// GKEPtrInput is an input type that accepts GKEArgs, GKEPtr and GKEPtrOutput values.
// You can construct a concrete instance of `GKEPtrInput` via:
//
//	        GKEArgs{...}
//
//	or:
//
//	        nil
type GKEPtrInput interface {
	pulumi.Input

	ToGKEPtrOutput() GKEPtrOutput
	ToGKEPtrOutputWithContext(context.Context) GKEPtrOutput
}

type gkePtrType GKEArgs

func GKEPtr(v *GKEArgs) GKEPtrInput {
	return (*gkePtrType)(v)
}

func (*gkePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GKE)(nil)).Elem()
}

func (i *gkePtrType) ToGKEPtrOutput() GKEPtrOutput {
	return i.ToGKEPtrOutputWithContext(context.Background())
}

func (i *gkePtrType) ToGKEPtrOutputWithContext(ctx context.Context) GKEPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GKEPtrOutput)
}

// Represents a GKE destination.
type GKEOutput struct{ *pulumi.OutputState }

func (GKEOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GKE)(nil)).Elem()
}

func (o GKEOutput) ToGKEOutput() GKEOutput {
	return o
}

func (o GKEOutput) ToGKEOutputWithContext(ctx context.Context) GKEOutput {
	return o
}

func (o GKEOutput) ToGKEPtrOutput() GKEPtrOutput {
	return o.ToGKEPtrOutputWithContext(context.Background())
}

func (o GKEOutput) ToGKEPtrOutputWithContext(ctx context.Context) GKEPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GKE) *GKE {
		return &v
	}).(GKEPtrOutput)
}

// The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
func (o GKEOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GKE) string { return v.Cluster }).(pulumi.StringOutput)
}

// The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
func (o GKEOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GKE) string { return v.Location }).(pulumi.StringOutput)
}

// The namespace the GKE service is running in.
func (o GKEOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GKE) string { return v.Namespace }).(pulumi.StringOutput)
}

// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o GKEOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GKE) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name of the GKE service.
func (o GKEOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GKE) string { return v.Service }).(pulumi.StringOutput)
}

type GKEPtrOutput struct{ *pulumi.OutputState }

func (GKEPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GKE)(nil)).Elem()
}

func (o GKEPtrOutput) ToGKEPtrOutput() GKEPtrOutput {
	return o
}

func (o GKEPtrOutput) ToGKEPtrOutputWithContext(ctx context.Context) GKEPtrOutput {
	return o
}

func (o GKEPtrOutput) Elem() GKEOutput {
	return o.ApplyT(func(v *GKE) GKE {
		if v != nil {
			return *v
		}
		var ret GKE
		return ret
	}).(GKEOutput)
}

// The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
func (o GKEPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GKE) *string {
		if v == nil {
			return nil
		}
		return &v.Cluster
	}).(pulumi.StringPtrOutput)
}

// The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
func (o GKEPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GKE) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// The namespace the GKE service is running in.
func (o GKEPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GKE) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o GKEPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GKE) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name of the GKE service.
func (o GKEPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GKE) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// Represents a GKE destination.
type GKEResponse struct {
	// The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
	Cluster string `pulumi:"cluster"`
	// The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
	Location string `pulumi:"location"`
	// The namespace the GKE service is running in.
	Namespace string `pulumi:"namespace"`
	// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
	Path string `pulumi:"path"`
	// Name of the GKE service.
	Service string `pulumi:"service"`
}

// Represents a GKE destination.
type GKEResponseOutput struct{ *pulumi.OutputState }

func (GKEResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GKEResponse)(nil)).Elem()
}

func (o GKEResponseOutput) ToGKEResponseOutput() GKEResponseOutput {
	return o
}

func (o GKEResponseOutput) ToGKEResponseOutputWithContext(ctx context.Context) GKEResponseOutput {
	return o
}

// The name of the cluster the GKE service is running in. The cluster must be running in the same project as the trigger being created.
func (o GKEResponseOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GKEResponse) string { return v.Cluster }).(pulumi.StringOutput)
}

// The name of the Google Compute Engine in which the cluster resides, which can either be compute zone (for example, us-central1-a) for the zonal clusters or region (for example, us-central1) for regional clusters.
func (o GKEResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GKEResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The namespace the GKE service is running in.
func (o GKEResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GKEResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// Optional. The relative path on the GKE service the events should be sent to. The value must conform to the definition of a URI path segment (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
func (o GKEResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GKEResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Name of the GKE service.
func (o GKEResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GKEResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Represents a HTTP endpoint destination.
type HttpEndpoint struct {
	// The URI of the HTTP enpdoint. The value must be a RFC2396 URI string. Examples: `http://10.10.10.8:80/route`, `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are supported. The host can be either a static IP addressable from the VPC specified by the network config, or an internal DNS hostname of the service resolvable via Cloud DNS.
	Uri string `pulumi:"uri"`
}

// HttpEndpointInput is an input type that accepts HttpEndpointArgs and HttpEndpointOutput values.
// You can construct a concrete instance of `HttpEndpointInput` via:
//
//	HttpEndpointArgs{...}
type HttpEndpointInput interface {
	pulumi.Input

	ToHttpEndpointOutput() HttpEndpointOutput
	ToHttpEndpointOutputWithContext(context.Context) HttpEndpointOutput
}

// Represents a HTTP endpoint destination.
type HttpEndpointArgs struct {
	// The URI of the HTTP enpdoint. The value must be a RFC2396 URI string. Examples: `http://10.10.10.8:80/route`, `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are supported. The host can be either a static IP addressable from the VPC specified by the network config, or an internal DNS hostname of the service resolvable via Cloud DNS.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (HttpEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpEndpoint)(nil)).Elem()
}

func (i HttpEndpointArgs) ToHttpEndpointOutput() HttpEndpointOutput {
	return i.ToHttpEndpointOutputWithContext(context.Background())
}

func (i HttpEndpointArgs) ToHttpEndpointOutputWithContext(ctx context.Context) HttpEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpEndpointOutput)
}

func (i HttpEndpointArgs) ToHttpEndpointPtrOutput() HttpEndpointPtrOutput {
	return i.ToHttpEndpointPtrOutputWithContext(context.Background())
}

func (i HttpEndpointArgs) ToHttpEndpointPtrOutputWithContext(ctx context.Context) HttpEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpEndpointOutput).ToHttpEndpointPtrOutputWithContext(ctx)
}

// HttpEndpointPtrInput is an input type that accepts HttpEndpointArgs, HttpEndpointPtr and HttpEndpointPtrOutput values.
// You can construct a concrete instance of `HttpEndpointPtrInput` via:
//
//	        HttpEndpointArgs{...}
//
//	or:
//
//	        nil
type HttpEndpointPtrInput interface {
	pulumi.Input

	ToHttpEndpointPtrOutput() HttpEndpointPtrOutput
	ToHttpEndpointPtrOutputWithContext(context.Context) HttpEndpointPtrOutput
}

type httpEndpointPtrType HttpEndpointArgs

func HttpEndpointPtr(v *HttpEndpointArgs) HttpEndpointPtrInput {
	return (*httpEndpointPtrType)(v)
}

func (*httpEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpEndpoint)(nil)).Elem()
}

func (i *httpEndpointPtrType) ToHttpEndpointPtrOutput() HttpEndpointPtrOutput {
	return i.ToHttpEndpointPtrOutputWithContext(context.Background())
}

func (i *httpEndpointPtrType) ToHttpEndpointPtrOutputWithContext(ctx context.Context) HttpEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpEndpointPtrOutput)
}

// Represents a HTTP endpoint destination.
type HttpEndpointOutput struct{ *pulumi.OutputState }

func (HttpEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpEndpoint)(nil)).Elem()
}

func (o HttpEndpointOutput) ToHttpEndpointOutput() HttpEndpointOutput {
	return o
}

func (o HttpEndpointOutput) ToHttpEndpointOutputWithContext(ctx context.Context) HttpEndpointOutput {
	return o
}

func (o HttpEndpointOutput) ToHttpEndpointPtrOutput() HttpEndpointPtrOutput {
	return o.ToHttpEndpointPtrOutputWithContext(context.Background())
}

func (o HttpEndpointOutput) ToHttpEndpointPtrOutputWithContext(ctx context.Context) HttpEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpEndpoint) *HttpEndpoint {
		return &v
	}).(HttpEndpointPtrOutput)
}

// The URI of the HTTP enpdoint. The value must be a RFC2396 URI string. Examples: `http://10.10.10.8:80/route`, `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are supported. The host can be either a static IP addressable from the VPC specified by the network config, or an internal DNS hostname of the service resolvable via Cloud DNS.
func (o HttpEndpointOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v HttpEndpoint) string { return v.Uri }).(pulumi.StringOutput)
}

type HttpEndpointPtrOutput struct{ *pulumi.OutputState }

func (HttpEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpEndpoint)(nil)).Elem()
}

func (o HttpEndpointPtrOutput) ToHttpEndpointPtrOutput() HttpEndpointPtrOutput {
	return o
}

func (o HttpEndpointPtrOutput) ToHttpEndpointPtrOutputWithContext(ctx context.Context) HttpEndpointPtrOutput {
	return o
}

func (o HttpEndpointPtrOutput) Elem() HttpEndpointOutput {
	return o.ApplyT(func(v *HttpEndpoint) HttpEndpoint {
		if v != nil {
			return *v
		}
		var ret HttpEndpoint
		return ret
	}).(HttpEndpointOutput)
}

// The URI of the HTTP enpdoint. The value must be a RFC2396 URI string. Examples: `http://10.10.10.8:80/route`, `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are supported. The host can be either a static IP addressable from the VPC specified by the network config, or an internal DNS hostname of the service resolvable via Cloud DNS.
func (o HttpEndpointPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Represents a HTTP endpoint destination.
type HttpEndpointResponse struct {
	// The URI of the HTTP enpdoint. The value must be a RFC2396 URI string. Examples: `http://10.10.10.8:80/route`, `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are supported. The host can be either a static IP addressable from the VPC specified by the network config, or an internal DNS hostname of the service resolvable via Cloud DNS.
	Uri string `pulumi:"uri"`
}

// Represents a HTTP endpoint destination.
type HttpEndpointResponseOutput struct{ *pulumi.OutputState }

func (HttpEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpEndpointResponse)(nil)).Elem()
}

func (o HttpEndpointResponseOutput) ToHttpEndpointResponseOutput() HttpEndpointResponseOutput {
	return o
}

func (o HttpEndpointResponseOutput) ToHttpEndpointResponseOutputWithContext(ctx context.Context) HttpEndpointResponseOutput {
	return o
}

// The URI of the HTTP enpdoint. The value must be a RFC2396 URI string. Examples: `http://10.10.10.8:80/route`, `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are supported. The host can be either a static IP addressable from the VPC specified by the network config, or an internal DNS hostname of the service resolvable via Cloud DNS.
func (o HttpEndpointResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v HttpEndpointResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Represents a network config to be used for destination resolution and connectivity.
type NetworkConfig struct {
	// Name of the NetworkAttachment that allows access to the destination VPC. Format: `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
	NetworkAttachment string `pulumi:"networkAttachment"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Represents a network config to be used for destination resolution and connectivity.
type NetworkConfigArgs struct {
	// Name of the NetworkAttachment that allows access to the destination VPC. Format: `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
	NetworkAttachment pulumi.StringInput `pulumi:"networkAttachment"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//	        NetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// Represents a network config to be used for destination resolution and connectivity.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// Name of the NetworkAttachment that allows access to the destination VPC. Format: `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
func (o NetworkConfigOutput) NetworkAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfig) string { return v.NetworkAttachment }).(pulumi.StringOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// Name of the NetworkAttachment that allows access to the destination VPC. Format: `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
func (o NetworkConfigPtrOutput) NetworkAttachment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return &v.NetworkAttachment
	}).(pulumi.StringPtrOutput)
}

// Represents a network config to be used for destination resolution and connectivity.
type NetworkConfigResponse struct {
	// Name of the NetworkAttachment that allows access to the destination VPC. Format: `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
	NetworkAttachment string `pulumi:"networkAttachment"`
}

// Represents a network config to be used for destination resolution and connectivity.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// Name of the NetworkAttachment that allows access to the destination VPC. Format: `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
func (o NetworkConfigResponseOutput) NetworkAttachment() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.NetworkAttachment }).(pulumi.StringOutput)
}

// Represents a Pub/Sub transport.
type Pubsub struct {
	// Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
	Topic *string `pulumi:"topic"`
}

// PubsubInput is an input type that accepts PubsubArgs and PubsubOutput values.
// You can construct a concrete instance of `PubsubInput` via:
//
//	PubsubArgs{...}
type PubsubInput interface {
	pulumi.Input

	ToPubsubOutput() PubsubOutput
	ToPubsubOutputWithContext(context.Context) PubsubOutput
}

// Represents a Pub/Sub transport.
type PubsubArgs struct {
	// Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pubsub)(nil)).Elem()
}

func (i PubsubArgs) ToPubsubOutput() PubsubOutput {
	return i.ToPubsubOutputWithContext(context.Background())
}

func (i PubsubArgs) ToPubsubOutputWithContext(ctx context.Context) PubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubOutput)
}

func (i PubsubArgs) ToPubsubPtrOutput() PubsubPtrOutput {
	return i.ToPubsubPtrOutputWithContext(context.Background())
}

func (i PubsubArgs) ToPubsubPtrOutputWithContext(ctx context.Context) PubsubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubOutput).ToPubsubPtrOutputWithContext(ctx)
}

// PubsubPtrInput is an input type that accepts PubsubArgs, PubsubPtr and PubsubPtrOutput values.
// You can construct a concrete instance of `PubsubPtrInput` via:
//
//	        PubsubArgs{...}
//
//	or:
//
//	        nil
type PubsubPtrInput interface {
	pulumi.Input

	ToPubsubPtrOutput() PubsubPtrOutput
	ToPubsubPtrOutputWithContext(context.Context) PubsubPtrOutput
}

type pubsubPtrType PubsubArgs

func PubsubPtr(v *PubsubArgs) PubsubPtrInput {
	return (*pubsubPtrType)(v)
}

func (*pubsubPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Pubsub)(nil)).Elem()
}

func (i *pubsubPtrType) ToPubsubPtrOutput() PubsubPtrOutput {
	return i.ToPubsubPtrOutputWithContext(context.Background())
}

func (i *pubsubPtrType) ToPubsubPtrOutputWithContext(ctx context.Context) PubsubPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubPtrOutput)
}

// Represents a Pub/Sub transport.
type PubsubOutput struct{ *pulumi.OutputState }

func (PubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pubsub)(nil)).Elem()
}

func (o PubsubOutput) ToPubsubOutput() PubsubOutput {
	return o
}

func (o PubsubOutput) ToPubsubOutputWithContext(ctx context.Context) PubsubOutput {
	return o
}

func (o PubsubOutput) ToPubsubPtrOutput() PubsubPtrOutput {
	return o.ToPubsubPtrOutputWithContext(context.Background())
}

func (o PubsubOutput) ToPubsubPtrOutputWithContext(ctx context.Context) PubsubPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Pubsub) *Pubsub {
		return &v
	}).(PubsubPtrOutput)
}

// Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
func (o PubsubOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Pubsub) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubsubPtrOutput struct{ *pulumi.OutputState }

func (PubsubPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pubsub)(nil)).Elem()
}

func (o PubsubPtrOutput) ToPubsubPtrOutput() PubsubPtrOutput {
	return o
}

func (o PubsubPtrOutput) ToPubsubPtrOutputWithContext(ctx context.Context) PubsubPtrOutput {
	return o
}

func (o PubsubPtrOutput) Elem() PubsubOutput {
	return o.ApplyT(func(v *Pubsub) Pubsub {
		if v != nil {
			return *v
		}
		var ret Pubsub
		return ret
	}).(PubsubOutput)
}

// Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
func (o PubsubPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pubsub) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// Represents a Pub/Sub transport.
type PubsubResponse struct {
	// The name of the Pub/Sub subscription created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
	Subscription string `pulumi:"subscription"`
	// Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
	Topic string `pulumi:"topic"`
}

// Represents a Pub/Sub transport.
type PubsubResponseOutput struct{ *pulumi.OutputState }

func (PubsubResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubResponse)(nil)).Elem()
}

func (o PubsubResponseOutput) ToPubsubResponseOutput() PubsubResponseOutput {
	return o
}

func (o PubsubResponseOutput) ToPubsubResponseOutputWithContext(ctx context.Context) PubsubResponseOutput {
	return o
}

// The name of the Pub/Sub subscription created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
func (o PubsubResponseOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubResponse) string { return v.Subscription }).(pulumi.StringOutput)
}

// Optional. The name of the Pub/Sub topic created and managed by Eventarc as a transport for the event delivery. Format: `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide here is not deleted by Eventarc at trigger deletion.
func (o PubsubResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubResponse) string { return v.Topic }).(pulumi.StringOutput)
}

// A condition that is part of the trigger state computation.
type StateConditionResponse struct {
	// The canonical code of the condition.
	Code string `pulumi:"code"`
	// Human-readable message.
	Message string `pulumi:"message"`
}

// A condition that is part of the trigger state computation.
type StateConditionResponseOutput struct{ *pulumi.OutputState }

func (StateConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateConditionResponse)(nil)).Elem()
}

func (o StateConditionResponseOutput) ToStateConditionResponseOutput() StateConditionResponseOutput {
	return o
}

func (o StateConditionResponseOutput) ToStateConditionResponseOutputWithContext(ctx context.Context) StateConditionResponseOutput {
	return o
}

// The canonical code of the condition.
func (o StateConditionResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StateConditionResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Human-readable message.
func (o StateConditionResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StateConditionResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Represents the transport intermediaries created for the trigger to deliver events.
type Transport struct {
	// The Pub/Sub topic and subscription used by Eventarc as a transport intermediary.
	Pubsub *Pubsub `pulumi:"pubsub"`
}

// TransportInput is an input type that accepts TransportArgs and TransportOutput values.
// You can construct a concrete instance of `TransportInput` via:
//
//	TransportArgs{...}
type TransportInput interface {
	pulumi.Input

	ToTransportOutput() TransportOutput
	ToTransportOutputWithContext(context.Context) TransportOutput
}

// Represents the transport intermediaries created for the trigger to deliver events.
type TransportArgs struct {
	// The Pub/Sub topic and subscription used by Eventarc as a transport intermediary.
	Pubsub PubsubPtrInput `pulumi:"pubsub"`
}

func (TransportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Transport)(nil)).Elem()
}

func (i TransportArgs) ToTransportOutput() TransportOutput {
	return i.ToTransportOutputWithContext(context.Background())
}

func (i TransportArgs) ToTransportOutputWithContext(ctx context.Context) TransportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportOutput)
}

func (i TransportArgs) ToTransportPtrOutput() TransportPtrOutput {
	return i.ToTransportPtrOutputWithContext(context.Background())
}

func (i TransportArgs) ToTransportPtrOutputWithContext(ctx context.Context) TransportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportOutput).ToTransportPtrOutputWithContext(ctx)
}

// TransportPtrInput is an input type that accepts TransportArgs, TransportPtr and TransportPtrOutput values.
// You can construct a concrete instance of `TransportPtrInput` via:
//
//	        TransportArgs{...}
//
//	or:
//
//	        nil
type TransportPtrInput interface {
	pulumi.Input

	ToTransportPtrOutput() TransportPtrOutput
	ToTransportPtrOutputWithContext(context.Context) TransportPtrOutput
}

type transportPtrType TransportArgs

func TransportPtr(v *TransportArgs) TransportPtrInput {
	return (*transportPtrType)(v)
}

func (*transportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Transport)(nil)).Elem()
}

func (i *transportPtrType) ToTransportPtrOutput() TransportPtrOutput {
	return i.ToTransportPtrOutputWithContext(context.Background())
}

func (i *transportPtrType) ToTransportPtrOutputWithContext(ctx context.Context) TransportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportPtrOutput)
}

// Represents the transport intermediaries created for the trigger to deliver events.
type TransportOutput struct{ *pulumi.OutputState }

func (TransportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Transport)(nil)).Elem()
}

func (o TransportOutput) ToTransportOutput() TransportOutput {
	return o
}

func (o TransportOutput) ToTransportOutputWithContext(ctx context.Context) TransportOutput {
	return o
}

func (o TransportOutput) ToTransportPtrOutput() TransportPtrOutput {
	return o.ToTransportPtrOutputWithContext(context.Background())
}

func (o TransportOutput) ToTransportPtrOutputWithContext(ctx context.Context) TransportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Transport) *Transport {
		return &v
	}).(TransportPtrOutput)
}

// The Pub/Sub topic and subscription used by Eventarc as a transport intermediary.
func (o TransportOutput) Pubsub() PubsubPtrOutput {
	return o.ApplyT(func(v Transport) *Pubsub { return v.Pubsub }).(PubsubPtrOutput)
}

type TransportPtrOutput struct{ *pulumi.OutputState }

func (TransportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Transport)(nil)).Elem()
}

func (o TransportPtrOutput) ToTransportPtrOutput() TransportPtrOutput {
	return o
}

func (o TransportPtrOutput) ToTransportPtrOutputWithContext(ctx context.Context) TransportPtrOutput {
	return o
}

func (o TransportPtrOutput) Elem() TransportOutput {
	return o.ApplyT(func(v *Transport) Transport {
		if v != nil {
			return *v
		}
		var ret Transport
		return ret
	}).(TransportOutput)
}

// The Pub/Sub topic and subscription used by Eventarc as a transport intermediary.
func (o TransportPtrOutput) Pubsub() PubsubPtrOutput {
	return o.ApplyT(func(v *Transport) *Pubsub {
		if v == nil {
			return nil
		}
		return v.Pubsub
	}).(PubsubPtrOutput)
}

// Represents the transport intermediaries created for the trigger to deliver events.
type TransportResponse struct {
	// The Pub/Sub topic and subscription used by Eventarc as a transport intermediary.
	Pubsub PubsubResponse `pulumi:"pubsub"`
}

// Represents the transport intermediaries created for the trigger to deliver events.
type TransportResponseOutput struct{ *pulumi.OutputState }

func (TransportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransportResponse)(nil)).Elem()
}

func (o TransportResponseOutput) ToTransportResponseOutput() TransportResponseOutput {
	return o
}

func (o TransportResponseOutput) ToTransportResponseOutputWithContext(ctx context.Context) TransportResponseOutput {
	return o
}

// The Pub/Sub topic and subscription used by Eventarc as a transport intermediary.
func (o TransportResponseOutput) Pubsub() PubsubResponseOutput {
	return o.ApplyT(func(v TransportResponse) PubsubResponse { return v.Pubsub }).(PubsubResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunInput)(nil)).Elem(), CloudRunArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudRunPtrInput)(nil)).Elem(), CloudRunArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationInput)(nil)).Elem(), DestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventFilterInput)(nil)).Elem(), EventFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventFilterArrayInput)(nil)).Elem(), EventFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GKEInput)(nil)).Elem(), GKEArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GKEPtrInput)(nil)).Elem(), GKEArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpEndpointInput)(nil)).Elem(), HttpEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpEndpointPtrInput)(nil)).Elem(), HttpEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubInput)(nil)).Elem(), PubsubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubPtrInput)(nil)).Elem(), PubsubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportInput)(nil)).Elem(), TransportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportPtrInput)(nil)).Elem(), TransportArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudRunOutput{})
	pulumi.RegisterOutputType(CloudRunPtrOutput{})
	pulumi.RegisterOutputType(CloudRunResponseOutput{})
	pulumi.RegisterOutputType(DestinationOutput{})
	pulumi.RegisterOutputType(DestinationResponseOutput{})
	pulumi.RegisterOutputType(EventFilterOutput{})
	pulumi.RegisterOutputType(EventFilterArrayOutput{})
	pulumi.RegisterOutputType(EventFilterResponseOutput{})
	pulumi.RegisterOutputType(EventFilterResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GKEOutput{})
	pulumi.RegisterOutputType(GKEPtrOutput{})
	pulumi.RegisterOutputType(GKEResponseOutput{})
	pulumi.RegisterOutputType(HttpEndpointOutput{})
	pulumi.RegisterOutputType(HttpEndpointPtrOutput{})
	pulumi.RegisterOutputType(HttpEndpointResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(PubsubOutput{})
	pulumi.RegisterOutputType(PubsubPtrOutput{})
	pulumi.RegisterOutputType(PubsubResponseOutput{})
	pulumi.RegisterOutputType(StateConditionResponseOutput{})
	pulumi.RegisterOutputType(TransportOutput{})
	pulumi.RegisterOutputType(TransportPtrOutput{})
	pulumi.RegisterOutputType(TransportResponseOutput{})
}
