// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
type AppEngineHttpTarget struct {
	// App Engine Routing setting for the job.
	AppEngineRouting *AppEngineRouting `pulumi:"appEngineRouting"`
	// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
	Body *string `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
	HttpMethod *AppEngineHttpTargetHttpMethod `pulumi:"httpMethod"`
	// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri *string `pulumi:"relativeUri"`
}

// AppEngineHttpTargetInput is an input type that accepts AppEngineHttpTargetArgs and AppEngineHttpTargetOutput values.
// You can construct a concrete instance of `AppEngineHttpTargetInput` via:
//
//          AppEngineHttpTargetArgs{...}
type AppEngineHttpTargetInput interface {
	pulumi.Input

	ToAppEngineHttpTargetOutput() AppEngineHttpTargetOutput
	ToAppEngineHttpTargetOutputWithContext(context.Context) AppEngineHttpTargetOutput
}

// App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
type AppEngineHttpTargetArgs struct {
	// App Engine Routing setting for the job.
	AppEngineRouting AppEngineRoutingPtrInput `pulumi:"appEngineRouting"`
	// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
	HttpMethod AppEngineHttpTargetHttpMethodPtrInput `pulumi:"httpMethod"`
	// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri pulumi.StringPtrInput `pulumi:"relativeUri"`
}

func (AppEngineHttpTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpTarget)(nil)).Elem()
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetOutput() AppEngineHttpTargetOutput {
	return i.ToAppEngineHttpTargetOutputWithContext(context.Background())
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetOutputWithContext(ctx context.Context) AppEngineHttpTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetOutput)
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return i.ToAppEngineHttpTargetPtrOutputWithContext(context.Background())
}

func (i AppEngineHttpTargetArgs) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetOutput).ToAppEngineHttpTargetPtrOutputWithContext(ctx)
}

// AppEngineHttpTargetPtrInput is an input type that accepts AppEngineHttpTargetArgs, AppEngineHttpTargetPtr and AppEngineHttpTargetPtrOutput values.
// You can construct a concrete instance of `AppEngineHttpTargetPtrInput` via:
//
//          AppEngineHttpTargetArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpTargetPtrInput interface {
	pulumi.Input

	ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput
	ToAppEngineHttpTargetPtrOutputWithContext(context.Context) AppEngineHttpTargetPtrOutput
}

type appEngineHttpTargetPtrType AppEngineHttpTargetArgs

func AppEngineHttpTargetPtr(v *AppEngineHttpTargetArgs) AppEngineHttpTargetPtrInput {
	return (*appEngineHttpTargetPtrType)(v)
}

func (*appEngineHttpTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpTarget)(nil)).Elem()
}

func (i *appEngineHttpTargetPtrType) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return i.ToAppEngineHttpTargetPtrOutputWithContext(context.Background())
}

func (i *appEngineHttpTargetPtrType) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetPtrOutput)
}

// App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
type AppEngineHttpTargetOutput struct{ *pulumi.OutputState }

func (AppEngineHttpTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpTarget)(nil)).Elem()
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetOutput() AppEngineHttpTargetOutput {
	return o
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetOutputWithContext(ctx context.Context) AppEngineHttpTargetOutput {
	return o
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return o.ToAppEngineHttpTargetPtrOutputWithContext(context.Background())
}

func (o AppEngineHttpTargetOutput) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) *AppEngineHttpTarget {
		return &v
	}).(AppEngineHttpTargetPtrOutput)
}

// App Engine Routing setting for the job.
func (o AppEngineHttpTargetOutput) AppEngineRouting() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) *AppEngineRouting { return v.AppEngineRouting }).(AppEngineRoutingPtrOutput)
}

// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
func (o AppEngineHttpTargetOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
func (o AppEngineHttpTargetOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
func (o AppEngineHttpTargetOutput) HttpMethod() AppEngineHttpTargetHttpMethodPtrOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) *AppEngineHttpTargetHttpMethod { return v.HttpMethod }).(AppEngineHttpTargetHttpMethodPtrOutput)
}

// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpTargetOutput) RelativeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineHttpTarget) *string { return v.RelativeUri }).(pulumi.StringPtrOutput)
}

type AppEngineHttpTargetPtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpTarget)(nil)).Elem()
}

func (o AppEngineHttpTargetPtrOutput) ToAppEngineHttpTargetPtrOutput() AppEngineHttpTargetPtrOutput {
	return o
}

func (o AppEngineHttpTargetPtrOutput) ToAppEngineHttpTargetPtrOutputWithContext(ctx context.Context) AppEngineHttpTargetPtrOutput {
	return o
}

func (o AppEngineHttpTargetPtrOutput) Elem() AppEngineHttpTargetOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) AppEngineHttpTarget { return *v }).(AppEngineHttpTargetOutput)
}

// App Engine Routing setting for the job.
func (o AppEngineHttpTargetPtrOutput) AppEngineRouting() AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) *AppEngineRouting {
		if v == nil {
			return nil
		}
		return v.AppEngineRouting
	}).(AppEngineRoutingPtrOutput)
}

// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
func (o AppEngineHttpTargetPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
func (o AppEngineHttpTargetPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
func (o AppEngineHttpTargetPtrOutput) HttpMethod() AppEngineHttpTargetHttpMethodPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) *AppEngineHttpTargetHttpMethod {
		if v == nil {
			return nil
		}
		return v.HttpMethod
	}).(AppEngineHttpTargetHttpMethodPtrOutput)
}

// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpTargetPtrOutput) RelativeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTarget) *string {
		if v == nil {
			return nil
		}
		return v.RelativeUri
	}).(pulumi.StringPtrOutput)
}

// App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
type AppEngineHttpTargetResponse struct {
	// App Engine Routing setting for the job.
	AppEngineRouting AppEngineRoutingResponse `pulumi:"appEngineRouting"`
	// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
	Body string `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
	Headers map[string]string `pulumi:"headers"`
	// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
	HttpMethod string `pulumi:"httpMethod"`
	// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri string `pulumi:"relativeUri"`
}

// AppEngineHttpTargetResponseInput is an input type that accepts AppEngineHttpTargetResponseArgs and AppEngineHttpTargetResponseOutput values.
// You can construct a concrete instance of `AppEngineHttpTargetResponseInput` via:
//
//          AppEngineHttpTargetResponseArgs{...}
type AppEngineHttpTargetResponseInput interface {
	pulumi.Input

	ToAppEngineHttpTargetResponseOutput() AppEngineHttpTargetResponseOutput
	ToAppEngineHttpTargetResponseOutputWithContext(context.Context) AppEngineHttpTargetResponseOutput
}

// App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
type AppEngineHttpTargetResponseArgs struct {
	// App Engine Routing setting for the job.
	AppEngineRouting AppEngineRoutingResponseInput `pulumi:"appEngineRouting"`
	// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
	Body pulumi.StringInput `pulumi:"body"`
	// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
	HttpMethod pulumi.StringInput `pulumi:"httpMethod"`
	// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
	RelativeUri pulumi.StringInput `pulumi:"relativeUri"`
}

func (AppEngineHttpTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpTargetResponse)(nil)).Elem()
}

func (i AppEngineHttpTargetResponseArgs) ToAppEngineHttpTargetResponseOutput() AppEngineHttpTargetResponseOutput {
	return i.ToAppEngineHttpTargetResponseOutputWithContext(context.Background())
}

func (i AppEngineHttpTargetResponseArgs) ToAppEngineHttpTargetResponseOutputWithContext(ctx context.Context) AppEngineHttpTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetResponseOutput)
}

func (i AppEngineHttpTargetResponseArgs) ToAppEngineHttpTargetResponsePtrOutput() AppEngineHttpTargetResponsePtrOutput {
	return i.ToAppEngineHttpTargetResponsePtrOutputWithContext(context.Background())
}

func (i AppEngineHttpTargetResponseArgs) ToAppEngineHttpTargetResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetResponseOutput).ToAppEngineHttpTargetResponsePtrOutputWithContext(ctx)
}

// AppEngineHttpTargetResponsePtrInput is an input type that accepts AppEngineHttpTargetResponseArgs, AppEngineHttpTargetResponsePtr and AppEngineHttpTargetResponsePtrOutput values.
// You can construct a concrete instance of `AppEngineHttpTargetResponsePtrInput` via:
//
//          AppEngineHttpTargetResponseArgs{...}
//
//  or:
//
//          nil
type AppEngineHttpTargetResponsePtrInput interface {
	pulumi.Input

	ToAppEngineHttpTargetResponsePtrOutput() AppEngineHttpTargetResponsePtrOutput
	ToAppEngineHttpTargetResponsePtrOutputWithContext(context.Context) AppEngineHttpTargetResponsePtrOutput
}

type appEngineHttpTargetResponsePtrType AppEngineHttpTargetResponseArgs

func AppEngineHttpTargetResponsePtr(v *AppEngineHttpTargetResponseArgs) AppEngineHttpTargetResponsePtrInput {
	return (*appEngineHttpTargetResponsePtrType)(v)
}

func (*appEngineHttpTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpTargetResponse)(nil)).Elem()
}

func (i *appEngineHttpTargetResponsePtrType) ToAppEngineHttpTargetResponsePtrOutput() AppEngineHttpTargetResponsePtrOutput {
	return i.ToAppEngineHttpTargetResponsePtrOutputWithContext(context.Background())
}

func (i *appEngineHttpTargetResponsePtrType) ToAppEngineHttpTargetResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineHttpTargetResponsePtrOutput)
}

// App Engine target. The job will be pushed to a job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. Error 503 is considered an App Engine system error instead of an application error. Requests returning error 503 will be retried regardless of retry configuration and not counted against retry counts. Any other response code, or a failure to receive a response before the deadline, constitutes a failed attempt.
type AppEngineHttpTargetResponseOutput struct{ *pulumi.OutputState }

func (AppEngineHttpTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineHttpTargetResponse)(nil)).Elem()
}

func (o AppEngineHttpTargetResponseOutput) ToAppEngineHttpTargetResponseOutput() AppEngineHttpTargetResponseOutput {
	return o
}

func (o AppEngineHttpTargetResponseOutput) ToAppEngineHttpTargetResponseOutputWithContext(ctx context.Context) AppEngineHttpTargetResponseOutput {
	return o
}

func (o AppEngineHttpTargetResponseOutput) ToAppEngineHttpTargetResponsePtrOutput() AppEngineHttpTargetResponsePtrOutput {
	return o.ToAppEngineHttpTargetResponsePtrOutputWithContext(context.Background())
}

func (o AppEngineHttpTargetResponseOutput) ToAppEngineHttpTargetResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpTargetResponsePtrOutput {
	return o.ApplyT(func(v AppEngineHttpTargetResponse) *AppEngineHttpTargetResponse {
		return &v
	}).(AppEngineHttpTargetResponsePtrOutput)
}

// App Engine Routing setting for the job.
func (o AppEngineHttpTargetResponseOutput) AppEngineRouting() AppEngineRoutingResponseOutput {
	return o.ApplyT(func(v AppEngineHttpTargetResponse) AppEngineRoutingResponse { return v.AppEngineRouting }).(AppEngineRoutingResponseOutput)
}

// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
func (o AppEngineHttpTargetResponseOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineHttpTargetResponse) string { return v.Body }).(pulumi.StringOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
func (o AppEngineHttpTargetResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v AppEngineHttpTargetResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
func (o AppEngineHttpTargetResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineHttpTargetResponse) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpTargetResponseOutput) RelativeUri() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineHttpTargetResponse) string { return v.RelativeUri }).(pulumi.StringOutput)
}

type AppEngineHttpTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (AppEngineHttpTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineHttpTargetResponse)(nil)).Elem()
}

func (o AppEngineHttpTargetResponsePtrOutput) ToAppEngineHttpTargetResponsePtrOutput() AppEngineHttpTargetResponsePtrOutput {
	return o
}

func (o AppEngineHttpTargetResponsePtrOutput) ToAppEngineHttpTargetResponsePtrOutputWithContext(ctx context.Context) AppEngineHttpTargetResponsePtrOutput {
	return o
}

func (o AppEngineHttpTargetResponsePtrOutput) Elem() AppEngineHttpTargetResponseOutput {
	return o.ApplyT(func(v *AppEngineHttpTargetResponse) AppEngineHttpTargetResponse { return *v }).(AppEngineHttpTargetResponseOutput)
}

// App Engine Routing setting for the job.
func (o AppEngineHttpTargetResponsePtrOutput) AppEngineRouting() AppEngineRoutingResponsePtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTargetResponse) *AppEngineRoutingResponse {
		if v == nil {
			return nil
		}
		return &v.AppEngineRouting
	}).(AppEngineRoutingResponsePtrOutput)
}

// Body. HTTP request body. A request body is allowed only if the HTTP method is POST or PUT. It will result in invalid argument error to set a body on a job with an incompatible HttpMethod.
func (o AppEngineHttpTargetResponsePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Body
	}).(pulumi.StringPtrOutput)
}

// HTTP request headers. This map contains the header field names and values. Headers can be set when the job is created. Cloud Scheduler sets some headers to default values: * `User-Agent`: By default, this header is `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can be modified, but Cloud Scheduler will append `"AppEngine-Google; (+http://code.google.com/appengine)"` to the modified `User-Agent`. * `X-CloudScheduler`: This header will be set to true. If the job has an body, Cloud Scheduler sets the following headers: * `Content-Type`: By default, the `Content-Type` header is set to `"application/octet-stream"`. The default can be overridden by explictly setting `Content-Type` to a particular media type when the job is created. For example, `Content-Type` can be set to `"application/json"`. * `Content-Length`: This is computed by Cloud Scheduler. This value is output only. It cannot be changed. The headers below are output only. They cannot be set or overridden: * `X-Google-*`: For Google internal use only. * `X-AppEngine-*`: For Google internal use only. In addition, some App Engine headers, which contain job-specific information, are also be sent to the job handler.
func (o AppEngineHttpTargetResponsePtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppEngineHttpTargetResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// The HTTP method to use for the request. PATCH and OPTIONS are not permitted.
func (o AppEngineHttpTargetResponsePtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// The relative URI. The relative URL must begin with "/" and must be a valid HTTP relative URL. It can contain a path, query string arguments, and `#` fragments. If the relative URL is empty, then the root path "/" will be used. No spaces are allowed, and the maximum length allowed is 2083 characters.
func (o AppEngineHttpTargetResponsePtrOutput) RelativeUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineHttpTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RelativeUri
	}).(pulumi.StringPtrOutput)
}

// App Engine Routing. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRouting struct {
	// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance *string `pulumi:"instance"`
	// App service. By default, the job is sent to the service which is the default service when the job is attempted.
	Service *string `pulumi:"service"`
	// App version. By default, the job is sent to the version which is the default version when the job is attempted.
	Version *string `pulumi:"version"`
}

// AppEngineRoutingInput is an input type that accepts AppEngineRoutingArgs and AppEngineRoutingOutput values.
// You can construct a concrete instance of `AppEngineRoutingInput` via:
//
//          AppEngineRoutingArgs{...}
type AppEngineRoutingInput interface {
	pulumi.Input

	ToAppEngineRoutingOutput() AppEngineRoutingOutput
	ToAppEngineRoutingOutputWithContext(context.Context) AppEngineRoutingOutput
}

// App Engine Routing. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingArgs struct {
	// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// App service. By default, the job is sent to the service which is the default service when the job is attempted.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// App version. By default, the job is sent to the version which is the default version when the job is attempted.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (AppEngineRoutingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRouting)(nil)).Elem()
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingOutput() AppEngineRoutingOutput {
	return i.ToAppEngineRoutingOutputWithContext(context.Background())
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingOutputWithContext(ctx context.Context) AppEngineRoutingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingOutput)
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return i.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (i AppEngineRoutingArgs) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingOutput).ToAppEngineRoutingPtrOutputWithContext(ctx)
}

// AppEngineRoutingPtrInput is an input type that accepts AppEngineRoutingArgs, AppEngineRoutingPtr and AppEngineRoutingPtrOutput values.
// You can construct a concrete instance of `AppEngineRoutingPtrInput` via:
//
//          AppEngineRoutingArgs{...}
//
//  or:
//
//          nil
type AppEngineRoutingPtrInput interface {
	pulumi.Input

	ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput
	ToAppEngineRoutingPtrOutputWithContext(context.Context) AppEngineRoutingPtrOutput
}

type appEngineRoutingPtrType AppEngineRoutingArgs

func AppEngineRoutingPtr(v *AppEngineRoutingArgs) AppEngineRoutingPtrInput {
	return (*appEngineRoutingPtrType)(v)
}

func (*appEngineRoutingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRouting)(nil)).Elem()
}

func (i *appEngineRoutingPtrType) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return i.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (i *appEngineRoutingPtrType) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingPtrOutput)
}

// App Engine Routing. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRouting)(nil)).Elem()
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingOutput() AppEngineRoutingOutput {
	return o
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingOutputWithContext(ctx context.Context) AppEngineRoutingOutput {
	return o
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return o.ToAppEngineRoutingPtrOutputWithContext(context.Background())
}

func (o AppEngineRoutingOutput) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *AppEngineRouting {
		return &v
	}).(AppEngineRoutingPtrOutput)
}

// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// App service. By default, the job is sent to the service which is the default service when the job is attempted.
func (o AppEngineRoutingOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// App version. By default, the job is sent to the version which is the default version when the job is attempted.
func (o AppEngineRoutingOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AppEngineRouting) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AppEngineRoutingPtrOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRouting)(nil)).Elem()
}

func (o AppEngineRoutingPtrOutput) ToAppEngineRoutingPtrOutput() AppEngineRoutingPtrOutput {
	return o
}

func (o AppEngineRoutingPtrOutput) ToAppEngineRoutingPtrOutputWithContext(ctx context.Context) AppEngineRoutingPtrOutput {
	return o
}

func (o AppEngineRoutingPtrOutput) Elem() AppEngineRoutingOutput {
	return o.ApplyT(func(v *AppEngineRouting) AppEngineRouting { return *v }).(AppEngineRoutingOutput)
}

// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingPtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// App service. By default, the job is sent to the service which is the default service when the job is attempted.
func (o AppEngineRoutingPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// App version. By default, the job is sent to the version which is the default version when the job is attempted.
func (o AppEngineRoutingPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRouting) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// App Engine Routing. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingResponse struct {
	// The host that the job is sent to. For more information about how App Engine requests are routed, see [here](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the job's project ID. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the job will be sent to the service which is the default service when the job is attempted. If version is empty, then the job will be sent to the version which is the default version when the job is attempted. If instance is empty, then the job will be sent to an instance which is available when the job is attempted. If service, version, or instance is invalid, then the job will be sent to the default version of the default service when the job is attempted.
	Host string `pulumi:"host"`
	// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance string `pulumi:"instance"`
	// App service. By default, the job is sent to the service which is the default service when the job is attempted.
	Service string `pulumi:"service"`
	// App version. By default, the job is sent to the version which is the default version when the job is attempted.
	Version string `pulumi:"version"`
}

// AppEngineRoutingResponseInput is an input type that accepts AppEngineRoutingResponseArgs and AppEngineRoutingResponseOutput values.
// You can construct a concrete instance of `AppEngineRoutingResponseInput` via:
//
//          AppEngineRoutingResponseArgs{...}
type AppEngineRoutingResponseInput interface {
	pulumi.Input

	ToAppEngineRoutingResponseOutput() AppEngineRoutingResponseOutput
	ToAppEngineRoutingResponseOutputWithContext(context.Context) AppEngineRoutingResponseOutput
}

// App Engine Routing. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingResponseArgs struct {
	// The host that the job is sent to. For more information about how App Engine requests are routed, see [here](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the job's project ID. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the job will be sent to the service which is the default service when the job is attempted. If version is empty, then the job will be sent to the version which is the default version when the job is attempted. If instance is empty, then the job will be sent to an instance which is available when the job is attempted. If service, version, or instance is invalid, then the job will be sent to the default version of the default service when the job is attempted.
	Host pulumi.StringInput `pulumi:"host"`
	// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
	Instance pulumi.StringInput `pulumi:"instance"`
	// App service. By default, the job is sent to the service which is the default service when the job is attempted.
	Service pulumi.StringInput `pulumi:"service"`
	// App version. By default, the job is sent to the version which is the default version when the job is attempted.
	Version pulumi.StringInput `pulumi:"version"`
}

func (AppEngineRoutingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRoutingResponse)(nil)).Elem()
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponseOutput() AppEngineRoutingResponseOutput {
	return i.ToAppEngineRoutingResponseOutputWithContext(context.Background())
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponseOutputWithContext(ctx context.Context) AppEngineRoutingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingResponseOutput)
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return i.ToAppEngineRoutingResponsePtrOutputWithContext(context.Background())
}

func (i AppEngineRoutingResponseArgs) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingResponseOutput).ToAppEngineRoutingResponsePtrOutputWithContext(ctx)
}

// AppEngineRoutingResponsePtrInput is an input type that accepts AppEngineRoutingResponseArgs, AppEngineRoutingResponsePtr and AppEngineRoutingResponsePtrOutput values.
// You can construct a concrete instance of `AppEngineRoutingResponsePtrInput` via:
//
//          AppEngineRoutingResponseArgs{...}
//
//  or:
//
//          nil
type AppEngineRoutingResponsePtrInput interface {
	pulumi.Input

	ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput
	ToAppEngineRoutingResponsePtrOutputWithContext(context.Context) AppEngineRoutingResponsePtrOutput
}

type appEngineRoutingResponsePtrType AppEngineRoutingResponseArgs

func AppEngineRoutingResponsePtr(v *AppEngineRoutingResponseArgs) AppEngineRoutingResponsePtrInput {
	return (*appEngineRoutingResponsePtrType)(v)
}

func (*appEngineRoutingResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRoutingResponse)(nil)).Elem()
}

func (i *appEngineRoutingResponsePtrType) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return i.ToAppEngineRoutingResponsePtrOutputWithContext(context.Background())
}

func (i *appEngineRoutingResponsePtrType) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppEngineRoutingResponsePtrOutput)
}

// App Engine Routing. For more information about services, versions, and instances see [An Overview of App Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine), [Microservices Architecture on Google App Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine), [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed), and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
type AppEngineRoutingResponseOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppEngineRoutingResponse)(nil)).Elem()
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponseOutput() AppEngineRoutingResponseOutput {
	return o
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponseOutputWithContext(ctx context.Context) AppEngineRoutingResponseOutput {
	return o
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return o.ToAppEngineRoutingResponsePtrOutputWithContext(context.Background())
}

func (o AppEngineRoutingResponseOutput) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) *AppEngineRoutingResponse {
		return &v
	}).(AppEngineRoutingResponsePtrOutput)
}

// The host that the job is sent to. For more information about how App Engine requests are routed, see [here](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the job's project ID. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the job will be sent to the service which is the default service when the job is attempted. If version is empty, then the job will be sent to the version which is the default version when the job is attempted. If instance is empty, then the job will be sent to an instance which is available when the job is attempted. If service, version, or instance is invalid, then the job will be sent to the default version of the default service when the job is attempted.
func (o AppEngineRoutingResponseOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Host }).(pulumi.StringOutput)
}

// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingResponseOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Instance }).(pulumi.StringOutput)
}

// App service. By default, the job is sent to the service which is the default service when the job is attempted.
func (o AppEngineRoutingResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Service }).(pulumi.StringOutput)
}

// App version. By default, the job is sent to the version which is the default version when the job is attempted.
func (o AppEngineRoutingResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AppEngineRoutingResponse) string { return v.Version }).(pulumi.StringOutput)
}

type AppEngineRoutingResponsePtrOutput struct{ *pulumi.OutputState }

func (AppEngineRoutingResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppEngineRoutingResponse)(nil)).Elem()
}

func (o AppEngineRoutingResponsePtrOutput) ToAppEngineRoutingResponsePtrOutput() AppEngineRoutingResponsePtrOutput {
	return o
}

func (o AppEngineRoutingResponsePtrOutput) ToAppEngineRoutingResponsePtrOutputWithContext(ctx context.Context) AppEngineRoutingResponsePtrOutput {
	return o
}

func (o AppEngineRoutingResponsePtrOutput) Elem() AppEngineRoutingResponseOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) AppEngineRoutingResponse { return *v }).(AppEngineRoutingResponseOutput)
}

// The host that the job is sent to. For more information about how App Engine requests are routed, see [here](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed). The host is constructed as: * `host = [application_domain_name]` `| [service] + '.' + [application_domain_name]` `| [version] + '.' + [application_domain_name]` `| [version_dot_service]+ '.' + [application_domain_name]` `| [instance] + '.' + [application_domain_name]` `| [instance_dot_service] + '.' + [application_domain_name]` `| [instance_dot_version] + '.' + [application_domain_name]` `| [instance_dot_version_dot_service] + '.' + [application_domain_name]` * `application_domain_name` = The domain name of the app, for example .appspot.com, which is associated with the job's project ID. * `service =` service * `version =` version * `version_dot_service =` version `+ '.' +` service * `instance =` instance * `instance_dot_service =` instance `+ '.' +` service * `instance_dot_version =` instance `+ '.' +` version * `instance_dot_version_dot_service =` instance `+ '.' +` version `+ '.' +` service If service is empty, then the job will be sent to the service which is the default service when the job is attempted. If version is empty, then the job will be sent to the version which is the default version when the job is attempted. If instance is empty, then the job will be sent to an instance which is available when the job is attempted. If service, version, or instance is invalid, then the job will be sent to the default version of the default service when the job is attempted.
func (o AppEngineRoutingResponsePtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// App instance. By default, the job is sent to an instance which is available when the job is attempted. Requests can only be sent to a specific instance if [manual scaling is used in App Engine Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes). App Engine Flex does not support instances. For more information, see [App Engine Standard request routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed) and [App Engine Flex request routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
func (o AppEngineRoutingResponsePtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Instance
	}).(pulumi.StringPtrOutput)
}

// App service. By default, the job is sent to the service which is the default service when the job is attempted.
func (o AppEngineRoutingResponsePtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// App version. By default, the job is sent to the version which is the default version when the job is attempted.
func (o AppEngineRoutingResponsePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppEngineRoutingResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

// Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
type HttpTarget struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
	Body *string `pulumi:"body"`
	// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
	Headers map[string]string `pulumi:"headers"`
	// Which HTTP method to use for the request.
	HttpMethod *HttpTargetHttpMethod `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken *OAuthToken `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken *OidcToken `pulumi:"oidcToken"`
	// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
	Uri string `pulumi:"uri"`
}

// HttpTargetInput is an input type that accepts HttpTargetArgs and HttpTargetOutput values.
// You can construct a concrete instance of `HttpTargetInput` via:
//
//          HttpTargetArgs{...}
type HttpTargetInput interface {
	pulumi.Input

	ToHttpTargetOutput() HttpTargetOutput
	ToHttpTargetOutputWithContext(context.Context) HttpTargetOutput
}

// Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
type HttpTargetArgs struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Which HTTP method to use for the request.
	HttpMethod HttpTargetHttpMethodPtrInput `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken OAuthTokenPtrInput `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken OidcTokenPtrInput `pulumi:"oidcToken"`
	// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (HttpTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpTarget)(nil)).Elem()
}

func (i HttpTargetArgs) ToHttpTargetOutput() HttpTargetOutput {
	return i.ToHttpTargetOutputWithContext(context.Background())
}

func (i HttpTargetArgs) ToHttpTargetOutputWithContext(ctx context.Context) HttpTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpTargetOutput)
}

func (i HttpTargetArgs) ToHttpTargetPtrOutput() HttpTargetPtrOutput {
	return i.ToHttpTargetPtrOutputWithContext(context.Background())
}

func (i HttpTargetArgs) ToHttpTargetPtrOutputWithContext(ctx context.Context) HttpTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpTargetOutput).ToHttpTargetPtrOutputWithContext(ctx)
}

// HttpTargetPtrInput is an input type that accepts HttpTargetArgs, HttpTargetPtr and HttpTargetPtrOutput values.
// You can construct a concrete instance of `HttpTargetPtrInput` via:
//
//          HttpTargetArgs{...}
//
//  or:
//
//          nil
type HttpTargetPtrInput interface {
	pulumi.Input

	ToHttpTargetPtrOutput() HttpTargetPtrOutput
	ToHttpTargetPtrOutputWithContext(context.Context) HttpTargetPtrOutput
}

type httpTargetPtrType HttpTargetArgs

func HttpTargetPtr(v *HttpTargetArgs) HttpTargetPtrInput {
	return (*httpTargetPtrType)(v)
}

func (*httpTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpTarget)(nil)).Elem()
}

func (i *httpTargetPtrType) ToHttpTargetPtrOutput() HttpTargetPtrOutput {
	return i.ToHttpTargetPtrOutputWithContext(context.Background())
}

func (i *httpTargetPtrType) ToHttpTargetPtrOutputWithContext(ctx context.Context) HttpTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpTargetPtrOutput)
}

// Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
type HttpTargetOutput struct{ *pulumi.OutputState }

func (HttpTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpTarget)(nil)).Elem()
}

func (o HttpTargetOutput) ToHttpTargetOutput() HttpTargetOutput {
	return o
}

func (o HttpTargetOutput) ToHttpTargetOutputWithContext(ctx context.Context) HttpTargetOutput {
	return o
}

func (o HttpTargetOutput) ToHttpTargetPtrOutput() HttpTargetPtrOutput {
	return o.ToHttpTargetPtrOutputWithContext(context.Background())
}

func (o HttpTargetOutput) ToHttpTargetPtrOutputWithContext(ctx context.Context) HttpTargetPtrOutput {
	return o.ApplyT(func(v HttpTarget) *HttpTarget {
		return &v
	}).(HttpTargetPtrOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
func (o HttpTargetOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpTarget) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
func (o HttpTargetOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpTarget) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Which HTTP method to use for the request.
func (o HttpTargetOutput) HttpMethod() HttpTargetHttpMethodPtrOutput {
	return o.ApplyT(func(v HttpTarget) *HttpTargetHttpMethod { return v.HttpMethod }).(HttpTargetHttpMethodPtrOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpTargetOutput) OauthToken() OAuthTokenPtrOutput {
	return o.ApplyT(func(v HttpTarget) *OAuthToken { return v.OauthToken }).(OAuthTokenPtrOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpTargetOutput) OidcToken() OidcTokenPtrOutput {
	return o.ApplyT(func(v HttpTarget) *OidcToken { return v.OidcToken }).(OidcTokenPtrOutput)
}

// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
func (o HttpTargetOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v HttpTarget) string { return v.Uri }).(pulumi.StringOutput)
}

type HttpTargetPtrOutput struct{ *pulumi.OutputState }

func (HttpTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpTarget)(nil)).Elem()
}

func (o HttpTargetPtrOutput) ToHttpTargetPtrOutput() HttpTargetPtrOutput {
	return o
}

func (o HttpTargetPtrOutput) ToHttpTargetPtrOutputWithContext(ctx context.Context) HttpTargetPtrOutput {
	return o
}

func (o HttpTargetPtrOutput) Elem() HttpTargetOutput {
	return o.ApplyT(func(v *HttpTarget) HttpTarget { return *v }).(HttpTargetOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
func (o HttpTargetPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpTarget) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
func (o HttpTargetPtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpTarget) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Which HTTP method to use for the request.
func (o HttpTargetPtrOutput) HttpMethod() HttpTargetHttpMethodPtrOutput {
	return o.ApplyT(func(v *HttpTarget) *HttpTargetHttpMethod {
		if v == nil {
			return nil
		}
		return v.HttpMethod
	}).(HttpTargetHttpMethodPtrOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpTargetPtrOutput) OauthToken() OAuthTokenPtrOutput {
	return o.ApplyT(func(v *HttpTarget) *OAuthToken {
		if v == nil {
			return nil
		}
		return v.OauthToken
	}).(OAuthTokenPtrOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpTargetPtrOutput) OidcToken() OidcTokenPtrOutput {
	return o.ApplyT(func(v *HttpTarget) *OidcToken {
		if v == nil {
			return nil
		}
		return v.OidcToken
	}).(OidcTokenPtrOutput)
}

// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
func (o HttpTargetPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpTarget) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
type HttpTargetResponse struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
	Body string `pulumi:"body"`
	// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
	Headers map[string]string `pulumi:"headers"`
	// Which HTTP method to use for the request.
	HttpMethod string `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken OAuthTokenResponse `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken OidcTokenResponse `pulumi:"oidcToken"`
	// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
	Uri string `pulumi:"uri"`
}

// HttpTargetResponseInput is an input type that accepts HttpTargetResponseArgs and HttpTargetResponseOutput values.
// You can construct a concrete instance of `HttpTargetResponseInput` via:
//
//          HttpTargetResponseArgs{...}
type HttpTargetResponseInput interface {
	pulumi.Input

	ToHttpTargetResponseOutput() HttpTargetResponseOutput
	ToHttpTargetResponseOutputWithContext(context.Context) HttpTargetResponseOutput
}

// Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
type HttpTargetResponseArgs struct {
	// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
	Body pulumi.StringInput `pulumi:"body"`
	// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// Which HTTP method to use for the request.
	HttpMethod pulumi.StringInput `pulumi:"httpMethod"`
	// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
	OauthToken OAuthTokenResponseInput `pulumi:"oauthToken"`
	// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
	OidcToken OidcTokenResponseInput `pulumi:"oidcToken"`
	// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (HttpTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpTargetResponse)(nil)).Elem()
}

func (i HttpTargetResponseArgs) ToHttpTargetResponseOutput() HttpTargetResponseOutput {
	return i.ToHttpTargetResponseOutputWithContext(context.Background())
}

func (i HttpTargetResponseArgs) ToHttpTargetResponseOutputWithContext(ctx context.Context) HttpTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpTargetResponseOutput)
}

func (i HttpTargetResponseArgs) ToHttpTargetResponsePtrOutput() HttpTargetResponsePtrOutput {
	return i.ToHttpTargetResponsePtrOutputWithContext(context.Background())
}

func (i HttpTargetResponseArgs) ToHttpTargetResponsePtrOutputWithContext(ctx context.Context) HttpTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpTargetResponseOutput).ToHttpTargetResponsePtrOutputWithContext(ctx)
}

// HttpTargetResponsePtrInput is an input type that accepts HttpTargetResponseArgs, HttpTargetResponsePtr and HttpTargetResponsePtrOutput values.
// You can construct a concrete instance of `HttpTargetResponsePtrInput` via:
//
//          HttpTargetResponseArgs{...}
//
//  or:
//
//          nil
type HttpTargetResponsePtrInput interface {
	pulumi.Input

	ToHttpTargetResponsePtrOutput() HttpTargetResponsePtrOutput
	ToHttpTargetResponsePtrOutputWithContext(context.Context) HttpTargetResponsePtrOutput
}

type httpTargetResponsePtrType HttpTargetResponseArgs

func HttpTargetResponsePtr(v *HttpTargetResponseArgs) HttpTargetResponsePtrInput {
	return (*httpTargetResponsePtrType)(v)
}

func (*httpTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpTargetResponse)(nil)).Elem()
}

func (i *httpTargetResponsePtrType) ToHttpTargetResponsePtrOutput() HttpTargetResponsePtrOutput {
	return i.ToHttpTargetResponsePtrOutputWithContext(context.Background())
}

func (i *httpTargetResponsePtrType) ToHttpTargetResponsePtrOutputWithContext(ctx context.Context) HttpTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpTargetResponsePtrOutput)
}

// Http target. The job will be pushed to the job handler by means of an HTTP request via an http_method such as HTTP POST, HTTP GET, etc. The job is acknowledged by means of an HTTP response code in the range [200 - 299]. A failure to receive a response constitutes a failed execution. For a redirected request, the response returned by the redirected request is considered.
type HttpTargetResponseOutput struct{ *pulumi.OutputState }

func (HttpTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpTargetResponse)(nil)).Elem()
}

func (o HttpTargetResponseOutput) ToHttpTargetResponseOutput() HttpTargetResponseOutput {
	return o
}

func (o HttpTargetResponseOutput) ToHttpTargetResponseOutputWithContext(ctx context.Context) HttpTargetResponseOutput {
	return o
}

func (o HttpTargetResponseOutput) ToHttpTargetResponsePtrOutput() HttpTargetResponsePtrOutput {
	return o.ToHttpTargetResponsePtrOutputWithContext(context.Background())
}

func (o HttpTargetResponseOutput) ToHttpTargetResponsePtrOutputWithContext(ctx context.Context) HttpTargetResponsePtrOutput {
	return o.ApplyT(func(v HttpTargetResponse) *HttpTargetResponse {
		return &v
	}).(HttpTargetResponsePtrOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
func (o HttpTargetResponseOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v HttpTargetResponse) string { return v.Body }).(pulumi.StringOutput)
}

// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
func (o HttpTargetResponseOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpTargetResponse) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// Which HTTP method to use for the request.
func (o HttpTargetResponseOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v HttpTargetResponse) string { return v.HttpMethod }).(pulumi.StringOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpTargetResponseOutput) OauthToken() OAuthTokenResponseOutput {
	return o.ApplyT(func(v HttpTargetResponse) OAuthTokenResponse { return v.OauthToken }).(OAuthTokenResponseOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpTargetResponseOutput) OidcToken() OidcTokenResponseOutput {
	return o.ApplyT(func(v HttpTargetResponse) OidcTokenResponse { return v.OidcToken }).(OidcTokenResponseOutput)
}

// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
func (o HttpTargetResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v HttpTargetResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type HttpTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (HttpTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpTargetResponse)(nil)).Elem()
}

func (o HttpTargetResponsePtrOutput) ToHttpTargetResponsePtrOutput() HttpTargetResponsePtrOutput {
	return o
}

func (o HttpTargetResponsePtrOutput) ToHttpTargetResponsePtrOutputWithContext(ctx context.Context) HttpTargetResponsePtrOutput {
	return o
}

func (o HttpTargetResponsePtrOutput) Elem() HttpTargetResponseOutput {
	return o.ApplyT(func(v *HttpTargetResponse) HttpTargetResponse { return *v }).(HttpTargetResponseOutput)
}

// HTTP request body. A request body is allowed only if the HTTP method is POST, PUT, or PATCH. It is an error to set body on a job with an incompatible HttpMethod.
func (o HttpTargetResponsePtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Body
	}).(pulumi.StringPtrOutput)
}

// The user can specify HTTP request headers to send with the job's HTTP request. This map contains the header field names and values. Repeated headers are not supported, but a header value can contain commas. These headers represent a subset of the headers that will accompany the job's HTTP request. Some HTTP request headers will be ignored or replaced. A partial list of headers that will be ignored or replaced is below: - Host: This will be computed by Cloud Scheduler and derived from uri. * `Content-Length`: This will be computed by Cloud Scheduler. * `User-Agent`: This will be set to `"Google-Cloud-Scheduler"`. * `X-Google-*`: Google internal use only. * `X-AppEngine-*`: Google internal use only. The total size of headers must be less than 80KB.
func (o HttpTargetResponsePtrOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpTargetResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringMapOutput)
}

// Which HTTP method to use for the request.
func (o HttpTargetResponsePtrOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.HttpMethod
	}).(pulumi.StringPtrOutput)
}

// If specified, an [OAuth token](https://developers.google.com/identity/protocols/OAuth2) will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
func (o HttpTargetResponsePtrOutput) OauthToken() OAuthTokenResponsePtrOutput {
	return o.ApplyT(func(v *HttpTargetResponse) *OAuthTokenResponse {
		if v == nil {
			return nil
		}
		return &v.OauthToken
	}).(OAuthTokenResponsePtrOutput)
}

// If specified, an [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token will be generated and attached as an `Authorization` header in the HTTP request. This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
func (o HttpTargetResponsePtrOutput) OidcToken() OidcTokenResponsePtrOutput {
	return o.ApplyT(func(v *HttpTargetResponse) *OidcTokenResponse {
		if v == nil {
			return nil
		}
		return &v.OidcToken
	}).(OidcTokenResponsePtrOutput)
}

// The full URI path that the request will be sent to. This string must begin with either "http://" or "https://". Some examples of valid values for uri are: `http://acme.com` and `https://acme.com/sales:8080`. Cloud Scheduler will encode some characters for safety and compatibility. The maximum allowed URL length is 2083 characters after encoding.
func (o HttpTargetResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthToken struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope *string `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
}

// OAuthTokenInput is an input type that accepts OAuthTokenArgs and OAuthTokenOutput values.
// You can construct a concrete instance of `OAuthTokenInput` via:
//
//          OAuthTokenArgs{...}
type OAuthTokenInput interface {
	pulumi.Input

	ToOAuthTokenOutput() OAuthTokenOutput
	ToOAuthTokenOutputWithContext(context.Context) OAuthTokenOutput
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenArgs struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
}

func (OAuthTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthToken)(nil)).Elem()
}

func (i OAuthTokenArgs) ToOAuthTokenOutput() OAuthTokenOutput {
	return i.ToOAuthTokenOutputWithContext(context.Background())
}

func (i OAuthTokenArgs) ToOAuthTokenOutputWithContext(ctx context.Context) OAuthTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenOutput)
}

func (i OAuthTokenArgs) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return i.ToOAuthTokenPtrOutputWithContext(context.Background())
}

func (i OAuthTokenArgs) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenOutput).ToOAuthTokenPtrOutputWithContext(ctx)
}

// OAuthTokenPtrInput is an input type that accepts OAuthTokenArgs, OAuthTokenPtr and OAuthTokenPtrOutput values.
// You can construct a concrete instance of `OAuthTokenPtrInput` via:
//
//          OAuthTokenArgs{...}
//
//  or:
//
//          nil
type OAuthTokenPtrInput interface {
	pulumi.Input

	ToOAuthTokenPtrOutput() OAuthTokenPtrOutput
	ToOAuthTokenPtrOutputWithContext(context.Context) OAuthTokenPtrOutput
}

type oauthTokenPtrType OAuthTokenArgs

func OAuthTokenPtr(v *OAuthTokenArgs) OAuthTokenPtrInput {
	return (*oauthTokenPtrType)(v)
}

func (*oauthTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthToken)(nil)).Elem()
}

func (i *oauthTokenPtrType) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return i.ToOAuthTokenPtrOutputWithContext(context.Background())
}

func (i *oauthTokenPtrType) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenPtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenOutput struct{ *pulumi.OutputState }

func (OAuthTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthToken)(nil)).Elem()
}

func (o OAuthTokenOutput) ToOAuthTokenOutput() OAuthTokenOutput {
	return o
}

func (o OAuthTokenOutput) ToOAuthTokenOutputWithContext(ctx context.Context) OAuthTokenOutput {
	return o
}

func (o OAuthTokenOutput) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return o.ToOAuthTokenPtrOutputWithContext(context.Background())
}

func (o OAuthTokenOutput) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return o.ApplyT(func(v OAuthToken) *OAuthToken {
		return &v
	}).(OAuthTokenPtrOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthToken) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthToken) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

type OAuthTokenPtrOutput struct{ *pulumi.OutputState }

func (OAuthTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthToken)(nil)).Elem()
}

func (o OAuthTokenPtrOutput) ToOAuthTokenPtrOutput() OAuthTokenPtrOutput {
	return o
}

func (o OAuthTokenPtrOutput) ToOAuthTokenPtrOutputWithContext(ctx context.Context) OAuthTokenPtrOutput {
	return o
}

func (o OAuthTokenPtrOutput) Elem() OAuthTokenOutput {
	return o.ApplyT(func(v *OAuthToken) OAuthToken { return *v }).(OAuthTokenOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenPtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthToken) *string {
		if v == nil {
			return nil
		}
		return v.Scope
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthToken) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenResponse struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope string `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// OAuthTokenResponseInput is an input type that accepts OAuthTokenResponseArgs and OAuthTokenResponseOutput values.
// You can construct a concrete instance of `OAuthTokenResponseInput` via:
//
//          OAuthTokenResponseArgs{...}
type OAuthTokenResponseInput interface {
	pulumi.Input

	ToOAuthTokenResponseOutput() OAuthTokenResponseOutput
	ToOAuthTokenResponseOutputWithContext(context.Context) OAuthTokenResponseOutput
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenResponseArgs struct {
	// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
	Scope pulumi.StringInput `pulumi:"scope"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
}

func (OAuthTokenResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthTokenResponse)(nil)).Elem()
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponseOutput() OAuthTokenResponseOutput {
	return i.ToOAuthTokenResponseOutputWithContext(context.Background())
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponseOutputWithContext(ctx context.Context) OAuthTokenResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenResponseOutput)
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return i.ToOAuthTokenResponsePtrOutputWithContext(context.Background())
}

func (i OAuthTokenResponseArgs) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenResponseOutput).ToOAuthTokenResponsePtrOutputWithContext(ctx)
}

// OAuthTokenResponsePtrInput is an input type that accepts OAuthTokenResponseArgs, OAuthTokenResponsePtr and OAuthTokenResponsePtrOutput values.
// You can construct a concrete instance of `OAuthTokenResponsePtrInput` via:
//
//          OAuthTokenResponseArgs{...}
//
//  or:
//
//          nil
type OAuthTokenResponsePtrInput interface {
	pulumi.Input

	ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput
	ToOAuthTokenResponsePtrOutputWithContext(context.Context) OAuthTokenResponsePtrOutput
}

type oauthTokenResponsePtrType OAuthTokenResponseArgs

func OAuthTokenResponsePtr(v *OAuthTokenResponseArgs) OAuthTokenResponsePtrInput {
	return (*oauthTokenResponsePtrType)(v)
}

func (*oauthTokenResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthTokenResponse)(nil)).Elem()
}

func (i *oauthTokenResponsePtrType) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return i.ToOAuthTokenResponsePtrOutputWithContext(context.Background())
}

func (i *oauthTokenResponsePtrType) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthTokenResponsePtrOutput)
}

// Contains information needed for generating an [OAuth token](https://developers.google.com/identity/protocols/OAuth2). This type of authorization should generally only be used when calling Google APIs hosted on *.googleapis.com.
type OAuthTokenResponseOutput struct{ *pulumi.OutputState }

func (OAuthTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthTokenResponse)(nil)).Elem()
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponseOutput() OAuthTokenResponseOutput {
	return o
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponseOutputWithContext(ctx context.Context) OAuthTokenResponseOutput {
	return o
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return o.ToOAuthTokenResponsePtrOutputWithContext(context.Background())
}

func (o OAuthTokenResponseOutput) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return o.ApplyT(func(v OAuthTokenResponse) *OAuthTokenResponse {
		return &v
	}).(OAuthTokenResponsePtrOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenResponseOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthTokenResponse) string { return v.Scope }).(pulumi.StringOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthTokenResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

type OAuthTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (OAuthTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthTokenResponse)(nil)).Elem()
}

func (o OAuthTokenResponsePtrOutput) ToOAuthTokenResponsePtrOutput() OAuthTokenResponsePtrOutput {
	return o
}

func (o OAuthTokenResponsePtrOutput) ToOAuthTokenResponsePtrOutputWithContext(ctx context.Context) OAuthTokenResponsePtrOutput {
	return o
}

func (o OAuthTokenResponsePtrOutput) Elem() OAuthTokenResponseOutput {
	return o.ApplyT(func(v *OAuthTokenResponse) OAuthTokenResponse { return *v }).(OAuthTokenResponseOutput)
}

// OAuth scope to be used for generating OAuth access token. If not specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
func (o OAuthTokenResponsePtrOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Scope
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OAuth token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OAuthTokenResponsePtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcToken struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience *string `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
}

// OidcTokenInput is an input type that accepts OidcTokenArgs and OidcTokenOutput values.
// You can construct a concrete instance of `OidcTokenInput` via:
//
//          OidcTokenArgs{...}
type OidcTokenInput interface {
	pulumi.Input

	ToOidcTokenOutput() OidcTokenOutput
	ToOidcTokenOutputWithContext(context.Context) OidcTokenOutput
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenArgs struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
}

func (OidcTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcToken)(nil)).Elem()
}

func (i OidcTokenArgs) ToOidcTokenOutput() OidcTokenOutput {
	return i.ToOidcTokenOutputWithContext(context.Background())
}

func (i OidcTokenArgs) ToOidcTokenOutputWithContext(ctx context.Context) OidcTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenOutput)
}

func (i OidcTokenArgs) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return i.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (i OidcTokenArgs) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenOutput).ToOidcTokenPtrOutputWithContext(ctx)
}

// OidcTokenPtrInput is an input type that accepts OidcTokenArgs, OidcTokenPtr and OidcTokenPtrOutput values.
// You can construct a concrete instance of `OidcTokenPtrInput` via:
//
//          OidcTokenArgs{...}
//
//  or:
//
//          nil
type OidcTokenPtrInput interface {
	pulumi.Input

	ToOidcTokenPtrOutput() OidcTokenPtrOutput
	ToOidcTokenPtrOutputWithContext(context.Context) OidcTokenPtrOutput
}

type oidcTokenPtrType OidcTokenArgs

func OidcTokenPtr(v *OidcTokenArgs) OidcTokenPtrInput {
	return (*oidcTokenPtrType)(v)
}

func (*oidcTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcToken)(nil)).Elem()
}

func (i *oidcTokenPtrType) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return i.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (i *oidcTokenPtrType) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenOutput struct{ *pulumi.OutputState }

func (OidcTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcToken)(nil)).Elem()
}

func (o OidcTokenOutput) ToOidcTokenOutput() OidcTokenOutput {
	return o
}

func (o OidcTokenOutput) ToOidcTokenOutputWithContext(ctx context.Context) OidcTokenOutput {
	return o
}

func (o OidcTokenOutput) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return o.ToOidcTokenPtrOutputWithContext(context.Background())
}

func (o OidcTokenOutput) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return o.ApplyT(func(v OidcToken) *OidcToken {
		return &v
	}).(OidcTokenPtrOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcToken) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OidcToken) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

type OidcTokenPtrOutput struct{ *pulumi.OutputState }

func (OidcTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcToken)(nil)).Elem()
}

func (o OidcTokenPtrOutput) ToOidcTokenPtrOutput() OidcTokenPtrOutput {
	return o
}

func (o OidcTokenPtrOutput) ToOidcTokenPtrOutputWithContext(ctx context.Context) OidcTokenPtrOutput {
	return o
}

func (o OidcTokenPtrOutput) Elem() OidcTokenOutput {
	return o.ApplyT(func(v *OidcToken) OidcToken { return *v }).(OidcTokenOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcToken) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenResponse struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience string `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
}

// OidcTokenResponseInput is an input type that accepts OidcTokenResponseArgs and OidcTokenResponseOutput values.
// You can construct a concrete instance of `OidcTokenResponseInput` via:
//
//          OidcTokenResponseArgs{...}
type OidcTokenResponseInput interface {
	pulumi.Input

	ToOidcTokenResponseOutput() OidcTokenResponseOutput
	ToOidcTokenResponseOutputWithContext(context.Context) OidcTokenResponseOutput
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenResponseArgs struct {
	// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
	Audience pulumi.StringInput `pulumi:"audience"`
	// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
	ServiceAccountEmail pulumi.StringInput `pulumi:"serviceAccountEmail"`
}

func (OidcTokenResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcTokenResponse)(nil)).Elem()
}

func (i OidcTokenResponseArgs) ToOidcTokenResponseOutput() OidcTokenResponseOutput {
	return i.ToOidcTokenResponseOutputWithContext(context.Background())
}

func (i OidcTokenResponseArgs) ToOidcTokenResponseOutputWithContext(ctx context.Context) OidcTokenResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenResponseOutput)
}

func (i OidcTokenResponseArgs) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return i.ToOidcTokenResponsePtrOutputWithContext(context.Background())
}

func (i OidcTokenResponseArgs) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenResponseOutput).ToOidcTokenResponsePtrOutputWithContext(ctx)
}

// OidcTokenResponsePtrInput is an input type that accepts OidcTokenResponseArgs, OidcTokenResponsePtr and OidcTokenResponsePtrOutput values.
// You can construct a concrete instance of `OidcTokenResponsePtrInput` via:
//
//          OidcTokenResponseArgs{...}
//
//  or:
//
//          nil
type OidcTokenResponsePtrInput interface {
	pulumi.Input

	ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput
	ToOidcTokenResponsePtrOutputWithContext(context.Context) OidcTokenResponsePtrOutput
}

type oidcTokenResponsePtrType OidcTokenResponseArgs

func OidcTokenResponsePtr(v *OidcTokenResponseArgs) OidcTokenResponsePtrInput {
	return (*oidcTokenResponsePtrType)(v)
}

func (*oidcTokenResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcTokenResponse)(nil)).Elem()
}

func (i *oidcTokenResponsePtrType) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return i.ToOidcTokenResponsePtrOutputWithContext(context.Background())
}

func (i *oidcTokenResponsePtrType) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OidcTokenResponsePtrOutput)
}

// Contains information needed for generating an [OpenID Connect token](https://developers.google.com/identity/protocols/OpenIDConnect). This type of authorization can be used for many scenarios, including calling Cloud Run, or endpoints where you intend to validate the token yourself.
type OidcTokenResponseOutput struct{ *pulumi.OutputState }

func (OidcTokenResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OidcTokenResponse)(nil)).Elem()
}

func (o OidcTokenResponseOutput) ToOidcTokenResponseOutput() OidcTokenResponseOutput {
	return o
}

func (o OidcTokenResponseOutput) ToOidcTokenResponseOutputWithContext(ctx context.Context) OidcTokenResponseOutput {
	return o
}

func (o OidcTokenResponseOutput) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return o.ToOidcTokenResponsePtrOutputWithContext(context.Background())
}

func (o OidcTokenResponseOutput) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return o.ApplyT(func(v OidcTokenResponse) *OidcTokenResponse {
		return &v
	}).(OidcTokenResponsePtrOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenResponseOutput) Audience() pulumi.StringOutput {
	return o.ApplyT(func(v OidcTokenResponse) string { return v.Audience }).(pulumi.StringOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v OidcTokenResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

type OidcTokenResponsePtrOutput struct{ *pulumi.OutputState }

func (OidcTokenResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OidcTokenResponse)(nil)).Elem()
}

func (o OidcTokenResponsePtrOutput) ToOidcTokenResponsePtrOutput() OidcTokenResponsePtrOutput {
	return o
}

func (o OidcTokenResponsePtrOutput) ToOidcTokenResponsePtrOutputWithContext(ctx context.Context) OidcTokenResponsePtrOutput {
	return o
}

func (o OidcTokenResponsePtrOutput) Elem() OidcTokenResponseOutput {
	return o.ApplyT(func(v *OidcTokenResponse) OidcTokenResponse { return *v }).(OidcTokenResponseOutput)
}

// Audience to be used when generating OIDC token. If not specified, the URI specified in target will be used.
func (o OidcTokenResponsePtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Audience
	}).(pulumi.StringPtrOutput)
}

// [Service account email](https://cloud.google.com/iam/docs/service-accounts) to be used for generating OIDC token. The service account must be within the same project as the job. The caller must have iam.serviceAccounts.actAs permission for the service account.
func (o OidcTokenResponsePtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OidcTokenResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic.
type PubsubTarget struct {
	// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Attributes map[string]string `pulumi:"attributes"`
	// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Data *string `pulumi:"data"`
	// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
	TopicName string `pulumi:"topicName"`
}

// PubsubTargetInput is an input type that accepts PubsubTargetArgs and PubsubTargetOutput values.
// You can construct a concrete instance of `PubsubTargetInput` via:
//
//          PubsubTargetArgs{...}
type PubsubTargetInput interface {
	pulumi.Input

	ToPubsubTargetOutput() PubsubTargetOutput
	ToPubsubTargetOutputWithContext(context.Context) PubsubTargetOutput
}

// Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic.
type PubsubTargetArgs struct {
	// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Data pulumi.StringPtrInput `pulumi:"data"`
	// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (PubsubTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubTarget)(nil)).Elem()
}

func (i PubsubTargetArgs) ToPubsubTargetOutput() PubsubTargetOutput {
	return i.ToPubsubTargetOutputWithContext(context.Background())
}

func (i PubsubTargetArgs) ToPubsubTargetOutputWithContext(ctx context.Context) PubsubTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTargetOutput)
}

func (i PubsubTargetArgs) ToPubsubTargetPtrOutput() PubsubTargetPtrOutput {
	return i.ToPubsubTargetPtrOutputWithContext(context.Background())
}

func (i PubsubTargetArgs) ToPubsubTargetPtrOutputWithContext(ctx context.Context) PubsubTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTargetOutput).ToPubsubTargetPtrOutputWithContext(ctx)
}

// PubsubTargetPtrInput is an input type that accepts PubsubTargetArgs, PubsubTargetPtr and PubsubTargetPtrOutput values.
// You can construct a concrete instance of `PubsubTargetPtrInput` via:
//
//          PubsubTargetArgs{...}
//
//  or:
//
//          nil
type PubsubTargetPtrInput interface {
	pulumi.Input

	ToPubsubTargetPtrOutput() PubsubTargetPtrOutput
	ToPubsubTargetPtrOutputWithContext(context.Context) PubsubTargetPtrOutput
}

type pubsubTargetPtrType PubsubTargetArgs

func PubsubTargetPtr(v *PubsubTargetArgs) PubsubTargetPtrInput {
	return (*pubsubTargetPtrType)(v)
}

func (*pubsubTargetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTarget)(nil)).Elem()
}

func (i *pubsubTargetPtrType) ToPubsubTargetPtrOutput() PubsubTargetPtrOutput {
	return i.ToPubsubTargetPtrOutputWithContext(context.Background())
}

func (i *pubsubTargetPtrType) ToPubsubTargetPtrOutputWithContext(ctx context.Context) PubsubTargetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTargetPtrOutput)
}

// Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic.
type PubsubTargetOutput struct{ *pulumi.OutputState }

func (PubsubTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubTarget)(nil)).Elem()
}

func (o PubsubTargetOutput) ToPubsubTargetOutput() PubsubTargetOutput {
	return o
}

func (o PubsubTargetOutput) ToPubsubTargetOutputWithContext(ctx context.Context) PubsubTargetOutput {
	return o
}

func (o PubsubTargetOutput) ToPubsubTargetPtrOutput() PubsubTargetPtrOutput {
	return o.ToPubsubTargetPtrOutputWithContext(context.Background())
}

func (o PubsubTargetOutput) ToPubsubTargetPtrOutputWithContext(ctx context.Context) PubsubTargetPtrOutput {
	return o.ApplyT(func(v PubsubTarget) *PubsubTarget {
		return &v
	}).(PubsubTargetPtrOutput)
}

// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v PubsubTarget) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubsubTarget) *string { return v.Data }).(pulumi.StringPtrOutput)
}

// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
func (o PubsubTargetOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubTarget) string { return v.TopicName }).(pulumi.StringOutput)
}

type PubsubTargetPtrOutput struct{ *pulumi.OutputState }

func (PubsubTargetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTarget)(nil)).Elem()
}

func (o PubsubTargetPtrOutput) ToPubsubTargetPtrOutput() PubsubTargetPtrOutput {
	return o
}

func (o PubsubTargetPtrOutput) ToPubsubTargetPtrOutputWithContext(ctx context.Context) PubsubTargetPtrOutput {
	return o
}

func (o PubsubTargetPtrOutput) Elem() PubsubTargetOutput {
	return o.ApplyT(func(v *PubsubTarget) PubsubTarget { return *v }).(PubsubTargetOutput)
}

// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetPtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PubsubTarget) map[string]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringMapOutput)
}

// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetPtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubTarget) *string {
		if v == nil {
			return nil
		}
		return v.Data
	}).(pulumi.StringPtrOutput)
}

// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
func (o PubsubTargetPtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubTarget) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

// Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic.
type PubsubTargetResponse struct {
	// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Attributes map[string]string `pulumi:"attributes"`
	// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Data string `pulumi:"data"`
	// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
	TopicName string `pulumi:"topicName"`
}

// PubsubTargetResponseInput is an input type that accepts PubsubTargetResponseArgs and PubsubTargetResponseOutput values.
// You can construct a concrete instance of `PubsubTargetResponseInput` via:
//
//          PubsubTargetResponseArgs{...}
type PubsubTargetResponseInput interface {
	pulumi.Input

	ToPubsubTargetResponseOutput() PubsubTargetResponseOutput
	ToPubsubTargetResponseOutputWithContext(context.Context) PubsubTargetResponseOutput
}

// Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic.
type PubsubTargetResponseArgs struct {
	// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
	Data pulumi.StringInput `pulumi:"data"`
	// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (PubsubTargetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubTargetResponse)(nil)).Elem()
}

func (i PubsubTargetResponseArgs) ToPubsubTargetResponseOutput() PubsubTargetResponseOutput {
	return i.ToPubsubTargetResponseOutputWithContext(context.Background())
}

func (i PubsubTargetResponseArgs) ToPubsubTargetResponseOutputWithContext(ctx context.Context) PubsubTargetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTargetResponseOutput)
}

func (i PubsubTargetResponseArgs) ToPubsubTargetResponsePtrOutput() PubsubTargetResponsePtrOutput {
	return i.ToPubsubTargetResponsePtrOutputWithContext(context.Background())
}

func (i PubsubTargetResponseArgs) ToPubsubTargetResponsePtrOutputWithContext(ctx context.Context) PubsubTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTargetResponseOutput).ToPubsubTargetResponsePtrOutputWithContext(ctx)
}

// PubsubTargetResponsePtrInput is an input type that accepts PubsubTargetResponseArgs, PubsubTargetResponsePtr and PubsubTargetResponsePtrOutput values.
// You can construct a concrete instance of `PubsubTargetResponsePtrInput` via:
//
//          PubsubTargetResponseArgs{...}
//
//  or:
//
//          nil
type PubsubTargetResponsePtrInput interface {
	pulumi.Input

	ToPubsubTargetResponsePtrOutput() PubsubTargetResponsePtrOutput
	ToPubsubTargetResponsePtrOutputWithContext(context.Context) PubsubTargetResponsePtrOutput
}

type pubsubTargetResponsePtrType PubsubTargetResponseArgs

func PubsubTargetResponsePtr(v *PubsubTargetResponseArgs) PubsubTargetResponsePtrInput {
	return (*pubsubTargetResponsePtrType)(v)
}

func (*pubsubTargetResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTargetResponse)(nil)).Elem()
}

func (i *pubsubTargetResponsePtrType) ToPubsubTargetResponsePtrOutput() PubsubTargetResponsePtrOutput {
	return i.ToPubsubTargetResponsePtrOutputWithContext(context.Background())
}

func (i *pubsubTargetResponsePtrType) ToPubsubTargetResponsePtrOutputWithContext(ctx context.Context) PubsubTargetResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubTargetResponsePtrOutput)
}

// Pub/Sub target. The job will be delivered by publishing a message to the given Pub/Sub topic.
type PubsubTargetResponseOutput struct{ *pulumi.OutputState }

func (PubsubTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubTargetResponse)(nil)).Elem()
}

func (o PubsubTargetResponseOutput) ToPubsubTargetResponseOutput() PubsubTargetResponseOutput {
	return o
}

func (o PubsubTargetResponseOutput) ToPubsubTargetResponseOutputWithContext(ctx context.Context) PubsubTargetResponseOutput {
	return o
}

func (o PubsubTargetResponseOutput) ToPubsubTargetResponsePtrOutput() PubsubTargetResponsePtrOutput {
	return o.ToPubsubTargetResponsePtrOutputWithContext(context.Background())
}

func (o PubsubTargetResponseOutput) ToPubsubTargetResponsePtrOutputWithContext(ctx context.Context) PubsubTargetResponsePtrOutput {
	return o.ApplyT(func(v PubsubTargetResponse) *PubsubTargetResponse {
		return &v
	}).(PubsubTargetResponsePtrOutput)
}

// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetResponseOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v PubsubTargetResponse) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetResponseOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubTargetResponse) string { return v.Data }).(pulumi.StringOutput)
}

// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
func (o PubsubTargetResponseOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubTargetResponse) string { return v.TopicName }).(pulumi.StringOutput)
}

type PubsubTargetResponsePtrOutput struct{ *pulumi.OutputState }

func (PubsubTargetResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubTargetResponse)(nil)).Elem()
}

func (o PubsubTargetResponsePtrOutput) ToPubsubTargetResponsePtrOutput() PubsubTargetResponsePtrOutput {
	return o
}

func (o PubsubTargetResponsePtrOutput) ToPubsubTargetResponsePtrOutputWithContext(ctx context.Context) PubsubTargetResponsePtrOutput {
	return o
}

func (o PubsubTargetResponsePtrOutput) Elem() PubsubTargetResponseOutput {
	return o.ApplyT(func(v *PubsubTargetResponse) PubsubTargetResponse { return *v }).(PubsubTargetResponseOutput)
}

// Attributes for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetResponsePtrOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PubsubTargetResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Attributes
	}).(pulumi.StringMapOutput)
}

// The message payload for PubsubMessage. Pubsub message must contain either non-empty data, or at least one attribute.
func (o PubsubTargetResponsePtrOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Data
	}).(pulumi.StringPtrOutput)
}

// The name of the Cloud Pub/Sub topic to which messages will be published when a job is delivered. The topic name must be in the same format as required by PubSub's [PublishRequest.name](https://cloud.google.com/pubsub/docs/reference/rpc/google.pubsub.v1#publishrequest), for example `projects/PROJECT_ID/topics/TOPIC_ID`. The topic must be in the same project as the Cloud Scheduler job.
func (o PubsubTargetResponsePtrOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubTargetResponse) *string {
		if v == nil {
			return nil
		}
		return &v.TopicName
	}).(pulumi.StringPtrOutput)
}

// Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
type RetryConfig struct {
	// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
	MaxBackoffDuration *string `pulumi:"maxBackoffDuration"`
	// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
	MaxDoublings *int `pulumi:"maxDoublings"`
	// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
	MaxRetryDuration *string `pulumi:"maxRetryDuration"`
	// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
	MinBackoffDuration *string `pulumi:"minBackoffDuration"`
	// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
	RetryCount *int `pulumi:"retryCount"`
}

// RetryConfigInput is an input type that accepts RetryConfigArgs and RetryConfigOutput values.
// You can construct a concrete instance of `RetryConfigInput` via:
//
//          RetryConfigArgs{...}
type RetryConfigInput interface {
	pulumi.Input

	ToRetryConfigOutput() RetryConfigOutput
	ToRetryConfigOutputWithContext(context.Context) RetryConfigOutput
}

// Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
type RetryConfigArgs struct {
	// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
	MaxBackoffDuration pulumi.StringPtrInput `pulumi:"maxBackoffDuration"`
	// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
	MaxDoublings pulumi.IntPtrInput `pulumi:"maxDoublings"`
	// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
	MaxRetryDuration pulumi.StringPtrInput `pulumi:"maxRetryDuration"`
	// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
	MinBackoffDuration pulumi.StringPtrInput `pulumi:"minBackoffDuration"`
	// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
	RetryCount pulumi.IntPtrInput `pulumi:"retryCount"`
}

func (RetryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfig)(nil)).Elem()
}

func (i RetryConfigArgs) ToRetryConfigOutput() RetryConfigOutput {
	return i.ToRetryConfigOutputWithContext(context.Background())
}

func (i RetryConfigArgs) ToRetryConfigOutputWithContext(ctx context.Context) RetryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigOutput)
}

func (i RetryConfigArgs) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return i.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (i RetryConfigArgs) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigOutput).ToRetryConfigPtrOutputWithContext(ctx)
}

// RetryConfigPtrInput is an input type that accepts RetryConfigArgs, RetryConfigPtr and RetryConfigPtrOutput values.
// You can construct a concrete instance of `RetryConfigPtrInput` via:
//
//          RetryConfigArgs{...}
//
//  or:
//
//          nil
type RetryConfigPtrInput interface {
	pulumi.Input

	ToRetryConfigPtrOutput() RetryConfigPtrOutput
	ToRetryConfigPtrOutputWithContext(context.Context) RetryConfigPtrOutput
}

type retryConfigPtrType RetryConfigArgs

func RetryConfigPtr(v *RetryConfigArgs) RetryConfigPtrInput {
	return (*retryConfigPtrType)(v)
}

func (*retryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfig)(nil)).Elem()
}

func (i *retryConfigPtrType) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return i.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (i *retryConfigPtrType) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigPtrOutput)
}

// Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
type RetryConfigOutput struct{ *pulumi.OutputState }

func (RetryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfig)(nil)).Elem()
}

func (o RetryConfigOutput) ToRetryConfigOutput() RetryConfigOutput {
	return o
}

func (o RetryConfigOutput) ToRetryConfigOutputWithContext(ctx context.Context) RetryConfigOutput {
	return o
}

func (o RetryConfigOutput) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return o.ToRetryConfigPtrOutputWithContext(context.Background())
}

func (o RetryConfigOutput) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return o.ApplyT(func(v RetryConfig) *RetryConfig {
		return &v
	}).(RetryConfigPtrOutput)
}

// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
func (o RetryConfigOutput) MaxBackoffDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MaxBackoffDuration }).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
func (o RetryConfigOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryConfig) *int { return v.MaxDoublings }).(pulumi.IntPtrOutput)
}

// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
func (o RetryConfigOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MaxRetryDuration }).(pulumi.StringPtrOutput)
}

// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
func (o RetryConfigOutput) MinBackoffDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RetryConfig) *string { return v.MinBackoffDuration }).(pulumi.StringPtrOutput)
}

// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
func (o RetryConfigOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RetryConfig) *int { return v.RetryCount }).(pulumi.IntPtrOutput)
}

type RetryConfigPtrOutput struct{ *pulumi.OutputState }

func (RetryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfig)(nil)).Elem()
}

func (o RetryConfigPtrOutput) ToRetryConfigPtrOutput() RetryConfigPtrOutput {
	return o
}

func (o RetryConfigPtrOutput) ToRetryConfigPtrOutputWithContext(ctx context.Context) RetryConfigPtrOutput {
	return o
}

func (o RetryConfigPtrOutput) Elem() RetryConfigOutput {
	return o.ApplyT(func(v *RetryConfig) RetryConfig { return *v }).(RetryConfigOutput)
}

// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
func (o RetryConfigPtrOutput) MaxBackoffDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxBackoffDuration
	}).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
func (o RetryConfigPtrOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxDoublings
	}).(pulumi.IntPtrOutput)
}

// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
func (o RetryConfigPtrOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxRetryDuration
	}).(pulumi.StringPtrOutput)
}

// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
func (o RetryConfigPtrOutput) MinBackoffDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *string {
		if v == nil {
			return nil
		}
		return v.MinBackoffDuration
	}).(pulumi.StringPtrOutput)
}

// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
func (o RetryConfigPtrOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfig) *int {
		if v == nil {
			return nil
		}
		return v.RetryCount
	}).(pulumi.IntPtrOutput)
}

// Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
type RetryConfigResponse struct {
	// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
	MaxBackoffDuration string `pulumi:"maxBackoffDuration"`
	// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
	MaxDoublings int `pulumi:"maxDoublings"`
	// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
	MaxRetryDuration string `pulumi:"maxRetryDuration"`
	// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
	MinBackoffDuration string `pulumi:"minBackoffDuration"`
	// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
	RetryCount int `pulumi:"retryCount"`
}

// RetryConfigResponseInput is an input type that accepts RetryConfigResponseArgs and RetryConfigResponseOutput values.
// You can construct a concrete instance of `RetryConfigResponseInput` via:
//
//          RetryConfigResponseArgs{...}
type RetryConfigResponseInput interface {
	pulumi.Input

	ToRetryConfigResponseOutput() RetryConfigResponseOutput
	ToRetryConfigResponseOutputWithContext(context.Context) RetryConfigResponseOutput
}

// Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
type RetryConfigResponseArgs struct {
	// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
	MaxBackoffDuration pulumi.StringInput `pulumi:"maxBackoffDuration"`
	// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
	MaxDoublings pulumi.IntInput `pulumi:"maxDoublings"`
	// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
	MaxRetryDuration pulumi.StringInput `pulumi:"maxRetryDuration"`
	// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
	MinBackoffDuration pulumi.StringInput `pulumi:"minBackoffDuration"`
	// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
	RetryCount pulumi.IntInput `pulumi:"retryCount"`
}

func (RetryConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfigResponse)(nil)).Elem()
}

func (i RetryConfigResponseArgs) ToRetryConfigResponseOutput() RetryConfigResponseOutput {
	return i.ToRetryConfigResponseOutputWithContext(context.Background())
}

func (i RetryConfigResponseArgs) ToRetryConfigResponseOutputWithContext(ctx context.Context) RetryConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigResponseOutput)
}

func (i RetryConfigResponseArgs) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return i.ToRetryConfigResponsePtrOutputWithContext(context.Background())
}

func (i RetryConfigResponseArgs) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigResponseOutput).ToRetryConfigResponsePtrOutputWithContext(ctx)
}

// RetryConfigResponsePtrInput is an input type that accepts RetryConfigResponseArgs, RetryConfigResponsePtr and RetryConfigResponsePtrOutput values.
// You can construct a concrete instance of `RetryConfigResponsePtrInput` via:
//
//          RetryConfigResponseArgs{...}
//
//  or:
//
//          nil
type RetryConfigResponsePtrInput interface {
	pulumi.Input

	ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput
	ToRetryConfigResponsePtrOutputWithContext(context.Context) RetryConfigResponsePtrOutput
}

type retryConfigResponsePtrType RetryConfigResponseArgs

func RetryConfigResponsePtr(v *RetryConfigResponseArgs) RetryConfigResponsePtrInput {
	return (*retryConfigResponsePtrType)(v)
}

func (*retryConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfigResponse)(nil)).Elem()
}

func (i *retryConfigResponsePtrType) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return i.ToRetryConfigResponsePtrOutputWithContext(context.Background())
}

func (i *retryConfigResponsePtrType) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetryConfigResponsePtrOutput)
}

// Settings that determine the retry behavior. By default, if a job does not complete successfully (meaning that an acknowledgement is not received from the handler, then it will be retried with exponential backoff according to the settings in RetryConfig.
type RetryConfigResponseOutput struct{ *pulumi.OutputState }

func (RetryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RetryConfigResponse)(nil)).Elem()
}

func (o RetryConfigResponseOutput) ToRetryConfigResponseOutput() RetryConfigResponseOutput {
	return o
}

func (o RetryConfigResponseOutput) ToRetryConfigResponseOutputWithContext(ctx context.Context) RetryConfigResponseOutput {
	return o
}

func (o RetryConfigResponseOutput) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return o.ToRetryConfigResponsePtrOutputWithContext(context.Background())
}

func (o RetryConfigResponseOutput) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return o.ApplyT(func(v RetryConfigResponse) *RetryConfigResponse {
		return &v
	}).(RetryConfigResponsePtrOutput)
}

// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
func (o RetryConfigResponseOutput) MaxBackoffDuration() pulumi.StringOutput {
	return o.ApplyT(func(v RetryConfigResponse) string { return v.MaxBackoffDuration }).(pulumi.StringOutput)
}

// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
func (o RetryConfigResponseOutput) MaxDoublings() pulumi.IntOutput {
	return o.ApplyT(func(v RetryConfigResponse) int { return v.MaxDoublings }).(pulumi.IntOutput)
}

// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
func (o RetryConfigResponseOutput) MaxRetryDuration() pulumi.StringOutput {
	return o.ApplyT(func(v RetryConfigResponse) string { return v.MaxRetryDuration }).(pulumi.StringOutput)
}

// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
func (o RetryConfigResponseOutput) MinBackoffDuration() pulumi.StringOutput {
	return o.ApplyT(func(v RetryConfigResponse) string { return v.MinBackoffDuration }).(pulumi.StringOutput)
}

// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
func (o RetryConfigResponseOutput) RetryCount() pulumi.IntOutput {
	return o.ApplyT(func(v RetryConfigResponse) int { return v.RetryCount }).(pulumi.IntOutput)
}

type RetryConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (RetryConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetryConfigResponse)(nil)).Elem()
}

func (o RetryConfigResponsePtrOutput) ToRetryConfigResponsePtrOutput() RetryConfigResponsePtrOutput {
	return o
}

func (o RetryConfigResponsePtrOutput) ToRetryConfigResponsePtrOutputWithContext(ctx context.Context) RetryConfigResponsePtrOutput {
	return o
}

func (o RetryConfigResponsePtrOutput) Elem() RetryConfigResponseOutput {
	return o.ApplyT(func(v *RetryConfigResponse) RetryConfigResponse { return *v }).(RetryConfigResponseOutput)
}

// The maximum amount of time to wait before retrying a job after it fails. The default value of this field is 1 hour.
func (o RetryConfigResponsePtrOutput) MaxBackoffDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MaxBackoffDuration
	}).(pulumi.StringPtrOutput)
}

// The time between retries will double `max_doublings` times. A job's retry interval starts at min_backoff_duration, then doubles `max_doublings` times, then increases linearly, and finally retries at intervals of max_backoff_duration up to retry_count times. For example, if min_backoff_duration is 10s, max_backoff_duration is 300s, and `max_doublings` is 3, then the a job will first be retried in 10s. The retry interval will double three times, and then increase linearly by 2^3 * 10s. Finally, the job will retry at intervals of max_backoff_duration until the job has been attempted retry_count times. Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s, 300s, .... The default value of this field is 5.
func (o RetryConfigResponsePtrOutput) MaxDoublings() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.MaxDoublings
	}).(pulumi.IntPtrOutput)
}

// The time limit for retrying a failed job, measured from time when an execution was first attempted. If specified with retry_count, the job will be retried until both limits are reached. The default value for max_retry_duration is zero, which means retry duration is unlimited.
func (o RetryConfigResponsePtrOutput) MaxRetryDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MaxRetryDuration
	}).(pulumi.StringPtrOutput)
}

// The minimum amount of time to wait before retrying a job after it fails. The default value of this field is 5 seconds.
func (o RetryConfigResponsePtrOutput) MinBackoffDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.MinBackoffDuration
	}).(pulumi.StringPtrOutput)
}

// The number of attempts that the system will make to run a job using the exponential backoff procedure described by max_doublings. The default value of retry_count is zero. If retry_count is zero, a job attempt will *not* be retried if it fails. Instead the Cloud Scheduler system will wait for the next scheduled execution time. If retry_count is set to a non-zero number then Cloud Scheduler will retry failed attempts, using exponential backoff, retry_count times, or until the next scheduled execution time, whichever comes first. Values greater than 5 and negative values are not allowed.
func (o RetryConfigResponsePtrOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RetryConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.RetryCount
	}).(pulumi.IntPtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]string `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// StatusResponseInput is an input type that accepts StatusResponseArgs and StatusResponseOutput values.
// You can construct a concrete instance of `StatusResponseInput` via:
//
//          StatusResponseArgs{...}
type StatusResponseInput interface {
	pulumi.Input

	ToStatusResponseOutput() StatusResponseOutput
	ToStatusResponseOutputWithContext(context.Context) StatusResponseOutput
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseArgs struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code pulumi.IntInput `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details pulumi.StringMapArrayInput `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message pulumi.StringInput `pulumi:"message"`
}

func (StatusResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (i StatusResponseArgs) ToStatusResponseOutput() StatusResponseOutput {
	return i.ToStatusResponseOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput)
}

func (i StatusResponseArgs) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i StatusResponseArgs) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponseOutput).ToStatusResponsePtrOutputWithContext(ctx)
}

// StatusResponsePtrInput is an input type that accepts StatusResponseArgs, StatusResponsePtr and StatusResponsePtrOutput values.
// You can construct a concrete instance of `StatusResponsePtrInput` via:
//
//          StatusResponseArgs{...}
//
//  or:
//
//          nil
type StatusResponsePtrInput interface {
	pulumi.Input

	ToStatusResponsePtrOutput() StatusResponsePtrOutput
	ToStatusResponsePtrOutputWithContext(context.Context) StatusResponsePtrOutput
}

type statusResponsePtrType StatusResponseArgs

func StatusResponsePtr(v *StatusResponseArgs) StatusResponsePtrInput {
	return (*statusResponsePtrType)(v)
}

func (*statusResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return i.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (i *statusResponsePtrType) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusResponsePtrOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o.ToStatusResponsePtrOutputWithContext(context.Background())
}

func (o StatusResponseOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o.ApplyT(func(v StatusResponse) *StatusResponse {
		return &v
	}).(StatusResponsePtrOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]string { return v.Details }).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponsePtrOutput struct{ *pulumi.OutputState }

func (StatusResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusResponse)(nil)).Elem()
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutput() StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) ToStatusResponsePtrOutputWithContext(ctx context.Context) StatusResponsePtrOutput {
	return o
}

func (o StatusResponsePtrOutput) Elem() StatusResponseOutput {
	return o.ApplyT(func(v *StatusResponse) StatusResponse { return *v }).(StatusResponseOutput)
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponsePtrOutput) Code() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.IntPtrOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponsePtrOutput) Details() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v *StatusResponse) []map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AppEngineHttpTargetOutput{})
	pulumi.RegisterOutputType(AppEngineHttpTargetPtrOutput{})
	pulumi.RegisterOutputType(AppEngineHttpTargetResponseOutput{})
	pulumi.RegisterOutputType(AppEngineHttpTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingPtrOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingResponseOutput{})
	pulumi.RegisterOutputType(AppEngineRoutingResponsePtrOutput{})
	pulumi.RegisterOutputType(HttpTargetOutput{})
	pulumi.RegisterOutputType(HttpTargetPtrOutput{})
	pulumi.RegisterOutputType(HttpTargetResponseOutput{})
	pulumi.RegisterOutputType(HttpTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(OAuthTokenOutput{})
	pulumi.RegisterOutputType(OAuthTokenPtrOutput{})
	pulumi.RegisterOutputType(OAuthTokenResponseOutput{})
	pulumi.RegisterOutputType(OAuthTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(OidcTokenOutput{})
	pulumi.RegisterOutputType(OidcTokenPtrOutput{})
	pulumi.RegisterOutputType(OidcTokenResponseOutput{})
	pulumi.RegisterOutputType(OidcTokenResponsePtrOutput{})
	pulumi.RegisterOutputType(PubsubTargetOutput{})
	pulumi.RegisterOutputType(PubsubTargetPtrOutput{})
	pulumi.RegisterOutputType(PubsubTargetResponseOutput{})
	pulumi.RegisterOutputType(PubsubTargetResponsePtrOutput{})
	pulumi.RegisterOutputType(RetryConfigOutput{})
	pulumi.RegisterOutputType(RetryConfigPtrOutput{})
	pulumi.RegisterOutputType(RetryConfigResponseOutput{})
	pulumi.RegisterOutputType(RetryConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponsePtrOutput{})
}
