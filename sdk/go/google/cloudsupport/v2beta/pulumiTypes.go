// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// An object containing information about the effective user and authenticated principal responsible for an action.
type Actor struct {
	// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
	DisplayName *string `pulumi:"displayName"`
	// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
	Email *string `pulumi:"email"`
}

// ActorInput is an input type that accepts ActorArgs and ActorOutput values.
// You can construct a concrete instance of `ActorInput` via:
//
//	ActorArgs{...}
type ActorInput interface {
	pulumi.Input

	ToActorOutput() ActorOutput
	ToActorOutputWithContext(context.Context) ActorOutput
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorArgs struct {
	// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
	Email pulumi.StringPtrInput `pulumi:"email"`
}

func (ActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Actor)(nil)).Elem()
}

func (i ActorArgs) ToActorOutput() ActorOutput {
	return i.ToActorOutputWithContext(context.Background())
}

func (i ActorArgs) ToActorOutputWithContext(ctx context.Context) ActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorOutput)
}

func (i ActorArgs) ToActorPtrOutput() ActorPtrOutput {
	return i.ToActorPtrOutputWithContext(context.Background())
}

func (i ActorArgs) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorOutput).ToActorPtrOutputWithContext(ctx)
}

// ActorPtrInput is an input type that accepts ActorArgs, ActorPtr and ActorPtrOutput values.
// You can construct a concrete instance of `ActorPtrInput` via:
//
//	        ActorArgs{...}
//
//	or:
//
//	        nil
type ActorPtrInput interface {
	pulumi.Input

	ToActorPtrOutput() ActorPtrOutput
	ToActorPtrOutputWithContext(context.Context) ActorPtrOutput
}

type actorPtrType ActorArgs

func ActorPtr(v *ActorArgs) ActorPtrInput {
	return (*actorPtrType)(v)
}

func (*actorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Actor)(nil)).Elem()
}

func (i *actorPtrType) ToActorPtrOutput() ActorPtrOutput {
	return i.ToActorPtrOutputWithContext(context.Background())
}

func (i *actorPtrType) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorPtrOutput)
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorOutput struct{ *pulumi.OutputState }

func (ActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Actor)(nil)).Elem()
}

func (o ActorOutput) ToActorOutput() ActorOutput {
	return o
}

func (o ActorOutput) ToActorOutputWithContext(ctx context.Context) ActorOutput {
	return o
}

func (o ActorOutput) ToActorPtrOutput() ActorPtrOutput {
	return o.ToActorPtrOutputWithContext(context.Background())
}

func (o ActorOutput) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Actor) *Actor {
		return &v
	}).(ActorPtrOutput)
}

// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Actor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Actor) *string { return v.Email }).(pulumi.StringPtrOutput)
}

type ActorPtrOutput struct{ *pulumi.OutputState }

func (ActorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Actor)(nil)).Elem()
}

func (o ActorPtrOutput) ToActorPtrOutput() ActorPtrOutput {
	return o
}

func (o ActorPtrOutput) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return o
}

func (o ActorPtrOutput) Elem() ActorOutput {
	return o.ApplyT(func(v *Actor) Actor {
		if v != nil {
			return *v
		}
		var ret Actor
		return ret
	}).(ActorOutput)
}

// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Actor) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Actor) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorResponse struct {
	// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
	DisplayName string `pulumi:"displayName"`
	// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
	Email string `pulumi:"email"`
	// Whether the actor is a Google support actor.
	GoogleSupport bool `pulumi:"googleSupport"`
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorResponseOutput struct{ *pulumi.OutputState }

func (ActorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActorResponse)(nil)).Elem()
}

func (o ActorResponseOutput) ToActorResponseOutput() ActorResponseOutput {
	return o
}

func (o ActorResponseOutput) ToActorResponseOutputWithContext(ctx context.Context) ActorResponseOutput {
	return o
}

// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ActorResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ActorResponse) string { return v.Email }).(pulumi.StringOutput)
}

// Whether the actor is a Google support actor.
func (o ActorResponseOutput) GoogleSupport() pulumi.BoolOutput {
	return o.ApplyT(func(v ActorResponse) bool { return v.GoogleSupport }).(pulumi.BoolOutput)
}

// A classification object with a product type and value.
type CaseClassification struct {
	// A display name for the classification. The display name is not static and can change. To uniquely and consistently identify classifications, use the `CaseClassification.id` field.
	DisplayName *string `pulumi:"displayName"`
	// The unique ID for a classification. Must be specified for case creation. To retrieve valid classification IDs for case creation, use `caseClassifications.search`. Classification IDs returned by `caseClassifications.search` are guaranteed to be valid for at least 6 months. If a given classification is deactiveated, it will immediately stop being returned. After 6 months, `case.create` requests using the classification ID will fail.
	Id *string `pulumi:"id"`
}

// CaseClassificationInput is an input type that accepts CaseClassificationArgs and CaseClassificationOutput values.
// You can construct a concrete instance of `CaseClassificationInput` via:
//
//	CaseClassificationArgs{...}
type CaseClassificationInput interface {
	pulumi.Input

	ToCaseClassificationOutput() CaseClassificationOutput
	ToCaseClassificationOutputWithContext(context.Context) CaseClassificationOutput
}

// A classification object with a product type and value.
type CaseClassificationArgs struct {
	// A display name for the classification. The display name is not static and can change. To uniquely and consistently identify classifications, use the `CaseClassification.id` field.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The unique ID for a classification. Must be specified for case creation. To retrieve valid classification IDs for case creation, use `caseClassifications.search`. Classification IDs returned by `caseClassifications.search` are guaranteed to be valid for at least 6 months. If a given classification is deactiveated, it will immediately stop being returned. After 6 months, `case.create` requests using the classification ID will fail.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (CaseClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaseClassification)(nil)).Elem()
}

func (i CaseClassificationArgs) ToCaseClassificationOutput() CaseClassificationOutput {
	return i.ToCaseClassificationOutputWithContext(context.Background())
}

func (i CaseClassificationArgs) ToCaseClassificationOutputWithContext(ctx context.Context) CaseClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationOutput)
}

func (i CaseClassificationArgs) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return i.ToCaseClassificationPtrOutputWithContext(context.Background())
}

func (i CaseClassificationArgs) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationOutput).ToCaseClassificationPtrOutputWithContext(ctx)
}

// CaseClassificationPtrInput is an input type that accepts CaseClassificationArgs, CaseClassificationPtr and CaseClassificationPtrOutput values.
// You can construct a concrete instance of `CaseClassificationPtrInput` via:
//
//	        CaseClassificationArgs{...}
//
//	or:
//
//	        nil
type CaseClassificationPtrInput interface {
	pulumi.Input

	ToCaseClassificationPtrOutput() CaseClassificationPtrOutput
	ToCaseClassificationPtrOutputWithContext(context.Context) CaseClassificationPtrOutput
}

type caseClassificationPtrType CaseClassificationArgs

func CaseClassificationPtr(v *CaseClassificationArgs) CaseClassificationPtrInput {
	return (*caseClassificationPtrType)(v)
}

func (*caseClassificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaseClassification)(nil)).Elem()
}

func (i *caseClassificationPtrType) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return i.ToCaseClassificationPtrOutputWithContext(context.Background())
}

func (i *caseClassificationPtrType) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationPtrOutput)
}

// A classification object with a product type and value.
type CaseClassificationOutput struct{ *pulumi.OutputState }

func (CaseClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaseClassification)(nil)).Elem()
}

func (o CaseClassificationOutput) ToCaseClassificationOutput() CaseClassificationOutput {
	return o
}

func (o CaseClassificationOutput) ToCaseClassificationOutputWithContext(ctx context.Context) CaseClassificationOutput {
	return o
}

func (o CaseClassificationOutput) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return o.ToCaseClassificationPtrOutputWithContext(context.Background())
}

func (o CaseClassificationOutput) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CaseClassification) *CaseClassification {
		return &v
	}).(CaseClassificationPtrOutput)
}

// A display name for the classification. The display name is not static and can change. To uniquely and consistently identify classifications, use the `CaseClassification.id` field.
func (o CaseClassificationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaseClassification) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The unique ID for a classification. Must be specified for case creation. To retrieve valid classification IDs for case creation, use `caseClassifications.search`. Classification IDs returned by `caseClassifications.search` are guaranteed to be valid for at least 6 months. If a given classification is deactiveated, it will immediately stop being returned. After 6 months, `case.create` requests using the classification ID will fail.
func (o CaseClassificationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaseClassification) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type CaseClassificationPtrOutput struct{ *pulumi.OutputState }

func (CaseClassificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaseClassification)(nil)).Elem()
}

func (o CaseClassificationPtrOutput) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return o
}

func (o CaseClassificationPtrOutput) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return o
}

func (o CaseClassificationPtrOutput) Elem() CaseClassificationOutput {
	return o.ApplyT(func(v *CaseClassification) CaseClassification {
		if v != nil {
			return *v
		}
		var ret CaseClassification
		return ret
	}).(CaseClassificationOutput)
}

// A display name for the classification. The display name is not static and can change. To uniquely and consistently identify classifications, use the `CaseClassification.id` field.
func (o CaseClassificationPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaseClassification) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique ID for a classification. Must be specified for case creation. To retrieve valid classification IDs for case creation, use `caseClassifications.search`. Classification IDs returned by `caseClassifications.search` are guaranteed to be valid for at least 6 months. If a given classification is deactiveated, it will immediately stop being returned. After 6 months, `case.create` requests using the classification ID will fail.
func (o CaseClassificationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaseClassification) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A classification object with a product type and value.
type CaseClassificationResponse struct {
	// A display name for the classification. The display name is not static and can change. To uniquely and consistently identify classifications, use the `CaseClassification.id` field.
	DisplayName string `pulumi:"displayName"`
}

// A classification object with a product type and value.
type CaseClassificationResponseOutput struct{ *pulumi.OutputState }

func (CaseClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaseClassificationResponse)(nil)).Elem()
}

func (o CaseClassificationResponseOutput) ToCaseClassificationResponseOutput() CaseClassificationResponseOutput {
	return o
}

func (o CaseClassificationResponseOutput) ToCaseClassificationResponseOutputWithContext(ctx context.Context) CaseClassificationResponseOutput {
	return o
}

// A display name for the classification. The display name is not static and can change. To uniquely and consistently identify classifications, use the `CaseClassification.id` field.
func (o CaseClassificationResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v CaseClassificationResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActorInput)(nil)).Elem(), ActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActorPtrInput)(nil)).Elem(), ActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaseClassificationInput)(nil)).Elem(), CaseClassificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaseClassificationPtrInput)(nil)).Elem(), CaseClassificationArgs{})
	pulumi.RegisterOutputType(ActorOutput{})
	pulumi.RegisterOutputType(ActorPtrOutput{})
	pulumi.RegisterOutputType(ActorResponseOutput{})
	pulumi.RegisterOutputType(CaseClassificationOutput{})
	pulumi.RegisterOutputType(CaseClassificationPtrOutput{})
	pulumi.RegisterOutputType(CaseClassificationResponseOutput{})
}
