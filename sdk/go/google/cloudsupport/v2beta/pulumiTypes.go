// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// An object containing information about the effective user and authenticated principal responsible for an action.
type Actor struct {
	// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
	DisplayName *string `pulumi:"displayName"`
	// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
	Email *string `pulumi:"email"`
}

// ActorInput is an input type that accepts ActorArgs and ActorOutput values.
// You can construct a concrete instance of `ActorInput` via:
//
//          ActorArgs{...}
type ActorInput interface {
	pulumi.Input

	ToActorOutput() ActorOutput
	ToActorOutputWithContext(context.Context) ActorOutput
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorArgs struct {
	// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
	Email pulumi.StringPtrInput `pulumi:"email"`
}

func (ActorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Actor)(nil)).Elem()
}

func (i ActorArgs) ToActorOutput() ActorOutput {
	return i.ToActorOutputWithContext(context.Background())
}

func (i ActorArgs) ToActorOutputWithContext(ctx context.Context) ActorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorOutput)
}

func (i ActorArgs) ToActorPtrOutput() ActorPtrOutput {
	return i.ToActorPtrOutputWithContext(context.Background())
}

func (i ActorArgs) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorOutput).ToActorPtrOutputWithContext(ctx)
}

// ActorPtrInput is an input type that accepts ActorArgs, ActorPtr and ActorPtrOutput values.
// You can construct a concrete instance of `ActorPtrInput` via:
//
//          ActorArgs{...}
//
//  or:
//
//          nil
type ActorPtrInput interface {
	pulumi.Input

	ToActorPtrOutput() ActorPtrOutput
	ToActorPtrOutputWithContext(context.Context) ActorPtrOutput
}

type actorPtrType ActorArgs

func ActorPtr(v *ActorArgs) ActorPtrInput {
	return (*actorPtrType)(v)
}

func (*actorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Actor)(nil)).Elem()
}

func (i *actorPtrType) ToActorPtrOutput() ActorPtrOutput {
	return i.ToActorPtrOutputWithContext(context.Background())
}

func (i *actorPtrType) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorPtrOutput)
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorOutput struct{ *pulumi.OutputState }

func (ActorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Actor)(nil)).Elem()
}

func (o ActorOutput) ToActorOutput() ActorOutput {
	return o
}

func (o ActorOutput) ToActorOutputWithContext(ctx context.Context) ActorOutput {
	return o
}

func (o ActorOutput) ToActorPtrOutput() ActorPtrOutput {
	return o.ToActorPtrOutputWithContext(context.Background())
}

func (o ActorOutput) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Actor) *Actor {
		return &v
	}).(ActorPtrOutput)
}

// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Actor) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Actor) *string { return v.Email }).(pulumi.StringPtrOutput)
}

type ActorPtrOutput struct{ *pulumi.OutputState }

func (ActorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Actor)(nil)).Elem()
}

func (o ActorPtrOutput) ToActorPtrOutput() ActorPtrOutput {
	return o
}

func (o ActorPtrOutput) ToActorPtrOutputWithContext(ctx context.Context) ActorPtrOutput {
	return o
}

func (o ActorPtrOutput) Elem() ActorOutput {
	return o.ApplyT(func(v *Actor) Actor {
		if v != nil {
			return *v
		}
		var ret Actor
		return ret
	}).(ActorOutput)
}

// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Actor) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorPtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Actor) *string {
		if v == nil {
			return nil
		}
		return v.Email
	}).(pulumi.StringPtrOutput)
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorResponse struct {
	// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
	DisplayName string `pulumi:"displayName"`
	// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
	Email string `pulumi:"email"`
	// Whether the actor is a Google support actor.
	GoogleSupport bool `pulumi:"googleSupport"`
	// An ID representing the user that was authenticated when the corresponding action was taken. This will be an email address, if one is available, or some other unique ID. See https://cloud.google.com/docs/authentication for more information on types of authentication.
	PrincipalId string `pulumi:"principalId"`
}

// ActorResponseInput is an input type that accepts ActorResponseArgs and ActorResponseOutput values.
// You can construct a concrete instance of `ActorResponseInput` via:
//
//          ActorResponseArgs{...}
type ActorResponseInput interface {
	pulumi.Input

	ToActorResponseOutput() ActorResponseOutput
	ToActorResponseOutputWithContext(context.Context) ActorResponseOutput
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorResponseArgs struct {
	// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
	Email pulumi.StringInput `pulumi:"email"`
	// Whether the actor is a Google support actor.
	GoogleSupport pulumi.BoolInput `pulumi:"googleSupport"`
	// An ID representing the user that was authenticated when the corresponding action was taken. This will be an email address, if one is available, or some other unique ID. See https://cloud.google.com/docs/authentication for more information on types of authentication.
	PrincipalId pulumi.StringInput `pulumi:"principalId"`
}

func (ActorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ActorResponse)(nil)).Elem()
}

func (i ActorResponseArgs) ToActorResponseOutput() ActorResponseOutput {
	return i.ToActorResponseOutputWithContext(context.Background())
}

func (i ActorResponseArgs) ToActorResponseOutputWithContext(ctx context.Context) ActorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorResponseOutput)
}

func (i ActorResponseArgs) ToActorResponsePtrOutput() ActorResponsePtrOutput {
	return i.ToActorResponsePtrOutputWithContext(context.Background())
}

func (i ActorResponseArgs) ToActorResponsePtrOutputWithContext(ctx context.Context) ActorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorResponseOutput).ToActorResponsePtrOutputWithContext(ctx)
}

// ActorResponsePtrInput is an input type that accepts ActorResponseArgs, ActorResponsePtr and ActorResponsePtrOutput values.
// You can construct a concrete instance of `ActorResponsePtrInput` via:
//
//          ActorResponseArgs{...}
//
//  or:
//
//          nil
type ActorResponsePtrInput interface {
	pulumi.Input

	ToActorResponsePtrOutput() ActorResponsePtrOutput
	ToActorResponsePtrOutputWithContext(context.Context) ActorResponsePtrOutput
}

type actorResponsePtrType ActorResponseArgs

func ActorResponsePtr(v *ActorResponseArgs) ActorResponsePtrInput {
	return (*actorResponsePtrType)(v)
}

func (*actorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ActorResponse)(nil)).Elem()
}

func (i *actorResponsePtrType) ToActorResponsePtrOutput() ActorResponsePtrOutput {
	return i.ToActorResponsePtrOutputWithContext(context.Background())
}

func (i *actorResponsePtrType) ToActorResponsePtrOutputWithContext(ctx context.Context) ActorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActorResponsePtrOutput)
}

// An object containing information about the effective user and authenticated principal responsible for an action.
type ActorResponseOutput struct{ *pulumi.OutputState }

func (ActorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ActorResponse)(nil)).Elem()
}

func (o ActorResponseOutput) ToActorResponseOutput() ActorResponseOutput {
	return o
}

func (o ActorResponseOutput) ToActorResponseOutputWithContext(ctx context.Context) ActorResponseOutput {
	return o
}

func (o ActorResponseOutput) ToActorResponsePtrOutput() ActorResponsePtrOutput {
	return o.ToActorResponsePtrOutputWithContext(context.Background())
}

func (o ActorResponseOutput) ToActorResponsePtrOutputWithContext(ctx context.Context) ActorResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ActorResponse) *ActorResponse {
		return &v
	}).(ActorResponsePtrOutput)
}

// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ActorResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorResponseOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ActorResponse) string { return v.Email }).(pulumi.StringOutput)
}

// Whether the actor is a Google support actor.
func (o ActorResponseOutput) GoogleSupport() pulumi.BoolOutput {
	return o.ApplyT(func(v ActorResponse) bool { return v.GoogleSupport }).(pulumi.BoolOutput)
}

// An ID representing the user that was authenticated when the corresponding action was taken. This will be an email address, if one is available, or some other unique ID. See https://cloud.google.com/docs/authentication for more information on types of authentication.
func (o ActorResponseOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v ActorResponse) string { return v.PrincipalId }).(pulumi.StringOutput)
}

type ActorResponsePtrOutput struct{ *pulumi.OutputState }

func (ActorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActorResponse)(nil)).Elem()
}

func (o ActorResponsePtrOutput) ToActorResponsePtrOutput() ActorResponsePtrOutput {
	return o
}

func (o ActorResponsePtrOutput) ToActorResponsePtrOutputWithContext(ctx context.Context) ActorResponsePtrOutput {
	return o
}

func (o ActorResponsePtrOutput) Elem() ActorResponseOutput {
	return o.ApplyT(func(v *ActorResponse) ActorResponse {
		if v != nil {
			return *v
		}
		var ret ActorResponse
		return ret
	}).(ActorResponseOutput)
}

// The name to display for the actor. If not provided, it is inferred from credentials supplied during case creation. When an email is provided, a display name must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The email address of the actor. If not provided, it is inferred from credentials supplied during case creation. If the authenticated principal does not have an email address, one must be provided. When a name is provided, an email must also be provided. This will be obfuscated if the user is a Google Support agent.
func (o ActorResponsePtrOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Email
	}).(pulumi.StringPtrOutput)
}

// Whether the actor is a Google support actor.
func (o ActorResponsePtrOutput) GoogleSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ActorResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.GoogleSupport
	}).(pulumi.BoolPtrOutput)
}

// An ID representing the user that was authenticated when the corresponding action was taken. This will be an email address, if one is available, or some other unique ID. See https://cloud.google.com/docs/authentication for more information on types of authentication.
func (o ActorResponsePtrOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ActorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrincipalId
	}).(pulumi.StringPtrOutput)
}

// A classification object with a product type and value.
type CaseClassification struct {
	// The display name of the classification.
	DisplayName *string `pulumi:"displayName"`
	// The unique ID for a classification. Must be specified for case creation.
	Id *string `pulumi:"id"`
}

// CaseClassificationInput is an input type that accepts CaseClassificationArgs and CaseClassificationOutput values.
// You can construct a concrete instance of `CaseClassificationInput` via:
//
//          CaseClassificationArgs{...}
type CaseClassificationInput interface {
	pulumi.Input

	ToCaseClassificationOutput() CaseClassificationOutput
	ToCaseClassificationOutputWithContext(context.Context) CaseClassificationOutput
}

// A classification object with a product type and value.
type CaseClassificationArgs struct {
	// The display name of the classification.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The unique ID for a classification. Must be specified for case creation.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (CaseClassificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaseClassification)(nil)).Elem()
}

func (i CaseClassificationArgs) ToCaseClassificationOutput() CaseClassificationOutput {
	return i.ToCaseClassificationOutputWithContext(context.Background())
}

func (i CaseClassificationArgs) ToCaseClassificationOutputWithContext(ctx context.Context) CaseClassificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationOutput)
}

func (i CaseClassificationArgs) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return i.ToCaseClassificationPtrOutputWithContext(context.Background())
}

func (i CaseClassificationArgs) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationOutput).ToCaseClassificationPtrOutputWithContext(ctx)
}

// CaseClassificationPtrInput is an input type that accepts CaseClassificationArgs, CaseClassificationPtr and CaseClassificationPtrOutput values.
// You can construct a concrete instance of `CaseClassificationPtrInput` via:
//
//          CaseClassificationArgs{...}
//
//  or:
//
//          nil
type CaseClassificationPtrInput interface {
	pulumi.Input

	ToCaseClassificationPtrOutput() CaseClassificationPtrOutput
	ToCaseClassificationPtrOutputWithContext(context.Context) CaseClassificationPtrOutput
}

type caseClassificationPtrType CaseClassificationArgs

func CaseClassificationPtr(v *CaseClassificationArgs) CaseClassificationPtrInput {
	return (*caseClassificationPtrType)(v)
}

func (*caseClassificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaseClassification)(nil)).Elem()
}

func (i *caseClassificationPtrType) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return i.ToCaseClassificationPtrOutputWithContext(context.Background())
}

func (i *caseClassificationPtrType) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationPtrOutput)
}

// A classification object with a product type and value.
type CaseClassificationOutput struct{ *pulumi.OutputState }

func (CaseClassificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaseClassification)(nil)).Elem()
}

func (o CaseClassificationOutput) ToCaseClassificationOutput() CaseClassificationOutput {
	return o
}

func (o CaseClassificationOutput) ToCaseClassificationOutputWithContext(ctx context.Context) CaseClassificationOutput {
	return o
}

func (o CaseClassificationOutput) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return o.ToCaseClassificationPtrOutputWithContext(context.Background())
}

func (o CaseClassificationOutput) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CaseClassification) *CaseClassification {
		return &v
	}).(CaseClassificationPtrOutput)
}

// The display name of the classification.
func (o CaseClassificationOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaseClassification) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The unique ID for a classification. Must be specified for case creation.
func (o CaseClassificationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CaseClassification) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type CaseClassificationPtrOutput struct{ *pulumi.OutputState }

func (CaseClassificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaseClassification)(nil)).Elem()
}

func (o CaseClassificationPtrOutput) ToCaseClassificationPtrOutput() CaseClassificationPtrOutput {
	return o
}

func (o CaseClassificationPtrOutput) ToCaseClassificationPtrOutputWithContext(ctx context.Context) CaseClassificationPtrOutput {
	return o
}

func (o CaseClassificationPtrOutput) Elem() CaseClassificationOutput {
	return o.ApplyT(func(v *CaseClassification) CaseClassification {
		if v != nil {
			return *v
		}
		var ret CaseClassification
		return ret
	}).(CaseClassificationOutput)
}

// The display name of the classification.
func (o CaseClassificationPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaseClassification) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The unique ID for a classification. Must be specified for case creation.
func (o CaseClassificationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaseClassification) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// A classification object with a product type and value.
type CaseClassificationResponse struct {
	// The display name of the classification.
	DisplayName string `pulumi:"displayName"`
}

// CaseClassificationResponseInput is an input type that accepts CaseClassificationResponseArgs and CaseClassificationResponseOutput values.
// You can construct a concrete instance of `CaseClassificationResponseInput` via:
//
//          CaseClassificationResponseArgs{...}
type CaseClassificationResponseInput interface {
	pulumi.Input

	ToCaseClassificationResponseOutput() CaseClassificationResponseOutput
	ToCaseClassificationResponseOutputWithContext(context.Context) CaseClassificationResponseOutput
}

// A classification object with a product type and value.
type CaseClassificationResponseArgs struct {
	// The display name of the classification.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
}

func (CaseClassificationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CaseClassificationResponse)(nil)).Elem()
}

func (i CaseClassificationResponseArgs) ToCaseClassificationResponseOutput() CaseClassificationResponseOutput {
	return i.ToCaseClassificationResponseOutputWithContext(context.Background())
}

func (i CaseClassificationResponseArgs) ToCaseClassificationResponseOutputWithContext(ctx context.Context) CaseClassificationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationResponseOutput)
}

func (i CaseClassificationResponseArgs) ToCaseClassificationResponsePtrOutput() CaseClassificationResponsePtrOutput {
	return i.ToCaseClassificationResponsePtrOutputWithContext(context.Background())
}

func (i CaseClassificationResponseArgs) ToCaseClassificationResponsePtrOutputWithContext(ctx context.Context) CaseClassificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationResponseOutput).ToCaseClassificationResponsePtrOutputWithContext(ctx)
}

// CaseClassificationResponsePtrInput is an input type that accepts CaseClassificationResponseArgs, CaseClassificationResponsePtr and CaseClassificationResponsePtrOutput values.
// You can construct a concrete instance of `CaseClassificationResponsePtrInput` via:
//
//          CaseClassificationResponseArgs{...}
//
//  or:
//
//          nil
type CaseClassificationResponsePtrInput interface {
	pulumi.Input

	ToCaseClassificationResponsePtrOutput() CaseClassificationResponsePtrOutput
	ToCaseClassificationResponsePtrOutputWithContext(context.Context) CaseClassificationResponsePtrOutput
}

type caseClassificationResponsePtrType CaseClassificationResponseArgs

func CaseClassificationResponsePtr(v *CaseClassificationResponseArgs) CaseClassificationResponsePtrInput {
	return (*caseClassificationResponsePtrType)(v)
}

func (*caseClassificationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CaseClassificationResponse)(nil)).Elem()
}

func (i *caseClassificationResponsePtrType) ToCaseClassificationResponsePtrOutput() CaseClassificationResponsePtrOutput {
	return i.ToCaseClassificationResponsePtrOutputWithContext(context.Background())
}

func (i *caseClassificationResponsePtrType) ToCaseClassificationResponsePtrOutputWithContext(ctx context.Context) CaseClassificationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaseClassificationResponsePtrOutput)
}

// A classification object with a product type and value.
type CaseClassificationResponseOutput struct{ *pulumi.OutputState }

func (CaseClassificationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CaseClassificationResponse)(nil)).Elem()
}

func (o CaseClassificationResponseOutput) ToCaseClassificationResponseOutput() CaseClassificationResponseOutput {
	return o
}

func (o CaseClassificationResponseOutput) ToCaseClassificationResponseOutputWithContext(ctx context.Context) CaseClassificationResponseOutput {
	return o
}

func (o CaseClassificationResponseOutput) ToCaseClassificationResponsePtrOutput() CaseClassificationResponsePtrOutput {
	return o.ToCaseClassificationResponsePtrOutputWithContext(context.Background())
}

func (o CaseClassificationResponseOutput) ToCaseClassificationResponsePtrOutputWithContext(ctx context.Context) CaseClassificationResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CaseClassificationResponse) *CaseClassificationResponse {
		return &v
	}).(CaseClassificationResponsePtrOutput)
}

// The display name of the classification.
func (o CaseClassificationResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v CaseClassificationResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

type CaseClassificationResponsePtrOutput struct{ *pulumi.OutputState }

func (CaseClassificationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaseClassificationResponse)(nil)).Elem()
}

func (o CaseClassificationResponsePtrOutput) ToCaseClassificationResponsePtrOutput() CaseClassificationResponsePtrOutput {
	return o
}

func (o CaseClassificationResponsePtrOutput) ToCaseClassificationResponsePtrOutputWithContext(ctx context.Context) CaseClassificationResponsePtrOutput {
	return o
}

func (o CaseClassificationResponsePtrOutput) Elem() CaseClassificationResponseOutput {
	return o.ApplyT(func(v *CaseClassificationResponse) CaseClassificationResponse {
		if v != nil {
			return *v
		}
		var ret CaseClassificationResponse
		return ret
	}).(CaseClassificationResponseOutput)
}

// The display name of the classification.
func (o CaseClassificationResponsePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaseClassificationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DisplayName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActorInput)(nil)).Elem(), ActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActorPtrInput)(nil)).Elem(), ActorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActorResponseInput)(nil)).Elem(), ActorResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActorResponsePtrInput)(nil)).Elem(), ActorResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaseClassificationInput)(nil)).Elem(), CaseClassificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaseClassificationPtrInput)(nil)).Elem(), CaseClassificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaseClassificationResponseInput)(nil)).Elem(), CaseClassificationResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaseClassificationResponsePtrInput)(nil)).Elem(), CaseClassificationResponseArgs{})
	pulumi.RegisterOutputType(ActorOutput{})
	pulumi.RegisterOutputType(ActorPtrOutput{})
	pulumi.RegisterOutputType(ActorResponseOutput{})
	pulumi.RegisterOutputType(ActorResponsePtrOutput{})
	pulumi.RegisterOutputType(CaseClassificationOutput{})
	pulumi.RegisterOutputType(CaseClassificationPtrOutput{})
	pulumi.RegisterOutputType(CaseClassificationResponseOutput{})
	pulumi.RegisterOutputType(CaseClassificationResponsePtrOutput{})
}
