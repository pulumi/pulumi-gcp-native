// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieve the specified case.
func LookupCase(ctx *pulumi.Context, args *LookupCaseArgs, opts ...pulumi.InvokeOption) (*LookupCaseResult, error) {
	var rv LookupCaseResult
	err := ctx.Invoke("google-native:cloudsupport/v2beta:getCase", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCaseArgs struct {
	CaseId    string `pulumi:"caseId"`
	V2betaId1 string `pulumi:"v2betaId1"`
	V2betumId string `pulumi:"v2betumId"`
}

type LookupCaseResult struct {
	// The issue classification applicable to this case.
	Classification CaseClassificationResponse `pulumi:"classification"`
	// The time this case was created.
	CreateTime string `pulumi:"createTime"`
	// The user who created the case. Note: The name and email will be obfuscated if the case was created by Google Support.
	Creator ActorResponse `pulumi:"creator"`
	// A broad description of the issue.
	Description string `pulumi:"description"`
	// The short summary of the issue reported in this case.
	DisplayName string `pulumi:"displayName"`
	// Whether the case is currently escalated.
	Escalated bool `pulumi:"escalated"`
	// The resource name for the case.
	Name string `pulumi:"name"`
	// The priority of this case. If this is set, do not set severity.
	Priority string `pulumi:"priority"`
	// The current status of the support case.
	State string `pulumi:"state"`
	// The email addresses to receive updates on this case.
	SubscriberEmailAddresses []string `pulumi:"subscriberEmailAddresses"`
	// Whether this case was created for internal API testing and should not be acted on by the support team.
	TestCase bool `pulumi:"testCase"`
	// The timezone of the user who created the support case. It should be in a format IANA recognizes: https://www.iana.org/time-zones. There is no additional validation done by the API.
	TimeZone string `pulumi:"timeZone"`
	// The time this case was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupCaseOutput(ctx *pulumi.Context, args LookupCaseOutputArgs, opts ...pulumi.InvokeOption) LookupCaseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCaseResult, error) {
			args := v.(LookupCaseArgs)
			r, err := LookupCase(ctx, &args, opts...)
			return *r, err
		}).(LookupCaseResultOutput)
}

type LookupCaseOutputArgs struct {
	CaseId    pulumi.StringInput `pulumi:"caseId"`
	V2betaId1 pulumi.StringInput `pulumi:"v2betaId1"`
	V2betumId pulumi.StringInput `pulumi:"v2betumId"`
}

func (LookupCaseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaseArgs)(nil)).Elem()
}

type LookupCaseResultOutput struct{ *pulumi.OutputState }

func (LookupCaseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCaseResult)(nil)).Elem()
}

func (o LookupCaseResultOutput) ToLookupCaseResultOutput() LookupCaseResultOutput {
	return o
}

func (o LookupCaseResultOutput) ToLookupCaseResultOutputWithContext(ctx context.Context) LookupCaseResultOutput {
	return o
}

// The issue classification applicable to this case.
func (o LookupCaseResultOutput) Classification() CaseClassificationResponseOutput {
	return o.ApplyT(func(v LookupCaseResult) CaseClassificationResponse { return v.Classification }).(CaseClassificationResponseOutput)
}

// The time this case was created.
func (o LookupCaseResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The user who created the case. Note: The name and email will be obfuscated if the case was created by Google Support.
func (o LookupCaseResultOutput) Creator() ActorResponseOutput {
	return o.ApplyT(func(v LookupCaseResult) ActorResponse { return v.Creator }).(ActorResponseOutput)
}

// A broad description of the issue.
func (o LookupCaseResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.Description }).(pulumi.StringOutput)
}

// The short summary of the issue reported in this case.
func (o LookupCaseResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether the case is currently escalated.
func (o LookupCaseResultOutput) Escalated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCaseResult) bool { return v.Escalated }).(pulumi.BoolOutput)
}

// The resource name for the case.
func (o LookupCaseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.Name }).(pulumi.StringOutput)
}

// The priority of this case. If this is set, do not set severity.
func (o LookupCaseResultOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.Priority }).(pulumi.StringOutput)
}

// The current status of the support case.
func (o LookupCaseResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.State }).(pulumi.StringOutput)
}

// The email addresses to receive updates on this case.
func (o LookupCaseResultOutput) SubscriberEmailAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCaseResult) []string { return v.SubscriberEmailAddresses }).(pulumi.StringArrayOutput)
}

// Whether this case was created for internal API testing and should not be acted on by the support team.
func (o LookupCaseResultOutput) TestCase() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCaseResult) bool { return v.TestCase }).(pulumi.BoolOutput)
}

// The timezone of the user who created the support case. It should be in a format IANA recognizes: https://www.iana.org/time-zones. There is no additional validation done by the API.
func (o LookupCaseResultOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The time this case was last updated.
func (o LookupCaseResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCaseResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCaseResultOutput{})
}
