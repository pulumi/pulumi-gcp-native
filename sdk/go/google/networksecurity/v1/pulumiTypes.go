// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specification of a TLS certificate provider instance. Workloads may have one or more CertificateProvider instances (plugins) and one of them is enabled and configured by specifying this message. Workloads use the values from this message to locate and load the CertificateProvider instance configuration.
type CertificateProviderInstance struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// CertificateProviderInstanceInput is an input type that accepts CertificateProviderInstanceArgs and CertificateProviderInstanceOutput values.
// You can construct a concrete instance of `CertificateProviderInstanceInput` via:
//
//	CertificateProviderInstanceArgs{...}
type CertificateProviderInstanceInput interface {
	pulumi.Input

	ToCertificateProviderInstanceOutput() CertificateProviderInstanceOutput
	ToCertificateProviderInstanceOutputWithContext(context.Context) CertificateProviderInstanceOutput
}

// Specification of a TLS certificate provider instance. Workloads may have one or more CertificateProvider instances (plugins) and one of them is enabled and configured by specifying this message. Workloads use the values from this message to locate and load the CertificateProvider instance configuration.
type CertificateProviderInstanceArgs struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance pulumi.StringInput `pulumi:"pluginInstance"`
}

func (CertificateProviderInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateProviderInstance)(nil)).Elem()
}

func (i CertificateProviderInstanceArgs) ToCertificateProviderInstanceOutput() CertificateProviderInstanceOutput {
	return i.ToCertificateProviderInstanceOutputWithContext(context.Background())
}

func (i CertificateProviderInstanceArgs) ToCertificateProviderInstanceOutputWithContext(ctx context.Context) CertificateProviderInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateProviderInstanceOutput)
}

func (i CertificateProviderInstanceArgs) ToCertificateProviderInstancePtrOutput() CertificateProviderInstancePtrOutput {
	return i.ToCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i CertificateProviderInstanceArgs) ToCertificateProviderInstancePtrOutputWithContext(ctx context.Context) CertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateProviderInstanceOutput).ToCertificateProviderInstancePtrOutputWithContext(ctx)
}

// CertificateProviderInstancePtrInput is an input type that accepts CertificateProviderInstanceArgs, CertificateProviderInstancePtr and CertificateProviderInstancePtrOutput values.
// You can construct a concrete instance of `CertificateProviderInstancePtrInput` via:
//
//	        CertificateProviderInstanceArgs{...}
//
//	or:
//
//	        nil
type CertificateProviderInstancePtrInput interface {
	pulumi.Input

	ToCertificateProviderInstancePtrOutput() CertificateProviderInstancePtrOutput
	ToCertificateProviderInstancePtrOutputWithContext(context.Context) CertificateProviderInstancePtrOutput
}

type certificateProviderInstancePtrType CertificateProviderInstanceArgs

func CertificateProviderInstancePtr(v *CertificateProviderInstanceArgs) CertificateProviderInstancePtrInput {
	return (*certificateProviderInstancePtrType)(v)
}

func (*certificateProviderInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateProviderInstance)(nil)).Elem()
}

func (i *certificateProviderInstancePtrType) ToCertificateProviderInstancePtrOutput() CertificateProviderInstancePtrOutput {
	return i.ToCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (i *certificateProviderInstancePtrType) ToCertificateProviderInstancePtrOutputWithContext(ctx context.Context) CertificateProviderInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateProviderInstancePtrOutput)
}

// Specification of a TLS certificate provider instance. Workloads may have one or more CertificateProvider instances (plugins) and one of them is enabled and configured by specifying this message. Workloads use the values from this message to locate and load the CertificateProvider instance configuration.
type CertificateProviderInstanceOutput struct{ *pulumi.OutputState }

func (CertificateProviderInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateProviderInstance)(nil)).Elem()
}

func (o CertificateProviderInstanceOutput) ToCertificateProviderInstanceOutput() CertificateProviderInstanceOutput {
	return o
}

func (o CertificateProviderInstanceOutput) ToCertificateProviderInstanceOutputWithContext(ctx context.Context) CertificateProviderInstanceOutput {
	return o
}

func (o CertificateProviderInstanceOutput) ToCertificateProviderInstancePtrOutput() CertificateProviderInstancePtrOutput {
	return o.ToCertificateProviderInstancePtrOutputWithContext(context.Background())
}

func (o CertificateProviderInstanceOutput) ToCertificateProviderInstancePtrOutputWithContext(ctx context.Context) CertificateProviderInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateProviderInstance) *CertificateProviderInstance {
		return &v
	}).(CertificateProviderInstancePtrOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
func (o CertificateProviderInstanceOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateProviderInstance) string { return v.PluginInstance }).(pulumi.StringOutput)
}

type CertificateProviderInstancePtrOutput struct{ *pulumi.OutputState }

func (CertificateProviderInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateProviderInstance)(nil)).Elem()
}

func (o CertificateProviderInstancePtrOutput) ToCertificateProviderInstancePtrOutput() CertificateProviderInstancePtrOutput {
	return o
}

func (o CertificateProviderInstancePtrOutput) ToCertificateProviderInstancePtrOutputWithContext(ctx context.Context) CertificateProviderInstancePtrOutput {
	return o
}

func (o CertificateProviderInstancePtrOutput) Elem() CertificateProviderInstanceOutput {
	return o.ApplyT(func(v *CertificateProviderInstance) CertificateProviderInstance {
		if v != nil {
			return *v
		}
		var ret CertificateProviderInstance
		return ret
	}).(CertificateProviderInstanceOutput)
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
func (o CertificateProviderInstancePtrOutput) PluginInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateProviderInstance) *string {
		if v == nil {
			return nil
		}
		return &v.PluginInstance
	}).(pulumi.StringPtrOutput)
}

// Specification of a TLS certificate provider instance. Workloads may have one or more CertificateProvider instances (plugins) and one of them is enabled and configured by specifying this message. Workloads use the values from this message to locate and load the CertificateProvider instance configuration.
type CertificateProviderInstanceResponse struct {
	// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
	PluginInstance string `pulumi:"pluginInstance"`
}

// Specification of a TLS certificate provider instance. Workloads may have one or more CertificateProvider instances (plugins) and one of them is enabled and configured by specifying this message. Workloads use the values from this message to locate and load the CertificateProvider instance configuration.
type CertificateProviderInstanceResponseOutput struct{ *pulumi.OutputState }

func (CertificateProviderInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateProviderInstanceResponse)(nil)).Elem()
}

func (o CertificateProviderInstanceResponseOutput) ToCertificateProviderInstanceResponseOutput() CertificateProviderInstanceResponseOutput {
	return o
}

func (o CertificateProviderInstanceResponseOutput) ToCertificateProviderInstanceResponseOutputWithContext(ctx context.Context) CertificateProviderInstanceResponseOutput {
	return o
}

// Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to "google_cloud_private_spiffe" to use Certificate Authority Service certificate provider instance.
func (o CertificateProviderInstanceResponseOutput) PluginInstance() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateProviderInstanceResponse) string { return v.PluginInstance }).(pulumi.StringOutput)
}

// Specification of traffic destination attributes.
type Destination struct {
	// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
	Hosts []string `pulumi:"hosts"`
	// Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
	HttpHeaderMatch *HttpHeaderMatch `pulumi:"httpHeaderMatch"`
	// Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
	Methods []string `pulumi:"methods"`
	// List of destination ports to match. At least one port should match.
	Ports []int `pulumi:"ports"`
}

// DestinationInput is an input type that accepts DestinationArgs and DestinationOutput values.
// You can construct a concrete instance of `DestinationInput` via:
//
//	DestinationArgs{...}
type DestinationInput interface {
	pulumi.Input

	ToDestinationOutput() DestinationOutput
	ToDestinationOutputWithContext(context.Context) DestinationOutput
}

// Specification of traffic destination attributes.
type DestinationArgs struct {
	// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
	// Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
	HttpHeaderMatch HttpHeaderMatchPtrInput `pulumi:"httpHeaderMatch"`
	// Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
	Methods pulumi.StringArrayInput `pulumi:"methods"`
	// List of destination ports to match. At least one port should match.
	Ports pulumi.IntArrayInput `pulumi:"ports"`
}

func (DestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Destination)(nil)).Elem()
}

func (i DestinationArgs) ToDestinationOutput() DestinationOutput {
	return i.ToDestinationOutputWithContext(context.Background())
}

func (i DestinationArgs) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationOutput)
}

// DestinationArrayInput is an input type that accepts DestinationArray and DestinationArrayOutput values.
// You can construct a concrete instance of `DestinationArrayInput` via:
//
//	DestinationArray{ DestinationArgs{...} }
type DestinationArrayInput interface {
	pulumi.Input

	ToDestinationArrayOutput() DestinationArrayOutput
	ToDestinationArrayOutputWithContext(context.Context) DestinationArrayOutput
}

type DestinationArray []DestinationInput

func (DestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Destination)(nil)).Elem()
}

func (i DestinationArray) ToDestinationArrayOutput() DestinationArrayOutput {
	return i.ToDestinationArrayOutputWithContext(context.Background())
}

func (i DestinationArray) ToDestinationArrayOutputWithContext(ctx context.Context) DestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationArrayOutput)
}

// Specification of traffic destination attributes.
type DestinationOutput struct{ *pulumi.OutputState }

func (DestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Destination)(nil)).Elem()
}

func (o DestinationOutput) ToDestinationOutput() DestinationOutput {
	return o
}

func (o DestinationOutput) ToDestinationOutputWithContext(ctx context.Context) DestinationOutput {
	return o
}

// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
func (o DestinationOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Destination) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
func (o DestinationOutput) HttpHeaderMatch() HttpHeaderMatchPtrOutput {
	return o.ApplyT(func(v Destination) *HttpHeaderMatch { return v.HttpHeaderMatch }).(HttpHeaderMatchPtrOutput)
}

// Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
func (o DestinationOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Destination) []string { return v.Methods }).(pulumi.StringArrayOutput)
}

// List of destination ports to match. At least one port should match.
func (o DestinationOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v Destination) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type DestinationArrayOutput struct{ *pulumi.OutputState }

func (DestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Destination)(nil)).Elem()
}

func (o DestinationArrayOutput) ToDestinationArrayOutput() DestinationArrayOutput {
	return o
}

func (o DestinationArrayOutput) ToDestinationArrayOutputWithContext(ctx context.Context) DestinationArrayOutput {
	return o
}

func (o DestinationArrayOutput) Index(i pulumi.IntInput) DestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Destination {
		return vs[0].([]Destination)[vs[1].(int)]
	}).(DestinationOutput)
}

// Specification of traffic destination attributes.
type DestinationResponse struct {
	// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
	Hosts []string `pulumi:"hosts"`
	// Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
	HttpHeaderMatch HttpHeaderMatchResponse `pulumi:"httpHeaderMatch"`
	// Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
	Methods []string `pulumi:"methods"`
	// List of destination ports to match. At least one port should match.
	Ports []int `pulumi:"ports"`
}

// Specification of traffic destination attributes.
type DestinationResponseOutput struct{ *pulumi.OutputState }

func (DestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationResponse)(nil)).Elem()
}

func (o DestinationResponseOutput) ToDestinationResponseOutput() DestinationResponseOutput {
	return o
}

func (o DestinationResponseOutput) ToDestinationResponseOutputWithContext(ctx context.Context) DestinationResponseOutput {
	return o
}

// List of host names to match. Matched against the ":authority" header in http requests. At least one host should match. Each host can be an exact match, or a prefix match (example "mydomain.*") or a suffix match (example "*.myorg.com") or a presence (any) match "*".
func (o DestinationResponseOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationResponse) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases. At least one header should match. Avoid using header matches to make authorization decisions unless there is a strong guarantee that requests arrive through a trusted client or proxy.
func (o DestinationResponseOutput) HttpHeaderMatch() HttpHeaderMatchResponseOutput {
	return o.ApplyT(func(v DestinationResponse) HttpHeaderMatchResponse { return v.HttpHeaderMatch }).(HttpHeaderMatchResponseOutput)
}

// Optional. A list of HTTP methods to match. At least one method should match. Should not be set for gRPC services.
func (o DestinationResponseOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DestinationResponse) []string { return v.Methods }).(pulumi.StringArrayOutput)
}

// List of destination ports to match. At least one port should match.
func (o DestinationResponseOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DestinationResponse) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type DestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (DestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DestinationResponse)(nil)).Elem()
}

func (o DestinationResponseArrayOutput) ToDestinationResponseArrayOutput() DestinationResponseArrayOutput {
	return o
}

func (o DestinationResponseArrayOutput) ToDestinationResponseArrayOutputWithContext(ctx context.Context) DestinationResponseArrayOutput {
	return o
}

func (o DestinationResponseArrayOutput) Index(i pulumi.IntInput) DestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DestinationResponse {
		return vs[0].([]DestinationResponse)[vs[1].(int)]
	}).(DestinationResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specification of certificate provider. Defines the mechanism to obtain the certificate and private key for peer to peer authentication.
type GoogleCloudNetworksecurityV1CertificateProvider struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	CertificateProviderInstance *CertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	GrpcEndpoint *GoogleCloudNetworksecurityV1GrpcEndpoint `pulumi:"grpcEndpoint"`
}

// GoogleCloudNetworksecurityV1CertificateProviderInput is an input type that accepts GoogleCloudNetworksecurityV1CertificateProviderArgs and GoogleCloudNetworksecurityV1CertificateProviderOutput values.
// You can construct a concrete instance of `GoogleCloudNetworksecurityV1CertificateProviderInput` via:
//
//	GoogleCloudNetworksecurityV1CertificateProviderArgs{...}
type GoogleCloudNetworksecurityV1CertificateProviderInput interface {
	pulumi.Input

	ToGoogleCloudNetworksecurityV1CertificateProviderOutput() GoogleCloudNetworksecurityV1CertificateProviderOutput
	ToGoogleCloudNetworksecurityV1CertificateProviderOutputWithContext(context.Context) GoogleCloudNetworksecurityV1CertificateProviderOutput
}

// Specification of certificate provider. Defines the mechanism to obtain the certificate and private key for peer to peer authentication.
type GoogleCloudNetworksecurityV1CertificateProviderArgs struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	CertificateProviderInstance CertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	GrpcEndpoint GoogleCloudNetworksecurityV1GrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (GoogleCloudNetworksecurityV1CertificateProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudNetworksecurityV1CertificateProvider)(nil)).Elem()
}

func (i GoogleCloudNetworksecurityV1CertificateProviderArgs) ToGoogleCloudNetworksecurityV1CertificateProviderOutput() GoogleCloudNetworksecurityV1CertificateProviderOutput {
	return i.ToGoogleCloudNetworksecurityV1CertificateProviderOutputWithContext(context.Background())
}

func (i GoogleCloudNetworksecurityV1CertificateProviderArgs) ToGoogleCloudNetworksecurityV1CertificateProviderOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1CertificateProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudNetworksecurityV1CertificateProviderOutput)
}

func (i GoogleCloudNetworksecurityV1CertificateProviderArgs) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutput() GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return i.ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(context.Background())
}

func (i GoogleCloudNetworksecurityV1CertificateProviderArgs) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudNetworksecurityV1CertificateProviderOutput).ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(ctx)
}

// GoogleCloudNetworksecurityV1CertificateProviderPtrInput is an input type that accepts GoogleCloudNetworksecurityV1CertificateProviderArgs, GoogleCloudNetworksecurityV1CertificateProviderPtr and GoogleCloudNetworksecurityV1CertificateProviderPtrOutput values.
// You can construct a concrete instance of `GoogleCloudNetworksecurityV1CertificateProviderPtrInput` via:
//
//	        GoogleCloudNetworksecurityV1CertificateProviderArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudNetworksecurityV1CertificateProviderPtrInput interface {
	pulumi.Input

	ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutput() GoogleCloudNetworksecurityV1CertificateProviderPtrOutput
	ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(context.Context) GoogleCloudNetworksecurityV1CertificateProviderPtrOutput
}

type googleCloudNetworksecurityV1CertificateProviderPtrType GoogleCloudNetworksecurityV1CertificateProviderArgs

func GoogleCloudNetworksecurityV1CertificateProviderPtr(v *GoogleCloudNetworksecurityV1CertificateProviderArgs) GoogleCloudNetworksecurityV1CertificateProviderPtrInput {
	return (*googleCloudNetworksecurityV1CertificateProviderPtrType)(v)
}

func (*googleCloudNetworksecurityV1CertificateProviderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudNetworksecurityV1CertificateProvider)(nil)).Elem()
}

func (i *googleCloudNetworksecurityV1CertificateProviderPtrType) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutput() GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return i.ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(context.Background())
}

func (i *googleCloudNetworksecurityV1CertificateProviderPtrType) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudNetworksecurityV1CertificateProviderPtrOutput)
}

// Specification of certificate provider. Defines the mechanism to obtain the certificate and private key for peer to peer authentication.
type GoogleCloudNetworksecurityV1CertificateProviderOutput struct{ *pulumi.OutputState }

func (GoogleCloudNetworksecurityV1CertificateProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudNetworksecurityV1CertificateProvider)(nil)).Elem()
}

func (o GoogleCloudNetworksecurityV1CertificateProviderOutput) ToGoogleCloudNetworksecurityV1CertificateProviderOutput() GoogleCloudNetworksecurityV1CertificateProviderOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1CertificateProviderOutput) ToGoogleCloudNetworksecurityV1CertificateProviderOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1CertificateProviderOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1CertificateProviderOutput) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutput() GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return o.ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(context.Background())
}

func (o GoogleCloudNetworksecurityV1CertificateProviderOutput) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudNetworksecurityV1CertificateProvider) *GoogleCloudNetworksecurityV1CertificateProvider {
		return &v
	}).(GoogleCloudNetworksecurityV1CertificateProviderPtrOutput)
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
func (o GoogleCloudNetworksecurityV1CertificateProviderOutput) CertificateProviderInstance() CertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v GoogleCloudNetworksecurityV1CertificateProvider) *CertificateProviderInstance {
		return v.CertificateProviderInstance
	}).(CertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
func (o GoogleCloudNetworksecurityV1CertificateProviderOutput) GrpcEndpoint() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return o.ApplyT(func(v GoogleCloudNetworksecurityV1CertificateProvider) *GoogleCloudNetworksecurityV1GrpcEndpoint {
		return v.GrpcEndpoint
	}).(GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput)
}

type GoogleCloudNetworksecurityV1CertificateProviderPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudNetworksecurityV1CertificateProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudNetworksecurityV1CertificateProvider)(nil)).Elem()
}

func (o GoogleCloudNetworksecurityV1CertificateProviderPtrOutput) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutput() GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1CertificateProviderPtrOutput) ToGoogleCloudNetworksecurityV1CertificateProviderPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1CertificateProviderPtrOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1CertificateProviderPtrOutput) Elem() GoogleCloudNetworksecurityV1CertificateProviderOutput {
	return o.ApplyT(func(v *GoogleCloudNetworksecurityV1CertificateProvider) GoogleCloudNetworksecurityV1CertificateProvider {
		if v != nil {
			return *v
		}
		var ret GoogleCloudNetworksecurityV1CertificateProvider
		return ret
	}).(GoogleCloudNetworksecurityV1CertificateProviderOutput)
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
func (o GoogleCloudNetworksecurityV1CertificateProviderPtrOutput) CertificateProviderInstance() CertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v *GoogleCloudNetworksecurityV1CertificateProvider) *CertificateProviderInstance {
		if v == nil {
			return nil
		}
		return v.CertificateProviderInstance
	}).(CertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
func (o GoogleCloudNetworksecurityV1CertificateProviderPtrOutput) GrpcEndpoint() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return o.ApplyT(func(v *GoogleCloudNetworksecurityV1CertificateProvider) *GoogleCloudNetworksecurityV1GrpcEndpoint {
		if v == nil {
			return nil
		}
		return v.GrpcEndpoint
	}).(GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput)
}

// Specification of certificate provider. Defines the mechanism to obtain the certificate and private key for peer to peer authentication.
type GoogleCloudNetworksecurityV1CertificateProviderResponse struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	CertificateProviderInstance CertificateProviderInstanceResponse `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
	GrpcEndpoint GoogleCloudNetworksecurityV1GrpcEndpointResponse `pulumi:"grpcEndpoint"`
}

// Specification of certificate provider. Defines the mechanism to obtain the certificate and private key for peer to peer authentication.
type GoogleCloudNetworksecurityV1CertificateProviderResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudNetworksecurityV1CertificateProviderResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudNetworksecurityV1CertificateProviderResponse)(nil)).Elem()
}

func (o GoogleCloudNetworksecurityV1CertificateProviderResponseOutput) ToGoogleCloudNetworksecurityV1CertificateProviderResponseOutput() GoogleCloudNetworksecurityV1CertificateProviderResponseOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1CertificateProviderResponseOutput) ToGoogleCloudNetworksecurityV1CertificateProviderResponseOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1CertificateProviderResponseOutput {
	return o
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
func (o GoogleCloudNetworksecurityV1CertificateProviderResponseOutput) CertificateProviderInstance() CertificateProviderInstanceResponseOutput {
	return o.ApplyT(func(v GoogleCloudNetworksecurityV1CertificateProviderResponse) CertificateProviderInstanceResponse {
		return v.CertificateProviderInstance
	}).(CertificateProviderInstanceResponseOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the cert and private key.
func (o GoogleCloudNetworksecurityV1CertificateProviderResponseOutput) GrpcEndpoint() GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput {
	return o.ApplyT(func(v GoogleCloudNetworksecurityV1CertificateProviderResponse) GoogleCloudNetworksecurityV1GrpcEndpointResponse {
		return v.GrpcEndpoint
	}).(GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput)
}

// Specification of the GRPC Endpoint.
type GoogleCloudNetworksecurityV1GrpcEndpoint struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// GoogleCloudNetworksecurityV1GrpcEndpointInput is an input type that accepts GoogleCloudNetworksecurityV1GrpcEndpointArgs and GoogleCloudNetworksecurityV1GrpcEndpointOutput values.
// You can construct a concrete instance of `GoogleCloudNetworksecurityV1GrpcEndpointInput` via:
//
//	GoogleCloudNetworksecurityV1GrpcEndpointArgs{...}
type GoogleCloudNetworksecurityV1GrpcEndpointInput interface {
	pulumi.Input

	ToGoogleCloudNetworksecurityV1GrpcEndpointOutput() GoogleCloudNetworksecurityV1GrpcEndpointOutput
	ToGoogleCloudNetworksecurityV1GrpcEndpointOutputWithContext(context.Context) GoogleCloudNetworksecurityV1GrpcEndpointOutput
}

// Specification of the GRPC Endpoint.
type GoogleCloudNetworksecurityV1GrpcEndpointArgs struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri pulumi.StringInput `pulumi:"targetUri"`
}

func (GoogleCloudNetworksecurityV1GrpcEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudNetworksecurityV1GrpcEndpoint)(nil)).Elem()
}

func (i GoogleCloudNetworksecurityV1GrpcEndpointArgs) ToGoogleCloudNetworksecurityV1GrpcEndpointOutput() GoogleCloudNetworksecurityV1GrpcEndpointOutput {
	return i.ToGoogleCloudNetworksecurityV1GrpcEndpointOutputWithContext(context.Background())
}

func (i GoogleCloudNetworksecurityV1GrpcEndpointArgs) ToGoogleCloudNetworksecurityV1GrpcEndpointOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1GrpcEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudNetworksecurityV1GrpcEndpointOutput)
}

func (i GoogleCloudNetworksecurityV1GrpcEndpointArgs) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutput() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return i.ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(context.Background())
}

func (i GoogleCloudNetworksecurityV1GrpcEndpointArgs) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudNetworksecurityV1GrpcEndpointOutput).ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(ctx)
}

// GoogleCloudNetworksecurityV1GrpcEndpointPtrInput is an input type that accepts GoogleCloudNetworksecurityV1GrpcEndpointArgs, GoogleCloudNetworksecurityV1GrpcEndpointPtr and GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput values.
// You can construct a concrete instance of `GoogleCloudNetworksecurityV1GrpcEndpointPtrInput` via:
//
//	        GoogleCloudNetworksecurityV1GrpcEndpointArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudNetworksecurityV1GrpcEndpointPtrInput interface {
	pulumi.Input

	ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutput() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput
	ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(context.Context) GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput
}

type googleCloudNetworksecurityV1GrpcEndpointPtrType GoogleCloudNetworksecurityV1GrpcEndpointArgs

func GoogleCloudNetworksecurityV1GrpcEndpointPtr(v *GoogleCloudNetworksecurityV1GrpcEndpointArgs) GoogleCloudNetworksecurityV1GrpcEndpointPtrInput {
	return (*googleCloudNetworksecurityV1GrpcEndpointPtrType)(v)
}

func (*googleCloudNetworksecurityV1GrpcEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudNetworksecurityV1GrpcEndpoint)(nil)).Elem()
}

func (i *googleCloudNetworksecurityV1GrpcEndpointPtrType) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutput() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return i.ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(context.Background())
}

func (i *googleCloudNetworksecurityV1GrpcEndpointPtrType) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput)
}

// Specification of the GRPC Endpoint.
type GoogleCloudNetworksecurityV1GrpcEndpointOutput struct{ *pulumi.OutputState }

func (GoogleCloudNetworksecurityV1GrpcEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudNetworksecurityV1GrpcEndpoint)(nil)).Elem()
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointOutput() GoogleCloudNetworksecurityV1GrpcEndpointOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1GrpcEndpointOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutput() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return o.ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(context.Background())
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudNetworksecurityV1GrpcEndpoint) *GoogleCloudNetworksecurityV1GrpcEndpoint {
		return &v
	}).(GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o GoogleCloudNetworksecurityV1GrpcEndpointOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudNetworksecurityV1GrpcEndpoint) string { return v.TargetUri }).(pulumi.StringOutput)
}

type GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudNetworksecurityV1GrpcEndpoint)(nil)).Elem()
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutput() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointPtrOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput) Elem() GoogleCloudNetworksecurityV1GrpcEndpointOutput {
	return o.ApplyT(func(v *GoogleCloudNetworksecurityV1GrpcEndpoint) GoogleCloudNetworksecurityV1GrpcEndpoint {
		if v != nil {
			return *v
		}
		var ret GoogleCloudNetworksecurityV1GrpcEndpoint
		return ret
	}).(GoogleCloudNetworksecurityV1GrpcEndpointOutput)
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput) TargetUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudNetworksecurityV1GrpcEndpoint) *string {
		if v == nil {
			return nil
		}
		return &v.TargetUri
	}).(pulumi.StringPtrOutput)
}

// Specification of the GRPC Endpoint.
type GoogleCloudNetworksecurityV1GrpcEndpointResponse struct {
	// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
	TargetUri string `pulumi:"targetUri"`
}

// Specification of the GRPC Endpoint.
type GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudNetworksecurityV1GrpcEndpointResponse)(nil)).Elem()
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointResponseOutput() GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput {
	return o
}

func (o GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput) ToGoogleCloudNetworksecurityV1GrpcEndpointResponseOutputWithContext(ctx context.Context) GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput {
	return o
}

// The target URI of the gRPC endpoint. Only UDS path is supported, and should start with "unix:".
func (o GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput) TargetUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudNetworksecurityV1GrpcEndpointResponse) string { return v.TargetUri }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// GoogleIamV1AuditConfigInput is an input type that accepts GoogleIamV1AuditConfigArgs and GoogleIamV1AuditConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigInput` via:
//
//	GoogleIamV1AuditConfigArgs{...}
type GoogleIamV1AuditConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput
	ToGoogleIamV1AuditConfigOutputWithContext(context.Context) GoogleIamV1AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs GoogleIamV1AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (GoogleIamV1AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return i.ToGoogleIamV1AuditConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArgs) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigOutput)
}

// GoogleIamV1AuditConfigArrayInput is an input type that accepts GoogleIamV1AuditConfigArray and GoogleIamV1AuditConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditConfigArrayInput` via:
//
//	GoogleIamV1AuditConfigArray{ GoogleIamV1AuditConfigArgs{...} }
type GoogleIamV1AuditConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput
	ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditConfigArrayOutput
}

type GoogleIamV1AuditConfigArray []GoogleIamV1AuditConfigInput

func (GoogleIamV1AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return i.ToGoogleIamV1AuditConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditConfigArray) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutput() GoogleIamV1AuditConfigOutput {
	return o
}

func (o GoogleIamV1AuditConfigOutput) ToGoogleIamV1AuditConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) []GoogleIamV1AuditLogConfig { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type GoogleIamV1AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutput() GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) ToGoogleIamV1AuditConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfig {
		return vs[0].([]GoogleIamV1AuditConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []GoogleIamV1AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type GoogleIamV1AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutput() GoogleIamV1AuditConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseOutput) ToGoogleIamV1AuditConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o GoogleIamV1AuditConfigResponseOutput) AuditLogConfigs() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) []GoogleIamV1AuditLogConfigResponse { return v.AuditLogConfigs }).(GoogleIamV1AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o GoogleIamV1AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type GoogleIamV1AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutput() GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) ToGoogleIamV1AuditConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditConfigResponse {
		return vs[0].([]GoogleIamV1AuditConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *GoogleIamV1AuditLogConfigLogType `pulumi:"logType"`
}

// GoogleIamV1AuditLogConfigInput is an input type that accepts GoogleIamV1AuditLogConfigArgs and GoogleIamV1AuditLogConfigOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigInput` via:
//
//	GoogleIamV1AuditLogConfigArgs{...}
type GoogleIamV1AuditLogConfigInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput
	ToGoogleIamV1AuditLogConfigOutputWithContext(context.Context) GoogleIamV1AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType GoogleIamV1AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (GoogleIamV1AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return i.ToGoogleIamV1AuditLogConfigOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArgs) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigOutput)
}

// GoogleIamV1AuditLogConfigArrayInput is an input type that accepts GoogleIamV1AuditLogConfigArray and GoogleIamV1AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1AuditLogConfigArrayInput` via:
//
//	GoogleIamV1AuditLogConfigArray{ GoogleIamV1AuditLogConfigArgs{...} }
type GoogleIamV1AuditLogConfigArrayInput interface {
	pulumi.Input

	ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput
	ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Context) GoogleIamV1AuditLogConfigArrayOutput
}

type GoogleIamV1AuditLogConfigArray []GoogleIamV1AuditLogConfigInput

func (GoogleIamV1AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return i.ToGoogleIamV1AuditLogConfigArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1AuditLogConfigArray) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutput() GoogleIamV1AuditLogConfigOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigOutput) ToGoogleIamV1AuditLogConfigOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigOutput) LogType() GoogleIamV1AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfig) *GoogleIamV1AuditLogConfigLogType { return v.LogType }).(GoogleIamV1AuditLogConfigLogTypePtrOutput)
}

type GoogleIamV1AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfig)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutput() GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) ToGoogleIamV1AuditLogConfigArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfig {
		return vs[0].([]GoogleIamV1AuditLogConfig)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type GoogleIamV1AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutput() GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseOutput) ToGoogleIamV1AuditLogConfigResponseOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o GoogleIamV1AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o GoogleIamV1AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type GoogleIamV1AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1AuditLogConfigResponse)(nil)).Elem()
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutput() GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) ToGoogleIamV1AuditLogConfigResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1AuditLogConfigResponseArrayOutput {
	return o
}

func (o GoogleIamV1AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1AuditLogConfigResponse {
		return vs[0].([]GoogleIamV1AuditLogConfigResponse)[vs[1].(int)]
	}).(GoogleIamV1AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// GoogleIamV1BindingInput is an input type that accepts GoogleIamV1BindingArgs and GoogleIamV1BindingOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingInput` via:
//
//	GoogleIamV1BindingArgs{...}
type GoogleIamV1BindingInput interface {
	pulumi.Input

	ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput
	ToGoogleIamV1BindingOutputWithContext(context.Context) GoogleIamV1BindingOutput
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (GoogleIamV1BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return i.ToGoogleIamV1BindingOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArgs) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingOutput)
}

// GoogleIamV1BindingArrayInput is an input type that accepts GoogleIamV1BindingArray and GoogleIamV1BindingArrayOutput values.
// You can construct a concrete instance of `GoogleIamV1BindingArrayInput` via:
//
//	GoogleIamV1BindingArray{ GoogleIamV1BindingArgs{...} }
type GoogleIamV1BindingArrayInput interface {
	pulumi.Input

	ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput
	ToGoogleIamV1BindingArrayOutputWithContext(context.Context) GoogleIamV1BindingArrayOutput
}

type GoogleIamV1BindingArray []GoogleIamV1BindingInput

func (GoogleIamV1BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return i.ToGoogleIamV1BindingArrayOutputWithContext(context.Background())
}

func (i GoogleIamV1BindingArray) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleIamV1BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutput() GoogleIamV1BindingOutput {
	return o
}

func (o GoogleIamV1BindingOutput) ToGoogleIamV1BindingOutputWithContext(ctx context.Context) GoogleIamV1BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o GoogleIamV1BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleIamV1Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type GoogleIamV1BindingArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1Binding)(nil)).Elem()
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutput() GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) ToGoogleIamV1BindingArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingArrayOutput {
	return o
}

func (o GoogleIamV1BindingArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1Binding {
		return vs[0].([]GoogleIamV1Binding)[vs[1].(int)]
	}).(GoogleIamV1BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type GoogleIamV1BindingResponseOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutput() GoogleIamV1BindingResponseOutput {
	return o
}

func (o GoogleIamV1BindingResponseOutput) ToGoogleIamV1BindingResponseOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o GoogleIamV1BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o GoogleIamV1BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o GoogleIamV1BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleIamV1BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type GoogleIamV1BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleIamV1BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleIamV1BindingResponse)(nil)).Elem()
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutput() GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) ToGoogleIamV1BindingResponseArrayOutputWithContext(ctx context.Context) GoogleIamV1BindingResponseArrayOutput {
	return o
}

func (o GoogleIamV1BindingResponseArrayOutput) Index(i pulumi.IntInput) GoogleIamV1BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleIamV1BindingResponse {
		return vs[0].([]GoogleIamV1BindingResponse)[vs[1].(int)]
	}).(GoogleIamV1BindingResponseOutput)
}

// Specification of HTTP header match attributes.
type HttpHeaderMatch struct {
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
	HeaderName string `pulumi:"headerName"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
	RegexMatch string `pulumi:"regexMatch"`
}

// HttpHeaderMatchInput is an input type that accepts HttpHeaderMatchArgs and HttpHeaderMatchOutput values.
// You can construct a concrete instance of `HttpHeaderMatchInput` via:
//
//	HttpHeaderMatchArgs{...}
type HttpHeaderMatchInput interface {
	pulumi.Input

	ToHttpHeaderMatchOutput() HttpHeaderMatchOutput
	ToHttpHeaderMatchOutputWithContext(context.Context) HttpHeaderMatchOutput
}

// Specification of HTTP header match attributes.
type HttpHeaderMatchArgs struct {
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
	HeaderName pulumi.StringInput `pulumi:"headerName"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
	RegexMatch pulumi.StringInput `pulumi:"regexMatch"`
}

func (HttpHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderMatch)(nil)).Elem()
}

func (i HttpHeaderMatchArgs) ToHttpHeaderMatchOutput() HttpHeaderMatchOutput {
	return i.ToHttpHeaderMatchOutputWithContext(context.Background())
}

func (i HttpHeaderMatchArgs) ToHttpHeaderMatchOutputWithContext(ctx context.Context) HttpHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderMatchOutput)
}

func (i HttpHeaderMatchArgs) ToHttpHeaderMatchPtrOutput() HttpHeaderMatchPtrOutput {
	return i.ToHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (i HttpHeaderMatchArgs) ToHttpHeaderMatchPtrOutputWithContext(ctx context.Context) HttpHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderMatchOutput).ToHttpHeaderMatchPtrOutputWithContext(ctx)
}

// HttpHeaderMatchPtrInput is an input type that accepts HttpHeaderMatchArgs, HttpHeaderMatchPtr and HttpHeaderMatchPtrOutput values.
// You can construct a concrete instance of `HttpHeaderMatchPtrInput` via:
//
//	        HttpHeaderMatchArgs{...}
//
//	or:
//
//	        nil
type HttpHeaderMatchPtrInput interface {
	pulumi.Input

	ToHttpHeaderMatchPtrOutput() HttpHeaderMatchPtrOutput
	ToHttpHeaderMatchPtrOutputWithContext(context.Context) HttpHeaderMatchPtrOutput
}

type httpHeaderMatchPtrType HttpHeaderMatchArgs

func HttpHeaderMatchPtr(v *HttpHeaderMatchArgs) HttpHeaderMatchPtrInput {
	return (*httpHeaderMatchPtrType)(v)
}

func (*httpHeaderMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpHeaderMatch)(nil)).Elem()
}

func (i *httpHeaderMatchPtrType) ToHttpHeaderMatchPtrOutput() HttpHeaderMatchPtrOutput {
	return i.ToHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (i *httpHeaderMatchPtrType) ToHttpHeaderMatchPtrOutputWithContext(ctx context.Context) HttpHeaderMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpHeaderMatchPtrOutput)
}

// Specification of HTTP header match attributes.
type HttpHeaderMatchOutput struct{ *pulumi.OutputState }

func (HttpHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderMatch)(nil)).Elem()
}

func (o HttpHeaderMatchOutput) ToHttpHeaderMatchOutput() HttpHeaderMatchOutput {
	return o
}

func (o HttpHeaderMatchOutput) ToHttpHeaderMatchOutputWithContext(ctx context.Context) HttpHeaderMatchOutput {
	return o
}

func (o HttpHeaderMatchOutput) ToHttpHeaderMatchPtrOutput() HttpHeaderMatchPtrOutput {
	return o.ToHttpHeaderMatchPtrOutputWithContext(context.Background())
}

func (o HttpHeaderMatchOutput) ToHttpHeaderMatchPtrOutputWithContext(ctx context.Context) HttpHeaderMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpHeaderMatch) *HttpHeaderMatch {
		return &v
	}).(HttpHeaderMatchPtrOutput)
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
func (o HttpHeaderMatchOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatch) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
func (o HttpHeaderMatchOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatch) string { return v.RegexMatch }).(pulumi.StringOutput)
}

type HttpHeaderMatchPtrOutput struct{ *pulumi.OutputState }

func (HttpHeaderMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpHeaderMatch)(nil)).Elem()
}

func (o HttpHeaderMatchPtrOutput) ToHttpHeaderMatchPtrOutput() HttpHeaderMatchPtrOutput {
	return o
}

func (o HttpHeaderMatchPtrOutput) ToHttpHeaderMatchPtrOutputWithContext(ctx context.Context) HttpHeaderMatchPtrOutput {
	return o
}

func (o HttpHeaderMatchPtrOutput) Elem() HttpHeaderMatchOutput {
	return o.ApplyT(func(v *HttpHeaderMatch) HttpHeaderMatch {
		if v != nil {
			return *v
		}
		var ret HttpHeaderMatch
		return ret
	}).(HttpHeaderMatchOutput)
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
func (o HttpHeaderMatchPtrOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpHeaderMatch) *string {
		if v == nil {
			return nil
		}
		return &v.HeaderName
	}).(pulumi.StringPtrOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
func (o HttpHeaderMatchPtrOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpHeaderMatch) *string {
		if v == nil {
			return nil
		}
		return &v.RegexMatch
	}).(pulumi.StringPtrOutput)
}

// Specification of HTTP header match attributes.
type HttpHeaderMatchResponse struct {
	// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
	HeaderName string `pulumi:"headerName"`
	// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
	RegexMatch string `pulumi:"regexMatch"`
}

// Specification of HTTP header match attributes.
type HttpHeaderMatchResponseOutput struct{ *pulumi.OutputState }

func (HttpHeaderMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpHeaderMatchResponse)(nil)).Elem()
}

func (o HttpHeaderMatchResponseOutput) ToHttpHeaderMatchResponseOutput() HttpHeaderMatchResponseOutput {
	return o
}

func (o HttpHeaderMatchResponseOutput) ToHttpHeaderMatchResponseOutputWithContext(ctx context.Context) HttpHeaderMatchResponseOutput {
	return o
}

// The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use the headerName ":method".
func (o HttpHeaderMatchResponseOutput) HeaderName() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) string { return v.HeaderName }).(pulumi.StringOutput)
}

// The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.
func (o HttpHeaderMatchResponseOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpHeaderMatchResponse) string { return v.RegexMatch }).(pulumi.StringOutput)
}

// Specification of the MTLSPolicy.
type MTLSPolicy struct {
	//  Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
	ClientValidationCa []ValidationCA `pulumi:"clientValidationCa"`
}

// MTLSPolicyInput is an input type that accepts MTLSPolicyArgs and MTLSPolicyOutput values.
// You can construct a concrete instance of `MTLSPolicyInput` via:
//
//	MTLSPolicyArgs{...}
type MTLSPolicyInput interface {
	pulumi.Input

	ToMTLSPolicyOutput() MTLSPolicyOutput
	ToMTLSPolicyOutputWithContext(context.Context) MTLSPolicyOutput
}

// Specification of the MTLSPolicy.
type MTLSPolicyArgs struct {
	//  Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
	ClientValidationCa ValidationCAArrayInput `pulumi:"clientValidationCa"`
}

func (MTLSPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MTLSPolicy)(nil)).Elem()
}

func (i MTLSPolicyArgs) ToMTLSPolicyOutput() MTLSPolicyOutput {
	return i.ToMTLSPolicyOutputWithContext(context.Background())
}

func (i MTLSPolicyArgs) ToMTLSPolicyOutputWithContext(ctx context.Context) MTLSPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTLSPolicyOutput)
}

func (i MTLSPolicyArgs) ToMTLSPolicyPtrOutput() MTLSPolicyPtrOutput {
	return i.ToMTLSPolicyPtrOutputWithContext(context.Background())
}

func (i MTLSPolicyArgs) ToMTLSPolicyPtrOutputWithContext(ctx context.Context) MTLSPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTLSPolicyOutput).ToMTLSPolicyPtrOutputWithContext(ctx)
}

// MTLSPolicyPtrInput is an input type that accepts MTLSPolicyArgs, MTLSPolicyPtr and MTLSPolicyPtrOutput values.
// You can construct a concrete instance of `MTLSPolicyPtrInput` via:
//
//	        MTLSPolicyArgs{...}
//
//	or:
//
//	        nil
type MTLSPolicyPtrInput interface {
	pulumi.Input

	ToMTLSPolicyPtrOutput() MTLSPolicyPtrOutput
	ToMTLSPolicyPtrOutputWithContext(context.Context) MTLSPolicyPtrOutput
}

type mtlspolicyPtrType MTLSPolicyArgs

func MTLSPolicyPtr(v *MTLSPolicyArgs) MTLSPolicyPtrInput {
	return (*mtlspolicyPtrType)(v)
}

func (*mtlspolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MTLSPolicy)(nil)).Elem()
}

func (i *mtlspolicyPtrType) ToMTLSPolicyPtrOutput() MTLSPolicyPtrOutput {
	return i.ToMTLSPolicyPtrOutputWithContext(context.Background())
}

func (i *mtlspolicyPtrType) ToMTLSPolicyPtrOutputWithContext(ctx context.Context) MTLSPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MTLSPolicyPtrOutput)
}

// Specification of the MTLSPolicy.
type MTLSPolicyOutput struct{ *pulumi.OutputState }

func (MTLSPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTLSPolicy)(nil)).Elem()
}

func (o MTLSPolicyOutput) ToMTLSPolicyOutput() MTLSPolicyOutput {
	return o
}

func (o MTLSPolicyOutput) ToMTLSPolicyOutputWithContext(ctx context.Context) MTLSPolicyOutput {
	return o
}

func (o MTLSPolicyOutput) ToMTLSPolicyPtrOutput() MTLSPolicyPtrOutput {
	return o.ToMTLSPolicyPtrOutputWithContext(context.Background())
}

func (o MTLSPolicyOutput) ToMTLSPolicyPtrOutputWithContext(ctx context.Context) MTLSPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MTLSPolicy) *MTLSPolicy {
		return &v
	}).(MTLSPolicyPtrOutput)
}

// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
func (o MTLSPolicyOutput) ClientValidationCa() ValidationCAArrayOutput {
	return o.ApplyT(func(v MTLSPolicy) []ValidationCA { return v.ClientValidationCa }).(ValidationCAArrayOutput)
}

type MTLSPolicyPtrOutput struct{ *pulumi.OutputState }

func (MTLSPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MTLSPolicy)(nil)).Elem()
}

func (o MTLSPolicyPtrOutput) ToMTLSPolicyPtrOutput() MTLSPolicyPtrOutput {
	return o
}

func (o MTLSPolicyPtrOutput) ToMTLSPolicyPtrOutputWithContext(ctx context.Context) MTLSPolicyPtrOutput {
	return o
}

func (o MTLSPolicyPtrOutput) Elem() MTLSPolicyOutput {
	return o.ApplyT(func(v *MTLSPolicy) MTLSPolicy {
		if v != nil {
			return *v
		}
		var ret MTLSPolicy
		return ret
	}).(MTLSPolicyOutput)
}

// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
func (o MTLSPolicyPtrOutput) ClientValidationCa() ValidationCAArrayOutput {
	return o.ApplyT(func(v *MTLSPolicy) []ValidationCA {
		if v == nil {
			return nil
		}
		return v.ClientValidationCa
	}).(ValidationCAArrayOutput)
}

// Specification of the MTLSPolicy.
type MTLSPolicyResponse struct {
	//  Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
	ClientValidationCa []ValidationCAResponse `pulumi:"clientValidationCa"`
}

// Specification of the MTLSPolicy.
type MTLSPolicyResponseOutput struct{ *pulumi.OutputState }

func (MTLSPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MTLSPolicyResponse)(nil)).Elem()
}

func (o MTLSPolicyResponseOutput) ToMTLSPolicyResponseOutput() MTLSPolicyResponseOutput {
	return o
}

func (o MTLSPolicyResponseOutput) ToMTLSPolicyResponseOutputWithContext(ctx context.Context) MTLSPolicyResponseOutput {
	return o
}

// Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.
func (o MTLSPolicyResponseOutput) ClientValidationCa() ValidationCAResponseArrayOutput {
	return o.ApplyT(func(v MTLSPolicyResponse) []ValidationCAResponse { return v.ClientValidationCa }).(ValidationCAResponseArrayOutput)
}

// Specification of rules.
type Rule struct {
	// Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
	Destinations []Destination `pulumi:"destinations"`
	// Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
	Sources []Source `pulumi:"sources"`
}

// RuleInput is an input type that accepts RuleArgs and RuleOutput values.
// You can construct a concrete instance of `RuleInput` via:
//
//	RuleArgs{...}
type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(context.Context) RuleOutput
}

// Specification of rules.
type RuleArgs struct {
	// Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
	Destinations DestinationArrayInput `pulumi:"destinations"`
	// Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
	Sources SourceArrayInput `pulumi:"sources"`
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (i RuleArgs) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i RuleArgs) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//	RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// Specification of rules.
type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
func (o RuleOutput) Destinations() DestinationArrayOutput {
	return o.ApplyT(func(v Rule) []Destination { return v.Destinations }).(DestinationArrayOutput)
}

// Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
func (o RuleOutput) Sources() SourceArrayOutput {
	return o.ApplyT(func(v Rule) []Source { return v.Sources }).(SourceArrayOutput)
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Rule {
		return vs[0].([]Rule)[vs[1].(int)]
	}).(RuleOutput)
}

// Specification of rules.
type RuleResponse struct {
	// Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
	Destinations []DestinationResponse `pulumi:"destinations"`
	// Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
	Sources []SourceResponse `pulumi:"sources"`
}

// Specification of rules.
type RuleResponseOutput struct{ *pulumi.OutputState }

func (RuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleResponse)(nil)).Elem()
}

func (o RuleResponseOutput) ToRuleResponseOutput() RuleResponseOutput {
	return o
}

func (o RuleResponseOutput) ToRuleResponseOutputWithContext(ctx context.Context) RuleResponseOutput {
	return o
}

// Optional. List of attributes for the traffic destination. All of the destinations must match. A destination is a match if a request matches all the specified hosts, ports, methods and headers. If not set, the action specified in the 'action' field will be applied without any rule checks for the destination.
func (o RuleResponseOutput) Destinations() DestinationResponseArrayOutput {
	return o.ApplyT(func(v RuleResponse) []DestinationResponse { return v.Destinations }).(DestinationResponseArrayOutput)
}

// Optional. List of attributes for the traffic source. All of the sources must match. A source is a match if both principals and ip_blocks match. If not set, the action specified in the 'action' field will be applied without any rule checks for the source.
func (o RuleResponseOutput) Sources() SourceResponseArrayOutput {
	return o.ApplyT(func(v RuleResponse) []SourceResponse { return v.Sources }).(SourceResponseArrayOutput)
}

type RuleResponseArrayOutput struct{ *pulumi.OutputState }

func (RuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleResponse)(nil)).Elem()
}

func (o RuleResponseArrayOutput) ToRuleResponseArrayOutput() RuleResponseArrayOutput {
	return o
}

func (o RuleResponseArrayOutput) ToRuleResponseArrayOutputWithContext(ctx context.Context) RuleResponseArrayOutput {
	return o
}

func (o RuleResponseArrayOutput) Index(i pulumi.IntInput) RuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleResponse {
		return vs[0].([]RuleResponse)[vs[1].(int)]
	}).(RuleResponseOutput)
}

// Specification of traffic source attributes.
type Source struct {
	// Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.
	IpBlocks []string `pulumi:"ipBlocks"`
	// Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
	Principals []string `pulumi:"principals"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//	SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Specification of traffic source attributes.
type SourceArgs struct {
	// Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.
	IpBlocks pulumi.StringArrayInput `pulumi:"ipBlocks"`
	// Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
	Principals pulumi.StringArrayInput `pulumi:"principals"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

// SourceArrayInput is an input type that accepts SourceArray and SourceArrayOutput values.
// You can construct a concrete instance of `SourceArrayInput` via:
//
//	SourceArray{ SourceArgs{...} }
type SourceArrayInput interface {
	pulumi.Input

	ToSourceArrayOutput() SourceArrayOutput
	ToSourceArrayOutputWithContext(context.Context) SourceArrayOutput
}

type SourceArray []SourceInput

func (SourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Source)(nil)).Elem()
}

func (i SourceArray) ToSourceArrayOutput() SourceArrayOutput {
	return i.ToSourceArrayOutputWithContext(context.Background())
}

func (i SourceArray) ToSourceArrayOutputWithContext(ctx context.Context) SourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceArrayOutput)
}

// Specification of traffic source attributes.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

// Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.
func (o SourceOutput) IpBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Source) []string { return v.IpBlocks }).(pulumi.StringArrayOutput)
}

// Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
func (o SourceOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Source) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type SourceArrayOutput struct{ *pulumi.OutputState }

func (SourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Source)(nil)).Elem()
}

func (o SourceArrayOutput) ToSourceArrayOutput() SourceArrayOutput {
	return o
}

func (o SourceArrayOutput) ToSourceArrayOutputWithContext(ctx context.Context) SourceArrayOutput {
	return o
}

func (o SourceArrayOutput) Index(i pulumi.IntInput) SourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Source {
		return vs[0].([]Source)[vs[1].(int)]
	}).(SourceOutput)
}

// Specification of traffic source attributes.
type SourceResponse struct {
	// Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.
	IpBlocks []string `pulumi:"ipBlocks"`
	// Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
	Principals []string `pulumi:"principals"`
}

// Specification of traffic source attributes.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

// Optional. List of CIDR ranges to match based on source IP address. At least one IP block should match. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported. Authorization based on source IP alone should be avoided. The IP addresses of any load balancers or proxies should be considered untrusted.
func (o SourceResponseOutput) IpBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceResponse) []string { return v.IpBlocks }).(pulumi.StringArrayOutput)
}

// Optional. List of peer identities to match for authorization. At least one principal should match. Each peer can be an exact match, or a prefix match (example, "namespace/*") or a suffix match (example, "*/service-account") or a presence match "*". Authorization based on the principal name without certificate validation (configured by ServerTlsPolicy resource) is considered insecure.
func (o SourceResponseOutput) Principals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SourceResponse) []string { return v.Principals }).(pulumi.StringArrayOutput)
}

type SourceResponseArrayOutput struct{ *pulumi.OutputState }

func (SourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SourceResponse)(nil)).Elem()
}

func (o SourceResponseArrayOutput) ToSourceResponseArrayOutput() SourceResponseArrayOutput {
	return o
}

func (o SourceResponseArrayOutput) ToSourceResponseArrayOutputWithContext(ctx context.Context) SourceResponseArrayOutput {
	return o
}

func (o SourceResponseArrayOutput) Index(i pulumi.IntInput) SourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SourceResponse {
		return vs[0].([]SourceResponse)[vs[1].(int)]
	}).(SourceResponseOutput)
}

// Specification of ValidationCA. Defines the mechanism to obtain the Certificate Authority certificate to validate the peer certificate.
type ValidationCA struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	CertificateProviderInstance *CertificateProviderInstance `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the CA certificate.
	GrpcEndpoint *GoogleCloudNetworksecurityV1GrpcEndpoint `pulumi:"grpcEndpoint"`
}

// ValidationCAInput is an input type that accepts ValidationCAArgs and ValidationCAOutput values.
// You can construct a concrete instance of `ValidationCAInput` via:
//
//	ValidationCAArgs{...}
type ValidationCAInput interface {
	pulumi.Input

	ToValidationCAOutput() ValidationCAOutput
	ToValidationCAOutputWithContext(context.Context) ValidationCAOutput
}

// Specification of ValidationCA. Defines the mechanism to obtain the Certificate Authority certificate to validate the peer certificate.
type ValidationCAArgs struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	CertificateProviderInstance CertificateProviderInstancePtrInput `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the CA certificate.
	GrpcEndpoint GoogleCloudNetworksecurityV1GrpcEndpointPtrInput `pulumi:"grpcEndpoint"`
}

func (ValidationCAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationCA)(nil)).Elem()
}

func (i ValidationCAArgs) ToValidationCAOutput() ValidationCAOutput {
	return i.ToValidationCAOutputWithContext(context.Background())
}

func (i ValidationCAArgs) ToValidationCAOutputWithContext(ctx context.Context) ValidationCAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationCAOutput)
}

// ValidationCAArrayInput is an input type that accepts ValidationCAArray and ValidationCAArrayOutput values.
// You can construct a concrete instance of `ValidationCAArrayInput` via:
//
//	ValidationCAArray{ ValidationCAArgs{...} }
type ValidationCAArrayInput interface {
	pulumi.Input

	ToValidationCAArrayOutput() ValidationCAArrayOutput
	ToValidationCAArrayOutputWithContext(context.Context) ValidationCAArrayOutput
}

type ValidationCAArray []ValidationCAInput

func (ValidationCAArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationCA)(nil)).Elem()
}

func (i ValidationCAArray) ToValidationCAArrayOutput() ValidationCAArrayOutput {
	return i.ToValidationCAArrayOutputWithContext(context.Background())
}

func (i ValidationCAArray) ToValidationCAArrayOutputWithContext(ctx context.Context) ValidationCAArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ValidationCAArrayOutput)
}

// Specification of ValidationCA. Defines the mechanism to obtain the Certificate Authority certificate to validate the peer certificate.
type ValidationCAOutput struct{ *pulumi.OutputState }

func (ValidationCAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationCA)(nil)).Elem()
}

func (o ValidationCAOutput) ToValidationCAOutput() ValidationCAOutput {
	return o
}

func (o ValidationCAOutput) ToValidationCAOutputWithContext(ctx context.Context) ValidationCAOutput {
	return o
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
func (o ValidationCAOutput) CertificateProviderInstance() CertificateProviderInstancePtrOutput {
	return o.ApplyT(func(v ValidationCA) *CertificateProviderInstance { return v.CertificateProviderInstance }).(CertificateProviderInstancePtrOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the CA certificate.
func (o ValidationCAOutput) GrpcEndpoint() GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput {
	return o.ApplyT(func(v ValidationCA) *GoogleCloudNetworksecurityV1GrpcEndpoint { return v.GrpcEndpoint }).(GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput)
}

type ValidationCAArrayOutput struct{ *pulumi.OutputState }

func (ValidationCAArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationCA)(nil)).Elem()
}

func (o ValidationCAArrayOutput) ToValidationCAArrayOutput() ValidationCAArrayOutput {
	return o
}

func (o ValidationCAArrayOutput) ToValidationCAArrayOutputWithContext(ctx context.Context) ValidationCAArrayOutput {
	return o
}

func (o ValidationCAArrayOutput) Index(i pulumi.IntInput) ValidationCAOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidationCA {
		return vs[0].([]ValidationCA)[vs[1].(int)]
	}).(ValidationCAOutput)
}

// Specification of ValidationCA. Defines the mechanism to obtain the Certificate Authority certificate to validate the peer certificate.
type ValidationCAResponse struct {
	// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
	CertificateProviderInstance CertificateProviderInstanceResponse `pulumi:"certificateProviderInstance"`
	// gRPC specific configuration to access the gRPC server to obtain the CA certificate.
	GrpcEndpoint GoogleCloudNetworksecurityV1GrpcEndpointResponse `pulumi:"grpcEndpoint"`
}

// Specification of ValidationCA. Defines the mechanism to obtain the Certificate Authority certificate to validate the peer certificate.
type ValidationCAResponseOutput struct{ *pulumi.OutputState }

func (ValidationCAResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ValidationCAResponse)(nil)).Elem()
}

func (o ValidationCAResponseOutput) ToValidationCAResponseOutput() ValidationCAResponseOutput {
	return o
}

func (o ValidationCAResponseOutput) ToValidationCAResponseOutputWithContext(ctx context.Context) ValidationCAResponseOutput {
	return o
}

// The certificate provider instance specification that will be passed to the data plane, which will be used to load necessary credential information.
func (o ValidationCAResponseOutput) CertificateProviderInstance() CertificateProviderInstanceResponseOutput {
	return o.ApplyT(func(v ValidationCAResponse) CertificateProviderInstanceResponse { return v.CertificateProviderInstance }).(CertificateProviderInstanceResponseOutput)
}

// gRPC specific configuration to access the gRPC server to obtain the CA certificate.
func (o ValidationCAResponseOutput) GrpcEndpoint() GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput {
	return o.ApplyT(func(v ValidationCAResponse) GoogleCloudNetworksecurityV1GrpcEndpointResponse { return v.GrpcEndpoint }).(GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput)
}

type ValidationCAResponseArrayOutput struct{ *pulumi.OutputState }

func (ValidationCAResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ValidationCAResponse)(nil)).Elem()
}

func (o ValidationCAResponseArrayOutput) ToValidationCAResponseArrayOutput() ValidationCAResponseArrayOutput {
	return o
}

func (o ValidationCAResponseArrayOutput) ToValidationCAResponseArrayOutputWithContext(ctx context.Context) ValidationCAResponseArrayOutput {
	return o
}

func (o ValidationCAResponseArrayOutput) Index(i pulumi.IntInput) ValidationCAResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ValidationCAResponse {
		return vs[0].([]ValidationCAResponse)[vs[1].(int)]
	}).(ValidationCAResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateProviderInstanceInput)(nil)).Elem(), CertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateProviderInstancePtrInput)(nil)).Elem(), CertificateProviderInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationInput)(nil)).Elem(), DestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationArrayInput)(nil)).Elem(), DestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudNetworksecurityV1CertificateProviderInput)(nil)).Elem(), GoogleCloudNetworksecurityV1CertificateProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudNetworksecurityV1CertificateProviderPtrInput)(nil)).Elem(), GoogleCloudNetworksecurityV1CertificateProviderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudNetworksecurityV1GrpcEndpointInput)(nil)).Elem(), GoogleCloudNetworksecurityV1GrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudNetworksecurityV1GrpcEndpointPtrInput)(nil)).Elem(), GoogleCloudNetworksecurityV1GrpcEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigInput)(nil)).Elem(), GoogleIamV1AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1AuditLogConfigArrayInput)(nil)).Elem(), GoogleIamV1AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingInput)(nil)).Elem(), GoogleIamV1BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleIamV1BindingArrayInput)(nil)).Elem(), GoogleIamV1BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpHeaderMatchInput)(nil)).Elem(), HttpHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpHeaderMatchPtrInput)(nil)).Elem(), HttpHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MTLSPolicyInput)(nil)).Elem(), MTLSPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MTLSPolicyPtrInput)(nil)).Elem(), MTLSPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), RuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleArrayInput)(nil)).Elem(), RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceArrayInput)(nil)).Elem(), SourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationCAInput)(nil)).Elem(), ValidationCAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ValidationCAArrayInput)(nil)).Elem(), ValidationCAArray{})
	pulumi.RegisterOutputType(CertificateProviderInstanceOutput{})
	pulumi.RegisterOutputType(CertificateProviderInstancePtrOutput{})
	pulumi.RegisterOutputType(CertificateProviderInstanceResponseOutput{})
	pulumi.RegisterOutputType(DestinationOutput{})
	pulumi.RegisterOutputType(DestinationArrayOutput{})
	pulumi.RegisterOutputType(DestinationResponseOutput{})
	pulumi.RegisterOutputType(DestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudNetworksecurityV1CertificateProviderOutput{})
	pulumi.RegisterOutputType(GoogleCloudNetworksecurityV1CertificateProviderPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudNetworksecurityV1CertificateProviderResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudNetworksecurityV1GrpcEndpointOutput{})
	pulumi.RegisterOutputType(GoogleCloudNetworksecurityV1GrpcEndpointPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudNetworksecurityV1GrpcEndpointResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingArrayOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseOutput{})
	pulumi.RegisterOutputType(GoogleIamV1BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpHeaderMatchOutput{})
	pulumi.RegisterOutputType(HttpHeaderMatchPtrOutput{})
	pulumi.RegisterOutputType(HttpHeaderMatchResponseOutput{})
	pulumi.RegisterOutputType(MTLSPolicyOutput{})
	pulumi.RegisterOutputType(MTLSPolicyPtrOutput{})
	pulumi.RegisterOutputType(MTLSPolicyResponseOutput{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleResponseOutput{})
	pulumi.RegisterOutputType(RuleResponseArrayOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourceArrayOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(SourceResponseArrayOutput{})
	pulumi.RegisterOutputType(ValidationCAOutput{})
	pulumi.RegisterOutputType(ValidationCAArrayOutput{})
	pulumi.RegisterOutputType(ValidationCAResponseOutput{})
	pulumi.RegisterOutputType(ValidationCAResponseArrayOutput{})
}
