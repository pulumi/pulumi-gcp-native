// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new GatewaySecurityPolicy in a given project and location.
// Auto-naming is currently not supported for this resource.
type Rule struct {
	pulumi.CustomResourceState

	// Optional. CEL expression for matching on L7/application level criteria.
	ApplicationMatcher pulumi.StringOutput `pulumi:"applicationMatcher"`
	// Profile which tells what the primitive action should be.
	BasicProfile pulumi.StringOutput `pulumi:"basicProfile"`
	// Time when the rule was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Free-text description of the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the rule is enforced.
	Enabled                 pulumi.BoolOutput   `pulumi:"enabled"`
	GatewaySecurityPolicyId pulumi.StringOutput `pulumi:"gatewaySecurityPolicyId"`
	// The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
	GatewaySecurityPolicyRuleId pulumi.StringPtrOutput `pulumi:"gatewaySecurityPolicyRuleId"`
	Location                    pulumi.StringOutput    `pulumi:"location"`
	// Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
	Name pulumi.StringOutput `pulumi:"name"`
	// Priority of the rule. Lower number corresponds to higher precedence.
	Priority pulumi.IntOutput    `pulumi:"priority"`
	Project  pulumi.StringOutput `pulumi:"project"`
	// CEL expression for matching on session criteria.
	SessionMatcher pulumi.StringOutput `pulumi:"sessionMatcher"`
	// Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
	TlsInspectionEnabled pulumi.BoolOutput `pulumi:"tlsInspectionEnabled"`
	// Time when the rule was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BasicProfile == nil {
		return nil, errors.New("invalid value for required argument 'BasicProfile'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.GatewaySecurityPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'GatewaySecurityPolicyId'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.SessionMatcher == nil {
		return nil, errors.New("invalid value for required argument 'SessionMatcher'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"gatewaySecurityPolicyId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("google-native:networksecurity/v1:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("google-native:networksecurity/v1:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
}

type RuleState struct {
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// Optional. CEL expression for matching on L7/application level criteria.
	ApplicationMatcher *string `pulumi:"applicationMatcher"`
	// Profile which tells what the primitive action should be.
	BasicProfile RuleBasicProfile `pulumi:"basicProfile"`
	// Optional. Free-text description of the resource.
	Description *string `pulumi:"description"`
	// Whether the rule is enforced.
	Enabled                 bool   `pulumi:"enabled"`
	GatewaySecurityPolicyId string `pulumi:"gatewaySecurityPolicyId"`
	// The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
	GatewaySecurityPolicyRuleId *string `pulumi:"gatewaySecurityPolicyRuleId"`
	Location                    *string `pulumi:"location"`
	// Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
	Name string `pulumi:"name"`
	// Priority of the rule. Lower number corresponds to higher precedence.
	Priority int     `pulumi:"priority"`
	Project  *string `pulumi:"project"`
	// CEL expression for matching on session criteria.
	SessionMatcher string `pulumi:"sessionMatcher"`
	// Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
	TlsInspectionEnabled *bool `pulumi:"tlsInspectionEnabled"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// Optional. CEL expression for matching on L7/application level criteria.
	ApplicationMatcher pulumi.StringPtrInput
	// Profile which tells what the primitive action should be.
	BasicProfile RuleBasicProfileInput
	// Optional. Free-text description of the resource.
	Description pulumi.StringPtrInput
	// Whether the rule is enforced.
	Enabled                 pulumi.BoolInput
	GatewaySecurityPolicyId pulumi.StringInput
	// The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
	GatewaySecurityPolicyRuleId pulumi.StringPtrInput
	Location                    pulumi.StringPtrInput
	// Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
	Name pulumi.StringInput
	// Priority of the rule. Lower number corresponds to higher precedence.
	Priority pulumi.IntInput
	Project  pulumi.StringPtrInput
	// CEL expression for matching on session criteria.
	SessionMatcher pulumi.StringInput
	// Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
	TlsInspectionEnabled pulumi.BoolPtrInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

func (i *Rule) ToOutput(ctx context.Context) pulumix.Output[*Rule] {
	return pulumix.Output[*Rule]{
		OutputState: i.ToRuleOutputWithContext(ctx).OutputState,
	}
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

func (o RuleOutput) ToOutput(ctx context.Context) pulumix.Output[*Rule] {
	return pulumix.Output[*Rule]{
		OutputState: o.OutputState,
	}
}

// Optional. CEL expression for matching on L7/application level criteria.
func (o RuleOutput) ApplicationMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.ApplicationMatcher }).(pulumi.StringOutput)
}

// Profile which tells what the primitive action should be.
func (o RuleOutput) BasicProfile() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.BasicProfile }).(pulumi.StringOutput)
}

// Time when the rule was created.
func (o RuleOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Free-text description of the resource.
func (o RuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether the rule is enforced.
func (o RuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Rule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o RuleOutput) GatewaySecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.GatewaySecurityPolicyId }).(pulumi.StringOutput)
}

// The ID to use for the rule, which will become the final component of the rule's resource name. This value should be 4-63 characters, and valid characters are /a-z-/.
func (o RuleOutput) GatewaySecurityPolicyRuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringPtrOutput { return v.GatewaySecurityPolicyRuleId }).(pulumi.StringPtrOutput)
}

func (o RuleOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).
func (o RuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Priority of the rule. Lower number corresponds to higher precedence.
func (o RuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Rule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o RuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// CEL expression for matching on session criteria.
func (o RuleOutput) SessionMatcher() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.SessionMatcher }).(pulumi.StringOutput)
}

// Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.
func (o RuleOutput) TlsInspectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Rule) pulumi.BoolOutput { return v.TlsInspectionEnabled }).(pulumi.BoolOutput)
}

// Time when the rule was updated.
func (o RuleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterOutputType(RuleOutput{})
}
