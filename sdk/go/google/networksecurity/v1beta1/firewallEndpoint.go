// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new FirewallEndpoint in a given project and location.
// Auto-naming is currently not supported for this resource.
type FirewallEndpoint struct {
	pulumi.CustomResourceState

	// List of networks that are associated with this endpoint in the local zone. This is a projection of the FirewallEndpointAssociations pointing at this endpoint. A network will only appear in this list after traffic routing is fully configured. Format: projects/{project}/global/networks/{name}.
	AssociatedNetworks pulumi.StringArrayOutput `pulumi:"associatedNetworks"`
	// Optional. Project to bill on endpoint uptime usage.
	BillingProjectId pulumi.StringOutput `pulumi:"billingProjectId"`
	// Create time stamp
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Description of the firewall endpoint. Max length 2048 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and firewall_endpoint_id from the method_signature of Create RPC.
	FirewallEndpointId pulumi.StringOutput `pulumi:"firewallEndpointId"`
	// Optional. Labels as key value pairs
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// name of resource
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// Whether reconciling is in progress, recommended per https://google.aip.dev/128.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Current state of the endpoint.
	State pulumi.StringOutput `pulumi:"state"`
	// Update time stamp
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFirewallEndpoint registers a new resource with the given unique name, arguments, and options.
func NewFirewallEndpoint(ctx *pulumi.Context,
	name string, args *FirewallEndpointArgs, opts ...pulumi.ResourceOption) (*FirewallEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FirewallEndpointId == nil {
		return nil, errors.New("invalid value for required argument 'FirewallEndpointId'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"firewallEndpointId",
		"location",
		"organizationId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallEndpoint
	err := ctx.RegisterResource("google-native:networksecurity/v1beta1:FirewallEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallEndpoint gets an existing FirewallEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallEndpointState, opts ...pulumi.ResourceOption) (*FirewallEndpoint, error) {
	var resource FirewallEndpoint
	err := ctx.ReadResource("google-native:networksecurity/v1beta1:FirewallEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallEndpoint resources.
type firewallEndpointState struct {
}

type FirewallEndpointState struct {
}

func (FirewallEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallEndpointState)(nil)).Elem()
}

type firewallEndpointArgs struct {
	// Optional. Project to bill on endpoint uptime usage.
	BillingProjectId *string `pulumi:"billingProjectId"`
	// Optional. Description of the firewall endpoint. Max length 2048 characters.
	Description *string `pulumi:"description"`
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and firewall_endpoint_id from the method_signature of Create RPC.
	FirewallEndpointId string `pulumi:"firewallEndpointId"`
	// Optional. Labels as key value pairs
	Labels         map[string]string `pulumi:"labels"`
	Location       *string           `pulumi:"location"`
	OrganizationId string            `pulumi:"organizationId"`
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
}

// The set of arguments for constructing a FirewallEndpoint resource.
type FirewallEndpointArgs struct {
	// Optional. Project to bill on endpoint uptime usage.
	BillingProjectId pulumi.StringPtrInput
	// Optional. Description of the firewall endpoint. Max length 2048 characters.
	Description pulumi.StringPtrInput
	// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and firewall_endpoint_id from the method_signature of Create RPC.
	FirewallEndpointId pulumi.StringInput
	// Optional. Labels as key value pairs
	Labels         pulumi.StringMapInput
	Location       pulumi.StringPtrInput
	OrganizationId pulumi.StringInput
	// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
}

func (FirewallEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallEndpointArgs)(nil)).Elem()
}

type FirewallEndpointInput interface {
	pulumi.Input

	ToFirewallEndpointOutput() FirewallEndpointOutput
	ToFirewallEndpointOutputWithContext(ctx context.Context) FirewallEndpointOutput
}

func (*FirewallEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallEndpoint)(nil)).Elem()
}

func (i *FirewallEndpoint) ToFirewallEndpointOutput() FirewallEndpointOutput {
	return i.ToFirewallEndpointOutputWithContext(context.Background())
}

func (i *FirewallEndpoint) ToFirewallEndpointOutputWithContext(ctx context.Context) FirewallEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallEndpointOutput)
}

type FirewallEndpointOutput struct{ *pulumi.OutputState }

func (FirewallEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallEndpoint)(nil)).Elem()
}

func (o FirewallEndpointOutput) ToFirewallEndpointOutput() FirewallEndpointOutput {
	return o
}

func (o FirewallEndpointOutput) ToFirewallEndpointOutputWithContext(ctx context.Context) FirewallEndpointOutput {
	return o
}

// List of networks that are associated with this endpoint in the local zone. This is a projection of the FirewallEndpointAssociations pointing at this endpoint. A network will only appear in this list after traffic routing is fully configured. Format: projects/{project}/global/networks/{name}.
func (o FirewallEndpointOutput) AssociatedNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringArrayOutput { return v.AssociatedNetworks }).(pulumi.StringArrayOutput)
}

// Optional. Project to bill on endpoint uptime usage.
func (o FirewallEndpointOutput) BillingProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.BillingProjectId }).(pulumi.StringOutput)
}

// Create time stamp
func (o FirewallEndpointOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Description of the firewall endpoint. Max length 2048 characters.
func (o FirewallEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Required. Id of the requesting object. If auto-generating Id server-side, remove this field and firewall_endpoint_id from the method_signature of Create RPC.
func (o FirewallEndpointOutput) FirewallEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.FirewallEndpointId }).(pulumi.StringOutput)
}

// Optional. Labels as key value pairs
func (o FirewallEndpointOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o FirewallEndpointOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// name of resource
func (o FirewallEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FirewallEndpointOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// Whether reconciling is in progress, recommended per https://google.aip.dev/128.
func (o FirewallEndpointOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
func (o FirewallEndpointOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Current state of the endpoint.
func (o FirewallEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Update time stamp
func (o FirewallEndpointOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallEndpoint) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallEndpointInput)(nil)).Elem(), &FirewallEndpoint{})
	pulumi.RegisterOutputType(FirewallEndpointOutput{})
}
