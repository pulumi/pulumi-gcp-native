// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single ClientTlsPolicy.
func LookupClientTlsPolicy(ctx *pulumi.Context, args *LookupClientTlsPolicyArgs, opts ...pulumi.InvokeOption) (*LookupClientTlsPolicyResult, error) {
	var rv LookupClientTlsPolicyResult
	err := ctx.Invoke("google-native:networksecurity/v1beta1:getClientTlsPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupClientTlsPolicyArgs struct {
	ClientTlsPolicyId string  `pulumi:"clientTlsPolicyId"`
	Location          string  `pulumi:"location"`
	Project           *string `pulumi:"project"`
}

type LookupClientTlsPolicyResult struct {
	// Optional. Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.
	ClientCertificate GoogleCloudNetworksecurityV1beta1CertificateProviderResponse `pulumi:"clientCertificate"`
	// The timestamp when the resource was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. Free-text description of the resource.
	Description string `pulumi:"description"`
	// Optional. Set of label tags associated with the resource.
	Labels map[string]string `pulumi:"labels"`
	// Name of the ClientTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/clientTlsPolicies/{client_tls_policy}`
	Name string `pulumi:"name"`
	// Optional. Defines the mechanism to obtain the Certificate Authority certificate to validate the server certificate. If empty, client does not validate the server certificate.
	ServerValidationCa []ValidationCAResponse `pulumi:"serverValidationCa"`
	// Optional. Server Name Indication string to present to the server during TLS handshake. E.g: "secure.example.com".
	Sni string `pulumi:"sni"`
	// The timestamp when the resource was updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupClientTlsPolicyOutput(ctx *pulumi.Context, args LookupClientTlsPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupClientTlsPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClientTlsPolicyResult, error) {
			args := v.(LookupClientTlsPolicyArgs)
			r, err := LookupClientTlsPolicy(ctx, &args, opts...)
			var s LookupClientTlsPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClientTlsPolicyResultOutput)
}

type LookupClientTlsPolicyOutputArgs struct {
	ClientTlsPolicyId pulumi.StringInput    `pulumi:"clientTlsPolicyId"`
	Location          pulumi.StringInput    `pulumi:"location"`
	Project           pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupClientTlsPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClientTlsPolicyArgs)(nil)).Elem()
}

type LookupClientTlsPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupClientTlsPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClientTlsPolicyResult)(nil)).Elem()
}

func (o LookupClientTlsPolicyResultOutput) ToLookupClientTlsPolicyResultOutput() LookupClientTlsPolicyResultOutput {
	return o
}

func (o LookupClientTlsPolicyResultOutput) ToLookupClientTlsPolicyResultOutputWithContext(ctx context.Context) LookupClientTlsPolicyResultOutput {
	return o
}

// Optional. Defines a mechanism to provision client identity (public and private keys) for peer to peer authentication. The presence of this dictates mTLS.
func (o LookupClientTlsPolicyResultOutput) ClientCertificate() GoogleCloudNetworksecurityV1beta1CertificateProviderResponseOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) GoogleCloudNetworksecurityV1beta1CertificateProviderResponse {
		return v.ClientCertificate
	}).(GoogleCloudNetworksecurityV1beta1CertificateProviderResponseOutput)
}

// The timestamp when the resource was created.
func (o LookupClientTlsPolicyResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. Free-text description of the resource.
func (o LookupClientTlsPolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. Set of label tags associated with the resource.
func (o LookupClientTlsPolicyResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the ClientTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/clientTlsPolicies/{client_tls_policy}`
func (o LookupClientTlsPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Defines the mechanism to obtain the Certificate Authority certificate to validate the server certificate. If empty, client does not validate the server certificate.
func (o LookupClientTlsPolicyResultOutput) ServerValidationCa() ValidationCAResponseArrayOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) []ValidationCAResponse { return v.ServerValidationCa }).(ValidationCAResponseArrayOutput)
}

// Optional. Server Name Indication string to present to the server during TLS handshake. E.g: "secure.example.com".
func (o LookupClientTlsPolicyResultOutput) Sni() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) string { return v.Sni }).(pulumi.StringOutput)
}

// The timestamp when the resource was updated.
func (o LookupClientTlsPolicyResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClientTlsPolicyResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClientTlsPolicyResultOutput{})
}
