// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new ServerTlsPolicy in a given project and location.
type ServerTlsPolicy struct {
	pulumi.CustomResourceState

	//  Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility.
	AllowOpen pulumi.BoolOutput `pulumi:"allowOpen"`
	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Free-text description of the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Set of label tags associated with the resource.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	//  Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections.
	MtlsPolicy MTLSPolicyResponseOutput `pulumi:"mtlsPolicy"`
	// Name of the ServerTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/serverTlsPolicies/{server_tls_policy}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	//  Defines a mechanism to provision server identity (public and private keys). Cannot be combined with `allow_open` as a permissive mode that allows both plain text and TLS is not supported.
	ServerCertificate GoogleCloudNetworksecurityV1beta1CertificateProviderResponseOutput `pulumi:"serverCertificate"`
	// Required. Short name of the ServerTlsPolicy resource to be created. This value should be 1-63 characters long, containing only letters, numbers, hyphens, and underscores, and should not start with a number. E.g. "server_mtls_policy".
	ServerTlsPolicyId pulumi.StringOutput `pulumi:"serverTlsPolicyId"`
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewServerTlsPolicy registers a new resource with the given unique name, arguments, and options.
func NewServerTlsPolicy(ctx *pulumi.Context,
	name string, args *ServerTlsPolicyArgs, opts ...pulumi.ResourceOption) (*ServerTlsPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServerTlsPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'ServerTlsPolicyId'")
	}
	var resource ServerTlsPolicy
	err := ctx.RegisterResource("google-native:networksecurity/v1beta1:ServerTlsPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerTlsPolicy gets an existing ServerTlsPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerTlsPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerTlsPolicyState, opts ...pulumi.ResourceOption) (*ServerTlsPolicy, error) {
	var resource ServerTlsPolicy
	err := ctx.ReadResource("google-native:networksecurity/v1beta1:ServerTlsPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerTlsPolicy resources.
type serverTlsPolicyState struct {
}

type ServerTlsPolicyState struct {
}

func (ServerTlsPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverTlsPolicyState)(nil)).Elem()
}

type serverTlsPolicyArgs struct {
	//  Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility.
	AllowOpen *bool `pulumi:"allowOpen"`
	// Free-text description of the resource.
	Description *string `pulumi:"description"`
	// Set of label tags associated with the resource.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	//  Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections.
	MtlsPolicy *MTLSPolicy `pulumi:"mtlsPolicy"`
	// Name of the ServerTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/serverTlsPolicies/{server_tls_policy}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	//  Defines a mechanism to provision server identity (public and private keys). Cannot be combined with `allow_open` as a permissive mode that allows both plain text and TLS is not supported.
	ServerCertificate *GoogleCloudNetworksecurityV1beta1CertificateProvider `pulumi:"serverCertificate"`
	// Required. Short name of the ServerTlsPolicy resource to be created. This value should be 1-63 characters long, containing only letters, numbers, hyphens, and underscores, and should not start with a number. E.g. "server_mtls_policy".
	ServerTlsPolicyId string `pulumi:"serverTlsPolicyId"`
}

// The set of arguments for constructing a ServerTlsPolicy resource.
type ServerTlsPolicyArgs struct {
	//  Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility.
	AllowOpen pulumi.BoolPtrInput
	// Free-text description of the resource.
	Description pulumi.StringPtrInput
	// Set of label tags associated with the resource.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	//  Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections.
	MtlsPolicy MTLSPolicyPtrInput
	// Name of the ServerTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/serverTlsPolicies/{server_tls_policy}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	//  Defines a mechanism to provision server identity (public and private keys). Cannot be combined with `allow_open` as a permissive mode that allows both plain text and TLS is not supported.
	ServerCertificate GoogleCloudNetworksecurityV1beta1CertificateProviderPtrInput
	// Required. Short name of the ServerTlsPolicy resource to be created. This value should be 1-63 characters long, containing only letters, numbers, hyphens, and underscores, and should not start with a number. E.g. "server_mtls_policy".
	ServerTlsPolicyId pulumi.StringInput
}

func (ServerTlsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverTlsPolicyArgs)(nil)).Elem()
}

type ServerTlsPolicyInput interface {
	pulumi.Input

	ToServerTlsPolicyOutput() ServerTlsPolicyOutput
	ToServerTlsPolicyOutputWithContext(ctx context.Context) ServerTlsPolicyOutput
}

func (*ServerTlsPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicy)(nil)).Elem()
}

func (i *ServerTlsPolicy) ToServerTlsPolicyOutput() ServerTlsPolicyOutput {
	return i.ToServerTlsPolicyOutputWithContext(context.Background())
}

func (i *ServerTlsPolicy) ToServerTlsPolicyOutputWithContext(ctx context.Context) ServerTlsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerTlsPolicyOutput)
}

type ServerTlsPolicyOutput struct{ *pulumi.OutputState }

func (ServerTlsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerTlsPolicy)(nil)).Elem()
}

func (o ServerTlsPolicyOutput) ToServerTlsPolicyOutput() ServerTlsPolicyOutput {
	return o
}

func (o ServerTlsPolicyOutput) ToServerTlsPolicyOutputWithContext(ctx context.Context) ServerTlsPolicyOutput {
	return o
}

//  Determines if server allows plaintext connections. If set to true, server allows plain text connections. By default, it is set to false. This setting is not exclusive of other encryption modes. For example, if `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections. See documentation of other encryption modes to confirm compatibility.
func (o ServerTlsPolicyOutput) AllowOpen() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.BoolOutput { return v.AllowOpen }).(pulumi.BoolOutput)
}

// The timestamp when the resource was created.
func (o ServerTlsPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Free-text description of the resource.
func (o ServerTlsPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Set of label tags associated with the resource.
func (o ServerTlsPolicyOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ServerTlsPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

//  Defines a mechanism to provision peer validation certificates for peer to peer authentication (Mutual TLS - mTLS). If not specified, client certificate will not be requested. The connection is treated as TLS and not mTLS. If `allow_open` and `mtls_policy` are set, server allows both plain text and mTLS connections.
func (o ServerTlsPolicyOutput) MtlsPolicy() MTLSPolicyResponseOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) MTLSPolicyResponseOutput { return v.MtlsPolicy }).(MTLSPolicyResponseOutput)
}

// Name of the ServerTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/serverTlsPolicies/{server_tls_policy}`
func (o ServerTlsPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServerTlsPolicyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

//  Defines a mechanism to provision server identity (public and private keys). Cannot be combined with `allow_open` as a permissive mode that allows both plain text and TLS is not supported.
func (o ServerTlsPolicyOutput) ServerCertificate() GoogleCloudNetworksecurityV1beta1CertificateProviderResponseOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) GoogleCloudNetworksecurityV1beta1CertificateProviderResponseOutput {
		return v.ServerCertificate
	}).(GoogleCloudNetworksecurityV1beta1CertificateProviderResponseOutput)
}

// Required. Short name of the ServerTlsPolicy resource to be created. This value should be 1-63 characters long, containing only letters, numbers, hyphens, and underscores, and should not start with a number. E.g. "server_mtls_policy".
func (o ServerTlsPolicyOutput) ServerTlsPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringOutput { return v.ServerTlsPolicyId }).(pulumi.StringOutput)
}

// The timestamp when the resource was updated.
func (o ServerTlsPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerTlsPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerTlsPolicyInput)(nil)).Elem(), &ServerTlsPolicy{})
	pulumi.RegisterOutputType(ServerTlsPolicyOutput{})
}
