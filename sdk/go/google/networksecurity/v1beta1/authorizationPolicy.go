// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new AuthorizationPolicy in a given project and location.
type AuthorizationPolicy struct {
	pulumi.CustomResourceState

	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	Action pulumi.StringOutput `pulumi:"action"`
	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. Free-text description of the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. Set of label tags associated with the AuthorizationPolicy resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
	Rules RuleResponseArrayOutput `pulumi:"rules"`
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAuthorizationPolicy registers a new resource with the given unique name, arguments, and options.
func NewAuthorizationPolicy(ctx *pulumi.Context,
	name string, args *AuthorizationPolicyArgs, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.AuthorizationPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizationPolicyId'")
	}
	var resource AuthorizationPolicy
	err := ctx.RegisterResource("google-native:networksecurity/v1beta1:AuthorizationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorizationPolicy gets an existing AuthorizationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorizationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationPolicyState, opts ...pulumi.ResourceOption) (*AuthorizationPolicy, error) {
	var resource AuthorizationPolicy
	err := ctx.ReadResource("google-native:networksecurity/v1beta1:AuthorizationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthorizationPolicy resources.
type authorizationPolicyState struct {
}

type AuthorizationPolicyState struct {
}

func (AuthorizationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyState)(nil)).Elem()
}

type authorizationPolicyArgs struct {
	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	Action AuthorizationPolicyAction `pulumi:"action"`
	// Required. Short name of the AuthorizationPolicy resource to be created. This value should be 1-63 characters long, containing only letters, numbers, hyphens, and underscores, and should not start with a number. E.g. "authz_policy".
	AuthorizationPolicyId string `pulumi:"authorizationPolicyId"`
	// Optional. Free-text description of the resource.
	Description *string `pulumi:"description"`
	// Optional. Set of label tags associated with the AuthorizationPolicy resource.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
	Rules []Rule `pulumi:"rules"`
}

// The set of arguments for constructing a AuthorizationPolicy resource.
type AuthorizationPolicyArgs struct {
	// The action to take when a rule match is found. Possible values are "ALLOW" or "DENY".
	Action AuthorizationPolicyActionInput
	// Required. Short name of the AuthorizationPolicy resource to be created. This value should be 1-63 characters long, containing only letters, numbers, hyphens, and underscores, and should not start with a number. E.g. "authz_policy".
	AuthorizationPolicyId pulumi.StringInput
	// Optional. Free-text description of the resource.
	Description pulumi.StringPtrInput
	// Optional. Set of label tags associated with the AuthorizationPolicy resource.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Name of the AuthorizationPolicy resource. It matches pattern `projects/{project}/locations/{location}/authorizationPolicies/`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Optional. List of rules to match. Note that at least one of the rules must match in order for the action specified in the 'action' field to be taken. A rule is a match if there is a matching source and destination. If left blank, the action specified in the `action` field will be applied on every request.
	Rules RuleArrayInput
}

func (AuthorizationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationPolicyArgs)(nil)).Elem()
}

type AuthorizationPolicyInput interface {
	pulumi.Input

	ToAuthorizationPolicyOutput() AuthorizationPolicyOutput
	ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput
}

func (*AuthorizationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return i.ToAuthorizationPolicyOutputWithContext(context.Background())
}

func (i *AuthorizationPolicy) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationPolicyOutput)
}

type AuthorizationPolicyOutput struct{ *pulumi.OutputState }

func (AuthorizationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthorizationPolicy)(nil)).Elem()
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutput() AuthorizationPolicyOutput {
	return o
}

func (o AuthorizationPolicyOutput) ToAuthorizationPolicyOutputWithContext(ctx context.Context) AuthorizationPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationPolicyInput)(nil)).Elem(), &AuthorizationPolicy{})
	pulumi.RegisterOutputType(AuthorizationPolicyOutput{})
}
