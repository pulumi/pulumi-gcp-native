// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Required. The App Check enforcement mode for this resource. This will override the EnforcementMode setting on the service. For new resources that you are creating, you should consider setting an override and enable enforcement on the resource immediately, if there are no outdated clients that can use it.
type ResourcePolicyEnforcementMode string

const (
	// Firebase App Check is not enforced for the service, nor are App Check metrics collected. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced. An unconfigured service is in this mode by default. Note that resource policies behave slightly differently as an unconfigured resource policy means that the resource will inherit the EnforcementMode configured for the service it belongs to and will not be considered as being in OFF mode by default.
	ResourcePolicyEnforcementModeOff = ResourcePolicyEnforcementMode("OFF")
	// Firebase App Check is not enforced for the service. App Check metrics are collected to help you decide when to turn on enforcement for the service. Though the service is not protected by App Check in this mode, other applicable protections, such as user authorization, are still enforced. Some services require certain conditions to be met before they will work with App Check, such as requiring you to upgrade to a specific service tier. Until those requirements are met for a service, this `UNENFORCED` setting will have no effect and App Check will not work with that service.
	ResourcePolicyEnforcementModeUnenforced = ResourcePolicyEnforcementMode("UNENFORCED")
	// Firebase App Check is enforced for the service. The service will reject any request that attempts to access your project's resources if it does not have valid App Check token attached, with some exceptions depending on the service; for example, some services will still allow requests bearing the developer's privileged service account credentials without an App Check token. App Check metrics continue to be collected to help you detect issues with your App Check integration and monitor the composition of your callers. While the service is protected by App Check, other applicable protections, such as user authorization, continue to be enforced at the same time. Use caution when choosing to enforce App Check on a Firebase service. If your users have not updated to an App Check capable version of your app, their apps will no longer be able to use your Firebase services that are enforcing App Check. App Check metrics can help you decide whether to enforce App Check on your Firebase services. If your app has not launched yet, you should enable enforcement immediately, since there are no outdated clients in use. Some services require certain conditions to be met before they will work with App Check, such as requiring you to upgrade to a specific service tier. Until those requirements are met for a service, this `ENFORCED` setting will have no effect and App Check will not work with that service.
	ResourcePolicyEnforcementModeEnforced = ResourcePolicyEnforcementMode("ENFORCED")
)

func (ResourcePolicyEnforcementMode) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyEnforcementMode)(nil)).Elem()
}

func (e ResourcePolicyEnforcementMode) ToResourcePolicyEnforcementModeOutput() ResourcePolicyEnforcementModeOutput {
	return pulumi.ToOutput(e).(ResourcePolicyEnforcementModeOutput)
}

func (e ResourcePolicyEnforcementMode) ToResourcePolicyEnforcementModeOutputWithContext(ctx context.Context) ResourcePolicyEnforcementModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourcePolicyEnforcementModeOutput)
}

func (e ResourcePolicyEnforcementMode) ToResourcePolicyEnforcementModePtrOutput() ResourcePolicyEnforcementModePtrOutput {
	return e.ToResourcePolicyEnforcementModePtrOutputWithContext(context.Background())
}

func (e ResourcePolicyEnforcementMode) ToResourcePolicyEnforcementModePtrOutputWithContext(ctx context.Context) ResourcePolicyEnforcementModePtrOutput {
	return ResourcePolicyEnforcementMode(e).ToResourcePolicyEnforcementModeOutputWithContext(ctx).ToResourcePolicyEnforcementModePtrOutputWithContext(ctx)
}

func (e ResourcePolicyEnforcementMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyEnforcementMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourcePolicyEnforcementMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourcePolicyEnforcementMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourcePolicyEnforcementModeOutput struct{ *pulumi.OutputState }

func (ResourcePolicyEnforcementModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcePolicyEnforcementMode)(nil)).Elem()
}

func (o ResourcePolicyEnforcementModeOutput) ToResourcePolicyEnforcementModeOutput() ResourcePolicyEnforcementModeOutput {
	return o
}

func (o ResourcePolicyEnforcementModeOutput) ToResourcePolicyEnforcementModeOutputWithContext(ctx context.Context) ResourcePolicyEnforcementModeOutput {
	return o
}

func (o ResourcePolicyEnforcementModeOutput) ToResourcePolicyEnforcementModePtrOutput() ResourcePolicyEnforcementModePtrOutput {
	return o.ToResourcePolicyEnforcementModePtrOutputWithContext(context.Background())
}

func (o ResourcePolicyEnforcementModeOutput) ToResourcePolicyEnforcementModePtrOutputWithContext(ctx context.Context) ResourcePolicyEnforcementModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourcePolicyEnforcementMode) *ResourcePolicyEnforcementMode {
		return &v
	}).(ResourcePolicyEnforcementModePtrOutput)
}

func (o ResourcePolicyEnforcementModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourcePolicyEnforcementModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourcePolicyEnforcementMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourcePolicyEnforcementModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourcePolicyEnforcementModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourcePolicyEnforcementMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourcePolicyEnforcementModePtrOutput struct{ *pulumi.OutputState }

func (ResourcePolicyEnforcementModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcePolicyEnforcementMode)(nil)).Elem()
}

func (o ResourcePolicyEnforcementModePtrOutput) ToResourcePolicyEnforcementModePtrOutput() ResourcePolicyEnforcementModePtrOutput {
	return o
}

func (o ResourcePolicyEnforcementModePtrOutput) ToResourcePolicyEnforcementModePtrOutputWithContext(ctx context.Context) ResourcePolicyEnforcementModePtrOutput {
	return o
}

func (o ResourcePolicyEnforcementModePtrOutput) Elem() ResourcePolicyEnforcementModeOutput {
	return o.ApplyT(func(v *ResourcePolicyEnforcementMode) ResourcePolicyEnforcementMode {
		if v != nil {
			return *v
		}
		var ret ResourcePolicyEnforcementMode
		return ret
	}).(ResourcePolicyEnforcementModeOutput)
}

func (o ResourcePolicyEnforcementModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourcePolicyEnforcementModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourcePolicyEnforcementMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourcePolicyEnforcementModeInput is an input type that accepts values of the ResourcePolicyEnforcementMode enum
// A concrete instance of `ResourcePolicyEnforcementModeInput` can be one of the following:
//
//	ResourcePolicyEnforcementModeOff
//	ResourcePolicyEnforcementModeUnenforced
//	ResourcePolicyEnforcementModeEnforced
type ResourcePolicyEnforcementModeInput interface {
	pulumi.Input

	ToResourcePolicyEnforcementModeOutput() ResourcePolicyEnforcementModeOutput
	ToResourcePolicyEnforcementModeOutputWithContext(context.Context) ResourcePolicyEnforcementModeOutput
}

var resourcePolicyEnforcementModePtrType = reflect.TypeOf((**ResourcePolicyEnforcementMode)(nil)).Elem()

type ResourcePolicyEnforcementModePtrInput interface {
	pulumi.Input

	ToResourcePolicyEnforcementModePtrOutput() ResourcePolicyEnforcementModePtrOutput
	ToResourcePolicyEnforcementModePtrOutputWithContext(context.Context) ResourcePolicyEnforcementModePtrOutput
}

type resourcePolicyEnforcementModePtr string

func ResourcePolicyEnforcementModePtr(v string) ResourcePolicyEnforcementModePtrInput {
	return (*resourcePolicyEnforcementModePtr)(&v)
}

func (*resourcePolicyEnforcementModePtr) ElementType() reflect.Type {
	return resourcePolicyEnforcementModePtrType
}

func (in *resourcePolicyEnforcementModePtr) ToResourcePolicyEnforcementModePtrOutput() ResourcePolicyEnforcementModePtrOutput {
	return pulumi.ToOutput(in).(ResourcePolicyEnforcementModePtrOutput)
}

func (in *resourcePolicyEnforcementModePtr) ToResourcePolicyEnforcementModePtrOutputWithContext(ctx context.Context) ResourcePolicyEnforcementModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourcePolicyEnforcementModePtrOutput)
}

func (in *resourcePolicyEnforcementModePtr) ToOutput(ctx context.Context) pulumix.Output[*ResourcePolicyEnforcementMode] {
	return pulumix.Output[*ResourcePolicyEnforcementMode]{
		OutputState: in.ToResourcePolicyEnforcementModePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyEnforcementModeInput)(nil)).Elem(), ResourcePolicyEnforcementMode("OFF"))
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcePolicyEnforcementModePtrInput)(nil)).Elem(), ResourcePolicyEnforcementMode("OFF"))
	pulumi.RegisterOutputType(ResourcePolicyEnforcementModeOutput{})
	pulumi.RegisterOutputType(ResourcePolicyEnforcementModePtrOutput{})
}
