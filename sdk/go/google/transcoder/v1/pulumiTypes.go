// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Ad break.
type AdBreak struct {
	// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
	StartTimeOffset *string `pulumi:"startTimeOffset"`
}

// AdBreakInput is an input type that accepts AdBreakArgs and AdBreakOutput values.
// You can construct a concrete instance of `AdBreakInput` via:
//
//	AdBreakArgs{...}
type AdBreakInput interface {
	pulumi.Input

	ToAdBreakOutput() AdBreakOutput
	ToAdBreakOutputWithContext(context.Context) AdBreakOutput
}

// Ad break.
type AdBreakArgs struct {
	// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
}

func (AdBreakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdBreak)(nil)).Elem()
}

func (i AdBreakArgs) ToAdBreakOutput() AdBreakOutput {
	return i.ToAdBreakOutputWithContext(context.Background())
}

func (i AdBreakArgs) ToAdBreakOutputWithContext(ctx context.Context) AdBreakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdBreakOutput)
}

// AdBreakArrayInput is an input type that accepts AdBreakArray and AdBreakArrayOutput values.
// You can construct a concrete instance of `AdBreakArrayInput` via:
//
//	AdBreakArray{ AdBreakArgs{...} }
type AdBreakArrayInput interface {
	pulumi.Input

	ToAdBreakArrayOutput() AdBreakArrayOutput
	ToAdBreakArrayOutputWithContext(context.Context) AdBreakArrayOutput
}

type AdBreakArray []AdBreakInput

func (AdBreakArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdBreak)(nil)).Elem()
}

func (i AdBreakArray) ToAdBreakArrayOutput() AdBreakArrayOutput {
	return i.ToAdBreakArrayOutputWithContext(context.Background())
}

func (i AdBreakArray) ToAdBreakArrayOutputWithContext(ctx context.Context) AdBreakArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdBreakArrayOutput)
}

// Ad break.
type AdBreakOutput struct{ *pulumi.OutputState }

func (AdBreakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdBreak)(nil)).Elem()
}

func (o AdBreakOutput) ToAdBreakOutput() AdBreakOutput {
	return o
}

func (o AdBreakOutput) ToAdBreakOutputWithContext(ctx context.Context) AdBreakOutput {
	return o
}

// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
func (o AdBreakOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdBreak) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

type AdBreakArrayOutput struct{ *pulumi.OutputState }

func (AdBreakArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdBreak)(nil)).Elem()
}

func (o AdBreakArrayOutput) ToAdBreakArrayOutput() AdBreakArrayOutput {
	return o
}

func (o AdBreakArrayOutput) ToAdBreakArrayOutputWithContext(ctx context.Context) AdBreakArrayOutput {
	return o
}

func (o AdBreakArrayOutput) Index(i pulumi.IntInput) AdBreakOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdBreak {
		return vs[0].([]AdBreak)[vs[1].(int)]
	}).(AdBreakOutput)
}

// Ad break.
type AdBreakResponse struct {
	// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
	StartTimeOffset string `pulumi:"startTimeOffset"`
}

// Ad break.
type AdBreakResponseOutput struct{ *pulumi.OutputState }

func (AdBreakResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdBreakResponse)(nil)).Elem()
}

func (o AdBreakResponseOutput) ToAdBreakResponseOutput() AdBreakResponseOutput {
	return o
}

func (o AdBreakResponseOutput) ToAdBreakResponseOutputWithContext(ctx context.Context) AdBreakResponseOutput {
	return o
}

// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
func (o AdBreakResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AdBreakResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

type AdBreakResponseArrayOutput struct{ *pulumi.OutputState }

func (AdBreakResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdBreakResponse)(nil)).Elem()
}

func (o AdBreakResponseArrayOutput) ToAdBreakResponseArrayOutput() AdBreakResponseArrayOutput {
	return o
}

func (o AdBreakResponseArrayOutput) ToAdBreakResponseArrayOutputWithContext(ctx context.Context) AdBreakResponseArrayOutput {
	return o
}

func (o AdBreakResponseArrayOutput) Index(i pulumi.IntInput) AdBreakResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdBreakResponse {
		return vs[0].([]AdBreakResponse)[vs[1].(int)]
	}).(AdBreakResponseOutput)
}

// Configuration for AES-128 encryption.
type Aes128Encryption struct {
}

// Aes128EncryptionInput is an input type that accepts Aes128EncryptionArgs and Aes128EncryptionOutput values.
// You can construct a concrete instance of `Aes128EncryptionInput` via:
//
//	Aes128EncryptionArgs{...}
type Aes128EncryptionInput interface {
	pulumi.Input

	ToAes128EncryptionOutput() Aes128EncryptionOutput
	ToAes128EncryptionOutputWithContext(context.Context) Aes128EncryptionOutput
}

// Configuration for AES-128 encryption.
type Aes128EncryptionArgs struct {
}

func (Aes128EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Aes128Encryption)(nil)).Elem()
}

func (i Aes128EncryptionArgs) ToAes128EncryptionOutput() Aes128EncryptionOutput {
	return i.ToAes128EncryptionOutputWithContext(context.Background())
}

func (i Aes128EncryptionArgs) ToAes128EncryptionOutputWithContext(ctx context.Context) Aes128EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aes128EncryptionOutput)
}

func (i Aes128EncryptionArgs) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return i.ToAes128EncryptionPtrOutputWithContext(context.Background())
}

func (i Aes128EncryptionArgs) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aes128EncryptionOutput).ToAes128EncryptionPtrOutputWithContext(ctx)
}

// Aes128EncryptionPtrInput is an input type that accepts Aes128EncryptionArgs, Aes128EncryptionPtr and Aes128EncryptionPtrOutput values.
// You can construct a concrete instance of `Aes128EncryptionPtrInput` via:
//
//	        Aes128EncryptionArgs{...}
//
//	or:
//
//	        nil
type Aes128EncryptionPtrInput interface {
	pulumi.Input

	ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput
	ToAes128EncryptionPtrOutputWithContext(context.Context) Aes128EncryptionPtrOutput
}

type aes128EncryptionPtrType Aes128EncryptionArgs

func Aes128EncryptionPtr(v *Aes128EncryptionArgs) Aes128EncryptionPtrInput {
	return (*aes128EncryptionPtrType)(v)
}

func (*aes128EncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Aes128Encryption)(nil)).Elem()
}

func (i *aes128EncryptionPtrType) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return i.ToAes128EncryptionPtrOutputWithContext(context.Background())
}

func (i *aes128EncryptionPtrType) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aes128EncryptionPtrOutput)
}

// Configuration for AES-128 encryption.
type Aes128EncryptionOutput struct{ *pulumi.OutputState }

func (Aes128EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Aes128Encryption)(nil)).Elem()
}

func (o Aes128EncryptionOutput) ToAes128EncryptionOutput() Aes128EncryptionOutput {
	return o
}

func (o Aes128EncryptionOutput) ToAes128EncryptionOutputWithContext(ctx context.Context) Aes128EncryptionOutput {
	return o
}

func (o Aes128EncryptionOutput) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return o.ToAes128EncryptionPtrOutputWithContext(context.Background())
}

func (o Aes128EncryptionOutput) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Aes128Encryption) *Aes128Encryption {
		return &v
	}).(Aes128EncryptionPtrOutput)
}

type Aes128EncryptionPtrOutput struct{ *pulumi.OutputState }

func (Aes128EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Aes128Encryption)(nil)).Elem()
}

func (o Aes128EncryptionPtrOutput) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return o
}

func (o Aes128EncryptionPtrOutput) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return o
}

func (o Aes128EncryptionPtrOutput) Elem() Aes128EncryptionOutput {
	return o.ApplyT(func(v *Aes128Encryption) Aes128Encryption {
		if v != nil {
			return *v
		}
		var ret Aes128Encryption
		return ret
	}).(Aes128EncryptionOutput)
}

// Configuration for AES-128 encryption.
type Aes128EncryptionResponse struct {
}

// Configuration for AES-128 encryption.
type Aes128EncryptionResponseOutput struct{ *pulumi.OutputState }

func (Aes128EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Aes128EncryptionResponse)(nil)).Elem()
}

func (o Aes128EncryptionResponseOutput) ToAes128EncryptionResponseOutput() Aes128EncryptionResponseOutput {
	return o
}

func (o Aes128EncryptionResponseOutput) ToAes128EncryptionResponseOutputWithContext(ctx context.Context) Aes128EncryptionResponseOutput {
	return o
}

// Animation types.
type Animation struct {
	// End previous animation.
	AnimationEnd *AnimationEnd `pulumi:"animationEnd"`
	// Display overlay object with fade animation.
	AnimationFade *AnimationFade `pulumi:"animationFade"`
	// Display static overlay object.
	AnimationStatic *AnimationStatic `pulumi:"animationStatic"`
}

// AnimationInput is an input type that accepts AnimationArgs and AnimationOutput values.
// You can construct a concrete instance of `AnimationInput` via:
//
//	AnimationArgs{...}
type AnimationInput interface {
	pulumi.Input

	ToAnimationOutput() AnimationOutput
	ToAnimationOutputWithContext(context.Context) AnimationOutput
}

// Animation types.
type AnimationArgs struct {
	// End previous animation.
	AnimationEnd AnimationEndPtrInput `pulumi:"animationEnd"`
	// Display overlay object with fade animation.
	AnimationFade AnimationFadePtrInput `pulumi:"animationFade"`
	// Display static overlay object.
	AnimationStatic AnimationStaticPtrInput `pulumi:"animationStatic"`
}

func (AnimationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Animation)(nil)).Elem()
}

func (i AnimationArgs) ToAnimationOutput() AnimationOutput {
	return i.ToAnimationOutputWithContext(context.Background())
}

func (i AnimationArgs) ToAnimationOutputWithContext(ctx context.Context) AnimationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationOutput)
}

// AnimationArrayInput is an input type that accepts AnimationArray and AnimationArrayOutput values.
// You can construct a concrete instance of `AnimationArrayInput` via:
//
//	AnimationArray{ AnimationArgs{...} }
type AnimationArrayInput interface {
	pulumi.Input

	ToAnimationArrayOutput() AnimationArrayOutput
	ToAnimationArrayOutputWithContext(context.Context) AnimationArrayOutput
}

type AnimationArray []AnimationInput

func (AnimationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Animation)(nil)).Elem()
}

func (i AnimationArray) ToAnimationArrayOutput() AnimationArrayOutput {
	return i.ToAnimationArrayOutputWithContext(context.Background())
}

func (i AnimationArray) ToAnimationArrayOutputWithContext(ctx context.Context) AnimationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationArrayOutput)
}

// Animation types.
type AnimationOutput struct{ *pulumi.OutputState }

func (AnimationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Animation)(nil)).Elem()
}

func (o AnimationOutput) ToAnimationOutput() AnimationOutput {
	return o
}

func (o AnimationOutput) ToAnimationOutputWithContext(ctx context.Context) AnimationOutput {
	return o
}

// End previous animation.
func (o AnimationOutput) AnimationEnd() AnimationEndPtrOutput {
	return o.ApplyT(func(v Animation) *AnimationEnd { return v.AnimationEnd }).(AnimationEndPtrOutput)
}

// Display overlay object with fade animation.
func (o AnimationOutput) AnimationFade() AnimationFadePtrOutput {
	return o.ApplyT(func(v Animation) *AnimationFade { return v.AnimationFade }).(AnimationFadePtrOutput)
}

// Display static overlay object.
func (o AnimationOutput) AnimationStatic() AnimationStaticPtrOutput {
	return o.ApplyT(func(v Animation) *AnimationStatic { return v.AnimationStatic }).(AnimationStaticPtrOutput)
}

type AnimationArrayOutput struct{ *pulumi.OutputState }

func (AnimationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Animation)(nil)).Elem()
}

func (o AnimationArrayOutput) ToAnimationArrayOutput() AnimationArrayOutput {
	return o
}

func (o AnimationArrayOutput) ToAnimationArrayOutputWithContext(ctx context.Context) AnimationArrayOutput {
	return o
}

func (o AnimationArrayOutput) Index(i pulumi.IntInput) AnimationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Animation {
		return vs[0].([]Animation)[vs[1].(int)]
	}).(AnimationOutput)
}

// End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEnd struct {
	// The time to end overlay object, in seconds. Default: 0
	StartTimeOffset *string `pulumi:"startTimeOffset"`
}

// AnimationEndInput is an input type that accepts AnimationEndArgs and AnimationEndOutput values.
// You can construct a concrete instance of `AnimationEndInput` via:
//
//	AnimationEndArgs{...}
type AnimationEndInput interface {
	pulumi.Input

	ToAnimationEndOutput() AnimationEndOutput
	ToAnimationEndOutputWithContext(context.Context) AnimationEndOutput
}

// End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndArgs struct {
	// The time to end overlay object, in seconds. Default: 0
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
}

func (AnimationEndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationEnd)(nil)).Elem()
}

func (i AnimationEndArgs) ToAnimationEndOutput() AnimationEndOutput {
	return i.ToAnimationEndOutputWithContext(context.Background())
}

func (i AnimationEndArgs) ToAnimationEndOutputWithContext(ctx context.Context) AnimationEndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationEndOutput)
}

func (i AnimationEndArgs) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return i.ToAnimationEndPtrOutputWithContext(context.Background())
}

func (i AnimationEndArgs) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationEndOutput).ToAnimationEndPtrOutputWithContext(ctx)
}

// AnimationEndPtrInput is an input type that accepts AnimationEndArgs, AnimationEndPtr and AnimationEndPtrOutput values.
// You can construct a concrete instance of `AnimationEndPtrInput` via:
//
//	        AnimationEndArgs{...}
//
//	or:
//
//	        nil
type AnimationEndPtrInput interface {
	pulumi.Input

	ToAnimationEndPtrOutput() AnimationEndPtrOutput
	ToAnimationEndPtrOutputWithContext(context.Context) AnimationEndPtrOutput
}

type animationEndPtrType AnimationEndArgs

func AnimationEndPtr(v *AnimationEndArgs) AnimationEndPtrInput {
	return (*animationEndPtrType)(v)
}

func (*animationEndPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationEnd)(nil)).Elem()
}

func (i *animationEndPtrType) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return i.ToAnimationEndPtrOutputWithContext(context.Background())
}

func (i *animationEndPtrType) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationEndPtrOutput)
}

// End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndOutput struct{ *pulumi.OutputState }

func (AnimationEndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationEnd)(nil)).Elem()
}

func (o AnimationEndOutput) ToAnimationEndOutput() AnimationEndOutput {
	return o
}

func (o AnimationEndOutput) ToAnimationEndOutputWithContext(ctx context.Context) AnimationEndOutput {
	return o
}

func (o AnimationEndOutput) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return o.ToAnimationEndPtrOutputWithContext(context.Background())
}

func (o AnimationEndOutput) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnimationEnd) *AnimationEnd {
		return &v
	}).(AnimationEndPtrOutput)
}

// The time to end overlay object, in seconds. Default: 0
func (o AnimationEndOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationEnd) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

type AnimationEndPtrOutput struct{ *pulumi.OutputState }

func (AnimationEndPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationEnd)(nil)).Elem()
}

func (o AnimationEndPtrOutput) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return o
}

func (o AnimationEndPtrOutput) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return o
}

func (o AnimationEndPtrOutput) Elem() AnimationEndOutput {
	return o.ApplyT(func(v *AnimationEnd) AnimationEnd {
		if v != nil {
			return *v
		}
		var ret AnimationEnd
		return ret
	}).(AnimationEndOutput)
}

// The time to end overlay object, in seconds. Default: 0
func (o AnimationEndPtrOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationEnd) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeOffset
	}).(pulumi.StringPtrOutput)
}

// End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndResponse struct {
	// The time to end overlay object, in seconds. Default: 0
	StartTimeOffset string `pulumi:"startTimeOffset"`
}

// End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndResponseOutput struct{ *pulumi.OutputState }

func (AnimationEndResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationEndResponse)(nil)).Elem()
}

func (o AnimationEndResponseOutput) ToAnimationEndResponseOutput() AnimationEndResponseOutput {
	return o
}

func (o AnimationEndResponseOutput) ToAnimationEndResponseOutputWithContext(ctx context.Context) AnimationEndResponseOutput {
	return o
}

// The time to end overlay object, in seconds. Default: 0
func (o AnimationEndResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationEndResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Display overlay object with fade animation.
type AnimationFade struct {
	// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
	EndTimeOffset *string `pulumi:"endTimeOffset"`
	// Type of fade animation: `FADE_IN` or `FADE_OUT`.
	FadeType AnimationFadeFadeType `pulumi:"fadeType"`
	// The time to start the fade animation, in seconds. Default: 0
	StartTimeOffset *string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy *NormalizedCoordinate `pulumi:"xy"`
}

// AnimationFadeInput is an input type that accepts AnimationFadeArgs and AnimationFadeOutput values.
// You can construct a concrete instance of `AnimationFadeInput` via:
//
//	AnimationFadeArgs{...}
type AnimationFadeInput interface {
	pulumi.Input

	ToAnimationFadeOutput() AnimationFadeOutput
	ToAnimationFadeOutputWithContext(context.Context) AnimationFadeOutput
}

// Display overlay object with fade animation.
type AnimationFadeArgs struct {
	// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
	EndTimeOffset pulumi.StringPtrInput `pulumi:"endTimeOffset"`
	// Type of fade animation: `FADE_IN` or `FADE_OUT`.
	FadeType AnimationFadeFadeTypeInput `pulumi:"fadeType"`
	// The time to start the fade animation, in seconds. Default: 0
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinatePtrInput `pulumi:"xy"`
}

func (AnimationFadeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationFade)(nil)).Elem()
}

func (i AnimationFadeArgs) ToAnimationFadeOutput() AnimationFadeOutput {
	return i.ToAnimationFadeOutputWithContext(context.Background())
}

func (i AnimationFadeArgs) ToAnimationFadeOutputWithContext(ctx context.Context) AnimationFadeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationFadeOutput)
}

func (i AnimationFadeArgs) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return i.ToAnimationFadePtrOutputWithContext(context.Background())
}

func (i AnimationFadeArgs) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationFadeOutput).ToAnimationFadePtrOutputWithContext(ctx)
}

// AnimationFadePtrInput is an input type that accepts AnimationFadeArgs, AnimationFadePtr and AnimationFadePtrOutput values.
// You can construct a concrete instance of `AnimationFadePtrInput` via:
//
//	        AnimationFadeArgs{...}
//
//	or:
//
//	        nil
type AnimationFadePtrInput interface {
	pulumi.Input

	ToAnimationFadePtrOutput() AnimationFadePtrOutput
	ToAnimationFadePtrOutputWithContext(context.Context) AnimationFadePtrOutput
}

type animationFadePtrType AnimationFadeArgs

func AnimationFadePtr(v *AnimationFadeArgs) AnimationFadePtrInput {
	return (*animationFadePtrType)(v)
}

func (*animationFadePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationFade)(nil)).Elem()
}

func (i *animationFadePtrType) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return i.ToAnimationFadePtrOutputWithContext(context.Background())
}

func (i *animationFadePtrType) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationFadePtrOutput)
}

// Display overlay object with fade animation.
type AnimationFadeOutput struct{ *pulumi.OutputState }

func (AnimationFadeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationFade)(nil)).Elem()
}

func (o AnimationFadeOutput) ToAnimationFadeOutput() AnimationFadeOutput {
	return o
}

func (o AnimationFadeOutput) ToAnimationFadeOutputWithContext(ctx context.Context) AnimationFadeOutput {
	return o
}

func (o AnimationFadeOutput) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return o.ToAnimationFadePtrOutputWithContext(context.Background())
}

func (o AnimationFadeOutput) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnimationFade) *AnimationFade {
		return &v
	}).(AnimationFadePtrOutput)
}

// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
func (o AnimationFadeOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationFade) *string { return v.EndTimeOffset }).(pulumi.StringPtrOutput)
}

// Type of fade animation: `FADE_IN` or `FADE_OUT`.
func (o AnimationFadeOutput) FadeType() AnimationFadeFadeTypeOutput {
	return o.ApplyT(func(v AnimationFade) AnimationFadeFadeType { return v.FadeType }).(AnimationFadeFadeTypeOutput)
}

// The time to start the fade animation, in seconds. Default: 0
func (o AnimationFadeOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationFade) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationFadeOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v AnimationFade) *NormalizedCoordinate { return v.Xy }).(NormalizedCoordinatePtrOutput)
}

type AnimationFadePtrOutput struct{ *pulumi.OutputState }

func (AnimationFadePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationFade)(nil)).Elem()
}

func (o AnimationFadePtrOutput) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return o
}

func (o AnimationFadePtrOutput) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return o
}

func (o AnimationFadePtrOutput) Elem() AnimationFadeOutput {
	return o.ApplyT(func(v *AnimationFade) AnimationFade {
		if v != nil {
			return *v
		}
		var ret AnimationFade
		return ret
	}).(AnimationFadeOutput)
}

// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
func (o AnimationFadePtrOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationFade) *string {
		if v == nil {
			return nil
		}
		return v.EndTimeOffset
	}).(pulumi.StringPtrOutput)
}

// Type of fade animation: `FADE_IN` or `FADE_OUT`.
func (o AnimationFadePtrOutput) FadeType() AnimationFadeFadeTypePtrOutput {
	return o.ApplyT(func(v *AnimationFade) *AnimationFadeFadeType {
		if v == nil {
			return nil
		}
		return &v.FadeType
	}).(AnimationFadeFadeTypePtrOutput)
}

// The time to start the fade animation, in seconds. Default: 0
func (o AnimationFadePtrOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationFade) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeOffset
	}).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationFadePtrOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v *AnimationFade) *NormalizedCoordinate {
		if v == nil {
			return nil
		}
		return v.Xy
	}).(NormalizedCoordinatePtrOutput)
}

// Display overlay object with fade animation.
type AnimationFadeResponse struct {
	// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
	EndTimeOffset string `pulumi:"endTimeOffset"`
	// Type of fade animation: `FADE_IN` or `FADE_OUT`.
	FadeType string `pulumi:"fadeType"`
	// The time to start the fade animation, in seconds. Default: 0
	StartTimeOffset string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinateResponse `pulumi:"xy"`
}

// Display overlay object with fade animation.
type AnimationFadeResponseOutput struct{ *pulumi.OutputState }

func (AnimationFadeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationFadeResponse)(nil)).Elem()
}

func (o AnimationFadeResponseOutput) ToAnimationFadeResponseOutput() AnimationFadeResponseOutput {
	return o
}

func (o AnimationFadeResponseOutput) ToAnimationFadeResponseOutputWithContext(ctx context.Context) AnimationFadeResponseOutput {
	return o
}

// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
func (o AnimationFadeResponseOutput) EndTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationFadeResponse) string { return v.EndTimeOffset }).(pulumi.StringOutput)
}

// Type of fade animation: `FADE_IN` or `FADE_OUT`.
func (o AnimationFadeResponseOutput) FadeType() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationFadeResponse) string { return v.FadeType }).(pulumi.StringOutput)
}

// The time to start the fade animation, in seconds. Default: 0
func (o AnimationFadeResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationFadeResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationFadeResponseOutput) Xy() NormalizedCoordinateResponseOutput {
	return o.ApplyT(func(v AnimationFadeResponse) NormalizedCoordinateResponse { return v.Xy }).(NormalizedCoordinateResponseOutput)
}

// Animation types.
type AnimationResponse struct {
	// End previous animation.
	AnimationEnd AnimationEndResponse `pulumi:"animationEnd"`
	// Display overlay object with fade animation.
	AnimationFade AnimationFadeResponse `pulumi:"animationFade"`
	// Display static overlay object.
	AnimationStatic AnimationStaticResponse `pulumi:"animationStatic"`
}

// Animation types.
type AnimationResponseOutput struct{ *pulumi.OutputState }

func (AnimationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationResponse)(nil)).Elem()
}

func (o AnimationResponseOutput) ToAnimationResponseOutput() AnimationResponseOutput {
	return o
}

func (o AnimationResponseOutput) ToAnimationResponseOutputWithContext(ctx context.Context) AnimationResponseOutput {
	return o
}

// End previous animation.
func (o AnimationResponseOutput) AnimationEnd() AnimationEndResponseOutput {
	return o.ApplyT(func(v AnimationResponse) AnimationEndResponse { return v.AnimationEnd }).(AnimationEndResponseOutput)
}

// Display overlay object with fade animation.
func (o AnimationResponseOutput) AnimationFade() AnimationFadeResponseOutput {
	return o.ApplyT(func(v AnimationResponse) AnimationFadeResponse { return v.AnimationFade }).(AnimationFadeResponseOutput)
}

// Display static overlay object.
func (o AnimationResponseOutput) AnimationStatic() AnimationStaticResponseOutput {
	return o.ApplyT(func(v AnimationResponse) AnimationStaticResponse { return v.AnimationStatic }).(AnimationStaticResponseOutput)
}

type AnimationResponseArrayOutput struct{ *pulumi.OutputState }

func (AnimationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnimationResponse)(nil)).Elem()
}

func (o AnimationResponseArrayOutput) ToAnimationResponseArrayOutput() AnimationResponseArrayOutput {
	return o
}

func (o AnimationResponseArrayOutput) ToAnimationResponseArrayOutputWithContext(ctx context.Context) AnimationResponseArrayOutput {
	return o
}

func (o AnimationResponseArrayOutput) Index(i pulumi.IntInput) AnimationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnimationResponse {
		return vs[0].([]AnimationResponse)[vs[1].(int)]
	}).(AnimationResponseOutput)
}

// Display static overlay object.
type AnimationStatic struct {
	// The time to start displaying the overlay object, in seconds. Default: 0
	StartTimeOffset *string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy *NormalizedCoordinate `pulumi:"xy"`
}

// AnimationStaticInput is an input type that accepts AnimationStaticArgs and AnimationStaticOutput values.
// You can construct a concrete instance of `AnimationStaticInput` via:
//
//	AnimationStaticArgs{...}
type AnimationStaticInput interface {
	pulumi.Input

	ToAnimationStaticOutput() AnimationStaticOutput
	ToAnimationStaticOutputWithContext(context.Context) AnimationStaticOutput
}

// Display static overlay object.
type AnimationStaticArgs struct {
	// The time to start displaying the overlay object, in seconds. Default: 0
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinatePtrInput `pulumi:"xy"`
}

func (AnimationStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationStatic)(nil)).Elem()
}

func (i AnimationStaticArgs) ToAnimationStaticOutput() AnimationStaticOutput {
	return i.ToAnimationStaticOutputWithContext(context.Background())
}

func (i AnimationStaticArgs) ToAnimationStaticOutputWithContext(ctx context.Context) AnimationStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationStaticOutput)
}

func (i AnimationStaticArgs) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return i.ToAnimationStaticPtrOutputWithContext(context.Background())
}

func (i AnimationStaticArgs) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationStaticOutput).ToAnimationStaticPtrOutputWithContext(ctx)
}

// AnimationStaticPtrInput is an input type that accepts AnimationStaticArgs, AnimationStaticPtr and AnimationStaticPtrOutput values.
// You can construct a concrete instance of `AnimationStaticPtrInput` via:
//
//	        AnimationStaticArgs{...}
//
//	or:
//
//	        nil
type AnimationStaticPtrInput interface {
	pulumi.Input

	ToAnimationStaticPtrOutput() AnimationStaticPtrOutput
	ToAnimationStaticPtrOutputWithContext(context.Context) AnimationStaticPtrOutput
}

type animationStaticPtrType AnimationStaticArgs

func AnimationStaticPtr(v *AnimationStaticArgs) AnimationStaticPtrInput {
	return (*animationStaticPtrType)(v)
}

func (*animationStaticPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationStatic)(nil)).Elem()
}

func (i *animationStaticPtrType) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return i.ToAnimationStaticPtrOutputWithContext(context.Background())
}

func (i *animationStaticPtrType) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationStaticPtrOutput)
}

// Display static overlay object.
type AnimationStaticOutput struct{ *pulumi.OutputState }

func (AnimationStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationStatic)(nil)).Elem()
}

func (o AnimationStaticOutput) ToAnimationStaticOutput() AnimationStaticOutput {
	return o
}

func (o AnimationStaticOutput) ToAnimationStaticOutputWithContext(ctx context.Context) AnimationStaticOutput {
	return o
}

func (o AnimationStaticOutput) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return o.ToAnimationStaticPtrOutputWithContext(context.Background())
}

func (o AnimationStaticOutput) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnimationStatic) *AnimationStatic {
		return &v
	}).(AnimationStaticPtrOutput)
}

// The time to start displaying the overlay object, in seconds. Default: 0
func (o AnimationStaticOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationStatic) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationStaticOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v AnimationStatic) *NormalizedCoordinate { return v.Xy }).(NormalizedCoordinatePtrOutput)
}

type AnimationStaticPtrOutput struct{ *pulumi.OutputState }

func (AnimationStaticPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationStatic)(nil)).Elem()
}

func (o AnimationStaticPtrOutput) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return o
}

func (o AnimationStaticPtrOutput) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return o
}

func (o AnimationStaticPtrOutput) Elem() AnimationStaticOutput {
	return o.ApplyT(func(v *AnimationStatic) AnimationStatic {
		if v != nil {
			return *v
		}
		var ret AnimationStatic
		return ret
	}).(AnimationStaticOutput)
}

// The time to start displaying the overlay object, in seconds. Default: 0
func (o AnimationStaticPtrOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationStatic) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeOffset
	}).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationStaticPtrOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v *AnimationStatic) *NormalizedCoordinate {
		if v == nil {
			return nil
		}
		return v.Xy
	}).(NormalizedCoordinatePtrOutput)
}

// Display static overlay object.
type AnimationStaticResponse struct {
	// The time to start displaying the overlay object, in seconds. Default: 0
	StartTimeOffset string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinateResponse `pulumi:"xy"`
}

// Display static overlay object.
type AnimationStaticResponseOutput struct{ *pulumi.OutputState }

func (AnimationStaticResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationStaticResponse)(nil)).Elem()
}

func (o AnimationStaticResponseOutput) ToAnimationStaticResponseOutput() AnimationStaticResponseOutput {
	return o
}

func (o AnimationStaticResponseOutput) ToAnimationStaticResponseOutputWithContext(ctx context.Context) AnimationStaticResponseOutput {
	return o
}

// The time to start displaying the overlay object, in seconds. Default: 0
func (o AnimationStaticResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationStaticResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationStaticResponseOutput) Xy() NormalizedCoordinateResponseOutput {
	return o.ApplyT(func(v AnimationStaticResponse) NormalizedCoordinateResponse { return v.Xy }).(NormalizedCoordinateResponseOutput)
}

// Audio preprocessing configuration.
type Audio struct {
	// Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
	HighBoost *bool `pulumi:"highBoost"`
	// Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
	LowBoost *bool `pulumi:"lowBoost"`
	// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
	Lufs *float64 `pulumi:"lufs"`
}

// AudioInput is an input type that accepts AudioArgs and AudioOutput values.
// You can construct a concrete instance of `AudioInput` via:
//
//	AudioArgs{...}
type AudioInput interface {
	pulumi.Input

	ToAudioOutput() AudioOutput
	ToAudioOutputWithContext(context.Context) AudioOutput
}

// Audio preprocessing configuration.
type AudioArgs struct {
	// Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
	HighBoost pulumi.BoolPtrInput `pulumi:"highBoost"`
	// Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
	LowBoost pulumi.BoolPtrInput `pulumi:"lowBoost"`
	// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
	Lufs pulumi.Float64PtrInput `pulumi:"lufs"`
}

func (AudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Audio)(nil)).Elem()
}

func (i AudioArgs) ToAudioOutput() AudioOutput {
	return i.ToAudioOutputWithContext(context.Background())
}

func (i AudioArgs) ToAudioOutputWithContext(ctx context.Context) AudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioOutput)
}

func (i AudioArgs) ToAudioPtrOutput() AudioPtrOutput {
	return i.ToAudioPtrOutputWithContext(context.Background())
}

func (i AudioArgs) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioOutput).ToAudioPtrOutputWithContext(ctx)
}

// AudioPtrInput is an input type that accepts AudioArgs, AudioPtr and AudioPtrOutput values.
// You can construct a concrete instance of `AudioPtrInput` via:
//
//	        AudioArgs{...}
//
//	or:
//
//	        nil
type AudioPtrInput interface {
	pulumi.Input

	ToAudioPtrOutput() AudioPtrOutput
	ToAudioPtrOutputWithContext(context.Context) AudioPtrOutput
}

type audioPtrType AudioArgs

func AudioPtr(v *AudioArgs) AudioPtrInput {
	return (*audioPtrType)(v)
}

func (*audioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Audio)(nil)).Elem()
}

func (i *audioPtrType) ToAudioPtrOutput() AudioPtrOutput {
	return i.ToAudioPtrOutputWithContext(context.Background())
}

func (i *audioPtrType) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioPtrOutput)
}

// Audio preprocessing configuration.
type AudioOutput struct{ *pulumi.OutputState }

func (AudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Audio)(nil)).Elem()
}

func (o AudioOutput) ToAudioOutput() AudioOutput {
	return o
}

func (o AudioOutput) ToAudioOutputWithContext(ctx context.Context) AudioOutput {
	return o
}

func (o AudioOutput) ToAudioPtrOutput() AudioPtrOutput {
	return o.ToAudioPtrOutputWithContext(context.Background())
}

func (o AudioOutput) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Audio) *Audio {
		return &v
	}).(AudioPtrOutput)
}

// Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
func (o AudioOutput) HighBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Audio) *bool { return v.HighBoost }).(pulumi.BoolPtrOutput)
}

// Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
func (o AudioOutput) LowBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Audio) *bool { return v.LowBoost }).(pulumi.BoolPtrOutput)
}

// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
func (o AudioOutput) Lufs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Audio) *float64 { return v.Lufs }).(pulumi.Float64PtrOutput)
}

type AudioPtrOutput struct{ *pulumi.OutputState }

func (AudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Audio)(nil)).Elem()
}

func (o AudioPtrOutput) ToAudioPtrOutput() AudioPtrOutput {
	return o
}

func (o AudioPtrOutput) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return o
}

func (o AudioPtrOutput) Elem() AudioOutput {
	return o.ApplyT(func(v *Audio) Audio {
		if v != nil {
			return *v
		}
		var ret Audio
		return ret
	}).(AudioOutput)
}

// Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
func (o AudioPtrOutput) HighBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Audio) *bool {
		if v == nil {
			return nil
		}
		return v.HighBoost
	}).(pulumi.BoolPtrOutput)
}

// Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
func (o AudioPtrOutput) LowBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Audio) *bool {
		if v == nil {
			return nil
		}
		return v.LowBoost
	}).(pulumi.BoolPtrOutput)
}

// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
func (o AudioPtrOutput) Lufs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Audio) *float64 {
		if v == nil {
			return nil
		}
		return v.Lufs
	}).(pulumi.Float64PtrOutput)
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
type AudioMapping struct {
	// The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
	AtomKey string `pulumi:"atomKey"`
	// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
	GainDb *float64 `pulumi:"gainDb"`
	// The zero-based index of the channel in the input audio stream.
	InputChannel int `pulumi:"inputChannel"`
	// The Input.key that identifies the input file.
	InputKey string `pulumi:"inputKey"`
	// The zero-based index of the track in the input file.
	InputTrack int `pulumi:"inputTrack"`
	// The zero-based index of the channel in the output audio stream.
	OutputChannel int `pulumi:"outputChannel"`
}

// AudioMappingInput is an input type that accepts AudioMappingArgs and AudioMappingOutput values.
// You can construct a concrete instance of `AudioMappingInput` via:
//
//	AudioMappingArgs{...}
type AudioMappingInput interface {
	pulumi.Input

	ToAudioMappingOutput() AudioMappingOutput
	ToAudioMappingOutputWithContext(context.Context) AudioMappingOutput
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
type AudioMappingArgs struct {
	// The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
	AtomKey pulumi.StringInput `pulumi:"atomKey"`
	// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
	GainDb pulumi.Float64PtrInput `pulumi:"gainDb"`
	// The zero-based index of the channel in the input audio stream.
	InputChannel pulumi.IntInput `pulumi:"inputChannel"`
	// The Input.key that identifies the input file.
	InputKey pulumi.StringInput `pulumi:"inputKey"`
	// The zero-based index of the track in the input file.
	InputTrack pulumi.IntInput `pulumi:"inputTrack"`
	// The zero-based index of the channel in the output audio stream.
	OutputChannel pulumi.IntInput `pulumi:"outputChannel"`
}

func (AudioMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioMapping)(nil)).Elem()
}

func (i AudioMappingArgs) ToAudioMappingOutput() AudioMappingOutput {
	return i.ToAudioMappingOutputWithContext(context.Background())
}

func (i AudioMappingArgs) ToAudioMappingOutputWithContext(ctx context.Context) AudioMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioMappingOutput)
}

// AudioMappingArrayInput is an input type that accepts AudioMappingArray and AudioMappingArrayOutput values.
// You can construct a concrete instance of `AudioMappingArrayInput` via:
//
//	AudioMappingArray{ AudioMappingArgs{...} }
type AudioMappingArrayInput interface {
	pulumi.Input

	ToAudioMappingArrayOutput() AudioMappingArrayOutput
	ToAudioMappingArrayOutputWithContext(context.Context) AudioMappingArrayOutput
}

type AudioMappingArray []AudioMappingInput

func (AudioMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioMapping)(nil)).Elem()
}

func (i AudioMappingArray) ToAudioMappingArrayOutput() AudioMappingArrayOutput {
	return i.ToAudioMappingArrayOutputWithContext(context.Background())
}

func (i AudioMappingArray) ToAudioMappingArrayOutputWithContext(ctx context.Context) AudioMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioMappingArrayOutput)
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
type AudioMappingOutput struct{ *pulumi.OutputState }

func (AudioMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioMapping)(nil)).Elem()
}

func (o AudioMappingOutput) ToAudioMappingOutput() AudioMappingOutput {
	return o
}

func (o AudioMappingOutput) ToAudioMappingOutputWithContext(ctx context.Context) AudioMappingOutput {
	return o
}

// The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
func (o AudioMappingOutput) AtomKey() pulumi.StringOutput {
	return o.ApplyT(func(v AudioMapping) string { return v.AtomKey }).(pulumi.StringOutput)
}

// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
func (o AudioMappingOutput) GainDb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AudioMapping) *float64 { return v.GainDb }).(pulumi.Float64PtrOutput)
}

// The zero-based index of the channel in the input audio stream.
func (o AudioMappingOutput) InputChannel() pulumi.IntOutput {
	return o.ApplyT(func(v AudioMapping) int { return v.InputChannel }).(pulumi.IntOutput)
}

// The Input.key that identifies the input file.
func (o AudioMappingOutput) InputKey() pulumi.StringOutput {
	return o.ApplyT(func(v AudioMapping) string { return v.InputKey }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o AudioMappingOutput) InputTrack() pulumi.IntOutput {
	return o.ApplyT(func(v AudioMapping) int { return v.InputTrack }).(pulumi.IntOutput)
}

// The zero-based index of the channel in the output audio stream.
func (o AudioMappingOutput) OutputChannel() pulumi.IntOutput {
	return o.ApplyT(func(v AudioMapping) int { return v.OutputChannel }).(pulumi.IntOutput)
}

type AudioMappingArrayOutput struct{ *pulumi.OutputState }

func (AudioMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioMapping)(nil)).Elem()
}

func (o AudioMappingArrayOutput) ToAudioMappingArrayOutput() AudioMappingArrayOutput {
	return o
}

func (o AudioMappingArrayOutput) ToAudioMappingArrayOutputWithContext(ctx context.Context) AudioMappingArrayOutput {
	return o
}

func (o AudioMappingArrayOutput) Index(i pulumi.IntInput) AudioMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioMapping {
		return vs[0].([]AudioMapping)[vs[1].(int)]
	}).(AudioMappingOutput)
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
type AudioMappingResponse struct {
	// The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
	AtomKey string `pulumi:"atomKey"`
	// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
	GainDb float64 `pulumi:"gainDb"`
	// The zero-based index of the channel in the input audio stream.
	InputChannel int `pulumi:"inputChannel"`
	// The Input.key that identifies the input file.
	InputKey string `pulumi:"inputKey"`
	// The zero-based index of the track in the input file.
	InputTrack int `pulumi:"inputTrack"`
	// The zero-based index of the channel in the output audio stream.
	OutputChannel int `pulumi:"outputChannel"`
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
type AudioMappingResponseOutput struct{ *pulumi.OutputState }

func (AudioMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioMappingResponse)(nil)).Elem()
}

func (o AudioMappingResponseOutput) ToAudioMappingResponseOutput() AudioMappingResponseOutput {
	return o
}

func (o AudioMappingResponseOutput) ToAudioMappingResponseOutputWithContext(ctx context.Context) AudioMappingResponseOutput {
	return o
}

// The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.
func (o AudioMappingResponseOutput) AtomKey() pulumi.StringOutput {
	return o.ApplyT(func(v AudioMappingResponse) string { return v.AtomKey }).(pulumi.StringOutput)
}

// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
func (o AudioMappingResponseOutput) GainDb() pulumi.Float64Output {
	return o.ApplyT(func(v AudioMappingResponse) float64 { return v.GainDb }).(pulumi.Float64Output)
}

// The zero-based index of the channel in the input audio stream.
func (o AudioMappingResponseOutput) InputChannel() pulumi.IntOutput {
	return o.ApplyT(func(v AudioMappingResponse) int { return v.InputChannel }).(pulumi.IntOutput)
}

// The Input.key that identifies the input file.
func (o AudioMappingResponseOutput) InputKey() pulumi.StringOutput {
	return o.ApplyT(func(v AudioMappingResponse) string { return v.InputKey }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o AudioMappingResponseOutput) InputTrack() pulumi.IntOutput {
	return o.ApplyT(func(v AudioMappingResponse) int { return v.InputTrack }).(pulumi.IntOutput)
}

// The zero-based index of the channel in the output audio stream.
func (o AudioMappingResponseOutput) OutputChannel() pulumi.IntOutput {
	return o.ApplyT(func(v AudioMappingResponse) int { return v.OutputChannel }).(pulumi.IntOutput)
}

type AudioMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (AudioMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioMappingResponse)(nil)).Elem()
}

func (o AudioMappingResponseArrayOutput) ToAudioMappingResponseArrayOutput() AudioMappingResponseArrayOutput {
	return o
}

func (o AudioMappingResponseArrayOutput) ToAudioMappingResponseArrayOutputWithContext(ctx context.Context) AudioMappingResponseArrayOutput {
	return o
}

func (o AudioMappingResponseArrayOutput) Index(i pulumi.IntInput) AudioMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioMappingResponse {
		return vs[0].([]AudioMappingResponse)[vs[1].(int)]
	}).(AudioMappingResponseOutput)
}

// Audio preprocessing configuration.
type AudioResponse struct {
	// Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
	HighBoost bool `pulumi:"highBoost"`
	// Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
	LowBoost bool `pulumi:"lowBoost"`
	// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
	Lufs float64 `pulumi:"lufs"`
}

// Audio preprocessing configuration.
type AudioResponseOutput struct{ *pulumi.OutputState }

func (AudioResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioResponse)(nil)).Elem()
}

func (o AudioResponseOutput) ToAudioResponseOutput() AudioResponseOutput {
	return o
}

func (o AudioResponseOutput) ToAudioResponseOutputWithContext(ctx context.Context) AudioResponseOutput {
	return o
}

// Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.
func (o AudioResponseOutput) HighBoost() pulumi.BoolOutput {
	return o.ApplyT(func(v AudioResponse) bool { return v.HighBoost }).(pulumi.BoolOutput)
}

// Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.
func (o AudioResponseOutput) LowBoost() pulumi.BoolOutput {
	return o.ApplyT(func(v AudioResponse) bool { return v.LowBoost }).(pulumi.BoolOutput)
}

// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
func (o AudioResponseOutput) Lufs() pulumi.Float64Output {
	return o.ApplyT(func(v AudioResponse) float64 { return v.Lufs }).(pulumi.Float64Output)
}

// Audio stream resource.
type AudioStream struct {
	// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Number of audio channels. Must be between 1 and 6. The default is 2.
	ChannelCount *int `pulumi:"channelCount"`
	// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
	ChannelLayout []string `pulumi:"channelLayout"`
	// The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
	Codec *string `pulumi:"codec"`
	// The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
	DisplayName *string `pulumi:"displayName"`
	// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
	LanguageCode *string `pulumi:"languageCode"`
	// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
	Mapping []AudioMapping `pulumi:"mapping"`
	// The audio sample rate in Hertz. The default is 48000 Hertz.
	SampleRateHertz *int `pulumi:"sampleRateHertz"`
}

// AudioStreamInput is an input type that accepts AudioStreamArgs and AudioStreamOutput values.
// You can construct a concrete instance of `AudioStreamInput` via:
//
//	AudioStreamArgs{...}
type AudioStreamInput interface {
	pulumi.Input

	ToAudioStreamOutput() AudioStreamOutput
	ToAudioStreamOutputWithContext(context.Context) AudioStreamOutput
}

// Audio stream resource.
type AudioStreamArgs struct {
	// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Number of audio channels. Must be between 1 and 6. The default is 2.
	ChannelCount pulumi.IntPtrInput `pulumi:"channelCount"`
	// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
	ChannelLayout pulumi.StringArrayInput `pulumi:"channelLayout"`
	// The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
	Mapping AudioMappingArrayInput `pulumi:"mapping"`
	// The audio sample rate in Hertz. The default is 48000 Hertz.
	SampleRateHertz pulumi.IntPtrInput `pulumi:"sampleRateHertz"`
}

func (AudioStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioStream)(nil)).Elem()
}

func (i AudioStreamArgs) ToAudioStreamOutput() AudioStreamOutput {
	return i.ToAudioStreamOutputWithContext(context.Background())
}

func (i AudioStreamArgs) ToAudioStreamOutputWithContext(ctx context.Context) AudioStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioStreamOutput)
}

func (i AudioStreamArgs) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return i.ToAudioStreamPtrOutputWithContext(context.Background())
}

func (i AudioStreamArgs) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioStreamOutput).ToAudioStreamPtrOutputWithContext(ctx)
}

// AudioStreamPtrInput is an input type that accepts AudioStreamArgs, AudioStreamPtr and AudioStreamPtrOutput values.
// You can construct a concrete instance of `AudioStreamPtrInput` via:
//
//	        AudioStreamArgs{...}
//
//	or:
//
//	        nil
type AudioStreamPtrInput interface {
	pulumi.Input

	ToAudioStreamPtrOutput() AudioStreamPtrOutput
	ToAudioStreamPtrOutputWithContext(context.Context) AudioStreamPtrOutput
}

type audioStreamPtrType AudioStreamArgs

func AudioStreamPtr(v *AudioStreamArgs) AudioStreamPtrInput {
	return (*audioStreamPtrType)(v)
}

func (*audioStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AudioStream)(nil)).Elem()
}

func (i *audioStreamPtrType) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return i.ToAudioStreamPtrOutputWithContext(context.Background())
}

func (i *audioStreamPtrType) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioStreamPtrOutput)
}

// Audio stream resource.
type AudioStreamOutput struct{ *pulumi.OutputState }

func (AudioStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioStream)(nil)).Elem()
}

func (o AudioStreamOutput) ToAudioStreamOutput() AudioStreamOutput {
	return o
}

func (o AudioStreamOutput) ToAudioStreamOutputWithContext(ctx context.Context) AudioStreamOutput {
	return o
}

func (o AudioStreamOutput) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return o.ToAudioStreamPtrOutputWithContext(context.Background())
}

func (o AudioStreamOutput) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AudioStream) *AudioStream {
		return &v
	}).(AudioStreamPtrOutput)
}

// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
func (o AudioStreamOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStream) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Number of audio channels. Must be between 1 and 6. The default is 2.
func (o AudioStreamOutput) ChannelCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AudioStream) *int { return v.ChannelCount }).(pulumi.IntPtrOutput)
}

// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
func (o AudioStreamOutput) ChannelLayout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AudioStream) []string { return v.ChannelLayout }).(pulumi.StringArrayOutput)
}

// The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
func (o AudioStreamOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioStream) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
func (o AudioStreamOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioStream) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
func (o AudioStreamOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioStream) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
func (o AudioStreamOutput) Mapping() AudioMappingArrayOutput {
	return o.ApplyT(func(v AudioStream) []AudioMapping { return v.Mapping }).(AudioMappingArrayOutput)
}

// The audio sample rate in Hertz. The default is 48000 Hertz.
func (o AudioStreamOutput) SampleRateHertz() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AudioStream) *int { return v.SampleRateHertz }).(pulumi.IntPtrOutput)
}

type AudioStreamPtrOutput struct{ *pulumi.OutputState }

func (AudioStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AudioStream)(nil)).Elem()
}

func (o AudioStreamPtrOutput) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return o
}

func (o AudioStreamPtrOutput) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return o
}

func (o AudioStreamPtrOutput) Elem() AudioStreamOutput {
	return o.ApplyT(func(v *AudioStream) AudioStream {
		if v != nil {
			return *v
		}
		var ret AudioStream
		return ret
	}).(AudioStreamOutput)
}

// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
func (o AudioStreamPtrOutput) BitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AudioStream) *int {
		if v == nil {
			return nil
		}
		return &v.BitrateBps
	}).(pulumi.IntPtrOutput)
}

// Number of audio channels. Must be between 1 and 6. The default is 2.
func (o AudioStreamPtrOutput) ChannelCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AudioStream) *int {
		if v == nil {
			return nil
		}
		return v.ChannelCount
	}).(pulumi.IntPtrOutput)
}

// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
func (o AudioStreamPtrOutput) ChannelLayout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AudioStream) []string {
		if v == nil {
			return nil
		}
		return v.ChannelLayout
	}).(pulumi.StringArrayOutput)
}

// The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
func (o AudioStreamPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AudioStream) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
func (o AudioStreamPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AudioStream) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
func (o AudioStreamPtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AudioStream) *string {
		if v == nil {
			return nil
		}
		return v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
func (o AudioStreamPtrOutput) Mapping() AudioMappingArrayOutput {
	return o.ApplyT(func(v *AudioStream) []AudioMapping {
		if v == nil {
			return nil
		}
		return v.Mapping
	}).(AudioMappingArrayOutput)
}

// The audio sample rate in Hertz. The default is 48000 Hertz.
func (o AudioStreamPtrOutput) SampleRateHertz() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AudioStream) *int {
		if v == nil {
			return nil
		}
		return v.SampleRateHertz
	}).(pulumi.IntPtrOutput)
}

// Audio stream resource.
type AudioStreamResponse struct {
	// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Number of audio channels. Must be between 1 and 6. The default is 2.
	ChannelCount int `pulumi:"channelCount"`
	// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
	ChannelLayout []string `pulumi:"channelLayout"`
	// The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
	Codec string `pulumi:"codec"`
	// The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
	DisplayName string `pulumi:"displayName"`
	// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
	LanguageCode string `pulumi:"languageCode"`
	// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
	Mapping []AudioMappingResponse `pulumi:"mapping"`
	// The audio sample rate in Hertz. The default is 48000 Hertz.
	SampleRateHertz int `pulumi:"sampleRateHertz"`
}

// Audio stream resource.
type AudioStreamResponseOutput struct{ *pulumi.OutputState }

func (AudioStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioStreamResponse)(nil)).Elem()
}

func (o AudioStreamResponseOutput) ToAudioStreamResponseOutput() AudioStreamResponseOutput {
	return o
}

func (o AudioStreamResponseOutput) ToAudioStreamResponseOutputWithContext(ctx context.Context) AudioStreamResponseOutput {
	return o
}

// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
func (o AudioStreamResponseOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStreamResponse) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Number of audio channels. Must be between 1 and 6. The default is 2.
func (o AudioStreamResponseOutput) ChannelCount() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStreamResponse) int { return v.ChannelCount }).(pulumi.IntOutput)
}

// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency
func (o AudioStreamResponseOutput) ChannelLayout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AudioStreamResponse) []string { return v.ChannelLayout }).(pulumi.StringArrayOutput)
}

// The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`
func (o AudioStreamResponseOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v AudioStreamResponse) string { return v.Codec }).(pulumi.StringOutput)
}

// The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
func (o AudioStreamResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v AudioStreamResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
func (o AudioStreamResponseOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v AudioStreamResponse) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.
func (o AudioStreamResponseOutput) Mapping() AudioMappingResponseArrayOutput {
	return o.ApplyT(func(v AudioStreamResponse) []AudioMappingResponse { return v.Mapping }).(AudioMappingResponseArrayOutput)
}

// The audio sample rate in Hertz. The default is 48000 Hertz.
func (o AudioStreamResponseOutput) SampleRateHertz() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStreamResponse) int { return v.SampleRateHertz }).(pulumi.IntOutput)
}

// Bob Weaver Deinterlacing Filter Configuration.
type BwdifConfig struct {
	// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
	DeinterlaceAllFrames *bool `pulumi:"deinterlaceAllFrames"`
	// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
	Mode *string `pulumi:"mode"`
	// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
	Parity *string `pulumi:"parity"`
}

// BwdifConfigInput is an input type that accepts BwdifConfigArgs and BwdifConfigOutput values.
// You can construct a concrete instance of `BwdifConfigInput` via:
//
//	BwdifConfigArgs{...}
type BwdifConfigInput interface {
	pulumi.Input

	ToBwdifConfigOutput() BwdifConfigOutput
	ToBwdifConfigOutputWithContext(context.Context) BwdifConfigOutput
}

// Bob Weaver Deinterlacing Filter Configuration.
type BwdifConfigArgs struct {
	// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
	DeinterlaceAllFrames pulumi.BoolPtrInput `pulumi:"deinterlaceAllFrames"`
	// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
	Parity pulumi.StringPtrInput `pulumi:"parity"`
}

func (BwdifConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BwdifConfig)(nil)).Elem()
}

func (i BwdifConfigArgs) ToBwdifConfigOutput() BwdifConfigOutput {
	return i.ToBwdifConfigOutputWithContext(context.Background())
}

func (i BwdifConfigArgs) ToBwdifConfigOutputWithContext(ctx context.Context) BwdifConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BwdifConfigOutput)
}

func (i BwdifConfigArgs) ToBwdifConfigPtrOutput() BwdifConfigPtrOutput {
	return i.ToBwdifConfigPtrOutputWithContext(context.Background())
}

func (i BwdifConfigArgs) ToBwdifConfigPtrOutputWithContext(ctx context.Context) BwdifConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BwdifConfigOutput).ToBwdifConfigPtrOutputWithContext(ctx)
}

// BwdifConfigPtrInput is an input type that accepts BwdifConfigArgs, BwdifConfigPtr and BwdifConfigPtrOutput values.
// You can construct a concrete instance of `BwdifConfigPtrInput` via:
//
//	        BwdifConfigArgs{...}
//
//	or:
//
//	        nil
type BwdifConfigPtrInput interface {
	pulumi.Input

	ToBwdifConfigPtrOutput() BwdifConfigPtrOutput
	ToBwdifConfigPtrOutputWithContext(context.Context) BwdifConfigPtrOutput
}

type bwdifConfigPtrType BwdifConfigArgs

func BwdifConfigPtr(v *BwdifConfigArgs) BwdifConfigPtrInput {
	return (*bwdifConfigPtrType)(v)
}

func (*bwdifConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BwdifConfig)(nil)).Elem()
}

func (i *bwdifConfigPtrType) ToBwdifConfigPtrOutput() BwdifConfigPtrOutput {
	return i.ToBwdifConfigPtrOutputWithContext(context.Background())
}

func (i *bwdifConfigPtrType) ToBwdifConfigPtrOutputWithContext(ctx context.Context) BwdifConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BwdifConfigPtrOutput)
}

// Bob Weaver Deinterlacing Filter Configuration.
type BwdifConfigOutput struct{ *pulumi.OutputState }

func (BwdifConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BwdifConfig)(nil)).Elem()
}

func (o BwdifConfigOutput) ToBwdifConfigOutput() BwdifConfigOutput {
	return o
}

func (o BwdifConfigOutput) ToBwdifConfigOutputWithContext(ctx context.Context) BwdifConfigOutput {
	return o
}

func (o BwdifConfigOutput) ToBwdifConfigPtrOutput() BwdifConfigPtrOutput {
	return o.ToBwdifConfigPtrOutputWithContext(context.Background())
}

func (o BwdifConfigOutput) ToBwdifConfigPtrOutputWithContext(ctx context.Context) BwdifConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BwdifConfig) *BwdifConfig {
		return &v
	}).(BwdifConfigPtrOutput)
}

// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
func (o BwdifConfigOutput) DeinterlaceAllFrames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BwdifConfig) *bool { return v.DeinterlaceAllFrames }).(pulumi.BoolPtrOutput)
}

// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
func (o BwdifConfigOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwdifConfig) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
func (o BwdifConfigOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BwdifConfig) *string { return v.Parity }).(pulumi.StringPtrOutput)
}

type BwdifConfigPtrOutput struct{ *pulumi.OutputState }

func (BwdifConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BwdifConfig)(nil)).Elem()
}

func (o BwdifConfigPtrOutput) ToBwdifConfigPtrOutput() BwdifConfigPtrOutput {
	return o
}

func (o BwdifConfigPtrOutput) ToBwdifConfigPtrOutputWithContext(ctx context.Context) BwdifConfigPtrOutput {
	return o
}

func (o BwdifConfigPtrOutput) Elem() BwdifConfigOutput {
	return o.ApplyT(func(v *BwdifConfig) BwdifConfig {
		if v != nil {
			return *v
		}
		var ret BwdifConfig
		return ret
	}).(BwdifConfigOutput)
}

// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
func (o BwdifConfigPtrOutput) DeinterlaceAllFrames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BwdifConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DeinterlaceAllFrames
	}).(pulumi.BoolPtrOutput)
}

// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
func (o BwdifConfigPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BwdifConfig) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
func (o BwdifConfigPtrOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BwdifConfig) *string {
		if v == nil {
			return nil
		}
		return v.Parity
	}).(pulumi.StringPtrOutput)
}

// Bob Weaver Deinterlacing Filter Configuration.
type BwdifConfigResponse struct {
	// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
	DeinterlaceAllFrames bool `pulumi:"deinterlaceAllFrames"`
	// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
	Mode string `pulumi:"mode"`
	// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
	Parity string `pulumi:"parity"`
}

// Bob Weaver Deinterlacing Filter Configuration.
type BwdifConfigResponseOutput struct{ *pulumi.OutputState }

func (BwdifConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BwdifConfigResponse)(nil)).Elem()
}

func (o BwdifConfigResponseOutput) ToBwdifConfigResponseOutput() BwdifConfigResponseOutput {
	return o
}

func (o BwdifConfigResponseOutput) ToBwdifConfigResponseOutputWithContext(ctx context.Context) BwdifConfigResponseOutput {
	return o
}

// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
func (o BwdifConfigResponseOutput) DeinterlaceAllFrames() pulumi.BoolOutput {
	return o.ApplyT(func(v BwdifConfigResponse) bool { return v.DeinterlaceAllFrames }).(pulumi.BoolOutput)
}

// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
func (o BwdifConfigResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v BwdifConfigResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
func (o BwdifConfigResponseOutput) Parity() pulumi.StringOutput {
	return o.ApplyT(func(v BwdifConfigResponse) string { return v.Parity }).(pulumi.StringOutput)
}

// Clearkey configuration.
type Clearkey struct {
}

// ClearkeyInput is an input type that accepts ClearkeyArgs and ClearkeyOutput values.
// You can construct a concrete instance of `ClearkeyInput` via:
//
//	ClearkeyArgs{...}
type ClearkeyInput interface {
	pulumi.Input

	ToClearkeyOutput() ClearkeyOutput
	ToClearkeyOutputWithContext(context.Context) ClearkeyOutput
}

// Clearkey configuration.
type ClearkeyArgs struct {
}

func (ClearkeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Clearkey)(nil)).Elem()
}

func (i ClearkeyArgs) ToClearkeyOutput() ClearkeyOutput {
	return i.ToClearkeyOutputWithContext(context.Background())
}

func (i ClearkeyArgs) ToClearkeyOutputWithContext(ctx context.Context) ClearkeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClearkeyOutput)
}

func (i ClearkeyArgs) ToClearkeyPtrOutput() ClearkeyPtrOutput {
	return i.ToClearkeyPtrOutputWithContext(context.Background())
}

func (i ClearkeyArgs) ToClearkeyPtrOutputWithContext(ctx context.Context) ClearkeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClearkeyOutput).ToClearkeyPtrOutputWithContext(ctx)
}

// ClearkeyPtrInput is an input type that accepts ClearkeyArgs, ClearkeyPtr and ClearkeyPtrOutput values.
// You can construct a concrete instance of `ClearkeyPtrInput` via:
//
//	        ClearkeyArgs{...}
//
//	or:
//
//	        nil
type ClearkeyPtrInput interface {
	pulumi.Input

	ToClearkeyPtrOutput() ClearkeyPtrOutput
	ToClearkeyPtrOutputWithContext(context.Context) ClearkeyPtrOutput
}

type clearkeyPtrType ClearkeyArgs

func ClearkeyPtr(v *ClearkeyArgs) ClearkeyPtrInput {
	return (*clearkeyPtrType)(v)
}

func (*clearkeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Clearkey)(nil)).Elem()
}

func (i *clearkeyPtrType) ToClearkeyPtrOutput() ClearkeyPtrOutput {
	return i.ToClearkeyPtrOutputWithContext(context.Background())
}

func (i *clearkeyPtrType) ToClearkeyPtrOutputWithContext(ctx context.Context) ClearkeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClearkeyPtrOutput)
}

// Clearkey configuration.
type ClearkeyOutput struct{ *pulumi.OutputState }

func (ClearkeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Clearkey)(nil)).Elem()
}

func (o ClearkeyOutput) ToClearkeyOutput() ClearkeyOutput {
	return o
}

func (o ClearkeyOutput) ToClearkeyOutputWithContext(ctx context.Context) ClearkeyOutput {
	return o
}

func (o ClearkeyOutput) ToClearkeyPtrOutput() ClearkeyPtrOutput {
	return o.ToClearkeyPtrOutputWithContext(context.Background())
}

func (o ClearkeyOutput) ToClearkeyPtrOutputWithContext(ctx context.Context) ClearkeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Clearkey) *Clearkey {
		return &v
	}).(ClearkeyPtrOutput)
}

type ClearkeyPtrOutput struct{ *pulumi.OutputState }

func (ClearkeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clearkey)(nil)).Elem()
}

func (o ClearkeyPtrOutput) ToClearkeyPtrOutput() ClearkeyPtrOutput {
	return o
}

func (o ClearkeyPtrOutput) ToClearkeyPtrOutputWithContext(ctx context.Context) ClearkeyPtrOutput {
	return o
}

func (o ClearkeyPtrOutput) Elem() ClearkeyOutput {
	return o.ApplyT(func(v *Clearkey) Clearkey {
		if v != nil {
			return *v
		}
		var ret Clearkey
		return ret
	}).(ClearkeyOutput)
}

// Clearkey configuration.
type ClearkeyResponse struct {
}

// Clearkey configuration.
type ClearkeyResponseOutput struct{ *pulumi.OutputState }

func (ClearkeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClearkeyResponse)(nil)).Elem()
}

func (o ClearkeyResponseOutput) ToClearkeyResponseOutput() ClearkeyResponseOutput {
	return o
}

func (o ClearkeyResponseOutput) ToClearkeyResponseOutputWithContext(ctx context.Context) ClearkeyResponseOutput {
	return o
}

// Color preprocessing configuration. **Note:** This configuration is not supported.
type Color struct {
	// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
	Brightness *float64 `pulumi:"brightness"`
	// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
	Contrast *float64 `pulumi:"contrast"`
	// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
	Saturation *float64 `pulumi:"saturation"`
}

// ColorInput is an input type that accepts ColorArgs and ColorOutput values.
// You can construct a concrete instance of `ColorInput` via:
//
//	ColorArgs{...}
type ColorInput interface {
	pulumi.Input

	ToColorOutput() ColorOutput
	ToColorOutputWithContext(context.Context) ColorOutput
}

// Color preprocessing configuration. **Note:** This configuration is not supported.
type ColorArgs struct {
	// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
	Brightness pulumi.Float64PtrInput `pulumi:"brightness"`
	// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
	Contrast pulumi.Float64PtrInput `pulumi:"contrast"`
	// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
	Saturation pulumi.Float64PtrInput `pulumi:"saturation"`
}

func (ColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Color)(nil)).Elem()
}

func (i ColorArgs) ToColorOutput() ColorOutput {
	return i.ToColorOutputWithContext(context.Background())
}

func (i ColorArgs) ToColorOutputWithContext(ctx context.Context) ColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorOutput)
}

func (i ColorArgs) ToColorPtrOutput() ColorPtrOutput {
	return i.ToColorPtrOutputWithContext(context.Background())
}

func (i ColorArgs) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorOutput).ToColorPtrOutputWithContext(ctx)
}

// ColorPtrInput is an input type that accepts ColorArgs, ColorPtr and ColorPtrOutput values.
// You can construct a concrete instance of `ColorPtrInput` via:
//
//	        ColorArgs{...}
//
//	or:
//
//	        nil
type ColorPtrInput interface {
	pulumi.Input

	ToColorPtrOutput() ColorPtrOutput
	ToColorPtrOutputWithContext(context.Context) ColorPtrOutput
}

type colorPtrType ColorArgs

func ColorPtr(v *ColorArgs) ColorPtrInput {
	return (*colorPtrType)(v)
}

func (*colorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Color)(nil)).Elem()
}

func (i *colorPtrType) ToColorPtrOutput() ColorPtrOutput {
	return i.ToColorPtrOutputWithContext(context.Background())
}

func (i *colorPtrType) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorPtrOutput)
}

// Color preprocessing configuration. **Note:** This configuration is not supported.
type ColorOutput struct{ *pulumi.OutputState }

func (ColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Color)(nil)).Elem()
}

func (o ColorOutput) ToColorOutput() ColorOutput {
	return o
}

func (o ColorOutput) ToColorOutputWithContext(ctx context.Context) ColorOutput {
	return o
}

func (o ColorOutput) ToColorPtrOutput() ColorPtrOutput {
	return o.ToColorPtrOutputWithContext(context.Background())
}

func (o ColorOutput) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Color) *Color {
		return &v
	}).(ColorPtrOutput)
}

// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
func (o ColorOutput) Brightness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Color) *float64 { return v.Brightness }).(pulumi.Float64PtrOutput)
}

// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
func (o ColorOutput) Contrast() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Color) *float64 { return v.Contrast }).(pulumi.Float64PtrOutput)
}

// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
func (o ColorOutput) Saturation() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Color) *float64 { return v.Saturation }).(pulumi.Float64PtrOutput)
}

type ColorPtrOutput struct{ *pulumi.OutputState }

func (ColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Color)(nil)).Elem()
}

func (o ColorPtrOutput) ToColorPtrOutput() ColorPtrOutput {
	return o
}

func (o ColorPtrOutput) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return o
}

func (o ColorPtrOutput) Elem() ColorOutput {
	return o.ApplyT(func(v *Color) Color {
		if v != nil {
			return *v
		}
		var ret Color
		return ret
	}).(ColorOutput)
}

// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
func (o ColorPtrOutput) Brightness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Brightness
	}).(pulumi.Float64PtrOutput)
}

// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
func (o ColorPtrOutput) Contrast() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Contrast
	}).(pulumi.Float64PtrOutput)
}

// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
func (o ColorPtrOutput) Saturation() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Saturation
	}).(pulumi.Float64PtrOutput)
}

// Color preprocessing configuration. **Note:** This configuration is not supported.
type ColorResponse struct {
	// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
	Brightness float64 `pulumi:"brightness"`
	// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
	Contrast float64 `pulumi:"contrast"`
	// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
	Saturation float64 `pulumi:"saturation"`
}

// Color preprocessing configuration. **Note:** This configuration is not supported.
type ColorResponseOutput struct{ *pulumi.OutputState }

func (ColorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColorResponse)(nil)).Elem()
}

func (o ColorResponseOutput) ToColorResponseOutput() ColorResponseOutput {
	return o
}

func (o ColorResponseOutput) ToColorResponseOutputWithContext(ctx context.Context) ColorResponseOutput {
	return o
}

// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
func (o ColorResponseOutput) Brightness() pulumi.Float64Output {
	return o.ApplyT(func(v ColorResponse) float64 { return v.Brightness }).(pulumi.Float64Output)
}

// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
func (o ColorResponseOutput) Contrast() pulumi.Float64Output {
	return o.ApplyT(func(v ColorResponse) float64 { return v.Contrast }).(pulumi.Float64Output)
}

// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
func (o ColorResponseOutput) Saturation() pulumi.Float64Output {
	return o.ApplyT(func(v ColorResponse) float64 { return v.Saturation }).(pulumi.Float64Output)
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type Crop struct {
	// The number of pixels to crop from the bottom. The default is 0.
	BottomPixels *int `pulumi:"bottomPixels"`
	// The number of pixels to crop from the left. The default is 0.
	LeftPixels *int `pulumi:"leftPixels"`
	// The number of pixels to crop from the right. The default is 0.
	RightPixels *int `pulumi:"rightPixels"`
	// The number of pixels to crop from the top. The default is 0.
	TopPixels *int `pulumi:"topPixels"`
}

// CropInput is an input type that accepts CropArgs and CropOutput values.
// You can construct a concrete instance of `CropInput` via:
//
//	CropArgs{...}
type CropInput interface {
	pulumi.Input

	ToCropOutput() CropOutput
	ToCropOutputWithContext(context.Context) CropOutput
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropArgs struct {
	// The number of pixels to crop from the bottom. The default is 0.
	BottomPixels pulumi.IntPtrInput `pulumi:"bottomPixels"`
	// The number of pixels to crop from the left. The default is 0.
	LeftPixels pulumi.IntPtrInput `pulumi:"leftPixels"`
	// The number of pixels to crop from the right. The default is 0.
	RightPixels pulumi.IntPtrInput `pulumi:"rightPixels"`
	// The number of pixels to crop from the top. The default is 0.
	TopPixels pulumi.IntPtrInput `pulumi:"topPixels"`
}

func (CropArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Crop)(nil)).Elem()
}

func (i CropArgs) ToCropOutput() CropOutput {
	return i.ToCropOutputWithContext(context.Background())
}

func (i CropArgs) ToCropOutputWithContext(ctx context.Context) CropOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CropOutput)
}

func (i CropArgs) ToCropPtrOutput() CropPtrOutput {
	return i.ToCropPtrOutputWithContext(context.Background())
}

func (i CropArgs) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CropOutput).ToCropPtrOutputWithContext(ctx)
}

// CropPtrInput is an input type that accepts CropArgs, CropPtr and CropPtrOutput values.
// You can construct a concrete instance of `CropPtrInput` via:
//
//	        CropArgs{...}
//
//	or:
//
//	        nil
type CropPtrInput interface {
	pulumi.Input

	ToCropPtrOutput() CropPtrOutput
	ToCropPtrOutputWithContext(context.Context) CropPtrOutput
}

type cropPtrType CropArgs

func CropPtr(v *CropArgs) CropPtrInput {
	return (*cropPtrType)(v)
}

func (*cropPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Crop)(nil)).Elem()
}

func (i *cropPtrType) ToCropPtrOutput() CropPtrOutput {
	return i.ToCropPtrOutputWithContext(context.Background())
}

func (i *cropPtrType) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CropPtrOutput)
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropOutput struct{ *pulumi.OutputState }

func (CropOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Crop)(nil)).Elem()
}

func (o CropOutput) ToCropOutput() CropOutput {
	return o
}

func (o CropOutput) ToCropOutputWithContext(ctx context.Context) CropOutput {
	return o
}

func (o CropOutput) ToCropPtrOutput() CropPtrOutput {
	return o.ToCropPtrOutputWithContext(context.Background())
}

func (o CropOutput) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Crop) *Crop {
		return &v
	}).(CropPtrOutput)
}

// The number of pixels to crop from the bottom. The default is 0.
func (o CropOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.BottomPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the left. The default is 0.
func (o CropOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.LeftPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the right. The default is 0.
func (o CropOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.RightPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the top. The default is 0.
func (o CropOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.TopPixels }).(pulumi.IntPtrOutput)
}

type CropPtrOutput struct{ *pulumi.OutputState }

func (CropPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Crop)(nil)).Elem()
}

func (o CropPtrOutput) ToCropPtrOutput() CropPtrOutput {
	return o
}

func (o CropPtrOutput) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return o
}

func (o CropPtrOutput) Elem() CropOutput {
	return o.ApplyT(func(v *Crop) Crop {
		if v != nil {
			return *v
		}
		var ret Crop
		return ret
	}).(CropOutput)
}

// The number of pixels to crop from the bottom. The default is 0.
func (o CropPtrOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.BottomPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the left. The default is 0.
func (o CropPtrOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.LeftPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the right. The default is 0.
func (o CropPtrOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.RightPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the top. The default is 0.
func (o CropPtrOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.TopPixels
	}).(pulumi.IntPtrOutput)
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropResponse struct {
	// The number of pixels to crop from the bottom. The default is 0.
	BottomPixels int `pulumi:"bottomPixels"`
	// The number of pixels to crop from the left. The default is 0.
	LeftPixels int `pulumi:"leftPixels"`
	// The number of pixels to crop from the right. The default is 0.
	RightPixels int `pulumi:"rightPixels"`
	// The number of pixels to crop from the top. The default is 0.
	TopPixels int `pulumi:"topPixels"`
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropResponseOutput struct{ *pulumi.OutputState }

func (CropResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CropResponse)(nil)).Elem()
}

func (o CropResponseOutput) ToCropResponseOutput() CropResponseOutput {
	return o
}

func (o CropResponseOutput) ToCropResponseOutputWithContext(ctx context.Context) CropResponseOutput {
	return o
}

// The number of pixels to crop from the bottom. The default is 0.
func (o CropResponseOutput) BottomPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.BottomPixels }).(pulumi.IntOutput)
}

// The number of pixels to crop from the left. The default is 0.
func (o CropResponseOutput) LeftPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.LeftPixels }).(pulumi.IntOutput)
}

// The number of pixels to crop from the right. The default is 0.
func (o CropResponseOutput) RightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.RightPixels }).(pulumi.IntOutput)
}

// The number of pixels to crop from the top. The default is 0.
func (o CropResponseOutput) TopPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.TopPixels }).(pulumi.IntOutput)
}

// `DASH` manifest configuration.
type DashConfig struct {
	// The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
	SegmentReferenceScheme *DashConfigSegmentReferenceScheme `pulumi:"segmentReferenceScheme"`
}

// DashConfigInput is an input type that accepts DashConfigArgs and DashConfigOutput values.
// You can construct a concrete instance of `DashConfigInput` via:
//
//	DashConfigArgs{...}
type DashConfigInput interface {
	pulumi.Input

	ToDashConfigOutput() DashConfigOutput
	ToDashConfigOutputWithContext(context.Context) DashConfigOutput
}

// `DASH` manifest configuration.
type DashConfigArgs struct {
	// The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
	SegmentReferenceScheme DashConfigSegmentReferenceSchemePtrInput `pulumi:"segmentReferenceScheme"`
}

func (DashConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashConfig)(nil)).Elem()
}

func (i DashConfigArgs) ToDashConfigOutput() DashConfigOutput {
	return i.ToDashConfigOutputWithContext(context.Background())
}

func (i DashConfigArgs) ToDashConfigOutputWithContext(ctx context.Context) DashConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashConfigOutput)
}

func (i DashConfigArgs) ToDashConfigPtrOutput() DashConfigPtrOutput {
	return i.ToDashConfigPtrOutputWithContext(context.Background())
}

func (i DashConfigArgs) ToDashConfigPtrOutputWithContext(ctx context.Context) DashConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashConfigOutput).ToDashConfigPtrOutputWithContext(ctx)
}

// DashConfigPtrInput is an input type that accepts DashConfigArgs, DashConfigPtr and DashConfigPtrOutput values.
// You can construct a concrete instance of `DashConfigPtrInput` via:
//
//	        DashConfigArgs{...}
//
//	or:
//
//	        nil
type DashConfigPtrInput interface {
	pulumi.Input

	ToDashConfigPtrOutput() DashConfigPtrOutput
	ToDashConfigPtrOutputWithContext(context.Context) DashConfigPtrOutput
}

type dashConfigPtrType DashConfigArgs

func DashConfigPtr(v *DashConfigArgs) DashConfigPtrInput {
	return (*dashConfigPtrType)(v)
}

func (*dashConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DashConfig)(nil)).Elem()
}

func (i *dashConfigPtrType) ToDashConfigPtrOutput() DashConfigPtrOutput {
	return i.ToDashConfigPtrOutputWithContext(context.Background())
}

func (i *dashConfigPtrType) ToDashConfigPtrOutputWithContext(ctx context.Context) DashConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashConfigPtrOutput)
}

// `DASH` manifest configuration.
type DashConfigOutput struct{ *pulumi.OutputState }

func (DashConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashConfig)(nil)).Elem()
}

func (o DashConfigOutput) ToDashConfigOutput() DashConfigOutput {
	return o
}

func (o DashConfigOutput) ToDashConfigOutputWithContext(ctx context.Context) DashConfigOutput {
	return o
}

func (o DashConfigOutput) ToDashConfigPtrOutput() DashConfigPtrOutput {
	return o.ToDashConfigPtrOutputWithContext(context.Background())
}

func (o DashConfigOutput) ToDashConfigPtrOutputWithContext(ctx context.Context) DashConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DashConfig) *DashConfig {
		return &v
	}).(DashConfigPtrOutput)
}

// The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
func (o DashConfigOutput) SegmentReferenceScheme() DashConfigSegmentReferenceSchemePtrOutput {
	return o.ApplyT(func(v DashConfig) *DashConfigSegmentReferenceScheme { return v.SegmentReferenceScheme }).(DashConfigSegmentReferenceSchemePtrOutput)
}

type DashConfigPtrOutput struct{ *pulumi.OutputState }

func (DashConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashConfig)(nil)).Elem()
}

func (o DashConfigPtrOutput) ToDashConfigPtrOutput() DashConfigPtrOutput {
	return o
}

func (o DashConfigPtrOutput) ToDashConfigPtrOutputWithContext(ctx context.Context) DashConfigPtrOutput {
	return o
}

func (o DashConfigPtrOutput) Elem() DashConfigOutput {
	return o.ApplyT(func(v *DashConfig) DashConfig {
		if v != nil {
			return *v
		}
		var ret DashConfig
		return ret
	}).(DashConfigOutput)
}

// The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
func (o DashConfigPtrOutput) SegmentReferenceScheme() DashConfigSegmentReferenceSchemePtrOutput {
	return o.ApplyT(func(v *DashConfig) *DashConfigSegmentReferenceScheme {
		if v == nil {
			return nil
		}
		return v.SegmentReferenceScheme
	}).(DashConfigSegmentReferenceSchemePtrOutput)
}

// `DASH` manifest configuration.
type DashConfigResponse struct {
	// The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
	SegmentReferenceScheme string `pulumi:"segmentReferenceScheme"`
}

// `DASH` manifest configuration.
type DashConfigResponseOutput struct{ *pulumi.OutputState }

func (DashConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashConfigResponse)(nil)).Elem()
}

func (o DashConfigResponseOutput) ToDashConfigResponseOutput() DashConfigResponseOutput {
	return o
}

func (o DashConfigResponseOutput) ToDashConfigResponseOutputWithContext(ctx context.Context) DashConfigResponseOutput {
	return o
}

// The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.
func (o DashConfigResponseOutput) SegmentReferenceScheme() pulumi.StringOutput {
	return o.ApplyT(func(v DashConfigResponse) string { return v.SegmentReferenceScheme }).(pulumi.StringOutput)
}

// Deblock preprocessing configuration. **Note:** This configuration is not supported.
type Deblock struct {
	// Enable deblocker. The default is `false`.
	Enabled *bool `pulumi:"enabled"`
	// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
	Strength *float64 `pulumi:"strength"`
}

// DeblockInput is an input type that accepts DeblockArgs and DeblockOutput values.
// You can construct a concrete instance of `DeblockInput` via:
//
//	DeblockArgs{...}
type DeblockInput interface {
	pulumi.Input

	ToDeblockOutput() DeblockOutput
	ToDeblockOutputWithContext(context.Context) DeblockOutput
}

// Deblock preprocessing configuration. **Note:** This configuration is not supported.
type DeblockArgs struct {
	// Enable deblocker. The default is `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
	Strength pulumi.Float64PtrInput `pulumi:"strength"`
}

func (DeblockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deblock)(nil)).Elem()
}

func (i DeblockArgs) ToDeblockOutput() DeblockOutput {
	return i.ToDeblockOutputWithContext(context.Background())
}

func (i DeblockArgs) ToDeblockOutputWithContext(ctx context.Context) DeblockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeblockOutput)
}

func (i DeblockArgs) ToDeblockPtrOutput() DeblockPtrOutput {
	return i.ToDeblockPtrOutputWithContext(context.Background())
}

func (i DeblockArgs) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeblockOutput).ToDeblockPtrOutputWithContext(ctx)
}

// DeblockPtrInput is an input type that accepts DeblockArgs, DeblockPtr and DeblockPtrOutput values.
// You can construct a concrete instance of `DeblockPtrInput` via:
//
//	        DeblockArgs{...}
//
//	or:
//
//	        nil
type DeblockPtrInput interface {
	pulumi.Input

	ToDeblockPtrOutput() DeblockPtrOutput
	ToDeblockPtrOutputWithContext(context.Context) DeblockPtrOutput
}

type deblockPtrType DeblockArgs

func DeblockPtr(v *DeblockArgs) DeblockPtrInput {
	return (*deblockPtrType)(v)
}

func (*deblockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deblock)(nil)).Elem()
}

func (i *deblockPtrType) ToDeblockPtrOutput() DeblockPtrOutput {
	return i.ToDeblockPtrOutputWithContext(context.Background())
}

func (i *deblockPtrType) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeblockPtrOutput)
}

// Deblock preprocessing configuration. **Note:** This configuration is not supported.
type DeblockOutput struct{ *pulumi.OutputState }

func (DeblockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deblock)(nil)).Elem()
}

func (o DeblockOutput) ToDeblockOutput() DeblockOutput {
	return o
}

func (o DeblockOutput) ToDeblockOutputWithContext(ctx context.Context) DeblockOutput {
	return o
}

func (o DeblockOutput) ToDeblockPtrOutput() DeblockPtrOutput {
	return o.ToDeblockPtrOutputWithContext(context.Background())
}

func (o DeblockOutput) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deblock) *Deblock {
		return &v
	}).(DeblockPtrOutput)
}

// Enable deblocker. The default is `false`.
func (o DeblockOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Deblock) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
func (o DeblockOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Deblock) *float64 { return v.Strength }).(pulumi.Float64PtrOutput)
}

type DeblockPtrOutput struct{ *pulumi.OutputState }

func (DeblockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deblock)(nil)).Elem()
}

func (o DeblockPtrOutput) ToDeblockPtrOutput() DeblockPtrOutput {
	return o
}

func (o DeblockPtrOutput) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return o
}

func (o DeblockPtrOutput) Elem() DeblockOutput {
	return o.ApplyT(func(v *Deblock) Deblock {
		if v != nil {
			return *v
		}
		var ret Deblock
		return ret
	}).(DeblockOutput)
}

// Enable deblocker. The default is `false`.
func (o DeblockPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Deblock) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
func (o DeblockPtrOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Deblock) *float64 {
		if v == nil {
			return nil
		}
		return v.Strength
	}).(pulumi.Float64PtrOutput)
}

// Deblock preprocessing configuration. **Note:** This configuration is not supported.
type DeblockResponse struct {
	// Enable deblocker. The default is `false`.
	Enabled bool `pulumi:"enabled"`
	// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
	Strength float64 `pulumi:"strength"`
}

// Deblock preprocessing configuration. **Note:** This configuration is not supported.
type DeblockResponseOutput struct{ *pulumi.OutputState }

func (DeblockResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeblockResponse)(nil)).Elem()
}

func (o DeblockResponseOutput) ToDeblockResponseOutput() DeblockResponseOutput {
	return o
}

func (o DeblockResponseOutput) ToDeblockResponseOutputWithContext(ctx context.Context) DeblockResponseOutput {
	return o
}

// Enable deblocker. The default is `false`.
func (o DeblockResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DeblockResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
func (o DeblockResponseOutput) Strength() pulumi.Float64Output {
	return o.ApplyT(func(v DeblockResponse) float64 { return v.Strength }).(pulumi.Float64Output)
}

// Deinterlace configuration for input video.
type Deinterlace struct {
	// Specifies the Bob Weaver Deinterlacing Filter Configuration.
	Bwdif *BwdifConfig `pulumi:"bwdif"`
	// Specifies the Yet Another Deinterlacing Filter Configuration.
	Yadif *YadifConfig `pulumi:"yadif"`
}

// DeinterlaceInput is an input type that accepts DeinterlaceArgs and DeinterlaceOutput values.
// You can construct a concrete instance of `DeinterlaceInput` via:
//
//	DeinterlaceArgs{...}
type DeinterlaceInput interface {
	pulumi.Input

	ToDeinterlaceOutput() DeinterlaceOutput
	ToDeinterlaceOutputWithContext(context.Context) DeinterlaceOutput
}

// Deinterlace configuration for input video.
type DeinterlaceArgs struct {
	// Specifies the Bob Weaver Deinterlacing Filter Configuration.
	Bwdif BwdifConfigPtrInput `pulumi:"bwdif"`
	// Specifies the Yet Another Deinterlacing Filter Configuration.
	Yadif YadifConfigPtrInput `pulumi:"yadif"`
}

func (DeinterlaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deinterlace)(nil)).Elem()
}

func (i DeinterlaceArgs) ToDeinterlaceOutput() DeinterlaceOutput {
	return i.ToDeinterlaceOutputWithContext(context.Background())
}

func (i DeinterlaceArgs) ToDeinterlaceOutputWithContext(ctx context.Context) DeinterlaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlaceOutput)
}

func (i DeinterlaceArgs) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return i.ToDeinterlacePtrOutputWithContext(context.Background())
}

func (i DeinterlaceArgs) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlaceOutput).ToDeinterlacePtrOutputWithContext(ctx)
}

// DeinterlacePtrInput is an input type that accepts DeinterlaceArgs, DeinterlacePtr and DeinterlacePtrOutput values.
// You can construct a concrete instance of `DeinterlacePtrInput` via:
//
//	        DeinterlaceArgs{...}
//
//	or:
//
//	        nil
type DeinterlacePtrInput interface {
	pulumi.Input

	ToDeinterlacePtrOutput() DeinterlacePtrOutput
	ToDeinterlacePtrOutputWithContext(context.Context) DeinterlacePtrOutput
}

type deinterlacePtrType DeinterlaceArgs

func DeinterlacePtr(v *DeinterlaceArgs) DeinterlacePtrInput {
	return (*deinterlacePtrType)(v)
}

func (*deinterlacePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deinterlace)(nil)).Elem()
}

func (i *deinterlacePtrType) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return i.ToDeinterlacePtrOutputWithContext(context.Background())
}

func (i *deinterlacePtrType) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeinterlacePtrOutput)
}

// Deinterlace configuration for input video.
type DeinterlaceOutput struct{ *pulumi.OutputState }

func (DeinterlaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deinterlace)(nil)).Elem()
}

func (o DeinterlaceOutput) ToDeinterlaceOutput() DeinterlaceOutput {
	return o
}

func (o DeinterlaceOutput) ToDeinterlaceOutputWithContext(ctx context.Context) DeinterlaceOutput {
	return o
}

func (o DeinterlaceOutput) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return o.ToDeinterlacePtrOutputWithContext(context.Background())
}

func (o DeinterlaceOutput) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deinterlace) *Deinterlace {
		return &v
	}).(DeinterlacePtrOutput)
}

// Specifies the Bob Weaver Deinterlacing Filter Configuration.
func (o DeinterlaceOutput) Bwdif() BwdifConfigPtrOutput {
	return o.ApplyT(func(v Deinterlace) *BwdifConfig { return v.Bwdif }).(BwdifConfigPtrOutput)
}

// Specifies the Yet Another Deinterlacing Filter Configuration.
func (o DeinterlaceOutput) Yadif() YadifConfigPtrOutput {
	return o.ApplyT(func(v Deinterlace) *YadifConfig { return v.Yadif }).(YadifConfigPtrOutput)
}

type DeinterlacePtrOutput struct{ *pulumi.OutputState }

func (DeinterlacePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deinterlace)(nil)).Elem()
}

func (o DeinterlacePtrOutput) ToDeinterlacePtrOutput() DeinterlacePtrOutput {
	return o
}

func (o DeinterlacePtrOutput) ToDeinterlacePtrOutputWithContext(ctx context.Context) DeinterlacePtrOutput {
	return o
}

func (o DeinterlacePtrOutput) Elem() DeinterlaceOutput {
	return o.ApplyT(func(v *Deinterlace) Deinterlace {
		if v != nil {
			return *v
		}
		var ret Deinterlace
		return ret
	}).(DeinterlaceOutput)
}

// Specifies the Bob Weaver Deinterlacing Filter Configuration.
func (o DeinterlacePtrOutput) Bwdif() BwdifConfigPtrOutput {
	return o.ApplyT(func(v *Deinterlace) *BwdifConfig {
		if v == nil {
			return nil
		}
		return v.Bwdif
	}).(BwdifConfigPtrOutput)
}

// Specifies the Yet Another Deinterlacing Filter Configuration.
func (o DeinterlacePtrOutput) Yadif() YadifConfigPtrOutput {
	return o.ApplyT(func(v *Deinterlace) *YadifConfig {
		if v == nil {
			return nil
		}
		return v.Yadif
	}).(YadifConfigPtrOutput)
}

// Deinterlace configuration for input video.
type DeinterlaceResponse struct {
	// Specifies the Bob Weaver Deinterlacing Filter Configuration.
	Bwdif BwdifConfigResponse `pulumi:"bwdif"`
	// Specifies the Yet Another Deinterlacing Filter Configuration.
	Yadif YadifConfigResponse `pulumi:"yadif"`
}

// Deinterlace configuration for input video.
type DeinterlaceResponseOutput struct{ *pulumi.OutputState }

func (DeinterlaceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeinterlaceResponse)(nil)).Elem()
}

func (o DeinterlaceResponseOutput) ToDeinterlaceResponseOutput() DeinterlaceResponseOutput {
	return o
}

func (o DeinterlaceResponseOutput) ToDeinterlaceResponseOutputWithContext(ctx context.Context) DeinterlaceResponseOutput {
	return o
}

// Specifies the Bob Weaver Deinterlacing Filter Configuration.
func (o DeinterlaceResponseOutput) Bwdif() BwdifConfigResponseOutput {
	return o.ApplyT(func(v DeinterlaceResponse) BwdifConfigResponse { return v.Bwdif }).(BwdifConfigResponseOutput)
}

// Specifies the Yet Another Deinterlacing Filter Configuration.
func (o DeinterlaceResponseOutput) Yadif() YadifConfigResponseOutput {
	return o.ApplyT(func(v DeinterlaceResponse) YadifConfigResponse { return v.Yadif }).(YadifConfigResponseOutput)
}

// Denoise preprocessing configuration. **Note:** This configuration is not supported.
type Denoise struct {
	// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
	Strength *float64 `pulumi:"strength"`
	// Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
	Tune *string `pulumi:"tune"`
}

// DenoiseInput is an input type that accepts DenoiseArgs and DenoiseOutput values.
// You can construct a concrete instance of `DenoiseInput` via:
//
//	DenoiseArgs{...}
type DenoiseInput interface {
	pulumi.Input

	ToDenoiseOutput() DenoiseOutput
	ToDenoiseOutputWithContext(context.Context) DenoiseOutput
}

// Denoise preprocessing configuration. **Note:** This configuration is not supported.
type DenoiseArgs struct {
	// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
	Strength pulumi.Float64PtrInput `pulumi:"strength"`
	// Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
	Tune pulumi.StringPtrInput `pulumi:"tune"`
}

func (DenoiseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Denoise)(nil)).Elem()
}

func (i DenoiseArgs) ToDenoiseOutput() DenoiseOutput {
	return i.ToDenoiseOutputWithContext(context.Background())
}

func (i DenoiseArgs) ToDenoiseOutputWithContext(ctx context.Context) DenoiseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenoiseOutput)
}

func (i DenoiseArgs) ToDenoisePtrOutput() DenoisePtrOutput {
	return i.ToDenoisePtrOutputWithContext(context.Background())
}

func (i DenoiseArgs) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenoiseOutput).ToDenoisePtrOutputWithContext(ctx)
}

// DenoisePtrInput is an input type that accepts DenoiseArgs, DenoisePtr and DenoisePtrOutput values.
// You can construct a concrete instance of `DenoisePtrInput` via:
//
//	        DenoiseArgs{...}
//
//	or:
//
//	        nil
type DenoisePtrInput interface {
	pulumi.Input

	ToDenoisePtrOutput() DenoisePtrOutput
	ToDenoisePtrOutputWithContext(context.Context) DenoisePtrOutput
}

type denoisePtrType DenoiseArgs

func DenoisePtr(v *DenoiseArgs) DenoisePtrInput {
	return (*denoisePtrType)(v)
}

func (*denoisePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Denoise)(nil)).Elem()
}

func (i *denoisePtrType) ToDenoisePtrOutput() DenoisePtrOutput {
	return i.ToDenoisePtrOutputWithContext(context.Background())
}

func (i *denoisePtrType) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenoisePtrOutput)
}

// Denoise preprocessing configuration. **Note:** This configuration is not supported.
type DenoiseOutput struct{ *pulumi.OutputState }

func (DenoiseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Denoise)(nil)).Elem()
}

func (o DenoiseOutput) ToDenoiseOutput() DenoiseOutput {
	return o
}

func (o DenoiseOutput) ToDenoiseOutputWithContext(ctx context.Context) DenoiseOutput {
	return o
}

func (o DenoiseOutput) ToDenoisePtrOutput() DenoisePtrOutput {
	return o.ToDenoisePtrOutputWithContext(context.Background())
}

func (o DenoiseOutput) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Denoise) *Denoise {
		return &v
	}).(DenoisePtrOutput)
}

// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
func (o DenoiseOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Denoise) *float64 { return v.Strength }).(pulumi.Float64PtrOutput)
}

// Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
func (o DenoiseOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Denoise) *string { return v.Tune }).(pulumi.StringPtrOutput)
}

type DenoisePtrOutput struct{ *pulumi.OutputState }

func (DenoisePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Denoise)(nil)).Elem()
}

func (o DenoisePtrOutput) ToDenoisePtrOutput() DenoisePtrOutput {
	return o
}

func (o DenoisePtrOutput) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return o
}

func (o DenoisePtrOutput) Elem() DenoiseOutput {
	return o.ApplyT(func(v *Denoise) Denoise {
		if v != nil {
			return *v
		}
		var ret Denoise
		return ret
	}).(DenoiseOutput)
}

// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
func (o DenoisePtrOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Denoise) *float64 {
		if v == nil {
			return nil
		}
		return v.Strength
	}).(pulumi.Float64PtrOutput)
}

// Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
func (o DenoisePtrOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Denoise) *string {
		if v == nil {
			return nil
		}
		return v.Tune
	}).(pulumi.StringPtrOutput)
}

// Denoise preprocessing configuration. **Note:** This configuration is not supported.
type DenoiseResponse struct {
	// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
	Strength float64 `pulumi:"strength"`
	// Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
	Tune string `pulumi:"tune"`
}

// Denoise preprocessing configuration. **Note:** This configuration is not supported.
type DenoiseResponseOutput struct{ *pulumi.OutputState }

func (DenoiseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenoiseResponse)(nil)).Elem()
}

func (o DenoiseResponseOutput) ToDenoiseResponseOutput() DenoiseResponseOutput {
	return o
}

func (o DenoiseResponseOutput) ToDenoiseResponseOutputWithContext(ctx context.Context) DenoiseResponseOutput {
	return o
}

// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
func (o DenoiseResponseOutput) Strength() pulumi.Float64Output {
	return o.ApplyT(func(v DenoiseResponse) float64 { return v.Strength }).(pulumi.Float64Output)
}

// Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`
func (o DenoiseResponseOutput) Tune() pulumi.StringOutput {
	return o.ApplyT(func(v DenoiseResponse) string { return v.Tune }).(pulumi.StringOutput)
}

// Defines configuration for DRM systems in use.
type DrmSystems struct {
	// Clearkey configuration.
	Clearkey *Clearkey `pulumi:"clearkey"`
	// Fairplay configuration.
	Fairplay *Fairplay `pulumi:"fairplay"`
	// Playready configuration.
	Playready *Playready `pulumi:"playready"`
	// Widevine configuration.
	Widevine *Widevine `pulumi:"widevine"`
}

// DrmSystemsInput is an input type that accepts DrmSystemsArgs and DrmSystemsOutput values.
// You can construct a concrete instance of `DrmSystemsInput` via:
//
//	DrmSystemsArgs{...}
type DrmSystemsInput interface {
	pulumi.Input

	ToDrmSystemsOutput() DrmSystemsOutput
	ToDrmSystemsOutputWithContext(context.Context) DrmSystemsOutput
}

// Defines configuration for DRM systems in use.
type DrmSystemsArgs struct {
	// Clearkey configuration.
	Clearkey ClearkeyPtrInput `pulumi:"clearkey"`
	// Fairplay configuration.
	Fairplay FairplayPtrInput `pulumi:"fairplay"`
	// Playready configuration.
	Playready PlayreadyPtrInput `pulumi:"playready"`
	// Widevine configuration.
	Widevine WidevinePtrInput `pulumi:"widevine"`
}

func (DrmSystemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DrmSystems)(nil)).Elem()
}

func (i DrmSystemsArgs) ToDrmSystemsOutput() DrmSystemsOutput {
	return i.ToDrmSystemsOutputWithContext(context.Background())
}

func (i DrmSystemsArgs) ToDrmSystemsOutputWithContext(ctx context.Context) DrmSystemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrmSystemsOutput)
}

// Defines configuration for DRM systems in use.
type DrmSystemsOutput struct{ *pulumi.OutputState }

func (DrmSystemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrmSystems)(nil)).Elem()
}

func (o DrmSystemsOutput) ToDrmSystemsOutput() DrmSystemsOutput {
	return o
}

func (o DrmSystemsOutput) ToDrmSystemsOutputWithContext(ctx context.Context) DrmSystemsOutput {
	return o
}

// Clearkey configuration.
func (o DrmSystemsOutput) Clearkey() ClearkeyPtrOutput {
	return o.ApplyT(func(v DrmSystems) *Clearkey { return v.Clearkey }).(ClearkeyPtrOutput)
}

// Fairplay configuration.
func (o DrmSystemsOutput) Fairplay() FairplayPtrOutput {
	return o.ApplyT(func(v DrmSystems) *Fairplay { return v.Fairplay }).(FairplayPtrOutput)
}

// Playready configuration.
func (o DrmSystemsOutput) Playready() PlayreadyPtrOutput {
	return o.ApplyT(func(v DrmSystems) *Playready { return v.Playready }).(PlayreadyPtrOutput)
}

// Widevine configuration.
func (o DrmSystemsOutput) Widevine() WidevinePtrOutput {
	return o.ApplyT(func(v DrmSystems) *Widevine { return v.Widevine }).(WidevinePtrOutput)
}

// Defines configuration for DRM systems in use.
type DrmSystemsResponse struct {
	// Clearkey configuration.
	Clearkey ClearkeyResponse `pulumi:"clearkey"`
	// Fairplay configuration.
	Fairplay FairplayResponse `pulumi:"fairplay"`
	// Playready configuration.
	Playready PlayreadyResponse `pulumi:"playready"`
	// Widevine configuration.
	Widevine WidevineResponse `pulumi:"widevine"`
}

// Defines configuration for DRM systems in use.
type DrmSystemsResponseOutput struct{ *pulumi.OutputState }

func (DrmSystemsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DrmSystemsResponse)(nil)).Elem()
}

func (o DrmSystemsResponseOutput) ToDrmSystemsResponseOutput() DrmSystemsResponseOutput {
	return o
}

func (o DrmSystemsResponseOutput) ToDrmSystemsResponseOutputWithContext(ctx context.Context) DrmSystemsResponseOutput {
	return o
}

// Clearkey configuration.
func (o DrmSystemsResponseOutput) Clearkey() ClearkeyResponseOutput {
	return o.ApplyT(func(v DrmSystemsResponse) ClearkeyResponse { return v.Clearkey }).(ClearkeyResponseOutput)
}

// Fairplay configuration.
func (o DrmSystemsResponseOutput) Fairplay() FairplayResponseOutput {
	return o.ApplyT(func(v DrmSystemsResponse) FairplayResponse { return v.Fairplay }).(FairplayResponseOutput)
}

// Playready configuration.
func (o DrmSystemsResponseOutput) Playready() PlayreadyResponseOutput {
	return o.ApplyT(func(v DrmSystemsResponse) PlayreadyResponse { return v.Playready }).(PlayreadyResponseOutput)
}

// Widevine configuration.
func (o DrmSystemsResponseOutput) Widevine() WidevineResponseOutput {
	return o.ApplyT(func(v DrmSystemsResponse) WidevineResponse { return v.Widevine }).(WidevineResponseOutput)
}

// Edit atom.
type EditAtom struct {
	// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
	EndTimeOffset *string `pulumi:"endTimeOffset"`
	// List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
	Inputs []string `pulumi:"inputs"`
	// A unique key for this atom. Must be specified when using advanced mapping.
	Key *string `pulumi:"key"`
	// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
	StartTimeOffset *string `pulumi:"startTimeOffset"`
}

// EditAtomInput is an input type that accepts EditAtomArgs and EditAtomOutput values.
// You can construct a concrete instance of `EditAtomInput` via:
//
//	EditAtomArgs{...}
type EditAtomInput interface {
	pulumi.Input

	ToEditAtomOutput() EditAtomOutput
	ToEditAtomOutputWithContext(context.Context) EditAtomOutput
}

// Edit atom.
type EditAtomArgs struct {
	// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
	EndTimeOffset pulumi.StringPtrInput `pulumi:"endTimeOffset"`
	// List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
	Inputs pulumi.StringArrayInput `pulumi:"inputs"`
	// A unique key for this atom. Must be specified when using advanced mapping.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
}

func (EditAtomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EditAtom)(nil)).Elem()
}

func (i EditAtomArgs) ToEditAtomOutput() EditAtomOutput {
	return i.ToEditAtomOutputWithContext(context.Background())
}

func (i EditAtomArgs) ToEditAtomOutputWithContext(ctx context.Context) EditAtomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditAtomOutput)
}

// EditAtomArrayInput is an input type that accepts EditAtomArray and EditAtomArrayOutput values.
// You can construct a concrete instance of `EditAtomArrayInput` via:
//
//	EditAtomArray{ EditAtomArgs{...} }
type EditAtomArrayInput interface {
	pulumi.Input

	ToEditAtomArrayOutput() EditAtomArrayOutput
	ToEditAtomArrayOutputWithContext(context.Context) EditAtomArrayOutput
}

type EditAtomArray []EditAtomInput

func (EditAtomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EditAtom)(nil)).Elem()
}

func (i EditAtomArray) ToEditAtomArrayOutput() EditAtomArrayOutput {
	return i.ToEditAtomArrayOutputWithContext(context.Background())
}

func (i EditAtomArray) ToEditAtomArrayOutputWithContext(ctx context.Context) EditAtomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditAtomArrayOutput)
}

// Edit atom.
type EditAtomOutput struct{ *pulumi.OutputState }

func (EditAtomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EditAtom)(nil)).Elem()
}

func (o EditAtomOutput) ToEditAtomOutput() EditAtomOutput {
	return o
}

func (o EditAtomOutput) ToEditAtomOutputWithContext(ctx context.Context) EditAtomOutput {
	return o
}

// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
func (o EditAtomOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EditAtom) *string { return v.EndTimeOffset }).(pulumi.StringPtrOutput)
}

// List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
func (o EditAtomOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EditAtom) []string { return v.Inputs }).(pulumi.StringArrayOutput)
}

// A unique key for this atom. Must be specified when using advanced mapping.
func (o EditAtomOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EditAtom) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
func (o EditAtomOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EditAtom) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

type EditAtomArrayOutput struct{ *pulumi.OutputState }

func (EditAtomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EditAtom)(nil)).Elem()
}

func (o EditAtomArrayOutput) ToEditAtomArrayOutput() EditAtomArrayOutput {
	return o
}

func (o EditAtomArrayOutput) ToEditAtomArrayOutputWithContext(ctx context.Context) EditAtomArrayOutput {
	return o
}

func (o EditAtomArrayOutput) Index(i pulumi.IntInput) EditAtomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EditAtom {
		return vs[0].([]EditAtom)[vs[1].(int)]
	}).(EditAtomOutput)
}

// Edit atom.
type EditAtomResponse struct {
	// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
	EndTimeOffset string `pulumi:"endTimeOffset"`
	// List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
	Inputs []string `pulumi:"inputs"`
	// A unique key for this atom. Must be specified when using advanced mapping.
	Key string `pulumi:"key"`
	// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
	StartTimeOffset string `pulumi:"startTimeOffset"`
}

// Edit atom.
type EditAtomResponseOutput struct{ *pulumi.OutputState }

func (EditAtomResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EditAtomResponse)(nil)).Elem()
}

func (o EditAtomResponseOutput) ToEditAtomResponseOutput() EditAtomResponseOutput {
	return o
}

func (o EditAtomResponseOutput) ToEditAtomResponseOutputWithContext(ctx context.Context) EditAtomResponseOutput {
	return o
}

// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
func (o EditAtomResponseOutput) EndTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v EditAtomResponse) string { return v.EndTimeOffset }).(pulumi.StringOutput)
}

// List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
func (o EditAtomResponseOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EditAtomResponse) []string { return v.Inputs }).(pulumi.StringArrayOutput)
}

// A unique key for this atom. Must be specified when using advanced mapping.
func (o EditAtomResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EditAtomResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
func (o EditAtomResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v EditAtomResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

type EditAtomResponseArrayOutput struct{ *pulumi.OutputState }

func (EditAtomResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EditAtomResponse)(nil)).Elem()
}

func (o EditAtomResponseArrayOutput) ToEditAtomResponseArrayOutput() EditAtomResponseArrayOutput {
	return o
}

func (o EditAtomResponseArrayOutput) ToEditAtomResponseArrayOutputWithContext(ctx context.Context) EditAtomResponseArrayOutput {
	return o
}

func (o EditAtomResponseArrayOutput) Index(i pulumi.IntInput) EditAtomResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EditAtomResponse {
		return vs[0].([]EditAtomResponse)[vs[1].(int)]
	}).(EditAtomResponseOutput)
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStream struct {
	// Encoding of an audio stream.
	AudioStream *AudioStream `pulumi:"audioStream"`
	// A unique key for this elementary stream.
	Key *string `pulumi:"key"`
	// Encoding of a text stream. For example, closed captions or subtitles.
	TextStream *TextStream `pulumi:"textStream"`
	// Encoding of a video stream.
	VideoStream *VideoStream `pulumi:"videoStream"`
}

// ElementaryStreamInput is an input type that accepts ElementaryStreamArgs and ElementaryStreamOutput values.
// You can construct a concrete instance of `ElementaryStreamInput` via:
//
//	ElementaryStreamArgs{...}
type ElementaryStreamInput interface {
	pulumi.Input

	ToElementaryStreamOutput() ElementaryStreamOutput
	ToElementaryStreamOutputWithContext(context.Context) ElementaryStreamOutput
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamArgs struct {
	// Encoding of an audio stream.
	AudioStream AudioStreamPtrInput `pulumi:"audioStream"`
	// A unique key for this elementary stream.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Encoding of a text stream. For example, closed captions or subtitles.
	TextStream TextStreamPtrInput `pulumi:"textStream"`
	// Encoding of a video stream.
	VideoStream VideoStreamPtrInput `pulumi:"videoStream"`
}

func (ElementaryStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElementaryStream)(nil)).Elem()
}

func (i ElementaryStreamArgs) ToElementaryStreamOutput() ElementaryStreamOutput {
	return i.ToElementaryStreamOutputWithContext(context.Background())
}

func (i ElementaryStreamArgs) ToElementaryStreamOutputWithContext(ctx context.Context) ElementaryStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElementaryStreamOutput)
}

// ElementaryStreamArrayInput is an input type that accepts ElementaryStreamArray and ElementaryStreamArrayOutput values.
// You can construct a concrete instance of `ElementaryStreamArrayInput` via:
//
//	ElementaryStreamArray{ ElementaryStreamArgs{...} }
type ElementaryStreamArrayInput interface {
	pulumi.Input

	ToElementaryStreamArrayOutput() ElementaryStreamArrayOutput
	ToElementaryStreamArrayOutputWithContext(context.Context) ElementaryStreamArrayOutput
}

type ElementaryStreamArray []ElementaryStreamInput

func (ElementaryStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElementaryStream)(nil)).Elem()
}

func (i ElementaryStreamArray) ToElementaryStreamArrayOutput() ElementaryStreamArrayOutput {
	return i.ToElementaryStreamArrayOutputWithContext(context.Background())
}

func (i ElementaryStreamArray) ToElementaryStreamArrayOutputWithContext(ctx context.Context) ElementaryStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElementaryStreamArrayOutput)
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamOutput struct{ *pulumi.OutputState }

func (ElementaryStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElementaryStream)(nil)).Elem()
}

func (o ElementaryStreamOutput) ToElementaryStreamOutput() ElementaryStreamOutput {
	return o
}

func (o ElementaryStreamOutput) ToElementaryStreamOutputWithContext(ctx context.Context) ElementaryStreamOutput {
	return o
}

// Encoding of an audio stream.
func (o ElementaryStreamOutput) AudioStream() AudioStreamPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *AudioStream { return v.AudioStream }).(AudioStreamPtrOutput)
}

// A unique key for this elementary stream.
func (o ElementaryStreamOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
func (o ElementaryStreamOutput) TextStream() TextStreamPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *TextStream { return v.TextStream }).(TextStreamPtrOutput)
}

// Encoding of a video stream.
func (o ElementaryStreamOutput) VideoStream() VideoStreamPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *VideoStream { return v.VideoStream }).(VideoStreamPtrOutput)
}

type ElementaryStreamArrayOutput struct{ *pulumi.OutputState }

func (ElementaryStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElementaryStream)(nil)).Elem()
}

func (o ElementaryStreamArrayOutput) ToElementaryStreamArrayOutput() ElementaryStreamArrayOutput {
	return o
}

func (o ElementaryStreamArrayOutput) ToElementaryStreamArrayOutputWithContext(ctx context.Context) ElementaryStreamArrayOutput {
	return o
}

func (o ElementaryStreamArrayOutput) Index(i pulumi.IntInput) ElementaryStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElementaryStream {
		return vs[0].([]ElementaryStream)[vs[1].(int)]
	}).(ElementaryStreamOutput)
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamResponse struct {
	// Encoding of an audio stream.
	AudioStream AudioStreamResponse `pulumi:"audioStream"`
	// A unique key for this elementary stream.
	Key string `pulumi:"key"`
	// Encoding of a text stream. For example, closed captions or subtitles.
	TextStream TextStreamResponse `pulumi:"textStream"`
	// Encoding of a video stream.
	VideoStream VideoStreamResponse `pulumi:"videoStream"`
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamResponseOutput struct{ *pulumi.OutputState }

func (ElementaryStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElementaryStreamResponse)(nil)).Elem()
}

func (o ElementaryStreamResponseOutput) ToElementaryStreamResponseOutput() ElementaryStreamResponseOutput {
	return o
}

func (o ElementaryStreamResponseOutput) ToElementaryStreamResponseOutputWithContext(ctx context.Context) ElementaryStreamResponseOutput {
	return o
}

// Encoding of an audio stream.
func (o ElementaryStreamResponseOutput) AudioStream() AudioStreamResponseOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) AudioStreamResponse { return v.AudioStream }).(AudioStreamResponseOutput)
}

// A unique key for this elementary stream.
func (o ElementaryStreamResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
func (o ElementaryStreamResponseOutput) TextStream() TextStreamResponseOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) TextStreamResponse { return v.TextStream }).(TextStreamResponseOutput)
}

// Encoding of a video stream.
func (o ElementaryStreamResponseOutput) VideoStream() VideoStreamResponseOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) VideoStreamResponse { return v.VideoStream }).(VideoStreamResponseOutput)
}

type ElementaryStreamResponseArrayOutput struct{ *pulumi.OutputState }

func (ElementaryStreamResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElementaryStreamResponse)(nil)).Elem()
}

func (o ElementaryStreamResponseArrayOutput) ToElementaryStreamResponseArrayOutput() ElementaryStreamResponseArrayOutput {
	return o
}

func (o ElementaryStreamResponseArrayOutput) ToElementaryStreamResponseArrayOutputWithContext(ctx context.Context) ElementaryStreamResponseArrayOutput {
	return o
}

func (o ElementaryStreamResponseArrayOutput) Index(i pulumi.IntInput) ElementaryStreamResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElementaryStreamResponse {
		return vs[0].([]ElementaryStreamResponse)[vs[1].(int)]
	}).(ElementaryStreamResponseOutput)
}

// Encryption settings.
type Encryption struct {
	// Configuration for AES-128 encryption.
	Aes128 *Aes128Encryption `pulumi:"aes128"`
	// DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
	DrmSystems DrmSystems `pulumi:"drmSystems"`
	// Identifier for this set of encryption options.
	Id string `pulumi:"id"`
	// Configuration for MPEG Common Encryption (MPEG-CENC).
	MpegCenc *MpegCommonEncryption `pulumi:"mpegCenc"`
	// Configuration for SAMPLE-AES encryption.
	SampleAes *SampleAesEncryption `pulumi:"sampleAes"`
	// Keys are stored in Google Secret Manager.
	SecretManagerKeySource *SecretManagerSource `pulumi:"secretManagerKeySource"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//	EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// Encryption settings.
type EncryptionArgs struct {
	// Configuration for AES-128 encryption.
	Aes128 Aes128EncryptionPtrInput `pulumi:"aes128"`
	// DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
	DrmSystems DrmSystemsInput `pulumi:"drmSystems"`
	// Identifier for this set of encryption options.
	Id pulumi.StringInput `pulumi:"id"`
	// Configuration for MPEG Common Encryption (MPEG-CENC).
	MpegCenc MpegCommonEncryptionPtrInput `pulumi:"mpegCenc"`
	// Configuration for SAMPLE-AES encryption.
	SampleAes SampleAesEncryptionPtrInput `pulumi:"sampleAes"`
	// Keys are stored in Google Secret Manager.
	SecretManagerKeySource SecretManagerSourcePtrInput `pulumi:"secretManagerKeySource"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

// EncryptionArrayInput is an input type that accepts EncryptionArray and EncryptionArrayOutput values.
// You can construct a concrete instance of `EncryptionArrayInput` via:
//
//	EncryptionArray{ EncryptionArgs{...} }
type EncryptionArrayInput interface {
	pulumi.Input

	ToEncryptionArrayOutput() EncryptionArrayOutput
	ToEncryptionArrayOutputWithContext(context.Context) EncryptionArrayOutput
}

type EncryptionArray []EncryptionInput

func (EncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Encryption)(nil)).Elem()
}

func (i EncryptionArray) ToEncryptionArrayOutput() EncryptionArrayOutput {
	return i.ToEncryptionArrayOutputWithContext(context.Background())
}

func (i EncryptionArray) ToEncryptionArrayOutputWithContext(ctx context.Context) EncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionArrayOutput)
}

// Encryption settings.
type EncryptionOutput struct{ *pulumi.OutputState }

func (EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (o EncryptionOutput) ToEncryptionOutput() EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return o
}

// Configuration for AES-128 encryption.
func (o EncryptionOutput) Aes128() Aes128EncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *Aes128Encryption { return v.Aes128 }).(Aes128EncryptionPtrOutput)
}

// DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
func (o EncryptionOutput) DrmSystems() DrmSystemsOutput {
	return o.ApplyT(func(v Encryption) DrmSystems { return v.DrmSystems }).(DrmSystemsOutput)
}

// Identifier for this set of encryption options.
func (o EncryptionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v Encryption) string { return v.Id }).(pulumi.StringOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
func (o EncryptionOutput) MpegCenc() MpegCommonEncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *MpegCommonEncryption { return v.MpegCenc }).(MpegCommonEncryptionPtrOutput)
}

// Configuration for SAMPLE-AES encryption.
func (o EncryptionOutput) SampleAes() SampleAesEncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *SampleAesEncryption { return v.SampleAes }).(SampleAesEncryptionPtrOutput)
}

// Keys are stored in Google Secret Manager.
func (o EncryptionOutput) SecretManagerKeySource() SecretManagerSourcePtrOutput {
	return o.ApplyT(func(v Encryption) *SecretManagerSource { return v.SecretManagerKeySource }).(SecretManagerSourcePtrOutput)
}

type EncryptionArrayOutput struct{ *pulumi.OutputState }

func (EncryptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Encryption)(nil)).Elem()
}

func (o EncryptionArrayOutput) ToEncryptionArrayOutput() EncryptionArrayOutput {
	return o
}

func (o EncryptionArrayOutput) ToEncryptionArrayOutputWithContext(ctx context.Context) EncryptionArrayOutput {
	return o
}

func (o EncryptionArrayOutput) Index(i pulumi.IntInput) EncryptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Encryption {
		return vs[0].([]Encryption)[vs[1].(int)]
	}).(EncryptionOutput)
}

// Encryption settings.
type EncryptionResponse struct {
	// Configuration for AES-128 encryption.
	Aes128 Aes128EncryptionResponse `pulumi:"aes128"`
	// DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
	DrmSystems DrmSystemsResponse `pulumi:"drmSystems"`
	// Configuration for MPEG Common Encryption (MPEG-CENC).
	MpegCenc MpegCommonEncryptionResponse `pulumi:"mpegCenc"`
	// Configuration for SAMPLE-AES encryption.
	SampleAes SampleAesEncryptionResponse `pulumi:"sampleAes"`
	// Keys are stored in Google Secret Manager.
	SecretManagerKeySource SecretManagerSourceResponse `pulumi:"secretManagerKeySource"`
}

// Encryption settings.
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

// Configuration for AES-128 encryption.
func (o EncryptionResponseOutput) Aes128() Aes128EncryptionResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) Aes128EncryptionResponse { return v.Aes128 }).(Aes128EncryptionResponseOutput)
}

// DRM system(s) to use; at least one must be specified. If a DRM system is omitted, it is considered disabled.
func (o EncryptionResponseOutput) DrmSystems() DrmSystemsResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) DrmSystemsResponse { return v.DrmSystems }).(DrmSystemsResponseOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
func (o EncryptionResponseOutput) MpegCenc() MpegCommonEncryptionResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) MpegCommonEncryptionResponse { return v.MpegCenc }).(MpegCommonEncryptionResponseOutput)
}

// Configuration for SAMPLE-AES encryption.
func (o EncryptionResponseOutput) SampleAes() SampleAesEncryptionResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) SampleAesEncryptionResponse { return v.SampleAes }).(SampleAesEncryptionResponseOutput)
}

// Keys are stored in Google Secret Manager.
func (o EncryptionResponseOutput) SecretManagerKeySource() SecretManagerSourceResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) SecretManagerSourceResponse { return v.SecretManagerKeySource }).(SecretManagerSourceResponseOutput)
}

type EncryptionResponseArrayOutput struct{ *pulumi.OutputState }

func (EncryptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseArrayOutput) ToEncryptionResponseArrayOutput() EncryptionResponseArrayOutput {
	return o
}

func (o EncryptionResponseArrayOutput) ToEncryptionResponseArrayOutputWithContext(ctx context.Context) EncryptionResponseArrayOutput {
	return o
}

func (o EncryptionResponseArrayOutput) Index(i pulumi.IntInput) EncryptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EncryptionResponse {
		return vs[0].([]EncryptionResponse)[vs[1].(int)]
	}).(EncryptionResponseOutput)
}

// Fairplay configuration.
type Fairplay struct {
}

// FairplayInput is an input type that accepts FairplayArgs and FairplayOutput values.
// You can construct a concrete instance of `FairplayInput` via:
//
//	FairplayArgs{...}
type FairplayInput interface {
	pulumi.Input

	ToFairplayOutput() FairplayOutput
	ToFairplayOutputWithContext(context.Context) FairplayOutput
}

// Fairplay configuration.
type FairplayArgs struct {
}

func (FairplayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fairplay)(nil)).Elem()
}

func (i FairplayArgs) ToFairplayOutput() FairplayOutput {
	return i.ToFairplayOutputWithContext(context.Background())
}

func (i FairplayArgs) ToFairplayOutputWithContext(ctx context.Context) FairplayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FairplayOutput)
}

func (i FairplayArgs) ToFairplayPtrOutput() FairplayPtrOutput {
	return i.ToFairplayPtrOutputWithContext(context.Background())
}

func (i FairplayArgs) ToFairplayPtrOutputWithContext(ctx context.Context) FairplayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FairplayOutput).ToFairplayPtrOutputWithContext(ctx)
}

// FairplayPtrInput is an input type that accepts FairplayArgs, FairplayPtr and FairplayPtrOutput values.
// You can construct a concrete instance of `FairplayPtrInput` via:
//
//	        FairplayArgs{...}
//
//	or:
//
//	        nil
type FairplayPtrInput interface {
	pulumi.Input

	ToFairplayPtrOutput() FairplayPtrOutput
	ToFairplayPtrOutputWithContext(context.Context) FairplayPtrOutput
}

type fairplayPtrType FairplayArgs

func FairplayPtr(v *FairplayArgs) FairplayPtrInput {
	return (*fairplayPtrType)(v)
}

func (*fairplayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fairplay)(nil)).Elem()
}

func (i *fairplayPtrType) ToFairplayPtrOutput() FairplayPtrOutput {
	return i.ToFairplayPtrOutputWithContext(context.Background())
}

func (i *fairplayPtrType) ToFairplayPtrOutputWithContext(ctx context.Context) FairplayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FairplayPtrOutput)
}

// Fairplay configuration.
type FairplayOutput struct{ *pulumi.OutputState }

func (FairplayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fairplay)(nil)).Elem()
}

func (o FairplayOutput) ToFairplayOutput() FairplayOutput {
	return o
}

func (o FairplayOutput) ToFairplayOutputWithContext(ctx context.Context) FairplayOutput {
	return o
}

func (o FairplayOutput) ToFairplayPtrOutput() FairplayPtrOutput {
	return o.ToFairplayPtrOutputWithContext(context.Background())
}

func (o FairplayOutput) ToFairplayPtrOutputWithContext(ctx context.Context) FairplayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Fairplay) *Fairplay {
		return &v
	}).(FairplayPtrOutput)
}

type FairplayPtrOutput struct{ *pulumi.OutputState }

func (FairplayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fairplay)(nil)).Elem()
}

func (o FairplayPtrOutput) ToFairplayPtrOutput() FairplayPtrOutput {
	return o
}

func (o FairplayPtrOutput) ToFairplayPtrOutputWithContext(ctx context.Context) FairplayPtrOutput {
	return o
}

func (o FairplayPtrOutput) Elem() FairplayOutput {
	return o.ApplyT(func(v *Fairplay) Fairplay {
		if v != nil {
			return *v
		}
		var ret Fairplay
		return ret
	}).(FairplayOutput)
}

// Fairplay configuration.
type FairplayResponse struct {
}

// Fairplay configuration.
type FairplayResponseOutput struct{ *pulumi.OutputState }

func (FairplayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FairplayResponse)(nil)).Elem()
}

func (o FairplayResponseOutput) ToFairplayResponseOutput() FairplayResponseOutput {
	return o
}

func (o FairplayResponseOutput) ToFairplayResponseOutputWithContext(ctx context.Context) FairplayResponseOutput {
	return o
}

// `fmp4` container configuration.
type Fmp4Config struct {
	// Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
	CodecTag *string `pulumi:"codecTag"`
}

// Fmp4ConfigInput is an input type that accepts Fmp4ConfigArgs and Fmp4ConfigOutput values.
// You can construct a concrete instance of `Fmp4ConfigInput` via:
//
//	Fmp4ConfigArgs{...}
type Fmp4ConfigInput interface {
	pulumi.Input

	ToFmp4ConfigOutput() Fmp4ConfigOutput
	ToFmp4ConfigOutputWithContext(context.Context) Fmp4ConfigOutput
}

// `fmp4` container configuration.
type Fmp4ConfigArgs struct {
	// Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
	CodecTag pulumi.StringPtrInput `pulumi:"codecTag"`
}

func (Fmp4ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Fmp4Config)(nil)).Elem()
}

func (i Fmp4ConfigArgs) ToFmp4ConfigOutput() Fmp4ConfigOutput {
	return i.ToFmp4ConfigOutputWithContext(context.Background())
}

func (i Fmp4ConfigArgs) ToFmp4ConfigOutputWithContext(ctx context.Context) Fmp4ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Fmp4ConfigOutput)
}

func (i Fmp4ConfigArgs) ToFmp4ConfigPtrOutput() Fmp4ConfigPtrOutput {
	return i.ToFmp4ConfigPtrOutputWithContext(context.Background())
}

func (i Fmp4ConfigArgs) ToFmp4ConfigPtrOutputWithContext(ctx context.Context) Fmp4ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Fmp4ConfigOutput).ToFmp4ConfigPtrOutputWithContext(ctx)
}

// Fmp4ConfigPtrInput is an input type that accepts Fmp4ConfigArgs, Fmp4ConfigPtr and Fmp4ConfigPtrOutput values.
// You can construct a concrete instance of `Fmp4ConfigPtrInput` via:
//
//	        Fmp4ConfigArgs{...}
//
//	or:
//
//	        nil
type Fmp4ConfigPtrInput interface {
	pulumi.Input

	ToFmp4ConfigPtrOutput() Fmp4ConfigPtrOutput
	ToFmp4ConfigPtrOutputWithContext(context.Context) Fmp4ConfigPtrOutput
}

type fmp4ConfigPtrType Fmp4ConfigArgs

func Fmp4ConfigPtr(v *Fmp4ConfigArgs) Fmp4ConfigPtrInput {
	return (*fmp4ConfigPtrType)(v)
}

func (*fmp4ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fmp4Config)(nil)).Elem()
}

func (i *fmp4ConfigPtrType) ToFmp4ConfigPtrOutput() Fmp4ConfigPtrOutput {
	return i.ToFmp4ConfigPtrOutputWithContext(context.Background())
}

func (i *fmp4ConfigPtrType) ToFmp4ConfigPtrOutputWithContext(ctx context.Context) Fmp4ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Fmp4ConfigPtrOutput)
}

// `fmp4` container configuration.
type Fmp4ConfigOutput struct{ *pulumi.OutputState }

func (Fmp4ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fmp4Config)(nil)).Elem()
}

func (o Fmp4ConfigOutput) ToFmp4ConfigOutput() Fmp4ConfigOutput {
	return o
}

func (o Fmp4ConfigOutput) ToFmp4ConfigOutputWithContext(ctx context.Context) Fmp4ConfigOutput {
	return o
}

func (o Fmp4ConfigOutput) ToFmp4ConfigPtrOutput() Fmp4ConfigPtrOutput {
	return o.ToFmp4ConfigPtrOutputWithContext(context.Background())
}

func (o Fmp4ConfigOutput) ToFmp4ConfigPtrOutputWithContext(ctx context.Context) Fmp4ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Fmp4Config) *Fmp4Config {
		return &v
	}).(Fmp4ConfigPtrOutput)
}

// Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
func (o Fmp4ConfigOutput) CodecTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Fmp4Config) *string { return v.CodecTag }).(pulumi.StringPtrOutput)
}

type Fmp4ConfigPtrOutput struct{ *pulumi.OutputState }

func (Fmp4ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fmp4Config)(nil)).Elem()
}

func (o Fmp4ConfigPtrOutput) ToFmp4ConfigPtrOutput() Fmp4ConfigPtrOutput {
	return o
}

func (o Fmp4ConfigPtrOutput) ToFmp4ConfigPtrOutputWithContext(ctx context.Context) Fmp4ConfigPtrOutput {
	return o
}

func (o Fmp4ConfigPtrOutput) Elem() Fmp4ConfigOutput {
	return o.ApplyT(func(v *Fmp4Config) Fmp4Config {
		if v != nil {
			return *v
		}
		var ret Fmp4Config
		return ret
	}).(Fmp4ConfigOutput)
}

// Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
func (o Fmp4ConfigPtrOutput) CodecTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Fmp4Config) *string {
		if v == nil {
			return nil
		}
		return v.CodecTag
	}).(pulumi.StringPtrOutput)
}

// `fmp4` container configuration.
type Fmp4ConfigResponse struct {
	// Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
	CodecTag string `pulumi:"codecTag"`
}

// `fmp4` container configuration.
type Fmp4ConfigResponseOutput struct{ *pulumi.OutputState }

func (Fmp4ConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fmp4ConfigResponse)(nil)).Elem()
}

func (o Fmp4ConfigResponseOutput) ToFmp4ConfigResponseOutput() Fmp4ConfigResponseOutput {
	return o
}

func (o Fmp4ConfigResponseOutput) ToFmp4ConfigResponseOutputWithContext(ctx context.Context) Fmp4ConfigResponseOutput {
	return o
}

// Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`
func (o Fmp4ConfigResponseOutput) CodecTag() pulumi.StringOutput {
	return o.ApplyT(func(v Fmp4ConfigResponse) string { return v.CodecTag }).(pulumi.StringOutput)
}

// H264 codec settings.
type H264CodecSettings struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop *bool `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength *float64 `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
	BFrameCount *int `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid *bool `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel *int `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
	EnableTwoPass *bool `pulumi:"enableTwoPass"`
	// The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
	EntropyCoder *string `pulumi:"entropyCoder"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration *string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount *int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels *int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat *string `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Preset *string `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Profile *string `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
	RateControlMode *string `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Tune *string `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
	VbvFullnessBits *int `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
	VbvSizeBits *int `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels *int `pulumi:"widthPixels"`
}

// H264CodecSettingsInput is an input type that accepts H264CodecSettingsArgs and H264CodecSettingsOutput values.
// You can construct a concrete instance of `H264CodecSettingsInput` via:
//
//	H264CodecSettingsArgs{...}
type H264CodecSettingsInput interface {
	pulumi.Input

	ToH264CodecSettingsOutput() H264CodecSettingsOutput
	ToH264CodecSettingsOutputWithContext(context.Context) H264CodecSettingsOutput
}

// H264 codec settings.
type H264CodecSettingsArgs struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop pulumi.BoolPtrInput `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength pulumi.Float64PtrInput `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
	BFrameCount pulumi.IntPtrInput `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid pulumi.BoolPtrInput `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel pulumi.IntPtrInput `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
	EnableTwoPass pulumi.BoolPtrInput `pulumi:"enableTwoPass"`
	// The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
	EntropyCoder pulumi.StringPtrInput `pulumi:"entropyCoder"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate pulumi.Float64Input `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration pulumi.StringPtrInput `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount pulumi.IntPtrInput `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels pulumi.IntPtrInput `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat pulumi.StringPtrInput `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Preset pulumi.StringPtrInput `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
	RateControlMode pulumi.StringPtrInput `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Tune pulumi.StringPtrInput `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
	VbvFullnessBits pulumi.IntPtrInput `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
	VbvSizeBits pulumi.IntPtrInput `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels pulumi.IntPtrInput `pulumi:"widthPixels"`
}

func (H264CodecSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*H264CodecSettings)(nil)).Elem()
}

func (i H264CodecSettingsArgs) ToH264CodecSettingsOutput() H264CodecSettingsOutput {
	return i.ToH264CodecSettingsOutputWithContext(context.Background())
}

func (i H264CodecSettingsArgs) ToH264CodecSettingsOutputWithContext(ctx context.Context) H264CodecSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(H264CodecSettingsOutput)
}

func (i H264CodecSettingsArgs) ToH264CodecSettingsPtrOutput() H264CodecSettingsPtrOutput {
	return i.ToH264CodecSettingsPtrOutputWithContext(context.Background())
}

func (i H264CodecSettingsArgs) ToH264CodecSettingsPtrOutputWithContext(ctx context.Context) H264CodecSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(H264CodecSettingsOutput).ToH264CodecSettingsPtrOutputWithContext(ctx)
}

// H264CodecSettingsPtrInput is an input type that accepts H264CodecSettingsArgs, H264CodecSettingsPtr and H264CodecSettingsPtrOutput values.
// You can construct a concrete instance of `H264CodecSettingsPtrInput` via:
//
//	        H264CodecSettingsArgs{...}
//
//	or:
//
//	        nil
type H264CodecSettingsPtrInput interface {
	pulumi.Input

	ToH264CodecSettingsPtrOutput() H264CodecSettingsPtrOutput
	ToH264CodecSettingsPtrOutputWithContext(context.Context) H264CodecSettingsPtrOutput
}

type h264codecSettingsPtrType H264CodecSettingsArgs

func H264CodecSettingsPtr(v *H264CodecSettingsArgs) H264CodecSettingsPtrInput {
	return (*h264codecSettingsPtrType)(v)
}

func (*h264codecSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**H264CodecSettings)(nil)).Elem()
}

func (i *h264codecSettingsPtrType) ToH264CodecSettingsPtrOutput() H264CodecSettingsPtrOutput {
	return i.ToH264CodecSettingsPtrOutputWithContext(context.Background())
}

func (i *h264codecSettingsPtrType) ToH264CodecSettingsPtrOutputWithContext(ctx context.Context) H264CodecSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(H264CodecSettingsPtrOutput)
}

// H264 codec settings.
type H264CodecSettingsOutput struct{ *pulumi.OutputState }

func (H264CodecSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H264CodecSettings)(nil)).Elem()
}

func (o H264CodecSettingsOutput) ToH264CodecSettingsOutput() H264CodecSettingsOutput {
	return o
}

func (o H264CodecSettingsOutput) ToH264CodecSettingsOutputWithContext(ctx context.Context) H264CodecSettingsOutput {
	return o
}

func (o H264CodecSettingsOutput) ToH264CodecSettingsPtrOutput() H264CodecSettingsPtrOutput {
	return o.ToH264CodecSettingsPtrOutputWithContext(context.Background())
}

func (o H264CodecSettingsOutput) ToH264CodecSettingsPtrOutputWithContext(ctx context.Context) H264CodecSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H264CodecSettings) *H264CodecSettings {
		return &v
	}).(H264CodecSettingsPtrOutput)
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o H264CodecSettingsOutput) AllowOpenGop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *bool { return v.AllowOpenGop }).(pulumi.BoolPtrOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o H264CodecSettingsOutput) AqStrength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *float64 { return v.AqStrength }).(pulumi.Float64PtrOutput)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
func (o H264CodecSettingsOutput) BFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *int { return v.BFrameCount }).(pulumi.IntPtrOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o H264CodecSettingsOutput) BPyramid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *bool { return v.BPyramid }).(pulumi.BoolPtrOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
func (o H264CodecSettingsOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettings) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o H264CodecSettingsOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *int { return v.CrfLevel }).(pulumi.IntPtrOutput)
}

// Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
func (o H264CodecSettingsOutput) EnableTwoPass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *bool { return v.EnableTwoPass }).(pulumi.BoolPtrOutput)
}

// The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
func (o H264CodecSettingsOutput) EntropyCoder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *string { return v.EntropyCoder }).(pulumi.StringPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o H264CodecSettingsOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v H264CodecSettings) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o H264CodecSettingsOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *string { return v.GopDuration }).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o H264CodecSettingsOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *int { return v.GopFrameCount }).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H264CodecSettingsOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *int { return v.HeightPixels }).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o H264CodecSettingsOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *string { return v.PixelFormat }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *string { return v.Preset }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
func (o H264CodecSettingsOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *string { return v.RateControlMode }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *string { return v.Tune }).(pulumi.StringPtrOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
func (o H264CodecSettingsOutput) VbvFullnessBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *int { return v.VbvFullnessBits }).(pulumi.IntPtrOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
func (o H264CodecSettingsOutput) VbvSizeBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *int { return v.VbvSizeBits }).(pulumi.IntPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H264CodecSettingsOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H264CodecSettings) *int { return v.WidthPixels }).(pulumi.IntPtrOutput)
}

type H264CodecSettingsPtrOutput struct{ *pulumi.OutputState }

func (H264CodecSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**H264CodecSettings)(nil)).Elem()
}

func (o H264CodecSettingsPtrOutput) ToH264CodecSettingsPtrOutput() H264CodecSettingsPtrOutput {
	return o
}

func (o H264CodecSettingsPtrOutput) ToH264CodecSettingsPtrOutputWithContext(ctx context.Context) H264CodecSettingsPtrOutput {
	return o
}

func (o H264CodecSettingsPtrOutput) Elem() H264CodecSettingsOutput {
	return o.ApplyT(func(v *H264CodecSettings) H264CodecSettings {
		if v != nil {
			return *v
		}
		var ret H264CodecSettings
		return ret
	}).(H264CodecSettingsOutput)
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o H264CodecSettingsPtrOutput) AllowOpenGop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowOpenGop
	}).(pulumi.BoolPtrOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o H264CodecSettingsPtrOutput) AqStrength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.AqStrength
	}).(pulumi.Float64PtrOutput)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
func (o H264CodecSettingsPtrOutput) BFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.BFrameCount
	}).(pulumi.IntPtrOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o H264CodecSettingsPtrOutput) BPyramid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *bool {
		if v == nil {
			return nil
		}
		return v.BPyramid
	}).(pulumi.BoolPtrOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
func (o H264CodecSettingsPtrOutput) BitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return &v.BitrateBps
	}).(pulumi.IntPtrOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o H264CodecSettingsPtrOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.CrfLevel
	}).(pulumi.IntPtrOutput)
}

// Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
func (o H264CodecSettingsPtrOutput) EnableTwoPass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTwoPass
	}).(pulumi.BoolPtrOutput)
}

// The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
func (o H264CodecSettingsPtrOutput) EntropyCoder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.EntropyCoder
	}).(pulumi.StringPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o H264CodecSettingsPtrOutput) FrameRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *float64 {
		if v == nil {
			return nil
		}
		return &v.FrameRate
	}).(pulumi.Float64PtrOutput)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o H264CodecSettingsPtrOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.GopDuration
	}).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o H264CodecSettingsPtrOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.GopFrameCount
	}).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H264CodecSettingsPtrOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.HeightPixels
	}).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o H264CodecSettingsPtrOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.PixelFormat
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsPtrOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.Preset
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
func (o H264CodecSettingsPtrOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.RateControlMode
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsPtrOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.Tune
	}).(pulumi.StringPtrOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
func (o H264CodecSettingsPtrOutput) VbvFullnessBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.VbvFullnessBits
	}).(pulumi.IntPtrOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
func (o H264CodecSettingsPtrOutput) VbvSizeBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.VbvSizeBits
	}).(pulumi.IntPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H264CodecSettingsPtrOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H264CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.WidthPixels
	}).(pulumi.IntPtrOutput)
}

// H264 codec settings.
type H264CodecSettingsResponse struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop bool `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength float64 `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
	BFrameCount int `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid bool `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel int `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
	EnableTwoPass bool `pulumi:"enableTwoPass"`
	// The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
	EntropyCoder string `pulumi:"entropyCoder"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat string `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Preset string `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Profile string `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
	RateControlMode string `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
	Tune string `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
	VbvFullnessBits int `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
	VbvSizeBits int `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels int `pulumi:"widthPixels"`
}

// H264 codec settings.
type H264CodecSettingsResponseOutput struct{ *pulumi.OutputState }

func (H264CodecSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H264CodecSettingsResponse)(nil)).Elem()
}

func (o H264CodecSettingsResponseOutput) ToH264CodecSettingsResponseOutput() H264CodecSettingsResponseOutput {
	return o
}

func (o H264CodecSettingsResponseOutput) ToH264CodecSettingsResponseOutputWithContext(ctx context.Context) H264CodecSettingsResponseOutput {
	return o
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o H264CodecSettingsResponseOutput) AllowOpenGop() pulumi.BoolOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) bool { return v.AllowOpenGop }).(pulumi.BoolOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o H264CodecSettingsResponseOutput) AqStrength() pulumi.Float64Output {
	return o.ApplyT(func(v H264CodecSettingsResponse) float64 { return v.AqStrength }).(pulumi.Float64Output)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.
func (o H264CodecSettingsResponseOutput) BFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.BFrameCount }).(pulumi.IntOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o H264CodecSettingsResponseOutput) BPyramid() pulumi.BoolOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) bool { return v.BPyramid }).(pulumi.BoolOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
func (o H264CodecSettingsResponseOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o H264CodecSettingsResponseOutput) CrfLevel() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.CrfLevel }).(pulumi.IntOutput)
}

// Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
func (o H264CodecSettingsResponseOutput) EnableTwoPass() pulumi.BoolOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) bool { return v.EnableTwoPass }).(pulumi.BoolOutput)
}

// The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
func (o H264CodecSettingsResponseOutput) EntropyCoder() pulumi.StringOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) string { return v.EntropyCoder }).(pulumi.StringOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o H264CodecSettingsResponseOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v H264CodecSettingsResponse) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o H264CodecSettingsResponseOutput) GopDuration() pulumi.StringOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) string { return v.GopDuration }).(pulumi.StringOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o H264CodecSettingsResponseOutput) GopFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.GopFrameCount }).(pulumi.IntOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H264CodecSettingsResponseOutput) HeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.HeightPixels }).(pulumi.IntOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o H264CodecSettingsResponseOutput) PixelFormat() pulumi.StringOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) string { return v.PixelFormat }).(pulumi.StringOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsResponseOutput) Preset() pulumi.StringOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) string { return v.Preset }).(pulumi.StringOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsResponseOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) string { return v.Profile }).(pulumi.StringOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
func (o H264CodecSettingsResponseOutput) RateControlMode() pulumi.StringOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) string { return v.RateControlMode }).(pulumi.StringOutput)
}

// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
func (o H264CodecSettingsResponseOutput) Tune() pulumi.StringOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) string { return v.Tune }).(pulumi.StringOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.
func (o H264CodecSettingsResponseOutput) VbvFullnessBits() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.VbvFullnessBits }).(pulumi.IntOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.
func (o H264CodecSettingsResponseOutput) VbvSizeBits() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.VbvSizeBits }).(pulumi.IntOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H264CodecSettingsResponseOutput) WidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v H264CodecSettingsResponse) int { return v.WidthPixels }).(pulumi.IntOutput)
}

// H265 codec settings.
type H265CodecSettings struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop *bool `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength *float64 `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
	BFrameCount *int `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid *bool `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel *int `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
	EnableTwoPass *bool `pulumi:"enableTwoPass"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration *string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount *int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels *int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat *string `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Preset *string `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Profile *string `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
	RateControlMode *string `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Tune *string `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
	VbvFullnessBits *int `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
	VbvSizeBits *int `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels *int `pulumi:"widthPixels"`
}

// H265CodecSettingsInput is an input type that accepts H265CodecSettingsArgs and H265CodecSettingsOutput values.
// You can construct a concrete instance of `H265CodecSettingsInput` via:
//
//	H265CodecSettingsArgs{...}
type H265CodecSettingsInput interface {
	pulumi.Input

	ToH265CodecSettingsOutput() H265CodecSettingsOutput
	ToH265CodecSettingsOutputWithContext(context.Context) H265CodecSettingsOutput
}

// H265 codec settings.
type H265CodecSettingsArgs struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop pulumi.BoolPtrInput `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength pulumi.Float64PtrInput `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
	BFrameCount pulumi.IntPtrInput `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid pulumi.BoolPtrInput `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel pulumi.IntPtrInput `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
	EnableTwoPass pulumi.BoolPtrInput `pulumi:"enableTwoPass"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate pulumi.Float64Input `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration pulumi.StringPtrInput `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount pulumi.IntPtrInput `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels pulumi.IntPtrInput `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat pulumi.StringPtrInput `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Preset pulumi.StringPtrInput `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
	RateControlMode pulumi.StringPtrInput `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Tune pulumi.StringPtrInput `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
	VbvFullnessBits pulumi.IntPtrInput `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
	VbvSizeBits pulumi.IntPtrInput `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels pulumi.IntPtrInput `pulumi:"widthPixels"`
}

func (H265CodecSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*H265CodecSettings)(nil)).Elem()
}

func (i H265CodecSettingsArgs) ToH265CodecSettingsOutput() H265CodecSettingsOutput {
	return i.ToH265CodecSettingsOutputWithContext(context.Background())
}

func (i H265CodecSettingsArgs) ToH265CodecSettingsOutputWithContext(ctx context.Context) H265CodecSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(H265CodecSettingsOutput)
}

func (i H265CodecSettingsArgs) ToH265CodecSettingsPtrOutput() H265CodecSettingsPtrOutput {
	return i.ToH265CodecSettingsPtrOutputWithContext(context.Background())
}

func (i H265CodecSettingsArgs) ToH265CodecSettingsPtrOutputWithContext(ctx context.Context) H265CodecSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(H265CodecSettingsOutput).ToH265CodecSettingsPtrOutputWithContext(ctx)
}

// H265CodecSettingsPtrInput is an input type that accepts H265CodecSettingsArgs, H265CodecSettingsPtr and H265CodecSettingsPtrOutput values.
// You can construct a concrete instance of `H265CodecSettingsPtrInput` via:
//
//	        H265CodecSettingsArgs{...}
//
//	or:
//
//	        nil
type H265CodecSettingsPtrInput interface {
	pulumi.Input

	ToH265CodecSettingsPtrOutput() H265CodecSettingsPtrOutput
	ToH265CodecSettingsPtrOutputWithContext(context.Context) H265CodecSettingsPtrOutput
}

type h265codecSettingsPtrType H265CodecSettingsArgs

func H265CodecSettingsPtr(v *H265CodecSettingsArgs) H265CodecSettingsPtrInput {
	return (*h265codecSettingsPtrType)(v)
}

func (*h265codecSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**H265CodecSettings)(nil)).Elem()
}

func (i *h265codecSettingsPtrType) ToH265CodecSettingsPtrOutput() H265CodecSettingsPtrOutput {
	return i.ToH265CodecSettingsPtrOutputWithContext(context.Background())
}

func (i *h265codecSettingsPtrType) ToH265CodecSettingsPtrOutputWithContext(ctx context.Context) H265CodecSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(H265CodecSettingsPtrOutput)
}

// H265 codec settings.
type H265CodecSettingsOutput struct{ *pulumi.OutputState }

func (H265CodecSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H265CodecSettings)(nil)).Elem()
}

func (o H265CodecSettingsOutput) ToH265CodecSettingsOutput() H265CodecSettingsOutput {
	return o
}

func (o H265CodecSettingsOutput) ToH265CodecSettingsOutputWithContext(ctx context.Context) H265CodecSettingsOutput {
	return o
}

func (o H265CodecSettingsOutput) ToH265CodecSettingsPtrOutput() H265CodecSettingsPtrOutput {
	return o.ToH265CodecSettingsPtrOutputWithContext(context.Background())
}

func (o H265CodecSettingsOutput) ToH265CodecSettingsPtrOutputWithContext(ctx context.Context) H265CodecSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v H265CodecSettings) *H265CodecSettings {
		return &v
	}).(H265CodecSettingsPtrOutput)
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o H265CodecSettingsOutput) AllowOpenGop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *bool { return v.AllowOpenGop }).(pulumi.BoolPtrOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o H265CodecSettingsOutput) AqStrength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *float64 { return v.AqStrength }).(pulumi.Float64PtrOutput)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
func (o H265CodecSettingsOutput) BFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *int { return v.BFrameCount }).(pulumi.IntPtrOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o H265CodecSettingsOutput) BPyramid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *bool { return v.BPyramid }).(pulumi.BoolPtrOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
func (o H265CodecSettingsOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettings) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o H265CodecSettingsOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *int { return v.CrfLevel }).(pulumi.IntPtrOutput)
}

// Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
func (o H265CodecSettingsOutput) EnableTwoPass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *bool { return v.EnableTwoPass }).(pulumi.BoolPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o H265CodecSettingsOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v H265CodecSettings) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o H265CodecSettingsOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *string { return v.GopDuration }).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o H265CodecSettingsOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *int { return v.GopFrameCount }).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H265CodecSettingsOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *int { return v.HeightPixels }).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o H265CodecSettingsOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *string { return v.PixelFormat }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *string { return v.Preset }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
func (o H265CodecSettingsOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *string { return v.RateControlMode }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *string { return v.Tune }).(pulumi.StringPtrOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
func (o H265CodecSettingsOutput) VbvFullnessBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *int { return v.VbvFullnessBits }).(pulumi.IntPtrOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
func (o H265CodecSettingsOutput) VbvSizeBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *int { return v.VbvSizeBits }).(pulumi.IntPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H265CodecSettingsOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v H265CodecSettings) *int { return v.WidthPixels }).(pulumi.IntPtrOutput)
}

type H265CodecSettingsPtrOutput struct{ *pulumi.OutputState }

func (H265CodecSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**H265CodecSettings)(nil)).Elem()
}

func (o H265CodecSettingsPtrOutput) ToH265CodecSettingsPtrOutput() H265CodecSettingsPtrOutput {
	return o
}

func (o H265CodecSettingsPtrOutput) ToH265CodecSettingsPtrOutputWithContext(ctx context.Context) H265CodecSettingsPtrOutput {
	return o
}

func (o H265CodecSettingsPtrOutput) Elem() H265CodecSettingsOutput {
	return o.ApplyT(func(v *H265CodecSettings) H265CodecSettings {
		if v != nil {
			return *v
		}
		var ret H265CodecSettings
		return ret
	}).(H265CodecSettingsOutput)
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o H265CodecSettingsPtrOutput) AllowOpenGop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowOpenGop
	}).(pulumi.BoolPtrOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o H265CodecSettingsPtrOutput) AqStrength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *float64 {
		if v == nil {
			return nil
		}
		return v.AqStrength
	}).(pulumi.Float64PtrOutput)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
func (o H265CodecSettingsPtrOutput) BFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.BFrameCount
	}).(pulumi.IntPtrOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o H265CodecSettingsPtrOutput) BPyramid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *bool {
		if v == nil {
			return nil
		}
		return v.BPyramid
	}).(pulumi.BoolPtrOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
func (o H265CodecSettingsPtrOutput) BitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return &v.BitrateBps
	}).(pulumi.IntPtrOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o H265CodecSettingsPtrOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.CrfLevel
	}).(pulumi.IntPtrOutput)
}

// Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
func (o H265CodecSettingsPtrOutput) EnableTwoPass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTwoPass
	}).(pulumi.BoolPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o H265CodecSettingsPtrOutput) FrameRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *float64 {
		if v == nil {
			return nil
		}
		return &v.FrameRate
	}).(pulumi.Float64PtrOutput)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o H265CodecSettingsPtrOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.GopDuration
	}).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o H265CodecSettingsPtrOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.GopFrameCount
	}).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H265CodecSettingsPtrOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.HeightPixels
	}).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o H265CodecSettingsPtrOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.PixelFormat
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsPtrOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.Preset
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
func (o H265CodecSettingsPtrOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.RateControlMode
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsPtrOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.Tune
	}).(pulumi.StringPtrOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
func (o H265CodecSettingsPtrOutput) VbvFullnessBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.VbvFullnessBits
	}).(pulumi.IntPtrOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
func (o H265CodecSettingsPtrOutput) VbvSizeBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.VbvSizeBits
	}).(pulumi.IntPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H265CodecSettingsPtrOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *H265CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.WidthPixels
	}).(pulumi.IntPtrOutput)
}

// H265 codec settings.
type H265CodecSettingsResponse struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop bool `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength float64 `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
	BFrameCount int `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid bool `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel int `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
	EnableTwoPass bool `pulumi:"enableTwoPass"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat string `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Preset string `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Profile string `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
	RateControlMode string `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
	Tune string `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
	VbvFullnessBits int `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
	VbvSizeBits int `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels int `pulumi:"widthPixels"`
}

// H265 codec settings.
type H265CodecSettingsResponseOutput struct{ *pulumi.OutputState }

func (H265CodecSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*H265CodecSettingsResponse)(nil)).Elem()
}

func (o H265CodecSettingsResponseOutput) ToH265CodecSettingsResponseOutput() H265CodecSettingsResponseOutput {
	return o
}

func (o H265CodecSettingsResponseOutput) ToH265CodecSettingsResponseOutputWithContext(ctx context.Context) H265CodecSettingsResponseOutput {
	return o
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o H265CodecSettingsResponseOutput) AllowOpenGop() pulumi.BoolOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) bool { return v.AllowOpenGop }).(pulumi.BoolOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o H265CodecSettingsResponseOutput) AqStrength() pulumi.Float64Output {
	return o.ApplyT(func(v H265CodecSettingsResponse) float64 { return v.AqStrength }).(pulumi.Float64Output)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.
func (o H265CodecSettingsResponseOutput) BFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.BFrameCount }).(pulumi.IntOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o H265CodecSettingsResponseOutput) BPyramid() pulumi.BoolOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) bool { return v.BPyramid }).(pulumi.BoolOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
func (o H265CodecSettingsResponseOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o H265CodecSettingsResponseOutput) CrfLevel() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.CrfLevel }).(pulumi.IntOutput)
}

// Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.
func (o H265CodecSettingsResponseOutput) EnableTwoPass() pulumi.BoolOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) bool { return v.EnableTwoPass }).(pulumi.BoolOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o H265CodecSettingsResponseOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v H265CodecSettingsResponse) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o H265CodecSettingsResponseOutput) GopDuration() pulumi.StringOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) string { return v.GopDuration }).(pulumi.StringOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o H265CodecSettingsResponseOutput) GopFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.GopFrameCount }).(pulumi.IntOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H265CodecSettingsResponseOutput) HeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.HeightPixels }).(pulumi.IntOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o H265CodecSettingsResponseOutput) PixelFormat() pulumi.StringOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) string { return v.PixelFormat }).(pulumi.StringOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsResponseOutput) Preset() pulumi.StringOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) string { return v.Preset }).(pulumi.StringOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsResponseOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) string { return v.Profile }).(pulumi.StringOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
func (o H265CodecSettingsResponseOutput) RateControlMode() pulumi.StringOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) string { return v.RateControlMode }).(pulumi.StringOutput)
}

// Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.
func (o H265CodecSettingsResponseOutput) Tune() pulumi.StringOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) string { return v.Tune }).(pulumi.StringOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.
func (o H265CodecSettingsResponseOutput) VbvFullnessBits() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.VbvFullnessBits }).(pulumi.IntOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
func (o H265CodecSettingsResponseOutput) VbvSizeBits() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.VbvSizeBits }).(pulumi.IntOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o H265CodecSettingsResponseOutput) WidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v H265CodecSettingsResponse) int { return v.WidthPixels }).(pulumi.IntOutput)
}

// Overlaid image.
type Image struct {
	// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
	Alpha *float64 `pulumi:"alpha"`
	// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
	Resolution *NormalizedCoordinate `pulumi:"resolution"`
	// URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
	Uri string `pulumi:"uri"`
}

// ImageInput is an input type that accepts ImageArgs and ImageOutput values.
// You can construct a concrete instance of `ImageInput` via:
//
//	ImageArgs{...}
type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(context.Context) ImageOutput
}

// Overlaid image.
type ImageArgs struct {
	// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
	Alpha pulumi.Float64PtrInput `pulumi:"alpha"`
	// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
	Resolution NormalizedCoordinatePtrInput `pulumi:"resolution"`
	// URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (i ImageArgs) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i ImageArgs) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

func (i ImageArgs) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i ImageArgs) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput).ToImagePtrOutputWithContext(ctx)
}

// ImagePtrInput is an input type that accepts ImageArgs, ImagePtr and ImagePtrOutput values.
// You can construct a concrete instance of `ImagePtrInput` via:
//
//	        ImageArgs{...}
//
//	or:
//
//	        nil
type ImagePtrInput interface {
	pulumi.Input

	ToImagePtrOutput() ImagePtrOutput
	ToImagePtrOutputWithContext(context.Context) ImagePtrOutput
}

type imagePtrType ImageArgs

func ImagePtr(v *ImageArgs) ImagePtrInput {
	return (*imagePtrType)(v)
}

func (*imagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *imagePtrType) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i *imagePtrType) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePtrOutput)
}

// Overlaid image.
type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) ToImagePtrOutput() ImagePtrOutput {
	return o.ToImagePtrOutputWithContext(context.Background())
}

func (o ImageOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Image) *Image {
		return &v
	}).(ImagePtrOutput)
}

// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
func (o ImageOutput) Alpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Image) *float64 { return v.Alpha }).(pulumi.Float64PtrOutput)
}

// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
func (o ImageOutput) Resolution() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v Image) *NormalizedCoordinate { return v.Resolution }).(NormalizedCoordinatePtrOutput)
}

// URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
func (o ImageOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v Image) string { return v.Uri }).(pulumi.StringOutput)
}

type ImagePtrOutput struct{ *pulumi.OutputState }

func (ImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImagePtrOutput) ToImagePtrOutput() ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) Elem() ImageOutput {
	return o.ApplyT(func(v *Image) Image {
		if v != nil {
			return *v
		}
		var ret Image
		return ret
	}).(ImageOutput)
}

// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
func (o ImagePtrOutput) Alpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Image) *float64 {
		if v == nil {
			return nil
		}
		return v.Alpha
	}).(pulumi.Float64PtrOutput)
}

// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
func (o ImagePtrOutput) Resolution() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v *Image) *NormalizedCoordinate {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(NormalizedCoordinatePtrOutput)
}

// URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
func (o ImagePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Overlaid image.
type ImageResponse struct {
	// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
	Alpha float64 `pulumi:"alpha"`
	// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
	Resolution NormalizedCoordinateResponse `pulumi:"resolution"`
	// URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
	Uri string `pulumi:"uri"`
}

// Overlaid image.
type ImageResponseOutput struct{ *pulumi.OutputState }

func (ImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageResponse)(nil)).Elem()
}

func (o ImageResponseOutput) ToImageResponseOutput() ImageResponseOutput {
	return o
}

func (o ImageResponseOutput) ToImageResponseOutputWithContext(ctx context.Context) ImageResponseOutput {
	return o
}

// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
func (o ImageResponseOutput) Alpha() pulumi.Float64Output {
	return o.ApplyT(func(v ImageResponse) float64 { return v.Alpha }).(pulumi.Float64Output)
}

// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
func (o ImageResponseOutput) Resolution() NormalizedCoordinateResponseOutput {
	return o.ApplyT(func(v ImageResponse) NormalizedCoordinateResponse { return v.Resolution }).(NormalizedCoordinateResponseOutput)
}

// URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
func (o ImageResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ImageResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Input asset.
type Input struct {
	// A unique key for this input. Must be specified when using advanced mapping and edit lists.
	Key *string `pulumi:"key"`
	// Preprocessing configurations.
	PreprocessingConfig *PreprocessingConfig `pulumi:"preprocessingConfig"`
	// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	Uri *string `pulumi:"uri"`
}

// InputInput is an input type that accepts InputArgs and InputOutput values.
// You can construct a concrete instance of `InputInput` via:
//
//	InputArgs{...}
type InputInput interface {
	pulumi.Input

	ToInputOutput() InputOutput
	ToInputOutputWithContext(context.Context) InputOutput
}

// Input asset.
type InputArgs struct {
	// A unique key for this input. Must be specified when using advanced mapping and edit lists.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Preprocessing configurations.
	PreprocessingConfig PreprocessingConfigPtrInput `pulumi:"preprocessingConfig"`
	// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (InputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Input)(nil)).Elem()
}

func (i InputArgs) ToInputOutput() InputOutput {
	return i.ToInputOutputWithContext(context.Background())
}

func (i InputArgs) ToInputOutputWithContext(ctx context.Context) InputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputOutput)
}

// InputArrayInput is an input type that accepts InputArray and InputArrayOutput values.
// You can construct a concrete instance of `InputArrayInput` via:
//
//	InputArray{ InputArgs{...} }
type InputArrayInput interface {
	pulumi.Input

	ToInputArrayOutput() InputArrayOutput
	ToInputArrayOutputWithContext(context.Context) InputArrayOutput
}

type InputArray []InputInput

func (InputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Input)(nil)).Elem()
}

func (i InputArray) ToInputArrayOutput() InputArrayOutput {
	return i.ToInputArrayOutputWithContext(context.Background())
}

func (i InputArray) ToInputArrayOutputWithContext(ctx context.Context) InputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputArrayOutput)
}

// Input asset.
type InputOutput struct{ *pulumi.OutputState }

func (InputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Input)(nil)).Elem()
}

func (o InputOutput) ToInputOutput() InputOutput {
	return o
}

func (o InputOutput) ToInputOutputWithContext(ctx context.Context) InputOutput {
	return o
}

// A unique key for this input. Must be specified when using advanced mapping and edit lists.
func (o InputOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Input) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Preprocessing configurations.
func (o InputOutput) PreprocessingConfig() PreprocessingConfigPtrOutput {
	return o.ApplyT(func(v Input) *PreprocessingConfig { return v.PreprocessingConfig }).(PreprocessingConfigPtrOutput)
}

// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
func (o InputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Input) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type InputArrayOutput struct{ *pulumi.OutputState }

func (InputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Input)(nil)).Elem()
}

func (o InputArrayOutput) ToInputArrayOutput() InputArrayOutput {
	return o
}

func (o InputArrayOutput) ToInputArrayOutputWithContext(ctx context.Context) InputArrayOutput {
	return o
}

func (o InputArrayOutput) Index(i pulumi.IntInput) InputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Input {
		return vs[0].([]Input)[vs[1].(int)]
	}).(InputOutput)
}

// Input asset.
type InputResponse struct {
	// A unique key for this input. Must be specified when using advanced mapping and edit lists.
	Key string `pulumi:"key"`
	// Preprocessing configurations.
	PreprocessingConfig PreprocessingConfigResponse `pulumi:"preprocessingConfig"`
	// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	Uri string `pulumi:"uri"`
}

// Input asset.
type InputResponseOutput struct{ *pulumi.OutputState }

func (InputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputResponse)(nil)).Elem()
}

func (o InputResponseOutput) ToInputResponseOutput() InputResponseOutput {
	return o
}

func (o InputResponseOutput) ToInputResponseOutputWithContext(ctx context.Context) InputResponseOutput {
	return o
}

// A unique key for this input. Must be specified when using advanced mapping and edit lists.
func (o InputResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Preprocessing configurations.
func (o InputResponseOutput) PreprocessingConfig() PreprocessingConfigResponseOutput {
	return o.ApplyT(func(v InputResponse) PreprocessingConfigResponse { return v.PreprocessingConfig }).(PreprocessingConfigResponseOutput)
}

// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
func (o InputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type InputResponseArrayOutput struct{ *pulumi.OutputState }

func (InputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputResponse)(nil)).Elem()
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutput() InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutputWithContext(ctx context.Context) InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) Index(i pulumi.IntInput) InputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputResponse {
		return vs[0].([]InputResponse)[vs[1].(int)]
	}).(InputResponseOutput)
}

// Job configuration
type JobConfig struct {
	// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
	AdBreaks []AdBreak `pulumi:"adBreaks"`
	// List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
	EditList []EditAtom `pulumi:"editList"`
	// List of elementary streams.
	ElementaryStreams []ElementaryStream `pulumi:"elementaryStreams"`
	// List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
	Encryptions []Encryption `pulumi:"encryptions"`
	// List of input assets stored in Cloud Storage.
	Inputs []Input `pulumi:"inputs"`
	// List of output manifests.
	Manifests []Manifest `pulumi:"manifests"`
	// List of multiplexing settings for output streams.
	MuxStreams []MuxStream `pulumi:"muxStreams"`
	// Output configuration.
	Output *Output `pulumi:"output"`
	// List of overlays on the output video, in descending Z-order.
	Overlays []Overlay `pulumi:"overlays"`
	// Destination on Pub/Sub.
	PubsubDestination *PubsubDestination `pulumi:"pubsubDestination"`
	// List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
	SpriteSheets []SpriteSheet `pulumi:"spriteSheets"`
}

// JobConfigInput is an input type that accepts JobConfigArgs and JobConfigOutput values.
// You can construct a concrete instance of `JobConfigInput` via:
//
//	JobConfigArgs{...}
type JobConfigInput interface {
	pulumi.Input

	ToJobConfigOutput() JobConfigOutput
	ToJobConfigOutputWithContext(context.Context) JobConfigOutput
}

// Job configuration
type JobConfigArgs struct {
	// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
	AdBreaks AdBreakArrayInput `pulumi:"adBreaks"`
	// List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
	EditList EditAtomArrayInput `pulumi:"editList"`
	// List of elementary streams.
	ElementaryStreams ElementaryStreamArrayInput `pulumi:"elementaryStreams"`
	// List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
	Encryptions EncryptionArrayInput `pulumi:"encryptions"`
	// List of input assets stored in Cloud Storage.
	Inputs InputArrayInput `pulumi:"inputs"`
	// List of output manifests.
	Manifests ManifestArrayInput `pulumi:"manifests"`
	// List of multiplexing settings for output streams.
	MuxStreams MuxStreamArrayInput `pulumi:"muxStreams"`
	// Output configuration.
	Output OutputPtrInput `pulumi:"output"`
	// List of overlays on the output video, in descending Z-order.
	Overlays OverlayArrayInput `pulumi:"overlays"`
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationPtrInput `pulumi:"pubsubDestination"`
	// List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
	SpriteSheets SpriteSheetArrayInput `pulumi:"spriteSheets"`
}

func (JobConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfig)(nil)).Elem()
}

func (i JobConfigArgs) ToJobConfigOutput() JobConfigOutput {
	return i.ToJobConfigOutputWithContext(context.Background())
}

func (i JobConfigArgs) ToJobConfigOutputWithContext(ctx context.Context) JobConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigOutput)
}

func (i JobConfigArgs) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return i.ToJobConfigPtrOutputWithContext(context.Background())
}

func (i JobConfigArgs) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigOutput).ToJobConfigPtrOutputWithContext(ctx)
}

// JobConfigPtrInput is an input type that accepts JobConfigArgs, JobConfigPtr and JobConfigPtrOutput values.
// You can construct a concrete instance of `JobConfigPtrInput` via:
//
//	        JobConfigArgs{...}
//
//	or:
//
//	        nil
type JobConfigPtrInput interface {
	pulumi.Input

	ToJobConfigPtrOutput() JobConfigPtrOutput
	ToJobConfigPtrOutputWithContext(context.Context) JobConfigPtrOutput
}

type jobConfigPtrType JobConfigArgs

func JobConfigPtr(v *JobConfigArgs) JobConfigPtrInput {
	return (*jobConfigPtrType)(v)
}

func (*jobConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfig)(nil)).Elem()
}

func (i *jobConfigPtrType) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return i.ToJobConfigPtrOutputWithContext(context.Background())
}

func (i *jobConfigPtrType) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigPtrOutput)
}

// Job configuration
type JobConfigOutput struct{ *pulumi.OutputState }

func (JobConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfig)(nil)).Elem()
}

func (o JobConfigOutput) ToJobConfigOutput() JobConfigOutput {
	return o
}

func (o JobConfigOutput) ToJobConfigOutputWithContext(ctx context.Context) JobConfigOutput {
	return o
}

func (o JobConfigOutput) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return o.ToJobConfigPtrOutputWithContext(context.Background())
}

func (o JobConfigOutput) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfig) *JobConfig {
		return &v
	}).(JobConfigPtrOutput)
}

// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
func (o JobConfigOutput) AdBreaks() AdBreakArrayOutput {
	return o.ApplyT(func(v JobConfig) []AdBreak { return v.AdBreaks }).(AdBreakArrayOutput)
}

// List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
func (o JobConfigOutput) EditList() EditAtomArrayOutput {
	return o.ApplyT(func(v JobConfig) []EditAtom { return v.EditList }).(EditAtomArrayOutput)
}

// List of elementary streams.
func (o JobConfigOutput) ElementaryStreams() ElementaryStreamArrayOutput {
	return o.ApplyT(func(v JobConfig) []ElementaryStream { return v.ElementaryStreams }).(ElementaryStreamArrayOutput)
}

// List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
func (o JobConfigOutput) Encryptions() EncryptionArrayOutput {
	return o.ApplyT(func(v JobConfig) []Encryption { return v.Encryptions }).(EncryptionArrayOutput)
}

// List of input assets stored in Cloud Storage.
func (o JobConfigOutput) Inputs() InputArrayOutput {
	return o.ApplyT(func(v JobConfig) []Input { return v.Inputs }).(InputArrayOutput)
}

// List of output manifests.
func (o JobConfigOutput) Manifests() ManifestArrayOutput {
	return o.ApplyT(func(v JobConfig) []Manifest { return v.Manifests }).(ManifestArrayOutput)
}

// List of multiplexing settings for output streams.
func (o JobConfigOutput) MuxStreams() MuxStreamArrayOutput {
	return o.ApplyT(func(v JobConfig) []MuxStream { return v.MuxStreams }).(MuxStreamArrayOutput)
}

// Output configuration.
func (o JobConfigOutput) Output() OutputPtrOutput {
	return o.ApplyT(func(v JobConfig) *Output { return v.Output }).(OutputPtrOutput)
}

// List of overlays on the output video, in descending Z-order.
func (o JobConfigOutput) Overlays() OverlayArrayOutput {
	return o.ApplyT(func(v JobConfig) []Overlay { return v.Overlays }).(OverlayArrayOutput)
}

// Destination on Pub/Sub.
func (o JobConfigOutput) PubsubDestination() PubsubDestinationPtrOutput {
	return o.ApplyT(func(v JobConfig) *PubsubDestination { return v.PubsubDestination }).(PubsubDestinationPtrOutput)
}

// List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
func (o JobConfigOutput) SpriteSheets() SpriteSheetArrayOutput {
	return o.ApplyT(func(v JobConfig) []SpriteSheet { return v.SpriteSheets }).(SpriteSheetArrayOutput)
}

type JobConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfig)(nil)).Elem()
}

func (o JobConfigPtrOutput) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return o
}

func (o JobConfigPtrOutput) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return o
}

func (o JobConfigPtrOutput) Elem() JobConfigOutput {
	return o.ApplyT(func(v *JobConfig) JobConfig {
		if v != nil {
			return *v
		}
		var ret JobConfig
		return ret
	}).(JobConfigOutput)
}

// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
func (o JobConfigPtrOutput) AdBreaks() AdBreakArrayOutput {
	return o.ApplyT(func(v *JobConfig) []AdBreak {
		if v == nil {
			return nil
		}
		return v.AdBreaks
	}).(AdBreakArrayOutput)
}

// List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
func (o JobConfigPtrOutput) EditList() EditAtomArrayOutput {
	return o.ApplyT(func(v *JobConfig) []EditAtom {
		if v == nil {
			return nil
		}
		return v.EditList
	}).(EditAtomArrayOutput)
}

// List of elementary streams.
func (o JobConfigPtrOutput) ElementaryStreams() ElementaryStreamArrayOutput {
	return o.ApplyT(func(v *JobConfig) []ElementaryStream {
		if v == nil {
			return nil
		}
		return v.ElementaryStreams
	}).(ElementaryStreamArrayOutput)
}

// List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
func (o JobConfigPtrOutput) Encryptions() EncryptionArrayOutput {
	return o.ApplyT(func(v *JobConfig) []Encryption {
		if v == nil {
			return nil
		}
		return v.Encryptions
	}).(EncryptionArrayOutput)
}

// List of input assets stored in Cloud Storage.
func (o JobConfigPtrOutput) Inputs() InputArrayOutput {
	return o.ApplyT(func(v *JobConfig) []Input {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(InputArrayOutput)
}

// List of output manifests.
func (o JobConfigPtrOutput) Manifests() ManifestArrayOutput {
	return o.ApplyT(func(v *JobConfig) []Manifest {
		if v == nil {
			return nil
		}
		return v.Manifests
	}).(ManifestArrayOutput)
}

// List of multiplexing settings for output streams.
func (o JobConfigPtrOutput) MuxStreams() MuxStreamArrayOutput {
	return o.ApplyT(func(v *JobConfig) []MuxStream {
		if v == nil {
			return nil
		}
		return v.MuxStreams
	}).(MuxStreamArrayOutput)
}

// Output configuration.
func (o JobConfigPtrOutput) Output() OutputPtrOutput {
	return o.ApplyT(func(v *JobConfig) *Output {
		if v == nil {
			return nil
		}
		return v.Output
	}).(OutputPtrOutput)
}

// List of overlays on the output video, in descending Z-order.
func (o JobConfigPtrOutput) Overlays() OverlayArrayOutput {
	return o.ApplyT(func(v *JobConfig) []Overlay {
		if v == nil {
			return nil
		}
		return v.Overlays
	}).(OverlayArrayOutput)
}

// Destination on Pub/Sub.
func (o JobConfigPtrOutput) PubsubDestination() PubsubDestinationPtrOutput {
	return o.ApplyT(func(v *JobConfig) *PubsubDestination {
		if v == nil {
			return nil
		}
		return v.PubsubDestination
	}).(PubsubDestinationPtrOutput)
}

// List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
func (o JobConfigPtrOutput) SpriteSheets() SpriteSheetArrayOutput {
	return o.ApplyT(func(v *JobConfig) []SpriteSheet {
		if v == nil {
			return nil
		}
		return v.SpriteSheets
	}).(SpriteSheetArrayOutput)
}

// Job configuration
type JobConfigResponse struct {
	// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
	AdBreaks []AdBreakResponse `pulumi:"adBreaks"`
	// List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
	EditList []EditAtomResponse `pulumi:"editList"`
	// List of elementary streams.
	ElementaryStreams []ElementaryStreamResponse `pulumi:"elementaryStreams"`
	// List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
	Encryptions []EncryptionResponse `pulumi:"encryptions"`
	// List of input assets stored in Cloud Storage.
	Inputs []InputResponse `pulumi:"inputs"`
	// List of output manifests.
	Manifests []ManifestResponse `pulumi:"manifests"`
	// List of multiplexing settings for output streams.
	MuxStreams []MuxStreamResponse `pulumi:"muxStreams"`
	// Output configuration.
	Output OutputResponse `pulumi:"output"`
	// List of overlays on the output video, in descending Z-order.
	Overlays []OverlayResponse `pulumi:"overlays"`
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationResponse `pulumi:"pubsubDestination"`
	// List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
	SpriteSheets []SpriteSheetResponse `pulumi:"spriteSheets"`
}

// Job configuration
type JobConfigResponseOutput struct{ *pulumi.OutputState }

func (JobConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigResponse)(nil)).Elem()
}

func (o JobConfigResponseOutput) ToJobConfigResponseOutput() JobConfigResponseOutput {
	return o
}

func (o JobConfigResponseOutput) ToJobConfigResponseOutputWithContext(ctx context.Context) JobConfigResponseOutput {
	return o
}

// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
func (o JobConfigResponseOutput) AdBreaks() AdBreakResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []AdBreakResponse { return v.AdBreaks }).(AdBreakResponseArrayOutput)
}

// List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.
func (o JobConfigResponseOutput) EditList() EditAtomResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []EditAtomResponse { return v.EditList }).(EditAtomResponseArrayOutput)
}

// List of elementary streams.
func (o JobConfigResponseOutput) ElementaryStreams() ElementaryStreamResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []ElementaryStreamResponse { return v.ElementaryStreams }).(ElementaryStreamResponseArrayOutput)
}

// List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.
func (o JobConfigResponseOutput) Encryptions() EncryptionResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []EncryptionResponse { return v.Encryptions }).(EncryptionResponseArrayOutput)
}

// List of input assets stored in Cloud Storage.
func (o JobConfigResponseOutput) Inputs() InputResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []InputResponse { return v.Inputs }).(InputResponseArrayOutput)
}

// List of output manifests.
func (o JobConfigResponseOutput) Manifests() ManifestResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []ManifestResponse { return v.Manifests }).(ManifestResponseArrayOutput)
}

// List of multiplexing settings for output streams.
func (o JobConfigResponseOutput) MuxStreams() MuxStreamResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []MuxStreamResponse { return v.MuxStreams }).(MuxStreamResponseArrayOutput)
}

// Output configuration.
func (o JobConfigResponseOutput) Output() OutputResponseOutput {
	return o.ApplyT(func(v JobConfigResponse) OutputResponse { return v.Output }).(OutputResponseOutput)
}

// List of overlays on the output video, in descending Z-order.
func (o JobConfigResponseOutput) Overlays() OverlayResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []OverlayResponse { return v.Overlays }).(OverlayResponseArrayOutput)
}

// Destination on Pub/Sub.
func (o JobConfigResponseOutput) PubsubDestination() PubsubDestinationResponseOutput {
	return o.ApplyT(func(v JobConfigResponse) PubsubDestinationResponse { return v.PubsubDestination }).(PubsubDestinationResponseOutput)
}

// List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.
func (o JobConfigResponseOutput) SpriteSheets() SpriteSheetResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []SpriteSheetResponse { return v.SpriteSheets }).(SpriteSheetResponseArrayOutput)
}

// Manifest configuration.
type Manifest struct {
	// `DASH` manifest configuration.
	Dash *DashConfig `pulumi:"dash"`
	// The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.
	FileName *string `pulumi:"fileName"`
	// List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.
	MuxStreams []string `pulumi:"muxStreams"`
	// Type of the manifest.
	Type ManifestType `pulumi:"type"`
}

// ManifestInput is an input type that accepts ManifestArgs and ManifestOutput values.
// You can construct a concrete instance of `ManifestInput` via:
//
//	ManifestArgs{...}
type ManifestInput interface {
	pulumi.Input

	ToManifestOutput() ManifestOutput
	ToManifestOutputWithContext(context.Context) ManifestOutput
}

// Manifest configuration.
type ManifestArgs struct {
	// `DASH` manifest configuration.
	Dash DashConfigPtrInput `pulumi:"dash"`
	// The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.
	MuxStreams pulumi.StringArrayInput `pulumi:"muxStreams"`
	// Type of the manifest.
	Type ManifestTypeInput `pulumi:"type"`
}

func (ManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Manifest)(nil)).Elem()
}

func (i ManifestArgs) ToManifestOutput() ManifestOutput {
	return i.ToManifestOutputWithContext(context.Background())
}

func (i ManifestArgs) ToManifestOutputWithContext(ctx context.Context) ManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestOutput)
}

// ManifestArrayInput is an input type that accepts ManifestArray and ManifestArrayOutput values.
// You can construct a concrete instance of `ManifestArrayInput` via:
//
//	ManifestArray{ ManifestArgs{...} }
type ManifestArrayInput interface {
	pulumi.Input

	ToManifestArrayOutput() ManifestArrayOutput
	ToManifestArrayOutputWithContext(context.Context) ManifestArrayOutput
}

type ManifestArray []ManifestInput

func (ManifestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Manifest)(nil)).Elem()
}

func (i ManifestArray) ToManifestArrayOutput() ManifestArrayOutput {
	return i.ToManifestArrayOutputWithContext(context.Background())
}

func (i ManifestArray) ToManifestArrayOutputWithContext(ctx context.Context) ManifestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestArrayOutput)
}

// Manifest configuration.
type ManifestOutput struct{ *pulumi.OutputState }

func (ManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Manifest)(nil)).Elem()
}

func (o ManifestOutput) ToManifestOutput() ManifestOutput {
	return o
}

func (o ManifestOutput) ToManifestOutputWithContext(ctx context.Context) ManifestOutput {
	return o
}

// `DASH` manifest configuration.
func (o ManifestOutput) Dash() DashConfigPtrOutput {
	return o.ApplyT(func(v Manifest) *DashConfig { return v.Dash }).(DashConfigPtrOutput)
}

// The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.
func (o ManifestOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Manifest) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.
func (o ManifestOutput) MuxStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Manifest) []string { return v.MuxStreams }).(pulumi.StringArrayOutput)
}

// Type of the manifest.
func (o ManifestOutput) Type() ManifestTypeOutput {
	return o.ApplyT(func(v Manifest) ManifestType { return v.Type }).(ManifestTypeOutput)
}

type ManifestArrayOutput struct{ *pulumi.OutputState }

func (ManifestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Manifest)(nil)).Elem()
}

func (o ManifestArrayOutput) ToManifestArrayOutput() ManifestArrayOutput {
	return o
}

func (o ManifestArrayOutput) ToManifestArrayOutputWithContext(ctx context.Context) ManifestArrayOutput {
	return o
}

func (o ManifestArrayOutput) Index(i pulumi.IntInput) ManifestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Manifest {
		return vs[0].([]Manifest)[vs[1].(int)]
	}).(ManifestOutput)
}

// Manifest configuration.
type ManifestResponse struct {
	// `DASH` manifest configuration.
	Dash DashConfigResponse `pulumi:"dash"`
	// The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.
	FileName string `pulumi:"fileName"`
	// List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.
	MuxStreams []string `pulumi:"muxStreams"`
	// Type of the manifest.
	Type string `pulumi:"type"`
}

// Manifest configuration.
type ManifestResponseOutput struct{ *pulumi.OutputState }

func (ManifestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManifestResponse)(nil)).Elem()
}

func (o ManifestResponseOutput) ToManifestResponseOutput() ManifestResponseOutput {
	return o
}

func (o ManifestResponseOutput) ToManifestResponseOutputWithContext(ctx context.Context) ManifestResponseOutput {
	return o
}

// `DASH` manifest configuration.
func (o ManifestResponseOutput) Dash() DashConfigResponseOutput {
	return o.ApplyT(func(v ManifestResponse) DashConfigResponse { return v.Dash }).(DashConfigResponseOutput)
}

// The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.
func (o ManifestResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ManifestResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.
func (o ManifestResponseOutput) MuxStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManifestResponse) []string { return v.MuxStreams }).(pulumi.StringArrayOutput)
}

// Type of the manifest.
func (o ManifestResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManifestResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ManifestResponseArrayOutput struct{ *pulumi.OutputState }

func (ManifestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManifestResponse)(nil)).Elem()
}

func (o ManifestResponseArrayOutput) ToManifestResponseArrayOutput() ManifestResponseArrayOutput {
	return o
}

func (o ManifestResponseArrayOutput) ToManifestResponseArrayOutputWithContext(ctx context.Context) ManifestResponseArrayOutput {
	return o
}

func (o ManifestResponseArrayOutput) Index(i pulumi.IntInput) ManifestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManifestResponse {
		return vs[0].([]ManifestResponse)[vs[1].(int)]
	}).(ManifestResponseOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryption struct {
	// Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
	Scheme string `pulumi:"scheme"`
}

// MpegCommonEncryptionInput is an input type that accepts MpegCommonEncryptionArgs and MpegCommonEncryptionOutput values.
// You can construct a concrete instance of `MpegCommonEncryptionInput` via:
//
//	MpegCommonEncryptionArgs{...}
type MpegCommonEncryptionInput interface {
	pulumi.Input

	ToMpegCommonEncryptionOutput() MpegCommonEncryptionOutput
	ToMpegCommonEncryptionOutputWithContext(context.Context) MpegCommonEncryptionOutput
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionArgs struct {
	// Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
	Scheme pulumi.StringInput `pulumi:"scheme"`
}

func (MpegCommonEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MpegCommonEncryption)(nil)).Elem()
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionOutput() MpegCommonEncryptionOutput {
	return i.ToMpegCommonEncryptionOutputWithContext(context.Background())
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionOutputWithContext(ctx context.Context) MpegCommonEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpegCommonEncryptionOutput)
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return i.ToMpegCommonEncryptionPtrOutputWithContext(context.Background())
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpegCommonEncryptionOutput).ToMpegCommonEncryptionPtrOutputWithContext(ctx)
}

// MpegCommonEncryptionPtrInput is an input type that accepts MpegCommonEncryptionArgs, MpegCommonEncryptionPtr and MpegCommonEncryptionPtrOutput values.
// You can construct a concrete instance of `MpegCommonEncryptionPtrInput` via:
//
//	        MpegCommonEncryptionArgs{...}
//
//	or:
//
//	        nil
type MpegCommonEncryptionPtrInput interface {
	pulumi.Input

	ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput
	ToMpegCommonEncryptionPtrOutputWithContext(context.Context) MpegCommonEncryptionPtrOutput
}

type mpegCommonEncryptionPtrType MpegCommonEncryptionArgs

func MpegCommonEncryptionPtr(v *MpegCommonEncryptionArgs) MpegCommonEncryptionPtrInput {
	return (*mpegCommonEncryptionPtrType)(v)
}

func (*mpegCommonEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MpegCommonEncryption)(nil)).Elem()
}

func (i *mpegCommonEncryptionPtrType) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return i.ToMpegCommonEncryptionPtrOutputWithContext(context.Background())
}

func (i *mpegCommonEncryptionPtrType) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpegCommonEncryptionPtrOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionOutput struct{ *pulumi.OutputState }

func (MpegCommonEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpegCommonEncryption)(nil)).Elem()
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionOutput() MpegCommonEncryptionOutput {
	return o
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionOutputWithContext(ctx context.Context) MpegCommonEncryptionOutput {
	return o
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return o.ToMpegCommonEncryptionPtrOutputWithContext(context.Background())
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MpegCommonEncryption) *MpegCommonEncryption {
		return &v
	}).(MpegCommonEncryptionPtrOutput)
}

// Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
func (o MpegCommonEncryptionOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v MpegCommonEncryption) string { return v.Scheme }).(pulumi.StringOutput)
}

type MpegCommonEncryptionPtrOutput struct{ *pulumi.OutputState }

func (MpegCommonEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MpegCommonEncryption)(nil)).Elem()
}

func (o MpegCommonEncryptionPtrOutput) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return o
}

func (o MpegCommonEncryptionPtrOutput) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return o
}

func (o MpegCommonEncryptionPtrOutput) Elem() MpegCommonEncryptionOutput {
	return o.ApplyT(func(v *MpegCommonEncryption) MpegCommonEncryption {
		if v != nil {
			return *v
		}
		var ret MpegCommonEncryption
		return ret
	}).(MpegCommonEncryptionOutput)
}

// Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
func (o MpegCommonEncryptionPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MpegCommonEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionResponse struct {
	// Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
	Scheme string `pulumi:"scheme"`
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionResponseOutput struct{ *pulumi.OutputState }

func (MpegCommonEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpegCommonEncryptionResponse)(nil)).Elem()
}

func (o MpegCommonEncryptionResponseOutput) ToMpegCommonEncryptionResponseOutput() MpegCommonEncryptionResponseOutput {
	return o
}

func (o MpegCommonEncryptionResponseOutput) ToMpegCommonEncryptionResponseOutputWithContext(ctx context.Context) MpegCommonEncryptionResponseOutput {
	return o
}

// Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`
func (o MpegCommonEncryptionResponseOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v MpegCommonEncryptionResponse) string { return v.Scheme }).(pulumi.StringOutput)
}

// Multiplexing settings for output stream.
type MuxStream struct {
	// The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
	Container *string `pulumi:"container"`
	// List of ElementaryStream.key values multiplexed in this stream.
	ElementaryStreams []string `pulumi:"elementaryStreams"`
	// Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
	EncryptionId *string `pulumi:"encryptionId"`
	// The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
	FileName *string `pulumi:"fileName"`
	// Optional. `fmp4` container configuration.
	Fmp4 *Fmp4Config `pulumi:"fmp4"`
	// A unique key for this multiplexed stream.
	Key *string `pulumi:"key"`
	// Segment settings for `ts`, `fmp4` and `vtt`.
	SegmentSettings *SegmentSettings `pulumi:"segmentSettings"`
}

// MuxStreamInput is an input type that accepts MuxStreamArgs and MuxStreamOutput values.
// You can construct a concrete instance of `MuxStreamInput` via:
//
//	MuxStreamArgs{...}
type MuxStreamInput interface {
	pulumi.Input

	ToMuxStreamOutput() MuxStreamOutput
	ToMuxStreamOutputWithContext(context.Context) MuxStreamOutput
}

// Multiplexing settings for output stream.
type MuxStreamArgs struct {
	// The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
	Container pulumi.StringPtrInput `pulumi:"container"`
	// List of ElementaryStream.key values multiplexed in this stream.
	ElementaryStreams pulumi.StringArrayInput `pulumi:"elementaryStreams"`
	// Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
	EncryptionId pulumi.StringPtrInput `pulumi:"encryptionId"`
	// The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// Optional. `fmp4` container configuration.
	Fmp4 Fmp4ConfigPtrInput `pulumi:"fmp4"`
	// A unique key for this multiplexed stream.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Segment settings for `ts`, `fmp4` and `vtt`.
	SegmentSettings SegmentSettingsPtrInput `pulumi:"segmentSettings"`
}

func (MuxStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuxStream)(nil)).Elem()
}

func (i MuxStreamArgs) ToMuxStreamOutput() MuxStreamOutput {
	return i.ToMuxStreamOutputWithContext(context.Background())
}

func (i MuxStreamArgs) ToMuxStreamOutputWithContext(ctx context.Context) MuxStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuxStreamOutput)
}

// MuxStreamArrayInput is an input type that accepts MuxStreamArray and MuxStreamArrayOutput values.
// You can construct a concrete instance of `MuxStreamArrayInput` via:
//
//	MuxStreamArray{ MuxStreamArgs{...} }
type MuxStreamArrayInput interface {
	pulumi.Input

	ToMuxStreamArrayOutput() MuxStreamArrayOutput
	ToMuxStreamArrayOutputWithContext(context.Context) MuxStreamArrayOutput
}

type MuxStreamArray []MuxStreamInput

func (MuxStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuxStream)(nil)).Elem()
}

func (i MuxStreamArray) ToMuxStreamArrayOutput() MuxStreamArrayOutput {
	return i.ToMuxStreamArrayOutputWithContext(context.Background())
}

func (i MuxStreamArray) ToMuxStreamArrayOutputWithContext(ctx context.Context) MuxStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuxStreamArrayOutput)
}

// Multiplexing settings for output stream.
type MuxStreamOutput struct{ *pulumi.OutputState }

func (MuxStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuxStream)(nil)).Elem()
}

func (o MuxStreamOutput) ToMuxStreamOutput() MuxStreamOutput {
	return o
}

func (o MuxStreamOutput) ToMuxStreamOutputWithContext(ctx context.Context) MuxStreamOutput {
	return o
}

// The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
func (o MuxStreamOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuxStream) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// List of ElementaryStream.key values multiplexed in this stream.
func (o MuxStreamOutput) ElementaryStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuxStream) []string { return v.ElementaryStreams }).(pulumi.StringArrayOutput)
}

// Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
func (o MuxStreamOutput) EncryptionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuxStream) *string { return v.EncryptionId }).(pulumi.StringPtrOutput)
}

// The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
func (o MuxStreamOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuxStream) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// Optional. `fmp4` container configuration.
func (o MuxStreamOutput) Fmp4() Fmp4ConfigPtrOutput {
	return o.ApplyT(func(v MuxStream) *Fmp4Config { return v.Fmp4 }).(Fmp4ConfigPtrOutput)
}

// A unique key for this multiplexed stream.
func (o MuxStreamOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuxStream) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Segment settings for `ts`, `fmp4` and `vtt`.
func (o MuxStreamOutput) SegmentSettings() SegmentSettingsPtrOutput {
	return o.ApplyT(func(v MuxStream) *SegmentSettings { return v.SegmentSettings }).(SegmentSettingsPtrOutput)
}

type MuxStreamArrayOutput struct{ *pulumi.OutputState }

func (MuxStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuxStream)(nil)).Elem()
}

func (o MuxStreamArrayOutput) ToMuxStreamArrayOutput() MuxStreamArrayOutput {
	return o
}

func (o MuxStreamArrayOutput) ToMuxStreamArrayOutputWithContext(ctx context.Context) MuxStreamArrayOutput {
	return o
}

func (o MuxStreamArrayOutput) Index(i pulumi.IntInput) MuxStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuxStream {
		return vs[0].([]MuxStream)[vs[1].(int)]
	}).(MuxStreamOutput)
}

// Multiplexing settings for output stream.
type MuxStreamResponse struct {
	// The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
	Container string `pulumi:"container"`
	// List of ElementaryStream.key values multiplexed in this stream.
	ElementaryStreams []string `pulumi:"elementaryStreams"`
	// Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
	EncryptionId string `pulumi:"encryptionId"`
	// The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
	FileName string `pulumi:"fileName"`
	// Optional. `fmp4` container configuration.
	Fmp4 Fmp4ConfigResponse `pulumi:"fmp4"`
	// A unique key for this multiplexed stream.
	Key string `pulumi:"key"`
	// Segment settings for `ts`, `fmp4` and `vtt`.
	SegmentSettings SegmentSettingsResponse `pulumi:"segmentSettings"`
}

// Multiplexing settings for output stream.
type MuxStreamResponseOutput struct{ *pulumi.OutputState }

func (MuxStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuxStreamResponse)(nil)).Elem()
}

func (o MuxStreamResponseOutput) ToMuxStreamResponseOutput() MuxStreamResponseOutput {
	return o
}

func (o MuxStreamResponseOutput) ToMuxStreamResponseOutputWithContext(ctx context.Context) MuxStreamResponseOutput {
	return o
}

// The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
func (o MuxStreamResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v MuxStreamResponse) string { return v.Container }).(pulumi.StringOutput)
}

// List of ElementaryStream.key values multiplexed in this stream.
func (o MuxStreamResponseOutput) ElementaryStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuxStreamResponse) []string { return v.ElementaryStreams }).(pulumi.StringArrayOutput)
}

// Identifier of the encryption configuration to use. If omitted, output will be unencrypted.
func (o MuxStreamResponseOutput) EncryptionId() pulumi.StringOutput {
	return o.ApplyT(func(v MuxStreamResponse) string { return v.EncryptionId }).(pulumi.StringOutput)
}

// The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.
func (o MuxStreamResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v MuxStreamResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// Optional. `fmp4` container configuration.
func (o MuxStreamResponseOutput) Fmp4() Fmp4ConfigResponseOutput {
	return o.ApplyT(func(v MuxStreamResponse) Fmp4ConfigResponse { return v.Fmp4 }).(Fmp4ConfigResponseOutput)
}

// A unique key for this multiplexed stream.
func (o MuxStreamResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MuxStreamResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Segment settings for `ts`, `fmp4` and `vtt`.
func (o MuxStreamResponseOutput) SegmentSettings() SegmentSettingsResponseOutput {
	return o.ApplyT(func(v MuxStreamResponse) SegmentSettingsResponse { return v.SegmentSettings }).(SegmentSettingsResponseOutput)
}

type MuxStreamResponseArrayOutput struct{ *pulumi.OutputState }

func (MuxStreamResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuxStreamResponse)(nil)).Elem()
}

func (o MuxStreamResponseArrayOutput) ToMuxStreamResponseArrayOutput() MuxStreamResponseArrayOutput {
	return o
}

func (o MuxStreamResponseArrayOutput) ToMuxStreamResponseArrayOutputWithContext(ctx context.Context) MuxStreamResponseArrayOutput {
	return o
}

func (o MuxStreamResponseArrayOutput) Index(i pulumi.IntInput) MuxStreamResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuxStreamResponse {
		return vs[0].([]MuxStreamResponse)[vs[1].(int)]
	}).(MuxStreamResponseOutput)
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinate struct {
	// Normalized x coordinate.
	X *float64 `pulumi:"x"`
	// Normalized y coordinate.
	Y *float64 `pulumi:"y"`
}

// NormalizedCoordinateInput is an input type that accepts NormalizedCoordinateArgs and NormalizedCoordinateOutput values.
// You can construct a concrete instance of `NormalizedCoordinateInput` via:
//
//	NormalizedCoordinateArgs{...}
type NormalizedCoordinateInput interface {
	pulumi.Input

	ToNormalizedCoordinateOutput() NormalizedCoordinateOutput
	ToNormalizedCoordinateOutputWithContext(context.Context) NormalizedCoordinateOutput
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateArgs struct {
	// Normalized x coordinate.
	X pulumi.Float64PtrInput `pulumi:"x"`
	// Normalized y coordinate.
	Y pulumi.Float64PtrInput `pulumi:"y"`
}

func (NormalizedCoordinateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NormalizedCoordinate)(nil)).Elem()
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinateOutput() NormalizedCoordinateOutput {
	return i.ToNormalizedCoordinateOutputWithContext(context.Background())
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinateOutputWithContext(ctx context.Context) NormalizedCoordinateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NormalizedCoordinateOutput)
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return i.ToNormalizedCoordinatePtrOutputWithContext(context.Background())
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NormalizedCoordinateOutput).ToNormalizedCoordinatePtrOutputWithContext(ctx)
}

// NormalizedCoordinatePtrInput is an input type that accepts NormalizedCoordinateArgs, NormalizedCoordinatePtr and NormalizedCoordinatePtrOutput values.
// You can construct a concrete instance of `NormalizedCoordinatePtrInput` via:
//
//	        NormalizedCoordinateArgs{...}
//
//	or:
//
//	        nil
type NormalizedCoordinatePtrInput interface {
	pulumi.Input

	ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput
	ToNormalizedCoordinatePtrOutputWithContext(context.Context) NormalizedCoordinatePtrOutput
}

type normalizedCoordinatePtrType NormalizedCoordinateArgs

func NormalizedCoordinatePtr(v *NormalizedCoordinateArgs) NormalizedCoordinatePtrInput {
	return (*normalizedCoordinatePtrType)(v)
}

func (*normalizedCoordinatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NormalizedCoordinate)(nil)).Elem()
}

func (i *normalizedCoordinatePtrType) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return i.ToNormalizedCoordinatePtrOutputWithContext(context.Background())
}

func (i *normalizedCoordinatePtrType) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NormalizedCoordinatePtrOutput)
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateOutput struct{ *pulumi.OutputState }

func (NormalizedCoordinateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NormalizedCoordinate)(nil)).Elem()
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinateOutput() NormalizedCoordinateOutput {
	return o
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinateOutputWithContext(ctx context.Context) NormalizedCoordinateOutput {
	return o
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return o.ToNormalizedCoordinatePtrOutputWithContext(context.Background())
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NormalizedCoordinate) *NormalizedCoordinate {
		return &v
	}).(NormalizedCoordinatePtrOutput)
}

// Normalized x coordinate.
func (o NormalizedCoordinateOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NormalizedCoordinate) *float64 { return v.X }).(pulumi.Float64PtrOutput)
}

// Normalized y coordinate.
func (o NormalizedCoordinateOutput) Y() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NormalizedCoordinate) *float64 { return v.Y }).(pulumi.Float64PtrOutput)
}

type NormalizedCoordinatePtrOutput struct{ *pulumi.OutputState }

func (NormalizedCoordinatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NormalizedCoordinate)(nil)).Elem()
}

func (o NormalizedCoordinatePtrOutput) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return o
}

func (o NormalizedCoordinatePtrOutput) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return o
}

func (o NormalizedCoordinatePtrOutput) Elem() NormalizedCoordinateOutput {
	return o.ApplyT(func(v *NormalizedCoordinate) NormalizedCoordinate {
		if v != nil {
			return *v
		}
		var ret NormalizedCoordinate
		return ret
	}).(NormalizedCoordinateOutput)
}

// Normalized x coordinate.
func (o NormalizedCoordinatePtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NormalizedCoordinate) *float64 {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.Float64PtrOutput)
}

// Normalized y coordinate.
func (o NormalizedCoordinatePtrOutput) Y() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NormalizedCoordinate) *float64 {
		if v == nil {
			return nil
		}
		return v.Y
	}).(pulumi.Float64PtrOutput)
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateResponse struct {
	// Normalized x coordinate.
	X float64 `pulumi:"x"`
	// Normalized y coordinate.
	Y float64 `pulumi:"y"`
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateResponseOutput struct{ *pulumi.OutputState }

func (NormalizedCoordinateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NormalizedCoordinateResponse)(nil)).Elem()
}

func (o NormalizedCoordinateResponseOutput) ToNormalizedCoordinateResponseOutput() NormalizedCoordinateResponseOutput {
	return o
}

func (o NormalizedCoordinateResponseOutput) ToNormalizedCoordinateResponseOutputWithContext(ctx context.Context) NormalizedCoordinateResponseOutput {
	return o
}

// Normalized x coordinate.
func (o NormalizedCoordinateResponseOutput) X() pulumi.Float64Output {
	return o.ApplyT(func(v NormalizedCoordinateResponse) float64 { return v.X }).(pulumi.Float64Output)
}

// Normalized y coordinate.
func (o NormalizedCoordinateResponseOutput) Y() pulumi.Float64Output {
	return o.ApplyT(func(v NormalizedCoordinateResponse) float64 { return v.Y }).(pulumi.Float64Output)
}

// Location of output file(s) in a Cloud Storage bucket.
type Output struct {
	// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	Uri *string `pulumi:"uri"`
}

// OutputInput is an input type that accepts OutputArgs and OutputOutput values.
// You can construct a concrete instance of `OutputInput` via:
//
//	OutputArgs{...}
type OutputInput interface {
	pulumi.Input

	ToOutputOutput() OutputOutput
	ToOutputOutputWithContext(context.Context) OutputOutput
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputArgs struct {
	// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Output)(nil)).Elem()
}

func (i OutputArgs) ToOutputOutput() OutputOutput {
	return i.ToOutputOutputWithContext(context.Background())
}

func (i OutputArgs) ToOutputOutputWithContext(ctx context.Context) OutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputOutput)
}

func (i OutputArgs) ToOutputPtrOutput() OutputPtrOutput {
	return i.ToOutputPtrOutputWithContext(context.Background())
}

func (i OutputArgs) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputOutput).ToOutputPtrOutputWithContext(ctx)
}

// OutputPtrInput is an input type that accepts OutputArgs, OutputPtr and OutputPtrOutput values.
// You can construct a concrete instance of `OutputPtrInput` via:
//
//	        OutputArgs{...}
//
//	or:
//
//	        nil
type OutputPtrInput interface {
	pulumi.Input

	ToOutputPtrOutput() OutputPtrOutput
	ToOutputPtrOutputWithContext(context.Context) OutputPtrOutput
}

type outputPtrType OutputArgs

func OutputPtr(v *OutputArgs) OutputPtrInput {
	return (*outputPtrType)(v)
}

func (*outputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Output)(nil)).Elem()
}

func (i *outputPtrType) ToOutputPtrOutput() OutputPtrOutput {
	return i.ToOutputPtrOutputWithContext(context.Background())
}

func (i *outputPtrType) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPtrOutput)
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputOutput struct{ *pulumi.OutputState }

func (OutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Output)(nil)).Elem()
}

func (o OutputOutput) ToOutputOutput() OutputOutput {
	return o
}

func (o OutputOutput) ToOutputOutputWithContext(ctx context.Context) OutputOutput {
	return o
}

func (o OutputOutput) ToOutputPtrOutput() OutputPtrOutput {
	return o.ToOutputPtrOutputWithContext(context.Background())
}

func (o OutputOutput) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Output) *Output {
		return &v
	}).(OutputPtrOutput)
}

// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
func (o OutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Output) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type OutputPtrOutput struct{ *pulumi.OutputState }

func (OutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Output)(nil)).Elem()
}

func (o OutputPtrOutput) ToOutputPtrOutput() OutputPtrOutput {
	return o
}

func (o OutputPtrOutput) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return o
}

func (o OutputPtrOutput) Elem() OutputOutput {
	return o.ApplyT(func(v *Output) Output {
		if v != nil {
			return *v
		}
		var ret Output
		return ret
	}).(OutputOutput)
}

// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
func (o OutputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Output) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputResponse struct {
	// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
	Uri string `pulumi:"uri"`
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputResponseOutput struct{ *pulumi.OutputState }

func (OutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputResponse)(nil)).Elem()
}

func (o OutputResponseOutput) ToOutputResponseOutput() OutputResponseOutput {
	return o
}

func (o OutputResponseOutput) ToOutputResponseOutputWithContext(ctx context.Context) OutputResponseOutput {
	return o
}

// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
func (o OutputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Overlay configuration.
type Overlay struct {
	// List of animations. The list should be chronological, without any time overlap.
	Animations []Animation `pulumi:"animations"`
	// Image overlay.
	Image *Image `pulumi:"image"`
}

// OverlayInput is an input type that accepts OverlayArgs and OverlayOutput values.
// You can construct a concrete instance of `OverlayInput` via:
//
//	OverlayArgs{...}
type OverlayInput interface {
	pulumi.Input

	ToOverlayOutput() OverlayOutput
	ToOverlayOutputWithContext(context.Context) OverlayOutput
}

// Overlay configuration.
type OverlayArgs struct {
	// List of animations. The list should be chronological, without any time overlap.
	Animations AnimationArrayInput `pulumi:"animations"`
	// Image overlay.
	Image ImagePtrInput `pulumi:"image"`
}

func (OverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Overlay)(nil)).Elem()
}

func (i OverlayArgs) ToOverlayOutput() OverlayOutput {
	return i.ToOverlayOutputWithContext(context.Background())
}

func (i OverlayArgs) ToOverlayOutputWithContext(ctx context.Context) OverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverlayOutput)
}

// OverlayArrayInput is an input type that accepts OverlayArray and OverlayArrayOutput values.
// You can construct a concrete instance of `OverlayArrayInput` via:
//
//	OverlayArray{ OverlayArgs{...} }
type OverlayArrayInput interface {
	pulumi.Input

	ToOverlayArrayOutput() OverlayArrayOutput
	ToOverlayArrayOutputWithContext(context.Context) OverlayArrayOutput
}

type OverlayArray []OverlayInput

func (OverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Overlay)(nil)).Elem()
}

func (i OverlayArray) ToOverlayArrayOutput() OverlayArrayOutput {
	return i.ToOverlayArrayOutputWithContext(context.Background())
}

func (i OverlayArray) ToOverlayArrayOutputWithContext(ctx context.Context) OverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverlayArrayOutput)
}

// Overlay configuration.
type OverlayOutput struct{ *pulumi.OutputState }

func (OverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Overlay)(nil)).Elem()
}

func (o OverlayOutput) ToOverlayOutput() OverlayOutput {
	return o
}

func (o OverlayOutput) ToOverlayOutputWithContext(ctx context.Context) OverlayOutput {
	return o
}

// List of animations. The list should be chronological, without any time overlap.
func (o OverlayOutput) Animations() AnimationArrayOutput {
	return o.ApplyT(func(v Overlay) []Animation { return v.Animations }).(AnimationArrayOutput)
}

// Image overlay.
func (o OverlayOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v Overlay) *Image { return v.Image }).(ImagePtrOutput)
}

type OverlayArrayOutput struct{ *pulumi.OutputState }

func (OverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Overlay)(nil)).Elem()
}

func (o OverlayArrayOutput) ToOverlayArrayOutput() OverlayArrayOutput {
	return o
}

func (o OverlayArrayOutput) ToOverlayArrayOutputWithContext(ctx context.Context) OverlayArrayOutput {
	return o
}

func (o OverlayArrayOutput) Index(i pulumi.IntInput) OverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Overlay {
		return vs[0].([]Overlay)[vs[1].(int)]
	}).(OverlayOutput)
}

// Overlay configuration.
type OverlayResponse struct {
	// List of animations. The list should be chronological, without any time overlap.
	Animations []AnimationResponse `pulumi:"animations"`
	// Image overlay.
	Image ImageResponse `pulumi:"image"`
}

// Overlay configuration.
type OverlayResponseOutput struct{ *pulumi.OutputState }

func (OverlayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OverlayResponse)(nil)).Elem()
}

func (o OverlayResponseOutput) ToOverlayResponseOutput() OverlayResponseOutput {
	return o
}

func (o OverlayResponseOutput) ToOverlayResponseOutputWithContext(ctx context.Context) OverlayResponseOutput {
	return o
}

// List of animations. The list should be chronological, without any time overlap.
func (o OverlayResponseOutput) Animations() AnimationResponseArrayOutput {
	return o.ApplyT(func(v OverlayResponse) []AnimationResponse { return v.Animations }).(AnimationResponseArrayOutput)
}

// Image overlay.
func (o OverlayResponseOutput) Image() ImageResponseOutput {
	return o.ApplyT(func(v OverlayResponse) ImageResponse { return v.Image }).(ImageResponseOutput)
}

type OverlayResponseArrayOutput struct{ *pulumi.OutputState }

func (OverlayResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OverlayResponse)(nil)).Elem()
}

func (o OverlayResponseArrayOutput) ToOverlayResponseArrayOutput() OverlayResponseArrayOutput {
	return o
}

func (o OverlayResponseArrayOutput) ToOverlayResponseArrayOutputWithContext(ctx context.Context) OverlayResponseArrayOutput {
	return o
}

func (o OverlayResponseArrayOutput) Index(i pulumi.IntInput) OverlayResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OverlayResponse {
		return vs[0].([]OverlayResponse)[vs[1].(int)]
	}).(OverlayResponseOutput)
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type Pad struct {
	// The number of pixels to add to the bottom. The default is 0.
	BottomPixels *int `pulumi:"bottomPixels"`
	// The number of pixels to add to the left. The default is 0.
	LeftPixels *int `pulumi:"leftPixels"`
	// The number of pixels to add to the right. The default is 0.
	RightPixels *int `pulumi:"rightPixels"`
	// The number of pixels to add to the top. The default is 0.
	TopPixels *int `pulumi:"topPixels"`
}

// PadInput is an input type that accepts PadArgs and PadOutput values.
// You can construct a concrete instance of `PadInput` via:
//
//	PadArgs{...}
type PadInput interface {
	pulumi.Input

	ToPadOutput() PadOutput
	ToPadOutputWithContext(context.Context) PadOutput
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadArgs struct {
	// The number of pixels to add to the bottom. The default is 0.
	BottomPixels pulumi.IntPtrInput `pulumi:"bottomPixels"`
	// The number of pixels to add to the left. The default is 0.
	LeftPixels pulumi.IntPtrInput `pulumi:"leftPixels"`
	// The number of pixels to add to the right. The default is 0.
	RightPixels pulumi.IntPtrInput `pulumi:"rightPixels"`
	// The number of pixels to add to the top. The default is 0.
	TopPixels pulumi.IntPtrInput `pulumi:"topPixels"`
}

func (PadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pad)(nil)).Elem()
}

func (i PadArgs) ToPadOutput() PadOutput {
	return i.ToPadOutputWithContext(context.Background())
}

func (i PadArgs) ToPadOutputWithContext(ctx context.Context) PadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PadOutput)
}

func (i PadArgs) ToPadPtrOutput() PadPtrOutput {
	return i.ToPadPtrOutputWithContext(context.Background())
}

func (i PadArgs) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PadOutput).ToPadPtrOutputWithContext(ctx)
}

// PadPtrInput is an input type that accepts PadArgs, PadPtr and PadPtrOutput values.
// You can construct a concrete instance of `PadPtrInput` via:
//
//	        PadArgs{...}
//
//	or:
//
//	        nil
type PadPtrInput interface {
	pulumi.Input

	ToPadPtrOutput() PadPtrOutput
	ToPadPtrOutputWithContext(context.Context) PadPtrOutput
}

type padPtrType PadArgs

func PadPtr(v *PadArgs) PadPtrInput {
	return (*padPtrType)(v)
}

func (*padPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Pad)(nil)).Elem()
}

func (i *padPtrType) ToPadPtrOutput() PadPtrOutput {
	return i.ToPadPtrOutputWithContext(context.Background())
}

func (i *padPtrType) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PadPtrOutput)
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadOutput struct{ *pulumi.OutputState }

func (PadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pad)(nil)).Elem()
}

func (o PadOutput) ToPadOutput() PadOutput {
	return o
}

func (o PadOutput) ToPadOutputWithContext(ctx context.Context) PadOutput {
	return o
}

func (o PadOutput) ToPadPtrOutput() PadPtrOutput {
	return o.ToPadPtrOutputWithContext(context.Background())
}

func (o PadOutput) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Pad) *Pad {
		return &v
	}).(PadPtrOutput)
}

// The number of pixels to add to the bottom. The default is 0.
func (o PadOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.BottomPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the left. The default is 0.
func (o PadOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.LeftPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the right. The default is 0.
func (o PadOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.RightPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the top. The default is 0.
func (o PadOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.TopPixels }).(pulumi.IntPtrOutput)
}

type PadPtrOutput struct{ *pulumi.OutputState }

func (PadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pad)(nil)).Elem()
}

func (o PadPtrOutput) ToPadPtrOutput() PadPtrOutput {
	return o
}

func (o PadPtrOutput) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return o
}

func (o PadPtrOutput) Elem() PadOutput {
	return o.ApplyT(func(v *Pad) Pad {
		if v != nil {
			return *v
		}
		var ret Pad
		return ret
	}).(PadOutput)
}

// The number of pixels to add to the bottom. The default is 0.
func (o PadPtrOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.BottomPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the left. The default is 0.
func (o PadPtrOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.LeftPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the right. The default is 0.
func (o PadPtrOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.RightPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the top. The default is 0.
func (o PadPtrOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.TopPixels
	}).(pulumi.IntPtrOutput)
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadResponse struct {
	// The number of pixels to add to the bottom. The default is 0.
	BottomPixels int `pulumi:"bottomPixels"`
	// The number of pixels to add to the left. The default is 0.
	LeftPixels int `pulumi:"leftPixels"`
	// The number of pixels to add to the right. The default is 0.
	RightPixels int `pulumi:"rightPixels"`
	// The number of pixels to add to the top. The default is 0.
	TopPixels int `pulumi:"topPixels"`
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadResponseOutput struct{ *pulumi.OutputState }

func (PadResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PadResponse)(nil)).Elem()
}

func (o PadResponseOutput) ToPadResponseOutput() PadResponseOutput {
	return o
}

func (o PadResponseOutput) ToPadResponseOutputWithContext(ctx context.Context) PadResponseOutput {
	return o
}

// The number of pixels to add to the bottom. The default is 0.
func (o PadResponseOutput) BottomPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.BottomPixels }).(pulumi.IntOutput)
}

// The number of pixels to add to the left. The default is 0.
func (o PadResponseOutput) LeftPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.LeftPixels }).(pulumi.IntOutput)
}

// The number of pixels to add to the right. The default is 0.
func (o PadResponseOutput) RightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.RightPixels }).(pulumi.IntOutput)
}

// The number of pixels to add to the top. The default is 0.
func (o PadResponseOutput) TopPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.TopPixels }).(pulumi.IntOutput)
}

// Playready configuration.
type Playready struct {
}

// PlayreadyInput is an input type that accepts PlayreadyArgs and PlayreadyOutput values.
// You can construct a concrete instance of `PlayreadyInput` via:
//
//	PlayreadyArgs{...}
type PlayreadyInput interface {
	pulumi.Input

	ToPlayreadyOutput() PlayreadyOutput
	ToPlayreadyOutputWithContext(context.Context) PlayreadyOutput
}

// Playready configuration.
type PlayreadyArgs struct {
}

func (PlayreadyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Playready)(nil)).Elem()
}

func (i PlayreadyArgs) ToPlayreadyOutput() PlayreadyOutput {
	return i.ToPlayreadyOutputWithContext(context.Background())
}

func (i PlayreadyArgs) ToPlayreadyOutputWithContext(ctx context.Context) PlayreadyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlayreadyOutput)
}

func (i PlayreadyArgs) ToPlayreadyPtrOutput() PlayreadyPtrOutput {
	return i.ToPlayreadyPtrOutputWithContext(context.Background())
}

func (i PlayreadyArgs) ToPlayreadyPtrOutputWithContext(ctx context.Context) PlayreadyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlayreadyOutput).ToPlayreadyPtrOutputWithContext(ctx)
}

// PlayreadyPtrInput is an input type that accepts PlayreadyArgs, PlayreadyPtr and PlayreadyPtrOutput values.
// You can construct a concrete instance of `PlayreadyPtrInput` via:
//
//	        PlayreadyArgs{...}
//
//	or:
//
//	        nil
type PlayreadyPtrInput interface {
	pulumi.Input

	ToPlayreadyPtrOutput() PlayreadyPtrOutput
	ToPlayreadyPtrOutputWithContext(context.Context) PlayreadyPtrOutput
}

type playreadyPtrType PlayreadyArgs

func PlayreadyPtr(v *PlayreadyArgs) PlayreadyPtrInput {
	return (*playreadyPtrType)(v)
}

func (*playreadyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Playready)(nil)).Elem()
}

func (i *playreadyPtrType) ToPlayreadyPtrOutput() PlayreadyPtrOutput {
	return i.ToPlayreadyPtrOutputWithContext(context.Background())
}

func (i *playreadyPtrType) ToPlayreadyPtrOutputWithContext(ctx context.Context) PlayreadyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlayreadyPtrOutput)
}

// Playready configuration.
type PlayreadyOutput struct{ *pulumi.OutputState }

func (PlayreadyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Playready)(nil)).Elem()
}

func (o PlayreadyOutput) ToPlayreadyOutput() PlayreadyOutput {
	return o
}

func (o PlayreadyOutput) ToPlayreadyOutputWithContext(ctx context.Context) PlayreadyOutput {
	return o
}

func (o PlayreadyOutput) ToPlayreadyPtrOutput() PlayreadyPtrOutput {
	return o.ToPlayreadyPtrOutputWithContext(context.Background())
}

func (o PlayreadyOutput) ToPlayreadyPtrOutputWithContext(ctx context.Context) PlayreadyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Playready) *Playready {
		return &v
	}).(PlayreadyPtrOutput)
}

type PlayreadyPtrOutput struct{ *pulumi.OutputState }

func (PlayreadyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Playready)(nil)).Elem()
}

func (o PlayreadyPtrOutput) ToPlayreadyPtrOutput() PlayreadyPtrOutput {
	return o
}

func (o PlayreadyPtrOutput) ToPlayreadyPtrOutputWithContext(ctx context.Context) PlayreadyPtrOutput {
	return o
}

func (o PlayreadyPtrOutput) Elem() PlayreadyOutput {
	return o.ApplyT(func(v *Playready) Playready {
		if v != nil {
			return *v
		}
		var ret Playready
		return ret
	}).(PlayreadyOutput)
}

// Playready configuration.
type PlayreadyResponse struct {
}

// Playready configuration.
type PlayreadyResponseOutput struct{ *pulumi.OutputState }

func (PlayreadyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlayreadyResponse)(nil)).Elem()
}

func (o PlayreadyResponseOutput) ToPlayreadyResponseOutput() PlayreadyResponseOutput {
	return o
}

func (o PlayreadyResponseOutput) ToPlayreadyResponseOutputWithContext(ctx context.Context) PlayreadyResponseOutput {
	return o
}

// Preprocessing configurations.
type PreprocessingConfig struct {
	// Audio preprocessing configuration.
	Audio *Audio `pulumi:"audio"`
	// Color preprocessing configuration.
	Color *Color `pulumi:"color"`
	// Specify the video cropping configuration.
	Crop *Crop `pulumi:"crop"`
	// Deblock preprocessing configuration.
	Deblock *Deblock `pulumi:"deblock"`
	// Specify the video deinterlace configuration.
	Deinterlace *Deinterlace `pulumi:"deinterlace"`
	// Denoise preprocessing configuration.
	Denoise *Denoise `pulumi:"denoise"`
	// Specify the video pad filter configuration.
	Pad *Pad `pulumi:"pad"`
}

// PreprocessingConfigInput is an input type that accepts PreprocessingConfigArgs and PreprocessingConfigOutput values.
// You can construct a concrete instance of `PreprocessingConfigInput` via:
//
//	PreprocessingConfigArgs{...}
type PreprocessingConfigInput interface {
	pulumi.Input

	ToPreprocessingConfigOutput() PreprocessingConfigOutput
	ToPreprocessingConfigOutputWithContext(context.Context) PreprocessingConfigOutput
}

// Preprocessing configurations.
type PreprocessingConfigArgs struct {
	// Audio preprocessing configuration.
	Audio AudioPtrInput `pulumi:"audio"`
	// Color preprocessing configuration.
	Color ColorPtrInput `pulumi:"color"`
	// Specify the video cropping configuration.
	Crop CropPtrInput `pulumi:"crop"`
	// Deblock preprocessing configuration.
	Deblock DeblockPtrInput `pulumi:"deblock"`
	// Specify the video deinterlace configuration.
	Deinterlace DeinterlacePtrInput `pulumi:"deinterlace"`
	// Denoise preprocessing configuration.
	Denoise DenoisePtrInput `pulumi:"denoise"`
	// Specify the video pad filter configuration.
	Pad PadPtrInput `pulumi:"pad"`
}

func (PreprocessingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreprocessingConfig)(nil)).Elem()
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigOutput() PreprocessingConfigOutput {
	return i.ToPreprocessingConfigOutputWithContext(context.Background())
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigOutputWithContext(ctx context.Context) PreprocessingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreprocessingConfigOutput)
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return i.ToPreprocessingConfigPtrOutputWithContext(context.Background())
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreprocessingConfigOutput).ToPreprocessingConfigPtrOutputWithContext(ctx)
}

// PreprocessingConfigPtrInput is an input type that accepts PreprocessingConfigArgs, PreprocessingConfigPtr and PreprocessingConfigPtrOutput values.
// You can construct a concrete instance of `PreprocessingConfigPtrInput` via:
//
//	        PreprocessingConfigArgs{...}
//
//	or:
//
//	        nil
type PreprocessingConfigPtrInput interface {
	pulumi.Input

	ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput
	ToPreprocessingConfigPtrOutputWithContext(context.Context) PreprocessingConfigPtrOutput
}

type preprocessingConfigPtrType PreprocessingConfigArgs

func PreprocessingConfigPtr(v *PreprocessingConfigArgs) PreprocessingConfigPtrInput {
	return (*preprocessingConfigPtrType)(v)
}

func (*preprocessingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreprocessingConfig)(nil)).Elem()
}

func (i *preprocessingConfigPtrType) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return i.ToPreprocessingConfigPtrOutputWithContext(context.Background())
}

func (i *preprocessingConfigPtrType) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreprocessingConfigPtrOutput)
}

// Preprocessing configurations.
type PreprocessingConfigOutput struct{ *pulumi.OutputState }

func (PreprocessingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreprocessingConfig)(nil)).Elem()
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigOutput() PreprocessingConfigOutput {
	return o
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigOutputWithContext(ctx context.Context) PreprocessingConfigOutput {
	return o
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return o.ToPreprocessingConfigPtrOutputWithContext(context.Background())
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PreprocessingConfig) *PreprocessingConfig {
		return &v
	}).(PreprocessingConfigPtrOutput)
}

// Audio preprocessing configuration.
func (o PreprocessingConfigOutput) Audio() AudioPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Audio { return v.Audio }).(AudioPtrOutput)
}

// Color preprocessing configuration.
func (o PreprocessingConfigOutput) Color() ColorPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Color { return v.Color }).(ColorPtrOutput)
}

// Specify the video cropping configuration.
func (o PreprocessingConfigOutput) Crop() CropPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Crop { return v.Crop }).(CropPtrOutput)
}

// Deblock preprocessing configuration.
func (o PreprocessingConfigOutput) Deblock() DeblockPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Deblock { return v.Deblock }).(DeblockPtrOutput)
}

// Specify the video deinterlace configuration.
func (o PreprocessingConfigOutput) Deinterlace() DeinterlacePtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Deinterlace { return v.Deinterlace }).(DeinterlacePtrOutput)
}

// Denoise preprocessing configuration.
func (o PreprocessingConfigOutput) Denoise() DenoisePtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Denoise { return v.Denoise }).(DenoisePtrOutput)
}

// Specify the video pad filter configuration.
func (o PreprocessingConfigOutput) Pad() PadPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Pad { return v.Pad }).(PadPtrOutput)
}

type PreprocessingConfigPtrOutput struct{ *pulumi.OutputState }

func (PreprocessingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreprocessingConfig)(nil)).Elem()
}

func (o PreprocessingConfigPtrOutput) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return o
}

func (o PreprocessingConfigPtrOutput) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return o
}

func (o PreprocessingConfigPtrOutput) Elem() PreprocessingConfigOutput {
	return o.ApplyT(func(v *PreprocessingConfig) PreprocessingConfig {
		if v != nil {
			return *v
		}
		var ret PreprocessingConfig
		return ret
	}).(PreprocessingConfigOutput)
}

// Audio preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Audio() AudioPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Audio {
		if v == nil {
			return nil
		}
		return v.Audio
	}).(AudioPtrOutput)
}

// Color preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Color() ColorPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Color {
		if v == nil {
			return nil
		}
		return v.Color
	}).(ColorPtrOutput)
}

// Specify the video cropping configuration.
func (o PreprocessingConfigPtrOutput) Crop() CropPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Crop {
		if v == nil {
			return nil
		}
		return v.Crop
	}).(CropPtrOutput)
}

// Deblock preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Deblock() DeblockPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Deblock {
		if v == nil {
			return nil
		}
		return v.Deblock
	}).(DeblockPtrOutput)
}

// Specify the video deinterlace configuration.
func (o PreprocessingConfigPtrOutput) Deinterlace() DeinterlacePtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Deinterlace {
		if v == nil {
			return nil
		}
		return v.Deinterlace
	}).(DeinterlacePtrOutput)
}

// Denoise preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Denoise() DenoisePtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Denoise {
		if v == nil {
			return nil
		}
		return v.Denoise
	}).(DenoisePtrOutput)
}

// Specify the video pad filter configuration.
func (o PreprocessingConfigPtrOutput) Pad() PadPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Pad {
		if v == nil {
			return nil
		}
		return v.Pad
	}).(PadPtrOutput)
}

// Preprocessing configurations.
type PreprocessingConfigResponse struct {
	// Audio preprocessing configuration.
	Audio AudioResponse `pulumi:"audio"`
	// Color preprocessing configuration.
	Color ColorResponse `pulumi:"color"`
	// Specify the video cropping configuration.
	Crop CropResponse `pulumi:"crop"`
	// Deblock preprocessing configuration.
	Deblock DeblockResponse `pulumi:"deblock"`
	// Specify the video deinterlace configuration.
	Deinterlace DeinterlaceResponse `pulumi:"deinterlace"`
	// Denoise preprocessing configuration.
	Denoise DenoiseResponse `pulumi:"denoise"`
	// Specify the video pad filter configuration.
	Pad PadResponse `pulumi:"pad"`
}

// Preprocessing configurations.
type PreprocessingConfigResponseOutput struct{ *pulumi.OutputState }

func (PreprocessingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreprocessingConfigResponse)(nil)).Elem()
}

func (o PreprocessingConfigResponseOutput) ToPreprocessingConfigResponseOutput() PreprocessingConfigResponseOutput {
	return o
}

func (o PreprocessingConfigResponseOutput) ToPreprocessingConfigResponseOutputWithContext(ctx context.Context) PreprocessingConfigResponseOutput {
	return o
}

// Audio preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Audio() AudioResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) AudioResponse { return v.Audio }).(AudioResponseOutput)
}

// Color preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Color() ColorResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) ColorResponse { return v.Color }).(ColorResponseOutput)
}

// Specify the video cropping configuration.
func (o PreprocessingConfigResponseOutput) Crop() CropResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) CropResponse { return v.Crop }).(CropResponseOutput)
}

// Deblock preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Deblock() DeblockResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) DeblockResponse { return v.Deblock }).(DeblockResponseOutput)
}

// Specify the video deinterlace configuration.
func (o PreprocessingConfigResponseOutput) Deinterlace() DeinterlaceResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) DeinterlaceResponse { return v.Deinterlace }).(DeinterlaceResponseOutput)
}

// Denoise preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Denoise() DenoiseResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) DenoiseResponse { return v.Denoise }).(DenoiseResponseOutput)
}

// Specify the video pad filter configuration.
func (o PreprocessingConfigResponseOutput) Pad() PadResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) PadResponse { return v.Pad }).(PadResponseOutput)
}

// A Pub/Sub destination.
type PubsubDestination struct {
	// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
	Topic *string `pulumi:"topic"`
}

// PubsubDestinationInput is an input type that accepts PubsubDestinationArgs and PubsubDestinationOutput values.
// You can construct a concrete instance of `PubsubDestinationInput` via:
//
//	PubsubDestinationArgs{...}
type PubsubDestinationInput interface {
	pulumi.Input

	ToPubsubDestinationOutput() PubsubDestinationOutput
	ToPubsubDestinationOutputWithContext(context.Context) PubsubDestinationOutput
}

// A Pub/Sub destination.
type PubsubDestinationArgs struct {
	// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubsubDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return i.ToPubsubDestinationOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput)
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput).ToPubsubDestinationPtrOutputWithContext(ctx)
}

// PubsubDestinationPtrInput is an input type that accepts PubsubDestinationArgs, PubsubDestinationPtr and PubsubDestinationPtrOutput values.
// You can construct a concrete instance of `PubsubDestinationPtrInput` via:
//
//	        PubsubDestinationArgs{...}
//
//	or:
//
//	        nil
type PubsubDestinationPtrInput interface {
	pulumi.Input

	ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput
	ToPubsubDestinationPtrOutputWithContext(context.Context) PubsubDestinationPtrOutput
}

type pubsubDestinationPtrType PubsubDestinationArgs

func PubsubDestinationPtr(v *PubsubDestinationArgs) PubsubDestinationPtrInput {
	return (*pubsubDestinationPtrType)(v)
}

func (*pubsubDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationOutput struct{ *pulumi.OutputState }

func (PubsubDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PubsubDestination) *PubsubDestination {
		return &v
	}).(PubsubDestinationPtrOutput)
}

// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
func (o PubsubDestinationOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubsubDestination) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubsubDestinationPtrOutput struct{ *pulumi.OutputState }

func (PubsubDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) Elem() PubsubDestinationOutput {
	return o.ApplyT(func(v *PubsubDestination) PubsubDestination {
		if v != nil {
			return *v
		}
		var ret PubsubDestination
		return ret
	}).(PubsubDestinationOutput)
}

// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
func (o PubsubDestinationPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubDestination) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationResponse struct {
	// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
	Topic string `pulumi:"topic"`
}

// A Pub/Sub destination.
type PubsubDestinationResponseOutput struct{ *pulumi.OutputState }

func (PubsubDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestinationResponse)(nil)).Elem()
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput {
	return o
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutputWithContext(ctx context.Context) PubsubDestinationResponseOutput {
	return o
}

// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
func (o PubsubDestinationResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubDestinationResponse) string { return v.Topic }).(pulumi.StringOutput)
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryption struct {
}

// SampleAesEncryptionInput is an input type that accepts SampleAesEncryptionArgs and SampleAesEncryptionOutput values.
// You can construct a concrete instance of `SampleAesEncryptionInput` via:
//
//	SampleAesEncryptionArgs{...}
type SampleAesEncryptionInput interface {
	pulumi.Input

	ToSampleAesEncryptionOutput() SampleAesEncryptionOutput
	ToSampleAesEncryptionOutputWithContext(context.Context) SampleAesEncryptionOutput
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionArgs struct {
}

func (SampleAesEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleAesEncryption)(nil)).Elem()
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionOutput() SampleAesEncryptionOutput {
	return i.ToSampleAesEncryptionOutputWithContext(context.Background())
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionOutputWithContext(ctx context.Context) SampleAesEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleAesEncryptionOutput)
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return i.ToSampleAesEncryptionPtrOutputWithContext(context.Background())
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleAesEncryptionOutput).ToSampleAesEncryptionPtrOutputWithContext(ctx)
}

// SampleAesEncryptionPtrInput is an input type that accepts SampleAesEncryptionArgs, SampleAesEncryptionPtr and SampleAesEncryptionPtrOutput values.
// You can construct a concrete instance of `SampleAesEncryptionPtrInput` via:
//
//	        SampleAesEncryptionArgs{...}
//
//	or:
//
//	        nil
type SampleAesEncryptionPtrInput interface {
	pulumi.Input

	ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput
	ToSampleAesEncryptionPtrOutputWithContext(context.Context) SampleAesEncryptionPtrOutput
}

type sampleAesEncryptionPtrType SampleAesEncryptionArgs

func SampleAesEncryptionPtr(v *SampleAesEncryptionArgs) SampleAesEncryptionPtrInput {
	return (*sampleAesEncryptionPtrType)(v)
}

func (*sampleAesEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SampleAesEncryption)(nil)).Elem()
}

func (i *sampleAesEncryptionPtrType) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return i.ToSampleAesEncryptionPtrOutputWithContext(context.Background())
}

func (i *sampleAesEncryptionPtrType) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleAesEncryptionPtrOutput)
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionOutput struct{ *pulumi.OutputState }

func (SampleAesEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleAesEncryption)(nil)).Elem()
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionOutput() SampleAesEncryptionOutput {
	return o
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionOutputWithContext(ctx context.Context) SampleAesEncryptionOutput {
	return o
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return o.ToSampleAesEncryptionPtrOutputWithContext(context.Background())
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SampleAesEncryption) *SampleAesEncryption {
		return &v
	}).(SampleAesEncryptionPtrOutput)
}

type SampleAesEncryptionPtrOutput struct{ *pulumi.OutputState }

func (SampleAesEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SampleAesEncryption)(nil)).Elem()
}

func (o SampleAesEncryptionPtrOutput) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return o
}

func (o SampleAesEncryptionPtrOutput) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return o
}

func (o SampleAesEncryptionPtrOutput) Elem() SampleAesEncryptionOutput {
	return o.ApplyT(func(v *SampleAesEncryption) SampleAesEncryption {
		if v != nil {
			return *v
		}
		var ret SampleAesEncryption
		return ret
	}).(SampleAesEncryptionOutput)
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionResponse struct {
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionResponseOutput struct{ *pulumi.OutputState }

func (SampleAesEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleAesEncryptionResponse)(nil)).Elem()
}

func (o SampleAesEncryptionResponseOutput) ToSampleAesEncryptionResponseOutput() SampleAesEncryptionResponseOutput {
	return o
}

func (o SampleAesEncryptionResponseOutput) ToSampleAesEncryptionResponseOutputWithContext(ctx context.Context) SampleAesEncryptionResponseOutput {
	return o
}

// Configuration for secrets stored in Google Secret Manager.
type SecretManagerSource struct {
	// The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
	SecretVersion string `pulumi:"secretVersion"`
}

// SecretManagerSourceInput is an input type that accepts SecretManagerSourceArgs and SecretManagerSourceOutput values.
// You can construct a concrete instance of `SecretManagerSourceInput` via:
//
//	SecretManagerSourceArgs{...}
type SecretManagerSourceInput interface {
	pulumi.Input

	ToSecretManagerSourceOutput() SecretManagerSourceOutput
	ToSecretManagerSourceOutputWithContext(context.Context) SecretManagerSourceOutput
}

// Configuration for secrets stored in Google Secret Manager.
type SecretManagerSourceArgs struct {
	// The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
	SecretVersion pulumi.StringInput `pulumi:"secretVersion"`
}

func (SecretManagerSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSource)(nil)).Elem()
}

func (i SecretManagerSourceArgs) ToSecretManagerSourceOutput() SecretManagerSourceOutput {
	return i.ToSecretManagerSourceOutputWithContext(context.Background())
}

func (i SecretManagerSourceArgs) ToSecretManagerSourceOutputWithContext(ctx context.Context) SecretManagerSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSourceOutput)
}

func (i SecretManagerSourceArgs) ToSecretManagerSourcePtrOutput() SecretManagerSourcePtrOutput {
	return i.ToSecretManagerSourcePtrOutputWithContext(context.Background())
}

func (i SecretManagerSourceArgs) ToSecretManagerSourcePtrOutputWithContext(ctx context.Context) SecretManagerSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSourceOutput).ToSecretManagerSourcePtrOutputWithContext(ctx)
}

// SecretManagerSourcePtrInput is an input type that accepts SecretManagerSourceArgs, SecretManagerSourcePtr and SecretManagerSourcePtrOutput values.
// You can construct a concrete instance of `SecretManagerSourcePtrInput` via:
//
//	        SecretManagerSourceArgs{...}
//
//	or:
//
//	        nil
type SecretManagerSourcePtrInput interface {
	pulumi.Input

	ToSecretManagerSourcePtrOutput() SecretManagerSourcePtrOutput
	ToSecretManagerSourcePtrOutputWithContext(context.Context) SecretManagerSourcePtrOutput
}

type secretManagerSourcePtrType SecretManagerSourceArgs

func SecretManagerSourcePtr(v *SecretManagerSourceArgs) SecretManagerSourcePtrInput {
	return (*secretManagerSourcePtrType)(v)
}

func (*secretManagerSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretManagerSource)(nil)).Elem()
}

func (i *secretManagerSourcePtrType) ToSecretManagerSourcePtrOutput() SecretManagerSourcePtrOutput {
	return i.ToSecretManagerSourcePtrOutputWithContext(context.Background())
}

func (i *secretManagerSourcePtrType) ToSecretManagerSourcePtrOutputWithContext(ctx context.Context) SecretManagerSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSourcePtrOutput)
}

// Configuration for secrets stored in Google Secret Manager.
type SecretManagerSourceOutput struct{ *pulumi.OutputState }

func (SecretManagerSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSource)(nil)).Elem()
}

func (o SecretManagerSourceOutput) ToSecretManagerSourceOutput() SecretManagerSourceOutput {
	return o
}

func (o SecretManagerSourceOutput) ToSecretManagerSourceOutputWithContext(ctx context.Context) SecretManagerSourceOutput {
	return o
}

func (o SecretManagerSourceOutput) ToSecretManagerSourcePtrOutput() SecretManagerSourcePtrOutput {
	return o.ToSecretManagerSourcePtrOutputWithContext(context.Background())
}

func (o SecretManagerSourceOutput) ToSecretManagerSourcePtrOutputWithContext(ctx context.Context) SecretManagerSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecretManagerSource) *SecretManagerSource {
		return &v
	}).(SecretManagerSourcePtrOutput)
}

// The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
func (o SecretManagerSourceOutput) SecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SecretManagerSource) string { return v.SecretVersion }).(pulumi.StringOutput)
}

type SecretManagerSourcePtrOutput struct{ *pulumi.OutputState }

func (SecretManagerSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecretManagerSource)(nil)).Elem()
}

func (o SecretManagerSourcePtrOutput) ToSecretManagerSourcePtrOutput() SecretManagerSourcePtrOutput {
	return o
}

func (o SecretManagerSourcePtrOutput) ToSecretManagerSourcePtrOutputWithContext(ctx context.Context) SecretManagerSourcePtrOutput {
	return o
}

func (o SecretManagerSourcePtrOutput) Elem() SecretManagerSourceOutput {
	return o.ApplyT(func(v *SecretManagerSource) SecretManagerSource {
		if v != nil {
			return *v
		}
		var ret SecretManagerSource
		return ret
	}).(SecretManagerSourceOutput)
}

// The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
func (o SecretManagerSourcePtrOutput) SecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecretManagerSource) *string {
		if v == nil {
			return nil
		}
		return &v.SecretVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration for secrets stored in Google Secret Manager.
type SecretManagerSourceResponse struct {
	// The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
	SecretVersion string `pulumi:"secretVersion"`
}

// Configuration for secrets stored in Google Secret Manager.
type SecretManagerSourceResponseOutput struct{ *pulumi.OutputState }

func (SecretManagerSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSourceResponse)(nil)).Elem()
}

func (o SecretManagerSourceResponseOutput) ToSecretManagerSourceResponseOutput() SecretManagerSourceResponseOutput {
	return o
}

func (o SecretManagerSourceResponseOutput) ToSecretManagerSourceResponseOutputWithContext(ctx context.Context) SecretManagerSourceResponseOutput {
	return o
}

// The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like "latest" are not supported.
func (o SecretManagerSourceResponseOutput) SecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SecretManagerSourceResponse) string { return v.SecretVersion }).(pulumi.StringOutput)
}

// Segment settings for `ts`, `fmp4` and `vtt`.
type SegmentSettings struct {
	// Create an individual segment file. The default is `false`.
	IndividualSegments bool `pulumi:"individualSegments"`
	// Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
	SegmentDuration *string `pulumi:"segmentDuration"`
}

// SegmentSettingsInput is an input type that accepts SegmentSettingsArgs and SegmentSettingsOutput values.
// You can construct a concrete instance of `SegmentSettingsInput` via:
//
//	SegmentSettingsArgs{...}
type SegmentSettingsInput interface {
	pulumi.Input

	ToSegmentSettingsOutput() SegmentSettingsOutput
	ToSegmentSettingsOutputWithContext(context.Context) SegmentSettingsOutput
}

// Segment settings for `ts`, `fmp4` and `vtt`.
type SegmentSettingsArgs struct {
	// Create an individual segment file. The default is `false`.
	IndividualSegments pulumi.BoolInput `pulumi:"individualSegments"`
	// Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
	SegmentDuration pulumi.StringPtrInput `pulumi:"segmentDuration"`
}

func (SegmentSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSettings)(nil)).Elem()
}

func (i SegmentSettingsArgs) ToSegmentSettingsOutput() SegmentSettingsOutput {
	return i.ToSegmentSettingsOutputWithContext(context.Background())
}

func (i SegmentSettingsArgs) ToSegmentSettingsOutputWithContext(ctx context.Context) SegmentSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSettingsOutput)
}

func (i SegmentSettingsArgs) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return i.ToSegmentSettingsPtrOutputWithContext(context.Background())
}

func (i SegmentSettingsArgs) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSettingsOutput).ToSegmentSettingsPtrOutputWithContext(ctx)
}

// SegmentSettingsPtrInput is an input type that accepts SegmentSettingsArgs, SegmentSettingsPtr and SegmentSettingsPtrOutput values.
// You can construct a concrete instance of `SegmentSettingsPtrInput` via:
//
//	        SegmentSettingsArgs{...}
//
//	or:
//
//	        nil
type SegmentSettingsPtrInput interface {
	pulumi.Input

	ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput
	ToSegmentSettingsPtrOutputWithContext(context.Context) SegmentSettingsPtrOutput
}

type segmentSettingsPtrType SegmentSettingsArgs

func SegmentSettingsPtr(v *SegmentSettingsArgs) SegmentSettingsPtrInput {
	return (*segmentSettingsPtrType)(v)
}

func (*segmentSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentSettings)(nil)).Elem()
}

func (i *segmentSettingsPtrType) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return i.ToSegmentSettingsPtrOutputWithContext(context.Background())
}

func (i *segmentSettingsPtrType) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSettingsPtrOutput)
}

// Segment settings for `ts`, `fmp4` and `vtt`.
type SegmentSettingsOutput struct{ *pulumi.OutputState }

func (SegmentSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSettings)(nil)).Elem()
}

func (o SegmentSettingsOutput) ToSegmentSettingsOutput() SegmentSettingsOutput {
	return o
}

func (o SegmentSettingsOutput) ToSegmentSettingsOutputWithContext(ctx context.Context) SegmentSettingsOutput {
	return o
}

func (o SegmentSettingsOutput) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return o.ToSegmentSettingsPtrOutputWithContext(context.Background())
}

func (o SegmentSettingsOutput) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentSettings) *SegmentSettings {
		return &v
	}).(SegmentSettingsPtrOutput)
}

// Create an individual segment file. The default is `false`.
func (o SegmentSettingsOutput) IndividualSegments() pulumi.BoolOutput {
	return o.ApplyT(func(v SegmentSettings) bool { return v.IndividualSegments }).(pulumi.BoolOutput)
}

// Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
func (o SegmentSettingsOutput) SegmentDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSettings) *string { return v.SegmentDuration }).(pulumi.StringPtrOutput)
}

type SegmentSettingsPtrOutput struct{ *pulumi.OutputState }

func (SegmentSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentSettings)(nil)).Elem()
}

func (o SegmentSettingsPtrOutput) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return o
}

func (o SegmentSettingsPtrOutput) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return o
}

func (o SegmentSettingsPtrOutput) Elem() SegmentSettingsOutput {
	return o.ApplyT(func(v *SegmentSettings) SegmentSettings {
		if v != nil {
			return *v
		}
		var ret SegmentSettings
		return ret
	}).(SegmentSettingsOutput)
}

// Create an individual segment file. The default is `false`.
func (o SegmentSettingsPtrOutput) IndividualSegments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SegmentSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.IndividualSegments
	}).(pulumi.BoolPtrOutput)
}

// Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
func (o SegmentSettingsPtrOutput) SegmentDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSettings) *string {
		if v == nil {
			return nil
		}
		return v.SegmentDuration
	}).(pulumi.StringPtrOutput)
}

// Segment settings for `ts`, `fmp4` and `vtt`.
type SegmentSettingsResponse struct {
	// Create an individual segment file. The default is `false`.
	IndividualSegments bool `pulumi:"individualSegments"`
	// Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
	SegmentDuration string `pulumi:"segmentDuration"`
}

// Segment settings for `ts`, `fmp4` and `vtt`.
type SegmentSettingsResponseOutput struct{ *pulumi.OutputState }

func (SegmentSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSettingsResponse)(nil)).Elem()
}

func (o SegmentSettingsResponseOutput) ToSegmentSettingsResponseOutput() SegmentSettingsResponseOutput {
	return o
}

func (o SegmentSettingsResponseOutput) ToSegmentSettingsResponseOutputWithContext(ctx context.Context) SegmentSettingsResponseOutput {
	return o
}

// Create an individual segment file. The default is `false`.
func (o SegmentSettingsResponseOutput) IndividualSegments() pulumi.BoolOutput {
	return o.ApplyT(func(v SegmentSettingsResponse) bool { return v.IndividualSegments }).(pulumi.BoolOutput)
}

// Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
func (o SegmentSettingsResponseOutput) SegmentDuration() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentSettingsResponse) string { return v.SegmentDuration }).(pulumi.StringOutput)
}

// Sprite sheet configuration.
type SpriteSheet struct {
	// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
	ColumnCount *int `pulumi:"columnCount"`
	// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
	EndTimeOffset *string `pulumi:"endTimeOffset"`
	// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
	FilePrefix string `pulumi:"filePrefix"`
	// Format type. The default is `jpeg`. Supported formats: - `jpeg`
	Format *string `pulumi:"format"`
	// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
	Interval *string `pulumi:"interval"`
	// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
	Quality *int `pulumi:"quality"`
	// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
	RowCount *int `pulumi:"rowCount"`
	// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	SpriteHeightPixels int `pulumi:"spriteHeightPixels"`
	// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	SpriteWidthPixels int `pulumi:"spriteWidthPixels"`
	// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
	StartTimeOffset *string `pulumi:"startTimeOffset"`
	// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
	TotalCount *int `pulumi:"totalCount"`
}

// SpriteSheetInput is an input type that accepts SpriteSheetArgs and SpriteSheetOutput values.
// You can construct a concrete instance of `SpriteSheetInput` via:
//
//	SpriteSheetArgs{...}
type SpriteSheetInput interface {
	pulumi.Input

	ToSpriteSheetOutput() SpriteSheetOutput
	ToSpriteSheetOutputWithContext(context.Context) SpriteSheetOutput
}

// Sprite sheet configuration.
type SpriteSheetArgs struct {
	// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
	ColumnCount pulumi.IntPtrInput `pulumi:"columnCount"`
	// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
	EndTimeOffset pulumi.StringPtrInput `pulumi:"endTimeOffset"`
	// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
	FilePrefix pulumi.StringInput `pulumi:"filePrefix"`
	// Format type. The default is `jpeg`. Supported formats: - `jpeg`
	Format pulumi.StringPtrInput `pulumi:"format"`
	// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
	Quality pulumi.IntPtrInput `pulumi:"quality"`
	// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
	RowCount pulumi.IntPtrInput `pulumi:"rowCount"`
	// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	SpriteHeightPixels pulumi.IntInput `pulumi:"spriteHeightPixels"`
	// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	SpriteWidthPixels pulumi.IntInput `pulumi:"spriteWidthPixels"`
	// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
	// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
	TotalCount pulumi.IntPtrInput `pulumi:"totalCount"`
}

func (SpriteSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpriteSheet)(nil)).Elem()
}

func (i SpriteSheetArgs) ToSpriteSheetOutput() SpriteSheetOutput {
	return i.ToSpriteSheetOutputWithContext(context.Background())
}

func (i SpriteSheetArgs) ToSpriteSheetOutputWithContext(ctx context.Context) SpriteSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpriteSheetOutput)
}

// SpriteSheetArrayInput is an input type that accepts SpriteSheetArray and SpriteSheetArrayOutput values.
// You can construct a concrete instance of `SpriteSheetArrayInput` via:
//
//	SpriteSheetArray{ SpriteSheetArgs{...} }
type SpriteSheetArrayInput interface {
	pulumi.Input

	ToSpriteSheetArrayOutput() SpriteSheetArrayOutput
	ToSpriteSheetArrayOutputWithContext(context.Context) SpriteSheetArrayOutput
}

type SpriteSheetArray []SpriteSheetInput

func (SpriteSheetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpriteSheet)(nil)).Elem()
}

func (i SpriteSheetArray) ToSpriteSheetArrayOutput() SpriteSheetArrayOutput {
	return i.ToSpriteSheetArrayOutputWithContext(context.Background())
}

func (i SpriteSheetArray) ToSpriteSheetArrayOutputWithContext(ctx context.Context) SpriteSheetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpriteSheetArrayOutput)
}

// Sprite sheet configuration.
type SpriteSheetOutput struct{ *pulumi.OutputState }

func (SpriteSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpriteSheet)(nil)).Elem()
}

func (o SpriteSheetOutput) ToSpriteSheetOutput() SpriteSheetOutput {
	return o
}

func (o SpriteSheetOutput) ToSpriteSheetOutputWithContext(ctx context.Context) SpriteSheetOutput {
	return o
}

// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
func (o SpriteSheetOutput) ColumnCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.ColumnCount }).(pulumi.IntPtrOutput)
}

// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
func (o SpriteSheetOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.EndTimeOffset }).(pulumi.StringPtrOutput)
}

// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
func (o SpriteSheetOutput) FilePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheet) string { return v.FilePrefix }).(pulumi.StringOutput)
}

// Format type. The default is `jpeg`. Supported formats: - `jpeg`
func (o SpriteSheetOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
func (o SpriteSheetOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
func (o SpriteSheetOutput) Quality() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.Quality }).(pulumi.IntPtrOutput)
}

// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
func (o SpriteSheetOutput) RowCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.RowCount }).(pulumi.IntPtrOutput)
}

// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o SpriteSheetOutput) SpriteHeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheet) int { return v.SpriteHeightPixels }).(pulumi.IntOutput)
}

// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o SpriteSheetOutput) SpriteWidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheet) int { return v.SpriteWidthPixels }).(pulumi.IntOutput)
}

// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
func (o SpriteSheetOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
func (o SpriteSheetOutput) TotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.TotalCount }).(pulumi.IntPtrOutput)
}

type SpriteSheetArrayOutput struct{ *pulumi.OutputState }

func (SpriteSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpriteSheet)(nil)).Elem()
}

func (o SpriteSheetArrayOutput) ToSpriteSheetArrayOutput() SpriteSheetArrayOutput {
	return o
}

func (o SpriteSheetArrayOutput) ToSpriteSheetArrayOutputWithContext(ctx context.Context) SpriteSheetArrayOutput {
	return o
}

func (o SpriteSheetArrayOutput) Index(i pulumi.IntInput) SpriteSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpriteSheet {
		return vs[0].([]SpriteSheet)[vs[1].(int)]
	}).(SpriteSheetOutput)
}

// Sprite sheet configuration.
type SpriteSheetResponse struct {
	// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
	ColumnCount int `pulumi:"columnCount"`
	// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
	EndTimeOffset string `pulumi:"endTimeOffset"`
	// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
	FilePrefix string `pulumi:"filePrefix"`
	// Format type. The default is `jpeg`. Supported formats: - `jpeg`
	Format string `pulumi:"format"`
	// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
	Interval string `pulumi:"interval"`
	// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
	Quality int `pulumi:"quality"`
	// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
	RowCount int `pulumi:"rowCount"`
	// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	SpriteHeightPixels int `pulumi:"spriteHeightPixels"`
	// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	SpriteWidthPixels int `pulumi:"spriteWidthPixels"`
	// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
	StartTimeOffset string `pulumi:"startTimeOffset"`
	// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
	TotalCount int `pulumi:"totalCount"`
}

// Sprite sheet configuration.
type SpriteSheetResponseOutput struct{ *pulumi.OutputState }

func (SpriteSheetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpriteSheetResponse)(nil)).Elem()
}

func (o SpriteSheetResponseOutput) ToSpriteSheetResponseOutput() SpriteSheetResponseOutput {
	return o
}

func (o SpriteSheetResponseOutput) ToSpriteSheetResponseOutputWithContext(ctx context.Context) SpriteSheetResponseOutput {
	return o
}

// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
func (o SpriteSheetResponseOutput) ColumnCount() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.ColumnCount }).(pulumi.IntOutput)
}

// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
func (o SpriteSheetResponseOutput) EndTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.EndTimeOffset }).(pulumi.StringOutput)
}

// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
func (o SpriteSheetResponseOutput) FilePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.FilePrefix }).(pulumi.StringOutput)
}

// Format type. The default is `jpeg`. Supported formats: - `jpeg`
func (o SpriteSheetResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.Format }).(pulumi.StringOutput)
}

// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
func (o SpriteSheetResponseOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.Interval }).(pulumi.StringOutput)
}

// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
func (o SpriteSheetResponseOutput) Quality() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.Quality }).(pulumi.IntOutput)
}

// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
func (o SpriteSheetResponseOutput) RowCount() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.RowCount }).(pulumi.IntOutput)
}

// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o SpriteSheetResponseOutput) SpriteHeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.SpriteHeightPixels }).(pulumi.IntOutput)
}

// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o SpriteSheetResponseOutput) SpriteWidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.SpriteWidthPixels }).(pulumi.IntOutput)
}

// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
func (o SpriteSheetResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
func (o SpriteSheetResponseOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.TotalCount }).(pulumi.IntOutput)
}

type SpriteSheetResponseArrayOutput struct{ *pulumi.OutputState }

func (SpriteSheetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpriteSheetResponse)(nil)).Elem()
}

func (o SpriteSheetResponseArrayOutput) ToSpriteSheetResponseArrayOutput() SpriteSheetResponseArrayOutput {
	return o
}

func (o SpriteSheetResponseArrayOutput) ToSpriteSheetResponseArrayOutputWithContext(ctx context.Context) SpriteSheetResponseArrayOutput {
	return o
}

func (o SpriteSheetResponseArrayOutput) Index(i pulumi.IntInput) SpriteSheetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpriteSheetResponse {
		return vs[0].([]SpriteSheetResponse)[vs[1].(int)]
	}).(SpriteSheetResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
type TextMapping struct {
	// The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
	AtomKey string `pulumi:"atomKey"`
	// The Input.key that identifies the input file.
	InputKey string `pulumi:"inputKey"`
	// The zero-based index of the track in the input file.
	InputTrack int `pulumi:"inputTrack"`
}

// TextMappingInput is an input type that accepts TextMappingArgs and TextMappingOutput values.
// You can construct a concrete instance of `TextMappingInput` via:
//
//	TextMappingArgs{...}
type TextMappingInput interface {
	pulumi.Input

	ToTextMappingOutput() TextMappingOutput
	ToTextMappingOutputWithContext(context.Context) TextMappingOutput
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
type TextMappingArgs struct {
	// The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
	AtomKey pulumi.StringInput `pulumi:"atomKey"`
	// The Input.key that identifies the input file.
	InputKey pulumi.StringInput `pulumi:"inputKey"`
	// The zero-based index of the track in the input file.
	InputTrack pulumi.IntInput `pulumi:"inputTrack"`
}

func (TextMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextMapping)(nil)).Elem()
}

func (i TextMappingArgs) ToTextMappingOutput() TextMappingOutput {
	return i.ToTextMappingOutputWithContext(context.Background())
}

func (i TextMappingArgs) ToTextMappingOutputWithContext(ctx context.Context) TextMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextMappingOutput)
}

// TextMappingArrayInput is an input type that accepts TextMappingArray and TextMappingArrayOutput values.
// You can construct a concrete instance of `TextMappingArrayInput` via:
//
//	TextMappingArray{ TextMappingArgs{...} }
type TextMappingArrayInput interface {
	pulumi.Input

	ToTextMappingArrayOutput() TextMappingArrayOutput
	ToTextMappingArrayOutputWithContext(context.Context) TextMappingArrayOutput
}

type TextMappingArray []TextMappingInput

func (TextMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextMapping)(nil)).Elem()
}

func (i TextMappingArray) ToTextMappingArrayOutput() TextMappingArrayOutput {
	return i.ToTextMappingArrayOutputWithContext(context.Background())
}

func (i TextMappingArray) ToTextMappingArrayOutputWithContext(ctx context.Context) TextMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextMappingArrayOutput)
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
type TextMappingOutput struct{ *pulumi.OutputState }

func (TextMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextMapping)(nil)).Elem()
}

func (o TextMappingOutput) ToTextMappingOutput() TextMappingOutput {
	return o
}

func (o TextMappingOutput) ToTextMappingOutputWithContext(ctx context.Context) TextMappingOutput {
	return o
}

// The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
func (o TextMappingOutput) AtomKey() pulumi.StringOutput {
	return o.ApplyT(func(v TextMapping) string { return v.AtomKey }).(pulumi.StringOutput)
}

// The Input.key that identifies the input file.
func (o TextMappingOutput) InputKey() pulumi.StringOutput {
	return o.ApplyT(func(v TextMapping) string { return v.InputKey }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o TextMappingOutput) InputTrack() pulumi.IntOutput {
	return o.ApplyT(func(v TextMapping) int { return v.InputTrack }).(pulumi.IntOutput)
}

type TextMappingArrayOutput struct{ *pulumi.OutputState }

func (TextMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextMapping)(nil)).Elem()
}

func (o TextMappingArrayOutput) ToTextMappingArrayOutput() TextMappingArrayOutput {
	return o
}

func (o TextMappingArrayOutput) ToTextMappingArrayOutputWithContext(ctx context.Context) TextMappingArrayOutput {
	return o
}

func (o TextMappingArrayOutput) Index(i pulumi.IntInput) TextMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TextMapping {
		return vs[0].([]TextMapping)[vs[1].(int)]
	}).(TextMappingOutput)
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
type TextMappingResponse struct {
	// The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
	AtomKey string `pulumi:"atomKey"`
	// The Input.key that identifies the input file.
	InputKey string `pulumi:"inputKey"`
	// The zero-based index of the track in the input file.
	InputTrack int `pulumi:"inputTrack"`
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
type TextMappingResponseOutput struct{ *pulumi.OutputState }

func (TextMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextMappingResponse)(nil)).Elem()
}

func (o TextMappingResponseOutput) ToTextMappingResponseOutput() TextMappingResponseOutput {
	return o
}

func (o TextMappingResponseOutput) ToTextMappingResponseOutputWithContext(ctx context.Context) TextMappingResponseOutput {
	return o
}

// The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.
func (o TextMappingResponseOutput) AtomKey() pulumi.StringOutput {
	return o.ApplyT(func(v TextMappingResponse) string { return v.AtomKey }).(pulumi.StringOutput)
}

// The Input.key that identifies the input file.
func (o TextMappingResponseOutput) InputKey() pulumi.StringOutput {
	return o.ApplyT(func(v TextMappingResponse) string { return v.InputKey }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o TextMappingResponseOutput) InputTrack() pulumi.IntOutput {
	return o.ApplyT(func(v TextMappingResponse) int { return v.InputTrack }).(pulumi.IntOutput)
}

type TextMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (TextMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextMappingResponse)(nil)).Elem()
}

func (o TextMappingResponseArrayOutput) ToTextMappingResponseArrayOutput() TextMappingResponseArrayOutput {
	return o
}

func (o TextMappingResponseArrayOutput) ToTextMappingResponseArrayOutputWithContext(ctx context.Context) TextMappingResponseArrayOutput {
	return o
}

func (o TextMappingResponseArrayOutput) Index(i pulumi.IntInput) TextMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TextMappingResponse {
		return vs[0].([]TextMappingResponse)[vs[1].(int)]
	}).(TextMappingResponseOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStream struct {
	// The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
	Codec *string `pulumi:"codec"`
	// The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
	DisplayName *string `pulumi:"displayName"`
	// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
	LanguageCode *string `pulumi:"languageCode"`
	// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
	Mapping []TextMapping `pulumi:"mapping"`
}

// TextStreamInput is an input type that accepts TextStreamArgs and TextStreamOutput values.
// You can construct a concrete instance of `TextStreamInput` via:
//
//	TextStreamArgs{...}
type TextStreamInput interface {
	pulumi.Input

	ToTextStreamOutput() TextStreamOutput
	ToTextStreamOutputWithContext(context.Context) TextStreamOutput
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamArgs struct {
	// The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
	LanguageCode pulumi.StringPtrInput `pulumi:"languageCode"`
	// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
	Mapping TextMappingArrayInput `pulumi:"mapping"`
}

func (TextStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextStream)(nil)).Elem()
}

func (i TextStreamArgs) ToTextStreamOutput() TextStreamOutput {
	return i.ToTextStreamOutputWithContext(context.Background())
}

func (i TextStreamArgs) ToTextStreamOutputWithContext(ctx context.Context) TextStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextStreamOutput)
}

func (i TextStreamArgs) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return i.ToTextStreamPtrOutputWithContext(context.Background())
}

func (i TextStreamArgs) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextStreamOutput).ToTextStreamPtrOutputWithContext(ctx)
}

// TextStreamPtrInput is an input type that accepts TextStreamArgs, TextStreamPtr and TextStreamPtrOutput values.
// You can construct a concrete instance of `TextStreamPtrInput` via:
//
//	        TextStreamArgs{...}
//
//	or:
//
//	        nil
type TextStreamPtrInput interface {
	pulumi.Input

	ToTextStreamPtrOutput() TextStreamPtrOutput
	ToTextStreamPtrOutputWithContext(context.Context) TextStreamPtrOutput
}

type textStreamPtrType TextStreamArgs

func TextStreamPtr(v *TextStreamArgs) TextStreamPtrInput {
	return (*textStreamPtrType)(v)
}

func (*textStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TextStream)(nil)).Elem()
}

func (i *textStreamPtrType) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return i.ToTextStreamPtrOutputWithContext(context.Background())
}

func (i *textStreamPtrType) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextStreamPtrOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamOutput struct{ *pulumi.OutputState }

func (TextStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextStream)(nil)).Elem()
}

func (o TextStreamOutput) ToTextStreamOutput() TextStreamOutput {
	return o
}

func (o TextStreamOutput) ToTextStreamOutputWithContext(ctx context.Context) TextStreamOutput {
	return o
}

func (o TextStreamOutput) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return o.ToTextStreamPtrOutputWithContext(context.Background())
}

func (o TextStreamOutput) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TextStream) *TextStream {
		return &v
	}).(TextStreamPtrOutput)
}

// The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
func (o TextStreamOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextStream) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
func (o TextStreamOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextStream) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
func (o TextStreamOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextStream) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
func (o TextStreamOutput) Mapping() TextMappingArrayOutput {
	return o.ApplyT(func(v TextStream) []TextMapping { return v.Mapping }).(TextMappingArrayOutput)
}

type TextStreamPtrOutput struct{ *pulumi.OutputState }

func (TextStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TextStream)(nil)).Elem()
}

func (o TextStreamPtrOutput) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return o
}

func (o TextStreamPtrOutput) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return o
}

func (o TextStreamPtrOutput) Elem() TextStreamOutput {
	return o.ApplyT(func(v *TextStream) TextStream {
		if v != nil {
			return *v
		}
		var ret TextStream
		return ret
	}).(TextStreamOutput)
}

// The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
func (o TextStreamPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TextStream) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
func (o TextStreamPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TextStream) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
func (o TextStreamPtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TextStream) *string {
		if v == nil {
			return nil
		}
		return v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
func (o TextStreamPtrOutput) Mapping() TextMappingArrayOutput {
	return o.ApplyT(func(v *TextStream) []TextMapping {
		if v == nil {
			return nil
		}
		return v.Mapping
	}).(TextMappingArrayOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamResponse struct {
	// The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
	Codec string `pulumi:"codec"`
	// The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
	DisplayName string `pulumi:"displayName"`
	// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
	LanguageCode string `pulumi:"languageCode"`
	// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
	Mapping []TextMappingResponse `pulumi:"mapping"`
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamResponseOutput struct{ *pulumi.OutputState }

func (TextStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextStreamResponse)(nil)).Elem()
}

func (o TextStreamResponseOutput) ToTextStreamResponseOutput() TextStreamResponseOutput {
	return o
}

func (o TextStreamResponseOutput) ToTextStreamResponseOutputWithContext(ctx context.Context) TextStreamResponseOutput {
	return o
}

// The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`
func (o TextStreamResponseOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v TextStreamResponse) string { return v.Codec }).(pulumi.StringOutput)
}

// The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.
func (o TextStreamResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v TextStreamResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.
func (o TextStreamResponseOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v TextStreamResponse) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.
func (o TextStreamResponseOutput) Mapping() TextMappingResponseArrayOutput {
	return o.ApplyT(func(v TextStreamResponse) []TextMappingResponse { return v.Mapping }).(TextMappingResponseArrayOutput)
}

// Video stream resource.
type VideoStream struct {
	// H264 codec settings.
	H264 *H264CodecSettings `pulumi:"h264"`
	// H265 codec settings.
	H265 *H265CodecSettings `pulumi:"h265"`
	// VP9 codec settings.
	Vp9 *Vp9CodecSettings `pulumi:"vp9"`
}

// VideoStreamInput is an input type that accepts VideoStreamArgs and VideoStreamOutput values.
// You can construct a concrete instance of `VideoStreamInput` via:
//
//	VideoStreamArgs{...}
type VideoStreamInput interface {
	pulumi.Input

	ToVideoStreamOutput() VideoStreamOutput
	ToVideoStreamOutputWithContext(context.Context) VideoStreamOutput
}

// Video stream resource.
type VideoStreamArgs struct {
	// H264 codec settings.
	H264 H264CodecSettingsPtrInput `pulumi:"h264"`
	// H265 codec settings.
	H265 H265CodecSettingsPtrInput `pulumi:"h265"`
	// VP9 codec settings.
	Vp9 Vp9CodecSettingsPtrInput `pulumi:"vp9"`
}

func (VideoStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStream)(nil)).Elem()
}

func (i VideoStreamArgs) ToVideoStreamOutput() VideoStreamOutput {
	return i.ToVideoStreamOutputWithContext(context.Background())
}

func (i VideoStreamArgs) ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamOutput)
}

func (i VideoStreamArgs) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return i.ToVideoStreamPtrOutputWithContext(context.Background())
}

func (i VideoStreamArgs) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamOutput).ToVideoStreamPtrOutputWithContext(ctx)
}

// VideoStreamPtrInput is an input type that accepts VideoStreamArgs, VideoStreamPtr and VideoStreamPtrOutput values.
// You can construct a concrete instance of `VideoStreamPtrInput` via:
//
//	        VideoStreamArgs{...}
//
//	or:
//
//	        nil
type VideoStreamPtrInput interface {
	pulumi.Input

	ToVideoStreamPtrOutput() VideoStreamPtrOutput
	ToVideoStreamPtrOutputWithContext(context.Context) VideoStreamPtrOutput
}

type videoStreamPtrType VideoStreamArgs

func VideoStreamPtr(v *VideoStreamArgs) VideoStreamPtrInput {
	return (*videoStreamPtrType)(v)
}

func (*videoStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoStream)(nil)).Elem()
}

func (i *videoStreamPtrType) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return i.ToVideoStreamPtrOutputWithContext(context.Background())
}

func (i *videoStreamPtrType) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamPtrOutput)
}

// Video stream resource.
type VideoStreamOutput struct{ *pulumi.OutputState }

func (VideoStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStream)(nil)).Elem()
}

func (o VideoStreamOutput) ToVideoStreamOutput() VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return o.ToVideoStreamPtrOutputWithContext(context.Background())
}

func (o VideoStreamOutput) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VideoStream) *VideoStream {
		return &v
	}).(VideoStreamPtrOutput)
}

// H264 codec settings.
func (o VideoStreamOutput) H264() H264CodecSettingsPtrOutput {
	return o.ApplyT(func(v VideoStream) *H264CodecSettings { return v.H264 }).(H264CodecSettingsPtrOutput)
}

// H265 codec settings.
func (o VideoStreamOutput) H265() H265CodecSettingsPtrOutput {
	return o.ApplyT(func(v VideoStream) *H265CodecSettings { return v.H265 }).(H265CodecSettingsPtrOutput)
}

// VP9 codec settings.
func (o VideoStreamOutput) Vp9() Vp9CodecSettingsPtrOutput {
	return o.ApplyT(func(v VideoStream) *Vp9CodecSettings { return v.Vp9 }).(Vp9CodecSettingsPtrOutput)
}

type VideoStreamPtrOutput struct{ *pulumi.OutputState }

func (VideoStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoStream)(nil)).Elem()
}

func (o VideoStreamPtrOutput) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return o
}

func (o VideoStreamPtrOutput) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return o
}

func (o VideoStreamPtrOutput) Elem() VideoStreamOutput {
	return o.ApplyT(func(v *VideoStream) VideoStream {
		if v != nil {
			return *v
		}
		var ret VideoStream
		return ret
	}).(VideoStreamOutput)
}

// H264 codec settings.
func (o VideoStreamPtrOutput) H264() H264CodecSettingsPtrOutput {
	return o.ApplyT(func(v *VideoStream) *H264CodecSettings {
		if v == nil {
			return nil
		}
		return v.H264
	}).(H264CodecSettingsPtrOutput)
}

// H265 codec settings.
func (o VideoStreamPtrOutput) H265() H265CodecSettingsPtrOutput {
	return o.ApplyT(func(v *VideoStream) *H265CodecSettings {
		if v == nil {
			return nil
		}
		return v.H265
	}).(H265CodecSettingsPtrOutput)
}

// VP9 codec settings.
func (o VideoStreamPtrOutput) Vp9() Vp9CodecSettingsPtrOutput {
	return o.ApplyT(func(v *VideoStream) *Vp9CodecSettings {
		if v == nil {
			return nil
		}
		return v.Vp9
	}).(Vp9CodecSettingsPtrOutput)
}

// Video stream resource.
type VideoStreamResponse struct {
	// H264 codec settings.
	H264 H264CodecSettingsResponse `pulumi:"h264"`
	// H265 codec settings.
	H265 H265CodecSettingsResponse `pulumi:"h265"`
	// VP9 codec settings.
	Vp9 Vp9CodecSettingsResponse `pulumi:"vp9"`
}

// Video stream resource.
type VideoStreamResponseOutput struct{ *pulumi.OutputState }

func (VideoStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStreamResponse)(nil)).Elem()
}

func (o VideoStreamResponseOutput) ToVideoStreamResponseOutput() VideoStreamResponseOutput {
	return o
}

func (o VideoStreamResponseOutput) ToVideoStreamResponseOutputWithContext(ctx context.Context) VideoStreamResponseOutput {
	return o
}

// H264 codec settings.
func (o VideoStreamResponseOutput) H264() H264CodecSettingsResponseOutput {
	return o.ApplyT(func(v VideoStreamResponse) H264CodecSettingsResponse { return v.H264 }).(H264CodecSettingsResponseOutput)
}

// H265 codec settings.
func (o VideoStreamResponseOutput) H265() H265CodecSettingsResponseOutput {
	return o.ApplyT(func(v VideoStreamResponse) H265CodecSettingsResponse { return v.H265 }).(H265CodecSettingsResponseOutput)
}

// VP9 codec settings.
func (o VideoStreamResponseOutput) Vp9() Vp9CodecSettingsResponseOutput {
	return o.ApplyT(func(v VideoStreamResponse) Vp9CodecSettingsResponse { return v.Vp9 }).(Vp9CodecSettingsResponseOutput)
}

// VP9 codec settings.
type Vp9CodecSettings struct {
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
	CrfLevel *int `pulumi:"crfLevel"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration *string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount *int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels *int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat *string `pulumi:"pixelFormat"`
	// Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
	Profile *string `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
	RateControlMode *string `pulumi:"rateControlMode"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels *int `pulumi:"widthPixels"`
}

// Vp9CodecSettingsInput is an input type that accepts Vp9CodecSettingsArgs and Vp9CodecSettingsOutput values.
// You can construct a concrete instance of `Vp9CodecSettingsInput` via:
//
//	Vp9CodecSettingsArgs{...}
type Vp9CodecSettingsInput interface {
	pulumi.Input

	ToVp9CodecSettingsOutput() Vp9CodecSettingsOutput
	ToVp9CodecSettingsOutputWithContext(context.Context) Vp9CodecSettingsOutput
}

// VP9 codec settings.
type Vp9CodecSettingsArgs struct {
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
	CrfLevel pulumi.IntPtrInput `pulumi:"crfLevel"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate pulumi.Float64Input `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration pulumi.StringPtrInput `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount pulumi.IntPtrInput `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels pulumi.IntPtrInput `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat pulumi.StringPtrInput `pulumi:"pixelFormat"`
	// Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
	RateControlMode pulumi.StringPtrInput `pulumi:"rateControlMode"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels pulumi.IntPtrInput `pulumi:"widthPixels"`
}

func (Vp9CodecSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Vp9CodecSettings)(nil)).Elem()
}

func (i Vp9CodecSettingsArgs) ToVp9CodecSettingsOutput() Vp9CodecSettingsOutput {
	return i.ToVp9CodecSettingsOutputWithContext(context.Background())
}

func (i Vp9CodecSettingsArgs) ToVp9CodecSettingsOutputWithContext(ctx context.Context) Vp9CodecSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vp9CodecSettingsOutput)
}

func (i Vp9CodecSettingsArgs) ToVp9CodecSettingsPtrOutput() Vp9CodecSettingsPtrOutput {
	return i.ToVp9CodecSettingsPtrOutputWithContext(context.Background())
}

func (i Vp9CodecSettingsArgs) ToVp9CodecSettingsPtrOutputWithContext(ctx context.Context) Vp9CodecSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vp9CodecSettingsOutput).ToVp9CodecSettingsPtrOutputWithContext(ctx)
}

// Vp9CodecSettingsPtrInput is an input type that accepts Vp9CodecSettingsArgs, Vp9CodecSettingsPtr and Vp9CodecSettingsPtrOutput values.
// You can construct a concrete instance of `Vp9CodecSettingsPtrInput` via:
//
//	        Vp9CodecSettingsArgs{...}
//
//	or:
//
//	        nil
type Vp9CodecSettingsPtrInput interface {
	pulumi.Input

	ToVp9CodecSettingsPtrOutput() Vp9CodecSettingsPtrOutput
	ToVp9CodecSettingsPtrOutputWithContext(context.Context) Vp9CodecSettingsPtrOutput
}

type vp9CodecSettingsPtrType Vp9CodecSettingsArgs

func Vp9CodecSettingsPtr(v *Vp9CodecSettingsArgs) Vp9CodecSettingsPtrInput {
	return (*vp9CodecSettingsPtrType)(v)
}

func (*vp9CodecSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Vp9CodecSettings)(nil)).Elem()
}

func (i *vp9CodecSettingsPtrType) ToVp9CodecSettingsPtrOutput() Vp9CodecSettingsPtrOutput {
	return i.ToVp9CodecSettingsPtrOutputWithContext(context.Background())
}

func (i *vp9CodecSettingsPtrType) ToVp9CodecSettingsPtrOutputWithContext(ctx context.Context) Vp9CodecSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Vp9CodecSettingsPtrOutput)
}

// VP9 codec settings.
type Vp9CodecSettingsOutput struct{ *pulumi.OutputState }

func (Vp9CodecSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vp9CodecSettings)(nil)).Elem()
}

func (o Vp9CodecSettingsOutput) ToVp9CodecSettingsOutput() Vp9CodecSettingsOutput {
	return o
}

func (o Vp9CodecSettingsOutput) ToVp9CodecSettingsOutputWithContext(ctx context.Context) Vp9CodecSettingsOutput {
	return o
}

func (o Vp9CodecSettingsOutput) ToVp9CodecSettingsPtrOutput() Vp9CodecSettingsPtrOutput {
	return o.ToVp9CodecSettingsPtrOutputWithContext(context.Background())
}

func (o Vp9CodecSettingsOutput) ToVp9CodecSettingsPtrOutputWithContext(ctx context.Context) Vp9CodecSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Vp9CodecSettings) *Vp9CodecSettings {
		return &v
	}).(Vp9CodecSettingsPtrOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
func (o Vp9CodecSettingsOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v Vp9CodecSettings) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
func (o Vp9CodecSettingsOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *int { return v.CrfLevel }).(pulumi.IntPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o Vp9CodecSettingsOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v Vp9CodecSettings) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o Vp9CodecSettingsOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *string { return v.GopDuration }).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o Vp9CodecSettingsOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *int { return v.GopFrameCount }).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o Vp9CodecSettingsOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *int { return v.HeightPixels }).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o Vp9CodecSettingsOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *string { return v.PixelFormat }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
func (o Vp9CodecSettingsOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
func (o Vp9CodecSettingsOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *string { return v.RateControlMode }).(pulumi.StringPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o Vp9CodecSettingsOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Vp9CodecSettings) *int { return v.WidthPixels }).(pulumi.IntPtrOutput)
}

type Vp9CodecSettingsPtrOutput struct{ *pulumi.OutputState }

func (Vp9CodecSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vp9CodecSettings)(nil)).Elem()
}

func (o Vp9CodecSettingsPtrOutput) ToVp9CodecSettingsPtrOutput() Vp9CodecSettingsPtrOutput {
	return o
}

func (o Vp9CodecSettingsPtrOutput) ToVp9CodecSettingsPtrOutputWithContext(ctx context.Context) Vp9CodecSettingsPtrOutput {
	return o
}

func (o Vp9CodecSettingsPtrOutput) Elem() Vp9CodecSettingsOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) Vp9CodecSettings {
		if v != nil {
			return *v
		}
		var ret Vp9CodecSettings
		return ret
	}).(Vp9CodecSettingsOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
func (o Vp9CodecSettingsPtrOutput) BitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *int {
		if v == nil {
			return nil
		}
		return &v.BitrateBps
	}).(pulumi.IntPtrOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
func (o Vp9CodecSettingsPtrOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.CrfLevel
	}).(pulumi.IntPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o Vp9CodecSettingsPtrOutput) FrameRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *float64 {
		if v == nil {
			return nil
		}
		return &v.FrameRate
	}).(pulumi.Float64PtrOutput)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o Vp9CodecSettingsPtrOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.GopDuration
	}).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o Vp9CodecSettingsPtrOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.GopFrameCount
	}).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o Vp9CodecSettingsPtrOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.HeightPixels
	}).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o Vp9CodecSettingsPtrOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.PixelFormat
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
func (o Vp9CodecSettingsPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
func (o Vp9CodecSettingsPtrOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *string {
		if v == nil {
			return nil
		}
		return v.RateControlMode
	}).(pulumi.StringPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o Vp9CodecSettingsPtrOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vp9CodecSettings) *int {
		if v == nil {
			return nil
		}
		return v.WidthPixels
	}).(pulumi.IntPtrOutput)
}

// VP9 codec settings.
type Vp9CodecSettingsResponse struct {
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
	CrfLevel int `pulumi:"crfLevel"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	HeightPixels int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
	PixelFormat string `pulumi:"pixelFormat"`
	// Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
	Profile string `pulumi:"profile"`
	// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
	RateControlMode string `pulumi:"rateControlMode"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
	WidthPixels int `pulumi:"widthPixels"`
}

// VP9 codec settings.
type Vp9CodecSettingsResponseOutput struct{ *pulumi.OutputState }

func (Vp9CodecSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Vp9CodecSettingsResponse)(nil)).Elem()
}

func (o Vp9CodecSettingsResponseOutput) ToVp9CodecSettingsResponseOutput() Vp9CodecSettingsResponseOutput {
	return o
}

func (o Vp9CodecSettingsResponseOutput) ToVp9CodecSettingsResponseOutputWithContext(ctx context.Context) Vp9CodecSettingsResponseOutput {
	return o
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.
func (o Vp9CodecSettingsResponseOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.
func (o Vp9CodecSettingsResponseOutput) CrfLevel() pulumi.IntOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) int { return v.CrfLevel }).(pulumi.IntOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o Vp9CodecSettingsResponseOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o Vp9CodecSettingsResponseOutput) GopDuration() pulumi.StringOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) string { return v.GopDuration }).(pulumi.StringOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o Vp9CodecSettingsResponseOutput) GopFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) int { return v.GopFrameCount }).(pulumi.IntOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o Vp9CodecSettingsResponseOutput) HeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) int { return v.HeightPixels }).(pulumi.IntOutput)
}

// Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
func (o Vp9CodecSettingsResponseOutput) PixelFormat() pulumi.StringOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) string { return v.PixelFormat }).(pulumi.StringOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.
func (o Vp9CodecSettingsResponseOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) string { return v.Profile }).(pulumi.StringOutput)
}

// Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate
func (o Vp9CodecSettingsResponseOutput) RateControlMode() pulumi.StringOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) string { return v.RateControlMode }).(pulumi.StringOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
func (o Vp9CodecSettingsResponseOutput) WidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v Vp9CodecSettingsResponse) int { return v.WidthPixels }).(pulumi.IntOutput)
}

// Widevine configuration.
type Widevine struct {
}

// WidevineInput is an input type that accepts WidevineArgs and WidevineOutput values.
// You can construct a concrete instance of `WidevineInput` via:
//
//	WidevineArgs{...}
type WidevineInput interface {
	pulumi.Input

	ToWidevineOutput() WidevineOutput
	ToWidevineOutputWithContext(context.Context) WidevineOutput
}

// Widevine configuration.
type WidevineArgs struct {
}

func (WidevineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Widevine)(nil)).Elem()
}

func (i WidevineArgs) ToWidevineOutput() WidevineOutput {
	return i.ToWidevineOutputWithContext(context.Background())
}

func (i WidevineArgs) ToWidevineOutputWithContext(ctx context.Context) WidevineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidevineOutput)
}

func (i WidevineArgs) ToWidevinePtrOutput() WidevinePtrOutput {
	return i.ToWidevinePtrOutputWithContext(context.Background())
}

func (i WidevineArgs) ToWidevinePtrOutputWithContext(ctx context.Context) WidevinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidevineOutput).ToWidevinePtrOutputWithContext(ctx)
}

// WidevinePtrInput is an input type that accepts WidevineArgs, WidevinePtr and WidevinePtrOutput values.
// You can construct a concrete instance of `WidevinePtrInput` via:
//
//	        WidevineArgs{...}
//
//	or:
//
//	        nil
type WidevinePtrInput interface {
	pulumi.Input

	ToWidevinePtrOutput() WidevinePtrOutput
	ToWidevinePtrOutputWithContext(context.Context) WidevinePtrOutput
}

type widevinePtrType WidevineArgs

func WidevinePtr(v *WidevineArgs) WidevinePtrInput {
	return (*widevinePtrType)(v)
}

func (*widevinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Widevine)(nil)).Elem()
}

func (i *widevinePtrType) ToWidevinePtrOutput() WidevinePtrOutput {
	return i.ToWidevinePtrOutputWithContext(context.Background())
}

func (i *widevinePtrType) ToWidevinePtrOutputWithContext(ctx context.Context) WidevinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WidevinePtrOutput)
}

// Widevine configuration.
type WidevineOutput struct{ *pulumi.OutputState }

func (WidevineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Widevine)(nil)).Elem()
}

func (o WidevineOutput) ToWidevineOutput() WidevineOutput {
	return o
}

func (o WidevineOutput) ToWidevineOutputWithContext(ctx context.Context) WidevineOutput {
	return o
}

func (o WidevineOutput) ToWidevinePtrOutput() WidevinePtrOutput {
	return o.ToWidevinePtrOutputWithContext(context.Background())
}

func (o WidevineOutput) ToWidevinePtrOutputWithContext(ctx context.Context) WidevinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Widevine) *Widevine {
		return &v
	}).(WidevinePtrOutput)
}

type WidevinePtrOutput struct{ *pulumi.OutputState }

func (WidevinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Widevine)(nil)).Elem()
}

func (o WidevinePtrOutput) ToWidevinePtrOutput() WidevinePtrOutput {
	return o
}

func (o WidevinePtrOutput) ToWidevinePtrOutputWithContext(ctx context.Context) WidevinePtrOutput {
	return o
}

func (o WidevinePtrOutput) Elem() WidevineOutput {
	return o.ApplyT(func(v *Widevine) Widevine {
		if v != nil {
			return *v
		}
		var ret Widevine
		return ret
	}).(WidevineOutput)
}

// Widevine configuration.
type WidevineResponse struct {
}

// Widevine configuration.
type WidevineResponseOutput struct{ *pulumi.OutputState }

func (WidevineResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WidevineResponse)(nil)).Elem()
}

func (o WidevineResponseOutput) ToWidevineResponseOutput() WidevineResponseOutput {
	return o
}

func (o WidevineResponseOutput) ToWidevineResponseOutputWithContext(ctx context.Context) WidevineResponseOutput {
	return o
}

// Yet Another Deinterlacing Filter Configuration.
type YadifConfig struct {
	// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
	DeinterlaceAllFrames *bool `pulumi:"deinterlaceAllFrames"`
	// Disable spacial interlacing. The default is `false`.
	DisableSpatialInterlacing *bool `pulumi:"disableSpatialInterlacing"`
	// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
	Mode *string `pulumi:"mode"`
	// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
	Parity *string `pulumi:"parity"`
}

// YadifConfigInput is an input type that accepts YadifConfigArgs and YadifConfigOutput values.
// You can construct a concrete instance of `YadifConfigInput` via:
//
//	YadifConfigArgs{...}
type YadifConfigInput interface {
	pulumi.Input

	ToYadifConfigOutput() YadifConfigOutput
	ToYadifConfigOutputWithContext(context.Context) YadifConfigOutput
}

// Yet Another Deinterlacing Filter Configuration.
type YadifConfigArgs struct {
	// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
	DeinterlaceAllFrames pulumi.BoolPtrInput `pulumi:"deinterlaceAllFrames"`
	// Disable spacial interlacing. The default is `false`.
	DisableSpatialInterlacing pulumi.BoolPtrInput `pulumi:"disableSpatialInterlacing"`
	// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
	Parity pulumi.StringPtrInput `pulumi:"parity"`
}

func (YadifConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*YadifConfig)(nil)).Elem()
}

func (i YadifConfigArgs) ToYadifConfigOutput() YadifConfigOutput {
	return i.ToYadifConfigOutputWithContext(context.Background())
}

func (i YadifConfigArgs) ToYadifConfigOutputWithContext(ctx context.Context) YadifConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YadifConfigOutput)
}

func (i YadifConfigArgs) ToYadifConfigPtrOutput() YadifConfigPtrOutput {
	return i.ToYadifConfigPtrOutputWithContext(context.Background())
}

func (i YadifConfigArgs) ToYadifConfigPtrOutputWithContext(ctx context.Context) YadifConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YadifConfigOutput).ToYadifConfigPtrOutputWithContext(ctx)
}

// YadifConfigPtrInput is an input type that accepts YadifConfigArgs, YadifConfigPtr and YadifConfigPtrOutput values.
// You can construct a concrete instance of `YadifConfigPtrInput` via:
//
//	        YadifConfigArgs{...}
//
//	or:
//
//	        nil
type YadifConfigPtrInput interface {
	pulumi.Input

	ToYadifConfigPtrOutput() YadifConfigPtrOutput
	ToYadifConfigPtrOutputWithContext(context.Context) YadifConfigPtrOutput
}

type yadifConfigPtrType YadifConfigArgs

func YadifConfigPtr(v *YadifConfigArgs) YadifConfigPtrInput {
	return (*yadifConfigPtrType)(v)
}

func (*yadifConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**YadifConfig)(nil)).Elem()
}

func (i *yadifConfigPtrType) ToYadifConfigPtrOutput() YadifConfigPtrOutput {
	return i.ToYadifConfigPtrOutputWithContext(context.Background())
}

func (i *yadifConfigPtrType) ToYadifConfigPtrOutputWithContext(ctx context.Context) YadifConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YadifConfigPtrOutput)
}

// Yet Another Deinterlacing Filter Configuration.
type YadifConfigOutput struct{ *pulumi.OutputState }

func (YadifConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YadifConfig)(nil)).Elem()
}

func (o YadifConfigOutput) ToYadifConfigOutput() YadifConfigOutput {
	return o
}

func (o YadifConfigOutput) ToYadifConfigOutputWithContext(ctx context.Context) YadifConfigOutput {
	return o
}

func (o YadifConfigOutput) ToYadifConfigPtrOutput() YadifConfigPtrOutput {
	return o.ToYadifConfigPtrOutputWithContext(context.Background())
}

func (o YadifConfigOutput) ToYadifConfigPtrOutputWithContext(ctx context.Context) YadifConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v YadifConfig) *YadifConfig {
		return &v
	}).(YadifConfigPtrOutput)
}

// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
func (o YadifConfigOutput) DeinterlaceAllFrames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YadifConfig) *bool { return v.DeinterlaceAllFrames }).(pulumi.BoolPtrOutput)
}

// Disable spacial interlacing. The default is `false`.
func (o YadifConfigOutput) DisableSpatialInterlacing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v YadifConfig) *bool { return v.DisableSpatialInterlacing }).(pulumi.BoolPtrOutput)
}

// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
func (o YadifConfigOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v YadifConfig) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
func (o YadifConfigOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v YadifConfig) *string { return v.Parity }).(pulumi.StringPtrOutput)
}

type YadifConfigPtrOutput struct{ *pulumi.OutputState }

func (YadifConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YadifConfig)(nil)).Elem()
}

func (o YadifConfigPtrOutput) ToYadifConfigPtrOutput() YadifConfigPtrOutput {
	return o
}

func (o YadifConfigPtrOutput) ToYadifConfigPtrOutputWithContext(ctx context.Context) YadifConfigPtrOutput {
	return o
}

func (o YadifConfigPtrOutput) Elem() YadifConfigOutput {
	return o.ApplyT(func(v *YadifConfig) YadifConfig {
		if v != nil {
			return *v
		}
		var ret YadifConfig
		return ret
	}).(YadifConfigOutput)
}

// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
func (o YadifConfigPtrOutput) DeinterlaceAllFrames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YadifConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DeinterlaceAllFrames
	}).(pulumi.BoolPtrOutput)
}

// Disable spacial interlacing. The default is `false`.
func (o YadifConfigPtrOutput) DisableSpatialInterlacing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *YadifConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DisableSpatialInterlacing
	}).(pulumi.BoolPtrOutput)
}

// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
func (o YadifConfigPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YadifConfig) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
func (o YadifConfigPtrOutput) Parity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YadifConfig) *string {
		if v == nil {
			return nil
		}
		return v.Parity
	}).(pulumi.StringPtrOutput)
}

// Yet Another Deinterlacing Filter Configuration.
type YadifConfigResponse struct {
	// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
	DeinterlaceAllFrames bool `pulumi:"deinterlaceAllFrames"`
	// Disable spacial interlacing. The default is `false`.
	DisableSpatialInterlacing bool `pulumi:"disableSpatialInterlacing"`
	// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
	Mode string `pulumi:"mode"`
	// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
	Parity string `pulumi:"parity"`
}

// Yet Another Deinterlacing Filter Configuration.
type YadifConfigResponseOutput struct{ *pulumi.OutputState }

func (YadifConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*YadifConfigResponse)(nil)).Elem()
}

func (o YadifConfigResponseOutput) ToYadifConfigResponseOutput() YadifConfigResponseOutput {
	return o
}

func (o YadifConfigResponseOutput) ToYadifConfigResponseOutputWithContext(ctx context.Context) YadifConfigResponseOutput {
	return o
}

// Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.
func (o YadifConfigResponseOutput) DeinterlaceAllFrames() pulumi.BoolOutput {
	return o.ApplyT(func(v YadifConfigResponse) bool { return v.DeinterlaceAllFrames }).(pulumi.BoolOutput)
}

// Disable spacial interlacing. The default is `false`.
func (o YadifConfigResponseOutput) DisableSpatialInterlacing() pulumi.BoolOutput {
	return o.ApplyT(func(v YadifConfigResponse) bool { return v.DisableSpatialInterlacing }).(pulumi.BoolOutput)
}

// Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field
func (o YadifConfigResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v YadifConfigResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity
func (o YadifConfigResponseOutput) Parity() pulumi.StringOutput {
	return o.ApplyT(func(v YadifConfigResponse) string { return v.Parity }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdBreakInput)(nil)).Elem(), AdBreakArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdBreakArrayInput)(nil)).Elem(), AdBreakArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Aes128EncryptionInput)(nil)).Elem(), Aes128EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Aes128EncryptionPtrInput)(nil)).Elem(), Aes128EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationInput)(nil)).Elem(), AnimationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationArrayInput)(nil)).Elem(), AnimationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationEndInput)(nil)).Elem(), AnimationEndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationEndPtrInput)(nil)).Elem(), AnimationEndArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationFadeInput)(nil)).Elem(), AnimationFadeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationFadePtrInput)(nil)).Elem(), AnimationFadeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationStaticInput)(nil)).Elem(), AnimationStaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnimationStaticPtrInput)(nil)).Elem(), AnimationStaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudioInput)(nil)).Elem(), AudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudioPtrInput)(nil)).Elem(), AudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudioMappingInput)(nil)).Elem(), AudioMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudioMappingArrayInput)(nil)).Elem(), AudioMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudioStreamInput)(nil)).Elem(), AudioStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AudioStreamPtrInput)(nil)).Elem(), AudioStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BwdifConfigInput)(nil)).Elem(), BwdifConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BwdifConfigPtrInput)(nil)).Elem(), BwdifConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClearkeyInput)(nil)).Elem(), ClearkeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClearkeyPtrInput)(nil)).Elem(), ClearkeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ColorInput)(nil)).Elem(), ColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ColorPtrInput)(nil)).Elem(), ColorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CropInput)(nil)).Elem(), CropArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CropPtrInput)(nil)).Elem(), CropArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashConfigInput)(nil)).Elem(), DashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashConfigPtrInput)(nil)).Elem(), DashConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeblockInput)(nil)).Elem(), DeblockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeblockPtrInput)(nil)).Elem(), DeblockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeinterlaceInput)(nil)).Elem(), DeinterlaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeinterlacePtrInput)(nil)).Elem(), DeinterlaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenoiseInput)(nil)).Elem(), DenoiseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenoisePtrInput)(nil)).Elem(), DenoiseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DrmSystemsInput)(nil)).Elem(), DrmSystemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EditAtomInput)(nil)).Elem(), EditAtomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EditAtomArrayInput)(nil)).Elem(), EditAtomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElementaryStreamInput)(nil)).Elem(), ElementaryStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElementaryStreamArrayInput)(nil)).Elem(), ElementaryStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionInput)(nil)).Elem(), EncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EncryptionArrayInput)(nil)).Elem(), EncryptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FairplayInput)(nil)).Elem(), FairplayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FairplayPtrInput)(nil)).Elem(), FairplayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Fmp4ConfigInput)(nil)).Elem(), Fmp4ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Fmp4ConfigPtrInput)(nil)).Elem(), Fmp4ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*H264CodecSettingsInput)(nil)).Elem(), H264CodecSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*H264CodecSettingsPtrInput)(nil)).Elem(), H264CodecSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*H265CodecSettingsInput)(nil)).Elem(), H265CodecSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*H265CodecSettingsPtrInput)(nil)).Elem(), H265CodecSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), ImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagePtrInput)(nil)).Elem(), ImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InputInput)(nil)).Elem(), InputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InputArrayInput)(nil)).Elem(), InputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigInput)(nil)).Elem(), JobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobConfigPtrInput)(nil)).Elem(), JobConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManifestInput)(nil)).Elem(), ManifestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManifestArrayInput)(nil)).Elem(), ManifestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpegCommonEncryptionInput)(nil)).Elem(), MpegCommonEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MpegCommonEncryptionPtrInput)(nil)).Elem(), MpegCommonEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuxStreamInput)(nil)).Elem(), MuxStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuxStreamArrayInput)(nil)).Elem(), MuxStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NormalizedCoordinateInput)(nil)).Elem(), NormalizedCoordinateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NormalizedCoordinatePtrInput)(nil)).Elem(), NormalizedCoordinateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputInput)(nil)).Elem(), OutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutputPtrInput)(nil)).Elem(), OutputArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OverlayInput)(nil)).Elem(), OverlayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OverlayArrayInput)(nil)).Elem(), OverlayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PadInput)(nil)).Elem(), PadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PadPtrInput)(nil)).Elem(), PadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlayreadyInput)(nil)).Elem(), PlayreadyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlayreadyPtrInput)(nil)).Elem(), PlayreadyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreprocessingConfigInput)(nil)).Elem(), PreprocessingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PreprocessingConfigPtrInput)(nil)).Elem(), PreprocessingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubDestinationInput)(nil)).Elem(), PubsubDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubDestinationPtrInput)(nil)).Elem(), PubsubDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SampleAesEncryptionInput)(nil)).Elem(), SampleAesEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SampleAesEncryptionPtrInput)(nil)).Elem(), SampleAesEncryptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretManagerSourceInput)(nil)).Elem(), SecretManagerSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretManagerSourcePtrInput)(nil)).Elem(), SecretManagerSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentSettingsInput)(nil)).Elem(), SegmentSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentSettingsPtrInput)(nil)).Elem(), SegmentSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpriteSheetInput)(nil)).Elem(), SpriteSheetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpriteSheetArrayInput)(nil)).Elem(), SpriteSheetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TextMappingInput)(nil)).Elem(), TextMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TextMappingArrayInput)(nil)).Elem(), TextMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TextStreamInput)(nil)).Elem(), TextStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TextStreamPtrInput)(nil)).Elem(), TextStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoStreamInput)(nil)).Elem(), VideoStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VideoStreamPtrInput)(nil)).Elem(), VideoStreamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vp9CodecSettingsInput)(nil)).Elem(), Vp9CodecSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Vp9CodecSettingsPtrInput)(nil)).Elem(), Vp9CodecSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidevineInput)(nil)).Elem(), WidevineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WidevinePtrInput)(nil)).Elem(), WidevineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*YadifConfigInput)(nil)).Elem(), YadifConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*YadifConfigPtrInput)(nil)).Elem(), YadifConfigArgs{})
	pulumi.RegisterOutputType(AdBreakOutput{})
	pulumi.RegisterOutputType(AdBreakArrayOutput{})
	pulumi.RegisterOutputType(AdBreakResponseOutput{})
	pulumi.RegisterOutputType(AdBreakResponseArrayOutput{})
	pulumi.RegisterOutputType(Aes128EncryptionOutput{})
	pulumi.RegisterOutputType(Aes128EncryptionPtrOutput{})
	pulumi.RegisterOutputType(Aes128EncryptionResponseOutput{})
	pulumi.RegisterOutputType(AnimationOutput{})
	pulumi.RegisterOutputType(AnimationArrayOutput{})
	pulumi.RegisterOutputType(AnimationEndOutput{})
	pulumi.RegisterOutputType(AnimationEndPtrOutput{})
	pulumi.RegisterOutputType(AnimationEndResponseOutput{})
	pulumi.RegisterOutputType(AnimationFadeOutput{})
	pulumi.RegisterOutputType(AnimationFadePtrOutput{})
	pulumi.RegisterOutputType(AnimationFadeResponseOutput{})
	pulumi.RegisterOutputType(AnimationResponseOutput{})
	pulumi.RegisterOutputType(AnimationResponseArrayOutput{})
	pulumi.RegisterOutputType(AnimationStaticOutput{})
	pulumi.RegisterOutputType(AnimationStaticPtrOutput{})
	pulumi.RegisterOutputType(AnimationStaticResponseOutput{})
	pulumi.RegisterOutputType(AudioOutput{})
	pulumi.RegisterOutputType(AudioPtrOutput{})
	pulumi.RegisterOutputType(AudioMappingOutput{})
	pulumi.RegisterOutputType(AudioMappingArrayOutput{})
	pulumi.RegisterOutputType(AudioMappingResponseOutput{})
	pulumi.RegisterOutputType(AudioMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(AudioResponseOutput{})
	pulumi.RegisterOutputType(AudioStreamOutput{})
	pulumi.RegisterOutputType(AudioStreamPtrOutput{})
	pulumi.RegisterOutputType(AudioStreamResponseOutput{})
	pulumi.RegisterOutputType(BwdifConfigOutput{})
	pulumi.RegisterOutputType(BwdifConfigPtrOutput{})
	pulumi.RegisterOutputType(BwdifConfigResponseOutput{})
	pulumi.RegisterOutputType(ClearkeyOutput{})
	pulumi.RegisterOutputType(ClearkeyPtrOutput{})
	pulumi.RegisterOutputType(ClearkeyResponseOutput{})
	pulumi.RegisterOutputType(ColorOutput{})
	pulumi.RegisterOutputType(ColorPtrOutput{})
	pulumi.RegisterOutputType(ColorResponseOutput{})
	pulumi.RegisterOutputType(CropOutput{})
	pulumi.RegisterOutputType(CropPtrOutput{})
	pulumi.RegisterOutputType(CropResponseOutput{})
	pulumi.RegisterOutputType(DashConfigOutput{})
	pulumi.RegisterOutputType(DashConfigPtrOutput{})
	pulumi.RegisterOutputType(DashConfigResponseOutput{})
	pulumi.RegisterOutputType(DeblockOutput{})
	pulumi.RegisterOutputType(DeblockPtrOutput{})
	pulumi.RegisterOutputType(DeblockResponseOutput{})
	pulumi.RegisterOutputType(DeinterlaceOutput{})
	pulumi.RegisterOutputType(DeinterlacePtrOutput{})
	pulumi.RegisterOutputType(DeinterlaceResponseOutput{})
	pulumi.RegisterOutputType(DenoiseOutput{})
	pulumi.RegisterOutputType(DenoisePtrOutput{})
	pulumi.RegisterOutputType(DenoiseResponseOutput{})
	pulumi.RegisterOutputType(DrmSystemsOutput{})
	pulumi.RegisterOutputType(DrmSystemsResponseOutput{})
	pulumi.RegisterOutputType(EditAtomOutput{})
	pulumi.RegisterOutputType(EditAtomArrayOutput{})
	pulumi.RegisterOutputType(EditAtomResponseOutput{})
	pulumi.RegisterOutputType(EditAtomResponseArrayOutput{})
	pulumi.RegisterOutputType(ElementaryStreamOutput{})
	pulumi.RegisterOutputType(ElementaryStreamArrayOutput{})
	pulumi.RegisterOutputType(ElementaryStreamResponseOutput{})
	pulumi.RegisterOutputType(ElementaryStreamResponseArrayOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionArrayOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(EncryptionResponseArrayOutput{})
	pulumi.RegisterOutputType(FairplayOutput{})
	pulumi.RegisterOutputType(FairplayPtrOutput{})
	pulumi.RegisterOutputType(FairplayResponseOutput{})
	pulumi.RegisterOutputType(Fmp4ConfigOutput{})
	pulumi.RegisterOutputType(Fmp4ConfigPtrOutput{})
	pulumi.RegisterOutputType(Fmp4ConfigResponseOutput{})
	pulumi.RegisterOutputType(H264CodecSettingsOutput{})
	pulumi.RegisterOutputType(H264CodecSettingsPtrOutput{})
	pulumi.RegisterOutputType(H264CodecSettingsResponseOutput{})
	pulumi.RegisterOutputType(H265CodecSettingsOutput{})
	pulumi.RegisterOutputType(H265CodecSettingsPtrOutput{})
	pulumi.RegisterOutputType(H265CodecSettingsResponseOutput{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImagePtrOutput{})
	pulumi.RegisterOutputType(ImageResponseOutput{})
	pulumi.RegisterOutputType(InputOutput{})
	pulumi.RegisterOutputType(InputArrayOutput{})
	pulumi.RegisterOutputType(InputResponseOutput{})
	pulumi.RegisterOutputType(InputResponseArrayOutput{})
	pulumi.RegisterOutputType(JobConfigOutput{})
	pulumi.RegisterOutputType(JobConfigPtrOutput{})
	pulumi.RegisterOutputType(JobConfigResponseOutput{})
	pulumi.RegisterOutputType(ManifestOutput{})
	pulumi.RegisterOutputType(ManifestArrayOutput{})
	pulumi.RegisterOutputType(ManifestResponseOutput{})
	pulumi.RegisterOutputType(ManifestResponseArrayOutput{})
	pulumi.RegisterOutputType(MpegCommonEncryptionOutput{})
	pulumi.RegisterOutputType(MpegCommonEncryptionPtrOutput{})
	pulumi.RegisterOutputType(MpegCommonEncryptionResponseOutput{})
	pulumi.RegisterOutputType(MuxStreamOutput{})
	pulumi.RegisterOutputType(MuxStreamArrayOutput{})
	pulumi.RegisterOutputType(MuxStreamResponseOutput{})
	pulumi.RegisterOutputType(MuxStreamResponseArrayOutput{})
	pulumi.RegisterOutputType(NormalizedCoordinateOutput{})
	pulumi.RegisterOutputType(NormalizedCoordinatePtrOutput{})
	pulumi.RegisterOutputType(NormalizedCoordinateResponseOutput{})
	pulumi.RegisterOutputType(OutputOutput{})
	pulumi.RegisterOutputType(OutputPtrOutput{})
	pulumi.RegisterOutputType(OutputResponseOutput{})
	pulumi.RegisterOutputType(OverlayOutput{})
	pulumi.RegisterOutputType(OverlayArrayOutput{})
	pulumi.RegisterOutputType(OverlayResponseOutput{})
	pulumi.RegisterOutputType(OverlayResponseArrayOutput{})
	pulumi.RegisterOutputType(PadOutput{})
	pulumi.RegisterOutputType(PadPtrOutput{})
	pulumi.RegisterOutputType(PadResponseOutput{})
	pulumi.RegisterOutputType(PlayreadyOutput{})
	pulumi.RegisterOutputType(PlayreadyPtrOutput{})
	pulumi.RegisterOutputType(PlayreadyResponseOutput{})
	pulumi.RegisterOutputType(PreprocessingConfigOutput{})
	pulumi.RegisterOutputType(PreprocessingConfigPtrOutput{})
	pulumi.RegisterOutputType(PreprocessingConfigResponseOutput{})
	pulumi.RegisterOutputType(PubsubDestinationOutput{})
	pulumi.RegisterOutputType(PubsubDestinationPtrOutput{})
	pulumi.RegisterOutputType(PubsubDestinationResponseOutput{})
	pulumi.RegisterOutputType(SampleAesEncryptionOutput{})
	pulumi.RegisterOutputType(SampleAesEncryptionPtrOutput{})
	pulumi.RegisterOutputType(SampleAesEncryptionResponseOutput{})
	pulumi.RegisterOutputType(SecretManagerSourceOutput{})
	pulumi.RegisterOutputType(SecretManagerSourcePtrOutput{})
	pulumi.RegisterOutputType(SecretManagerSourceResponseOutput{})
	pulumi.RegisterOutputType(SegmentSettingsOutput{})
	pulumi.RegisterOutputType(SegmentSettingsPtrOutput{})
	pulumi.RegisterOutputType(SegmentSettingsResponseOutput{})
	pulumi.RegisterOutputType(SpriteSheetOutput{})
	pulumi.RegisterOutputType(SpriteSheetArrayOutput{})
	pulumi.RegisterOutputType(SpriteSheetResponseOutput{})
	pulumi.RegisterOutputType(SpriteSheetResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(TextMappingOutput{})
	pulumi.RegisterOutputType(TextMappingArrayOutput{})
	pulumi.RegisterOutputType(TextMappingResponseOutput{})
	pulumi.RegisterOutputType(TextMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(TextStreamOutput{})
	pulumi.RegisterOutputType(TextStreamPtrOutput{})
	pulumi.RegisterOutputType(TextStreamResponseOutput{})
	pulumi.RegisterOutputType(VideoStreamOutput{})
	pulumi.RegisterOutputType(VideoStreamPtrOutput{})
	pulumi.RegisterOutputType(VideoStreamResponseOutput{})
	pulumi.RegisterOutputType(Vp9CodecSettingsOutput{})
	pulumi.RegisterOutputType(Vp9CodecSettingsPtrOutput{})
	pulumi.RegisterOutputType(Vp9CodecSettingsResponseOutput{})
	pulumi.RegisterOutputType(WidevineOutput{})
	pulumi.RegisterOutputType(WidevinePtrOutput{})
	pulumi.RegisterOutputType(WidevineResponseOutput{})
	pulumi.RegisterOutputType(YadifConfigOutput{})
	pulumi.RegisterOutputType(YadifConfigPtrOutput{})
	pulumi.RegisterOutputType(YadifConfigResponseOutput{})
}
