// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Ad break.
type AdBreak struct {
	// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
	StartTimeOffset *string `pulumi:"startTimeOffset"`
}

// AdBreakInput is an input type that accepts AdBreakArgs and AdBreakOutput values.
// You can construct a concrete instance of `AdBreakInput` via:
//
//          AdBreakArgs{...}
type AdBreakInput interface {
	pulumi.Input

	ToAdBreakOutput() AdBreakOutput
	ToAdBreakOutputWithContext(context.Context) AdBreakOutput
}

// Ad break.
type AdBreakArgs struct {
	// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
}

func (AdBreakArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdBreak)(nil)).Elem()
}

func (i AdBreakArgs) ToAdBreakOutput() AdBreakOutput {
	return i.ToAdBreakOutputWithContext(context.Background())
}

func (i AdBreakArgs) ToAdBreakOutputWithContext(ctx context.Context) AdBreakOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdBreakOutput)
}

// AdBreakArrayInput is an input type that accepts AdBreakArray and AdBreakArrayOutput values.
// You can construct a concrete instance of `AdBreakArrayInput` via:
//
//          AdBreakArray{ AdBreakArgs{...} }
type AdBreakArrayInput interface {
	pulumi.Input

	ToAdBreakArrayOutput() AdBreakArrayOutput
	ToAdBreakArrayOutputWithContext(context.Context) AdBreakArrayOutput
}

type AdBreakArray []AdBreakInput

func (AdBreakArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdBreak)(nil)).Elem()
}

func (i AdBreakArray) ToAdBreakArrayOutput() AdBreakArrayOutput {
	return i.ToAdBreakArrayOutputWithContext(context.Background())
}

func (i AdBreakArray) ToAdBreakArrayOutputWithContext(ctx context.Context) AdBreakArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdBreakArrayOutput)
}

// Ad break.
type AdBreakOutput struct{ *pulumi.OutputState }

func (AdBreakOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdBreak)(nil)).Elem()
}

func (o AdBreakOutput) ToAdBreakOutput() AdBreakOutput {
	return o
}

func (o AdBreakOutput) ToAdBreakOutputWithContext(ctx context.Context) AdBreakOutput {
	return o
}

// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
func (o AdBreakOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AdBreak) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

type AdBreakArrayOutput struct{ *pulumi.OutputState }

func (AdBreakArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdBreak)(nil)).Elem()
}

func (o AdBreakArrayOutput) ToAdBreakArrayOutput() AdBreakArrayOutput {
	return o
}

func (o AdBreakArrayOutput) ToAdBreakArrayOutputWithContext(ctx context.Context) AdBreakArrayOutput {
	return o
}

func (o AdBreakArrayOutput) Index(i pulumi.IntInput) AdBreakOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdBreak {
		return vs[0].([]AdBreak)[vs[1].(int)]
	}).(AdBreakOutput)
}

// Ad break.
type AdBreakResponse struct {
	// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
	StartTimeOffset string `pulumi:"startTimeOffset"`
}

// AdBreakResponseInput is an input type that accepts AdBreakResponseArgs and AdBreakResponseOutput values.
// You can construct a concrete instance of `AdBreakResponseInput` via:
//
//          AdBreakResponseArgs{...}
type AdBreakResponseInput interface {
	pulumi.Input

	ToAdBreakResponseOutput() AdBreakResponseOutput
	ToAdBreakResponseOutputWithContext(context.Context) AdBreakResponseOutput
}

// Ad break.
type AdBreakResponseArgs struct {
	// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
	StartTimeOffset pulumi.StringInput `pulumi:"startTimeOffset"`
}

func (AdBreakResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdBreakResponse)(nil)).Elem()
}

func (i AdBreakResponseArgs) ToAdBreakResponseOutput() AdBreakResponseOutput {
	return i.ToAdBreakResponseOutputWithContext(context.Background())
}

func (i AdBreakResponseArgs) ToAdBreakResponseOutputWithContext(ctx context.Context) AdBreakResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdBreakResponseOutput)
}

// AdBreakResponseArrayInput is an input type that accepts AdBreakResponseArray and AdBreakResponseArrayOutput values.
// You can construct a concrete instance of `AdBreakResponseArrayInput` via:
//
//          AdBreakResponseArray{ AdBreakResponseArgs{...} }
type AdBreakResponseArrayInput interface {
	pulumi.Input

	ToAdBreakResponseArrayOutput() AdBreakResponseArrayOutput
	ToAdBreakResponseArrayOutputWithContext(context.Context) AdBreakResponseArrayOutput
}

type AdBreakResponseArray []AdBreakResponseInput

func (AdBreakResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdBreakResponse)(nil)).Elem()
}

func (i AdBreakResponseArray) ToAdBreakResponseArrayOutput() AdBreakResponseArrayOutput {
	return i.ToAdBreakResponseArrayOutputWithContext(context.Background())
}

func (i AdBreakResponseArray) ToAdBreakResponseArrayOutputWithContext(ctx context.Context) AdBreakResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdBreakResponseArrayOutput)
}

// Ad break.
type AdBreakResponseOutput struct{ *pulumi.OutputState }

func (AdBreakResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdBreakResponse)(nil)).Elem()
}

func (o AdBreakResponseOutput) ToAdBreakResponseOutput() AdBreakResponseOutput {
	return o
}

func (o AdBreakResponseOutput) ToAdBreakResponseOutputWithContext(ctx context.Context) AdBreakResponseOutput {
	return o
}

// Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.
func (o AdBreakResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AdBreakResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

type AdBreakResponseArrayOutput struct{ *pulumi.OutputState }

func (AdBreakResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AdBreakResponse)(nil)).Elem()
}

func (o AdBreakResponseArrayOutput) ToAdBreakResponseArrayOutput() AdBreakResponseArrayOutput {
	return o
}

func (o AdBreakResponseArrayOutput) ToAdBreakResponseArrayOutputWithContext(ctx context.Context) AdBreakResponseArrayOutput {
	return o
}

func (o AdBreakResponseArrayOutput) Index(i pulumi.IntInput) AdBreakResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AdBreakResponse {
		return vs[0].([]AdBreakResponse)[vs[1].(int)]
	}).(AdBreakResponseOutput)
}

// Configuration for AES-128 encryption.
type Aes128Encryption struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri string `pulumi:"keyUri"`
}

// Aes128EncryptionInput is an input type that accepts Aes128EncryptionArgs and Aes128EncryptionOutput values.
// You can construct a concrete instance of `Aes128EncryptionInput` via:
//
//          Aes128EncryptionArgs{...}
type Aes128EncryptionInput interface {
	pulumi.Input

	ToAes128EncryptionOutput() Aes128EncryptionOutput
	ToAes128EncryptionOutputWithContext(context.Context) Aes128EncryptionOutput
}

// Configuration for AES-128 encryption.
type Aes128EncryptionArgs struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri pulumi.StringInput `pulumi:"keyUri"`
}

func (Aes128EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Aes128Encryption)(nil)).Elem()
}

func (i Aes128EncryptionArgs) ToAes128EncryptionOutput() Aes128EncryptionOutput {
	return i.ToAes128EncryptionOutputWithContext(context.Background())
}

func (i Aes128EncryptionArgs) ToAes128EncryptionOutputWithContext(ctx context.Context) Aes128EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aes128EncryptionOutput)
}

func (i Aes128EncryptionArgs) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return i.ToAes128EncryptionPtrOutputWithContext(context.Background())
}

func (i Aes128EncryptionArgs) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aes128EncryptionOutput).ToAes128EncryptionPtrOutputWithContext(ctx)
}

// Aes128EncryptionPtrInput is an input type that accepts Aes128EncryptionArgs, Aes128EncryptionPtr and Aes128EncryptionPtrOutput values.
// You can construct a concrete instance of `Aes128EncryptionPtrInput` via:
//
//          Aes128EncryptionArgs{...}
//
//  or:
//
//          nil
type Aes128EncryptionPtrInput interface {
	pulumi.Input

	ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput
	ToAes128EncryptionPtrOutputWithContext(context.Context) Aes128EncryptionPtrOutput
}

type aes128EncryptionPtrType Aes128EncryptionArgs

func Aes128EncryptionPtr(v *Aes128EncryptionArgs) Aes128EncryptionPtrInput {
	return (*aes128EncryptionPtrType)(v)
}

func (*aes128EncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Aes128Encryption)(nil)).Elem()
}

func (i *aes128EncryptionPtrType) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return i.ToAes128EncryptionPtrOutputWithContext(context.Background())
}

func (i *aes128EncryptionPtrType) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aes128EncryptionPtrOutput)
}

// Configuration for AES-128 encryption.
type Aes128EncryptionOutput struct{ *pulumi.OutputState }

func (Aes128EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Aes128Encryption)(nil)).Elem()
}

func (o Aes128EncryptionOutput) ToAes128EncryptionOutput() Aes128EncryptionOutput {
	return o
}

func (o Aes128EncryptionOutput) ToAes128EncryptionOutputWithContext(ctx context.Context) Aes128EncryptionOutput {
	return o
}

func (o Aes128EncryptionOutput) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return o.ToAes128EncryptionPtrOutputWithContext(context.Background())
}

func (o Aes128EncryptionOutput) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Aes128Encryption) *Aes128Encryption {
		return &v
	}).(Aes128EncryptionPtrOutput)
}

// URI of the key delivery service. This URI is inserted into the M3U8 header.
func (o Aes128EncryptionOutput) KeyUri() pulumi.StringOutput {
	return o.ApplyT(func(v Aes128Encryption) string { return v.KeyUri }).(pulumi.StringOutput)
}

type Aes128EncryptionPtrOutput struct{ *pulumi.OutputState }

func (Aes128EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Aes128Encryption)(nil)).Elem()
}

func (o Aes128EncryptionPtrOutput) ToAes128EncryptionPtrOutput() Aes128EncryptionPtrOutput {
	return o
}

func (o Aes128EncryptionPtrOutput) ToAes128EncryptionPtrOutputWithContext(ctx context.Context) Aes128EncryptionPtrOutput {
	return o
}

func (o Aes128EncryptionPtrOutput) Elem() Aes128EncryptionOutput {
	return o.ApplyT(func(v *Aes128Encryption) Aes128Encryption {
		if v != nil {
			return *v
		}
		var ret Aes128Encryption
		return ret
	}).(Aes128EncryptionOutput)
}

// URI of the key delivery service. This URI is inserted into the M3U8 header.
func (o Aes128EncryptionPtrOutput) KeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Aes128Encryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUri
	}).(pulumi.StringPtrOutput)
}

// Configuration for AES-128 encryption.
type Aes128EncryptionResponse struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri string `pulumi:"keyUri"`
}

// Aes128EncryptionResponseInput is an input type that accepts Aes128EncryptionResponseArgs and Aes128EncryptionResponseOutput values.
// You can construct a concrete instance of `Aes128EncryptionResponseInput` via:
//
//          Aes128EncryptionResponseArgs{...}
type Aes128EncryptionResponseInput interface {
	pulumi.Input

	ToAes128EncryptionResponseOutput() Aes128EncryptionResponseOutput
	ToAes128EncryptionResponseOutputWithContext(context.Context) Aes128EncryptionResponseOutput
}

// Configuration for AES-128 encryption.
type Aes128EncryptionResponseArgs struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri pulumi.StringInput `pulumi:"keyUri"`
}

func (Aes128EncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Aes128EncryptionResponse)(nil)).Elem()
}

func (i Aes128EncryptionResponseArgs) ToAes128EncryptionResponseOutput() Aes128EncryptionResponseOutput {
	return i.ToAes128EncryptionResponseOutputWithContext(context.Background())
}

func (i Aes128EncryptionResponseArgs) ToAes128EncryptionResponseOutputWithContext(ctx context.Context) Aes128EncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Aes128EncryptionResponseOutput)
}

// Configuration for AES-128 encryption.
type Aes128EncryptionResponseOutput struct{ *pulumi.OutputState }

func (Aes128EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Aes128EncryptionResponse)(nil)).Elem()
}

func (o Aes128EncryptionResponseOutput) ToAes128EncryptionResponseOutput() Aes128EncryptionResponseOutput {
	return o
}

func (o Aes128EncryptionResponseOutput) ToAes128EncryptionResponseOutputWithContext(ctx context.Context) Aes128EncryptionResponseOutput {
	return o
}

// URI of the key delivery service. This URI is inserted into the M3U8 header.
func (o Aes128EncryptionResponseOutput) KeyUri() pulumi.StringOutput {
	return o.ApplyT(func(v Aes128EncryptionResponse) string { return v.KeyUri }).(pulumi.StringOutput)
}

// Animation types.
type Animation struct {
	// End previous animation.
	AnimationEnd *AnimationEnd `pulumi:"animationEnd"`
	// Display overlay object with fade animation.
	AnimationFade *AnimationFade `pulumi:"animationFade"`
	// Display static overlay object.
	AnimationStatic *AnimationStatic `pulumi:"animationStatic"`
}

// AnimationInput is an input type that accepts AnimationArgs and AnimationOutput values.
// You can construct a concrete instance of `AnimationInput` via:
//
//          AnimationArgs{...}
type AnimationInput interface {
	pulumi.Input

	ToAnimationOutput() AnimationOutput
	ToAnimationOutputWithContext(context.Context) AnimationOutput
}

// Animation types.
type AnimationArgs struct {
	// End previous animation.
	AnimationEnd AnimationEndPtrInput `pulumi:"animationEnd"`
	// Display overlay object with fade animation.
	AnimationFade AnimationFadePtrInput `pulumi:"animationFade"`
	// Display static overlay object.
	AnimationStatic AnimationStaticPtrInput `pulumi:"animationStatic"`
}

func (AnimationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Animation)(nil)).Elem()
}

func (i AnimationArgs) ToAnimationOutput() AnimationOutput {
	return i.ToAnimationOutputWithContext(context.Background())
}

func (i AnimationArgs) ToAnimationOutputWithContext(ctx context.Context) AnimationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationOutput)
}

// AnimationArrayInput is an input type that accepts AnimationArray and AnimationArrayOutput values.
// You can construct a concrete instance of `AnimationArrayInput` via:
//
//          AnimationArray{ AnimationArgs{...} }
type AnimationArrayInput interface {
	pulumi.Input

	ToAnimationArrayOutput() AnimationArrayOutput
	ToAnimationArrayOutputWithContext(context.Context) AnimationArrayOutput
}

type AnimationArray []AnimationInput

func (AnimationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Animation)(nil)).Elem()
}

func (i AnimationArray) ToAnimationArrayOutput() AnimationArrayOutput {
	return i.ToAnimationArrayOutputWithContext(context.Background())
}

func (i AnimationArray) ToAnimationArrayOutputWithContext(ctx context.Context) AnimationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationArrayOutput)
}

// Animation types.
type AnimationOutput struct{ *pulumi.OutputState }

func (AnimationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Animation)(nil)).Elem()
}

func (o AnimationOutput) ToAnimationOutput() AnimationOutput {
	return o
}

func (o AnimationOutput) ToAnimationOutputWithContext(ctx context.Context) AnimationOutput {
	return o
}

// End previous animation.
func (o AnimationOutput) AnimationEnd() AnimationEndPtrOutput {
	return o.ApplyT(func(v Animation) *AnimationEnd { return v.AnimationEnd }).(AnimationEndPtrOutput)
}

// Display overlay object with fade animation.
func (o AnimationOutput) AnimationFade() AnimationFadePtrOutput {
	return o.ApplyT(func(v Animation) *AnimationFade { return v.AnimationFade }).(AnimationFadePtrOutput)
}

// Display static overlay object.
func (o AnimationOutput) AnimationStatic() AnimationStaticPtrOutput {
	return o.ApplyT(func(v Animation) *AnimationStatic { return v.AnimationStatic }).(AnimationStaticPtrOutput)
}

type AnimationArrayOutput struct{ *pulumi.OutputState }

func (AnimationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Animation)(nil)).Elem()
}

func (o AnimationArrayOutput) ToAnimationArrayOutput() AnimationArrayOutput {
	return o
}

func (o AnimationArrayOutput) ToAnimationArrayOutputWithContext(ctx context.Context) AnimationArrayOutput {
	return o
}

func (o AnimationArrayOutput) Index(i pulumi.IntInput) AnimationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Animation {
		return vs[0].([]Animation)[vs[1].(int)]
	}).(AnimationOutput)
}

// End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEnd struct {
	// The time to end overlay object, in seconds. Default: 0
	StartTimeOffset *string `pulumi:"startTimeOffset"`
}

// AnimationEndInput is an input type that accepts AnimationEndArgs and AnimationEndOutput values.
// You can construct a concrete instance of `AnimationEndInput` via:
//
//          AnimationEndArgs{...}
type AnimationEndInput interface {
	pulumi.Input

	ToAnimationEndOutput() AnimationEndOutput
	ToAnimationEndOutputWithContext(context.Context) AnimationEndOutput
}

// End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndArgs struct {
	// The time to end overlay object, in seconds. Default: 0
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
}

func (AnimationEndArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationEnd)(nil)).Elem()
}

func (i AnimationEndArgs) ToAnimationEndOutput() AnimationEndOutput {
	return i.ToAnimationEndOutputWithContext(context.Background())
}

func (i AnimationEndArgs) ToAnimationEndOutputWithContext(ctx context.Context) AnimationEndOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationEndOutput)
}

func (i AnimationEndArgs) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return i.ToAnimationEndPtrOutputWithContext(context.Background())
}

func (i AnimationEndArgs) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationEndOutput).ToAnimationEndPtrOutputWithContext(ctx)
}

// AnimationEndPtrInput is an input type that accepts AnimationEndArgs, AnimationEndPtr and AnimationEndPtrOutput values.
// You can construct a concrete instance of `AnimationEndPtrInput` via:
//
//          AnimationEndArgs{...}
//
//  or:
//
//          nil
type AnimationEndPtrInput interface {
	pulumi.Input

	ToAnimationEndPtrOutput() AnimationEndPtrOutput
	ToAnimationEndPtrOutputWithContext(context.Context) AnimationEndPtrOutput
}

type animationEndPtrType AnimationEndArgs

func AnimationEndPtr(v *AnimationEndArgs) AnimationEndPtrInput {
	return (*animationEndPtrType)(v)
}

func (*animationEndPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationEnd)(nil)).Elem()
}

func (i *animationEndPtrType) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return i.ToAnimationEndPtrOutputWithContext(context.Background())
}

func (i *animationEndPtrType) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationEndPtrOutput)
}

// End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndOutput struct{ *pulumi.OutputState }

func (AnimationEndOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationEnd)(nil)).Elem()
}

func (o AnimationEndOutput) ToAnimationEndOutput() AnimationEndOutput {
	return o
}

func (o AnimationEndOutput) ToAnimationEndOutputWithContext(ctx context.Context) AnimationEndOutput {
	return o
}

func (o AnimationEndOutput) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return o.ToAnimationEndPtrOutputWithContext(context.Background())
}

func (o AnimationEndOutput) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnimationEnd) *AnimationEnd {
		return &v
	}).(AnimationEndPtrOutput)
}

// The time to end overlay object, in seconds. Default: 0
func (o AnimationEndOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationEnd) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

type AnimationEndPtrOutput struct{ *pulumi.OutputState }

func (AnimationEndPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationEnd)(nil)).Elem()
}

func (o AnimationEndPtrOutput) ToAnimationEndPtrOutput() AnimationEndPtrOutput {
	return o
}

func (o AnimationEndPtrOutput) ToAnimationEndPtrOutputWithContext(ctx context.Context) AnimationEndPtrOutput {
	return o
}

func (o AnimationEndPtrOutput) Elem() AnimationEndOutput {
	return o.ApplyT(func(v *AnimationEnd) AnimationEnd {
		if v != nil {
			return *v
		}
		var ret AnimationEnd
		return ret
	}).(AnimationEndOutput)
}

// The time to end overlay object, in seconds. Default: 0
func (o AnimationEndPtrOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationEnd) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeOffset
	}).(pulumi.StringPtrOutput)
}

// End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndResponse struct {
	// The time to end overlay object, in seconds. Default: 0
	StartTimeOffset string `pulumi:"startTimeOffset"`
}

// AnimationEndResponseInput is an input type that accepts AnimationEndResponseArgs and AnimationEndResponseOutput values.
// You can construct a concrete instance of `AnimationEndResponseInput` via:
//
//          AnimationEndResponseArgs{...}
type AnimationEndResponseInput interface {
	pulumi.Input

	ToAnimationEndResponseOutput() AnimationEndResponseOutput
	ToAnimationEndResponseOutputWithContext(context.Context) AnimationEndResponseOutput
}

// End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndResponseArgs struct {
	// The time to end overlay object, in seconds. Default: 0
	StartTimeOffset pulumi.StringInput `pulumi:"startTimeOffset"`
}

func (AnimationEndResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationEndResponse)(nil)).Elem()
}

func (i AnimationEndResponseArgs) ToAnimationEndResponseOutput() AnimationEndResponseOutput {
	return i.ToAnimationEndResponseOutputWithContext(context.Background())
}

func (i AnimationEndResponseArgs) ToAnimationEndResponseOutputWithContext(ctx context.Context) AnimationEndResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationEndResponseOutput)
}

// End previous overlay animation from the video. Without AnimationEnd, the overlay object will keep the state of previous animation until the end of the video.
type AnimationEndResponseOutput struct{ *pulumi.OutputState }

func (AnimationEndResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationEndResponse)(nil)).Elem()
}

func (o AnimationEndResponseOutput) ToAnimationEndResponseOutput() AnimationEndResponseOutput {
	return o
}

func (o AnimationEndResponseOutput) ToAnimationEndResponseOutputWithContext(ctx context.Context) AnimationEndResponseOutput {
	return o
}

// The time to end overlay object, in seconds. Default: 0
func (o AnimationEndResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationEndResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Display overlay object with fade animation.
type AnimationFade struct {
	// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
	EndTimeOffset *string `pulumi:"endTimeOffset"`
	// Type of fade animation: `FADE_IN` or `FADE_OUT`.
	FadeType AnimationFadeFadeType `pulumi:"fadeType"`
	// The time to start the fade animation, in seconds. Default: 0
	StartTimeOffset *string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy *NormalizedCoordinate `pulumi:"xy"`
}

// AnimationFadeInput is an input type that accepts AnimationFadeArgs and AnimationFadeOutput values.
// You can construct a concrete instance of `AnimationFadeInput` via:
//
//          AnimationFadeArgs{...}
type AnimationFadeInput interface {
	pulumi.Input

	ToAnimationFadeOutput() AnimationFadeOutput
	ToAnimationFadeOutputWithContext(context.Context) AnimationFadeOutput
}

// Display overlay object with fade animation.
type AnimationFadeArgs struct {
	// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
	EndTimeOffset pulumi.StringPtrInput `pulumi:"endTimeOffset"`
	// Type of fade animation: `FADE_IN` or `FADE_OUT`.
	FadeType AnimationFadeFadeTypeInput `pulumi:"fadeType"`
	// The time to start the fade animation, in seconds. Default: 0
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinatePtrInput `pulumi:"xy"`
}

func (AnimationFadeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationFade)(nil)).Elem()
}

func (i AnimationFadeArgs) ToAnimationFadeOutput() AnimationFadeOutput {
	return i.ToAnimationFadeOutputWithContext(context.Background())
}

func (i AnimationFadeArgs) ToAnimationFadeOutputWithContext(ctx context.Context) AnimationFadeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationFadeOutput)
}

func (i AnimationFadeArgs) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return i.ToAnimationFadePtrOutputWithContext(context.Background())
}

func (i AnimationFadeArgs) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationFadeOutput).ToAnimationFadePtrOutputWithContext(ctx)
}

// AnimationFadePtrInput is an input type that accepts AnimationFadeArgs, AnimationFadePtr and AnimationFadePtrOutput values.
// You can construct a concrete instance of `AnimationFadePtrInput` via:
//
//          AnimationFadeArgs{...}
//
//  or:
//
//          nil
type AnimationFadePtrInput interface {
	pulumi.Input

	ToAnimationFadePtrOutput() AnimationFadePtrOutput
	ToAnimationFadePtrOutputWithContext(context.Context) AnimationFadePtrOutput
}

type animationFadePtrType AnimationFadeArgs

func AnimationFadePtr(v *AnimationFadeArgs) AnimationFadePtrInput {
	return (*animationFadePtrType)(v)
}

func (*animationFadePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationFade)(nil)).Elem()
}

func (i *animationFadePtrType) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return i.ToAnimationFadePtrOutputWithContext(context.Background())
}

func (i *animationFadePtrType) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationFadePtrOutput)
}

// Display overlay object with fade animation.
type AnimationFadeOutput struct{ *pulumi.OutputState }

func (AnimationFadeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationFade)(nil)).Elem()
}

func (o AnimationFadeOutput) ToAnimationFadeOutput() AnimationFadeOutput {
	return o
}

func (o AnimationFadeOutput) ToAnimationFadeOutputWithContext(ctx context.Context) AnimationFadeOutput {
	return o
}

func (o AnimationFadeOutput) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return o.ToAnimationFadePtrOutputWithContext(context.Background())
}

func (o AnimationFadeOutput) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnimationFade) *AnimationFade {
		return &v
	}).(AnimationFadePtrOutput)
}

// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
func (o AnimationFadeOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationFade) *string { return v.EndTimeOffset }).(pulumi.StringPtrOutput)
}

// Type of fade animation: `FADE_IN` or `FADE_OUT`.
func (o AnimationFadeOutput) FadeType() AnimationFadeFadeTypeOutput {
	return o.ApplyT(func(v AnimationFade) AnimationFadeFadeType { return v.FadeType }).(AnimationFadeFadeTypeOutput)
}

// The time to start the fade animation, in seconds. Default: 0
func (o AnimationFadeOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationFade) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationFadeOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v AnimationFade) *NormalizedCoordinate { return v.Xy }).(NormalizedCoordinatePtrOutput)
}

type AnimationFadePtrOutput struct{ *pulumi.OutputState }

func (AnimationFadePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationFade)(nil)).Elem()
}

func (o AnimationFadePtrOutput) ToAnimationFadePtrOutput() AnimationFadePtrOutput {
	return o
}

func (o AnimationFadePtrOutput) ToAnimationFadePtrOutputWithContext(ctx context.Context) AnimationFadePtrOutput {
	return o
}

func (o AnimationFadePtrOutput) Elem() AnimationFadeOutput {
	return o.ApplyT(func(v *AnimationFade) AnimationFade {
		if v != nil {
			return *v
		}
		var ret AnimationFade
		return ret
	}).(AnimationFadeOutput)
}

// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
func (o AnimationFadePtrOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationFade) *string {
		if v == nil {
			return nil
		}
		return v.EndTimeOffset
	}).(pulumi.StringPtrOutput)
}

// Type of fade animation: `FADE_IN` or `FADE_OUT`.
func (o AnimationFadePtrOutput) FadeType() AnimationFadeFadeTypePtrOutput {
	return o.ApplyT(func(v *AnimationFade) *AnimationFadeFadeType {
		if v == nil {
			return nil
		}
		return &v.FadeType
	}).(AnimationFadeFadeTypePtrOutput)
}

// The time to start the fade animation, in seconds. Default: 0
func (o AnimationFadePtrOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationFade) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeOffset
	}).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationFadePtrOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v *AnimationFade) *NormalizedCoordinate {
		if v == nil {
			return nil
		}
		return v.Xy
	}).(NormalizedCoordinatePtrOutput)
}

// Display overlay object with fade animation.
type AnimationFadeResponse struct {
	// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
	EndTimeOffset string `pulumi:"endTimeOffset"`
	// Type of fade animation: `FADE_IN` or `FADE_OUT`.
	FadeType string `pulumi:"fadeType"`
	// The time to start the fade animation, in seconds. Default: 0
	StartTimeOffset string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinateResponse `pulumi:"xy"`
}

// AnimationFadeResponseInput is an input type that accepts AnimationFadeResponseArgs and AnimationFadeResponseOutput values.
// You can construct a concrete instance of `AnimationFadeResponseInput` via:
//
//          AnimationFadeResponseArgs{...}
type AnimationFadeResponseInput interface {
	pulumi.Input

	ToAnimationFadeResponseOutput() AnimationFadeResponseOutput
	ToAnimationFadeResponseOutputWithContext(context.Context) AnimationFadeResponseOutput
}

// Display overlay object with fade animation.
type AnimationFadeResponseArgs struct {
	// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
	EndTimeOffset pulumi.StringInput `pulumi:"endTimeOffset"`
	// Type of fade animation: `FADE_IN` or `FADE_OUT`.
	FadeType pulumi.StringInput `pulumi:"fadeType"`
	// The time to start the fade animation, in seconds. Default: 0
	StartTimeOffset pulumi.StringInput `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinateResponseInput `pulumi:"xy"`
}

func (AnimationFadeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationFadeResponse)(nil)).Elem()
}

func (i AnimationFadeResponseArgs) ToAnimationFadeResponseOutput() AnimationFadeResponseOutput {
	return i.ToAnimationFadeResponseOutputWithContext(context.Background())
}

func (i AnimationFadeResponseArgs) ToAnimationFadeResponseOutputWithContext(ctx context.Context) AnimationFadeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationFadeResponseOutput)
}

// Display overlay object with fade animation.
type AnimationFadeResponseOutput struct{ *pulumi.OutputState }

func (AnimationFadeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationFadeResponse)(nil)).Elem()
}

func (o AnimationFadeResponseOutput) ToAnimationFadeResponseOutput() AnimationFadeResponseOutput {
	return o
}

func (o AnimationFadeResponseOutput) ToAnimationFadeResponseOutputWithContext(ctx context.Context) AnimationFadeResponseOutput {
	return o
}

// The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s
func (o AnimationFadeResponseOutput) EndTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationFadeResponse) string { return v.EndTimeOffset }).(pulumi.StringOutput)
}

// Type of fade animation: `FADE_IN` or `FADE_OUT`.
func (o AnimationFadeResponseOutput) FadeType() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationFadeResponse) string { return v.FadeType }).(pulumi.StringOutput)
}

// The time to start the fade animation, in seconds. Default: 0
func (o AnimationFadeResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationFadeResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationFadeResponseOutput) Xy() NormalizedCoordinateResponseOutput {
	return o.ApplyT(func(v AnimationFadeResponse) NormalizedCoordinateResponse { return v.Xy }).(NormalizedCoordinateResponseOutput)
}

// Animation types.
type AnimationResponse struct {
	// End previous animation.
	AnimationEnd AnimationEndResponse `pulumi:"animationEnd"`
	// Display overlay object with fade animation.
	AnimationFade AnimationFadeResponse `pulumi:"animationFade"`
	// Display static overlay object.
	AnimationStatic AnimationStaticResponse `pulumi:"animationStatic"`
}

// AnimationResponseInput is an input type that accepts AnimationResponseArgs and AnimationResponseOutput values.
// You can construct a concrete instance of `AnimationResponseInput` via:
//
//          AnimationResponseArgs{...}
type AnimationResponseInput interface {
	pulumi.Input

	ToAnimationResponseOutput() AnimationResponseOutput
	ToAnimationResponseOutputWithContext(context.Context) AnimationResponseOutput
}

// Animation types.
type AnimationResponseArgs struct {
	// End previous animation.
	AnimationEnd AnimationEndResponseInput `pulumi:"animationEnd"`
	// Display overlay object with fade animation.
	AnimationFade AnimationFadeResponseInput `pulumi:"animationFade"`
	// Display static overlay object.
	AnimationStatic AnimationStaticResponseInput `pulumi:"animationStatic"`
}

func (AnimationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationResponse)(nil)).Elem()
}

func (i AnimationResponseArgs) ToAnimationResponseOutput() AnimationResponseOutput {
	return i.ToAnimationResponseOutputWithContext(context.Background())
}

func (i AnimationResponseArgs) ToAnimationResponseOutputWithContext(ctx context.Context) AnimationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationResponseOutput)
}

// AnimationResponseArrayInput is an input type that accepts AnimationResponseArray and AnimationResponseArrayOutput values.
// You can construct a concrete instance of `AnimationResponseArrayInput` via:
//
//          AnimationResponseArray{ AnimationResponseArgs{...} }
type AnimationResponseArrayInput interface {
	pulumi.Input

	ToAnimationResponseArrayOutput() AnimationResponseArrayOutput
	ToAnimationResponseArrayOutputWithContext(context.Context) AnimationResponseArrayOutput
}

type AnimationResponseArray []AnimationResponseInput

func (AnimationResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnimationResponse)(nil)).Elem()
}

func (i AnimationResponseArray) ToAnimationResponseArrayOutput() AnimationResponseArrayOutput {
	return i.ToAnimationResponseArrayOutputWithContext(context.Background())
}

func (i AnimationResponseArray) ToAnimationResponseArrayOutputWithContext(ctx context.Context) AnimationResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationResponseArrayOutput)
}

// Animation types.
type AnimationResponseOutput struct{ *pulumi.OutputState }

func (AnimationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationResponse)(nil)).Elem()
}

func (o AnimationResponseOutput) ToAnimationResponseOutput() AnimationResponseOutput {
	return o
}

func (o AnimationResponseOutput) ToAnimationResponseOutputWithContext(ctx context.Context) AnimationResponseOutput {
	return o
}

// End previous animation.
func (o AnimationResponseOutput) AnimationEnd() AnimationEndResponseOutput {
	return o.ApplyT(func(v AnimationResponse) AnimationEndResponse { return v.AnimationEnd }).(AnimationEndResponseOutput)
}

// Display overlay object with fade animation.
func (o AnimationResponseOutput) AnimationFade() AnimationFadeResponseOutput {
	return o.ApplyT(func(v AnimationResponse) AnimationFadeResponse { return v.AnimationFade }).(AnimationFadeResponseOutput)
}

// Display static overlay object.
func (o AnimationResponseOutput) AnimationStatic() AnimationStaticResponseOutput {
	return o.ApplyT(func(v AnimationResponse) AnimationStaticResponse { return v.AnimationStatic }).(AnimationStaticResponseOutput)
}

type AnimationResponseArrayOutput struct{ *pulumi.OutputState }

func (AnimationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnimationResponse)(nil)).Elem()
}

func (o AnimationResponseArrayOutput) ToAnimationResponseArrayOutput() AnimationResponseArrayOutput {
	return o
}

func (o AnimationResponseArrayOutput) ToAnimationResponseArrayOutputWithContext(ctx context.Context) AnimationResponseArrayOutput {
	return o
}

func (o AnimationResponseArrayOutput) Index(i pulumi.IntInput) AnimationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnimationResponse {
		return vs[0].([]AnimationResponse)[vs[1].(int)]
	}).(AnimationResponseOutput)
}

// Display static overlay object.
type AnimationStatic struct {
	// The time to start displaying the overlay object, in seconds. Default: 0
	StartTimeOffset *string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy *NormalizedCoordinate `pulumi:"xy"`
}

// AnimationStaticInput is an input type that accepts AnimationStaticArgs and AnimationStaticOutput values.
// You can construct a concrete instance of `AnimationStaticInput` via:
//
//          AnimationStaticArgs{...}
type AnimationStaticInput interface {
	pulumi.Input

	ToAnimationStaticOutput() AnimationStaticOutput
	ToAnimationStaticOutputWithContext(context.Context) AnimationStaticOutput
}

// Display static overlay object.
type AnimationStaticArgs struct {
	// The time to start displaying the overlay object, in seconds. Default: 0
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinatePtrInput `pulumi:"xy"`
}

func (AnimationStaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationStatic)(nil)).Elem()
}

func (i AnimationStaticArgs) ToAnimationStaticOutput() AnimationStaticOutput {
	return i.ToAnimationStaticOutputWithContext(context.Background())
}

func (i AnimationStaticArgs) ToAnimationStaticOutputWithContext(ctx context.Context) AnimationStaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationStaticOutput)
}

func (i AnimationStaticArgs) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return i.ToAnimationStaticPtrOutputWithContext(context.Background())
}

func (i AnimationStaticArgs) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationStaticOutput).ToAnimationStaticPtrOutputWithContext(ctx)
}

// AnimationStaticPtrInput is an input type that accepts AnimationStaticArgs, AnimationStaticPtr and AnimationStaticPtrOutput values.
// You can construct a concrete instance of `AnimationStaticPtrInput` via:
//
//          AnimationStaticArgs{...}
//
//  or:
//
//          nil
type AnimationStaticPtrInput interface {
	pulumi.Input

	ToAnimationStaticPtrOutput() AnimationStaticPtrOutput
	ToAnimationStaticPtrOutputWithContext(context.Context) AnimationStaticPtrOutput
}

type animationStaticPtrType AnimationStaticArgs

func AnimationStaticPtr(v *AnimationStaticArgs) AnimationStaticPtrInput {
	return (*animationStaticPtrType)(v)
}

func (*animationStaticPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationStatic)(nil)).Elem()
}

func (i *animationStaticPtrType) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return i.ToAnimationStaticPtrOutputWithContext(context.Background())
}

func (i *animationStaticPtrType) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationStaticPtrOutput)
}

// Display static overlay object.
type AnimationStaticOutput struct{ *pulumi.OutputState }

func (AnimationStaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationStatic)(nil)).Elem()
}

func (o AnimationStaticOutput) ToAnimationStaticOutput() AnimationStaticOutput {
	return o
}

func (o AnimationStaticOutput) ToAnimationStaticOutputWithContext(ctx context.Context) AnimationStaticOutput {
	return o
}

func (o AnimationStaticOutput) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return o.ToAnimationStaticPtrOutputWithContext(context.Background())
}

func (o AnimationStaticOutput) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnimationStatic) *AnimationStatic {
		return &v
	}).(AnimationStaticPtrOutput)
}

// The time to start displaying the overlay object, in seconds. Default: 0
func (o AnimationStaticOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnimationStatic) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationStaticOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v AnimationStatic) *NormalizedCoordinate { return v.Xy }).(NormalizedCoordinatePtrOutput)
}

type AnimationStaticPtrOutput struct{ *pulumi.OutputState }

func (AnimationStaticPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnimationStatic)(nil)).Elem()
}

func (o AnimationStaticPtrOutput) ToAnimationStaticPtrOutput() AnimationStaticPtrOutput {
	return o
}

func (o AnimationStaticPtrOutput) ToAnimationStaticPtrOutputWithContext(ctx context.Context) AnimationStaticPtrOutput {
	return o
}

func (o AnimationStaticPtrOutput) Elem() AnimationStaticOutput {
	return o.ApplyT(func(v *AnimationStatic) AnimationStatic {
		if v != nil {
			return *v
		}
		var ret AnimationStatic
		return ret
	}).(AnimationStaticOutput)
}

// The time to start displaying the overlay object, in seconds. Default: 0
func (o AnimationStaticPtrOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnimationStatic) *string {
		if v == nil {
			return nil
		}
		return v.StartTimeOffset
	}).(pulumi.StringPtrOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationStaticPtrOutput) Xy() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v *AnimationStatic) *NormalizedCoordinate {
		if v == nil {
			return nil
		}
		return v.Xy
	}).(NormalizedCoordinatePtrOutput)
}

// Display static overlay object.
type AnimationStaticResponse struct {
	// The time to start displaying the overlay object, in seconds. Default: 0
	StartTimeOffset string `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinateResponse `pulumi:"xy"`
}

// AnimationStaticResponseInput is an input type that accepts AnimationStaticResponseArgs and AnimationStaticResponseOutput values.
// You can construct a concrete instance of `AnimationStaticResponseInput` via:
//
//          AnimationStaticResponseArgs{...}
type AnimationStaticResponseInput interface {
	pulumi.Input

	ToAnimationStaticResponseOutput() AnimationStaticResponseOutput
	ToAnimationStaticResponseOutputWithContext(context.Context) AnimationStaticResponseOutput
}

// Display static overlay object.
type AnimationStaticResponseArgs struct {
	// The time to start displaying the overlay object, in seconds. Default: 0
	StartTimeOffset pulumi.StringInput `pulumi:"startTimeOffset"`
	// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
	Xy NormalizedCoordinateResponseInput `pulumi:"xy"`
}

func (AnimationStaticResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationStaticResponse)(nil)).Elem()
}

func (i AnimationStaticResponseArgs) ToAnimationStaticResponseOutput() AnimationStaticResponseOutput {
	return i.ToAnimationStaticResponseOutputWithContext(context.Background())
}

func (i AnimationStaticResponseArgs) ToAnimationStaticResponseOutputWithContext(ctx context.Context) AnimationStaticResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnimationStaticResponseOutput)
}

// Display static overlay object.
type AnimationStaticResponseOutput struct{ *pulumi.OutputState }

func (AnimationStaticResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnimationStaticResponse)(nil)).Elem()
}

func (o AnimationStaticResponseOutput) ToAnimationStaticResponseOutput() AnimationStaticResponseOutput {
	return o
}

func (o AnimationStaticResponseOutput) ToAnimationStaticResponseOutputWithContext(ctx context.Context) AnimationStaticResponseOutput {
	return o
}

// The time to start displaying the overlay object, in seconds. Default: 0
func (o AnimationStaticResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v AnimationStaticResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Normalized coordinates based on output video resolution. Valid values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay object. For example, use the x and y coordinates {0,0} to position the top-left corner of the overlay animation in the top-left corner of the output video.
func (o AnimationStaticResponseOutput) Xy() NormalizedCoordinateResponseOutput {
	return o.ApplyT(func(v AnimationStaticResponse) NormalizedCoordinateResponse { return v.Xy }).(NormalizedCoordinateResponseOutput)
}

// Audio preprocessing configuration.
type Audio struct {
	// Enable boosting high frequency components. The default is `false`.
	HighBoost *bool `pulumi:"highBoost"`
	// Enable boosting low frequency components. The default is `false`.
	LowBoost *bool `pulumi:"lowBoost"`
	// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
	Lufs *float64 `pulumi:"lufs"`
}

// AudioInput is an input type that accepts AudioArgs and AudioOutput values.
// You can construct a concrete instance of `AudioInput` via:
//
//          AudioArgs{...}
type AudioInput interface {
	pulumi.Input

	ToAudioOutput() AudioOutput
	ToAudioOutputWithContext(context.Context) AudioOutput
}

// Audio preprocessing configuration.
type AudioArgs struct {
	// Enable boosting high frequency components. The default is `false`.
	HighBoost pulumi.BoolPtrInput `pulumi:"highBoost"`
	// Enable boosting low frequency components. The default is `false`.
	LowBoost pulumi.BoolPtrInput `pulumi:"lowBoost"`
	// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
	Lufs pulumi.Float64PtrInput `pulumi:"lufs"`
}

func (AudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Audio)(nil)).Elem()
}

func (i AudioArgs) ToAudioOutput() AudioOutput {
	return i.ToAudioOutputWithContext(context.Background())
}

func (i AudioArgs) ToAudioOutputWithContext(ctx context.Context) AudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioOutput)
}

func (i AudioArgs) ToAudioPtrOutput() AudioPtrOutput {
	return i.ToAudioPtrOutputWithContext(context.Background())
}

func (i AudioArgs) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioOutput).ToAudioPtrOutputWithContext(ctx)
}

// AudioPtrInput is an input type that accepts AudioArgs, AudioPtr and AudioPtrOutput values.
// You can construct a concrete instance of `AudioPtrInput` via:
//
//          AudioArgs{...}
//
//  or:
//
//          nil
type AudioPtrInput interface {
	pulumi.Input

	ToAudioPtrOutput() AudioPtrOutput
	ToAudioPtrOutputWithContext(context.Context) AudioPtrOutput
}

type audioPtrType AudioArgs

func AudioPtr(v *AudioArgs) AudioPtrInput {
	return (*audioPtrType)(v)
}

func (*audioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Audio)(nil)).Elem()
}

func (i *audioPtrType) ToAudioPtrOutput() AudioPtrOutput {
	return i.ToAudioPtrOutputWithContext(context.Background())
}

func (i *audioPtrType) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioPtrOutput)
}

// Audio preprocessing configuration.
type AudioOutput struct{ *pulumi.OutputState }

func (AudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Audio)(nil)).Elem()
}

func (o AudioOutput) ToAudioOutput() AudioOutput {
	return o
}

func (o AudioOutput) ToAudioOutputWithContext(ctx context.Context) AudioOutput {
	return o
}

func (o AudioOutput) ToAudioPtrOutput() AudioPtrOutput {
	return o.ToAudioPtrOutputWithContext(context.Background())
}

func (o AudioOutput) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Audio) *Audio {
		return &v
	}).(AudioPtrOutput)
}

// Enable boosting high frequency components. The default is `false`.
func (o AudioOutput) HighBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Audio) *bool { return v.HighBoost }).(pulumi.BoolPtrOutput)
}

// Enable boosting low frequency components. The default is `false`.
func (o AudioOutput) LowBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Audio) *bool { return v.LowBoost }).(pulumi.BoolPtrOutput)
}

// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
func (o AudioOutput) Lufs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Audio) *float64 { return v.Lufs }).(pulumi.Float64PtrOutput)
}

type AudioPtrOutput struct{ *pulumi.OutputState }

func (AudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Audio)(nil)).Elem()
}

func (o AudioPtrOutput) ToAudioPtrOutput() AudioPtrOutput {
	return o
}

func (o AudioPtrOutput) ToAudioPtrOutputWithContext(ctx context.Context) AudioPtrOutput {
	return o
}

func (o AudioPtrOutput) Elem() AudioOutput {
	return o.ApplyT(func(v *Audio) Audio {
		if v != nil {
			return *v
		}
		var ret Audio
		return ret
	}).(AudioOutput)
}

// Enable boosting high frequency components. The default is `false`.
func (o AudioPtrOutput) HighBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Audio) *bool {
		if v == nil {
			return nil
		}
		return v.HighBoost
	}).(pulumi.BoolPtrOutput)
}

// Enable boosting low frequency components. The default is `false`.
func (o AudioPtrOutput) LowBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Audio) *bool {
		if v == nil {
			return nil
		}
		return v.LowBoost
	}).(pulumi.BoolPtrOutput)
}

// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
func (o AudioPtrOutput) Lufs() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Audio) *float64 {
		if v == nil {
			return nil
		}
		return v.Lufs
	}).(pulumi.Float64PtrOutput)
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
type AudioAtom struct {
	// List of `Channel`s for this audio stream. for in-depth explanation.
	Channels []AudioChannel `pulumi:"channels"`
	// The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
	Key string `pulumi:"key"`
}

// AudioAtomInput is an input type that accepts AudioAtomArgs and AudioAtomOutput values.
// You can construct a concrete instance of `AudioAtomInput` via:
//
//          AudioAtomArgs{...}
type AudioAtomInput interface {
	pulumi.Input

	ToAudioAtomOutput() AudioAtomOutput
	ToAudioAtomOutputWithContext(context.Context) AudioAtomOutput
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
type AudioAtomArgs struct {
	// List of `Channel`s for this audio stream. for in-depth explanation.
	Channels AudioChannelArrayInput `pulumi:"channels"`
	// The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (AudioAtomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAtom)(nil)).Elem()
}

func (i AudioAtomArgs) ToAudioAtomOutput() AudioAtomOutput {
	return i.ToAudioAtomOutputWithContext(context.Background())
}

func (i AudioAtomArgs) ToAudioAtomOutputWithContext(ctx context.Context) AudioAtomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioAtomOutput)
}

// AudioAtomArrayInput is an input type that accepts AudioAtomArray and AudioAtomArrayOutput values.
// You can construct a concrete instance of `AudioAtomArrayInput` via:
//
//          AudioAtomArray{ AudioAtomArgs{...} }
type AudioAtomArrayInput interface {
	pulumi.Input

	ToAudioAtomArrayOutput() AudioAtomArrayOutput
	ToAudioAtomArrayOutputWithContext(context.Context) AudioAtomArrayOutput
}

type AudioAtomArray []AudioAtomInput

func (AudioAtomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioAtom)(nil)).Elem()
}

func (i AudioAtomArray) ToAudioAtomArrayOutput() AudioAtomArrayOutput {
	return i.ToAudioAtomArrayOutputWithContext(context.Background())
}

func (i AudioAtomArray) ToAudioAtomArrayOutputWithContext(ctx context.Context) AudioAtomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioAtomArrayOutput)
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
type AudioAtomOutput struct{ *pulumi.OutputState }

func (AudioAtomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAtom)(nil)).Elem()
}

func (o AudioAtomOutput) ToAudioAtomOutput() AudioAtomOutput {
	return o
}

func (o AudioAtomOutput) ToAudioAtomOutputWithContext(ctx context.Context) AudioAtomOutput {
	return o
}

// List of `Channel`s for this audio stream. for in-depth explanation.
func (o AudioAtomOutput) Channels() AudioChannelArrayOutput {
	return o.ApplyT(func(v AudioAtom) []AudioChannel { return v.Channels }).(AudioChannelArrayOutput)
}

// The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
func (o AudioAtomOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AudioAtom) string { return v.Key }).(pulumi.StringOutput)
}

type AudioAtomArrayOutput struct{ *pulumi.OutputState }

func (AudioAtomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioAtom)(nil)).Elem()
}

func (o AudioAtomArrayOutput) ToAudioAtomArrayOutput() AudioAtomArrayOutput {
	return o
}

func (o AudioAtomArrayOutput) ToAudioAtomArrayOutputWithContext(ctx context.Context) AudioAtomArrayOutput {
	return o
}

func (o AudioAtomArrayOutput) Index(i pulumi.IntInput) AudioAtomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioAtom {
		return vs[0].([]AudioAtom)[vs[1].(int)]
	}).(AudioAtomOutput)
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
type AudioAtomResponse struct {
	// List of `Channel`s for this audio stream. for in-depth explanation.
	Channels []AudioChannelResponse `pulumi:"channels"`
	// The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
	Key string `pulumi:"key"`
}

// AudioAtomResponseInput is an input type that accepts AudioAtomResponseArgs and AudioAtomResponseOutput values.
// You can construct a concrete instance of `AudioAtomResponseInput` via:
//
//          AudioAtomResponseArgs{...}
type AudioAtomResponseInput interface {
	pulumi.Input

	ToAudioAtomResponseOutput() AudioAtomResponseOutput
	ToAudioAtomResponseOutputWithContext(context.Context) AudioAtomResponseOutput
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
type AudioAtomResponseArgs struct {
	// List of `Channel`s for this audio stream. for in-depth explanation.
	Channels AudioChannelResponseArrayInput `pulumi:"channels"`
	// The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (AudioAtomResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAtomResponse)(nil)).Elem()
}

func (i AudioAtomResponseArgs) ToAudioAtomResponseOutput() AudioAtomResponseOutput {
	return i.ToAudioAtomResponseOutputWithContext(context.Background())
}

func (i AudioAtomResponseArgs) ToAudioAtomResponseOutputWithContext(ctx context.Context) AudioAtomResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioAtomResponseOutput)
}

// AudioAtomResponseArrayInput is an input type that accepts AudioAtomResponseArray and AudioAtomResponseArrayOutput values.
// You can construct a concrete instance of `AudioAtomResponseArrayInput` via:
//
//          AudioAtomResponseArray{ AudioAtomResponseArgs{...} }
type AudioAtomResponseArrayInput interface {
	pulumi.Input

	ToAudioAtomResponseArrayOutput() AudioAtomResponseArrayOutput
	ToAudioAtomResponseArrayOutputWithContext(context.Context) AudioAtomResponseArrayOutput
}

type AudioAtomResponseArray []AudioAtomResponseInput

func (AudioAtomResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioAtomResponse)(nil)).Elem()
}

func (i AudioAtomResponseArray) ToAudioAtomResponseArrayOutput() AudioAtomResponseArrayOutput {
	return i.ToAudioAtomResponseArrayOutputWithContext(context.Background())
}

func (i AudioAtomResponseArray) ToAudioAtomResponseArrayOutputWithContext(ctx context.Context) AudioAtomResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioAtomResponseArrayOutput)
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
type AudioAtomResponseOutput struct{ *pulumi.OutputState }

func (AudioAtomResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioAtomResponse)(nil)).Elem()
}

func (o AudioAtomResponseOutput) ToAudioAtomResponseOutput() AudioAtomResponseOutput {
	return o
}

func (o AudioAtomResponseOutput) ToAudioAtomResponseOutputWithContext(ctx context.Context) AudioAtomResponseOutput {
	return o
}

// List of `Channel`s for this audio stream. for in-depth explanation.
func (o AudioAtomResponseOutput) Channels() AudioChannelResponseArrayOutput {
	return o.ApplyT(func(v AudioAtomResponse) []AudioChannelResponse { return v.Channels }).(AudioChannelResponseArrayOutput)
}

// The `EditAtom.key` that references the atom with audio inputs in the `Job.edit_list`.
func (o AudioAtomResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AudioAtomResponse) string { return v.Key }).(pulumi.StringOutput)
}

type AudioAtomResponseArrayOutput struct{ *pulumi.OutputState }

func (AudioAtomResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioAtomResponse)(nil)).Elem()
}

func (o AudioAtomResponseArrayOutput) ToAudioAtomResponseArrayOutput() AudioAtomResponseArrayOutput {
	return o
}

func (o AudioAtomResponseArrayOutput) ToAudioAtomResponseArrayOutputWithContext(ctx context.Context) AudioAtomResponseArrayOutput {
	return o
}

func (o AudioAtomResponseArrayOutput) Index(i pulumi.IntInput) AudioAtomResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioAtomResponse {
		return vs[0].([]AudioAtomResponse)[vs[1].(int)]
	}).(AudioAtomResponseOutput)
}

// The audio channel.
type AudioChannel struct {
	// List of `Job.inputs` for this audio channel.
	Inputs []AudioChannelInputType `pulumi:"inputs"`
}

// AudioChannelInput is an input type that accepts AudioChannelArgs and AudioChannelOutput values.
// You can construct a concrete instance of `AudioChannelInput` via:
//
//          AudioChannelArgs{...}
type AudioChannelInput interface {
	pulumi.Input

	ToAudioChannelOutput() AudioChannelOutput
	ToAudioChannelOutputWithContext(context.Context) AudioChannelOutput
}

// The audio channel.
type AudioChannelArgs struct {
	// List of `Job.inputs` for this audio channel.
	Inputs AudioChannelInputTypeArrayInput `pulumi:"inputs"`
}

func (AudioChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannel)(nil)).Elem()
}

func (i AudioChannelArgs) ToAudioChannelOutput() AudioChannelOutput {
	return i.ToAudioChannelOutputWithContext(context.Background())
}

func (i AudioChannelArgs) ToAudioChannelOutputWithContext(ctx context.Context) AudioChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelOutput)
}

// AudioChannelArrayInput is an input type that accepts AudioChannelArray and AudioChannelArrayOutput values.
// You can construct a concrete instance of `AudioChannelArrayInput` via:
//
//          AudioChannelArray{ AudioChannelArgs{...} }
type AudioChannelArrayInput interface {
	pulumi.Input

	ToAudioChannelArrayOutput() AudioChannelArrayOutput
	ToAudioChannelArrayOutputWithContext(context.Context) AudioChannelArrayOutput
}

type AudioChannelArray []AudioChannelInput

func (AudioChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannel)(nil)).Elem()
}

func (i AudioChannelArray) ToAudioChannelArrayOutput() AudioChannelArrayOutput {
	return i.ToAudioChannelArrayOutputWithContext(context.Background())
}

func (i AudioChannelArray) ToAudioChannelArrayOutputWithContext(ctx context.Context) AudioChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelArrayOutput)
}

// The audio channel.
type AudioChannelOutput struct{ *pulumi.OutputState }

func (AudioChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannel)(nil)).Elem()
}

func (o AudioChannelOutput) ToAudioChannelOutput() AudioChannelOutput {
	return o
}

func (o AudioChannelOutput) ToAudioChannelOutputWithContext(ctx context.Context) AudioChannelOutput {
	return o
}

// List of `Job.inputs` for this audio channel.
func (o AudioChannelOutput) Inputs() AudioChannelInputTypeArrayOutput {
	return o.ApplyT(func(v AudioChannel) []AudioChannelInputType { return v.Inputs }).(AudioChannelInputTypeArrayOutput)
}

type AudioChannelArrayOutput struct{ *pulumi.OutputState }

func (AudioChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannel)(nil)).Elem()
}

func (o AudioChannelArrayOutput) ToAudioChannelArrayOutput() AudioChannelArrayOutput {
	return o
}

func (o AudioChannelArrayOutput) ToAudioChannelArrayOutputWithContext(ctx context.Context) AudioChannelArrayOutput {
	return o
}

func (o AudioChannelArrayOutput) Index(i pulumi.IntInput) AudioChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioChannel {
		return vs[0].([]AudioChannel)[vs[1].(int)]
	}).(AudioChannelOutput)
}

// Identifies which input file, track, and channel should be used.
type AudioChannelInputType struct {
	// The zero-based index of the channel in the input file.
	Channel int `pulumi:"channel"`
	// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
	GainDb *float64 `pulumi:"gainDb"`
	// The `Input.key` that identifies the input file.
	Key string `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track int `pulumi:"track"`
}

// AudioChannelInputTypeInput is an input type that accepts AudioChannelInputTypeArgs and AudioChannelInputTypeOutput values.
// You can construct a concrete instance of `AudioChannelInputTypeInput` via:
//
//          AudioChannelInputTypeArgs{...}
type AudioChannelInputTypeInput interface {
	pulumi.Input

	ToAudioChannelInputTypeOutput() AudioChannelInputTypeOutput
	ToAudioChannelInputTypeOutputWithContext(context.Context) AudioChannelInputTypeOutput
}

// Identifies which input file, track, and channel should be used.
type AudioChannelInputTypeArgs struct {
	// The zero-based index of the channel in the input file.
	Channel pulumi.IntInput `pulumi:"channel"`
	// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
	GainDb pulumi.Float64PtrInput `pulumi:"gainDb"`
	// The `Input.key` that identifies the input file.
	Key pulumi.StringInput `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track pulumi.IntInput `pulumi:"track"`
}

func (AudioChannelInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannelInputType)(nil)).Elem()
}

func (i AudioChannelInputTypeArgs) ToAudioChannelInputTypeOutput() AudioChannelInputTypeOutput {
	return i.ToAudioChannelInputTypeOutputWithContext(context.Background())
}

func (i AudioChannelInputTypeArgs) ToAudioChannelInputTypeOutputWithContext(ctx context.Context) AudioChannelInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelInputTypeOutput)
}

// AudioChannelInputTypeArrayInput is an input type that accepts AudioChannelInputTypeArray and AudioChannelInputTypeArrayOutput values.
// You can construct a concrete instance of `AudioChannelInputTypeArrayInput` via:
//
//          AudioChannelInputTypeArray{ AudioChannelInputTypeArgs{...} }
type AudioChannelInputTypeArrayInput interface {
	pulumi.Input

	ToAudioChannelInputTypeArrayOutput() AudioChannelInputTypeArrayOutput
	ToAudioChannelInputTypeArrayOutputWithContext(context.Context) AudioChannelInputTypeArrayOutput
}

type AudioChannelInputTypeArray []AudioChannelInputTypeInput

func (AudioChannelInputTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannelInputType)(nil)).Elem()
}

func (i AudioChannelInputTypeArray) ToAudioChannelInputTypeArrayOutput() AudioChannelInputTypeArrayOutput {
	return i.ToAudioChannelInputTypeArrayOutputWithContext(context.Background())
}

func (i AudioChannelInputTypeArray) ToAudioChannelInputTypeArrayOutputWithContext(ctx context.Context) AudioChannelInputTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelInputTypeArrayOutput)
}

// Identifies which input file, track, and channel should be used.
type AudioChannelInputTypeOutput struct{ *pulumi.OutputState }

func (AudioChannelInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannelInputType)(nil)).Elem()
}

func (o AudioChannelInputTypeOutput) ToAudioChannelInputTypeOutput() AudioChannelInputTypeOutput {
	return o
}

func (o AudioChannelInputTypeOutput) ToAudioChannelInputTypeOutputWithContext(ctx context.Context) AudioChannelInputTypeOutput {
	return o
}

// The zero-based index of the channel in the input file.
func (o AudioChannelInputTypeOutput) Channel() pulumi.IntOutput {
	return o.ApplyT(func(v AudioChannelInputType) int { return v.Channel }).(pulumi.IntOutput)
}

// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
func (o AudioChannelInputTypeOutput) GainDb() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v AudioChannelInputType) *float64 { return v.GainDb }).(pulumi.Float64PtrOutput)
}

// The `Input.key` that identifies the input file.
func (o AudioChannelInputTypeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AudioChannelInputType) string { return v.Key }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o AudioChannelInputTypeOutput) Track() pulumi.IntOutput {
	return o.ApplyT(func(v AudioChannelInputType) int { return v.Track }).(pulumi.IntOutput)
}

type AudioChannelInputTypeArrayOutput struct{ *pulumi.OutputState }

func (AudioChannelInputTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannelInputType)(nil)).Elem()
}

func (o AudioChannelInputTypeArrayOutput) ToAudioChannelInputTypeArrayOutput() AudioChannelInputTypeArrayOutput {
	return o
}

func (o AudioChannelInputTypeArrayOutput) ToAudioChannelInputTypeArrayOutputWithContext(ctx context.Context) AudioChannelInputTypeArrayOutput {
	return o
}

func (o AudioChannelInputTypeArrayOutput) Index(i pulumi.IntInput) AudioChannelInputTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioChannelInputType {
		return vs[0].([]AudioChannelInputType)[vs[1].(int)]
	}).(AudioChannelInputTypeOutput)
}

// Identifies which input file, track, and channel should be used.
type AudioChannelInputResponse struct {
	// The zero-based index of the channel in the input file.
	Channel int `pulumi:"channel"`
	// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
	GainDb float64 `pulumi:"gainDb"`
	// The `Input.key` that identifies the input file.
	Key string `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track int `pulumi:"track"`
}

// AudioChannelInputResponseInput is an input type that accepts AudioChannelInputResponseArgs and AudioChannelInputResponseOutput values.
// You can construct a concrete instance of `AudioChannelInputResponseInput` via:
//
//          AudioChannelInputResponseArgs{...}
type AudioChannelInputResponseInput interface {
	pulumi.Input

	ToAudioChannelInputResponseOutput() AudioChannelInputResponseOutput
	ToAudioChannelInputResponseOutputWithContext(context.Context) AudioChannelInputResponseOutput
}

// Identifies which input file, track, and channel should be used.
type AudioChannelInputResponseArgs struct {
	// The zero-based index of the channel in the input file.
	Channel pulumi.IntInput `pulumi:"channel"`
	// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
	GainDb pulumi.Float64Input `pulumi:"gainDb"`
	// The `Input.key` that identifies the input file.
	Key pulumi.StringInput `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track pulumi.IntInput `pulumi:"track"`
}

func (AudioChannelInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannelInputResponse)(nil)).Elem()
}

func (i AudioChannelInputResponseArgs) ToAudioChannelInputResponseOutput() AudioChannelInputResponseOutput {
	return i.ToAudioChannelInputResponseOutputWithContext(context.Background())
}

func (i AudioChannelInputResponseArgs) ToAudioChannelInputResponseOutputWithContext(ctx context.Context) AudioChannelInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelInputResponseOutput)
}

// AudioChannelInputResponseArrayInput is an input type that accepts AudioChannelInputResponseArray and AudioChannelInputResponseArrayOutput values.
// You can construct a concrete instance of `AudioChannelInputResponseArrayInput` via:
//
//          AudioChannelInputResponseArray{ AudioChannelInputResponseArgs{...} }
type AudioChannelInputResponseArrayInput interface {
	pulumi.Input

	ToAudioChannelInputResponseArrayOutput() AudioChannelInputResponseArrayOutput
	ToAudioChannelInputResponseArrayOutputWithContext(context.Context) AudioChannelInputResponseArrayOutput
}

type AudioChannelInputResponseArray []AudioChannelInputResponseInput

func (AudioChannelInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannelInputResponse)(nil)).Elem()
}

func (i AudioChannelInputResponseArray) ToAudioChannelInputResponseArrayOutput() AudioChannelInputResponseArrayOutput {
	return i.ToAudioChannelInputResponseArrayOutputWithContext(context.Background())
}

func (i AudioChannelInputResponseArray) ToAudioChannelInputResponseArrayOutputWithContext(ctx context.Context) AudioChannelInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelInputResponseArrayOutput)
}

// Identifies which input file, track, and channel should be used.
type AudioChannelInputResponseOutput struct{ *pulumi.OutputState }

func (AudioChannelInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannelInputResponse)(nil)).Elem()
}

func (o AudioChannelInputResponseOutput) ToAudioChannelInputResponseOutput() AudioChannelInputResponseOutput {
	return o
}

func (o AudioChannelInputResponseOutput) ToAudioChannelInputResponseOutputWithContext(ctx context.Context) AudioChannelInputResponseOutput {
	return o
}

// The zero-based index of the channel in the input file.
func (o AudioChannelInputResponseOutput) Channel() pulumi.IntOutput {
	return o.ApplyT(func(v AudioChannelInputResponse) int { return v.Channel }).(pulumi.IntOutput)
}

// Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.
func (o AudioChannelInputResponseOutput) GainDb() pulumi.Float64Output {
	return o.ApplyT(func(v AudioChannelInputResponse) float64 { return v.GainDb }).(pulumi.Float64Output)
}

// The `Input.key` that identifies the input file.
func (o AudioChannelInputResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v AudioChannelInputResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o AudioChannelInputResponseOutput) Track() pulumi.IntOutput {
	return o.ApplyT(func(v AudioChannelInputResponse) int { return v.Track }).(pulumi.IntOutput)
}

type AudioChannelInputResponseArrayOutput struct{ *pulumi.OutputState }

func (AudioChannelInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannelInputResponse)(nil)).Elem()
}

func (o AudioChannelInputResponseArrayOutput) ToAudioChannelInputResponseArrayOutput() AudioChannelInputResponseArrayOutput {
	return o
}

func (o AudioChannelInputResponseArrayOutput) ToAudioChannelInputResponseArrayOutputWithContext(ctx context.Context) AudioChannelInputResponseArrayOutput {
	return o
}

func (o AudioChannelInputResponseArrayOutput) Index(i pulumi.IntInput) AudioChannelInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioChannelInputResponse {
		return vs[0].([]AudioChannelInputResponse)[vs[1].(int)]
	}).(AudioChannelInputResponseOutput)
}

// The audio channel.
type AudioChannelResponse struct {
	// List of `Job.inputs` for this audio channel.
	Inputs []AudioChannelInputResponse `pulumi:"inputs"`
}

// AudioChannelResponseInput is an input type that accepts AudioChannelResponseArgs and AudioChannelResponseOutput values.
// You can construct a concrete instance of `AudioChannelResponseInput` via:
//
//          AudioChannelResponseArgs{...}
type AudioChannelResponseInput interface {
	pulumi.Input

	ToAudioChannelResponseOutput() AudioChannelResponseOutput
	ToAudioChannelResponseOutputWithContext(context.Context) AudioChannelResponseOutput
}

// The audio channel.
type AudioChannelResponseArgs struct {
	// List of `Job.inputs` for this audio channel.
	Inputs AudioChannelInputResponseArrayInput `pulumi:"inputs"`
}

func (AudioChannelResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannelResponse)(nil)).Elem()
}

func (i AudioChannelResponseArgs) ToAudioChannelResponseOutput() AudioChannelResponseOutput {
	return i.ToAudioChannelResponseOutputWithContext(context.Background())
}

func (i AudioChannelResponseArgs) ToAudioChannelResponseOutputWithContext(ctx context.Context) AudioChannelResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelResponseOutput)
}

// AudioChannelResponseArrayInput is an input type that accepts AudioChannelResponseArray and AudioChannelResponseArrayOutput values.
// You can construct a concrete instance of `AudioChannelResponseArrayInput` via:
//
//          AudioChannelResponseArray{ AudioChannelResponseArgs{...} }
type AudioChannelResponseArrayInput interface {
	pulumi.Input

	ToAudioChannelResponseArrayOutput() AudioChannelResponseArrayOutput
	ToAudioChannelResponseArrayOutputWithContext(context.Context) AudioChannelResponseArrayOutput
}

type AudioChannelResponseArray []AudioChannelResponseInput

func (AudioChannelResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannelResponse)(nil)).Elem()
}

func (i AudioChannelResponseArray) ToAudioChannelResponseArrayOutput() AudioChannelResponseArrayOutput {
	return i.ToAudioChannelResponseArrayOutputWithContext(context.Background())
}

func (i AudioChannelResponseArray) ToAudioChannelResponseArrayOutputWithContext(ctx context.Context) AudioChannelResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioChannelResponseArrayOutput)
}

// The audio channel.
type AudioChannelResponseOutput struct{ *pulumi.OutputState }

func (AudioChannelResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioChannelResponse)(nil)).Elem()
}

func (o AudioChannelResponseOutput) ToAudioChannelResponseOutput() AudioChannelResponseOutput {
	return o
}

func (o AudioChannelResponseOutput) ToAudioChannelResponseOutputWithContext(ctx context.Context) AudioChannelResponseOutput {
	return o
}

// List of `Job.inputs` for this audio channel.
func (o AudioChannelResponseOutput) Inputs() AudioChannelInputResponseArrayOutput {
	return o.ApplyT(func(v AudioChannelResponse) []AudioChannelInputResponse { return v.Inputs }).(AudioChannelInputResponseArrayOutput)
}

type AudioChannelResponseArrayOutput struct{ *pulumi.OutputState }

func (AudioChannelResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AudioChannelResponse)(nil)).Elem()
}

func (o AudioChannelResponseArrayOutput) ToAudioChannelResponseArrayOutput() AudioChannelResponseArrayOutput {
	return o
}

func (o AudioChannelResponseArrayOutput) ToAudioChannelResponseArrayOutputWithContext(ctx context.Context) AudioChannelResponseArrayOutput {
	return o
}

func (o AudioChannelResponseArrayOutput) Index(i pulumi.IntInput) AudioChannelResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AudioChannelResponse {
		return vs[0].([]AudioChannelResponse)[vs[1].(int)]
	}).(AudioChannelResponseOutput)
}

// Audio preprocessing configuration.
type AudioResponse struct {
	// Enable boosting high frequency components. The default is `false`.
	HighBoost bool `pulumi:"highBoost"`
	// Enable boosting low frequency components. The default is `false`.
	LowBoost bool `pulumi:"lowBoost"`
	// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
	Lufs float64 `pulumi:"lufs"`
}

// AudioResponseInput is an input type that accepts AudioResponseArgs and AudioResponseOutput values.
// You can construct a concrete instance of `AudioResponseInput` via:
//
//          AudioResponseArgs{...}
type AudioResponseInput interface {
	pulumi.Input

	ToAudioResponseOutput() AudioResponseOutput
	ToAudioResponseOutputWithContext(context.Context) AudioResponseOutput
}

// Audio preprocessing configuration.
type AudioResponseArgs struct {
	// Enable boosting high frequency components. The default is `false`.
	HighBoost pulumi.BoolInput `pulumi:"highBoost"`
	// Enable boosting low frequency components. The default is `false`.
	LowBoost pulumi.BoolInput `pulumi:"lowBoost"`
	// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
	Lufs pulumi.Float64Input `pulumi:"lufs"`
}

func (AudioResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioResponse)(nil)).Elem()
}

func (i AudioResponseArgs) ToAudioResponseOutput() AudioResponseOutput {
	return i.ToAudioResponseOutputWithContext(context.Background())
}

func (i AudioResponseArgs) ToAudioResponseOutputWithContext(ctx context.Context) AudioResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioResponseOutput)
}

// Audio preprocessing configuration.
type AudioResponseOutput struct{ *pulumi.OutputState }

func (AudioResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioResponse)(nil)).Elem()
}

func (o AudioResponseOutput) ToAudioResponseOutput() AudioResponseOutput {
	return o
}

func (o AudioResponseOutput) ToAudioResponseOutputWithContext(ctx context.Context) AudioResponseOutput {
	return o
}

// Enable boosting high frequency components. The default is `false`.
func (o AudioResponseOutput) HighBoost() pulumi.BoolOutput {
	return o.ApplyT(func(v AudioResponse) bool { return v.HighBoost }).(pulumi.BoolOutput)
}

// Enable boosting low frequency components. The default is `false`.
func (o AudioResponseOutput) LowBoost() pulumi.BoolOutput {
	return o.ApplyT(func(v AudioResponse) bool { return v.LowBoost }).(pulumi.BoolOutput)
}

// Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization
func (o AudioResponseOutput) Lufs() pulumi.Float64Output {
	return o.ApplyT(func(v AudioResponse) float64 { return v.Lufs }).(pulumi.Float64Output)
}

// Audio stream resource.
type AudioStream struct {
	// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Number of audio channels. Must be between 1 and 6. The default is 2.
	ChannelCount *int `pulumi:"channelCount"`
	// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency
	ChannelLayout []string `pulumi:"channelLayout"`
	// The codec for this audio stream. The default is `"aac"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'
	Codec *string `pulumi:"codec"`
	// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
	Mapping []AudioAtom `pulumi:"mapping"`
	// The audio sample rate in Hertz. The default is 48000 Hertz.
	SampleRateHertz *int `pulumi:"sampleRateHertz"`
}

// AudioStreamInput is an input type that accepts AudioStreamArgs and AudioStreamOutput values.
// You can construct a concrete instance of `AudioStreamInput` via:
//
//          AudioStreamArgs{...}
type AudioStreamInput interface {
	pulumi.Input

	ToAudioStreamOutput() AudioStreamOutput
	ToAudioStreamOutputWithContext(context.Context) AudioStreamOutput
}

// Audio stream resource.
type AudioStreamArgs struct {
	// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Number of audio channels. Must be between 1 and 6. The default is 2.
	ChannelCount pulumi.IntPtrInput `pulumi:"channelCount"`
	// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency
	ChannelLayout pulumi.StringArrayInput `pulumi:"channelLayout"`
	// The codec for this audio stream. The default is `"aac"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
	Mapping AudioAtomArrayInput `pulumi:"mapping"`
	// The audio sample rate in Hertz. The default is 48000 Hertz.
	SampleRateHertz pulumi.IntPtrInput `pulumi:"sampleRateHertz"`
}

func (AudioStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioStream)(nil)).Elem()
}

func (i AudioStreamArgs) ToAudioStreamOutput() AudioStreamOutput {
	return i.ToAudioStreamOutputWithContext(context.Background())
}

func (i AudioStreamArgs) ToAudioStreamOutputWithContext(ctx context.Context) AudioStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioStreamOutput)
}

func (i AudioStreamArgs) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return i.ToAudioStreamPtrOutputWithContext(context.Background())
}

func (i AudioStreamArgs) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioStreamOutput).ToAudioStreamPtrOutputWithContext(ctx)
}

// AudioStreamPtrInput is an input type that accepts AudioStreamArgs, AudioStreamPtr and AudioStreamPtrOutput values.
// You can construct a concrete instance of `AudioStreamPtrInput` via:
//
//          AudioStreamArgs{...}
//
//  or:
//
//          nil
type AudioStreamPtrInput interface {
	pulumi.Input

	ToAudioStreamPtrOutput() AudioStreamPtrOutput
	ToAudioStreamPtrOutputWithContext(context.Context) AudioStreamPtrOutput
}

type audioStreamPtrType AudioStreamArgs

func AudioStreamPtr(v *AudioStreamArgs) AudioStreamPtrInput {
	return (*audioStreamPtrType)(v)
}

func (*audioStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AudioStream)(nil)).Elem()
}

func (i *audioStreamPtrType) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return i.ToAudioStreamPtrOutputWithContext(context.Background())
}

func (i *audioStreamPtrType) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioStreamPtrOutput)
}

// Audio stream resource.
type AudioStreamOutput struct{ *pulumi.OutputState }

func (AudioStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioStream)(nil)).Elem()
}

func (o AudioStreamOutput) ToAudioStreamOutput() AudioStreamOutput {
	return o
}

func (o AudioStreamOutput) ToAudioStreamOutputWithContext(ctx context.Context) AudioStreamOutput {
	return o
}

func (o AudioStreamOutput) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return o.ToAudioStreamPtrOutputWithContext(context.Background())
}

func (o AudioStreamOutput) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AudioStream) *AudioStream {
		return &v
	}).(AudioStreamPtrOutput)
}

// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
func (o AudioStreamOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStream) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Number of audio channels. Must be between 1 and 6. The default is 2.
func (o AudioStreamOutput) ChannelCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AudioStream) *int { return v.ChannelCount }).(pulumi.IntPtrOutput)
}

// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency
func (o AudioStreamOutput) ChannelLayout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AudioStream) []string { return v.ChannelLayout }).(pulumi.StringArrayOutput)
}

// The codec for this audio stream. The default is `"aac"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'
func (o AudioStreamOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AudioStream) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
func (o AudioStreamOutput) Mapping() AudioAtomArrayOutput {
	return o.ApplyT(func(v AudioStream) []AudioAtom { return v.Mapping }).(AudioAtomArrayOutput)
}

// The audio sample rate in Hertz. The default is 48000 Hertz.
func (o AudioStreamOutput) SampleRateHertz() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AudioStream) *int { return v.SampleRateHertz }).(pulumi.IntPtrOutput)
}

type AudioStreamPtrOutput struct{ *pulumi.OutputState }

func (AudioStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AudioStream)(nil)).Elem()
}

func (o AudioStreamPtrOutput) ToAudioStreamPtrOutput() AudioStreamPtrOutput {
	return o
}

func (o AudioStreamPtrOutput) ToAudioStreamPtrOutputWithContext(ctx context.Context) AudioStreamPtrOutput {
	return o
}

func (o AudioStreamPtrOutput) Elem() AudioStreamOutput {
	return o.ApplyT(func(v *AudioStream) AudioStream {
		if v != nil {
			return *v
		}
		var ret AudioStream
		return ret
	}).(AudioStreamOutput)
}

// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
func (o AudioStreamPtrOutput) BitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AudioStream) *int {
		if v == nil {
			return nil
		}
		return &v.BitrateBps
	}).(pulumi.IntPtrOutput)
}

// Number of audio channels. Must be between 1 and 6. The default is 2.
func (o AudioStreamPtrOutput) ChannelCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AudioStream) *int {
		if v == nil {
			return nil
		}
		return v.ChannelCount
	}).(pulumi.IntPtrOutput)
}

// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency
func (o AudioStreamPtrOutput) ChannelLayout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AudioStream) []string {
		if v == nil {
			return nil
		}
		return v.ChannelLayout
	}).(pulumi.StringArrayOutput)
}

// The codec for this audio stream. The default is `"aac"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'
func (o AudioStreamPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AudioStream) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
func (o AudioStreamPtrOutput) Mapping() AudioAtomArrayOutput {
	return o.ApplyT(func(v *AudioStream) []AudioAtom {
		if v == nil {
			return nil
		}
		return v.Mapping
	}).(AudioAtomArrayOutput)
}

// The audio sample rate in Hertz. The default is 48000 Hertz.
func (o AudioStreamPtrOutput) SampleRateHertz() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AudioStream) *int {
		if v == nil {
			return nil
		}
		return v.SampleRateHertz
	}).(pulumi.IntPtrOutput)
}

// Audio stream resource.
type AudioStreamResponse struct {
	// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Number of audio channels. Must be between 1 and 6. The default is 2.
	ChannelCount int `pulumi:"channelCount"`
	// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency
	ChannelLayout []string `pulumi:"channelLayout"`
	// The codec for this audio stream. The default is `"aac"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'
	Codec string `pulumi:"codec"`
	// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
	Mapping []AudioAtomResponse `pulumi:"mapping"`
	// The audio sample rate in Hertz. The default is 48000 Hertz.
	SampleRateHertz int `pulumi:"sampleRateHertz"`
}

// AudioStreamResponseInput is an input type that accepts AudioStreamResponseArgs and AudioStreamResponseOutput values.
// You can construct a concrete instance of `AudioStreamResponseInput` via:
//
//          AudioStreamResponseArgs{...}
type AudioStreamResponseInput interface {
	pulumi.Input

	ToAudioStreamResponseOutput() AudioStreamResponseOutput
	ToAudioStreamResponseOutputWithContext(context.Context) AudioStreamResponseOutput
}

// Audio stream resource.
type AudioStreamResponseArgs struct {
	// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Number of audio channels. Must be between 1 and 6. The default is 2.
	ChannelCount pulumi.IntInput `pulumi:"channelCount"`
	// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency
	ChannelLayout pulumi.StringArrayInput `pulumi:"channelLayout"`
	// The codec for this audio stream. The default is `"aac"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'
	Codec pulumi.StringInput `pulumi:"codec"`
	// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
	Mapping AudioAtomResponseArrayInput `pulumi:"mapping"`
	// The audio sample rate in Hertz. The default is 48000 Hertz.
	SampleRateHertz pulumi.IntInput `pulumi:"sampleRateHertz"`
}

func (AudioStreamResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioStreamResponse)(nil)).Elem()
}

func (i AudioStreamResponseArgs) ToAudioStreamResponseOutput() AudioStreamResponseOutput {
	return i.ToAudioStreamResponseOutputWithContext(context.Background())
}

func (i AudioStreamResponseArgs) ToAudioStreamResponseOutputWithContext(ctx context.Context) AudioStreamResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AudioStreamResponseOutput)
}

// Audio stream resource.
type AudioStreamResponseOutput struct{ *pulumi.OutputState }

func (AudioStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AudioStreamResponse)(nil)).Elem()
}

func (o AudioStreamResponseOutput) ToAudioStreamResponseOutput() AudioStreamResponseOutput {
	return o
}

func (o AudioStreamResponseOutput) ToAudioStreamResponseOutputWithContext(ctx context.Context) AudioStreamResponseOutput {
	return o
}

// Audio bitrate in bits per second. Must be between 1 and 10,000,000.
func (o AudioStreamResponseOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStreamResponse) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Number of audio channels. Must be between 1 and 6. The default is 2.
func (o AudioStreamResponseOutput) ChannelCount() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStreamResponse) int { return v.ChannelCount }).(pulumi.IntOutput)
}

// A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `["fl", "fr"]`. Supported channel names: - 'fl' - Front left channel - 'fr' - Front right channel - 'sl' - Side left channel - 'sr' - Side right channel - 'fc' - Front center channel - 'lfe' - Low frequency
func (o AudioStreamResponseOutput) ChannelLayout() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AudioStreamResponse) []string { return v.ChannelLayout }).(pulumi.StringArrayOutput)
}

// The codec for this audio stream. The default is `"aac"`. Supported audio codecs: - 'aac' - 'aac-he' - 'aac-he-v2' - 'mp3' - 'ac3' - 'eac3'
func (o AudioStreamResponseOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v AudioStreamResponse) string { return v.Codec }).(pulumi.StringOutput)
}

// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
func (o AudioStreamResponseOutput) Mapping() AudioAtomResponseArrayOutput {
	return o.ApplyT(func(v AudioStreamResponse) []AudioAtomResponse { return v.Mapping }).(AudioAtomResponseArrayOutput)
}

// The audio sample rate in Hertz. The default is 48000 Hertz.
func (o AudioStreamResponseOutput) SampleRateHertz() pulumi.IntOutput {
	return o.ApplyT(func(v AudioStreamResponse) int { return v.SampleRateHertz }).(pulumi.IntOutput)
}

// Color preprocessing configuration.
type Color struct {
	// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
	Brightness *float64 `pulumi:"brightness"`
	// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
	Contrast *float64 `pulumi:"contrast"`
	// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
	Saturation *float64 `pulumi:"saturation"`
}

// ColorInput is an input type that accepts ColorArgs and ColorOutput values.
// You can construct a concrete instance of `ColorInput` via:
//
//          ColorArgs{...}
type ColorInput interface {
	pulumi.Input

	ToColorOutput() ColorOutput
	ToColorOutputWithContext(context.Context) ColorOutput
}

// Color preprocessing configuration.
type ColorArgs struct {
	// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
	Brightness pulumi.Float64PtrInput `pulumi:"brightness"`
	// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
	Contrast pulumi.Float64PtrInput `pulumi:"contrast"`
	// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
	Saturation pulumi.Float64PtrInput `pulumi:"saturation"`
}

func (ColorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Color)(nil)).Elem()
}

func (i ColorArgs) ToColorOutput() ColorOutput {
	return i.ToColorOutputWithContext(context.Background())
}

func (i ColorArgs) ToColorOutputWithContext(ctx context.Context) ColorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorOutput)
}

func (i ColorArgs) ToColorPtrOutput() ColorPtrOutput {
	return i.ToColorPtrOutputWithContext(context.Background())
}

func (i ColorArgs) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorOutput).ToColorPtrOutputWithContext(ctx)
}

// ColorPtrInput is an input type that accepts ColorArgs, ColorPtr and ColorPtrOutput values.
// You can construct a concrete instance of `ColorPtrInput` via:
//
//          ColorArgs{...}
//
//  or:
//
//          nil
type ColorPtrInput interface {
	pulumi.Input

	ToColorPtrOutput() ColorPtrOutput
	ToColorPtrOutputWithContext(context.Context) ColorPtrOutput
}

type colorPtrType ColorArgs

func ColorPtr(v *ColorArgs) ColorPtrInput {
	return (*colorPtrType)(v)
}

func (*colorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Color)(nil)).Elem()
}

func (i *colorPtrType) ToColorPtrOutput() ColorPtrOutput {
	return i.ToColorPtrOutputWithContext(context.Background())
}

func (i *colorPtrType) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorPtrOutput)
}

// Color preprocessing configuration.
type ColorOutput struct{ *pulumi.OutputState }

func (ColorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Color)(nil)).Elem()
}

func (o ColorOutput) ToColorOutput() ColorOutput {
	return o
}

func (o ColorOutput) ToColorOutputWithContext(ctx context.Context) ColorOutput {
	return o
}

func (o ColorOutput) ToColorPtrOutput() ColorPtrOutput {
	return o.ToColorPtrOutputWithContext(context.Background())
}

func (o ColorOutput) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Color) *Color {
		return &v
	}).(ColorPtrOutput)
}

// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
func (o ColorOutput) Brightness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Color) *float64 { return v.Brightness }).(pulumi.Float64PtrOutput)
}

// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
func (o ColorOutput) Contrast() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Color) *float64 { return v.Contrast }).(pulumi.Float64PtrOutput)
}

// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
func (o ColorOutput) Saturation() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Color) *float64 { return v.Saturation }).(pulumi.Float64PtrOutput)
}

type ColorPtrOutput struct{ *pulumi.OutputState }

func (ColorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Color)(nil)).Elem()
}

func (o ColorPtrOutput) ToColorPtrOutput() ColorPtrOutput {
	return o
}

func (o ColorPtrOutput) ToColorPtrOutputWithContext(ctx context.Context) ColorPtrOutput {
	return o
}

func (o ColorPtrOutput) Elem() ColorOutput {
	return o.ApplyT(func(v *Color) Color {
		if v != nil {
			return *v
		}
		var ret Color
		return ret
	}).(ColorOutput)
}

// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
func (o ColorPtrOutput) Brightness() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Brightness
	}).(pulumi.Float64PtrOutput)
}

// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
func (o ColorPtrOutput) Contrast() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Contrast
	}).(pulumi.Float64PtrOutput)
}

// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
func (o ColorPtrOutput) Saturation() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Color) *float64 {
		if v == nil {
			return nil
		}
		return v.Saturation
	}).(pulumi.Float64PtrOutput)
}

// Color preprocessing configuration.
type ColorResponse struct {
	// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
	Brightness float64 `pulumi:"brightness"`
	// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
	Contrast float64 `pulumi:"contrast"`
	// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
	Saturation float64 `pulumi:"saturation"`
}

// ColorResponseInput is an input type that accepts ColorResponseArgs and ColorResponseOutput values.
// You can construct a concrete instance of `ColorResponseInput` via:
//
//          ColorResponseArgs{...}
type ColorResponseInput interface {
	pulumi.Input

	ToColorResponseOutput() ColorResponseOutput
	ToColorResponseOutputWithContext(context.Context) ColorResponseOutput
}

// Color preprocessing configuration.
type ColorResponseArgs struct {
	// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
	Brightness pulumi.Float64Input `pulumi:"brightness"`
	// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
	Contrast pulumi.Float64Input `pulumi:"contrast"`
	// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
	Saturation pulumi.Float64Input `pulumi:"saturation"`
}

func (ColorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ColorResponse)(nil)).Elem()
}

func (i ColorResponseArgs) ToColorResponseOutput() ColorResponseOutput {
	return i.ToColorResponseOutputWithContext(context.Background())
}

func (i ColorResponseArgs) ToColorResponseOutputWithContext(ctx context.Context) ColorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorResponseOutput)
}

// Color preprocessing configuration.
type ColorResponseOutput struct{ *pulumi.OutputState }

func (ColorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ColorResponse)(nil)).Elem()
}

func (o ColorResponseOutput) ToColorResponseOutput() ColorResponseOutput {
	return o
}

func (o ColorResponseOutput) ToColorResponseOutputWithContext(ctx context.Context) ColorResponseOutput {
	return o
}

// Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.
func (o ColorResponseOutput) Brightness() pulumi.Float64Output {
	return o.ApplyT(func(v ColorResponse) float64 { return v.Brightness }).(pulumi.Float64Output)
}

// Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.
func (o ColorResponseOutput) Contrast() pulumi.Float64Output {
	return o.ApplyT(func(v ColorResponse) float64 { return v.Contrast }).(pulumi.Float64Output)
}

// Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.
func (o ColorResponseOutput) Saturation() pulumi.Float64Output {
	return o.ApplyT(func(v ColorResponse) float64 { return v.Saturation }).(pulumi.Float64Output)
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type Crop struct {
	// The number of pixels to crop from the bottom. The default is 0.
	BottomPixels *int `pulumi:"bottomPixels"`
	// The number of pixels to crop from the left. The default is 0.
	LeftPixels *int `pulumi:"leftPixels"`
	// The number of pixels to crop from the right. The default is 0.
	RightPixels *int `pulumi:"rightPixels"`
	// The number of pixels to crop from the top. The default is 0.
	TopPixels *int `pulumi:"topPixels"`
}

// CropInput is an input type that accepts CropArgs and CropOutput values.
// You can construct a concrete instance of `CropInput` via:
//
//          CropArgs{...}
type CropInput interface {
	pulumi.Input

	ToCropOutput() CropOutput
	ToCropOutputWithContext(context.Context) CropOutput
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropArgs struct {
	// The number of pixels to crop from the bottom. The default is 0.
	BottomPixels pulumi.IntPtrInput `pulumi:"bottomPixels"`
	// The number of pixels to crop from the left. The default is 0.
	LeftPixels pulumi.IntPtrInput `pulumi:"leftPixels"`
	// The number of pixels to crop from the right. The default is 0.
	RightPixels pulumi.IntPtrInput `pulumi:"rightPixels"`
	// The number of pixels to crop from the top. The default is 0.
	TopPixels pulumi.IntPtrInput `pulumi:"topPixels"`
}

func (CropArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Crop)(nil)).Elem()
}

func (i CropArgs) ToCropOutput() CropOutput {
	return i.ToCropOutputWithContext(context.Background())
}

func (i CropArgs) ToCropOutputWithContext(ctx context.Context) CropOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CropOutput)
}

func (i CropArgs) ToCropPtrOutput() CropPtrOutput {
	return i.ToCropPtrOutputWithContext(context.Background())
}

func (i CropArgs) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CropOutput).ToCropPtrOutputWithContext(ctx)
}

// CropPtrInput is an input type that accepts CropArgs, CropPtr and CropPtrOutput values.
// You can construct a concrete instance of `CropPtrInput` via:
//
//          CropArgs{...}
//
//  or:
//
//          nil
type CropPtrInput interface {
	pulumi.Input

	ToCropPtrOutput() CropPtrOutput
	ToCropPtrOutputWithContext(context.Context) CropPtrOutput
}

type cropPtrType CropArgs

func CropPtr(v *CropArgs) CropPtrInput {
	return (*cropPtrType)(v)
}

func (*cropPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Crop)(nil)).Elem()
}

func (i *cropPtrType) ToCropPtrOutput() CropPtrOutput {
	return i.ToCropPtrOutputWithContext(context.Background())
}

func (i *cropPtrType) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CropPtrOutput)
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropOutput struct{ *pulumi.OutputState }

func (CropOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Crop)(nil)).Elem()
}

func (o CropOutput) ToCropOutput() CropOutput {
	return o
}

func (o CropOutput) ToCropOutputWithContext(ctx context.Context) CropOutput {
	return o
}

func (o CropOutput) ToCropPtrOutput() CropPtrOutput {
	return o.ToCropPtrOutputWithContext(context.Background())
}

func (o CropOutput) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Crop) *Crop {
		return &v
	}).(CropPtrOutput)
}

// The number of pixels to crop from the bottom. The default is 0.
func (o CropOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.BottomPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the left. The default is 0.
func (o CropOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.LeftPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the right. The default is 0.
func (o CropOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.RightPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the top. The default is 0.
func (o CropOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Crop) *int { return v.TopPixels }).(pulumi.IntPtrOutput)
}

type CropPtrOutput struct{ *pulumi.OutputState }

func (CropPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Crop)(nil)).Elem()
}

func (o CropPtrOutput) ToCropPtrOutput() CropPtrOutput {
	return o
}

func (o CropPtrOutput) ToCropPtrOutputWithContext(ctx context.Context) CropPtrOutput {
	return o
}

func (o CropPtrOutput) Elem() CropOutput {
	return o.ApplyT(func(v *Crop) Crop {
		if v != nil {
			return *v
		}
		var ret Crop
		return ret
	}).(CropOutput)
}

// The number of pixels to crop from the bottom. The default is 0.
func (o CropPtrOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.BottomPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the left. The default is 0.
func (o CropPtrOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.LeftPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the right. The default is 0.
func (o CropPtrOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.RightPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to crop from the top. The default is 0.
func (o CropPtrOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Crop) *int {
		if v == nil {
			return nil
		}
		return v.TopPixels
	}).(pulumi.IntPtrOutput)
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropResponse struct {
	// The number of pixels to crop from the bottom. The default is 0.
	BottomPixels int `pulumi:"bottomPixels"`
	// The number of pixels to crop from the left. The default is 0.
	LeftPixels int `pulumi:"leftPixels"`
	// The number of pixels to crop from the right. The default is 0.
	RightPixels int `pulumi:"rightPixels"`
	// The number of pixels to crop from the top. The default is 0.
	TopPixels int `pulumi:"topPixels"`
}

// CropResponseInput is an input type that accepts CropResponseArgs and CropResponseOutput values.
// You can construct a concrete instance of `CropResponseInput` via:
//
//          CropResponseArgs{...}
type CropResponseInput interface {
	pulumi.Input

	ToCropResponseOutput() CropResponseOutput
	ToCropResponseOutputWithContext(context.Context) CropResponseOutput
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropResponseArgs struct {
	// The number of pixels to crop from the bottom. The default is 0.
	BottomPixels pulumi.IntInput `pulumi:"bottomPixels"`
	// The number of pixels to crop from the left. The default is 0.
	LeftPixels pulumi.IntInput `pulumi:"leftPixels"`
	// The number of pixels to crop from the right. The default is 0.
	RightPixels pulumi.IntInput `pulumi:"rightPixels"`
	// The number of pixels to crop from the top. The default is 0.
	TopPixels pulumi.IntInput `pulumi:"topPixels"`
}

func (CropResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CropResponse)(nil)).Elem()
}

func (i CropResponseArgs) ToCropResponseOutput() CropResponseOutput {
	return i.ToCropResponseOutputWithContext(context.Background())
}

func (i CropResponseArgs) ToCropResponseOutputWithContext(ctx context.Context) CropResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CropResponseOutput)
}

// Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.
type CropResponseOutput struct{ *pulumi.OutputState }

func (CropResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CropResponse)(nil)).Elem()
}

func (o CropResponseOutput) ToCropResponseOutput() CropResponseOutput {
	return o
}

func (o CropResponseOutput) ToCropResponseOutputWithContext(ctx context.Context) CropResponseOutput {
	return o
}

// The number of pixels to crop from the bottom. The default is 0.
func (o CropResponseOutput) BottomPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.BottomPixels }).(pulumi.IntOutput)
}

// The number of pixels to crop from the left. The default is 0.
func (o CropResponseOutput) LeftPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.LeftPixels }).(pulumi.IntOutput)
}

// The number of pixels to crop from the right. The default is 0.
func (o CropResponseOutput) RightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.RightPixels }).(pulumi.IntOutput)
}

// The number of pixels to crop from the top. The default is 0.
func (o CropResponseOutput) TopPixels() pulumi.IntOutput {
	return o.ApplyT(func(v CropResponse) int { return v.TopPixels }).(pulumi.IntOutput)
}

// Deblock preprocessing configuration.
type Deblock struct {
	// Enable deblocker. The default is `false`.
	Enabled *bool `pulumi:"enabled"`
	// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
	Strength *float64 `pulumi:"strength"`
}

// DeblockInput is an input type that accepts DeblockArgs and DeblockOutput values.
// You can construct a concrete instance of `DeblockInput` via:
//
//          DeblockArgs{...}
type DeblockInput interface {
	pulumi.Input

	ToDeblockOutput() DeblockOutput
	ToDeblockOutputWithContext(context.Context) DeblockOutput
}

// Deblock preprocessing configuration.
type DeblockArgs struct {
	// Enable deblocker. The default is `false`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
	Strength pulumi.Float64PtrInput `pulumi:"strength"`
}

func (DeblockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Deblock)(nil)).Elem()
}

func (i DeblockArgs) ToDeblockOutput() DeblockOutput {
	return i.ToDeblockOutputWithContext(context.Background())
}

func (i DeblockArgs) ToDeblockOutputWithContext(ctx context.Context) DeblockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeblockOutput)
}

func (i DeblockArgs) ToDeblockPtrOutput() DeblockPtrOutput {
	return i.ToDeblockPtrOutputWithContext(context.Background())
}

func (i DeblockArgs) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeblockOutput).ToDeblockPtrOutputWithContext(ctx)
}

// DeblockPtrInput is an input type that accepts DeblockArgs, DeblockPtr and DeblockPtrOutput values.
// You can construct a concrete instance of `DeblockPtrInput` via:
//
//          DeblockArgs{...}
//
//  or:
//
//          nil
type DeblockPtrInput interface {
	pulumi.Input

	ToDeblockPtrOutput() DeblockPtrOutput
	ToDeblockPtrOutputWithContext(context.Context) DeblockPtrOutput
}

type deblockPtrType DeblockArgs

func DeblockPtr(v *DeblockArgs) DeblockPtrInput {
	return (*deblockPtrType)(v)
}

func (*deblockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Deblock)(nil)).Elem()
}

func (i *deblockPtrType) ToDeblockPtrOutput() DeblockPtrOutput {
	return i.ToDeblockPtrOutputWithContext(context.Background())
}

func (i *deblockPtrType) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeblockPtrOutput)
}

// Deblock preprocessing configuration.
type DeblockOutput struct{ *pulumi.OutputState }

func (DeblockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Deblock)(nil)).Elem()
}

func (o DeblockOutput) ToDeblockOutput() DeblockOutput {
	return o
}

func (o DeblockOutput) ToDeblockOutputWithContext(ctx context.Context) DeblockOutput {
	return o
}

func (o DeblockOutput) ToDeblockPtrOutput() DeblockPtrOutput {
	return o.ToDeblockPtrOutputWithContext(context.Background())
}

func (o DeblockOutput) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Deblock) *Deblock {
		return &v
	}).(DeblockPtrOutput)
}

// Enable deblocker. The default is `false`.
func (o DeblockOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Deblock) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
func (o DeblockOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Deblock) *float64 { return v.Strength }).(pulumi.Float64PtrOutput)
}

type DeblockPtrOutput struct{ *pulumi.OutputState }

func (DeblockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Deblock)(nil)).Elem()
}

func (o DeblockPtrOutput) ToDeblockPtrOutput() DeblockPtrOutput {
	return o
}

func (o DeblockPtrOutput) ToDeblockPtrOutputWithContext(ctx context.Context) DeblockPtrOutput {
	return o
}

func (o DeblockPtrOutput) Elem() DeblockOutput {
	return o.ApplyT(func(v *Deblock) Deblock {
		if v != nil {
			return *v
		}
		var ret Deblock
		return ret
	}).(DeblockOutput)
}

// Enable deblocker. The default is `false`.
func (o DeblockPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Deblock) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
func (o DeblockPtrOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Deblock) *float64 {
		if v == nil {
			return nil
		}
		return v.Strength
	}).(pulumi.Float64PtrOutput)
}

// Deblock preprocessing configuration.
type DeblockResponse struct {
	// Enable deblocker. The default is `false`.
	Enabled bool `pulumi:"enabled"`
	// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
	Strength float64 `pulumi:"strength"`
}

// DeblockResponseInput is an input type that accepts DeblockResponseArgs and DeblockResponseOutput values.
// You can construct a concrete instance of `DeblockResponseInput` via:
//
//          DeblockResponseArgs{...}
type DeblockResponseInput interface {
	pulumi.Input

	ToDeblockResponseOutput() DeblockResponseOutput
	ToDeblockResponseOutputWithContext(context.Context) DeblockResponseOutput
}

// Deblock preprocessing configuration.
type DeblockResponseArgs struct {
	// Enable deblocker. The default is `false`.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
	Strength pulumi.Float64Input `pulumi:"strength"`
}

func (DeblockResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeblockResponse)(nil)).Elem()
}

func (i DeblockResponseArgs) ToDeblockResponseOutput() DeblockResponseOutput {
	return i.ToDeblockResponseOutputWithContext(context.Background())
}

func (i DeblockResponseArgs) ToDeblockResponseOutputWithContext(ctx context.Context) DeblockResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeblockResponseOutput)
}

// Deblock preprocessing configuration.
type DeblockResponseOutput struct{ *pulumi.OutputState }

func (DeblockResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeblockResponse)(nil)).Elem()
}

func (o DeblockResponseOutput) ToDeblockResponseOutput() DeblockResponseOutput {
	return o
}

func (o DeblockResponseOutput) ToDeblockResponseOutputWithContext(ctx context.Context) DeblockResponseOutput {
	return o
}

// Enable deblocker. The default is `false`.
func (o DeblockResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v DeblockResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.
func (o DeblockResponseOutput) Strength() pulumi.Float64Output {
	return o.ApplyT(func(v DeblockResponse) float64 { return v.Strength }).(pulumi.Float64Output)
}

// Denoise preprocessing configuration.
type Denoise struct {
	// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
	Strength *float64 `pulumi:"strength"`
	// Set the denoiser mode. The default is `"standard"`. Supported denoiser modes: - 'standard' - 'grain'
	Tune *string `pulumi:"tune"`
}

// DenoiseInput is an input type that accepts DenoiseArgs and DenoiseOutput values.
// You can construct a concrete instance of `DenoiseInput` via:
//
//          DenoiseArgs{...}
type DenoiseInput interface {
	pulumi.Input

	ToDenoiseOutput() DenoiseOutput
	ToDenoiseOutputWithContext(context.Context) DenoiseOutput
}

// Denoise preprocessing configuration.
type DenoiseArgs struct {
	// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
	Strength pulumi.Float64PtrInput `pulumi:"strength"`
	// Set the denoiser mode. The default is `"standard"`. Supported denoiser modes: - 'standard' - 'grain'
	Tune pulumi.StringPtrInput `pulumi:"tune"`
}

func (DenoiseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Denoise)(nil)).Elem()
}

func (i DenoiseArgs) ToDenoiseOutput() DenoiseOutput {
	return i.ToDenoiseOutputWithContext(context.Background())
}

func (i DenoiseArgs) ToDenoiseOutputWithContext(ctx context.Context) DenoiseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenoiseOutput)
}

func (i DenoiseArgs) ToDenoisePtrOutput() DenoisePtrOutput {
	return i.ToDenoisePtrOutputWithContext(context.Background())
}

func (i DenoiseArgs) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenoiseOutput).ToDenoisePtrOutputWithContext(ctx)
}

// DenoisePtrInput is an input type that accepts DenoiseArgs, DenoisePtr and DenoisePtrOutput values.
// You can construct a concrete instance of `DenoisePtrInput` via:
//
//          DenoiseArgs{...}
//
//  or:
//
//          nil
type DenoisePtrInput interface {
	pulumi.Input

	ToDenoisePtrOutput() DenoisePtrOutput
	ToDenoisePtrOutputWithContext(context.Context) DenoisePtrOutput
}

type denoisePtrType DenoiseArgs

func DenoisePtr(v *DenoiseArgs) DenoisePtrInput {
	return (*denoisePtrType)(v)
}

func (*denoisePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Denoise)(nil)).Elem()
}

func (i *denoisePtrType) ToDenoisePtrOutput() DenoisePtrOutput {
	return i.ToDenoisePtrOutputWithContext(context.Background())
}

func (i *denoisePtrType) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenoisePtrOutput)
}

// Denoise preprocessing configuration.
type DenoiseOutput struct{ *pulumi.OutputState }

func (DenoiseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Denoise)(nil)).Elem()
}

func (o DenoiseOutput) ToDenoiseOutput() DenoiseOutput {
	return o
}

func (o DenoiseOutput) ToDenoiseOutputWithContext(ctx context.Context) DenoiseOutput {
	return o
}

func (o DenoiseOutput) ToDenoisePtrOutput() DenoisePtrOutput {
	return o.ToDenoisePtrOutputWithContext(context.Background())
}

func (o DenoiseOutput) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Denoise) *Denoise {
		return &v
	}).(DenoisePtrOutput)
}

// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
func (o DenoiseOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Denoise) *float64 { return v.Strength }).(pulumi.Float64PtrOutput)
}

// Set the denoiser mode. The default is `"standard"`. Supported denoiser modes: - 'standard' - 'grain'
func (o DenoiseOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Denoise) *string { return v.Tune }).(pulumi.StringPtrOutput)
}

type DenoisePtrOutput struct{ *pulumi.OutputState }

func (DenoisePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Denoise)(nil)).Elem()
}

func (o DenoisePtrOutput) ToDenoisePtrOutput() DenoisePtrOutput {
	return o
}

func (o DenoisePtrOutput) ToDenoisePtrOutputWithContext(ctx context.Context) DenoisePtrOutput {
	return o
}

func (o DenoisePtrOutput) Elem() DenoiseOutput {
	return o.ApplyT(func(v *Denoise) Denoise {
		if v != nil {
			return *v
		}
		var ret Denoise
		return ret
	}).(DenoiseOutput)
}

// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
func (o DenoisePtrOutput) Strength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Denoise) *float64 {
		if v == nil {
			return nil
		}
		return v.Strength
	}).(pulumi.Float64PtrOutput)
}

// Set the denoiser mode. The default is `"standard"`. Supported denoiser modes: - 'standard' - 'grain'
func (o DenoisePtrOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Denoise) *string {
		if v == nil {
			return nil
		}
		return v.Tune
	}).(pulumi.StringPtrOutput)
}

// Denoise preprocessing configuration.
type DenoiseResponse struct {
	// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
	Strength float64 `pulumi:"strength"`
	// Set the denoiser mode. The default is `"standard"`. Supported denoiser modes: - 'standard' - 'grain'
	Tune string `pulumi:"tune"`
}

// DenoiseResponseInput is an input type that accepts DenoiseResponseArgs and DenoiseResponseOutput values.
// You can construct a concrete instance of `DenoiseResponseInput` via:
//
//          DenoiseResponseArgs{...}
type DenoiseResponseInput interface {
	pulumi.Input

	ToDenoiseResponseOutput() DenoiseResponseOutput
	ToDenoiseResponseOutputWithContext(context.Context) DenoiseResponseOutput
}

// Denoise preprocessing configuration.
type DenoiseResponseArgs struct {
	// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
	Strength pulumi.Float64Input `pulumi:"strength"`
	// Set the denoiser mode. The default is `"standard"`. Supported denoiser modes: - 'standard' - 'grain'
	Tune pulumi.StringInput `pulumi:"tune"`
}

func (DenoiseResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DenoiseResponse)(nil)).Elem()
}

func (i DenoiseResponseArgs) ToDenoiseResponseOutput() DenoiseResponseOutput {
	return i.ToDenoiseResponseOutputWithContext(context.Background())
}

func (i DenoiseResponseArgs) ToDenoiseResponseOutputWithContext(ctx context.Context) DenoiseResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenoiseResponseOutput)
}

// Denoise preprocessing configuration.
type DenoiseResponseOutput struct{ *pulumi.OutputState }

func (DenoiseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenoiseResponse)(nil)).Elem()
}

func (o DenoiseResponseOutput) ToDenoiseResponseOutput() DenoiseResponseOutput {
	return o
}

func (o DenoiseResponseOutput) ToDenoiseResponseOutputWithContext(ctx context.Context) DenoiseResponseOutput {
	return o
}

// Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.
func (o DenoiseResponseOutput) Strength() pulumi.Float64Output {
	return o.ApplyT(func(v DenoiseResponse) float64 { return v.Strength }).(pulumi.Float64Output)
}

// Set the denoiser mode. The default is `"standard"`. Supported denoiser modes: - 'standard' - 'grain'
func (o DenoiseResponseOutput) Tune() pulumi.StringOutput {
	return o.ApplyT(func(v DenoiseResponse) string { return v.Tune }).(pulumi.StringOutput)
}

// Edit atom.
type EditAtom struct {
	// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
	EndTimeOffset *string `pulumi:"endTimeOffset"`
	// List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
	Inputs []string `pulumi:"inputs"`
	// A unique key for this atom. Must be specified when using advanced mapping.
	Key *string `pulumi:"key"`
	// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
	StartTimeOffset *string `pulumi:"startTimeOffset"`
}

// EditAtomInput is an input type that accepts EditAtomArgs and EditAtomOutput values.
// You can construct a concrete instance of `EditAtomInput` via:
//
//          EditAtomArgs{...}
type EditAtomInput interface {
	pulumi.Input

	ToEditAtomOutput() EditAtomOutput
	ToEditAtomOutputWithContext(context.Context) EditAtomOutput
}

// Edit atom.
type EditAtomArgs struct {
	// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
	EndTimeOffset pulumi.StringPtrInput `pulumi:"endTimeOffset"`
	// List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
	Inputs pulumi.StringArrayInput `pulumi:"inputs"`
	// A unique key for this atom. Must be specified when using advanced mapping.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
}

func (EditAtomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EditAtom)(nil)).Elem()
}

func (i EditAtomArgs) ToEditAtomOutput() EditAtomOutput {
	return i.ToEditAtomOutputWithContext(context.Background())
}

func (i EditAtomArgs) ToEditAtomOutputWithContext(ctx context.Context) EditAtomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditAtomOutput)
}

// EditAtomArrayInput is an input type that accepts EditAtomArray and EditAtomArrayOutput values.
// You can construct a concrete instance of `EditAtomArrayInput` via:
//
//          EditAtomArray{ EditAtomArgs{...} }
type EditAtomArrayInput interface {
	pulumi.Input

	ToEditAtomArrayOutput() EditAtomArrayOutput
	ToEditAtomArrayOutputWithContext(context.Context) EditAtomArrayOutput
}

type EditAtomArray []EditAtomInput

func (EditAtomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EditAtom)(nil)).Elem()
}

func (i EditAtomArray) ToEditAtomArrayOutput() EditAtomArrayOutput {
	return i.ToEditAtomArrayOutputWithContext(context.Background())
}

func (i EditAtomArray) ToEditAtomArrayOutputWithContext(ctx context.Context) EditAtomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditAtomArrayOutput)
}

// Edit atom.
type EditAtomOutput struct{ *pulumi.OutputState }

func (EditAtomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EditAtom)(nil)).Elem()
}

func (o EditAtomOutput) ToEditAtomOutput() EditAtomOutput {
	return o
}

func (o EditAtomOutput) ToEditAtomOutputWithContext(ctx context.Context) EditAtomOutput {
	return o
}

// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
func (o EditAtomOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EditAtom) *string { return v.EndTimeOffset }).(pulumi.StringPtrOutput)
}

// List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
func (o EditAtomOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EditAtom) []string { return v.Inputs }).(pulumi.StringArrayOutput)
}

// A unique key for this atom. Must be specified when using advanced mapping.
func (o EditAtomOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EditAtom) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
func (o EditAtomOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EditAtom) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

type EditAtomArrayOutput struct{ *pulumi.OutputState }

func (EditAtomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EditAtom)(nil)).Elem()
}

func (o EditAtomArrayOutput) ToEditAtomArrayOutput() EditAtomArrayOutput {
	return o
}

func (o EditAtomArrayOutput) ToEditAtomArrayOutputWithContext(ctx context.Context) EditAtomArrayOutput {
	return o
}

func (o EditAtomArrayOutput) Index(i pulumi.IntInput) EditAtomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EditAtom {
		return vs[0].([]EditAtom)[vs[1].(int)]
	}).(EditAtomOutput)
}

// Edit atom.
type EditAtomResponse struct {
	// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
	EndTimeOffset string `pulumi:"endTimeOffset"`
	// List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
	Inputs []string `pulumi:"inputs"`
	// A unique key for this atom. Must be specified when using advanced mapping.
	Key string `pulumi:"key"`
	// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
	StartTimeOffset string `pulumi:"startTimeOffset"`
}

// EditAtomResponseInput is an input type that accepts EditAtomResponseArgs and EditAtomResponseOutput values.
// You can construct a concrete instance of `EditAtomResponseInput` via:
//
//          EditAtomResponseArgs{...}
type EditAtomResponseInput interface {
	pulumi.Input

	ToEditAtomResponseOutput() EditAtomResponseOutput
	ToEditAtomResponseOutputWithContext(context.Context) EditAtomResponseOutput
}

// Edit atom.
type EditAtomResponseArgs struct {
	// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
	EndTimeOffset pulumi.StringInput `pulumi:"endTimeOffset"`
	// List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
	Inputs pulumi.StringArrayInput `pulumi:"inputs"`
	// A unique key for this atom. Must be specified when using advanced mapping.
	Key pulumi.StringInput `pulumi:"key"`
	// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
	StartTimeOffset pulumi.StringInput `pulumi:"startTimeOffset"`
}

func (EditAtomResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EditAtomResponse)(nil)).Elem()
}

func (i EditAtomResponseArgs) ToEditAtomResponseOutput() EditAtomResponseOutput {
	return i.ToEditAtomResponseOutputWithContext(context.Background())
}

func (i EditAtomResponseArgs) ToEditAtomResponseOutputWithContext(ctx context.Context) EditAtomResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditAtomResponseOutput)
}

// EditAtomResponseArrayInput is an input type that accepts EditAtomResponseArray and EditAtomResponseArrayOutput values.
// You can construct a concrete instance of `EditAtomResponseArrayInput` via:
//
//          EditAtomResponseArray{ EditAtomResponseArgs{...} }
type EditAtomResponseArrayInput interface {
	pulumi.Input

	ToEditAtomResponseArrayOutput() EditAtomResponseArrayOutput
	ToEditAtomResponseArrayOutputWithContext(context.Context) EditAtomResponseArrayOutput
}

type EditAtomResponseArray []EditAtomResponseInput

func (EditAtomResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EditAtomResponse)(nil)).Elem()
}

func (i EditAtomResponseArray) ToEditAtomResponseArrayOutput() EditAtomResponseArrayOutput {
	return i.ToEditAtomResponseArrayOutputWithContext(context.Background())
}

func (i EditAtomResponseArray) ToEditAtomResponseArrayOutputWithContext(ctx context.Context) EditAtomResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EditAtomResponseArrayOutput)
}

// Edit atom.
type EditAtomResponseOutput struct{ *pulumi.OutputState }

func (EditAtomResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EditAtomResponse)(nil)).Elem()
}

func (o EditAtomResponseOutput) ToEditAtomResponseOutput() EditAtomResponseOutput {
	return o
}

func (o EditAtomResponseOutput) ToEditAtomResponseOutputWithContext(ctx context.Context) EditAtomResponseOutput {
	return o
}

// End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.
func (o EditAtomResponseOutput) EndTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v EditAtomResponse) string { return v.EndTimeOffset }).(pulumi.StringOutput)
}

// List of `Input.key`s identifying files that should be used in this atom. The listed `inputs` must have the same timeline.
func (o EditAtomResponseOutput) Inputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EditAtomResponse) []string { return v.Inputs }).(pulumi.StringArrayOutput)
}

// A unique key for this atom. Must be specified when using advanced mapping.
func (o EditAtomResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EditAtomResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.
func (o EditAtomResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v EditAtomResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

type EditAtomResponseArrayOutput struct{ *pulumi.OutputState }

func (EditAtomResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EditAtomResponse)(nil)).Elem()
}

func (o EditAtomResponseArrayOutput) ToEditAtomResponseArrayOutput() EditAtomResponseArrayOutput {
	return o
}

func (o EditAtomResponseArrayOutput) ToEditAtomResponseArrayOutputWithContext(ctx context.Context) EditAtomResponseArrayOutput {
	return o
}

func (o EditAtomResponseArrayOutput) Index(i pulumi.IntInput) EditAtomResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EditAtomResponse {
		return vs[0].([]EditAtomResponse)[vs[1].(int)]
	}).(EditAtomResponseOutput)
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStream struct {
	// Encoding of an audio stream.
	AudioStream *AudioStream `pulumi:"audioStream"`
	// A unique key for this elementary stream.
	Key *string `pulumi:"key"`
	// Encoding of a text stream. For example, closed captions or subtitles.
	TextStream *TextStream `pulumi:"textStream"`
	// Encoding of a video stream.
	VideoStream *VideoStream `pulumi:"videoStream"`
}

// ElementaryStreamInput is an input type that accepts ElementaryStreamArgs and ElementaryStreamOutput values.
// You can construct a concrete instance of `ElementaryStreamInput` via:
//
//          ElementaryStreamArgs{...}
type ElementaryStreamInput interface {
	pulumi.Input

	ToElementaryStreamOutput() ElementaryStreamOutput
	ToElementaryStreamOutputWithContext(context.Context) ElementaryStreamOutput
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamArgs struct {
	// Encoding of an audio stream.
	AudioStream AudioStreamPtrInput `pulumi:"audioStream"`
	// A unique key for this elementary stream.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Encoding of a text stream. For example, closed captions or subtitles.
	TextStream TextStreamPtrInput `pulumi:"textStream"`
	// Encoding of a video stream.
	VideoStream VideoStreamPtrInput `pulumi:"videoStream"`
}

func (ElementaryStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElementaryStream)(nil)).Elem()
}

func (i ElementaryStreamArgs) ToElementaryStreamOutput() ElementaryStreamOutput {
	return i.ToElementaryStreamOutputWithContext(context.Background())
}

func (i ElementaryStreamArgs) ToElementaryStreamOutputWithContext(ctx context.Context) ElementaryStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElementaryStreamOutput)
}

// ElementaryStreamArrayInput is an input type that accepts ElementaryStreamArray and ElementaryStreamArrayOutput values.
// You can construct a concrete instance of `ElementaryStreamArrayInput` via:
//
//          ElementaryStreamArray{ ElementaryStreamArgs{...} }
type ElementaryStreamArrayInput interface {
	pulumi.Input

	ToElementaryStreamArrayOutput() ElementaryStreamArrayOutput
	ToElementaryStreamArrayOutputWithContext(context.Context) ElementaryStreamArrayOutput
}

type ElementaryStreamArray []ElementaryStreamInput

func (ElementaryStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElementaryStream)(nil)).Elem()
}

func (i ElementaryStreamArray) ToElementaryStreamArrayOutput() ElementaryStreamArrayOutput {
	return i.ToElementaryStreamArrayOutputWithContext(context.Background())
}

func (i ElementaryStreamArray) ToElementaryStreamArrayOutputWithContext(ctx context.Context) ElementaryStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElementaryStreamArrayOutput)
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamOutput struct{ *pulumi.OutputState }

func (ElementaryStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElementaryStream)(nil)).Elem()
}

func (o ElementaryStreamOutput) ToElementaryStreamOutput() ElementaryStreamOutput {
	return o
}

func (o ElementaryStreamOutput) ToElementaryStreamOutputWithContext(ctx context.Context) ElementaryStreamOutput {
	return o
}

// Encoding of an audio stream.
func (o ElementaryStreamOutput) AudioStream() AudioStreamPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *AudioStream { return v.AudioStream }).(AudioStreamPtrOutput)
}

// A unique key for this elementary stream.
func (o ElementaryStreamOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
func (o ElementaryStreamOutput) TextStream() TextStreamPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *TextStream { return v.TextStream }).(TextStreamPtrOutput)
}

// Encoding of a video stream.
func (o ElementaryStreamOutput) VideoStream() VideoStreamPtrOutput {
	return o.ApplyT(func(v ElementaryStream) *VideoStream { return v.VideoStream }).(VideoStreamPtrOutput)
}

type ElementaryStreamArrayOutput struct{ *pulumi.OutputState }

func (ElementaryStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElementaryStream)(nil)).Elem()
}

func (o ElementaryStreamArrayOutput) ToElementaryStreamArrayOutput() ElementaryStreamArrayOutput {
	return o
}

func (o ElementaryStreamArrayOutput) ToElementaryStreamArrayOutputWithContext(ctx context.Context) ElementaryStreamArrayOutput {
	return o
}

func (o ElementaryStreamArrayOutput) Index(i pulumi.IntInput) ElementaryStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElementaryStream {
		return vs[0].([]ElementaryStream)[vs[1].(int)]
	}).(ElementaryStreamOutput)
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamResponse struct {
	// Encoding of an audio stream.
	AudioStream AudioStreamResponse `pulumi:"audioStream"`
	// A unique key for this elementary stream.
	Key string `pulumi:"key"`
	// Encoding of a text stream. For example, closed captions or subtitles.
	TextStream TextStreamResponse `pulumi:"textStream"`
	// Encoding of a video stream.
	VideoStream VideoStreamResponse `pulumi:"videoStream"`
}

// ElementaryStreamResponseInput is an input type that accepts ElementaryStreamResponseArgs and ElementaryStreamResponseOutput values.
// You can construct a concrete instance of `ElementaryStreamResponseInput` via:
//
//          ElementaryStreamResponseArgs{...}
type ElementaryStreamResponseInput interface {
	pulumi.Input

	ToElementaryStreamResponseOutput() ElementaryStreamResponseOutput
	ToElementaryStreamResponseOutputWithContext(context.Context) ElementaryStreamResponseOutput
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamResponseArgs struct {
	// Encoding of an audio stream.
	AudioStream AudioStreamResponseInput `pulumi:"audioStream"`
	// A unique key for this elementary stream.
	Key pulumi.StringInput `pulumi:"key"`
	// Encoding of a text stream. For example, closed captions or subtitles.
	TextStream TextStreamResponseInput `pulumi:"textStream"`
	// Encoding of a video stream.
	VideoStream VideoStreamResponseInput `pulumi:"videoStream"`
}

func (ElementaryStreamResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElementaryStreamResponse)(nil)).Elem()
}

func (i ElementaryStreamResponseArgs) ToElementaryStreamResponseOutput() ElementaryStreamResponseOutput {
	return i.ToElementaryStreamResponseOutputWithContext(context.Background())
}

func (i ElementaryStreamResponseArgs) ToElementaryStreamResponseOutputWithContext(ctx context.Context) ElementaryStreamResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElementaryStreamResponseOutput)
}

// ElementaryStreamResponseArrayInput is an input type that accepts ElementaryStreamResponseArray and ElementaryStreamResponseArrayOutput values.
// You can construct a concrete instance of `ElementaryStreamResponseArrayInput` via:
//
//          ElementaryStreamResponseArray{ ElementaryStreamResponseArgs{...} }
type ElementaryStreamResponseArrayInput interface {
	pulumi.Input

	ToElementaryStreamResponseArrayOutput() ElementaryStreamResponseArrayOutput
	ToElementaryStreamResponseArrayOutputWithContext(context.Context) ElementaryStreamResponseArrayOutput
}

type ElementaryStreamResponseArray []ElementaryStreamResponseInput

func (ElementaryStreamResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElementaryStreamResponse)(nil)).Elem()
}

func (i ElementaryStreamResponseArray) ToElementaryStreamResponseArrayOutput() ElementaryStreamResponseArrayOutput {
	return i.ToElementaryStreamResponseArrayOutputWithContext(context.Background())
}

func (i ElementaryStreamResponseArray) ToElementaryStreamResponseArrayOutputWithContext(ctx context.Context) ElementaryStreamResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElementaryStreamResponseArrayOutput)
}

// Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.
type ElementaryStreamResponseOutput struct{ *pulumi.OutputState }

func (ElementaryStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElementaryStreamResponse)(nil)).Elem()
}

func (o ElementaryStreamResponseOutput) ToElementaryStreamResponseOutput() ElementaryStreamResponseOutput {
	return o
}

func (o ElementaryStreamResponseOutput) ToElementaryStreamResponseOutputWithContext(ctx context.Context) ElementaryStreamResponseOutput {
	return o
}

// Encoding of an audio stream.
func (o ElementaryStreamResponseOutput) AudioStream() AudioStreamResponseOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) AudioStreamResponse { return v.AudioStream }).(AudioStreamResponseOutput)
}

// A unique key for this elementary stream.
func (o ElementaryStreamResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
func (o ElementaryStreamResponseOutput) TextStream() TextStreamResponseOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) TextStreamResponse { return v.TextStream }).(TextStreamResponseOutput)
}

// Encoding of a video stream.
func (o ElementaryStreamResponseOutput) VideoStream() VideoStreamResponseOutput {
	return o.ApplyT(func(v ElementaryStreamResponse) VideoStreamResponse { return v.VideoStream }).(VideoStreamResponseOutput)
}

type ElementaryStreamResponseArrayOutput struct{ *pulumi.OutputState }

func (ElementaryStreamResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ElementaryStreamResponse)(nil)).Elem()
}

func (o ElementaryStreamResponseArrayOutput) ToElementaryStreamResponseArrayOutput() ElementaryStreamResponseArrayOutput {
	return o
}

func (o ElementaryStreamResponseArrayOutput) ToElementaryStreamResponseArrayOutputWithContext(ctx context.Context) ElementaryStreamResponseArrayOutput {
	return o
}

func (o ElementaryStreamResponseArrayOutput) Index(i pulumi.IntInput) ElementaryStreamResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ElementaryStreamResponse {
		return vs[0].([]ElementaryStreamResponse)[vs[1].(int)]
	}).(ElementaryStreamResponseOutput)
}

// Encryption settings.
type Encryption struct {
	// Configuration for AES-128 encryption.
	Aes128 *Aes128Encryption `pulumi:"aes128"`
	// 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
	Iv string `pulumi:"iv"`
	// 128 bit encryption key represented as lowercase hexadecimal digits.
	Key string `pulumi:"key"`
	// Configuration for MPEG Common Encryption (MPEG-CENC).
	MpegCenc *MpegCommonEncryption `pulumi:"mpegCenc"`
	// Configuration for SAMPLE-AES encryption.
	SampleAes *SampleAesEncryption `pulumi:"sampleAes"`
}

// EncryptionInput is an input type that accepts EncryptionArgs and EncryptionOutput values.
// You can construct a concrete instance of `EncryptionInput` via:
//
//          EncryptionArgs{...}
type EncryptionInput interface {
	pulumi.Input

	ToEncryptionOutput() EncryptionOutput
	ToEncryptionOutputWithContext(context.Context) EncryptionOutput
}

// Encryption settings.
type EncryptionArgs struct {
	// Configuration for AES-128 encryption.
	Aes128 Aes128EncryptionPtrInput `pulumi:"aes128"`
	// 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
	Iv pulumi.StringInput `pulumi:"iv"`
	// 128 bit encryption key represented as lowercase hexadecimal digits.
	Key pulumi.StringInput `pulumi:"key"`
	// Configuration for MPEG Common Encryption (MPEG-CENC).
	MpegCenc MpegCommonEncryptionPtrInput `pulumi:"mpegCenc"`
	// Configuration for SAMPLE-AES encryption.
	SampleAes SampleAesEncryptionPtrInput `pulumi:"sampleAes"`
}

func (EncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (i EncryptionArgs) ToEncryptionOutput() EncryptionOutput {
	return i.ToEncryptionOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput)
}

func (i EncryptionArgs) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i EncryptionArgs) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionOutput).ToEncryptionPtrOutputWithContext(ctx)
}

// EncryptionPtrInput is an input type that accepts EncryptionArgs, EncryptionPtr and EncryptionPtrOutput values.
// You can construct a concrete instance of `EncryptionPtrInput` via:
//
//          EncryptionArgs{...}
//
//  or:
//
//          nil
type EncryptionPtrInput interface {
	pulumi.Input

	ToEncryptionPtrOutput() EncryptionPtrOutput
	ToEncryptionPtrOutputWithContext(context.Context) EncryptionPtrOutput
}

type encryptionPtrType EncryptionArgs

func EncryptionPtr(v *EncryptionArgs) EncryptionPtrInput {
	return (*encryptionPtrType)(v)
}

func (*encryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (i *encryptionPtrType) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return i.ToEncryptionPtrOutputWithContext(context.Background())
}

func (i *encryptionPtrType) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionPtrOutput)
}

// Encryption settings.
type EncryptionOutput struct{ *pulumi.OutputState }

func (EncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Encryption)(nil)).Elem()
}

func (o EncryptionOutput) ToEncryptionOutput() EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionOutputWithContext(ctx context.Context) EncryptionOutput {
	return o
}

func (o EncryptionOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o.ToEncryptionPtrOutputWithContext(context.Background())
}

func (o EncryptionOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Encryption) *Encryption {
		return &v
	}).(EncryptionPtrOutput)
}

// Configuration for AES-128 encryption.
func (o EncryptionOutput) Aes128() Aes128EncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *Aes128Encryption { return v.Aes128 }).(Aes128EncryptionPtrOutput)
}

// 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
func (o EncryptionOutput) Iv() pulumi.StringOutput {
	return o.ApplyT(func(v Encryption) string { return v.Iv }).(pulumi.StringOutput)
}

// 128 bit encryption key represented as lowercase hexadecimal digits.
func (o EncryptionOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v Encryption) string { return v.Key }).(pulumi.StringOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
func (o EncryptionOutput) MpegCenc() MpegCommonEncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *MpegCommonEncryption { return v.MpegCenc }).(MpegCommonEncryptionPtrOutput)
}

// Configuration for SAMPLE-AES encryption.
func (o EncryptionOutput) SampleAes() SampleAesEncryptionPtrOutput {
	return o.ApplyT(func(v Encryption) *SampleAesEncryption { return v.SampleAes }).(SampleAesEncryptionPtrOutput)
}

type EncryptionPtrOutput struct{ *pulumi.OutputState }

func (EncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Encryption)(nil)).Elem()
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutput() EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) ToEncryptionPtrOutputWithContext(ctx context.Context) EncryptionPtrOutput {
	return o
}

func (o EncryptionPtrOutput) Elem() EncryptionOutput {
	return o.ApplyT(func(v *Encryption) Encryption {
		if v != nil {
			return *v
		}
		var ret Encryption
		return ret
	}).(EncryptionOutput)
}

// Configuration for AES-128 encryption.
func (o EncryptionPtrOutput) Aes128() Aes128EncryptionPtrOutput {
	return o.ApplyT(func(v *Encryption) *Aes128Encryption {
		if v == nil {
			return nil
		}
		return v.Aes128
	}).(Aes128EncryptionPtrOutput)
}

// 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
func (o EncryptionPtrOutput) Iv() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return &v.Iv
	}).(pulumi.StringPtrOutput)
}

// 128 bit encryption key represented as lowercase hexadecimal digits.
func (o EncryptionPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Encryption) *string {
		if v == nil {
			return nil
		}
		return &v.Key
	}).(pulumi.StringPtrOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
func (o EncryptionPtrOutput) MpegCenc() MpegCommonEncryptionPtrOutput {
	return o.ApplyT(func(v *Encryption) *MpegCommonEncryption {
		if v == nil {
			return nil
		}
		return v.MpegCenc
	}).(MpegCommonEncryptionPtrOutput)
}

// Configuration for SAMPLE-AES encryption.
func (o EncryptionPtrOutput) SampleAes() SampleAesEncryptionPtrOutput {
	return o.ApplyT(func(v *Encryption) *SampleAesEncryption {
		if v == nil {
			return nil
		}
		return v.SampleAes
	}).(SampleAesEncryptionPtrOutput)
}

// Encryption settings.
type EncryptionResponse struct {
	// Configuration for AES-128 encryption.
	Aes128 Aes128EncryptionResponse `pulumi:"aes128"`
	// 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
	Iv string `pulumi:"iv"`
	// 128 bit encryption key represented as lowercase hexadecimal digits.
	Key string `pulumi:"key"`
	// Configuration for MPEG Common Encryption (MPEG-CENC).
	MpegCenc MpegCommonEncryptionResponse `pulumi:"mpegCenc"`
	// Configuration for SAMPLE-AES encryption.
	SampleAes SampleAesEncryptionResponse `pulumi:"sampleAes"`
}

// EncryptionResponseInput is an input type that accepts EncryptionResponseArgs and EncryptionResponseOutput values.
// You can construct a concrete instance of `EncryptionResponseInput` via:
//
//          EncryptionResponseArgs{...}
type EncryptionResponseInput interface {
	pulumi.Input

	ToEncryptionResponseOutput() EncryptionResponseOutput
	ToEncryptionResponseOutputWithContext(context.Context) EncryptionResponseOutput
}

// Encryption settings.
type EncryptionResponseArgs struct {
	// Configuration for AES-128 encryption.
	Aes128 Aes128EncryptionResponseInput `pulumi:"aes128"`
	// 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
	Iv pulumi.StringInput `pulumi:"iv"`
	// 128 bit encryption key represented as lowercase hexadecimal digits.
	Key pulumi.StringInput `pulumi:"key"`
	// Configuration for MPEG Common Encryption (MPEG-CENC).
	MpegCenc MpegCommonEncryptionResponseInput `pulumi:"mpegCenc"`
	// Configuration for SAMPLE-AES encryption.
	SampleAes SampleAesEncryptionResponseInput `pulumi:"sampleAes"`
}

func (EncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (i EncryptionResponseArgs) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return i.ToEncryptionResponseOutputWithContext(context.Background())
}

func (i EncryptionResponseArgs) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EncryptionResponseOutput)
}

// Encryption settings.
type EncryptionResponseOutput struct{ *pulumi.OutputState }

func (EncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EncryptionResponse)(nil)).Elem()
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutput() EncryptionResponseOutput {
	return o
}

func (o EncryptionResponseOutput) ToEncryptionResponseOutputWithContext(ctx context.Context) EncryptionResponseOutput {
	return o
}

// Configuration for AES-128 encryption.
func (o EncryptionResponseOutput) Aes128() Aes128EncryptionResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) Aes128EncryptionResponse { return v.Aes128 }).(Aes128EncryptionResponseOutput)
}

// 128 bit Initialization Vector (IV) represented as lowercase hexadecimal digits.
func (o EncryptionResponseOutput) Iv() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionResponse) string { return v.Iv }).(pulumi.StringOutput)
}

// 128 bit encryption key represented as lowercase hexadecimal digits.
func (o EncryptionResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v EncryptionResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
func (o EncryptionResponseOutput) MpegCenc() MpegCommonEncryptionResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) MpegCommonEncryptionResponse { return v.MpegCenc }).(MpegCommonEncryptionResponseOutput)
}

// Configuration for SAMPLE-AES encryption.
func (o EncryptionResponseOutput) SampleAes() SampleAesEncryptionResponseOutput {
	return o.ApplyT(func(v EncryptionResponse) SampleAesEncryptionResponse { return v.SampleAes }).(SampleAesEncryptionResponseOutput)
}

// Additional information about the reasons for the failure.
type FailureDetailResponse struct {
	// A description of the failure.
	Description string `pulumi:"description"`
}

// FailureDetailResponseInput is an input type that accepts FailureDetailResponseArgs and FailureDetailResponseOutput values.
// You can construct a concrete instance of `FailureDetailResponseInput` via:
//
//          FailureDetailResponseArgs{...}
type FailureDetailResponseInput interface {
	pulumi.Input

	ToFailureDetailResponseOutput() FailureDetailResponseOutput
	ToFailureDetailResponseOutputWithContext(context.Context) FailureDetailResponseOutput
}

// Additional information about the reasons for the failure.
type FailureDetailResponseArgs struct {
	// A description of the failure.
	Description pulumi.StringInput `pulumi:"description"`
}

func (FailureDetailResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FailureDetailResponse)(nil)).Elem()
}

func (i FailureDetailResponseArgs) ToFailureDetailResponseOutput() FailureDetailResponseOutput {
	return i.ToFailureDetailResponseOutputWithContext(context.Background())
}

func (i FailureDetailResponseArgs) ToFailureDetailResponseOutputWithContext(ctx context.Context) FailureDetailResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailureDetailResponseOutput)
}

// FailureDetailResponseArrayInput is an input type that accepts FailureDetailResponseArray and FailureDetailResponseArrayOutput values.
// You can construct a concrete instance of `FailureDetailResponseArrayInput` via:
//
//          FailureDetailResponseArray{ FailureDetailResponseArgs{...} }
type FailureDetailResponseArrayInput interface {
	pulumi.Input

	ToFailureDetailResponseArrayOutput() FailureDetailResponseArrayOutput
	ToFailureDetailResponseArrayOutputWithContext(context.Context) FailureDetailResponseArrayOutput
}

type FailureDetailResponseArray []FailureDetailResponseInput

func (FailureDetailResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailureDetailResponse)(nil)).Elem()
}

func (i FailureDetailResponseArray) ToFailureDetailResponseArrayOutput() FailureDetailResponseArrayOutput {
	return i.ToFailureDetailResponseArrayOutputWithContext(context.Background())
}

func (i FailureDetailResponseArray) ToFailureDetailResponseArrayOutputWithContext(ctx context.Context) FailureDetailResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailureDetailResponseArrayOutput)
}

// Additional information about the reasons for the failure.
type FailureDetailResponseOutput struct{ *pulumi.OutputState }

func (FailureDetailResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailureDetailResponse)(nil)).Elem()
}

func (o FailureDetailResponseOutput) ToFailureDetailResponseOutput() FailureDetailResponseOutput {
	return o
}

func (o FailureDetailResponseOutput) ToFailureDetailResponseOutputWithContext(ctx context.Context) FailureDetailResponseOutput {
	return o
}

// A description of the failure.
func (o FailureDetailResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v FailureDetailResponse) string { return v.Description }).(pulumi.StringOutput)
}

type FailureDetailResponseArrayOutput struct{ *pulumi.OutputState }

func (FailureDetailResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FailureDetailResponse)(nil)).Elem()
}

func (o FailureDetailResponseArrayOutput) ToFailureDetailResponseArrayOutput() FailureDetailResponseArrayOutput {
	return o
}

func (o FailureDetailResponseArrayOutput) ToFailureDetailResponseArrayOutputWithContext(ctx context.Context) FailureDetailResponseArrayOutput {
	return o
}

func (o FailureDetailResponseArrayOutput) Index(i pulumi.IntInput) FailureDetailResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FailureDetailResponse {
		return vs[0].([]FailureDetailResponse)[vs[1].(int)]
	}).(FailureDetailResponseOutput)
}

// Overlaid jpeg image.
type Image struct {
	// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
	Alpha *float64 `pulumi:"alpha"`
	// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
	Resolution *NormalizedCoordinate `pulumi:"resolution"`
	// URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
	Uri string `pulumi:"uri"`
}

// ImageInput is an input type that accepts ImageArgs and ImageOutput values.
// You can construct a concrete instance of `ImageInput` via:
//
//          ImageArgs{...}
type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(context.Context) ImageOutput
}

// Overlaid jpeg image.
type ImageArgs struct {
	// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
	Alpha pulumi.Float64PtrInput `pulumi:"alpha"`
	// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
	Resolution NormalizedCoordinatePtrInput `pulumi:"resolution"`
	// URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (i ImageArgs) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i ImageArgs) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

func (i ImageArgs) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i ImageArgs) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput).ToImagePtrOutputWithContext(ctx)
}

// ImagePtrInput is an input type that accepts ImageArgs, ImagePtr and ImagePtrOutput values.
// You can construct a concrete instance of `ImagePtrInput` via:
//
//          ImageArgs{...}
//
//  or:
//
//          nil
type ImagePtrInput interface {
	pulumi.Input

	ToImagePtrOutput() ImagePtrOutput
	ToImagePtrOutputWithContext(context.Context) ImagePtrOutput
}

type imagePtrType ImageArgs

func ImagePtr(v *ImageArgs) ImagePtrInput {
	return (*imagePtrType)(v)
}

func (*imagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *imagePtrType) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i *imagePtrType) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePtrOutput)
}

// Overlaid jpeg image.
type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) ToImagePtrOutput() ImagePtrOutput {
	return o.ToImagePtrOutputWithContext(context.Background())
}

func (o ImageOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Image) *Image {
		return &v
	}).(ImagePtrOutput)
}

// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
func (o ImageOutput) Alpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Image) *float64 { return v.Alpha }).(pulumi.Float64PtrOutput)
}

// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
func (o ImageOutput) Resolution() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v Image) *NormalizedCoordinate { return v.Resolution }).(NormalizedCoordinatePtrOutput)
}

// URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
func (o ImageOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v Image) string { return v.Uri }).(pulumi.StringOutput)
}

type ImagePtrOutput struct{ *pulumi.OutputState }

func (ImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImagePtrOutput) ToImagePtrOutput() ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) Elem() ImageOutput {
	return o.ApplyT(func(v *Image) Image {
		if v != nil {
			return *v
		}
		var ret Image
		return ret
	}).(ImageOutput)
}

// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
func (o ImagePtrOutput) Alpha() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Image) *float64 {
		if v == nil {
			return nil
		}
		return v.Alpha
	}).(pulumi.Float64PtrOutput)
}

// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
func (o ImagePtrOutput) Resolution() NormalizedCoordinatePtrOutput {
	return o.ApplyT(func(v *Image) *NormalizedCoordinate {
		if v == nil {
			return nil
		}
		return v.Resolution
	}).(NormalizedCoordinatePtrOutput)
}

// URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
func (o ImagePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Overlaid jpeg image.
type ImageResponse struct {
	// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
	Alpha float64 `pulumi:"alpha"`
	// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
	Resolution NormalizedCoordinateResponse `pulumi:"resolution"`
	// URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
	Uri string `pulumi:"uri"`
}

// ImageResponseInput is an input type that accepts ImageResponseArgs and ImageResponseOutput values.
// You can construct a concrete instance of `ImageResponseInput` via:
//
//          ImageResponseArgs{...}
type ImageResponseInput interface {
	pulumi.Input

	ToImageResponseOutput() ImageResponseOutput
	ToImageResponseOutputWithContext(context.Context) ImageResponseOutput
}

// Overlaid jpeg image.
type ImageResponseArgs struct {
	// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
	Alpha pulumi.Float64Input `pulumi:"alpha"`
	// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
	Resolution NormalizedCoordinateResponseInput `pulumi:"resolution"`
	// URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (ImageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageResponse)(nil)).Elem()
}

func (i ImageResponseArgs) ToImageResponseOutput() ImageResponseOutput {
	return i.ToImageResponseOutputWithContext(context.Background())
}

func (i ImageResponseArgs) ToImageResponseOutputWithContext(ctx context.Context) ImageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageResponseOutput)
}

// Overlaid jpeg image.
type ImageResponseOutput struct{ *pulumi.OutputState }

func (ImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageResponse)(nil)).Elem()
}

func (o ImageResponseOutput) ToImageResponseOutput() ImageResponseOutput {
	return o
}

func (o ImageResponseOutput) ToImageResponseOutputWithContext(ctx context.Context) ImageResponseOutput {
	return o
}

// Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
func (o ImageResponseOutput) Alpha() pulumi.Float64Output {
	return o.ApplyT(func(v ImageResponse) float64 { return v.Alpha }).(pulumi.Float64Output)
}

// Normalized image resolution, based on output video resolution. Valid values: `0.0`–`1.0`. To respect the original image aspect ratio, set either `x` or `y` to `0.0`. To use the original image resolution, set both `x` and `y` to `0.0`.
func (o ImageResponseOutput) Resolution() NormalizedCoordinateResponseOutput {
	return o.ApplyT(func(v ImageResponse) NormalizedCoordinateResponse { return v.Resolution }).(NormalizedCoordinateResponseOutput)
}

// URI of the JPEG image in Cloud Storage. For example, `gs://bucket/inputs/image.jpeg`. JPEG is the only supported image type.
func (o ImageResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v ImageResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Input asset.
type Input struct {
	// A unique key for this input. Must be specified when using advanced mapping and edit lists.
	Key *string `pulumi:"key"`
	// Preprocessing configurations.
	PreprocessingConfig *PreprocessingConfig `pulumi:"preprocessingConfig"`
	// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`.
	Uri *string `pulumi:"uri"`
}

// InputInput is an input type that accepts InputArgs and InputOutput values.
// You can construct a concrete instance of `InputInput` via:
//
//          InputArgs{...}
type InputInput interface {
	pulumi.Input

	ToInputOutput() InputOutput
	ToInputOutputWithContext(context.Context) InputOutput
}

// Input asset.
type InputArgs struct {
	// A unique key for this input. Must be specified when using advanced mapping and edit lists.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Preprocessing configurations.
	PreprocessingConfig PreprocessingConfigPtrInput `pulumi:"preprocessingConfig"`
	// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (InputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Input)(nil)).Elem()
}

func (i InputArgs) ToInputOutput() InputOutput {
	return i.ToInputOutputWithContext(context.Background())
}

func (i InputArgs) ToInputOutputWithContext(ctx context.Context) InputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputOutput)
}

// InputArrayInput is an input type that accepts InputArray and InputArrayOutput values.
// You can construct a concrete instance of `InputArrayInput` via:
//
//          InputArray{ InputArgs{...} }
type InputArrayInput interface {
	pulumi.Input

	ToInputArrayOutput() InputArrayOutput
	ToInputArrayOutputWithContext(context.Context) InputArrayOutput
}

type InputArray []InputInput

func (InputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Input)(nil)).Elem()
}

func (i InputArray) ToInputArrayOutput() InputArrayOutput {
	return i.ToInputArrayOutputWithContext(context.Background())
}

func (i InputArray) ToInputArrayOutputWithContext(ctx context.Context) InputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputArrayOutput)
}

// Input asset.
type InputOutput struct{ *pulumi.OutputState }

func (InputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Input)(nil)).Elem()
}

func (o InputOutput) ToInputOutput() InputOutput {
	return o
}

func (o InputOutput) ToInputOutputWithContext(ctx context.Context) InputOutput {
	return o
}

// A unique key for this input. Must be specified when using advanced mapping and edit lists.
func (o InputOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Input) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Preprocessing configurations.
func (o InputOutput) PreprocessingConfig() PreprocessingConfigPtrOutput {
	return o.ApplyT(func(v Input) *PreprocessingConfig { return v.PreprocessingConfig }).(PreprocessingConfigPtrOutput)
}

// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`.
func (o InputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Input) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type InputArrayOutput struct{ *pulumi.OutputState }

func (InputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Input)(nil)).Elem()
}

func (o InputArrayOutput) ToInputArrayOutput() InputArrayOutput {
	return o
}

func (o InputArrayOutput) ToInputArrayOutputWithContext(ctx context.Context) InputArrayOutput {
	return o
}

func (o InputArrayOutput) Index(i pulumi.IntInput) InputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Input {
		return vs[0].([]Input)[vs[1].(int)]
	}).(InputOutput)
}

// Input asset.
type InputResponse struct {
	// A unique key for this input. Must be specified when using advanced mapping and edit lists.
	Key string `pulumi:"key"`
	// Preprocessing configurations.
	PreprocessingConfig PreprocessingConfigResponse `pulumi:"preprocessingConfig"`
	// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`.
	Uri string `pulumi:"uri"`
}

// InputResponseInput is an input type that accepts InputResponseArgs and InputResponseOutput values.
// You can construct a concrete instance of `InputResponseInput` via:
//
//          InputResponseArgs{...}
type InputResponseInput interface {
	pulumi.Input

	ToInputResponseOutput() InputResponseOutput
	ToInputResponseOutputWithContext(context.Context) InputResponseOutput
}

// Input asset.
type InputResponseArgs struct {
	// A unique key for this input. Must be specified when using advanced mapping and edit lists.
	Key pulumi.StringInput `pulumi:"key"`
	// Preprocessing configurations.
	PreprocessingConfig PreprocessingConfigResponseInput `pulumi:"preprocessingConfig"`
	// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (InputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InputResponse)(nil)).Elem()
}

func (i InputResponseArgs) ToInputResponseOutput() InputResponseOutput {
	return i.ToInputResponseOutputWithContext(context.Background())
}

func (i InputResponseArgs) ToInputResponseOutputWithContext(ctx context.Context) InputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputResponseOutput)
}

// InputResponseArrayInput is an input type that accepts InputResponseArray and InputResponseArrayOutput values.
// You can construct a concrete instance of `InputResponseArrayInput` via:
//
//          InputResponseArray{ InputResponseArgs{...} }
type InputResponseArrayInput interface {
	pulumi.Input

	ToInputResponseArrayOutput() InputResponseArrayOutput
	ToInputResponseArrayOutputWithContext(context.Context) InputResponseArrayOutput
}

type InputResponseArray []InputResponseInput

func (InputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputResponse)(nil)).Elem()
}

func (i InputResponseArray) ToInputResponseArrayOutput() InputResponseArrayOutput {
	return i.ToInputResponseArrayOutputWithContext(context.Background())
}

func (i InputResponseArray) ToInputResponseArrayOutputWithContext(ctx context.Context) InputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InputResponseArrayOutput)
}

// Input asset.
type InputResponseOutput struct{ *pulumi.OutputState }

func (InputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InputResponse)(nil)).Elem()
}

func (o InputResponseOutput) ToInputResponseOutput() InputResponseOutput {
	return o
}

func (o InputResponseOutput) ToInputResponseOutputWithContext(ctx context.Context) InputResponseOutput {
	return o
}

// A unique key for this input. Must be specified when using advanced mapping and edit lists.
func (o InputResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Preprocessing configurations.
func (o InputResponseOutput) PreprocessingConfig() PreprocessingConfigResponseOutput {
	return o.ApplyT(func(v InputResponse) PreprocessingConfigResponse { return v.PreprocessingConfig }).(PreprocessingConfigResponseOutput)
}

// URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value will be populated from `Job.input_uri`.
func (o InputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v InputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type InputResponseArrayOutput struct{ *pulumi.OutputState }

func (InputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InputResponse)(nil)).Elem()
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutput() InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) ToInputResponseArrayOutputWithContext(ctx context.Context) InputResponseArrayOutput {
	return o
}

func (o InputResponseArrayOutput) Index(i pulumi.IntInput) InputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InputResponse {
		return vs[0].([]InputResponse)[vs[1].(int)]
	}).(InputResponseOutput)
}

// Job configuration
type JobConfig struct {
	// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
	AdBreaks []AdBreak `pulumi:"adBreaks"`
	// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
	EditList []EditAtom `pulumi:"editList"`
	// List of elementary streams.
	ElementaryStreams []ElementaryStream `pulumi:"elementaryStreams"`
	// List of input assets stored in Cloud Storage.
	Inputs []Input `pulumi:"inputs"`
	// List of output manifests.
	Manifests []Manifest `pulumi:"manifests"`
	// List of multiplexing settings for output streams.
	MuxStreams []MuxStream `pulumi:"muxStreams"`
	// Output configuration.
	Output *Output `pulumi:"output"`
	// List of overlays on the output video, in descending Z-order.
	Overlays []Overlay `pulumi:"overlays"`
	// Destination on Pub/Sub.
	PubsubDestination *PubsubDestination `pulumi:"pubsubDestination"`
	// List of output sprite sheets.
	SpriteSheets []SpriteSheet `pulumi:"spriteSheets"`
}

// JobConfigInput is an input type that accepts JobConfigArgs and JobConfigOutput values.
// You can construct a concrete instance of `JobConfigInput` via:
//
//          JobConfigArgs{...}
type JobConfigInput interface {
	pulumi.Input

	ToJobConfigOutput() JobConfigOutput
	ToJobConfigOutputWithContext(context.Context) JobConfigOutput
}

// Job configuration
type JobConfigArgs struct {
	// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
	AdBreaks AdBreakArrayInput `pulumi:"adBreaks"`
	// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
	EditList EditAtomArrayInput `pulumi:"editList"`
	// List of elementary streams.
	ElementaryStreams ElementaryStreamArrayInput `pulumi:"elementaryStreams"`
	// List of input assets stored in Cloud Storage.
	Inputs InputArrayInput `pulumi:"inputs"`
	// List of output manifests.
	Manifests ManifestArrayInput `pulumi:"manifests"`
	// List of multiplexing settings for output streams.
	MuxStreams MuxStreamArrayInput `pulumi:"muxStreams"`
	// Output configuration.
	Output OutputPtrInput `pulumi:"output"`
	// List of overlays on the output video, in descending Z-order.
	Overlays OverlayArrayInput `pulumi:"overlays"`
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationPtrInput `pulumi:"pubsubDestination"`
	// List of output sprite sheets.
	SpriteSheets SpriteSheetArrayInput `pulumi:"spriteSheets"`
}

func (JobConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfig)(nil)).Elem()
}

func (i JobConfigArgs) ToJobConfigOutput() JobConfigOutput {
	return i.ToJobConfigOutputWithContext(context.Background())
}

func (i JobConfigArgs) ToJobConfigOutputWithContext(ctx context.Context) JobConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigOutput)
}

func (i JobConfigArgs) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return i.ToJobConfigPtrOutputWithContext(context.Background())
}

func (i JobConfigArgs) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigOutput).ToJobConfigPtrOutputWithContext(ctx)
}

// JobConfigPtrInput is an input type that accepts JobConfigArgs, JobConfigPtr and JobConfigPtrOutput values.
// You can construct a concrete instance of `JobConfigPtrInput` via:
//
//          JobConfigArgs{...}
//
//  or:
//
//          nil
type JobConfigPtrInput interface {
	pulumi.Input

	ToJobConfigPtrOutput() JobConfigPtrOutput
	ToJobConfigPtrOutputWithContext(context.Context) JobConfigPtrOutput
}

type jobConfigPtrType JobConfigArgs

func JobConfigPtr(v *JobConfigArgs) JobConfigPtrInput {
	return (*jobConfigPtrType)(v)
}

func (*jobConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfig)(nil)).Elem()
}

func (i *jobConfigPtrType) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return i.ToJobConfigPtrOutputWithContext(context.Background())
}

func (i *jobConfigPtrType) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigPtrOutput)
}

// Job configuration
type JobConfigOutput struct{ *pulumi.OutputState }

func (JobConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfig)(nil)).Elem()
}

func (o JobConfigOutput) ToJobConfigOutput() JobConfigOutput {
	return o
}

func (o JobConfigOutput) ToJobConfigOutputWithContext(ctx context.Context) JobConfigOutput {
	return o
}

func (o JobConfigOutput) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return o.ToJobConfigPtrOutputWithContext(context.Background())
}

func (o JobConfigOutput) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfig) *JobConfig {
		return &v
	}).(JobConfigPtrOutput)
}

// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
func (o JobConfigOutput) AdBreaks() AdBreakArrayOutput {
	return o.ApplyT(func(v JobConfig) []AdBreak { return v.AdBreaks }).(AdBreakArrayOutput)
}

// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
func (o JobConfigOutput) EditList() EditAtomArrayOutput {
	return o.ApplyT(func(v JobConfig) []EditAtom { return v.EditList }).(EditAtomArrayOutput)
}

// List of elementary streams.
func (o JobConfigOutput) ElementaryStreams() ElementaryStreamArrayOutput {
	return o.ApplyT(func(v JobConfig) []ElementaryStream { return v.ElementaryStreams }).(ElementaryStreamArrayOutput)
}

// List of input assets stored in Cloud Storage.
func (o JobConfigOutput) Inputs() InputArrayOutput {
	return o.ApplyT(func(v JobConfig) []Input { return v.Inputs }).(InputArrayOutput)
}

// List of output manifests.
func (o JobConfigOutput) Manifests() ManifestArrayOutput {
	return o.ApplyT(func(v JobConfig) []Manifest { return v.Manifests }).(ManifestArrayOutput)
}

// List of multiplexing settings for output streams.
func (o JobConfigOutput) MuxStreams() MuxStreamArrayOutput {
	return o.ApplyT(func(v JobConfig) []MuxStream { return v.MuxStreams }).(MuxStreamArrayOutput)
}

// Output configuration.
func (o JobConfigOutput) Output() OutputPtrOutput {
	return o.ApplyT(func(v JobConfig) *Output { return v.Output }).(OutputPtrOutput)
}

// List of overlays on the output video, in descending Z-order.
func (o JobConfigOutput) Overlays() OverlayArrayOutput {
	return o.ApplyT(func(v JobConfig) []Overlay { return v.Overlays }).(OverlayArrayOutput)
}

// Destination on Pub/Sub.
func (o JobConfigOutput) PubsubDestination() PubsubDestinationPtrOutput {
	return o.ApplyT(func(v JobConfig) *PubsubDestination { return v.PubsubDestination }).(PubsubDestinationPtrOutput)
}

// List of output sprite sheets.
func (o JobConfigOutput) SpriteSheets() SpriteSheetArrayOutput {
	return o.ApplyT(func(v JobConfig) []SpriteSheet { return v.SpriteSheets }).(SpriteSheetArrayOutput)
}

type JobConfigPtrOutput struct{ *pulumi.OutputState }

func (JobConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfig)(nil)).Elem()
}

func (o JobConfigPtrOutput) ToJobConfigPtrOutput() JobConfigPtrOutput {
	return o
}

func (o JobConfigPtrOutput) ToJobConfigPtrOutputWithContext(ctx context.Context) JobConfigPtrOutput {
	return o
}

func (o JobConfigPtrOutput) Elem() JobConfigOutput {
	return o.ApplyT(func(v *JobConfig) JobConfig {
		if v != nil {
			return *v
		}
		var ret JobConfig
		return ret
	}).(JobConfigOutput)
}

// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
func (o JobConfigPtrOutput) AdBreaks() AdBreakArrayOutput {
	return o.ApplyT(func(v *JobConfig) []AdBreak {
		if v == nil {
			return nil
		}
		return v.AdBreaks
	}).(AdBreakArrayOutput)
}

// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
func (o JobConfigPtrOutput) EditList() EditAtomArrayOutput {
	return o.ApplyT(func(v *JobConfig) []EditAtom {
		if v == nil {
			return nil
		}
		return v.EditList
	}).(EditAtomArrayOutput)
}

// List of elementary streams.
func (o JobConfigPtrOutput) ElementaryStreams() ElementaryStreamArrayOutput {
	return o.ApplyT(func(v *JobConfig) []ElementaryStream {
		if v == nil {
			return nil
		}
		return v.ElementaryStreams
	}).(ElementaryStreamArrayOutput)
}

// List of input assets stored in Cloud Storage.
func (o JobConfigPtrOutput) Inputs() InputArrayOutput {
	return o.ApplyT(func(v *JobConfig) []Input {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(InputArrayOutput)
}

// List of output manifests.
func (o JobConfigPtrOutput) Manifests() ManifestArrayOutput {
	return o.ApplyT(func(v *JobConfig) []Manifest {
		if v == nil {
			return nil
		}
		return v.Manifests
	}).(ManifestArrayOutput)
}

// List of multiplexing settings for output streams.
func (o JobConfigPtrOutput) MuxStreams() MuxStreamArrayOutput {
	return o.ApplyT(func(v *JobConfig) []MuxStream {
		if v == nil {
			return nil
		}
		return v.MuxStreams
	}).(MuxStreamArrayOutput)
}

// Output configuration.
func (o JobConfigPtrOutput) Output() OutputPtrOutput {
	return o.ApplyT(func(v *JobConfig) *Output {
		if v == nil {
			return nil
		}
		return v.Output
	}).(OutputPtrOutput)
}

// List of overlays on the output video, in descending Z-order.
func (o JobConfigPtrOutput) Overlays() OverlayArrayOutput {
	return o.ApplyT(func(v *JobConfig) []Overlay {
		if v == nil {
			return nil
		}
		return v.Overlays
	}).(OverlayArrayOutput)
}

// Destination on Pub/Sub.
func (o JobConfigPtrOutput) PubsubDestination() PubsubDestinationPtrOutput {
	return o.ApplyT(func(v *JobConfig) *PubsubDestination {
		if v == nil {
			return nil
		}
		return v.PubsubDestination
	}).(PubsubDestinationPtrOutput)
}

// List of output sprite sheets.
func (o JobConfigPtrOutput) SpriteSheets() SpriteSheetArrayOutput {
	return o.ApplyT(func(v *JobConfig) []SpriteSheet {
		if v == nil {
			return nil
		}
		return v.SpriteSheets
	}).(SpriteSheetArrayOutput)
}

// Job configuration
type JobConfigResponse struct {
	// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
	AdBreaks []AdBreakResponse `pulumi:"adBreaks"`
	// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
	EditList []EditAtomResponse `pulumi:"editList"`
	// List of elementary streams.
	ElementaryStreams []ElementaryStreamResponse `pulumi:"elementaryStreams"`
	// List of input assets stored in Cloud Storage.
	Inputs []InputResponse `pulumi:"inputs"`
	// List of output manifests.
	Manifests []ManifestResponse `pulumi:"manifests"`
	// List of multiplexing settings for output streams.
	MuxStreams []MuxStreamResponse `pulumi:"muxStreams"`
	// Output configuration.
	Output OutputResponse `pulumi:"output"`
	// List of overlays on the output video, in descending Z-order.
	Overlays []OverlayResponse `pulumi:"overlays"`
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationResponse `pulumi:"pubsubDestination"`
	// List of output sprite sheets.
	SpriteSheets []SpriteSheetResponse `pulumi:"spriteSheets"`
}

// JobConfigResponseInput is an input type that accepts JobConfigResponseArgs and JobConfigResponseOutput values.
// You can construct a concrete instance of `JobConfigResponseInput` via:
//
//          JobConfigResponseArgs{...}
type JobConfigResponseInput interface {
	pulumi.Input

	ToJobConfigResponseOutput() JobConfigResponseOutput
	ToJobConfigResponseOutputWithContext(context.Context) JobConfigResponseOutput
}

// Job configuration
type JobConfigResponseArgs struct {
	// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
	AdBreaks AdBreakResponseArrayInput `pulumi:"adBreaks"`
	// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
	EditList EditAtomResponseArrayInput `pulumi:"editList"`
	// List of elementary streams.
	ElementaryStreams ElementaryStreamResponseArrayInput `pulumi:"elementaryStreams"`
	// List of input assets stored in Cloud Storage.
	Inputs InputResponseArrayInput `pulumi:"inputs"`
	// List of output manifests.
	Manifests ManifestResponseArrayInput `pulumi:"manifests"`
	// List of multiplexing settings for output streams.
	MuxStreams MuxStreamResponseArrayInput `pulumi:"muxStreams"`
	// Output configuration.
	Output OutputResponseInput `pulumi:"output"`
	// List of overlays on the output video, in descending Z-order.
	Overlays OverlayResponseArrayInput `pulumi:"overlays"`
	// Destination on Pub/Sub.
	PubsubDestination PubsubDestinationResponseInput `pulumi:"pubsubDestination"`
	// List of output sprite sheets.
	SpriteSheets SpriteSheetResponseArrayInput `pulumi:"spriteSheets"`
}

func (JobConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigResponse)(nil)).Elem()
}

func (i JobConfigResponseArgs) ToJobConfigResponseOutput() JobConfigResponseOutput {
	return i.ToJobConfigResponseOutputWithContext(context.Background())
}

func (i JobConfigResponseArgs) ToJobConfigResponseOutputWithContext(ctx context.Context) JobConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigResponseOutput)
}

func (i JobConfigResponseArgs) ToJobConfigResponsePtrOutput() JobConfigResponsePtrOutput {
	return i.ToJobConfigResponsePtrOutputWithContext(context.Background())
}

func (i JobConfigResponseArgs) ToJobConfigResponsePtrOutputWithContext(ctx context.Context) JobConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigResponseOutput).ToJobConfigResponsePtrOutputWithContext(ctx)
}

// JobConfigResponsePtrInput is an input type that accepts JobConfigResponseArgs, JobConfigResponsePtr and JobConfigResponsePtrOutput values.
// You can construct a concrete instance of `JobConfigResponsePtrInput` via:
//
//          JobConfigResponseArgs{...}
//
//  or:
//
//          nil
type JobConfigResponsePtrInput interface {
	pulumi.Input

	ToJobConfigResponsePtrOutput() JobConfigResponsePtrOutput
	ToJobConfigResponsePtrOutputWithContext(context.Context) JobConfigResponsePtrOutput
}

type jobConfigResponsePtrType JobConfigResponseArgs

func JobConfigResponsePtr(v *JobConfigResponseArgs) JobConfigResponsePtrInput {
	return (*jobConfigResponsePtrType)(v)
}

func (*jobConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigResponse)(nil)).Elem()
}

func (i *jobConfigResponsePtrType) ToJobConfigResponsePtrOutput() JobConfigResponsePtrOutput {
	return i.ToJobConfigResponsePtrOutputWithContext(context.Background())
}

func (i *jobConfigResponsePtrType) ToJobConfigResponsePtrOutputWithContext(ctx context.Context) JobConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobConfigResponsePtrOutput)
}

// Job configuration
type JobConfigResponseOutput struct{ *pulumi.OutputState }

func (JobConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobConfigResponse)(nil)).Elem()
}

func (o JobConfigResponseOutput) ToJobConfigResponseOutput() JobConfigResponseOutput {
	return o
}

func (o JobConfigResponseOutput) ToJobConfigResponseOutputWithContext(ctx context.Context) JobConfigResponseOutput {
	return o
}

func (o JobConfigResponseOutput) ToJobConfigResponsePtrOutput() JobConfigResponsePtrOutput {
	return o.ToJobConfigResponsePtrOutputWithContext(context.Background())
}

func (o JobConfigResponseOutput) ToJobConfigResponsePtrOutputWithContext(ctx context.Context) JobConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobConfigResponse) *JobConfigResponse {
		return &v
	}).(JobConfigResponsePtrOutput)
}

// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
func (o JobConfigResponseOutput) AdBreaks() AdBreakResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []AdBreakResponse { return v.AdBreaks }).(AdBreakResponseArrayOutput)
}

// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
func (o JobConfigResponseOutput) EditList() EditAtomResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []EditAtomResponse { return v.EditList }).(EditAtomResponseArrayOutput)
}

// List of elementary streams.
func (o JobConfigResponseOutput) ElementaryStreams() ElementaryStreamResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []ElementaryStreamResponse { return v.ElementaryStreams }).(ElementaryStreamResponseArrayOutput)
}

// List of input assets stored in Cloud Storage.
func (o JobConfigResponseOutput) Inputs() InputResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []InputResponse { return v.Inputs }).(InputResponseArrayOutput)
}

// List of output manifests.
func (o JobConfigResponseOutput) Manifests() ManifestResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []ManifestResponse { return v.Manifests }).(ManifestResponseArrayOutput)
}

// List of multiplexing settings for output streams.
func (o JobConfigResponseOutput) MuxStreams() MuxStreamResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []MuxStreamResponse { return v.MuxStreams }).(MuxStreamResponseArrayOutput)
}

// Output configuration.
func (o JobConfigResponseOutput) Output() OutputResponseOutput {
	return o.ApplyT(func(v JobConfigResponse) OutputResponse { return v.Output }).(OutputResponseOutput)
}

// List of overlays on the output video, in descending Z-order.
func (o JobConfigResponseOutput) Overlays() OverlayResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []OverlayResponse { return v.Overlays }).(OverlayResponseArrayOutput)
}

// Destination on Pub/Sub.
func (o JobConfigResponseOutput) PubsubDestination() PubsubDestinationResponseOutput {
	return o.ApplyT(func(v JobConfigResponse) PubsubDestinationResponse { return v.PubsubDestination }).(PubsubDestinationResponseOutput)
}

// List of output sprite sheets.
func (o JobConfigResponseOutput) SpriteSheets() SpriteSheetResponseArrayOutput {
	return o.ApplyT(func(v JobConfigResponse) []SpriteSheetResponse { return v.SpriteSheets }).(SpriteSheetResponseArrayOutput)
}

type JobConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (JobConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobConfigResponse)(nil)).Elem()
}

func (o JobConfigResponsePtrOutput) ToJobConfigResponsePtrOutput() JobConfigResponsePtrOutput {
	return o
}

func (o JobConfigResponsePtrOutput) ToJobConfigResponsePtrOutputWithContext(ctx context.Context) JobConfigResponsePtrOutput {
	return o
}

func (o JobConfigResponsePtrOutput) Elem() JobConfigResponseOutput {
	return o.ApplyT(func(v *JobConfigResponse) JobConfigResponse {
		if v != nil {
			return *v
		}
		var ret JobConfigResponse
		return ret
	}).(JobConfigResponseOutput)
}

// List of ad breaks. Specifies where to insert ad break tags in the output manifests.
func (o JobConfigResponsePtrOutput) AdBreaks() AdBreakResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []AdBreakResponse {
		if v == nil {
			return nil
		}
		return v.AdBreaks
	}).(AdBreakResponseArrayOutput)
}

// List of `Edit atom`s. Defines the ultimate timeline of the resulting file or manifest.
func (o JobConfigResponsePtrOutput) EditList() EditAtomResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []EditAtomResponse {
		if v == nil {
			return nil
		}
		return v.EditList
	}).(EditAtomResponseArrayOutput)
}

// List of elementary streams.
func (o JobConfigResponsePtrOutput) ElementaryStreams() ElementaryStreamResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []ElementaryStreamResponse {
		if v == nil {
			return nil
		}
		return v.ElementaryStreams
	}).(ElementaryStreamResponseArrayOutput)
}

// List of input assets stored in Cloud Storage.
func (o JobConfigResponsePtrOutput) Inputs() InputResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []InputResponse {
		if v == nil {
			return nil
		}
		return v.Inputs
	}).(InputResponseArrayOutput)
}

// List of output manifests.
func (o JobConfigResponsePtrOutput) Manifests() ManifestResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []ManifestResponse {
		if v == nil {
			return nil
		}
		return v.Manifests
	}).(ManifestResponseArrayOutput)
}

// List of multiplexing settings for output streams.
func (o JobConfigResponsePtrOutput) MuxStreams() MuxStreamResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []MuxStreamResponse {
		if v == nil {
			return nil
		}
		return v.MuxStreams
	}).(MuxStreamResponseArrayOutput)
}

// Output configuration.
func (o JobConfigResponsePtrOutput) Output() OutputResponsePtrOutput {
	return o.ApplyT(func(v *JobConfigResponse) *OutputResponse {
		if v == nil {
			return nil
		}
		return &v.Output
	}).(OutputResponsePtrOutput)
}

// List of overlays on the output video, in descending Z-order.
func (o JobConfigResponsePtrOutput) Overlays() OverlayResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []OverlayResponse {
		if v == nil {
			return nil
		}
		return v.Overlays
	}).(OverlayResponseArrayOutput)
}

// Destination on Pub/Sub.
func (o JobConfigResponsePtrOutput) PubsubDestination() PubsubDestinationResponsePtrOutput {
	return o.ApplyT(func(v *JobConfigResponse) *PubsubDestinationResponse {
		if v == nil {
			return nil
		}
		return &v.PubsubDestination
	}).(PubsubDestinationResponsePtrOutput)
}

// List of output sprite sheets.
func (o JobConfigResponsePtrOutput) SpriteSheets() SpriteSheetResponseArrayOutput {
	return o.ApplyT(func(v *JobConfigResponse) []SpriteSheetResponse {
		if v == nil {
			return nil
		}
		return v.SpriteSheets
	}).(SpriteSheetResponseArrayOutput)
}

// Manifest configuration.
type Manifest struct {
	// The name of the generated file. The default is `"manifest"` with the extension suffix corresponding to the `Manifest.type`.
	FileName *string `pulumi:"fileName"`
	// List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
	MuxStreams []string `pulumi:"muxStreams"`
	// Type of the manifest, can be "HLS" or "DASH".
	Type ManifestType `pulumi:"type"`
}

// ManifestInput is an input type that accepts ManifestArgs and ManifestOutput values.
// You can construct a concrete instance of `ManifestInput` via:
//
//          ManifestArgs{...}
type ManifestInput interface {
	pulumi.Input

	ToManifestOutput() ManifestOutput
	ToManifestOutputWithContext(context.Context) ManifestOutput
}

// Manifest configuration.
type ManifestArgs struct {
	// The name of the generated file. The default is `"manifest"` with the extension suffix corresponding to the `Manifest.type`.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
	MuxStreams pulumi.StringArrayInput `pulumi:"muxStreams"`
	// Type of the manifest, can be "HLS" or "DASH".
	Type ManifestTypeInput `pulumi:"type"`
}

func (ManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Manifest)(nil)).Elem()
}

func (i ManifestArgs) ToManifestOutput() ManifestOutput {
	return i.ToManifestOutputWithContext(context.Background())
}

func (i ManifestArgs) ToManifestOutputWithContext(ctx context.Context) ManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestOutput)
}

// ManifestArrayInput is an input type that accepts ManifestArray and ManifestArrayOutput values.
// You can construct a concrete instance of `ManifestArrayInput` via:
//
//          ManifestArray{ ManifestArgs{...} }
type ManifestArrayInput interface {
	pulumi.Input

	ToManifestArrayOutput() ManifestArrayOutput
	ToManifestArrayOutputWithContext(context.Context) ManifestArrayOutput
}

type ManifestArray []ManifestInput

func (ManifestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Manifest)(nil)).Elem()
}

func (i ManifestArray) ToManifestArrayOutput() ManifestArrayOutput {
	return i.ToManifestArrayOutputWithContext(context.Background())
}

func (i ManifestArray) ToManifestArrayOutputWithContext(ctx context.Context) ManifestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestArrayOutput)
}

// Manifest configuration.
type ManifestOutput struct{ *pulumi.OutputState }

func (ManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Manifest)(nil)).Elem()
}

func (o ManifestOutput) ToManifestOutput() ManifestOutput {
	return o
}

func (o ManifestOutput) ToManifestOutputWithContext(ctx context.Context) ManifestOutput {
	return o
}

// The name of the generated file. The default is `"manifest"` with the extension suffix corresponding to the `Manifest.type`.
func (o ManifestOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Manifest) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
func (o ManifestOutput) MuxStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Manifest) []string { return v.MuxStreams }).(pulumi.StringArrayOutput)
}

// Type of the manifest, can be "HLS" or "DASH".
func (o ManifestOutput) Type() ManifestTypeOutput {
	return o.ApplyT(func(v Manifest) ManifestType { return v.Type }).(ManifestTypeOutput)
}

type ManifestArrayOutput struct{ *pulumi.OutputState }

func (ManifestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Manifest)(nil)).Elem()
}

func (o ManifestArrayOutput) ToManifestArrayOutput() ManifestArrayOutput {
	return o
}

func (o ManifestArrayOutput) ToManifestArrayOutputWithContext(ctx context.Context) ManifestArrayOutput {
	return o
}

func (o ManifestArrayOutput) Index(i pulumi.IntInput) ManifestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Manifest {
		return vs[0].([]Manifest)[vs[1].(int)]
	}).(ManifestOutput)
}

// Manifest configuration.
type ManifestResponse struct {
	// The name of the generated file. The default is `"manifest"` with the extension suffix corresponding to the `Manifest.type`.
	FileName string `pulumi:"fileName"`
	// List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
	MuxStreams []string `pulumi:"muxStreams"`
	// Type of the manifest, can be "HLS" or "DASH".
	Type string `pulumi:"type"`
}

// ManifestResponseInput is an input type that accepts ManifestResponseArgs and ManifestResponseOutput values.
// You can construct a concrete instance of `ManifestResponseInput` via:
//
//          ManifestResponseArgs{...}
type ManifestResponseInput interface {
	pulumi.Input

	ToManifestResponseOutput() ManifestResponseOutput
	ToManifestResponseOutputWithContext(context.Context) ManifestResponseOutput
}

// Manifest configuration.
type ManifestResponseArgs struct {
	// The name of the generated file. The default is `"manifest"` with the extension suffix corresponding to the `Manifest.type`.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
	MuxStreams pulumi.StringArrayInput `pulumi:"muxStreams"`
	// Type of the manifest, can be "HLS" or "DASH".
	Type pulumi.StringInput `pulumi:"type"`
}

func (ManifestResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManifestResponse)(nil)).Elem()
}

func (i ManifestResponseArgs) ToManifestResponseOutput() ManifestResponseOutput {
	return i.ToManifestResponseOutputWithContext(context.Background())
}

func (i ManifestResponseArgs) ToManifestResponseOutputWithContext(ctx context.Context) ManifestResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestResponseOutput)
}

// ManifestResponseArrayInput is an input type that accepts ManifestResponseArray and ManifestResponseArrayOutput values.
// You can construct a concrete instance of `ManifestResponseArrayInput` via:
//
//          ManifestResponseArray{ ManifestResponseArgs{...} }
type ManifestResponseArrayInput interface {
	pulumi.Input

	ToManifestResponseArrayOutput() ManifestResponseArrayOutput
	ToManifestResponseArrayOutputWithContext(context.Context) ManifestResponseArrayOutput
}

type ManifestResponseArray []ManifestResponseInput

func (ManifestResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManifestResponse)(nil)).Elem()
}

func (i ManifestResponseArray) ToManifestResponseArrayOutput() ManifestResponseArrayOutput {
	return i.ToManifestResponseArrayOutputWithContext(context.Background())
}

func (i ManifestResponseArray) ToManifestResponseArrayOutputWithContext(ctx context.Context) ManifestResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManifestResponseArrayOutput)
}

// Manifest configuration.
type ManifestResponseOutput struct{ *pulumi.OutputState }

func (ManifestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManifestResponse)(nil)).Elem()
}

func (o ManifestResponseOutput) ToManifestResponseOutput() ManifestResponseOutput {
	return o
}

func (o ManifestResponseOutput) ToManifestResponseOutputWithContext(ctx context.Context) ManifestResponseOutput {
	return o
}

// The name of the generated file. The default is `"manifest"` with the extension suffix corresponding to the `Manifest.type`.
func (o ManifestResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v ManifestResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// List of user given `MuxStream.key`s that should appear in this manifest. When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key` and `.m3u8` extension is generated for each element of the `Manifest.mux_streams`.
func (o ManifestResponseOutput) MuxStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManifestResponse) []string { return v.MuxStreams }).(pulumi.StringArrayOutput)
}

// Type of the manifest, can be "HLS" or "DASH".
func (o ManifestResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ManifestResponse) string { return v.Type }).(pulumi.StringOutput)
}

type ManifestResponseArrayOutput struct{ *pulumi.OutputState }

func (ManifestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManifestResponse)(nil)).Elem()
}

func (o ManifestResponseArrayOutput) ToManifestResponseArrayOutput() ManifestResponseArrayOutput {
	return o
}

func (o ManifestResponseArrayOutput) ToManifestResponseArrayOutputWithContext(ctx context.Context) ManifestResponseArrayOutput {
	return o
}

func (o ManifestResponseArrayOutput) Index(i pulumi.IntInput) ManifestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManifestResponse {
		return vs[0].([]ManifestResponse)[vs[1].(int)]
	}).(ManifestResponseOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryption struct {
	// 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.
	KeyId string `pulumi:"keyId"`
	// Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'
	Scheme string `pulumi:"scheme"`
}

// MpegCommonEncryptionInput is an input type that accepts MpegCommonEncryptionArgs and MpegCommonEncryptionOutput values.
// You can construct a concrete instance of `MpegCommonEncryptionInput` via:
//
//          MpegCommonEncryptionArgs{...}
type MpegCommonEncryptionInput interface {
	pulumi.Input

	ToMpegCommonEncryptionOutput() MpegCommonEncryptionOutput
	ToMpegCommonEncryptionOutputWithContext(context.Context) MpegCommonEncryptionOutput
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionArgs struct {
	// 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'
	Scheme pulumi.StringInput `pulumi:"scheme"`
}

func (MpegCommonEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MpegCommonEncryption)(nil)).Elem()
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionOutput() MpegCommonEncryptionOutput {
	return i.ToMpegCommonEncryptionOutputWithContext(context.Background())
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionOutputWithContext(ctx context.Context) MpegCommonEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpegCommonEncryptionOutput)
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return i.ToMpegCommonEncryptionPtrOutputWithContext(context.Background())
}

func (i MpegCommonEncryptionArgs) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpegCommonEncryptionOutput).ToMpegCommonEncryptionPtrOutputWithContext(ctx)
}

// MpegCommonEncryptionPtrInput is an input type that accepts MpegCommonEncryptionArgs, MpegCommonEncryptionPtr and MpegCommonEncryptionPtrOutput values.
// You can construct a concrete instance of `MpegCommonEncryptionPtrInput` via:
//
//          MpegCommonEncryptionArgs{...}
//
//  or:
//
//          nil
type MpegCommonEncryptionPtrInput interface {
	pulumi.Input

	ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput
	ToMpegCommonEncryptionPtrOutputWithContext(context.Context) MpegCommonEncryptionPtrOutput
}

type mpegCommonEncryptionPtrType MpegCommonEncryptionArgs

func MpegCommonEncryptionPtr(v *MpegCommonEncryptionArgs) MpegCommonEncryptionPtrInput {
	return (*mpegCommonEncryptionPtrType)(v)
}

func (*mpegCommonEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MpegCommonEncryption)(nil)).Elem()
}

func (i *mpegCommonEncryptionPtrType) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return i.ToMpegCommonEncryptionPtrOutputWithContext(context.Background())
}

func (i *mpegCommonEncryptionPtrType) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpegCommonEncryptionPtrOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionOutput struct{ *pulumi.OutputState }

func (MpegCommonEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpegCommonEncryption)(nil)).Elem()
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionOutput() MpegCommonEncryptionOutput {
	return o
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionOutputWithContext(ctx context.Context) MpegCommonEncryptionOutput {
	return o
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return o.ToMpegCommonEncryptionPtrOutputWithContext(context.Background())
}

func (o MpegCommonEncryptionOutput) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MpegCommonEncryption) *MpegCommonEncryption {
		return &v
	}).(MpegCommonEncryptionPtrOutput)
}

// 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.
func (o MpegCommonEncryptionOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v MpegCommonEncryption) string { return v.KeyId }).(pulumi.StringOutput)
}

// Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'
func (o MpegCommonEncryptionOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v MpegCommonEncryption) string { return v.Scheme }).(pulumi.StringOutput)
}

type MpegCommonEncryptionPtrOutput struct{ *pulumi.OutputState }

func (MpegCommonEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MpegCommonEncryption)(nil)).Elem()
}

func (o MpegCommonEncryptionPtrOutput) ToMpegCommonEncryptionPtrOutput() MpegCommonEncryptionPtrOutput {
	return o
}

func (o MpegCommonEncryptionPtrOutput) ToMpegCommonEncryptionPtrOutputWithContext(ctx context.Context) MpegCommonEncryptionPtrOutput {
	return o
}

func (o MpegCommonEncryptionPtrOutput) Elem() MpegCommonEncryptionOutput {
	return o.ApplyT(func(v *MpegCommonEncryption) MpegCommonEncryption {
		if v != nil {
			return *v
		}
		var ret MpegCommonEncryption
		return ret
	}).(MpegCommonEncryptionOutput)
}

// 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.
func (o MpegCommonEncryptionPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MpegCommonEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyId
	}).(pulumi.StringPtrOutput)
}

// Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'
func (o MpegCommonEncryptionPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MpegCommonEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionResponse struct {
	// 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.
	KeyId string `pulumi:"keyId"`
	// Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'
	Scheme string `pulumi:"scheme"`
}

// MpegCommonEncryptionResponseInput is an input type that accepts MpegCommonEncryptionResponseArgs and MpegCommonEncryptionResponseOutput values.
// You can construct a concrete instance of `MpegCommonEncryptionResponseInput` via:
//
//          MpegCommonEncryptionResponseArgs{...}
type MpegCommonEncryptionResponseInput interface {
	pulumi.Input

	ToMpegCommonEncryptionResponseOutput() MpegCommonEncryptionResponseOutput
	ToMpegCommonEncryptionResponseOutputWithContext(context.Context) MpegCommonEncryptionResponseOutput
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionResponseArgs struct {
	// 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.
	KeyId pulumi.StringInput `pulumi:"keyId"`
	// Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'
	Scheme pulumi.StringInput `pulumi:"scheme"`
}

func (MpegCommonEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MpegCommonEncryptionResponse)(nil)).Elem()
}

func (i MpegCommonEncryptionResponseArgs) ToMpegCommonEncryptionResponseOutput() MpegCommonEncryptionResponseOutput {
	return i.ToMpegCommonEncryptionResponseOutputWithContext(context.Background())
}

func (i MpegCommonEncryptionResponseArgs) ToMpegCommonEncryptionResponseOutputWithContext(ctx context.Context) MpegCommonEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MpegCommonEncryptionResponseOutput)
}

// Configuration for MPEG Common Encryption (MPEG-CENC).
type MpegCommonEncryptionResponseOutput struct{ *pulumi.OutputState }

func (MpegCommonEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MpegCommonEncryptionResponse)(nil)).Elem()
}

func (o MpegCommonEncryptionResponseOutput) ToMpegCommonEncryptionResponseOutput() MpegCommonEncryptionResponseOutput {
	return o
}

func (o MpegCommonEncryptionResponseOutput) ToMpegCommonEncryptionResponseOutputWithContext(ctx context.Context) MpegCommonEncryptionResponseOutput {
	return o
}

// 128 bit Key ID represented as lowercase hexadecimal digits for use with common encryption.
func (o MpegCommonEncryptionResponseOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v MpegCommonEncryptionResponse) string { return v.KeyId }).(pulumi.StringOutput)
}

// Specify the encryption scheme. Supported encryption schemes: - 'cenc' - 'cbcs'
func (o MpegCommonEncryptionResponseOutput) Scheme() pulumi.StringOutput {
	return o.ApplyT(func(v MpegCommonEncryptionResponse) string { return v.Scheme }).(pulumi.StringOutput)
}

// Multiplexing settings for output stream.
type MuxStream struct {
	// The container format. The default is `"mp4"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `".m4s"` - 'mp4' - 'vtt'
	Container *string `pulumi:"container"`
	// List of `ElementaryStream.key`s multiplexed in this stream.
	ElementaryStreams []string `pulumi:"elementaryStreams"`
	// Encryption settings.
	Encryption *Encryption `pulumi:"encryption"`
	// The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"mux_stream0000000123.ts"`.
	FileName *string `pulumi:"fileName"`
	// A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `".m3u8"` extension suffix.
	Key *string `pulumi:"key"`
	// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
	SegmentSettings *SegmentSettings `pulumi:"segmentSettings"`
}

// MuxStreamInput is an input type that accepts MuxStreamArgs and MuxStreamOutput values.
// You can construct a concrete instance of `MuxStreamInput` via:
//
//          MuxStreamArgs{...}
type MuxStreamInput interface {
	pulumi.Input

	ToMuxStreamOutput() MuxStreamOutput
	ToMuxStreamOutputWithContext(context.Context) MuxStreamOutput
}

// Multiplexing settings for output stream.
type MuxStreamArgs struct {
	// The container format. The default is `"mp4"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `".m4s"` - 'mp4' - 'vtt'
	Container pulumi.StringPtrInput `pulumi:"container"`
	// List of `ElementaryStream.key`s multiplexed in this stream.
	ElementaryStreams pulumi.StringArrayInput `pulumi:"elementaryStreams"`
	// Encryption settings.
	Encryption EncryptionPtrInput `pulumi:"encryption"`
	// The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"mux_stream0000000123.ts"`.
	FileName pulumi.StringPtrInput `pulumi:"fileName"`
	// A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `".m3u8"` extension suffix.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
	SegmentSettings SegmentSettingsPtrInput `pulumi:"segmentSettings"`
}

func (MuxStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuxStream)(nil)).Elem()
}

func (i MuxStreamArgs) ToMuxStreamOutput() MuxStreamOutput {
	return i.ToMuxStreamOutputWithContext(context.Background())
}

func (i MuxStreamArgs) ToMuxStreamOutputWithContext(ctx context.Context) MuxStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuxStreamOutput)
}

// MuxStreamArrayInput is an input type that accepts MuxStreamArray and MuxStreamArrayOutput values.
// You can construct a concrete instance of `MuxStreamArrayInput` via:
//
//          MuxStreamArray{ MuxStreamArgs{...} }
type MuxStreamArrayInput interface {
	pulumi.Input

	ToMuxStreamArrayOutput() MuxStreamArrayOutput
	ToMuxStreamArrayOutputWithContext(context.Context) MuxStreamArrayOutput
}

type MuxStreamArray []MuxStreamInput

func (MuxStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuxStream)(nil)).Elem()
}

func (i MuxStreamArray) ToMuxStreamArrayOutput() MuxStreamArrayOutput {
	return i.ToMuxStreamArrayOutputWithContext(context.Background())
}

func (i MuxStreamArray) ToMuxStreamArrayOutputWithContext(ctx context.Context) MuxStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuxStreamArrayOutput)
}

// Multiplexing settings for output stream.
type MuxStreamOutput struct{ *pulumi.OutputState }

func (MuxStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuxStream)(nil)).Elem()
}

func (o MuxStreamOutput) ToMuxStreamOutput() MuxStreamOutput {
	return o
}

func (o MuxStreamOutput) ToMuxStreamOutputWithContext(ctx context.Context) MuxStreamOutput {
	return o
}

// The container format. The default is `"mp4"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `".m4s"` - 'mp4' - 'vtt'
func (o MuxStreamOutput) Container() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuxStream) *string { return v.Container }).(pulumi.StringPtrOutput)
}

// List of `ElementaryStream.key`s multiplexed in this stream.
func (o MuxStreamOutput) ElementaryStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuxStream) []string { return v.ElementaryStreams }).(pulumi.StringArrayOutput)
}

// Encryption settings.
func (o MuxStreamOutput) Encryption() EncryptionPtrOutput {
	return o.ApplyT(func(v MuxStream) *Encryption { return v.Encryption }).(EncryptionPtrOutput)
}

// The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"mux_stream0000000123.ts"`.
func (o MuxStreamOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuxStream) *string { return v.FileName }).(pulumi.StringPtrOutput)
}

// A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `".m3u8"` extension suffix.
func (o MuxStreamOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuxStream) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
func (o MuxStreamOutput) SegmentSettings() SegmentSettingsPtrOutput {
	return o.ApplyT(func(v MuxStream) *SegmentSettings { return v.SegmentSettings }).(SegmentSettingsPtrOutput)
}

type MuxStreamArrayOutput struct{ *pulumi.OutputState }

func (MuxStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuxStream)(nil)).Elem()
}

func (o MuxStreamArrayOutput) ToMuxStreamArrayOutput() MuxStreamArrayOutput {
	return o
}

func (o MuxStreamArrayOutput) ToMuxStreamArrayOutputWithContext(ctx context.Context) MuxStreamArrayOutput {
	return o
}

func (o MuxStreamArrayOutput) Index(i pulumi.IntInput) MuxStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuxStream {
		return vs[0].([]MuxStream)[vs[1].(int)]
	}).(MuxStreamOutput)
}

// Multiplexing settings for output stream.
type MuxStreamResponse struct {
	// The container format. The default is `"mp4"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `".m4s"` - 'mp4' - 'vtt'
	Container string `pulumi:"container"`
	// List of `ElementaryStream.key`s multiplexed in this stream.
	ElementaryStreams []string `pulumi:"elementaryStreams"`
	// Encryption settings.
	Encryption EncryptionResponse `pulumi:"encryption"`
	// The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"mux_stream0000000123.ts"`.
	FileName string `pulumi:"fileName"`
	// A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `".m3u8"` extension suffix.
	Key string `pulumi:"key"`
	// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
	SegmentSettings SegmentSettingsResponse `pulumi:"segmentSettings"`
}

// MuxStreamResponseInput is an input type that accepts MuxStreamResponseArgs and MuxStreamResponseOutput values.
// You can construct a concrete instance of `MuxStreamResponseInput` via:
//
//          MuxStreamResponseArgs{...}
type MuxStreamResponseInput interface {
	pulumi.Input

	ToMuxStreamResponseOutput() MuxStreamResponseOutput
	ToMuxStreamResponseOutputWithContext(context.Context) MuxStreamResponseOutput
}

// Multiplexing settings for output stream.
type MuxStreamResponseArgs struct {
	// The container format. The default is `"mp4"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `".m4s"` - 'mp4' - 'vtt'
	Container pulumi.StringInput `pulumi:"container"`
	// List of `ElementaryStream.key`s multiplexed in this stream.
	ElementaryStreams pulumi.StringArrayInput `pulumi:"elementaryStreams"`
	// Encryption settings.
	Encryption EncryptionResponseInput `pulumi:"encryption"`
	// The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"mux_stream0000000123.ts"`.
	FileName pulumi.StringInput `pulumi:"fileName"`
	// A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `".m3u8"` extension suffix.
	Key pulumi.StringInput `pulumi:"key"`
	// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
	SegmentSettings SegmentSettingsResponseInput `pulumi:"segmentSettings"`
}

func (MuxStreamResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuxStreamResponse)(nil)).Elem()
}

func (i MuxStreamResponseArgs) ToMuxStreamResponseOutput() MuxStreamResponseOutput {
	return i.ToMuxStreamResponseOutputWithContext(context.Background())
}

func (i MuxStreamResponseArgs) ToMuxStreamResponseOutputWithContext(ctx context.Context) MuxStreamResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuxStreamResponseOutput)
}

// MuxStreamResponseArrayInput is an input type that accepts MuxStreamResponseArray and MuxStreamResponseArrayOutput values.
// You can construct a concrete instance of `MuxStreamResponseArrayInput` via:
//
//          MuxStreamResponseArray{ MuxStreamResponseArgs{...} }
type MuxStreamResponseArrayInput interface {
	pulumi.Input

	ToMuxStreamResponseArrayOutput() MuxStreamResponseArrayOutput
	ToMuxStreamResponseArrayOutputWithContext(context.Context) MuxStreamResponseArrayOutput
}

type MuxStreamResponseArray []MuxStreamResponseInput

func (MuxStreamResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuxStreamResponse)(nil)).Elem()
}

func (i MuxStreamResponseArray) ToMuxStreamResponseArrayOutput() MuxStreamResponseArrayOutput {
	return i.ToMuxStreamResponseArrayOutputWithContext(context.Background())
}

func (i MuxStreamResponseArray) ToMuxStreamResponseArrayOutputWithContext(ctx context.Context) MuxStreamResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuxStreamResponseArrayOutput)
}

// Multiplexing settings for output stream.
type MuxStreamResponseOutput struct{ *pulumi.OutputState }

func (MuxStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuxStreamResponse)(nil)).Elem()
}

func (o MuxStreamResponseOutput) ToMuxStreamResponseOutput() MuxStreamResponseOutput {
	return o
}

func (o MuxStreamResponseOutput) ToMuxStreamResponseOutputWithContext(ctx context.Context) MuxStreamResponseOutput {
	return o
}

// The container format. The default is `"mp4"` Supported container formats: - 'ts' - 'fmp4'- the corresponding file extension is `".m4s"` - 'mp4' - 'vtt'
func (o MuxStreamResponseOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v MuxStreamResponse) string { return v.Container }).(pulumi.StringOutput)
}

// List of `ElementaryStream.key`s multiplexed in this stream.
func (o MuxStreamResponseOutput) ElementaryStreams() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuxStreamResponse) []string { return v.ElementaryStreams }).(pulumi.StringArrayOutput)
}

// Encryption settings.
func (o MuxStreamResponseOutput) Encryption() EncryptionResponseOutput {
	return o.ApplyT(func(v MuxStreamResponse) EncryptionResponse { return v.Encryption }).(EncryptionResponseOutput)
}

// The name of the generated file. The default is `MuxStream.key` with the extension suffix corresponding to the `MuxStream.container`. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"mux_stream0000000123.ts"`.
func (o MuxStreamResponseOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v MuxStreamResponse) string { return v.FileName }).(pulumi.StringOutput)
}

// A unique key for this multiplexed stream. HLS media manifests will be named `MuxStream.key` with the `".m3u8"` extension suffix.
func (o MuxStreamResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v MuxStreamResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
func (o MuxStreamResponseOutput) SegmentSettings() SegmentSettingsResponseOutput {
	return o.ApplyT(func(v MuxStreamResponse) SegmentSettingsResponse { return v.SegmentSettings }).(SegmentSettingsResponseOutput)
}

type MuxStreamResponseArrayOutput struct{ *pulumi.OutputState }

func (MuxStreamResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuxStreamResponse)(nil)).Elem()
}

func (o MuxStreamResponseArrayOutput) ToMuxStreamResponseArrayOutput() MuxStreamResponseArrayOutput {
	return o
}

func (o MuxStreamResponseArrayOutput) ToMuxStreamResponseArrayOutputWithContext(ctx context.Context) MuxStreamResponseArrayOutput {
	return o
}

func (o MuxStreamResponseArrayOutput) Index(i pulumi.IntInput) MuxStreamResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuxStreamResponse {
		return vs[0].([]MuxStreamResponse)[vs[1].(int)]
	}).(MuxStreamResponseOutput)
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinate struct {
	// Normalized x coordinate.
	X *float64 `pulumi:"x"`
	// Normalized y coordinate.
	Y *float64 `pulumi:"y"`
}

// NormalizedCoordinateInput is an input type that accepts NormalizedCoordinateArgs and NormalizedCoordinateOutput values.
// You can construct a concrete instance of `NormalizedCoordinateInput` via:
//
//          NormalizedCoordinateArgs{...}
type NormalizedCoordinateInput interface {
	pulumi.Input

	ToNormalizedCoordinateOutput() NormalizedCoordinateOutput
	ToNormalizedCoordinateOutputWithContext(context.Context) NormalizedCoordinateOutput
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateArgs struct {
	// Normalized x coordinate.
	X pulumi.Float64PtrInput `pulumi:"x"`
	// Normalized y coordinate.
	Y pulumi.Float64PtrInput `pulumi:"y"`
}

func (NormalizedCoordinateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NormalizedCoordinate)(nil)).Elem()
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinateOutput() NormalizedCoordinateOutput {
	return i.ToNormalizedCoordinateOutputWithContext(context.Background())
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinateOutputWithContext(ctx context.Context) NormalizedCoordinateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NormalizedCoordinateOutput)
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return i.ToNormalizedCoordinatePtrOutputWithContext(context.Background())
}

func (i NormalizedCoordinateArgs) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NormalizedCoordinateOutput).ToNormalizedCoordinatePtrOutputWithContext(ctx)
}

// NormalizedCoordinatePtrInput is an input type that accepts NormalizedCoordinateArgs, NormalizedCoordinatePtr and NormalizedCoordinatePtrOutput values.
// You can construct a concrete instance of `NormalizedCoordinatePtrInput` via:
//
//          NormalizedCoordinateArgs{...}
//
//  or:
//
//          nil
type NormalizedCoordinatePtrInput interface {
	pulumi.Input

	ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput
	ToNormalizedCoordinatePtrOutputWithContext(context.Context) NormalizedCoordinatePtrOutput
}

type normalizedCoordinatePtrType NormalizedCoordinateArgs

func NormalizedCoordinatePtr(v *NormalizedCoordinateArgs) NormalizedCoordinatePtrInput {
	return (*normalizedCoordinatePtrType)(v)
}

func (*normalizedCoordinatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NormalizedCoordinate)(nil)).Elem()
}

func (i *normalizedCoordinatePtrType) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return i.ToNormalizedCoordinatePtrOutputWithContext(context.Background())
}

func (i *normalizedCoordinatePtrType) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NormalizedCoordinatePtrOutput)
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateOutput struct{ *pulumi.OutputState }

func (NormalizedCoordinateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NormalizedCoordinate)(nil)).Elem()
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinateOutput() NormalizedCoordinateOutput {
	return o
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinateOutputWithContext(ctx context.Context) NormalizedCoordinateOutput {
	return o
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return o.ToNormalizedCoordinatePtrOutputWithContext(context.Background())
}

func (o NormalizedCoordinateOutput) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NormalizedCoordinate) *NormalizedCoordinate {
		return &v
	}).(NormalizedCoordinatePtrOutput)
}

// Normalized x coordinate.
func (o NormalizedCoordinateOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NormalizedCoordinate) *float64 { return v.X }).(pulumi.Float64PtrOutput)
}

// Normalized y coordinate.
func (o NormalizedCoordinateOutput) Y() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v NormalizedCoordinate) *float64 { return v.Y }).(pulumi.Float64PtrOutput)
}

type NormalizedCoordinatePtrOutput struct{ *pulumi.OutputState }

func (NormalizedCoordinatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NormalizedCoordinate)(nil)).Elem()
}

func (o NormalizedCoordinatePtrOutput) ToNormalizedCoordinatePtrOutput() NormalizedCoordinatePtrOutput {
	return o
}

func (o NormalizedCoordinatePtrOutput) ToNormalizedCoordinatePtrOutputWithContext(ctx context.Context) NormalizedCoordinatePtrOutput {
	return o
}

func (o NormalizedCoordinatePtrOutput) Elem() NormalizedCoordinateOutput {
	return o.ApplyT(func(v *NormalizedCoordinate) NormalizedCoordinate {
		if v != nil {
			return *v
		}
		var ret NormalizedCoordinate
		return ret
	}).(NormalizedCoordinateOutput)
}

// Normalized x coordinate.
func (o NormalizedCoordinatePtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NormalizedCoordinate) *float64 {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.Float64PtrOutput)
}

// Normalized y coordinate.
func (o NormalizedCoordinatePtrOutput) Y() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *NormalizedCoordinate) *float64 {
		if v == nil {
			return nil
		}
		return v.Y
	}).(pulumi.Float64PtrOutput)
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateResponse struct {
	// Normalized x coordinate.
	X float64 `pulumi:"x"`
	// Normalized y coordinate.
	Y float64 `pulumi:"y"`
}

// NormalizedCoordinateResponseInput is an input type that accepts NormalizedCoordinateResponseArgs and NormalizedCoordinateResponseOutput values.
// You can construct a concrete instance of `NormalizedCoordinateResponseInput` via:
//
//          NormalizedCoordinateResponseArgs{...}
type NormalizedCoordinateResponseInput interface {
	pulumi.Input

	ToNormalizedCoordinateResponseOutput() NormalizedCoordinateResponseOutput
	ToNormalizedCoordinateResponseOutputWithContext(context.Context) NormalizedCoordinateResponseOutput
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateResponseArgs struct {
	// Normalized x coordinate.
	X pulumi.Float64Input `pulumi:"x"`
	// Normalized y coordinate.
	Y pulumi.Float64Input `pulumi:"y"`
}

func (NormalizedCoordinateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NormalizedCoordinateResponse)(nil)).Elem()
}

func (i NormalizedCoordinateResponseArgs) ToNormalizedCoordinateResponseOutput() NormalizedCoordinateResponseOutput {
	return i.ToNormalizedCoordinateResponseOutputWithContext(context.Background())
}

func (i NormalizedCoordinateResponseArgs) ToNormalizedCoordinateResponseOutputWithContext(ctx context.Context) NormalizedCoordinateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NormalizedCoordinateResponseOutput)
}

// 2D normalized coordinates. Default: `{0.0, 0.0}`
type NormalizedCoordinateResponseOutput struct{ *pulumi.OutputState }

func (NormalizedCoordinateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NormalizedCoordinateResponse)(nil)).Elem()
}

func (o NormalizedCoordinateResponseOutput) ToNormalizedCoordinateResponseOutput() NormalizedCoordinateResponseOutput {
	return o
}

func (o NormalizedCoordinateResponseOutput) ToNormalizedCoordinateResponseOutputWithContext(ctx context.Context) NormalizedCoordinateResponseOutput {
	return o
}

// Normalized x coordinate.
func (o NormalizedCoordinateResponseOutput) X() pulumi.Float64Output {
	return o.ApplyT(func(v NormalizedCoordinateResponse) float64 { return v.X }).(pulumi.Float64Output)
}

// Normalized y coordinate.
func (o NormalizedCoordinateResponseOutput) Y() pulumi.Float64Output {
	return o.ApplyT(func(v NormalizedCoordinateResponse) float64 { return v.Y }).(pulumi.Float64Output)
}

// The origin URI.
type OriginUriResponse struct {
	// Dash manifest URI. If multiple Dash manifests are created, only the first one is listed.
	Dash string `pulumi:"dash"`
	// HLS manifest URI per https://tools.ietf.org/html/rfc8216#section-4.3.4. If multiple HLS manifests are created, only the first one is listed.
	Hls string `pulumi:"hls"`
}

// OriginUriResponseInput is an input type that accepts OriginUriResponseArgs and OriginUriResponseOutput values.
// You can construct a concrete instance of `OriginUriResponseInput` via:
//
//          OriginUriResponseArgs{...}
type OriginUriResponseInput interface {
	pulumi.Input

	ToOriginUriResponseOutput() OriginUriResponseOutput
	ToOriginUriResponseOutputWithContext(context.Context) OriginUriResponseOutput
}

// The origin URI.
type OriginUriResponseArgs struct {
	// Dash manifest URI. If multiple Dash manifests are created, only the first one is listed.
	Dash pulumi.StringInput `pulumi:"dash"`
	// HLS manifest URI per https://tools.ietf.org/html/rfc8216#section-4.3.4. If multiple HLS manifests are created, only the first one is listed.
	Hls pulumi.StringInput `pulumi:"hls"`
}

func (OriginUriResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginUriResponse)(nil)).Elem()
}

func (i OriginUriResponseArgs) ToOriginUriResponseOutput() OriginUriResponseOutput {
	return i.ToOriginUriResponseOutputWithContext(context.Background())
}

func (i OriginUriResponseArgs) ToOriginUriResponseOutputWithContext(ctx context.Context) OriginUriResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginUriResponseOutput)
}

func (i OriginUriResponseArgs) ToOriginUriResponsePtrOutput() OriginUriResponsePtrOutput {
	return i.ToOriginUriResponsePtrOutputWithContext(context.Background())
}

func (i OriginUriResponseArgs) ToOriginUriResponsePtrOutputWithContext(ctx context.Context) OriginUriResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginUriResponseOutput).ToOriginUriResponsePtrOutputWithContext(ctx)
}

// OriginUriResponsePtrInput is an input type that accepts OriginUriResponseArgs, OriginUriResponsePtr and OriginUriResponsePtrOutput values.
// You can construct a concrete instance of `OriginUriResponsePtrInput` via:
//
//          OriginUriResponseArgs{...}
//
//  or:
//
//          nil
type OriginUriResponsePtrInput interface {
	pulumi.Input

	ToOriginUriResponsePtrOutput() OriginUriResponsePtrOutput
	ToOriginUriResponsePtrOutputWithContext(context.Context) OriginUriResponsePtrOutput
}

type originUriResponsePtrType OriginUriResponseArgs

func OriginUriResponsePtr(v *OriginUriResponseArgs) OriginUriResponsePtrInput {
	return (*originUriResponsePtrType)(v)
}

func (*originUriResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginUriResponse)(nil)).Elem()
}

func (i *originUriResponsePtrType) ToOriginUriResponsePtrOutput() OriginUriResponsePtrOutput {
	return i.ToOriginUriResponsePtrOutputWithContext(context.Background())
}

func (i *originUriResponsePtrType) ToOriginUriResponsePtrOutputWithContext(ctx context.Context) OriginUriResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginUriResponsePtrOutput)
}

// The origin URI.
type OriginUriResponseOutput struct{ *pulumi.OutputState }

func (OriginUriResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginUriResponse)(nil)).Elem()
}

func (o OriginUriResponseOutput) ToOriginUriResponseOutput() OriginUriResponseOutput {
	return o
}

func (o OriginUriResponseOutput) ToOriginUriResponseOutputWithContext(ctx context.Context) OriginUriResponseOutput {
	return o
}

func (o OriginUriResponseOutput) ToOriginUriResponsePtrOutput() OriginUriResponsePtrOutput {
	return o.ToOriginUriResponsePtrOutputWithContext(context.Background())
}

func (o OriginUriResponseOutput) ToOriginUriResponsePtrOutputWithContext(ctx context.Context) OriginUriResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OriginUriResponse) *OriginUriResponse {
		return &v
	}).(OriginUriResponsePtrOutput)
}

// Dash manifest URI. If multiple Dash manifests are created, only the first one is listed.
func (o OriginUriResponseOutput) Dash() pulumi.StringOutput {
	return o.ApplyT(func(v OriginUriResponse) string { return v.Dash }).(pulumi.StringOutput)
}

// HLS manifest URI per https://tools.ietf.org/html/rfc8216#section-4.3.4. If multiple HLS manifests are created, only the first one is listed.
func (o OriginUriResponseOutput) Hls() pulumi.StringOutput {
	return o.ApplyT(func(v OriginUriResponse) string { return v.Hls }).(pulumi.StringOutput)
}

type OriginUriResponsePtrOutput struct{ *pulumi.OutputState }

func (OriginUriResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OriginUriResponse)(nil)).Elem()
}

func (o OriginUriResponsePtrOutput) ToOriginUriResponsePtrOutput() OriginUriResponsePtrOutput {
	return o
}

func (o OriginUriResponsePtrOutput) ToOriginUriResponsePtrOutputWithContext(ctx context.Context) OriginUriResponsePtrOutput {
	return o
}

func (o OriginUriResponsePtrOutput) Elem() OriginUriResponseOutput {
	return o.ApplyT(func(v *OriginUriResponse) OriginUriResponse {
		if v != nil {
			return *v
		}
		var ret OriginUriResponse
		return ret
	}).(OriginUriResponseOutput)
}

// Dash manifest URI. If multiple Dash manifests are created, only the first one is listed.
func (o OriginUriResponsePtrOutput) Dash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginUriResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Dash
	}).(pulumi.StringPtrOutput)
}

// HLS manifest URI per https://tools.ietf.org/html/rfc8216#section-4.3.4. If multiple HLS manifests are created, only the first one is listed.
func (o OriginUriResponsePtrOutput) Hls() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OriginUriResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hls
	}).(pulumi.StringPtrOutput)
}

// Location of output file(s) in a Cloud Storage bucket.
type Output struct {
	// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
	Uri *string `pulumi:"uri"`
}

// OutputInput is an input type that accepts OutputArgs and OutputOutput values.
// You can construct a concrete instance of `OutputInput` via:
//
//          OutputArgs{...}
type OutputInput interface {
	pulumi.Input

	ToOutputOutput() OutputOutput
	ToOutputOutputWithContext(context.Context) OutputOutput
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputArgs struct {
	// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Output)(nil)).Elem()
}

func (i OutputArgs) ToOutputOutput() OutputOutput {
	return i.ToOutputOutputWithContext(context.Background())
}

func (i OutputArgs) ToOutputOutputWithContext(ctx context.Context) OutputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputOutput)
}

func (i OutputArgs) ToOutputPtrOutput() OutputPtrOutput {
	return i.ToOutputPtrOutputWithContext(context.Background())
}

func (i OutputArgs) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputOutput).ToOutputPtrOutputWithContext(ctx)
}

// OutputPtrInput is an input type that accepts OutputArgs, OutputPtr and OutputPtrOutput values.
// You can construct a concrete instance of `OutputPtrInput` via:
//
//          OutputArgs{...}
//
//  or:
//
//          nil
type OutputPtrInput interface {
	pulumi.Input

	ToOutputPtrOutput() OutputPtrOutput
	ToOutputPtrOutputWithContext(context.Context) OutputPtrOutput
}

type outputPtrType OutputArgs

func OutputPtr(v *OutputArgs) OutputPtrInput {
	return (*outputPtrType)(v)
}

func (*outputPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Output)(nil)).Elem()
}

func (i *outputPtrType) ToOutputPtrOutput() OutputPtrOutput {
	return i.ToOutputPtrOutputWithContext(context.Background())
}

func (i *outputPtrType) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputPtrOutput)
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputOutput struct{ *pulumi.OutputState }

func (OutputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Output)(nil)).Elem()
}

func (o OutputOutput) ToOutputOutput() OutputOutput {
	return o
}

func (o OutputOutput) ToOutputOutputWithContext(ctx context.Context) OutputOutput {
	return o
}

func (o OutputOutput) ToOutputPtrOutput() OutputPtrOutput {
	return o.ToOutputPtrOutputWithContext(context.Background())
}

func (o OutputOutput) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Output) *Output {
		return &v
	}).(OutputPtrOutput)
}

// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
func (o OutputOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Output) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type OutputPtrOutput struct{ *pulumi.OutputState }

func (OutputPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Output)(nil)).Elem()
}

func (o OutputPtrOutput) ToOutputPtrOutput() OutputPtrOutput {
	return o
}

func (o OutputPtrOutput) ToOutputPtrOutputWithContext(ctx context.Context) OutputPtrOutput {
	return o
}

func (o OutputPtrOutput) Elem() OutputOutput {
	return o.ApplyT(func(v *Output) Output {
		if v != nil {
			return *v
		}
		var ret Output
		return ret
	}).(OutputOutput)
}

// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
func (o OutputPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Output) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputResponse struct {
	// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
	Uri string `pulumi:"uri"`
}

// OutputResponseInput is an input type that accepts OutputResponseArgs and OutputResponseOutput values.
// You can construct a concrete instance of `OutputResponseInput` via:
//
//          OutputResponseArgs{...}
type OutputResponseInput interface {
	pulumi.Input

	ToOutputResponseOutput() OutputResponseOutput
	ToOutputResponseOutputWithContext(context.Context) OutputResponseOutput
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputResponseArgs struct {
	// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (OutputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputResponse)(nil)).Elem()
}

func (i OutputResponseArgs) ToOutputResponseOutput() OutputResponseOutput {
	return i.ToOutputResponseOutputWithContext(context.Background())
}

func (i OutputResponseArgs) ToOutputResponseOutputWithContext(ctx context.Context) OutputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputResponseOutput)
}

func (i OutputResponseArgs) ToOutputResponsePtrOutput() OutputResponsePtrOutput {
	return i.ToOutputResponsePtrOutputWithContext(context.Background())
}

func (i OutputResponseArgs) ToOutputResponsePtrOutputWithContext(ctx context.Context) OutputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputResponseOutput).ToOutputResponsePtrOutputWithContext(ctx)
}

// OutputResponsePtrInput is an input type that accepts OutputResponseArgs, OutputResponsePtr and OutputResponsePtrOutput values.
// You can construct a concrete instance of `OutputResponsePtrInput` via:
//
//          OutputResponseArgs{...}
//
//  or:
//
//          nil
type OutputResponsePtrInput interface {
	pulumi.Input

	ToOutputResponsePtrOutput() OutputResponsePtrOutput
	ToOutputResponsePtrOutputWithContext(context.Context) OutputResponsePtrOutput
}

type outputResponsePtrType OutputResponseArgs

func OutputResponsePtr(v *OutputResponseArgs) OutputResponsePtrInput {
	return (*outputResponsePtrType)(v)
}

func (*outputResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputResponse)(nil)).Elem()
}

func (i *outputResponsePtrType) ToOutputResponsePtrOutput() OutputResponsePtrOutput {
	return i.ToOutputResponsePtrOutputWithContext(context.Background())
}

func (i *outputResponsePtrType) ToOutputResponsePtrOutputWithContext(ctx context.Context) OutputResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutputResponsePtrOutput)
}

// Location of output file(s) in a Cloud Storage bucket.
type OutputResponseOutput struct{ *pulumi.OutputState }

func (OutputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OutputResponse)(nil)).Elem()
}

func (o OutputResponseOutput) ToOutputResponseOutput() OutputResponseOutput {
	return o
}

func (o OutputResponseOutput) ToOutputResponseOutputWithContext(ctx context.Context) OutputResponseOutput {
	return o
}

func (o OutputResponseOutput) ToOutputResponsePtrOutput() OutputResponsePtrOutput {
	return o.ToOutputResponsePtrOutputWithContext(context.Background())
}

func (o OutputResponseOutput) ToOutputResponsePtrOutputWithContext(ctx context.Context) OutputResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OutputResponse) *OutputResponse {
		return &v
	}).(OutputResponsePtrOutput)
}

// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
func (o OutputResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v OutputResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type OutputResponsePtrOutput struct{ *pulumi.OutputState }

func (OutputResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutputResponse)(nil)).Elem()
}

func (o OutputResponsePtrOutput) ToOutputResponsePtrOutput() OutputResponsePtrOutput {
	return o
}

func (o OutputResponsePtrOutput) ToOutputResponsePtrOutputWithContext(ctx context.Context) OutputResponsePtrOutput {
	return o
}

func (o OutputResponsePtrOutput) Elem() OutputResponseOutput {
	return o.ApplyT(func(v *OutputResponse) OutputResponse {
		if v != nil {
			return *v
		}
		var ret OutputResponse
		return ret
	}).(OutputResponseOutput)
}

// URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty the value is populated from `Job.output_uri`.
func (o OutputResponsePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutputResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

// Overlay configuration.
type Overlay struct {
	// List of Animations. The list should be chronological, without any time overlap.
	Animations []Animation `pulumi:"animations"`
	// Image overlay.
	Image *Image `pulumi:"image"`
}

// OverlayInput is an input type that accepts OverlayArgs and OverlayOutput values.
// You can construct a concrete instance of `OverlayInput` via:
//
//          OverlayArgs{...}
type OverlayInput interface {
	pulumi.Input

	ToOverlayOutput() OverlayOutput
	ToOverlayOutputWithContext(context.Context) OverlayOutput
}

// Overlay configuration.
type OverlayArgs struct {
	// List of Animations. The list should be chronological, without any time overlap.
	Animations AnimationArrayInput `pulumi:"animations"`
	// Image overlay.
	Image ImagePtrInput `pulumi:"image"`
}

func (OverlayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Overlay)(nil)).Elem()
}

func (i OverlayArgs) ToOverlayOutput() OverlayOutput {
	return i.ToOverlayOutputWithContext(context.Background())
}

func (i OverlayArgs) ToOverlayOutputWithContext(ctx context.Context) OverlayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverlayOutput)
}

// OverlayArrayInput is an input type that accepts OverlayArray and OverlayArrayOutput values.
// You can construct a concrete instance of `OverlayArrayInput` via:
//
//          OverlayArray{ OverlayArgs{...} }
type OverlayArrayInput interface {
	pulumi.Input

	ToOverlayArrayOutput() OverlayArrayOutput
	ToOverlayArrayOutputWithContext(context.Context) OverlayArrayOutput
}

type OverlayArray []OverlayInput

func (OverlayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Overlay)(nil)).Elem()
}

func (i OverlayArray) ToOverlayArrayOutput() OverlayArrayOutput {
	return i.ToOverlayArrayOutputWithContext(context.Background())
}

func (i OverlayArray) ToOverlayArrayOutputWithContext(ctx context.Context) OverlayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverlayArrayOutput)
}

// Overlay configuration.
type OverlayOutput struct{ *pulumi.OutputState }

func (OverlayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Overlay)(nil)).Elem()
}

func (o OverlayOutput) ToOverlayOutput() OverlayOutput {
	return o
}

func (o OverlayOutput) ToOverlayOutputWithContext(ctx context.Context) OverlayOutput {
	return o
}

// List of Animations. The list should be chronological, without any time overlap.
func (o OverlayOutput) Animations() AnimationArrayOutput {
	return o.ApplyT(func(v Overlay) []Animation { return v.Animations }).(AnimationArrayOutput)
}

// Image overlay.
func (o OverlayOutput) Image() ImagePtrOutput {
	return o.ApplyT(func(v Overlay) *Image { return v.Image }).(ImagePtrOutput)
}

type OverlayArrayOutput struct{ *pulumi.OutputState }

func (OverlayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Overlay)(nil)).Elem()
}

func (o OverlayArrayOutput) ToOverlayArrayOutput() OverlayArrayOutput {
	return o
}

func (o OverlayArrayOutput) ToOverlayArrayOutputWithContext(ctx context.Context) OverlayArrayOutput {
	return o
}

func (o OverlayArrayOutput) Index(i pulumi.IntInput) OverlayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Overlay {
		return vs[0].([]Overlay)[vs[1].(int)]
	}).(OverlayOutput)
}

// Overlay configuration.
type OverlayResponse struct {
	// List of Animations. The list should be chronological, without any time overlap.
	Animations []AnimationResponse `pulumi:"animations"`
	// Image overlay.
	Image ImageResponse `pulumi:"image"`
}

// OverlayResponseInput is an input type that accepts OverlayResponseArgs and OverlayResponseOutput values.
// You can construct a concrete instance of `OverlayResponseInput` via:
//
//          OverlayResponseArgs{...}
type OverlayResponseInput interface {
	pulumi.Input

	ToOverlayResponseOutput() OverlayResponseOutput
	ToOverlayResponseOutputWithContext(context.Context) OverlayResponseOutput
}

// Overlay configuration.
type OverlayResponseArgs struct {
	// List of Animations. The list should be chronological, without any time overlap.
	Animations AnimationResponseArrayInput `pulumi:"animations"`
	// Image overlay.
	Image ImageResponseInput `pulumi:"image"`
}

func (OverlayResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OverlayResponse)(nil)).Elem()
}

func (i OverlayResponseArgs) ToOverlayResponseOutput() OverlayResponseOutput {
	return i.ToOverlayResponseOutputWithContext(context.Background())
}

func (i OverlayResponseArgs) ToOverlayResponseOutputWithContext(ctx context.Context) OverlayResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverlayResponseOutput)
}

// OverlayResponseArrayInput is an input type that accepts OverlayResponseArray and OverlayResponseArrayOutput values.
// You can construct a concrete instance of `OverlayResponseArrayInput` via:
//
//          OverlayResponseArray{ OverlayResponseArgs{...} }
type OverlayResponseArrayInput interface {
	pulumi.Input

	ToOverlayResponseArrayOutput() OverlayResponseArrayOutput
	ToOverlayResponseArrayOutputWithContext(context.Context) OverlayResponseArrayOutput
}

type OverlayResponseArray []OverlayResponseInput

func (OverlayResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OverlayResponse)(nil)).Elem()
}

func (i OverlayResponseArray) ToOverlayResponseArrayOutput() OverlayResponseArrayOutput {
	return i.ToOverlayResponseArrayOutputWithContext(context.Background())
}

func (i OverlayResponseArray) ToOverlayResponseArrayOutputWithContext(ctx context.Context) OverlayResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverlayResponseArrayOutput)
}

// Overlay configuration.
type OverlayResponseOutput struct{ *pulumi.OutputState }

func (OverlayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OverlayResponse)(nil)).Elem()
}

func (o OverlayResponseOutput) ToOverlayResponseOutput() OverlayResponseOutput {
	return o
}

func (o OverlayResponseOutput) ToOverlayResponseOutputWithContext(ctx context.Context) OverlayResponseOutput {
	return o
}

// List of Animations. The list should be chronological, without any time overlap.
func (o OverlayResponseOutput) Animations() AnimationResponseArrayOutput {
	return o.ApplyT(func(v OverlayResponse) []AnimationResponse { return v.Animations }).(AnimationResponseArrayOutput)
}

// Image overlay.
func (o OverlayResponseOutput) Image() ImageResponseOutput {
	return o.ApplyT(func(v OverlayResponse) ImageResponse { return v.Image }).(ImageResponseOutput)
}

type OverlayResponseArrayOutput struct{ *pulumi.OutputState }

func (OverlayResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OverlayResponse)(nil)).Elem()
}

func (o OverlayResponseArrayOutput) ToOverlayResponseArrayOutput() OverlayResponseArrayOutput {
	return o
}

func (o OverlayResponseArrayOutput) ToOverlayResponseArrayOutputWithContext(ctx context.Context) OverlayResponseArrayOutput {
	return o
}

func (o OverlayResponseArrayOutput) Index(i pulumi.IntInput) OverlayResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OverlayResponse {
		return vs[0].([]OverlayResponse)[vs[1].(int)]
	}).(OverlayResponseOutput)
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type Pad struct {
	// The number of pixels to add to the bottom. The default is 0.
	BottomPixels *int `pulumi:"bottomPixels"`
	// The number of pixels to add to the left. The default is 0.
	LeftPixels *int `pulumi:"leftPixels"`
	// The number of pixels to add to the right. The default is 0.
	RightPixels *int `pulumi:"rightPixels"`
	// The number of pixels to add to the top. The default is 0.
	TopPixels *int `pulumi:"topPixels"`
}

// PadInput is an input type that accepts PadArgs and PadOutput values.
// You can construct a concrete instance of `PadInput` via:
//
//          PadArgs{...}
type PadInput interface {
	pulumi.Input

	ToPadOutput() PadOutput
	ToPadOutputWithContext(context.Context) PadOutput
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadArgs struct {
	// The number of pixels to add to the bottom. The default is 0.
	BottomPixels pulumi.IntPtrInput `pulumi:"bottomPixels"`
	// The number of pixels to add to the left. The default is 0.
	LeftPixels pulumi.IntPtrInput `pulumi:"leftPixels"`
	// The number of pixels to add to the right. The default is 0.
	RightPixels pulumi.IntPtrInput `pulumi:"rightPixels"`
	// The number of pixels to add to the top. The default is 0.
	TopPixels pulumi.IntPtrInput `pulumi:"topPixels"`
}

func (PadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pad)(nil)).Elem()
}

func (i PadArgs) ToPadOutput() PadOutput {
	return i.ToPadOutputWithContext(context.Background())
}

func (i PadArgs) ToPadOutputWithContext(ctx context.Context) PadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PadOutput)
}

func (i PadArgs) ToPadPtrOutput() PadPtrOutput {
	return i.ToPadPtrOutputWithContext(context.Background())
}

func (i PadArgs) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PadOutput).ToPadPtrOutputWithContext(ctx)
}

// PadPtrInput is an input type that accepts PadArgs, PadPtr and PadPtrOutput values.
// You can construct a concrete instance of `PadPtrInput` via:
//
//          PadArgs{...}
//
//  or:
//
//          nil
type PadPtrInput interface {
	pulumi.Input

	ToPadPtrOutput() PadPtrOutput
	ToPadPtrOutputWithContext(context.Context) PadPtrOutput
}

type padPtrType PadArgs

func PadPtr(v *PadArgs) PadPtrInput {
	return (*padPtrType)(v)
}

func (*padPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Pad)(nil)).Elem()
}

func (i *padPtrType) ToPadPtrOutput() PadPtrOutput {
	return i.ToPadPtrOutputWithContext(context.Background())
}

func (i *padPtrType) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PadPtrOutput)
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadOutput struct{ *pulumi.OutputState }

func (PadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pad)(nil)).Elem()
}

func (o PadOutput) ToPadOutput() PadOutput {
	return o
}

func (o PadOutput) ToPadOutputWithContext(ctx context.Context) PadOutput {
	return o
}

func (o PadOutput) ToPadPtrOutput() PadPtrOutput {
	return o.ToPadPtrOutputWithContext(context.Background())
}

func (o PadOutput) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Pad) *Pad {
		return &v
	}).(PadPtrOutput)
}

// The number of pixels to add to the bottom. The default is 0.
func (o PadOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.BottomPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the left. The default is 0.
func (o PadOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.LeftPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the right. The default is 0.
func (o PadOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.RightPixels }).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the top. The default is 0.
func (o PadOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Pad) *int { return v.TopPixels }).(pulumi.IntPtrOutput)
}

type PadPtrOutput struct{ *pulumi.OutputState }

func (PadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pad)(nil)).Elem()
}

func (o PadPtrOutput) ToPadPtrOutput() PadPtrOutput {
	return o
}

func (o PadPtrOutput) ToPadPtrOutputWithContext(ctx context.Context) PadPtrOutput {
	return o
}

func (o PadPtrOutput) Elem() PadOutput {
	return o.ApplyT(func(v *Pad) Pad {
		if v != nil {
			return *v
		}
		var ret Pad
		return ret
	}).(PadOutput)
}

// The number of pixels to add to the bottom. The default is 0.
func (o PadPtrOutput) BottomPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.BottomPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the left. The default is 0.
func (o PadPtrOutput) LeftPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.LeftPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the right. The default is 0.
func (o PadPtrOutput) RightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.RightPixels
	}).(pulumi.IntPtrOutput)
}

// The number of pixels to add to the top. The default is 0.
func (o PadPtrOutput) TopPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Pad) *int {
		if v == nil {
			return nil
		}
		return v.TopPixels
	}).(pulumi.IntPtrOutput)
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadResponse struct {
	// The number of pixels to add to the bottom. The default is 0.
	BottomPixels int `pulumi:"bottomPixels"`
	// The number of pixels to add to the left. The default is 0.
	LeftPixels int `pulumi:"leftPixels"`
	// The number of pixels to add to the right. The default is 0.
	RightPixels int `pulumi:"rightPixels"`
	// The number of pixels to add to the top. The default is 0.
	TopPixels int `pulumi:"topPixels"`
}

// PadResponseInput is an input type that accepts PadResponseArgs and PadResponseOutput values.
// You can construct a concrete instance of `PadResponseInput` via:
//
//          PadResponseArgs{...}
type PadResponseInput interface {
	pulumi.Input

	ToPadResponseOutput() PadResponseOutput
	ToPadResponseOutputWithContext(context.Context) PadResponseOutput
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadResponseArgs struct {
	// The number of pixels to add to the bottom. The default is 0.
	BottomPixels pulumi.IntInput `pulumi:"bottomPixels"`
	// The number of pixels to add to the left. The default is 0.
	LeftPixels pulumi.IntInput `pulumi:"leftPixels"`
	// The number of pixels to add to the right. The default is 0.
	RightPixels pulumi.IntInput `pulumi:"rightPixels"`
	// The number of pixels to add to the top. The default is 0.
	TopPixels pulumi.IntInput `pulumi:"topPixels"`
}

func (PadResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PadResponse)(nil)).Elem()
}

func (i PadResponseArgs) ToPadResponseOutput() PadResponseOutput {
	return i.ToPadResponseOutputWithContext(context.Background())
}

func (i PadResponseArgs) ToPadResponseOutputWithContext(ctx context.Context) PadResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PadResponseOutput)
}

// Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.
type PadResponseOutput struct{ *pulumi.OutputState }

func (PadResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PadResponse)(nil)).Elem()
}

func (o PadResponseOutput) ToPadResponseOutput() PadResponseOutput {
	return o
}

func (o PadResponseOutput) ToPadResponseOutputWithContext(ctx context.Context) PadResponseOutput {
	return o
}

// The number of pixels to add to the bottom. The default is 0.
func (o PadResponseOutput) BottomPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.BottomPixels }).(pulumi.IntOutput)
}

// The number of pixels to add to the left. The default is 0.
func (o PadResponseOutput) LeftPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.LeftPixels }).(pulumi.IntOutput)
}

// The number of pixels to add to the right. The default is 0.
func (o PadResponseOutput) RightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.RightPixels }).(pulumi.IntOutput)
}

// The number of pixels to add to the top. The default is 0.
func (o PadResponseOutput) TopPixels() pulumi.IntOutput {
	return o.ApplyT(func(v PadResponse) int { return v.TopPixels }).(pulumi.IntOutput)
}

// Preprocessing configurations.
type PreprocessingConfig struct {
	// Audio preprocessing configuration.
	Audio *Audio `pulumi:"audio"`
	// Color preprocessing configuration.
	Color *Color `pulumi:"color"`
	// Specify the video cropping configuration.
	Crop *Crop `pulumi:"crop"`
	// Deblock preprocessing configuration.
	Deblock *Deblock `pulumi:"deblock"`
	// Denoise preprocessing configuration.
	Denoise *Denoise `pulumi:"denoise"`
	// Specify the video pad filter configuration.
	Pad *Pad `pulumi:"pad"`
}

// PreprocessingConfigInput is an input type that accepts PreprocessingConfigArgs and PreprocessingConfigOutput values.
// You can construct a concrete instance of `PreprocessingConfigInput` via:
//
//          PreprocessingConfigArgs{...}
type PreprocessingConfigInput interface {
	pulumi.Input

	ToPreprocessingConfigOutput() PreprocessingConfigOutput
	ToPreprocessingConfigOutputWithContext(context.Context) PreprocessingConfigOutput
}

// Preprocessing configurations.
type PreprocessingConfigArgs struct {
	// Audio preprocessing configuration.
	Audio AudioPtrInput `pulumi:"audio"`
	// Color preprocessing configuration.
	Color ColorPtrInput `pulumi:"color"`
	// Specify the video cropping configuration.
	Crop CropPtrInput `pulumi:"crop"`
	// Deblock preprocessing configuration.
	Deblock DeblockPtrInput `pulumi:"deblock"`
	// Denoise preprocessing configuration.
	Denoise DenoisePtrInput `pulumi:"denoise"`
	// Specify the video pad filter configuration.
	Pad PadPtrInput `pulumi:"pad"`
}

func (PreprocessingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreprocessingConfig)(nil)).Elem()
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigOutput() PreprocessingConfigOutput {
	return i.ToPreprocessingConfigOutputWithContext(context.Background())
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigOutputWithContext(ctx context.Context) PreprocessingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreprocessingConfigOutput)
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return i.ToPreprocessingConfigPtrOutputWithContext(context.Background())
}

func (i PreprocessingConfigArgs) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreprocessingConfigOutput).ToPreprocessingConfigPtrOutputWithContext(ctx)
}

// PreprocessingConfigPtrInput is an input type that accepts PreprocessingConfigArgs, PreprocessingConfigPtr and PreprocessingConfigPtrOutput values.
// You can construct a concrete instance of `PreprocessingConfigPtrInput` via:
//
//          PreprocessingConfigArgs{...}
//
//  or:
//
//          nil
type PreprocessingConfigPtrInput interface {
	pulumi.Input

	ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput
	ToPreprocessingConfigPtrOutputWithContext(context.Context) PreprocessingConfigPtrOutput
}

type preprocessingConfigPtrType PreprocessingConfigArgs

func PreprocessingConfigPtr(v *PreprocessingConfigArgs) PreprocessingConfigPtrInput {
	return (*preprocessingConfigPtrType)(v)
}

func (*preprocessingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PreprocessingConfig)(nil)).Elem()
}

func (i *preprocessingConfigPtrType) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return i.ToPreprocessingConfigPtrOutputWithContext(context.Background())
}

func (i *preprocessingConfigPtrType) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreprocessingConfigPtrOutput)
}

// Preprocessing configurations.
type PreprocessingConfigOutput struct{ *pulumi.OutputState }

func (PreprocessingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreprocessingConfig)(nil)).Elem()
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigOutput() PreprocessingConfigOutput {
	return o
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigOutputWithContext(ctx context.Context) PreprocessingConfigOutput {
	return o
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return o.ToPreprocessingConfigPtrOutputWithContext(context.Background())
}

func (o PreprocessingConfigOutput) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PreprocessingConfig) *PreprocessingConfig {
		return &v
	}).(PreprocessingConfigPtrOutput)
}

// Audio preprocessing configuration.
func (o PreprocessingConfigOutput) Audio() AudioPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Audio { return v.Audio }).(AudioPtrOutput)
}

// Color preprocessing configuration.
func (o PreprocessingConfigOutput) Color() ColorPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Color { return v.Color }).(ColorPtrOutput)
}

// Specify the video cropping configuration.
func (o PreprocessingConfigOutput) Crop() CropPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Crop { return v.Crop }).(CropPtrOutput)
}

// Deblock preprocessing configuration.
func (o PreprocessingConfigOutput) Deblock() DeblockPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Deblock { return v.Deblock }).(DeblockPtrOutput)
}

// Denoise preprocessing configuration.
func (o PreprocessingConfigOutput) Denoise() DenoisePtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Denoise { return v.Denoise }).(DenoisePtrOutput)
}

// Specify the video pad filter configuration.
func (o PreprocessingConfigOutput) Pad() PadPtrOutput {
	return o.ApplyT(func(v PreprocessingConfig) *Pad { return v.Pad }).(PadPtrOutput)
}

type PreprocessingConfigPtrOutput struct{ *pulumi.OutputState }

func (PreprocessingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PreprocessingConfig)(nil)).Elem()
}

func (o PreprocessingConfigPtrOutput) ToPreprocessingConfigPtrOutput() PreprocessingConfigPtrOutput {
	return o
}

func (o PreprocessingConfigPtrOutput) ToPreprocessingConfigPtrOutputWithContext(ctx context.Context) PreprocessingConfigPtrOutput {
	return o
}

func (o PreprocessingConfigPtrOutput) Elem() PreprocessingConfigOutput {
	return o.ApplyT(func(v *PreprocessingConfig) PreprocessingConfig {
		if v != nil {
			return *v
		}
		var ret PreprocessingConfig
		return ret
	}).(PreprocessingConfigOutput)
}

// Audio preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Audio() AudioPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Audio {
		if v == nil {
			return nil
		}
		return v.Audio
	}).(AudioPtrOutput)
}

// Color preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Color() ColorPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Color {
		if v == nil {
			return nil
		}
		return v.Color
	}).(ColorPtrOutput)
}

// Specify the video cropping configuration.
func (o PreprocessingConfigPtrOutput) Crop() CropPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Crop {
		if v == nil {
			return nil
		}
		return v.Crop
	}).(CropPtrOutput)
}

// Deblock preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Deblock() DeblockPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Deblock {
		if v == nil {
			return nil
		}
		return v.Deblock
	}).(DeblockPtrOutput)
}

// Denoise preprocessing configuration.
func (o PreprocessingConfigPtrOutput) Denoise() DenoisePtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Denoise {
		if v == nil {
			return nil
		}
		return v.Denoise
	}).(DenoisePtrOutput)
}

// Specify the video pad filter configuration.
func (o PreprocessingConfigPtrOutput) Pad() PadPtrOutput {
	return o.ApplyT(func(v *PreprocessingConfig) *Pad {
		if v == nil {
			return nil
		}
		return v.Pad
	}).(PadPtrOutput)
}

// Preprocessing configurations.
type PreprocessingConfigResponse struct {
	// Audio preprocessing configuration.
	Audio AudioResponse `pulumi:"audio"`
	// Color preprocessing configuration.
	Color ColorResponse `pulumi:"color"`
	// Specify the video cropping configuration.
	Crop CropResponse `pulumi:"crop"`
	// Deblock preprocessing configuration.
	Deblock DeblockResponse `pulumi:"deblock"`
	// Denoise preprocessing configuration.
	Denoise DenoiseResponse `pulumi:"denoise"`
	// Specify the video pad filter configuration.
	Pad PadResponse `pulumi:"pad"`
}

// PreprocessingConfigResponseInput is an input type that accepts PreprocessingConfigResponseArgs and PreprocessingConfigResponseOutput values.
// You can construct a concrete instance of `PreprocessingConfigResponseInput` via:
//
//          PreprocessingConfigResponseArgs{...}
type PreprocessingConfigResponseInput interface {
	pulumi.Input

	ToPreprocessingConfigResponseOutput() PreprocessingConfigResponseOutput
	ToPreprocessingConfigResponseOutputWithContext(context.Context) PreprocessingConfigResponseOutput
}

// Preprocessing configurations.
type PreprocessingConfigResponseArgs struct {
	// Audio preprocessing configuration.
	Audio AudioResponseInput `pulumi:"audio"`
	// Color preprocessing configuration.
	Color ColorResponseInput `pulumi:"color"`
	// Specify the video cropping configuration.
	Crop CropResponseInput `pulumi:"crop"`
	// Deblock preprocessing configuration.
	Deblock DeblockResponseInput `pulumi:"deblock"`
	// Denoise preprocessing configuration.
	Denoise DenoiseResponseInput `pulumi:"denoise"`
	// Specify the video pad filter configuration.
	Pad PadResponseInput `pulumi:"pad"`
}

func (PreprocessingConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PreprocessingConfigResponse)(nil)).Elem()
}

func (i PreprocessingConfigResponseArgs) ToPreprocessingConfigResponseOutput() PreprocessingConfigResponseOutput {
	return i.ToPreprocessingConfigResponseOutputWithContext(context.Background())
}

func (i PreprocessingConfigResponseArgs) ToPreprocessingConfigResponseOutputWithContext(ctx context.Context) PreprocessingConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PreprocessingConfigResponseOutput)
}

// Preprocessing configurations.
type PreprocessingConfigResponseOutput struct{ *pulumi.OutputState }

func (PreprocessingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PreprocessingConfigResponse)(nil)).Elem()
}

func (o PreprocessingConfigResponseOutput) ToPreprocessingConfigResponseOutput() PreprocessingConfigResponseOutput {
	return o
}

func (o PreprocessingConfigResponseOutput) ToPreprocessingConfigResponseOutputWithContext(ctx context.Context) PreprocessingConfigResponseOutput {
	return o
}

// Audio preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Audio() AudioResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) AudioResponse { return v.Audio }).(AudioResponseOutput)
}

// Color preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Color() ColorResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) ColorResponse { return v.Color }).(ColorResponseOutput)
}

// Specify the video cropping configuration.
func (o PreprocessingConfigResponseOutput) Crop() CropResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) CropResponse { return v.Crop }).(CropResponseOutput)
}

// Deblock preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Deblock() DeblockResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) DeblockResponse { return v.Deblock }).(DeblockResponseOutput)
}

// Denoise preprocessing configuration.
func (o PreprocessingConfigResponseOutput) Denoise() DenoiseResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) DenoiseResponse { return v.Denoise }).(DenoiseResponseOutput)
}

// Specify the video pad filter configuration.
func (o PreprocessingConfigResponseOutput) Pad() PadResponseOutput {
	return o.ApplyT(func(v PreprocessingConfigResponse) PadResponse { return v.Pad }).(PadResponseOutput)
}

// Estimated fractional progress for each step, from `0` to `1`.
type ProgressResponse struct {
	// Estimated fractional progress for `analyzing` step.
	Analyzed float64 `pulumi:"analyzed"`
	// Estimated fractional progress for `encoding` step.
	Encoded float64 `pulumi:"encoded"`
	// Estimated fractional progress for `notifying` step.
	Notified float64 `pulumi:"notified"`
	// Estimated fractional progress for `uploading` step.
	Uploaded float64 `pulumi:"uploaded"`
}

// ProgressResponseInput is an input type that accepts ProgressResponseArgs and ProgressResponseOutput values.
// You can construct a concrete instance of `ProgressResponseInput` via:
//
//          ProgressResponseArgs{...}
type ProgressResponseInput interface {
	pulumi.Input

	ToProgressResponseOutput() ProgressResponseOutput
	ToProgressResponseOutputWithContext(context.Context) ProgressResponseOutput
}

// Estimated fractional progress for each step, from `0` to `1`.
type ProgressResponseArgs struct {
	// Estimated fractional progress for `analyzing` step.
	Analyzed pulumi.Float64Input `pulumi:"analyzed"`
	// Estimated fractional progress for `encoding` step.
	Encoded pulumi.Float64Input `pulumi:"encoded"`
	// Estimated fractional progress for `notifying` step.
	Notified pulumi.Float64Input `pulumi:"notified"`
	// Estimated fractional progress for `uploading` step.
	Uploaded pulumi.Float64Input `pulumi:"uploaded"`
}

func (ProgressResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgressResponse)(nil)).Elem()
}

func (i ProgressResponseArgs) ToProgressResponseOutput() ProgressResponseOutput {
	return i.ToProgressResponseOutputWithContext(context.Background())
}

func (i ProgressResponseArgs) ToProgressResponseOutputWithContext(ctx context.Context) ProgressResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgressResponseOutput)
}

func (i ProgressResponseArgs) ToProgressResponsePtrOutput() ProgressResponsePtrOutput {
	return i.ToProgressResponsePtrOutputWithContext(context.Background())
}

func (i ProgressResponseArgs) ToProgressResponsePtrOutputWithContext(ctx context.Context) ProgressResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgressResponseOutput).ToProgressResponsePtrOutputWithContext(ctx)
}

// ProgressResponsePtrInput is an input type that accepts ProgressResponseArgs, ProgressResponsePtr and ProgressResponsePtrOutput values.
// You can construct a concrete instance of `ProgressResponsePtrInput` via:
//
//          ProgressResponseArgs{...}
//
//  or:
//
//          nil
type ProgressResponsePtrInput interface {
	pulumi.Input

	ToProgressResponsePtrOutput() ProgressResponsePtrOutput
	ToProgressResponsePtrOutputWithContext(context.Context) ProgressResponsePtrOutput
}

type progressResponsePtrType ProgressResponseArgs

func ProgressResponsePtr(v *ProgressResponseArgs) ProgressResponsePtrInput {
	return (*progressResponsePtrType)(v)
}

func (*progressResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProgressResponse)(nil)).Elem()
}

func (i *progressResponsePtrType) ToProgressResponsePtrOutput() ProgressResponsePtrOutput {
	return i.ToProgressResponsePtrOutputWithContext(context.Background())
}

func (i *progressResponsePtrType) ToProgressResponsePtrOutputWithContext(ctx context.Context) ProgressResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProgressResponsePtrOutput)
}

// Estimated fractional progress for each step, from `0` to `1`.
type ProgressResponseOutput struct{ *pulumi.OutputState }

func (ProgressResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProgressResponse)(nil)).Elem()
}

func (o ProgressResponseOutput) ToProgressResponseOutput() ProgressResponseOutput {
	return o
}

func (o ProgressResponseOutput) ToProgressResponseOutputWithContext(ctx context.Context) ProgressResponseOutput {
	return o
}

func (o ProgressResponseOutput) ToProgressResponsePtrOutput() ProgressResponsePtrOutput {
	return o.ToProgressResponsePtrOutputWithContext(context.Background())
}

func (o ProgressResponseOutput) ToProgressResponsePtrOutputWithContext(ctx context.Context) ProgressResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProgressResponse) *ProgressResponse {
		return &v
	}).(ProgressResponsePtrOutput)
}

// Estimated fractional progress for `analyzing` step.
func (o ProgressResponseOutput) Analyzed() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressResponse) float64 { return v.Analyzed }).(pulumi.Float64Output)
}

// Estimated fractional progress for `encoding` step.
func (o ProgressResponseOutput) Encoded() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressResponse) float64 { return v.Encoded }).(pulumi.Float64Output)
}

// Estimated fractional progress for `notifying` step.
func (o ProgressResponseOutput) Notified() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressResponse) float64 { return v.Notified }).(pulumi.Float64Output)
}

// Estimated fractional progress for `uploading` step.
func (o ProgressResponseOutput) Uploaded() pulumi.Float64Output {
	return o.ApplyT(func(v ProgressResponse) float64 { return v.Uploaded }).(pulumi.Float64Output)
}

type ProgressResponsePtrOutput struct{ *pulumi.OutputState }

func (ProgressResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProgressResponse)(nil)).Elem()
}

func (o ProgressResponsePtrOutput) ToProgressResponsePtrOutput() ProgressResponsePtrOutput {
	return o
}

func (o ProgressResponsePtrOutput) ToProgressResponsePtrOutputWithContext(ctx context.Context) ProgressResponsePtrOutput {
	return o
}

func (o ProgressResponsePtrOutput) Elem() ProgressResponseOutput {
	return o.ApplyT(func(v *ProgressResponse) ProgressResponse {
		if v != nil {
			return *v
		}
		var ret ProgressResponse
		return ret
	}).(ProgressResponseOutput)
}

// Estimated fractional progress for `analyzing` step.
func (o ProgressResponsePtrOutput) Analyzed() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ProgressResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Analyzed
	}).(pulumi.Float64PtrOutput)
}

// Estimated fractional progress for `encoding` step.
func (o ProgressResponsePtrOutput) Encoded() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ProgressResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Encoded
	}).(pulumi.Float64PtrOutput)
}

// Estimated fractional progress for `notifying` step.
func (o ProgressResponsePtrOutput) Notified() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ProgressResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Notified
	}).(pulumi.Float64PtrOutput)
}

// Estimated fractional progress for `uploading` step.
func (o ProgressResponsePtrOutput) Uploaded() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ProgressResponse) *float64 {
		if v == nil {
			return nil
		}
		return &v.Uploaded
	}).(pulumi.Float64PtrOutput)
}

// A Pub/Sub destination.
type PubsubDestination struct {
	// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
	Topic *string `pulumi:"topic"`
}

// PubsubDestinationInput is an input type that accepts PubsubDestinationArgs and PubsubDestinationOutput values.
// You can construct a concrete instance of `PubsubDestinationInput` via:
//
//          PubsubDestinationArgs{...}
type PubsubDestinationInput interface {
	pulumi.Input

	ToPubsubDestinationOutput() PubsubDestinationOutput
	ToPubsubDestinationOutputWithContext(context.Context) PubsubDestinationOutput
}

// A Pub/Sub destination.
type PubsubDestinationArgs struct {
	// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubsubDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return i.ToPubsubDestinationOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput)
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i PubsubDestinationArgs) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationOutput).ToPubsubDestinationPtrOutputWithContext(ctx)
}

// PubsubDestinationPtrInput is an input type that accepts PubsubDestinationArgs, PubsubDestinationPtr and PubsubDestinationPtrOutput values.
// You can construct a concrete instance of `PubsubDestinationPtrInput` via:
//
//          PubsubDestinationArgs{...}
//
//  or:
//
//          nil
type PubsubDestinationPtrInput interface {
	pulumi.Input

	ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput
	ToPubsubDestinationPtrOutputWithContext(context.Context) PubsubDestinationPtrOutput
}

type pubsubDestinationPtrType PubsubDestinationArgs

func PubsubDestinationPtr(v *PubsubDestinationArgs) PubsubDestinationPtrInput {
	return (*pubsubDestinationPtrType)(v)
}

func (*pubsubDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return i.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (i *pubsubDestinationPtrType) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationOutput struct{ *pulumi.OutputState }

func (PubsubDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutput() PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationOutputWithContext(ctx context.Context) PubsubDestinationOutput {
	return o
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o.ToPubsubDestinationPtrOutputWithContext(context.Background())
}

func (o PubsubDestinationOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PubsubDestination) *PubsubDestination {
		return &v
	}).(PubsubDestinationPtrOutput)
}

// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
func (o PubsubDestinationOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubsubDestination) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubsubDestinationPtrOutput struct{ *pulumi.OutputState }

func (PubsubDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestination)(nil)).Elem()
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutput() PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) ToPubsubDestinationPtrOutputWithContext(ctx context.Context) PubsubDestinationPtrOutput {
	return o
}

func (o PubsubDestinationPtrOutput) Elem() PubsubDestinationOutput {
	return o.ApplyT(func(v *PubsubDestination) PubsubDestination {
		if v != nil {
			return *v
		}
		var ret PubsubDestination
		return ret
	}).(PubsubDestinationOutput)
}

// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
func (o PubsubDestinationPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubDestination) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationResponse struct {
	// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
	Topic string `pulumi:"topic"`
}

// PubsubDestinationResponseInput is an input type that accepts PubsubDestinationResponseArgs and PubsubDestinationResponseOutput values.
// You can construct a concrete instance of `PubsubDestinationResponseInput` via:
//
//          PubsubDestinationResponseArgs{...}
type PubsubDestinationResponseInput interface {
	pulumi.Input

	ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput
	ToPubsubDestinationResponseOutputWithContext(context.Context) PubsubDestinationResponseOutput
}

// A Pub/Sub destination.
type PubsubDestinationResponseArgs struct {
	// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (PubsubDestinationResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestinationResponse)(nil)).Elem()
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput {
	return i.ToPubsubDestinationResponseOutputWithContext(context.Background())
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponseOutputWithContext(ctx context.Context) PubsubDestinationResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationResponseOutput)
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return i.ToPubsubDestinationResponsePtrOutputWithContext(context.Background())
}

func (i PubsubDestinationResponseArgs) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationResponseOutput).ToPubsubDestinationResponsePtrOutputWithContext(ctx)
}

// PubsubDestinationResponsePtrInput is an input type that accepts PubsubDestinationResponseArgs, PubsubDestinationResponsePtr and PubsubDestinationResponsePtrOutput values.
// You can construct a concrete instance of `PubsubDestinationResponsePtrInput` via:
//
//          PubsubDestinationResponseArgs{...}
//
//  or:
//
//          nil
type PubsubDestinationResponsePtrInput interface {
	pulumi.Input

	ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput
	ToPubsubDestinationResponsePtrOutputWithContext(context.Context) PubsubDestinationResponsePtrOutput
}

type pubsubDestinationResponsePtrType PubsubDestinationResponseArgs

func PubsubDestinationResponsePtr(v *PubsubDestinationResponseArgs) PubsubDestinationResponsePtrInput {
	return (*pubsubDestinationResponsePtrType)(v)
}

func (*pubsubDestinationResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestinationResponse)(nil)).Elem()
}

func (i *pubsubDestinationResponsePtrType) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return i.ToPubsubDestinationResponsePtrOutputWithContext(context.Background())
}

func (i *pubsubDestinationResponsePtrType) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubDestinationResponsePtrOutput)
}

// A Pub/Sub destination.
type PubsubDestinationResponseOutput struct{ *pulumi.OutputState }

func (PubsubDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubDestinationResponse)(nil)).Elem()
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutput() PubsubDestinationResponseOutput {
	return o
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponseOutputWithContext(ctx context.Context) PubsubDestinationResponseOutput {
	return o
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return o.ToPubsubDestinationResponsePtrOutputWithContext(context.Background())
}

func (o PubsubDestinationResponseOutput) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PubsubDestinationResponse) *PubsubDestinationResponse {
		return &v
	}).(PubsubDestinationResponsePtrOutput)
}

// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
func (o PubsubDestinationResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubDestinationResponse) string { return v.Topic }).(pulumi.StringOutput)
}

type PubsubDestinationResponsePtrOutput struct{ *pulumi.OutputState }

func (PubsubDestinationResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubDestinationResponse)(nil)).Elem()
}

func (o PubsubDestinationResponsePtrOutput) ToPubsubDestinationResponsePtrOutput() PubsubDestinationResponsePtrOutput {
	return o
}

func (o PubsubDestinationResponsePtrOutput) ToPubsubDestinationResponsePtrOutputWithContext(ctx context.Context) PubsubDestinationResponsePtrOutput {
	return o
}

func (o PubsubDestinationResponsePtrOutput) Elem() PubsubDestinationResponseOutput {
	return o.ApplyT(func(v *PubsubDestinationResponse) PubsubDestinationResponse {
		if v != nil {
			return *v
		}
		var ret PubsubDestinationResponse
		return ret
	}).(PubsubDestinationResponseOutput)
}

// The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.
func (o PubsubDestinationResponsePtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubDestinationResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Topic
	}).(pulumi.StringPtrOutput)
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryption struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri string `pulumi:"keyUri"`
}

// SampleAesEncryptionInput is an input type that accepts SampleAesEncryptionArgs and SampleAesEncryptionOutput values.
// You can construct a concrete instance of `SampleAesEncryptionInput` via:
//
//          SampleAesEncryptionArgs{...}
type SampleAesEncryptionInput interface {
	pulumi.Input

	ToSampleAesEncryptionOutput() SampleAesEncryptionOutput
	ToSampleAesEncryptionOutputWithContext(context.Context) SampleAesEncryptionOutput
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionArgs struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri pulumi.StringInput `pulumi:"keyUri"`
}

func (SampleAesEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleAesEncryption)(nil)).Elem()
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionOutput() SampleAesEncryptionOutput {
	return i.ToSampleAesEncryptionOutputWithContext(context.Background())
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionOutputWithContext(ctx context.Context) SampleAesEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleAesEncryptionOutput)
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return i.ToSampleAesEncryptionPtrOutputWithContext(context.Background())
}

func (i SampleAesEncryptionArgs) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleAesEncryptionOutput).ToSampleAesEncryptionPtrOutputWithContext(ctx)
}

// SampleAesEncryptionPtrInput is an input type that accepts SampleAesEncryptionArgs, SampleAesEncryptionPtr and SampleAesEncryptionPtrOutput values.
// You can construct a concrete instance of `SampleAesEncryptionPtrInput` via:
//
//          SampleAesEncryptionArgs{...}
//
//  or:
//
//          nil
type SampleAesEncryptionPtrInput interface {
	pulumi.Input

	ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput
	ToSampleAesEncryptionPtrOutputWithContext(context.Context) SampleAesEncryptionPtrOutput
}

type sampleAesEncryptionPtrType SampleAesEncryptionArgs

func SampleAesEncryptionPtr(v *SampleAesEncryptionArgs) SampleAesEncryptionPtrInput {
	return (*sampleAesEncryptionPtrType)(v)
}

func (*sampleAesEncryptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SampleAesEncryption)(nil)).Elem()
}

func (i *sampleAesEncryptionPtrType) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return i.ToSampleAesEncryptionPtrOutputWithContext(context.Background())
}

func (i *sampleAesEncryptionPtrType) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleAesEncryptionPtrOutput)
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionOutput struct{ *pulumi.OutputState }

func (SampleAesEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleAesEncryption)(nil)).Elem()
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionOutput() SampleAesEncryptionOutput {
	return o
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionOutputWithContext(ctx context.Context) SampleAesEncryptionOutput {
	return o
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return o.ToSampleAesEncryptionPtrOutputWithContext(context.Background())
}

func (o SampleAesEncryptionOutput) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SampleAesEncryption) *SampleAesEncryption {
		return &v
	}).(SampleAesEncryptionPtrOutput)
}

// URI of the key delivery service. This URI is inserted into the M3U8 header.
func (o SampleAesEncryptionOutput) KeyUri() pulumi.StringOutput {
	return o.ApplyT(func(v SampleAesEncryption) string { return v.KeyUri }).(pulumi.StringOutput)
}

type SampleAesEncryptionPtrOutput struct{ *pulumi.OutputState }

func (SampleAesEncryptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SampleAesEncryption)(nil)).Elem()
}

func (o SampleAesEncryptionPtrOutput) ToSampleAesEncryptionPtrOutput() SampleAesEncryptionPtrOutput {
	return o
}

func (o SampleAesEncryptionPtrOutput) ToSampleAesEncryptionPtrOutputWithContext(ctx context.Context) SampleAesEncryptionPtrOutput {
	return o
}

func (o SampleAesEncryptionPtrOutput) Elem() SampleAesEncryptionOutput {
	return o.ApplyT(func(v *SampleAesEncryption) SampleAesEncryption {
		if v != nil {
			return *v
		}
		var ret SampleAesEncryption
		return ret
	}).(SampleAesEncryptionOutput)
}

// URI of the key delivery service. This URI is inserted into the M3U8 header.
func (o SampleAesEncryptionPtrOutput) KeyUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SampleAesEncryption) *string {
		if v == nil {
			return nil
		}
		return &v.KeyUri
	}).(pulumi.StringPtrOutput)
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionResponse struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri string `pulumi:"keyUri"`
}

// SampleAesEncryptionResponseInput is an input type that accepts SampleAesEncryptionResponseArgs and SampleAesEncryptionResponseOutput values.
// You can construct a concrete instance of `SampleAesEncryptionResponseInput` via:
//
//          SampleAesEncryptionResponseArgs{...}
type SampleAesEncryptionResponseInput interface {
	pulumi.Input

	ToSampleAesEncryptionResponseOutput() SampleAesEncryptionResponseOutput
	ToSampleAesEncryptionResponseOutputWithContext(context.Context) SampleAesEncryptionResponseOutput
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionResponseArgs struct {
	// URI of the key delivery service. This URI is inserted into the M3U8 header.
	KeyUri pulumi.StringInput `pulumi:"keyUri"`
}

func (SampleAesEncryptionResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleAesEncryptionResponse)(nil)).Elem()
}

func (i SampleAesEncryptionResponseArgs) ToSampleAesEncryptionResponseOutput() SampleAesEncryptionResponseOutput {
	return i.ToSampleAesEncryptionResponseOutputWithContext(context.Background())
}

func (i SampleAesEncryptionResponseArgs) ToSampleAesEncryptionResponseOutputWithContext(ctx context.Context) SampleAesEncryptionResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SampleAesEncryptionResponseOutput)
}

// Configuration for SAMPLE-AES encryption.
type SampleAesEncryptionResponseOutput struct{ *pulumi.OutputState }

func (SampleAesEncryptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SampleAesEncryptionResponse)(nil)).Elem()
}

func (o SampleAesEncryptionResponseOutput) ToSampleAesEncryptionResponseOutput() SampleAesEncryptionResponseOutput {
	return o
}

func (o SampleAesEncryptionResponseOutput) ToSampleAesEncryptionResponseOutputWithContext(ctx context.Context) SampleAesEncryptionResponseOutput {
	return o
}

// URI of the key delivery service. This URI is inserted into the M3U8 header.
func (o SampleAesEncryptionResponseOutput) KeyUri() pulumi.StringOutput {
	return o.ApplyT(func(v SampleAesEncryptionResponse) string { return v.KeyUri }).(pulumi.StringOutput)
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
type SegmentSettings struct {
	// Create an individual segment file. The default is `false`.
	IndividualSegments bool `pulumi:"individualSegments"`
	// Duration of the segments in seconds. The default is `"6.0s"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
	SegmentDuration *string `pulumi:"segmentDuration"`
}

// SegmentSettingsInput is an input type that accepts SegmentSettingsArgs and SegmentSettingsOutput values.
// You can construct a concrete instance of `SegmentSettingsInput` via:
//
//          SegmentSettingsArgs{...}
type SegmentSettingsInput interface {
	pulumi.Input

	ToSegmentSettingsOutput() SegmentSettingsOutput
	ToSegmentSettingsOutputWithContext(context.Context) SegmentSettingsOutput
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
type SegmentSettingsArgs struct {
	// Create an individual segment file. The default is `false`.
	IndividualSegments pulumi.BoolInput `pulumi:"individualSegments"`
	// Duration of the segments in seconds. The default is `"6.0s"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
	SegmentDuration pulumi.StringPtrInput `pulumi:"segmentDuration"`
}

func (SegmentSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSettings)(nil)).Elem()
}

func (i SegmentSettingsArgs) ToSegmentSettingsOutput() SegmentSettingsOutput {
	return i.ToSegmentSettingsOutputWithContext(context.Background())
}

func (i SegmentSettingsArgs) ToSegmentSettingsOutputWithContext(ctx context.Context) SegmentSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSettingsOutput)
}

func (i SegmentSettingsArgs) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return i.ToSegmentSettingsPtrOutputWithContext(context.Background())
}

func (i SegmentSettingsArgs) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSettingsOutput).ToSegmentSettingsPtrOutputWithContext(ctx)
}

// SegmentSettingsPtrInput is an input type that accepts SegmentSettingsArgs, SegmentSettingsPtr and SegmentSettingsPtrOutput values.
// You can construct a concrete instance of `SegmentSettingsPtrInput` via:
//
//          SegmentSettingsArgs{...}
//
//  or:
//
//          nil
type SegmentSettingsPtrInput interface {
	pulumi.Input

	ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput
	ToSegmentSettingsPtrOutputWithContext(context.Context) SegmentSettingsPtrOutput
}

type segmentSettingsPtrType SegmentSettingsArgs

func SegmentSettingsPtr(v *SegmentSettingsArgs) SegmentSettingsPtrInput {
	return (*segmentSettingsPtrType)(v)
}

func (*segmentSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentSettings)(nil)).Elem()
}

func (i *segmentSettingsPtrType) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return i.ToSegmentSettingsPtrOutputWithContext(context.Background())
}

func (i *segmentSettingsPtrType) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSettingsPtrOutput)
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
type SegmentSettingsOutput struct{ *pulumi.OutputState }

func (SegmentSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSettings)(nil)).Elem()
}

func (o SegmentSettingsOutput) ToSegmentSettingsOutput() SegmentSettingsOutput {
	return o
}

func (o SegmentSettingsOutput) ToSegmentSettingsOutputWithContext(ctx context.Context) SegmentSettingsOutput {
	return o
}

func (o SegmentSettingsOutput) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return o.ToSegmentSettingsPtrOutputWithContext(context.Background())
}

func (o SegmentSettingsOutput) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SegmentSettings) *SegmentSettings {
		return &v
	}).(SegmentSettingsPtrOutput)
}

// Create an individual segment file. The default is `false`.
func (o SegmentSettingsOutput) IndividualSegments() pulumi.BoolOutput {
	return o.ApplyT(func(v SegmentSettings) bool { return v.IndividualSegments }).(pulumi.BoolOutput)
}

// Duration of the segments in seconds. The default is `"6.0s"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
func (o SegmentSettingsOutput) SegmentDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SegmentSettings) *string { return v.SegmentDuration }).(pulumi.StringPtrOutput)
}

type SegmentSettingsPtrOutput struct{ *pulumi.OutputState }

func (SegmentSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SegmentSettings)(nil)).Elem()
}

func (o SegmentSettingsPtrOutput) ToSegmentSettingsPtrOutput() SegmentSettingsPtrOutput {
	return o
}

func (o SegmentSettingsPtrOutput) ToSegmentSettingsPtrOutputWithContext(ctx context.Context) SegmentSettingsPtrOutput {
	return o
}

func (o SegmentSettingsPtrOutput) Elem() SegmentSettingsOutput {
	return o.ApplyT(func(v *SegmentSettings) SegmentSettings {
		if v != nil {
			return *v
		}
		var ret SegmentSettings
		return ret
	}).(SegmentSettingsOutput)
}

// Create an individual segment file. The default is `false`.
func (o SegmentSettingsPtrOutput) IndividualSegments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SegmentSettings) *bool {
		if v == nil {
			return nil
		}
		return &v.IndividualSegments
	}).(pulumi.BoolPtrOutput)
}

// Duration of the segments in seconds. The default is `"6.0s"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
func (o SegmentSettingsPtrOutput) SegmentDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SegmentSettings) *string {
		if v == nil {
			return nil
		}
		return v.SegmentDuration
	}).(pulumi.StringPtrOutput)
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
type SegmentSettingsResponse struct {
	// Create an individual segment file. The default is `false`.
	IndividualSegments bool `pulumi:"individualSegments"`
	// Duration of the segments in seconds. The default is `"6.0s"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
	SegmentDuration string `pulumi:"segmentDuration"`
}

// SegmentSettingsResponseInput is an input type that accepts SegmentSettingsResponseArgs and SegmentSettingsResponseOutput values.
// You can construct a concrete instance of `SegmentSettingsResponseInput` via:
//
//          SegmentSettingsResponseArgs{...}
type SegmentSettingsResponseInput interface {
	pulumi.Input

	ToSegmentSettingsResponseOutput() SegmentSettingsResponseOutput
	ToSegmentSettingsResponseOutputWithContext(context.Context) SegmentSettingsResponseOutput
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
type SegmentSettingsResponseArgs struct {
	// Create an individual segment file. The default is `false`.
	IndividualSegments pulumi.BoolInput `pulumi:"individualSegments"`
	// Duration of the segments in seconds. The default is `"6.0s"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
	SegmentDuration pulumi.StringInput `pulumi:"segmentDuration"`
}

func (SegmentSettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSettingsResponse)(nil)).Elem()
}

func (i SegmentSettingsResponseArgs) ToSegmentSettingsResponseOutput() SegmentSettingsResponseOutput {
	return i.ToSegmentSettingsResponseOutputWithContext(context.Background())
}

func (i SegmentSettingsResponseArgs) ToSegmentSettingsResponseOutputWithContext(ctx context.Context) SegmentSettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentSettingsResponseOutput)
}

// Segment settings for `"ts"`, `"fmp4"` and `"vtt"`.
type SegmentSettingsResponseOutput struct{ *pulumi.OutputState }

func (SegmentSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SegmentSettingsResponse)(nil)).Elem()
}

func (o SegmentSettingsResponseOutput) ToSegmentSettingsResponseOutput() SegmentSettingsResponseOutput {
	return o
}

func (o SegmentSettingsResponseOutput) ToSegmentSettingsResponseOutputWithContext(ctx context.Context) SegmentSettingsResponseOutput {
	return o
}

// Create an individual segment file. The default is `false`.
func (o SegmentSettingsResponseOutput) IndividualSegments() pulumi.BoolOutput {
	return o.ApplyT(func(v SegmentSettingsResponse) bool { return v.IndividualSegments }).(pulumi.BoolOutput)
}

// Duration of the segments in seconds. The default is `"6.0s"`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).
func (o SegmentSettingsResponseOutput) SegmentDuration() pulumi.StringOutput {
	return o.ApplyT(func(v SegmentSettingsResponse) string { return v.SegmentDuration }).(pulumi.StringOutput)
}

// Sprite sheet configuration.
type SpriteSheet struct {
	// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
	ColumnCount *int `pulumi:"columnCount"`
	// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
	EndTimeOffset *string `pulumi:"endTimeOffset"`
	// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
	FilePrefix string `pulumi:"filePrefix"`
	// Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
	Format *string `pulumi:"format"`
	// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
	Interval *string `pulumi:"interval"`
	// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
	Quality *int `pulumi:"quality"`
	// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
	RowCount *int `pulumi:"rowCount"`
	// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteHeightPixels int `pulumi:"spriteHeightPixels"`
	// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteWidthPixels int `pulumi:"spriteWidthPixels"`
	// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
	StartTimeOffset *string `pulumi:"startTimeOffset"`
	// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
	TotalCount *int `pulumi:"totalCount"`
}

// SpriteSheetInput is an input type that accepts SpriteSheetArgs and SpriteSheetOutput values.
// You can construct a concrete instance of `SpriteSheetInput` via:
//
//          SpriteSheetArgs{...}
type SpriteSheetInput interface {
	pulumi.Input

	ToSpriteSheetOutput() SpriteSheetOutput
	ToSpriteSheetOutputWithContext(context.Context) SpriteSheetOutput
}

// Sprite sheet configuration.
type SpriteSheetArgs struct {
	// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
	ColumnCount pulumi.IntPtrInput `pulumi:"columnCount"`
	// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
	EndTimeOffset pulumi.StringPtrInput `pulumi:"endTimeOffset"`
	// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
	FilePrefix pulumi.StringInput `pulumi:"filePrefix"`
	// Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
	Format pulumi.StringPtrInput `pulumi:"format"`
	// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
	Interval pulumi.StringPtrInput `pulumi:"interval"`
	// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
	Quality pulumi.IntPtrInput `pulumi:"quality"`
	// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
	RowCount pulumi.IntPtrInput `pulumi:"rowCount"`
	// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteHeightPixels pulumi.IntInput `pulumi:"spriteHeightPixels"`
	// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteWidthPixels pulumi.IntInput `pulumi:"spriteWidthPixels"`
	// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
	StartTimeOffset pulumi.StringPtrInput `pulumi:"startTimeOffset"`
	// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
	TotalCount pulumi.IntPtrInput `pulumi:"totalCount"`
}

func (SpriteSheetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpriteSheet)(nil)).Elem()
}

func (i SpriteSheetArgs) ToSpriteSheetOutput() SpriteSheetOutput {
	return i.ToSpriteSheetOutputWithContext(context.Background())
}

func (i SpriteSheetArgs) ToSpriteSheetOutputWithContext(ctx context.Context) SpriteSheetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpriteSheetOutput)
}

// SpriteSheetArrayInput is an input type that accepts SpriteSheetArray and SpriteSheetArrayOutput values.
// You can construct a concrete instance of `SpriteSheetArrayInput` via:
//
//          SpriteSheetArray{ SpriteSheetArgs{...} }
type SpriteSheetArrayInput interface {
	pulumi.Input

	ToSpriteSheetArrayOutput() SpriteSheetArrayOutput
	ToSpriteSheetArrayOutputWithContext(context.Context) SpriteSheetArrayOutput
}

type SpriteSheetArray []SpriteSheetInput

func (SpriteSheetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpriteSheet)(nil)).Elem()
}

func (i SpriteSheetArray) ToSpriteSheetArrayOutput() SpriteSheetArrayOutput {
	return i.ToSpriteSheetArrayOutputWithContext(context.Background())
}

func (i SpriteSheetArray) ToSpriteSheetArrayOutputWithContext(ctx context.Context) SpriteSheetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpriteSheetArrayOutput)
}

// Sprite sheet configuration.
type SpriteSheetOutput struct{ *pulumi.OutputState }

func (SpriteSheetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpriteSheet)(nil)).Elem()
}

func (o SpriteSheetOutput) ToSpriteSheetOutput() SpriteSheetOutput {
	return o
}

func (o SpriteSheetOutput) ToSpriteSheetOutputWithContext(ctx context.Context) SpriteSheetOutput {
	return o
}

// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
func (o SpriteSheetOutput) ColumnCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.ColumnCount }).(pulumi.IntPtrOutput)
}

// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
func (o SpriteSheetOutput) EndTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.EndTimeOffset }).(pulumi.StringPtrOutput)
}

// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
func (o SpriteSheetOutput) FilePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheet) string { return v.FilePrefix }).(pulumi.StringOutput)
}

// Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
func (o SpriteSheetOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
func (o SpriteSheetOutput) Interval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.Interval }).(pulumi.StringPtrOutput)
}

// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
func (o SpriteSheetOutput) Quality() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.Quality }).(pulumi.IntPtrOutput)
}

// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
func (o SpriteSheetOutput) RowCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.RowCount }).(pulumi.IntPtrOutput)
}

// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
func (o SpriteSheetOutput) SpriteHeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheet) int { return v.SpriteHeightPixels }).(pulumi.IntOutput)
}

// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
func (o SpriteSheetOutput) SpriteWidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheet) int { return v.SpriteWidthPixels }).(pulumi.IntOutput)
}

// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
func (o SpriteSheetOutput) StartTimeOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *string { return v.StartTimeOffset }).(pulumi.StringPtrOutput)
}

// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
func (o SpriteSheetOutput) TotalCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SpriteSheet) *int { return v.TotalCount }).(pulumi.IntPtrOutput)
}

type SpriteSheetArrayOutput struct{ *pulumi.OutputState }

func (SpriteSheetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpriteSheet)(nil)).Elem()
}

func (o SpriteSheetArrayOutput) ToSpriteSheetArrayOutput() SpriteSheetArrayOutput {
	return o
}

func (o SpriteSheetArrayOutput) ToSpriteSheetArrayOutputWithContext(ctx context.Context) SpriteSheetArrayOutput {
	return o
}

func (o SpriteSheetArrayOutput) Index(i pulumi.IntInput) SpriteSheetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpriteSheet {
		return vs[0].([]SpriteSheet)[vs[1].(int)]
	}).(SpriteSheetOutput)
}

// Sprite sheet configuration.
type SpriteSheetResponse struct {
	// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
	ColumnCount int `pulumi:"columnCount"`
	// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
	EndTimeOffset string `pulumi:"endTimeOffset"`
	// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
	FilePrefix string `pulumi:"filePrefix"`
	// Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
	Format string `pulumi:"format"`
	// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
	Interval string `pulumi:"interval"`
	// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
	Quality int `pulumi:"quality"`
	// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
	RowCount int `pulumi:"rowCount"`
	// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteHeightPixels int `pulumi:"spriteHeightPixels"`
	// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteWidthPixels int `pulumi:"spriteWidthPixels"`
	// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
	StartTimeOffset string `pulumi:"startTimeOffset"`
	// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
	TotalCount int `pulumi:"totalCount"`
}

// SpriteSheetResponseInput is an input type that accepts SpriteSheetResponseArgs and SpriteSheetResponseOutput values.
// You can construct a concrete instance of `SpriteSheetResponseInput` via:
//
//          SpriteSheetResponseArgs{...}
type SpriteSheetResponseInput interface {
	pulumi.Input

	ToSpriteSheetResponseOutput() SpriteSheetResponseOutput
	ToSpriteSheetResponseOutputWithContext(context.Context) SpriteSheetResponseOutput
}

// Sprite sheet configuration.
type SpriteSheetResponseArgs struct {
	// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
	ColumnCount pulumi.IntInput `pulumi:"columnCount"`
	// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
	EndTimeOffset pulumi.StringInput `pulumi:"endTimeOffset"`
	// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
	FilePrefix pulumi.StringInput `pulumi:"filePrefix"`
	// Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
	Format pulumi.StringInput `pulumi:"format"`
	// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
	Interval pulumi.StringInput `pulumi:"interval"`
	// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
	Quality pulumi.IntInput `pulumi:"quality"`
	// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
	RowCount pulumi.IntInput `pulumi:"rowCount"`
	// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteHeightPixels pulumi.IntInput `pulumi:"spriteHeightPixels"`
	// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
	SpriteWidthPixels pulumi.IntInput `pulumi:"spriteWidthPixels"`
	// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
	StartTimeOffset pulumi.StringInput `pulumi:"startTimeOffset"`
	// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
	TotalCount pulumi.IntInput `pulumi:"totalCount"`
}

func (SpriteSheetResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpriteSheetResponse)(nil)).Elem()
}

func (i SpriteSheetResponseArgs) ToSpriteSheetResponseOutput() SpriteSheetResponseOutput {
	return i.ToSpriteSheetResponseOutputWithContext(context.Background())
}

func (i SpriteSheetResponseArgs) ToSpriteSheetResponseOutputWithContext(ctx context.Context) SpriteSheetResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpriteSheetResponseOutput)
}

// SpriteSheetResponseArrayInput is an input type that accepts SpriteSheetResponseArray and SpriteSheetResponseArrayOutput values.
// You can construct a concrete instance of `SpriteSheetResponseArrayInput` via:
//
//          SpriteSheetResponseArray{ SpriteSheetResponseArgs{...} }
type SpriteSheetResponseArrayInput interface {
	pulumi.Input

	ToSpriteSheetResponseArrayOutput() SpriteSheetResponseArrayOutput
	ToSpriteSheetResponseArrayOutputWithContext(context.Context) SpriteSheetResponseArrayOutput
}

type SpriteSheetResponseArray []SpriteSheetResponseInput

func (SpriteSheetResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpriteSheetResponse)(nil)).Elem()
}

func (i SpriteSheetResponseArray) ToSpriteSheetResponseArrayOutput() SpriteSheetResponseArrayOutput {
	return i.ToSpriteSheetResponseArrayOutputWithContext(context.Background())
}

func (i SpriteSheetResponseArray) ToSpriteSheetResponseArrayOutputWithContext(ctx context.Context) SpriteSheetResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpriteSheetResponseArrayOutput)
}

// Sprite sheet configuration.
type SpriteSheetResponseOutput struct{ *pulumi.OutputState }

func (SpriteSheetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpriteSheetResponse)(nil)).Elem()
}

func (o SpriteSheetResponseOutput) ToSpriteSheetResponseOutput() SpriteSheetResponseOutput {
	return o
}

func (o SpriteSheetResponseOutput) ToSpriteSheetResponseOutputWithContext(ctx context.Context) SpriteSheetResponseOutput {
	return o
}

// The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.
func (o SpriteSheetResponseOutput) ColumnCount() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.ColumnCount }).(pulumi.IntOutput)
}

// End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.
func (o SpriteSheetResponseOutput) EndTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.EndTimeOffset }).(pulumi.StringOutput)
}

// File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `"sprite_sheet0000000123.jpeg"`.
func (o SpriteSheetResponseOutput) FilePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.FilePrefix }).(pulumi.StringOutput)
}

// Format type. The default is `"jpeg"`. Supported formats: - 'jpeg'
func (o SpriteSheetResponseOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.Format }).(pulumi.StringOutput)
}

// Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.
func (o SpriteSheetResponseOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.Interval }).(pulumi.StringOutput)
}

// The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.
func (o SpriteSheetResponseOutput) Quality() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.Quality }).(pulumi.IntOutput)
}

// The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.
func (o SpriteSheetResponseOutput) RowCount() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.RowCount }).(pulumi.IntOutput)
}

// The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field).
func (o SpriteSheetResponseOutput) SpriteHeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.SpriteHeightPixels }).(pulumi.IntOutput)
}

// The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field).
func (o SpriteSheetResponseOutput) SpriteWidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.SpriteWidthPixels }).(pulumi.IntOutput)
}

// Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.
func (o SpriteSheetResponseOutput) StartTimeOffset() pulumi.StringOutput {
	return o.ApplyT(func(v SpriteSheetResponse) string { return v.StartTimeOffset }).(pulumi.StringOutput)
}

// Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.
func (o SpriteSheetResponseOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SpriteSheetResponse) int { return v.TotalCount }).(pulumi.IntOutput)
}

type SpriteSheetResponseArrayOutput struct{ *pulumi.OutputState }

func (SpriteSheetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpriteSheetResponse)(nil)).Elem()
}

func (o SpriteSheetResponseArrayOutput) ToSpriteSheetResponseArrayOutput() SpriteSheetResponseArrayOutput {
	return o
}

func (o SpriteSheetResponseArrayOutput) ToSpriteSheetResponseArrayOutputWithContext(ctx context.Context) SpriteSheetResponseArrayOutput {
	return o
}

func (o SpriteSheetResponseArrayOutput) Index(i pulumi.IntInput) SpriteSheetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpriteSheetResponse {
		return vs[0].([]SpriteSheetResponse)[vs[1].(int)]
	}).(SpriteSheetResponseOutput)
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
type TextAtom struct {
	// List of `Job.inputs` that should be embedded in this atom. Only one input is supported.
	Inputs []TextInput `pulumi:"inputs"`
	// The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.
	Key string `pulumi:"key"`
}

// TextAtomInput is an input type that accepts TextAtomArgs and TextAtomOutput values.
// You can construct a concrete instance of `TextAtomInput` via:
//
//          TextAtomArgs{...}
type TextAtomInput interface {
	pulumi.Input

	ToTextAtomOutput() TextAtomOutput
	ToTextAtomOutputWithContext(context.Context) TextAtomOutput
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
type TextAtomArgs struct {
	// List of `Job.inputs` that should be embedded in this atom. Only one input is supported.
	Inputs TextInputArrayInput `pulumi:"inputs"`
	// The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (TextAtomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextAtom)(nil)).Elem()
}

func (i TextAtomArgs) ToTextAtomOutput() TextAtomOutput {
	return i.ToTextAtomOutputWithContext(context.Background())
}

func (i TextAtomArgs) ToTextAtomOutputWithContext(ctx context.Context) TextAtomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextAtomOutput)
}

// TextAtomArrayInput is an input type that accepts TextAtomArray and TextAtomArrayOutput values.
// You can construct a concrete instance of `TextAtomArrayInput` via:
//
//          TextAtomArray{ TextAtomArgs{...} }
type TextAtomArrayInput interface {
	pulumi.Input

	ToTextAtomArrayOutput() TextAtomArrayOutput
	ToTextAtomArrayOutputWithContext(context.Context) TextAtomArrayOutput
}

type TextAtomArray []TextAtomInput

func (TextAtomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextAtom)(nil)).Elem()
}

func (i TextAtomArray) ToTextAtomArrayOutput() TextAtomArrayOutput {
	return i.ToTextAtomArrayOutputWithContext(context.Background())
}

func (i TextAtomArray) ToTextAtomArrayOutputWithContext(ctx context.Context) TextAtomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextAtomArrayOutput)
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
type TextAtomOutput struct{ *pulumi.OutputState }

func (TextAtomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextAtom)(nil)).Elem()
}

func (o TextAtomOutput) ToTextAtomOutput() TextAtomOutput {
	return o
}

func (o TextAtomOutput) ToTextAtomOutputWithContext(ctx context.Context) TextAtomOutput {
	return o
}

// List of `Job.inputs` that should be embedded in this atom. Only one input is supported.
func (o TextAtomOutput) Inputs() TextInputArrayOutput {
	return o.ApplyT(func(v TextAtom) []TextInput { return v.Inputs }).(TextInputArrayOutput)
}

// The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.
func (o TextAtomOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TextAtom) string { return v.Key }).(pulumi.StringOutput)
}

type TextAtomArrayOutput struct{ *pulumi.OutputState }

func (TextAtomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextAtom)(nil)).Elem()
}

func (o TextAtomArrayOutput) ToTextAtomArrayOutput() TextAtomArrayOutput {
	return o
}

func (o TextAtomArrayOutput) ToTextAtomArrayOutputWithContext(ctx context.Context) TextAtomArrayOutput {
	return o
}

func (o TextAtomArrayOutput) Index(i pulumi.IntInput) TextAtomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TextAtom {
		return vs[0].([]TextAtom)[vs[1].(int)]
	}).(TextAtomOutput)
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
type TextAtomResponse struct {
	// List of `Job.inputs` that should be embedded in this atom. Only one input is supported.
	Inputs []TextInputResponse `pulumi:"inputs"`
	// The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.
	Key string `pulumi:"key"`
}

// TextAtomResponseInput is an input type that accepts TextAtomResponseArgs and TextAtomResponseOutput values.
// You can construct a concrete instance of `TextAtomResponseInput` via:
//
//          TextAtomResponseArgs{...}
type TextAtomResponseInput interface {
	pulumi.Input

	ToTextAtomResponseOutput() TextAtomResponseOutput
	ToTextAtomResponseOutputWithContext(context.Context) TextAtomResponseOutput
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
type TextAtomResponseArgs struct {
	// List of `Job.inputs` that should be embedded in this atom. Only one input is supported.
	Inputs TextInputResponseArrayInput `pulumi:"inputs"`
	// The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.
	Key pulumi.StringInput `pulumi:"key"`
}

func (TextAtomResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextAtomResponse)(nil)).Elem()
}

func (i TextAtomResponseArgs) ToTextAtomResponseOutput() TextAtomResponseOutput {
	return i.ToTextAtomResponseOutputWithContext(context.Background())
}

func (i TextAtomResponseArgs) ToTextAtomResponseOutputWithContext(ctx context.Context) TextAtomResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextAtomResponseOutput)
}

// TextAtomResponseArrayInput is an input type that accepts TextAtomResponseArray and TextAtomResponseArrayOutput values.
// You can construct a concrete instance of `TextAtomResponseArrayInput` via:
//
//          TextAtomResponseArray{ TextAtomResponseArgs{...} }
type TextAtomResponseArrayInput interface {
	pulumi.Input

	ToTextAtomResponseArrayOutput() TextAtomResponseArrayOutput
	ToTextAtomResponseArrayOutputWithContext(context.Context) TextAtomResponseArrayOutput
}

type TextAtomResponseArray []TextAtomResponseInput

func (TextAtomResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextAtomResponse)(nil)).Elem()
}

func (i TextAtomResponseArray) ToTextAtomResponseArrayOutput() TextAtomResponseArrayOutput {
	return i.ToTextAtomResponseArrayOutputWithContext(context.Background())
}

func (i TextAtomResponseArray) ToTextAtomResponseArrayOutputWithContext(ctx context.Context) TextAtomResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextAtomResponseArrayOutput)
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
type TextAtomResponseOutput struct{ *pulumi.OutputState }

func (TextAtomResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextAtomResponse)(nil)).Elem()
}

func (o TextAtomResponseOutput) ToTextAtomResponseOutput() TextAtomResponseOutput {
	return o
}

func (o TextAtomResponseOutput) ToTextAtomResponseOutputWithContext(ctx context.Context) TextAtomResponseOutput {
	return o
}

// List of `Job.inputs` that should be embedded in this atom. Only one input is supported.
func (o TextAtomResponseOutput) Inputs() TextInputResponseArrayOutput {
	return o.ApplyT(func(v TextAtomResponse) []TextInputResponse { return v.Inputs }).(TextInputResponseArrayOutput)
}

// The `EditAtom.key` that references atom with text inputs in the `Job.edit_list`.
func (o TextAtomResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TextAtomResponse) string { return v.Key }).(pulumi.StringOutput)
}

type TextAtomResponseArrayOutput struct{ *pulumi.OutputState }

func (TextAtomResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextAtomResponse)(nil)).Elem()
}

func (o TextAtomResponseArrayOutput) ToTextAtomResponseArrayOutput() TextAtomResponseArrayOutput {
	return o
}

func (o TextAtomResponseArrayOutput) ToTextAtomResponseArrayOutputWithContext(ctx context.Context) TextAtomResponseArrayOutput {
	return o
}

func (o TextAtomResponseArrayOutput) Index(i pulumi.IntInput) TextAtomResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TextAtomResponse {
		return vs[0].([]TextAtomResponse)[vs[1].(int)]
	}).(TextAtomResponseOutput)
}

// Identifies which input file and track should be used.
type TextInput struct {
	// The `Input.key` that identifies the input file.
	Key string `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track int `pulumi:"track"`
}

// TextInputInput is an input type that accepts TextInputArgs and TextInputOutput values.
// You can construct a concrete instance of `TextInputInput` via:
//
//          TextInputArgs{...}
type TextInputInput interface {
	pulumi.Input

	ToTextInputOutput() TextInputOutput
	ToTextInputOutputWithContext(context.Context) TextInputOutput
}

// Identifies which input file and track should be used.
type TextInputArgs struct {
	// The `Input.key` that identifies the input file.
	Key pulumi.StringInput `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track pulumi.IntInput `pulumi:"track"`
}

func (TextInputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextInput)(nil)).Elem()
}

func (i TextInputArgs) ToTextInputOutput() TextInputOutput {
	return i.ToTextInputOutputWithContext(context.Background())
}

func (i TextInputArgs) ToTextInputOutputWithContext(ctx context.Context) TextInputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextInputOutput)
}

// TextInputArrayInput is an input type that accepts TextInputArray and TextInputArrayOutput values.
// You can construct a concrete instance of `TextInputArrayInput` via:
//
//          TextInputArray{ TextInputArgs{...} }
type TextInputArrayInput interface {
	pulumi.Input

	ToTextInputArrayOutput() TextInputArrayOutput
	ToTextInputArrayOutputWithContext(context.Context) TextInputArrayOutput
}

type TextInputArray []TextInputInput

func (TextInputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextInput)(nil)).Elem()
}

func (i TextInputArray) ToTextInputArrayOutput() TextInputArrayOutput {
	return i.ToTextInputArrayOutputWithContext(context.Background())
}

func (i TextInputArray) ToTextInputArrayOutputWithContext(ctx context.Context) TextInputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextInputArrayOutput)
}

// Identifies which input file and track should be used.
type TextInputOutput struct{ *pulumi.OutputState }

func (TextInputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextInput)(nil)).Elem()
}

func (o TextInputOutput) ToTextInputOutput() TextInputOutput {
	return o
}

func (o TextInputOutput) ToTextInputOutputWithContext(ctx context.Context) TextInputOutput {
	return o
}

// The `Input.key` that identifies the input file.
func (o TextInputOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TextInput) string { return v.Key }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o TextInputOutput) Track() pulumi.IntOutput {
	return o.ApplyT(func(v TextInput) int { return v.Track }).(pulumi.IntOutput)
}

type TextInputArrayOutput struct{ *pulumi.OutputState }

func (TextInputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextInput)(nil)).Elem()
}

func (o TextInputArrayOutput) ToTextInputArrayOutput() TextInputArrayOutput {
	return o
}

func (o TextInputArrayOutput) ToTextInputArrayOutputWithContext(ctx context.Context) TextInputArrayOutput {
	return o
}

func (o TextInputArrayOutput) Index(i pulumi.IntInput) TextInputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TextInput {
		return vs[0].([]TextInput)[vs[1].(int)]
	}).(TextInputOutput)
}

// Identifies which input file and track should be used.
type TextInputResponse struct {
	// The `Input.key` that identifies the input file.
	Key string `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track int `pulumi:"track"`
}

// TextInputResponseInput is an input type that accepts TextInputResponseArgs and TextInputResponseOutput values.
// You can construct a concrete instance of `TextInputResponseInput` via:
//
//          TextInputResponseArgs{...}
type TextInputResponseInput interface {
	pulumi.Input

	ToTextInputResponseOutput() TextInputResponseOutput
	ToTextInputResponseOutputWithContext(context.Context) TextInputResponseOutput
}

// Identifies which input file and track should be used.
type TextInputResponseArgs struct {
	// The `Input.key` that identifies the input file.
	Key pulumi.StringInput `pulumi:"key"`
	// The zero-based index of the track in the input file.
	Track pulumi.IntInput `pulumi:"track"`
}

func (TextInputResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextInputResponse)(nil)).Elem()
}

func (i TextInputResponseArgs) ToTextInputResponseOutput() TextInputResponseOutput {
	return i.ToTextInputResponseOutputWithContext(context.Background())
}

func (i TextInputResponseArgs) ToTextInputResponseOutputWithContext(ctx context.Context) TextInputResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextInputResponseOutput)
}

// TextInputResponseArrayInput is an input type that accepts TextInputResponseArray and TextInputResponseArrayOutput values.
// You can construct a concrete instance of `TextInputResponseArrayInput` via:
//
//          TextInputResponseArray{ TextInputResponseArgs{...} }
type TextInputResponseArrayInput interface {
	pulumi.Input

	ToTextInputResponseArrayOutput() TextInputResponseArrayOutput
	ToTextInputResponseArrayOutputWithContext(context.Context) TextInputResponseArrayOutput
}

type TextInputResponseArray []TextInputResponseInput

func (TextInputResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextInputResponse)(nil)).Elem()
}

func (i TextInputResponseArray) ToTextInputResponseArrayOutput() TextInputResponseArrayOutput {
	return i.ToTextInputResponseArrayOutputWithContext(context.Background())
}

func (i TextInputResponseArray) ToTextInputResponseArrayOutputWithContext(ctx context.Context) TextInputResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextInputResponseArrayOutput)
}

// Identifies which input file and track should be used.
type TextInputResponseOutput struct{ *pulumi.OutputState }

func (TextInputResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextInputResponse)(nil)).Elem()
}

func (o TextInputResponseOutput) ToTextInputResponseOutput() TextInputResponseOutput {
	return o
}

func (o TextInputResponseOutput) ToTextInputResponseOutputWithContext(ctx context.Context) TextInputResponseOutput {
	return o
}

// The `Input.key` that identifies the input file.
func (o TextInputResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v TextInputResponse) string { return v.Key }).(pulumi.StringOutput)
}

// The zero-based index of the track in the input file.
func (o TextInputResponseOutput) Track() pulumi.IntOutput {
	return o.ApplyT(func(v TextInputResponse) int { return v.Track }).(pulumi.IntOutput)
}

type TextInputResponseArrayOutput struct{ *pulumi.OutputState }

func (TextInputResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TextInputResponse)(nil)).Elem()
}

func (o TextInputResponseArrayOutput) ToTextInputResponseArrayOutput() TextInputResponseArrayOutput {
	return o
}

func (o TextInputResponseArrayOutput) ToTextInputResponseArrayOutputWithContext(ctx context.Context) TextInputResponseArrayOutput {
	return o
}

func (o TextInputResponseArrayOutput) Index(i pulumi.IntInput) TextInputResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TextInputResponse {
		return vs[0].([]TextInputResponse)[vs[1].(int)]
	}).(TextInputResponseOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStream struct {
	// The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'
	Codec *string `pulumi:"codec"`
	// The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
	LanguageCode string `pulumi:"languageCode"`
	// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
	Mapping []TextAtom `pulumi:"mapping"`
}

// TextStreamInput is an input type that accepts TextStreamArgs and TextStreamOutput values.
// You can construct a concrete instance of `TextStreamInput` via:
//
//          TextStreamArgs{...}
type TextStreamInput interface {
	pulumi.Input

	ToTextStreamOutput() TextStreamOutput
	ToTextStreamOutputWithContext(context.Context) TextStreamOutput
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamArgs struct {
	// The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
	LanguageCode pulumi.StringInput `pulumi:"languageCode"`
	// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
	Mapping TextAtomArrayInput `pulumi:"mapping"`
}

func (TextStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextStream)(nil)).Elem()
}

func (i TextStreamArgs) ToTextStreamOutput() TextStreamOutput {
	return i.ToTextStreamOutputWithContext(context.Background())
}

func (i TextStreamArgs) ToTextStreamOutputWithContext(ctx context.Context) TextStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextStreamOutput)
}

func (i TextStreamArgs) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return i.ToTextStreamPtrOutputWithContext(context.Background())
}

func (i TextStreamArgs) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextStreamOutput).ToTextStreamPtrOutputWithContext(ctx)
}

// TextStreamPtrInput is an input type that accepts TextStreamArgs, TextStreamPtr and TextStreamPtrOutput values.
// You can construct a concrete instance of `TextStreamPtrInput` via:
//
//          TextStreamArgs{...}
//
//  or:
//
//          nil
type TextStreamPtrInput interface {
	pulumi.Input

	ToTextStreamPtrOutput() TextStreamPtrOutput
	ToTextStreamPtrOutputWithContext(context.Context) TextStreamPtrOutput
}

type textStreamPtrType TextStreamArgs

func TextStreamPtr(v *TextStreamArgs) TextStreamPtrInput {
	return (*textStreamPtrType)(v)
}

func (*textStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TextStream)(nil)).Elem()
}

func (i *textStreamPtrType) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return i.ToTextStreamPtrOutputWithContext(context.Background())
}

func (i *textStreamPtrType) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextStreamPtrOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamOutput struct{ *pulumi.OutputState }

func (TextStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextStream)(nil)).Elem()
}

func (o TextStreamOutput) ToTextStreamOutput() TextStreamOutput {
	return o
}

func (o TextStreamOutput) ToTextStreamOutputWithContext(ctx context.Context) TextStreamOutput {
	return o
}

func (o TextStreamOutput) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return o.ToTextStreamPtrOutputWithContext(context.Background())
}

func (o TextStreamOutput) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TextStream) *TextStream {
		return &v
	}).(TextStreamPtrOutput)
}

// The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'
func (o TextStreamOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TextStream) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
func (o TextStreamOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v TextStream) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
func (o TextStreamOutput) Mapping() TextAtomArrayOutput {
	return o.ApplyT(func(v TextStream) []TextAtom { return v.Mapping }).(TextAtomArrayOutput)
}

type TextStreamPtrOutput struct{ *pulumi.OutputState }

func (TextStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TextStream)(nil)).Elem()
}

func (o TextStreamPtrOutput) ToTextStreamPtrOutput() TextStreamPtrOutput {
	return o
}

func (o TextStreamPtrOutput) ToTextStreamPtrOutputWithContext(ctx context.Context) TextStreamPtrOutput {
	return o
}

func (o TextStreamPtrOutput) Elem() TextStreamOutput {
	return o.ApplyT(func(v *TextStream) TextStream {
		if v != nil {
			return *v
		}
		var ret TextStream
		return ret
	}).(TextStreamOutput)
}

// The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'
func (o TextStreamPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TextStream) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
func (o TextStreamPtrOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TextStream) *string {
		if v == nil {
			return nil
		}
		return &v.LanguageCode
	}).(pulumi.StringPtrOutput)
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
func (o TextStreamPtrOutput) Mapping() TextAtomArrayOutput {
	return o.ApplyT(func(v *TextStream) []TextAtom {
		if v == nil {
			return nil
		}
		return v.Mapping
	}).(TextAtomArrayOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamResponse struct {
	// The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'
	Codec string `pulumi:"codec"`
	// The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
	LanguageCode string `pulumi:"languageCode"`
	// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
	Mapping []TextAtomResponse `pulumi:"mapping"`
}

// TextStreamResponseInput is an input type that accepts TextStreamResponseArgs and TextStreamResponseOutput values.
// You can construct a concrete instance of `TextStreamResponseInput` via:
//
//          TextStreamResponseArgs{...}
type TextStreamResponseInput interface {
	pulumi.Input

	ToTextStreamResponseOutput() TextStreamResponseOutput
	ToTextStreamResponseOutputWithContext(context.Context) TextStreamResponseOutput
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamResponseArgs struct {
	// The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'
	Codec pulumi.StringInput `pulumi:"codec"`
	// The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
	LanguageCode pulumi.StringInput `pulumi:"languageCode"`
	// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
	Mapping TextAtomResponseArrayInput `pulumi:"mapping"`
}

func (TextStreamResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TextStreamResponse)(nil)).Elem()
}

func (i TextStreamResponseArgs) ToTextStreamResponseOutput() TextStreamResponseOutput {
	return i.ToTextStreamResponseOutputWithContext(context.Background())
}

func (i TextStreamResponseArgs) ToTextStreamResponseOutputWithContext(ctx context.Context) TextStreamResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TextStreamResponseOutput)
}

// Encoding of a text stream. For example, closed captions or subtitles.
type TextStreamResponseOutput struct{ *pulumi.OutputState }

func (TextStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TextStreamResponse)(nil)).Elem()
}

func (o TextStreamResponseOutput) ToTextStreamResponseOutput() TextStreamResponseOutput {
	return o
}

func (o TextStreamResponseOutput) ToTextStreamResponseOutputWithContext(ctx context.Context) TextStreamResponseOutput {
	return o
}

// The codec for this text stream. The default is `"webvtt"`. Supported text codecs: - 'srt' - 'ttml' - 'cea608' - 'cea708' - 'webvtt'
func (o TextStreamResponseOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v TextStreamResponse) string { return v.Codec }).(pulumi.StringOutput)
}

// The BCP-47 language code, such as `"en-US"` or `"sr-Latn"`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
func (o TextStreamResponseOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v TextStreamResponse) string { return v.LanguageCode }).(pulumi.StringOutput)
}

// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
func (o TextStreamResponseOutput) Mapping() TextAtomResponseArrayOutput {
	return o.ApplyT(func(v TextStreamResponse) []TextAtomResponse { return v.Mapping }).(TextAtomResponseArrayOutput)
}

// Video stream resource.
type VideoStream struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop *bool `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength *float64 `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
	BFrameCount *int `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid *bool `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`
	Codec *string `pulumi:"codec"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel *int `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
	EnableTwoPass *bool `pulumi:"enableTwoPass"`
	// The entropy coder to use. The default is `"cabac"`. Supported entropy coders: - 'cavlc' - 'cabac'
	EntropyCoder *string `pulumi:"entropyCoder"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `"3s"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration *string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount *int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
	HeightPixels *int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `"yuv420p"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.
	PixelFormat *string `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Preset *string `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Profile *string `pulumi:"profile"`
	// Specify the `rate_control_mode`. The default is `"vbr"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor
	RateControlMode *string `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Tune *string `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
	VbvFullnessBits *int `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
	VbvSizeBits *int `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
	WidthPixels *int `pulumi:"widthPixels"`
}

// VideoStreamInput is an input type that accepts VideoStreamArgs and VideoStreamOutput values.
// You can construct a concrete instance of `VideoStreamInput` via:
//
//          VideoStreamArgs{...}
type VideoStreamInput interface {
	pulumi.Input

	ToVideoStreamOutput() VideoStreamOutput
	ToVideoStreamOutputWithContext(context.Context) VideoStreamOutput
}

// Video stream resource.
type VideoStreamArgs struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop pulumi.BoolPtrInput `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength pulumi.Float64PtrInput `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
	BFrameCount pulumi.IntPtrInput `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid pulumi.BoolPtrInput `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel pulumi.IntPtrInput `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
	EnableTwoPass pulumi.BoolPtrInput `pulumi:"enableTwoPass"`
	// The entropy coder to use. The default is `"cabac"`. Supported entropy coders: - 'cavlc' - 'cabac'
	EntropyCoder pulumi.StringPtrInput `pulumi:"entropyCoder"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate pulumi.Float64Input `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `"3s"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration pulumi.StringPtrInput `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount pulumi.IntPtrInput `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
	HeightPixels pulumi.IntPtrInput `pulumi:"heightPixels"`
	// Pixel format to use. The default is `"yuv420p"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.
	PixelFormat pulumi.StringPtrInput `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Preset pulumi.StringPtrInput `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Specify the `rate_control_mode`. The default is `"vbr"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor
	RateControlMode pulumi.StringPtrInput `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Tune pulumi.StringPtrInput `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
	VbvFullnessBits pulumi.IntPtrInput `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
	VbvSizeBits pulumi.IntPtrInput `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
	WidthPixels pulumi.IntPtrInput `pulumi:"widthPixels"`
}

func (VideoStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStream)(nil)).Elem()
}

func (i VideoStreamArgs) ToVideoStreamOutput() VideoStreamOutput {
	return i.ToVideoStreamOutputWithContext(context.Background())
}

func (i VideoStreamArgs) ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamOutput)
}

func (i VideoStreamArgs) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return i.ToVideoStreamPtrOutputWithContext(context.Background())
}

func (i VideoStreamArgs) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamOutput).ToVideoStreamPtrOutputWithContext(ctx)
}

// VideoStreamPtrInput is an input type that accepts VideoStreamArgs, VideoStreamPtr and VideoStreamPtrOutput values.
// You can construct a concrete instance of `VideoStreamPtrInput` via:
//
//          VideoStreamArgs{...}
//
//  or:
//
//          nil
type VideoStreamPtrInput interface {
	pulumi.Input

	ToVideoStreamPtrOutput() VideoStreamPtrOutput
	ToVideoStreamPtrOutputWithContext(context.Context) VideoStreamPtrOutput
}

type videoStreamPtrType VideoStreamArgs

func VideoStreamPtr(v *VideoStreamArgs) VideoStreamPtrInput {
	return (*videoStreamPtrType)(v)
}

func (*videoStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoStream)(nil)).Elem()
}

func (i *videoStreamPtrType) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return i.ToVideoStreamPtrOutputWithContext(context.Background())
}

func (i *videoStreamPtrType) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamPtrOutput)
}

// Video stream resource.
type VideoStreamOutput struct{ *pulumi.OutputState }

func (VideoStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStream)(nil)).Elem()
}

func (o VideoStreamOutput) ToVideoStreamOutput() VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) ToVideoStreamOutputWithContext(ctx context.Context) VideoStreamOutput {
	return o
}

func (o VideoStreamOutput) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return o.ToVideoStreamPtrOutputWithContext(context.Background())
}

func (o VideoStreamOutput) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VideoStream) *VideoStream {
		return &v
	}).(VideoStreamPtrOutput)
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o VideoStreamOutput) AllowOpenGop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VideoStream) *bool { return v.AllowOpenGop }).(pulumi.BoolPtrOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o VideoStreamOutput) AqStrength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VideoStream) *float64 { return v.AqStrength }).(pulumi.Float64PtrOutput)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
func (o VideoStreamOutput) BFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoStream) *int { return v.BFrameCount }).(pulumi.IntPtrOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o VideoStreamOutput) BPyramid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VideoStream) *bool { return v.BPyramid }).(pulumi.BoolPtrOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.
func (o VideoStreamOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStream) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`
func (o VideoStreamOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o VideoStreamOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoStream) *int { return v.CrfLevel }).(pulumi.IntPtrOutput)
}

// Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
func (o VideoStreamOutput) EnableTwoPass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VideoStream) *bool { return v.EnableTwoPass }).(pulumi.BoolPtrOutput)
}

// The entropy coder to use. The default is `"cabac"`. Supported entropy coders: - 'cavlc' - 'cabac'
func (o VideoStreamOutput) EntropyCoder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.EntropyCoder }).(pulumi.StringPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o VideoStreamOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v VideoStream) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `"3s"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o VideoStreamOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.GopDuration }).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o VideoStreamOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoStream) *int { return v.GopFrameCount }).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
func (o VideoStreamOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoStream) *int { return v.HeightPixels }).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `"yuv420p"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.
func (o VideoStreamOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.PixelFormat }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.Preset }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Specify the `rate_control_mode`. The default is `"vbr"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor
func (o VideoStreamOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.RateControlMode }).(pulumi.StringPtrOutput)
}

// Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VideoStream) *string { return v.Tune }).(pulumi.StringPtrOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
func (o VideoStreamOutput) VbvFullnessBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoStream) *int { return v.VbvFullnessBits }).(pulumi.IntPtrOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
func (o VideoStreamOutput) VbvSizeBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoStream) *int { return v.VbvSizeBits }).(pulumi.IntPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
func (o VideoStreamOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VideoStream) *int { return v.WidthPixels }).(pulumi.IntPtrOutput)
}

type VideoStreamPtrOutput struct{ *pulumi.OutputState }

func (VideoStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VideoStream)(nil)).Elem()
}

func (o VideoStreamPtrOutput) ToVideoStreamPtrOutput() VideoStreamPtrOutput {
	return o
}

func (o VideoStreamPtrOutput) ToVideoStreamPtrOutputWithContext(ctx context.Context) VideoStreamPtrOutput {
	return o
}

func (o VideoStreamPtrOutput) Elem() VideoStreamOutput {
	return o.ApplyT(func(v *VideoStream) VideoStream {
		if v != nil {
			return *v
		}
		var ret VideoStream
		return ret
	}).(VideoStreamOutput)
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o VideoStreamPtrOutput) AllowOpenGop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VideoStream) *bool {
		if v == nil {
			return nil
		}
		return v.AllowOpenGop
	}).(pulumi.BoolPtrOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o VideoStreamPtrOutput) AqStrength() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VideoStream) *float64 {
		if v == nil {
			return nil
		}
		return v.AqStrength
	}).(pulumi.Float64PtrOutput)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
func (o VideoStreamPtrOutput) BFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return v.BFrameCount
	}).(pulumi.IntPtrOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o VideoStreamPtrOutput) BPyramid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VideoStream) *bool {
		if v == nil {
			return nil
		}
		return v.BPyramid
	}).(pulumi.BoolPtrOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.
func (o VideoStreamPtrOutput) BitrateBps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return &v.BitrateBps
	}).(pulumi.IntPtrOutput)
}

// Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`
func (o VideoStreamPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o VideoStreamPtrOutput) CrfLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return v.CrfLevel
	}).(pulumi.IntPtrOutput)
}

// Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
func (o VideoStreamPtrOutput) EnableTwoPass() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VideoStream) *bool {
		if v == nil {
			return nil
		}
		return v.EnableTwoPass
	}).(pulumi.BoolPtrOutput)
}

// The entropy coder to use. The default is `"cabac"`. Supported entropy coders: - 'cavlc' - 'cabac'
func (o VideoStreamPtrOutput) EntropyCoder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.EntropyCoder
	}).(pulumi.StringPtrOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o VideoStreamPtrOutput) FrameRate() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VideoStream) *float64 {
		if v == nil {
			return nil
		}
		return &v.FrameRate
	}).(pulumi.Float64PtrOutput)
}

// Select the GOP size based on the specified duration. The default is `"3s"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o VideoStreamPtrOutput) GopDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.GopDuration
	}).(pulumi.StringPtrOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o VideoStreamPtrOutput) GopFrameCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return v.GopFrameCount
	}).(pulumi.IntPtrOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
func (o VideoStreamPtrOutput) HeightPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return v.HeightPixels
	}).(pulumi.IntPtrOutput)
}

// Pixel format to use. The default is `"yuv420p"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.
func (o VideoStreamPtrOutput) PixelFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.PixelFormat
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamPtrOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.Preset
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// Specify the `rate_control_mode`. The default is `"vbr"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor
func (o VideoStreamPtrOutput) RateControlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.RateControlMode
	}).(pulumi.StringPtrOutput)
}

// Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamPtrOutput) Tune() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VideoStream) *string {
		if v == nil {
			return nil
		}
		return v.Tune
	}).(pulumi.StringPtrOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
func (o VideoStreamPtrOutput) VbvFullnessBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return v.VbvFullnessBits
	}).(pulumi.IntPtrOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
func (o VideoStreamPtrOutput) VbvSizeBits() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return v.VbvSizeBits
	}).(pulumi.IntPtrOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
func (o VideoStreamPtrOutput) WidthPixels() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VideoStream) *int {
		if v == nil {
			return nil
		}
		return v.WidthPixels
	}).(pulumi.IntPtrOutput)
}

// Video stream resource.
type VideoStreamResponse struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop bool `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength float64 `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
	BFrameCount int `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid bool `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.
	BitrateBps int `pulumi:"bitrateBps"`
	// Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`
	Codec string `pulumi:"codec"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel int `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
	EnableTwoPass bool `pulumi:"enableTwoPass"`
	// The entropy coder to use. The default is `"cabac"`. Supported entropy coders: - 'cavlc' - 'cabac'
	EntropyCoder string `pulumi:"entropyCoder"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate float64 `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `"3s"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration string `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount int `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
	HeightPixels int `pulumi:"heightPixels"`
	// Pixel format to use. The default is `"yuv420p"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.
	PixelFormat string `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Preset string `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Profile string `pulumi:"profile"`
	// Specify the `rate_control_mode`. The default is `"vbr"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor
	RateControlMode string `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Tune string `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
	VbvFullnessBits int `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
	VbvSizeBits int `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
	WidthPixels int `pulumi:"widthPixels"`
}

// VideoStreamResponseInput is an input type that accepts VideoStreamResponseArgs and VideoStreamResponseOutput values.
// You can construct a concrete instance of `VideoStreamResponseInput` via:
//
//          VideoStreamResponseArgs{...}
type VideoStreamResponseInput interface {
	pulumi.Input

	ToVideoStreamResponseOutput() VideoStreamResponseOutput
	ToVideoStreamResponseOutputWithContext(context.Context) VideoStreamResponseOutput
}

// Video stream resource.
type VideoStreamResponseArgs struct {
	// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
	AllowOpenGop pulumi.BoolInput `pulumi:"allowOpenGop"`
	// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
	AqStrength pulumi.Float64Input `pulumi:"aqStrength"`
	// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
	BFrameCount pulumi.IntInput `pulumi:"bFrameCount"`
	// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
	BPyramid pulumi.BoolInput `pulumi:"bPyramid"`
	// The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.
	BitrateBps pulumi.IntInput `pulumi:"bitrateBps"`
	// Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`
	Codec pulumi.StringInput `pulumi:"codec"`
	// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
	CrfLevel pulumi.IntInput `pulumi:"crfLevel"`
	// Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
	EnableTwoPass pulumi.BoolInput `pulumi:"enableTwoPass"`
	// The entropy coder to use. The default is `"cabac"`. Supported entropy coders: - 'cavlc' - 'cabac'
	EntropyCoder pulumi.StringInput `pulumi:"entropyCoder"`
	// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
	FrameRate pulumi.Float64Input `pulumi:"frameRate"`
	// Select the GOP size based on the specified duration. The default is `"3s"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
	GopDuration pulumi.StringInput `pulumi:"gopDuration"`
	// Select the GOP size based on the specified frame count. Must be greater than zero.
	GopFrameCount pulumi.IntInput `pulumi:"gopFrameCount"`
	// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
	HeightPixels pulumi.IntInput `pulumi:"heightPixels"`
	// Pixel format to use. The default is `"yuv420p"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.
	PixelFormat pulumi.StringInput `pulumi:"pixelFormat"`
	// Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Preset pulumi.StringInput `pulumi:"preset"`
	// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Profile pulumi.StringInput `pulumi:"profile"`
	// Specify the `rate_control_mode`. The default is `"vbr"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor
	RateControlMode pulumi.StringInput `pulumi:"rateControlMode"`
	// Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
	Tune pulumi.StringInput `pulumi:"tune"`
	// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
	VbvFullnessBits pulumi.IntInput `pulumi:"vbvFullnessBits"`
	// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
	VbvSizeBits pulumi.IntInput `pulumi:"vbvSizeBits"`
	// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
	WidthPixels pulumi.IntInput `pulumi:"widthPixels"`
}

func (VideoStreamResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStreamResponse)(nil)).Elem()
}

func (i VideoStreamResponseArgs) ToVideoStreamResponseOutput() VideoStreamResponseOutput {
	return i.ToVideoStreamResponseOutputWithContext(context.Background())
}

func (i VideoStreamResponseArgs) ToVideoStreamResponseOutputWithContext(ctx context.Context) VideoStreamResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VideoStreamResponseOutput)
}

// Video stream resource.
type VideoStreamResponseOutput struct{ *pulumi.OutputState }

func (VideoStreamResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VideoStreamResponse)(nil)).Elem()
}

func (o VideoStreamResponseOutput) ToVideoStreamResponseOutput() VideoStreamResponseOutput {
	return o
}

func (o VideoStreamResponseOutput) ToVideoStreamResponseOutputWithContext(ctx context.Context) VideoStreamResponseOutput {
	return o
}

// Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
func (o VideoStreamResponseOutput) AllowOpenGop() pulumi.BoolOutput {
	return o.ApplyT(func(v VideoStreamResponse) bool { return v.AllowOpenGop }).(pulumi.BoolOutput)
}

// Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
func (o VideoStreamResponseOutput) AqStrength() pulumi.Float64Output {
	return o.ApplyT(func(v VideoStreamResponse) float64 { return v.AqStrength }).(pulumi.Float64Output)
}

// The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
func (o VideoStreamResponseOutput) BFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.BFrameCount }).(pulumi.IntOutput)
}

// Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
func (o VideoStreamResponseOutput) BPyramid() pulumi.BoolOutput {
	return o.ApplyT(func(v VideoStreamResponse) bool { return v.BPyramid }).(pulumi.BoolOutput)
}

// The video bitrate in bits per second. The minimum value is 1,000. The maximum value for H264/H265 is 800,000,000. The maximum value for VP9 is 480,000,000.
func (o VideoStreamResponseOutput) BitrateBps() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.BitrateBps }).(pulumi.IntOutput)
}

// Codec type. The following codecs are supported: * `h264` (default) * `h265` * `vp9`
func (o VideoStreamResponseOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.Codec }).(pulumi.StringOutput)
}

// Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
func (o VideoStreamResponseOutput) CrfLevel() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.CrfLevel }).(pulumi.IntOutput)
}

// Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `"vbr"`. The default is `false`.
func (o VideoStreamResponseOutput) EnableTwoPass() pulumi.BoolOutput {
	return o.ApplyT(func(v VideoStreamResponse) bool { return v.EnableTwoPass }).(pulumi.BoolOutput)
}

// The entropy coder to use. The default is `"cabac"`. Supported entropy coders: - 'cavlc' - 'cabac'
func (o VideoStreamResponseOutput) EntropyCoder() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.EntropyCoder }).(pulumi.StringOutput)
}

// The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculate frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
func (o VideoStreamResponseOutput) FrameRate() pulumi.Float64Output {
	return o.ApplyT(func(v VideoStreamResponse) float64 { return v.FrameRate }).(pulumi.Float64Output)
}

// Select the GOP size based on the specified duration. The default is `"3s"`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
func (o VideoStreamResponseOutput) GopDuration() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.GopDuration }).(pulumi.StringOutput)
}

// Select the GOP size based on the specified frame count. Must be greater than zero.
func (o VideoStreamResponseOutput) GopFrameCount() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.GopFrameCount }).(pulumi.IntOutput)
}

// The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used.
func (o VideoStreamResponseOutput) HeightPixels() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.HeightPixels }).(pulumi.IntOutput)
}

// Pixel format to use. The default is `"yuv420p"`. Supported pixel formats: - 'yuv420p' pixel format. - 'yuv422p' pixel format. - 'yuv444p' pixel format. - 'yuv420p10' 10-bit HDR pixel format. - 'yuv422p10' 10-bit HDR pixel format. - 'yuv444p10' 10-bit HDR pixel format. - 'yuv420p12' 12-bit HDR pixel format. - 'yuv422p12' 12-bit HDR pixel format. - 'yuv444p12' 12-bit HDR pixel format.
func (o VideoStreamResponseOutput) PixelFormat() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.PixelFormat }).(pulumi.StringOutput)
}

// Enforces the specified codec preset. The default is `veryfast`. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamResponseOutput) Preset() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.Preset }).(pulumi.StringOutput)
}

// Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamResponseOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.Profile }).(pulumi.StringOutput)
}

// Specify the `rate_control_mode`. The default is `"vbr"`. Supported rate control modes: - 'vbr' - variable bitrate - 'crf' - constant rate factor
func (o VideoStreamResponseOutput) RateControlMode() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.RateControlMode }).(pulumi.StringOutput)
}

// Enforces the specified codec tune. The available options are FFmpeg-compatible. Note that certain values for this field may cause the transcoder to override other fields you set in the `VideoStream` message.
func (o VideoStreamResponseOutput) Tune() pulumi.StringOutput {
	return o.ApplyT(func(v VideoStreamResponse) string { return v.Tune }).(pulumi.StringOutput)
}

// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
func (o VideoStreamResponseOutput) VbvFullnessBits() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.VbvFullnessBits }).(pulumi.IntOutput)
}

// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
func (o VideoStreamResponseOutput) VbvSizeBits() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.VbvSizeBits }).(pulumi.IntOutput)
}

// The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used.
func (o VideoStreamResponseOutput) WidthPixels() pulumi.IntOutput {
	return o.ApplyT(func(v VideoStreamResponse) int { return v.WidthPixels }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(AdBreakOutput{})
	pulumi.RegisterOutputType(AdBreakArrayOutput{})
	pulumi.RegisterOutputType(AdBreakResponseOutput{})
	pulumi.RegisterOutputType(AdBreakResponseArrayOutput{})
	pulumi.RegisterOutputType(Aes128EncryptionOutput{})
	pulumi.RegisterOutputType(Aes128EncryptionPtrOutput{})
	pulumi.RegisterOutputType(Aes128EncryptionResponseOutput{})
	pulumi.RegisterOutputType(AnimationOutput{})
	pulumi.RegisterOutputType(AnimationArrayOutput{})
	pulumi.RegisterOutputType(AnimationEndOutput{})
	pulumi.RegisterOutputType(AnimationEndPtrOutput{})
	pulumi.RegisterOutputType(AnimationEndResponseOutput{})
	pulumi.RegisterOutputType(AnimationFadeOutput{})
	pulumi.RegisterOutputType(AnimationFadePtrOutput{})
	pulumi.RegisterOutputType(AnimationFadeResponseOutput{})
	pulumi.RegisterOutputType(AnimationResponseOutput{})
	pulumi.RegisterOutputType(AnimationResponseArrayOutput{})
	pulumi.RegisterOutputType(AnimationStaticOutput{})
	pulumi.RegisterOutputType(AnimationStaticPtrOutput{})
	pulumi.RegisterOutputType(AnimationStaticResponseOutput{})
	pulumi.RegisterOutputType(AudioOutput{})
	pulumi.RegisterOutputType(AudioPtrOutput{})
	pulumi.RegisterOutputType(AudioAtomOutput{})
	pulumi.RegisterOutputType(AudioAtomArrayOutput{})
	pulumi.RegisterOutputType(AudioAtomResponseOutput{})
	pulumi.RegisterOutputType(AudioAtomResponseArrayOutput{})
	pulumi.RegisterOutputType(AudioChannelOutput{})
	pulumi.RegisterOutputType(AudioChannelArrayOutput{})
	pulumi.RegisterOutputType(AudioChannelInputTypeOutput{})
	pulumi.RegisterOutputType(AudioChannelInputTypeArrayOutput{})
	pulumi.RegisterOutputType(AudioChannelInputResponseOutput{})
	pulumi.RegisterOutputType(AudioChannelInputResponseArrayOutput{})
	pulumi.RegisterOutputType(AudioChannelResponseOutput{})
	pulumi.RegisterOutputType(AudioChannelResponseArrayOutput{})
	pulumi.RegisterOutputType(AudioResponseOutput{})
	pulumi.RegisterOutputType(AudioStreamOutput{})
	pulumi.RegisterOutputType(AudioStreamPtrOutput{})
	pulumi.RegisterOutputType(AudioStreamResponseOutput{})
	pulumi.RegisterOutputType(ColorOutput{})
	pulumi.RegisterOutputType(ColorPtrOutput{})
	pulumi.RegisterOutputType(ColorResponseOutput{})
	pulumi.RegisterOutputType(CropOutput{})
	pulumi.RegisterOutputType(CropPtrOutput{})
	pulumi.RegisterOutputType(CropResponseOutput{})
	pulumi.RegisterOutputType(DeblockOutput{})
	pulumi.RegisterOutputType(DeblockPtrOutput{})
	pulumi.RegisterOutputType(DeblockResponseOutput{})
	pulumi.RegisterOutputType(DenoiseOutput{})
	pulumi.RegisterOutputType(DenoisePtrOutput{})
	pulumi.RegisterOutputType(DenoiseResponseOutput{})
	pulumi.RegisterOutputType(EditAtomOutput{})
	pulumi.RegisterOutputType(EditAtomArrayOutput{})
	pulumi.RegisterOutputType(EditAtomResponseOutput{})
	pulumi.RegisterOutputType(EditAtomResponseArrayOutput{})
	pulumi.RegisterOutputType(ElementaryStreamOutput{})
	pulumi.RegisterOutputType(ElementaryStreamArrayOutput{})
	pulumi.RegisterOutputType(ElementaryStreamResponseOutput{})
	pulumi.RegisterOutputType(ElementaryStreamResponseArrayOutput{})
	pulumi.RegisterOutputType(EncryptionOutput{})
	pulumi.RegisterOutputType(EncryptionPtrOutput{})
	pulumi.RegisterOutputType(EncryptionResponseOutput{})
	pulumi.RegisterOutputType(FailureDetailResponseOutput{})
	pulumi.RegisterOutputType(FailureDetailResponseArrayOutput{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImagePtrOutput{})
	pulumi.RegisterOutputType(ImageResponseOutput{})
	pulumi.RegisterOutputType(InputOutput{})
	pulumi.RegisterOutputType(InputArrayOutput{})
	pulumi.RegisterOutputType(InputResponseOutput{})
	pulumi.RegisterOutputType(InputResponseArrayOutput{})
	pulumi.RegisterOutputType(JobConfigOutput{})
	pulumi.RegisterOutputType(JobConfigPtrOutput{})
	pulumi.RegisterOutputType(JobConfigResponseOutput{})
	pulumi.RegisterOutputType(JobConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ManifestOutput{})
	pulumi.RegisterOutputType(ManifestArrayOutput{})
	pulumi.RegisterOutputType(ManifestResponseOutput{})
	pulumi.RegisterOutputType(ManifestResponseArrayOutput{})
	pulumi.RegisterOutputType(MpegCommonEncryptionOutput{})
	pulumi.RegisterOutputType(MpegCommonEncryptionPtrOutput{})
	pulumi.RegisterOutputType(MpegCommonEncryptionResponseOutput{})
	pulumi.RegisterOutputType(MuxStreamOutput{})
	pulumi.RegisterOutputType(MuxStreamArrayOutput{})
	pulumi.RegisterOutputType(MuxStreamResponseOutput{})
	pulumi.RegisterOutputType(MuxStreamResponseArrayOutput{})
	pulumi.RegisterOutputType(NormalizedCoordinateOutput{})
	pulumi.RegisterOutputType(NormalizedCoordinatePtrOutput{})
	pulumi.RegisterOutputType(NormalizedCoordinateResponseOutput{})
	pulumi.RegisterOutputType(OriginUriResponseOutput{})
	pulumi.RegisterOutputType(OriginUriResponsePtrOutput{})
	pulumi.RegisterOutputType(OutputOutput{})
	pulumi.RegisterOutputType(OutputPtrOutput{})
	pulumi.RegisterOutputType(OutputResponseOutput{})
	pulumi.RegisterOutputType(OutputResponsePtrOutput{})
	pulumi.RegisterOutputType(OverlayOutput{})
	pulumi.RegisterOutputType(OverlayArrayOutput{})
	pulumi.RegisterOutputType(OverlayResponseOutput{})
	pulumi.RegisterOutputType(OverlayResponseArrayOutput{})
	pulumi.RegisterOutputType(PadOutput{})
	pulumi.RegisterOutputType(PadPtrOutput{})
	pulumi.RegisterOutputType(PadResponseOutput{})
	pulumi.RegisterOutputType(PreprocessingConfigOutput{})
	pulumi.RegisterOutputType(PreprocessingConfigPtrOutput{})
	pulumi.RegisterOutputType(PreprocessingConfigResponseOutput{})
	pulumi.RegisterOutputType(ProgressResponseOutput{})
	pulumi.RegisterOutputType(ProgressResponsePtrOutput{})
	pulumi.RegisterOutputType(PubsubDestinationOutput{})
	pulumi.RegisterOutputType(PubsubDestinationPtrOutput{})
	pulumi.RegisterOutputType(PubsubDestinationResponseOutput{})
	pulumi.RegisterOutputType(PubsubDestinationResponsePtrOutput{})
	pulumi.RegisterOutputType(SampleAesEncryptionOutput{})
	pulumi.RegisterOutputType(SampleAesEncryptionPtrOutput{})
	pulumi.RegisterOutputType(SampleAesEncryptionResponseOutput{})
	pulumi.RegisterOutputType(SegmentSettingsOutput{})
	pulumi.RegisterOutputType(SegmentSettingsPtrOutput{})
	pulumi.RegisterOutputType(SegmentSettingsResponseOutput{})
	pulumi.RegisterOutputType(SpriteSheetOutput{})
	pulumi.RegisterOutputType(SpriteSheetArrayOutput{})
	pulumi.RegisterOutputType(SpriteSheetResponseOutput{})
	pulumi.RegisterOutputType(SpriteSheetResponseArrayOutput{})
	pulumi.RegisterOutputType(TextAtomOutput{})
	pulumi.RegisterOutputType(TextAtomArrayOutput{})
	pulumi.RegisterOutputType(TextAtomResponseOutput{})
	pulumi.RegisterOutputType(TextAtomResponseArrayOutput{})
	pulumi.RegisterOutputType(TextInputOutput{})
	pulumi.RegisterOutputType(TextInputArrayOutput{})
	pulumi.RegisterOutputType(TextInputResponseOutput{})
	pulumi.RegisterOutputType(TextInputResponseArrayOutput{})
	pulumi.RegisterOutputType(TextStreamOutput{})
	pulumi.RegisterOutputType(TextStreamPtrOutput{})
	pulumi.RegisterOutputType(TextStreamResponseOutput{})
	pulumi.RegisterOutputType(VideoStreamOutput{})
	pulumi.RegisterOutputType(VideoStreamPtrOutput{})
	pulumi.RegisterOutputType(VideoStreamResponseOutput{})
}
