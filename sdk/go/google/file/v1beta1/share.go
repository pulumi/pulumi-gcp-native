// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a share.
// Auto-naming is currently not supported for this resource.
type Share struct {
	pulumi.CustomResourceState

	// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
	CapacityGb pulumi.StringOutput `pulumi:"capacityGb"`
	// The time when the share was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description pulumi.StringOutput `pulumi:"description"`
	InstanceId  pulumi.StringOutput `pulumi:"instanceId"`
	// Resource labels to represent user provided metadata.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
	MountName pulumi.StringOutput `pulumi:"mountName"`
	// The resource name of the share, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions NfsExportOptionsResponseArrayOutput `pulumi:"nfsExportOptions"`
	Project          pulumi.StringOutput                 `pulumi:"project"`
	// Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
	ShareId pulumi.StringOutput `pulumi:"shareId"`
	// The share state.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewShare registers a new resource with the given unique name, arguments, and options.
func NewShare(ctx *pulumi.Context,
	name string, args *ShareArgs, opts ...pulumi.ResourceOption) (*Share, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	var resource Share
	err := ctx.RegisterResource("google-native:file/v1beta1:Share", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShare gets an existing Share resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareState, opts ...pulumi.ResourceOption) (*Share, error) {
	var resource Share
	err := ctx.ReadResource("google-native:file/v1beta1:Share", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Share resources.
type shareState struct {
}

type ShareState struct {
}

func (ShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareState)(nil)).Elem()
}

type shareArgs struct {
	// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
	CapacityGb *string `pulumi:"capacityGb"`
	// A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description *string `pulumi:"description"`
	InstanceId  string  `pulumi:"instanceId"`
	// Resource labels to represent user provided metadata.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
	MountName *string `pulumi:"mountName"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions []NfsExportOptions `pulumi:"nfsExportOptions"`
	Project          *string            `pulumi:"project"`
	// Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
	ShareId string `pulumi:"shareId"`
}

// The set of arguments for constructing a Share resource.
type ShareArgs struct {
	// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
	CapacityGb pulumi.StringPtrInput
	// A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
	Description pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	// Resource labels to represent user provided metadata.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
	MountName pulumi.StringPtrInput
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions NfsExportOptionsArrayInput
	Project          pulumi.StringPtrInput
	// Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
	ShareId pulumi.StringInput
}

func (ShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareArgs)(nil)).Elem()
}

type ShareInput interface {
	pulumi.Input

	ToShareOutput() ShareOutput
	ToShareOutputWithContext(ctx context.Context) ShareOutput
}

func (*Share) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil)).Elem()
}

func (i *Share) ToShareOutput() ShareOutput {
	return i.ToShareOutputWithContext(context.Background())
}

func (i *Share) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareOutput)
}

type ShareOutput struct{ *pulumi.OutputState }

func (ShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Share)(nil)).Elem()
}

func (o ShareOutput) ToShareOutput() ShareOutput {
	return o
}

func (o ShareOutput) ToShareOutputWithContext(ctx context.Context) ShareOutput {
	return o
}

// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes. Must be greater than 0.
func (o ShareOutput) CapacityGb() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.CapacityGb }).(pulumi.StringOutput)
}

// The time when the share was created.
func (o ShareOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the share with 2048 characters or less. Requests with longer descriptions will be rejected.
func (o ShareOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ShareOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Resource labels to represent user provided metadata.
func (o ShareOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Share) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ShareOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The mount name of the share. Must be 63 characters or less and consist of uppercase or lowercase letters, numbers, and underscores.
func (o ShareOutput) MountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.MountName }).(pulumi.StringOutput)
}

// The resource name of the share, in the format `projects/{project_id}/locations/{location_id}/instances/{instance_id}/shares/{share_id}`.
func (o ShareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Nfs Export Options. There is a limit of 10 export options per file share.
func (o ShareOutput) NfsExportOptions() NfsExportOptionsResponseArrayOutput {
	return o.ApplyT(func(v *Share) NfsExportOptionsResponseArrayOutput { return v.NfsExportOptions }).(NfsExportOptionsResponseArrayOutput)
}

func (o ShareOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. The ID to use for the share. The ID must be unique within the specified instance. This value must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
func (o ShareOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

// The share state.
func (o ShareOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Share) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShareInput)(nil)).Elem(), &Share{})
	pulumi.RegisterOutputType(ShareOutput{})
}
