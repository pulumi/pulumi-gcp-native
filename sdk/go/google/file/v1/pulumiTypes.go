// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// File share configuration for the instance.
type FileShareConfig struct {
	// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes.
	CapacityGb *string `pulumi:"capacityGb"`
	// The name of the file share (must be 16 characters or less).
	Name *string `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions []NfsExportOptions `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format projects/{project_number}/locations/{location_id}/backups/{backup_id}, that this file share has been restored from.
	SourceBackup *string `pulumi:"sourceBackup"`
}

// FileShareConfigInput is an input type that accepts FileShareConfigArgs and FileShareConfigOutput values.
// You can construct a concrete instance of `FileShareConfigInput` via:
//
//          FileShareConfigArgs{...}
type FileShareConfigInput interface {
	pulumi.Input

	ToFileShareConfigOutput() FileShareConfigOutput
	ToFileShareConfigOutputWithContext(context.Context) FileShareConfigOutput
}

// File share configuration for the instance.
type FileShareConfigArgs struct {
	// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes.
	CapacityGb pulumi.StringPtrInput `pulumi:"capacityGb"`
	// The name of the file share (must be 16 characters or less).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions NfsExportOptionsArrayInput `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format projects/{project_number}/locations/{location_id}/backups/{backup_id}, that this file share has been restored from.
	SourceBackup pulumi.StringPtrInput `pulumi:"sourceBackup"`
}

func (FileShareConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareConfig)(nil)).Elem()
}

func (i FileShareConfigArgs) ToFileShareConfigOutput() FileShareConfigOutput {
	return i.ToFileShareConfigOutputWithContext(context.Background())
}

func (i FileShareConfigArgs) ToFileShareConfigOutputWithContext(ctx context.Context) FileShareConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareConfigOutput)
}

// FileShareConfigArrayInput is an input type that accepts FileShareConfigArray and FileShareConfigArrayOutput values.
// You can construct a concrete instance of `FileShareConfigArrayInput` via:
//
//          FileShareConfigArray{ FileShareConfigArgs{...} }
type FileShareConfigArrayInput interface {
	pulumi.Input

	ToFileShareConfigArrayOutput() FileShareConfigArrayOutput
	ToFileShareConfigArrayOutputWithContext(context.Context) FileShareConfigArrayOutput
}

type FileShareConfigArray []FileShareConfigInput

func (FileShareConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileShareConfig)(nil)).Elem()
}

func (i FileShareConfigArray) ToFileShareConfigArrayOutput() FileShareConfigArrayOutput {
	return i.ToFileShareConfigArrayOutputWithContext(context.Background())
}

func (i FileShareConfigArray) ToFileShareConfigArrayOutputWithContext(ctx context.Context) FileShareConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareConfigArrayOutput)
}

// File share configuration for the instance.
type FileShareConfigOutput struct{ *pulumi.OutputState }

func (FileShareConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareConfig)(nil)).Elem()
}

func (o FileShareConfigOutput) ToFileShareConfigOutput() FileShareConfigOutput {
	return o
}

func (o FileShareConfigOutput) ToFileShareConfigOutputWithContext(ctx context.Context) FileShareConfigOutput {
	return o
}

// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes.
func (o FileShareConfigOutput) CapacityGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareConfig) *string { return v.CapacityGb }).(pulumi.StringPtrOutput)
}

// The name of the file share (must be 16 characters or less).
func (o FileShareConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Nfs Export Options. There is a limit of 10 export options per file share.
func (o FileShareConfigOutput) NfsExportOptions() NfsExportOptionsArrayOutput {
	return o.ApplyT(func(v FileShareConfig) []NfsExportOptions { return v.NfsExportOptions }).(NfsExportOptionsArrayOutput)
}

// The resource name of the backup, in the format projects/{project_number}/locations/{location_id}/backups/{backup_id}, that this file share has been restored from.
func (o FileShareConfigOutput) SourceBackup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileShareConfig) *string { return v.SourceBackup }).(pulumi.StringPtrOutput)
}

type FileShareConfigArrayOutput struct{ *pulumi.OutputState }

func (FileShareConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileShareConfig)(nil)).Elem()
}

func (o FileShareConfigArrayOutput) ToFileShareConfigArrayOutput() FileShareConfigArrayOutput {
	return o
}

func (o FileShareConfigArrayOutput) ToFileShareConfigArrayOutputWithContext(ctx context.Context) FileShareConfigArrayOutput {
	return o
}

func (o FileShareConfigArrayOutput) Index(i pulumi.IntInput) FileShareConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileShareConfig {
		return vs[0].([]FileShareConfig)[vs[1].(int)]
	}).(FileShareConfigOutput)
}

// File share configuration for the instance.
type FileShareConfigResponse struct {
	// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes.
	CapacityGb string `pulumi:"capacityGb"`
	// The name of the file share (must be 16 characters or less).
	Name string `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions []NfsExportOptionsResponse `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format projects/{project_number}/locations/{location_id}/backups/{backup_id}, that this file share has been restored from.
	SourceBackup string `pulumi:"sourceBackup"`
}

// FileShareConfigResponseInput is an input type that accepts FileShareConfigResponseArgs and FileShareConfigResponseOutput values.
// You can construct a concrete instance of `FileShareConfigResponseInput` via:
//
//          FileShareConfigResponseArgs{...}
type FileShareConfigResponseInput interface {
	pulumi.Input

	ToFileShareConfigResponseOutput() FileShareConfigResponseOutput
	ToFileShareConfigResponseOutputWithContext(context.Context) FileShareConfigResponseOutput
}

// File share configuration for the instance.
type FileShareConfigResponseArgs struct {
	// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes.
	CapacityGb pulumi.StringInput `pulumi:"capacityGb"`
	// The name of the file share (must be 16 characters or less).
	Name pulumi.StringInput `pulumi:"name"`
	// Nfs Export Options. There is a limit of 10 export options per file share.
	NfsExportOptions NfsExportOptionsResponseArrayInput `pulumi:"nfsExportOptions"`
	// The resource name of the backup, in the format projects/{project_number}/locations/{location_id}/backups/{backup_id}, that this file share has been restored from.
	SourceBackup pulumi.StringInput `pulumi:"sourceBackup"`
}

func (FileShareConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareConfigResponse)(nil)).Elem()
}

func (i FileShareConfigResponseArgs) ToFileShareConfigResponseOutput() FileShareConfigResponseOutput {
	return i.ToFileShareConfigResponseOutputWithContext(context.Background())
}

func (i FileShareConfigResponseArgs) ToFileShareConfigResponseOutputWithContext(ctx context.Context) FileShareConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareConfigResponseOutput)
}

// FileShareConfigResponseArrayInput is an input type that accepts FileShareConfigResponseArray and FileShareConfigResponseArrayOutput values.
// You can construct a concrete instance of `FileShareConfigResponseArrayInput` via:
//
//          FileShareConfigResponseArray{ FileShareConfigResponseArgs{...} }
type FileShareConfigResponseArrayInput interface {
	pulumi.Input

	ToFileShareConfigResponseArrayOutput() FileShareConfigResponseArrayOutput
	ToFileShareConfigResponseArrayOutputWithContext(context.Context) FileShareConfigResponseArrayOutput
}

type FileShareConfigResponseArray []FileShareConfigResponseInput

func (FileShareConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileShareConfigResponse)(nil)).Elem()
}

func (i FileShareConfigResponseArray) ToFileShareConfigResponseArrayOutput() FileShareConfigResponseArrayOutput {
	return i.ToFileShareConfigResponseArrayOutputWithContext(context.Background())
}

func (i FileShareConfigResponseArray) ToFileShareConfigResponseArrayOutputWithContext(ctx context.Context) FileShareConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileShareConfigResponseArrayOutput)
}

// File share configuration for the instance.
type FileShareConfigResponseOutput struct{ *pulumi.OutputState }

func (FileShareConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileShareConfigResponse)(nil)).Elem()
}

func (o FileShareConfigResponseOutput) ToFileShareConfigResponseOutput() FileShareConfigResponseOutput {
	return o
}

func (o FileShareConfigResponseOutput) ToFileShareConfigResponseOutputWithContext(ctx context.Context) FileShareConfigResponseOutput {
	return o
}

// File share capacity in gigabytes (GB). Cloud Filestore defines 1 GB as 1024^3 bytes.
func (o FileShareConfigResponseOutput) CapacityGb() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareConfigResponse) string { return v.CapacityGb }).(pulumi.StringOutput)
}

// The name of the file share (must be 16 characters or less).
func (o FileShareConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Nfs Export Options. There is a limit of 10 export options per file share.
func (o FileShareConfigResponseOutput) NfsExportOptions() NfsExportOptionsResponseArrayOutput {
	return o.ApplyT(func(v FileShareConfigResponse) []NfsExportOptionsResponse { return v.NfsExportOptions }).(NfsExportOptionsResponseArrayOutput)
}

// The resource name of the backup, in the format projects/{project_number}/locations/{location_id}/backups/{backup_id}, that this file share has been restored from.
func (o FileShareConfigResponseOutput) SourceBackup() pulumi.StringOutput {
	return o.ApplyT(func(v FileShareConfigResponse) string { return v.SourceBackup }).(pulumi.StringOutput)
}

type FileShareConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (FileShareConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileShareConfigResponse)(nil)).Elem()
}

func (o FileShareConfigResponseArrayOutput) ToFileShareConfigResponseArrayOutput() FileShareConfigResponseArrayOutput {
	return o
}

func (o FileShareConfigResponseArrayOutput) ToFileShareConfigResponseArrayOutputWithContext(ctx context.Context) FileShareConfigResponseArrayOutput {
	return o
}

func (o FileShareConfigResponseArrayOutput) Index(i pulumi.IntInput) FileShareConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileShareConfigResponse {
		return vs[0].([]FileShareConfigResponse)[vs[1].(int)]
	}).(FileShareConfigResponseOutput)
}

// Network configuration for the instance.
type NetworkConfig struct {
	// Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
	Modes []string `pulumi:"modes"`
	// The name of the Google Compute Engine [VPC network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected.
	Network *string `pulumi:"network"`
	// A /29 CIDR block in one of the [internal IP address ranges](https://www.arin.net/knowledge/address_filters.html) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29 or 192.168.0.0/29. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Cloud Filestore instances in the selected VPC network.
	ReservedIpRange *string `pulumi:"reservedIpRange"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//          NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Network configuration for the instance.
type NetworkConfigArgs struct {
	// Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The name of the Google Compute Engine [VPC network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// A /29 CIDR block in one of the [internal IP address ranges](https://www.arin.net/knowledge/address_filters.html) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29 or 192.168.0.0/29. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Cloud Filestore instances in the selected VPC network.
	ReservedIpRange pulumi.StringPtrInput `pulumi:"reservedIpRange"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

// NetworkConfigArrayInput is an input type that accepts NetworkConfigArray and NetworkConfigArrayOutput values.
// You can construct a concrete instance of `NetworkConfigArrayInput` via:
//
//          NetworkConfigArray{ NetworkConfigArgs{...} }
type NetworkConfigArrayInput interface {
	pulumi.Input

	ToNetworkConfigArrayOutput() NetworkConfigArrayOutput
	ToNetworkConfigArrayOutputWithContext(context.Context) NetworkConfigArrayOutput
}

type NetworkConfigArray []NetworkConfigInput

func (NetworkConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArray) ToNetworkConfigArrayOutput() NetworkConfigArrayOutput {
	return i.ToNetworkConfigArrayOutputWithContext(context.Background())
}

func (i NetworkConfigArray) ToNetworkConfigArrayOutputWithContext(ctx context.Context) NetworkConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigArrayOutput)
}

// Network configuration for the instance.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

// Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
func (o NetworkConfigOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkConfig) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The name of the Google Compute Engine [VPC network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected.
func (o NetworkConfigOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// A /29 CIDR block in one of the [internal IP address ranges](https://www.arin.net/knowledge/address_filters.html) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29 or 192.168.0.0/29. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Cloud Filestore instances in the selected VPC network.
func (o NetworkConfigOutput) ReservedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.ReservedIpRange }).(pulumi.StringPtrOutput)
}

type NetworkConfigArrayOutput struct{ *pulumi.OutputState }

func (NetworkConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigArrayOutput) ToNetworkConfigArrayOutput() NetworkConfigArrayOutput {
	return o
}

func (o NetworkConfigArrayOutput) ToNetworkConfigArrayOutputWithContext(ctx context.Context) NetworkConfigArrayOutput {
	return o
}

func (o NetworkConfigArrayOutput) Index(i pulumi.IntInput) NetworkConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkConfig {
		return vs[0].([]NetworkConfig)[vs[1].(int)]
	}).(NetworkConfigOutput)
}

// Network configuration for the instance.
type NetworkConfigResponse struct {
	// IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or IPv6 addresses in the format {block 1}:{block 2}:{block 3}:{block 4}:{block 5}:{block 6}:{block 7}:{block 8}.
	IpAddresses []string `pulumi:"ipAddresses"`
	// Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
	Modes []string `pulumi:"modes"`
	// The name of the Google Compute Engine [VPC network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected.
	Network string `pulumi:"network"`
	// A /29 CIDR block in one of the [internal IP address ranges](https://www.arin.net/knowledge/address_filters.html) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29 or 192.168.0.0/29. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Cloud Filestore instances in the selected VPC network.
	ReservedIpRange string `pulumi:"reservedIpRange"`
}

// NetworkConfigResponseInput is an input type that accepts NetworkConfigResponseArgs and NetworkConfigResponseOutput values.
// You can construct a concrete instance of `NetworkConfigResponseInput` via:
//
//          NetworkConfigResponseArgs{...}
type NetworkConfigResponseInput interface {
	pulumi.Input

	ToNetworkConfigResponseOutput() NetworkConfigResponseOutput
	ToNetworkConfigResponseOutputWithContext(context.Context) NetworkConfigResponseOutput
}

// Network configuration for the instance.
type NetworkConfigResponseArgs struct {
	// IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or IPv6 addresses in the format {block 1}:{block 2}:{block 3}:{block 4}:{block 5}:{block 6}:{block 7}:{block 8}.
	IpAddresses pulumi.StringArrayInput `pulumi:"ipAddresses"`
	// Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
	Modes pulumi.StringArrayInput `pulumi:"modes"`
	// The name of the Google Compute Engine [VPC network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected.
	Network pulumi.StringInput `pulumi:"network"`
	// A /29 CIDR block in one of the [internal IP address ranges](https://www.arin.net/knowledge/address_filters.html) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29 or 192.168.0.0/29. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Cloud Filestore instances in the selected VPC network.
	ReservedIpRange pulumi.StringInput `pulumi:"reservedIpRange"`
}

func (NetworkConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return i.ToNetworkConfigResponseOutputWithContext(context.Background())
}

func (i NetworkConfigResponseArgs) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponseOutput)
}

// NetworkConfigResponseArrayInput is an input type that accepts NetworkConfigResponseArray and NetworkConfigResponseArrayOutput values.
// You can construct a concrete instance of `NetworkConfigResponseArrayInput` via:
//
//          NetworkConfigResponseArray{ NetworkConfigResponseArgs{...} }
type NetworkConfigResponseArrayInput interface {
	pulumi.Input

	ToNetworkConfigResponseArrayOutput() NetworkConfigResponseArrayOutput
	ToNetworkConfigResponseArrayOutputWithContext(context.Context) NetworkConfigResponseArrayOutput
}

type NetworkConfigResponseArray []NetworkConfigResponseInput

func (NetworkConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfigResponse)(nil)).Elem()
}

func (i NetworkConfigResponseArray) ToNetworkConfigResponseArrayOutput() NetworkConfigResponseArrayOutput {
	return i.ToNetworkConfigResponseArrayOutputWithContext(context.Background())
}

func (i NetworkConfigResponseArray) ToNetworkConfigResponseArrayOutputWithContext(ctx context.Context) NetworkConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigResponseArrayOutput)
}

// Network configuration for the instance.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or IPv6 addresses in the format {block 1}:{block 2}:{block 3}:{block 4}:{block 5}:{block 6}:{block 7}:{block 8}.
func (o NetworkConfigResponseOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkConfigResponse) []string { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.
func (o NetworkConfigResponseOutput) Modes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NetworkConfigResponse) []string { return v.Modes }).(pulumi.StringArrayOutput)
}

// The name of the Google Compute Engine [VPC network](/compute/docs/networks-and-firewalls#networks) to which the instance is connected.
func (o NetworkConfigResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.Network }).(pulumi.StringOutput)
}

// A /29 CIDR block in one of the [internal IP address ranges](https://www.arin.net/knowledge/address_filters.html) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29 or 192.168.0.0/29. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Cloud Filestore instances in the selected VPC network.
func (o NetworkConfigResponseOutput) ReservedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.ReservedIpRange }).(pulumi.StringOutput)
}

type NetworkConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseArrayOutput) ToNetworkConfigResponseArrayOutput() NetworkConfigResponseArrayOutput {
	return o
}

func (o NetworkConfigResponseArrayOutput) ToNetworkConfigResponseArrayOutputWithContext(ctx context.Context) NetworkConfigResponseArrayOutput {
	return o
}

func (o NetworkConfigResponseArrayOutput) Index(i pulumi.IntInput) NetworkConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkConfigResponse {
		return vs[0].([]NetworkConfigResponse)[vs[1].(int)]
	}).(NetworkConfigResponseOutput)
}

// NFS export options specifications.
type NfsExportOptions struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
	AccessMode *string `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonGid *string `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonUid *string `pulumi:"anonUid"`
	// List of either an IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or CIDR ranges in the format {octet 1}.{octet 2}.{octet 3}.{octet 4}/{mask size} which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges []string `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
	SquashMode *string `pulumi:"squashMode"`
}

// NfsExportOptionsInput is an input type that accepts NfsExportOptionsArgs and NfsExportOptionsOutput values.
// You can construct a concrete instance of `NfsExportOptionsInput` via:
//
//          NfsExportOptionsArgs{...}
type NfsExportOptionsInput interface {
	pulumi.Input

	ToNfsExportOptionsOutput() NfsExportOptionsOutput
	ToNfsExportOptionsOutputWithContext(context.Context) NfsExportOptionsOutput
}

// NFS export options specifications.
type NfsExportOptionsArgs struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
	AccessMode pulumi.StringPtrInput `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonGid pulumi.StringPtrInput `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonUid pulumi.StringPtrInput `pulumi:"anonUid"`
	// List of either an IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or CIDR ranges in the format {octet 1}.{octet 2}.{octet 3}.{octet 4}/{mask size} which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges pulumi.StringArrayInput `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
	SquashMode pulumi.StringPtrInput `pulumi:"squashMode"`
}

func (NfsExportOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExportOptions)(nil)).Elem()
}

func (i NfsExportOptionsArgs) ToNfsExportOptionsOutput() NfsExportOptionsOutput {
	return i.ToNfsExportOptionsOutputWithContext(context.Background())
}

func (i NfsExportOptionsArgs) ToNfsExportOptionsOutputWithContext(ctx context.Context) NfsExportOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportOptionsOutput)
}

// NfsExportOptionsArrayInput is an input type that accepts NfsExportOptionsArray and NfsExportOptionsArrayOutput values.
// You can construct a concrete instance of `NfsExportOptionsArrayInput` via:
//
//          NfsExportOptionsArray{ NfsExportOptionsArgs{...} }
type NfsExportOptionsArrayInput interface {
	pulumi.Input

	ToNfsExportOptionsArrayOutput() NfsExportOptionsArrayOutput
	ToNfsExportOptionsArrayOutputWithContext(context.Context) NfsExportOptionsArrayOutput
}

type NfsExportOptionsArray []NfsExportOptionsInput

func (NfsExportOptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExportOptions)(nil)).Elem()
}

func (i NfsExportOptionsArray) ToNfsExportOptionsArrayOutput() NfsExportOptionsArrayOutput {
	return i.ToNfsExportOptionsArrayOutputWithContext(context.Background())
}

func (i NfsExportOptionsArray) ToNfsExportOptionsArrayOutputWithContext(ctx context.Context) NfsExportOptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportOptionsArrayOutput)
}

// NFS export options specifications.
type NfsExportOptionsOutput struct{ *pulumi.OutputState }

func (NfsExportOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExportOptions)(nil)).Elem()
}

func (o NfsExportOptionsOutput) ToNfsExportOptionsOutput() NfsExportOptionsOutput {
	return o
}

func (o NfsExportOptionsOutput) ToNfsExportOptionsOutputWithContext(ctx context.Context) NfsExportOptionsOutput {
	return o
}

// Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
func (o NfsExportOptionsOutput) AccessMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExportOptions) *string { return v.AccessMode }).(pulumi.StringPtrOutput)
}

// An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
func (o NfsExportOptionsOutput) AnonGid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExportOptions) *string { return v.AnonGid }).(pulumi.StringPtrOutput)
}

// An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
func (o NfsExportOptionsOutput) AnonUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExportOptions) *string { return v.AnonUid }).(pulumi.StringPtrOutput)
}

// List of either an IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or CIDR ranges in the format {octet 1}.{octet 2}.{octet 3}.{octet 4}/{mask size} which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
func (o NfsExportOptionsOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NfsExportOptions) []string { return v.IpRanges }).(pulumi.StringArrayOutput)
}

// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
func (o NfsExportOptionsOutput) SquashMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NfsExportOptions) *string { return v.SquashMode }).(pulumi.StringPtrOutput)
}

type NfsExportOptionsArrayOutput struct{ *pulumi.OutputState }

func (NfsExportOptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExportOptions)(nil)).Elem()
}

func (o NfsExportOptionsArrayOutput) ToNfsExportOptionsArrayOutput() NfsExportOptionsArrayOutput {
	return o
}

func (o NfsExportOptionsArrayOutput) ToNfsExportOptionsArrayOutputWithContext(ctx context.Context) NfsExportOptionsArrayOutput {
	return o
}

func (o NfsExportOptionsArrayOutput) Index(i pulumi.IntInput) NfsExportOptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsExportOptions {
		return vs[0].([]NfsExportOptions)[vs[1].(int)]
	}).(NfsExportOptionsOutput)
}

// NFS export options specifications.
type NfsExportOptionsResponse struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
	AccessMode string `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonGid string `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonUid string `pulumi:"anonUid"`
	// List of either an IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or CIDR ranges in the format {octet 1}.{octet 2}.{octet 3}.{octet 4}/{mask size} which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges []string `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
	SquashMode string `pulumi:"squashMode"`
}

// NfsExportOptionsResponseInput is an input type that accepts NfsExportOptionsResponseArgs and NfsExportOptionsResponseOutput values.
// You can construct a concrete instance of `NfsExportOptionsResponseInput` via:
//
//          NfsExportOptionsResponseArgs{...}
type NfsExportOptionsResponseInput interface {
	pulumi.Input

	ToNfsExportOptionsResponseOutput() NfsExportOptionsResponseOutput
	ToNfsExportOptionsResponseOutputWithContext(context.Context) NfsExportOptionsResponseOutput
}

// NFS export options specifications.
type NfsExportOptionsResponseArgs struct {
	// Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
	AccessMode pulumi.StringInput `pulumi:"accessMode"`
	// An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonGid pulumi.StringInput `pulumi:"anonGid"`
	// An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
	AnonUid pulumi.StringInput `pulumi:"anonUid"`
	// List of either an IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or CIDR ranges in the format {octet 1}.{octet 2}.{octet 3}.{octet 4}/{mask size} which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
	IpRanges pulumi.StringArrayInput `pulumi:"ipRanges"`
	// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
	SquashMode pulumi.StringInput `pulumi:"squashMode"`
}

func (NfsExportOptionsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExportOptionsResponse)(nil)).Elem()
}

func (i NfsExportOptionsResponseArgs) ToNfsExportOptionsResponseOutput() NfsExportOptionsResponseOutput {
	return i.ToNfsExportOptionsResponseOutputWithContext(context.Background())
}

func (i NfsExportOptionsResponseArgs) ToNfsExportOptionsResponseOutputWithContext(ctx context.Context) NfsExportOptionsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportOptionsResponseOutput)
}

// NfsExportOptionsResponseArrayInput is an input type that accepts NfsExportOptionsResponseArray and NfsExportOptionsResponseArrayOutput values.
// You can construct a concrete instance of `NfsExportOptionsResponseArrayInput` via:
//
//          NfsExportOptionsResponseArray{ NfsExportOptionsResponseArgs{...} }
type NfsExportOptionsResponseArrayInput interface {
	pulumi.Input

	ToNfsExportOptionsResponseArrayOutput() NfsExportOptionsResponseArrayOutput
	ToNfsExportOptionsResponseArrayOutputWithContext(context.Context) NfsExportOptionsResponseArrayOutput
}

type NfsExportOptionsResponseArray []NfsExportOptionsResponseInput

func (NfsExportOptionsResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExportOptionsResponse)(nil)).Elem()
}

func (i NfsExportOptionsResponseArray) ToNfsExportOptionsResponseArrayOutput() NfsExportOptionsResponseArrayOutput {
	return i.ToNfsExportOptionsResponseArrayOutputWithContext(context.Background())
}

func (i NfsExportOptionsResponseArray) ToNfsExportOptionsResponseArrayOutputWithContext(ctx context.Context) NfsExportOptionsResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NfsExportOptionsResponseArrayOutput)
}

// NFS export options specifications.
type NfsExportOptionsResponseOutput struct{ *pulumi.OutputState }

func (NfsExportOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NfsExportOptionsResponse)(nil)).Elem()
}

func (o NfsExportOptionsResponseOutput) ToNfsExportOptionsResponseOutput() NfsExportOptionsResponseOutput {
	return o
}

func (o NfsExportOptionsResponseOutput) ToNfsExportOptionsResponseOutputWithContext(ctx context.Context) NfsExportOptionsResponseOutput {
	return o
}

// Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
func (o NfsExportOptionsResponseOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportOptionsResponse) string { return v.AccessMode }).(pulumi.StringOutput)
}

// An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
func (o NfsExportOptionsResponseOutput) AnonGid() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportOptionsResponse) string { return v.AnonGid }).(pulumi.StringOutput)
}

// An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.
func (o NfsExportOptionsResponseOutput) AnonUid() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportOptionsResponse) string { return v.AnonUid }).(pulumi.StringOutput)
}

// List of either an IPv4 addresses in the format {octet 1}.{octet 2}.{octet 3}.{octet 4} or CIDR ranges in the format {octet 1}.{octet 2}.{octet 3}.{octet 4}/{mask size} which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.
func (o NfsExportOptionsResponseOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NfsExportOptionsResponse) []string { return v.IpRanges }).(pulumi.StringArrayOutput)
}

// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
func (o NfsExportOptionsResponseOutput) SquashMode() pulumi.StringOutput {
	return o.ApplyT(func(v NfsExportOptionsResponse) string { return v.SquashMode }).(pulumi.StringOutput)
}

type NfsExportOptionsResponseArrayOutput struct{ *pulumi.OutputState }

func (NfsExportOptionsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NfsExportOptionsResponse)(nil)).Elem()
}

func (o NfsExportOptionsResponseArrayOutput) ToNfsExportOptionsResponseArrayOutput() NfsExportOptionsResponseArrayOutput {
	return o
}

func (o NfsExportOptionsResponseArrayOutput) ToNfsExportOptionsResponseArrayOutputWithContext(ctx context.Context) NfsExportOptionsResponseArrayOutput {
	return o
}

func (o NfsExportOptionsResponseArrayOutput) Index(i pulumi.IntInput) NfsExportOptionsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NfsExportOptionsResponse {
		return vs[0].([]NfsExportOptionsResponse)[vs[1].(int)]
	}).(NfsExportOptionsResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(FileShareConfigOutput{})
	pulumi.RegisterOutputType(FileShareConfigArrayOutput{})
	pulumi.RegisterOutputType(FileShareConfigResponseOutput{})
	pulumi.RegisterOutputType(FileShareConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(NfsExportOptionsOutput{})
	pulumi.RegisterOutputType(NfsExportOptionsArrayOutput{})
	pulumi.RegisterOutputType(NfsExportOptionsResponseOutput{})
	pulumi.RegisterOutputType(NfsExportOptionsResponseArrayOutput{})
}
