// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The service tier of the instance.
type InstanceTier pulumi.String

const (
	// Not set.
	InstanceTierTierUnspecified = InstanceTier("TIER_UNSPECIFIED")
	// STANDARD tier.
	InstanceTierStandard = InstanceTier("STANDARD")
	// PREMIUM tier.
	InstanceTierPremium = InstanceTier("PREMIUM")
	// BASIC instances offer a maximum capacity of 63.9 TB. BASIC_HDD is an alias for STANDARD Tier, offering economical performance backed by HDD.
	InstanceTierBasicHdd = InstanceTier("BASIC_HDD")
	// BASIC instances offer a maximum capacity of 63.9 TB. BASIC_SSD is an alias for PREMIUM Tier, and offers improved performance backed by SSD.
	InstanceTierBasicSsd = InstanceTier("BASIC_SSD")
	// HIGH_SCALE instances offer expanded capacity and performance scaling capabilities.
	InstanceTierHighScaleSsd = InstanceTier("HIGH_SCALE_SSD")
)

func (InstanceTier) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e InstanceTier) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceTier) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e InstanceTier) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e InstanceTier) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type NetworkConfigModesItem pulumi.String

const (
	// Internet protocol not set.
	NetworkConfigModesItemAddressModeUnspecified = NetworkConfigModesItem("ADDRESS_MODE_UNSPECIFIED")
	// Use the IPv4 internet protocol.
	NetworkConfigModesItemModeIpv4 = NetworkConfigModesItem("MODE_IPV4")
)

func (NetworkConfigModesItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NetworkConfigModesItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkConfigModesItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NetworkConfigModesItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NetworkConfigModesItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// NetworkConfigModesItemArrayInput is an input type that accepts NetworkConfigModesItemArray and NetworkConfigModesItemArrayOutput values.
// You can construct a concrete instance of `NetworkConfigModesItemArrayInput` via:
//
//          NetworkConfigModesItemArray{ NetworkConfigModesItemArgs{...} }
type NetworkConfigModesItemArrayInput interface {
	pulumi.Input

	ToNetworkConfigModesItemArrayOutput() NetworkConfigModesItemArrayOutput
	ToNetworkConfigModesItemArrayOutputWithContext(context.Context) NetworkConfigModesItemArrayOutput
}

type NetworkConfigModesItemArray []NetworkConfigModesItem

func (NetworkConfigModesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfigModesItem)(nil)).Elem()
}

func (i NetworkConfigModesItemArray) ToNetworkConfigModesItemArrayOutput() NetworkConfigModesItemArrayOutput {
	return i.ToNetworkConfigModesItemArrayOutputWithContext(context.Background())
}

func (i NetworkConfigModesItemArray) ToNetworkConfigModesItemArrayOutputWithContext(ctx context.Context) NetworkConfigModesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigModesItemArrayOutput)
}

type NetworkConfigModesItemArrayOutput struct{ *pulumi.OutputState }

func (NetworkConfigModesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkConfigModesItem)(nil)).Elem()
}

func (o NetworkConfigModesItemArrayOutput) ToNetworkConfigModesItemArrayOutput() NetworkConfigModesItemArrayOutput {
	return o
}

func (o NetworkConfigModesItemArrayOutput) ToNetworkConfigModesItemArrayOutputWithContext(ctx context.Context) NetworkConfigModesItemArrayOutput {
	return o
}

func (o NetworkConfigModesItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]NetworkConfigModesItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.
type NfsExportOptionsAccessMode pulumi.String

const (
	// AccessMode not set.
	NfsExportOptionsAccessModeAccessModeUnspecified = NfsExportOptionsAccessMode("ACCESS_MODE_UNSPECIFIED")
	// The client can only read the file share.
	NfsExportOptionsAccessModeReadOnly = NfsExportOptionsAccessMode("READ_ONLY")
	// The client can read and write the file share (default).
	NfsExportOptionsAccessModeReadWrite = NfsExportOptionsAccessMode("READ_WRITE")
)

func (NfsExportOptionsAccessMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NfsExportOptionsAccessMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NfsExportOptionsAccessMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NfsExportOptionsAccessMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NfsExportOptionsAccessMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
type NfsExportOptionsSquashMode pulumi.String

const (
	// SquashMode not set.
	NfsExportOptionsSquashModeSquashModeUnspecified = NfsExportOptionsSquashMode("SQUASH_MODE_UNSPECIFIED")
	// The Root user has root access to the file share (default).
	NfsExportOptionsSquashModeNoRootSquash = NfsExportOptionsSquashMode("NO_ROOT_SQUASH")
	// The Root user has squashed access to the anonymous uid/gid.
	NfsExportOptionsSquashModeRootSquash = NfsExportOptionsSquashMode("ROOT_SQUASH")
)

func (NfsExportOptionsSquashMode) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e NfsExportOptionsSquashMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e NfsExportOptionsSquashMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e NfsExportOptionsSquashMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e NfsExportOptionsSquashMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
