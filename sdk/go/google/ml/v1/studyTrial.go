// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Adds a user provided trial to a study.
type StudyTrial struct {
	pulumi.CustomResourceState
}

// NewStudyTrial registers a new resource with the given unique name, arguments, and options.
func NewStudyTrial(ctx *pulumi.Context,
	name string, args *StudyTrialArgs, opts ...pulumi.ResourceOption) (*StudyTrial, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.StudiesId == nil {
		return nil, errors.New("invalid value for required argument 'StudiesId'")
	}
	if args.TrialsId == nil {
		return nil, errors.New("invalid value for required argument 'TrialsId'")
	}
	var resource StudyTrial
	err := ctx.RegisterResource("google-cloud:ml/v1:StudyTrial", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudyTrial gets an existing StudyTrial resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudyTrial(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudyTrialState, opts ...pulumi.ResourceOption) (*StudyTrial, error) {
	var resource StudyTrial
	err := ctx.ReadResource("google-cloud:ml/v1:StudyTrial", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StudyTrial resources.
type studyTrialState struct {
}

type StudyTrialState struct {
}

func (StudyTrialState) ElementType() reflect.Type {
	return reflect.TypeOf((*studyTrialState)(nil)).Elem()
}

type studyTrialArgs struct {
	// Output only. The identifier of the client that originally requested this trial.
	ClientId *string `pulumi:"clientId"`
	// Output only. Time at which the trial's status changed to COMPLETED.
	EndTime *string `pulumi:"endTime"`
	// The final measurement containing the objective value.
	FinalMeasurement *GoogleCloudMlV1__Measurement `pulumi:"finalMeasurement"`
	// Output only. A human readable string describing why the trial is infeasible. This should only be set if trial_infeasible is true.
	InfeasibleReason *string `pulumi:"infeasibleReason"`
	LocationsId      string  `pulumi:"locationsId"`
	// A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_time). These are used for early stopping computations.
	Measurements []GoogleCloudMlV1__Measurement `pulumi:"measurements"`
	// Output only. Name of the trial assigned by the service.
	Name *string `pulumi:"name"`
	// The parameters of the trial.
	Parameters []GoogleCloudMlV1_Trial_Parameter `pulumi:"parameters"`
	ProjectsId string                            `pulumi:"projectsId"`
	// Output only. Time at which the trial was started.
	StartTime *string `pulumi:"startTime"`
	// The detailed state of a trial.
	State     *string `pulumi:"state"`
	StudiesId string  `pulumi:"studiesId"`
	// Output only. If true, the parameters in this trial are not attempted again.
	TrialInfeasible *bool  `pulumi:"trialInfeasible"`
	TrialsId        string `pulumi:"trialsId"`
}

// The set of arguments for constructing a StudyTrial resource.
type StudyTrialArgs struct {
	// Output only. The identifier of the client that originally requested this trial.
	ClientId pulumi.StringPtrInput
	// Output only. Time at which the trial's status changed to COMPLETED.
	EndTime pulumi.StringPtrInput
	// The final measurement containing the objective value.
	FinalMeasurement GoogleCloudMlV1__MeasurementPtrInput
	// Output only. A human readable string describing why the trial is infeasible. This should only be set if trial_infeasible is true.
	InfeasibleReason pulumi.StringPtrInput
	LocationsId      pulumi.StringInput
	// A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_time). These are used for early stopping computations.
	Measurements GoogleCloudMlV1__MeasurementArrayInput
	// Output only. Name of the trial assigned by the service.
	Name pulumi.StringPtrInput
	// The parameters of the trial.
	Parameters GoogleCloudMlV1_Trial_ParameterArrayInput
	ProjectsId pulumi.StringInput
	// Output only. Time at which the trial was started.
	StartTime pulumi.StringPtrInput
	// The detailed state of a trial.
	State     pulumi.StringPtrInput
	StudiesId pulumi.StringInput
	// Output only. If true, the parameters in this trial are not attempted again.
	TrialInfeasible pulumi.BoolPtrInput
	TrialsId        pulumi.StringInput
}

func (StudyTrialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studyTrialArgs)(nil)).Elem()
}

type StudyTrialInput interface {
	pulumi.Input

	ToStudyTrialOutput() StudyTrialOutput
	ToStudyTrialOutputWithContext(ctx context.Context) StudyTrialOutput
}

func (*StudyTrial) ElementType() reflect.Type {
	return reflect.TypeOf((*StudyTrial)(nil))
}

func (i *StudyTrial) ToStudyTrialOutput() StudyTrialOutput {
	return i.ToStudyTrialOutputWithContext(context.Background())
}

func (i *StudyTrial) ToStudyTrialOutputWithContext(ctx context.Context) StudyTrialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudyTrialOutput)
}

type StudyTrialOutput struct {
	*pulumi.OutputState
}

func (StudyTrialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StudyTrial)(nil))
}

func (o StudyTrialOutput) ToStudyTrialOutput() StudyTrialOutput {
	return o
}

func (o StudyTrialOutput) ToStudyTrialOutputWithContext(ctx context.Context) StudyTrialOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StudyTrialOutput{})
}
