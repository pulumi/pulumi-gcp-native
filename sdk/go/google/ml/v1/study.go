// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a study.
// Auto-naming is currently not supported for this resource.
type Study struct {
	pulumi.CustomResourceState

	// Time at which the study was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A human readable reason why the Study is inactive. This should be empty if a study is ACTIVE or COMPLETED.
	InactiveReason pulumi.StringOutput `pulumi:"inactiveReason"`
	Location       pulumi.StringOutput `pulumi:"location"`
	// The name of a study.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The detailed state of a study.
	State pulumi.StringOutput `pulumi:"state"`
	// Configuration of the study.
	StudyConfig GoogleCloudMlV1__StudyConfigResponseOutput `pulumi:"studyConfig"`
	// Required. The ID to use for the study, which will become the final component of the study's resource name.
	StudyId pulumi.StringOutput `pulumi:"studyId"`
}

// NewStudy registers a new resource with the given unique name, arguments, and options.
func NewStudy(ctx *pulumi.Context,
	name string, args *StudyArgs, opts ...pulumi.ResourceOption) (*Study, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StudyConfig == nil {
		return nil, errors.New("invalid value for required argument 'StudyConfig'")
	}
	if args.StudyId == nil {
		return nil, errors.New("invalid value for required argument 'StudyId'")
	}
	var resource Study
	err := ctx.RegisterResource("google-native:ml/v1:Study", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudy gets an existing Study resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudyState, opts ...pulumi.ResourceOption) (*Study, error) {
	var resource Study
	err := ctx.ReadResource("google-native:ml/v1:Study", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Study resources.
type studyState struct {
}

type StudyState struct {
}

func (StudyState) ElementType() reflect.Type {
	return reflect.TypeOf((*studyState)(nil)).Elem()
}

type studyArgs struct {
	Location *string `pulumi:"location"`
	Project  *string `pulumi:"project"`
	// Configuration of the study.
	StudyConfig GoogleCloudMlV1__StudyConfig `pulumi:"studyConfig"`
	// Required. The ID to use for the study, which will become the final component of the study's resource name.
	StudyId string `pulumi:"studyId"`
}

// The set of arguments for constructing a Study resource.
type StudyArgs struct {
	Location pulumi.StringPtrInput
	Project  pulumi.StringPtrInput
	// Configuration of the study.
	StudyConfig GoogleCloudMlV1__StudyConfigInput
	// Required. The ID to use for the study, which will become the final component of the study's resource name.
	StudyId pulumi.StringInput
}

func (StudyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studyArgs)(nil)).Elem()
}

type StudyInput interface {
	pulumi.Input

	ToStudyOutput() StudyOutput
	ToStudyOutputWithContext(ctx context.Context) StudyOutput
}

func (*Study) ElementType() reflect.Type {
	return reflect.TypeOf((**Study)(nil)).Elem()
}

func (i *Study) ToStudyOutput() StudyOutput {
	return i.ToStudyOutputWithContext(context.Background())
}

func (i *Study) ToStudyOutputWithContext(ctx context.Context) StudyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudyOutput)
}

type StudyOutput struct{ *pulumi.OutputState }

func (StudyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Study)(nil)).Elem()
}

func (o StudyOutput) ToStudyOutput() StudyOutput {
	return o
}

func (o StudyOutput) ToStudyOutputWithContext(ctx context.Context) StudyOutput {
	return o
}

// Time at which the study was created.
func (o StudyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Study) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A human readable reason why the Study is inactive. This should be empty if a study is ACTIVE or COMPLETED.
func (o StudyOutput) InactiveReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Study) pulumi.StringOutput { return v.InactiveReason }).(pulumi.StringOutput)
}

func (o StudyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Study) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The name of a study.
func (o StudyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Study) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StudyOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Study) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The detailed state of a study.
func (o StudyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Study) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Configuration of the study.
func (o StudyOutput) StudyConfig() GoogleCloudMlV1__StudyConfigResponseOutput {
	return o.ApplyT(func(v *Study) GoogleCloudMlV1__StudyConfigResponseOutput { return v.StudyConfig }).(GoogleCloudMlV1__StudyConfigResponseOutput)
}

// Required. The ID to use for the study, which will become the final component of the study's resource name.
func (o StudyOutput) StudyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Study) pulumi.StringOutput { return v.StudyId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StudyInput)(nil)).Elem(), &Study{})
	pulumi.RegisterOutputType(StudyOutput{})
}
