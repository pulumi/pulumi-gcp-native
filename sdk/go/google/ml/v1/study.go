// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a study.
type Study struct {
	pulumi.CustomResourceState
}

// NewStudy registers a new resource with the given unique name, arguments, and options.
func NewStudy(ctx *pulumi.Context,
	name string, args *StudyArgs, opts ...pulumi.ResourceOption) (*Study, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocationsId == nil {
		return nil, errors.New("invalid value for required argument 'LocationsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.StudiesId == nil {
		return nil, errors.New("invalid value for required argument 'StudiesId'")
	}
	var resource Study
	err := ctx.RegisterResource("google-cloud:ml/v1:Study", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStudy gets an existing Study resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStudy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StudyState, opts ...pulumi.ResourceOption) (*Study, error) {
	var resource Study
	err := ctx.ReadResource("google-cloud:ml/v1:Study", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Study resources.
type studyState struct {
}

type StudyState struct {
}

func (StudyState) ElementType() reflect.Type {
	return reflect.TypeOf((*studyState)(nil)).Elem()
}

type studyArgs struct {
	// Output only. Time at which the study was created.
	CreateTime *string `pulumi:"createTime"`
	// Output only. A human readable reason why the Study is inactive. This should be empty if a study is ACTIVE or COMPLETED.
	InactiveReason *string `pulumi:"inactiveReason"`
	LocationsId    string  `pulumi:"locationsId"`
	// Output only. The name of a study.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// Output only. The detailed state of a study.
	State     *string `pulumi:"state"`
	StudiesId string  `pulumi:"studiesId"`
	// Required. Configuration of the study.
	StudyConfig *GoogleCloudMlV1__StudyConfig `pulumi:"studyConfig"`
}

// The set of arguments for constructing a Study resource.
type StudyArgs struct {
	// Output only. Time at which the study was created.
	CreateTime pulumi.StringPtrInput
	// Output only. A human readable reason why the Study is inactive. This should be empty if a study is ACTIVE or COMPLETED.
	InactiveReason pulumi.StringPtrInput
	LocationsId    pulumi.StringInput
	// Output only. The name of a study.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// Output only. The detailed state of a study.
	State     pulumi.StringPtrInput
	StudiesId pulumi.StringInput
	// Required. Configuration of the study.
	StudyConfig GoogleCloudMlV1__StudyConfigPtrInput
}

func (StudyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*studyArgs)(nil)).Elem()
}

type StudyInput interface {
	pulumi.Input

	ToStudyOutput() StudyOutput
	ToStudyOutputWithContext(ctx context.Context) StudyOutput
}

func (*Study) ElementType() reflect.Type {
	return reflect.TypeOf((*Study)(nil))
}

func (i *Study) ToStudyOutput() StudyOutput {
	return i.ToStudyOutputWithContext(context.Background())
}

func (i *Study) ToStudyOutputWithContext(ctx context.Context) StudyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StudyOutput)
}

type StudyOutput struct {
	*pulumi.OutputState
}

func (StudyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Study)(nil))
}

func (o StudyOutput) ToStudyOutput() StudyOutput {
	return o
}

func (o StudyOutput) ToStudyOutputWithContext(ctx context.Context) StudyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(StudyOutput{})
}
