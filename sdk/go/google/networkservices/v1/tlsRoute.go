// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new TlsRoute in a given project and location.
type TlsRoute struct {
	pulumi.CustomResourceState

	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
	Gateways pulumi.StringArrayOutput `pulumi:"gateways"`
	Location pulumi.StringOutput      `pulumi:"location"`
	// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayOutput `pulumi:"meshes"`
	// Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
	Rules TlsRouteRouteRuleResponseArrayOutput `pulumi:"rules"`
	// Server-defined URL of this resource
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
	TlsRouteId pulumi.StringOutput `pulumi:"tlsRouteId"`
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTlsRoute registers a new resource with the given unique name, arguments, and options.
func NewTlsRoute(ctx *pulumi.Context,
	name string, args *TlsRouteArgs, opts ...pulumi.ResourceOption) (*TlsRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.TlsRouteId == nil {
		return nil, errors.New("invalid value for required argument 'TlsRouteId'")
	}
	var resource TlsRoute
	err := ctx.RegisterResource("google-native:networkservices/v1:TlsRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsRoute gets an existing TlsRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsRouteState, opts ...pulumi.ResourceOption) (*TlsRoute, error) {
	var resource TlsRoute
	err := ctx.ReadResource("google-native:networkservices/v1:TlsRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsRoute resources.
type tlsRouteState struct {
}

type TlsRouteState struct {
}

func (TlsRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsRouteState)(nil)).Elem()
}

type tlsRouteArgs struct {
	// Optional. A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
	Gateways []string `pulumi:"gateways"`
	Location *string  `pulumi:"location"`
	// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
	Meshes []string `pulumi:"meshes"`
	// Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
	Rules []TlsRouteRouteRule `pulumi:"rules"`
	// Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
	TlsRouteId string `pulumi:"tlsRouteId"`
}

// The set of arguments for constructing a TlsRoute resource.
type TlsRouteArgs struct {
	// Optional. A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
	Gateways pulumi.StringArrayInput
	Location pulumi.StringPtrInput
	// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
	Meshes pulumi.StringArrayInput
	// Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
	Rules TlsRouteRouteRuleArrayInput
	// Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
	TlsRouteId pulumi.StringInput
}

func (TlsRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsRouteArgs)(nil)).Elem()
}

type TlsRouteInput interface {
	pulumi.Input

	ToTlsRouteOutput() TlsRouteOutput
	ToTlsRouteOutputWithContext(ctx context.Context) TlsRouteOutput
}

func (*TlsRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsRoute)(nil)).Elem()
}

func (i *TlsRoute) ToTlsRouteOutput() TlsRouteOutput {
	return i.ToTlsRouteOutputWithContext(context.Background())
}

func (i *TlsRoute) ToTlsRouteOutputWithContext(ctx context.Context) TlsRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteOutput)
}

type TlsRouteOutput struct{ *pulumi.OutputState }

func (TlsRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsRoute)(nil)).Elem()
}

func (o TlsRouteOutput) ToTlsRouteOutput() TlsRouteOutput {
	return o
}

func (o TlsRouteOutput) ToTlsRouteOutputWithContext(ctx context.Context) TlsRouteOutput {
	return o
}

// The timestamp when the resource was created.
func (o TlsRouteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. A free-text description of the resource. Max length 1024 characters.
func (o TlsRouteOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
func (o TlsRouteOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringArrayOutput { return v.Gateways }).(pulumi.StringArrayOutput)
}

func (o TlsRouteOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
func (o TlsRouteOutput) Meshes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringArrayOutput { return v.Meshes }).(pulumi.StringArrayOutput)
}

// Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.
func (o TlsRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TlsRouteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
func (o TlsRouteOutput) Rules() TlsRouteRouteRuleResponseArrayOutput {
	return o.ApplyT(func(v *TlsRoute) TlsRouteRouteRuleResponseArrayOutput { return v.Rules }).(TlsRouteRouteRuleResponseArrayOutput)
}

// Server-defined URL of this resource
func (o TlsRouteOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Required. Short name of the TlsRoute resource to be created. E.g. TODO(Add an example).
func (o TlsRouteOutput) TlsRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.TlsRouteId }).(pulumi.StringOutput)
}

// The timestamp when the resource was updated.
func (o TlsRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsRoute) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteInput)(nil)).Elem(), &TlsRoute{})
	pulumi.RegisterOutputType(TlsRouteOutput{})
}
