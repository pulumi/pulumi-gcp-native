// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcher struct {
	// The matcher is based on node metadata presented by xDS clients.
	MetadataLabelMatcher *EndpointMatcherMetadataLabelMatcher `pulumi:"metadataLabelMatcher"`
}

// EndpointMatcherInput is an input type that accepts EndpointMatcherArgs and EndpointMatcherOutput values.
// You can construct a concrete instance of `EndpointMatcherInput` via:
//
//          EndpointMatcherArgs{...}
type EndpointMatcherInput interface {
	pulumi.Input

	ToEndpointMatcherOutput() EndpointMatcherOutput
	ToEndpointMatcherOutputWithContext(context.Context) EndpointMatcherOutput
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherArgs struct {
	// The matcher is based on node metadata presented by xDS clients.
	MetadataLabelMatcher EndpointMatcherMetadataLabelMatcherPtrInput `pulumi:"metadataLabelMatcher"`
}

func (EndpointMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcher)(nil)).Elem()
}

func (i EndpointMatcherArgs) ToEndpointMatcherOutput() EndpointMatcherOutput {
	return i.ToEndpointMatcherOutputWithContext(context.Background())
}

func (i EndpointMatcherArgs) ToEndpointMatcherOutputWithContext(ctx context.Context) EndpointMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMatcherOutput)
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherOutput struct{ *pulumi.OutputState }

func (EndpointMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcher)(nil)).Elem()
}

func (o EndpointMatcherOutput) ToEndpointMatcherOutput() EndpointMatcherOutput {
	return o
}

func (o EndpointMatcherOutput) ToEndpointMatcherOutputWithContext(ctx context.Context) EndpointMatcherOutput {
	return o
}

// The matcher is based on node metadata presented by xDS clients.
func (o EndpointMatcherOutput) MetadataLabelMatcher() EndpointMatcherMetadataLabelMatcherPtrOutput {
	return o.ApplyT(func(v EndpointMatcher) *EndpointMatcherMetadataLabelMatcher { return v.MetadataLabelMatcher }).(EndpointMatcherMetadataLabelMatcherPtrOutput)
}

// The matcher that is based on node metadata presented by xDS clients.
type EndpointMatcherMetadataLabelMatcher struct {
	// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
	MetadataLabelMatchCriteria *EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteria `pulumi:"metadataLabelMatchCriteria"`
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
	MetadataLabels []EndpointMatcherMetadataLabelMatcherMetadataLabels `pulumi:"metadataLabels"`
}

// EndpointMatcherMetadataLabelMatcherInput is an input type that accepts EndpointMatcherMetadataLabelMatcherArgs and EndpointMatcherMetadataLabelMatcherOutput values.
// You can construct a concrete instance of `EndpointMatcherMetadataLabelMatcherInput` via:
//
//          EndpointMatcherMetadataLabelMatcherArgs{...}
type EndpointMatcherMetadataLabelMatcherInput interface {
	pulumi.Input

	ToEndpointMatcherMetadataLabelMatcherOutput() EndpointMatcherMetadataLabelMatcherOutput
	ToEndpointMatcherMetadataLabelMatcherOutputWithContext(context.Context) EndpointMatcherMetadataLabelMatcherOutput
}

// The matcher that is based on node metadata presented by xDS clients.
type EndpointMatcherMetadataLabelMatcherArgs struct {
	// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
	MetadataLabelMatchCriteria EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteriaPtrInput `pulumi:"metadataLabelMatchCriteria"`
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
	MetadataLabels EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayInput `pulumi:"metadataLabels"`
}

func (EndpointMatcherMetadataLabelMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherMetadataLabelMatcher)(nil)).Elem()
}

func (i EndpointMatcherMetadataLabelMatcherArgs) ToEndpointMatcherMetadataLabelMatcherOutput() EndpointMatcherMetadataLabelMatcherOutput {
	return i.ToEndpointMatcherMetadataLabelMatcherOutputWithContext(context.Background())
}

func (i EndpointMatcherMetadataLabelMatcherArgs) ToEndpointMatcherMetadataLabelMatcherOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMatcherMetadataLabelMatcherOutput)
}

func (i EndpointMatcherMetadataLabelMatcherArgs) ToEndpointMatcherMetadataLabelMatcherPtrOutput() EndpointMatcherMetadataLabelMatcherPtrOutput {
	return i.ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(context.Background())
}

func (i EndpointMatcherMetadataLabelMatcherArgs) ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMatcherMetadataLabelMatcherOutput).ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(ctx)
}

// EndpointMatcherMetadataLabelMatcherPtrInput is an input type that accepts EndpointMatcherMetadataLabelMatcherArgs, EndpointMatcherMetadataLabelMatcherPtr and EndpointMatcherMetadataLabelMatcherPtrOutput values.
// You can construct a concrete instance of `EndpointMatcherMetadataLabelMatcherPtrInput` via:
//
//          EndpointMatcherMetadataLabelMatcherArgs{...}
//
//  or:
//
//          nil
type EndpointMatcherMetadataLabelMatcherPtrInput interface {
	pulumi.Input

	ToEndpointMatcherMetadataLabelMatcherPtrOutput() EndpointMatcherMetadataLabelMatcherPtrOutput
	ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(context.Context) EndpointMatcherMetadataLabelMatcherPtrOutput
}

type endpointMatcherMetadataLabelMatcherPtrType EndpointMatcherMetadataLabelMatcherArgs

func EndpointMatcherMetadataLabelMatcherPtr(v *EndpointMatcherMetadataLabelMatcherArgs) EndpointMatcherMetadataLabelMatcherPtrInput {
	return (*endpointMatcherMetadataLabelMatcherPtrType)(v)
}

func (*endpointMatcherMetadataLabelMatcherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointMatcherMetadataLabelMatcher)(nil)).Elem()
}

func (i *endpointMatcherMetadataLabelMatcherPtrType) ToEndpointMatcherMetadataLabelMatcherPtrOutput() EndpointMatcherMetadataLabelMatcherPtrOutput {
	return i.ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(context.Background())
}

func (i *endpointMatcherMetadataLabelMatcherPtrType) ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMatcherMetadataLabelMatcherPtrOutput)
}

// The matcher that is based on node metadata presented by xDS clients.
type EndpointMatcherMetadataLabelMatcherOutput struct{ *pulumi.OutputState }

func (EndpointMatcherMetadataLabelMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherMetadataLabelMatcher)(nil)).Elem()
}

func (o EndpointMatcherMetadataLabelMatcherOutput) ToEndpointMatcherMetadataLabelMatcherOutput() EndpointMatcherMetadataLabelMatcherOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherOutput) ToEndpointMatcherMetadataLabelMatcherOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherOutput) ToEndpointMatcherMetadataLabelMatcherPtrOutput() EndpointMatcherMetadataLabelMatcherPtrOutput {
	return o.ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(context.Background())
}

func (o EndpointMatcherMetadataLabelMatcherOutput) ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EndpointMatcherMetadataLabelMatcher) *EndpointMatcherMetadataLabelMatcher {
		return &v
	}).(EndpointMatcherMetadataLabelMatcherPtrOutput)
}

// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
func (o EndpointMatcherMetadataLabelMatcherOutput) MetadataLabelMatchCriteria() EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcher) *EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteria {
		return v.MetadataLabelMatchCriteria
	}).(EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput)
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
func (o EndpointMatcherMetadataLabelMatcherOutput) MetadataLabels() EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcher) []EndpointMatcherMetadataLabelMatcherMetadataLabels {
		return v.MetadataLabels
	}).(EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput)
}

type EndpointMatcherMetadataLabelMatcherPtrOutput struct{ *pulumi.OutputState }

func (EndpointMatcherMetadataLabelMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndpointMatcherMetadataLabelMatcher)(nil)).Elem()
}

func (o EndpointMatcherMetadataLabelMatcherPtrOutput) ToEndpointMatcherMetadataLabelMatcherPtrOutput() EndpointMatcherMetadataLabelMatcherPtrOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherPtrOutput) ToEndpointMatcherMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherPtrOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherPtrOutput) Elem() EndpointMatcherMetadataLabelMatcherOutput {
	return o.ApplyT(func(v *EndpointMatcherMetadataLabelMatcher) EndpointMatcherMetadataLabelMatcher {
		if v != nil {
			return *v
		}
		var ret EndpointMatcherMetadataLabelMatcher
		return ret
	}).(EndpointMatcherMetadataLabelMatcherOutput)
}

// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
func (o EndpointMatcherMetadataLabelMatcherPtrOutput) MetadataLabelMatchCriteria() EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput {
	return o.ApplyT(func(v *EndpointMatcherMetadataLabelMatcher) *EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteria {
		if v == nil {
			return nil
		}
		return v.MetadataLabelMatchCriteria
	}).(EndpointMatcherMetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput)
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
func (o EndpointMatcherMetadataLabelMatcherPtrOutput) MetadataLabels() EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput {
	return o.ApplyT(func(v *EndpointMatcherMetadataLabelMatcher) []EndpointMatcherMetadataLabelMatcherMetadataLabels {
		if v == nil {
			return nil
		}
		return v.MetadataLabels
	}).(EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput)
}

// Defines a name-pair value for a single label.
type EndpointMatcherMetadataLabelMatcherMetadataLabels struct {
	// Label name presented as key in xDS Node Metadata.
	LabelName string `pulumi:"labelName"`
	// Label value presented as value corresponding to the above key, in xDS Node Metadata.
	LabelValue string `pulumi:"labelValue"`
}

// EndpointMatcherMetadataLabelMatcherMetadataLabelsInput is an input type that accepts EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs and EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput values.
// You can construct a concrete instance of `EndpointMatcherMetadataLabelMatcherMetadataLabelsInput` via:
//
//          EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs{...}
type EndpointMatcherMetadataLabelMatcherMetadataLabelsInput interface {
	pulumi.Input

	ToEndpointMatcherMetadataLabelMatcherMetadataLabelsOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput
	ToEndpointMatcherMetadataLabelMatcherMetadataLabelsOutputWithContext(context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput
}

// Defines a name-pair value for a single label.
type EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs struct {
	// Label name presented as key in xDS Node Metadata.
	LabelName pulumi.StringInput `pulumi:"labelName"`
	// Label value presented as value corresponding to the above key, in xDS Node Metadata.
	LabelValue pulumi.StringInput `pulumi:"labelValue"`
}

func (EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherMetadataLabels)(nil)).Elem()
}

func (i EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput {
	return i.ToEndpointMatcherMetadataLabelMatcherMetadataLabelsOutputWithContext(context.Background())
}

func (i EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput)
}

// EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayInput is an input type that accepts EndpointMatcherMetadataLabelMatcherMetadataLabelsArray and EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput values.
// You can construct a concrete instance of `EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayInput` via:
//
//          EndpointMatcherMetadataLabelMatcherMetadataLabelsArray{ EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs{...} }
type EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayInput interface {
	pulumi.Input

	ToEndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput
	ToEndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutputWithContext(context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput
}

type EndpointMatcherMetadataLabelMatcherMetadataLabelsArray []EndpointMatcherMetadataLabelMatcherMetadataLabelsInput

func (EndpointMatcherMetadataLabelMatcherMetadataLabelsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointMatcherMetadataLabelMatcherMetadataLabels)(nil)).Elem()
}

func (i EndpointMatcherMetadataLabelMatcherMetadataLabelsArray) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput {
	return i.ToEndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutputWithContext(context.Background())
}

func (i EndpointMatcherMetadataLabelMatcherMetadataLabelsArray) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput)
}

// Defines a name-pair value for a single label.
type EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput struct{ *pulumi.OutputState }

func (EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherMetadataLabels)(nil)).Elem()
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput {
	return o
}

// Label name presented as key in xDS Node Metadata.
func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput) LabelName() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcherMetadataLabels) string { return v.LabelName }).(pulumi.StringOutput)
}

// Label value presented as value corresponding to the above key, in xDS Node Metadata.
func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput) LabelValue() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcherMetadataLabels) string { return v.LabelValue }).(pulumi.StringOutput)
}

type EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput struct{ *pulumi.OutputState }

func (EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointMatcherMetadataLabelMatcherMetadataLabels)(nil)).Elem()
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput) Index(i pulumi.IntInput) EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointMatcherMetadataLabelMatcherMetadataLabels {
		return vs[0].([]EndpointMatcherMetadataLabelMatcherMetadataLabels)[vs[1].(int)]
	}).(EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput)
}

// Defines a name-pair value for a single label.
type EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse struct {
	// Label name presented as key in xDS Node Metadata.
	LabelName string `pulumi:"labelName"`
	// Label value presented as value corresponding to the above key, in xDS Node Metadata.
	LabelValue string `pulumi:"labelValue"`
}

// Defines a name-pair value for a single label.
type EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput struct{ *pulumi.OutputState }

func (EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse)(nil)).Elem()
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput {
	return o
}

// Label name presented as key in xDS Node Metadata.
func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput) LabelName() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse) string { return v.LabelName }).(pulumi.StringOutput)
}

// Label value presented as value corresponding to the above key, in xDS Node Metadata.
func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput) LabelValue() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse) string { return v.LabelValue }).(pulumi.StringOutput)
}

type EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput struct{ *pulumi.OutputState }

func (EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse)(nil)).Elem()
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput() EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput) ToEndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput) Index(i pulumi.IntInput) EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse {
		return vs[0].([]EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse)[vs[1].(int)]
	}).(EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput)
}

// The matcher that is based on node metadata presented by xDS clients.
type EndpointMatcherMetadataLabelMatcherResponse struct {
	// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
	MetadataLabelMatchCriteria string `pulumi:"metadataLabelMatchCriteria"`
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
	MetadataLabels []EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse `pulumi:"metadataLabels"`
}

// The matcher that is based on node metadata presented by xDS clients.
type EndpointMatcherMetadataLabelMatcherResponseOutput struct{ *pulumi.OutputState }

func (EndpointMatcherMetadataLabelMatcherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherResponse)(nil)).Elem()
}

func (o EndpointMatcherMetadataLabelMatcherResponseOutput) ToEndpointMatcherMetadataLabelMatcherResponseOutput() EndpointMatcherMetadataLabelMatcherResponseOutput {
	return o
}

func (o EndpointMatcherMetadataLabelMatcherResponseOutput) ToEndpointMatcherMetadataLabelMatcherResponseOutputWithContext(ctx context.Context) EndpointMatcherMetadataLabelMatcherResponseOutput {
	return o
}

// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
func (o EndpointMatcherMetadataLabelMatcherResponseOutput) MetadataLabelMatchCriteria() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcherResponse) string { return v.MetadataLabelMatchCriteria }).(pulumi.StringOutput)
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
func (o EndpointMatcherMetadataLabelMatcherResponseOutput) MetadataLabels() EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput {
	return o.ApplyT(func(v EndpointMatcherMetadataLabelMatcherResponse) []EndpointMatcherMetadataLabelMatcherMetadataLabelsResponse {
		return v.MetadataLabels
	}).(EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput)
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherResponse struct {
	// The matcher is based on node metadata presented by xDS clients.
	MetadataLabelMatcher EndpointMatcherMetadataLabelMatcherResponse `pulumi:"metadataLabelMatcher"`
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherResponseOutput struct{ *pulumi.OutputState }

func (EndpointMatcherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherResponse)(nil)).Elem()
}

func (o EndpointMatcherResponseOutput) ToEndpointMatcherResponseOutput() EndpointMatcherResponseOutput {
	return o
}

func (o EndpointMatcherResponseOutput) ToEndpointMatcherResponseOutputWithContext(ctx context.Context) EndpointMatcherResponseOutput {
	return o
}

// The matcher is based on node metadata presented by xDS clients.
func (o EndpointMatcherResponseOutput) MetadataLabelMatcher() EndpointMatcherMetadataLabelMatcherResponseOutput {
	return o.ApplyT(func(v EndpointMatcherResponse) EndpointMatcherMetadataLabelMatcherResponse {
		return v.MetadataLabelMatcher
	}).(EndpointMatcherMetadataLabelMatcherResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Specification of a port-based selector.
type TrafficPortSelector struct {
	// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
	Ports []string `pulumi:"ports"`
}

// TrafficPortSelectorInput is an input type that accepts TrafficPortSelectorArgs and TrafficPortSelectorOutput values.
// You can construct a concrete instance of `TrafficPortSelectorInput` via:
//
//          TrafficPortSelectorArgs{...}
type TrafficPortSelectorInput interface {
	pulumi.Input

	ToTrafficPortSelectorOutput() TrafficPortSelectorOutput
	ToTrafficPortSelectorOutputWithContext(context.Context) TrafficPortSelectorOutput
}

// Specification of a port-based selector.
type TrafficPortSelectorArgs struct {
	// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (TrafficPortSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPortSelector)(nil)).Elem()
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorOutput() TrafficPortSelectorOutput {
	return i.ToTrafficPortSelectorOutputWithContext(context.Background())
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorOutputWithContext(ctx context.Context) TrafficPortSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPortSelectorOutput)
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return i.ToTrafficPortSelectorPtrOutputWithContext(context.Background())
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPortSelectorOutput).ToTrafficPortSelectorPtrOutputWithContext(ctx)
}

// TrafficPortSelectorPtrInput is an input type that accepts TrafficPortSelectorArgs, TrafficPortSelectorPtr and TrafficPortSelectorPtrOutput values.
// You can construct a concrete instance of `TrafficPortSelectorPtrInput` via:
//
//          TrafficPortSelectorArgs{...}
//
//  or:
//
//          nil
type TrafficPortSelectorPtrInput interface {
	pulumi.Input

	ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput
	ToTrafficPortSelectorPtrOutputWithContext(context.Context) TrafficPortSelectorPtrOutput
}

type trafficPortSelectorPtrType TrafficPortSelectorArgs

func TrafficPortSelectorPtr(v *TrafficPortSelectorArgs) TrafficPortSelectorPtrInput {
	return (*trafficPortSelectorPtrType)(v)
}

func (*trafficPortSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficPortSelector)(nil)).Elem()
}

func (i *trafficPortSelectorPtrType) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return i.ToTrafficPortSelectorPtrOutputWithContext(context.Background())
}

func (i *trafficPortSelectorPtrType) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPortSelectorPtrOutput)
}

// Specification of a port-based selector.
type TrafficPortSelectorOutput struct{ *pulumi.OutputState }

func (TrafficPortSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPortSelector)(nil)).Elem()
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorOutput() TrafficPortSelectorOutput {
	return o
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorOutputWithContext(ctx context.Context) TrafficPortSelectorOutput {
	return o
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return o.ToTrafficPortSelectorPtrOutputWithContext(context.Background())
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrafficPortSelector) *TrafficPortSelector {
		return &v
	}).(TrafficPortSelectorPtrOutput)
}

// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
func (o TrafficPortSelectorOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrafficPortSelector) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type TrafficPortSelectorPtrOutput struct{ *pulumi.OutputState }

func (TrafficPortSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficPortSelector)(nil)).Elem()
}

func (o TrafficPortSelectorPtrOutput) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return o
}

func (o TrafficPortSelectorPtrOutput) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return o
}

func (o TrafficPortSelectorPtrOutput) Elem() TrafficPortSelectorOutput {
	return o.ApplyT(func(v *TrafficPortSelector) TrafficPortSelector {
		if v != nil {
			return *v
		}
		var ret TrafficPortSelector
		return ret
	}).(TrafficPortSelectorOutput)
}

// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
func (o TrafficPortSelectorPtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TrafficPortSelector) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

// Specification of a port-based selector.
type TrafficPortSelectorResponse struct {
	// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
	Ports []string `pulumi:"ports"`
}

// Specification of a port-based selector.
type TrafficPortSelectorResponseOutput struct{ *pulumi.OutputState }

func (TrafficPortSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPortSelectorResponse)(nil)).Elem()
}

func (o TrafficPortSelectorResponseOutput) ToTrafficPortSelectorResponseOutput() TrafficPortSelectorResponseOutput {
	return o
}

func (o TrafficPortSelectorResponseOutput) ToTrafficPortSelectorResponseOutputWithContext(ctx context.Context) TrafficPortSelectorResponseOutput {
	return o
}

// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
func (o TrafficPortSelectorResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrafficPortSelectorResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMatcherInput)(nil)).Elem(), EndpointMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherInput)(nil)).Elem(), EndpointMatcherMetadataLabelMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherPtrInput)(nil)).Elem(), EndpointMatcherMetadataLabelMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherMetadataLabelsInput)(nil)).Elem(), EndpointMatcherMetadataLabelMatcherMetadataLabelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayInput)(nil)).Elem(), EndpointMatcherMetadataLabelMatcherMetadataLabelsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficPortSelectorInput)(nil)).Elem(), TrafficPortSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficPortSelectorPtrInput)(nil)).Elem(), TrafficPortSelectorArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(EndpointMatcherOutput{})
	pulumi.RegisterOutputType(EndpointMatcherMetadataLabelMatcherOutput{})
	pulumi.RegisterOutputType(EndpointMatcherMetadataLabelMatcherPtrOutput{})
	pulumi.RegisterOutputType(EndpointMatcherMetadataLabelMatcherMetadataLabelsOutput{})
	pulumi.RegisterOutputType(EndpointMatcherMetadataLabelMatcherMetadataLabelsArrayOutput{})
	pulumi.RegisterOutputType(EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseOutput{})
	pulumi.RegisterOutputType(EndpointMatcherMetadataLabelMatcherMetadataLabelsResponseArrayOutput{})
	pulumi.RegisterOutputType(EndpointMatcherMetadataLabelMatcherResponseOutput{})
	pulumi.RegisterOutputType(EndpointMatcherResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(TrafficPortSelectorOutput{})
	pulumi.RegisterOutputType(TrafficPortSelectorPtrOutput{})
	pulumi.RegisterOutputType(TrafficPortSelectorResponseOutput{})
}
