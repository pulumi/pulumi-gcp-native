// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new GrpcRoute in a given project and location.
type GrpcRoute struct {
	pulumi.CustomResourceState

	// The timestamp when the resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
	Gateways pulumi.StringArrayOutput `pulumi:"gateways"`
	// Required. Short name of the GrpcRoute resource to be created.
	GrpcRouteId pulumi.StringOutput `pulumi:"grpcRouteId"`
	// Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.example.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames "*.foo.bar.com" and "*.bar.com" to be associated with the same route, it is not possible to associate two routes both with "*.bar.com" or both with "bar.com". If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. "xds:///service:123"), otherwise they must supply the URI without a port (i.e. "xds:///service").
	Hostnames pulumi.StringArrayOutput `pulumi:"hostnames"`
	// Optional. Set of label tags associated with the GrpcRoute resource.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`
	Meshes pulumi.StringArrayOutput `pulumi:"meshes"`
	// Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.
	Rules GrpcRouteRouteRuleResponseArrayOutput `pulumi:"rules"`
	// Server-defined URL of this resource
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The timestamp when the resource was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewGrpcRoute registers a new resource with the given unique name, arguments, and options.
func NewGrpcRoute(ctx *pulumi.Context,
	name string, args *GrpcRouteArgs, opts ...pulumi.ResourceOption) (*GrpcRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GrpcRouteId == nil {
		return nil, errors.New("invalid value for required argument 'GrpcRouteId'")
	}
	if args.Hostnames == nil {
		return nil, errors.New("invalid value for required argument 'Hostnames'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"grpcRouteId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource GrpcRoute
	err := ctx.RegisterResource("google-native:networkservices/v1:GrpcRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrpcRoute gets an existing GrpcRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrpcRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrpcRouteState, opts ...pulumi.ResourceOption) (*GrpcRoute, error) {
	var resource GrpcRoute
	err := ctx.ReadResource("google-native:networkservices/v1:GrpcRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrpcRoute resources.
type grpcRouteState struct {
}

type GrpcRouteState struct {
}

func (GrpcRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcRouteState)(nil)).Elem()
}

type grpcRouteArgs struct {
	// Optional. A free-text description of the resource. Max length 1024 characters.
	Description *string `pulumi:"description"`
	// Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
	Gateways []string `pulumi:"gateways"`
	// Required. Short name of the GrpcRoute resource to be created.
	GrpcRouteId string `pulumi:"grpcRouteId"`
	// Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.example.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames "*.foo.bar.com" and "*.bar.com" to be associated with the same route, it is not possible to associate two routes both with "*.bar.com" or both with "bar.com". If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. "xds:///service:123"), otherwise they must supply the URI without a port (i.e. "xds:///service").
	Hostnames []string `pulumi:"hostnames"`
	// Optional. Set of label tags associated with the GrpcRoute resource.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`
	Meshes []string `pulumi:"meshes"`
	// Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.
	Rules []GrpcRouteRouteRule `pulumi:"rules"`
}

// The set of arguments for constructing a GrpcRoute resource.
type GrpcRouteArgs struct {
	// Optional. A free-text description of the resource. Max length 1024 characters.
	Description pulumi.StringPtrInput
	// Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
	Gateways pulumi.StringArrayInput
	// Required. Short name of the GrpcRoute resource to be created.
	GrpcRouteId pulumi.StringInput
	// Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.example.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames "*.foo.bar.com" and "*.bar.com" to be associated with the same route, it is not possible to associate two routes both with "*.bar.com" or both with "bar.com". If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. "xds:///service:123"), otherwise they must supply the URI without a port (i.e. "xds:///service").
	Hostnames pulumi.StringArrayInput
	// Optional. Set of label tags associated with the GrpcRoute resource.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`
	Meshes pulumi.StringArrayInput
	// Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.
	Rules GrpcRouteRouteRuleArrayInput
}

func (GrpcRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grpcRouteArgs)(nil)).Elem()
}

type GrpcRouteInput interface {
	pulumi.Input

	ToGrpcRouteOutput() GrpcRouteOutput
	ToGrpcRouteOutputWithContext(ctx context.Context) GrpcRouteOutput
}

func (*GrpcRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRoute)(nil)).Elem()
}

func (i *GrpcRoute) ToGrpcRouteOutput() GrpcRouteOutput {
	return i.ToGrpcRouteOutputWithContext(context.Background())
}

func (i *GrpcRoute) ToGrpcRouteOutputWithContext(ctx context.Context) GrpcRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteOutput)
}

type GrpcRouteOutput struct{ *pulumi.OutputState }

func (GrpcRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRoute)(nil)).Elem()
}

func (o GrpcRouteOutput) ToGrpcRouteOutput() GrpcRouteOutput {
	return o
}

func (o GrpcRouteOutput) ToGrpcRouteOutputWithContext(ctx context.Context) GrpcRouteOutput {
	return o
}

// The timestamp when the resource was created.
func (o GrpcRouteOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. A free-text description of the resource. Max length 1024 characters.
func (o GrpcRouteOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Optional. Gateways defines a list of gateways this GrpcRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
func (o GrpcRouteOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringArrayOutput { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Required. Short name of the GrpcRoute resource to be created.
func (o GrpcRouteOutput) GrpcRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.GrpcRouteId }).(pulumi.StringOutput)
}

// Service hostnames with an optional port for which this route describes traffic. Format: [:] Hostname is the fully qualified domain name of a network host. This matches the RFC 1123 definition of a hostname with 2 notable exceptions: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (*.). The wildcard label must appear by itself as the first label. Hostname can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.example.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. *.example.com). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateway must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames "*.foo.bar.com" and "*.bar.com" to be associated with the same route, it is not possible to associate two routes both with "*.bar.com" or both with "bar.com". If a port is specified, then gRPC clients must use the channel URI with the port to match this rule (i.e. "xds:///service:123"), otherwise they must supply the URI without a port (i.e. "xds:///service").
func (o GrpcRouteOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringArrayOutput { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// Optional. Set of label tags associated with the GrpcRoute resource.
func (o GrpcRouteOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o GrpcRouteOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. Meshes defines a list of meshes this GrpcRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/`
func (o GrpcRouteOutput) Meshes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringArrayOutput { return v.Meshes }).(pulumi.StringArrayOutput)
}

// Name of the GrpcRoute resource. It matches pattern `projects/*/locations/global/grpcRoutes/`
func (o GrpcRouteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GrpcRouteOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A list of detailed rules defining how to route traffic. Within a single GrpcRoute, the GrpcRoute.RouteAction associated with the first matching GrpcRoute.RouteRule will be executed. At least one rule must be supplied.
func (o GrpcRouteOutput) Rules() GrpcRouteRouteRuleResponseArrayOutput {
	return o.ApplyT(func(v *GrpcRoute) GrpcRouteRouteRuleResponseArrayOutput { return v.Rules }).(GrpcRouteRouteRuleResponseArrayOutput)
}

// Server-defined URL of this resource
func (o GrpcRouteOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The timestamp when the resource was updated.
func (o GrpcRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GrpcRoute) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteInput)(nil)).Elem(), &GrpcRoute{})
	pulumi.RegisterOutputType(GrpcRouteOutput{})
}
