// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcher struct {
	// The matcher is based on node metadata presented by xDS clients.
	MetadataLabelMatcher *MetadataLabelMatcher `pulumi:"metadataLabelMatcher"`
}

// EndpointMatcherInput is an input type that accepts EndpointMatcherArgs and EndpointMatcherOutput values.
// You can construct a concrete instance of `EndpointMatcherInput` via:
//
//          EndpointMatcherArgs{...}
type EndpointMatcherInput interface {
	pulumi.Input

	ToEndpointMatcherOutput() EndpointMatcherOutput
	ToEndpointMatcherOutputWithContext(context.Context) EndpointMatcherOutput
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherArgs struct {
	// The matcher is based on node metadata presented by xDS clients.
	MetadataLabelMatcher MetadataLabelMatcherPtrInput `pulumi:"metadataLabelMatcher"`
}

func (EndpointMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcher)(nil)).Elem()
}

func (i EndpointMatcherArgs) ToEndpointMatcherOutput() EndpointMatcherOutput {
	return i.ToEndpointMatcherOutputWithContext(context.Background())
}

func (i EndpointMatcherArgs) ToEndpointMatcherOutputWithContext(ctx context.Context) EndpointMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMatcherOutput)
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherOutput struct{ *pulumi.OutputState }

func (EndpointMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcher)(nil)).Elem()
}

func (o EndpointMatcherOutput) ToEndpointMatcherOutput() EndpointMatcherOutput {
	return o
}

func (o EndpointMatcherOutput) ToEndpointMatcherOutputWithContext(ctx context.Context) EndpointMatcherOutput {
	return o
}

// The matcher is based on node metadata presented by xDS clients.
func (o EndpointMatcherOutput) MetadataLabelMatcher() MetadataLabelMatcherPtrOutput {
	return o.ApplyT(func(v EndpointMatcher) *MetadataLabelMatcher { return v.MetadataLabelMatcher }).(MetadataLabelMatcherPtrOutput)
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherResponse struct {
	// The matcher is based on node metadata presented by xDS clients.
	MetadataLabelMatcher MetadataLabelMatcherResponse `pulumi:"metadataLabelMatcher"`
}

// A definition of a matcher that selects endpoints to which the policies should be applied.
type EndpointMatcherResponseOutput struct{ *pulumi.OutputState }

func (EndpointMatcherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointMatcherResponse)(nil)).Elem()
}

func (o EndpointMatcherResponseOutput) ToEndpointMatcherResponseOutput() EndpointMatcherResponseOutput {
	return o
}

func (o EndpointMatcherResponseOutput) ToEndpointMatcherResponseOutputWithContext(ctx context.Context) EndpointMatcherResponseOutput {
	return o
}

// The matcher is based on node metadata presented by xDS clients.
func (o EndpointMatcherResponseOutput) MetadataLabelMatcher() MetadataLabelMatcherResponseOutput {
	return o.ApplyT(func(v EndpointMatcherResponse) MetadataLabelMatcherResponse { return v.MetadataLabelMatcher }).(MetadataLabelMatcherResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// The destination to which traffic will be routed.
type GrpcRouteDestination struct {
	// The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.
	ServiceName string `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight *int `pulumi:"weight"`
}

// GrpcRouteDestinationInput is an input type that accepts GrpcRouteDestinationArgs and GrpcRouteDestinationOutput values.
// You can construct a concrete instance of `GrpcRouteDestinationInput` via:
//
//          GrpcRouteDestinationArgs{...}
type GrpcRouteDestinationInput interface {
	pulumi.Input

	ToGrpcRouteDestinationOutput() GrpcRouteDestinationOutput
	ToGrpcRouteDestinationOutputWithContext(context.Context) GrpcRouteDestinationOutput
}

// The destination to which traffic will be routed.
type GrpcRouteDestinationArgs struct {
	// The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (GrpcRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteDestination)(nil)).Elem()
}

func (i GrpcRouteDestinationArgs) ToGrpcRouteDestinationOutput() GrpcRouteDestinationOutput {
	return i.ToGrpcRouteDestinationOutputWithContext(context.Background())
}

func (i GrpcRouteDestinationArgs) ToGrpcRouteDestinationOutputWithContext(ctx context.Context) GrpcRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteDestinationOutput)
}

// GrpcRouteDestinationArrayInput is an input type that accepts GrpcRouteDestinationArray and GrpcRouteDestinationArrayOutput values.
// You can construct a concrete instance of `GrpcRouteDestinationArrayInput` via:
//
//          GrpcRouteDestinationArray{ GrpcRouteDestinationArgs{...} }
type GrpcRouteDestinationArrayInput interface {
	pulumi.Input

	ToGrpcRouteDestinationArrayOutput() GrpcRouteDestinationArrayOutput
	ToGrpcRouteDestinationArrayOutputWithContext(context.Context) GrpcRouteDestinationArrayOutput
}

type GrpcRouteDestinationArray []GrpcRouteDestinationInput

func (GrpcRouteDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteDestination)(nil)).Elem()
}

func (i GrpcRouteDestinationArray) ToGrpcRouteDestinationArrayOutput() GrpcRouteDestinationArrayOutput {
	return i.ToGrpcRouteDestinationArrayOutputWithContext(context.Background())
}

func (i GrpcRouteDestinationArray) ToGrpcRouteDestinationArrayOutputWithContext(ctx context.Context) GrpcRouteDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteDestinationArrayOutput)
}

// The destination to which traffic will be routed.
type GrpcRouteDestinationOutput struct{ *pulumi.OutputState }

func (GrpcRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteDestination)(nil)).Elem()
}

func (o GrpcRouteDestinationOutput) ToGrpcRouteDestinationOutput() GrpcRouteDestinationOutput {
	return o
}

func (o GrpcRouteDestinationOutput) ToGrpcRouteDestinationOutputWithContext(ctx context.Context) GrpcRouteDestinationOutput {
	return o
}

// The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.
func (o GrpcRouteDestinationOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteDestination) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o GrpcRouteDestinationOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GrpcRouteDestination) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type GrpcRouteDestinationArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteDestination)(nil)).Elem()
}

func (o GrpcRouteDestinationArrayOutput) ToGrpcRouteDestinationArrayOutput() GrpcRouteDestinationArrayOutput {
	return o
}

func (o GrpcRouteDestinationArrayOutput) ToGrpcRouteDestinationArrayOutputWithContext(ctx context.Context) GrpcRouteDestinationArrayOutput {
	return o
}

func (o GrpcRouteDestinationArrayOutput) Index(i pulumi.IntInput) GrpcRouteDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteDestination {
		return vs[0].([]GrpcRouteDestination)[vs[1].(int)]
	}).(GrpcRouteDestinationOutput)
}

// The destination to which traffic will be routed.
type GrpcRouteDestinationResponse struct {
	// The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.
	ServiceName string `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight int `pulumi:"weight"`
}

// The destination to which traffic will be routed.
type GrpcRouteDestinationResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteDestinationResponse)(nil)).Elem()
}

func (o GrpcRouteDestinationResponseOutput) ToGrpcRouteDestinationResponseOutput() GrpcRouteDestinationResponseOutput {
	return o
}

func (o GrpcRouteDestinationResponseOutput) ToGrpcRouteDestinationResponseOutputWithContext(ctx context.Context) GrpcRouteDestinationResponseOutput {
	return o
}

// The URL of a destination service to which to route traffic. Must refer to either a BackendService or ServiceDirectoryService.
func (o GrpcRouteDestinationResponseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteDestinationResponse) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o GrpcRouteDestinationResponseOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GrpcRouteDestinationResponse) int { return v.Weight }).(pulumi.IntOutput)
}

type GrpcRouteDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteDestinationResponse)(nil)).Elem()
}

func (o GrpcRouteDestinationResponseArrayOutput) ToGrpcRouteDestinationResponseArrayOutput() GrpcRouteDestinationResponseArrayOutput {
	return o
}

func (o GrpcRouteDestinationResponseArrayOutput) ToGrpcRouteDestinationResponseArrayOutputWithContext(ctx context.Context) GrpcRouteDestinationResponseArrayOutput {
	return o
}

func (o GrpcRouteDestinationResponseArrayOutput) Index(i pulumi.IntInput) GrpcRouteDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteDestinationResponse {
		return vs[0].([]GrpcRouteDestinationResponse)[vs[1].(int)]
	}).(GrpcRouteDestinationResponseOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
type GrpcRouteFaultInjectionPolicy struct {
	// The specification for aborting to client requests.
	Abort *GrpcRouteFaultInjectionPolicyAbort `pulumi:"abort"`
	// The specification for injecting delay to client requests.
	Delay *GrpcRouteFaultInjectionPolicyDelay `pulumi:"delay"`
}

// GrpcRouteFaultInjectionPolicyInput is an input type that accepts GrpcRouteFaultInjectionPolicyArgs and GrpcRouteFaultInjectionPolicyOutput values.
// You can construct a concrete instance of `GrpcRouteFaultInjectionPolicyInput` via:
//
//          GrpcRouteFaultInjectionPolicyArgs{...}
type GrpcRouteFaultInjectionPolicyInput interface {
	pulumi.Input

	ToGrpcRouteFaultInjectionPolicyOutput() GrpcRouteFaultInjectionPolicyOutput
	ToGrpcRouteFaultInjectionPolicyOutputWithContext(context.Context) GrpcRouteFaultInjectionPolicyOutput
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
type GrpcRouteFaultInjectionPolicyArgs struct {
	// The specification for aborting to client requests.
	Abort GrpcRouteFaultInjectionPolicyAbortPtrInput `pulumi:"abort"`
	// The specification for injecting delay to client requests.
	Delay GrpcRouteFaultInjectionPolicyDelayPtrInput `pulumi:"delay"`
}

func (GrpcRouteFaultInjectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicy)(nil)).Elem()
}

func (i GrpcRouteFaultInjectionPolicyArgs) ToGrpcRouteFaultInjectionPolicyOutput() GrpcRouteFaultInjectionPolicyOutput {
	return i.ToGrpcRouteFaultInjectionPolicyOutputWithContext(context.Background())
}

func (i GrpcRouteFaultInjectionPolicyArgs) ToGrpcRouteFaultInjectionPolicyOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyOutput)
}

func (i GrpcRouteFaultInjectionPolicyArgs) ToGrpcRouteFaultInjectionPolicyPtrOutput() GrpcRouteFaultInjectionPolicyPtrOutput {
	return i.ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i GrpcRouteFaultInjectionPolicyArgs) ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyOutput).ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(ctx)
}

// GrpcRouteFaultInjectionPolicyPtrInput is an input type that accepts GrpcRouteFaultInjectionPolicyArgs, GrpcRouteFaultInjectionPolicyPtr and GrpcRouteFaultInjectionPolicyPtrOutput values.
// You can construct a concrete instance of `GrpcRouteFaultInjectionPolicyPtrInput` via:
//
//          GrpcRouteFaultInjectionPolicyArgs{...}
//
//  or:
//
//          nil
type GrpcRouteFaultInjectionPolicyPtrInput interface {
	pulumi.Input

	ToGrpcRouteFaultInjectionPolicyPtrOutput() GrpcRouteFaultInjectionPolicyPtrOutput
	ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(context.Context) GrpcRouteFaultInjectionPolicyPtrOutput
}

type grpcRouteFaultInjectionPolicyPtrType GrpcRouteFaultInjectionPolicyArgs

func GrpcRouteFaultInjectionPolicyPtr(v *GrpcRouteFaultInjectionPolicyArgs) GrpcRouteFaultInjectionPolicyPtrInput {
	return (*grpcRouteFaultInjectionPolicyPtrType)(v)
}

func (*grpcRouteFaultInjectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteFaultInjectionPolicy)(nil)).Elem()
}

func (i *grpcRouteFaultInjectionPolicyPtrType) ToGrpcRouteFaultInjectionPolicyPtrOutput() GrpcRouteFaultInjectionPolicyPtrOutput {
	return i.ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i *grpcRouteFaultInjectionPolicyPtrType) ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
type GrpcRouteFaultInjectionPolicyOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicy)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyOutput) ToGrpcRouteFaultInjectionPolicyOutput() GrpcRouteFaultInjectionPolicyOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyOutput) ToGrpcRouteFaultInjectionPolicyOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyOutput) ToGrpcRouteFaultInjectionPolicyPtrOutput() GrpcRouteFaultInjectionPolicyPtrOutput {
	return o.ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (o GrpcRouteFaultInjectionPolicyOutput) ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrpcRouteFaultInjectionPolicy) *GrpcRouteFaultInjectionPolicy {
		return &v
	}).(GrpcRouteFaultInjectionPolicyPtrOutput)
}

// The specification for aborting to client requests.
func (o GrpcRouteFaultInjectionPolicyOutput) Abort() GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicy) *GrpcRouteFaultInjectionPolicyAbort { return v.Abort }).(GrpcRouteFaultInjectionPolicyAbortPtrOutput)
}

// The specification for injecting delay to client requests.
func (o GrpcRouteFaultInjectionPolicyOutput) Delay() GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicy) *GrpcRouteFaultInjectionPolicyDelay { return v.Delay }).(GrpcRouteFaultInjectionPolicyDelayPtrOutput)
}

type GrpcRouteFaultInjectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteFaultInjectionPolicy)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyPtrOutput) ToGrpcRouteFaultInjectionPolicyPtrOutput() GrpcRouteFaultInjectionPolicyPtrOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyPtrOutput) ToGrpcRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyPtrOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyPtrOutput) Elem() GrpcRouteFaultInjectionPolicyOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicy) GrpcRouteFaultInjectionPolicy {
		if v != nil {
			return *v
		}
		var ret GrpcRouteFaultInjectionPolicy
		return ret
	}).(GrpcRouteFaultInjectionPolicyOutput)
}

// The specification for aborting to client requests.
func (o GrpcRouteFaultInjectionPolicyPtrOutput) Abort() GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicy) *GrpcRouteFaultInjectionPolicyAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(GrpcRouteFaultInjectionPolicyAbortPtrOutput)
}

// The specification for injecting delay to client requests.
func (o GrpcRouteFaultInjectionPolicyPtrOutput) Delay() GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicy) *GrpcRouteFaultInjectionPolicyDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(GrpcRouteFaultInjectionPolicyDelayPtrOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
	HttpStatus *int `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted. The value must be between [0, 100]
	Percentage *int `pulumi:"percentage"`
}

// GrpcRouteFaultInjectionPolicyAbortInput is an input type that accepts GrpcRouteFaultInjectionPolicyAbortArgs and GrpcRouteFaultInjectionPolicyAbortOutput values.
// You can construct a concrete instance of `GrpcRouteFaultInjectionPolicyAbortInput` via:
//
//          GrpcRouteFaultInjectionPolicyAbortArgs{...}
type GrpcRouteFaultInjectionPolicyAbortInput interface {
	pulumi.Input

	ToGrpcRouteFaultInjectionPolicyAbortOutput() GrpcRouteFaultInjectionPolicyAbortOutput
	ToGrpcRouteFaultInjectionPolicyAbortOutputWithContext(context.Context) GrpcRouteFaultInjectionPolicyAbortOutput
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyAbortArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
	HttpStatus pulumi.IntPtrInput `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted. The value must be between [0, 100]
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (GrpcRouteFaultInjectionPolicyAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i GrpcRouteFaultInjectionPolicyAbortArgs) ToGrpcRouteFaultInjectionPolicyAbortOutput() GrpcRouteFaultInjectionPolicyAbortOutput {
	return i.ToGrpcRouteFaultInjectionPolicyAbortOutputWithContext(context.Background())
}

func (i GrpcRouteFaultInjectionPolicyAbortArgs) ToGrpcRouteFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyAbortOutput)
}

func (i GrpcRouteFaultInjectionPolicyAbortArgs) ToGrpcRouteFaultInjectionPolicyAbortPtrOutput() GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return i.ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i GrpcRouteFaultInjectionPolicyAbortArgs) ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyAbortOutput).ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx)
}

// GrpcRouteFaultInjectionPolicyAbortPtrInput is an input type that accepts GrpcRouteFaultInjectionPolicyAbortArgs, GrpcRouteFaultInjectionPolicyAbortPtr and GrpcRouteFaultInjectionPolicyAbortPtrOutput values.
// You can construct a concrete instance of `GrpcRouteFaultInjectionPolicyAbortPtrInput` via:
//
//          GrpcRouteFaultInjectionPolicyAbortArgs{...}
//
//  or:
//
//          nil
type GrpcRouteFaultInjectionPolicyAbortPtrInput interface {
	pulumi.Input

	ToGrpcRouteFaultInjectionPolicyAbortPtrOutput() GrpcRouteFaultInjectionPolicyAbortPtrOutput
	ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Context) GrpcRouteFaultInjectionPolicyAbortPtrOutput
}

type grpcRouteFaultInjectionPolicyAbortPtrType GrpcRouteFaultInjectionPolicyAbortArgs

func GrpcRouteFaultInjectionPolicyAbortPtr(v *GrpcRouteFaultInjectionPolicyAbortArgs) GrpcRouteFaultInjectionPolicyAbortPtrInput {
	return (*grpcRouteFaultInjectionPolicyAbortPtrType)(v)
}

func (*grpcRouteFaultInjectionPolicyAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i *grpcRouteFaultInjectionPolicyAbortPtrType) ToGrpcRouteFaultInjectionPolicyAbortPtrOutput() GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return i.ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i *grpcRouteFaultInjectionPolicyAbortPtrType) ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyAbortPtrOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyAbortOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyAbortOutput) ToGrpcRouteFaultInjectionPolicyAbortOutput() GrpcRouteFaultInjectionPolicyAbortOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyAbortOutput) ToGrpcRouteFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyAbortOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyAbortOutput) ToGrpcRouteFaultInjectionPolicyAbortPtrOutput() GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (o GrpcRouteFaultInjectionPolicyAbortOutput) ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrpcRouteFaultInjectionPolicyAbort) *GrpcRouteFaultInjectionPolicyAbort {
		return &v
	}).(GrpcRouteFaultInjectionPolicyAbortPtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
func (o GrpcRouteFaultInjectionPolicyAbortOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyAbort) *int { return v.HttpStatus }).(pulumi.IntPtrOutput)
}

// The percentage of traffic which will be aborted. The value must be between [0, 100]
func (o GrpcRouteFaultInjectionPolicyAbortOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyAbort) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type GrpcRouteFaultInjectionPolicyAbortPtrOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyAbortPtrOutput) ToGrpcRouteFaultInjectionPolicyAbortPtrOutput() GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyAbortPtrOutput) ToGrpcRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyAbortPtrOutput) Elem() GrpcRouteFaultInjectionPolicyAbortOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicyAbort) GrpcRouteFaultInjectionPolicyAbort {
		if v != nil {
			return *v
		}
		var ret GrpcRouteFaultInjectionPolicyAbort
		return ret
	}).(GrpcRouteFaultInjectionPolicyAbortOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
func (o GrpcRouteFaultInjectionPolicyAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic which will be aborted. The value must be between [0, 100]
func (o GrpcRouteFaultInjectionPolicyAbortPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyAbortResponse struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
	HttpStatus int `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted. The value must be between [0, 100]
	Percentage int `pulumi:"percentage"`
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyAbortResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyAbortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicyAbortResponse)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyAbortResponseOutput) ToGrpcRouteFaultInjectionPolicyAbortResponseOutput() GrpcRouteFaultInjectionPolicyAbortResponseOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyAbortResponseOutput) ToGrpcRouteFaultInjectionPolicyAbortResponseOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyAbortResponseOutput {
	return o
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
func (o GrpcRouteFaultInjectionPolicyAbortResponseOutput) HttpStatus() pulumi.IntOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyAbortResponse) int { return v.HttpStatus }).(pulumi.IntOutput)
}

// The percentage of traffic which will be aborted. The value must be between [0, 100]
func (o GrpcRouteFaultInjectionPolicyAbortResponseOutput) Percentage() pulumi.IntOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyAbortResponse) int { return v.Percentage }).(pulumi.IntOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyDelay struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay *string `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
	Percentage *int `pulumi:"percentage"`
}

// GrpcRouteFaultInjectionPolicyDelayInput is an input type that accepts GrpcRouteFaultInjectionPolicyDelayArgs and GrpcRouteFaultInjectionPolicyDelayOutput values.
// You can construct a concrete instance of `GrpcRouteFaultInjectionPolicyDelayInput` via:
//
//          GrpcRouteFaultInjectionPolicyDelayArgs{...}
type GrpcRouteFaultInjectionPolicyDelayInput interface {
	pulumi.Input

	ToGrpcRouteFaultInjectionPolicyDelayOutput() GrpcRouteFaultInjectionPolicyDelayOutput
	ToGrpcRouteFaultInjectionPolicyDelayOutputWithContext(context.Context) GrpcRouteFaultInjectionPolicyDelayOutput
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyDelayArgs struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay pulumi.StringPtrInput `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (GrpcRouteFaultInjectionPolicyDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i GrpcRouteFaultInjectionPolicyDelayArgs) ToGrpcRouteFaultInjectionPolicyDelayOutput() GrpcRouteFaultInjectionPolicyDelayOutput {
	return i.ToGrpcRouteFaultInjectionPolicyDelayOutputWithContext(context.Background())
}

func (i GrpcRouteFaultInjectionPolicyDelayArgs) ToGrpcRouteFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyDelayOutput)
}

func (i GrpcRouteFaultInjectionPolicyDelayArgs) ToGrpcRouteFaultInjectionPolicyDelayPtrOutput() GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return i.ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i GrpcRouteFaultInjectionPolicyDelayArgs) ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyDelayOutput).ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx)
}

// GrpcRouteFaultInjectionPolicyDelayPtrInput is an input type that accepts GrpcRouteFaultInjectionPolicyDelayArgs, GrpcRouteFaultInjectionPolicyDelayPtr and GrpcRouteFaultInjectionPolicyDelayPtrOutput values.
// You can construct a concrete instance of `GrpcRouteFaultInjectionPolicyDelayPtrInput` via:
//
//          GrpcRouteFaultInjectionPolicyDelayArgs{...}
//
//  or:
//
//          nil
type GrpcRouteFaultInjectionPolicyDelayPtrInput interface {
	pulumi.Input

	ToGrpcRouteFaultInjectionPolicyDelayPtrOutput() GrpcRouteFaultInjectionPolicyDelayPtrOutput
	ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Context) GrpcRouteFaultInjectionPolicyDelayPtrOutput
}

type grpcRouteFaultInjectionPolicyDelayPtrType GrpcRouteFaultInjectionPolicyDelayArgs

func GrpcRouteFaultInjectionPolicyDelayPtr(v *GrpcRouteFaultInjectionPolicyDelayArgs) GrpcRouteFaultInjectionPolicyDelayPtrInput {
	return (*grpcRouteFaultInjectionPolicyDelayPtrType)(v)
}

func (*grpcRouteFaultInjectionPolicyDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i *grpcRouteFaultInjectionPolicyDelayPtrType) ToGrpcRouteFaultInjectionPolicyDelayPtrOutput() GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return i.ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i *grpcRouteFaultInjectionPolicyDelayPtrType) ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteFaultInjectionPolicyDelayPtrOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyDelayOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyDelayOutput) ToGrpcRouteFaultInjectionPolicyDelayOutput() GrpcRouteFaultInjectionPolicyDelayOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyDelayOutput) ToGrpcRouteFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyDelayOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyDelayOutput) ToGrpcRouteFaultInjectionPolicyDelayPtrOutput() GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (o GrpcRouteFaultInjectionPolicyDelayOutput) ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrpcRouteFaultInjectionPolicyDelay) *GrpcRouteFaultInjectionPolicyDelay {
		return &v
	}).(GrpcRouteFaultInjectionPolicyDelayPtrOutput)
}

// Specify a fixed delay before forwarding the request.
func (o GrpcRouteFaultInjectionPolicyDelayOutput) FixedDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyDelay) *string { return v.FixedDelay }).(pulumi.StringPtrOutput)
}

// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
func (o GrpcRouteFaultInjectionPolicyDelayOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyDelay) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type GrpcRouteFaultInjectionPolicyDelayPtrOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyDelayPtrOutput) ToGrpcRouteFaultInjectionPolicyDelayPtrOutput() GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyDelayPtrOutput) ToGrpcRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyDelayPtrOutput) Elem() GrpcRouteFaultInjectionPolicyDelayOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicyDelay) GrpcRouteFaultInjectionPolicyDelay {
		if v != nil {
			return *v
		}
		var ret GrpcRouteFaultInjectionPolicyDelay
		return ret
	}).(GrpcRouteFaultInjectionPolicyDelayOutput)
}

// Specify a fixed delay before forwarding the request.
func (o GrpcRouteFaultInjectionPolicyDelayPtrOutput) FixedDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicyDelay) *string {
		if v == nil {
			return nil
		}
		return v.FixedDelay
	}).(pulumi.StringPtrOutput)
}

// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
func (o GrpcRouteFaultInjectionPolicyDelayPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GrpcRouteFaultInjectionPolicyDelay) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyDelayResponse struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay string `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
	Percentage int `pulumi:"percentage"`
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type GrpcRouteFaultInjectionPolicyDelayResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyDelayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicyDelayResponse)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyDelayResponseOutput) ToGrpcRouteFaultInjectionPolicyDelayResponseOutput() GrpcRouteFaultInjectionPolicyDelayResponseOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyDelayResponseOutput) ToGrpcRouteFaultInjectionPolicyDelayResponseOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyDelayResponseOutput {
	return o
}

// Specify a fixed delay before forwarding the request.
func (o GrpcRouteFaultInjectionPolicyDelayResponseOutput) FixedDelay() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyDelayResponse) string { return v.FixedDelay }).(pulumi.StringOutput)
}

// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
func (o GrpcRouteFaultInjectionPolicyDelayResponseOutput) Percentage() pulumi.IntOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyDelayResponse) int { return v.Percentage }).(pulumi.IntOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
type GrpcRouteFaultInjectionPolicyResponse struct {
	// The specification for aborting to client requests.
	Abort GrpcRouteFaultInjectionPolicyAbortResponse `pulumi:"abort"`
	// The specification for injecting delay to client requests.
	Delay GrpcRouteFaultInjectionPolicyDelayResponse `pulumi:"delay"`
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
type GrpcRouteFaultInjectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteFaultInjectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteFaultInjectionPolicyResponse)(nil)).Elem()
}

func (o GrpcRouteFaultInjectionPolicyResponseOutput) ToGrpcRouteFaultInjectionPolicyResponseOutput() GrpcRouteFaultInjectionPolicyResponseOutput {
	return o
}

func (o GrpcRouteFaultInjectionPolicyResponseOutput) ToGrpcRouteFaultInjectionPolicyResponseOutputWithContext(ctx context.Context) GrpcRouteFaultInjectionPolicyResponseOutput {
	return o
}

// The specification for aborting to client requests.
func (o GrpcRouteFaultInjectionPolicyResponseOutput) Abort() GrpcRouteFaultInjectionPolicyAbortResponseOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyResponse) GrpcRouteFaultInjectionPolicyAbortResponse {
		return v.Abort
	}).(GrpcRouteFaultInjectionPolicyAbortResponseOutput)
}

// The specification for injecting delay to client requests.
func (o GrpcRouteFaultInjectionPolicyResponseOutput) Delay() GrpcRouteFaultInjectionPolicyDelayResponseOutput {
	return o.ApplyT(func(v GrpcRouteFaultInjectionPolicyResponse) GrpcRouteFaultInjectionPolicyDelayResponse {
		return v.Delay
	}).(GrpcRouteFaultInjectionPolicyDelayResponseOutput)
}

// A match against a collection of headers.
type GrpcRouteHeaderMatch struct {
	// The key of the header.
	Key string `pulumi:"key"`
	// Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
	Type *GrpcRouteHeaderMatchType `pulumi:"type"`
	// The value of the header.
	Value string `pulumi:"value"`
}

// GrpcRouteHeaderMatchInput is an input type that accepts GrpcRouteHeaderMatchArgs and GrpcRouteHeaderMatchOutput values.
// You can construct a concrete instance of `GrpcRouteHeaderMatchInput` via:
//
//          GrpcRouteHeaderMatchArgs{...}
type GrpcRouteHeaderMatchInput interface {
	pulumi.Input

	ToGrpcRouteHeaderMatchOutput() GrpcRouteHeaderMatchOutput
	ToGrpcRouteHeaderMatchOutputWithContext(context.Context) GrpcRouteHeaderMatchOutput
}

// A match against a collection of headers.
type GrpcRouteHeaderMatchArgs struct {
	// The key of the header.
	Key pulumi.StringInput `pulumi:"key"`
	// Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
	Type GrpcRouteHeaderMatchTypePtrInput `pulumi:"type"`
	// The value of the header.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GrpcRouteHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteHeaderMatch)(nil)).Elem()
}

func (i GrpcRouteHeaderMatchArgs) ToGrpcRouteHeaderMatchOutput() GrpcRouteHeaderMatchOutput {
	return i.ToGrpcRouteHeaderMatchOutputWithContext(context.Background())
}

func (i GrpcRouteHeaderMatchArgs) ToGrpcRouteHeaderMatchOutputWithContext(ctx context.Context) GrpcRouteHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteHeaderMatchOutput)
}

// GrpcRouteHeaderMatchArrayInput is an input type that accepts GrpcRouteHeaderMatchArray and GrpcRouteHeaderMatchArrayOutput values.
// You can construct a concrete instance of `GrpcRouteHeaderMatchArrayInput` via:
//
//          GrpcRouteHeaderMatchArray{ GrpcRouteHeaderMatchArgs{...} }
type GrpcRouteHeaderMatchArrayInput interface {
	pulumi.Input

	ToGrpcRouteHeaderMatchArrayOutput() GrpcRouteHeaderMatchArrayOutput
	ToGrpcRouteHeaderMatchArrayOutputWithContext(context.Context) GrpcRouteHeaderMatchArrayOutput
}

type GrpcRouteHeaderMatchArray []GrpcRouteHeaderMatchInput

func (GrpcRouteHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteHeaderMatch)(nil)).Elem()
}

func (i GrpcRouteHeaderMatchArray) ToGrpcRouteHeaderMatchArrayOutput() GrpcRouteHeaderMatchArrayOutput {
	return i.ToGrpcRouteHeaderMatchArrayOutputWithContext(context.Background())
}

func (i GrpcRouteHeaderMatchArray) ToGrpcRouteHeaderMatchArrayOutputWithContext(ctx context.Context) GrpcRouteHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteHeaderMatchArrayOutput)
}

// A match against a collection of headers.
type GrpcRouteHeaderMatchOutput struct{ *pulumi.OutputState }

func (GrpcRouteHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteHeaderMatch)(nil)).Elem()
}

func (o GrpcRouteHeaderMatchOutput) ToGrpcRouteHeaderMatchOutput() GrpcRouteHeaderMatchOutput {
	return o
}

func (o GrpcRouteHeaderMatchOutput) ToGrpcRouteHeaderMatchOutputWithContext(ctx context.Context) GrpcRouteHeaderMatchOutput {
	return o
}

// The key of the header.
func (o GrpcRouteHeaderMatchOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteHeaderMatch) string { return v.Key }).(pulumi.StringOutput)
}

// Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
func (o GrpcRouteHeaderMatchOutput) Type() GrpcRouteHeaderMatchTypePtrOutput {
	return o.ApplyT(func(v GrpcRouteHeaderMatch) *GrpcRouteHeaderMatchType { return v.Type }).(GrpcRouteHeaderMatchTypePtrOutput)
}

// The value of the header.
func (o GrpcRouteHeaderMatchOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteHeaderMatch) string { return v.Value }).(pulumi.StringOutput)
}

type GrpcRouteHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteHeaderMatch)(nil)).Elem()
}

func (o GrpcRouteHeaderMatchArrayOutput) ToGrpcRouteHeaderMatchArrayOutput() GrpcRouteHeaderMatchArrayOutput {
	return o
}

func (o GrpcRouteHeaderMatchArrayOutput) ToGrpcRouteHeaderMatchArrayOutputWithContext(ctx context.Context) GrpcRouteHeaderMatchArrayOutput {
	return o
}

func (o GrpcRouteHeaderMatchArrayOutput) Index(i pulumi.IntInput) GrpcRouteHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteHeaderMatch {
		return vs[0].([]GrpcRouteHeaderMatch)[vs[1].(int)]
	}).(GrpcRouteHeaderMatchOutput)
}

// A match against a collection of headers.
type GrpcRouteHeaderMatchResponse struct {
	// The key of the header.
	Key string `pulumi:"key"`
	// Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
	Type string `pulumi:"type"`
	// The value of the header.
	Value string `pulumi:"value"`
}

// A match against a collection of headers.
type GrpcRouteHeaderMatchResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteHeaderMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteHeaderMatchResponse)(nil)).Elem()
}

func (o GrpcRouteHeaderMatchResponseOutput) ToGrpcRouteHeaderMatchResponseOutput() GrpcRouteHeaderMatchResponseOutput {
	return o
}

func (o GrpcRouteHeaderMatchResponseOutput) ToGrpcRouteHeaderMatchResponseOutputWithContext(ctx context.Context) GrpcRouteHeaderMatchResponseOutput {
	return o
}

// The key of the header.
func (o GrpcRouteHeaderMatchResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteHeaderMatchResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Optional. Specifies how to match against the value of the header. If not specified, a default value of EXACT is used.
func (o GrpcRouteHeaderMatchResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteHeaderMatchResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the header.
func (o GrpcRouteHeaderMatchResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteHeaderMatchResponse) string { return v.Value }).(pulumi.StringOutput)
}

type GrpcRouteHeaderMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteHeaderMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteHeaderMatchResponse)(nil)).Elem()
}

func (o GrpcRouteHeaderMatchResponseArrayOutput) ToGrpcRouteHeaderMatchResponseArrayOutput() GrpcRouteHeaderMatchResponseArrayOutput {
	return o
}

func (o GrpcRouteHeaderMatchResponseArrayOutput) ToGrpcRouteHeaderMatchResponseArrayOutputWithContext(ctx context.Context) GrpcRouteHeaderMatchResponseArrayOutput {
	return o
}

func (o GrpcRouteHeaderMatchResponseArrayOutput) Index(i pulumi.IntInput) GrpcRouteHeaderMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteHeaderMatchResponse {
		return vs[0].([]GrpcRouteHeaderMatchResponse)[vs[1].(int)]
	}).(GrpcRouteHeaderMatchResponseOutput)
}

// Specifies a match against a method.
type GrpcRouteMethodMatch struct {
	// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
	CaseSensitive *bool `pulumi:"caseSensitive"`
	// Name of the method to match against. If unspecified, will match all methods.
	GrpcMethod string `pulumi:"grpcMethod"`
	// Name of the service to match against. If unspecified, will match all services.
	GrpcService string `pulumi:"grpcService"`
	// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
	Type *GrpcRouteMethodMatchType `pulumi:"type"`
}

// GrpcRouteMethodMatchInput is an input type that accepts GrpcRouteMethodMatchArgs and GrpcRouteMethodMatchOutput values.
// You can construct a concrete instance of `GrpcRouteMethodMatchInput` via:
//
//          GrpcRouteMethodMatchArgs{...}
type GrpcRouteMethodMatchInput interface {
	pulumi.Input

	ToGrpcRouteMethodMatchOutput() GrpcRouteMethodMatchOutput
	ToGrpcRouteMethodMatchOutputWithContext(context.Context) GrpcRouteMethodMatchOutput
}

// Specifies a match against a method.
type GrpcRouteMethodMatchArgs struct {
	// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
	CaseSensitive pulumi.BoolPtrInput `pulumi:"caseSensitive"`
	// Name of the method to match against. If unspecified, will match all methods.
	GrpcMethod pulumi.StringInput `pulumi:"grpcMethod"`
	// Name of the service to match against. If unspecified, will match all services.
	GrpcService pulumi.StringInput `pulumi:"grpcService"`
	// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
	Type GrpcRouteMethodMatchTypePtrInput `pulumi:"type"`
}

func (GrpcRouteMethodMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteMethodMatch)(nil)).Elem()
}

func (i GrpcRouteMethodMatchArgs) ToGrpcRouteMethodMatchOutput() GrpcRouteMethodMatchOutput {
	return i.ToGrpcRouteMethodMatchOutputWithContext(context.Background())
}

func (i GrpcRouteMethodMatchArgs) ToGrpcRouteMethodMatchOutputWithContext(ctx context.Context) GrpcRouteMethodMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteMethodMatchOutput)
}

func (i GrpcRouteMethodMatchArgs) ToGrpcRouteMethodMatchPtrOutput() GrpcRouteMethodMatchPtrOutput {
	return i.ToGrpcRouteMethodMatchPtrOutputWithContext(context.Background())
}

func (i GrpcRouteMethodMatchArgs) ToGrpcRouteMethodMatchPtrOutputWithContext(ctx context.Context) GrpcRouteMethodMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteMethodMatchOutput).ToGrpcRouteMethodMatchPtrOutputWithContext(ctx)
}

// GrpcRouteMethodMatchPtrInput is an input type that accepts GrpcRouteMethodMatchArgs, GrpcRouteMethodMatchPtr and GrpcRouteMethodMatchPtrOutput values.
// You can construct a concrete instance of `GrpcRouteMethodMatchPtrInput` via:
//
//          GrpcRouteMethodMatchArgs{...}
//
//  or:
//
//          nil
type GrpcRouteMethodMatchPtrInput interface {
	pulumi.Input

	ToGrpcRouteMethodMatchPtrOutput() GrpcRouteMethodMatchPtrOutput
	ToGrpcRouteMethodMatchPtrOutputWithContext(context.Context) GrpcRouteMethodMatchPtrOutput
}

type grpcRouteMethodMatchPtrType GrpcRouteMethodMatchArgs

func GrpcRouteMethodMatchPtr(v *GrpcRouteMethodMatchArgs) GrpcRouteMethodMatchPtrInput {
	return (*grpcRouteMethodMatchPtrType)(v)
}

func (*grpcRouteMethodMatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteMethodMatch)(nil)).Elem()
}

func (i *grpcRouteMethodMatchPtrType) ToGrpcRouteMethodMatchPtrOutput() GrpcRouteMethodMatchPtrOutput {
	return i.ToGrpcRouteMethodMatchPtrOutputWithContext(context.Background())
}

func (i *grpcRouteMethodMatchPtrType) ToGrpcRouteMethodMatchPtrOutputWithContext(ctx context.Context) GrpcRouteMethodMatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteMethodMatchPtrOutput)
}

// Specifies a match against a method.
type GrpcRouteMethodMatchOutput struct{ *pulumi.OutputState }

func (GrpcRouteMethodMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteMethodMatch)(nil)).Elem()
}

func (o GrpcRouteMethodMatchOutput) ToGrpcRouteMethodMatchOutput() GrpcRouteMethodMatchOutput {
	return o
}

func (o GrpcRouteMethodMatchOutput) ToGrpcRouteMethodMatchOutputWithContext(ctx context.Context) GrpcRouteMethodMatchOutput {
	return o
}

func (o GrpcRouteMethodMatchOutput) ToGrpcRouteMethodMatchPtrOutput() GrpcRouteMethodMatchPtrOutput {
	return o.ToGrpcRouteMethodMatchPtrOutputWithContext(context.Background())
}

func (o GrpcRouteMethodMatchOutput) ToGrpcRouteMethodMatchPtrOutputWithContext(ctx context.Context) GrpcRouteMethodMatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrpcRouteMethodMatch) *GrpcRouteMethodMatch {
		return &v
	}).(GrpcRouteMethodMatchPtrOutput)
}

// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
func (o GrpcRouteMethodMatchOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatch) *bool { return v.CaseSensitive }).(pulumi.BoolPtrOutput)
}

// Name of the method to match against. If unspecified, will match all methods.
func (o GrpcRouteMethodMatchOutput) GrpcMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatch) string { return v.GrpcMethod }).(pulumi.StringOutput)
}

// Name of the service to match against. If unspecified, will match all services.
func (o GrpcRouteMethodMatchOutput) GrpcService() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatch) string { return v.GrpcService }).(pulumi.StringOutput)
}

// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
func (o GrpcRouteMethodMatchOutput) Type() GrpcRouteMethodMatchTypePtrOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatch) *GrpcRouteMethodMatchType { return v.Type }).(GrpcRouteMethodMatchTypePtrOutput)
}

type GrpcRouteMethodMatchPtrOutput struct{ *pulumi.OutputState }

func (GrpcRouteMethodMatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteMethodMatch)(nil)).Elem()
}

func (o GrpcRouteMethodMatchPtrOutput) ToGrpcRouteMethodMatchPtrOutput() GrpcRouteMethodMatchPtrOutput {
	return o
}

func (o GrpcRouteMethodMatchPtrOutput) ToGrpcRouteMethodMatchPtrOutputWithContext(ctx context.Context) GrpcRouteMethodMatchPtrOutput {
	return o
}

func (o GrpcRouteMethodMatchPtrOutput) Elem() GrpcRouteMethodMatchOutput {
	return o.ApplyT(func(v *GrpcRouteMethodMatch) GrpcRouteMethodMatch {
		if v != nil {
			return *v
		}
		var ret GrpcRouteMethodMatch
		return ret
	}).(GrpcRouteMethodMatchOutput)
}

// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
func (o GrpcRouteMethodMatchPtrOutput) CaseSensitive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GrpcRouteMethodMatch) *bool {
		if v == nil {
			return nil
		}
		return v.CaseSensitive
	}).(pulumi.BoolPtrOutput)
}

// Name of the method to match against. If unspecified, will match all methods.
func (o GrpcRouteMethodMatchPtrOutput) GrpcMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrpcRouteMethodMatch) *string {
		if v == nil {
			return nil
		}
		return &v.GrpcMethod
	}).(pulumi.StringPtrOutput)
}

// Name of the service to match against. If unspecified, will match all services.
func (o GrpcRouteMethodMatchPtrOutput) GrpcService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GrpcRouteMethodMatch) *string {
		if v == nil {
			return nil
		}
		return &v.GrpcService
	}).(pulumi.StringPtrOutput)
}

// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
func (o GrpcRouteMethodMatchPtrOutput) Type() GrpcRouteMethodMatchTypePtrOutput {
	return o.ApplyT(func(v *GrpcRouteMethodMatch) *GrpcRouteMethodMatchType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(GrpcRouteMethodMatchTypePtrOutput)
}

// Specifies a match against a method.
type GrpcRouteMethodMatchResponse struct {
	// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
	CaseSensitive bool `pulumi:"caseSensitive"`
	// Name of the method to match against. If unspecified, will match all methods.
	GrpcMethod string `pulumi:"grpcMethod"`
	// Name of the service to match against. If unspecified, will match all services.
	GrpcService string `pulumi:"grpcService"`
	// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
	Type string `pulumi:"type"`
}

// Specifies a match against a method.
type GrpcRouteMethodMatchResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteMethodMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteMethodMatchResponse)(nil)).Elem()
}

func (o GrpcRouteMethodMatchResponseOutput) ToGrpcRouteMethodMatchResponseOutput() GrpcRouteMethodMatchResponseOutput {
	return o
}

func (o GrpcRouteMethodMatchResponseOutput) ToGrpcRouteMethodMatchResponseOutputWithContext(ctx context.Context) GrpcRouteMethodMatchResponseOutput {
	return o
}

// Optional. Specifies that matches are case sensitive. The default value is true. case_sensitive must not be used with a type of REGULAR_EXPRESSION.
func (o GrpcRouteMethodMatchResponseOutput) CaseSensitive() pulumi.BoolOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatchResponse) bool { return v.CaseSensitive }).(pulumi.BoolOutput)
}

// Name of the method to match against. If unspecified, will match all methods.
func (o GrpcRouteMethodMatchResponseOutput) GrpcMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatchResponse) string { return v.GrpcMethod }).(pulumi.StringOutput)
}

// Name of the service to match against. If unspecified, will match all services.
func (o GrpcRouteMethodMatchResponseOutput) GrpcService() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatchResponse) string { return v.GrpcService }).(pulumi.StringOutput)
}

// Optional. Specifies how to match against the name. If not specified, a default value of "EXACT" is used.
func (o GrpcRouteMethodMatchResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteMethodMatchResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The specifications for retries.
type GrpcRouteRetryPolicy struct {
	// Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to 1.
	NumRetries *int `pulumi:"numRetries"`
	// - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
	RetryConditions []string `pulumi:"retryConditions"`
}

// GrpcRouteRetryPolicyInput is an input type that accepts GrpcRouteRetryPolicyArgs and GrpcRouteRetryPolicyOutput values.
// You can construct a concrete instance of `GrpcRouteRetryPolicyInput` via:
//
//          GrpcRouteRetryPolicyArgs{...}
type GrpcRouteRetryPolicyInput interface {
	pulumi.Input

	ToGrpcRouteRetryPolicyOutput() GrpcRouteRetryPolicyOutput
	ToGrpcRouteRetryPolicyOutputWithContext(context.Context) GrpcRouteRetryPolicyOutput
}

// The specifications for retries.
type GrpcRouteRetryPolicyArgs struct {
	// Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to 1.
	NumRetries pulumi.IntPtrInput `pulumi:"numRetries"`
	// - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (GrpcRouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRetryPolicy)(nil)).Elem()
}

func (i GrpcRouteRetryPolicyArgs) ToGrpcRouteRetryPolicyOutput() GrpcRouteRetryPolicyOutput {
	return i.ToGrpcRouteRetryPolicyOutputWithContext(context.Background())
}

func (i GrpcRouteRetryPolicyArgs) ToGrpcRouteRetryPolicyOutputWithContext(ctx context.Context) GrpcRouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRetryPolicyOutput)
}

func (i GrpcRouteRetryPolicyArgs) ToGrpcRouteRetryPolicyPtrOutput() GrpcRouteRetryPolicyPtrOutput {
	return i.ToGrpcRouteRetryPolicyPtrOutputWithContext(context.Background())
}

func (i GrpcRouteRetryPolicyArgs) ToGrpcRouteRetryPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRetryPolicyOutput).ToGrpcRouteRetryPolicyPtrOutputWithContext(ctx)
}

// GrpcRouteRetryPolicyPtrInput is an input type that accepts GrpcRouteRetryPolicyArgs, GrpcRouteRetryPolicyPtr and GrpcRouteRetryPolicyPtrOutput values.
// You can construct a concrete instance of `GrpcRouteRetryPolicyPtrInput` via:
//
//          GrpcRouteRetryPolicyArgs{...}
//
//  or:
//
//          nil
type GrpcRouteRetryPolicyPtrInput interface {
	pulumi.Input

	ToGrpcRouteRetryPolicyPtrOutput() GrpcRouteRetryPolicyPtrOutput
	ToGrpcRouteRetryPolicyPtrOutputWithContext(context.Context) GrpcRouteRetryPolicyPtrOutput
}

type grpcRouteRetryPolicyPtrType GrpcRouteRetryPolicyArgs

func GrpcRouteRetryPolicyPtr(v *GrpcRouteRetryPolicyArgs) GrpcRouteRetryPolicyPtrInput {
	return (*grpcRouteRetryPolicyPtrType)(v)
}

func (*grpcRouteRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteRetryPolicy)(nil)).Elem()
}

func (i *grpcRouteRetryPolicyPtrType) ToGrpcRouteRetryPolicyPtrOutput() GrpcRouteRetryPolicyPtrOutput {
	return i.ToGrpcRouteRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *grpcRouteRetryPolicyPtrType) ToGrpcRouteRetryPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRetryPolicyPtrOutput)
}

// The specifications for retries.
type GrpcRouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (GrpcRouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRetryPolicy)(nil)).Elem()
}

func (o GrpcRouteRetryPolicyOutput) ToGrpcRouteRetryPolicyOutput() GrpcRouteRetryPolicyOutput {
	return o
}

func (o GrpcRouteRetryPolicyOutput) ToGrpcRouteRetryPolicyOutputWithContext(ctx context.Context) GrpcRouteRetryPolicyOutput {
	return o
}

func (o GrpcRouteRetryPolicyOutput) ToGrpcRouteRetryPolicyPtrOutput() GrpcRouteRetryPolicyPtrOutput {
	return o.ToGrpcRouteRetryPolicyPtrOutputWithContext(context.Background())
}

func (o GrpcRouteRetryPolicyOutput) ToGrpcRouteRetryPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GrpcRouteRetryPolicy) *GrpcRouteRetryPolicy {
		return &v
	}).(GrpcRouteRetryPolicyPtrOutput)
}

// Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to 1.
func (o GrpcRouteRetryPolicyOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GrpcRouteRetryPolicy) *int { return v.NumRetries }).(pulumi.IntPtrOutput)
}

// - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
func (o GrpcRouteRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GrpcRouteRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type GrpcRouteRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (GrpcRouteRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrpcRouteRetryPolicy)(nil)).Elem()
}

func (o GrpcRouteRetryPolicyPtrOutput) ToGrpcRouteRetryPolicyPtrOutput() GrpcRouteRetryPolicyPtrOutput {
	return o
}

func (o GrpcRouteRetryPolicyPtrOutput) ToGrpcRouteRetryPolicyPtrOutputWithContext(ctx context.Context) GrpcRouteRetryPolicyPtrOutput {
	return o
}

func (o GrpcRouteRetryPolicyPtrOutput) Elem() GrpcRouteRetryPolicyOutput {
	return o.ApplyT(func(v *GrpcRouteRetryPolicy) GrpcRouteRetryPolicy {
		if v != nil {
			return *v
		}
		var ret GrpcRouteRetryPolicy
		return ret
	}).(GrpcRouteRetryPolicyOutput)
}

// Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to 1.
func (o GrpcRouteRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GrpcRouteRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
func (o GrpcRouteRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GrpcRouteRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

// The specifications for retries.
type GrpcRouteRetryPolicyResponse struct {
	// Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to 1.
	NumRetries int `pulumi:"numRetries"`
	// - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
	RetryConditions []string `pulumi:"retryConditions"`
}

// The specifications for retries.
type GrpcRouteRetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteRetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRetryPolicyResponse)(nil)).Elem()
}

func (o GrpcRouteRetryPolicyResponseOutput) ToGrpcRouteRetryPolicyResponseOutput() GrpcRouteRetryPolicyResponseOutput {
	return o
}

func (o GrpcRouteRetryPolicyResponseOutput) ToGrpcRouteRetryPolicyResponseOutputWithContext(ctx context.Context) GrpcRouteRetryPolicyResponseOutput {
	return o
}

// Specifies the allowed number of retries. This number must be > 0. If not specpfied, default to 1.
func (o GrpcRouteRetryPolicyResponseOutput) NumRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GrpcRouteRetryPolicyResponse) int { return v.NumRetries }).(pulumi.IntOutput)
}

// - connect-failure: Router will retry on failures connecting to Backend Services, for example due to connection timeouts. - refused-stream: Router will retry if the backend service resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: Router will retry if the gRPC status code in the response header is set to cancelled - deadline-exceeded: Router will retry if the gRPC status code in the response header is set to deadline-exceeded - resource-exhausted: Router will retry if the gRPC status code in the response header is set to resource-exhausted - unavailable: Router will retry if the gRPC status code in the response header is set to unavailable
func (o GrpcRouteRetryPolicyResponseOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GrpcRouteRetryPolicyResponse) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

// Specifies how to route matched traffic.
type GrpcRouteRouteAction struct {
	// Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
	Destinations []GrpcRouteDestination `pulumi:"destinations"`
	// Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
	FaultInjectionPolicy *GrpcRouteFaultInjectionPolicy `pulumi:"faultInjectionPolicy"`
	// Optional. Specifies the retry policy associated with this route.
	RetryPolicy *GrpcRouteRetryPolicy `pulumi:"retryPolicy"`
	// Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
	Timeout *string `pulumi:"timeout"`
}

// GrpcRouteRouteActionInput is an input type that accepts GrpcRouteRouteActionArgs and GrpcRouteRouteActionOutput values.
// You can construct a concrete instance of `GrpcRouteRouteActionInput` via:
//
//          GrpcRouteRouteActionArgs{...}
type GrpcRouteRouteActionInput interface {
	pulumi.Input

	ToGrpcRouteRouteActionOutput() GrpcRouteRouteActionOutput
	ToGrpcRouteRouteActionOutputWithContext(context.Context) GrpcRouteRouteActionOutput
}

// Specifies how to route matched traffic.
type GrpcRouteRouteActionArgs struct {
	// Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
	Destinations GrpcRouteDestinationArrayInput `pulumi:"destinations"`
	// Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
	FaultInjectionPolicy GrpcRouteFaultInjectionPolicyPtrInput `pulumi:"faultInjectionPolicy"`
	// Optional. Specifies the retry policy associated with this route.
	RetryPolicy GrpcRouteRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (GrpcRouteRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteAction)(nil)).Elem()
}

func (i GrpcRouteRouteActionArgs) ToGrpcRouteRouteActionOutput() GrpcRouteRouteActionOutput {
	return i.ToGrpcRouteRouteActionOutputWithContext(context.Background())
}

func (i GrpcRouteRouteActionArgs) ToGrpcRouteRouteActionOutputWithContext(ctx context.Context) GrpcRouteRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRouteActionOutput)
}

// Specifies how to route matched traffic.
type GrpcRouteRouteActionOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteAction)(nil)).Elem()
}

func (o GrpcRouteRouteActionOutput) ToGrpcRouteRouteActionOutput() GrpcRouteRouteActionOutput {
	return o
}

func (o GrpcRouteRouteActionOutput) ToGrpcRouteRouteActionOutputWithContext(ctx context.Context) GrpcRouteRouteActionOutput {
	return o
}

// Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
func (o GrpcRouteRouteActionOutput) Destinations() GrpcRouteDestinationArrayOutput {
	return o.ApplyT(func(v GrpcRouteRouteAction) []GrpcRouteDestination { return v.Destinations }).(GrpcRouteDestinationArrayOutput)
}

// Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
func (o GrpcRouteRouteActionOutput) FaultInjectionPolicy() GrpcRouteFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v GrpcRouteRouteAction) *GrpcRouteFaultInjectionPolicy { return v.FaultInjectionPolicy }).(GrpcRouteFaultInjectionPolicyPtrOutput)
}

// Optional. Specifies the retry policy associated with this route.
func (o GrpcRouteRouteActionOutput) RetryPolicy() GrpcRouteRetryPolicyPtrOutput {
	return o.ApplyT(func(v GrpcRouteRouteAction) *GrpcRouteRetryPolicy { return v.RetryPolicy }).(GrpcRouteRetryPolicyPtrOutput)
}

// Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
func (o GrpcRouteRouteActionOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GrpcRouteRouteAction) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// Specifies how to route matched traffic.
type GrpcRouteRouteActionResponse struct {
	// Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
	Destinations []GrpcRouteDestinationResponse `pulumi:"destinations"`
	// Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
	FaultInjectionPolicy GrpcRouteFaultInjectionPolicyResponse `pulumi:"faultInjectionPolicy"`
	// Optional. Specifies the retry policy associated with this route.
	RetryPolicy GrpcRouteRetryPolicyResponse `pulumi:"retryPolicy"`
	// Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
	Timeout string `pulumi:"timeout"`
}

// Specifies how to route matched traffic.
type GrpcRouteRouteActionResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteActionResponse)(nil)).Elem()
}

func (o GrpcRouteRouteActionResponseOutput) ToGrpcRouteRouteActionResponseOutput() GrpcRouteRouteActionResponseOutput {
	return o
}

func (o GrpcRouteRouteActionResponseOutput) ToGrpcRouteRouteActionResponseOutputWithContext(ctx context.Context) GrpcRouteRouteActionResponseOutput {
	return o
}

// Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
func (o GrpcRouteRouteActionResponseOutput) Destinations() GrpcRouteDestinationResponseArrayOutput {
	return o.ApplyT(func(v GrpcRouteRouteActionResponse) []GrpcRouteDestinationResponse { return v.Destinations }).(GrpcRouteDestinationResponseArrayOutput)
}

// Optional. The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
func (o GrpcRouteRouteActionResponseOutput) FaultInjectionPolicy() GrpcRouteFaultInjectionPolicyResponseOutput {
	return o.ApplyT(func(v GrpcRouteRouteActionResponse) GrpcRouteFaultInjectionPolicyResponse {
		return v.FaultInjectionPolicy
	}).(GrpcRouteFaultInjectionPolicyResponseOutput)
}

// Optional. Specifies the retry policy associated with this route.
func (o GrpcRouteRouteActionResponseOutput) RetryPolicy() GrpcRouteRetryPolicyResponseOutput {
	return o.ApplyT(func(v GrpcRouteRouteActionResponse) GrpcRouteRetryPolicyResponse { return v.RetryPolicy }).(GrpcRouteRetryPolicyResponseOutput)
}

// Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
func (o GrpcRouteRouteActionResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v GrpcRouteRouteActionResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
type GrpcRouteRouteMatch struct {
	// Optional. Specifies a collection of headers to match.
	Headers []GrpcRouteHeaderMatch `pulumi:"headers"`
	// Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
	Method *GrpcRouteMethodMatch `pulumi:"method"`
}

// GrpcRouteRouteMatchInput is an input type that accepts GrpcRouteRouteMatchArgs and GrpcRouteRouteMatchOutput values.
// You can construct a concrete instance of `GrpcRouteRouteMatchInput` via:
//
//          GrpcRouteRouteMatchArgs{...}
type GrpcRouteRouteMatchInput interface {
	pulumi.Input

	ToGrpcRouteRouteMatchOutput() GrpcRouteRouteMatchOutput
	ToGrpcRouteRouteMatchOutputWithContext(context.Context) GrpcRouteRouteMatchOutput
}

// Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
type GrpcRouteRouteMatchArgs struct {
	// Optional. Specifies a collection of headers to match.
	Headers GrpcRouteHeaderMatchArrayInput `pulumi:"headers"`
	// Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
	Method GrpcRouteMethodMatchPtrInput `pulumi:"method"`
}

func (GrpcRouteRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteMatch)(nil)).Elem()
}

func (i GrpcRouteRouteMatchArgs) ToGrpcRouteRouteMatchOutput() GrpcRouteRouteMatchOutput {
	return i.ToGrpcRouteRouteMatchOutputWithContext(context.Background())
}

func (i GrpcRouteRouteMatchArgs) ToGrpcRouteRouteMatchOutputWithContext(ctx context.Context) GrpcRouteRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRouteMatchOutput)
}

// GrpcRouteRouteMatchArrayInput is an input type that accepts GrpcRouteRouteMatchArray and GrpcRouteRouteMatchArrayOutput values.
// You can construct a concrete instance of `GrpcRouteRouteMatchArrayInput` via:
//
//          GrpcRouteRouteMatchArray{ GrpcRouteRouteMatchArgs{...} }
type GrpcRouteRouteMatchArrayInput interface {
	pulumi.Input

	ToGrpcRouteRouteMatchArrayOutput() GrpcRouteRouteMatchArrayOutput
	ToGrpcRouteRouteMatchArrayOutputWithContext(context.Context) GrpcRouteRouteMatchArrayOutput
}

type GrpcRouteRouteMatchArray []GrpcRouteRouteMatchInput

func (GrpcRouteRouteMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteRouteMatch)(nil)).Elem()
}

func (i GrpcRouteRouteMatchArray) ToGrpcRouteRouteMatchArrayOutput() GrpcRouteRouteMatchArrayOutput {
	return i.ToGrpcRouteRouteMatchArrayOutputWithContext(context.Background())
}

func (i GrpcRouteRouteMatchArray) ToGrpcRouteRouteMatchArrayOutputWithContext(ctx context.Context) GrpcRouteRouteMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRouteMatchArrayOutput)
}

// Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
type GrpcRouteRouteMatchOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteMatch)(nil)).Elem()
}

func (o GrpcRouteRouteMatchOutput) ToGrpcRouteRouteMatchOutput() GrpcRouteRouteMatchOutput {
	return o
}

func (o GrpcRouteRouteMatchOutput) ToGrpcRouteRouteMatchOutputWithContext(ctx context.Context) GrpcRouteRouteMatchOutput {
	return o
}

// Optional. Specifies a collection of headers to match.
func (o GrpcRouteRouteMatchOutput) Headers() GrpcRouteHeaderMatchArrayOutput {
	return o.ApplyT(func(v GrpcRouteRouteMatch) []GrpcRouteHeaderMatch { return v.Headers }).(GrpcRouteHeaderMatchArrayOutput)
}

// Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
func (o GrpcRouteRouteMatchOutput) Method() GrpcRouteMethodMatchPtrOutput {
	return o.ApplyT(func(v GrpcRouteRouteMatch) *GrpcRouteMethodMatch { return v.Method }).(GrpcRouteMethodMatchPtrOutput)
}

type GrpcRouteRouteMatchArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteRouteMatch)(nil)).Elem()
}

func (o GrpcRouteRouteMatchArrayOutput) ToGrpcRouteRouteMatchArrayOutput() GrpcRouteRouteMatchArrayOutput {
	return o
}

func (o GrpcRouteRouteMatchArrayOutput) ToGrpcRouteRouteMatchArrayOutputWithContext(ctx context.Context) GrpcRouteRouteMatchArrayOutput {
	return o
}

func (o GrpcRouteRouteMatchArrayOutput) Index(i pulumi.IntInput) GrpcRouteRouteMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteRouteMatch {
		return vs[0].([]GrpcRouteRouteMatch)[vs[1].(int)]
	}).(GrpcRouteRouteMatchOutput)
}

// Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
type GrpcRouteRouteMatchResponse struct {
	// Optional. Specifies a collection of headers to match.
	Headers []GrpcRouteHeaderMatchResponse `pulumi:"headers"`
	// Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
	Method GrpcRouteMethodMatchResponse `pulumi:"method"`
}

// Criteria for matching traffic. A RouteMatch will be considered to match when all supplied fields match.
type GrpcRouteRouteMatchResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteMatchResponse)(nil)).Elem()
}

func (o GrpcRouteRouteMatchResponseOutput) ToGrpcRouteRouteMatchResponseOutput() GrpcRouteRouteMatchResponseOutput {
	return o
}

func (o GrpcRouteRouteMatchResponseOutput) ToGrpcRouteRouteMatchResponseOutputWithContext(ctx context.Context) GrpcRouteRouteMatchResponseOutput {
	return o
}

// Optional. Specifies a collection of headers to match.
func (o GrpcRouteRouteMatchResponseOutput) Headers() GrpcRouteHeaderMatchResponseArrayOutput {
	return o.ApplyT(func(v GrpcRouteRouteMatchResponse) []GrpcRouteHeaderMatchResponse { return v.Headers }).(GrpcRouteHeaderMatchResponseArrayOutput)
}

// Optional. A gRPC method to match against. If this field is empty or omitted, will match all methods.
func (o GrpcRouteRouteMatchResponseOutput) Method() GrpcRouteMethodMatchResponseOutput {
	return o.ApplyT(func(v GrpcRouteRouteMatchResponse) GrpcRouteMethodMatchResponse { return v.Method }).(GrpcRouteMethodMatchResponseOutput)
}

type GrpcRouteRouteMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteRouteMatchResponse)(nil)).Elem()
}

func (o GrpcRouteRouteMatchResponseArrayOutput) ToGrpcRouteRouteMatchResponseArrayOutput() GrpcRouteRouteMatchResponseArrayOutput {
	return o
}

func (o GrpcRouteRouteMatchResponseArrayOutput) ToGrpcRouteRouteMatchResponseArrayOutputWithContext(ctx context.Context) GrpcRouteRouteMatchResponseArrayOutput {
	return o
}

func (o GrpcRouteRouteMatchResponseArrayOutput) Index(i pulumi.IntInput) GrpcRouteRouteMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteRouteMatchResponse {
		return vs[0].([]GrpcRouteRouteMatchResponse)[vs[1].(int)]
	}).(GrpcRouteRouteMatchResponseOutput)
}

// Describes how to route traffic.
type GrpcRouteRouteRule struct {
	// A detailed rule defining how to route traffic. This field is required.
	Action GrpcRouteRouteAction `pulumi:"action"`
	// Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.
	Matches []GrpcRouteRouteMatch `pulumi:"matches"`
}

// GrpcRouteRouteRuleInput is an input type that accepts GrpcRouteRouteRuleArgs and GrpcRouteRouteRuleOutput values.
// You can construct a concrete instance of `GrpcRouteRouteRuleInput` via:
//
//          GrpcRouteRouteRuleArgs{...}
type GrpcRouteRouteRuleInput interface {
	pulumi.Input

	ToGrpcRouteRouteRuleOutput() GrpcRouteRouteRuleOutput
	ToGrpcRouteRouteRuleOutputWithContext(context.Context) GrpcRouteRouteRuleOutput
}

// Describes how to route traffic.
type GrpcRouteRouteRuleArgs struct {
	// A detailed rule defining how to route traffic. This field is required.
	Action GrpcRouteRouteActionInput `pulumi:"action"`
	// Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.
	Matches GrpcRouteRouteMatchArrayInput `pulumi:"matches"`
}

func (GrpcRouteRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteRule)(nil)).Elem()
}

func (i GrpcRouteRouteRuleArgs) ToGrpcRouteRouteRuleOutput() GrpcRouteRouteRuleOutput {
	return i.ToGrpcRouteRouteRuleOutputWithContext(context.Background())
}

func (i GrpcRouteRouteRuleArgs) ToGrpcRouteRouteRuleOutputWithContext(ctx context.Context) GrpcRouteRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRouteRuleOutput)
}

// GrpcRouteRouteRuleArrayInput is an input type that accepts GrpcRouteRouteRuleArray and GrpcRouteRouteRuleArrayOutput values.
// You can construct a concrete instance of `GrpcRouteRouteRuleArrayInput` via:
//
//          GrpcRouteRouteRuleArray{ GrpcRouteRouteRuleArgs{...} }
type GrpcRouteRouteRuleArrayInput interface {
	pulumi.Input

	ToGrpcRouteRouteRuleArrayOutput() GrpcRouteRouteRuleArrayOutput
	ToGrpcRouteRouteRuleArrayOutputWithContext(context.Context) GrpcRouteRouteRuleArrayOutput
}

type GrpcRouteRouteRuleArray []GrpcRouteRouteRuleInput

func (GrpcRouteRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteRouteRule)(nil)).Elem()
}

func (i GrpcRouteRouteRuleArray) ToGrpcRouteRouteRuleArrayOutput() GrpcRouteRouteRuleArrayOutput {
	return i.ToGrpcRouteRouteRuleArrayOutputWithContext(context.Background())
}

func (i GrpcRouteRouteRuleArray) ToGrpcRouteRouteRuleArrayOutputWithContext(ctx context.Context) GrpcRouteRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrpcRouteRouteRuleArrayOutput)
}

// Describes how to route traffic.
type GrpcRouteRouteRuleOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteRule)(nil)).Elem()
}

func (o GrpcRouteRouteRuleOutput) ToGrpcRouteRouteRuleOutput() GrpcRouteRouteRuleOutput {
	return o
}

func (o GrpcRouteRouteRuleOutput) ToGrpcRouteRouteRuleOutputWithContext(ctx context.Context) GrpcRouteRouteRuleOutput {
	return o
}

// A detailed rule defining how to route traffic. This field is required.
func (o GrpcRouteRouteRuleOutput) Action() GrpcRouteRouteActionOutput {
	return o.ApplyT(func(v GrpcRouteRouteRule) GrpcRouteRouteAction { return v.Action }).(GrpcRouteRouteActionOutput)
}

// Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.
func (o GrpcRouteRouteRuleOutput) Matches() GrpcRouteRouteMatchArrayOutput {
	return o.ApplyT(func(v GrpcRouteRouteRule) []GrpcRouteRouteMatch { return v.Matches }).(GrpcRouteRouteMatchArrayOutput)
}

type GrpcRouteRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteRouteRule)(nil)).Elem()
}

func (o GrpcRouteRouteRuleArrayOutput) ToGrpcRouteRouteRuleArrayOutput() GrpcRouteRouteRuleArrayOutput {
	return o
}

func (o GrpcRouteRouteRuleArrayOutput) ToGrpcRouteRouteRuleArrayOutputWithContext(ctx context.Context) GrpcRouteRouteRuleArrayOutput {
	return o
}

func (o GrpcRouteRouteRuleArrayOutput) Index(i pulumi.IntInput) GrpcRouteRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteRouteRule {
		return vs[0].([]GrpcRouteRouteRule)[vs[1].(int)]
	}).(GrpcRouteRouteRuleOutput)
}

// Describes how to route traffic.
type GrpcRouteRouteRuleResponse struct {
	// A detailed rule defining how to route traffic. This field is required.
	Action GrpcRouteRouteActionResponse `pulumi:"action"`
	// Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.
	Matches []GrpcRouteRouteMatchResponse `pulumi:"matches"`
}

// Describes how to route traffic.
type GrpcRouteRouteRuleResponseOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GrpcRouteRouteRuleResponse)(nil)).Elem()
}

func (o GrpcRouteRouteRuleResponseOutput) ToGrpcRouteRouteRuleResponseOutput() GrpcRouteRouteRuleResponseOutput {
	return o
}

func (o GrpcRouteRouteRuleResponseOutput) ToGrpcRouteRouteRuleResponseOutputWithContext(ctx context.Context) GrpcRouteRouteRuleResponseOutput {
	return o
}

// A detailed rule defining how to route traffic. This field is required.
func (o GrpcRouteRouteRuleResponseOutput) Action() GrpcRouteRouteActionResponseOutput {
	return o.ApplyT(func(v GrpcRouteRouteRuleResponse) GrpcRouteRouteActionResponse { return v.Action }).(GrpcRouteRouteActionResponseOutput)
}

// Optional. Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic.
func (o GrpcRouteRouteRuleResponseOutput) Matches() GrpcRouteRouteMatchResponseArrayOutput {
	return o.ApplyT(func(v GrpcRouteRouteRuleResponse) []GrpcRouteRouteMatchResponse { return v.Matches }).(GrpcRouteRouteMatchResponseArrayOutput)
}

type GrpcRouteRouteRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (GrpcRouteRouteRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GrpcRouteRouteRuleResponse)(nil)).Elem()
}

func (o GrpcRouteRouteRuleResponseArrayOutput) ToGrpcRouteRouteRuleResponseArrayOutput() GrpcRouteRouteRuleResponseArrayOutput {
	return o
}

func (o GrpcRouteRouteRuleResponseArrayOutput) ToGrpcRouteRouteRuleResponseArrayOutputWithContext(ctx context.Context) GrpcRouteRouteRuleResponseArrayOutput {
	return o
}

func (o GrpcRouteRouteRuleResponseArrayOutput) Index(i pulumi.IntInput) GrpcRouteRouteRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GrpcRouteRouteRuleResponse {
		return vs[0].([]GrpcRouteRouteRuleResponse)[vs[1].(int)]
	}).(GrpcRouteRouteRuleResponseOutput)
}

// The Specification for allowing client side cross-origin requests.
type HttpRouteCorsPolicy struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
	AllowCredentials *bool `pulumi:"allowCredentials"`
	// Specifies the content for Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled *bool `pulumi:"disabled"`
	// Specifies the content for Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
	MaxAge *string `pulumi:"maxAge"`
}

// HttpRouteCorsPolicyInput is an input type that accepts HttpRouteCorsPolicyArgs and HttpRouteCorsPolicyOutput values.
// You can construct a concrete instance of `HttpRouteCorsPolicyInput` via:
//
//          HttpRouteCorsPolicyArgs{...}
type HttpRouteCorsPolicyInput interface {
	pulumi.Input

	ToHttpRouteCorsPolicyOutput() HttpRouteCorsPolicyOutput
	ToHttpRouteCorsPolicyOutputWithContext(context.Context) HttpRouteCorsPolicyOutput
}

// The Specification for allowing client side cross-origin requests.
type HttpRouteCorsPolicyArgs struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
	AllowCredentials pulumi.BoolPtrInput `pulumi:"allowCredentials"`
	// Specifies the content for Access-Control-Allow-Headers header.
	AllowHeaders pulumi.StringArrayInput `pulumi:"allowHeaders"`
	// Specifies the content for Access-Control-Allow-Methods header.
	AllowMethods pulumi.StringArrayInput `pulumi:"allowMethods"`
	// Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
	AllowOriginRegexes pulumi.StringArrayInput `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
	AllowOrigins pulumi.StringArrayInput `pulumi:"allowOrigins"`
	// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// Specifies the content for Access-Control-Expose-Headers header.
	ExposeHeaders pulumi.StringArrayInput `pulumi:"exposeHeaders"`
	// Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
	MaxAge pulumi.StringPtrInput `pulumi:"maxAge"`
}

func (HttpRouteCorsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteCorsPolicy)(nil)).Elem()
}

func (i HttpRouteCorsPolicyArgs) ToHttpRouteCorsPolicyOutput() HttpRouteCorsPolicyOutput {
	return i.ToHttpRouteCorsPolicyOutputWithContext(context.Background())
}

func (i HttpRouteCorsPolicyArgs) ToHttpRouteCorsPolicyOutputWithContext(ctx context.Context) HttpRouteCorsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteCorsPolicyOutput)
}

func (i HttpRouteCorsPolicyArgs) ToHttpRouteCorsPolicyPtrOutput() HttpRouteCorsPolicyPtrOutput {
	return i.ToHttpRouteCorsPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteCorsPolicyArgs) ToHttpRouteCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteCorsPolicyOutput).ToHttpRouteCorsPolicyPtrOutputWithContext(ctx)
}

// HttpRouteCorsPolicyPtrInput is an input type that accepts HttpRouteCorsPolicyArgs, HttpRouteCorsPolicyPtr and HttpRouteCorsPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteCorsPolicyPtrInput` via:
//
//          HttpRouteCorsPolicyArgs{...}
//
//  or:
//
//          nil
type HttpRouteCorsPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteCorsPolicyPtrOutput() HttpRouteCorsPolicyPtrOutput
	ToHttpRouteCorsPolicyPtrOutputWithContext(context.Context) HttpRouteCorsPolicyPtrOutput
}

type httpRouteCorsPolicyPtrType HttpRouteCorsPolicyArgs

func HttpRouteCorsPolicyPtr(v *HttpRouteCorsPolicyArgs) HttpRouteCorsPolicyPtrInput {
	return (*httpRouteCorsPolicyPtrType)(v)
}

func (*httpRouteCorsPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteCorsPolicy)(nil)).Elem()
}

func (i *httpRouteCorsPolicyPtrType) ToHttpRouteCorsPolicyPtrOutput() HttpRouteCorsPolicyPtrOutput {
	return i.ToHttpRouteCorsPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteCorsPolicyPtrType) ToHttpRouteCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteCorsPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteCorsPolicyPtrOutput)
}

// The Specification for allowing client side cross-origin requests.
type HttpRouteCorsPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteCorsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteCorsPolicy)(nil)).Elem()
}

func (o HttpRouteCorsPolicyOutput) ToHttpRouteCorsPolicyOutput() HttpRouteCorsPolicyOutput {
	return o
}

func (o HttpRouteCorsPolicyOutput) ToHttpRouteCorsPolicyOutputWithContext(ctx context.Context) HttpRouteCorsPolicyOutput {
	return o
}

func (o HttpRouteCorsPolicyOutput) ToHttpRouteCorsPolicyPtrOutput() HttpRouteCorsPolicyPtrOutput {
	return o.ToHttpRouteCorsPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteCorsPolicyOutput) ToHttpRouteCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteCorsPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteCorsPolicy) *HttpRouteCorsPolicy {
		return &v
	}).(HttpRouteCorsPolicyPtrOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
func (o HttpRouteCorsPolicyOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) *bool { return v.AllowCredentials }).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Allow-Headers header.
func (o HttpRouteCorsPolicyOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for Access-Control-Allow-Methods header.
func (o HttpRouteCorsPolicyOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
func (o HttpRouteCorsPolicyOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
func (o HttpRouteCorsPolicyOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o HttpRouteCorsPolicyOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Expose-Headers header.
func (o HttpRouteCorsPolicyOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
func (o HttpRouteCorsPolicyOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicy) *string { return v.MaxAge }).(pulumi.StringPtrOutput)
}

type HttpRouteCorsPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteCorsPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteCorsPolicy)(nil)).Elem()
}

func (o HttpRouteCorsPolicyPtrOutput) ToHttpRouteCorsPolicyPtrOutput() HttpRouteCorsPolicyPtrOutput {
	return o
}

func (o HttpRouteCorsPolicyPtrOutput) ToHttpRouteCorsPolicyPtrOutputWithContext(ctx context.Context) HttpRouteCorsPolicyPtrOutput {
	return o
}

func (o HttpRouteCorsPolicyPtrOutput) Elem() HttpRouteCorsPolicyOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) HttpRouteCorsPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteCorsPolicy
		return ret
	}).(HttpRouteCorsPolicyOutput)
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
func (o HttpRouteCorsPolicyPtrOutput) AllowCredentials() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.AllowCredentials
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Allow-Headers header.
func (o HttpRouteCorsPolicyPtrOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies the content for Access-Control-Allow-Methods header.
func (o HttpRouteCorsPolicyPtrOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowMethods
	}).(pulumi.StringArrayOutput)
}

// Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
func (o HttpRouteCorsPolicyPtrOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOriginRegexes
	}).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
func (o HttpRouteCorsPolicyPtrOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.AllowOrigins
	}).(pulumi.StringArrayOutput)
}

// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o HttpRouteCorsPolicyPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the content for Access-Control-Expose-Headers header.
func (o HttpRouteCorsPolicyPtrOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) []string {
		if v == nil {
			return nil
		}
		return v.ExposeHeaders
	}).(pulumi.StringArrayOutput)
}

// Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
func (o HttpRouteCorsPolicyPtrOutput) MaxAge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteCorsPolicy) *string {
		if v == nil {
			return nil
		}
		return v.MaxAge
	}).(pulumi.StringPtrOutput)
}

// The Specification for allowing client side cross-origin requests.
type HttpRouteCorsPolicyResponse struct {
	// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
	AllowCredentials bool `pulumi:"allowCredentials"`
	// Specifies the content for Access-Control-Allow-Headers header.
	AllowHeaders []string `pulumi:"allowHeaders"`
	// Specifies the content for Access-Control-Allow-Methods header.
	AllowMethods []string `pulumi:"allowMethods"`
	// Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
	AllowOriginRegexes []string `pulumi:"allowOriginRegexes"`
	// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
	AllowOrigins []string `pulumi:"allowOrigins"`
	// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
	Disabled bool `pulumi:"disabled"`
	// Specifies the content for Access-Control-Expose-Headers header.
	ExposeHeaders []string `pulumi:"exposeHeaders"`
	// Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
	MaxAge string `pulumi:"maxAge"`
}

// The Specification for allowing client side cross-origin requests.
type HttpRouteCorsPolicyResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteCorsPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteCorsPolicyResponse)(nil)).Elem()
}

func (o HttpRouteCorsPolicyResponseOutput) ToHttpRouteCorsPolicyResponseOutput() HttpRouteCorsPolicyResponseOutput {
	return o
}

func (o HttpRouteCorsPolicyResponseOutput) ToHttpRouteCorsPolicyResponseOutputWithContext(ctx context.Context) HttpRouteCorsPolicyResponseOutput {
	return o
}

// In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.
func (o HttpRouteCorsPolicyResponseOutput) AllowCredentials() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) bool { return v.AllowCredentials }).(pulumi.BoolOutput)
}

// Specifies the content for Access-Control-Allow-Headers header.
func (o HttpRouteCorsPolicyResponseOutput) AllowHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) []string { return v.AllowHeaders }).(pulumi.StringArrayOutput)
}

// Specifies the content for Access-Control-Allow-Methods header.
func (o HttpRouteCorsPolicyResponseOutput) AllowMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) []string { return v.AllowMethods }).(pulumi.StringArrayOutput)
}

// Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.
func (o HttpRouteCorsPolicyResponseOutput) AllowOriginRegexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) []string { return v.AllowOriginRegexes }).(pulumi.StringArrayOutput)
}

// Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.
func (o HttpRouteCorsPolicyResponseOutput) AllowOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) []string { return v.AllowOrigins }).(pulumi.StringArrayOutput)
}

// If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.
func (o HttpRouteCorsPolicyResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// Specifies the content for Access-Control-Expose-Headers header.
func (o HttpRouteCorsPolicyResponseOutput) ExposeHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) []string { return v.ExposeHeaders }).(pulumi.StringArrayOutput)
}

// Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.
func (o HttpRouteCorsPolicyResponseOutput) MaxAge() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteCorsPolicyResponse) string { return v.MaxAge }).(pulumi.StringOutput)
}

// Specifications of a destination to which the request should be routed to.
type HttpRouteDestination struct {
	// The URL of a BackendService to route traffic to.
	ServiceName *string `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight *int `pulumi:"weight"`
}

// HttpRouteDestinationInput is an input type that accepts HttpRouteDestinationArgs and HttpRouteDestinationOutput values.
// You can construct a concrete instance of `HttpRouteDestinationInput` via:
//
//          HttpRouteDestinationArgs{...}
type HttpRouteDestinationInput interface {
	pulumi.Input

	ToHttpRouteDestinationOutput() HttpRouteDestinationOutput
	ToHttpRouteDestinationOutputWithContext(context.Context) HttpRouteDestinationOutput
}

// Specifications of a destination to which the request should be routed to.
type HttpRouteDestinationArgs struct {
	// The URL of a BackendService to route traffic to.
	ServiceName pulumi.StringPtrInput `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (HttpRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteDestination)(nil)).Elem()
}

func (i HttpRouteDestinationArgs) ToHttpRouteDestinationOutput() HttpRouteDestinationOutput {
	return i.ToHttpRouteDestinationOutputWithContext(context.Background())
}

func (i HttpRouteDestinationArgs) ToHttpRouteDestinationOutputWithContext(ctx context.Context) HttpRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteDestinationOutput)
}

func (i HttpRouteDestinationArgs) ToHttpRouteDestinationPtrOutput() HttpRouteDestinationPtrOutput {
	return i.ToHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i HttpRouteDestinationArgs) ToHttpRouteDestinationPtrOutputWithContext(ctx context.Context) HttpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteDestinationOutput).ToHttpRouteDestinationPtrOutputWithContext(ctx)
}

// HttpRouteDestinationPtrInput is an input type that accepts HttpRouteDestinationArgs, HttpRouteDestinationPtr and HttpRouteDestinationPtrOutput values.
// You can construct a concrete instance of `HttpRouteDestinationPtrInput` via:
//
//          HttpRouteDestinationArgs{...}
//
//  or:
//
//          nil
type HttpRouteDestinationPtrInput interface {
	pulumi.Input

	ToHttpRouteDestinationPtrOutput() HttpRouteDestinationPtrOutput
	ToHttpRouteDestinationPtrOutputWithContext(context.Context) HttpRouteDestinationPtrOutput
}

type httpRouteDestinationPtrType HttpRouteDestinationArgs

func HttpRouteDestinationPtr(v *HttpRouteDestinationArgs) HttpRouteDestinationPtrInput {
	return (*httpRouteDestinationPtrType)(v)
}

func (*httpRouteDestinationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteDestination)(nil)).Elem()
}

func (i *httpRouteDestinationPtrType) ToHttpRouteDestinationPtrOutput() HttpRouteDestinationPtrOutput {
	return i.ToHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (i *httpRouteDestinationPtrType) ToHttpRouteDestinationPtrOutputWithContext(ctx context.Context) HttpRouteDestinationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteDestinationPtrOutput)
}

// HttpRouteDestinationArrayInput is an input type that accepts HttpRouteDestinationArray and HttpRouteDestinationArrayOutput values.
// You can construct a concrete instance of `HttpRouteDestinationArrayInput` via:
//
//          HttpRouteDestinationArray{ HttpRouteDestinationArgs{...} }
type HttpRouteDestinationArrayInput interface {
	pulumi.Input

	ToHttpRouteDestinationArrayOutput() HttpRouteDestinationArrayOutput
	ToHttpRouteDestinationArrayOutputWithContext(context.Context) HttpRouteDestinationArrayOutput
}

type HttpRouteDestinationArray []HttpRouteDestinationInput

func (HttpRouteDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteDestination)(nil)).Elem()
}

func (i HttpRouteDestinationArray) ToHttpRouteDestinationArrayOutput() HttpRouteDestinationArrayOutput {
	return i.ToHttpRouteDestinationArrayOutputWithContext(context.Background())
}

func (i HttpRouteDestinationArray) ToHttpRouteDestinationArrayOutputWithContext(ctx context.Context) HttpRouteDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteDestinationArrayOutput)
}

// Specifications of a destination to which the request should be routed to.
type HttpRouteDestinationOutput struct{ *pulumi.OutputState }

func (HttpRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteDestination)(nil)).Elem()
}

func (o HttpRouteDestinationOutput) ToHttpRouteDestinationOutput() HttpRouteDestinationOutput {
	return o
}

func (o HttpRouteDestinationOutput) ToHttpRouteDestinationOutputWithContext(ctx context.Context) HttpRouteDestinationOutput {
	return o
}

func (o HttpRouteDestinationOutput) ToHttpRouteDestinationPtrOutput() HttpRouteDestinationPtrOutput {
	return o.ToHttpRouteDestinationPtrOutputWithContext(context.Background())
}

func (o HttpRouteDestinationOutput) ToHttpRouteDestinationPtrOutputWithContext(ctx context.Context) HttpRouteDestinationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteDestination) *HttpRouteDestination {
		return &v
	}).(HttpRouteDestinationPtrOutput)
}

// The URL of a BackendService to route traffic to.
func (o HttpRouteDestinationOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteDestination) *string { return v.ServiceName }).(pulumi.StringPtrOutput)
}

// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o HttpRouteDestinationOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteDestination) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type HttpRouteDestinationPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteDestinationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteDestination)(nil)).Elem()
}

func (o HttpRouteDestinationPtrOutput) ToHttpRouteDestinationPtrOutput() HttpRouteDestinationPtrOutput {
	return o
}

func (o HttpRouteDestinationPtrOutput) ToHttpRouteDestinationPtrOutputWithContext(ctx context.Context) HttpRouteDestinationPtrOutput {
	return o
}

func (o HttpRouteDestinationPtrOutput) Elem() HttpRouteDestinationOutput {
	return o.ApplyT(func(v *HttpRouteDestination) HttpRouteDestination {
		if v != nil {
			return *v
		}
		var ret HttpRouteDestination
		return ret
	}).(HttpRouteDestinationOutput)
}

// The URL of a BackendService to route traffic to.
func (o HttpRouteDestinationPtrOutput) ServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteDestination) *string {
		if v == nil {
			return nil
		}
		return v.ServiceName
	}).(pulumi.StringPtrOutput)
}

// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o HttpRouteDestinationPtrOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteDestination) *int {
		if v == nil {
			return nil
		}
		return v.Weight
	}).(pulumi.IntPtrOutput)
}

type HttpRouteDestinationArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteDestination)(nil)).Elem()
}

func (o HttpRouteDestinationArrayOutput) ToHttpRouteDestinationArrayOutput() HttpRouteDestinationArrayOutput {
	return o
}

func (o HttpRouteDestinationArrayOutput) ToHttpRouteDestinationArrayOutputWithContext(ctx context.Context) HttpRouteDestinationArrayOutput {
	return o
}

func (o HttpRouteDestinationArrayOutput) Index(i pulumi.IntInput) HttpRouteDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteDestination {
		return vs[0].([]HttpRouteDestination)[vs[1].(int)]
	}).(HttpRouteDestinationOutput)
}

// Specifications of a destination to which the request should be routed to.
type HttpRouteDestinationResponse struct {
	// The URL of a BackendService to route traffic to.
	ServiceName string `pulumi:"serviceName"`
	// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight int `pulumi:"weight"`
}

// Specifications of a destination to which the request should be routed to.
type HttpRouteDestinationResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteDestinationResponse)(nil)).Elem()
}

func (o HttpRouteDestinationResponseOutput) ToHttpRouteDestinationResponseOutput() HttpRouteDestinationResponseOutput {
	return o
}

func (o HttpRouteDestinationResponseOutput) ToHttpRouteDestinationResponseOutputWithContext(ctx context.Context) HttpRouteDestinationResponseOutput {
	return o
}

// The URL of a BackendService to route traffic to.
func (o HttpRouteDestinationResponseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteDestinationResponse) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o HttpRouteDestinationResponseOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteDestinationResponse) int { return v.Weight }).(pulumi.IntOutput)
}

type HttpRouteDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteDestinationResponse)(nil)).Elem()
}

func (o HttpRouteDestinationResponseArrayOutput) ToHttpRouteDestinationResponseArrayOutput() HttpRouteDestinationResponseArrayOutput {
	return o
}

func (o HttpRouteDestinationResponseArrayOutput) ToHttpRouteDestinationResponseArrayOutputWithContext(ctx context.Context) HttpRouteDestinationResponseArrayOutput {
	return o
}

func (o HttpRouteDestinationResponseArrayOutput) Index(i pulumi.IntInput) HttpRouteDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteDestinationResponse {
		return vs[0].([]HttpRouteDestinationResponse)[vs[1].(int)]
	}).(HttpRouteDestinationResponseOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
type HttpRouteFaultInjectionPolicy struct {
	// The specification for aborting to client requests.
	Abort *HttpRouteFaultInjectionPolicyAbort `pulumi:"abort"`
	// The specification for injecting delay to client requests.
	Delay *HttpRouteFaultInjectionPolicyDelay `pulumi:"delay"`
}

// HttpRouteFaultInjectionPolicyInput is an input type that accepts HttpRouteFaultInjectionPolicyArgs and HttpRouteFaultInjectionPolicyOutput values.
// You can construct a concrete instance of `HttpRouteFaultInjectionPolicyInput` via:
//
//          HttpRouteFaultInjectionPolicyArgs{...}
type HttpRouteFaultInjectionPolicyInput interface {
	pulumi.Input

	ToHttpRouteFaultInjectionPolicyOutput() HttpRouteFaultInjectionPolicyOutput
	ToHttpRouteFaultInjectionPolicyOutputWithContext(context.Context) HttpRouteFaultInjectionPolicyOutput
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
type HttpRouteFaultInjectionPolicyArgs struct {
	// The specification for aborting to client requests.
	Abort HttpRouteFaultInjectionPolicyAbortPtrInput `pulumi:"abort"`
	// The specification for injecting delay to client requests.
	Delay HttpRouteFaultInjectionPolicyDelayPtrInput `pulumi:"delay"`
}

func (HttpRouteFaultInjectionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicy)(nil)).Elem()
}

func (i HttpRouteFaultInjectionPolicyArgs) ToHttpRouteFaultInjectionPolicyOutput() HttpRouteFaultInjectionPolicyOutput {
	return i.ToHttpRouteFaultInjectionPolicyOutputWithContext(context.Background())
}

func (i HttpRouteFaultInjectionPolicyArgs) ToHttpRouteFaultInjectionPolicyOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyOutput)
}

func (i HttpRouteFaultInjectionPolicyArgs) ToHttpRouteFaultInjectionPolicyPtrOutput() HttpRouteFaultInjectionPolicyPtrOutput {
	return i.ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteFaultInjectionPolicyArgs) ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyOutput).ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(ctx)
}

// HttpRouteFaultInjectionPolicyPtrInput is an input type that accepts HttpRouteFaultInjectionPolicyArgs, HttpRouteFaultInjectionPolicyPtr and HttpRouteFaultInjectionPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteFaultInjectionPolicyPtrInput` via:
//
//          HttpRouteFaultInjectionPolicyArgs{...}
//
//  or:
//
//          nil
type HttpRouteFaultInjectionPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteFaultInjectionPolicyPtrOutput() HttpRouteFaultInjectionPolicyPtrOutput
	ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(context.Context) HttpRouteFaultInjectionPolicyPtrOutput
}

type httpRouteFaultInjectionPolicyPtrType HttpRouteFaultInjectionPolicyArgs

func HttpRouteFaultInjectionPolicyPtr(v *HttpRouteFaultInjectionPolicyArgs) HttpRouteFaultInjectionPolicyPtrInput {
	return (*httpRouteFaultInjectionPolicyPtrType)(v)
}

func (*httpRouteFaultInjectionPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteFaultInjectionPolicy)(nil)).Elem()
}

func (i *httpRouteFaultInjectionPolicyPtrType) ToHttpRouteFaultInjectionPolicyPtrOutput() HttpRouteFaultInjectionPolicyPtrOutput {
	return i.ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteFaultInjectionPolicyPtrType) ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyPtrOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
type HttpRouteFaultInjectionPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicy)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyOutput) ToHttpRouteFaultInjectionPolicyOutput() HttpRouteFaultInjectionPolicyOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyOutput) ToHttpRouteFaultInjectionPolicyOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyOutput) ToHttpRouteFaultInjectionPolicyPtrOutput() HttpRouteFaultInjectionPolicyPtrOutput {
	return o.ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteFaultInjectionPolicyOutput) ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteFaultInjectionPolicy) *HttpRouteFaultInjectionPolicy {
		return &v
	}).(HttpRouteFaultInjectionPolicyPtrOutput)
}

// The specification for aborting to client requests.
func (o HttpRouteFaultInjectionPolicyOutput) Abort() HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicy) *HttpRouteFaultInjectionPolicyAbort { return v.Abort }).(HttpRouteFaultInjectionPolicyAbortPtrOutput)
}

// The specification for injecting delay to client requests.
func (o HttpRouteFaultInjectionPolicyOutput) Delay() HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicy) *HttpRouteFaultInjectionPolicyDelay { return v.Delay }).(HttpRouteFaultInjectionPolicyDelayPtrOutput)
}

type HttpRouteFaultInjectionPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteFaultInjectionPolicy)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyPtrOutput) ToHttpRouteFaultInjectionPolicyPtrOutput() HttpRouteFaultInjectionPolicyPtrOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyPtrOutput) ToHttpRouteFaultInjectionPolicyPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyPtrOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyPtrOutput) Elem() HttpRouteFaultInjectionPolicyOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicy) HttpRouteFaultInjectionPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteFaultInjectionPolicy
		return ret
	}).(HttpRouteFaultInjectionPolicyOutput)
}

// The specification for aborting to client requests.
func (o HttpRouteFaultInjectionPolicyPtrOutput) Abort() HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicy) *HttpRouteFaultInjectionPolicyAbort {
		if v == nil {
			return nil
		}
		return v.Abort
	}).(HttpRouteFaultInjectionPolicyAbortPtrOutput)
}

// The specification for injecting delay to client requests.
func (o HttpRouteFaultInjectionPolicyPtrOutput) Delay() HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicy) *HttpRouteFaultInjectionPolicyDelay {
		if v == nil {
			return nil
		}
		return v.Delay
	}).(HttpRouteFaultInjectionPolicyDelayPtrOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyAbort struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
	HttpStatus *int `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted. The value must be between [0, 100]
	Percentage *int `pulumi:"percentage"`
}

// HttpRouteFaultInjectionPolicyAbortInput is an input type that accepts HttpRouteFaultInjectionPolicyAbortArgs and HttpRouteFaultInjectionPolicyAbortOutput values.
// You can construct a concrete instance of `HttpRouteFaultInjectionPolicyAbortInput` via:
//
//          HttpRouteFaultInjectionPolicyAbortArgs{...}
type HttpRouteFaultInjectionPolicyAbortInput interface {
	pulumi.Input

	ToHttpRouteFaultInjectionPolicyAbortOutput() HttpRouteFaultInjectionPolicyAbortOutput
	ToHttpRouteFaultInjectionPolicyAbortOutputWithContext(context.Context) HttpRouteFaultInjectionPolicyAbortOutput
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyAbortArgs struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
	HttpStatus pulumi.IntPtrInput `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted. The value must be between [0, 100]
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (HttpRouteFaultInjectionPolicyAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i HttpRouteFaultInjectionPolicyAbortArgs) ToHttpRouteFaultInjectionPolicyAbortOutput() HttpRouteFaultInjectionPolicyAbortOutput {
	return i.ToHttpRouteFaultInjectionPolicyAbortOutputWithContext(context.Background())
}

func (i HttpRouteFaultInjectionPolicyAbortArgs) ToHttpRouteFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyAbortOutput)
}

func (i HttpRouteFaultInjectionPolicyAbortArgs) ToHttpRouteFaultInjectionPolicyAbortPtrOutput() HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return i.ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i HttpRouteFaultInjectionPolicyAbortArgs) ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyAbortOutput).ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx)
}

// HttpRouteFaultInjectionPolicyAbortPtrInput is an input type that accepts HttpRouteFaultInjectionPolicyAbortArgs, HttpRouteFaultInjectionPolicyAbortPtr and HttpRouteFaultInjectionPolicyAbortPtrOutput values.
// You can construct a concrete instance of `HttpRouteFaultInjectionPolicyAbortPtrInput` via:
//
//          HttpRouteFaultInjectionPolicyAbortArgs{...}
//
//  or:
//
//          nil
type HttpRouteFaultInjectionPolicyAbortPtrInput interface {
	pulumi.Input

	ToHttpRouteFaultInjectionPolicyAbortPtrOutput() HttpRouteFaultInjectionPolicyAbortPtrOutput
	ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Context) HttpRouteFaultInjectionPolicyAbortPtrOutput
}

type httpRouteFaultInjectionPolicyAbortPtrType HttpRouteFaultInjectionPolicyAbortArgs

func HttpRouteFaultInjectionPolicyAbortPtr(v *HttpRouteFaultInjectionPolicyAbortArgs) HttpRouteFaultInjectionPolicyAbortPtrInput {
	return (*httpRouteFaultInjectionPolicyAbortPtrType)(v)
}

func (*httpRouteFaultInjectionPolicyAbortPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (i *httpRouteFaultInjectionPolicyAbortPtrType) ToHttpRouteFaultInjectionPolicyAbortPtrOutput() HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return i.ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (i *httpRouteFaultInjectionPolicyAbortPtrType) ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyAbortPtrOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyAbortOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyAbortOutput) ToHttpRouteFaultInjectionPolicyAbortOutput() HttpRouteFaultInjectionPolicyAbortOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyAbortOutput) ToHttpRouteFaultInjectionPolicyAbortOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyAbortOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyAbortOutput) ToHttpRouteFaultInjectionPolicyAbortPtrOutput() HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(context.Background())
}

func (o HttpRouteFaultInjectionPolicyAbortOutput) ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteFaultInjectionPolicyAbort) *HttpRouteFaultInjectionPolicyAbort {
		return &v
	}).(HttpRouteFaultInjectionPolicyAbortPtrOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
func (o HttpRouteFaultInjectionPolicyAbortOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyAbort) *int { return v.HttpStatus }).(pulumi.IntPtrOutput)
}

// The percentage of traffic which will be aborted. The value must be between [0, 100]
func (o HttpRouteFaultInjectionPolicyAbortOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyAbort) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type HttpRouteFaultInjectionPolicyAbortPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyAbortPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteFaultInjectionPolicyAbort)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyAbortPtrOutput) ToHttpRouteFaultInjectionPolicyAbortPtrOutput() HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyAbortPtrOutput) ToHttpRouteFaultInjectionPolicyAbortPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyAbortPtrOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyAbortPtrOutput) Elem() HttpRouteFaultInjectionPolicyAbortOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicyAbort) HttpRouteFaultInjectionPolicyAbort {
		if v != nil {
			return *v
		}
		var ret HttpRouteFaultInjectionPolicyAbort
		return ret
	}).(HttpRouteFaultInjectionPolicyAbortOutput)
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
func (o HttpRouteFaultInjectionPolicyAbortPtrOutput) HttpStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.HttpStatus
	}).(pulumi.IntPtrOutput)
}

// The percentage of traffic which will be aborted. The value must be between [0, 100]
func (o HttpRouteFaultInjectionPolicyAbortPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicyAbort) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyAbortResponse struct {
	// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
	HttpStatus int `pulumi:"httpStatus"`
	// The percentage of traffic which will be aborted. The value must be between [0, 100]
	Percentage int `pulumi:"percentage"`
}

// Specification of how client requests are aborted as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyAbortResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyAbortResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicyAbortResponse)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyAbortResponseOutput) ToHttpRouteFaultInjectionPolicyAbortResponseOutput() HttpRouteFaultInjectionPolicyAbortResponseOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyAbortResponseOutput) ToHttpRouteFaultInjectionPolicyAbortResponseOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyAbortResponseOutput {
	return o
}

// The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.
func (o HttpRouteFaultInjectionPolicyAbortResponseOutput) HttpStatus() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyAbortResponse) int { return v.HttpStatus }).(pulumi.IntOutput)
}

// The percentage of traffic which will be aborted. The value must be between [0, 100]
func (o HttpRouteFaultInjectionPolicyAbortResponseOutput) Percentage() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyAbortResponse) int { return v.Percentage }).(pulumi.IntOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyDelay struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay *string `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
	Percentage *int `pulumi:"percentage"`
}

// HttpRouteFaultInjectionPolicyDelayInput is an input type that accepts HttpRouteFaultInjectionPolicyDelayArgs and HttpRouteFaultInjectionPolicyDelayOutput values.
// You can construct a concrete instance of `HttpRouteFaultInjectionPolicyDelayInput` via:
//
//          HttpRouteFaultInjectionPolicyDelayArgs{...}
type HttpRouteFaultInjectionPolicyDelayInput interface {
	pulumi.Input

	ToHttpRouteFaultInjectionPolicyDelayOutput() HttpRouteFaultInjectionPolicyDelayOutput
	ToHttpRouteFaultInjectionPolicyDelayOutputWithContext(context.Context) HttpRouteFaultInjectionPolicyDelayOutput
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyDelayArgs struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay pulumi.StringPtrInput `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
	Percentage pulumi.IntPtrInput `pulumi:"percentage"`
}

func (HttpRouteFaultInjectionPolicyDelayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i HttpRouteFaultInjectionPolicyDelayArgs) ToHttpRouteFaultInjectionPolicyDelayOutput() HttpRouteFaultInjectionPolicyDelayOutput {
	return i.ToHttpRouteFaultInjectionPolicyDelayOutputWithContext(context.Background())
}

func (i HttpRouteFaultInjectionPolicyDelayArgs) ToHttpRouteFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyDelayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyDelayOutput)
}

func (i HttpRouteFaultInjectionPolicyDelayArgs) ToHttpRouteFaultInjectionPolicyDelayPtrOutput() HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return i.ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i HttpRouteFaultInjectionPolicyDelayArgs) ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyDelayOutput).ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx)
}

// HttpRouteFaultInjectionPolicyDelayPtrInput is an input type that accepts HttpRouteFaultInjectionPolicyDelayArgs, HttpRouteFaultInjectionPolicyDelayPtr and HttpRouteFaultInjectionPolicyDelayPtrOutput values.
// You can construct a concrete instance of `HttpRouteFaultInjectionPolicyDelayPtrInput` via:
//
//          HttpRouteFaultInjectionPolicyDelayArgs{...}
//
//  or:
//
//          nil
type HttpRouteFaultInjectionPolicyDelayPtrInput interface {
	pulumi.Input

	ToHttpRouteFaultInjectionPolicyDelayPtrOutput() HttpRouteFaultInjectionPolicyDelayPtrOutput
	ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Context) HttpRouteFaultInjectionPolicyDelayPtrOutput
}

type httpRouteFaultInjectionPolicyDelayPtrType HttpRouteFaultInjectionPolicyDelayArgs

func HttpRouteFaultInjectionPolicyDelayPtr(v *HttpRouteFaultInjectionPolicyDelayArgs) HttpRouteFaultInjectionPolicyDelayPtrInput {
	return (*httpRouteFaultInjectionPolicyDelayPtrType)(v)
}

func (*httpRouteFaultInjectionPolicyDelayPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (i *httpRouteFaultInjectionPolicyDelayPtrType) ToHttpRouteFaultInjectionPolicyDelayPtrOutput() HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return i.ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (i *httpRouteFaultInjectionPolicyDelayPtrType) ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteFaultInjectionPolicyDelayPtrOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyDelayOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyDelayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyDelayOutput) ToHttpRouteFaultInjectionPolicyDelayOutput() HttpRouteFaultInjectionPolicyDelayOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyDelayOutput) ToHttpRouteFaultInjectionPolicyDelayOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyDelayOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyDelayOutput) ToHttpRouteFaultInjectionPolicyDelayPtrOutput() HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(context.Background())
}

func (o HttpRouteFaultInjectionPolicyDelayOutput) ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteFaultInjectionPolicyDelay) *HttpRouteFaultInjectionPolicyDelay {
		return &v
	}).(HttpRouteFaultInjectionPolicyDelayPtrOutput)
}

// Specify a fixed delay before forwarding the request.
func (o HttpRouteFaultInjectionPolicyDelayOutput) FixedDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyDelay) *string { return v.FixedDelay }).(pulumi.StringPtrOutput)
}

// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
func (o HttpRouteFaultInjectionPolicyDelayOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyDelay) *int { return v.Percentage }).(pulumi.IntPtrOutput)
}

type HttpRouteFaultInjectionPolicyDelayPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyDelayPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteFaultInjectionPolicyDelay)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyDelayPtrOutput) ToHttpRouteFaultInjectionPolicyDelayPtrOutput() HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyDelayPtrOutput) ToHttpRouteFaultInjectionPolicyDelayPtrOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyDelayPtrOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyDelayPtrOutput) Elem() HttpRouteFaultInjectionPolicyDelayOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicyDelay) HttpRouteFaultInjectionPolicyDelay {
		if v != nil {
			return *v
		}
		var ret HttpRouteFaultInjectionPolicyDelay
		return ret
	}).(HttpRouteFaultInjectionPolicyDelayOutput)
}

// Specify a fixed delay before forwarding the request.
func (o HttpRouteFaultInjectionPolicyDelayPtrOutput) FixedDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicyDelay) *string {
		if v == nil {
			return nil
		}
		return v.FixedDelay
	}).(pulumi.StringPtrOutput)
}

// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
func (o HttpRouteFaultInjectionPolicyDelayPtrOutput) Percentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteFaultInjectionPolicyDelay) *int {
		if v == nil {
			return nil
		}
		return v.Percentage
	}).(pulumi.IntPtrOutput)
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyDelayResponse struct {
	// Specify a fixed delay before forwarding the request.
	FixedDelay string `pulumi:"fixedDelay"`
	// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
	Percentage int `pulumi:"percentage"`
}

// Specification of how client requests are delayed as part of fault injection before being sent to a destination.
type HttpRouteFaultInjectionPolicyDelayResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyDelayResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicyDelayResponse)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyDelayResponseOutput) ToHttpRouteFaultInjectionPolicyDelayResponseOutput() HttpRouteFaultInjectionPolicyDelayResponseOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyDelayResponseOutput) ToHttpRouteFaultInjectionPolicyDelayResponseOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyDelayResponseOutput {
	return o
}

// Specify a fixed delay before forwarding the request.
func (o HttpRouteFaultInjectionPolicyDelayResponseOutput) FixedDelay() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyDelayResponse) string { return v.FixedDelay }).(pulumi.StringOutput)
}

// The percentage of traffic on which delay will be injected. The value must be between [0, 100]
func (o HttpRouteFaultInjectionPolicyDelayResponseOutput) Percentage() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyDelayResponse) int { return v.Percentage }).(pulumi.IntOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
type HttpRouteFaultInjectionPolicyResponse struct {
	// The specification for aborting to client requests.
	Abort HttpRouteFaultInjectionPolicyAbortResponse `pulumi:"abort"`
	// The specification for injecting delay to client requests.
	Delay HttpRouteFaultInjectionPolicyDelayResponse `pulumi:"delay"`
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.
type HttpRouteFaultInjectionPolicyResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteFaultInjectionPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteFaultInjectionPolicyResponse)(nil)).Elem()
}

func (o HttpRouteFaultInjectionPolicyResponseOutput) ToHttpRouteFaultInjectionPolicyResponseOutput() HttpRouteFaultInjectionPolicyResponseOutput {
	return o
}

func (o HttpRouteFaultInjectionPolicyResponseOutput) ToHttpRouteFaultInjectionPolicyResponseOutputWithContext(ctx context.Context) HttpRouteFaultInjectionPolicyResponseOutput {
	return o
}

// The specification for aborting to client requests.
func (o HttpRouteFaultInjectionPolicyResponseOutput) Abort() HttpRouteFaultInjectionPolicyAbortResponseOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyResponse) HttpRouteFaultInjectionPolicyAbortResponse {
		return v.Abort
	}).(HttpRouteFaultInjectionPolicyAbortResponseOutput)
}

// The specification for injecting delay to client requests.
func (o HttpRouteFaultInjectionPolicyResponseOutput) Delay() HttpRouteFaultInjectionPolicyDelayResponseOutput {
	return o.ApplyT(func(v HttpRouteFaultInjectionPolicyResponse) HttpRouteFaultInjectionPolicyDelayResponse {
		return v.Delay
	}).(HttpRouteFaultInjectionPolicyDelayResponseOutput)
}

// Specifies how to select a route rule based on HTTP request headers.
type HttpRouteHeaderMatch struct {
	// The value of the header should match exactly the content of exact_match.
	ExactMatch *string `pulumi:"exactMatch"`
	// The name of the HTTP header to match against.
	Header *string `pulumi:"header"`
	// If specified, the match result will be inverted before checking. Default value is set to false.
	InvertMatch *bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefix_match.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// A header with header_name must exist. The match takes place whether or not the header has a value.
	PresentMatch *bool `pulumi:"presentMatch"`
	// If specified, the rule will match if the request header value is within the range.
	RangeMatch *HttpRouteHeaderMatchIntegerRange `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
	RegexMatch *string `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffix_match.
	SuffixMatch *string `pulumi:"suffixMatch"`
}

// HttpRouteHeaderMatchInput is an input type that accepts HttpRouteHeaderMatchArgs and HttpRouteHeaderMatchOutput values.
// You can construct a concrete instance of `HttpRouteHeaderMatchInput` via:
//
//          HttpRouteHeaderMatchArgs{...}
type HttpRouteHeaderMatchInput interface {
	pulumi.Input

	ToHttpRouteHeaderMatchOutput() HttpRouteHeaderMatchOutput
	ToHttpRouteHeaderMatchOutputWithContext(context.Context) HttpRouteHeaderMatchOutput
}

// Specifies how to select a route rule based on HTTP request headers.
type HttpRouteHeaderMatchArgs struct {
	// The value of the header should match exactly the content of exact_match.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// The name of the HTTP header to match against.
	Header pulumi.StringPtrInput `pulumi:"header"`
	// If specified, the match result will be inverted before checking. Default value is set to false.
	InvertMatch pulumi.BoolPtrInput `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefix_match.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// A header with header_name must exist. The match takes place whether or not the header has a value.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// If specified, the rule will match if the request header value is within the range.
	RangeMatch HttpRouteHeaderMatchIntegerRangePtrInput `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffix_match.
	SuffixMatch pulumi.StringPtrInput `pulumi:"suffixMatch"`
}

func (HttpRouteHeaderMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderMatch)(nil)).Elem()
}

func (i HttpRouteHeaderMatchArgs) ToHttpRouteHeaderMatchOutput() HttpRouteHeaderMatchOutput {
	return i.ToHttpRouteHeaderMatchOutputWithContext(context.Background())
}

func (i HttpRouteHeaderMatchArgs) ToHttpRouteHeaderMatchOutputWithContext(ctx context.Context) HttpRouteHeaderMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderMatchOutput)
}

// HttpRouteHeaderMatchArrayInput is an input type that accepts HttpRouteHeaderMatchArray and HttpRouteHeaderMatchArrayOutput values.
// You can construct a concrete instance of `HttpRouteHeaderMatchArrayInput` via:
//
//          HttpRouteHeaderMatchArray{ HttpRouteHeaderMatchArgs{...} }
type HttpRouteHeaderMatchArrayInput interface {
	pulumi.Input

	ToHttpRouteHeaderMatchArrayOutput() HttpRouteHeaderMatchArrayOutput
	ToHttpRouteHeaderMatchArrayOutputWithContext(context.Context) HttpRouteHeaderMatchArrayOutput
}

type HttpRouteHeaderMatchArray []HttpRouteHeaderMatchInput

func (HttpRouteHeaderMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteHeaderMatch)(nil)).Elem()
}

func (i HttpRouteHeaderMatchArray) ToHttpRouteHeaderMatchArrayOutput() HttpRouteHeaderMatchArrayOutput {
	return i.ToHttpRouteHeaderMatchArrayOutputWithContext(context.Background())
}

func (i HttpRouteHeaderMatchArray) ToHttpRouteHeaderMatchArrayOutputWithContext(ctx context.Context) HttpRouteHeaderMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderMatchArrayOutput)
}

// Specifies how to select a route rule based on HTTP request headers.
type HttpRouteHeaderMatchOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderMatch)(nil)).Elem()
}

func (o HttpRouteHeaderMatchOutput) ToHttpRouteHeaderMatchOutput() HttpRouteHeaderMatchOutput {
	return o
}

func (o HttpRouteHeaderMatchOutput) ToHttpRouteHeaderMatchOutputWithContext(ctx context.Context) HttpRouteHeaderMatchOutput {
	return o
}

// The value of the header should match exactly the content of exact_match.
func (o HttpRouteHeaderMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// The name of the HTTP header to match against.
func (o HttpRouteHeaderMatchOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *string { return v.Header }).(pulumi.StringPtrOutput)
}

// If specified, the match result will be inverted before checking. Default value is set to false.
func (o HttpRouteHeaderMatchOutput) InvertMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *bool { return v.InvertMatch }).(pulumi.BoolPtrOutput)
}

// The value of the header must start with the contents of prefix_match.
func (o HttpRouteHeaderMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// A header with header_name must exist. The match takes place whether or not the header has a value.
func (o HttpRouteHeaderMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// If specified, the rule will match if the request header value is within the range.
func (o HttpRouteHeaderMatchOutput) RangeMatch() HttpRouteHeaderMatchIntegerRangePtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *HttpRouteHeaderMatchIntegerRange { return v.RangeMatch }).(HttpRouteHeaderMatchIntegerRangePtrOutput)
}

// The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
func (o HttpRouteHeaderMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

// The value of the header must end with the contents of suffix_match.
func (o HttpRouteHeaderMatchOutput) SuffixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatch) *string { return v.SuffixMatch }).(pulumi.StringPtrOutput)
}

type HttpRouteHeaderMatchArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteHeaderMatch)(nil)).Elem()
}

func (o HttpRouteHeaderMatchArrayOutput) ToHttpRouteHeaderMatchArrayOutput() HttpRouteHeaderMatchArrayOutput {
	return o
}

func (o HttpRouteHeaderMatchArrayOutput) ToHttpRouteHeaderMatchArrayOutputWithContext(ctx context.Context) HttpRouteHeaderMatchArrayOutput {
	return o
}

func (o HttpRouteHeaderMatchArrayOutput) Index(i pulumi.IntInput) HttpRouteHeaderMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteHeaderMatch {
		return vs[0].([]HttpRouteHeaderMatch)[vs[1].(int)]
	}).(HttpRouteHeaderMatchOutput)
}

// Represents an integer value range.
type HttpRouteHeaderMatchIntegerRange struct {
	// End of the range (exclusive)
	End *int `pulumi:"end"`
	// Start of the range (inclusive)
	Start *int `pulumi:"start"`
}

// HttpRouteHeaderMatchIntegerRangeInput is an input type that accepts HttpRouteHeaderMatchIntegerRangeArgs and HttpRouteHeaderMatchIntegerRangeOutput values.
// You can construct a concrete instance of `HttpRouteHeaderMatchIntegerRangeInput` via:
//
//          HttpRouteHeaderMatchIntegerRangeArgs{...}
type HttpRouteHeaderMatchIntegerRangeInput interface {
	pulumi.Input

	ToHttpRouteHeaderMatchIntegerRangeOutput() HttpRouteHeaderMatchIntegerRangeOutput
	ToHttpRouteHeaderMatchIntegerRangeOutputWithContext(context.Context) HttpRouteHeaderMatchIntegerRangeOutput
}

// Represents an integer value range.
type HttpRouteHeaderMatchIntegerRangeArgs struct {
	// End of the range (exclusive)
	End pulumi.IntPtrInput `pulumi:"end"`
	// Start of the range (inclusive)
	Start pulumi.IntPtrInput `pulumi:"start"`
}

func (HttpRouteHeaderMatchIntegerRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderMatchIntegerRange)(nil)).Elem()
}

func (i HttpRouteHeaderMatchIntegerRangeArgs) ToHttpRouteHeaderMatchIntegerRangeOutput() HttpRouteHeaderMatchIntegerRangeOutput {
	return i.ToHttpRouteHeaderMatchIntegerRangeOutputWithContext(context.Background())
}

func (i HttpRouteHeaderMatchIntegerRangeArgs) ToHttpRouteHeaderMatchIntegerRangeOutputWithContext(ctx context.Context) HttpRouteHeaderMatchIntegerRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderMatchIntegerRangeOutput)
}

func (i HttpRouteHeaderMatchIntegerRangeArgs) ToHttpRouteHeaderMatchIntegerRangePtrOutput() HttpRouteHeaderMatchIntegerRangePtrOutput {
	return i.ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(context.Background())
}

func (i HttpRouteHeaderMatchIntegerRangeArgs) ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(ctx context.Context) HttpRouteHeaderMatchIntegerRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderMatchIntegerRangeOutput).ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(ctx)
}

// HttpRouteHeaderMatchIntegerRangePtrInput is an input type that accepts HttpRouteHeaderMatchIntegerRangeArgs, HttpRouteHeaderMatchIntegerRangePtr and HttpRouteHeaderMatchIntegerRangePtrOutput values.
// You can construct a concrete instance of `HttpRouteHeaderMatchIntegerRangePtrInput` via:
//
//          HttpRouteHeaderMatchIntegerRangeArgs{...}
//
//  or:
//
//          nil
type HttpRouteHeaderMatchIntegerRangePtrInput interface {
	pulumi.Input

	ToHttpRouteHeaderMatchIntegerRangePtrOutput() HttpRouteHeaderMatchIntegerRangePtrOutput
	ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(context.Context) HttpRouteHeaderMatchIntegerRangePtrOutput
}

type httpRouteHeaderMatchIntegerRangePtrType HttpRouteHeaderMatchIntegerRangeArgs

func HttpRouteHeaderMatchIntegerRangePtr(v *HttpRouteHeaderMatchIntegerRangeArgs) HttpRouteHeaderMatchIntegerRangePtrInput {
	return (*httpRouteHeaderMatchIntegerRangePtrType)(v)
}

func (*httpRouteHeaderMatchIntegerRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteHeaderMatchIntegerRange)(nil)).Elem()
}

func (i *httpRouteHeaderMatchIntegerRangePtrType) ToHttpRouteHeaderMatchIntegerRangePtrOutput() HttpRouteHeaderMatchIntegerRangePtrOutput {
	return i.ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(context.Background())
}

func (i *httpRouteHeaderMatchIntegerRangePtrType) ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(ctx context.Context) HttpRouteHeaderMatchIntegerRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderMatchIntegerRangePtrOutput)
}

// Represents an integer value range.
type HttpRouteHeaderMatchIntegerRangeOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderMatchIntegerRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderMatchIntegerRange)(nil)).Elem()
}

func (o HttpRouteHeaderMatchIntegerRangeOutput) ToHttpRouteHeaderMatchIntegerRangeOutput() HttpRouteHeaderMatchIntegerRangeOutput {
	return o
}

func (o HttpRouteHeaderMatchIntegerRangeOutput) ToHttpRouteHeaderMatchIntegerRangeOutputWithContext(ctx context.Context) HttpRouteHeaderMatchIntegerRangeOutput {
	return o
}

func (o HttpRouteHeaderMatchIntegerRangeOutput) ToHttpRouteHeaderMatchIntegerRangePtrOutput() HttpRouteHeaderMatchIntegerRangePtrOutput {
	return o.ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(context.Background())
}

func (o HttpRouteHeaderMatchIntegerRangeOutput) ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(ctx context.Context) HttpRouteHeaderMatchIntegerRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteHeaderMatchIntegerRange) *HttpRouteHeaderMatchIntegerRange {
		return &v
	}).(HttpRouteHeaderMatchIntegerRangePtrOutput)
}

// End of the range (exclusive)
func (o HttpRouteHeaderMatchIntegerRangeOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchIntegerRange) *int { return v.End }).(pulumi.IntPtrOutput)
}

// Start of the range (inclusive)
func (o HttpRouteHeaderMatchIntegerRangeOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchIntegerRange) *int { return v.Start }).(pulumi.IntPtrOutput)
}

type HttpRouteHeaderMatchIntegerRangePtrOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderMatchIntegerRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteHeaderMatchIntegerRange)(nil)).Elem()
}

func (o HttpRouteHeaderMatchIntegerRangePtrOutput) ToHttpRouteHeaderMatchIntegerRangePtrOutput() HttpRouteHeaderMatchIntegerRangePtrOutput {
	return o
}

func (o HttpRouteHeaderMatchIntegerRangePtrOutput) ToHttpRouteHeaderMatchIntegerRangePtrOutputWithContext(ctx context.Context) HttpRouteHeaderMatchIntegerRangePtrOutput {
	return o
}

func (o HttpRouteHeaderMatchIntegerRangePtrOutput) Elem() HttpRouteHeaderMatchIntegerRangeOutput {
	return o.ApplyT(func(v *HttpRouteHeaderMatchIntegerRange) HttpRouteHeaderMatchIntegerRange {
		if v != nil {
			return *v
		}
		var ret HttpRouteHeaderMatchIntegerRange
		return ret
	}).(HttpRouteHeaderMatchIntegerRangeOutput)
}

// End of the range (exclusive)
func (o HttpRouteHeaderMatchIntegerRangePtrOutput) End() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteHeaderMatchIntegerRange) *int {
		if v == nil {
			return nil
		}
		return v.End
	}).(pulumi.IntPtrOutput)
}

// Start of the range (inclusive)
func (o HttpRouteHeaderMatchIntegerRangePtrOutput) Start() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteHeaderMatchIntegerRange) *int {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.IntPtrOutput)
}

// Represents an integer value range.
type HttpRouteHeaderMatchIntegerRangeResponse struct {
	// End of the range (exclusive)
	End int `pulumi:"end"`
	// Start of the range (inclusive)
	Start int `pulumi:"start"`
}

// Represents an integer value range.
type HttpRouteHeaderMatchIntegerRangeResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderMatchIntegerRangeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderMatchIntegerRangeResponse)(nil)).Elem()
}

func (o HttpRouteHeaderMatchIntegerRangeResponseOutput) ToHttpRouteHeaderMatchIntegerRangeResponseOutput() HttpRouteHeaderMatchIntegerRangeResponseOutput {
	return o
}

func (o HttpRouteHeaderMatchIntegerRangeResponseOutput) ToHttpRouteHeaderMatchIntegerRangeResponseOutputWithContext(ctx context.Context) HttpRouteHeaderMatchIntegerRangeResponseOutput {
	return o
}

// End of the range (exclusive)
func (o HttpRouteHeaderMatchIntegerRangeResponseOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchIntegerRangeResponse) int { return v.End }).(pulumi.IntOutput)
}

// Start of the range (inclusive)
func (o HttpRouteHeaderMatchIntegerRangeResponseOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchIntegerRangeResponse) int { return v.Start }).(pulumi.IntOutput)
}

// Specifies how to select a route rule based on HTTP request headers.
type HttpRouteHeaderMatchResponse struct {
	// The value of the header should match exactly the content of exact_match.
	ExactMatch string `pulumi:"exactMatch"`
	// The name of the HTTP header to match against.
	Header string `pulumi:"header"`
	// If specified, the match result will be inverted before checking. Default value is set to false.
	InvertMatch bool `pulumi:"invertMatch"`
	// The value of the header must start with the contents of prefix_match.
	PrefixMatch string `pulumi:"prefixMatch"`
	// A header with header_name must exist. The match takes place whether or not the header has a value.
	PresentMatch bool `pulumi:"presentMatch"`
	// If specified, the rule will match if the request header value is within the range.
	RangeMatch HttpRouteHeaderMatchIntegerRangeResponse `pulumi:"rangeMatch"`
	// The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
	RegexMatch string `pulumi:"regexMatch"`
	// The value of the header must end with the contents of suffix_match.
	SuffixMatch string `pulumi:"suffixMatch"`
}

// Specifies how to select a route rule based on HTTP request headers.
type HttpRouteHeaderMatchResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderMatchResponse)(nil)).Elem()
}

func (o HttpRouteHeaderMatchResponseOutput) ToHttpRouteHeaderMatchResponseOutput() HttpRouteHeaderMatchResponseOutput {
	return o
}

func (o HttpRouteHeaderMatchResponseOutput) ToHttpRouteHeaderMatchResponseOutputWithContext(ctx context.Context) HttpRouteHeaderMatchResponseOutput {
	return o
}

// The value of the header should match exactly the content of exact_match.
func (o HttpRouteHeaderMatchResponseOutput) ExactMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) string { return v.ExactMatch }).(pulumi.StringOutput)
}

// The name of the HTTP header to match against.
func (o HttpRouteHeaderMatchResponseOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) string { return v.Header }).(pulumi.StringOutput)
}

// If specified, the match result will be inverted before checking. Default value is set to false.
func (o HttpRouteHeaderMatchResponseOutput) InvertMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) bool { return v.InvertMatch }).(pulumi.BoolOutput)
}

// The value of the header must start with the contents of prefix_match.
func (o HttpRouteHeaderMatchResponseOutput) PrefixMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) string { return v.PrefixMatch }).(pulumi.StringOutput)
}

// A header with header_name must exist. The match takes place whether or not the header has a value.
func (o HttpRouteHeaderMatchResponseOutput) PresentMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) bool { return v.PresentMatch }).(pulumi.BoolOutput)
}

// If specified, the rule will match if the request header value is within the range.
func (o HttpRouteHeaderMatchResponseOutput) RangeMatch() HttpRouteHeaderMatchIntegerRangeResponseOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) HttpRouteHeaderMatchIntegerRangeResponse { return v.RangeMatch }).(HttpRouteHeaderMatchIntegerRangeResponseOutput)
}

// The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax
func (o HttpRouteHeaderMatchResponseOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) string { return v.RegexMatch }).(pulumi.StringOutput)
}

// The value of the header must end with the contents of suffix_match.
func (o HttpRouteHeaderMatchResponseOutput) SuffixMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteHeaderMatchResponse) string { return v.SuffixMatch }).(pulumi.StringOutput)
}

type HttpRouteHeaderMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteHeaderMatchResponse)(nil)).Elem()
}

func (o HttpRouteHeaderMatchResponseArrayOutput) ToHttpRouteHeaderMatchResponseArrayOutput() HttpRouteHeaderMatchResponseArrayOutput {
	return o
}

func (o HttpRouteHeaderMatchResponseArrayOutput) ToHttpRouteHeaderMatchResponseArrayOutputWithContext(ctx context.Context) HttpRouteHeaderMatchResponseArrayOutput {
	return o
}

func (o HttpRouteHeaderMatchResponseArrayOutput) Index(i pulumi.IntInput) HttpRouteHeaderMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteHeaderMatchResponse {
		return vs[0].([]HttpRouteHeaderMatchResponse)[vs[1].(int)]
	}).(HttpRouteHeaderMatchResponseOutput)
}

// The specification for modifying HTTP header in HTTP request and HTTP response.
type HttpRouteHeaderModifier struct {
	// Add the headers with given map where key is the name of the header, value is the value of the header.
	Add map[string]string `pulumi:"add"`
	// Remove headers (matching by header names) specified in the list.
	Remove []string `pulumi:"remove"`
	// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
	Set map[string]string `pulumi:"set"`
}

// HttpRouteHeaderModifierInput is an input type that accepts HttpRouteHeaderModifierArgs and HttpRouteHeaderModifierOutput values.
// You can construct a concrete instance of `HttpRouteHeaderModifierInput` via:
//
//          HttpRouteHeaderModifierArgs{...}
type HttpRouteHeaderModifierInput interface {
	pulumi.Input

	ToHttpRouteHeaderModifierOutput() HttpRouteHeaderModifierOutput
	ToHttpRouteHeaderModifierOutputWithContext(context.Context) HttpRouteHeaderModifierOutput
}

// The specification for modifying HTTP header in HTTP request and HTTP response.
type HttpRouteHeaderModifierArgs struct {
	// Add the headers with given map where key is the name of the header, value is the value of the header.
	Add pulumi.StringMapInput `pulumi:"add"`
	// Remove headers (matching by header names) specified in the list.
	Remove pulumi.StringArrayInput `pulumi:"remove"`
	// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
	Set pulumi.StringMapInput `pulumi:"set"`
}

func (HttpRouteHeaderModifierArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderModifier)(nil)).Elem()
}

func (i HttpRouteHeaderModifierArgs) ToHttpRouteHeaderModifierOutput() HttpRouteHeaderModifierOutput {
	return i.ToHttpRouteHeaderModifierOutputWithContext(context.Background())
}

func (i HttpRouteHeaderModifierArgs) ToHttpRouteHeaderModifierOutputWithContext(ctx context.Context) HttpRouteHeaderModifierOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderModifierOutput)
}

func (i HttpRouteHeaderModifierArgs) ToHttpRouteHeaderModifierPtrOutput() HttpRouteHeaderModifierPtrOutput {
	return i.ToHttpRouteHeaderModifierPtrOutputWithContext(context.Background())
}

func (i HttpRouteHeaderModifierArgs) ToHttpRouteHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderModifierOutput).ToHttpRouteHeaderModifierPtrOutputWithContext(ctx)
}

// HttpRouteHeaderModifierPtrInput is an input type that accepts HttpRouteHeaderModifierArgs, HttpRouteHeaderModifierPtr and HttpRouteHeaderModifierPtrOutput values.
// You can construct a concrete instance of `HttpRouteHeaderModifierPtrInput` via:
//
//          HttpRouteHeaderModifierArgs{...}
//
//  or:
//
//          nil
type HttpRouteHeaderModifierPtrInput interface {
	pulumi.Input

	ToHttpRouteHeaderModifierPtrOutput() HttpRouteHeaderModifierPtrOutput
	ToHttpRouteHeaderModifierPtrOutputWithContext(context.Context) HttpRouteHeaderModifierPtrOutput
}

type httpRouteHeaderModifierPtrType HttpRouteHeaderModifierArgs

func HttpRouteHeaderModifierPtr(v *HttpRouteHeaderModifierArgs) HttpRouteHeaderModifierPtrInput {
	return (*httpRouteHeaderModifierPtrType)(v)
}

func (*httpRouteHeaderModifierPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteHeaderModifier)(nil)).Elem()
}

func (i *httpRouteHeaderModifierPtrType) ToHttpRouteHeaderModifierPtrOutput() HttpRouteHeaderModifierPtrOutput {
	return i.ToHttpRouteHeaderModifierPtrOutputWithContext(context.Background())
}

func (i *httpRouteHeaderModifierPtrType) ToHttpRouteHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteHeaderModifierPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteHeaderModifierPtrOutput)
}

// The specification for modifying HTTP header in HTTP request and HTTP response.
type HttpRouteHeaderModifierOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderModifierOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderModifier)(nil)).Elem()
}

func (o HttpRouteHeaderModifierOutput) ToHttpRouteHeaderModifierOutput() HttpRouteHeaderModifierOutput {
	return o
}

func (o HttpRouteHeaderModifierOutput) ToHttpRouteHeaderModifierOutputWithContext(ctx context.Context) HttpRouteHeaderModifierOutput {
	return o
}

func (o HttpRouteHeaderModifierOutput) ToHttpRouteHeaderModifierPtrOutput() HttpRouteHeaderModifierPtrOutput {
	return o.ToHttpRouteHeaderModifierPtrOutputWithContext(context.Background())
}

func (o HttpRouteHeaderModifierOutput) ToHttpRouteHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteHeaderModifierPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteHeaderModifier) *HttpRouteHeaderModifier {
		return &v
	}).(HttpRouteHeaderModifierPtrOutput)
}

// Add the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteHeaderModifierOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteHeaderModifier) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

// Remove headers (matching by header names) specified in the list.
func (o HttpRouteHeaderModifierOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteHeaderModifier) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteHeaderModifierOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteHeaderModifier) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

type HttpRouteHeaderModifierPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderModifierPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteHeaderModifier)(nil)).Elem()
}

func (o HttpRouteHeaderModifierPtrOutput) ToHttpRouteHeaderModifierPtrOutput() HttpRouteHeaderModifierPtrOutput {
	return o
}

func (o HttpRouteHeaderModifierPtrOutput) ToHttpRouteHeaderModifierPtrOutputWithContext(ctx context.Context) HttpRouteHeaderModifierPtrOutput {
	return o
}

func (o HttpRouteHeaderModifierPtrOutput) Elem() HttpRouteHeaderModifierOutput {
	return o.ApplyT(func(v *HttpRouteHeaderModifier) HttpRouteHeaderModifier {
		if v != nil {
			return *v
		}
		var ret HttpRouteHeaderModifier
		return ret
	}).(HttpRouteHeaderModifierOutput)
}

// Add the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteHeaderModifierPtrOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRouteHeaderModifier) map[string]string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringMapOutput)
}

// Remove headers (matching by header names) specified in the list.
func (o HttpRouteHeaderModifierPtrOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteHeaderModifier) []string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringArrayOutput)
}

// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteHeaderModifierPtrOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HttpRouteHeaderModifier) map[string]string {
		if v == nil {
			return nil
		}
		return v.Set
	}).(pulumi.StringMapOutput)
}

// The specification for modifying HTTP header in HTTP request and HTTP response.
type HttpRouteHeaderModifierResponse struct {
	// Add the headers with given map where key is the name of the header, value is the value of the header.
	Add map[string]string `pulumi:"add"`
	// Remove headers (matching by header names) specified in the list.
	Remove []string `pulumi:"remove"`
	// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
	Set map[string]string `pulumi:"set"`
}

// The specification for modifying HTTP header in HTTP request and HTTP response.
type HttpRouteHeaderModifierResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteHeaderModifierResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteHeaderModifierResponse)(nil)).Elem()
}

func (o HttpRouteHeaderModifierResponseOutput) ToHttpRouteHeaderModifierResponseOutput() HttpRouteHeaderModifierResponseOutput {
	return o
}

func (o HttpRouteHeaderModifierResponseOutput) ToHttpRouteHeaderModifierResponseOutputWithContext(ctx context.Context) HttpRouteHeaderModifierResponseOutput {
	return o
}

// Add the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteHeaderModifierResponseOutput) Add() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteHeaderModifierResponse) map[string]string { return v.Add }).(pulumi.StringMapOutput)
}

// Remove headers (matching by header names) specified in the list.
func (o HttpRouteHeaderModifierResponseOutput) Remove() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteHeaderModifierResponse) []string { return v.Remove }).(pulumi.StringArrayOutput)
}

// Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.
func (o HttpRouteHeaderModifierResponseOutput) Set() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpRouteHeaderModifierResponse) map[string]string { return v.Set }).(pulumi.StringMapOutput)
}

// Specifications to match a query parameter in the request.
type HttpRouteQueryParameterMatch struct {
	// The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
	ExactMatch *string `pulumi:"exactMatch"`
	// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
	PresentMatch *bool `pulumi:"presentMatch"`
	// The name of the query parameter to match.
	QueryParameter *string `pulumi:"queryParameter"`
	// The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
	RegexMatch *string `pulumi:"regexMatch"`
}

// HttpRouteQueryParameterMatchInput is an input type that accepts HttpRouteQueryParameterMatchArgs and HttpRouteQueryParameterMatchOutput values.
// You can construct a concrete instance of `HttpRouteQueryParameterMatchInput` via:
//
//          HttpRouteQueryParameterMatchArgs{...}
type HttpRouteQueryParameterMatchInput interface {
	pulumi.Input

	ToHttpRouteQueryParameterMatchOutput() HttpRouteQueryParameterMatchOutput
	ToHttpRouteQueryParameterMatchOutputWithContext(context.Context) HttpRouteQueryParameterMatchOutput
}

// Specifications to match a query parameter in the request.
type HttpRouteQueryParameterMatchArgs struct {
	// The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
	ExactMatch pulumi.StringPtrInput `pulumi:"exactMatch"`
	// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
	PresentMatch pulumi.BoolPtrInput `pulumi:"presentMatch"`
	// The name of the query parameter to match.
	QueryParameter pulumi.StringPtrInput `pulumi:"queryParameter"`
	// The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (HttpRouteQueryParameterMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteQueryParameterMatch)(nil)).Elem()
}

func (i HttpRouteQueryParameterMatchArgs) ToHttpRouteQueryParameterMatchOutput() HttpRouteQueryParameterMatchOutput {
	return i.ToHttpRouteQueryParameterMatchOutputWithContext(context.Background())
}

func (i HttpRouteQueryParameterMatchArgs) ToHttpRouteQueryParameterMatchOutputWithContext(ctx context.Context) HttpRouteQueryParameterMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteQueryParameterMatchOutput)
}

// HttpRouteQueryParameterMatchArrayInput is an input type that accepts HttpRouteQueryParameterMatchArray and HttpRouteQueryParameterMatchArrayOutput values.
// You can construct a concrete instance of `HttpRouteQueryParameterMatchArrayInput` via:
//
//          HttpRouteQueryParameterMatchArray{ HttpRouteQueryParameterMatchArgs{...} }
type HttpRouteQueryParameterMatchArrayInput interface {
	pulumi.Input

	ToHttpRouteQueryParameterMatchArrayOutput() HttpRouteQueryParameterMatchArrayOutput
	ToHttpRouteQueryParameterMatchArrayOutputWithContext(context.Context) HttpRouteQueryParameterMatchArrayOutput
}

type HttpRouteQueryParameterMatchArray []HttpRouteQueryParameterMatchInput

func (HttpRouteQueryParameterMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteQueryParameterMatch)(nil)).Elem()
}

func (i HttpRouteQueryParameterMatchArray) ToHttpRouteQueryParameterMatchArrayOutput() HttpRouteQueryParameterMatchArrayOutput {
	return i.ToHttpRouteQueryParameterMatchArrayOutputWithContext(context.Background())
}

func (i HttpRouteQueryParameterMatchArray) ToHttpRouteQueryParameterMatchArrayOutputWithContext(ctx context.Context) HttpRouteQueryParameterMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteQueryParameterMatchArrayOutput)
}

// Specifications to match a query parameter in the request.
type HttpRouteQueryParameterMatchOutput struct{ *pulumi.OutputState }

func (HttpRouteQueryParameterMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteQueryParameterMatch)(nil)).Elem()
}

func (o HttpRouteQueryParameterMatchOutput) ToHttpRouteQueryParameterMatchOutput() HttpRouteQueryParameterMatchOutput {
	return o
}

func (o HttpRouteQueryParameterMatchOutput) ToHttpRouteQueryParameterMatchOutputWithContext(ctx context.Context) HttpRouteQueryParameterMatchOutput {
	return o
}

// The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
func (o HttpRouteQueryParameterMatchOutput) ExactMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatch) *string { return v.ExactMatch }).(pulumi.StringPtrOutput)
}

// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
func (o HttpRouteQueryParameterMatchOutput) PresentMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatch) *bool { return v.PresentMatch }).(pulumi.BoolPtrOutput)
}

// The name of the query parameter to match.
func (o HttpRouteQueryParameterMatchOutput) QueryParameter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatch) *string { return v.QueryParameter }).(pulumi.StringPtrOutput)
}

// The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
func (o HttpRouteQueryParameterMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type HttpRouteQueryParameterMatchArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteQueryParameterMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteQueryParameterMatch)(nil)).Elem()
}

func (o HttpRouteQueryParameterMatchArrayOutput) ToHttpRouteQueryParameterMatchArrayOutput() HttpRouteQueryParameterMatchArrayOutput {
	return o
}

func (o HttpRouteQueryParameterMatchArrayOutput) ToHttpRouteQueryParameterMatchArrayOutputWithContext(ctx context.Context) HttpRouteQueryParameterMatchArrayOutput {
	return o
}

func (o HttpRouteQueryParameterMatchArrayOutput) Index(i pulumi.IntInput) HttpRouteQueryParameterMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteQueryParameterMatch {
		return vs[0].([]HttpRouteQueryParameterMatch)[vs[1].(int)]
	}).(HttpRouteQueryParameterMatchOutput)
}

// Specifications to match a query parameter in the request.
type HttpRouteQueryParameterMatchResponse struct {
	// The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
	ExactMatch string `pulumi:"exactMatch"`
	// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
	PresentMatch bool `pulumi:"presentMatch"`
	// The name of the query parameter to match.
	QueryParameter string `pulumi:"queryParameter"`
	// The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
	RegexMatch string `pulumi:"regexMatch"`
}

// Specifications to match a query parameter in the request.
type HttpRouteQueryParameterMatchResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteQueryParameterMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteQueryParameterMatchResponse)(nil)).Elem()
}

func (o HttpRouteQueryParameterMatchResponseOutput) ToHttpRouteQueryParameterMatchResponseOutput() HttpRouteQueryParameterMatchResponseOutput {
	return o
}

func (o HttpRouteQueryParameterMatchResponseOutput) ToHttpRouteQueryParameterMatchResponseOutputWithContext(ctx context.Context) HttpRouteQueryParameterMatchResponseOutput {
	return o
}

// The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.
func (o HttpRouteQueryParameterMatchResponseOutput) ExactMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatchResponse) string { return v.ExactMatch }).(pulumi.StringOutput)
}

// Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.
func (o HttpRouteQueryParameterMatchResponseOutput) PresentMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatchResponse) bool { return v.PresentMatch }).(pulumi.BoolOutput)
}

// The name of the query parameter to match.
func (o HttpRouteQueryParameterMatchResponseOutput) QueryParameter() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatchResponse) string { return v.QueryParameter }).(pulumi.StringOutput)
}

// The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.
func (o HttpRouteQueryParameterMatchResponseOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteQueryParameterMatchResponse) string { return v.RegexMatch }).(pulumi.StringOutput)
}

type HttpRouteQueryParameterMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteQueryParameterMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteQueryParameterMatchResponse)(nil)).Elem()
}

func (o HttpRouteQueryParameterMatchResponseArrayOutput) ToHttpRouteQueryParameterMatchResponseArrayOutput() HttpRouteQueryParameterMatchResponseArrayOutput {
	return o
}

func (o HttpRouteQueryParameterMatchResponseArrayOutput) ToHttpRouteQueryParameterMatchResponseArrayOutputWithContext(ctx context.Context) HttpRouteQueryParameterMatchResponseArrayOutput {
	return o
}

func (o HttpRouteQueryParameterMatchResponseArrayOutput) Index(i pulumi.IntInput) HttpRouteQueryParameterMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteQueryParameterMatchResponse {
		return vs[0].([]HttpRouteQueryParameterMatchResponse)[vs[1].(int)]
	}).(HttpRouteQueryParameterMatchResponseOutput)
}

// The specification for redirecting traffic.
type HttpRouteRedirect struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect *string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
	HttpsRedirect *bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PathRedirect *string `pulumi:"pathRedirect"`
	// The port that will be used in the redirected request instead of the one that was supplied in the request.
	PortRedirect *int `pulumi:"portRedirect"`
	// Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
	PrefixRewrite *string `pulumi:"prefixRewrite"`
	// The HTTP Status code to use for the redirect.
	ResponseCode *HttpRouteRedirectResponseCode `pulumi:"responseCode"`
	// if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
	StripQuery *bool `pulumi:"stripQuery"`
}

// HttpRouteRedirectInput is an input type that accepts HttpRouteRedirectArgs and HttpRouteRedirectOutput values.
// You can construct a concrete instance of `HttpRouteRedirectInput` via:
//
//          HttpRouteRedirectArgs{...}
type HttpRouteRedirectInput interface {
	pulumi.Input

	ToHttpRouteRedirectOutput() HttpRouteRedirectOutput
	ToHttpRouteRedirectOutputWithContext(context.Context) HttpRouteRedirectOutput
}

// The specification for redirecting traffic.
type HttpRouteRedirectArgs struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect pulumi.StringPtrInput `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
	HttpsRedirect pulumi.BoolPtrInput `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PathRedirect pulumi.StringPtrInput `pulumi:"pathRedirect"`
	// The port that will be used in the redirected request instead of the one that was supplied in the request.
	PortRedirect pulumi.IntPtrInput `pulumi:"portRedirect"`
	// Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
	PrefixRewrite pulumi.StringPtrInput `pulumi:"prefixRewrite"`
	// The HTTP Status code to use for the redirect.
	ResponseCode HttpRouteRedirectResponseCodePtrInput `pulumi:"responseCode"`
	// if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
	StripQuery pulumi.BoolPtrInput `pulumi:"stripQuery"`
}

func (HttpRouteRedirectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRedirect)(nil)).Elem()
}

func (i HttpRouteRedirectArgs) ToHttpRouteRedirectOutput() HttpRouteRedirectOutput {
	return i.ToHttpRouteRedirectOutputWithContext(context.Background())
}

func (i HttpRouteRedirectArgs) ToHttpRouteRedirectOutputWithContext(ctx context.Context) HttpRouteRedirectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRedirectOutput)
}

func (i HttpRouteRedirectArgs) ToHttpRouteRedirectPtrOutput() HttpRouteRedirectPtrOutput {
	return i.ToHttpRouteRedirectPtrOutputWithContext(context.Background())
}

func (i HttpRouteRedirectArgs) ToHttpRouteRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRedirectOutput).ToHttpRouteRedirectPtrOutputWithContext(ctx)
}

// HttpRouteRedirectPtrInput is an input type that accepts HttpRouteRedirectArgs, HttpRouteRedirectPtr and HttpRouteRedirectPtrOutput values.
// You can construct a concrete instance of `HttpRouteRedirectPtrInput` via:
//
//          HttpRouteRedirectArgs{...}
//
//  or:
//
//          nil
type HttpRouteRedirectPtrInput interface {
	pulumi.Input

	ToHttpRouteRedirectPtrOutput() HttpRouteRedirectPtrOutput
	ToHttpRouteRedirectPtrOutputWithContext(context.Context) HttpRouteRedirectPtrOutput
}

type httpRouteRedirectPtrType HttpRouteRedirectArgs

func HttpRouteRedirectPtr(v *HttpRouteRedirectArgs) HttpRouteRedirectPtrInput {
	return (*httpRouteRedirectPtrType)(v)
}

func (*httpRouteRedirectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRedirect)(nil)).Elem()
}

func (i *httpRouteRedirectPtrType) ToHttpRouteRedirectPtrOutput() HttpRouteRedirectPtrOutput {
	return i.ToHttpRouteRedirectPtrOutputWithContext(context.Background())
}

func (i *httpRouteRedirectPtrType) ToHttpRouteRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRedirectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRedirectPtrOutput)
}

// The specification for redirecting traffic.
type HttpRouteRedirectOutput struct{ *pulumi.OutputState }

func (HttpRouteRedirectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRedirect)(nil)).Elem()
}

func (o HttpRouteRedirectOutput) ToHttpRouteRedirectOutput() HttpRouteRedirectOutput {
	return o
}

func (o HttpRouteRedirectOutput) ToHttpRouteRedirectOutputWithContext(ctx context.Context) HttpRouteRedirectOutput {
	return o
}

func (o HttpRouteRedirectOutput) ToHttpRouteRedirectPtrOutput() HttpRouteRedirectPtrOutput {
	return o.ToHttpRouteRedirectPtrOutputWithContext(context.Background())
}

func (o HttpRouteRedirectOutput) ToHttpRouteRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRedirectPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRedirect) *HttpRouteRedirect {
		return &v
	}).(HttpRouteRedirectPtrOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o HttpRouteRedirectOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRedirect) *string { return v.HostRedirect }).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
func (o HttpRouteRedirectOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRedirect) *bool { return v.HttpsRedirect }).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o HttpRouteRedirectOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRedirect) *string { return v.PathRedirect }).(pulumi.StringPtrOutput)
}

// The port that will be used in the redirected request instead of the one that was supplied in the request.
func (o HttpRouteRedirectOutput) PortRedirect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRedirect) *int { return v.PortRedirect }).(pulumi.IntPtrOutput)
}

// Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
func (o HttpRouteRedirectOutput) PrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRedirect) *string { return v.PrefixRewrite }).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for the redirect.
func (o HttpRouteRedirectOutput) ResponseCode() HttpRouteRedirectResponseCodePtrOutput {
	return o.ApplyT(func(v HttpRouteRedirect) *HttpRouteRedirectResponseCode { return v.ResponseCode }).(HttpRouteRedirectResponseCodePtrOutput)
}

// if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
func (o HttpRouteRedirectOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRedirect) *bool { return v.StripQuery }).(pulumi.BoolPtrOutput)
}

type HttpRouteRedirectPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRedirectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRedirect)(nil)).Elem()
}

func (o HttpRouteRedirectPtrOutput) ToHttpRouteRedirectPtrOutput() HttpRouteRedirectPtrOutput {
	return o
}

func (o HttpRouteRedirectPtrOutput) ToHttpRouteRedirectPtrOutputWithContext(ctx context.Context) HttpRouteRedirectPtrOutput {
	return o
}

func (o HttpRouteRedirectPtrOutput) Elem() HttpRouteRedirectOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) HttpRouteRedirect {
		if v != nil {
			return *v
		}
		var ret HttpRouteRedirect
		return ret
	}).(HttpRouteRedirectOutput)
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o HttpRouteRedirectPtrOutput) HostRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) *string {
		if v == nil {
			return nil
		}
		return v.HostRedirect
	}).(pulumi.StringPtrOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
func (o HttpRouteRedirectPtrOutput) HttpsRedirect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.HttpsRedirect
	}).(pulumi.BoolPtrOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o HttpRouteRedirectPtrOutput) PathRedirect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PathRedirect
	}).(pulumi.StringPtrOutput)
}

// The port that will be used in the redirected request instead of the one that was supplied in the request.
func (o HttpRouteRedirectPtrOutput) PortRedirect() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) *int {
		if v == nil {
			return nil
		}
		return v.PortRedirect
	}).(pulumi.IntPtrOutput)
}

// Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
func (o HttpRouteRedirectPtrOutput) PrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) *string {
		if v == nil {
			return nil
		}
		return v.PrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// The HTTP Status code to use for the redirect.
func (o HttpRouteRedirectPtrOutput) ResponseCode() HttpRouteRedirectResponseCodePtrOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) *HttpRouteRedirectResponseCode {
		if v == nil {
			return nil
		}
		return v.ResponseCode
	}).(HttpRouteRedirectResponseCodePtrOutput)
}

// if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
func (o HttpRouteRedirectPtrOutput) StripQuery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpRouteRedirect) *bool {
		if v == nil {
			return nil
		}
		return v.StripQuery
	}).(pulumi.BoolPtrOutput)
}

// The specification for redirecting traffic.
type HttpRouteRedirectResponse struct {
	// The host that will be used in the redirect response instead of the one that was supplied in the request.
	HostRedirect string `pulumi:"hostRedirect"`
	// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
	HttpsRedirect bool `pulumi:"httpsRedirect"`
	// The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
	PathRedirect string `pulumi:"pathRedirect"`
	// The port that will be used in the redirected request instead of the one that was supplied in the request.
	PortRedirect int `pulumi:"portRedirect"`
	// Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
	PrefixRewrite string `pulumi:"prefixRewrite"`
	// The HTTP Status code to use for the redirect.
	ResponseCode string `pulumi:"responseCode"`
	// if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
	StripQuery bool `pulumi:"stripQuery"`
}

// The specification for redirecting traffic.
type HttpRouteRedirectResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRedirectResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRedirectResponse)(nil)).Elem()
}

func (o HttpRouteRedirectResponseOutput) ToHttpRouteRedirectResponseOutput() HttpRouteRedirectResponseOutput {
	return o
}

func (o HttpRouteRedirectResponseOutput) ToHttpRouteRedirectResponseOutputWithContext(ctx context.Context) HttpRouteRedirectResponseOutput {
	return o
}

// The host that will be used in the redirect response instead of the one that was supplied in the request.
func (o HttpRouteRedirectResponseOutput) HostRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRedirectResponse) string { return v.HostRedirect }).(pulumi.StringOutput)
}

// If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.
func (o HttpRouteRedirectResponseOutput) HttpsRedirect() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteRedirectResponse) bool { return v.HttpsRedirect }).(pulumi.BoolOutput)
}

// The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.
func (o HttpRouteRedirectResponseOutput) PathRedirect() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRedirectResponse) string { return v.PathRedirect }).(pulumi.StringOutput)
}

// The port that will be used in the redirected request instead of the one that was supplied in the request.
func (o HttpRouteRedirectResponseOutput) PortRedirect() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteRedirectResponse) int { return v.PortRedirect }).(pulumi.IntOutput)
}

// Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.
func (o HttpRouteRedirectResponseOutput) PrefixRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRedirectResponse) string { return v.PrefixRewrite }).(pulumi.StringOutput)
}

// The HTTP Status code to use for the redirect.
func (o HttpRouteRedirectResponseOutput) ResponseCode() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRedirectResponse) string { return v.ResponseCode }).(pulumi.StringOutput)
}

// if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
func (o HttpRouteRedirectResponseOutput) StripQuery() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteRedirectResponse) bool { return v.StripQuery }).(pulumi.BoolOutput)
}

// Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
type HttpRouteRequestMirrorPolicy struct {
	// The destination the requests will be mirrored to. The weight of the destination will be ignored.
	Destination *HttpRouteDestination `pulumi:"destination"`
}

// HttpRouteRequestMirrorPolicyInput is an input type that accepts HttpRouteRequestMirrorPolicyArgs and HttpRouteRequestMirrorPolicyOutput values.
// You can construct a concrete instance of `HttpRouteRequestMirrorPolicyInput` via:
//
//          HttpRouteRequestMirrorPolicyArgs{...}
type HttpRouteRequestMirrorPolicyInput interface {
	pulumi.Input

	ToHttpRouteRequestMirrorPolicyOutput() HttpRouteRequestMirrorPolicyOutput
	ToHttpRouteRequestMirrorPolicyOutputWithContext(context.Context) HttpRouteRequestMirrorPolicyOutput
}

// Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
type HttpRouteRequestMirrorPolicyArgs struct {
	// The destination the requests will be mirrored to. The weight of the destination will be ignored.
	Destination HttpRouteDestinationPtrInput `pulumi:"destination"`
}

func (HttpRouteRequestMirrorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRequestMirrorPolicy)(nil)).Elem()
}

func (i HttpRouteRequestMirrorPolicyArgs) ToHttpRouteRequestMirrorPolicyOutput() HttpRouteRequestMirrorPolicyOutput {
	return i.ToHttpRouteRequestMirrorPolicyOutputWithContext(context.Background())
}

func (i HttpRouteRequestMirrorPolicyArgs) ToHttpRouteRequestMirrorPolicyOutputWithContext(ctx context.Context) HttpRouteRequestMirrorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRequestMirrorPolicyOutput)
}

func (i HttpRouteRequestMirrorPolicyArgs) ToHttpRouteRequestMirrorPolicyPtrOutput() HttpRouteRequestMirrorPolicyPtrOutput {
	return i.ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteRequestMirrorPolicyArgs) ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRequestMirrorPolicyOutput).ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(ctx)
}

// HttpRouteRequestMirrorPolicyPtrInput is an input type that accepts HttpRouteRequestMirrorPolicyArgs, HttpRouteRequestMirrorPolicyPtr and HttpRouteRequestMirrorPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteRequestMirrorPolicyPtrInput` via:
//
//          HttpRouteRequestMirrorPolicyArgs{...}
//
//  or:
//
//          nil
type HttpRouteRequestMirrorPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteRequestMirrorPolicyPtrOutput() HttpRouteRequestMirrorPolicyPtrOutput
	ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(context.Context) HttpRouteRequestMirrorPolicyPtrOutput
}

type httpRouteRequestMirrorPolicyPtrType HttpRouteRequestMirrorPolicyArgs

func HttpRouteRequestMirrorPolicyPtr(v *HttpRouteRequestMirrorPolicyArgs) HttpRouteRequestMirrorPolicyPtrInput {
	return (*httpRouteRequestMirrorPolicyPtrType)(v)
}

func (*httpRouteRequestMirrorPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRequestMirrorPolicy)(nil)).Elem()
}

func (i *httpRouteRequestMirrorPolicyPtrType) ToHttpRouteRequestMirrorPolicyPtrOutput() HttpRouteRequestMirrorPolicyPtrOutput {
	return i.ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteRequestMirrorPolicyPtrType) ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRequestMirrorPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRequestMirrorPolicyPtrOutput)
}

// Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
type HttpRouteRequestMirrorPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteRequestMirrorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRequestMirrorPolicy)(nil)).Elem()
}

func (o HttpRouteRequestMirrorPolicyOutput) ToHttpRouteRequestMirrorPolicyOutput() HttpRouteRequestMirrorPolicyOutput {
	return o
}

func (o HttpRouteRequestMirrorPolicyOutput) ToHttpRouteRequestMirrorPolicyOutputWithContext(ctx context.Context) HttpRouteRequestMirrorPolicyOutput {
	return o
}

func (o HttpRouteRequestMirrorPolicyOutput) ToHttpRouteRequestMirrorPolicyPtrOutput() HttpRouteRequestMirrorPolicyPtrOutput {
	return o.ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteRequestMirrorPolicyOutput) ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRequestMirrorPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRequestMirrorPolicy) *HttpRouteRequestMirrorPolicy {
		return &v
	}).(HttpRouteRequestMirrorPolicyPtrOutput)
}

// The destination the requests will be mirrored to. The weight of the destination will be ignored.
func (o HttpRouteRequestMirrorPolicyOutput) Destination() HttpRouteDestinationPtrOutput {
	return o.ApplyT(func(v HttpRouteRequestMirrorPolicy) *HttpRouteDestination { return v.Destination }).(HttpRouteDestinationPtrOutput)
}

type HttpRouteRequestMirrorPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRequestMirrorPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRequestMirrorPolicy)(nil)).Elem()
}

func (o HttpRouteRequestMirrorPolicyPtrOutput) ToHttpRouteRequestMirrorPolicyPtrOutput() HttpRouteRequestMirrorPolicyPtrOutput {
	return o
}

func (o HttpRouteRequestMirrorPolicyPtrOutput) ToHttpRouteRequestMirrorPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRequestMirrorPolicyPtrOutput {
	return o
}

func (o HttpRouteRequestMirrorPolicyPtrOutput) Elem() HttpRouteRequestMirrorPolicyOutput {
	return o.ApplyT(func(v *HttpRouteRequestMirrorPolicy) HttpRouteRequestMirrorPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteRequestMirrorPolicy
		return ret
	}).(HttpRouteRequestMirrorPolicyOutput)
}

// The destination the requests will be mirrored to. The weight of the destination will be ignored.
func (o HttpRouteRequestMirrorPolicyPtrOutput) Destination() HttpRouteDestinationPtrOutput {
	return o.ApplyT(func(v *HttpRouteRequestMirrorPolicy) *HttpRouteDestination {
		if v == nil {
			return nil
		}
		return v.Destination
	}).(HttpRouteDestinationPtrOutput)
}

// Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
type HttpRouteRequestMirrorPolicyResponse struct {
	// The destination the requests will be mirrored to. The weight of the destination will be ignored.
	Destination HttpRouteDestinationResponse `pulumi:"destination"`
}

// Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
type HttpRouteRequestMirrorPolicyResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRequestMirrorPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRequestMirrorPolicyResponse)(nil)).Elem()
}

func (o HttpRouteRequestMirrorPolicyResponseOutput) ToHttpRouteRequestMirrorPolicyResponseOutput() HttpRouteRequestMirrorPolicyResponseOutput {
	return o
}

func (o HttpRouteRequestMirrorPolicyResponseOutput) ToHttpRouteRequestMirrorPolicyResponseOutputWithContext(ctx context.Context) HttpRouteRequestMirrorPolicyResponseOutput {
	return o
}

// The destination the requests will be mirrored to. The weight of the destination will be ignored.
func (o HttpRouteRequestMirrorPolicyResponseOutput) Destination() HttpRouteDestinationResponseOutput {
	return o.ApplyT(func(v HttpRouteRequestMirrorPolicyResponse) HttpRouteDestinationResponse { return v.Destination }).(HttpRouteDestinationResponseOutput)
}

// The specifications for retries.
type HttpRouteRetryPolicy struct {
	// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
	NumRetries *int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.
	PerTryTimeout *string `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	RetryConditions []string `pulumi:"retryConditions"`
}

// HttpRouteRetryPolicyInput is an input type that accepts HttpRouteRetryPolicyArgs and HttpRouteRetryPolicyOutput values.
// You can construct a concrete instance of `HttpRouteRetryPolicyInput` via:
//
//          HttpRouteRetryPolicyArgs{...}
type HttpRouteRetryPolicyInput interface {
	pulumi.Input

	ToHttpRouteRetryPolicyOutput() HttpRouteRetryPolicyOutput
	ToHttpRouteRetryPolicyOutputWithContext(context.Context) HttpRouteRetryPolicyOutput
}

// The specifications for retries.
type HttpRouteRetryPolicyArgs struct {
	// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
	NumRetries pulumi.IntPtrInput `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.
	PerTryTimeout pulumi.StringPtrInput `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	RetryConditions pulumi.StringArrayInput `pulumi:"retryConditions"`
}

func (HttpRouteRetryPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRetryPolicy)(nil)).Elem()
}

func (i HttpRouteRetryPolicyArgs) ToHttpRouteRetryPolicyOutput() HttpRouteRetryPolicyOutput {
	return i.ToHttpRouteRetryPolicyOutputWithContext(context.Background())
}

func (i HttpRouteRetryPolicyArgs) ToHttpRouteRetryPolicyOutputWithContext(ctx context.Context) HttpRouteRetryPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRetryPolicyOutput)
}

func (i HttpRouteRetryPolicyArgs) ToHttpRouteRetryPolicyPtrOutput() HttpRouteRetryPolicyPtrOutput {
	return i.ToHttpRouteRetryPolicyPtrOutputWithContext(context.Background())
}

func (i HttpRouteRetryPolicyArgs) ToHttpRouteRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRetryPolicyOutput).ToHttpRouteRetryPolicyPtrOutputWithContext(ctx)
}

// HttpRouteRetryPolicyPtrInput is an input type that accepts HttpRouteRetryPolicyArgs, HttpRouteRetryPolicyPtr and HttpRouteRetryPolicyPtrOutput values.
// You can construct a concrete instance of `HttpRouteRetryPolicyPtrInput` via:
//
//          HttpRouteRetryPolicyArgs{...}
//
//  or:
//
//          nil
type HttpRouteRetryPolicyPtrInput interface {
	pulumi.Input

	ToHttpRouteRetryPolicyPtrOutput() HttpRouteRetryPolicyPtrOutput
	ToHttpRouteRetryPolicyPtrOutputWithContext(context.Context) HttpRouteRetryPolicyPtrOutput
}

type httpRouteRetryPolicyPtrType HttpRouteRetryPolicyArgs

func HttpRouteRetryPolicyPtr(v *HttpRouteRetryPolicyArgs) HttpRouteRetryPolicyPtrInput {
	return (*httpRouteRetryPolicyPtrType)(v)
}

func (*httpRouteRetryPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRetryPolicy)(nil)).Elem()
}

func (i *httpRouteRetryPolicyPtrType) ToHttpRouteRetryPolicyPtrOutput() HttpRouteRetryPolicyPtrOutput {
	return i.ToHttpRouteRetryPolicyPtrOutputWithContext(context.Background())
}

func (i *httpRouteRetryPolicyPtrType) ToHttpRouteRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRetryPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRetryPolicyPtrOutput)
}

// The specifications for retries.
type HttpRouteRetryPolicyOutput struct{ *pulumi.OutputState }

func (HttpRouteRetryPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRetryPolicy)(nil)).Elem()
}

func (o HttpRouteRetryPolicyOutput) ToHttpRouteRetryPolicyOutput() HttpRouteRetryPolicyOutput {
	return o
}

func (o HttpRouteRetryPolicyOutput) ToHttpRouteRetryPolicyOutputWithContext(ctx context.Context) HttpRouteRetryPolicyOutput {
	return o
}

func (o HttpRouteRetryPolicyOutput) ToHttpRouteRetryPolicyPtrOutput() HttpRouteRetryPolicyPtrOutput {
	return o.ToHttpRouteRetryPolicyPtrOutputWithContext(context.Background())
}

func (o HttpRouteRetryPolicyOutput) ToHttpRouteRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRetryPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRetryPolicy) *HttpRouteRetryPolicy {
		return &v
	}).(HttpRouteRetryPolicyPtrOutput)
}

// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
func (o HttpRouteRetryPolicyOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRetryPolicy) *int { return v.NumRetries }).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.
func (o HttpRouteRetryPolicyOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRetryPolicy) *string { return v.PerTryTimeout }).(pulumi.StringPtrOutput)
}

// Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
func (o HttpRouteRetryPolicyOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRetryPolicy) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

type HttpRouteRetryPolicyPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRetryPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRetryPolicy)(nil)).Elem()
}

func (o HttpRouteRetryPolicyPtrOutput) ToHttpRouteRetryPolicyPtrOutput() HttpRouteRetryPolicyPtrOutput {
	return o
}

func (o HttpRouteRetryPolicyPtrOutput) ToHttpRouteRetryPolicyPtrOutputWithContext(ctx context.Context) HttpRouteRetryPolicyPtrOutput {
	return o
}

func (o HttpRouteRetryPolicyPtrOutput) Elem() HttpRouteRetryPolicyOutput {
	return o.ApplyT(func(v *HttpRouteRetryPolicy) HttpRouteRetryPolicy {
		if v != nil {
			return *v
		}
		var ret HttpRouteRetryPolicy
		return ret
	}).(HttpRouteRetryPolicyOutput)
}

// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
func (o HttpRouteRetryPolicyPtrOutput) NumRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteRetryPolicy) *int {
		if v == nil {
			return nil
		}
		return v.NumRetries
	}).(pulumi.IntPtrOutput)
}

// Specifies a non-zero timeout per retry attempt.
func (o HttpRouteRetryPolicyPtrOutput) PerTryTimeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRetryPolicy) *string {
		if v == nil {
			return nil
		}
		return v.PerTryTimeout
	}).(pulumi.StringPtrOutput)
}

// Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
func (o HttpRouteRetryPolicyPtrOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HttpRouteRetryPolicy) []string {
		if v == nil {
			return nil
		}
		return v.RetryConditions
	}).(pulumi.StringArrayOutput)
}

// The specifications for retries.
type HttpRouteRetryPolicyResponse struct {
	// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
	NumRetries int `pulumi:"numRetries"`
	// Specifies a non-zero timeout per retry attempt.
	PerTryTimeout string `pulumi:"perTryTimeout"`
	// Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
	RetryConditions []string `pulumi:"retryConditions"`
}

// The specifications for retries.
type HttpRouteRetryPolicyResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRetryPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRetryPolicyResponse)(nil)).Elem()
}

func (o HttpRouteRetryPolicyResponseOutput) ToHttpRouteRetryPolicyResponseOutput() HttpRouteRetryPolicyResponseOutput {
	return o
}

func (o HttpRouteRetryPolicyResponseOutput) ToHttpRouteRetryPolicyResponseOutputWithContext(ctx context.Context) HttpRouteRetryPolicyResponseOutput {
	return o
}

// Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.
func (o HttpRouteRetryPolicyResponseOutput) NumRetries() pulumi.IntOutput {
	return o.ApplyT(func(v HttpRouteRetryPolicyResponse) int { return v.NumRetries }).(pulumi.IntOutput)
}

// Specifies a non-zero timeout per retry attempt.
func (o HttpRouteRetryPolicyResponseOutput) PerTryTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRetryPolicyResponse) string { return v.PerTryTimeout }).(pulumi.StringOutput)
}

// Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.
func (o HttpRouteRetryPolicyResponseOutput) RetryConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v HttpRouteRetryPolicyResponse) []string { return v.RetryConditions }).(pulumi.StringArrayOutput)
}

// The specifications for routing traffic and applying associated policies.
type HttpRouteRouteAction struct {
	// The specification for allowing client side cross-origin requests.
	CorsPolicy *HttpRouteCorsPolicy `pulumi:"corsPolicy"`
	// The destination to which traffic should be forwarded.
	Destinations []HttpRouteDestination `pulumi:"destinations"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
	FaultInjectionPolicy *HttpRouteFaultInjectionPolicy `pulumi:"faultInjectionPolicy"`
	// If set, the request is directed as configured by this field.
	Redirect *HttpRouteRedirect `pulumi:"redirect"`
	// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
	RequestHeaderModifier *HttpRouteHeaderModifier `pulumi:"requestHeaderModifier"`
	// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
	RequestMirrorPolicy *HttpRouteRequestMirrorPolicy `pulumi:"requestMirrorPolicy"`
	// The specification for modifying the headers of a response prior to sending the response back to the client.
	ResponseHeaderModifier *HttpRouteHeaderModifier `pulumi:"responseHeaderModifier"`
	// Specifies the retry policy associated with this route.
	RetryPolicy *HttpRouteRetryPolicy `pulumi:"retryPolicy"`
	// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
	Timeout *string `pulumi:"timeout"`
	// The specification for rewrite URL before forwarding requests to the destination.
	UrlRewrite *HttpRouteURLRewrite `pulumi:"urlRewrite"`
}

// HttpRouteRouteActionInput is an input type that accepts HttpRouteRouteActionArgs and HttpRouteRouteActionOutput values.
// You can construct a concrete instance of `HttpRouteRouteActionInput` via:
//
//          HttpRouteRouteActionArgs{...}
type HttpRouteRouteActionInput interface {
	pulumi.Input

	ToHttpRouteRouteActionOutput() HttpRouteRouteActionOutput
	ToHttpRouteRouteActionOutputWithContext(context.Context) HttpRouteRouteActionOutput
}

// The specifications for routing traffic and applying associated policies.
type HttpRouteRouteActionArgs struct {
	// The specification for allowing client side cross-origin requests.
	CorsPolicy HttpRouteCorsPolicyPtrInput `pulumi:"corsPolicy"`
	// The destination to which traffic should be forwarded.
	Destinations HttpRouteDestinationArrayInput `pulumi:"destinations"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
	FaultInjectionPolicy HttpRouteFaultInjectionPolicyPtrInput `pulumi:"faultInjectionPolicy"`
	// If set, the request is directed as configured by this field.
	Redirect HttpRouteRedirectPtrInput `pulumi:"redirect"`
	// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
	RequestHeaderModifier HttpRouteHeaderModifierPtrInput `pulumi:"requestHeaderModifier"`
	// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
	RequestMirrorPolicy HttpRouteRequestMirrorPolicyPtrInput `pulumi:"requestMirrorPolicy"`
	// The specification for modifying the headers of a response prior to sending the response back to the client.
	ResponseHeaderModifier HttpRouteHeaderModifierPtrInput `pulumi:"responseHeaderModifier"`
	// Specifies the retry policy associated with this route.
	RetryPolicy HttpRouteRetryPolicyPtrInput `pulumi:"retryPolicy"`
	// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// The specification for rewrite URL before forwarding requests to the destination.
	UrlRewrite HttpRouteURLRewritePtrInput `pulumi:"urlRewrite"`
}

func (HttpRouteRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteAction)(nil)).Elem()
}

func (i HttpRouteRouteActionArgs) ToHttpRouteRouteActionOutput() HttpRouteRouteActionOutput {
	return i.ToHttpRouteRouteActionOutputWithContext(context.Background())
}

func (i HttpRouteRouteActionArgs) ToHttpRouteRouteActionOutputWithContext(ctx context.Context) HttpRouteRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRouteActionOutput)
}

func (i HttpRouteRouteActionArgs) ToHttpRouteRouteActionPtrOutput() HttpRouteRouteActionPtrOutput {
	return i.ToHttpRouteRouteActionPtrOutputWithContext(context.Background())
}

func (i HttpRouteRouteActionArgs) ToHttpRouteRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRouteActionOutput).ToHttpRouteRouteActionPtrOutputWithContext(ctx)
}

// HttpRouteRouteActionPtrInput is an input type that accepts HttpRouteRouteActionArgs, HttpRouteRouteActionPtr and HttpRouteRouteActionPtrOutput values.
// You can construct a concrete instance of `HttpRouteRouteActionPtrInput` via:
//
//          HttpRouteRouteActionArgs{...}
//
//  or:
//
//          nil
type HttpRouteRouteActionPtrInput interface {
	pulumi.Input

	ToHttpRouteRouteActionPtrOutput() HttpRouteRouteActionPtrOutput
	ToHttpRouteRouteActionPtrOutputWithContext(context.Context) HttpRouteRouteActionPtrOutput
}

type httpRouteRouteActionPtrType HttpRouteRouteActionArgs

func HttpRouteRouteActionPtr(v *HttpRouteRouteActionArgs) HttpRouteRouteActionPtrInput {
	return (*httpRouteRouteActionPtrType)(v)
}

func (*httpRouteRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRouteAction)(nil)).Elem()
}

func (i *httpRouteRouteActionPtrType) ToHttpRouteRouteActionPtrOutput() HttpRouteRouteActionPtrOutput {
	return i.ToHttpRouteRouteActionPtrOutputWithContext(context.Background())
}

func (i *httpRouteRouteActionPtrType) ToHttpRouteRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRouteActionPtrOutput)
}

// The specifications for routing traffic and applying associated policies.
type HttpRouteRouteActionOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteAction)(nil)).Elem()
}

func (o HttpRouteRouteActionOutput) ToHttpRouteRouteActionOutput() HttpRouteRouteActionOutput {
	return o
}

func (o HttpRouteRouteActionOutput) ToHttpRouteRouteActionOutputWithContext(ctx context.Context) HttpRouteRouteActionOutput {
	return o
}

func (o HttpRouteRouteActionOutput) ToHttpRouteRouteActionPtrOutput() HttpRouteRouteActionPtrOutput {
	return o.ToHttpRouteRouteActionPtrOutputWithContext(context.Background())
}

func (o HttpRouteRouteActionOutput) ToHttpRouteRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteRouteActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteRouteAction) *HttpRouteRouteAction {
		return &v
	}).(HttpRouteRouteActionPtrOutput)
}

// The specification for allowing client side cross-origin requests.
func (o HttpRouteRouteActionOutput) CorsPolicy() HttpRouteCorsPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteCorsPolicy { return v.CorsPolicy }).(HttpRouteCorsPolicyPtrOutput)
}

// The destination to which traffic should be forwarded.
func (o HttpRouteRouteActionOutput) Destinations() HttpRouteDestinationArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) []HttpRouteDestination { return v.Destinations }).(HttpRouteDestinationArrayOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
func (o HttpRouteRouteActionOutput) FaultInjectionPolicy() HttpRouteFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteFaultInjectionPolicy { return v.FaultInjectionPolicy }).(HttpRouteFaultInjectionPolicyPtrOutput)
}

// If set, the request is directed as configured by this field.
func (o HttpRouteRouteActionOutput) Redirect() HttpRouteRedirectPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteRedirect { return v.Redirect }).(HttpRouteRedirectPtrOutput)
}

// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
func (o HttpRouteRouteActionOutput) RequestHeaderModifier() HttpRouteHeaderModifierPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteHeaderModifier { return v.RequestHeaderModifier }).(HttpRouteHeaderModifierPtrOutput)
}

// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
func (o HttpRouteRouteActionOutput) RequestMirrorPolicy() HttpRouteRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteRequestMirrorPolicy { return v.RequestMirrorPolicy }).(HttpRouteRequestMirrorPolicyPtrOutput)
}

// The specification for modifying the headers of a response prior to sending the response back to the client.
func (o HttpRouteRouteActionOutput) ResponseHeaderModifier() HttpRouteHeaderModifierPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteHeaderModifier { return v.ResponseHeaderModifier }).(HttpRouteHeaderModifierPtrOutput)
}

// Specifies the retry policy associated with this route.
func (o HttpRouteRouteActionOutput) RetryPolicy() HttpRouteRetryPolicyPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteRetryPolicy { return v.RetryPolicy }).(HttpRouteRetryPolicyPtrOutput)
}

// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
func (o HttpRouteRouteActionOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// The specification for rewrite URL before forwarding requests to the destination.
func (o HttpRouteRouteActionOutput) UrlRewrite() HttpRouteURLRewritePtrOutput {
	return o.ApplyT(func(v HttpRouteRouteAction) *HttpRouteURLRewrite { return v.UrlRewrite }).(HttpRouteURLRewritePtrOutput)
}

type HttpRouteRouteActionPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRouteAction)(nil)).Elem()
}

func (o HttpRouteRouteActionPtrOutput) ToHttpRouteRouteActionPtrOutput() HttpRouteRouteActionPtrOutput {
	return o
}

func (o HttpRouteRouteActionPtrOutput) ToHttpRouteRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteRouteActionPtrOutput {
	return o
}

func (o HttpRouteRouteActionPtrOutput) Elem() HttpRouteRouteActionOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) HttpRouteRouteAction {
		if v != nil {
			return *v
		}
		var ret HttpRouteRouteAction
		return ret
	}).(HttpRouteRouteActionOutput)
}

// The specification for allowing client side cross-origin requests.
func (o HttpRouteRouteActionPtrOutput) CorsPolicy() HttpRouteCorsPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteCorsPolicy {
		if v == nil {
			return nil
		}
		return v.CorsPolicy
	}).(HttpRouteCorsPolicyPtrOutput)
}

// The destination to which traffic should be forwarded.
func (o HttpRouteRouteActionPtrOutput) Destinations() HttpRouteDestinationArrayOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) []HttpRouteDestination {
		if v == nil {
			return nil
		}
		return v.Destinations
	}).(HttpRouteDestinationArrayOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
func (o HttpRouteRouteActionPtrOutput) FaultInjectionPolicy() HttpRouteFaultInjectionPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteFaultInjectionPolicy {
		if v == nil {
			return nil
		}
		return v.FaultInjectionPolicy
	}).(HttpRouteFaultInjectionPolicyPtrOutput)
}

// If set, the request is directed as configured by this field.
func (o HttpRouteRouteActionPtrOutput) Redirect() HttpRouteRedirectPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteRedirect {
		if v == nil {
			return nil
		}
		return v.Redirect
	}).(HttpRouteRedirectPtrOutput)
}

// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
func (o HttpRouteRouteActionPtrOutput) RequestHeaderModifier() HttpRouteHeaderModifierPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteHeaderModifier {
		if v == nil {
			return nil
		}
		return v.RequestHeaderModifier
	}).(HttpRouteHeaderModifierPtrOutput)
}

// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
func (o HttpRouteRouteActionPtrOutput) RequestMirrorPolicy() HttpRouteRequestMirrorPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteRequestMirrorPolicy {
		if v == nil {
			return nil
		}
		return v.RequestMirrorPolicy
	}).(HttpRouteRequestMirrorPolicyPtrOutput)
}

// The specification for modifying the headers of a response prior to sending the response back to the client.
func (o HttpRouteRouteActionPtrOutput) ResponseHeaderModifier() HttpRouteHeaderModifierPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteHeaderModifier {
		if v == nil {
			return nil
		}
		return v.ResponseHeaderModifier
	}).(HttpRouteHeaderModifierPtrOutput)
}

// Specifies the retry policy associated with this route.
func (o HttpRouteRouteActionPtrOutput) RetryPolicy() HttpRouteRetryPolicyPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteRetryPolicy {
		if v == nil {
			return nil
		}
		return v.RetryPolicy
	}).(HttpRouteRetryPolicyPtrOutput)
}

// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
func (o HttpRouteRouteActionPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// The specification for rewrite URL before forwarding requests to the destination.
func (o HttpRouteRouteActionPtrOutput) UrlRewrite() HttpRouteURLRewritePtrOutput {
	return o.ApplyT(func(v *HttpRouteRouteAction) *HttpRouteURLRewrite {
		if v == nil {
			return nil
		}
		return v.UrlRewrite
	}).(HttpRouteURLRewritePtrOutput)
}

// The specifications for routing traffic and applying associated policies.
type HttpRouteRouteActionResponse struct {
	// The specification for allowing client side cross-origin requests.
	CorsPolicy HttpRouteCorsPolicyResponse `pulumi:"corsPolicy"`
	// The destination to which traffic should be forwarded.
	Destinations []HttpRouteDestinationResponse `pulumi:"destinations"`
	// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
	FaultInjectionPolicy HttpRouteFaultInjectionPolicyResponse `pulumi:"faultInjectionPolicy"`
	// If set, the request is directed as configured by this field.
	Redirect HttpRouteRedirectResponse `pulumi:"redirect"`
	// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
	RequestHeaderModifier HttpRouteHeaderModifierResponse `pulumi:"requestHeaderModifier"`
	// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
	RequestMirrorPolicy HttpRouteRequestMirrorPolicyResponse `pulumi:"requestMirrorPolicy"`
	// The specification for modifying the headers of a response prior to sending the response back to the client.
	ResponseHeaderModifier HttpRouteHeaderModifierResponse `pulumi:"responseHeaderModifier"`
	// Specifies the retry policy associated with this route.
	RetryPolicy HttpRouteRetryPolicyResponse `pulumi:"retryPolicy"`
	// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
	Timeout string `pulumi:"timeout"`
	// The specification for rewrite URL before forwarding requests to the destination.
	UrlRewrite HttpRouteURLRewriteResponse `pulumi:"urlRewrite"`
}

// The specifications for routing traffic and applying associated policies.
type HttpRouteRouteActionResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteActionResponse)(nil)).Elem()
}

func (o HttpRouteRouteActionResponseOutput) ToHttpRouteRouteActionResponseOutput() HttpRouteRouteActionResponseOutput {
	return o
}

func (o HttpRouteRouteActionResponseOutput) ToHttpRouteRouteActionResponseOutputWithContext(ctx context.Context) HttpRouteRouteActionResponseOutput {
	return o
}

// The specification for allowing client side cross-origin requests.
func (o HttpRouteRouteActionResponseOutput) CorsPolicy() HttpRouteCorsPolicyResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteCorsPolicyResponse { return v.CorsPolicy }).(HttpRouteCorsPolicyResponseOutput)
}

// The destination to which traffic should be forwarded.
func (o HttpRouteRouteActionResponseOutput) Destinations() HttpRouteDestinationResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) []HttpRouteDestinationResponse { return v.Destinations }).(HttpRouteDestinationResponseArrayOutput)
}

// The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted for a percentage of requests. timeout and retry_policy will be ignored by clients that are configured with a fault_injection_policy
func (o HttpRouteRouteActionResponseOutput) FaultInjectionPolicy() HttpRouteFaultInjectionPolicyResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteFaultInjectionPolicyResponse {
		return v.FaultInjectionPolicy
	}).(HttpRouteFaultInjectionPolicyResponseOutput)
}

// If set, the request is directed as configured by this field.
func (o HttpRouteRouteActionResponseOutput) Redirect() HttpRouteRedirectResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteRedirectResponse { return v.Redirect }).(HttpRouteRedirectResponseOutput)
}

// The specification for modifying the headers of a matching request prior to delivery of the request to the destination.
func (o HttpRouteRouteActionResponseOutput) RequestHeaderModifier() HttpRouteHeaderModifierResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteHeaderModifierResponse { return v.RequestHeaderModifier }).(HttpRouteHeaderModifierResponseOutput)
}

// Specifies the policy on how requests intended for the routes destination are shadowed to a separate mirrored destination. Proxy will not wait for the shadow destination to respond before returning the response. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.
func (o HttpRouteRouteActionResponseOutput) RequestMirrorPolicy() HttpRouteRequestMirrorPolicyResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteRequestMirrorPolicyResponse {
		return v.RequestMirrorPolicy
	}).(HttpRouteRequestMirrorPolicyResponseOutput)
}

// The specification for modifying the headers of a response prior to sending the response back to the client.
func (o HttpRouteRouteActionResponseOutput) ResponseHeaderModifier() HttpRouteHeaderModifierResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteHeaderModifierResponse { return v.ResponseHeaderModifier }).(HttpRouteHeaderModifierResponseOutput)
}

// Specifies the retry policy associated with this route.
func (o HttpRouteRouteActionResponseOutput) RetryPolicy() HttpRouteRetryPolicyResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteRetryPolicyResponse { return v.RetryPolicy }).(HttpRouteRetryPolicyResponseOutput)
}

// Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
func (o HttpRouteRouteActionResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// The specification for rewrite URL before forwarding requests to the destination.
func (o HttpRouteRouteActionResponseOutput) UrlRewrite() HttpRouteURLRewriteResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteActionResponse) HttpRouteURLRewriteResponse { return v.UrlRewrite }).(HttpRouteURLRewriteResponseOutput)
}

// RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
type HttpRouteRouteMatch struct {
	// The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
	FullPathMatch *string `pulumi:"fullPathMatch"`
	// Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
	Headers []HttpRouteHeaderMatch `pulumi:"headers"`
	// Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
	IgnoreCase *bool `pulumi:"ignoreCase"`
	// The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
	PrefixMatch *string `pulumi:"prefixMatch"`
	// Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
	QueryParameters []HttpRouteQueryParameterMatch `pulumi:"queryParameters"`
	// The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
	RegexMatch *string `pulumi:"regexMatch"`
}

// HttpRouteRouteMatchInput is an input type that accepts HttpRouteRouteMatchArgs and HttpRouteRouteMatchOutput values.
// You can construct a concrete instance of `HttpRouteRouteMatchInput` via:
//
//          HttpRouteRouteMatchArgs{...}
type HttpRouteRouteMatchInput interface {
	pulumi.Input

	ToHttpRouteRouteMatchOutput() HttpRouteRouteMatchOutput
	ToHttpRouteRouteMatchOutputWithContext(context.Context) HttpRouteRouteMatchOutput
}

// RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
type HttpRouteRouteMatchArgs struct {
	// The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
	FullPathMatch pulumi.StringPtrInput `pulumi:"fullPathMatch"`
	// Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
	Headers HttpRouteHeaderMatchArrayInput `pulumi:"headers"`
	// Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
	IgnoreCase pulumi.BoolPtrInput `pulumi:"ignoreCase"`
	// The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
	PrefixMatch pulumi.StringPtrInput `pulumi:"prefixMatch"`
	// Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
	QueryParameters HttpRouteQueryParameterMatchArrayInput `pulumi:"queryParameters"`
	// The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
	RegexMatch pulumi.StringPtrInput `pulumi:"regexMatch"`
}

func (HttpRouteRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteMatch)(nil)).Elem()
}

func (i HttpRouteRouteMatchArgs) ToHttpRouteRouteMatchOutput() HttpRouteRouteMatchOutput {
	return i.ToHttpRouteRouteMatchOutputWithContext(context.Background())
}

func (i HttpRouteRouteMatchArgs) ToHttpRouteRouteMatchOutputWithContext(ctx context.Context) HttpRouteRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRouteMatchOutput)
}

// HttpRouteRouteMatchArrayInput is an input type that accepts HttpRouteRouteMatchArray and HttpRouteRouteMatchArrayOutput values.
// You can construct a concrete instance of `HttpRouteRouteMatchArrayInput` via:
//
//          HttpRouteRouteMatchArray{ HttpRouteRouteMatchArgs{...} }
type HttpRouteRouteMatchArrayInput interface {
	pulumi.Input

	ToHttpRouteRouteMatchArrayOutput() HttpRouteRouteMatchArrayOutput
	ToHttpRouteRouteMatchArrayOutputWithContext(context.Context) HttpRouteRouteMatchArrayOutput
}

type HttpRouteRouteMatchArray []HttpRouteRouteMatchInput

func (HttpRouteRouteMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRouteMatch)(nil)).Elem()
}

func (i HttpRouteRouteMatchArray) ToHttpRouteRouteMatchArrayOutput() HttpRouteRouteMatchArrayOutput {
	return i.ToHttpRouteRouteMatchArrayOutputWithContext(context.Background())
}

func (i HttpRouteRouteMatchArray) ToHttpRouteRouteMatchArrayOutputWithContext(ctx context.Context) HttpRouteRouteMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRouteMatchArrayOutput)
}

// RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
type HttpRouteRouteMatchOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteMatch)(nil)).Elem()
}

func (o HttpRouteRouteMatchOutput) ToHttpRouteRouteMatchOutput() HttpRouteRouteMatchOutput {
	return o
}

func (o HttpRouteRouteMatchOutput) ToHttpRouteRouteMatchOutputWithContext(ctx context.Context) HttpRouteRouteMatchOutput {
	return o
}

// The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
func (o HttpRouteRouteMatchOutput) FullPathMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteMatch) *string { return v.FullPathMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
func (o HttpRouteRouteMatchOutput) Headers() HttpRouteHeaderMatchArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteMatch) []HttpRouteHeaderMatch { return v.Headers }).(HttpRouteHeaderMatchArrayOutput)
}

// Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
func (o HttpRouteRouteMatchOutput) IgnoreCase() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteMatch) *bool { return v.IgnoreCase }).(pulumi.BoolPtrOutput)
}

// The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
func (o HttpRouteRouteMatchOutput) PrefixMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteMatch) *string { return v.PrefixMatch }).(pulumi.StringPtrOutput)
}

// Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
func (o HttpRouteRouteMatchOutput) QueryParameters() HttpRouteQueryParameterMatchArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteMatch) []HttpRouteQueryParameterMatch { return v.QueryParameters }).(HttpRouteQueryParameterMatchArrayOutput)
}

// The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
func (o HttpRouteRouteMatchOutput) RegexMatch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteMatch) *string { return v.RegexMatch }).(pulumi.StringPtrOutput)
}

type HttpRouteRouteMatchArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRouteMatch)(nil)).Elem()
}

func (o HttpRouteRouteMatchArrayOutput) ToHttpRouteRouteMatchArrayOutput() HttpRouteRouteMatchArrayOutput {
	return o
}

func (o HttpRouteRouteMatchArrayOutput) ToHttpRouteRouteMatchArrayOutputWithContext(ctx context.Context) HttpRouteRouteMatchArrayOutput {
	return o
}

func (o HttpRouteRouteMatchArrayOutput) Index(i pulumi.IntInput) HttpRouteRouteMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRouteMatch {
		return vs[0].([]HttpRouteRouteMatch)[vs[1].(int)]
	}).(HttpRouteRouteMatchOutput)
}

// RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
type HttpRouteRouteMatchResponse struct {
	// The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
	FullPathMatch string `pulumi:"fullPathMatch"`
	// Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
	Headers []HttpRouteHeaderMatchResponse `pulumi:"headers"`
	// Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
	IgnoreCase bool `pulumi:"ignoreCase"`
	// The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
	PrefixMatch string `pulumi:"prefixMatch"`
	// Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
	QueryParameters []HttpRouteQueryParameterMatchResponse `pulumi:"queryParameters"`
	// The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
	RegexMatch string `pulumi:"regexMatch"`
}

// RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
type HttpRouteRouteMatchResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteMatchResponse)(nil)).Elem()
}

func (o HttpRouteRouteMatchResponseOutput) ToHttpRouteRouteMatchResponseOutput() HttpRouteRouteMatchResponseOutput {
	return o
}

func (o HttpRouteRouteMatchResponseOutput) ToHttpRouteRouteMatchResponseOutputWithContext(ctx context.Context) HttpRouteRouteMatchResponseOutput {
	return o
}

// The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
func (o HttpRouteRouteMatchResponseOutput) FullPathMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRouteMatchResponse) string { return v.FullPathMatch }).(pulumi.StringOutput)
}

// Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
func (o HttpRouteRouteMatchResponseOutput) Headers() HttpRouteHeaderMatchResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteMatchResponse) []HttpRouteHeaderMatchResponse { return v.Headers }).(HttpRouteHeaderMatchResponseArrayOutput)
}

// Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
func (o HttpRouteRouteMatchResponseOutput) IgnoreCase() pulumi.BoolOutput {
	return o.ApplyT(func(v HttpRouteRouteMatchResponse) bool { return v.IgnoreCase }).(pulumi.BoolOutput)
}

// The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
func (o HttpRouteRouteMatchResponseOutput) PrefixMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRouteMatchResponse) string { return v.PrefixMatch }).(pulumi.StringOutput)
}

// Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
func (o HttpRouteRouteMatchResponseOutput) QueryParameters() HttpRouteQueryParameterMatchResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteMatchResponse) []HttpRouteQueryParameterMatchResponse { return v.QueryParameters }).(HttpRouteQueryParameterMatchResponseArrayOutput)
}

// The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
func (o HttpRouteRouteMatchResponseOutput) RegexMatch() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteRouteMatchResponse) string { return v.RegexMatch }).(pulumi.StringOutput)
}

type HttpRouteRouteMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRouteMatchResponse)(nil)).Elem()
}

func (o HttpRouteRouteMatchResponseArrayOutput) ToHttpRouteRouteMatchResponseArrayOutput() HttpRouteRouteMatchResponseArrayOutput {
	return o
}

func (o HttpRouteRouteMatchResponseArrayOutput) ToHttpRouteRouteMatchResponseArrayOutputWithContext(ctx context.Context) HttpRouteRouteMatchResponseArrayOutput {
	return o
}

func (o HttpRouteRouteMatchResponseArrayOutput) Index(i pulumi.IntInput) HttpRouteRouteMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRouteMatchResponse {
		return vs[0].([]HttpRouteRouteMatchResponse)[vs[1].(int)]
	}).(HttpRouteRouteMatchResponseOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type HttpRouteRouteRule struct {
	// The detailed rule defining how to route matched traffic.
	Action *HttpRouteRouteAction `pulumi:"action"`
	// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
	Matches []HttpRouteRouteMatch `pulumi:"matches"`
}

// HttpRouteRouteRuleInput is an input type that accepts HttpRouteRouteRuleArgs and HttpRouteRouteRuleOutput values.
// You can construct a concrete instance of `HttpRouteRouteRuleInput` via:
//
//          HttpRouteRouteRuleArgs{...}
type HttpRouteRouteRuleInput interface {
	pulumi.Input

	ToHttpRouteRouteRuleOutput() HttpRouteRouteRuleOutput
	ToHttpRouteRouteRuleOutputWithContext(context.Context) HttpRouteRouteRuleOutput
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type HttpRouteRouteRuleArgs struct {
	// The detailed rule defining how to route matched traffic.
	Action HttpRouteRouteActionPtrInput `pulumi:"action"`
	// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
	Matches HttpRouteRouteMatchArrayInput `pulumi:"matches"`
}

func (HttpRouteRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteRule)(nil)).Elem()
}

func (i HttpRouteRouteRuleArgs) ToHttpRouteRouteRuleOutput() HttpRouteRouteRuleOutput {
	return i.ToHttpRouteRouteRuleOutputWithContext(context.Background())
}

func (i HttpRouteRouteRuleArgs) ToHttpRouteRouteRuleOutputWithContext(ctx context.Context) HttpRouteRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRouteRuleOutput)
}

// HttpRouteRouteRuleArrayInput is an input type that accepts HttpRouteRouteRuleArray and HttpRouteRouteRuleArrayOutput values.
// You can construct a concrete instance of `HttpRouteRouteRuleArrayInput` via:
//
//          HttpRouteRouteRuleArray{ HttpRouteRouteRuleArgs{...} }
type HttpRouteRouteRuleArrayInput interface {
	pulumi.Input

	ToHttpRouteRouteRuleArrayOutput() HttpRouteRouteRuleArrayOutput
	ToHttpRouteRouteRuleArrayOutputWithContext(context.Context) HttpRouteRouteRuleArrayOutput
}

type HttpRouteRouteRuleArray []HttpRouteRouteRuleInput

func (HttpRouteRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRouteRule)(nil)).Elem()
}

func (i HttpRouteRouteRuleArray) ToHttpRouteRouteRuleArrayOutput() HttpRouteRouteRuleArrayOutput {
	return i.ToHttpRouteRouteRuleArrayOutputWithContext(context.Background())
}

func (i HttpRouteRouteRuleArray) ToHttpRouteRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRouteRuleArrayOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type HttpRouteRouteRuleOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteRule)(nil)).Elem()
}

func (o HttpRouteRouteRuleOutput) ToHttpRouteRouteRuleOutput() HttpRouteRouteRuleOutput {
	return o
}

func (o HttpRouteRouteRuleOutput) ToHttpRouteRouteRuleOutputWithContext(ctx context.Context) HttpRouteRouteRuleOutput {
	return o
}

// The detailed rule defining how to route matched traffic.
func (o HttpRouteRouteRuleOutput) Action() HttpRouteRouteActionPtrOutput {
	return o.ApplyT(func(v HttpRouteRouteRule) *HttpRouteRouteAction { return v.Action }).(HttpRouteRouteActionPtrOutput)
}

// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
func (o HttpRouteRouteRuleOutput) Matches() HttpRouteRouteMatchArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteRule) []HttpRouteRouteMatch { return v.Matches }).(HttpRouteRouteMatchArrayOutput)
}

type HttpRouteRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRouteRule)(nil)).Elem()
}

func (o HttpRouteRouteRuleArrayOutput) ToHttpRouteRouteRuleArrayOutput() HttpRouteRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRouteRuleArrayOutput) ToHttpRouteRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRouteRuleArrayOutput) Index(i pulumi.IntInput) HttpRouteRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRouteRule {
		return vs[0].([]HttpRouteRouteRule)[vs[1].(int)]
	}).(HttpRouteRouteRuleOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type HttpRouteRouteRuleResponse struct {
	// The detailed rule defining how to route matched traffic.
	Action HttpRouteRouteActionResponse `pulumi:"action"`
	// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
	Matches []HttpRouteRouteMatchResponse `pulumi:"matches"`
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type HttpRouteRouteRuleResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRouteRuleResponse)(nil)).Elem()
}

func (o HttpRouteRouteRuleResponseOutput) ToHttpRouteRouteRuleResponseOutput() HttpRouteRouteRuleResponseOutput {
	return o
}

func (o HttpRouteRouteRuleResponseOutput) ToHttpRouteRouteRuleResponseOutputWithContext(ctx context.Context) HttpRouteRouteRuleResponseOutput {
	return o
}

// The detailed rule defining how to route matched traffic.
func (o HttpRouteRouteRuleResponseOutput) Action() HttpRouteRouteActionResponseOutput {
	return o.ApplyT(func(v HttpRouteRouteRuleResponse) HttpRouteRouteActionResponse { return v.Action }).(HttpRouteRouteActionResponseOutput)
}

// A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.
func (o HttpRouteRouteRuleResponseOutput) Matches() HttpRouteRouteMatchResponseArrayOutput {
	return o.ApplyT(func(v HttpRouteRouteRuleResponse) []HttpRouteRouteMatchResponse { return v.Matches }).(HttpRouteRouteMatchResponseArrayOutput)
}

type HttpRouteRouteRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRouteRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRouteRuleResponse)(nil)).Elem()
}

func (o HttpRouteRouteRuleResponseArrayOutput) ToHttpRouteRouteRuleResponseArrayOutput() HttpRouteRouteRuleResponseArrayOutput {
	return o
}

func (o HttpRouteRouteRuleResponseArrayOutput) ToHttpRouteRouteRuleResponseArrayOutputWithContext(ctx context.Context) HttpRouteRouteRuleResponseArrayOutput {
	return o
}

func (o HttpRouteRouteRuleResponseArrayOutput) Index(i pulumi.IntInput) HttpRouteRouteRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRouteRuleResponse {
		return vs[0].([]HttpRouteRouteRuleResponse)[vs[1].(int)]
	}).(HttpRouteRouteRuleResponseOutput)
}

// The specification for modifying the URL of the request, prior to forwarding the request to the destination.
type HttpRouteURLRewrite struct {
	// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
	HostRewrite *string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
	PathPrefixRewrite *string `pulumi:"pathPrefixRewrite"`
}

// HttpRouteURLRewriteInput is an input type that accepts HttpRouteURLRewriteArgs and HttpRouteURLRewriteOutput values.
// You can construct a concrete instance of `HttpRouteURLRewriteInput` via:
//
//          HttpRouteURLRewriteArgs{...}
type HttpRouteURLRewriteInput interface {
	pulumi.Input

	ToHttpRouteURLRewriteOutput() HttpRouteURLRewriteOutput
	ToHttpRouteURLRewriteOutputWithContext(context.Context) HttpRouteURLRewriteOutput
}

// The specification for modifying the URL of the request, prior to forwarding the request to the destination.
type HttpRouteURLRewriteArgs struct {
	// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
	HostRewrite pulumi.StringPtrInput `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
	PathPrefixRewrite pulumi.StringPtrInput `pulumi:"pathPrefixRewrite"`
}

func (HttpRouteURLRewriteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteURLRewrite)(nil)).Elem()
}

func (i HttpRouteURLRewriteArgs) ToHttpRouteURLRewriteOutput() HttpRouteURLRewriteOutput {
	return i.ToHttpRouteURLRewriteOutputWithContext(context.Background())
}

func (i HttpRouteURLRewriteArgs) ToHttpRouteURLRewriteOutputWithContext(ctx context.Context) HttpRouteURLRewriteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteURLRewriteOutput)
}

func (i HttpRouteURLRewriteArgs) ToHttpRouteURLRewritePtrOutput() HttpRouteURLRewritePtrOutput {
	return i.ToHttpRouteURLRewritePtrOutputWithContext(context.Background())
}

func (i HttpRouteURLRewriteArgs) ToHttpRouteURLRewritePtrOutputWithContext(ctx context.Context) HttpRouteURLRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteURLRewriteOutput).ToHttpRouteURLRewritePtrOutputWithContext(ctx)
}

// HttpRouteURLRewritePtrInput is an input type that accepts HttpRouteURLRewriteArgs, HttpRouteURLRewritePtr and HttpRouteURLRewritePtrOutput values.
// You can construct a concrete instance of `HttpRouteURLRewritePtrInput` via:
//
//          HttpRouteURLRewriteArgs{...}
//
//  or:
//
//          nil
type HttpRouteURLRewritePtrInput interface {
	pulumi.Input

	ToHttpRouteURLRewritePtrOutput() HttpRouteURLRewritePtrOutput
	ToHttpRouteURLRewritePtrOutputWithContext(context.Context) HttpRouteURLRewritePtrOutput
}

type httpRouteURLRewritePtrType HttpRouteURLRewriteArgs

func HttpRouteURLRewritePtr(v *HttpRouteURLRewriteArgs) HttpRouteURLRewritePtrInput {
	return (*httpRouteURLRewritePtrType)(v)
}

func (*httpRouteURLRewritePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteURLRewrite)(nil)).Elem()
}

func (i *httpRouteURLRewritePtrType) ToHttpRouteURLRewritePtrOutput() HttpRouteURLRewritePtrOutput {
	return i.ToHttpRouteURLRewritePtrOutputWithContext(context.Background())
}

func (i *httpRouteURLRewritePtrType) ToHttpRouteURLRewritePtrOutputWithContext(ctx context.Context) HttpRouteURLRewritePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteURLRewritePtrOutput)
}

// The specification for modifying the URL of the request, prior to forwarding the request to the destination.
type HttpRouteURLRewriteOutput struct{ *pulumi.OutputState }

func (HttpRouteURLRewriteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteURLRewrite)(nil)).Elem()
}

func (o HttpRouteURLRewriteOutput) ToHttpRouteURLRewriteOutput() HttpRouteURLRewriteOutput {
	return o
}

func (o HttpRouteURLRewriteOutput) ToHttpRouteURLRewriteOutputWithContext(ctx context.Context) HttpRouteURLRewriteOutput {
	return o
}

func (o HttpRouteURLRewriteOutput) ToHttpRouteURLRewritePtrOutput() HttpRouteURLRewritePtrOutput {
	return o.ToHttpRouteURLRewritePtrOutputWithContext(context.Background())
}

func (o HttpRouteURLRewriteOutput) ToHttpRouteURLRewritePtrOutputWithContext(ctx context.Context) HttpRouteURLRewritePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteURLRewrite) *HttpRouteURLRewrite {
		return &v
	}).(HttpRouteURLRewritePtrOutput)
}

// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
func (o HttpRouteURLRewriteOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteURLRewrite) *string { return v.HostRewrite }).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
func (o HttpRouteURLRewriteOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteURLRewrite) *string { return v.PathPrefixRewrite }).(pulumi.StringPtrOutput)
}

type HttpRouteURLRewritePtrOutput struct{ *pulumi.OutputState }

func (HttpRouteURLRewritePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteURLRewrite)(nil)).Elem()
}

func (o HttpRouteURLRewritePtrOutput) ToHttpRouteURLRewritePtrOutput() HttpRouteURLRewritePtrOutput {
	return o
}

func (o HttpRouteURLRewritePtrOutput) ToHttpRouteURLRewritePtrOutputWithContext(ctx context.Context) HttpRouteURLRewritePtrOutput {
	return o
}

func (o HttpRouteURLRewritePtrOutput) Elem() HttpRouteURLRewriteOutput {
	return o.ApplyT(func(v *HttpRouteURLRewrite) HttpRouteURLRewrite {
		if v != nil {
			return *v
		}
		var ret HttpRouteURLRewrite
		return ret
	}).(HttpRouteURLRewriteOutput)
}

// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
func (o HttpRouteURLRewritePtrOutput) HostRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteURLRewrite) *string {
		if v == nil {
			return nil
		}
		return v.HostRewrite
	}).(pulumi.StringPtrOutput)
}

// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
func (o HttpRouteURLRewritePtrOutput) PathPrefixRewrite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteURLRewrite) *string {
		if v == nil {
			return nil
		}
		return v.PathPrefixRewrite
	}).(pulumi.StringPtrOutput)
}

// The specification for modifying the URL of the request, prior to forwarding the request to the destination.
type HttpRouteURLRewriteResponse struct {
	// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
	HostRewrite string `pulumi:"hostRewrite"`
	// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
	PathPrefixRewrite string `pulumi:"pathPrefixRewrite"`
}

// The specification for modifying the URL of the request, prior to forwarding the request to the destination.
type HttpRouteURLRewriteResponseOutput struct{ *pulumi.OutputState }

func (HttpRouteURLRewriteResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteURLRewriteResponse)(nil)).Elem()
}

func (o HttpRouteURLRewriteResponseOutput) ToHttpRouteURLRewriteResponseOutput() HttpRouteURLRewriteResponseOutput {
	return o
}

func (o HttpRouteURLRewriteResponseOutput) ToHttpRouteURLRewriteResponseOutputWithContext(ctx context.Context) HttpRouteURLRewriteResponseOutput {
	return o
}

// Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.
func (o HttpRouteURLRewriteResponseOutput) HostRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteURLRewriteResponse) string { return v.HostRewrite }).(pulumi.StringOutput)
}

// Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.
func (o HttpRouteURLRewriteResponseOutput) PathPrefixRewrite() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteURLRewriteResponse) string { return v.PathPrefixRewrite }).(pulumi.StringOutput)
}

// The matcher that is based on node metadata presented by xDS clients.
type MetadataLabelMatcher struct {
	// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
	MetadataLabelMatchCriteria *MetadataLabelMatcherMetadataLabelMatchCriteria `pulumi:"metadataLabelMatchCriteria"`
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
	MetadataLabels []MetadataLabels `pulumi:"metadataLabels"`
}

// MetadataLabelMatcherInput is an input type that accepts MetadataLabelMatcherArgs and MetadataLabelMatcherOutput values.
// You can construct a concrete instance of `MetadataLabelMatcherInput` via:
//
//          MetadataLabelMatcherArgs{...}
type MetadataLabelMatcherInput interface {
	pulumi.Input

	ToMetadataLabelMatcherOutput() MetadataLabelMatcherOutput
	ToMetadataLabelMatcherOutputWithContext(context.Context) MetadataLabelMatcherOutput
}

// The matcher that is based on node metadata presented by xDS clients.
type MetadataLabelMatcherArgs struct {
	// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
	MetadataLabelMatchCriteria MetadataLabelMatcherMetadataLabelMatchCriteriaPtrInput `pulumi:"metadataLabelMatchCriteria"`
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
	MetadataLabels MetadataLabelsArrayInput `pulumi:"metadataLabels"`
}

func (MetadataLabelMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataLabelMatcher)(nil)).Elem()
}

func (i MetadataLabelMatcherArgs) ToMetadataLabelMatcherOutput() MetadataLabelMatcherOutput {
	return i.ToMetadataLabelMatcherOutputWithContext(context.Background())
}

func (i MetadataLabelMatcherArgs) ToMetadataLabelMatcherOutputWithContext(ctx context.Context) MetadataLabelMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataLabelMatcherOutput)
}

func (i MetadataLabelMatcherArgs) ToMetadataLabelMatcherPtrOutput() MetadataLabelMatcherPtrOutput {
	return i.ToMetadataLabelMatcherPtrOutputWithContext(context.Background())
}

func (i MetadataLabelMatcherArgs) ToMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) MetadataLabelMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataLabelMatcherOutput).ToMetadataLabelMatcherPtrOutputWithContext(ctx)
}

// MetadataLabelMatcherPtrInput is an input type that accepts MetadataLabelMatcherArgs, MetadataLabelMatcherPtr and MetadataLabelMatcherPtrOutput values.
// You can construct a concrete instance of `MetadataLabelMatcherPtrInput` via:
//
//          MetadataLabelMatcherArgs{...}
//
//  or:
//
//          nil
type MetadataLabelMatcherPtrInput interface {
	pulumi.Input

	ToMetadataLabelMatcherPtrOutput() MetadataLabelMatcherPtrOutput
	ToMetadataLabelMatcherPtrOutputWithContext(context.Context) MetadataLabelMatcherPtrOutput
}

type metadataLabelMatcherPtrType MetadataLabelMatcherArgs

func MetadataLabelMatcherPtr(v *MetadataLabelMatcherArgs) MetadataLabelMatcherPtrInput {
	return (*metadataLabelMatcherPtrType)(v)
}

func (*metadataLabelMatcherPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataLabelMatcher)(nil)).Elem()
}

func (i *metadataLabelMatcherPtrType) ToMetadataLabelMatcherPtrOutput() MetadataLabelMatcherPtrOutput {
	return i.ToMetadataLabelMatcherPtrOutputWithContext(context.Background())
}

func (i *metadataLabelMatcherPtrType) ToMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) MetadataLabelMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataLabelMatcherPtrOutput)
}

// The matcher that is based on node metadata presented by xDS clients.
type MetadataLabelMatcherOutput struct{ *pulumi.OutputState }

func (MetadataLabelMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataLabelMatcher)(nil)).Elem()
}

func (o MetadataLabelMatcherOutput) ToMetadataLabelMatcherOutput() MetadataLabelMatcherOutput {
	return o
}

func (o MetadataLabelMatcherOutput) ToMetadataLabelMatcherOutputWithContext(ctx context.Context) MetadataLabelMatcherOutput {
	return o
}

func (o MetadataLabelMatcherOutput) ToMetadataLabelMatcherPtrOutput() MetadataLabelMatcherPtrOutput {
	return o.ToMetadataLabelMatcherPtrOutputWithContext(context.Background())
}

func (o MetadataLabelMatcherOutput) ToMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) MetadataLabelMatcherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetadataLabelMatcher) *MetadataLabelMatcher {
		return &v
	}).(MetadataLabelMatcherPtrOutput)
}

// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
func (o MetadataLabelMatcherOutput) MetadataLabelMatchCriteria() MetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput {
	return o.ApplyT(func(v MetadataLabelMatcher) *MetadataLabelMatcherMetadataLabelMatchCriteria {
		return v.MetadataLabelMatchCriteria
	}).(MetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput)
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
func (o MetadataLabelMatcherOutput) MetadataLabels() MetadataLabelsArrayOutput {
	return o.ApplyT(func(v MetadataLabelMatcher) []MetadataLabels { return v.MetadataLabels }).(MetadataLabelsArrayOutput)
}

type MetadataLabelMatcherPtrOutput struct{ *pulumi.OutputState }

func (MetadataLabelMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetadataLabelMatcher)(nil)).Elem()
}

func (o MetadataLabelMatcherPtrOutput) ToMetadataLabelMatcherPtrOutput() MetadataLabelMatcherPtrOutput {
	return o
}

func (o MetadataLabelMatcherPtrOutput) ToMetadataLabelMatcherPtrOutputWithContext(ctx context.Context) MetadataLabelMatcherPtrOutput {
	return o
}

func (o MetadataLabelMatcherPtrOutput) Elem() MetadataLabelMatcherOutput {
	return o.ApplyT(func(v *MetadataLabelMatcher) MetadataLabelMatcher {
		if v != nil {
			return *v
		}
		var ret MetadataLabelMatcher
		return ret
	}).(MetadataLabelMatcherOutput)
}

// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
func (o MetadataLabelMatcherPtrOutput) MetadataLabelMatchCriteria() MetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput {
	return o.ApplyT(func(v *MetadataLabelMatcher) *MetadataLabelMatcherMetadataLabelMatchCriteria {
		if v == nil {
			return nil
		}
		return v.MetadataLabelMatchCriteria
	}).(MetadataLabelMatcherMetadataLabelMatchCriteriaPtrOutput)
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
func (o MetadataLabelMatcherPtrOutput) MetadataLabels() MetadataLabelsArrayOutput {
	return o.ApplyT(func(v *MetadataLabelMatcher) []MetadataLabels {
		if v == nil {
			return nil
		}
		return v.MetadataLabels
	}).(MetadataLabelsArrayOutput)
}

// The matcher that is based on node metadata presented by xDS clients.
type MetadataLabelMatcherResponse struct {
	// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
	MetadataLabelMatchCriteria string `pulumi:"metadataLabelMatchCriteria"`
	// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
	MetadataLabels []MetadataLabelsResponse `pulumi:"metadataLabels"`
}

// The matcher that is based on node metadata presented by xDS clients.
type MetadataLabelMatcherResponseOutput struct{ *pulumi.OutputState }

func (MetadataLabelMatcherResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataLabelMatcherResponse)(nil)).Elem()
}

func (o MetadataLabelMatcherResponseOutput) ToMetadataLabelMatcherResponseOutput() MetadataLabelMatcherResponseOutput {
	return o
}

func (o MetadataLabelMatcherResponseOutput) ToMetadataLabelMatcherResponseOutputWithContext(ctx context.Context) MetadataLabelMatcherResponseOutput {
	return o
}

// Specifies how matching should be done. Supported values are: MATCH_ANY: At least one of the Labels specified in the matcher should match the metadata presented by xDS client. MATCH_ALL: The metadata presented by the xDS client should contain all of the labels specified here. The selection is determined based on the best match. For example, suppose there are three EndpointPolicy resources P1, P2 and P3 and if P1 has a the matcher as MATCH_ANY , P2 has MATCH_ALL , and P3 has MATCH_ALL . If a client with label connects, the config from P1 will be selected. If a client with label connects, the config from P2 will be selected. If a client with label connects, the config from P3 will be selected. If there is more than one best match, (for example, if a config P4 with selector exists and if a client with label connects), an error will be thrown.
func (o MetadataLabelMatcherResponseOutput) MetadataLabelMatchCriteria() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataLabelMatcherResponse) string { return v.MetadataLabelMatchCriteria }).(pulumi.StringOutput)
}

// The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list can have at most 64 entries. The list can be empty if the match criteria is MATCH_ANY, to specify a wildcard match (i.e this matches any client).
func (o MetadataLabelMatcherResponseOutput) MetadataLabels() MetadataLabelsResponseArrayOutput {
	return o.ApplyT(func(v MetadataLabelMatcherResponse) []MetadataLabelsResponse { return v.MetadataLabels }).(MetadataLabelsResponseArrayOutput)
}

// Defines a name-pair value for a single label.
type MetadataLabels struct {
	// Label name presented as key in xDS Node Metadata.
	LabelName string `pulumi:"labelName"`
	// Label value presented as value corresponding to the above key, in xDS Node Metadata.
	LabelValue string `pulumi:"labelValue"`
}

// MetadataLabelsInput is an input type that accepts MetadataLabelsArgs and MetadataLabelsOutput values.
// You can construct a concrete instance of `MetadataLabelsInput` via:
//
//          MetadataLabelsArgs{...}
type MetadataLabelsInput interface {
	pulumi.Input

	ToMetadataLabelsOutput() MetadataLabelsOutput
	ToMetadataLabelsOutputWithContext(context.Context) MetadataLabelsOutput
}

// Defines a name-pair value for a single label.
type MetadataLabelsArgs struct {
	// Label name presented as key in xDS Node Metadata.
	LabelName pulumi.StringInput `pulumi:"labelName"`
	// Label value presented as value corresponding to the above key, in xDS Node Metadata.
	LabelValue pulumi.StringInput `pulumi:"labelValue"`
}

func (MetadataLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataLabels)(nil)).Elem()
}

func (i MetadataLabelsArgs) ToMetadataLabelsOutput() MetadataLabelsOutput {
	return i.ToMetadataLabelsOutputWithContext(context.Background())
}

func (i MetadataLabelsArgs) ToMetadataLabelsOutputWithContext(ctx context.Context) MetadataLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataLabelsOutput)
}

// MetadataLabelsArrayInput is an input type that accepts MetadataLabelsArray and MetadataLabelsArrayOutput values.
// You can construct a concrete instance of `MetadataLabelsArrayInput` via:
//
//          MetadataLabelsArray{ MetadataLabelsArgs{...} }
type MetadataLabelsArrayInput interface {
	pulumi.Input

	ToMetadataLabelsArrayOutput() MetadataLabelsArrayOutput
	ToMetadataLabelsArrayOutputWithContext(context.Context) MetadataLabelsArrayOutput
}

type MetadataLabelsArray []MetadataLabelsInput

func (MetadataLabelsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataLabels)(nil)).Elem()
}

func (i MetadataLabelsArray) ToMetadataLabelsArrayOutput() MetadataLabelsArrayOutput {
	return i.ToMetadataLabelsArrayOutputWithContext(context.Background())
}

func (i MetadataLabelsArray) ToMetadataLabelsArrayOutputWithContext(ctx context.Context) MetadataLabelsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataLabelsArrayOutput)
}

// Defines a name-pair value for a single label.
type MetadataLabelsOutput struct{ *pulumi.OutputState }

func (MetadataLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataLabels)(nil)).Elem()
}

func (o MetadataLabelsOutput) ToMetadataLabelsOutput() MetadataLabelsOutput {
	return o
}

func (o MetadataLabelsOutput) ToMetadataLabelsOutputWithContext(ctx context.Context) MetadataLabelsOutput {
	return o
}

// Label name presented as key in xDS Node Metadata.
func (o MetadataLabelsOutput) LabelName() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataLabels) string { return v.LabelName }).(pulumi.StringOutput)
}

// Label value presented as value corresponding to the above key, in xDS Node Metadata.
func (o MetadataLabelsOutput) LabelValue() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataLabels) string { return v.LabelValue }).(pulumi.StringOutput)
}

type MetadataLabelsArrayOutput struct{ *pulumi.OutputState }

func (MetadataLabelsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataLabels)(nil)).Elem()
}

func (o MetadataLabelsArrayOutput) ToMetadataLabelsArrayOutput() MetadataLabelsArrayOutput {
	return o
}

func (o MetadataLabelsArrayOutput) ToMetadataLabelsArrayOutputWithContext(ctx context.Context) MetadataLabelsArrayOutput {
	return o
}

func (o MetadataLabelsArrayOutput) Index(i pulumi.IntInput) MetadataLabelsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataLabels {
		return vs[0].([]MetadataLabels)[vs[1].(int)]
	}).(MetadataLabelsOutput)
}

// Defines a name-pair value for a single label.
type MetadataLabelsResponse struct {
	// Label name presented as key in xDS Node Metadata.
	LabelName string `pulumi:"labelName"`
	// Label value presented as value corresponding to the above key, in xDS Node Metadata.
	LabelValue string `pulumi:"labelValue"`
}

// Defines a name-pair value for a single label.
type MetadataLabelsResponseOutput struct{ *pulumi.OutputState }

func (MetadataLabelsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataLabelsResponse)(nil)).Elem()
}

func (o MetadataLabelsResponseOutput) ToMetadataLabelsResponseOutput() MetadataLabelsResponseOutput {
	return o
}

func (o MetadataLabelsResponseOutput) ToMetadataLabelsResponseOutputWithContext(ctx context.Context) MetadataLabelsResponseOutput {
	return o
}

// Label name presented as key in xDS Node Metadata.
func (o MetadataLabelsResponseOutput) LabelName() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataLabelsResponse) string { return v.LabelName }).(pulumi.StringOutput)
}

// Label value presented as value corresponding to the above key, in xDS Node Metadata.
func (o MetadataLabelsResponseOutput) LabelValue() pulumi.StringOutput {
	return o.ApplyT(func(v MetadataLabelsResponse) string { return v.LabelValue }).(pulumi.StringOutput)
}

type MetadataLabelsResponseArrayOutput struct{ *pulumi.OutputState }

func (MetadataLabelsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MetadataLabelsResponse)(nil)).Elem()
}

func (o MetadataLabelsResponseArrayOutput) ToMetadataLabelsResponseArrayOutput() MetadataLabelsResponseArrayOutput {
	return o
}

func (o MetadataLabelsResponseArrayOutput) ToMetadataLabelsResponseArrayOutputWithContext(ctx context.Context) MetadataLabelsResponseArrayOutput {
	return o
}

func (o MetadataLabelsResponseArrayOutput) Index(i pulumi.IntInput) MetadataLabelsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MetadataLabelsResponse {
		return vs[0].([]MetadataLabelsResponse)[vs[1].(int)]
	}).(MetadataLabelsResponseOutput)
}

// The specifications for routing traffic and applying associated policies.
type TcpRouteRouteAction struct {
	// Optional. The destination services to which traffic should be forwarded. At least one destination service is required.
	Destinations []TcpRouteRouteDestination `pulumi:"destinations"`
	// Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false.
	OriginalDestination *bool `pulumi:"originalDestination"`
}

// TcpRouteRouteActionInput is an input type that accepts TcpRouteRouteActionArgs and TcpRouteRouteActionOutput values.
// You can construct a concrete instance of `TcpRouteRouteActionInput` via:
//
//          TcpRouteRouteActionArgs{...}
type TcpRouteRouteActionInput interface {
	pulumi.Input

	ToTcpRouteRouteActionOutput() TcpRouteRouteActionOutput
	ToTcpRouteRouteActionOutputWithContext(context.Context) TcpRouteRouteActionOutput
}

// The specifications for routing traffic and applying associated policies.
type TcpRouteRouteActionArgs struct {
	// Optional. The destination services to which traffic should be forwarded. At least one destination service is required.
	Destinations TcpRouteRouteDestinationArrayInput `pulumi:"destinations"`
	// Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false.
	OriginalDestination pulumi.BoolPtrInput `pulumi:"originalDestination"`
}

func (TcpRouteRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteAction)(nil)).Elem()
}

func (i TcpRouteRouteActionArgs) ToTcpRouteRouteActionOutput() TcpRouteRouteActionOutput {
	return i.ToTcpRouteRouteActionOutputWithContext(context.Background())
}

func (i TcpRouteRouteActionArgs) ToTcpRouteRouteActionOutputWithContext(ctx context.Context) TcpRouteRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRouteActionOutput)
}

// The specifications for routing traffic and applying associated policies.
type TcpRouteRouteActionOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteAction)(nil)).Elem()
}

func (o TcpRouteRouteActionOutput) ToTcpRouteRouteActionOutput() TcpRouteRouteActionOutput {
	return o
}

func (o TcpRouteRouteActionOutput) ToTcpRouteRouteActionOutputWithContext(ctx context.Context) TcpRouteRouteActionOutput {
	return o
}

// Optional. The destination services to which traffic should be forwarded. At least one destination service is required.
func (o TcpRouteRouteActionOutput) Destinations() TcpRouteRouteDestinationArrayOutput {
	return o.ApplyT(func(v TcpRouteRouteAction) []TcpRouteRouteDestination { return v.Destinations }).(TcpRouteRouteDestinationArrayOutput)
}

// Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false.
func (o TcpRouteRouteActionOutput) OriginalDestination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpRouteRouteAction) *bool { return v.OriginalDestination }).(pulumi.BoolPtrOutput)
}

// The specifications for routing traffic and applying associated policies.
type TcpRouteRouteActionResponse struct {
	// Optional. The destination services to which traffic should be forwarded. At least one destination service is required.
	Destinations []TcpRouteRouteDestinationResponse `pulumi:"destinations"`
	// Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false.
	OriginalDestination bool `pulumi:"originalDestination"`
}

// The specifications for routing traffic and applying associated policies.
type TcpRouteRouteActionResponseOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteActionResponse)(nil)).Elem()
}

func (o TcpRouteRouteActionResponseOutput) ToTcpRouteRouteActionResponseOutput() TcpRouteRouteActionResponseOutput {
	return o
}

func (o TcpRouteRouteActionResponseOutput) ToTcpRouteRouteActionResponseOutputWithContext(ctx context.Context) TcpRouteRouteActionResponseOutput {
	return o
}

// Optional. The destination services to which traffic should be forwarded. At least one destination service is required.
func (o TcpRouteRouteActionResponseOutput) Destinations() TcpRouteRouteDestinationResponseArrayOutput {
	return o.ApplyT(func(v TcpRouteRouteActionResponse) []TcpRouteRouteDestinationResponse { return v.Destinations }).(TcpRouteRouteDestinationResponseArrayOutput)
}

// Optional. If true, Router will use the destination IP and port of the original connection as the destination of the request. Default is false.
func (o TcpRouteRouteActionResponseOutput) OriginalDestination() pulumi.BoolOutput {
	return o.ApplyT(func(v TcpRouteRouteActionResponse) bool { return v.OriginalDestination }).(pulumi.BoolOutput)
}

// Describe the destination for traffic to be routed to.
type TcpRouteRouteDestination struct {
	// The URL of a BackendService to route traffic to.
	ServiceName string `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight *int `pulumi:"weight"`
}

// TcpRouteRouteDestinationInput is an input type that accepts TcpRouteRouteDestinationArgs and TcpRouteRouteDestinationOutput values.
// You can construct a concrete instance of `TcpRouteRouteDestinationInput` via:
//
//          TcpRouteRouteDestinationArgs{...}
type TcpRouteRouteDestinationInput interface {
	pulumi.Input

	ToTcpRouteRouteDestinationOutput() TcpRouteRouteDestinationOutput
	ToTcpRouteRouteDestinationOutputWithContext(context.Context) TcpRouteRouteDestinationOutput
}

// Describe the destination for traffic to be routed to.
type TcpRouteRouteDestinationArgs struct {
	// The URL of a BackendService to route traffic to.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (TcpRouteRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteDestination)(nil)).Elem()
}

func (i TcpRouteRouteDestinationArgs) ToTcpRouteRouteDestinationOutput() TcpRouteRouteDestinationOutput {
	return i.ToTcpRouteRouteDestinationOutputWithContext(context.Background())
}

func (i TcpRouteRouteDestinationArgs) ToTcpRouteRouteDestinationOutputWithContext(ctx context.Context) TcpRouteRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRouteDestinationOutput)
}

// TcpRouteRouteDestinationArrayInput is an input type that accepts TcpRouteRouteDestinationArray and TcpRouteRouteDestinationArrayOutput values.
// You can construct a concrete instance of `TcpRouteRouteDestinationArrayInput` via:
//
//          TcpRouteRouteDestinationArray{ TcpRouteRouteDestinationArgs{...} }
type TcpRouteRouteDestinationArrayInput interface {
	pulumi.Input

	ToTcpRouteRouteDestinationArrayOutput() TcpRouteRouteDestinationArrayOutput
	ToTcpRouteRouteDestinationArrayOutputWithContext(context.Context) TcpRouteRouteDestinationArrayOutput
}

type TcpRouteRouteDestinationArray []TcpRouteRouteDestinationInput

func (TcpRouteRouteDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteDestination)(nil)).Elem()
}

func (i TcpRouteRouteDestinationArray) ToTcpRouteRouteDestinationArrayOutput() TcpRouteRouteDestinationArrayOutput {
	return i.ToTcpRouteRouteDestinationArrayOutputWithContext(context.Background())
}

func (i TcpRouteRouteDestinationArray) ToTcpRouteRouteDestinationArrayOutputWithContext(ctx context.Context) TcpRouteRouteDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRouteDestinationArrayOutput)
}

// Describe the destination for traffic to be routed to.
type TcpRouteRouteDestinationOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteDestination)(nil)).Elem()
}

func (o TcpRouteRouteDestinationOutput) ToTcpRouteRouteDestinationOutput() TcpRouteRouteDestinationOutput {
	return o
}

func (o TcpRouteRouteDestinationOutput) ToTcpRouteRouteDestinationOutputWithContext(ctx context.Context) TcpRouteRouteDestinationOutput {
	return o
}

// The URL of a BackendService to route traffic to.
func (o TcpRouteRouteDestinationOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRouteDestination) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o TcpRouteRouteDestinationOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpRouteRouteDestination) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type TcpRouteRouteDestinationArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteDestination)(nil)).Elem()
}

func (o TcpRouteRouteDestinationArrayOutput) ToTcpRouteRouteDestinationArrayOutput() TcpRouteRouteDestinationArrayOutput {
	return o
}

func (o TcpRouteRouteDestinationArrayOutput) ToTcpRouteRouteDestinationArrayOutputWithContext(ctx context.Context) TcpRouteRouteDestinationArrayOutput {
	return o
}

func (o TcpRouteRouteDestinationArrayOutput) Index(i pulumi.IntInput) TcpRouteRouteDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRouteDestination {
		return vs[0].([]TcpRouteRouteDestination)[vs[1].(int)]
	}).(TcpRouteRouteDestinationOutput)
}

// Describe the destination for traffic to be routed to.
type TcpRouteRouteDestinationResponse struct {
	// The URL of a BackendService to route traffic to.
	ServiceName string `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
	Weight int `pulumi:"weight"`
}

// Describe the destination for traffic to be routed to.
type TcpRouteRouteDestinationResponseOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteDestinationResponse)(nil)).Elem()
}

func (o TcpRouteRouteDestinationResponseOutput) ToTcpRouteRouteDestinationResponseOutput() TcpRouteRouteDestinationResponseOutput {
	return o
}

func (o TcpRouteRouteDestinationResponseOutput) ToTcpRouteRouteDestinationResponseOutputWithContext(ctx context.Context) TcpRouteRouteDestinationResponseOutput {
	return o
}

// The URL of a BackendService to route traffic to.
func (o TcpRouteRouteDestinationResponseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRouteDestinationResponse) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Optional. Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.
func (o TcpRouteRouteDestinationResponseOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v TcpRouteRouteDestinationResponse) int { return v.Weight }).(pulumi.IntOutput)
}

type TcpRouteRouteDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteDestinationResponse)(nil)).Elem()
}

func (o TcpRouteRouteDestinationResponseArrayOutput) ToTcpRouteRouteDestinationResponseArrayOutput() TcpRouteRouteDestinationResponseArrayOutput {
	return o
}

func (o TcpRouteRouteDestinationResponseArrayOutput) ToTcpRouteRouteDestinationResponseArrayOutputWithContext(ctx context.Context) TcpRouteRouteDestinationResponseArrayOutput {
	return o
}

func (o TcpRouteRouteDestinationResponseArrayOutput) Index(i pulumi.IntInput) TcpRouteRouteDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRouteDestinationResponse {
		return vs[0].([]TcpRouteRouteDestinationResponse)[vs[1].(int)]
	}).(TcpRouteRouteDestinationResponseOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TcpRouteRouteMatch struct {
	// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
	Address string `pulumi:"address"`
	// Specifies the destination port to match against.
	Port string `pulumi:"port"`
}

// TcpRouteRouteMatchInput is an input type that accepts TcpRouteRouteMatchArgs and TcpRouteRouteMatchOutput values.
// You can construct a concrete instance of `TcpRouteRouteMatchInput` via:
//
//          TcpRouteRouteMatchArgs{...}
type TcpRouteRouteMatchInput interface {
	pulumi.Input

	ToTcpRouteRouteMatchOutput() TcpRouteRouteMatchOutput
	ToTcpRouteRouteMatchOutputWithContext(context.Context) TcpRouteRouteMatchOutput
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TcpRouteRouteMatchArgs struct {
	// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
	Address pulumi.StringInput `pulumi:"address"`
	// Specifies the destination port to match against.
	Port pulumi.StringInput `pulumi:"port"`
}

func (TcpRouteRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteMatch)(nil)).Elem()
}

func (i TcpRouteRouteMatchArgs) ToTcpRouteRouteMatchOutput() TcpRouteRouteMatchOutput {
	return i.ToTcpRouteRouteMatchOutputWithContext(context.Background())
}

func (i TcpRouteRouteMatchArgs) ToTcpRouteRouteMatchOutputWithContext(ctx context.Context) TcpRouteRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRouteMatchOutput)
}

// TcpRouteRouteMatchArrayInput is an input type that accepts TcpRouteRouteMatchArray and TcpRouteRouteMatchArrayOutput values.
// You can construct a concrete instance of `TcpRouteRouteMatchArrayInput` via:
//
//          TcpRouteRouteMatchArray{ TcpRouteRouteMatchArgs{...} }
type TcpRouteRouteMatchArrayInput interface {
	pulumi.Input

	ToTcpRouteRouteMatchArrayOutput() TcpRouteRouteMatchArrayOutput
	ToTcpRouteRouteMatchArrayOutputWithContext(context.Context) TcpRouteRouteMatchArrayOutput
}

type TcpRouteRouteMatchArray []TcpRouteRouteMatchInput

func (TcpRouteRouteMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteMatch)(nil)).Elem()
}

func (i TcpRouteRouteMatchArray) ToTcpRouteRouteMatchArrayOutput() TcpRouteRouteMatchArrayOutput {
	return i.ToTcpRouteRouteMatchArrayOutputWithContext(context.Background())
}

func (i TcpRouteRouteMatchArray) ToTcpRouteRouteMatchArrayOutputWithContext(ctx context.Context) TcpRouteRouteMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRouteMatchArrayOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TcpRouteRouteMatchOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteMatch)(nil)).Elem()
}

func (o TcpRouteRouteMatchOutput) ToTcpRouteRouteMatchOutput() TcpRouteRouteMatchOutput {
	return o
}

func (o TcpRouteRouteMatchOutput) ToTcpRouteRouteMatchOutputWithContext(ctx context.Context) TcpRouteRouteMatchOutput {
	return o
}

// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
func (o TcpRouteRouteMatchOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRouteMatch) string { return v.Address }).(pulumi.StringOutput)
}

// Specifies the destination port to match against.
func (o TcpRouteRouteMatchOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRouteMatch) string { return v.Port }).(pulumi.StringOutput)
}

type TcpRouteRouteMatchArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteMatch)(nil)).Elem()
}

func (o TcpRouteRouteMatchArrayOutput) ToTcpRouteRouteMatchArrayOutput() TcpRouteRouteMatchArrayOutput {
	return o
}

func (o TcpRouteRouteMatchArrayOutput) ToTcpRouteRouteMatchArrayOutputWithContext(ctx context.Context) TcpRouteRouteMatchArrayOutput {
	return o
}

func (o TcpRouteRouteMatchArrayOutput) Index(i pulumi.IntInput) TcpRouteRouteMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRouteMatch {
		return vs[0].([]TcpRouteRouteMatch)[vs[1].(int)]
	}).(TcpRouteRouteMatchOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TcpRouteRouteMatchResponse struct {
	// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
	Address string `pulumi:"address"`
	// Specifies the destination port to match against.
	Port string `pulumi:"port"`
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TcpRouteRouteMatchResponseOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteMatchResponse)(nil)).Elem()
}

func (o TcpRouteRouteMatchResponseOutput) ToTcpRouteRouteMatchResponseOutput() TcpRouteRouteMatchResponseOutput {
	return o
}

func (o TcpRouteRouteMatchResponseOutput) ToTcpRouteRouteMatchResponseOutputWithContext(ctx context.Context) TcpRouteRouteMatchResponseOutput {
	return o
}

// Must be specified in the CIDR range format. A CIDR range consists of an IP Address and a prefix length to construct the subnet mask. By default, the prefix length is 32 (i.e. matches a single IP address). Only IPV4 addresses are supported. Examples: "10.0.0.1" - matches against this exact IP address. "10.0.0.0/8" - matches against any IP address within the 10.0.0.0 subnet and 255.255.255.0 mask. "0.0.0.0/0" - matches against any IP address'.
func (o TcpRouteRouteMatchResponseOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRouteMatchResponse) string { return v.Address }).(pulumi.StringOutput)
}

// Specifies the destination port to match against.
func (o TcpRouteRouteMatchResponseOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteRouteMatchResponse) string { return v.Port }).(pulumi.StringOutput)
}

type TcpRouteRouteMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteMatchResponse)(nil)).Elem()
}

func (o TcpRouteRouteMatchResponseArrayOutput) ToTcpRouteRouteMatchResponseArrayOutput() TcpRouteRouteMatchResponseArrayOutput {
	return o
}

func (o TcpRouteRouteMatchResponseArrayOutput) ToTcpRouteRouteMatchResponseArrayOutputWithContext(ctx context.Context) TcpRouteRouteMatchResponseArrayOutput {
	return o
}

func (o TcpRouteRouteMatchResponseArrayOutput) Index(i pulumi.IntInput) TcpRouteRouteMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRouteMatchResponse {
		return vs[0].([]TcpRouteRouteMatchResponse)[vs[1].(int)]
	}).(TcpRouteRouteMatchResponseOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TcpRouteRouteRule struct {
	// The detailed rule defining how to route matched traffic.
	Action TcpRouteRouteAction `pulumi:"action"`
	// Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
	Matches []TcpRouteRouteMatch `pulumi:"matches"`
}

// TcpRouteRouteRuleInput is an input type that accepts TcpRouteRouteRuleArgs and TcpRouteRouteRuleOutput values.
// You can construct a concrete instance of `TcpRouteRouteRuleInput` via:
//
//          TcpRouteRouteRuleArgs{...}
type TcpRouteRouteRuleInput interface {
	pulumi.Input

	ToTcpRouteRouteRuleOutput() TcpRouteRouteRuleOutput
	ToTcpRouteRouteRuleOutputWithContext(context.Context) TcpRouteRouteRuleOutput
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TcpRouteRouteRuleArgs struct {
	// The detailed rule defining how to route matched traffic.
	Action TcpRouteRouteActionInput `pulumi:"action"`
	// Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
	Matches TcpRouteRouteMatchArrayInput `pulumi:"matches"`
}

func (TcpRouteRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteRule)(nil)).Elem()
}

func (i TcpRouteRouteRuleArgs) ToTcpRouteRouteRuleOutput() TcpRouteRouteRuleOutput {
	return i.ToTcpRouteRouteRuleOutputWithContext(context.Background())
}

func (i TcpRouteRouteRuleArgs) ToTcpRouteRouteRuleOutputWithContext(ctx context.Context) TcpRouteRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRouteRuleOutput)
}

// TcpRouteRouteRuleArrayInput is an input type that accepts TcpRouteRouteRuleArray and TcpRouteRouteRuleArrayOutput values.
// You can construct a concrete instance of `TcpRouteRouteRuleArrayInput` via:
//
//          TcpRouteRouteRuleArray{ TcpRouteRouteRuleArgs{...} }
type TcpRouteRouteRuleArrayInput interface {
	pulumi.Input

	ToTcpRouteRouteRuleArrayOutput() TcpRouteRouteRuleArrayOutput
	ToTcpRouteRouteRuleArrayOutputWithContext(context.Context) TcpRouteRouteRuleArrayOutput
}

type TcpRouteRouteRuleArray []TcpRouteRouteRuleInput

func (TcpRouteRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteRule)(nil)).Elem()
}

func (i TcpRouteRouteRuleArray) ToTcpRouteRouteRuleArrayOutput() TcpRouteRouteRuleArrayOutput {
	return i.ToTcpRouteRouteRuleArrayOutputWithContext(context.Background())
}

func (i TcpRouteRouteRuleArray) ToTcpRouteRouteRuleArrayOutputWithContext(ctx context.Context) TcpRouteRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRouteRuleArrayOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TcpRouteRouteRuleOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteRule)(nil)).Elem()
}

func (o TcpRouteRouteRuleOutput) ToTcpRouteRouteRuleOutput() TcpRouteRouteRuleOutput {
	return o
}

func (o TcpRouteRouteRuleOutput) ToTcpRouteRouteRuleOutputWithContext(ctx context.Context) TcpRouteRouteRuleOutput {
	return o
}

// The detailed rule defining how to route matched traffic.
func (o TcpRouteRouteRuleOutput) Action() TcpRouteRouteActionOutput {
	return o.ApplyT(func(v TcpRouteRouteRule) TcpRouteRouteAction { return v.Action }).(TcpRouteRouteActionOutput)
}

// Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
func (o TcpRouteRouteRuleOutput) Matches() TcpRouteRouteMatchArrayOutput {
	return o.ApplyT(func(v TcpRouteRouteRule) []TcpRouteRouteMatch { return v.Matches }).(TcpRouteRouteMatchArrayOutput)
}

type TcpRouteRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteRule)(nil)).Elem()
}

func (o TcpRouteRouteRuleArrayOutput) ToTcpRouteRouteRuleArrayOutput() TcpRouteRouteRuleArrayOutput {
	return o
}

func (o TcpRouteRouteRuleArrayOutput) ToTcpRouteRouteRuleArrayOutputWithContext(ctx context.Context) TcpRouteRouteRuleArrayOutput {
	return o
}

func (o TcpRouteRouteRuleArrayOutput) Index(i pulumi.IntInput) TcpRouteRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRouteRule {
		return vs[0].([]TcpRouteRouteRule)[vs[1].(int)]
	}).(TcpRouteRouteRuleOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TcpRouteRouteRuleResponse struct {
	// The detailed rule defining how to route matched traffic.
	Action TcpRouteRouteActionResponse `pulumi:"action"`
	// Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
	Matches []TcpRouteRouteMatchResponse `pulumi:"matches"`
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TcpRouteRouteRuleResponseOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRouteRuleResponse)(nil)).Elem()
}

func (o TcpRouteRouteRuleResponseOutput) ToTcpRouteRouteRuleResponseOutput() TcpRouteRouteRuleResponseOutput {
	return o
}

func (o TcpRouteRouteRuleResponseOutput) ToTcpRouteRouteRuleResponseOutputWithContext(ctx context.Context) TcpRouteRouteRuleResponseOutput {
	return o
}

// The detailed rule defining how to route matched traffic.
func (o TcpRouteRouteRuleResponseOutput) Action() TcpRouteRouteActionResponseOutput {
	return o.ApplyT(func(v TcpRouteRouteRuleResponse) TcpRouteRouteActionResponse { return v.Action }).(TcpRouteRouteActionResponseOutput)
}

// Optional. RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
func (o TcpRouteRouteRuleResponseOutput) Matches() TcpRouteRouteMatchResponseArrayOutput {
	return o.ApplyT(func(v TcpRouteRouteRuleResponse) []TcpRouteRouteMatchResponse { return v.Matches }).(TcpRouteRouteMatchResponseArrayOutput)
}

type TcpRouteRouteRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRouteRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRouteRuleResponse)(nil)).Elem()
}

func (o TcpRouteRouteRuleResponseArrayOutput) ToTcpRouteRouteRuleResponseArrayOutput() TcpRouteRouteRuleResponseArrayOutput {
	return o
}

func (o TcpRouteRouteRuleResponseArrayOutput) ToTcpRouteRouteRuleResponseArrayOutputWithContext(ctx context.Context) TcpRouteRouteRuleResponseArrayOutput {
	return o
}

func (o TcpRouteRouteRuleResponseArrayOutput) Index(i pulumi.IntInput) TcpRouteRouteRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRouteRuleResponse {
		return vs[0].([]TcpRouteRouteRuleResponse)[vs[1].(int)]
	}).(TcpRouteRouteRuleResponseOutput)
}

// The specifications for routing traffic and applying associated policies.
type TlsRouteRouteAction struct {
	// The destination services to which traffic should be forwarded. At least one destination service is required.
	Destinations []TlsRouteRouteDestination `pulumi:"destinations"`
}

// TlsRouteRouteActionInput is an input type that accepts TlsRouteRouteActionArgs and TlsRouteRouteActionOutput values.
// You can construct a concrete instance of `TlsRouteRouteActionInput` via:
//
//          TlsRouteRouteActionArgs{...}
type TlsRouteRouteActionInput interface {
	pulumi.Input

	ToTlsRouteRouteActionOutput() TlsRouteRouteActionOutput
	ToTlsRouteRouteActionOutputWithContext(context.Context) TlsRouteRouteActionOutput
}

// The specifications for routing traffic and applying associated policies.
type TlsRouteRouteActionArgs struct {
	// The destination services to which traffic should be forwarded. At least one destination service is required.
	Destinations TlsRouteRouteDestinationArrayInput `pulumi:"destinations"`
}

func (TlsRouteRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteAction)(nil)).Elem()
}

func (i TlsRouteRouteActionArgs) ToTlsRouteRouteActionOutput() TlsRouteRouteActionOutput {
	return i.ToTlsRouteRouteActionOutputWithContext(context.Background())
}

func (i TlsRouteRouteActionArgs) ToTlsRouteRouteActionOutputWithContext(ctx context.Context) TlsRouteRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteRouteActionOutput)
}

// The specifications for routing traffic and applying associated policies.
type TlsRouteRouteActionOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteAction)(nil)).Elem()
}

func (o TlsRouteRouteActionOutput) ToTlsRouteRouteActionOutput() TlsRouteRouteActionOutput {
	return o
}

func (o TlsRouteRouteActionOutput) ToTlsRouteRouteActionOutputWithContext(ctx context.Context) TlsRouteRouteActionOutput {
	return o
}

// The destination services to which traffic should be forwarded. At least one destination service is required.
func (o TlsRouteRouteActionOutput) Destinations() TlsRouteRouteDestinationArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteAction) []TlsRouteRouteDestination { return v.Destinations }).(TlsRouteRouteDestinationArrayOutput)
}

// The specifications for routing traffic and applying associated policies.
type TlsRouteRouteActionResponse struct {
	// The destination services to which traffic should be forwarded. At least one destination service is required.
	Destinations []TlsRouteRouteDestinationResponse `pulumi:"destinations"`
}

// The specifications for routing traffic and applying associated policies.
type TlsRouteRouteActionResponseOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteActionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteActionResponse)(nil)).Elem()
}

func (o TlsRouteRouteActionResponseOutput) ToTlsRouteRouteActionResponseOutput() TlsRouteRouteActionResponseOutput {
	return o
}

func (o TlsRouteRouteActionResponseOutput) ToTlsRouteRouteActionResponseOutputWithContext(ctx context.Context) TlsRouteRouteActionResponseOutput {
	return o
}

// The destination services to which traffic should be forwarded. At least one destination service is required.
func (o TlsRouteRouteActionResponseOutput) Destinations() TlsRouteRouteDestinationResponseArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteActionResponse) []TlsRouteRouteDestinationResponse { return v.Destinations }).(TlsRouteRouteDestinationResponseArrayOutput)
}

// Describe the destination for traffic to be routed to.
type TlsRouteRouteDestination struct {
	// The URL of a BackendService to route traffic to.
	ServiceName string `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.
	Weight *int `pulumi:"weight"`
}

// TlsRouteRouteDestinationInput is an input type that accepts TlsRouteRouteDestinationArgs and TlsRouteRouteDestinationOutput values.
// You can construct a concrete instance of `TlsRouteRouteDestinationInput` via:
//
//          TlsRouteRouteDestinationArgs{...}
type TlsRouteRouteDestinationInput interface {
	pulumi.Input

	ToTlsRouteRouteDestinationOutput() TlsRouteRouteDestinationOutput
	ToTlsRouteRouteDestinationOutputWithContext(context.Context) TlsRouteRouteDestinationOutput
}

// Describe the destination for traffic to be routed to.
type TlsRouteRouteDestinationArgs struct {
	// The URL of a BackendService to route traffic to.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (TlsRouteRouteDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteDestination)(nil)).Elem()
}

func (i TlsRouteRouteDestinationArgs) ToTlsRouteRouteDestinationOutput() TlsRouteRouteDestinationOutput {
	return i.ToTlsRouteRouteDestinationOutputWithContext(context.Background())
}

func (i TlsRouteRouteDestinationArgs) ToTlsRouteRouteDestinationOutputWithContext(ctx context.Context) TlsRouteRouteDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteRouteDestinationOutput)
}

// TlsRouteRouteDestinationArrayInput is an input type that accepts TlsRouteRouteDestinationArray and TlsRouteRouteDestinationArrayOutput values.
// You can construct a concrete instance of `TlsRouteRouteDestinationArrayInput` via:
//
//          TlsRouteRouteDestinationArray{ TlsRouteRouteDestinationArgs{...} }
type TlsRouteRouteDestinationArrayInput interface {
	pulumi.Input

	ToTlsRouteRouteDestinationArrayOutput() TlsRouteRouteDestinationArrayOutput
	ToTlsRouteRouteDestinationArrayOutputWithContext(context.Context) TlsRouteRouteDestinationArrayOutput
}

type TlsRouteRouteDestinationArray []TlsRouteRouteDestinationInput

func (TlsRouteRouteDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteDestination)(nil)).Elem()
}

func (i TlsRouteRouteDestinationArray) ToTlsRouteRouteDestinationArrayOutput() TlsRouteRouteDestinationArrayOutput {
	return i.ToTlsRouteRouteDestinationArrayOutputWithContext(context.Background())
}

func (i TlsRouteRouteDestinationArray) ToTlsRouteRouteDestinationArrayOutputWithContext(ctx context.Context) TlsRouteRouteDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteRouteDestinationArrayOutput)
}

// Describe the destination for traffic to be routed to.
type TlsRouteRouteDestinationOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteDestination)(nil)).Elem()
}

func (o TlsRouteRouteDestinationOutput) ToTlsRouteRouteDestinationOutput() TlsRouteRouteDestinationOutput {
	return o
}

func (o TlsRouteRouteDestinationOutput) ToTlsRouteRouteDestinationOutputWithContext(ctx context.Context) TlsRouteRouteDestinationOutput {
	return o
}

// The URL of a BackendService to route traffic to.
func (o TlsRouteRouteDestinationOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v TlsRouteRouteDestination) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.
func (o TlsRouteRouteDestinationOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TlsRouteRouteDestination) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type TlsRouteRouteDestinationArrayOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteDestination)(nil)).Elem()
}

func (o TlsRouteRouteDestinationArrayOutput) ToTlsRouteRouteDestinationArrayOutput() TlsRouteRouteDestinationArrayOutput {
	return o
}

func (o TlsRouteRouteDestinationArrayOutput) ToTlsRouteRouteDestinationArrayOutputWithContext(ctx context.Context) TlsRouteRouteDestinationArrayOutput {
	return o
}

func (o TlsRouteRouteDestinationArrayOutput) Index(i pulumi.IntInput) TlsRouteRouteDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsRouteRouteDestination {
		return vs[0].([]TlsRouteRouteDestination)[vs[1].(int)]
	}).(TlsRouteRouteDestinationOutput)
}

// Describe the destination for traffic to be routed to.
type TlsRouteRouteDestinationResponse struct {
	// The URL of a BackendService to route traffic to.
	ServiceName string `pulumi:"serviceName"`
	// Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.
	Weight int `pulumi:"weight"`
}

// Describe the destination for traffic to be routed to.
type TlsRouteRouteDestinationResponseOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteDestinationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteDestinationResponse)(nil)).Elem()
}

func (o TlsRouteRouteDestinationResponseOutput) ToTlsRouteRouteDestinationResponseOutput() TlsRouteRouteDestinationResponseOutput {
	return o
}

func (o TlsRouteRouteDestinationResponseOutput) ToTlsRouteRouteDestinationResponseOutputWithContext(ctx context.Context) TlsRouteRouteDestinationResponseOutput {
	return o
}

// The URL of a BackendService to route traffic to.
func (o TlsRouteRouteDestinationResponseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v TlsRouteRouteDestinationResponse) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Optional. Specifies the proportion of requests forwareded to the backend referenced by the service_name field. This is computed as: weight/Sum(weights in destinations) Weights in all destinations does not need to sum up to 100.
func (o TlsRouteRouteDestinationResponseOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v TlsRouteRouteDestinationResponse) int { return v.Weight }).(pulumi.IntOutput)
}

type TlsRouteRouteDestinationResponseArrayOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteDestinationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteDestinationResponse)(nil)).Elem()
}

func (o TlsRouteRouteDestinationResponseArrayOutput) ToTlsRouteRouteDestinationResponseArrayOutput() TlsRouteRouteDestinationResponseArrayOutput {
	return o
}

func (o TlsRouteRouteDestinationResponseArrayOutput) ToTlsRouteRouteDestinationResponseArrayOutputWithContext(ctx context.Context) TlsRouteRouteDestinationResponseArrayOutput {
	return o
}

func (o TlsRouteRouteDestinationResponseArrayOutput) Index(i pulumi.IntInput) TlsRouteRouteDestinationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsRouteRouteDestinationResponse {
		return vs[0].([]TlsRouteRouteDestinationResponse)[vs[1].(int)]
	}).(TlsRouteRouteDestinationResponseOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "AND"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TlsRouteRouteMatch struct {
	// Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
	Alpn []string `pulumi:"alpn"`
	// Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
	SniHost []string `pulumi:"sniHost"`
}

// TlsRouteRouteMatchInput is an input type that accepts TlsRouteRouteMatchArgs and TlsRouteRouteMatchOutput values.
// You can construct a concrete instance of `TlsRouteRouteMatchInput` via:
//
//          TlsRouteRouteMatchArgs{...}
type TlsRouteRouteMatchInput interface {
	pulumi.Input

	ToTlsRouteRouteMatchOutput() TlsRouteRouteMatchOutput
	ToTlsRouteRouteMatchOutputWithContext(context.Context) TlsRouteRouteMatchOutput
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "AND"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TlsRouteRouteMatchArgs struct {
	// Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
	Alpn pulumi.StringArrayInput `pulumi:"alpn"`
	// Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
	SniHost pulumi.StringArrayInput `pulumi:"sniHost"`
}

func (TlsRouteRouteMatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteMatch)(nil)).Elem()
}

func (i TlsRouteRouteMatchArgs) ToTlsRouteRouteMatchOutput() TlsRouteRouteMatchOutput {
	return i.ToTlsRouteRouteMatchOutputWithContext(context.Background())
}

func (i TlsRouteRouteMatchArgs) ToTlsRouteRouteMatchOutputWithContext(ctx context.Context) TlsRouteRouteMatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteRouteMatchOutput)
}

// TlsRouteRouteMatchArrayInput is an input type that accepts TlsRouteRouteMatchArray and TlsRouteRouteMatchArrayOutput values.
// You can construct a concrete instance of `TlsRouteRouteMatchArrayInput` via:
//
//          TlsRouteRouteMatchArray{ TlsRouteRouteMatchArgs{...} }
type TlsRouteRouteMatchArrayInput interface {
	pulumi.Input

	ToTlsRouteRouteMatchArrayOutput() TlsRouteRouteMatchArrayOutput
	ToTlsRouteRouteMatchArrayOutputWithContext(context.Context) TlsRouteRouteMatchArrayOutput
}

type TlsRouteRouteMatchArray []TlsRouteRouteMatchInput

func (TlsRouteRouteMatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteMatch)(nil)).Elem()
}

func (i TlsRouteRouteMatchArray) ToTlsRouteRouteMatchArrayOutput() TlsRouteRouteMatchArrayOutput {
	return i.ToTlsRouteRouteMatchArrayOutputWithContext(context.Background())
}

func (i TlsRouteRouteMatchArray) ToTlsRouteRouteMatchArrayOutputWithContext(ctx context.Context) TlsRouteRouteMatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteRouteMatchArrayOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "AND"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TlsRouteRouteMatchOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteMatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteMatch)(nil)).Elem()
}

func (o TlsRouteRouteMatchOutput) ToTlsRouteRouteMatchOutput() TlsRouteRouteMatchOutput {
	return o
}

func (o TlsRouteRouteMatchOutput) ToTlsRouteRouteMatchOutputWithContext(ctx context.Context) TlsRouteRouteMatchOutput {
	return o
}

// Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
func (o TlsRouteRouteMatchOutput) Alpn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteMatch) []string { return v.Alpn }).(pulumi.StringArrayOutput)
}

// Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
func (o TlsRouteRouteMatchOutput) SniHost() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteMatch) []string { return v.SniHost }).(pulumi.StringArrayOutput)
}

type TlsRouteRouteMatchArrayOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteMatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteMatch)(nil)).Elem()
}

func (o TlsRouteRouteMatchArrayOutput) ToTlsRouteRouteMatchArrayOutput() TlsRouteRouteMatchArrayOutput {
	return o
}

func (o TlsRouteRouteMatchArrayOutput) ToTlsRouteRouteMatchArrayOutputWithContext(ctx context.Context) TlsRouteRouteMatchArrayOutput {
	return o
}

func (o TlsRouteRouteMatchArrayOutput) Index(i pulumi.IntInput) TlsRouteRouteMatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsRouteRouteMatch {
		return vs[0].([]TlsRouteRouteMatch)[vs[1].(int)]
	}).(TlsRouteRouteMatchOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "AND"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TlsRouteRouteMatchResponse struct {
	// Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
	Alpn []string `pulumi:"alpn"`
	// Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
	SniHost []string `pulumi:"sniHost"`
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "AND"ed for evaluation. If no routeMatch field is specified, this rule will unconditionally match traffic.
type TlsRouteRouteMatchResponseOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteMatchResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteMatchResponse)(nil)).Elem()
}

func (o TlsRouteRouteMatchResponseOutput) ToTlsRouteRouteMatchResponseOutput() TlsRouteRouteMatchResponseOutput {
	return o
}

func (o TlsRouteRouteMatchResponseOutput) ToTlsRouteRouteMatchResponseOutputWithContext(ctx context.Context) TlsRouteRouteMatchResponseOutput {
	return o
}

// Optional. ALPN (Application-Layer Protocol Negotiation) to match against. Examples: "http/1.1", "h2". At least one of sni_host and alpn is required. Up to 5 alpns across all matches can be set.
func (o TlsRouteRouteMatchResponseOutput) Alpn() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteMatchResponse) []string { return v.Alpn }).(pulumi.StringArrayOutput)
}

// Optional. SNI (server name indicator) to match against. SNI will be matched against all wildcard domains, i.e. www.example.com will be first matched against www.example.com, then *.example.com, then *.com. Partial wildcards are not supported, and values like *w.example.com are invalid. At least one of sni_host and alpn is required. Up to 5 sni hosts across all matches can be set.
func (o TlsRouteRouteMatchResponseOutput) SniHost() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteMatchResponse) []string { return v.SniHost }).(pulumi.StringArrayOutput)
}

type TlsRouteRouteMatchResponseArrayOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteMatchResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteMatchResponse)(nil)).Elem()
}

func (o TlsRouteRouteMatchResponseArrayOutput) ToTlsRouteRouteMatchResponseArrayOutput() TlsRouteRouteMatchResponseArrayOutput {
	return o
}

func (o TlsRouteRouteMatchResponseArrayOutput) ToTlsRouteRouteMatchResponseArrayOutputWithContext(ctx context.Context) TlsRouteRouteMatchResponseArrayOutput {
	return o
}

func (o TlsRouteRouteMatchResponseArrayOutput) Index(i pulumi.IntInput) TlsRouteRouteMatchResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsRouteRouteMatchResponse {
		return vs[0].([]TlsRouteRouteMatchResponse)[vs[1].(int)]
	}).(TlsRouteRouteMatchResponseOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TlsRouteRouteRule struct {
	// The detailed rule defining how to route matched traffic.
	Action TlsRouteRouteAction `pulumi:"action"`
	// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
	Matches []TlsRouteRouteMatch `pulumi:"matches"`
}

// TlsRouteRouteRuleInput is an input type that accepts TlsRouteRouteRuleArgs and TlsRouteRouteRuleOutput values.
// You can construct a concrete instance of `TlsRouteRouteRuleInput` via:
//
//          TlsRouteRouteRuleArgs{...}
type TlsRouteRouteRuleInput interface {
	pulumi.Input

	ToTlsRouteRouteRuleOutput() TlsRouteRouteRuleOutput
	ToTlsRouteRouteRuleOutputWithContext(context.Context) TlsRouteRouteRuleOutput
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TlsRouteRouteRuleArgs struct {
	// The detailed rule defining how to route matched traffic.
	Action TlsRouteRouteActionInput `pulumi:"action"`
	// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
	Matches TlsRouteRouteMatchArrayInput `pulumi:"matches"`
}

func (TlsRouteRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteRule)(nil)).Elem()
}

func (i TlsRouteRouteRuleArgs) ToTlsRouteRouteRuleOutput() TlsRouteRouteRuleOutput {
	return i.ToTlsRouteRouteRuleOutputWithContext(context.Background())
}

func (i TlsRouteRouteRuleArgs) ToTlsRouteRouteRuleOutputWithContext(ctx context.Context) TlsRouteRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteRouteRuleOutput)
}

// TlsRouteRouteRuleArrayInput is an input type that accepts TlsRouteRouteRuleArray and TlsRouteRouteRuleArrayOutput values.
// You can construct a concrete instance of `TlsRouteRouteRuleArrayInput` via:
//
//          TlsRouteRouteRuleArray{ TlsRouteRouteRuleArgs{...} }
type TlsRouteRouteRuleArrayInput interface {
	pulumi.Input

	ToTlsRouteRouteRuleArrayOutput() TlsRouteRouteRuleArrayOutput
	ToTlsRouteRouteRuleArrayOutputWithContext(context.Context) TlsRouteRouteRuleArrayOutput
}

type TlsRouteRouteRuleArray []TlsRouteRouteRuleInput

func (TlsRouteRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteRule)(nil)).Elem()
}

func (i TlsRouteRouteRuleArray) ToTlsRouteRouteRuleArrayOutput() TlsRouteRouteRuleArrayOutput {
	return i.ToTlsRouteRouteRuleArrayOutputWithContext(context.Background())
}

func (i TlsRouteRouteRuleArray) ToTlsRouteRouteRuleArrayOutputWithContext(ctx context.Context) TlsRouteRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsRouteRouteRuleArrayOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TlsRouteRouteRuleOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteRule)(nil)).Elem()
}

func (o TlsRouteRouteRuleOutput) ToTlsRouteRouteRuleOutput() TlsRouteRouteRuleOutput {
	return o
}

func (o TlsRouteRouteRuleOutput) ToTlsRouteRouteRuleOutputWithContext(ctx context.Context) TlsRouteRouteRuleOutput {
	return o
}

// The detailed rule defining how to route matched traffic.
func (o TlsRouteRouteRuleOutput) Action() TlsRouteRouteActionOutput {
	return o.ApplyT(func(v TlsRouteRouteRule) TlsRouteRouteAction { return v.Action }).(TlsRouteRouteActionOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
func (o TlsRouteRouteRuleOutput) Matches() TlsRouteRouteMatchArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteRule) []TlsRouteRouteMatch { return v.Matches }).(TlsRouteRouteMatchArrayOutput)
}

type TlsRouteRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteRule)(nil)).Elem()
}

func (o TlsRouteRouteRuleArrayOutput) ToTlsRouteRouteRuleArrayOutput() TlsRouteRouteRuleArrayOutput {
	return o
}

func (o TlsRouteRouteRuleArrayOutput) ToTlsRouteRouteRuleArrayOutputWithContext(ctx context.Context) TlsRouteRouteRuleArrayOutput {
	return o
}

func (o TlsRouteRouteRuleArrayOutput) Index(i pulumi.IntInput) TlsRouteRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsRouteRouteRule {
		return vs[0].([]TlsRouteRouteRule)[vs[1].(int)]
	}).(TlsRouteRouteRuleOutput)
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TlsRouteRouteRuleResponse struct {
	// The detailed rule defining how to route matched traffic.
	Action TlsRouteRouteActionResponse `pulumi:"action"`
	// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
	Matches []TlsRouteRouteMatchResponse `pulumi:"matches"`
}

// Specifies how to match traffic and how to route traffic when traffic is matched.
type TlsRouteRouteRuleResponseOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsRouteRouteRuleResponse)(nil)).Elem()
}

func (o TlsRouteRouteRuleResponseOutput) ToTlsRouteRouteRuleResponseOutput() TlsRouteRouteRuleResponseOutput {
	return o
}

func (o TlsRouteRouteRuleResponseOutput) ToTlsRouteRouteRuleResponseOutputWithContext(ctx context.Context) TlsRouteRouteRuleResponseOutput {
	return o
}

// The detailed rule defining how to route matched traffic.
func (o TlsRouteRouteRuleResponseOutput) Action() TlsRouteRouteActionResponseOutput {
	return o.ApplyT(func(v TlsRouteRouteRuleResponse) TlsRouteRouteActionResponse { return v.Action }).(TlsRouteRouteActionResponseOutput)
}

// RouteMatch defines the predicate used to match requests to a given action. Multiple match types are "OR"ed for evaluation.
func (o TlsRouteRouteRuleResponseOutput) Matches() TlsRouteRouteMatchResponseArrayOutput {
	return o.ApplyT(func(v TlsRouteRouteRuleResponse) []TlsRouteRouteMatchResponse { return v.Matches }).(TlsRouteRouteMatchResponseArrayOutput)
}

type TlsRouteRouteRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (TlsRouteRouteRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsRouteRouteRuleResponse)(nil)).Elem()
}

func (o TlsRouteRouteRuleResponseArrayOutput) ToTlsRouteRouteRuleResponseArrayOutput() TlsRouteRouteRuleResponseArrayOutput {
	return o
}

func (o TlsRouteRouteRuleResponseArrayOutput) ToTlsRouteRouteRuleResponseArrayOutputWithContext(ctx context.Context) TlsRouteRouteRuleResponseArrayOutput {
	return o
}

func (o TlsRouteRouteRuleResponseArrayOutput) Index(i pulumi.IntInput) TlsRouteRouteRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsRouteRouteRuleResponse {
		return vs[0].([]TlsRouteRouteRuleResponse)[vs[1].(int)]
	}).(TlsRouteRouteRuleResponseOutput)
}

// Specification of a port-based selector.
type TrafficPortSelector struct {
	// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
	Ports []string `pulumi:"ports"`
}

// TrafficPortSelectorInput is an input type that accepts TrafficPortSelectorArgs and TrafficPortSelectorOutput values.
// You can construct a concrete instance of `TrafficPortSelectorInput` via:
//
//          TrafficPortSelectorArgs{...}
type TrafficPortSelectorInput interface {
	pulumi.Input

	ToTrafficPortSelectorOutput() TrafficPortSelectorOutput
	ToTrafficPortSelectorOutputWithContext(context.Context) TrafficPortSelectorOutput
}

// Specification of a port-based selector.
type TrafficPortSelectorArgs struct {
	// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
	Ports pulumi.StringArrayInput `pulumi:"ports"`
}

func (TrafficPortSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPortSelector)(nil)).Elem()
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorOutput() TrafficPortSelectorOutput {
	return i.ToTrafficPortSelectorOutputWithContext(context.Background())
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorOutputWithContext(ctx context.Context) TrafficPortSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPortSelectorOutput)
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return i.ToTrafficPortSelectorPtrOutputWithContext(context.Background())
}

func (i TrafficPortSelectorArgs) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPortSelectorOutput).ToTrafficPortSelectorPtrOutputWithContext(ctx)
}

// TrafficPortSelectorPtrInput is an input type that accepts TrafficPortSelectorArgs, TrafficPortSelectorPtr and TrafficPortSelectorPtrOutput values.
// You can construct a concrete instance of `TrafficPortSelectorPtrInput` via:
//
//          TrafficPortSelectorArgs{...}
//
//  or:
//
//          nil
type TrafficPortSelectorPtrInput interface {
	pulumi.Input

	ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput
	ToTrafficPortSelectorPtrOutputWithContext(context.Context) TrafficPortSelectorPtrOutput
}

type trafficPortSelectorPtrType TrafficPortSelectorArgs

func TrafficPortSelectorPtr(v *TrafficPortSelectorArgs) TrafficPortSelectorPtrInput {
	return (*trafficPortSelectorPtrType)(v)
}

func (*trafficPortSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficPortSelector)(nil)).Elem()
}

func (i *trafficPortSelectorPtrType) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return i.ToTrafficPortSelectorPtrOutputWithContext(context.Background())
}

func (i *trafficPortSelectorPtrType) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficPortSelectorPtrOutput)
}

// Specification of a port-based selector.
type TrafficPortSelectorOutput struct{ *pulumi.OutputState }

func (TrafficPortSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPortSelector)(nil)).Elem()
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorOutput() TrafficPortSelectorOutput {
	return o
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorOutputWithContext(ctx context.Context) TrafficPortSelectorOutput {
	return o
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return o.ToTrafficPortSelectorPtrOutputWithContext(context.Background())
}

func (o TrafficPortSelectorOutput) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TrafficPortSelector) *TrafficPortSelector {
		return &v
	}).(TrafficPortSelectorPtrOutput)
}

// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
func (o TrafficPortSelectorOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrafficPortSelector) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

type TrafficPortSelectorPtrOutput struct{ *pulumi.OutputState }

func (TrafficPortSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficPortSelector)(nil)).Elem()
}

func (o TrafficPortSelectorPtrOutput) ToTrafficPortSelectorPtrOutput() TrafficPortSelectorPtrOutput {
	return o
}

func (o TrafficPortSelectorPtrOutput) ToTrafficPortSelectorPtrOutputWithContext(ctx context.Context) TrafficPortSelectorPtrOutput {
	return o
}

func (o TrafficPortSelectorPtrOutput) Elem() TrafficPortSelectorOutput {
	return o.ApplyT(func(v *TrafficPortSelector) TrafficPortSelector {
		if v != nil {
			return *v
		}
		var ret TrafficPortSelector
		return ret
	}).(TrafficPortSelectorOutput)
}

// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
func (o TrafficPortSelectorPtrOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TrafficPortSelector) []string {
		if v == nil {
			return nil
		}
		return v.Ports
	}).(pulumi.StringArrayOutput)
}

// Specification of a port-based selector.
type TrafficPortSelectorResponse struct {
	// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
	Ports []string `pulumi:"ports"`
}

// Specification of a port-based selector.
type TrafficPortSelectorResponseOutput struct{ *pulumi.OutputState }

func (TrafficPortSelectorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrafficPortSelectorResponse)(nil)).Elem()
}

func (o TrafficPortSelectorResponseOutput) ToTrafficPortSelectorResponseOutput() TrafficPortSelectorResponseOutput {
	return o
}

func (o TrafficPortSelectorResponseOutput) ToTrafficPortSelectorResponseOutputWithContext(ctx context.Context) TrafficPortSelectorResponseOutput {
	return o
}

// Optional. A list of ports. Can be port numbers or port range (example, [80-90] specifies all ports from 80 to 90, including 80 and 90) or named ports or * to specify all ports. If the list is empty, all ports are selected.
func (o TrafficPortSelectorResponseOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TrafficPortSelectorResponse) []string { return v.Ports }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMatcherInput)(nil)).Elem(), EndpointMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteDestinationInput)(nil)).Elem(), GrpcRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteDestinationArrayInput)(nil)).Elem(), GrpcRouteDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteFaultInjectionPolicyInput)(nil)).Elem(), GrpcRouteFaultInjectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteFaultInjectionPolicyPtrInput)(nil)).Elem(), GrpcRouteFaultInjectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteFaultInjectionPolicyAbortInput)(nil)).Elem(), GrpcRouteFaultInjectionPolicyAbortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteFaultInjectionPolicyAbortPtrInput)(nil)).Elem(), GrpcRouteFaultInjectionPolicyAbortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteFaultInjectionPolicyDelayInput)(nil)).Elem(), GrpcRouteFaultInjectionPolicyDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteFaultInjectionPolicyDelayPtrInput)(nil)).Elem(), GrpcRouteFaultInjectionPolicyDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteHeaderMatchInput)(nil)).Elem(), GrpcRouteHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteHeaderMatchArrayInput)(nil)).Elem(), GrpcRouteHeaderMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteMethodMatchInput)(nil)).Elem(), GrpcRouteMethodMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteMethodMatchPtrInput)(nil)).Elem(), GrpcRouteMethodMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteRetryPolicyInput)(nil)).Elem(), GrpcRouteRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteRetryPolicyPtrInput)(nil)).Elem(), GrpcRouteRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteRouteActionInput)(nil)).Elem(), GrpcRouteRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteRouteMatchInput)(nil)).Elem(), GrpcRouteRouteMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteRouteMatchArrayInput)(nil)).Elem(), GrpcRouteRouteMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteRouteRuleInput)(nil)).Elem(), GrpcRouteRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrpcRouteRouteRuleArrayInput)(nil)).Elem(), GrpcRouteRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteCorsPolicyInput)(nil)).Elem(), HttpRouteCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteCorsPolicyPtrInput)(nil)).Elem(), HttpRouteCorsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteDestinationInput)(nil)).Elem(), HttpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteDestinationPtrInput)(nil)).Elem(), HttpRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteDestinationArrayInput)(nil)).Elem(), HttpRouteDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteFaultInjectionPolicyInput)(nil)).Elem(), HttpRouteFaultInjectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteFaultInjectionPolicyPtrInput)(nil)).Elem(), HttpRouteFaultInjectionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteFaultInjectionPolicyAbortInput)(nil)).Elem(), HttpRouteFaultInjectionPolicyAbortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteFaultInjectionPolicyAbortPtrInput)(nil)).Elem(), HttpRouteFaultInjectionPolicyAbortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteFaultInjectionPolicyDelayInput)(nil)).Elem(), HttpRouteFaultInjectionPolicyDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteFaultInjectionPolicyDelayPtrInput)(nil)).Elem(), HttpRouteFaultInjectionPolicyDelayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteHeaderMatchInput)(nil)).Elem(), HttpRouteHeaderMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteHeaderMatchArrayInput)(nil)).Elem(), HttpRouteHeaderMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteHeaderMatchIntegerRangeInput)(nil)).Elem(), HttpRouteHeaderMatchIntegerRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteHeaderMatchIntegerRangePtrInput)(nil)).Elem(), HttpRouteHeaderMatchIntegerRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteHeaderModifierInput)(nil)).Elem(), HttpRouteHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteHeaderModifierPtrInput)(nil)).Elem(), HttpRouteHeaderModifierArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteQueryParameterMatchInput)(nil)).Elem(), HttpRouteQueryParameterMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteQueryParameterMatchArrayInput)(nil)).Elem(), HttpRouteQueryParameterMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRedirectInput)(nil)).Elem(), HttpRouteRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRedirectPtrInput)(nil)).Elem(), HttpRouteRedirectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRequestMirrorPolicyInput)(nil)).Elem(), HttpRouteRequestMirrorPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRequestMirrorPolicyPtrInput)(nil)).Elem(), HttpRouteRequestMirrorPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRetryPolicyInput)(nil)).Elem(), HttpRouteRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRetryPolicyPtrInput)(nil)).Elem(), HttpRouteRetryPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRouteActionInput)(nil)).Elem(), HttpRouteRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRouteActionPtrInput)(nil)).Elem(), HttpRouteRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRouteMatchInput)(nil)).Elem(), HttpRouteRouteMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRouteMatchArrayInput)(nil)).Elem(), HttpRouteRouteMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRouteRuleInput)(nil)).Elem(), HttpRouteRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRouteRuleArrayInput)(nil)).Elem(), HttpRouteRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteURLRewriteInput)(nil)).Elem(), HttpRouteURLRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteURLRewritePtrInput)(nil)).Elem(), HttpRouteURLRewriteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataLabelMatcherInput)(nil)).Elem(), MetadataLabelMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataLabelMatcherPtrInput)(nil)).Elem(), MetadataLabelMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataLabelsInput)(nil)).Elem(), MetadataLabelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetadataLabelsArrayInput)(nil)).Elem(), MetadataLabelsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRouteActionInput)(nil)).Elem(), TcpRouteRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRouteDestinationInput)(nil)).Elem(), TcpRouteRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRouteDestinationArrayInput)(nil)).Elem(), TcpRouteRouteDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRouteMatchInput)(nil)).Elem(), TcpRouteRouteMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRouteMatchArrayInput)(nil)).Elem(), TcpRouteRouteMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRouteRuleInput)(nil)).Elem(), TcpRouteRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRouteRuleArrayInput)(nil)).Elem(), TcpRouteRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteRouteActionInput)(nil)).Elem(), TlsRouteRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteRouteDestinationInput)(nil)).Elem(), TlsRouteRouteDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteRouteDestinationArrayInput)(nil)).Elem(), TlsRouteRouteDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteRouteMatchInput)(nil)).Elem(), TlsRouteRouteMatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteRouteMatchArrayInput)(nil)).Elem(), TlsRouteRouteMatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteRouteRuleInput)(nil)).Elem(), TlsRouteRouteRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsRouteRouteRuleArrayInput)(nil)).Elem(), TlsRouteRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficPortSelectorInput)(nil)).Elem(), TrafficPortSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficPortSelectorPtrInput)(nil)).Elem(), TrafficPortSelectorArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(EndpointMatcherOutput{})
	pulumi.RegisterOutputType(EndpointMatcherResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteDestinationOutput{})
	pulumi.RegisterOutputType(GrpcRouteDestinationArrayOutput{})
	pulumi.RegisterOutputType(GrpcRouteDestinationResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyAbortOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyAbortPtrOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyAbortResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyDelayOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyDelayPtrOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyDelayResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteFaultInjectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteHeaderMatchOutput{})
	pulumi.RegisterOutputType(GrpcRouteHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(GrpcRouteHeaderMatchResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteHeaderMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(GrpcRouteMethodMatchOutput{})
	pulumi.RegisterOutputType(GrpcRouteMethodMatchPtrOutput{})
	pulumi.RegisterOutputType(GrpcRouteMethodMatchResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(GrpcRouteRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(GrpcRouteRetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteActionOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteActionResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteMatchOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteMatchArrayOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteMatchResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteRuleOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteRuleResponseOutput{})
	pulumi.RegisterOutputType(GrpcRouteRouteRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteCorsPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteCorsPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteCorsPolicyResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteDestinationOutput{})
	pulumi.RegisterOutputType(HttpRouteDestinationPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteDestinationArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteDestinationResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyAbortOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyAbortPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyAbortResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyDelayOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyDelayPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyDelayResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteFaultInjectionPolicyResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderMatchOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderMatchArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderMatchIntegerRangeOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderMatchIntegerRangePtrOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderMatchIntegerRangeResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderMatchResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderModifierOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderModifierPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteHeaderModifierResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteQueryParameterMatchOutput{})
	pulumi.RegisterOutputType(HttpRouteQueryParameterMatchArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteQueryParameterMatchResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteQueryParameterMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRedirectOutput{})
	pulumi.RegisterOutputType(HttpRouteRedirectPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRedirectResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRequestMirrorPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteRequestMirrorPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRequestMirrorPolicyResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRetryPolicyOutput{})
	pulumi.RegisterOutputType(HttpRouteRetryPolicyPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRetryPolicyResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteActionOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteActionPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteActionResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteMatchOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteMatchArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteMatchResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteRuleOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteRuleResponseOutput{})
	pulumi.RegisterOutputType(HttpRouteRouteRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteURLRewriteOutput{})
	pulumi.RegisterOutputType(HttpRouteURLRewritePtrOutput{})
	pulumi.RegisterOutputType(HttpRouteURLRewriteResponseOutput{})
	pulumi.RegisterOutputType(MetadataLabelMatcherOutput{})
	pulumi.RegisterOutputType(MetadataLabelMatcherPtrOutput{})
	pulumi.RegisterOutputType(MetadataLabelMatcherResponseOutput{})
	pulumi.RegisterOutputType(MetadataLabelsOutput{})
	pulumi.RegisterOutputType(MetadataLabelsArrayOutput{})
	pulumi.RegisterOutputType(MetadataLabelsResponseOutput{})
	pulumi.RegisterOutputType(MetadataLabelsResponseArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteActionOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteActionResponseOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteDestinationOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteDestinationArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteDestinationResponseOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteMatchOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteMatchArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteMatchResponseOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteRuleOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteRuleResponseOutput{})
	pulumi.RegisterOutputType(TcpRouteRouteRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteActionOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteActionResponseOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteDestinationOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteDestinationArrayOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteDestinationResponseOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteDestinationResponseArrayOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteMatchOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteMatchArrayOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteMatchResponseOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteMatchResponseArrayOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteRuleOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteRuleResponseOutput{})
	pulumi.RegisterOutputType(TlsRouteRouteRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(TrafficPortSelectorOutput{})
	pulumi.RegisterOutputType(TrafficPortSelectorPtrOutput{})
	pulumi.RegisterOutputType(TrafficPortSelectorResponseOutput{})
}
