// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single TlsRoute.
func LookupTlsRoute(ctx *pulumi.Context, args *LookupTlsRouteArgs, opts ...pulumi.InvokeOption) (*LookupTlsRouteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTlsRouteResult
	err := ctx.Invoke("google-native:networkservices/v1beta1:getTlsRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTlsRouteArgs struct {
	Location   string  `pulumi:"location"`
	Project    *string `pulumi:"project"`
	TlsRouteId string  `pulumi:"tlsRouteId"`
}

type LookupTlsRouteResult struct {
	// The timestamp when the resource was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. A free-text description of the resource. Max length 1024 characters.
	Description string `pulumi:"description"`
	// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
	Gateways []string `pulumi:"gateways"`
	// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
	Meshes []string `pulumi:"meshes"`
	// Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.
	Name string `pulumi:"name"`
	// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
	Rules []TlsRouteRouteRuleResponse `pulumi:"rules"`
	// Server-defined URL of this resource
	SelfLink string `pulumi:"selfLink"`
	// The timestamp when the resource was updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupTlsRouteOutput(ctx *pulumi.Context, args LookupTlsRouteOutputArgs, opts ...pulumi.InvokeOption) LookupTlsRouteResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTlsRouteResult, error) {
			args := v.(LookupTlsRouteArgs)
			r, err := LookupTlsRoute(ctx, &args, opts...)
			var s LookupTlsRouteResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTlsRouteResultOutput)
}

type LookupTlsRouteOutputArgs struct {
	Location   pulumi.StringInput    `pulumi:"location"`
	Project    pulumi.StringPtrInput `pulumi:"project"`
	TlsRouteId pulumi.StringInput    `pulumi:"tlsRouteId"`
}

func (LookupTlsRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsRouteArgs)(nil)).Elem()
}

type LookupTlsRouteResultOutput struct{ *pulumi.OutputState }

func (LookupTlsRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsRouteResult)(nil)).Elem()
}

func (o LookupTlsRouteResultOutput) ToLookupTlsRouteResultOutput() LookupTlsRouteResultOutput {
	return o
}

func (o LookupTlsRouteResultOutput) ToLookupTlsRouteResultOutputWithContext(ctx context.Context) LookupTlsRouteResultOutput {
	return o
}

func (o LookupTlsRouteResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupTlsRouteResult] {
	return pulumix.Output[LookupTlsRouteResult]{
		OutputState: o.OutputState,
	}
}

// The timestamp when the resource was created.
func (o LookupTlsRouteResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. A free-text description of the resource. Max length 1024 characters.
func (o LookupTlsRouteResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. Gateways defines a list of gateways this TlsRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`
func (o LookupTlsRouteResultOutput) Gateways() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) []string { return v.Gateways }).(pulumi.StringArrayOutput)
}

// Optional. Meshes defines a list of meshes this TlsRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR
func (o LookupTlsRouteResultOutput) Meshes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) []string { return v.Meshes }).(pulumi.StringArrayOutput)
}

// Name of the TlsRoute resource. It matches pattern `projects/*/locations/global/tlsRoutes/tls_route_name>`.
func (o LookupTlsRouteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) string { return v.Name }).(pulumi.StringOutput)
}

// Rules that define how traffic is routed and handled. At least one RouteRule must be supplied. If there are multiple rules then the action taken will be the first rule to match.
func (o LookupTlsRouteResultOutput) Rules() TlsRouteRouteRuleResponseArrayOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) []TlsRouteRouteRuleResponse { return v.Rules }).(TlsRouteRouteRuleResponseArrayOutput)
}

// Server-defined URL of this resource
func (o LookupTlsRouteResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// The timestamp when the resource was updated.
func (o LookupTlsRouteResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsRouteResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTlsRouteResultOutput{})
}
