// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpec struct {
}

// AppDevExperienceFeatureSpecInput is an input type that accepts AppDevExperienceFeatureSpecArgs and AppDevExperienceFeatureSpecOutput values.
// You can construct a concrete instance of `AppDevExperienceFeatureSpecInput` via:
//
//	AppDevExperienceFeatureSpecArgs{...}
type AppDevExperienceFeatureSpecInput interface {
	pulumi.Input

	ToAppDevExperienceFeatureSpecOutput() AppDevExperienceFeatureSpecOutput
	ToAppDevExperienceFeatureSpecOutputWithContext(context.Context) AppDevExperienceFeatureSpecOutput
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecArgs struct {
}

func (AppDevExperienceFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecOutput() AppDevExperienceFeatureSpecOutput {
	return i.ToAppDevExperienceFeatureSpecOutputWithContext(context.Background())
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDevExperienceFeatureSpecOutput)
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return i.ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Background())
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDevExperienceFeatureSpecOutput).ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx)
}

// AppDevExperienceFeatureSpecPtrInput is an input type that accepts AppDevExperienceFeatureSpecArgs, AppDevExperienceFeatureSpecPtr and AppDevExperienceFeatureSpecPtrOutput values.
// You can construct a concrete instance of `AppDevExperienceFeatureSpecPtrInput` via:
//
//	        AppDevExperienceFeatureSpecArgs{...}
//
//	or:
//
//	        nil
type AppDevExperienceFeatureSpecPtrInput interface {
	pulumi.Input

	ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput
	ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Context) AppDevExperienceFeatureSpecPtrOutput
}

type appDevExperienceFeatureSpecPtrType AppDevExperienceFeatureSpecArgs

func AppDevExperienceFeatureSpecPtr(v *AppDevExperienceFeatureSpecArgs) AppDevExperienceFeatureSpecPtrInput {
	return (*appDevExperienceFeatureSpecPtrType)(v)
}

func (*appDevExperienceFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (i *appDevExperienceFeatureSpecPtrType) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return i.ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *appDevExperienceFeatureSpecPtrType) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDevExperienceFeatureSpecPtrOutput)
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecOutput() AppDevExperienceFeatureSpecOutput {
	return o
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecOutput {
	return o
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return o.ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Background())
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppDevExperienceFeatureSpec) *AppDevExperienceFeatureSpec {
		return &v
	}).(AppDevExperienceFeatureSpecPtrOutput)
}

type AppDevExperienceFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (o AppDevExperienceFeatureSpecPtrOutput) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return o
}

func (o AppDevExperienceFeatureSpecPtrOutput) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return o
}

func (o AppDevExperienceFeatureSpecPtrOutput) Elem() AppDevExperienceFeatureSpecOutput {
	return o.ApplyT(func(v *AppDevExperienceFeatureSpec) AppDevExperienceFeatureSpec {
		if v != nil {
			return *v
		}
		var ret AppDevExperienceFeatureSpec
		return ret
	}).(AppDevExperienceFeatureSpecOutput)
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecResponse struct {
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureSpecResponse)(nil)).Elem()
}

func (o AppDevExperienceFeatureSpecResponseOutput) ToAppDevExperienceFeatureSpecResponseOutput() AppDevExperienceFeatureSpecResponseOutput {
	return o
}

func (o AppDevExperienceFeatureSpecResponseOutput) ToAppDevExperienceFeatureSpecResponseOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecResponseOutput {
	return o
}

// State for App Dev Exp Feature.
type AppDevExperienceFeatureStateResponse struct {
	// Status of subcomponent that detects configured Service Mesh resources.
	NetworkingInstallSucceeded StatusResponse `pulumi:"networkingInstallSucceeded"`
}

// State for App Dev Exp Feature.
type AppDevExperienceFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureStateResponse)(nil)).Elem()
}

func (o AppDevExperienceFeatureStateResponseOutput) ToAppDevExperienceFeatureStateResponseOutput() AppDevExperienceFeatureStateResponseOutput {
	return o
}

func (o AppDevExperienceFeatureStateResponseOutput) ToAppDevExperienceFeatureStateResponseOutputWithContext(ctx context.Context) AppDevExperienceFeatureStateResponseOutput {
	return o
}

// Status of subcomponent that detects configured Service Mesh resources.
func (o AppDevExperienceFeatureStateResponseOutput) NetworkingInstallSucceeded() StatusResponseOutput {
	return o.ApplyT(func(v AppDevExperienceFeatureStateResponse) StatusResponse { return v.NetworkingInstallSucceeded }).(StatusResponseOutput)
}

// ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
type ApplianceCluster struct {
	// Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
	ResourceLink *string `pulumi:"resourceLink"`
}

// ApplianceClusterInput is an input type that accepts ApplianceClusterArgs and ApplianceClusterOutput values.
// You can construct a concrete instance of `ApplianceClusterInput` via:
//
//	ApplianceClusterArgs{...}
type ApplianceClusterInput interface {
	pulumi.Input

	ToApplianceClusterOutput() ApplianceClusterOutput
	ToApplianceClusterOutputWithContext(context.Context) ApplianceClusterOutput
}

// ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
type ApplianceClusterArgs struct {
	// Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
	ResourceLink pulumi.StringPtrInput `pulumi:"resourceLink"`
}

func (ApplianceClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceCluster)(nil)).Elem()
}

func (i ApplianceClusterArgs) ToApplianceClusterOutput() ApplianceClusterOutput {
	return i.ToApplianceClusterOutputWithContext(context.Background())
}

func (i ApplianceClusterArgs) ToApplianceClusterOutputWithContext(ctx context.Context) ApplianceClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceClusterOutput)
}

func (i ApplianceClusterArgs) ToApplianceClusterPtrOutput() ApplianceClusterPtrOutput {
	return i.ToApplianceClusterPtrOutputWithContext(context.Background())
}

func (i ApplianceClusterArgs) ToApplianceClusterPtrOutputWithContext(ctx context.Context) ApplianceClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceClusterOutput).ToApplianceClusterPtrOutputWithContext(ctx)
}

// ApplianceClusterPtrInput is an input type that accepts ApplianceClusterArgs, ApplianceClusterPtr and ApplianceClusterPtrOutput values.
// You can construct a concrete instance of `ApplianceClusterPtrInput` via:
//
//	        ApplianceClusterArgs{...}
//
//	or:
//
//	        nil
type ApplianceClusterPtrInput interface {
	pulumi.Input

	ToApplianceClusterPtrOutput() ApplianceClusterPtrOutput
	ToApplianceClusterPtrOutputWithContext(context.Context) ApplianceClusterPtrOutput
}

type applianceClusterPtrType ApplianceClusterArgs

func ApplianceClusterPtr(v *ApplianceClusterArgs) ApplianceClusterPtrInput {
	return (*applianceClusterPtrType)(v)
}

func (*applianceClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceCluster)(nil)).Elem()
}

func (i *applianceClusterPtrType) ToApplianceClusterPtrOutput() ApplianceClusterPtrOutput {
	return i.ToApplianceClusterPtrOutputWithContext(context.Background())
}

func (i *applianceClusterPtrType) ToApplianceClusterPtrOutputWithContext(ctx context.Context) ApplianceClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplianceClusterPtrOutput)
}

// ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
type ApplianceClusterOutput struct{ *pulumi.OutputState }

func (ApplianceClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceCluster)(nil)).Elem()
}

func (o ApplianceClusterOutput) ToApplianceClusterOutput() ApplianceClusterOutput {
	return o
}

func (o ApplianceClusterOutput) ToApplianceClusterOutputWithContext(ctx context.Context) ApplianceClusterOutput {
	return o
}

func (o ApplianceClusterOutput) ToApplianceClusterPtrOutput() ApplianceClusterPtrOutput {
	return o.ToApplianceClusterPtrOutputWithContext(context.Background())
}

func (o ApplianceClusterOutput) ToApplianceClusterPtrOutputWithContext(ctx context.Context) ApplianceClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApplianceCluster) *ApplianceCluster {
		return &v
	}).(ApplianceClusterPtrOutput)
}

// Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
func (o ApplianceClusterOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApplianceCluster) *string { return v.ResourceLink }).(pulumi.StringPtrOutput)
}

type ApplianceClusterPtrOutput struct{ *pulumi.OutputState }

func (ApplianceClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplianceCluster)(nil)).Elem()
}

func (o ApplianceClusterPtrOutput) ToApplianceClusterPtrOutput() ApplianceClusterPtrOutput {
	return o
}

func (o ApplianceClusterPtrOutput) ToApplianceClusterPtrOutputWithContext(ctx context.Context) ApplianceClusterPtrOutput {
	return o
}

func (o ApplianceClusterPtrOutput) Elem() ApplianceClusterOutput {
	return o.ApplyT(func(v *ApplianceCluster) ApplianceCluster {
		if v != nil {
			return *v
		}
		var ret ApplianceCluster
		return ret
	}).(ApplianceClusterOutput)
}

// Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
func (o ApplianceClusterPtrOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApplianceCluster) *string {
		if v == nil {
			return nil
		}
		return v.ResourceLink
	}).(pulumi.StringPtrOutput)
}

// ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
type ApplianceClusterResponse struct {
	// Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
	ResourceLink string `pulumi:"resourceLink"`
}

// ApplianceCluster contains information specific to GDC Edge Appliance Clusters.
type ApplianceClusterResponseOutput struct{ *pulumi.OutputState }

func (ApplianceClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplianceClusterResponse)(nil)).Elem()
}

func (o ApplianceClusterResponseOutput) ToApplianceClusterResponseOutput() ApplianceClusterResponseOutput {
	return o
}

func (o ApplianceClusterResponseOutput) ToApplianceClusterResponseOutputWithContext(ctx context.Context) ApplianceClusterResponseOutput {
	return o
}

// Immutable. Self-link of the Google Cloud resource for the Appliance Cluster. For example: //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
func (o ApplianceClusterResponseOutput) ResourceLink() pulumi.StringOutput {
	return o.ApplyT(func(v ApplianceClusterResponse) string { return v.ResourceLink }).(pulumi.StringOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
type Authority struct {
	// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
	Issuer *string `pulumi:"issuer"`
	// Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
	OidcJwks *string `pulumi:"oidcJwks"`
}

// AuthorityInput is an input type that accepts AuthorityArgs and AuthorityOutput values.
// You can construct a concrete instance of `AuthorityInput` via:
//
//	AuthorityArgs{...}
type AuthorityInput interface {
	pulumi.Input

	ToAuthorityOutput() AuthorityOutput
	ToAuthorityOutputWithContext(context.Context) AuthorityOutput
}

// Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
type AuthorityArgs struct {
	// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
	Issuer pulumi.StringPtrInput `pulumi:"issuer"`
	// Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
	OidcJwks pulumi.StringPtrInput `pulumi:"oidcJwks"`
}

func (AuthorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Authority)(nil)).Elem()
}

func (i AuthorityArgs) ToAuthorityOutput() AuthorityOutput {
	return i.ToAuthorityOutputWithContext(context.Background())
}

func (i AuthorityArgs) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityOutput)
}

func (i AuthorityArgs) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return i.ToAuthorityPtrOutputWithContext(context.Background())
}

func (i AuthorityArgs) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityOutput).ToAuthorityPtrOutputWithContext(ctx)
}

// AuthorityPtrInput is an input type that accepts AuthorityArgs, AuthorityPtr and AuthorityPtrOutput values.
// You can construct a concrete instance of `AuthorityPtrInput` via:
//
//	        AuthorityArgs{...}
//
//	or:
//
//	        nil
type AuthorityPtrInput interface {
	pulumi.Input

	ToAuthorityPtrOutput() AuthorityPtrOutput
	ToAuthorityPtrOutputWithContext(context.Context) AuthorityPtrOutput
}

type authorityPtrType AuthorityArgs

func AuthorityPtr(v *AuthorityArgs) AuthorityPtrInput {
	return (*authorityPtrType)(v)
}

func (*authorityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (i *authorityPtrType) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return i.ToAuthorityPtrOutputWithContext(context.Background())
}

func (i *authorityPtrType) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorityPtrOutput)
}

// Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
type AuthorityOutput struct{ *pulumi.OutputState }

func (AuthorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Authority)(nil)).Elem()
}

func (o AuthorityOutput) ToAuthorityOutput() AuthorityOutput {
	return o
}

func (o AuthorityOutput) ToAuthorityOutputWithContext(ctx context.Context) AuthorityOutput {
	return o
}

func (o AuthorityOutput) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return o.ToAuthorityPtrOutputWithContext(context.Background())
}

func (o AuthorityOutput) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Authority) *Authority {
		return &v
	}).(AuthorityPtrOutput)
}

// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
func (o AuthorityOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Authority) *string { return v.Issuer }).(pulumi.StringPtrOutput)
}

// Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
func (o AuthorityOutput) OidcJwks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Authority) *string { return v.OidcJwks }).(pulumi.StringPtrOutput)
}

type AuthorityPtrOutput struct{ *pulumi.OutputState }

func (AuthorityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authority)(nil)).Elem()
}

func (o AuthorityPtrOutput) ToAuthorityPtrOutput() AuthorityPtrOutput {
	return o
}

func (o AuthorityPtrOutput) ToAuthorityPtrOutputWithContext(ctx context.Context) AuthorityPtrOutput {
	return o
}

func (o AuthorityPtrOutput) Elem() AuthorityOutput {
	return o.ApplyT(func(v *Authority) Authority {
		if v != nil {
			return *v
		}
		var ret Authority
		return ret
	}).(AuthorityOutput)
}

// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
func (o AuthorityPtrOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authority) *string {
		if v == nil {
			return nil
		}
		return v.Issuer
	}).(pulumi.StringPtrOutput)
}

// Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
func (o AuthorityPtrOutput) OidcJwks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authority) *string {
		if v == nil {
			return nil
		}
		return v.OidcJwks
	}).(pulumi.StringPtrOutput)
}

// Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
type AuthorityResponse struct {
	// An identity provider that reflects the `issuer` in the workload identity pool.
	IdentityProvider string `pulumi:"identityProvider"`
	// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
	Issuer string `pulumi:"issuer"`
	// Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
	OidcJwks string `pulumi:"oidcJwks"`
	// The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.
	WorkloadIdentityPool string `pulumi:"workloadIdentityPool"`
}

// Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
type AuthorityResponseOutput struct{ *pulumi.OutputState }

func (AuthorityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorityResponse)(nil)).Elem()
}

func (o AuthorityResponseOutput) ToAuthorityResponseOutput() AuthorityResponseOutput {
	return o
}

func (o AuthorityResponseOutput) ToAuthorityResponseOutputWithContext(ctx context.Context) AuthorityResponseOutput {
	return o
}

// An identity provider that reflects the `issuer` in the workload identity pool.
func (o AuthorityResponseOutput) IdentityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorityResponse) string { return v.IdentityProvider }).(pulumi.StringOutput)
}

// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters, it must use `location` rather than `zone` for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
func (o AuthorityResponseOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorityResponse) string { return v.Issuer }).(pulumi.StringOutput)
}

// Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
func (o AuthorityResponseOutput) OidcJwks() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorityResponse) string { return v.OidcJwks }).(pulumi.StringOutput)
}

// The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.
func (o AuthorityResponseOutput) WorkloadIdentityPool() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorityResponse) string { return v.WorkloadIdentityPool }).(pulumi.StringOutput)
}

// BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
type BinaryAuthorizationConfig struct {
	// Optional. Mode of operation for binauthz policy evaluation.
	EvaluationMode *BinaryAuthorizationConfigEvaluationMode `pulumi:"evaluationMode"`
	// Optional. Binauthz policies that apply to this cluster.
	PolicyBindings []PolicyBinding `pulumi:"policyBindings"`
}

// BinaryAuthorizationConfigInput is an input type that accepts BinaryAuthorizationConfigArgs and BinaryAuthorizationConfigOutput values.
// You can construct a concrete instance of `BinaryAuthorizationConfigInput` via:
//
//	BinaryAuthorizationConfigArgs{...}
type BinaryAuthorizationConfigInput interface {
	pulumi.Input

	ToBinaryAuthorizationConfigOutput() BinaryAuthorizationConfigOutput
	ToBinaryAuthorizationConfigOutputWithContext(context.Context) BinaryAuthorizationConfigOutput
}

// BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
type BinaryAuthorizationConfigArgs struct {
	// Optional. Mode of operation for binauthz policy evaluation.
	EvaluationMode BinaryAuthorizationConfigEvaluationModePtrInput `pulumi:"evaluationMode"`
	// Optional. Binauthz policies that apply to this cluster.
	PolicyBindings PolicyBindingArrayInput `pulumi:"policyBindings"`
}

func (BinaryAuthorizationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorizationConfig)(nil)).Elem()
}

func (i BinaryAuthorizationConfigArgs) ToBinaryAuthorizationConfigOutput() BinaryAuthorizationConfigOutput {
	return i.ToBinaryAuthorizationConfigOutputWithContext(context.Background())
}

func (i BinaryAuthorizationConfigArgs) ToBinaryAuthorizationConfigOutputWithContext(ctx context.Context) BinaryAuthorizationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationConfigOutput)
}

func (i BinaryAuthorizationConfigArgs) ToBinaryAuthorizationConfigPtrOutput() BinaryAuthorizationConfigPtrOutput {
	return i.ToBinaryAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i BinaryAuthorizationConfigArgs) ToBinaryAuthorizationConfigPtrOutputWithContext(ctx context.Context) BinaryAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationConfigOutput).ToBinaryAuthorizationConfigPtrOutputWithContext(ctx)
}

// BinaryAuthorizationConfigPtrInput is an input type that accepts BinaryAuthorizationConfigArgs, BinaryAuthorizationConfigPtr and BinaryAuthorizationConfigPtrOutput values.
// You can construct a concrete instance of `BinaryAuthorizationConfigPtrInput` via:
//
//	        BinaryAuthorizationConfigArgs{...}
//
//	or:
//
//	        nil
type BinaryAuthorizationConfigPtrInput interface {
	pulumi.Input

	ToBinaryAuthorizationConfigPtrOutput() BinaryAuthorizationConfigPtrOutput
	ToBinaryAuthorizationConfigPtrOutputWithContext(context.Context) BinaryAuthorizationConfigPtrOutput
}

type binaryAuthorizationConfigPtrType BinaryAuthorizationConfigArgs

func BinaryAuthorizationConfigPtr(v *BinaryAuthorizationConfigArgs) BinaryAuthorizationConfigPtrInput {
	return (*binaryAuthorizationConfigPtrType)(v)
}

func (*binaryAuthorizationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorizationConfig)(nil)).Elem()
}

func (i *binaryAuthorizationConfigPtrType) ToBinaryAuthorizationConfigPtrOutput() BinaryAuthorizationConfigPtrOutput {
	return i.ToBinaryAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (i *binaryAuthorizationConfigPtrType) ToBinaryAuthorizationConfigPtrOutputWithContext(ctx context.Context) BinaryAuthorizationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BinaryAuthorizationConfigPtrOutput)
}

// BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
type BinaryAuthorizationConfigOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorizationConfig)(nil)).Elem()
}

func (o BinaryAuthorizationConfigOutput) ToBinaryAuthorizationConfigOutput() BinaryAuthorizationConfigOutput {
	return o
}

func (o BinaryAuthorizationConfigOutput) ToBinaryAuthorizationConfigOutputWithContext(ctx context.Context) BinaryAuthorizationConfigOutput {
	return o
}

func (o BinaryAuthorizationConfigOutput) ToBinaryAuthorizationConfigPtrOutput() BinaryAuthorizationConfigPtrOutput {
	return o.ToBinaryAuthorizationConfigPtrOutputWithContext(context.Background())
}

func (o BinaryAuthorizationConfigOutput) ToBinaryAuthorizationConfigPtrOutputWithContext(ctx context.Context) BinaryAuthorizationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BinaryAuthorizationConfig) *BinaryAuthorizationConfig {
		return &v
	}).(BinaryAuthorizationConfigPtrOutput)
}

// Optional. Mode of operation for binauthz policy evaluation.
func (o BinaryAuthorizationConfigOutput) EvaluationMode() BinaryAuthorizationConfigEvaluationModePtrOutput {
	return o.ApplyT(func(v BinaryAuthorizationConfig) *BinaryAuthorizationConfigEvaluationMode { return v.EvaluationMode }).(BinaryAuthorizationConfigEvaluationModePtrOutput)
}

// Optional. Binauthz policies that apply to this cluster.
func (o BinaryAuthorizationConfigOutput) PolicyBindings() PolicyBindingArrayOutput {
	return o.ApplyT(func(v BinaryAuthorizationConfig) []PolicyBinding { return v.PolicyBindings }).(PolicyBindingArrayOutput)
}

type BinaryAuthorizationConfigPtrOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BinaryAuthorizationConfig)(nil)).Elem()
}

func (o BinaryAuthorizationConfigPtrOutput) ToBinaryAuthorizationConfigPtrOutput() BinaryAuthorizationConfigPtrOutput {
	return o
}

func (o BinaryAuthorizationConfigPtrOutput) ToBinaryAuthorizationConfigPtrOutputWithContext(ctx context.Context) BinaryAuthorizationConfigPtrOutput {
	return o
}

func (o BinaryAuthorizationConfigPtrOutput) Elem() BinaryAuthorizationConfigOutput {
	return o.ApplyT(func(v *BinaryAuthorizationConfig) BinaryAuthorizationConfig {
		if v != nil {
			return *v
		}
		var ret BinaryAuthorizationConfig
		return ret
	}).(BinaryAuthorizationConfigOutput)
}

// Optional. Mode of operation for binauthz policy evaluation.
func (o BinaryAuthorizationConfigPtrOutput) EvaluationMode() BinaryAuthorizationConfigEvaluationModePtrOutput {
	return o.ApplyT(func(v *BinaryAuthorizationConfig) *BinaryAuthorizationConfigEvaluationMode {
		if v == nil {
			return nil
		}
		return v.EvaluationMode
	}).(BinaryAuthorizationConfigEvaluationModePtrOutput)
}

// Optional. Binauthz policies that apply to this cluster.
func (o BinaryAuthorizationConfigPtrOutput) PolicyBindings() PolicyBindingArrayOutput {
	return o.ApplyT(func(v *BinaryAuthorizationConfig) []PolicyBinding {
		if v == nil {
			return nil
		}
		return v.PolicyBindings
	}).(PolicyBindingArrayOutput)
}

// BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
type BinaryAuthorizationConfigResponse struct {
	// Optional. Mode of operation for binauthz policy evaluation.
	EvaluationMode string `pulumi:"evaluationMode"`
	// Optional. Binauthz policies that apply to this cluster.
	PolicyBindings []PolicyBindingResponse `pulumi:"policyBindings"`
}

// BinaryAuthorizationConfig defines the fleet level configuration of binary authorization feature.
type BinaryAuthorizationConfigResponseOutput struct{ *pulumi.OutputState }

func (BinaryAuthorizationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BinaryAuthorizationConfigResponse)(nil)).Elem()
}

func (o BinaryAuthorizationConfigResponseOutput) ToBinaryAuthorizationConfigResponseOutput() BinaryAuthorizationConfigResponseOutput {
	return o
}

func (o BinaryAuthorizationConfigResponseOutput) ToBinaryAuthorizationConfigResponseOutputWithContext(ctx context.Context) BinaryAuthorizationConfigResponseOutput {
	return o
}

// Optional. Mode of operation for binauthz policy evaluation.
func (o BinaryAuthorizationConfigResponseOutput) EvaluationMode() pulumi.StringOutput {
	return o.ApplyT(func(v BinaryAuthorizationConfigResponse) string { return v.EvaluationMode }).(pulumi.StringOutput)
}

// Optional. Binauthz policies that apply to this cluster.
func (o BinaryAuthorizationConfigResponseOutput) PolicyBindings() PolicyBindingResponseArrayOutput {
	return o.ApplyT(func(v BinaryAuthorizationConfigResponse) []PolicyBindingResponse { return v.PolicyBindings }).(PolicyBindingResponseArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingType struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingTypeInput is an input type that accepts BindingTypeArgs and BindingTypeOutput values.
// You can construct a concrete instance of `BindingTypeInput` via:
//
//	BindingTypeArgs{...}
type BindingTypeInput interface {
	pulumi.Input

	ToBindingTypeOutput() BindingTypeOutput
	ToBindingTypeOutputWithContext(context.Context) BindingTypeOutput
}

// Associates `members`, or principals, with a `role`.
type BindingTypeArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingType)(nil)).Elem()
}

func (i BindingTypeArgs) ToBindingTypeOutput() BindingTypeOutput {
	return i.ToBindingTypeOutputWithContext(context.Background())
}

func (i BindingTypeArgs) ToBindingTypeOutputWithContext(ctx context.Context) BindingTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingTypeOutput)
}

// BindingTypeArrayInput is an input type that accepts BindingTypeArray and BindingTypeArrayOutput values.
// You can construct a concrete instance of `BindingTypeArrayInput` via:
//
//	BindingTypeArray{ BindingTypeArgs{...} }
type BindingTypeArrayInput interface {
	pulumi.Input

	ToBindingTypeArrayOutput() BindingTypeArrayOutput
	ToBindingTypeArrayOutputWithContext(context.Context) BindingTypeArrayOutput
}

type BindingTypeArray []BindingTypeInput

func (BindingTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingType)(nil)).Elem()
}

func (i BindingTypeArray) ToBindingTypeArrayOutput() BindingTypeArrayOutput {
	return i.ToBindingTypeArrayOutputWithContext(context.Background())
}

func (i BindingTypeArray) ToBindingTypeArrayOutputWithContext(ctx context.Context) BindingTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingTypeArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingTypeOutput struct{ *pulumi.OutputState }

func (BindingTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingType)(nil)).Elem()
}

func (o BindingTypeOutput) ToBindingTypeOutput() BindingTypeOutput {
	return o
}

func (o BindingTypeOutput) ToBindingTypeOutputWithContext(ctx context.Context) BindingTypeOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingTypeOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v BindingType) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingTypeOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingType) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingTypeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BindingType) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingTypeArrayOutput struct{ *pulumi.OutputState }

func (BindingTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingType)(nil)).Elem()
}

func (o BindingTypeArrayOutput) ToBindingTypeArrayOutput() BindingTypeArrayOutput {
	return o
}

func (o BindingTypeArrayOutput) ToBindingTypeArrayOutputWithContext(ctx context.Context) BindingTypeArrayOutput {
	return o
}

func (o BindingTypeArrayOutput) Index(i pulumi.IntInput) BindingTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingType {
		return vs[0].([]BindingType)[vs[1].(int)]
	}).(BindingTypeOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
type ClusterUpgradeFleetSpec struct {
	// Allow users to override some properties of each GKE upgrade.
	GkeUpgradeOverrides []ClusterUpgradeGKEUpgradeOverride `pulumi:"gkeUpgradeOverrides"`
	// Post conditions to evaluate to mark an upgrade COMPLETE. Required.
	PostConditions ClusterUpgradePostConditions `pulumi:"postConditions"`
	// This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
	UpstreamFleets []string `pulumi:"upstreamFleets"`
}

// ClusterUpgradeFleetSpecInput is an input type that accepts ClusterUpgradeFleetSpecArgs and ClusterUpgradeFleetSpecOutput values.
// You can construct a concrete instance of `ClusterUpgradeFleetSpecInput` via:
//
//	ClusterUpgradeFleetSpecArgs{...}
type ClusterUpgradeFleetSpecInput interface {
	pulumi.Input

	ToClusterUpgradeFleetSpecOutput() ClusterUpgradeFleetSpecOutput
	ToClusterUpgradeFleetSpecOutputWithContext(context.Context) ClusterUpgradeFleetSpecOutput
}

// **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
type ClusterUpgradeFleetSpecArgs struct {
	// Allow users to override some properties of each GKE upgrade.
	GkeUpgradeOverrides ClusterUpgradeGKEUpgradeOverrideArrayInput `pulumi:"gkeUpgradeOverrides"`
	// Post conditions to evaluate to mark an upgrade COMPLETE. Required.
	PostConditions ClusterUpgradePostConditionsInput `pulumi:"postConditions"`
	// This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
	UpstreamFleets pulumi.StringArrayInput `pulumi:"upstreamFleets"`
}

func (ClusterUpgradeFleetSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeFleetSpec)(nil)).Elem()
}

func (i ClusterUpgradeFleetSpecArgs) ToClusterUpgradeFleetSpecOutput() ClusterUpgradeFleetSpecOutput {
	return i.ToClusterUpgradeFleetSpecOutputWithContext(context.Background())
}

func (i ClusterUpgradeFleetSpecArgs) ToClusterUpgradeFleetSpecOutputWithContext(ctx context.Context) ClusterUpgradeFleetSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeFleetSpecOutput)
}

func (i ClusterUpgradeFleetSpecArgs) ToClusterUpgradeFleetSpecPtrOutput() ClusterUpgradeFleetSpecPtrOutput {
	return i.ToClusterUpgradeFleetSpecPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradeFleetSpecArgs) ToClusterUpgradeFleetSpecPtrOutputWithContext(ctx context.Context) ClusterUpgradeFleetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeFleetSpecOutput).ToClusterUpgradeFleetSpecPtrOutputWithContext(ctx)
}

// ClusterUpgradeFleetSpecPtrInput is an input type that accepts ClusterUpgradeFleetSpecArgs, ClusterUpgradeFleetSpecPtr and ClusterUpgradeFleetSpecPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradeFleetSpecPtrInput` via:
//
//	        ClusterUpgradeFleetSpecArgs{...}
//
//	or:
//
//	        nil
type ClusterUpgradeFleetSpecPtrInput interface {
	pulumi.Input

	ToClusterUpgradeFleetSpecPtrOutput() ClusterUpgradeFleetSpecPtrOutput
	ToClusterUpgradeFleetSpecPtrOutputWithContext(context.Context) ClusterUpgradeFleetSpecPtrOutput
}

type clusterUpgradeFleetSpecPtrType ClusterUpgradeFleetSpecArgs

func ClusterUpgradeFleetSpecPtr(v *ClusterUpgradeFleetSpecArgs) ClusterUpgradeFleetSpecPtrInput {
	return (*clusterUpgradeFleetSpecPtrType)(v)
}

func (*clusterUpgradeFleetSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeFleetSpec)(nil)).Elem()
}

func (i *clusterUpgradeFleetSpecPtrType) ToClusterUpgradeFleetSpecPtrOutput() ClusterUpgradeFleetSpecPtrOutput {
	return i.ToClusterUpgradeFleetSpecPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradeFleetSpecPtrType) ToClusterUpgradeFleetSpecPtrOutputWithContext(ctx context.Context) ClusterUpgradeFleetSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeFleetSpecPtrOutput)
}

// **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
type ClusterUpgradeFleetSpecOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeFleetSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeFleetSpec)(nil)).Elem()
}

func (o ClusterUpgradeFleetSpecOutput) ToClusterUpgradeFleetSpecOutput() ClusterUpgradeFleetSpecOutput {
	return o
}

func (o ClusterUpgradeFleetSpecOutput) ToClusterUpgradeFleetSpecOutputWithContext(ctx context.Context) ClusterUpgradeFleetSpecOutput {
	return o
}

func (o ClusterUpgradeFleetSpecOutput) ToClusterUpgradeFleetSpecPtrOutput() ClusterUpgradeFleetSpecPtrOutput {
	return o.ToClusterUpgradeFleetSpecPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradeFleetSpecOutput) ToClusterUpgradeFleetSpecPtrOutputWithContext(ctx context.Context) ClusterUpgradeFleetSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterUpgradeFleetSpec) *ClusterUpgradeFleetSpec {
		return &v
	}).(ClusterUpgradeFleetSpecPtrOutput)
}

// Allow users to override some properties of each GKE upgrade.
func (o ClusterUpgradeFleetSpecOutput) GkeUpgradeOverrides() ClusterUpgradeGKEUpgradeOverrideArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetSpec) []ClusterUpgradeGKEUpgradeOverride { return v.GkeUpgradeOverrides }).(ClusterUpgradeGKEUpgradeOverrideArrayOutput)
}

// Post conditions to evaluate to mark an upgrade COMPLETE. Required.
func (o ClusterUpgradeFleetSpecOutput) PostConditions() ClusterUpgradePostConditionsOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetSpec) ClusterUpgradePostConditions { return v.PostConditions }).(ClusterUpgradePostConditionsOutput)
}

// This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
func (o ClusterUpgradeFleetSpecOutput) UpstreamFleets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetSpec) []string { return v.UpstreamFleets }).(pulumi.StringArrayOutput)
}

type ClusterUpgradeFleetSpecPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeFleetSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradeFleetSpec)(nil)).Elem()
}

func (o ClusterUpgradeFleetSpecPtrOutput) ToClusterUpgradeFleetSpecPtrOutput() ClusterUpgradeFleetSpecPtrOutput {
	return o
}

func (o ClusterUpgradeFleetSpecPtrOutput) ToClusterUpgradeFleetSpecPtrOutputWithContext(ctx context.Context) ClusterUpgradeFleetSpecPtrOutput {
	return o
}

func (o ClusterUpgradeFleetSpecPtrOutput) Elem() ClusterUpgradeFleetSpecOutput {
	return o.ApplyT(func(v *ClusterUpgradeFleetSpec) ClusterUpgradeFleetSpec {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradeFleetSpec
		return ret
	}).(ClusterUpgradeFleetSpecOutput)
}

// Allow users to override some properties of each GKE upgrade.
func (o ClusterUpgradeFleetSpecPtrOutput) GkeUpgradeOverrides() ClusterUpgradeGKEUpgradeOverrideArrayOutput {
	return o.ApplyT(func(v *ClusterUpgradeFleetSpec) []ClusterUpgradeGKEUpgradeOverride {
		if v == nil {
			return nil
		}
		return v.GkeUpgradeOverrides
	}).(ClusterUpgradeGKEUpgradeOverrideArrayOutput)
}

// Post conditions to evaluate to mark an upgrade COMPLETE. Required.
func (o ClusterUpgradeFleetSpecPtrOutput) PostConditions() ClusterUpgradePostConditionsPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradeFleetSpec) *ClusterUpgradePostConditions {
		if v == nil {
			return nil
		}
		return &v.PostConditions
	}).(ClusterUpgradePostConditionsPtrOutput)
}

// This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
func (o ClusterUpgradeFleetSpecPtrOutput) UpstreamFleets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterUpgradeFleetSpec) []string {
		if v == nil {
			return nil
		}
		return v.UpstreamFleets
	}).(pulumi.StringArrayOutput)
}

// **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
type ClusterUpgradeFleetSpecResponse struct {
	// Allow users to override some properties of each GKE upgrade.
	GkeUpgradeOverrides []ClusterUpgradeGKEUpgradeOverrideResponse `pulumi:"gkeUpgradeOverrides"`
	// Post conditions to evaluate to mark an upgrade COMPLETE. Required.
	PostConditions ClusterUpgradePostConditionsResponse `pulumi:"postConditions"`
	// This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
	UpstreamFleets []string `pulumi:"upstreamFleets"`
}

// **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
type ClusterUpgradeFleetSpecResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeFleetSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeFleetSpecResponse)(nil)).Elem()
}

func (o ClusterUpgradeFleetSpecResponseOutput) ToClusterUpgradeFleetSpecResponseOutput() ClusterUpgradeFleetSpecResponseOutput {
	return o
}

func (o ClusterUpgradeFleetSpecResponseOutput) ToClusterUpgradeFleetSpecResponseOutputWithContext(ctx context.Context) ClusterUpgradeFleetSpecResponseOutput {
	return o
}

// Allow users to override some properties of each GKE upgrade.
func (o ClusterUpgradeFleetSpecResponseOutput) GkeUpgradeOverrides() ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetSpecResponse) []ClusterUpgradeGKEUpgradeOverrideResponse {
		return v.GkeUpgradeOverrides
	}).(ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput)
}

// Post conditions to evaluate to mark an upgrade COMPLETE. Required.
func (o ClusterUpgradeFleetSpecResponseOutput) PostConditions() ClusterUpgradePostConditionsResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetSpecResponse) ClusterUpgradePostConditionsResponse { return v.PostConditions }).(ClusterUpgradePostConditionsResponseOutput)
}

// This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
func (o ClusterUpgradeFleetSpecResponseOutput) UpstreamFleets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetSpecResponse) []string { return v.UpstreamFleets }).(pulumi.StringArrayOutput)
}

// **ClusterUpgrade**: The state for the fleet-level ClusterUpgrade feature.
type ClusterUpgradeFleetStateResponse struct {
	// This fleets whose upstream_fleets contain the current fleet. The fleet name should be either fleet project number or id.
	DownstreamFleets []string `pulumi:"downstreamFleets"`
	// Feature state for GKE clusters.
	GkeState ClusterUpgradeGKEUpgradeFeatureStateResponse `pulumi:"gkeState"`
	// A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.
	Ignored ClusterUpgradeIgnoredMembershipResponse `pulumi:"ignored"`
}

// **ClusterUpgrade**: The state for the fleet-level ClusterUpgrade feature.
type ClusterUpgradeFleetStateResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeFleetStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeFleetStateResponse)(nil)).Elem()
}

func (o ClusterUpgradeFleetStateResponseOutput) ToClusterUpgradeFleetStateResponseOutput() ClusterUpgradeFleetStateResponseOutput {
	return o
}

func (o ClusterUpgradeFleetStateResponseOutput) ToClusterUpgradeFleetStateResponseOutputWithContext(ctx context.Context) ClusterUpgradeFleetStateResponseOutput {
	return o
}

// This fleets whose upstream_fleets contain the current fleet. The fleet name should be either fleet project number or id.
func (o ClusterUpgradeFleetStateResponseOutput) DownstreamFleets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetStateResponse) []string { return v.DownstreamFleets }).(pulumi.StringArrayOutput)
}

// Feature state for GKE clusters.
func (o ClusterUpgradeFleetStateResponseOutput) GkeState() ClusterUpgradeGKEUpgradeFeatureStateResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetStateResponse) ClusterUpgradeGKEUpgradeFeatureStateResponse {
		return v.GkeState
	}).(ClusterUpgradeGKEUpgradeFeatureStateResponseOutput)
}

// A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.
func (o ClusterUpgradeFleetStateResponseOutput) Ignored() ClusterUpgradeIgnoredMembershipResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeFleetStateResponse) ClusterUpgradeIgnoredMembershipResponse { return v.Ignored }).(ClusterUpgradeIgnoredMembershipResponseOutput)
}

// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
type ClusterUpgradeGKEUpgrade struct {
	// Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
	Name *string `pulumi:"name"`
	// Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
	Version *string `pulumi:"version"`
}

// ClusterUpgradeGKEUpgradeInput is an input type that accepts ClusterUpgradeGKEUpgradeArgs and ClusterUpgradeGKEUpgradeOutput values.
// You can construct a concrete instance of `ClusterUpgradeGKEUpgradeInput` via:
//
//	ClusterUpgradeGKEUpgradeArgs{...}
type ClusterUpgradeGKEUpgradeInput interface {
	pulumi.Input

	ToClusterUpgradeGKEUpgradeOutput() ClusterUpgradeGKEUpgradeOutput
	ToClusterUpgradeGKEUpgradeOutputWithContext(context.Context) ClusterUpgradeGKEUpgradeOutput
}

// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
type ClusterUpgradeGKEUpgradeArgs struct {
	// Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ClusterUpgradeGKEUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgrade)(nil)).Elem()
}

func (i ClusterUpgradeGKEUpgradeArgs) ToClusterUpgradeGKEUpgradeOutput() ClusterUpgradeGKEUpgradeOutput {
	return i.ToClusterUpgradeGKEUpgradeOutputWithContext(context.Background())
}

func (i ClusterUpgradeGKEUpgradeArgs) ToClusterUpgradeGKEUpgradeOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeGKEUpgradeOutput)
}

// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
type ClusterUpgradeGKEUpgradeOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgrade)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeOutput) ToClusterUpgradeGKEUpgradeOutput() ClusterUpgradeGKEUpgradeOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeOutput) ToClusterUpgradeGKEUpgradeOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOutput {
	return o
}

// Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
func (o ClusterUpgradeGKEUpgradeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgrade) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
func (o ClusterUpgradeGKEUpgradeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgrade) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// GKEUpgradeFeatureCondition describes the condition of the feature for GKE clusters at a certain point of time.
type ClusterUpgradeGKEUpgradeFeatureConditionResponse struct {
	// Reason why the feature is in this status.
	Reason string `pulumi:"reason"`
	// Status of the condition, one of True, False, Unknown.
	Status string `pulumi:"status"`
	// Type of the condition, for example, "ready".
	Type string `pulumi:"type"`
	// Last timestamp the condition was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// GKEUpgradeFeatureCondition describes the condition of the feature for GKE clusters at a certain point of time.
type ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgradeFeatureConditionResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput) ToClusterUpgradeGKEUpgradeFeatureConditionResponseOutput() ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput) ToClusterUpgradeGKEUpgradeFeatureConditionResponseOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput {
	return o
}

// Reason why the feature is in this status.
func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeFeatureConditionResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Status of the condition, one of True, False, Unknown.
func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeFeatureConditionResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Type of the condition, for example, "ready".
func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeFeatureConditionResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Last timestamp the condition was updated.
func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeFeatureConditionResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUpgradeGKEUpgradeFeatureConditionResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput) ToClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput() ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput) ToClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput) Index(i pulumi.IntInput) ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterUpgradeGKEUpgradeFeatureConditionResponse {
		return vs[0].([]ClusterUpgradeGKEUpgradeFeatureConditionResponse)[vs[1].(int)]
	}).(ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput)
}

// GKEUpgradeFeatureState contains feature states for GKE clusters in the scope.
type ClusterUpgradeGKEUpgradeFeatureStateResponse struct {
	// Current conditions of the feature.
	Conditions []ClusterUpgradeGKEUpgradeFeatureConditionResponse `pulumi:"conditions"`
	// Upgrade state. It will eventually replace `state`.
	UpgradeState []ClusterUpgradeGKEUpgradeStateResponse `pulumi:"upgradeState"`
}

// GKEUpgradeFeatureState contains feature states for GKE clusters in the scope.
type ClusterUpgradeGKEUpgradeFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgradeFeatureStateResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeFeatureStateResponseOutput) ToClusterUpgradeGKEUpgradeFeatureStateResponseOutput() ClusterUpgradeGKEUpgradeFeatureStateResponseOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeFeatureStateResponseOutput) ToClusterUpgradeGKEUpgradeFeatureStateResponseOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeFeatureStateResponseOutput {
	return o
}

// Current conditions of the feature.
func (o ClusterUpgradeGKEUpgradeFeatureStateResponseOutput) Conditions() ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeFeatureStateResponse) []ClusterUpgradeGKEUpgradeFeatureConditionResponse {
		return v.Conditions
	}).(ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput)
}

// Upgrade state. It will eventually replace `state`.
func (o ClusterUpgradeGKEUpgradeFeatureStateResponseOutput) UpgradeState() ClusterUpgradeGKEUpgradeStateResponseArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeFeatureStateResponse) []ClusterUpgradeGKEUpgradeStateResponse {
		return v.UpgradeState
	}).(ClusterUpgradeGKEUpgradeStateResponseArrayOutput)
}

// Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.
type ClusterUpgradeGKEUpgradeOverride struct {
	// Post conditions to override for the specified upgrade (name + version). Required.
	PostConditions ClusterUpgradePostConditions `pulumi:"postConditions"`
	// Which upgrade to override. Required.
	Upgrade ClusterUpgradeGKEUpgrade `pulumi:"upgrade"`
}

// ClusterUpgradeGKEUpgradeOverrideInput is an input type that accepts ClusterUpgradeGKEUpgradeOverrideArgs and ClusterUpgradeGKEUpgradeOverrideOutput values.
// You can construct a concrete instance of `ClusterUpgradeGKEUpgradeOverrideInput` via:
//
//	ClusterUpgradeGKEUpgradeOverrideArgs{...}
type ClusterUpgradeGKEUpgradeOverrideInput interface {
	pulumi.Input

	ToClusterUpgradeGKEUpgradeOverrideOutput() ClusterUpgradeGKEUpgradeOverrideOutput
	ToClusterUpgradeGKEUpgradeOverrideOutputWithContext(context.Context) ClusterUpgradeGKEUpgradeOverrideOutput
}

// Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.
type ClusterUpgradeGKEUpgradeOverrideArgs struct {
	// Post conditions to override for the specified upgrade (name + version). Required.
	PostConditions ClusterUpgradePostConditionsInput `pulumi:"postConditions"`
	// Which upgrade to override. Required.
	Upgrade ClusterUpgradeGKEUpgradeInput `pulumi:"upgrade"`
}

func (ClusterUpgradeGKEUpgradeOverrideArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgradeOverride)(nil)).Elem()
}

func (i ClusterUpgradeGKEUpgradeOverrideArgs) ToClusterUpgradeGKEUpgradeOverrideOutput() ClusterUpgradeGKEUpgradeOverrideOutput {
	return i.ToClusterUpgradeGKEUpgradeOverrideOutputWithContext(context.Background())
}

func (i ClusterUpgradeGKEUpgradeOverrideArgs) ToClusterUpgradeGKEUpgradeOverrideOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOverrideOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeGKEUpgradeOverrideOutput)
}

// ClusterUpgradeGKEUpgradeOverrideArrayInput is an input type that accepts ClusterUpgradeGKEUpgradeOverrideArray and ClusterUpgradeGKEUpgradeOverrideArrayOutput values.
// You can construct a concrete instance of `ClusterUpgradeGKEUpgradeOverrideArrayInput` via:
//
//	ClusterUpgradeGKEUpgradeOverrideArray{ ClusterUpgradeGKEUpgradeOverrideArgs{...} }
type ClusterUpgradeGKEUpgradeOverrideArrayInput interface {
	pulumi.Input

	ToClusterUpgradeGKEUpgradeOverrideArrayOutput() ClusterUpgradeGKEUpgradeOverrideArrayOutput
	ToClusterUpgradeGKEUpgradeOverrideArrayOutputWithContext(context.Context) ClusterUpgradeGKEUpgradeOverrideArrayOutput
}

type ClusterUpgradeGKEUpgradeOverrideArray []ClusterUpgradeGKEUpgradeOverrideInput

func (ClusterUpgradeGKEUpgradeOverrideArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUpgradeGKEUpgradeOverride)(nil)).Elem()
}

func (i ClusterUpgradeGKEUpgradeOverrideArray) ToClusterUpgradeGKEUpgradeOverrideArrayOutput() ClusterUpgradeGKEUpgradeOverrideArrayOutput {
	return i.ToClusterUpgradeGKEUpgradeOverrideArrayOutputWithContext(context.Background())
}

func (i ClusterUpgradeGKEUpgradeOverrideArray) ToClusterUpgradeGKEUpgradeOverrideArrayOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOverrideArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradeGKEUpgradeOverrideArrayOutput)
}

// Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.
type ClusterUpgradeGKEUpgradeOverrideOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeOverrideOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgradeOverride)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeOverrideOutput) ToClusterUpgradeGKEUpgradeOverrideOutput() ClusterUpgradeGKEUpgradeOverrideOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeOverrideOutput) ToClusterUpgradeGKEUpgradeOverrideOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOverrideOutput {
	return o
}

// Post conditions to override for the specified upgrade (name + version). Required.
func (o ClusterUpgradeGKEUpgradeOverrideOutput) PostConditions() ClusterUpgradePostConditionsOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeOverride) ClusterUpgradePostConditions { return v.PostConditions }).(ClusterUpgradePostConditionsOutput)
}

// Which upgrade to override. Required.
func (o ClusterUpgradeGKEUpgradeOverrideOutput) Upgrade() ClusterUpgradeGKEUpgradeOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeOverride) ClusterUpgradeGKEUpgrade { return v.Upgrade }).(ClusterUpgradeGKEUpgradeOutput)
}

type ClusterUpgradeGKEUpgradeOverrideArrayOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeOverrideArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUpgradeGKEUpgradeOverride)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeOverrideArrayOutput) ToClusterUpgradeGKEUpgradeOverrideArrayOutput() ClusterUpgradeGKEUpgradeOverrideArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeOverrideArrayOutput) ToClusterUpgradeGKEUpgradeOverrideArrayOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOverrideArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeOverrideArrayOutput) Index(i pulumi.IntInput) ClusterUpgradeGKEUpgradeOverrideOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterUpgradeGKEUpgradeOverride {
		return vs[0].([]ClusterUpgradeGKEUpgradeOverride)[vs[1].(int)]
	}).(ClusterUpgradeGKEUpgradeOverrideOutput)
}

// Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.
type ClusterUpgradeGKEUpgradeOverrideResponse struct {
	// Post conditions to override for the specified upgrade (name + version). Required.
	PostConditions ClusterUpgradePostConditionsResponse `pulumi:"postConditions"`
	// Which upgrade to override. Required.
	Upgrade ClusterUpgradeGKEUpgradeResponse `pulumi:"upgrade"`
}

// Properties of a GKE upgrade that can be overridden by the user. For example, a user can skip soaking by overriding the soaking to 0.
type ClusterUpgradeGKEUpgradeOverrideResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeOverrideResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgradeOverrideResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeOverrideResponseOutput) ToClusterUpgradeGKEUpgradeOverrideResponseOutput() ClusterUpgradeGKEUpgradeOverrideResponseOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeOverrideResponseOutput) ToClusterUpgradeGKEUpgradeOverrideResponseOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOverrideResponseOutput {
	return o
}

// Post conditions to override for the specified upgrade (name + version). Required.
func (o ClusterUpgradeGKEUpgradeOverrideResponseOutput) PostConditions() ClusterUpgradePostConditionsResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeOverrideResponse) ClusterUpgradePostConditionsResponse {
		return v.PostConditions
	}).(ClusterUpgradePostConditionsResponseOutput)
}

// Which upgrade to override. Required.
func (o ClusterUpgradeGKEUpgradeOverrideResponseOutput) Upgrade() ClusterUpgradeGKEUpgradeResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeOverrideResponse) ClusterUpgradeGKEUpgradeResponse { return v.Upgrade }).(ClusterUpgradeGKEUpgradeResponseOutput)
}

type ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUpgradeGKEUpgradeOverrideResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput) ToClusterUpgradeGKEUpgradeOverrideResponseArrayOutput() ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput) ToClusterUpgradeGKEUpgradeOverrideResponseArrayOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput) Index(i pulumi.IntInput) ClusterUpgradeGKEUpgradeOverrideResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterUpgradeGKEUpgradeOverrideResponse {
		return vs[0].([]ClusterUpgradeGKEUpgradeOverrideResponse)[vs[1].(int)]
	}).(ClusterUpgradeGKEUpgradeOverrideResponseOutput)
}

// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
type ClusterUpgradeGKEUpgradeResponse struct {
	// Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
	Name string `pulumi:"name"`
	// Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
	Version string `pulumi:"version"`
}

// GKEUpgrade represents a GKE provided upgrade, e.g., control plane upgrade.
type ClusterUpgradeGKEUpgradeResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgradeResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeResponseOutput) ToClusterUpgradeGKEUpgradeResponseOutput() ClusterUpgradeGKEUpgradeResponseOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeResponseOutput) ToClusterUpgradeGKEUpgradeResponseOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeResponseOutput {
	return o
}

// Name of the upgrade, e.g., "k8s_control_plane". It should be a valid upgrade name. It must not exceet 99 characters.
func (o ClusterUpgradeGKEUpgradeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Version of the upgrade, e.g., "1.22.1-gke.100". It should be a valid version. It must not exceet 99 characters.
func (o ClusterUpgradeGKEUpgradeResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeResponse) string { return v.Version }).(pulumi.StringOutput)
}

// GKEUpgradeState is a GKEUpgrade and its state at the scope and fleet level.
type ClusterUpgradeGKEUpgradeStateResponse struct {
	// Number of GKE clusters in each status code.
	Stats map[string]string `pulumi:"stats"`
	// Status of the upgrade.
	Status ClusterUpgradeUpgradeStatusResponse `pulumi:"status"`
	// Which upgrade to track the state.
	Upgrade ClusterUpgradeGKEUpgradeResponse `pulumi:"upgrade"`
}

// GKEUpgradeState is a GKEUpgrade and its state at the scope and fleet level.
type ClusterUpgradeGKEUpgradeStateResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeGKEUpgradeStateResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeStateResponseOutput) ToClusterUpgradeGKEUpgradeStateResponseOutput() ClusterUpgradeGKEUpgradeStateResponseOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeStateResponseOutput) ToClusterUpgradeGKEUpgradeStateResponseOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeStateResponseOutput {
	return o
}

// Number of GKE clusters in each status code.
func (o ClusterUpgradeGKEUpgradeStateResponseOutput) Stats() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeStateResponse) map[string]string { return v.Stats }).(pulumi.StringMapOutput)
}

// Status of the upgrade.
func (o ClusterUpgradeGKEUpgradeStateResponseOutput) Status() ClusterUpgradeUpgradeStatusResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeStateResponse) ClusterUpgradeUpgradeStatusResponse { return v.Status }).(ClusterUpgradeUpgradeStatusResponseOutput)
}

// Which upgrade to track the state.
func (o ClusterUpgradeGKEUpgradeStateResponseOutput) Upgrade() ClusterUpgradeGKEUpgradeResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeGKEUpgradeStateResponse) ClusterUpgradeGKEUpgradeResponse { return v.Upgrade }).(ClusterUpgradeGKEUpgradeResponseOutput)
}

type ClusterUpgradeGKEUpgradeStateResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeGKEUpgradeStateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUpgradeGKEUpgradeStateResponse)(nil)).Elem()
}

func (o ClusterUpgradeGKEUpgradeStateResponseArrayOutput) ToClusterUpgradeGKEUpgradeStateResponseArrayOutput() ClusterUpgradeGKEUpgradeStateResponseArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeStateResponseArrayOutput) ToClusterUpgradeGKEUpgradeStateResponseArrayOutputWithContext(ctx context.Context) ClusterUpgradeGKEUpgradeStateResponseArrayOutput {
	return o
}

func (o ClusterUpgradeGKEUpgradeStateResponseArrayOutput) Index(i pulumi.IntInput) ClusterUpgradeGKEUpgradeStateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterUpgradeGKEUpgradeStateResponse {
		return vs[0].([]ClusterUpgradeGKEUpgradeStateResponse)[vs[1].(int)]
	}).(ClusterUpgradeGKEUpgradeStateResponseOutput)
}

// IgnoredMembership represents a membership ignored by the feature. A membership can be ignored because it was manually upgraded to a newer version than RC default.
type ClusterUpgradeIgnoredMembershipResponse struct {
	// Time when the membership was first set to ignored.
	IgnoredTime string `pulumi:"ignoredTime"`
	// Reason why the membership is ignored.
	Reason string `pulumi:"reason"`
}

// IgnoredMembership represents a membership ignored by the feature. A membership can be ignored because it was manually upgraded to a newer version than RC default.
type ClusterUpgradeIgnoredMembershipResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeIgnoredMembershipResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeIgnoredMembershipResponse)(nil)).Elem()
}

func (o ClusterUpgradeIgnoredMembershipResponseOutput) ToClusterUpgradeIgnoredMembershipResponseOutput() ClusterUpgradeIgnoredMembershipResponseOutput {
	return o
}

func (o ClusterUpgradeIgnoredMembershipResponseOutput) ToClusterUpgradeIgnoredMembershipResponseOutputWithContext(ctx context.Context) ClusterUpgradeIgnoredMembershipResponseOutput {
	return o
}

// Time when the membership was first set to ignored.
func (o ClusterUpgradeIgnoredMembershipResponseOutput) IgnoredTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeIgnoredMembershipResponse) string { return v.IgnoredTime }).(pulumi.StringOutput)
}

// Reason why the membership is ignored.
func (o ClusterUpgradeIgnoredMembershipResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeIgnoredMembershipResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// ScopeGKEUpgradeState is a GKEUpgrade and its state per-membership.
type ClusterUpgradeMembershipGKEUpgradeStateResponse struct {
	// Status of the upgrade.
	Status ClusterUpgradeUpgradeStatusResponse `pulumi:"status"`
	// Which upgrade to track the state.
	Upgrade ClusterUpgradeGKEUpgradeResponse `pulumi:"upgrade"`
}

// ScopeGKEUpgradeState is a GKEUpgrade and its state per-membership.
type ClusterUpgradeMembershipGKEUpgradeStateResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeMembershipGKEUpgradeStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeMembershipGKEUpgradeStateResponse)(nil)).Elem()
}

func (o ClusterUpgradeMembershipGKEUpgradeStateResponseOutput) ToClusterUpgradeMembershipGKEUpgradeStateResponseOutput() ClusterUpgradeMembershipGKEUpgradeStateResponseOutput {
	return o
}

func (o ClusterUpgradeMembershipGKEUpgradeStateResponseOutput) ToClusterUpgradeMembershipGKEUpgradeStateResponseOutputWithContext(ctx context.Context) ClusterUpgradeMembershipGKEUpgradeStateResponseOutput {
	return o
}

// Status of the upgrade.
func (o ClusterUpgradeMembershipGKEUpgradeStateResponseOutput) Status() ClusterUpgradeUpgradeStatusResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeMembershipGKEUpgradeStateResponse) ClusterUpgradeUpgradeStatusResponse {
		return v.Status
	}).(ClusterUpgradeUpgradeStatusResponseOutput)
}

// Which upgrade to track the state.
func (o ClusterUpgradeMembershipGKEUpgradeStateResponseOutput) Upgrade() ClusterUpgradeGKEUpgradeResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeMembershipGKEUpgradeStateResponse) ClusterUpgradeGKEUpgradeResponse {
		return v.Upgrade
	}).(ClusterUpgradeGKEUpgradeResponseOutput)
}

type ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterUpgradeMembershipGKEUpgradeStateResponse)(nil)).Elem()
}

func (o ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput) ToClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput() ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput {
	return o
}

func (o ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput) ToClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutputWithContext(ctx context.Context) ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput {
	return o
}

func (o ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput) Index(i pulumi.IntInput) ClusterUpgradeMembershipGKEUpgradeStateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterUpgradeMembershipGKEUpgradeStateResponse {
		return vs[0].([]ClusterUpgradeMembershipGKEUpgradeStateResponse)[vs[1].(int)]
	}).(ClusterUpgradeMembershipGKEUpgradeStateResponseOutput)
}

// Per-membership state for this feature.
type ClusterUpgradeMembershipStateResponse struct {
	// Project number or id of the fleet. It is set only for Memberships that are part of fleet-based Rollout Sequencing.
	Fleet string `pulumi:"fleet"`
	// Whether this membership is ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel.
	Ignored ClusterUpgradeIgnoredMembershipResponse `pulumi:"ignored"`
	// Fully qualified scope names that this clusters is bound to which also have rollout sequencing enabled.
	Scopes []string `pulumi:"scopes"`
	// Actual upgrade state against desired.
	Upgrades []ClusterUpgradeMembershipGKEUpgradeStateResponse `pulumi:"upgrades"`
}

// Per-membership state for this feature.
type ClusterUpgradeMembershipStateResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeMembershipStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeMembershipStateResponse)(nil)).Elem()
}

func (o ClusterUpgradeMembershipStateResponseOutput) ToClusterUpgradeMembershipStateResponseOutput() ClusterUpgradeMembershipStateResponseOutput {
	return o
}

func (o ClusterUpgradeMembershipStateResponseOutput) ToClusterUpgradeMembershipStateResponseOutputWithContext(ctx context.Context) ClusterUpgradeMembershipStateResponseOutput {
	return o
}

// Project number or id of the fleet. It is set only for Memberships that are part of fleet-based Rollout Sequencing.
func (o ClusterUpgradeMembershipStateResponseOutput) Fleet() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeMembershipStateResponse) string { return v.Fleet }).(pulumi.StringOutput)
}

// Whether this membership is ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel.
func (o ClusterUpgradeMembershipStateResponseOutput) Ignored() ClusterUpgradeIgnoredMembershipResponseOutput {
	return o.ApplyT(func(v ClusterUpgradeMembershipStateResponse) ClusterUpgradeIgnoredMembershipResponse {
		return v.Ignored
	}).(ClusterUpgradeIgnoredMembershipResponseOutput)
}

// Fully qualified scope names that this clusters is bound to which also have rollout sequencing enabled.
func (o ClusterUpgradeMembershipStateResponseOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeMembershipStateResponse) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Actual upgrade state against desired.
func (o ClusterUpgradeMembershipStateResponseOutput) Upgrades() ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput {
	return o.ApplyT(func(v ClusterUpgradeMembershipStateResponse) []ClusterUpgradeMembershipGKEUpgradeStateResponse {
		return v.Upgrades
	}).(ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput)
}

// Post conditional checks after an upgrade has been applied on all eligible clusters.
type ClusterUpgradePostConditions struct {
	// Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
	Soaking string `pulumi:"soaking"`
}

// ClusterUpgradePostConditionsInput is an input type that accepts ClusterUpgradePostConditionsArgs and ClusterUpgradePostConditionsOutput values.
// You can construct a concrete instance of `ClusterUpgradePostConditionsInput` via:
//
//	ClusterUpgradePostConditionsArgs{...}
type ClusterUpgradePostConditionsInput interface {
	pulumi.Input

	ToClusterUpgradePostConditionsOutput() ClusterUpgradePostConditionsOutput
	ToClusterUpgradePostConditionsOutputWithContext(context.Context) ClusterUpgradePostConditionsOutput
}

// Post conditional checks after an upgrade has been applied on all eligible clusters.
type ClusterUpgradePostConditionsArgs struct {
	// Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
	Soaking pulumi.StringInput `pulumi:"soaking"`
}

func (ClusterUpgradePostConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePostConditions)(nil)).Elem()
}

func (i ClusterUpgradePostConditionsArgs) ToClusterUpgradePostConditionsOutput() ClusterUpgradePostConditionsOutput {
	return i.ToClusterUpgradePostConditionsOutputWithContext(context.Background())
}

func (i ClusterUpgradePostConditionsArgs) ToClusterUpgradePostConditionsOutputWithContext(ctx context.Context) ClusterUpgradePostConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePostConditionsOutput)
}

func (i ClusterUpgradePostConditionsArgs) ToClusterUpgradePostConditionsPtrOutput() ClusterUpgradePostConditionsPtrOutput {
	return i.ToClusterUpgradePostConditionsPtrOutputWithContext(context.Background())
}

func (i ClusterUpgradePostConditionsArgs) ToClusterUpgradePostConditionsPtrOutputWithContext(ctx context.Context) ClusterUpgradePostConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePostConditionsOutput).ToClusterUpgradePostConditionsPtrOutputWithContext(ctx)
}

// ClusterUpgradePostConditionsPtrInput is an input type that accepts ClusterUpgradePostConditionsArgs, ClusterUpgradePostConditionsPtr and ClusterUpgradePostConditionsPtrOutput values.
// You can construct a concrete instance of `ClusterUpgradePostConditionsPtrInput` via:
//
//	        ClusterUpgradePostConditionsArgs{...}
//
//	or:
//
//	        nil
type ClusterUpgradePostConditionsPtrInput interface {
	pulumi.Input

	ToClusterUpgradePostConditionsPtrOutput() ClusterUpgradePostConditionsPtrOutput
	ToClusterUpgradePostConditionsPtrOutputWithContext(context.Context) ClusterUpgradePostConditionsPtrOutput
}

type clusterUpgradePostConditionsPtrType ClusterUpgradePostConditionsArgs

func ClusterUpgradePostConditionsPtr(v *ClusterUpgradePostConditionsArgs) ClusterUpgradePostConditionsPtrInput {
	return (*clusterUpgradePostConditionsPtrType)(v)
}

func (*clusterUpgradePostConditionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePostConditions)(nil)).Elem()
}

func (i *clusterUpgradePostConditionsPtrType) ToClusterUpgradePostConditionsPtrOutput() ClusterUpgradePostConditionsPtrOutput {
	return i.ToClusterUpgradePostConditionsPtrOutputWithContext(context.Background())
}

func (i *clusterUpgradePostConditionsPtrType) ToClusterUpgradePostConditionsPtrOutputWithContext(ctx context.Context) ClusterUpgradePostConditionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterUpgradePostConditionsPtrOutput)
}

// Post conditional checks after an upgrade has been applied on all eligible clusters.
type ClusterUpgradePostConditionsOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePostConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePostConditions)(nil)).Elem()
}

func (o ClusterUpgradePostConditionsOutput) ToClusterUpgradePostConditionsOutput() ClusterUpgradePostConditionsOutput {
	return o
}

func (o ClusterUpgradePostConditionsOutput) ToClusterUpgradePostConditionsOutputWithContext(ctx context.Context) ClusterUpgradePostConditionsOutput {
	return o
}

func (o ClusterUpgradePostConditionsOutput) ToClusterUpgradePostConditionsPtrOutput() ClusterUpgradePostConditionsPtrOutput {
	return o.ToClusterUpgradePostConditionsPtrOutputWithContext(context.Background())
}

func (o ClusterUpgradePostConditionsOutput) ToClusterUpgradePostConditionsPtrOutputWithContext(ctx context.Context) ClusterUpgradePostConditionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterUpgradePostConditions) *ClusterUpgradePostConditions {
		return &v
	}).(ClusterUpgradePostConditionsPtrOutput)
}

// Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
func (o ClusterUpgradePostConditionsOutput) Soaking() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePostConditions) string { return v.Soaking }).(pulumi.StringOutput)
}

type ClusterUpgradePostConditionsPtrOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePostConditionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterUpgradePostConditions)(nil)).Elem()
}

func (o ClusterUpgradePostConditionsPtrOutput) ToClusterUpgradePostConditionsPtrOutput() ClusterUpgradePostConditionsPtrOutput {
	return o
}

func (o ClusterUpgradePostConditionsPtrOutput) ToClusterUpgradePostConditionsPtrOutputWithContext(ctx context.Context) ClusterUpgradePostConditionsPtrOutput {
	return o
}

func (o ClusterUpgradePostConditionsPtrOutput) Elem() ClusterUpgradePostConditionsOutput {
	return o.ApplyT(func(v *ClusterUpgradePostConditions) ClusterUpgradePostConditions {
		if v != nil {
			return *v
		}
		var ret ClusterUpgradePostConditions
		return ret
	}).(ClusterUpgradePostConditionsOutput)
}

// Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
func (o ClusterUpgradePostConditionsPtrOutput) Soaking() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterUpgradePostConditions) *string {
		if v == nil {
			return nil
		}
		return &v.Soaking
	}).(pulumi.StringPtrOutput)
}

// Post conditional checks after an upgrade has been applied on all eligible clusters.
type ClusterUpgradePostConditionsResponse struct {
	// Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
	Soaking string `pulumi:"soaking"`
}

// Post conditional checks after an upgrade has been applied on all eligible clusters.
type ClusterUpgradePostConditionsResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradePostConditionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradePostConditionsResponse)(nil)).Elem()
}

func (o ClusterUpgradePostConditionsResponseOutput) ToClusterUpgradePostConditionsResponseOutput() ClusterUpgradePostConditionsResponseOutput {
	return o
}

func (o ClusterUpgradePostConditionsResponseOutput) ToClusterUpgradePostConditionsResponseOutputWithContext(ctx context.Context) ClusterUpgradePostConditionsResponseOutput {
	return o
}

// Amount of time to "soak" after a rollout has been finished before marking it COMPLETE. Cannot exceed 30 days. Required.
func (o ClusterUpgradePostConditionsResponseOutput) Soaking() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradePostConditionsResponse) string { return v.Soaking }).(pulumi.StringOutput)
}

// UpgradeStatus provides status information for each upgrade.
type ClusterUpgradeUpgradeStatusResponse struct {
	// Status code of the upgrade.
	Code string `pulumi:"code"`
	// Reason for this status.
	Reason string `pulumi:"reason"`
	// Last timestamp the status was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// UpgradeStatus provides status information for each upgrade.
type ClusterUpgradeUpgradeStatusResponseOutput struct{ *pulumi.OutputState }

func (ClusterUpgradeUpgradeStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterUpgradeUpgradeStatusResponse)(nil)).Elem()
}

func (o ClusterUpgradeUpgradeStatusResponseOutput) ToClusterUpgradeUpgradeStatusResponseOutput() ClusterUpgradeUpgradeStatusResponseOutput {
	return o
}

func (o ClusterUpgradeUpgradeStatusResponseOutput) ToClusterUpgradeUpgradeStatusResponseOutputWithContext(ctx context.Context) ClusterUpgradeUpgradeStatusResponseOutput {
	return o
}

// Status code of the upgrade.
func (o ClusterUpgradeUpgradeStatusResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeUpgradeStatusResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Reason for this status.
func (o ClusterUpgradeUpgradeStatusResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeUpgradeStatusResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Last timestamp the status was updated.
func (o ClusterUpgradeUpgradeStatusResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterUpgradeUpgradeStatusResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpec struct {
	// Appdevexperience specific spec.
	Appdevexperience *AppDevExperienceFeatureSpec `pulumi:"appdevexperience"`
	// ClusterUpgrade (fleet-based) feature spec.
	Clusterupgrade *ClusterUpgradeFleetSpec `pulumi:"clusterupgrade"`
	// FleetObservability feature spec.
	Fleetobservability *FleetObservabilityFeatureSpec `pulumi:"fleetobservability"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress *MultiClusterIngressFeatureSpec `pulumi:"multiclusteringress"`
}

// CommonFeatureSpecInput is an input type that accepts CommonFeatureSpecArgs and CommonFeatureSpecOutput values.
// You can construct a concrete instance of `CommonFeatureSpecInput` via:
//
//	CommonFeatureSpecArgs{...}
type CommonFeatureSpecInput interface {
	pulumi.Input

	ToCommonFeatureSpecOutput() CommonFeatureSpecOutput
	ToCommonFeatureSpecOutputWithContext(context.Context) CommonFeatureSpecOutput
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecArgs struct {
	// Appdevexperience specific spec.
	Appdevexperience AppDevExperienceFeatureSpecPtrInput `pulumi:"appdevexperience"`
	// ClusterUpgrade (fleet-based) feature spec.
	Clusterupgrade ClusterUpgradeFleetSpecPtrInput `pulumi:"clusterupgrade"`
	// FleetObservability feature spec.
	Fleetobservability FleetObservabilityFeatureSpecPtrInput `pulumi:"fleetobservability"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecPtrInput `pulumi:"multiclusteringress"`
}

func (CommonFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return i.ToCommonFeatureSpecOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput)
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput).ToCommonFeatureSpecPtrOutputWithContext(ctx)
}

// CommonFeatureSpecPtrInput is an input type that accepts CommonFeatureSpecArgs, CommonFeatureSpecPtr and CommonFeatureSpecPtrOutput values.
// You can construct a concrete instance of `CommonFeatureSpecPtrInput` via:
//
//	        CommonFeatureSpecArgs{...}
//
//	or:
//
//	        nil
type CommonFeatureSpecPtrInput interface {
	pulumi.Input

	ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput
	ToCommonFeatureSpecPtrOutputWithContext(context.Context) CommonFeatureSpecPtrOutput
}

type commonFeatureSpecPtrType CommonFeatureSpecArgs

func CommonFeatureSpecPtr(v *CommonFeatureSpecArgs) CommonFeatureSpecPtrInput {
	return (*commonFeatureSpecPtrType)(v)
}

func (*commonFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecPtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommonFeatureSpec) *CommonFeatureSpec {
		return &v
	}).(CommonFeatureSpecPtrOutput)
}

// Appdevexperience specific spec.
func (o CommonFeatureSpecOutput) Appdevexperience() AppDevExperienceFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *AppDevExperienceFeatureSpec { return v.Appdevexperience }).(AppDevExperienceFeatureSpecPtrOutput)
}

// ClusterUpgrade (fleet-based) feature spec.
func (o CommonFeatureSpecOutput) Clusterupgrade() ClusterUpgradeFleetSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *ClusterUpgradeFleetSpec { return v.Clusterupgrade }).(ClusterUpgradeFleetSpecPtrOutput)
}

// FleetObservability feature spec.
func (o CommonFeatureSpecOutput) Fleetobservability() FleetObservabilityFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *FleetObservabilityFeatureSpec { return v.Fleetobservability }).(FleetObservabilityFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *MultiClusterIngressFeatureSpec { return v.Multiclusteringress }).(MultiClusterIngressFeatureSpecPtrOutput)
}

type CommonFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) Elem() CommonFeatureSpecOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) CommonFeatureSpec {
		if v != nil {
			return *v
		}
		var ret CommonFeatureSpec
		return ret
	}).(CommonFeatureSpecOutput)
}

// Appdevexperience specific spec.
func (o CommonFeatureSpecPtrOutput) Appdevexperience() AppDevExperienceFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *AppDevExperienceFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Appdevexperience
	}).(AppDevExperienceFeatureSpecPtrOutput)
}

// ClusterUpgrade (fleet-based) feature spec.
func (o CommonFeatureSpecPtrOutput) Clusterupgrade() ClusterUpgradeFleetSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *ClusterUpgradeFleetSpec {
		if v == nil {
			return nil
		}
		return v.Clusterupgrade
	}).(ClusterUpgradeFleetSpecPtrOutput)
}

// FleetObservability feature spec.
func (o CommonFeatureSpecPtrOutput) Fleetobservability() FleetObservabilityFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *FleetObservabilityFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Fleetobservability
	}).(FleetObservabilityFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecPtrOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *MultiClusterIngressFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Multiclusteringress
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecResponse struct {
	// Appdevexperience specific spec.
	Appdevexperience AppDevExperienceFeatureSpecResponse `pulumi:"appdevexperience"`
	// ClusterUpgrade (fleet-based) feature spec.
	Clusterupgrade ClusterUpgradeFleetSpecResponse `pulumi:"clusterupgrade"`
	// FleetObservability feature spec.
	Fleetobservability FleetObservabilityFeatureSpecResponse `pulumi:"fleetobservability"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecResponse `pulumi:"multiclusteringress"`
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpecResponse)(nil)).Elem()
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponseOutput() CommonFeatureSpecResponseOutput {
	return o
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponseOutputWithContext(ctx context.Context) CommonFeatureSpecResponseOutput {
	return o
}

// Appdevexperience specific spec.
func (o CommonFeatureSpecResponseOutput) Appdevexperience() AppDevExperienceFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) AppDevExperienceFeatureSpecResponse { return v.Appdevexperience }).(AppDevExperienceFeatureSpecResponseOutput)
}

// ClusterUpgrade (fleet-based) feature spec.
func (o CommonFeatureSpecResponseOutput) Clusterupgrade() ClusterUpgradeFleetSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) ClusterUpgradeFleetSpecResponse { return v.Clusterupgrade }).(ClusterUpgradeFleetSpecResponseOutput)
}

// FleetObservability feature spec.
func (o CommonFeatureSpecResponseOutput) Fleetobservability() FleetObservabilityFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) FleetObservabilityFeatureSpecResponse { return v.Fleetobservability }).(FleetObservabilityFeatureSpecResponseOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecResponseOutput) Multiclusteringress() MultiClusterIngressFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) MultiClusterIngressFeatureSpecResponse { return v.Multiclusteringress }).(MultiClusterIngressFeatureSpecResponseOutput)
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateResponse struct {
	// Appdevexperience specific state.
	Appdevexperience AppDevExperienceFeatureStateResponse `pulumi:"appdevexperience"`
	// ClusterUpgrade fleet-level state.
	Clusterupgrade ClusterUpgradeFleetStateResponse `pulumi:"clusterupgrade"`
	// FleetObservability feature state.
	Fleetobservability FleetObservabilityFeatureStateResponse `pulumi:"fleetobservability"`
	// The "running state" of the Feature in this Hub.
	State FeatureStateResponse `pulumi:"state"`
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (CommonFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureStateResponse)(nil)).Elem()
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponseOutput() CommonFeatureStateResponseOutput {
	return o
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponseOutputWithContext(ctx context.Context) CommonFeatureStateResponseOutput {
	return o
}

// Appdevexperience specific state.
func (o CommonFeatureStateResponseOutput) Appdevexperience() AppDevExperienceFeatureStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) AppDevExperienceFeatureStateResponse { return v.Appdevexperience }).(AppDevExperienceFeatureStateResponseOutput)
}

// ClusterUpgrade fleet-level state.
func (o CommonFeatureStateResponseOutput) Clusterupgrade() ClusterUpgradeFleetStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) ClusterUpgradeFleetStateResponse { return v.Clusterupgrade }).(ClusterUpgradeFleetStateResponseOutput)
}

// FleetObservability feature state.
func (o CommonFeatureStateResponseOutput) Fleetobservability() FleetObservabilityFeatureStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) FleetObservabilityFeatureStateResponse { return v.Fleetobservability }).(FleetObservabilityFeatureStateResponseOutput)
}

// The "running state" of the Feature in this Hub.
func (o CommonFeatureStateResponseOutput) State() FeatureStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) FeatureStateResponse { return v.State }).(FeatureStateResponseOutput)
}

// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
type CommonFleetDefaultMemberConfigSpec struct {
	// Config Management-specific spec.
	Configmanagement *ConfigManagementMembershipSpec `pulumi:"configmanagement"`
	// Identity Service-specific spec.
	Identityservice *IdentityServiceMembershipSpec `pulumi:"identityservice"`
	// Anthos Service Mesh-specific spec
	Mesh *ServiceMeshMembershipSpec `pulumi:"mesh"`
	// Policy Controller spec.
	Policycontroller *PolicyControllerMembershipSpec `pulumi:"policycontroller"`
}

// CommonFleetDefaultMemberConfigSpecInput is an input type that accepts CommonFleetDefaultMemberConfigSpecArgs and CommonFleetDefaultMemberConfigSpecOutput values.
// You can construct a concrete instance of `CommonFleetDefaultMemberConfigSpecInput` via:
//
//	CommonFleetDefaultMemberConfigSpecArgs{...}
type CommonFleetDefaultMemberConfigSpecInput interface {
	pulumi.Input

	ToCommonFleetDefaultMemberConfigSpecOutput() CommonFleetDefaultMemberConfigSpecOutput
	ToCommonFleetDefaultMemberConfigSpecOutputWithContext(context.Context) CommonFleetDefaultMemberConfigSpecOutput
}

// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
type CommonFleetDefaultMemberConfigSpecArgs struct {
	// Config Management-specific spec.
	Configmanagement ConfigManagementMembershipSpecPtrInput `pulumi:"configmanagement"`
	// Identity Service-specific spec.
	Identityservice IdentityServiceMembershipSpecPtrInput `pulumi:"identityservice"`
	// Anthos Service Mesh-specific spec
	Mesh ServiceMeshMembershipSpecPtrInput `pulumi:"mesh"`
	// Policy Controller spec.
	Policycontroller PolicyControllerMembershipSpecPtrInput `pulumi:"policycontroller"`
}

func (CommonFleetDefaultMemberConfigSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFleetDefaultMemberConfigSpec)(nil)).Elem()
}

func (i CommonFleetDefaultMemberConfigSpecArgs) ToCommonFleetDefaultMemberConfigSpecOutput() CommonFleetDefaultMemberConfigSpecOutput {
	return i.ToCommonFleetDefaultMemberConfigSpecOutputWithContext(context.Background())
}

func (i CommonFleetDefaultMemberConfigSpecArgs) ToCommonFleetDefaultMemberConfigSpecOutputWithContext(ctx context.Context) CommonFleetDefaultMemberConfigSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFleetDefaultMemberConfigSpecOutput)
}

func (i CommonFleetDefaultMemberConfigSpecArgs) ToCommonFleetDefaultMemberConfigSpecPtrOutput() CommonFleetDefaultMemberConfigSpecPtrOutput {
	return i.ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(context.Background())
}

func (i CommonFleetDefaultMemberConfigSpecArgs) ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(ctx context.Context) CommonFleetDefaultMemberConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFleetDefaultMemberConfigSpecOutput).ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(ctx)
}

// CommonFleetDefaultMemberConfigSpecPtrInput is an input type that accepts CommonFleetDefaultMemberConfigSpecArgs, CommonFleetDefaultMemberConfigSpecPtr and CommonFleetDefaultMemberConfigSpecPtrOutput values.
// You can construct a concrete instance of `CommonFleetDefaultMemberConfigSpecPtrInput` via:
//
//	        CommonFleetDefaultMemberConfigSpecArgs{...}
//
//	or:
//
//	        nil
type CommonFleetDefaultMemberConfigSpecPtrInput interface {
	pulumi.Input

	ToCommonFleetDefaultMemberConfigSpecPtrOutput() CommonFleetDefaultMemberConfigSpecPtrOutput
	ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(context.Context) CommonFleetDefaultMemberConfigSpecPtrOutput
}

type commonFleetDefaultMemberConfigSpecPtrType CommonFleetDefaultMemberConfigSpecArgs

func CommonFleetDefaultMemberConfigSpecPtr(v *CommonFleetDefaultMemberConfigSpecArgs) CommonFleetDefaultMemberConfigSpecPtrInput {
	return (*commonFleetDefaultMemberConfigSpecPtrType)(v)
}

func (*commonFleetDefaultMemberConfigSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFleetDefaultMemberConfigSpec)(nil)).Elem()
}

func (i *commonFleetDefaultMemberConfigSpecPtrType) ToCommonFleetDefaultMemberConfigSpecPtrOutput() CommonFleetDefaultMemberConfigSpecPtrOutput {
	return i.ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(context.Background())
}

func (i *commonFleetDefaultMemberConfigSpecPtrType) ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(ctx context.Context) CommonFleetDefaultMemberConfigSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFleetDefaultMemberConfigSpecPtrOutput)
}

// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
type CommonFleetDefaultMemberConfigSpecOutput struct{ *pulumi.OutputState }

func (CommonFleetDefaultMemberConfigSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFleetDefaultMemberConfigSpec)(nil)).Elem()
}

func (o CommonFleetDefaultMemberConfigSpecOutput) ToCommonFleetDefaultMemberConfigSpecOutput() CommonFleetDefaultMemberConfigSpecOutput {
	return o
}

func (o CommonFleetDefaultMemberConfigSpecOutput) ToCommonFleetDefaultMemberConfigSpecOutputWithContext(ctx context.Context) CommonFleetDefaultMemberConfigSpecOutput {
	return o
}

func (o CommonFleetDefaultMemberConfigSpecOutput) ToCommonFleetDefaultMemberConfigSpecPtrOutput() CommonFleetDefaultMemberConfigSpecPtrOutput {
	return o.ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(context.Background())
}

func (o CommonFleetDefaultMemberConfigSpecOutput) ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(ctx context.Context) CommonFleetDefaultMemberConfigSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommonFleetDefaultMemberConfigSpec) *CommonFleetDefaultMemberConfigSpec {
		return &v
	}).(CommonFleetDefaultMemberConfigSpecPtrOutput)
}

// Config Management-specific spec.
func (o CommonFleetDefaultMemberConfigSpecOutput) Configmanagement() ConfigManagementMembershipSpecPtrOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpec) *ConfigManagementMembershipSpec { return v.Configmanagement }).(ConfigManagementMembershipSpecPtrOutput)
}

// Identity Service-specific spec.
func (o CommonFleetDefaultMemberConfigSpecOutput) Identityservice() IdentityServiceMembershipSpecPtrOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpec) *IdentityServiceMembershipSpec { return v.Identityservice }).(IdentityServiceMembershipSpecPtrOutput)
}

// Anthos Service Mesh-specific spec
func (o CommonFleetDefaultMemberConfigSpecOutput) Mesh() ServiceMeshMembershipSpecPtrOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpec) *ServiceMeshMembershipSpec { return v.Mesh }).(ServiceMeshMembershipSpecPtrOutput)
}

// Policy Controller spec.
func (o CommonFleetDefaultMemberConfigSpecOutput) Policycontroller() PolicyControllerMembershipSpecPtrOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpec) *PolicyControllerMembershipSpec { return v.Policycontroller }).(PolicyControllerMembershipSpecPtrOutput)
}

type CommonFleetDefaultMemberConfigSpecPtrOutput struct{ *pulumi.OutputState }

func (CommonFleetDefaultMemberConfigSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFleetDefaultMemberConfigSpec)(nil)).Elem()
}

func (o CommonFleetDefaultMemberConfigSpecPtrOutput) ToCommonFleetDefaultMemberConfigSpecPtrOutput() CommonFleetDefaultMemberConfigSpecPtrOutput {
	return o
}

func (o CommonFleetDefaultMemberConfigSpecPtrOutput) ToCommonFleetDefaultMemberConfigSpecPtrOutputWithContext(ctx context.Context) CommonFleetDefaultMemberConfigSpecPtrOutput {
	return o
}

func (o CommonFleetDefaultMemberConfigSpecPtrOutput) Elem() CommonFleetDefaultMemberConfigSpecOutput {
	return o.ApplyT(func(v *CommonFleetDefaultMemberConfigSpec) CommonFleetDefaultMemberConfigSpec {
		if v != nil {
			return *v
		}
		var ret CommonFleetDefaultMemberConfigSpec
		return ret
	}).(CommonFleetDefaultMemberConfigSpecOutput)
}

// Config Management-specific spec.
func (o CommonFleetDefaultMemberConfigSpecPtrOutput) Configmanagement() ConfigManagementMembershipSpecPtrOutput {
	return o.ApplyT(func(v *CommonFleetDefaultMemberConfigSpec) *ConfigManagementMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Configmanagement
	}).(ConfigManagementMembershipSpecPtrOutput)
}

// Identity Service-specific spec.
func (o CommonFleetDefaultMemberConfigSpecPtrOutput) Identityservice() IdentityServiceMembershipSpecPtrOutput {
	return o.ApplyT(func(v *CommonFleetDefaultMemberConfigSpec) *IdentityServiceMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Identityservice
	}).(IdentityServiceMembershipSpecPtrOutput)
}

// Anthos Service Mesh-specific spec
func (o CommonFleetDefaultMemberConfigSpecPtrOutput) Mesh() ServiceMeshMembershipSpecPtrOutput {
	return o.ApplyT(func(v *CommonFleetDefaultMemberConfigSpec) *ServiceMeshMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Mesh
	}).(ServiceMeshMembershipSpecPtrOutput)
}

// Policy Controller spec.
func (o CommonFleetDefaultMemberConfigSpecPtrOutput) Policycontroller() PolicyControllerMembershipSpecPtrOutput {
	return o.ApplyT(func(v *CommonFleetDefaultMemberConfigSpec) *PolicyControllerMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Policycontroller
	}).(PolicyControllerMembershipSpecPtrOutput)
}

// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
type CommonFleetDefaultMemberConfigSpecResponse struct {
	// Config Management-specific spec.
	Configmanagement ConfigManagementMembershipSpecResponse `pulumi:"configmanagement"`
	// Identity Service-specific spec.
	Identityservice IdentityServiceMembershipSpecResponse `pulumi:"identityservice"`
	// Anthos Service Mesh-specific spec
	Mesh ServiceMeshMembershipSpecResponse `pulumi:"mesh"`
	// Policy Controller spec.
	Policycontroller PolicyControllerMembershipSpecResponse `pulumi:"policycontroller"`
}

// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
type CommonFleetDefaultMemberConfigSpecResponseOutput struct{ *pulumi.OutputState }

func (CommonFleetDefaultMemberConfigSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFleetDefaultMemberConfigSpecResponse)(nil)).Elem()
}

func (o CommonFleetDefaultMemberConfigSpecResponseOutput) ToCommonFleetDefaultMemberConfigSpecResponseOutput() CommonFleetDefaultMemberConfigSpecResponseOutput {
	return o
}

func (o CommonFleetDefaultMemberConfigSpecResponseOutput) ToCommonFleetDefaultMemberConfigSpecResponseOutputWithContext(ctx context.Context) CommonFleetDefaultMemberConfigSpecResponseOutput {
	return o
}

// Config Management-specific spec.
func (o CommonFleetDefaultMemberConfigSpecResponseOutput) Configmanagement() ConfigManagementMembershipSpecResponseOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpecResponse) ConfigManagementMembershipSpecResponse {
		return v.Configmanagement
	}).(ConfigManagementMembershipSpecResponseOutput)
}

// Identity Service-specific spec.
func (o CommonFleetDefaultMemberConfigSpecResponseOutput) Identityservice() IdentityServiceMembershipSpecResponseOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpecResponse) IdentityServiceMembershipSpecResponse {
		return v.Identityservice
	}).(IdentityServiceMembershipSpecResponseOutput)
}

// Anthos Service Mesh-specific spec
func (o CommonFleetDefaultMemberConfigSpecResponseOutput) Mesh() ServiceMeshMembershipSpecResponseOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpecResponse) ServiceMeshMembershipSpecResponse { return v.Mesh }).(ServiceMeshMembershipSpecResponseOutput)
}

// Policy Controller spec.
func (o CommonFleetDefaultMemberConfigSpecResponseOutput) Policycontroller() PolicyControllerMembershipSpecResponseOutput {
	return o.ApplyT(func(v CommonFleetDefaultMemberConfigSpecResponse) PolicyControllerMembershipSpecResponse {
		return v.Policycontroller
	}).(PolicyControllerMembershipSpecResponseOutput)
}

// Configuration for Config Sync
type ConfigManagementConfigSync struct {
	// Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
	//
	// Deprecated: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
	AllowVerticalScale *bool `pulumi:"allowVerticalScale"`
	// Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
	Enabled *bool `pulumi:"enabled"`
	// Git repo configuration for the cluster.
	Git *ConfigManagementGitConfig `pulumi:"git"`
	// The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
	MetricsGcpServiceAccountEmail *string `pulumi:"metricsGcpServiceAccountEmail"`
	// OCI repo configuration for the cluster
	Oci *ConfigManagementOciConfig `pulumi:"oci"`
	// Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
	PreventDrift *bool `pulumi:"preventDrift"`
	// Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
	SourceFormat *string `pulumi:"sourceFormat"`
}

// ConfigManagementConfigSyncInput is an input type that accepts ConfigManagementConfigSyncArgs and ConfigManagementConfigSyncOutput values.
// You can construct a concrete instance of `ConfigManagementConfigSyncInput` via:
//
//	ConfigManagementConfigSyncArgs{...}
type ConfigManagementConfigSyncInput interface {
	pulumi.Input

	ToConfigManagementConfigSyncOutput() ConfigManagementConfigSyncOutput
	ToConfigManagementConfigSyncOutputWithContext(context.Context) ConfigManagementConfigSyncOutput
}

// Configuration for Config Sync
type ConfigManagementConfigSyncArgs struct {
	// Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
	//
	// Deprecated: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
	AllowVerticalScale pulumi.BoolPtrInput `pulumi:"allowVerticalScale"`
	// Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Git repo configuration for the cluster.
	Git ConfigManagementGitConfigPtrInput `pulumi:"git"`
	// The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
	MetricsGcpServiceAccountEmail pulumi.StringPtrInput `pulumi:"metricsGcpServiceAccountEmail"`
	// OCI repo configuration for the cluster
	Oci ConfigManagementOciConfigPtrInput `pulumi:"oci"`
	// Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
	PreventDrift pulumi.BoolPtrInput `pulumi:"preventDrift"`
	// Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
	SourceFormat pulumi.StringPtrInput `pulumi:"sourceFormat"`
}

func (ConfigManagementConfigSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementConfigSync)(nil)).Elem()
}

func (i ConfigManagementConfigSyncArgs) ToConfigManagementConfigSyncOutput() ConfigManagementConfigSyncOutput {
	return i.ToConfigManagementConfigSyncOutputWithContext(context.Background())
}

func (i ConfigManagementConfigSyncArgs) ToConfigManagementConfigSyncOutputWithContext(ctx context.Context) ConfigManagementConfigSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementConfigSyncOutput)
}

func (i ConfigManagementConfigSyncArgs) ToConfigManagementConfigSyncPtrOutput() ConfigManagementConfigSyncPtrOutput {
	return i.ToConfigManagementConfigSyncPtrOutputWithContext(context.Background())
}

func (i ConfigManagementConfigSyncArgs) ToConfigManagementConfigSyncPtrOutputWithContext(ctx context.Context) ConfigManagementConfigSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementConfigSyncOutput).ToConfigManagementConfigSyncPtrOutputWithContext(ctx)
}

// ConfigManagementConfigSyncPtrInput is an input type that accepts ConfigManagementConfigSyncArgs, ConfigManagementConfigSyncPtr and ConfigManagementConfigSyncPtrOutput values.
// You can construct a concrete instance of `ConfigManagementConfigSyncPtrInput` via:
//
//	        ConfigManagementConfigSyncArgs{...}
//
//	or:
//
//	        nil
type ConfigManagementConfigSyncPtrInput interface {
	pulumi.Input

	ToConfigManagementConfigSyncPtrOutput() ConfigManagementConfigSyncPtrOutput
	ToConfigManagementConfigSyncPtrOutputWithContext(context.Context) ConfigManagementConfigSyncPtrOutput
}

type configManagementConfigSyncPtrType ConfigManagementConfigSyncArgs

func ConfigManagementConfigSyncPtr(v *ConfigManagementConfigSyncArgs) ConfigManagementConfigSyncPtrInput {
	return (*configManagementConfigSyncPtrType)(v)
}

func (*configManagementConfigSyncPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementConfigSync)(nil)).Elem()
}

func (i *configManagementConfigSyncPtrType) ToConfigManagementConfigSyncPtrOutput() ConfigManagementConfigSyncPtrOutput {
	return i.ToConfigManagementConfigSyncPtrOutputWithContext(context.Background())
}

func (i *configManagementConfigSyncPtrType) ToConfigManagementConfigSyncPtrOutputWithContext(ctx context.Context) ConfigManagementConfigSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementConfigSyncPtrOutput)
}

// Configuration for Config Sync
type ConfigManagementConfigSyncOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementConfigSync)(nil)).Elem()
}

func (o ConfigManagementConfigSyncOutput) ToConfigManagementConfigSyncOutput() ConfigManagementConfigSyncOutput {
	return o
}

func (o ConfigManagementConfigSyncOutput) ToConfigManagementConfigSyncOutputWithContext(ctx context.Context) ConfigManagementConfigSyncOutput {
	return o
}

func (o ConfigManagementConfigSyncOutput) ToConfigManagementConfigSyncPtrOutput() ConfigManagementConfigSyncPtrOutput {
	return o.ToConfigManagementConfigSyncPtrOutputWithContext(context.Background())
}

func (o ConfigManagementConfigSyncOutput) ToConfigManagementConfigSyncPtrOutputWithContext(ctx context.Context) ConfigManagementConfigSyncPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigManagementConfigSync) *ConfigManagementConfigSync {
		return &v
	}).(ConfigManagementConfigSyncPtrOutput)
}

// Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
//
// Deprecated: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
func (o ConfigManagementConfigSyncOutput) AllowVerticalScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementConfigSync) *bool { return v.AllowVerticalScale }).(pulumi.BoolPtrOutput)
}

// Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
func (o ConfigManagementConfigSyncOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementConfigSync) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Git repo configuration for the cluster.
func (o ConfigManagementConfigSyncOutput) Git() ConfigManagementGitConfigPtrOutput {
	return o.ApplyT(func(v ConfigManagementConfigSync) *ConfigManagementGitConfig { return v.Git }).(ConfigManagementGitConfigPtrOutput)
}

// The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
func (o ConfigManagementConfigSyncOutput) MetricsGcpServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementConfigSync) *string { return v.MetricsGcpServiceAccountEmail }).(pulumi.StringPtrOutput)
}

// OCI repo configuration for the cluster
func (o ConfigManagementConfigSyncOutput) Oci() ConfigManagementOciConfigPtrOutput {
	return o.ApplyT(func(v ConfigManagementConfigSync) *ConfigManagementOciConfig { return v.Oci }).(ConfigManagementOciConfigPtrOutput)
}

// Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
func (o ConfigManagementConfigSyncOutput) PreventDrift() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementConfigSync) *bool { return v.PreventDrift }).(pulumi.BoolPtrOutput)
}

// Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
func (o ConfigManagementConfigSyncOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementConfigSync) *string { return v.SourceFormat }).(pulumi.StringPtrOutput)
}

type ConfigManagementConfigSyncPtrOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementConfigSync)(nil)).Elem()
}

func (o ConfigManagementConfigSyncPtrOutput) ToConfigManagementConfigSyncPtrOutput() ConfigManagementConfigSyncPtrOutput {
	return o
}

func (o ConfigManagementConfigSyncPtrOutput) ToConfigManagementConfigSyncPtrOutputWithContext(ctx context.Context) ConfigManagementConfigSyncPtrOutput {
	return o
}

func (o ConfigManagementConfigSyncPtrOutput) Elem() ConfigManagementConfigSyncOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) ConfigManagementConfigSync {
		if v != nil {
			return *v
		}
		var ret ConfigManagementConfigSync
		return ret
	}).(ConfigManagementConfigSyncOutput)
}

// Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
//
// Deprecated: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
func (o ConfigManagementConfigSyncPtrOutput) AllowVerticalScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) *bool {
		if v == nil {
			return nil
		}
		return v.AllowVerticalScale
	}).(pulumi.BoolPtrOutput)
}

// Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
func (o ConfigManagementConfigSyncPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Git repo configuration for the cluster.
func (o ConfigManagementConfigSyncPtrOutput) Git() ConfigManagementGitConfigPtrOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) *ConfigManagementGitConfig {
		if v == nil {
			return nil
		}
		return v.Git
	}).(ConfigManagementGitConfigPtrOutput)
}

// The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
func (o ConfigManagementConfigSyncPtrOutput) MetricsGcpServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) *string {
		if v == nil {
			return nil
		}
		return v.MetricsGcpServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// OCI repo configuration for the cluster
func (o ConfigManagementConfigSyncPtrOutput) Oci() ConfigManagementOciConfigPtrOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) *ConfigManagementOciConfig {
		if v == nil {
			return nil
		}
		return v.Oci
	}).(ConfigManagementOciConfigPtrOutput)
}

// Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
func (o ConfigManagementConfigSyncPtrOutput) PreventDrift() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) *bool {
		if v == nil {
			return nil
		}
		return v.PreventDrift
	}).(pulumi.BoolPtrOutput)
}

// Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
func (o ConfigManagementConfigSyncPtrOutput) SourceFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementConfigSync) *string {
		if v == nil {
			return nil
		}
		return v.SourceFormat
	}).(pulumi.StringPtrOutput)
}

// The state of ConfigSync's deployment on a cluster
type ConfigManagementConfigSyncDeploymentStateResponse struct {
	// Deployment state of admission-webhook
	AdmissionWebhook string `pulumi:"admissionWebhook"`
	// Deployment state of the git-sync pod
	GitSync string `pulumi:"gitSync"`
	// Deployment state of the importer pod
	Importer string `pulumi:"importer"`
	// Deployment state of the monitor pod
	Monitor string `pulumi:"monitor"`
	// Deployment state of reconciler-manager pod
	ReconcilerManager string `pulumi:"reconcilerManager"`
	// Deployment state of root-reconciler
	RootReconciler string `pulumi:"rootReconciler"`
	// Deployment state of the syncer pod
	Syncer string `pulumi:"syncer"`
}

// The state of ConfigSync's deployment on a cluster
type ConfigManagementConfigSyncDeploymentStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncDeploymentStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementConfigSyncDeploymentStateResponse)(nil)).Elem()
}

func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) ToConfigManagementConfigSyncDeploymentStateResponseOutput() ConfigManagementConfigSyncDeploymentStateResponseOutput {
	return o
}

func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) ToConfigManagementConfigSyncDeploymentStateResponseOutputWithContext(ctx context.Context) ConfigManagementConfigSyncDeploymentStateResponseOutput {
	return o
}

// Deployment state of admission-webhook
func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) AdmissionWebhook() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncDeploymentStateResponse) string { return v.AdmissionWebhook }).(pulumi.StringOutput)
}

// Deployment state of the git-sync pod
func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) GitSync() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncDeploymentStateResponse) string { return v.GitSync }).(pulumi.StringOutput)
}

// Deployment state of the importer pod
func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) Importer() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncDeploymentStateResponse) string { return v.Importer }).(pulumi.StringOutput)
}

// Deployment state of the monitor pod
func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncDeploymentStateResponse) string { return v.Monitor }).(pulumi.StringOutput)
}

// Deployment state of reconciler-manager pod
func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) ReconcilerManager() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncDeploymentStateResponse) string { return v.ReconcilerManager }).(pulumi.StringOutput)
}

// Deployment state of root-reconciler
func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) RootReconciler() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncDeploymentStateResponse) string { return v.RootReconciler }).(pulumi.StringOutput)
}

// Deployment state of the syncer pod
func (o ConfigManagementConfigSyncDeploymentStateResponseOutput) Syncer() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncDeploymentStateResponse) string { return v.Syncer }).(pulumi.StringOutput)
}

// Errors pertaining to the installation of Config Sync
type ConfigManagementConfigSyncErrorResponse struct {
	// A string representing the user facing error message
	ErrorMessage string `pulumi:"errorMessage"`
}

// Errors pertaining to the installation of Config Sync
type ConfigManagementConfigSyncErrorResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementConfigSyncErrorResponse)(nil)).Elem()
}

func (o ConfigManagementConfigSyncErrorResponseOutput) ToConfigManagementConfigSyncErrorResponseOutput() ConfigManagementConfigSyncErrorResponseOutput {
	return o
}

func (o ConfigManagementConfigSyncErrorResponseOutput) ToConfigManagementConfigSyncErrorResponseOutputWithContext(ctx context.Context) ConfigManagementConfigSyncErrorResponseOutput {
	return o
}

// A string representing the user facing error message
func (o ConfigManagementConfigSyncErrorResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncErrorResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

type ConfigManagementConfigSyncErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigManagementConfigSyncErrorResponse)(nil)).Elem()
}

func (o ConfigManagementConfigSyncErrorResponseArrayOutput) ToConfigManagementConfigSyncErrorResponseArrayOutput() ConfigManagementConfigSyncErrorResponseArrayOutput {
	return o
}

func (o ConfigManagementConfigSyncErrorResponseArrayOutput) ToConfigManagementConfigSyncErrorResponseArrayOutputWithContext(ctx context.Context) ConfigManagementConfigSyncErrorResponseArrayOutput {
	return o
}

func (o ConfigManagementConfigSyncErrorResponseArrayOutput) Index(i pulumi.IntInput) ConfigManagementConfigSyncErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigManagementConfigSyncErrorResponse {
		return vs[0].([]ConfigManagementConfigSyncErrorResponse)[vs[1].(int)]
	}).(ConfigManagementConfigSyncErrorResponseOutput)
}

// Configuration for Config Sync
type ConfigManagementConfigSyncResponse struct {
	// Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
	//
	// Deprecated: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
	AllowVerticalScale bool `pulumi:"allowVerticalScale"`
	// Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
	Enabled bool `pulumi:"enabled"`
	// Git repo configuration for the cluster.
	Git ConfigManagementGitConfigResponse `pulumi:"git"`
	// The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
	MetricsGcpServiceAccountEmail string `pulumi:"metricsGcpServiceAccountEmail"`
	// OCI repo configuration for the cluster
	Oci ConfigManagementOciConfigResponse `pulumi:"oci"`
	// Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
	PreventDrift bool `pulumi:"preventDrift"`
	// Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
	SourceFormat string `pulumi:"sourceFormat"`
}

// Configuration for Config Sync
type ConfigManagementConfigSyncResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementConfigSyncResponse)(nil)).Elem()
}

func (o ConfigManagementConfigSyncResponseOutput) ToConfigManagementConfigSyncResponseOutput() ConfigManagementConfigSyncResponseOutput {
	return o
}

func (o ConfigManagementConfigSyncResponseOutput) ToConfigManagementConfigSyncResponseOutputWithContext(ctx context.Context) ConfigManagementConfigSyncResponseOutput {
	return o
}

// Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
//
// Deprecated: Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
func (o ConfigManagementConfigSyncResponseOutput) AllowVerticalScale() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncResponse) bool { return v.AllowVerticalScale }).(pulumi.BoolOutput)
}

// Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
func (o ConfigManagementConfigSyncResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Git repo configuration for the cluster.
func (o ConfigManagementConfigSyncResponseOutput) Git() ConfigManagementGitConfigResponseOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncResponse) ConfigManagementGitConfigResponse { return v.Git }).(ConfigManagementGitConfigResponseOutput)
}

// The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA. This field is required when automatic Feature management is enabled.
func (o ConfigManagementConfigSyncResponseOutput) MetricsGcpServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncResponse) string { return v.MetricsGcpServiceAccountEmail }).(pulumi.StringOutput)
}

// OCI repo configuration for the cluster
func (o ConfigManagementConfigSyncResponseOutput) Oci() ConfigManagementOciConfigResponseOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncResponse) ConfigManagementOciConfigResponse { return v.Oci }).(ConfigManagementOciConfigResponseOutput)
}

// Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.
func (o ConfigManagementConfigSyncResponseOutput) PreventDrift() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncResponse) bool { return v.PreventDrift }).(pulumi.BoolOutput)
}

// Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.
func (o ConfigManagementConfigSyncResponseOutput) SourceFormat() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncResponse) string { return v.SourceFormat }).(pulumi.StringOutput)
}

// State information for ConfigSync
type ConfigManagementConfigSyncStateResponse struct {
	// Information about the deployment of ConfigSync, including the version of the various Pods deployed
	DeploymentState ConfigManagementConfigSyncDeploymentStateResponse `pulumi:"deploymentState"`
	// Errors pertaining to the installation of Config Sync.
	Errors []ConfigManagementConfigSyncErrorResponse `pulumi:"errors"`
	// The state of ConfigSync's process to sync configs to a cluster
	SyncState ConfigManagementSyncStateResponse `pulumi:"syncState"`
	// The version of ConfigSync deployed
	Version ConfigManagementConfigSyncVersionResponse `pulumi:"version"`
}

// State information for ConfigSync
type ConfigManagementConfigSyncStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementConfigSyncStateResponse)(nil)).Elem()
}

func (o ConfigManagementConfigSyncStateResponseOutput) ToConfigManagementConfigSyncStateResponseOutput() ConfigManagementConfigSyncStateResponseOutput {
	return o
}

func (o ConfigManagementConfigSyncStateResponseOutput) ToConfigManagementConfigSyncStateResponseOutputWithContext(ctx context.Context) ConfigManagementConfigSyncStateResponseOutput {
	return o
}

// Information about the deployment of ConfigSync, including the version of the various Pods deployed
func (o ConfigManagementConfigSyncStateResponseOutput) DeploymentState() ConfigManagementConfigSyncDeploymentStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncStateResponse) ConfigManagementConfigSyncDeploymentStateResponse {
		return v.DeploymentState
	}).(ConfigManagementConfigSyncDeploymentStateResponseOutput)
}

// Errors pertaining to the installation of Config Sync.
func (o ConfigManagementConfigSyncStateResponseOutput) Errors() ConfigManagementConfigSyncErrorResponseArrayOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncStateResponse) []ConfigManagementConfigSyncErrorResponse {
		return v.Errors
	}).(ConfigManagementConfigSyncErrorResponseArrayOutput)
}

// The state of ConfigSync's process to sync configs to a cluster
func (o ConfigManagementConfigSyncStateResponseOutput) SyncState() ConfigManagementSyncStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncStateResponse) ConfigManagementSyncStateResponse { return v.SyncState }).(ConfigManagementSyncStateResponseOutput)
}

// The version of ConfigSync deployed
func (o ConfigManagementConfigSyncStateResponseOutput) Version() ConfigManagementConfigSyncVersionResponseOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncStateResponse) ConfigManagementConfigSyncVersionResponse {
		return v.Version
	}).(ConfigManagementConfigSyncVersionResponseOutput)
}

// Specific versioning information pertaining to ConfigSync's Pods
type ConfigManagementConfigSyncVersionResponse struct {
	// Version of the deployed admission_webhook pod
	AdmissionWebhook string `pulumi:"admissionWebhook"`
	// Version of the deployed git-sync pod
	GitSync string `pulumi:"gitSync"`
	// Version of the deployed importer pod
	Importer string `pulumi:"importer"`
	// Version of the deployed monitor pod
	Monitor string `pulumi:"monitor"`
	// Version of the deployed reconciler-manager pod
	ReconcilerManager string `pulumi:"reconcilerManager"`
	// Version of the deployed reconciler container in root-reconciler pod
	RootReconciler string `pulumi:"rootReconciler"`
	// Version of the deployed syncer pod
	Syncer string `pulumi:"syncer"`
}

// Specific versioning information pertaining to ConfigSync's Pods
type ConfigManagementConfigSyncVersionResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementConfigSyncVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementConfigSyncVersionResponse)(nil)).Elem()
}

func (o ConfigManagementConfigSyncVersionResponseOutput) ToConfigManagementConfigSyncVersionResponseOutput() ConfigManagementConfigSyncVersionResponseOutput {
	return o
}

func (o ConfigManagementConfigSyncVersionResponseOutput) ToConfigManagementConfigSyncVersionResponseOutputWithContext(ctx context.Context) ConfigManagementConfigSyncVersionResponseOutput {
	return o
}

// Version of the deployed admission_webhook pod
func (o ConfigManagementConfigSyncVersionResponseOutput) AdmissionWebhook() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncVersionResponse) string { return v.AdmissionWebhook }).(pulumi.StringOutput)
}

// Version of the deployed git-sync pod
func (o ConfigManagementConfigSyncVersionResponseOutput) GitSync() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncVersionResponse) string { return v.GitSync }).(pulumi.StringOutput)
}

// Version of the deployed importer pod
func (o ConfigManagementConfigSyncVersionResponseOutput) Importer() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncVersionResponse) string { return v.Importer }).(pulumi.StringOutput)
}

// Version of the deployed monitor pod
func (o ConfigManagementConfigSyncVersionResponseOutput) Monitor() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncVersionResponse) string { return v.Monitor }).(pulumi.StringOutput)
}

// Version of the deployed reconciler-manager pod
func (o ConfigManagementConfigSyncVersionResponseOutput) ReconcilerManager() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncVersionResponse) string { return v.ReconcilerManager }).(pulumi.StringOutput)
}

// Version of the deployed reconciler container in root-reconciler pod
func (o ConfigManagementConfigSyncVersionResponseOutput) RootReconciler() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncVersionResponse) string { return v.RootReconciler }).(pulumi.StringOutput)
}

// Version of the deployed syncer pod
func (o ConfigManagementConfigSyncVersionResponseOutput) Syncer() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementConfigSyncVersionResponse) string { return v.Syncer }).(pulumi.StringOutput)
}

// Model for a config file in the git repo with an associated Sync error
type ConfigManagementErrorResourceResponse struct {
	// Group/version/kind of the resource that is causing an error
	ResourceGvk ConfigManagementGroupVersionKindResponse `pulumi:"resourceGvk"`
	// Metadata name of the resource that is causing an error
	ResourceName string `pulumi:"resourceName"`
	// Namespace of the resource that is causing an error
	ResourceNamespace string `pulumi:"resourceNamespace"`
	// Path in the git repo of the erroneous config
	SourcePath string `pulumi:"sourcePath"`
}

// Model for a config file in the git repo with an associated Sync error
type ConfigManagementErrorResourceResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementErrorResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementErrorResourceResponse)(nil)).Elem()
}

func (o ConfigManagementErrorResourceResponseOutput) ToConfigManagementErrorResourceResponseOutput() ConfigManagementErrorResourceResponseOutput {
	return o
}

func (o ConfigManagementErrorResourceResponseOutput) ToConfigManagementErrorResourceResponseOutputWithContext(ctx context.Context) ConfigManagementErrorResourceResponseOutput {
	return o
}

// Group/version/kind of the resource that is causing an error
func (o ConfigManagementErrorResourceResponseOutput) ResourceGvk() ConfigManagementGroupVersionKindResponseOutput {
	return o.ApplyT(func(v ConfigManagementErrorResourceResponse) ConfigManagementGroupVersionKindResponse {
		return v.ResourceGvk
	}).(ConfigManagementGroupVersionKindResponseOutput)
}

// Metadata name of the resource that is causing an error
func (o ConfigManagementErrorResourceResponseOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementErrorResourceResponse) string { return v.ResourceName }).(pulumi.StringOutput)
}

// Namespace of the resource that is causing an error
func (o ConfigManagementErrorResourceResponseOutput) ResourceNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementErrorResourceResponse) string { return v.ResourceNamespace }).(pulumi.StringOutput)
}

// Path in the git repo of the erroneous config
func (o ConfigManagementErrorResourceResponseOutput) SourcePath() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementErrorResourceResponse) string { return v.SourcePath }).(pulumi.StringOutput)
}

type ConfigManagementErrorResourceResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigManagementErrorResourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigManagementErrorResourceResponse)(nil)).Elem()
}

func (o ConfigManagementErrorResourceResponseArrayOutput) ToConfigManagementErrorResourceResponseArrayOutput() ConfigManagementErrorResourceResponseArrayOutput {
	return o
}

func (o ConfigManagementErrorResourceResponseArrayOutput) ToConfigManagementErrorResourceResponseArrayOutputWithContext(ctx context.Context) ConfigManagementErrorResourceResponseArrayOutput {
	return o
}

func (o ConfigManagementErrorResourceResponseArrayOutput) Index(i pulumi.IntInput) ConfigManagementErrorResourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigManagementErrorResourceResponse {
		return vs[0].([]ConfigManagementErrorResourceResponse)[vs[1].(int)]
	}).(ConfigManagementErrorResourceResponseOutput)
}

// State of Policy Controller installation.
type ConfigManagementGatekeeperDeploymentStateResponse struct {
	// Status of gatekeeper-audit deployment.
	GatekeeperAudit string `pulumi:"gatekeeperAudit"`
	// Status of gatekeeper-controller-manager pod.
	GatekeeperControllerManagerState string `pulumi:"gatekeeperControllerManagerState"`
	// Status of the pod serving the mutation webhook.
	GatekeeperMutation string `pulumi:"gatekeeperMutation"`
}

// State of Policy Controller installation.
type ConfigManagementGatekeeperDeploymentStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementGatekeeperDeploymentStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementGatekeeperDeploymentStateResponse)(nil)).Elem()
}

func (o ConfigManagementGatekeeperDeploymentStateResponseOutput) ToConfigManagementGatekeeperDeploymentStateResponseOutput() ConfigManagementGatekeeperDeploymentStateResponseOutput {
	return o
}

func (o ConfigManagementGatekeeperDeploymentStateResponseOutput) ToConfigManagementGatekeeperDeploymentStateResponseOutputWithContext(ctx context.Context) ConfigManagementGatekeeperDeploymentStateResponseOutput {
	return o
}

// Status of gatekeeper-audit deployment.
func (o ConfigManagementGatekeeperDeploymentStateResponseOutput) GatekeeperAudit() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGatekeeperDeploymentStateResponse) string { return v.GatekeeperAudit }).(pulumi.StringOutput)
}

// Status of gatekeeper-controller-manager pod.
func (o ConfigManagementGatekeeperDeploymentStateResponseOutput) GatekeeperControllerManagerState() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGatekeeperDeploymentStateResponse) string {
		return v.GatekeeperControllerManagerState
	}).(pulumi.StringOutput)
}

// Status of the pod serving the mutation webhook.
func (o ConfigManagementGatekeeperDeploymentStateResponseOutput) GatekeeperMutation() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGatekeeperDeploymentStateResponse) string { return v.GatekeeperMutation }).(pulumi.StringOutput)
}

// Git repo configuration for a single cluster.
type ConfigManagementGitConfig struct {
	// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
	GcpServiceAccountEmail *string `pulumi:"gcpServiceAccountEmail"`
	// URL for the HTTPS proxy to be used when communicating with the Git repo.
	HttpsProxy *string `pulumi:"httpsProxy"`
	// The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
	PolicyDir *string `pulumi:"policyDir"`
	// Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
	SecretType *string `pulumi:"secretType"`
	// The branch of the repository to sync from. Default: master.
	SyncBranch *string `pulumi:"syncBranch"`
	// The URL of the Git repository to use as the source of truth.
	SyncRepo *string `pulumi:"syncRepo"`
	// Git revision (tag or hash) to check out. Default HEAD.
	SyncRev *string `pulumi:"syncRev"`
	// Period in seconds between consecutive syncs. Default: 15.
	SyncWaitSecs *string `pulumi:"syncWaitSecs"`
}

// ConfigManagementGitConfigInput is an input type that accepts ConfigManagementGitConfigArgs and ConfigManagementGitConfigOutput values.
// You can construct a concrete instance of `ConfigManagementGitConfigInput` via:
//
//	ConfigManagementGitConfigArgs{...}
type ConfigManagementGitConfigInput interface {
	pulumi.Input

	ToConfigManagementGitConfigOutput() ConfigManagementGitConfigOutput
	ToConfigManagementGitConfigOutputWithContext(context.Context) ConfigManagementGitConfigOutput
}

// Git repo configuration for a single cluster.
type ConfigManagementGitConfigArgs struct {
	// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
	GcpServiceAccountEmail pulumi.StringPtrInput `pulumi:"gcpServiceAccountEmail"`
	// URL for the HTTPS proxy to be used when communicating with the Git repo.
	HttpsProxy pulumi.StringPtrInput `pulumi:"httpsProxy"`
	// The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
	PolicyDir pulumi.StringPtrInput `pulumi:"policyDir"`
	// Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
	SecretType pulumi.StringPtrInput `pulumi:"secretType"`
	// The branch of the repository to sync from. Default: master.
	SyncBranch pulumi.StringPtrInput `pulumi:"syncBranch"`
	// The URL of the Git repository to use as the source of truth.
	SyncRepo pulumi.StringPtrInput `pulumi:"syncRepo"`
	// Git revision (tag or hash) to check out. Default HEAD.
	SyncRev pulumi.StringPtrInput `pulumi:"syncRev"`
	// Period in seconds between consecutive syncs. Default: 15.
	SyncWaitSecs pulumi.StringPtrInput `pulumi:"syncWaitSecs"`
}

func (ConfigManagementGitConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementGitConfig)(nil)).Elem()
}

func (i ConfigManagementGitConfigArgs) ToConfigManagementGitConfigOutput() ConfigManagementGitConfigOutput {
	return i.ToConfigManagementGitConfigOutputWithContext(context.Background())
}

func (i ConfigManagementGitConfigArgs) ToConfigManagementGitConfigOutputWithContext(ctx context.Context) ConfigManagementGitConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementGitConfigOutput)
}

func (i ConfigManagementGitConfigArgs) ToConfigManagementGitConfigPtrOutput() ConfigManagementGitConfigPtrOutput {
	return i.ToConfigManagementGitConfigPtrOutputWithContext(context.Background())
}

func (i ConfigManagementGitConfigArgs) ToConfigManagementGitConfigPtrOutputWithContext(ctx context.Context) ConfigManagementGitConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementGitConfigOutput).ToConfigManagementGitConfigPtrOutputWithContext(ctx)
}

// ConfigManagementGitConfigPtrInput is an input type that accepts ConfigManagementGitConfigArgs, ConfigManagementGitConfigPtr and ConfigManagementGitConfigPtrOutput values.
// You can construct a concrete instance of `ConfigManagementGitConfigPtrInput` via:
//
//	        ConfigManagementGitConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigManagementGitConfigPtrInput interface {
	pulumi.Input

	ToConfigManagementGitConfigPtrOutput() ConfigManagementGitConfigPtrOutput
	ToConfigManagementGitConfigPtrOutputWithContext(context.Context) ConfigManagementGitConfigPtrOutput
}

type configManagementGitConfigPtrType ConfigManagementGitConfigArgs

func ConfigManagementGitConfigPtr(v *ConfigManagementGitConfigArgs) ConfigManagementGitConfigPtrInput {
	return (*configManagementGitConfigPtrType)(v)
}

func (*configManagementGitConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementGitConfig)(nil)).Elem()
}

func (i *configManagementGitConfigPtrType) ToConfigManagementGitConfigPtrOutput() ConfigManagementGitConfigPtrOutput {
	return i.ToConfigManagementGitConfigPtrOutputWithContext(context.Background())
}

func (i *configManagementGitConfigPtrType) ToConfigManagementGitConfigPtrOutputWithContext(ctx context.Context) ConfigManagementGitConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementGitConfigPtrOutput)
}

// Git repo configuration for a single cluster.
type ConfigManagementGitConfigOutput struct{ *pulumi.OutputState }

func (ConfigManagementGitConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementGitConfig)(nil)).Elem()
}

func (o ConfigManagementGitConfigOutput) ToConfigManagementGitConfigOutput() ConfigManagementGitConfigOutput {
	return o
}

func (o ConfigManagementGitConfigOutput) ToConfigManagementGitConfigOutputWithContext(ctx context.Context) ConfigManagementGitConfigOutput {
	return o
}

func (o ConfigManagementGitConfigOutput) ToConfigManagementGitConfigPtrOutput() ConfigManagementGitConfigPtrOutput {
	return o.ToConfigManagementGitConfigPtrOutputWithContext(context.Background())
}

func (o ConfigManagementGitConfigOutput) ToConfigManagementGitConfigPtrOutputWithContext(ctx context.Context) ConfigManagementGitConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigManagementGitConfig) *ConfigManagementGitConfig {
		return &v
	}).(ConfigManagementGitConfigPtrOutput)
}

// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
func (o ConfigManagementGitConfigOutput) GcpServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.GcpServiceAccountEmail }).(pulumi.StringPtrOutput)
}

// URL for the HTTPS proxy to be used when communicating with the Git repo.
func (o ConfigManagementGitConfigOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.HttpsProxy }).(pulumi.StringPtrOutput)
}

// The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
func (o ConfigManagementGitConfigOutput) PolicyDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.PolicyDir }).(pulumi.StringPtrOutput)
}

// Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
func (o ConfigManagementGitConfigOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.SecretType }).(pulumi.StringPtrOutput)
}

// The branch of the repository to sync from. Default: master.
func (o ConfigManagementGitConfigOutput) SyncBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.SyncBranch }).(pulumi.StringPtrOutput)
}

// The URL of the Git repository to use as the source of truth.
func (o ConfigManagementGitConfigOutput) SyncRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.SyncRepo }).(pulumi.StringPtrOutput)
}

// Git revision (tag or hash) to check out. Default HEAD.
func (o ConfigManagementGitConfigOutput) SyncRev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.SyncRev }).(pulumi.StringPtrOutput)
}

// Period in seconds between consecutive syncs. Default: 15.
func (o ConfigManagementGitConfigOutput) SyncWaitSecs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementGitConfig) *string { return v.SyncWaitSecs }).(pulumi.StringPtrOutput)
}

type ConfigManagementGitConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigManagementGitConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementGitConfig)(nil)).Elem()
}

func (o ConfigManagementGitConfigPtrOutput) ToConfigManagementGitConfigPtrOutput() ConfigManagementGitConfigPtrOutput {
	return o
}

func (o ConfigManagementGitConfigPtrOutput) ToConfigManagementGitConfigPtrOutputWithContext(ctx context.Context) ConfigManagementGitConfigPtrOutput {
	return o
}

func (o ConfigManagementGitConfigPtrOutput) Elem() ConfigManagementGitConfigOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) ConfigManagementGitConfig {
		if v != nil {
			return *v
		}
		var ret ConfigManagementGitConfig
		return ret
	}).(ConfigManagementGitConfigOutput)
}

// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
func (o ConfigManagementGitConfigPtrOutput) GcpServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.GcpServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// URL for the HTTPS proxy to be used when communicating with the Git repo.
func (o ConfigManagementGitConfigPtrOutput) HttpsProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.HttpsProxy
	}).(pulumi.StringPtrOutput)
}

// The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
func (o ConfigManagementGitConfigPtrOutput) PolicyDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.PolicyDir
	}).(pulumi.StringPtrOutput)
}

// Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
func (o ConfigManagementGitConfigPtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.SecretType
	}).(pulumi.StringPtrOutput)
}

// The branch of the repository to sync from. Default: master.
func (o ConfigManagementGitConfigPtrOutput) SyncBranch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.SyncBranch
	}).(pulumi.StringPtrOutput)
}

// The URL of the Git repository to use as the source of truth.
func (o ConfigManagementGitConfigPtrOutput) SyncRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.SyncRepo
	}).(pulumi.StringPtrOutput)
}

// Git revision (tag or hash) to check out. Default HEAD.
func (o ConfigManagementGitConfigPtrOutput) SyncRev() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.SyncRev
	}).(pulumi.StringPtrOutput)
}

// Period in seconds between consecutive syncs. Default: 15.
func (o ConfigManagementGitConfigPtrOutput) SyncWaitSecs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementGitConfig) *string {
		if v == nil {
			return nil
		}
		return v.SyncWaitSecs
	}).(pulumi.StringPtrOutput)
}

// Git repo configuration for a single cluster.
type ConfigManagementGitConfigResponse struct {
	// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
	GcpServiceAccountEmail string `pulumi:"gcpServiceAccountEmail"`
	// URL for the HTTPS proxy to be used when communicating with the Git repo.
	HttpsProxy string `pulumi:"httpsProxy"`
	// The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
	PolicyDir string `pulumi:"policyDir"`
	// Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
	SecretType string `pulumi:"secretType"`
	// The branch of the repository to sync from. Default: master.
	SyncBranch string `pulumi:"syncBranch"`
	// The URL of the Git repository to use as the source of truth.
	SyncRepo string `pulumi:"syncRepo"`
	// Git revision (tag or hash) to check out. Default HEAD.
	SyncRev string `pulumi:"syncRev"`
	// Period in seconds between consecutive syncs. Default: 15.
	SyncWaitSecs string `pulumi:"syncWaitSecs"`
}

// Git repo configuration for a single cluster.
type ConfigManagementGitConfigResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementGitConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementGitConfigResponse)(nil)).Elem()
}

func (o ConfigManagementGitConfigResponseOutput) ToConfigManagementGitConfigResponseOutput() ConfigManagementGitConfigResponseOutput {
	return o
}

func (o ConfigManagementGitConfigResponseOutput) ToConfigManagementGitConfigResponseOutputWithContext(ctx context.Context) ConfigManagementGitConfigResponseOutput {
	return o
}

// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
func (o ConfigManagementGitConfigResponseOutput) GcpServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.GcpServiceAccountEmail }).(pulumi.StringOutput)
}

// URL for the HTTPS proxy to be used when communicating with the Git repo.
func (o ConfigManagementGitConfigResponseOutput) HttpsProxy() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.HttpsProxy }).(pulumi.StringOutput)
}

// The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
func (o ConfigManagementGitConfigResponseOutput) PolicyDir() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.PolicyDir }).(pulumi.StringOutput)
}

// Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
func (o ConfigManagementGitConfigResponseOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.SecretType }).(pulumi.StringOutput)
}

// The branch of the repository to sync from. Default: master.
func (o ConfigManagementGitConfigResponseOutput) SyncBranch() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.SyncBranch }).(pulumi.StringOutput)
}

// The URL of the Git repository to use as the source of truth.
func (o ConfigManagementGitConfigResponseOutput) SyncRepo() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.SyncRepo }).(pulumi.StringOutput)
}

// Git revision (tag or hash) to check out. Default HEAD.
func (o ConfigManagementGitConfigResponseOutput) SyncRev() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.SyncRev }).(pulumi.StringOutput)
}

// Period in seconds between consecutive syncs. Default: 15.
func (o ConfigManagementGitConfigResponseOutput) SyncWaitSecs() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGitConfigResponse) string { return v.SyncWaitSecs }).(pulumi.StringOutput)
}

// A Kubernetes object's GVK
type ConfigManagementGroupVersionKindResponse struct {
	// Kubernetes Group
	Group string `pulumi:"group"`
	// Kubernetes Kind
	Kind string `pulumi:"kind"`
	// Kubernetes Version
	Version string `pulumi:"version"`
}

// A Kubernetes object's GVK
type ConfigManagementGroupVersionKindResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementGroupVersionKindResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementGroupVersionKindResponse)(nil)).Elem()
}

func (o ConfigManagementGroupVersionKindResponseOutput) ToConfigManagementGroupVersionKindResponseOutput() ConfigManagementGroupVersionKindResponseOutput {
	return o
}

func (o ConfigManagementGroupVersionKindResponseOutput) ToConfigManagementGroupVersionKindResponseOutputWithContext(ctx context.Context) ConfigManagementGroupVersionKindResponseOutput {
	return o
}

// Kubernetes Group
func (o ConfigManagementGroupVersionKindResponseOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGroupVersionKindResponse) string { return v.Group }).(pulumi.StringOutput)
}

// Kubernetes Kind
func (o ConfigManagementGroupVersionKindResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGroupVersionKindResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Kubernetes Version
func (o ConfigManagementGroupVersionKindResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementGroupVersionKindResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Configuration for Hierarchy Controller
type ConfigManagementHierarchyControllerConfig struct {
	// Whether hierarchical resource quota is enabled in this cluster.
	EnableHierarchicalResourceQuota *bool `pulumi:"enableHierarchicalResourceQuota"`
	// Whether pod tree labels are enabled in this cluster.
	EnablePodTreeLabels *bool `pulumi:"enablePodTreeLabels"`
	// Whether Hierarchy Controller is enabled in this cluster.
	Enabled *bool `pulumi:"enabled"`
}

// ConfigManagementHierarchyControllerConfigInput is an input type that accepts ConfigManagementHierarchyControllerConfigArgs and ConfigManagementHierarchyControllerConfigOutput values.
// You can construct a concrete instance of `ConfigManagementHierarchyControllerConfigInput` via:
//
//	ConfigManagementHierarchyControllerConfigArgs{...}
type ConfigManagementHierarchyControllerConfigInput interface {
	pulumi.Input

	ToConfigManagementHierarchyControllerConfigOutput() ConfigManagementHierarchyControllerConfigOutput
	ToConfigManagementHierarchyControllerConfigOutputWithContext(context.Context) ConfigManagementHierarchyControllerConfigOutput
}

// Configuration for Hierarchy Controller
type ConfigManagementHierarchyControllerConfigArgs struct {
	// Whether hierarchical resource quota is enabled in this cluster.
	EnableHierarchicalResourceQuota pulumi.BoolPtrInput `pulumi:"enableHierarchicalResourceQuota"`
	// Whether pod tree labels are enabled in this cluster.
	EnablePodTreeLabels pulumi.BoolPtrInput `pulumi:"enablePodTreeLabels"`
	// Whether Hierarchy Controller is enabled in this cluster.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (ConfigManagementHierarchyControllerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementHierarchyControllerConfig)(nil)).Elem()
}

func (i ConfigManagementHierarchyControllerConfigArgs) ToConfigManagementHierarchyControllerConfigOutput() ConfigManagementHierarchyControllerConfigOutput {
	return i.ToConfigManagementHierarchyControllerConfigOutputWithContext(context.Background())
}

func (i ConfigManagementHierarchyControllerConfigArgs) ToConfigManagementHierarchyControllerConfigOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementHierarchyControllerConfigOutput)
}

func (i ConfigManagementHierarchyControllerConfigArgs) ToConfigManagementHierarchyControllerConfigPtrOutput() ConfigManagementHierarchyControllerConfigPtrOutput {
	return i.ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(context.Background())
}

func (i ConfigManagementHierarchyControllerConfigArgs) ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementHierarchyControllerConfigOutput).ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(ctx)
}

// ConfigManagementHierarchyControllerConfigPtrInput is an input type that accepts ConfigManagementHierarchyControllerConfigArgs, ConfigManagementHierarchyControllerConfigPtr and ConfigManagementHierarchyControllerConfigPtrOutput values.
// You can construct a concrete instance of `ConfigManagementHierarchyControllerConfigPtrInput` via:
//
//	        ConfigManagementHierarchyControllerConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigManagementHierarchyControllerConfigPtrInput interface {
	pulumi.Input

	ToConfigManagementHierarchyControllerConfigPtrOutput() ConfigManagementHierarchyControllerConfigPtrOutput
	ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(context.Context) ConfigManagementHierarchyControllerConfigPtrOutput
}

type configManagementHierarchyControllerConfigPtrType ConfigManagementHierarchyControllerConfigArgs

func ConfigManagementHierarchyControllerConfigPtr(v *ConfigManagementHierarchyControllerConfigArgs) ConfigManagementHierarchyControllerConfigPtrInput {
	return (*configManagementHierarchyControllerConfigPtrType)(v)
}

func (*configManagementHierarchyControllerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementHierarchyControllerConfig)(nil)).Elem()
}

func (i *configManagementHierarchyControllerConfigPtrType) ToConfigManagementHierarchyControllerConfigPtrOutput() ConfigManagementHierarchyControllerConfigPtrOutput {
	return i.ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(context.Background())
}

func (i *configManagementHierarchyControllerConfigPtrType) ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementHierarchyControllerConfigPtrOutput)
}

// Configuration for Hierarchy Controller
type ConfigManagementHierarchyControllerConfigOutput struct{ *pulumi.OutputState }

func (ConfigManagementHierarchyControllerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementHierarchyControllerConfig)(nil)).Elem()
}

func (o ConfigManagementHierarchyControllerConfigOutput) ToConfigManagementHierarchyControllerConfigOutput() ConfigManagementHierarchyControllerConfigOutput {
	return o
}

func (o ConfigManagementHierarchyControllerConfigOutput) ToConfigManagementHierarchyControllerConfigOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerConfigOutput {
	return o
}

func (o ConfigManagementHierarchyControllerConfigOutput) ToConfigManagementHierarchyControllerConfigPtrOutput() ConfigManagementHierarchyControllerConfigPtrOutput {
	return o.ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(context.Background())
}

func (o ConfigManagementHierarchyControllerConfigOutput) ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigManagementHierarchyControllerConfig) *ConfigManagementHierarchyControllerConfig {
		return &v
	}).(ConfigManagementHierarchyControllerConfigPtrOutput)
}

// Whether hierarchical resource quota is enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigOutput) EnableHierarchicalResourceQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerConfig) *bool { return v.EnableHierarchicalResourceQuota }).(pulumi.BoolPtrOutput)
}

// Whether pod tree labels are enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigOutput) EnablePodTreeLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerConfig) *bool { return v.EnablePodTreeLabels }).(pulumi.BoolPtrOutput)
}

// Whether Hierarchy Controller is enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerConfig) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type ConfigManagementHierarchyControllerConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigManagementHierarchyControllerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementHierarchyControllerConfig)(nil)).Elem()
}

func (o ConfigManagementHierarchyControllerConfigPtrOutput) ToConfigManagementHierarchyControllerConfigPtrOutput() ConfigManagementHierarchyControllerConfigPtrOutput {
	return o
}

func (o ConfigManagementHierarchyControllerConfigPtrOutput) ToConfigManagementHierarchyControllerConfigPtrOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerConfigPtrOutput {
	return o
}

func (o ConfigManagementHierarchyControllerConfigPtrOutput) Elem() ConfigManagementHierarchyControllerConfigOutput {
	return o.ApplyT(func(v *ConfigManagementHierarchyControllerConfig) ConfigManagementHierarchyControllerConfig {
		if v != nil {
			return *v
		}
		var ret ConfigManagementHierarchyControllerConfig
		return ret
	}).(ConfigManagementHierarchyControllerConfigOutput)
}

// Whether hierarchical resource quota is enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigPtrOutput) EnableHierarchicalResourceQuota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementHierarchyControllerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHierarchicalResourceQuota
	}).(pulumi.BoolPtrOutput)
}

// Whether pod tree labels are enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigPtrOutput) EnablePodTreeLabels() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementHierarchyControllerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePodTreeLabels
	}).(pulumi.BoolPtrOutput)
}

// Whether Hierarchy Controller is enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementHierarchyControllerConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for Hierarchy Controller
type ConfigManagementHierarchyControllerConfigResponse struct {
	// Whether hierarchical resource quota is enabled in this cluster.
	EnableHierarchicalResourceQuota bool `pulumi:"enableHierarchicalResourceQuota"`
	// Whether pod tree labels are enabled in this cluster.
	EnablePodTreeLabels bool `pulumi:"enablePodTreeLabels"`
	// Whether Hierarchy Controller is enabled in this cluster.
	Enabled bool `pulumi:"enabled"`
}

// Configuration for Hierarchy Controller
type ConfigManagementHierarchyControllerConfigResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementHierarchyControllerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementHierarchyControllerConfigResponse)(nil)).Elem()
}

func (o ConfigManagementHierarchyControllerConfigResponseOutput) ToConfigManagementHierarchyControllerConfigResponseOutput() ConfigManagementHierarchyControllerConfigResponseOutput {
	return o
}

func (o ConfigManagementHierarchyControllerConfigResponseOutput) ToConfigManagementHierarchyControllerConfigResponseOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerConfigResponseOutput {
	return o
}

// Whether hierarchical resource quota is enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigResponseOutput) EnableHierarchicalResourceQuota() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerConfigResponse) bool {
		return v.EnableHierarchicalResourceQuota
	}).(pulumi.BoolOutput)
}

// Whether pod tree labels are enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigResponseOutput) EnablePodTreeLabels() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerConfigResponse) bool { return v.EnablePodTreeLabels }).(pulumi.BoolOutput)
}

// Whether Hierarchy Controller is enabled in this cluster.
func (o ConfigManagementHierarchyControllerConfigResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerConfigResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Deployment state for Hierarchy Controller
type ConfigManagementHierarchyControllerDeploymentStateResponse struct {
	// The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)
	Extension string `pulumi:"extension"`
	// The deployment state for open source HNC (e.g. v0.7.0-hc.0)
	Hnc string `pulumi:"hnc"`
}

// Deployment state for Hierarchy Controller
type ConfigManagementHierarchyControllerDeploymentStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementHierarchyControllerDeploymentStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementHierarchyControllerDeploymentStateResponse)(nil)).Elem()
}

func (o ConfigManagementHierarchyControllerDeploymentStateResponseOutput) ToConfigManagementHierarchyControllerDeploymentStateResponseOutput() ConfigManagementHierarchyControllerDeploymentStateResponseOutput {
	return o
}

func (o ConfigManagementHierarchyControllerDeploymentStateResponseOutput) ToConfigManagementHierarchyControllerDeploymentStateResponseOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerDeploymentStateResponseOutput {
	return o
}

// The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)
func (o ConfigManagementHierarchyControllerDeploymentStateResponseOutput) Extension() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerDeploymentStateResponse) string { return v.Extension }).(pulumi.StringOutput)
}

// The deployment state for open source HNC (e.g. v0.7.0-hc.0)
func (o ConfigManagementHierarchyControllerDeploymentStateResponseOutput) Hnc() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerDeploymentStateResponse) string { return v.Hnc }).(pulumi.StringOutput)
}

// State for Hierarchy Controller
type ConfigManagementHierarchyControllerStateResponse struct {
	// The deployment state for Hierarchy Controller
	State ConfigManagementHierarchyControllerDeploymentStateResponse `pulumi:"state"`
	// The version for Hierarchy Controller
	Version ConfigManagementHierarchyControllerVersionResponse `pulumi:"version"`
}

// State for Hierarchy Controller
type ConfigManagementHierarchyControllerStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementHierarchyControllerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementHierarchyControllerStateResponse)(nil)).Elem()
}

func (o ConfigManagementHierarchyControllerStateResponseOutput) ToConfigManagementHierarchyControllerStateResponseOutput() ConfigManagementHierarchyControllerStateResponseOutput {
	return o
}

func (o ConfigManagementHierarchyControllerStateResponseOutput) ToConfigManagementHierarchyControllerStateResponseOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerStateResponseOutput {
	return o
}

// The deployment state for Hierarchy Controller
func (o ConfigManagementHierarchyControllerStateResponseOutput) State() ConfigManagementHierarchyControllerDeploymentStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerStateResponse) ConfigManagementHierarchyControllerDeploymentStateResponse {
		return v.State
	}).(ConfigManagementHierarchyControllerDeploymentStateResponseOutput)
}

// The version for Hierarchy Controller
func (o ConfigManagementHierarchyControllerStateResponseOutput) Version() ConfigManagementHierarchyControllerVersionResponseOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerStateResponse) ConfigManagementHierarchyControllerVersionResponse {
		return v.Version
	}).(ConfigManagementHierarchyControllerVersionResponseOutput)
}

// Version for Hierarchy Controller
type ConfigManagementHierarchyControllerVersionResponse struct {
	// Version for Hierarchy Controller extension
	Extension string `pulumi:"extension"`
	// Version for open source HNC
	Hnc string `pulumi:"hnc"`
}

// Version for Hierarchy Controller
type ConfigManagementHierarchyControllerVersionResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementHierarchyControllerVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementHierarchyControllerVersionResponse)(nil)).Elem()
}

func (o ConfigManagementHierarchyControllerVersionResponseOutput) ToConfigManagementHierarchyControllerVersionResponseOutput() ConfigManagementHierarchyControllerVersionResponseOutput {
	return o
}

func (o ConfigManagementHierarchyControllerVersionResponseOutput) ToConfigManagementHierarchyControllerVersionResponseOutputWithContext(ctx context.Context) ConfigManagementHierarchyControllerVersionResponseOutput {
	return o
}

// Version for Hierarchy Controller extension
func (o ConfigManagementHierarchyControllerVersionResponseOutput) Extension() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerVersionResponse) string { return v.Extension }).(pulumi.StringOutput)
}

// Version for open source HNC
func (o ConfigManagementHierarchyControllerVersionResponseOutput) Hnc() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementHierarchyControllerVersionResponse) string { return v.Hnc }).(pulumi.StringOutput)
}

// Errors pertaining to the installation of ACM
type ConfigManagementInstallErrorResponse struct {
	// A string representing the user facing error message
	ErrorMessage string `pulumi:"errorMessage"`
}

// Errors pertaining to the installation of ACM
type ConfigManagementInstallErrorResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementInstallErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementInstallErrorResponse)(nil)).Elem()
}

func (o ConfigManagementInstallErrorResponseOutput) ToConfigManagementInstallErrorResponseOutput() ConfigManagementInstallErrorResponseOutput {
	return o
}

func (o ConfigManagementInstallErrorResponseOutput) ToConfigManagementInstallErrorResponseOutputWithContext(ctx context.Context) ConfigManagementInstallErrorResponseOutput {
	return o
}

// A string representing the user facing error message
func (o ConfigManagementInstallErrorResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementInstallErrorResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

type ConfigManagementInstallErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigManagementInstallErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigManagementInstallErrorResponse)(nil)).Elem()
}

func (o ConfigManagementInstallErrorResponseArrayOutput) ToConfigManagementInstallErrorResponseArrayOutput() ConfigManagementInstallErrorResponseArrayOutput {
	return o
}

func (o ConfigManagementInstallErrorResponseArrayOutput) ToConfigManagementInstallErrorResponseArrayOutputWithContext(ctx context.Context) ConfigManagementInstallErrorResponseArrayOutput {
	return o
}

func (o ConfigManagementInstallErrorResponseArrayOutput) Index(i pulumi.IntInput) ConfigManagementInstallErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigManagementInstallErrorResponse {
		return vs[0].([]ConfigManagementInstallErrorResponse)[vs[1].(int)]
	}).(ConfigManagementInstallErrorResponseOutput)
}

// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
type ConfigManagementMembershipSpec struct {
	// The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
	Cluster *string `pulumi:"cluster"`
	// Config Sync configuration for the cluster.
	ConfigSync *ConfigManagementConfigSync `pulumi:"configSync"`
	// Hierarchy Controller configuration for the cluster.
	HierarchyController *ConfigManagementHierarchyControllerConfig `pulumi:"hierarchyController"`
	// Policy Controller configuration for the cluster.
	PolicyController *ConfigManagementPolicyController `pulumi:"policyController"`
	// Version of ACM installed.
	Version *string `pulumi:"version"`
}

// ConfigManagementMembershipSpecInput is an input type that accepts ConfigManagementMembershipSpecArgs and ConfigManagementMembershipSpecOutput values.
// You can construct a concrete instance of `ConfigManagementMembershipSpecInput` via:
//
//	ConfigManagementMembershipSpecArgs{...}
type ConfigManagementMembershipSpecInput interface {
	pulumi.Input

	ToConfigManagementMembershipSpecOutput() ConfigManagementMembershipSpecOutput
	ToConfigManagementMembershipSpecOutputWithContext(context.Context) ConfigManagementMembershipSpecOutput
}

// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
type ConfigManagementMembershipSpecArgs struct {
	// The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// Config Sync configuration for the cluster.
	ConfigSync ConfigManagementConfigSyncPtrInput `pulumi:"configSync"`
	// Hierarchy Controller configuration for the cluster.
	HierarchyController ConfigManagementHierarchyControllerConfigPtrInput `pulumi:"hierarchyController"`
	// Policy Controller configuration for the cluster.
	PolicyController ConfigManagementPolicyControllerPtrInput `pulumi:"policyController"`
	// Version of ACM installed.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ConfigManagementMembershipSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementMembershipSpec)(nil)).Elem()
}

func (i ConfigManagementMembershipSpecArgs) ToConfigManagementMembershipSpecOutput() ConfigManagementMembershipSpecOutput {
	return i.ToConfigManagementMembershipSpecOutputWithContext(context.Background())
}

func (i ConfigManagementMembershipSpecArgs) ToConfigManagementMembershipSpecOutputWithContext(ctx context.Context) ConfigManagementMembershipSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementMembershipSpecOutput)
}

func (i ConfigManagementMembershipSpecArgs) ToConfigManagementMembershipSpecPtrOutput() ConfigManagementMembershipSpecPtrOutput {
	return i.ToConfigManagementMembershipSpecPtrOutputWithContext(context.Background())
}

func (i ConfigManagementMembershipSpecArgs) ToConfigManagementMembershipSpecPtrOutputWithContext(ctx context.Context) ConfigManagementMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementMembershipSpecOutput).ToConfigManagementMembershipSpecPtrOutputWithContext(ctx)
}

// ConfigManagementMembershipSpecPtrInput is an input type that accepts ConfigManagementMembershipSpecArgs, ConfigManagementMembershipSpecPtr and ConfigManagementMembershipSpecPtrOutput values.
// You can construct a concrete instance of `ConfigManagementMembershipSpecPtrInput` via:
//
//	        ConfigManagementMembershipSpecArgs{...}
//
//	or:
//
//	        nil
type ConfigManagementMembershipSpecPtrInput interface {
	pulumi.Input

	ToConfigManagementMembershipSpecPtrOutput() ConfigManagementMembershipSpecPtrOutput
	ToConfigManagementMembershipSpecPtrOutputWithContext(context.Context) ConfigManagementMembershipSpecPtrOutput
}

type configManagementMembershipSpecPtrType ConfigManagementMembershipSpecArgs

func ConfigManagementMembershipSpecPtr(v *ConfigManagementMembershipSpecArgs) ConfigManagementMembershipSpecPtrInput {
	return (*configManagementMembershipSpecPtrType)(v)
}

func (*configManagementMembershipSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementMembershipSpec)(nil)).Elem()
}

func (i *configManagementMembershipSpecPtrType) ToConfigManagementMembershipSpecPtrOutput() ConfigManagementMembershipSpecPtrOutput {
	return i.ToConfigManagementMembershipSpecPtrOutputWithContext(context.Background())
}

func (i *configManagementMembershipSpecPtrType) ToConfigManagementMembershipSpecPtrOutputWithContext(ctx context.Context) ConfigManagementMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementMembershipSpecPtrOutput)
}

// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
type ConfigManagementMembershipSpecOutput struct{ *pulumi.OutputState }

func (ConfigManagementMembershipSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementMembershipSpec)(nil)).Elem()
}

func (o ConfigManagementMembershipSpecOutput) ToConfigManagementMembershipSpecOutput() ConfigManagementMembershipSpecOutput {
	return o
}

func (o ConfigManagementMembershipSpecOutput) ToConfigManagementMembershipSpecOutputWithContext(ctx context.Context) ConfigManagementMembershipSpecOutput {
	return o
}

func (o ConfigManagementMembershipSpecOutput) ToConfigManagementMembershipSpecPtrOutput() ConfigManagementMembershipSpecPtrOutput {
	return o.ToConfigManagementMembershipSpecPtrOutputWithContext(context.Background())
}

func (o ConfigManagementMembershipSpecOutput) ToConfigManagementMembershipSpecPtrOutputWithContext(ctx context.Context) ConfigManagementMembershipSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigManagementMembershipSpec) *ConfigManagementMembershipSpec {
		return &v
	}).(ConfigManagementMembershipSpecPtrOutput)
}

// The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
func (o ConfigManagementMembershipSpecOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpec) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// Config Sync configuration for the cluster.
func (o ConfigManagementMembershipSpecOutput) ConfigSync() ConfigManagementConfigSyncPtrOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpec) *ConfigManagementConfigSync { return v.ConfigSync }).(ConfigManagementConfigSyncPtrOutput)
}

// Hierarchy Controller configuration for the cluster.
func (o ConfigManagementMembershipSpecOutput) HierarchyController() ConfigManagementHierarchyControllerConfigPtrOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpec) *ConfigManagementHierarchyControllerConfig {
		return v.HierarchyController
	}).(ConfigManagementHierarchyControllerConfigPtrOutput)
}

// Policy Controller configuration for the cluster.
func (o ConfigManagementMembershipSpecOutput) PolicyController() ConfigManagementPolicyControllerPtrOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpec) *ConfigManagementPolicyController { return v.PolicyController }).(ConfigManagementPolicyControllerPtrOutput)
}

// Version of ACM installed.
func (o ConfigManagementMembershipSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ConfigManagementMembershipSpecPtrOutput struct{ *pulumi.OutputState }

func (ConfigManagementMembershipSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementMembershipSpec)(nil)).Elem()
}

func (o ConfigManagementMembershipSpecPtrOutput) ToConfigManagementMembershipSpecPtrOutput() ConfigManagementMembershipSpecPtrOutput {
	return o
}

func (o ConfigManagementMembershipSpecPtrOutput) ToConfigManagementMembershipSpecPtrOutputWithContext(ctx context.Context) ConfigManagementMembershipSpecPtrOutput {
	return o
}

func (o ConfigManagementMembershipSpecPtrOutput) Elem() ConfigManagementMembershipSpecOutput {
	return o.ApplyT(func(v *ConfigManagementMembershipSpec) ConfigManagementMembershipSpec {
		if v != nil {
			return *v
		}
		var ret ConfigManagementMembershipSpec
		return ret
	}).(ConfigManagementMembershipSpecOutput)
}

// The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
func (o ConfigManagementMembershipSpecPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementMembershipSpec) *string {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Config Sync configuration for the cluster.
func (o ConfigManagementMembershipSpecPtrOutput) ConfigSync() ConfigManagementConfigSyncPtrOutput {
	return o.ApplyT(func(v *ConfigManagementMembershipSpec) *ConfigManagementConfigSync {
		if v == nil {
			return nil
		}
		return v.ConfigSync
	}).(ConfigManagementConfigSyncPtrOutput)
}

// Hierarchy Controller configuration for the cluster.
func (o ConfigManagementMembershipSpecPtrOutput) HierarchyController() ConfigManagementHierarchyControllerConfigPtrOutput {
	return o.ApplyT(func(v *ConfigManagementMembershipSpec) *ConfigManagementHierarchyControllerConfig {
		if v == nil {
			return nil
		}
		return v.HierarchyController
	}).(ConfigManagementHierarchyControllerConfigPtrOutput)
}

// Policy Controller configuration for the cluster.
func (o ConfigManagementMembershipSpecPtrOutput) PolicyController() ConfigManagementPolicyControllerPtrOutput {
	return o.ApplyT(func(v *ConfigManagementMembershipSpec) *ConfigManagementPolicyController {
		if v == nil {
			return nil
		}
		return v.PolicyController
	}).(ConfigManagementPolicyControllerPtrOutput)
}

// Version of ACM installed.
func (o ConfigManagementMembershipSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementMembershipSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
type ConfigManagementMembershipSpecResponse struct {
	// The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
	Cluster string `pulumi:"cluster"`
	// Config Sync configuration for the cluster.
	ConfigSync ConfigManagementConfigSyncResponse `pulumi:"configSync"`
	// Hierarchy Controller configuration for the cluster.
	HierarchyController ConfigManagementHierarchyControllerConfigResponse `pulumi:"hierarchyController"`
	// Policy Controller configuration for the cluster.
	PolicyController ConfigManagementPolicyControllerResponse `pulumi:"policyController"`
	// Version of ACM installed.
	Version string `pulumi:"version"`
}

// **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
type ConfigManagementMembershipSpecResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementMembershipSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementMembershipSpecResponse)(nil)).Elem()
}

func (o ConfigManagementMembershipSpecResponseOutput) ToConfigManagementMembershipSpecResponseOutput() ConfigManagementMembershipSpecResponseOutput {
	return o
}

func (o ConfigManagementMembershipSpecResponseOutput) ToConfigManagementMembershipSpecResponseOutputWithContext(ctx context.Context) ConfigManagementMembershipSpecResponseOutput {
	return o
}

// The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
func (o ConfigManagementMembershipSpecResponseOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpecResponse) string { return v.Cluster }).(pulumi.StringOutput)
}

// Config Sync configuration for the cluster.
func (o ConfigManagementMembershipSpecResponseOutput) ConfigSync() ConfigManagementConfigSyncResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpecResponse) ConfigManagementConfigSyncResponse { return v.ConfigSync }).(ConfigManagementConfigSyncResponseOutput)
}

// Hierarchy Controller configuration for the cluster.
func (o ConfigManagementMembershipSpecResponseOutput) HierarchyController() ConfigManagementHierarchyControllerConfigResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpecResponse) ConfigManagementHierarchyControllerConfigResponse {
		return v.HierarchyController
	}).(ConfigManagementHierarchyControllerConfigResponseOutput)
}

// Policy Controller configuration for the cluster.
func (o ConfigManagementMembershipSpecResponseOutput) PolicyController() ConfigManagementPolicyControllerResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpecResponse) ConfigManagementPolicyControllerResponse {
		return v.PolicyController
	}).(ConfigManagementPolicyControllerResponseOutput)
}

// Version of ACM installed.
func (o ConfigManagementMembershipSpecResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementMembershipSpecResponse) string { return v.Version }).(pulumi.StringOutput)
}

// **Anthos Config Management**: State for a single cluster.
type ConfigManagementMembershipStateResponse struct {
	// This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.
	ClusterName string `pulumi:"clusterName"`
	// Current sync status
	ConfigSyncState ConfigManagementConfigSyncStateResponse `pulumi:"configSyncState"`
	// Hierarchy Controller status
	HierarchyControllerState ConfigManagementHierarchyControllerStateResponse `pulumi:"hierarchyControllerState"`
	// Membership configuration in the cluster. This represents the actual state in the cluster, while the MembershipSpec in the FeatureSpec represents the intended state
	MembershipSpec ConfigManagementMembershipSpecResponse `pulumi:"membershipSpec"`
	// Current install status of ACM's Operator
	OperatorState ConfigManagementOperatorStateResponse `pulumi:"operatorState"`
	// PolicyController status
	PolicyControllerState ConfigManagementPolicyControllerStateResponse `pulumi:"policyControllerState"`
}

// **Anthos Config Management**: State for a single cluster.
type ConfigManagementMembershipStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementMembershipStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementMembershipStateResponse)(nil)).Elem()
}

func (o ConfigManagementMembershipStateResponseOutput) ToConfigManagementMembershipStateResponseOutput() ConfigManagementMembershipStateResponseOutput {
	return o
}

func (o ConfigManagementMembershipStateResponseOutput) ToConfigManagementMembershipStateResponseOutputWithContext(ctx context.Context) ConfigManagementMembershipStateResponseOutput {
	return o
}

// This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.
func (o ConfigManagementMembershipStateResponseOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementMembershipStateResponse) string { return v.ClusterName }).(pulumi.StringOutput)
}

// Current sync status
func (o ConfigManagementMembershipStateResponseOutput) ConfigSyncState() ConfigManagementConfigSyncStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipStateResponse) ConfigManagementConfigSyncStateResponse {
		return v.ConfigSyncState
	}).(ConfigManagementConfigSyncStateResponseOutput)
}

// Hierarchy Controller status
func (o ConfigManagementMembershipStateResponseOutput) HierarchyControllerState() ConfigManagementHierarchyControllerStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipStateResponse) ConfigManagementHierarchyControllerStateResponse {
		return v.HierarchyControllerState
	}).(ConfigManagementHierarchyControllerStateResponseOutput)
}

// Membership configuration in the cluster. This represents the actual state in the cluster, while the MembershipSpec in the FeatureSpec represents the intended state
func (o ConfigManagementMembershipStateResponseOutput) MembershipSpec() ConfigManagementMembershipSpecResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipStateResponse) ConfigManagementMembershipSpecResponse {
		return v.MembershipSpec
	}).(ConfigManagementMembershipSpecResponseOutput)
}

// Current install status of ACM's Operator
func (o ConfigManagementMembershipStateResponseOutput) OperatorState() ConfigManagementOperatorStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipStateResponse) ConfigManagementOperatorStateResponse {
		return v.OperatorState
	}).(ConfigManagementOperatorStateResponseOutput)
}

// PolicyController status
func (o ConfigManagementMembershipStateResponseOutput) PolicyControllerState() ConfigManagementPolicyControllerStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementMembershipStateResponse) ConfigManagementPolicyControllerStateResponse {
		return v.PolicyControllerState
	}).(ConfigManagementPolicyControllerStateResponseOutput)
}

// OCI repo configuration for a single cluster
type ConfigManagementOciConfig struct {
	// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
	GcpServiceAccountEmail *string `pulumi:"gcpServiceAccountEmail"`
	// The absolute path of the directory that contains the local resources. Default: the root directory of the image.
	PolicyDir *string `pulumi:"policyDir"`
	// Type of secret configured for access to the Git repo.
	SecretType *string `pulumi:"secretType"`
	// The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
	SyncRepo *string `pulumi:"syncRepo"`
	// Period in seconds between consecutive syncs. Default: 15.
	SyncWaitSecs *string `pulumi:"syncWaitSecs"`
}

// ConfigManagementOciConfigInput is an input type that accepts ConfigManagementOciConfigArgs and ConfigManagementOciConfigOutput values.
// You can construct a concrete instance of `ConfigManagementOciConfigInput` via:
//
//	ConfigManagementOciConfigArgs{...}
type ConfigManagementOciConfigInput interface {
	pulumi.Input

	ToConfigManagementOciConfigOutput() ConfigManagementOciConfigOutput
	ToConfigManagementOciConfigOutputWithContext(context.Context) ConfigManagementOciConfigOutput
}

// OCI repo configuration for a single cluster
type ConfigManagementOciConfigArgs struct {
	// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
	GcpServiceAccountEmail pulumi.StringPtrInput `pulumi:"gcpServiceAccountEmail"`
	// The absolute path of the directory that contains the local resources. Default: the root directory of the image.
	PolicyDir pulumi.StringPtrInput `pulumi:"policyDir"`
	// Type of secret configured for access to the Git repo.
	SecretType pulumi.StringPtrInput `pulumi:"secretType"`
	// The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
	SyncRepo pulumi.StringPtrInput `pulumi:"syncRepo"`
	// Period in seconds between consecutive syncs. Default: 15.
	SyncWaitSecs pulumi.StringPtrInput `pulumi:"syncWaitSecs"`
}

func (ConfigManagementOciConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementOciConfig)(nil)).Elem()
}

func (i ConfigManagementOciConfigArgs) ToConfigManagementOciConfigOutput() ConfigManagementOciConfigOutput {
	return i.ToConfigManagementOciConfigOutputWithContext(context.Background())
}

func (i ConfigManagementOciConfigArgs) ToConfigManagementOciConfigOutputWithContext(ctx context.Context) ConfigManagementOciConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementOciConfigOutput)
}

func (i ConfigManagementOciConfigArgs) ToConfigManagementOciConfigPtrOutput() ConfigManagementOciConfigPtrOutput {
	return i.ToConfigManagementOciConfigPtrOutputWithContext(context.Background())
}

func (i ConfigManagementOciConfigArgs) ToConfigManagementOciConfigPtrOutputWithContext(ctx context.Context) ConfigManagementOciConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementOciConfigOutput).ToConfigManagementOciConfigPtrOutputWithContext(ctx)
}

// ConfigManagementOciConfigPtrInput is an input type that accepts ConfigManagementOciConfigArgs, ConfigManagementOciConfigPtr and ConfigManagementOciConfigPtrOutput values.
// You can construct a concrete instance of `ConfigManagementOciConfigPtrInput` via:
//
//	        ConfigManagementOciConfigArgs{...}
//
//	or:
//
//	        nil
type ConfigManagementOciConfigPtrInput interface {
	pulumi.Input

	ToConfigManagementOciConfigPtrOutput() ConfigManagementOciConfigPtrOutput
	ToConfigManagementOciConfigPtrOutputWithContext(context.Context) ConfigManagementOciConfigPtrOutput
}

type configManagementOciConfigPtrType ConfigManagementOciConfigArgs

func ConfigManagementOciConfigPtr(v *ConfigManagementOciConfigArgs) ConfigManagementOciConfigPtrInput {
	return (*configManagementOciConfigPtrType)(v)
}

func (*configManagementOciConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementOciConfig)(nil)).Elem()
}

func (i *configManagementOciConfigPtrType) ToConfigManagementOciConfigPtrOutput() ConfigManagementOciConfigPtrOutput {
	return i.ToConfigManagementOciConfigPtrOutputWithContext(context.Background())
}

func (i *configManagementOciConfigPtrType) ToConfigManagementOciConfigPtrOutputWithContext(ctx context.Context) ConfigManagementOciConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementOciConfigPtrOutput)
}

// OCI repo configuration for a single cluster
type ConfigManagementOciConfigOutput struct{ *pulumi.OutputState }

func (ConfigManagementOciConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementOciConfig)(nil)).Elem()
}

func (o ConfigManagementOciConfigOutput) ToConfigManagementOciConfigOutput() ConfigManagementOciConfigOutput {
	return o
}

func (o ConfigManagementOciConfigOutput) ToConfigManagementOciConfigOutputWithContext(ctx context.Context) ConfigManagementOciConfigOutput {
	return o
}

func (o ConfigManagementOciConfigOutput) ToConfigManagementOciConfigPtrOutput() ConfigManagementOciConfigPtrOutput {
	return o.ToConfigManagementOciConfigPtrOutputWithContext(context.Background())
}

func (o ConfigManagementOciConfigOutput) ToConfigManagementOciConfigPtrOutputWithContext(ctx context.Context) ConfigManagementOciConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigManagementOciConfig) *ConfigManagementOciConfig {
		return &v
	}).(ConfigManagementOciConfigPtrOutput)
}

// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
func (o ConfigManagementOciConfigOutput) GcpServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementOciConfig) *string { return v.GcpServiceAccountEmail }).(pulumi.StringPtrOutput)
}

// The absolute path of the directory that contains the local resources. Default: the root directory of the image.
func (o ConfigManagementOciConfigOutput) PolicyDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementOciConfig) *string { return v.PolicyDir }).(pulumi.StringPtrOutput)
}

// Type of secret configured for access to the Git repo.
func (o ConfigManagementOciConfigOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementOciConfig) *string { return v.SecretType }).(pulumi.StringPtrOutput)
}

// The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
func (o ConfigManagementOciConfigOutput) SyncRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementOciConfig) *string { return v.SyncRepo }).(pulumi.StringPtrOutput)
}

// Period in seconds between consecutive syncs. Default: 15.
func (o ConfigManagementOciConfigOutput) SyncWaitSecs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementOciConfig) *string { return v.SyncWaitSecs }).(pulumi.StringPtrOutput)
}

type ConfigManagementOciConfigPtrOutput struct{ *pulumi.OutputState }

func (ConfigManagementOciConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementOciConfig)(nil)).Elem()
}

func (o ConfigManagementOciConfigPtrOutput) ToConfigManagementOciConfigPtrOutput() ConfigManagementOciConfigPtrOutput {
	return o
}

func (o ConfigManagementOciConfigPtrOutput) ToConfigManagementOciConfigPtrOutputWithContext(ctx context.Context) ConfigManagementOciConfigPtrOutput {
	return o
}

func (o ConfigManagementOciConfigPtrOutput) Elem() ConfigManagementOciConfigOutput {
	return o.ApplyT(func(v *ConfigManagementOciConfig) ConfigManagementOciConfig {
		if v != nil {
			return *v
		}
		var ret ConfigManagementOciConfig
		return ret
	}).(ConfigManagementOciConfigOutput)
}

// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
func (o ConfigManagementOciConfigPtrOutput) GcpServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementOciConfig) *string {
		if v == nil {
			return nil
		}
		return v.GcpServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// The absolute path of the directory that contains the local resources. Default: the root directory of the image.
func (o ConfigManagementOciConfigPtrOutput) PolicyDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementOciConfig) *string {
		if v == nil {
			return nil
		}
		return v.PolicyDir
	}).(pulumi.StringPtrOutput)
}

// Type of secret configured for access to the Git repo.
func (o ConfigManagementOciConfigPtrOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementOciConfig) *string {
		if v == nil {
			return nil
		}
		return v.SecretType
	}).(pulumi.StringPtrOutput)
}

// The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
func (o ConfigManagementOciConfigPtrOutput) SyncRepo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementOciConfig) *string {
		if v == nil {
			return nil
		}
		return v.SyncRepo
	}).(pulumi.StringPtrOutput)
}

// Period in seconds between consecutive syncs. Default: 15.
func (o ConfigManagementOciConfigPtrOutput) SyncWaitSecs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementOciConfig) *string {
		if v == nil {
			return nil
		}
		return v.SyncWaitSecs
	}).(pulumi.StringPtrOutput)
}

// OCI repo configuration for a single cluster
type ConfigManagementOciConfigResponse struct {
	// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
	GcpServiceAccountEmail string `pulumi:"gcpServiceAccountEmail"`
	// The absolute path of the directory that contains the local resources. Default: the root directory of the image.
	PolicyDir string `pulumi:"policyDir"`
	// Type of secret configured for access to the Git repo.
	SecretType string `pulumi:"secretType"`
	// The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
	SyncRepo string `pulumi:"syncRepo"`
	// Period in seconds between consecutive syncs. Default: 15.
	SyncWaitSecs string `pulumi:"syncWaitSecs"`
}

// OCI repo configuration for a single cluster
type ConfigManagementOciConfigResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementOciConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementOciConfigResponse)(nil)).Elem()
}

func (o ConfigManagementOciConfigResponseOutput) ToConfigManagementOciConfigResponseOutput() ConfigManagementOciConfigResponseOutput {
	return o
}

func (o ConfigManagementOciConfigResponseOutput) ToConfigManagementOciConfigResponseOutputWithContext(ctx context.Context) ConfigManagementOciConfigResponseOutput {
	return o
}

// The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
func (o ConfigManagementOciConfigResponseOutput) GcpServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementOciConfigResponse) string { return v.GcpServiceAccountEmail }).(pulumi.StringOutput)
}

// The absolute path of the directory that contains the local resources. Default: the root directory of the image.
func (o ConfigManagementOciConfigResponseOutput) PolicyDir() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementOciConfigResponse) string { return v.PolicyDir }).(pulumi.StringOutput)
}

// Type of secret configured for access to the Git repo.
func (o ConfigManagementOciConfigResponseOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementOciConfigResponse) string { return v.SecretType }).(pulumi.StringOutput)
}

// The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
func (o ConfigManagementOciConfigResponseOutput) SyncRepo() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementOciConfigResponse) string { return v.SyncRepo }).(pulumi.StringOutput)
}

// Period in seconds between consecutive syncs. Default: 15.
func (o ConfigManagementOciConfigResponseOutput) SyncWaitSecs() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementOciConfigResponse) string { return v.SyncWaitSecs }).(pulumi.StringOutput)
}

// State information for an ACM's Operator
type ConfigManagementOperatorStateResponse struct {
	// The state of the Operator's deployment
	DeploymentState string `pulumi:"deploymentState"`
	// Install errors.
	Errors []ConfigManagementInstallErrorResponse `pulumi:"errors"`
	// The semenatic version number of the operator
	Version string `pulumi:"version"`
}

// State information for an ACM's Operator
type ConfigManagementOperatorStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementOperatorStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementOperatorStateResponse)(nil)).Elem()
}

func (o ConfigManagementOperatorStateResponseOutput) ToConfigManagementOperatorStateResponseOutput() ConfigManagementOperatorStateResponseOutput {
	return o
}

func (o ConfigManagementOperatorStateResponseOutput) ToConfigManagementOperatorStateResponseOutputWithContext(ctx context.Context) ConfigManagementOperatorStateResponseOutput {
	return o
}

// The state of the Operator's deployment
func (o ConfigManagementOperatorStateResponseOutput) DeploymentState() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementOperatorStateResponse) string { return v.DeploymentState }).(pulumi.StringOutput)
}

// Install errors.
func (o ConfigManagementOperatorStateResponseOutput) Errors() ConfigManagementInstallErrorResponseArrayOutput {
	return o.ApplyT(func(v ConfigManagementOperatorStateResponse) []ConfigManagementInstallErrorResponse { return v.Errors }).(ConfigManagementInstallErrorResponseArrayOutput)
}

// The semenatic version number of the operator
func (o ConfigManagementOperatorStateResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementOperatorStateResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Configuration for Policy Controller
type ConfigManagementPolicyController struct {
	// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
	AuditIntervalSeconds *string `pulumi:"auditIntervalSeconds"`
	// Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
	Enabled *bool `pulumi:"enabled"`
	// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
	ExemptableNamespaces []string `pulumi:"exemptableNamespaces"`
	// Logs all denies and dry run failures.
	LogDeniesEnabled *bool `pulumi:"logDeniesEnabled"`
	// Monitoring specifies the configuration of monitoring.
	Monitoring *ConfigManagementPolicyControllerMonitoring `pulumi:"monitoring"`
	// Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
	MutationEnabled *bool `pulumi:"mutationEnabled"`
	// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
	ReferentialRulesEnabled *bool `pulumi:"referentialRulesEnabled"`
	// Installs the default template library along with Policy Controller.
	TemplateLibraryInstalled *bool `pulumi:"templateLibraryInstalled"`
}

// ConfigManagementPolicyControllerInput is an input type that accepts ConfigManagementPolicyControllerArgs and ConfigManagementPolicyControllerOutput values.
// You can construct a concrete instance of `ConfigManagementPolicyControllerInput` via:
//
//	ConfigManagementPolicyControllerArgs{...}
type ConfigManagementPolicyControllerInput interface {
	pulumi.Input

	ToConfigManagementPolicyControllerOutput() ConfigManagementPolicyControllerOutput
	ToConfigManagementPolicyControllerOutputWithContext(context.Context) ConfigManagementPolicyControllerOutput
}

// Configuration for Policy Controller
type ConfigManagementPolicyControllerArgs struct {
	// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
	AuditIntervalSeconds pulumi.StringPtrInput `pulumi:"auditIntervalSeconds"`
	// Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
	ExemptableNamespaces pulumi.StringArrayInput `pulumi:"exemptableNamespaces"`
	// Logs all denies and dry run failures.
	LogDeniesEnabled pulumi.BoolPtrInput `pulumi:"logDeniesEnabled"`
	// Monitoring specifies the configuration of monitoring.
	Monitoring ConfigManagementPolicyControllerMonitoringPtrInput `pulumi:"monitoring"`
	// Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
	MutationEnabled pulumi.BoolPtrInput `pulumi:"mutationEnabled"`
	// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
	ReferentialRulesEnabled pulumi.BoolPtrInput `pulumi:"referentialRulesEnabled"`
	// Installs the default template library along with Policy Controller.
	TemplateLibraryInstalled pulumi.BoolPtrInput `pulumi:"templateLibraryInstalled"`
}

func (ConfigManagementPolicyControllerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyController)(nil)).Elem()
}

func (i ConfigManagementPolicyControllerArgs) ToConfigManagementPolicyControllerOutput() ConfigManagementPolicyControllerOutput {
	return i.ToConfigManagementPolicyControllerOutputWithContext(context.Background())
}

func (i ConfigManagementPolicyControllerArgs) ToConfigManagementPolicyControllerOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementPolicyControllerOutput)
}

func (i ConfigManagementPolicyControllerArgs) ToConfigManagementPolicyControllerPtrOutput() ConfigManagementPolicyControllerPtrOutput {
	return i.ToConfigManagementPolicyControllerPtrOutputWithContext(context.Background())
}

func (i ConfigManagementPolicyControllerArgs) ToConfigManagementPolicyControllerPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementPolicyControllerOutput).ToConfigManagementPolicyControllerPtrOutputWithContext(ctx)
}

// ConfigManagementPolicyControllerPtrInput is an input type that accepts ConfigManagementPolicyControllerArgs, ConfigManagementPolicyControllerPtr and ConfigManagementPolicyControllerPtrOutput values.
// You can construct a concrete instance of `ConfigManagementPolicyControllerPtrInput` via:
//
//	        ConfigManagementPolicyControllerArgs{...}
//
//	or:
//
//	        nil
type ConfigManagementPolicyControllerPtrInput interface {
	pulumi.Input

	ToConfigManagementPolicyControllerPtrOutput() ConfigManagementPolicyControllerPtrOutput
	ToConfigManagementPolicyControllerPtrOutputWithContext(context.Context) ConfigManagementPolicyControllerPtrOutput
}

type configManagementPolicyControllerPtrType ConfigManagementPolicyControllerArgs

func ConfigManagementPolicyControllerPtr(v *ConfigManagementPolicyControllerArgs) ConfigManagementPolicyControllerPtrInput {
	return (*configManagementPolicyControllerPtrType)(v)
}

func (*configManagementPolicyControllerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementPolicyController)(nil)).Elem()
}

func (i *configManagementPolicyControllerPtrType) ToConfigManagementPolicyControllerPtrOutput() ConfigManagementPolicyControllerPtrOutput {
	return i.ToConfigManagementPolicyControllerPtrOutputWithContext(context.Background())
}

func (i *configManagementPolicyControllerPtrType) ToConfigManagementPolicyControllerPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementPolicyControllerPtrOutput)
}

// Configuration for Policy Controller
type ConfigManagementPolicyControllerOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyController)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerOutput) ToConfigManagementPolicyControllerOutput() ConfigManagementPolicyControllerOutput {
	return o
}

func (o ConfigManagementPolicyControllerOutput) ToConfigManagementPolicyControllerOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerOutput {
	return o
}

func (o ConfigManagementPolicyControllerOutput) ToConfigManagementPolicyControllerPtrOutput() ConfigManagementPolicyControllerPtrOutput {
	return o.ToConfigManagementPolicyControllerPtrOutputWithContext(context.Background())
}

func (o ConfigManagementPolicyControllerOutput) ToConfigManagementPolicyControllerPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigManagementPolicyController) *ConfigManagementPolicyController {
		return &v
	}).(ConfigManagementPolicyControllerPtrOutput)
}

// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
func (o ConfigManagementPolicyControllerOutput) AuditIntervalSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) *string { return v.AuditIntervalSeconds }).(pulumi.StringPtrOutput)
}

// Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
func (o ConfigManagementPolicyControllerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
func (o ConfigManagementPolicyControllerOutput) ExemptableNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) []string { return v.ExemptableNamespaces }).(pulumi.StringArrayOutput)
}

// Logs all denies and dry run failures.
func (o ConfigManagementPolicyControllerOutput) LogDeniesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) *bool { return v.LogDeniesEnabled }).(pulumi.BoolPtrOutput)
}

// Monitoring specifies the configuration of monitoring.
func (o ConfigManagementPolicyControllerOutput) Monitoring() ConfigManagementPolicyControllerMonitoringPtrOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) *ConfigManagementPolicyControllerMonitoring {
		return v.Monitoring
	}).(ConfigManagementPolicyControllerMonitoringPtrOutput)
}

// Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
func (o ConfigManagementPolicyControllerOutput) MutationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) *bool { return v.MutationEnabled }).(pulumi.BoolPtrOutput)
}

// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
func (o ConfigManagementPolicyControllerOutput) ReferentialRulesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) *bool { return v.ReferentialRulesEnabled }).(pulumi.BoolPtrOutput)
}

// Installs the default template library along with Policy Controller.
func (o ConfigManagementPolicyControllerOutput) TemplateLibraryInstalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ConfigManagementPolicyController) *bool { return v.TemplateLibraryInstalled }).(pulumi.BoolPtrOutput)
}

type ConfigManagementPolicyControllerPtrOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementPolicyController)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerPtrOutput) ToConfigManagementPolicyControllerPtrOutput() ConfigManagementPolicyControllerPtrOutput {
	return o
}

func (o ConfigManagementPolicyControllerPtrOutput) ToConfigManagementPolicyControllerPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerPtrOutput {
	return o
}

func (o ConfigManagementPolicyControllerPtrOutput) Elem() ConfigManagementPolicyControllerOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) ConfigManagementPolicyController {
		if v != nil {
			return *v
		}
		var ret ConfigManagementPolicyController
		return ret
	}).(ConfigManagementPolicyControllerOutput)
}

// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
func (o ConfigManagementPolicyControllerPtrOutput) AuditIntervalSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) *string {
		if v == nil {
			return nil
		}
		return v.AuditIntervalSeconds
	}).(pulumi.StringPtrOutput)
}

// Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
func (o ConfigManagementPolicyControllerPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
func (o ConfigManagementPolicyControllerPtrOutput) ExemptableNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) []string {
		if v == nil {
			return nil
		}
		return v.ExemptableNamespaces
	}).(pulumi.StringArrayOutput)
}

// Logs all denies and dry run failures.
func (o ConfigManagementPolicyControllerPtrOutput) LogDeniesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) *bool {
		if v == nil {
			return nil
		}
		return v.LogDeniesEnabled
	}).(pulumi.BoolPtrOutput)
}

// Monitoring specifies the configuration of monitoring.
func (o ConfigManagementPolicyControllerPtrOutput) Monitoring() ConfigManagementPolicyControllerMonitoringPtrOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) *ConfigManagementPolicyControllerMonitoring {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(ConfigManagementPolicyControllerMonitoringPtrOutput)
}

// Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
func (o ConfigManagementPolicyControllerPtrOutput) MutationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) *bool {
		if v == nil {
			return nil
		}
		return v.MutationEnabled
	}).(pulumi.BoolPtrOutput)
}

// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
func (o ConfigManagementPolicyControllerPtrOutput) ReferentialRulesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) *bool {
		if v == nil {
			return nil
		}
		return v.ReferentialRulesEnabled
	}).(pulumi.BoolPtrOutput)
}

// Installs the default template library along with Policy Controller.
func (o ConfigManagementPolicyControllerPtrOutput) TemplateLibraryInstalled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyController) *bool {
		if v == nil {
			return nil
		}
		return v.TemplateLibraryInstalled
	}).(pulumi.BoolPtrOutput)
}

// State for the migration of PolicyController from ACM -> PoCo Hub.
type ConfigManagementPolicyControllerMigrationResponse struct {
	// Last time this membership spec was copied to PoCo feature.
	CopyTime string `pulumi:"copyTime"`
	// Stage of the migration.
	Stage string `pulumi:"stage"`
}

// State for the migration of PolicyController from ACM -> PoCo Hub.
type ConfigManagementPolicyControllerMigrationResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerMigrationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyControllerMigrationResponse)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerMigrationResponseOutput) ToConfigManagementPolicyControllerMigrationResponseOutput() ConfigManagementPolicyControllerMigrationResponseOutput {
	return o
}

func (o ConfigManagementPolicyControllerMigrationResponseOutput) ToConfigManagementPolicyControllerMigrationResponseOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMigrationResponseOutput {
	return o
}

// Last time this membership spec was copied to PoCo feature.
func (o ConfigManagementPolicyControllerMigrationResponseOutput) CopyTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerMigrationResponse) string { return v.CopyTime }).(pulumi.StringOutput)
}

// Stage of the migration.
func (o ConfigManagementPolicyControllerMigrationResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerMigrationResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type ConfigManagementPolicyControllerMonitoring struct {
	// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
	Backends []ConfigManagementPolicyControllerMonitoringBackendsItem `pulumi:"backends"`
}

// ConfigManagementPolicyControllerMonitoringInput is an input type that accepts ConfigManagementPolicyControllerMonitoringArgs and ConfigManagementPolicyControllerMonitoringOutput values.
// You can construct a concrete instance of `ConfigManagementPolicyControllerMonitoringInput` via:
//
//	ConfigManagementPolicyControllerMonitoringArgs{...}
type ConfigManagementPolicyControllerMonitoringInput interface {
	pulumi.Input

	ToConfigManagementPolicyControllerMonitoringOutput() ConfigManagementPolicyControllerMonitoringOutput
	ToConfigManagementPolicyControllerMonitoringOutputWithContext(context.Context) ConfigManagementPolicyControllerMonitoringOutput
}

// PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type ConfigManagementPolicyControllerMonitoringArgs struct {
	// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
	Backends ConfigManagementPolicyControllerMonitoringBackendsItemArrayInput `pulumi:"backends"`
}

func (ConfigManagementPolicyControllerMonitoringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyControllerMonitoring)(nil)).Elem()
}

func (i ConfigManagementPolicyControllerMonitoringArgs) ToConfigManagementPolicyControllerMonitoringOutput() ConfigManagementPolicyControllerMonitoringOutput {
	return i.ToConfigManagementPolicyControllerMonitoringOutputWithContext(context.Background())
}

func (i ConfigManagementPolicyControllerMonitoringArgs) ToConfigManagementPolicyControllerMonitoringOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMonitoringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementPolicyControllerMonitoringOutput)
}

func (i ConfigManagementPolicyControllerMonitoringArgs) ToConfigManagementPolicyControllerMonitoringPtrOutput() ConfigManagementPolicyControllerMonitoringPtrOutput {
	return i.ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(context.Background())
}

func (i ConfigManagementPolicyControllerMonitoringArgs) ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementPolicyControllerMonitoringOutput).ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(ctx)
}

// ConfigManagementPolicyControllerMonitoringPtrInput is an input type that accepts ConfigManagementPolicyControllerMonitoringArgs, ConfigManagementPolicyControllerMonitoringPtr and ConfigManagementPolicyControllerMonitoringPtrOutput values.
// You can construct a concrete instance of `ConfigManagementPolicyControllerMonitoringPtrInput` via:
//
//	        ConfigManagementPolicyControllerMonitoringArgs{...}
//
//	or:
//
//	        nil
type ConfigManagementPolicyControllerMonitoringPtrInput interface {
	pulumi.Input

	ToConfigManagementPolicyControllerMonitoringPtrOutput() ConfigManagementPolicyControllerMonitoringPtrOutput
	ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(context.Context) ConfigManagementPolicyControllerMonitoringPtrOutput
}

type configManagementPolicyControllerMonitoringPtrType ConfigManagementPolicyControllerMonitoringArgs

func ConfigManagementPolicyControllerMonitoringPtr(v *ConfigManagementPolicyControllerMonitoringArgs) ConfigManagementPolicyControllerMonitoringPtrInput {
	return (*configManagementPolicyControllerMonitoringPtrType)(v)
}

func (*configManagementPolicyControllerMonitoringPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementPolicyControllerMonitoring)(nil)).Elem()
}

func (i *configManagementPolicyControllerMonitoringPtrType) ToConfigManagementPolicyControllerMonitoringPtrOutput() ConfigManagementPolicyControllerMonitoringPtrOutput {
	return i.ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(context.Background())
}

func (i *configManagementPolicyControllerMonitoringPtrType) ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMonitoringPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigManagementPolicyControllerMonitoringPtrOutput)
}

// PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type ConfigManagementPolicyControllerMonitoringOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerMonitoringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyControllerMonitoring)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerMonitoringOutput) ToConfigManagementPolicyControllerMonitoringOutput() ConfigManagementPolicyControllerMonitoringOutput {
	return o
}

func (o ConfigManagementPolicyControllerMonitoringOutput) ToConfigManagementPolicyControllerMonitoringOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMonitoringOutput {
	return o
}

func (o ConfigManagementPolicyControllerMonitoringOutput) ToConfigManagementPolicyControllerMonitoringPtrOutput() ConfigManagementPolicyControllerMonitoringPtrOutput {
	return o.ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(context.Background())
}

func (o ConfigManagementPolicyControllerMonitoringOutput) ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMonitoringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConfigManagementPolicyControllerMonitoring) *ConfigManagementPolicyControllerMonitoring {
		return &v
	}).(ConfigManagementPolicyControllerMonitoringPtrOutput)
}

// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
func (o ConfigManagementPolicyControllerMonitoringOutput) Backends() ConfigManagementPolicyControllerMonitoringBackendsItemArrayOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerMonitoring) []ConfigManagementPolicyControllerMonitoringBackendsItem {
		return v.Backends
	}).(ConfigManagementPolicyControllerMonitoringBackendsItemArrayOutput)
}

type ConfigManagementPolicyControllerMonitoringPtrOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerMonitoringPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigManagementPolicyControllerMonitoring)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerMonitoringPtrOutput) ToConfigManagementPolicyControllerMonitoringPtrOutput() ConfigManagementPolicyControllerMonitoringPtrOutput {
	return o
}

func (o ConfigManagementPolicyControllerMonitoringPtrOutput) ToConfigManagementPolicyControllerMonitoringPtrOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMonitoringPtrOutput {
	return o
}

func (o ConfigManagementPolicyControllerMonitoringPtrOutput) Elem() ConfigManagementPolicyControllerMonitoringOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyControllerMonitoring) ConfigManagementPolicyControllerMonitoring {
		if v != nil {
			return *v
		}
		var ret ConfigManagementPolicyControllerMonitoring
		return ret
	}).(ConfigManagementPolicyControllerMonitoringOutput)
}

// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
func (o ConfigManagementPolicyControllerMonitoringPtrOutput) Backends() ConfigManagementPolicyControllerMonitoringBackendsItemArrayOutput {
	return o.ApplyT(func(v *ConfigManagementPolicyControllerMonitoring) []ConfigManagementPolicyControllerMonitoringBackendsItem {
		if v == nil {
			return nil
		}
		return v.Backends
	}).(ConfigManagementPolicyControllerMonitoringBackendsItemArrayOutput)
}

// PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type ConfigManagementPolicyControllerMonitoringResponse struct {
	// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
	Backends []string `pulumi:"backends"`
}

// PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type ConfigManagementPolicyControllerMonitoringResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerMonitoringResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyControllerMonitoringResponse)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerMonitoringResponseOutput) ToConfigManagementPolicyControllerMonitoringResponseOutput() ConfigManagementPolicyControllerMonitoringResponseOutput {
	return o
}

func (o ConfigManagementPolicyControllerMonitoringResponseOutput) ToConfigManagementPolicyControllerMonitoringResponseOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerMonitoringResponseOutput {
	return o
}

// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
func (o ConfigManagementPolicyControllerMonitoringResponseOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerMonitoringResponse) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// Configuration for Policy Controller
type ConfigManagementPolicyControllerResponse struct {
	// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
	AuditIntervalSeconds string `pulumi:"auditIntervalSeconds"`
	// Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
	Enabled bool `pulumi:"enabled"`
	// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
	ExemptableNamespaces []string `pulumi:"exemptableNamespaces"`
	// Logs all denies and dry run failures.
	LogDeniesEnabled bool `pulumi:"logDeniesEnabled"`
	// Monitoring specifies the configuration of monitoring.
	Monitoring ConfigManagementPolicyControllerMonitoringResponse `pulumi:"monitoring"`
	// Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
	MutationEnabled bool `pulumi:"mutationEnabled"`
	// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
	ReferentialRulesEnabled bool `pulumi:"referentialRulesEnabled"`
	// Installs the default template library along with Policy Controller.
	TemplateLibraryInstalled bool `pulumi:"templateLibraryInstalled"`
	// Last time this membership spec was updated.
	UpdateTime string `pulumi:"updateTime"`
}

// Configuration for Policy Controller
type ConfigManagementPolicyControllerResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyControllerResponse)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerResponseOutput) ToConfigManagementPolicyControllerResponseOutput() ConfigManagementPolicyControllerResponseOutput {
	return o
}

func (o ConfigManagementPolicyControllerResponseOutput) ToConfigManagementPolicyControllerResponseOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerResponseOutput {
	return o
}

// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
func (o ConfigManagementPolicyControllerResponseOutput) AuditIntervalSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) string { return v.AuditIntervalSeconds }).(pulumi.StringOutput)
}

// Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
func (o ConfigManagementPolicyControllerResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
func (o ConfigManagementPolicyControllerResponseOutput) ExemptableNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) []string { return v.ExemptableNamespaces }).(pulumi.StringArrayOutput)
}

// Logs all denies and dry run failures.
func (o ConfigManagementPolicyControllerResponseOutput) LogDeniesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) bool { return v.LogDeniesEnabled }).(pulumi.BoolOutput)
}

// Monitoring specifies the configuration of monitoring.
func (o ConfigManagementPolicyControllerResponseOutput) Monitoring() ConfigManagementPolicyControllerMonitoringResponseOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) ConfigManagementPolicyControllerMonitoringResponse {
		return v.Monitoring
	}).(ConfigManagementPolicyControllerMonitoringResponseOutput)
}

// Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
func (o ConfigManagementPolicyControllerResponseOutput) MutationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) bool { return v.MutationEnabled }).(pulumi.BoolOutput)
}

// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
func (o ConfigManagementPolicyControllerResponseOutput) ReferentialRulesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) bool { return v.ReferentialRulesEnabled }).(pulumi.BoolOutput)
}

// Installs the default template library along with Policy Controller.
func (o ConfigManagementPolicyControllerResponseOutput) TemplateLibraryInstalled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) bool { return v.TemplateLibraryInstalled }).(pulumi.BoolOutput)
}

// Last time this membership spec was updated.
func (o ConfigManagementPolicyControllerResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// State for PolicyControllerState.
type ConfigManagementPolicyControllerStateResponse struct {
	// The state about the policy controller installation.
	DeploymentState ConfigManagementGatekeeperDeploymentStateResponse `pulumi:"deploymentState"`
	// Record state of ACM -> PoCo Hub migration for this feature.
	Migration ConfigManagementPolicyControllerMigrationResponse `pulumi:"migration"`
	// The version of Gatekeeper Policy Controller deployed.
	Version ConfigManagementPolicyControllerVersionResponse `pulumi:"version"`
}

// State for PolicyControllerState.
type ConfigManagementPolicyControllerStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyControllerStateResponse)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerStateResponseOutput) ToConfigManagementPolicyControllerStateResponseOutput() ConfigManagementPolicyControllerStateResponseOutput {
	return o
}

func (o ConfigManagementPolicyControllerStateResponseOutput) ToConfigManagementPolicyControllerStateResponseOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerStateResponseOutput {
	return o
}

// The state about the policy controller installation.
func (o ConfigManagementPolicyControllerStateResponseOutput) DeploymentState() ConfigManagementGatekeeperDeploymentStateResponseOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerStateResponse) ConfigManagementGatekeeperDeploymentStateResponse {
		return v.DeploymentState
	}).(ConfigManagementGatekeeperDeploymentStateResponseOutput)
}

// Record state of ACM -> PoCo Hub migration for this feature.
func (o ConfigManagementPolicyControllerStateResponseOutput) Migration() ConfigManagementPolicyControllerMigrationResponseOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerStateResponse) ConfigManagementPolicyControllerMigrationResponse {
		return v.Migration
	}).(ConfigManagementPolicyControllerMigrationResponseOutput)
}

// The version of Gatekeeper Policy Controller deployed.
func (o ConfigManagementPolicyControllerStateResponseOutput) Version() ConfigManagementPolicyControllerVersionResponseOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerStateResponse) ConfigManagementPolicyControllerVersionResponse {
		return v.Version
	}).(ConfigManagementPolicyControllerVersionResponseOutput)
}

// The build version of Gatekeeper Policy Controller is using.
type ConfigManagementPolicyControllerVersionResponse struct {
	// The gatekeeper image tag that is composed of ACM version, git tag, build number.
	Version string `pulumi:"version"`
}

// The build version of Gatekeeper Policy Controller is using.
type ConfigManagementPolicyControllerVersionResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementPolicyControllerVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementPolicyControllerVersionResponse)(nil)).Elem()
}

func (o ConfigManagementPolicyControllerVersionResponseOutput) ToConfigManagementPolicyControllerVersionResponseOutput() ConfigManagementPolicyControllerVersionResponseOutput {
	return o
}

func (o ConfigManagementPolicyControllerVersionResponseOutput) ToConfigManagementPolicyControllerVersionResponseOutputWithContext(ctx context.Context) ConfigManagementPolicyControllerVersionResponseOutput {
	return o
}

// The gatekeeper image tag that is composed of ACM version, git tag, build number.
func (o ConfigManagementPolicyControllerVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementPolicyControllerVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

// An ACM created error representing a problem syncing configurations
type ConfigManagementSyncErrorResponse struct {
	// An ACM defined error code
	Code string `pulumi:"code"`
	// A description of the error
	ErrorMessage string `pulumi:"errorMessage"`
	// A list of config(s) associated with the error, if any
	ErrorResources []ConfigManagementErrorResourceResponse `pulumi:"errorResources"`
}

// An ACM created error representing a problem syncing configurations
type ConfigManagementSyncErrorResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementSyncErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementSyncErrorResponse)(nil)).Elem()
}

func (o ConfigManagementSyncErrorResponseOutput) ToConfigManagementSyncErrorResponseOutput() ConfigManagementSyncErrorResponseOutput {
	return o
}

func (o ConfigManagementSyncErrorResponseOutput) ToConfigManagementSyncErrorResponseOutputWithContext(ctx context.Context) ConfigManagementSyncErrorResponseOutput {
	return o
}

// An ACM defined error code
func (o ConfigManagementSyncErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A description of the error
func (o ConfigManagementSyncErrorResponseOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncErrorResponse) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// A list of config(s) associated with the error, if any
func (o ConfigManagementSyncErrorResponseOutput) ErrorResources() ConfigManagementErrorResourceResponseArrayOutput {
	return o.ApplyT(func(v ConfigManagementSyncErrorResponse) []ConfigManagementErrorResourceResponse {
		return v.ErrorResources
	}).(ConfigManagementErrorResourceResponseArrayOutput)
}

type ConfigManagementSyncErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ConfigManagementSyncErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigManagementSyncErrorResponse)(nil)).Elem()
}

func (o ConfigManagementSyncErrorResponseArrayOutput) ToConfigManagementSyncErrorResponseArrayOutput() ConfigManagementSyncErrorResponseArrayOutput {
	return o
}

func (o ConfigManagementSyncErrorResponseArrayOutput) ToConfigManagementSyncErrorResponseArrayOutputWithContext(ctx context.Context) ConfigManagementSyncErrorResponseArrayOutput {
	return o
}

func (o ConfigManagementSyncErrorResponseArrayOutput) Index(i pulumi.IntInput) ConfigManagementSyncErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigManagementSyncErrorResponse {
		return vs[0].([]ConfigManagementSyncErrorResponse)[vs[1].(int)]
	}).(ConfigManagementSyncErrorResponseOutput)
}

// State indicating an ACM's progress syncing configurations to a cluster
type ConfigManagementSyncStateResponse struct {
	// Sync status code
	Code string `pulumi:"code"`
	// A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.
	Errors []ConfigManagementSyncErrorResponse `pulumi:"errors"`
	// Token indicating the state of the importer.
	ImportToken string `pulumi:"importToken"`
	// Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
	//
	// Deprecated: Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
	LastSync string `pulumi:"lastSync"`
	// Timestamp type of when ACM last successfully synced the repo
	LastSyncTime string `pulumi:"lastSyncTime"`
	// Token indicating the state of the repo.
	SourceToken string `pulumi:"sourceToken"`
	// Token indicating the state of the syncer.
	SyncToken string `pulumi:"syncToken"`
}

// State indicating an ACM's progress syncing configurations to a cluster
type ConfigManagementSyncStateResponseOutput struct{ *pulumi.OutputState }

func (ConfigManagementSyncStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigManagementSyncStateResponse)(nil)).Elem()
}

func (o ConfigManagementSyncStateResponseOutput) ToConfigManagementSyncStateResponseOutput() ConfigManagementSyncStateResponseOutput {
	return o
}

func (o ConfigManagementSyncStateResponseOutput) ToConfigManagementSyncStateResponseOutputWithContext(ctx context.Context) ConfigManagementSyncStateResponseOutput {
	return o
}

// Sync status code
func (o ConfigManagementSyncStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.
func (o ConfigManagementSyncStateResponseOutput) Errors() ConfigManagementSyncErrorResponseArrayOutput {
	return o.ApplyT(func(v ConfigManagementSyncStateResponse) []ConfigManagementSyncErrorResponse { return v.Errors }).(ConfigManagementSyncErrorResponseArrayOutput)
}

// Token indicating the state of the importer.
func (o ConfigManagementSyncStateResponseOutput) ImportToken() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncStateResponse) string { return v.ImportToken }).(pulumi.StringOutput)
}

// Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
//
// Deprecated: Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
func (o ConfigManagementSyncStateResponseOutput) LastSync() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncStateResponse) string { return v.LastSync }).(pulumi.StringOutput)
}

// Timestamp type of when ACM last successfully synced the repo
func (o ConfigManagementSyncStateResponseOutput) LastSyncTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncStateResponse) string { return v.LastSyncTime }).(pulumi.StringOutput)
}

// Token indicating the state of the repo.
func (o ConfigManagementSyncStateResponseOutput) SourceToken() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncStateResponse) string { return v.SourceToken }).(pulumi.StringOutput)
}

// Token indicating the state of the syncer.
func (o ConfigManagementSyncStateResponseOutput) SyncToken() pulumi.StringOutput {
	return o.ApplyT(func(v ConfigManagementSyncStateResponse) string { return v.SyncToken }).(pulumi.StringOutput)
}

// DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
type DefaultClusterConfig struct {
	// Optional. Enable/Disable binary authorization features for the cluster.
	BinaryAuthorizationConfig *BinaryAuthorizationConfig `pulumi:"binaryAuthorizationConfig"`
	// Enable/Disable Security Posture features for the cluster.
	SecurityPostureConfig *SecurityPostureConfig `pulumi:"securityPostureConfig"`
}

// DefaultClusterConfigInput is an input type that accepts DefaultClusterConfigArgs and DefaultClusterConfigOutput values.
// You can construct a concrete instance of `DefaultClusterConfigInput` via:
//
//	DefaultClusterConfigArgs{...}
type DefaultClusterConfigInput interface {
	pulumi.Input

	ToDefaultClusterConfigOutput() DefaultClusterConfigOutput
	ToDefaultClusterConfigOutputWithContext(context.Context) DefaultClusterConfigOutput
}

// DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
type DefaultClusterConfigArgs struct {
	// Optional. Enable/Disable binary authorization features for the cluster.
	BinaryAuthorizationConfig BinaryAuthorizationConfigPtrInput `pulumi:"binaryAuthorizationConfig"`
	// Enable/Disable Security Posture features for the cluster.
	SecurityPostureConfig SecurityPostureConfigPtrInput `pulumi:"securityPostureConfig"`
}

func (DefaultClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultClusterConfig)(nil)).Elem()
}

func (i DefaultClusterConfigArgs) ToDefaultClusterConfigOutput() DefaultClusterConfigOutput {
	return i.ToDefaultClusterConfigOutputWithContext(context.Background())
}

func (i DefaultClusterConfigArgs) ToDefaultClusterConfigOutputWithContext(ctx context.Context) DefaultClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultClusterConfigOutput)
}

func (i DefaultClusterConfigArgs) ToDefaultClusterConfigPtrOutput() DefaultClusterConfigPtrOutput {
	return i.ToDefaultClusterConfigPtrOutputWithContext(context.Background())
}

func (i DefaultClusterConfigArgs) ToDefaultClusterConfigPtrOutputWithContext(ctx context.Context) DefaultClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultClusterConfigOutput).ToDefaultClusterConfigPtrOutputWithContext(ctx)
}

// DefaultClusterConfigPtrInput is an input type that accepts DefaultClusterConfigArgs, DefaultClusterConfigPtr and DefaultClusterConfigPtrOutput values.
// You can construct a concrete instance of `DefaultClusterConfigPtrInput` via:
//
//	        DefaultClusterConfigArgs{...}
//
//	or:
//
//	        nil
type DefaultClusterConfigPtrInput interface {
	pulumi.Input

	ToDefaultClusterConfigPtrOutput() DefaultClusterConfigPtrOutput
	ToDefaultClusterConfigPtrOutputWithContext(context.Context) DefaultClusterConfigPtrOutput
}

type defaultClusterConfigPtrType DefaultClusterConfigArgs

func DefaultClusterConfigPtr(v *DefaultClusterConfigArgs) DefaultClusterConfigPtrInput {
	return (*defaultClusterConfigPtrType)(v)
}

func (*defaultClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultClusterConfig)(nil)).Elem()
}

func (i *defaultClusterConfigPtrType) ToDefaultClusterConfigPtrOutput() DefaultClusterConfigPtrOutput {
	return i.ToDefaultClusterConfigPtrOutputWithContext(context.Background())
}

func (i *defaultClusterConfigPtrType) ToDefaultClusterConfigPtrOutputWithContext(ctx context.Context) DefaultClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DefaultClusterConfigPtrOutput)
}

// DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
type DefaultClusterConfigOutput struct{ *pulumi.OutputState }

func (DefaultClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultClusterConfig)(nil)).Elem()
}

func (o DefaultClusterConfigOutput) ToDefaultClusterConfigOutput() DefaultClusterConfigOutput {
	return o
}

func (o DefaultClusterConfigOutput) ToDefaultClusterConfigOutputWithContext(ctx context.Context) DefaultClusterConfigOutput {
	return o
}

func (o DefaultClusterConfigOutput) ToDefaultClusterConfigPtrOutput() DefaultClusterConfigPtrOutput {
	return o.ToDefaultClusterConfigPtrOutputWithContext(context.Background())
}

func (o DefaultClusterConfigOutput) ToDefaultClusterConfigPtrOutputWithContext(ctx context.Context) DefaultClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DefaultClusterConfig) *DefaultClusterConfig {
		return &v
	}).(DefaultClusterConfigPtrOutput)
}

// Optional. Enable/Disable binary authorization features for the cluster.
func (o DefaultClusterConfigOutput) BinaryAuthorizationConfig() BinaryAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v DefaultClusterConfig) *BinaryAuthorizationConfig { return v.BinaryAuthorizationConfig }).(BinaryAuthorizationConfigPtrOutput)
}

// Enable/Disable Security Posture features for the cluster.
func (o DefaultClusterConfigOutput) SecurityPostureConfig() SecurityPostureConfigPtrOutput {
	return o.ApplyT(func(v DefaultClusterConfig) *SecurityPostureConfig { return v.SecurityPostureConfig }).(SecurityPostureConfigPtrOutput)
}

type DefaultClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (DefaultClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DefaultClusterConfig)(nil)).Elem()
}

func (o DefaultClusterConfigPtrOutput) ToDefaultClusterConfigPtrOutput() DefaultClusterConfigPtrOutput {
	return o
}

func (o DefaultClusterConfigPtrOutput) ToDefaultClusterConfigPtrOutputWithContext(ctx context.Context) DefaultClusterConfigPtrOutput {
	return o
}

func (o DefaultClusterConfigPtrOutput) Elem() DefaultClusterConfigOutput {
	return o.ApplyT(func(v *DefaultClusterConfig) DefaultClusterConfig {
		if v != nil {
			return *v
		}
		var ret DefaultClusterConfig
		return ret
	}).(DefaultClusterConfigOutput)
}

// Optional. Enable/Disable binary authorization features for the cluster.
func (o DefaultClusterConfigPtrOutput) BinaryAuthorizationConfig() BinaryAuthorizationConfigPtrOutput {
	return o.ApplyT(func(v *DefaultClusterConfig) *BinaryAuthorizationConfig {
		if v == nil {
			return nil
		}
		return v.BinaryAuthorizationConfig
	}).(BinaryAuthorizationConfigPtrOutput)
}

// Enable/Disable Security Posture features for the cluster.
func (o DefaultClusterConfigPtrOutput) SecurityPostureConfig() SecurityPostureConfigPtrOutput {
	return o.ApplyT(func(v *DefaultClusterConfig) *SecurityPostureConfig {
		if v == nil {
			return nil
		}
		return v.SecurityPostureConfig
	}).(SecurityPostureConfigPtrOutput)
}

// DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
type DefaultClusterConfigResponse struct {
	// Optional. Enable/Disable binary authorization features for the cluster.
	BinaryAuthorizationConfig BinaryAuthorizationConfigResponse `pulumi:"binaryAuthorizationConfig"`
	// Enable/Disable Security Posture features for the cluster.
	SecurityPostureConfig SecurityPostureConfigResponse `pulumi:"securityPostureConfig"`
}

// DefaultClusterConfig describes the default cluster configurations to be applied to all clusters born-in-fleet.
type DefaultClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (DefaultClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DefaultClusterConfigResponse)(nil)).Elem()
}

func (o DefaultClusterConfigResponseOutput) ToDefaultClusterConfigResponseOutput() DefaultClusterConfigResponseOutput {
	return o
}

func (o DefaultClusterConfigResponseOutput) ToDefaultClusterConfigResponseOutputWithContext(ctx context.Context) DefaultClusterConfigResponseOutput {
	return o
}

// Optional. Enable/Disable binary authorization features for the cluster.
func (o DefaultClusterConfigResponseOutput) BinaryAuthorizationConfig() BinaryAuthorizationConfigResponseOutput {
	return o.ApplyT(func(v DefaultClusterConfigResponse) BinaryAuthorizationConfigResponse {
		return v.BinaryAuthorizationConfig
	}).(BinaryAuthorizationConfigResponseOutput)
}

// Enable/Disable Security Posture features for the cluster.
func (o DefaultClusterConfigResponseOutput) SecurityPostureConfig() SecurityPostureConfigResponseOutput {
	return o.ApplyT(func(v DefaultClusterConfigResponse) SecurityPostureConfigResponse { return v.SecurityPostureConfig }).(SecurityPostureConfigResponseOutput)
}

// EdgeCluster contains information specific to Google Edge Clusters.
type EdgeCluster struct {
	// Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
	ResourceLink *string `pulumi:"resourceLink"`
}

// EdgeClusterInput is an input type that accepts EdgeClusterArgs and EdgeClusterOutput values.
// You can construct a concrete instance of `EdgeClusterInput` via:
//
//	EdgeClusterArgs{...}
type EdgeClusterInput interface {
	pulumi.Input

	ToEdgeClusterOutput() EdgeClusterOutput
	ToEdgeClusterOutputWithContext(context.Context) EdgeClusterOutput
}

// EdgeCluster contains information specific to Google Edge Clusters.
type EdgeClusterArgs struct {
	// Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
	ResourceLink pulumi.StringPtrInput `pulumi:"resourceLink"`
}

func (EdgeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCluster)(nil)).Elem()
}

func (i EdgeClusterArgs) ToEdgeClusterOutput() EdgeClusterOutput {
	return i.ToEdgeClusterOutputWithContext(context.Background())
}

func (i EdgeClusterArgs) ToEdgeClusterOutputWithContext(ctx context.Context) EdgeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeClusterOutput)
}

func (i EdgeClusterArgs) ToEdgeClusterPtrOutput() EdgeClusterPtrOutput {
	return i.ToEdgeClusterPtrOutputWithContext(context.Background())
}

func (i EdgeClusterArgs) ToEdgeClusterPtrOutputWithContext(ctx context.Context) EdgeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeClusterOutput).ToEdgeClusterPtrOutputWithContext(ctx)
}

// EdgeClusterPtrInput is an input type that accepts EdgeClusterArgs, EdgeClusterPtr and EdgeClusterPtrOutput values.
// You can construct a concrete instance of `EdgeClusterPtrInput` via:
//
//	        EdgeClusterArgs{...}
//
//	or:
//
//	        nil
type EdgeClusterPtrInput interface {
	pulumi.Input

	ToEdgeClusterPtrOutput() EdgeClusterPtrOutput
	ToEdgeClusterPtrOutputWithContext(context.Context) EdgeClusterPtrOutput
}

type edgeClusterPtrType EdgeClusterArgs

func EdgeClusterPtr(v *EdgeClusterArgs) EdgeClusterPtrInput {
	return (*edgeClusterPtrType)(v)
}

func (*edgeClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCluster)(nil)).Elem()
}

func (i *edgeClusterPtrType) ToEdgeClusterPtrOutput() EdgeClusterPtrOutput {
	return i.ToEdgeClusterPtrOutputWithContext(context.Background())
}

func (i *edgeClusterPtrType) ToEdgeClusterPtrOutputWithContext(ctx context.Context) EdgeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeClusterPtrOutput)
}

// EdgeCluster contains information specific to Google Edge Clusters.
type EdgeClusterOutput struct{ *pulumi.OutputState }

func (EdgeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeCluster)(nil)).Elem()
}

func (o EdgeClusterOutput) ToEdgeClusterOutput() EdgeClusterOutput {
	return o
}

func (o EdgeClusterOutput) ToEdgeClusterOutputWithContext(ctx context.Context) EdgeClusterOutput {
	return o
}

func (o EdgeClusterOutput) ToEdgeClusterPtrOutput() EdgeClusterPtrOutput {
	return o.ToEdgeClusterPtrOutputWithContext(context.Background())
}

func (o EdgeClusterOutput) ToEdgeClusterPtrOutputWithContext(ctx context.Context) EdgeClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EdgeCluster) *EdgeCluster {
		return &v
	}).(EdgeClusterPtrOutput)
}

// Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
func (o EdgeClusterOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeCluster) *string { return v.ResourceLink }).(pulumi.StringPtrOutput)
}

type EdgeClusterPtrOutput struct{ *pulumi.OutputState }

func (EdgeClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeCluster)(nil)).Elem()
}

func (o EdgeClusterPtrOutput) ToEdgeClusterPtrOutput() EdgeClusterPtrOutput {
	return o
}

func (o EdgeClusterPtrOutput) ToEdgeClusterPtrOutputWithContext(ctx context.Context) EdgeClusterPtrOutput {
	return o
}

func (o EdgeClusterPtrOutput) Elem() EdgeClusterOutput {
	return o.ApplyT(func(v *EdgeCluster) EdgeCluster {
		if v != nil {
			return *v
		}
		var ret EdgeCluster
		return ret
	}).(EdgeClusterOutput)
}

// Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
func (o EdgeClusterPtrOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeCluster) *string {
		if v == nil {
			return nil
		}
		return v.ResourceLink
	}).(pulumi.StringPtrOutput)
}

// EdgeCluster contains information specific to Google Edge Clusters.
type EdgeClusterResponse struct {
	// Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
	ResourceLink string `pulumi:"resourceLink"`
}

// EdgeCluster contains information specific to Google Edge Clusters.
type EdgeClusterResponseOutput struct{ *pulumi.OutputState }

func (EdgeClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeClusterResponse)(nil)).Elem()
}

func (o EdgeClusterResponseOutput) ToEdgeClusterResponseOutput() EdgeClusterResponseOutput {
	return o
}

func (o EdgeClusterResponseOutput) ToEdgeClusterResponseOutputWithContext(ctx context.Context) EdgeClusterResponseOutput {
	return o
}

// Immutable. Self-link of the Google Cloud resource for the Edge Cluster. For example: //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
func (o EdgeClusterResponseOutput) ResourceLink() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeClusterResponse) string { return v.ResourceLink }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateResponse struct {
	// The current state of the Feature resource in the Hub API.
	State string `pulumi:"state"`
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureResourceStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResourceStateResponse)(nil)).Elem()
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponseOutput() FeatureResourceStateResponseOutput {
	return o
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponseOutputWithContext(ctx context.Context) FeatureResourceStateResponseOutput {
	return o
}

// The current state of the Feature resource in the Hub API.
func (o FeatureResourceStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureResourceStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateResponse struct {
	// The high-level, machine-readable status of this Feature.
	Code string `pulumi:"code"`
	// A human-readable description of the current status.
	Description string `pulumi:"description"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime string `pulumi:"updateTime"`
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStateResponse)(nil)).Elem()
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutput() FeatureStateResponseOutput {
	return o
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutputWithContext(ctx context.Context) FeatureStateResponseOutput {
	return o
}

// The high-level, machine-readable status of this Feature.
func (o FeatureStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable description of the current status.
func (o FeatureStateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The time this status and any related Feature-specific details were updated.
func (o FeatureStateResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// FleetLifecycleState describes the state of a Fleet resource.
type FleetLifecycleStateResponse struct {
	// The current state of the Fleet resource.
	Code string `pulumi:"code"`
}

// FleetLifecycleState describes the state of a Fleet resource.
type FleetLifecycleStateResponseOutput struct{ *pulumi.OutputState }

func (FleetLifecycleStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetLifecycleStateResponse)(nil)).Elem()
}

func (o FleetLifecycleStateResponseOutput) ToFleetLifecycleStateResponseOutput() FleetLifecycleStateResponseOutput {
	return o
}

func (o FleetLifecycleStateResponseOutput) ToFleetLifecycleStateResponseOutputWithContext(ctx context.Context) FleetLifecycleStateResponseOutput {
	return o
}

// The current state of the Fleet resource.
func (o FleetLifecycleStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v FleetLifecycleStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// All error details of the fleet observability feature.
type FleetObservabilityFeatureErrorResponse struct {
	// The code of the error.
	Code string `pulumi:"code"`
	// A human-readable description of the current status.
	Description string `pulumi:"description"`
}

// All error details of the fleet observability feature.
type FleetObservabilityFeatureErrorResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFeatureErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFeatureErrorResponse)(nil)).Elem()
}

func (o FleetObservabilityFeatureErrorResponseOutput) ToFleetObservabilityFeatureErrorResponseOutput() FleetObservabilityFeatureErrorResponseOutput {
	return o
}

func (o FleetObservabilityFeatureErrorResponseOutput) ToFleetObservabilityFeatureErrorResponseOutputWithContext(ctx context.Context) FleetObservabilityFeatureErrorResponseOutput {
	return o
}

// The code of the error.
func (o FleetObservabilityFeatureErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v FleetObservabilityFeatureErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable description of the current status.
func (o FleetObservabilityFeatureErrorResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v FleetObservabilityFeatureErrorResponse) string { return v.Description }).(pulumi.StringOutput)
}

type FleetObservabilityFeatureErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFeatureErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FleetObservabilityFeatureErrorResponse)(nil)).Elem()
}

func (o FleetObservabilityFeatureErrorResponseArrayOutput) ToFleetObservabilityFeatureErrorResponseArrayOutput() FleetObservabilityFeatureErrorResponseArrayOutput {
	return o
}

func (o FleetObservabilityFeatureErrorResponseArrayOutput) ToFleetObservabilityFeatureErrorResponseArrayOutputWithContext(ctx context.Context) FleetObservabilityFeatureErrorResponseArrayOutput {
	return o
}

func (o FleetObservabilityFeatureErrorResponseArrayOutput) Index(i pulumi.IntInput) FleetObservabilityFeatureErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FleetObservabilityFeatureErrorResponse {
		return vs[0].([]FleetObservabilityFeatureErrorResponse)[vs[1].(int)]
	}).(FleetObservabilityFeatureErrorResponseOutput)
}

// **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
type FleetObservabilityFeatureSpec struct {
	// Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
	LoggingConfig *FleetObservabilityLoggingConfig `pulumi:"loggingConfig"`
}

// FleetObservabilityFeatureSpecInput is an input type that accepts FleetObservabilityFeatureSpecArgs and FleetObservabilityFeatureSpecOutput values.
// You can construct a concrete instance of `FleetObservabilityFeatureSpecInput` via:
//
//	FleetObservabilityFeatureSpecArgs{...}
type FleetObservabilityFeatureSpecInput interface {
	pulumi.Input

	ToFleetObservabilityFeatureSpecOutput() FleetObservabilityFeatureSpecOutput
	ToFleetObservabilityFeatureSpecOutputWithContext(context.Context) FleetObservabilityFeatureSpecOutput
}

// **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
type FleetObservabilityFeatureSpecArgs struct {
	// Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
	LoggingConfig FleetObservabilityLoggingConfigPtrInput `pulumi:"loggingConfig"`
}

func (FleetObservabilityFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFeatureSpec)(nil)).Elem()
}

func (i FleetObservabilityFeatureSpecArgs) ToFleetObservabilityFeatureSpecOutput() FleetObservabilityFeatureSpecOutput {
	return i.ToFleetObservabilityFeatureSpecOutputWithContext(context.Background())
}

func (i FleetObservabilityFeatureSpecArgs) ToFleetObservabilityFeatureSpecOutputWithContext(ctx context.Context) FleetObservabilityFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityFeatureSpecOutput)
}

func (i FleetObservabilityFeatureSpecArgs) ToFleetObservabilityFeatureSpecPtrOutput() FleetObservabilityFeatureSpecPtrOutput {
	return i.ToFleetObservabilityFeatureSpecPtrOutputWithContext(context.Background())
}

func (i FleetObservabilityFeatureSpecArgs) ToFleetObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityFeatureSpecOutput).ToFleetObservabilityFeatureSpecPtrOutputWithContext(ctx)
}

// FleetObservabilityFeatureSpecPtrInput is an input type that accepts FleetObservabilityFeatureSpecArgs, FleetObservabilityFeatureSpecPtr and FleetObservabilityFeatureSpecPtrOutput values.
// You can construct a concrete instance of `FleetObservabilityFeatureSpecPtrInput` via:
//
//	        FleetObservabilityFeatureSpecArgs{...}
//
//	or:
//
//	        nil
type FleetObservabilityFeatureSpecPtrInput interface {
	pulumi.Input

	ToFleetObservabilityFeatureSpecPtrOutput() FleetObservabilityFeatureSpecPtrOutput
	ToFleetObservabilityFeatureSpecPtrOutputWithContext(context.Context) FleetObservabilityFeatureSpecPtrOutput
}

type fleetObservabilityFeatureSpecPtrType FleetObservabilityFeatureSpecArgs

func FleetObservabilityFeatureSpecPtr(v *FleetObservabilityFeatureSpecArgs) FleetObservabilityFeatureSpecPtrInput {
	return (*fleetObservabilityFeatureSpecPtrType)(v)
}

func (*fleetObservabilityFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityFeatureSpec)(nil)).Elem()
}

func (i *fleetObservabilityFeatureSpecPtrType) ToFleetObservabilityFeatureSpecPtrOutput() FleetObservabilityFeatureSpecPtrOutput {
	return i.ToFleetObservabilityFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *fleetObservabilityFeatureSpecPtrType) ToFleetObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityFeatureSpecPtrOutput)
}

// **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
type FleetObservabilityFeatureSpecOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFeatureSpec)(nil)).Elem()
}

func (o FleetObservabilityFeatureSpecOutput) ToFleetObservabilityFeatureSpecOutput() FleetObservabilityFeatureSpecOutput {
	return o
}

func (o FleetObservabilityFeatureSpecOutput) ToFleetObservabilityFeatureSpecOutputWithContext(ctx context.Context) FleetObservabilityFeatureSpecOutput {
	return o
}

func (o FleetObservabilityFeatureSpecOutput) ToFleetObservabilityFeatureSpecPtrOutput() FleetObservabilityFeatureSpecPtrOutput {
	return o.ToFleetObservabilityFeatureSpecPtrOutputWithContext(context.Background())
}

func (o FleetObservabilityFeatureSpecOutput) ToFleetObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetObservabilityFeatureSpec) *FleetObservabilityFeatureSpec {
		return &v
	}).(FleetObservabilityFeatureSpecPtrOutput)
}

// Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
func (o FleetObservabilityFeatureSpecOutput) LoggingConfig() FleetObservabilityLoggingConfigPtrOutput {
	return o.ApplyT(func(v FleetObservabilityFeatureSpec) *FleetObservabilityLoggingConfig { return v.LoggingConfig }).(FleetObservabilityLoggingConfigPtrOutput)
}

type FleetObservabilityFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityFeatureSpec)(nil)).Elem()
}

func (o FleetObservabilityFeatureSpecPtrOutput) ToFleetObservabilityFeatureSpecPtrOutput() FleetObservabilityFeatureSpecPtrOutput {
	return o
}

func (o FleetObservabilityFeatureSpecPtrOutput) ToFleetObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityFeatureSpecPtrOutput {
	return o
}

func (o FleetObservabilityFeatureSpecPtrOutput) Elem() FleetObservabilityFeatureSpecOutput {
	return o.ApplyT(func(v *FleetObservabilityFeatureSpec) FleetObservabilityFeatureSpec {
		if v != nil {
			return *v
		}
		var ret FleetObservabilityFeatureSpec
		return ret
	}).(FleetObservabilityFeatureSpecOutput)
}

// Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
func (o FleetObservabilityFeatureSpecPtrOutput) LoggingConfig() FleetObservabilityLoggingConfigPtrOutput {
	return o.ApplyT(func(v *FleetObservabilityFeatureSpec) *FleetObservabilityLoggingConfig {
		if v == nil {
			return nil
		}
		return v.LoggingConfig
	}).(FleetObservabilityLoggingConfigPtrOutput)
}

// **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
type FleetObservabilityFeatureSpecResponse struct {
	// Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
	LoggingConfig FleetObservabilityLoggingConfigResponse `pulumi:"loggingConfig"`
}

// **Fleet Observability**: The Hub-wide input for the FleetObservability feature.
type FleetObservabilityFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFeatureSpecResponse)(nil)).Elem()
}

func (o FleetObservabilityFeatureSpecResponseOutput) ToFleetObservabilityFeatureSpecResponseOutput() FleetObservabilityFeatureSpecResponseOutput {
	return o
}

func (o FleetObservabilityFeatureSpecResponseOutput) ToFleetObservabilityFeatureSpecResponseOutputWithContext(ctx context.Context) FleetObservabilityFeatureSpecResponseOutput {
	return o
}

// Specified if fleet logging feature is enabled for the entire fleet. If UNSPECIFIED, fleet logging feature is disabled for the entire fleet.
func (o FleetObservabilityFeatureSpecResponseOutput) LoggingConfig() FleetObservabilityLoggingConfigResponseOutput {
	return o.ApplyT(func(v FleetObservabilityFeatureSpecResponse) FleetObservabilityLoggingConfigResponse {
		return v.LoggingConfig
	}).(FleetObservabilityLoggingConfigResponseOutput)
}

// **FleetObservability**: Hub-wide Feature for FleetObservability feature. state.
type FleetObservabilityFeatureStateResponse struct {
	// The feature state of default logging.
	Logging FleetObservabilityFleetObservabilityLoggingStateResponse `pulumi:"logging"`
	// The feature state of fleet monitoring.
	Monitoring FleetObservabilityFleetObservabilityMonitoringStateResponse `pulumi:"monitoring"`
}

// **FleetObservability**: Hub-wide Feature for FleetObservability feature. state.
type FleetObservabilityFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFeatureStateResponse)(nil)).Elem()
}

func (o FleetObservabilityFeatureStateResponseOutput) ToFleetObservabilityFeatureStateResponseOutput() FleetObservabilityFeatureStateResponseOutput {
	return o
}

func (o FleetObservabilityFeatureStateResponseOutput) ToFleetObservabilityFeatureStateResponseOutputWithContext(ctx context.Context) FleetObservabilityFeatureStateResponseOutput {
	return o
}

// The feature state of default logging.
func (o FleetObservabilityFeatureStateResponseOutput) Logging() FleetObservabilityFleetObservabilityLoggingStateResponseOutput {
	return o.ApplyT(func(v FleetObservabilityFeatureStateResponse) FleetObservabilityFleetObservabilityLoggingStateResponse {
		return v.Logging
	}).(FleetObservabilityFleetObservabilityLoggingStateResponseOutput)
}

// The feature state of fleet monitoring.
func (o FleetObservabilityFeatureStateResponseOutput) Monitoring() FleetObservabilityFleetObservabilityMonitoringStateResponseOutput {
	return o.ApplyT(func(v FleetObservabilityFeatureStateResponse) FleetObservabilityFleetObservabilityMonitoringStateResponse {
		return v.Monitoring
	}).(FleetObservabilityFleetObservabilityMonitoringStateResponseOutput)
}

// Base state for fleet observability feature.
type FleetObservabilityFleetObservabilityBaseFeatureStateResponse struct {
	// The high-level, machine-readable status of this Feature.
	Code string `pulumi:"code"`
	// Errors after reconciling the monitoring and logging feature if the code is not OK.
	Errors []FleetObservabilityFeatureErrorResponse `pulumi:"errors"`
}

// Base state for fleet observability feature.
type FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFleetObservabilityBaseFeatureStateResponse)(nil)).Elem()
}

func (o FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput) ToFleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput() FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput {
	return o
}

func (o FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput) ToFleetObservabilityFleetObservabilityBaseFeatureStateResponseOutputWithContext(ctx context.Context) FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput {
	return o
}

// The high-level, machine-readable status of this Feature.
func (o FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v FleetObservabilityFleetObservabilityBaseFeatureStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Errors after reconciling the monitoring and logging feature if the code is not OK.
func (o FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput) Errors() FleetObservabilityFeatureErrorResponseArrayOutput {
	return o.ApplyT(func(v FleetObservabilityFleetObservabilityBaseFeatureStateResponse) []FleetObservabilityFeatureErrorResponse {
		return v.Errors
	}).(FleetObservabilityFeatureErrorResponseArrayOutput)
}

// Feature state for logging feature.
type FleetObservabilityFleetObservabilityLoggingStateResponse struct {
	// The base feature state of fleet default log.
	DefaultLog FleetObservabilityFleetObservabilityBaseFeatureStateResponse `pulumi:"defaultLog"`
	// The base feature state of fleet scope log.
	ScopeLog FleetObservabilityFleetObservabilityBaseFeatureStateResponse `pulumi:"scopeLog"`
}

// Feature state for logging feature.
type FleetObservabilityFleetObservabilityLoggingStateResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFleetObservabilityLoggingStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFleetObservabilityLoggingStateResponse)(nil)).Elem()
}

func (o FleetObservabilityFleetObservabilityLoggingStateResponseOutput) ToFleetObservabilityFleetObservabilityLoggingStateResponseOutput() FleetObservabilityFleetObservabilityLoggingStateResponseOutput {
	return o
}

func (o FleetObservabilityFleetObservabilityLoggingStateResponseOutput) ToFleetObservabilityFleetObservabilityLoggingStateResponseOutputWithContext(ctx context.Context) FleetObservabilityFleetObservabilityLoggingStateResponseOutput {
	return o
}

// The base feature state of fleet default log.
func (o FleetObservabilityFleetObservabilityLoggingStateResponseOutput) DefaultLog() FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput {
	return o.ApplyT(func(v FleetObservabilityFleetObservabilityLoggingStateResponse) FleetObservabilityFleetObservabilityBaseFeatureStateResponse {
		return v.DefaultLog
	}).(FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput)
}

// The base feature state of fleet scope log.
func (o FleetObservabilityFleetObservabilityLoggingStateResponseOutput) ScopeLog() FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput {
	return o.ApplyT(func(v FleetObservabilityFleetObservabilityLoggingStateResponse) FleetObservabilityFleetObservabilityBaseFeatureStateResponse {
		return v.ScopeLog
	}).(FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput)
}

// Feature state for monitoring feature.
type FleetObservabilityFleetObservabilityMonitoringStateResponse struct {
	// The base feature state of fleet monitoring feature.
	State FleetObservabilityFleetObservabilityBaseFeatureStateResponse `pulumi:"state"`
}

// Feature state for monitoring feature.
type FleetObservabilityFleetObservabilityMonitoringStateResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityFleetObservabilityMonitoringStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityFleetObservabilityMonitoringStateResponse)(nil)).Elem()
}

func (o FleetObservabilityFleetObservabilityMonitoringStateResponseOutput) ToFleetObservabilityFleetObservabilityMonitoringStateResponseOutput() FleetObservabilityFleetObservabilityMonitoringStateResponseOutput {
	return o
}

func (o FleetObservabilityFleetObservabilityMonitoringStateResponseOutput) ToFleetObservabilityFleetObservabilityMonitoringStateResponseOutputWithContext(ctx context.Context) FleetObservabilityFleetObservabilityMonitoringStateResponseOutput {
	return o
}

// The base feature state of fleet monitoring feature.
func (o FleetObservabilityFleetObservabilityMonitoringStateResponseOutput) State() FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput {
	return o.ApplyT(func(v FleetObservabilityFleetObservabilityMonitoringStateResponse) FleetObservabilityFleetObservabilityBaseFeatureStateResponse {
		return v.State
	}).(FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput)
}

// LoggingConfig defines the configuration for different types of logs.
type FleetObservabilityLoggingConfig struct {
	// Specified if applying the default routing config to logs not specified in other configs.
	DefaultConfig *FleetObservabilityRoutingConfig `pulumi:"defaultConfig"`
	// Specified if applying the routing config to all logs for all fleet scopes.
	FleetScopeLogsConfig *FleetObservabilityRoutingConfig `pulumi:"fleetScopeLogsConfig"`
}

// FleetObservabilityLoggingConfigInput is an input type that accepts FleetObservabilityLoggingConfigArgs and FleetObservabilityLoggingConfigOutput values.
// You can construct a concrete instance of `FleetObservabilityLoggingConfigInput` via:
//
//	FleetObservabilityLoggingConfigArgs{...}
type FleetObservabilityLoggingConfigInput interface {
	pulumi.Input

	ToFleetObservabilityLoggingConfigOutput() FleetObservabilityLoggingConfigOutput
	ToFleetObservabilityLoggingConfigOutputWithContext(context.Context) FleetObservabilityLoggingConfigOutput
}

// LoggingConfig defines the configuration for different types of logs.
type FleetObservabilityLoggingConfigArgs struct {
	// Specified if applying the default routing config to logs not specified in other configs.
	DefaultConfig FleetObservabilityRoutingConfigPtrInput `pulumi:"defaultConfig"`
	// Specified if applying the routing config to all logs for all fleet scopes.
	FleetScopeLogsConfig FleetObservabilityRoutingConfigPtrInput `pulumi:"fleetScopeLogsConfig"`
}

func (FleetObservabilityLoggingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityLoggingConfig)(nil)).Elem()
}

func (i FleetObservabilityLoggingConfigArgs) ToFleetObservabilityLoggingConfigOutput() FleetObservabilityLoggingConfigOutput {
	return i.ToFleetObservabilityLoggingConfigOutputWithContext(context.Background())
}

func (i FleetObservabilityLoggingConfigArgs) ToFleetObservabilityLoggingConfigOutputWithContext(ctx context.Context) FleetObservabilityLoggingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityLoggingConfigOutput)
}

func (i FleetObservabilityLoggingConfigArgs) ToFleetObservabilityLoggingConfigPtrOutput() FleetObservabilityLoggingConfigPtrOutput {
	return i.ToFleetObservabilityLoggingConfigPtrOutputWithContext(context.Background())
}

func (i FleetObservabilityLoggingConfigArgs) ToFleetObservabilityLoggingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityLoggingConfigOutput).ToFleetObservabilityLoggingConfigPtrOutputWithContext(ctx)
}

// FleetObservabilityLoggingConfigPtrInput is an input type that accepts FleetObservabilityLoggingConfigArgs, FleetObservabilityLoggingConfigPtr and FleetObservabilityLoggingConfigPtrOutput values.
// You can construct a concrete instance of `FleetObservabilityLoggingConfigPtrInput` via:
//
//	        FleetObservabilityLoggingConfigArgs{...}
//
//	or:
//
//	        nil
type FleetObservabilityLoggingConfigPtrInput interface {
	pulumi.Input

	ToFleetObservabilityLoggingConfigPtrOutput() FleetObservabilityLoggingConfigPtrOutput
	ToFleetObservabilityLoggingConfigPtrOutputWithContext(context.Context) FleetObservabilityLoggingConfigPtrOutput
}

type fleetObservabilityLoggingConfigPtrType FleetObservabilityLoggingConfigArgs

func FleetObservabilityLoggingConfigPtr(v *FleetObservabilityLoggingConfigArgs) FleetObservabilityLoggingConfigPtrInput {
	return (*fleetObservabilityLoggingConfigPtrType)(v)
}

func (*fleetObservabilityLoggingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityLoggingConfig)(nil)).Elem()
}

func (i *fleetObservabilityLoggingConfigPtrType) ToFleetObservabilityLoggingConfigPtrOutput() FleetObservabilityLoggingConfigPtrOutput {
	return i.ToFleetObservabilityLoggingConfigPtrOutputWithContext(context.Background())
}

func (i *fleetObservabilityLoggingConfigPtrType) ToFleetObservabilityLoggingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityLoggingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityLoggingConfigPtrOutput)
}

// LoggingConfig defines the configuration for different types of logs.
type FleetObservabilityLoggingConfigOutput struct{ *pulumi.OutputState }

func (FleetObservabilityLoggingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityLoggingConfig)(nil)).Elem()
}

func (o FleetObservabilityLoggingConfigOutput) ToFleetObservabilityLoggingConfigOutput() FleetObservabilityLoggingConfigOutput {
	return o
}

func (o FleetObservabilityLoggingConfigOutput) ToFleetObservabilityLoggingConfigOutputWithContext(ctx context.Context) FleetObservabilityLoggingConfigOutput {
	return o
}

func (o FleetObservabilityLoggingConfigOutput) ToFleetObservabilityLoggingConfigPtrOutput() FleetObservabilityLoggingConfigPtrOutput {
	return o.ToFleetObservabilityLoggingConfigPtrOutputWithContext(context.Background())
}

func (o FleetObservabilityLoggingConfigOutput) ToFleetObservabilityLoggingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityLoggingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetObservabilityLoggingConfig) *FleetObservabilityLoggingConfig {
		return &v
	}).(FleetObservabilityLoggingConfigPtrOutput)
}

// Specified if applying the default routing config to logs not specified in other configs.
func (o FleetObservabilityLoggingConfigOutput) DefaultConfig() FleetObservabilityRoutingConfigPtrOutput {
	return o.ApplyT(func(v FleetObservabilityLoggingConfig) *FleetObservabilityRoutingConfig { return v.DefaultConfig }).(FleetObservabilityRoutingConfigPtrOutput)
}

// Specified if applying the routing config to all logs for all fleet scopes.
func (o FleetObservabilityLoggingConfigOutput) FleetScopeLogsConfig() FleetObservabilityRoutingConfigPtrOutput {
	return o.ApplyT(func(v FleetObservabilityLoggingConfig) *FleetObservabilityRoutingConfig {
		return v.FleetScopeLogsConfig
	}).(FleetObservabilityRoutingConfigPtrOutput)
}

type FleetObservabilityLoggingConfigPtrOutput struct{ *pulumi.OutputState }

func (FleetObservabilityLoggingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityLoggingConfig)(nil)).Elem()
}

func (o FleetObservabilityLoggingConfigPtrOutput) ToFleetObservabilityLoggingConfigPtrOutput() FleetObservabilityLoggingConfigPtrOutput {
	return o
}

func (o FleetObservabilityLoggingConfigPtrOutput) ToFleetObservabilityLoggingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityLoggingConfigPtrOutput {
	return o
}

func (o FleetObservabilityLoggingConfigPtrOutput) Elem() FleetObservabilityLoggingConfigOutput {
	return o.ApplyT(func(v *FleetObservabilityLoggingConfig) FleetObservabilityLoggingConfig {
		if v != nil {
			return *v
		}
		var ret FleetObservabilityLoggingConfig
		return ret
	}).(FleetObservabilityLoggingConfigOutput)
}

// Specified if applying the default routing config to logs not specified in other configs.
func (o FleetObservabilityLoggingConfigPtrOutput) DefaultConfig() FleetObservabilityRoutingConfigPtrOutput {
	return o.ApplyT(func(v *FleetObservabilityLoggingConfig) *FleetObservabilityRoutingConfig {
		if v == nil {
			return nil
		}
		return v.DefaultConfig
	}).(FleetObservabilityRoutingConfigPtrOutput)
}

// Specified if applying the routing config to all logs for all fleet scopes.
func (o FleetObservabilityLoggingConfigPtrOutput) FleetScopeLogsConfig() FleetObservabilityRoutingConfigPtrOutput {
	return o.ApplyT(func(v *FleetObservabilityLoggingConfig) *FleetObservabilityRoutingConfig {
		if v == nil {
			return nil
		}
		return v.FleetScopeLogsConfig
	}).(FleetObservabilityRoutingConfigPtrOutput)
}

// LoggingConfig defines the configuration for different types of logs.
type FleetObservabilityLoggingConfigResponse struct {
	// Specified if applying the default routing config to logs not specified in other configs.
	DefaultConfig FleetObservabilityRoutingConfigResponse `pulumi:"defaultConfig"`
	// Specified if applying the routing config to all logs for all fleet scopes.
	FleetScopeLogsConfig FleetObservabilityRoutingConfigResponse `pulumi:"fleetScopeLogsConfig"`
}

// LoggingConfig defines the configuration for different types of logs.
type FleetObservabilityLoggingConfigResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityLoggingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityLoggingConfigResponse)(nil)).Elem()
}

func (o FleetObservabilityLoggingConfigResponseOutput) ToFleetObservabilityLoggingConfigResponseOutput() FleetObservabilityLoggingConfigResponseOutput {
	return o
}

func (o FleetObservabilityLoggingConfigResponseOutput) ToFleetObservabilityLoggingConfigResponseOutputWithContext(ctx context.Context) FleetObservabilityLoggingConfigResponseOutput {
	return o
}

// Specified if applying the default routing config to logs not specified in other configs.
func (o FleetObservabilityLoggingConfigResponseOutput) DefaultConfig() FleetObservabilityRoutingConfigResponseOutput {
	return o.ApplyT(func(v FleetObservabilityLoggingConfigResponse) FleetObservabilityRoutingConfigResponse {
		return v.DefaultConfig
	}).(FleetObservabilityRoutingConfigResponseOutput)
}

// Specified if applying the routing config to all logs for all fleet scopes.
func (o FleetObservabilityLoggingConfigResponseOutput) FleetScopeLogsConfig() FleetObservabilityRoutingConfigResponseOutput {
	return o.ApplyT(func(v FleetObservabilityLoggingConfigResponse) FleetObservabilityRoutingConfigResponse {
		return v.FleetScopeLogsConfig
	}).(FleetObservabilityRoutingConfigResponseOutput)
}

// **FleetObservability**: The membership-specific input for FleetObservability feature.
type FleetObservabilityMembershipSpec struct {
}

// FleetObservabilityMembershipSpecInput is an input type that accepts FleetObservabilityMembershipSpecArgs and FleetObservabilityMembershipSpecOutput values.
// You can construct a concrete instance of `FleetObservabilityMembershipSpecInput` via:
//
//	FleetObservabilityMembershipSpecArgs{...}
type FleetObservabilityMembershipSpecInput interface {
	pulumi.Input

	ToFleetObservabilityMembershipSpecOutput() FleetObservabilityMembershipSpecOutput
	ToFleetObservabilityMembershipSpecOutputWithContext(context.Context) FleetObservabilityMembershipSpecOutput
}

// **FleetObservability**: The membership-specific input for FleetObservability feature.
type FleetObservabilityMembershipSpecArgs struct {
}

func (FleetObservabilityMembershipSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityMembershipSpec)(nil)).Elem()
}

func (i FleetObservabilityMembershipSpecArgs) ToFleetObservabilityMembershipSpecOutput() FleetObservabilityMembershipSpecOutput {
	return i.ToFleetObservabilityMembershipSpecOutputWithContext(context.Background())
}

func (i FleetObservabilityMembershipSpecArgs) ToFleetObservabilityMembershipSpecOutputWithContext(ctx context.Context) FleetObservabilityMembershipSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityMembershipSpecOutput)
}

func (i FleetObservabilityMembershipSpecArgs) ToFleetObservabilityMembershipSpecPtrOutput() FleetObservabilityMembershipSpecPtrOutput {
	return i.ToFleetObservabilityMembershipSpecPtrOutputWithContext(context.Background())
}

func (i FleetObservabilityMembershipSpecArgs) ToFleetObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityMembershipSpecOutput).ToFleetObservabilityMembershipSpecPtrOutputWithContext(ctx)
}

// FleetObservabilityMembershipSpecPtrInput is an input type that accepts FleetObservabilityMembershipSpecArgs, FleetObservabilityMembershipSpecPtr and FleetObservabilityMembershipSpecPtrOutput values.
// You can construct a concrete instance of `FleetObservabilityMembershipSpecPtrInput` via:
//
//	        FleetObservabilityMembershipSpecArgs{...}
//
//	or:
//
//	        nil
type FleetObservabilityMembershipSpecPtrInput interface {
	pulumi.Input

	ToFleetObservabilityMembershipSpecPtrOutput() FleetObservabilityMembershipSpecPtrOutput
	ToFleetObservabilityMembershipSpecPtrOutputWithContext(context.Context) FleetObservabilityMembershipSpecPtrOutput
}

type fleetObservabilityMembershipSpecPtrType FleetObservabilityMembershipSpecArgs

func FleetObservabilityMembershipSpecPtr(v *FleetObservabilityMembershipSpecArgs) FleetObservabilityMembershipSpecPtrInput {
	return (*fleetObservabilityMembershipSpecPtrType)(v)
}

func (*fleetObservabilityMembershipSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityMembershipSpec)(nil)).Elem()
}

func (i *fleetObservabilityMembershipSpecPtrType) ToFleetObservabilityMembershipSpecPtrOutput() FleetObservabilityMembershipSpecPtrOutput {
	return i.ToFleetObservabilityMembershipSpecPtrOutputWithContext(context.Background())
}

func (i *fleetObservabilityMembershipSpecPtrType) ToFleetObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityMembershipSpecPtrOutput)
}

// **FleetObservability**: The membership-specific input for FleetObservability feature.
type FleetObservabilityMembershipSpecOutput struct{ *pulumi.OutputState }

func (FleetObservabilityMembershipSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityMembershipSpec)(nil)).Elem()
}

func (o FleetObservabilityMembershipSpecOutput) ToFleetObservabilityMembershipSpecOutput() FleetObservabilityMembershipSpecOutput {
	return o
}

func (o FleetObservabilityMembershipSpecOutput) ToFleetObservabilityMembershipSpecOutputWithContext(ctx context.Context) FleetObservabilityMembershipSpecOutput {
	return o
}

func (o FleetObservabilityMembershipSpecOutput) ToFleetObservabilityMembershipSpecPtrOutput() FleetObservabilityMembershipSpecPtrOutput {
	return o.ToFleetObservabilityMembershipSpecPtrOutputWithContext(context.Background())
}

func (o FleetObservabilityMembershipSpecOutput) ToFleetObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityMembershipSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetObservabilityMembershipSpec) *FleetObservabilityMembershipSpec {
		return &v
	}).(FleetObservabilityMembershipSpecPtrOutput)
}

type FleetObservabilityMembershipSpecPtrOutput struct{ *pulumi.OutputState }

func (FleetObservabilityMembershipSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityMembershipSpec)(nil)).Elem()
}

func (o FleetObservabilityMembershipSpecPtrOutput) ToFleetObservabilityMembershipSpecPtrOutput() FleetObservabilityMembershipSpecPtrOutput {
	return o
}

func (o FleetObservabilityMembershipSpecPtrOutput) ToFleetObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) FleetObservabilityMembershipSpecPtrOutput {
	return o
}

func (o FleetObservabilityMembershipSpecPtrOutput) Elem() FleetObservabilityMembershipSpecOutput {
	return o.ApplyT(func(v *FleetObservabilityMembershipSpec) FleetObservabilityMembershipSpec {
		if v != nil {
			return *v
		}
		var ret FleetObservabilityMembershipSpec
		return ret
	}).(FleetObservabilityMembershipSpecOutput)
}

// **FleetObservability**: The membership-specific input for FleetObservability feature.
type FleetObservabilityMembershipSpecResponse struct {
}

// **FleetObservability**: The membership-specific input for FleetObservability feature.
type FleetObservabilityMembershipSpecResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityMembershipSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityMembershipSpecResponse)(nil)).Elem()
}

func (o FleetObservabilityMembershipSpecResponseOutput) ToFleetObservabilityMembershipSpecResponseOutput() FleetObservabilityMembershipSpecResponseOutput {
	return o
}

func (o FleetObservabilityMembershipSpecResponseOutput) ToFleetObservabilityMembershipSpecResponseOutputWithContext(ctx context.Context) FleetObservabilityMembershipSpecResponseOutput {
	return o
}

// **FleetObservability**: Membership-specific Feature state for fleetobservability.
type FleetObservabilityMembershipStateResponse struct {
}

// **FleetObservability**: Membership-specific Feature state for fleetobservability.
type FleetObservabilityMembershipStateResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityMembershipStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityMembershipStateResponse)(nil)).Elem()
}

func (o FleetObservabilityMembershipStateResponseOutput) ToFleetObservabilityMembershipStateResponseOutput() FleetObservabilityMembershipStateResponseOutput {
	return o
}

func (o FleetObservabilityMembershipStateResponseOutput) ToFleetObservabilityMembershipStateResponseOutputWithContext(ctx context.Context) FleetObservabilityMembershipStateResponseOutput {
	return o
}

// RoutingConfig configures the behaviour of fleet logging feature.
type FleetObservabilityRoutingConfig struct {
	// mode configures the logs routing mode.
	Mode *FleetObservabilityRoutingConfigMode `pulumi:"mode"`
}

// FleetObservabilityRoutingConfigInput is an input type that accepts FleetObservabilityRoutingConfigArgs and FleetObservabilityRoutingConfigOutput values.
// You can construct a concrete instance of `FleetObservabilityRoutingConfigInput` via:
//
//	FleetObservabilityRoutingConfigArgs{...}
type FleetObservabilityRoutingConfigInput interface {
	pulumi.Input

	ToFleetObservabilityRoutingConfigOutput() FleetObservabilityRoutingConfigOutput
	ToFleetObservabilityRoutingConfigOutputWithContext(context.Context) FleetObservabilityRoutingConfigOutput
}

// RoutingConfig configures the behaviour of fleet logging feature.
type FleetObservabilityRoutingConfigArgs struct {
	// mode configures the logs routing mode.
	Mode FleetObservabilityRoutingConfigModePtrInput `pulumi:"mode"`
}

func (FleetObservabilityRoutingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityRoutingConfig)(nil)).Elem()
}

func (i FleetObservabilityRoutingConfigArgs) ToFleetObservabilityRoutingConfigOutput() FleetObservabilityRoutingConfigOutput {
	return i.ToFleetObservabilityRoutingConfigOutputWithContext(context.Background())
}

func (i FleetObservabilityRoutingConfigArgs) ToFleetObservabilityRoutingConfigOutputWithContext(ctx context.Context) FleetObservabilityRoutingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityRoutingConfigOutput)
}

func (i FleetObservabilityRoutingConfigArgs) ToFleetObservabilityRoutingConfigPtrOutput() FleetObservabilityRoutingConfigPtrOutput {
	return i.ToFleetObservabilityRoutingConfigPtrOutputWithContext(context.Background())
}

func (i FleetObservabilityRoutingConfigArgs) ToFleetObservabilityRoutingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityRoutingConfigOutput).ToFleetObservabilityRoutingConfigPtrOutputWithContext(ctx)
}

// FleetObservabilityRoutingConfigPtrInput is an input type that accepts FleetObservabilityRoutingConfigArgs, FleetObservabilityRoutingConfigPtr and FleetObservabilityRoutingConfigPtrOutput values.
// You can construct a concrete instance of `FleetObservabilityRoutingConfigPtrInput` via:
//
//	        FleetObservabilityRoutingConfigArgs{...}
//
//	or:
//
//	        nil
type FleetObservabilityRoutingConfigPtrInput interface {
	pulumi.Input

	ToFleetObservabilityRoutingConfigPtrOutput() FleetObservabilityRoutingConfigPtrOutput
	ToFleetObservabilityRoutingConfigPtrOutputWithContext(context.Context) FleetObservabilityRoutingConfigPtrOutput
}

type fleetObservabilityRoutingConfigPtrType FleetObservabilityRoutingConfigArgs

func FleetObservabilityRoutingConfigPtr(v *FleetObservabilityRoutingConfigArgs) FleetObservabilityRoutingConfigPtrInput {
	return (*fleetObservabilityRoutingConfigPtrType)(v)
}

func (*fleetObservabilityRoutingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityRoutingConfig)(nil)).Elem()
}

func (i *fleetObservabilityRoutingConfigPtrType) ToFleetObservabilityRoutingConfigPtrOutput() FleetObservabilityRoutingConfigPtrOutput {
	return i.ToFleetObservabilityRoutingConfigPtrOutputWithContext(context.Background())
}

func (i *fleetObservabilityRoutingConfigPtrType) ToFleetObservabilityRoutingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityRoutingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetObservabilityRoutingConfigPtrOutput)
}

// RoutingConfig configures the behaviour of fleet logging feature.
type FleetObservabilityRoutingConfigOutput struct{ *pulumi.OutputState }

func (FleetObservabilityRoutingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityRoutingConfig)(nil)).Elem()
}

func (o FleetObservabilityRoutingConfigOutput) ToFleetObservabilityRoutingConfigOutput() FleetObservabilityRoutingConfigOutput {
	return o
}

func (o FleetObservabilityRoutingConfigOutput) ToFleetObservabilityRoutingConfigOutputWithContext(ctx context.Context) FleetObservabilityRoutingConfigOutput {
	return o
}

func (o FleetObservabilityRoutingConfigOutput) ToFleetObservabilityRoutingConfigPtrOutput() FleetObservabilityRoutingConfigPtrOutput {
	return o.ToFleetObservabilityRoutingConfigPtrOutputWithContext(context.Background())
}

func (o FleetObservabilityRoutingConfigOutput) ToFleetObservabilityRoutingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityRoutingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FleetObservabilityRoutingConfig) *FleetObservabilityRoutingConfig {
		return &v
	}).(FleetObservabilityRoutingConfigPtrOutput)
}

// mode configures the logs routing mode.
func (o FleetObservabilityRoutingConfigOutput) Mode() FleetObservabilityRoutingConfigModePtrOutput {
	return o.ApplyT(func(v FleetObservabilityRoutingConfig) *FleetObservabilityRoutingConfigMode { return v.Mode }).(FleetObservabilityRoutingConfigModePtrOutput)
}

type FleetObservabilityRoutingConfigPtrOutput struct{ *pulumi.OutputState }

func (FleetObservabilityRoutingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetObservabilityRoutingConfig)(nil)).Elem()
}

func (o FleetObservabilityRoutingConfigPtrOutput) ToFleetObservabilityRoutingConfigPtrOutput() FleetObservabilityRoutingConfigPtrOutput {
	return o
}

func (o FleetObservabilityRoutingConfigPtrOutput) ToFleetObservabilityRoutingConfigPtrOutputWithContext(ctx context.Context) FleetObservabilityRoutingConfigPtrOutput {
	return o
}

func (o FleetObservabilityRoutingConfigPtrOutput) Elem() FleetObservabilityRoutingConfigOutput {
	return o.ApplyT(func(v *FleetObservabilityRoutingConfig) FleetObservabilityRoutingConfig {
		if v != nil {
			return *v
		}
		var ret FleetObservabilityRoutingConfig
		return ret
	}).(FleetObservabilityRoutingConfigOutput)
}

// mode configures the logs routing mode.
func (o FleetObservabilityRoutingConfigPtrOutput) Mode() FleetObservabilityRoutingConfigModePtrOutput {
	return o.ApplyT(func(v *FleetObservabilityRoutingConfig) *FleetObservabilityRoutingConfigMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(FleetObservabilityRoutingConfigModePtrOutput)
}

// RoutingConfig configures the behaviour of fleet logging feature.
type FleetObservabilityRoutingConfigResponse struct {
	// mode configures the logs routing mode.
	Mode string `pulumi:"mode"`
}

// RoutingConfig configures the behaviour of fleet logging feature.
type FleetObservabilityRoutingConfigResponseOutput struct{ *pulumi.OutputState }

func (FleetObservabilityRoutingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FleetObservabilityRoutingConfigResponse)(nil)).Elem()
}

func (o FleetObservabilityRoutingConfigResponseOutput) ToFleetObservabilityRoutingConfigResponseOutput() FleetObservabilityRoutingConfigResponseOutput {
	return o
}

func (o FleetObservabilityRoutingConfigResponseOutput) ToFleetObservabilityRoutingConfigResponseOutputWithContext(ctx context.Context) FleetObservabilityRoutingConfigResponseOutput {
	return o
}

// mode configures the logs routing mode.
func (o FleetObservabilityRoutingConfigResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v FleetObservabilityRoutingConfigResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// GkeCluster contains information specific to GKE clusters.
type GkeCluster struct {
	// Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
	ResourceLink *string `pulumi:"resourceLink"`
}

// GkeClusterInput is an input type that accepts GkeClusterArgs and GkeClusterOutput values.
// You can construct a concrete instance of `GkeClusterInput` via:
//
//	GkeClusterArgs{...}
type GkeClusterInput interface {
	pulumi.Input

	ToGkeClusterOutput() GkeClusterOutput
	ToGkeClusterOutputWithContext(context.Context) GkeClusterOutput
}

// GkeCluster contains information specific to GKE clusters.
type GkeClusterArgs struct {
	// Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
	ResourceLink pulumi.StringPtrInput `pulumi:"resourceLink"`
}

func (GkeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeCluster)(nil)).Elem()
}

func (i GkeClusterArgs) ToGkeClusterOutput() GkeClusterOutput {
	return i.ToGkeClusterOutputWithContext(context.Background())
}

func (i GkeClusterArgs) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterOutput)
}

func (i GkeClusterArgs) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return i.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (i GkeClusterArgs) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterOutput).ToGkeClusterPtrOutputWithContext(ctx)
}

// GkeClusterPtrInput is an input type that accepts GkeClusterArgs, GkeClusterPtr and GkeClusterPtrOutput values.
// You can construct a concrete instance of `GkeClusterPtrInput` via:
//
//	        GkeClusterArgs{...}
//
//	or:
//
//	        nil
type GkeClusterPtrInput interface {
	pulumi.Input

	ToGkeClusterPtrOutput() GkeClusterPtrOutput
	ToGkeClusterPtrOutputWithContext(context.Context) GkeClusterPtrOutput
}

type gkeClusterPtrType GkeClusterArgs

func GkeClusterPtr(v *GkeClusterArgs) GkeClusterPtrInput {
	return (*gkeClusterPtrType)(v)
}

func (*gkeClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (i *gkeClusterPtrType) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return i.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (i *gkeClusterPtrType) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GkeClusterPtrOutput)
}

// GkeCluster contains information specific to GKE clusters.
type GkeClusterOutput struct{ *pulumi.OutputState }

func (GkeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeCluster)(nil)).Elem()
}

func (o GkeClusterOutput) ToGkeClusterOutput() GkeClusterOutput {
	return o
}

func (o GkeClusterOutput) ToGkeClusterOutputWithContext(ctx context.Context) GkeClusterOutput {
	return o
}

func (o GkeClusterOutput) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return o.ToGkeClusterPtrOutputWithContext(context.Background())
}

func (o GkeClusterOutput) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GkeCluster) *GkeCluster {
		return &v
	}).(GkeClusterPtrOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
func (o GkeClusterOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GkeCluster) *string { return v.ResourceLink }).(pulumi.StringPtrOutput)
}

type GkeClusterPtrOutput struct{ *pulumi.OutputState }

func (GkeClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GkeCluster)(nil)).Elem()
}

func (o GkeClusterPtrOutput) ToGkeClusterPtrOutput() GkeClusterPtrOutput {
	return o
}

func (o GkeClusterPtrOutput) ToGkeClusterPtrOutputWithContext(ctx context.Context) GkeClusterPtrOutput {
	return o
}

func (o GkeClusterPtrOutput) Elem() GkeClusterOutput {
	return o.ApplyT(func(v *GkeCluster) GkeCluster {
		if v != nil {
			return *v
		}
		var ret GkeCluster
		return ret
	}).(GkeClusterOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
func (o GkeClusterPtrOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GkeCluster) *string {
		if v == nil {
			return nil
		}
		return v.ResourceLink
	}).(pulumi.StringPtrOutput)
}

// GkeCluster contains information specific to GKE clusters.
type GkeClusterResponse struct {
	// If cluster_missing is set then it denotes that the GKE cluster no longer exists in the GKE Control Plane.
	ClusterMissing bool `pulumi:"clusterMissing"`
	// Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
	ResourceLink string `pulumi:"resourceLink"`
}

// GkeCluster contains information specific to GKE clusters.
type GkeClusterResponseOutput struct{ *pulumi.OutputState }

func (GkeClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GkeClusterResponse)(nil)).Elem()
}

func (o GkeClusterResponseOutput) ToGkeClusterResponseOutput() GkeClusterResponseOutput {
	return o
}

func (o GkeClusterResponseOutput) ToGkeClusterResponseOutputWithContext(ctx context.Context) GkeClusterResponseOutput {
	return o
}

// If cluster_missing is set then it denotes that the GKE cluster no longer exists in the GKE Control Plane.
func (o GkeClusterResponseOutput) ClusterMissing() pulumi.BoolOutput {
	return o.ApplyT(func(v GkeClusterResponse) bool { return v.ClusterMissing }).(pulumi.BoolOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE cluster. For example: //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster Zonal clusters are also supported.
func (o GkeClusterResponseOutput) ResourceLink() pulumi.StringOutput {
	return o.ApplyT(func(v GkeClusterResponse) string { return v.ResourceLink }).(pulumi.StringOutput)
}

// Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
type IdentityServiceAuthMethod struct {
	// AzureAD specific Configuration.
	AzureadConfig *IdentityServiceAzureADConfig `pulumi:"azureadConfig"`
	// GoogleConfig specific configuration.
	GoogleConfig *IdentityServiceGoogleConfig `pulumi:"googleConfig"`
	// Identifier for auth config.
	Name *string `pulumi:"name"`
	// OIDC specific configuration.
	OidcConfig *IdentityServiceOidcConfig `pulumi:"oidcConfig"`
	// Proxy server address to use for auth method.
	Proxy *string `pulumi:"proxy"`
}

// IdentityServiceAuthMethodInput is an input type that accepts IdentityServiceAuthMethodArgs and IdentityServiceAuthMethodOutput values.
// You can construct a concrete instance of `IdentityServiceAuthMethodInput` via:
//
//	IdentityServiceAuthMethodArgs{...}
type IdentityServiceAuthMethodInput interface {
	pulumi.Input

	ToIdentityServiceAuthMethodOutput() IdentityServiceAuthMethodOutput
	ToIdentityServiceAuthMethodOutputWithContext(context.Context) IdentityServiceAuthMethodOutput
}

// Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
type IdentityServiceAuthMethodArgs struct {
	// AzureAD specific Configuration.
	AzureadConfig IdentityServiceAzureADConfigPtrInput `pulumi:"azureadConfig"`
	// GoogleConfig specific configuration.
	GoogleConfig IdentityServiceGoogleConfigPtrInput `pulumi:"googleConfig"`
	// Identifier for auth config.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// OIDC specific configuration.
	OidcConfig IdentityServiceOidcConfigPtrInput `pulumi:"oidcConfig"`
	// Proxy server address to use for auth method.
	Proxy pulumi.StringPtrInput `pulumi:"proxy"`
}

func (IdentityServiceAuthMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceAuthMethod)(nil)).Elem()
}

func (i IdentityServiceAuthMethodArgs) ToIdentityServiceAuthMethodOutput() IdentityServiceAuthMethodOutput {
	return i.ToIdentityServiceAuthMethodOutputWithContext(context.Background())
}

func (i IdentityServiceAuthMethodArgs) ToIdentityServiceAuthMethodOutputWithContext(ctx context.Context) IdentityServiceAuthMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceAuthMethodOutput)
}

// IdentityServiceAuthMethodArrayInput is an input type that accepts IdentityServiceAuthMethodArray and IdentityServiceAuthMethodArrayOutput values.
// You can construct a concrete instance of `IdentityServiceAuthMethodArrayInput` via:
//
//	IdentityServiceAuthMethodArray{ IdentityServiceAuthMethodArgs{...} }
type IdentityServiceAuthMethodArrayInput interface {
	pulumi.Input

	ToIdentityServiceAuthMethodArrayOutput() IdentityServiceAuthMethodArrayOutput
	ToIdentityServiceAuthMethodArrayOutputWithContext(context.Context) IdentityServiceAuthMethodArrayOutput
}

type IdentityServiceAuthMethodArray []IdentityServiceAuthMethodInput

func (IdentityServiceAuthMethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityServiceAuthMethod)(nil)).Elem()
}

func (i IdentityServiceAuthMethodArray) ToIdentityServiceAuthMethodArrayOutput() IdentityServiceAuthMethodArrayOutput {
	return i.ToIdentityServiceAuthMethodArrayOutputWithContext(context.Background())
}

func (i IdentityServiceAuthMethodArray) ToIdentityServiceAuthMethodArrayOutputWithContext(ctx context.Context) IdentityServiceAuthMethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceAuthMethodArrayOutput)
}

// Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
type IdentityServiceAuthMethodOutput struct{ *pulumi.OutputState }

func (IdentityServiceAuthMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceAuthMethod)(nil)).Elem()
}

func (o IdentityServiceAuthMethodOutput) ToIdentityServiceAuthMethodOutput() IdentityServiceAuthMethodOutput {
	return o
}

func (o IdentityServiceAuthMethodOutput) ToIdentityServiceAuthMethodOutputWithContext(ctx context.Context) IdentityServiceAuthMethodOutput {
	return o
}

// AzureAD specific Configuration.
func (o IdentityServiceAuthMethodOutput) AzureadConfig() IdentityServiceAzureADConfigPtrOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethod) *IdentityServiceAzureADConfig { return v.AzureadConfig }).(IdentityServiceAzureADConfigPtrOutput)
}

// GoogleConfig specific configuration.
func (o IdentityServiceAuthMethodOutput) GoogleConfig() IdentityServiceGoogleConfigPtrOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethod) *IdentityServiceGoogleConfig { return v.GoogleConfig }).(IdentityServiceGoogleConfigPtrOutput)
}

// Identifier for auth config.
func (o IdentityServiceAuthMethodOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethod) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// OIDC specific configuration.
func (o IdentityServiceAuthMethodOutput) OidcConfig() IdentityServiceOidcConfigPtrOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethod) *IdentityServiceOidcConfig { return v.OidcConfig }).(IdentityServiceOidcConfigPtrOutput)
}

// Proxy server address to use for auth method.
func (o IdentityServiceAuthMethodOutput) Proxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethod) *string { return v.Proxy }).(pulumi.StringPtrOutput)
}

type IdentityServiceAuthMethodArrayOutput struct{ *pulumi.OutputState }

func (IdentityServiceAuthMethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityServiceAuthMethod)(nil)).Elem()
}

func (o IdentityServiceAuthMethodArrayOutput) ToIdentityServiceAuthMethodArrayOutput() IdentityServiceAuthMethodArrayOutput {
	return o
}

func (o IdentityServiceAuthMethodArrayOutput) ToIdentityServiceAuthMethodArrayOutputWithContext(ctx context.Context) IdentityServiceAuthMethodArrayOutput {
	return o
}

func (o IdentityServiceAuthMethodArrayOutput) Index(i pulumi.IntInput) IdentityServiceAuthMethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityServiceAuthMethod {
		return vs[0].([]IdentityServiceAuthMethod)[vs[1].(int)]
	}).(IdentityServiceAuthMethodOutput)
}

// Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
type IdentityServiceAuthMethodResponse struct {
	// AzureAD specific Configuration.
	AzureadConfig IdentityServiceAzureADConfigResponse `pulumi:"azureadConfig"`
	// GoogleConfig specific configuration.
	GoogleConfig IdentityServiceGoogleConfigResponse `pulumi:"googleConfig"`
	// Identifier for auth config.
	Name string `pulumi:"name"`
	// OIDC specific configuration.
	OidcConfig IdentityServiceOidcConfigResponse `pulumi:"oidcConfig"`
	// Proxy server address to use for auth method.
	Proxy string `pulumi:"proxy"`
}

// Configuration of an auth method for a member/cluster. Only one authentication method (e.g., OIDC and LDAP) can be set per AuthMethod.
type IdentityServiceAuthMethodResponseOutput struct{ *pulumi.OutputState }

func (IdentityServiceAuthMethodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceAuthMethodResponse)(nil)).Elem()
}

func (o IdentityServiceAuthMethodResponseOutput) ToIdentityServiceAuthMethodResponseOutput() IdentityServiceAuthMethodResponseOutput {
	return o
}

func (o IdentityServiceAuthMethodResponseOutput) ToIdentityServiceAuthMethodResponseOutputWithContext(ctx context.Context) IdentityServiceAuthMethodResponseOutput {
	return o
}

// AzureAD specific Configuration.
func (o IdentityServiceAuthMethodResponseOutput) AzureadConfig() IdentityServiceAzureADConfigResponseOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethodResponse) IdentityServiceAzureADConfigResponse { return v.AzureadConfig }).(IdentityServiceAzureADConfigResponseOutput)
}

// GoogleConfig specific configuration.
func (o IdentityServiceAuthMethodResponseOutput) GoogleConfig() IdentityServiceGoogleConfigResponseOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethodResponse) IdentityServiceGoogleConfigResponse { return v.GoogleConfig }).(IdentityServiceGoogleConfigResponseOutput)
}

// Identifier for auth config.
func (o IdentityServiceAuthMethodResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethodResponse) string { return v.Name }).(pulumi.StringOutput)
}

// OIDC specific configuration.
func (o IdentityServiceAuthMethodResponseOutput) OidcConfig() IdentityServiceOidcConfigResponseOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethodResponse) IdentityServiceOidcConfigResponse { return v.OidcConfig }).(IdentityServiceOidcConfigResponseOutput)
}

// Proxy server address to use for auth method.
func (o IdentityServiceAuthMethodResponseOutput) Proxy() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceAuthMethodResponse) string { return v.Proxy }).(pulumi.StringOutput)
}

type IdentityServiceAuthMethodResponseArrayOutput struct{ *pulumi.OutputState }

func (IdentityServiceAuthMethodResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityServiceAuthMethodResponse)(nil)).Elem()
}

func (o IdentityServiceAuthMethodResponseArrayOutput) ToIdentityServiceAuthMethodResponseArrayOutput() IdentityServiceAuthMethodResponseArrayOutput {
	return o
}

func (o IdentityServiceAuthMethodResponseArrayOutput) ToIdentityServiceAuthMethodResponseArrayOutputWithContext(ctx context.Context) IdentityServiceAuthMethodResponseArrayOutput {
	return o
}

func (o IdentityServiceAuthMethodResponseArrayOutput) Index(i pulumi.IntInput) IdentityServiceAuthMethodResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityServiceAuthMethodResponse {
		return vs[0].([]IdentityServiceAuthMethodResponse)[vs[1].(int)]
	}).(IdentityServiceAuthMethodResponseOutput)
}

// Configuration for the AzureAD Auth flow.
type IdentityServiceAzureADConfig struct {
	// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
	ClientId *string `pulumi:"clientId"`
	// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
	ClientSecret *string `pulumi:"clientSecret"`
	// The redirect URL that kubectl uses for authorization.
	KubectlRedirectUri *string `pulumi:"kubectlRedirectUri"`
	// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
	Tenant *string `pulumi:"tenant"`
}

// IdentityServiceAzureADConfigInput is an input type that accepts IdentityServiceAzureADConfigArgs and IdentityServiceAzureADConfigOutput values.
// You can construct a concrete instance of `IdentityServiceAzureADConfigInput` via:
//
//	IdentityServiceAzureADConfigArgs{...}
type IdentityServiceAzureADConfigInput interface {
	pulumi.Input

	ToIdentityServiceAzureADConfigOutput() IdentityServiceAzureADConfigOutput
	ToIdentityServiceAzureADConfigOutputWithContext(context.Context) IdentityServiceAzureADConfigOutput
}

// Configuration for the AzureAD Auth flow.
type IdentityServiceAzureADConfigArgs struct {
	// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// The redirect URL that kubectl uses for authorization.
	KubectlRedirectUri pulumi.StringPtrInput `pulumi:"kubectlRedirectUri"`
	// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
	Tenant pulumi.StringPtrInput `pulumi:"tenant"`
}

func (IdentityServiceAzureADConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceAzureADConfig)(nil)).Elem()
}

func (i IdentityServiceAzureADConfigArgs) ToIdentityServiceAzureADConfigOutput() IdentityServiceAzureADConfigOutput {
	return i.ToIdentityServiceAzureADConfigOutputWithContext(context.Background())
}

func (i IdentityServiceAzureADConfigArgs) ToIdentityServiceAzureADConfigOutputWithContext(ctx context.Context) IdentityServiceAzureADConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceAzureADConfigOutput)
}

func (i IdentityServiceAzureADConfigArgs) ToIdentityServiceAzureADConfigPtrOutput() IdentityServiceAzureADConfigPtrOutput {
	return i.ToIdentityServiceAzureADConfigPtrOutputWithContext(context.Background())
}

func (i IdentityServiceAzureADConfigArgs) ToIdentityServiceAzureADConfigPtrOutputWithContext(ctx context.Context) IdentityServiceAzureADConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceAzureADConfigOutput).ToIdentityServiceAzureADConfigPtrOutputWithContext(ctx)
}

// IdentityServiceAzureADConfigPtrInput is an input type that accepts IdentityServiceAzureADConfigArgs, IdentityServiceAzureADConfigPtr and IdentityServiceAzureADConfigPtrOutput values.
// You can construct a concrete instance of `IdentityServiceAzureADConfigPtrInput` via:
//
//	        IdentityServiceAzureADConfigArgs{...}
//
//	or:
//
//	        nil
type IdentityServiceAzureADConfigPtrInput interface {
	pulumi.Input

	ToIdentityServiceAzureADConfigPtrOutput() IdentityServiceAzureADConfigPtrOutput
	ToIdentityServiceAzureADConfigPtrOutputWithContext(context.Context) IdentityServiceAzureADConfigPtrOutput
}

type identityServiceAzureADConfigPtrType IdentityServiceAzureADConfigArgs

func IdentityServiceAzureADConfigPtr(v *IdentityServiceAzureADConfigArgs) IdentityServiceAzureADConfigPtrInput {
	return (*identityServiceAzureADConfigPtrType)(v)
}

func (*identityServiceAzureADConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceAzureADConfig)(nil)).Elem()
}

func (i *identityServiceAzureADConfigPtrType) ToIdentityServiceAzureADConfigPtrOutput() IdentityServiceAzureADConfigPtrOutput {
	return i.ToIdentityServiceAzureADConfigPtrOutputWithContext(context.Background())
}

func (i *identityServiceAzureADConfigPtrType) ToIdentityServiceAzureADConfigPtrOutputWithContext(ctx context.Context) IdentityServiceAzureADConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceAzureADConfigPtrOutput)
}

// Configuration for the AzureAD Auth flow.
type IdentityServiceAzureADConfigOutput struct{ *pulumi.OutputState }

func (IdentityServiceAzureADConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceAzureADConfig)(nil)).Elem()
}

func (o IdentityServiceAzureADConfigOutput) ToIdentityServiceAzureADConfigOutput() IdentityServiceAzureADConfigOutput {
	return o
}

func (o IdentityServiceAzureADConfigOutput) ToIdentityServiceAzureADConfigOutputWithContext(ctx context.Context) IdentityServiceAzureADConfigOutput {
	return o
}

func (o IdentityServiceAzureADConfigOutput) ToIdentityServiceAzureADConfigPtrOutput() IdentityServiceAzureADConfigPtrOutput {
	return o.ToIdentityServiceAzureADConfigPtrOutputWithContext(context.Background())
}

func (o IdentityServiceAzureADConfigOutput) ToIdentityServiceAzureADConfigPtrOutputWithContext(ctx context.Context) IdentityServiceAzureADConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityServiceAzureADConfig) *IdentityServiceAzureADConfig {
		return &v
	}).(IdentityServiceAzureADConfigPtrOutput)
}

// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
func (o IdentityServiceAzureADConfigOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfig) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
func (o IdentityServiceAzureADConfigOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfig) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The redirect URL that kubectl uses for authorization.
func (o IdentityServiceAzureADConfigOutput) KubectlRedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfig) *string { return v.KubectlRedirectUri }).(pulumi.StringPtrOutput)
}

// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
func (o IdentityServiceAzureADConfigOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfig) *string { return v.Tenant }).(pulumi.StringPtrOutput)
}

type IdentityServiceAzureADConfigPtrOutput struct{ *pulumi.OutputState }

func (IdentityServiceAzureADConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceAzureADConfig)(nil)).Elem()
}

func (o IdentityServiceAzureADConfigPtrOutput) ToIdentityServiceAzureADConfigPtrOutput() IdentityServiceAzureADConfigPtrOutput {
	return o
}

func (o IdentityServiceAzureADConfigPtrOutput) ToIdentityServiceAzureADConfigPtrOutputWithContext(ctx context.Context) IdentityServiceAzureADConfigPtrOutput {
	return o
}

func (o IdentityServiceAzureADConfigPtrOutput) Elem() IdentityServiceAzureADConfigOutput {
	return o.ApplyT(func(v *IdentityServiceAzureADConfig) IdentityServiceAzureADConfig {
		if v != nil {
			return *v
		}
		var ret IdentityServiceAzureADConfig
		return ret
	}).(IdentityServiceAzureADConfigOutput)
}

// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
func (o IdentityServiceAzureADConfigPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceAzureADConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
func (o IdentityServiceAzureADConfigPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceAzureADConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// The redirect URL that kubectl uses for authorization.
func (o IdentityServiceAzureADConfigPtrOutput) KubectlRedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceAzureADConfig) *string {
		if v == nil {
			return nil
		}
		return v.KubectlRedirectUri
	}).(pulumi.StringPtrOutput)
}

// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
func (o IdentityServiceAzureADConfigPtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceAzureADConfig) *string {
		if v == nil {
			return nil
		}
		return v.Tenant
	}).(pulumi.StringPtrOutput)
}

// Configuration for the AzureAD Auth flow.
type IdentityServiceAzureADConfigResponse struct {
	// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
	ClientId string `pulumi:"clientId"`
	// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
	ClientSecret string `pulumi:"clientSecret"`
	// Encrypted AzureAD client secret.
	EncryptedClientSecret string `pulumi:"encryptedClientSecret"`
	// The redirect URL that kubectl uses for authorization.
	KubectlRedirectUri string `pulumi:"kubectlRedirectUri"`
	// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
	Tenant string `pulumi:"tenant"`
}

// Configuration for the AzureAD Auth flow.
type IdentityServiceAzureADConfigResponseOutput struct{ *pulumi.OutputState }

func (IdentityServiceAzureADConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceAzureADConfigResponse)(nil)).Elem()
}

func (o IdentityServiceAzureADConfigResponseOutput) ToIdentityServiceAzureADConfigResponseOutput() IdentityServiceAzureADConfigResponseOutput {
	return o
}

func (o IdentityServiceAzureADConfigResponseOutput) ToIdentityServiceAzureADConfigResponseOutputWithContext(ctx context.Context) IdentityServiceAzureADConfigResponseOutput {
	return o
}

// ID for the registered client application that makes authentication requests to the Azure AD identity provider.
func (o IdentityServiceAzureADConfigResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfigResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Input only. Unencrypted AzureAD client secret will be passed to the GKE Hub CLH.
func (o IdentityServiceAzureADConfigResponseOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfigResponse) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Encrypted AzureAD client secret.
func (o IdentityServiceAzureADConfigResponseOutput) EncryptedClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfigResponse) string { return v.EncryptedClientSecret }).(pulumi.StringOutput)
}

// The redirect URL that kubectl uses for authorization.
func (o IdentityServiceAzureADConfigResponseOutput) KubectlRedirectUri() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfigResponse) string { return v.KubectlRedirectUri }).(pulumi.StringOutput)
}

// Kind of Azure AD account to be authenticated. Supported values are or for accounts belonging to a specific tenant.
func (o IdentityServiceAzureADConfigResponseOutput) Tenant() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceAzureADConfigResponse) string { return v.Tenant }).(pulumi.StringOutput)
}

// Configuration for the Google Plugin Auth flow.
type IdentityServiceGoogleConfig struct {
	// Disable automatic configuration of Google Plugin on supported platforms.
	Disable *bool `pulumi:"disable"`
}

// IdentityServiceGoogleConfigInput is an input type that accepts IdentityServiceGoogleConfigArgs and IdentityServiceGoogleConfigOutput values.
// You can construct a concrete instance of `IdentityServiceGoogleConfigInput` via:
//
//	IdentityServiceGoogleConfigArgs{...}
type IdentityServiceGoogleConfigInput interface {
	pulumi.Input

	ToIdentityServiceGoogleConfigOutput() IdentityServiceGoogleConfigOutput
	ToIdentityServiceGoogleConfigOutputWithContext(context.Context) IdentityServiceGoogleConfigOutput
}

// Configuration for the Google Plugin Auth flow.
type IdentityServiceGoogleConfigArgs struct {
	// Disable automatic configuration of Google Plugin on supported platforms.
	Disable pulumi.BoolPtrInput `pulumi:"disable"`
}

func (IdentityServiceGoogleConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceGoogleConfig)(nil)).Elem()
}

func (i IdentityServiceGoogleConfigArgs) ToIdentityServiceGoogleConfigOutput() IdentityServiceGoogleConfigOutput {
	return i.ToIdentityServiceGoogleConfigOutputWithContext(context.Background())
}

func (i IdentityServiceGoogleConfigArgs) ToIdentityServiceGoogleConfigOutputWithContext(ctx context.Context) IdentityServiceGoogleConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceGoogleConfigOutput)
}

func (i IdentityServiceGoogleConfigArgs) ToIdentityServiceGoogleConfigPtrOutput() IdentityServiceGoogleConfigPtrOutput {
	return i.ToIdentityServiceGoogleConfigPtrOutputWithContext(context.Background())
}

func (i IdentityServiceGoogleConfigArgs) ToIdentityServiceGoogleConfigPtrOutputWithContext(ctx context.Context) IdentityServiceGoogleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceGoogleConfigOutput).ToIdentityServiceGoogleConfigPtrOutputWithContext(ctx)
}

// IdentityServiceGoogleConfigPtrInput is an input type that accepts IdentityServiceGoogleConfigArgs, IdentityServiceGoogleConfigPtr and IdentityServiceGoogleConfigPtrOutput values.
// You can construct a concrete instance of `IdentityServiceGoogleConfigPtrInput` via:
//
//	        IdentityServiceGoogleConfigArgs{...}
//
//	or:
//
//	        nil
type IdentityServiceGoogleConfigPtrInput interface {
	pulumi.Input

	ToIdentityServiceGoogleConfigPtrOutput() IdentityServiceGoogleConfigPtrOutput
	ToIdentityServiceGoogleConfigPtrOutputWithContext(context.Context) IdentityServiceGoogleConfigPtrOutput
}

type identityServiceGoogleConfigPtrType IdentityServiceGoogleConfigArgs

func IdentityServiceGoogleConfigPtr(v *IdentityServiceGoogleConfigArgs) IdentityServiceGoogleConfigPtrInput {
	return (*identityServiceGoogleConfigPtrType)(v)
}

func (*identityServiceGoogleConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceGoogleConfig)(nil)).Elem()
}

func (i *identityServiceGoogleConfigPtrType) ToIdentityServiceGoogleConfigPtrOutput() IdentityServiceGoogleConfigPtrOutput {
	return i.ToIdentityServiceGoogleConfigPtrOutputWithContext(context.Background())
}

func (i *identityServiceGoogleConfigPtrType) ToIdentityServiceGoogleConfigPtrOutputWithContext(ctx context.Context) IdentityServiceGoogleConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceGoogleConfigPtrOutput)
}

// Configuration for the Google Plugin Auth flow.
type IdentityServiceGoogleConfigOutput struct{ *pulumi.OutputState }

func (IdentityServiceGoogleConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceGoogleConfig)(nil)).Elem()
}

func (o IdentityServiceGoogleConfigOutput) ToIdentityServiceGoogleConfigOutput() IdentityServiceGoogleConfigOutput {
	return o
}

func (o IdentityServiceGoogleConfigOutput) ToIdentityServiceGoogleConfigOutputWithContext(ctx context.Context) IdentityServiceGoogleConfigOutput {
	return o
}

func (o IdentityServiceGoogleConfigOutput) ToIdentityServiceGoogleConfigPtrOutput() IdentityServiceGoogleConfigPtrOutput {
	return o.ToIdentityServiceGoogleConfigPtrOutputWithContext(context.Background())
}

func (o IdentityServiceGoogleConfigOutput) ToIdentityServiceGoogleConfigPtrOutputWithContext(ctx context.Context) IdentityServiceGoogleConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityServiceGoogleConfig) *IdentityServiceGoogleConfig {
		return &v
	}).(IdentityServiceGoogleConfigPtrOutput)
}

// Disable automatic configuration of Google Plugin on supported platforms.
func (o IdentityServiceGoogleConfigOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IdentityServiceGoogleConfig) *bool { return v.Disable }).(pulumi.BoolPtrOutput)
}

type IdentityServiceGoogleConfigPtrOutput struct{ *pulumi.OutputState }

func (IdentityServiceGoogleConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceGoogleConfig)(nil)).Elem()
}

func (o IdentityServiceGoogleConfigPtrOutput) ToIdentityServiceGoogleConfigPtrOutput() IdentityServiceGoogleConfigPtrOutput {
	return o
}

func (o IdentityServiceGoogleConfigPtrOutput) ToIdentityServiceGoogleConfigPtrOutputWithContext(ctx context.Context) IdentityServiceGoogleConfigPtrOutput {
	return o
}

func (o IdentityServiceGoogleConfigPtrOutput) Elem() IdentityServiceGoogleConfigOutput {
	return o.ApplyT(func(v *IdentityServiceGoogleConfig) IdentityServiceGoogleConfig {
		if v != nil {
			return *v
		}
		var ret IdentityServiceGoogleConfig
		return ret
	}).(IdentityServiceGoogleConfigOutput)
}

// Disable automatic configuration of Google Plugin on supported platforms.
func (o IdentityServiceGoogleConfigPtrOutput) Disable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityServiceGoogleConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Disable
	}).(pulumi.BoolPtrOutput)
}

// Configuration for the Google Plugin Auth flow.
type IdentityServiceGoogleConfigResponse struct {
	// Disable automatic configuration of Google Plugin on supported platforms.
	Disable bool `pulumi:"disable"`
}

// Configuration for the Google Plugin Auth flow.
type IdentityServiceGoogleConfigResponseOutput struct{ *pulumi.OutputState }

func (IdentityServiceGoogleConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceGoogleConfigResponse)(nil)).Elem()
}

func (o IdentityServiceGoogleConfigResponseOutput) ToIdentityServiceGoogleConfigResponseOutput() IdentityServiceGoogleConfigResponseOutput {
	return o
}

func (o IdentityServiceGoogleConfigResponseOutput) ToIdentityServiceGoogleConfigResponseOutputWithContext(ctx context.Context) IdentityServiceGoogleConfigResponseOutput {
	return o
}

// Disable automatic configuration of Google Plugin on supported platforms.
func (o IdentityServiceGoogleConfigResponseOutput) Disable() pulumi.BoolOutput {
	return o.ApplyT(func(v IdentityServiceGoogleConfigResponse) bool { return v.Disable }).(pulumi.BoolOutput)
}

// **Anthos Identity Service**: Configuration for a single Membership.
type IdentityServiceMembershipSpec struct {
	// A member may support multiple auth methods.
	AuthMethods []IdentityServiceAuthMethod `pulumi:"authMethods"`
}

// IdentityServiceMembershipSpecInput is an input type that accepts IdentityServiceMembershipSpecArgs and IdentityServiceMembershipSpecOutput values.
// You can construct a concrete instance of `IdentityServiceMembershipSpecInput` via:
//
//	IdentityServiceMembershipSpecArgs{...}
type IdentityServiceMembershipSpecInput interface {
	pulumi.Input

	ToIdentityServiceMembershipSpecOutput() IdentityServiceMembershipSpecOutput
	ToIdentityServiceMembershipSpecOutputWithContext(context.Context) IdentityServiceMembershipSpecOutput
}

// **Anthos Identity Service**: Configuration for a single Membership.
type IdentityServiceMembershipSpecArgs struct {
	// A member may support multiple auth methods.
	AuthMethods IdentityServiceAuthMethodArrayInput `pulumi:"authMethods"`
}

func (IdentityServiceMembershipSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceMembershipSpec)(nil)).Elem()
}

func (i IdentityServiceMembershipSpecArgs) ToIdentityServiceMembershipSpecOutput() IdentityServiceMembershipSpecOutput {
	return i.ToIdentityServiceMembershipSpecOutputWithContext(context.Background())
}

func (i IdentityServiceMembershipSpecArgs) ToIdentityServiceMembershipSpecOutputWithContext(ctx context.Context) IdentityServiceMembershipSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceMembershipSpecOutput)
}

func (i IdentityServiceMembershipSpecArgs) ToIdentityServiceMembershipSpecPtrOutput() IdentityServiceMembershipSpecPtrOutput {
	return i.ToIdentityServiceMembershipSpecPtrOutputWithContext(context.Background())
}

func (i IdentityServiceMembershipSpecArgs) ToIdentityServiceMembershipSpecPtrOutputWithContext(ctx context.Context) IdentityServiceMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceMembershipSpecOutput).ToIdentityServiceMembershipSpecPtrOutputWithContext(ctx)
}

// IdentityServiceMembershipSpecPtrInput is an input type that accepts IdentityServiceMembershipSpecArgs, IdentityServiceMembershipSpecPtr and IdentityServiceMembershipSpecPtrOutput values.
// You can construct a concrete instance of `IdentityServiceMembershipSpecPtrInput` via:
//
//	        IdentityServiceMembershipSpecArgs{...}
//
//	or:
//
//	        nil
type IdentityServiceMembershipSpecPtrInput interface {
	pulumi.Input

	ToIdentityServiceMembershipSpecPtrOutput() IdentityServiceMembershipSpecPtrOutput
	ToIdentityServiceMembershipSpecPtrOutputWithContext(context.Context) IdentityServiceMembershipSpecPtrOutput
}

type identityServiceMembershipSpecPtrType IdentityServiceMembershipSpecArgs

func IdentityServiceMembershipSpecPtr(v *IdentityServiceMembershipSpecArgs) IdentityServiceMembershipSpecPtrInput {
	return (*identityServiceMembershipSpecPtrType)(v)
}

func (*identityServiceMembershipSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceMembershipSpec)(nil)).Elem()
}

func (i *identityServiceMembershipSpecPtrType) ToIdentityServiceMembershipSpecPtrOutput() IdentityServiceMembershipSpecPtrOutput {
	return i.ToIdentityServiceMembershipSpecPtrOutputWithContext(context.Background())
}

func (i *identityServiceMembershipSpecPtrType) ToIdentityServiceMembershipSpecPtrOutputWithContext(ctx context.Context) IdentityServiceMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceMembershipSpecPtrOutput)
}

// **Anthos Identity Service**: Configuration for a single Membership.
type IdentityServiceMembershipSpecOutput struct{ *pulumi.OutputState }

func (IdentityServiceMembershipSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceMembershipSpec)(nil)).Elem()
}

func (o IdentityServiceMembershipSpecOutput) ToIdentityServiceMembershipSpecOutput() IdentityServiceMembershipSpecOutput {
	return o
}

func (o IdentityServiceMembershipSpecOutput) ToIdentityServiceMembershipSpecOutputWithContext(ctx context.Context) IdentityServiceMembershipSpecOutput {
	return o
}

func (o IdentityServiceMembershipSpecOutput) ToIdentityServiceMembershipSpecPtrOutput() IdentityServiceMembershipSpecPtrOutput {
	return o.ToIdentityServiceMembershipSpecPtrOutputWithContext(context.Background())
}

func (o IdentityServiceMembershipSpecOutput) ToIdentityServiceMembershipSpecPtrOutputWithContext(ctx context.Context) IdentityServiceMembershipSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityServiceMembershipSpec) *IdentityServiceMembershipSpec {
		return &v
	}).(IdentityServiceMembershipSpecPtrOutput)
}

// A member may support multiple auth methods.
func (o IdentityServiceMembershipSpecOutput) AuthMethods() IdentityServiceAuthMethodArrayOutput {
	return o.ApplyT(func(v IdentityServiceMembershipSpec) []IdentityServiceAuthMethod { return v.AuthMethods }).(IdentityServiceAuthMethodArrayOutput)
}

type IdentityServiceMembershipSpecPtrOutput struct{ *pulumi.OutputState }

func (IdentityServiceMembershipSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceMembershipSpec)(nil)).Elem()
}

func (o IdentityServiceMembershipSpecPtrOutput) ToIdentityServiceMembershipSpecPtrOutput() IdentityServiceMembershipSpecPtrOutput {
	return o
}

func (o IdentityServiceMembershipSpecPtrOutput) ToIdentityServiceMembershipSpecPtrOutputWithContext(ctx context.Context) IdentityServiceMembershipSpecPtrOutput {
	return o
}

func (o IdentityServiceMembershipSpecPtrOutput) Elem() IdentityServiceMembershipSpecOutput {
	return o.ApplyT(func(v *IdentityServiceMembershipSpec) IdentityServiceMembershipSpec {
		if v != nil {
			return *v
		}
		var ret IdentityServiceMembershipSpec
		return ret
	}).(IdentityServiceMembershipSpecOutput)
}

// A member may support multiple auth methods.
func (o IdentityServiceMembershipSpecPtrOutput) AuthMethods() IdentityServiceAuthMethodArrayOutput {
	return o.ApplyT(func(v *IdentityServiceMembershipSpec) []IdentityServiceAuthMethod {
		if v == nil {
			return nil
		}
		return v.AuthMethods
	}).(IdentityServiceAuthMethodArrayOutput)
}

// **Anthos Identity Service**: Configuration for a single Membership.
type IdentityServiceMembershipSpecResponse struct {
	// A member may support multiple auth methods.
	AuthMethods []IdentityServiceAuthMethodResponse `pulumi:"authMethods"`
}

// **Anthos Identity Service**: Configuration for a single Membership.
type IdentityServiceMembershipSpecResponseOutput struct{ *pulumi.OutputState }

func (IdentityServiceMembershipSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceMembershipSpecResponse)(nil)).Elem()
}

func (o IdentityServiceMembershipSpecResponseOutput) ToIdentityServiceMembershipSpecResponseOutput() IdentityServiceMembershipSpecResponseOutput {
	return o
}

func (o IdentityServiceMembershipSpecResponseOutput) ToIdentityServiceMembershipSpecResponseOutputWithContext(ctx context.Context) IdentityServiceMembershipSpecResponseOutput {
	return o
}

// A member may support multiple auth methods.
func (o IdentityServiceMembershipSpecResponseOutput) AuthMethods() IdentityServiceAuthMethodResponseArrayOutput {
	return o.ApplyT(func(v IdentityServiceMembershipSpecResponse) []IdentityServiceAuthMethodResponse {
		return v.AuthMethods
	}).(IdentityServiceAuthMethodResponseArrayOutput)
}

// **Anthos Identity Service**: State for a single Membership.
type IdentityServiceMembershipStateResponse struct {
	// The reason of the failure.
	FailureReason string `pulumi:"failureReason"`
	// Installed AIS version. This is the AIS version installed on this member. The values makes sense iff state is OK.
	InstalledVersion string `pulumi:"installedVersion"`
	// Last reconciled membership configuration
	MemberConfig IdentityServiceMembershipSpecResponse `pulumi:"memberConfig"`
	// Deployment state on this member
	State string `pulumi:"state"`
}

// **Anthos Identity Service**: State for a single Membership.
type IdentityServiceMembershipStateResponseOutput struct{ *pulumi.OutputState }

func (IdentityServiceMembershipStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceMembershipStateResponse)(nil)).Elem()
}

func (o IdentityServiceMembershipStateResponseOutput) ToIdentityServiceMembershipStateResponseOutput() IdentityServiceMembershipStateResponseOutput {
	return o
}

func (o IdentityServiceMembershipStateResponseOutput) ToIdentityServiceMembershipStateResponseOutputWithContext(ctx context.Context) IdentityServiceMembershipStateResponseOutput {
	return o
}

// The reason of the failure.
func (o IdentityServiceMembershipStateResponseOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceMembershipStateResponse) string { return v.FailureReason }).(pulumi.StringOutput)
}

// Installed AIS version. This is the AIS version installed on this member. The values makes sense iff state is OK.
func (o IdentityServiceMembershipStateResponseOutput) InstalledVersion() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceMembershipStateResponse) string { return v.InstalledVersion }).(pulumi.StringOutput)
}

// Last reconciled membership configuration
func (o IdentityServiceMembershipStateResponseOutput) MemberConfig() IdentityServiceMembershipSpecResponseOutput {
	return o.ApplyT(func(v IdentityServiceMembershipStateResponse) IdentityServiceMembershipSpecResponse {
		return v.MemberConfig
	}).(IdentityServiceMembershipSpecResponseOutput)
}

// Deployment state on this member
func (o IdentityServiceMembershipStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceMembershipStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// Configuration for OIDC Auth flow.
type IdentityServiceOidcConfig struct {
	// PEM-encoded CA for OIDC provider.
	CertificateAuthorityData *string `pulumi:"certificateAuthorityData"`
	// ID for OIDC client application.
	ClientId *string `pulumi:"clientId"`
	// Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
	ClientSecret *string `pulumi:"clientSecret"`
	// Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
	DeployCloudConsoleProxy *bool `pulumi:"deployCloudConsoleProxy"`
	// Enable access token.
	EnableAccessToken *bool `pulumi:"enableAccessToken"`
	// Comma-separated list of key-value pairs.
	ExtraParams *string `pulumi:"extraParams"`
	// Prefix to prepend to group name.
	GroupPrefix *string `pulumi:"groupPrefix"`
	// Claim in OIDC ID token that holds group information.
	GroupsClaim *string `pulumi:"groupsClaim"`
	// URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
	IssuerUri *string `pulumi:"issuerUri"`
	// Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
	KubectlRedirectUri *string `pulumi:"kubectlRedirectUri"`
	// Comma-separated list of identifiers.
	Scopes *string `pulumi:"scopes"`
	// Claim in OIDC ID token that holds username.
	UserClaim *string `pulumi:"userClaim"`
	// Prefix to prepend to user name.
	UserPrefix *string `pulumi:"userPrefix"`
}

// IdentityServiceOidcConfigInput is an input type that accepts IdentityServiceOidcConfigArgs and IdentityServiceOidcConfigOutput values.
// You can construct a concrete instance of `IdentityServiceOidcConfigInput` via:
//
//	IdentityServiceOidcConfigArgs{...}
type IdentityServiceOidcConfigInput interface {
	pulumi.Input

	ToIdentityServiceOidcConfigOutput() IdentityServiceOidcConfigOutput
	ToIdentityServiceOidcConfigOutputWithContext(context.Context) IdentityServiceOidcConfigOutput
}

// Configuration for OIDC Auth flow.
type IdentityServiceOidcConfigArgs struct {
	// PEM-encoded CA for OIDC provider.
	CertificateAuthorityData pulumi.StringPtrInput `pulumi:"certificateAuthorityData"`
	// ID for OIDC client application.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
	DeployCloudConsoleProxy pulumi.BoolPtrInput `pulumi:"deployCloudConsoleProxy"`
	// Enable access token.
	EnableAccessToken pulumi.BoolPtrInput `pulumi:"enableAccessToken"`
	// Comma-separated list of key-value pairs.
	ExtraParams pulumi.StringPtrInput `pulumi:"extraParams"`
	// Prefix to prepend to group name.
	GroupPrefix pulumi.StringPtrInput `pulumi:"groupPrefix"`
	// Claim in OIDC ID token that holds group information.
	GroupsClaim pulumi.StringPtrInput `pulumi:"groupsClaim"`
	// URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
	IssuerUri pulumi.StringPtrInput `pulumi:"issuerUri"`
	// Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
	KubectlRedirectUri pulumi.StringPtrInput `pulumi:"kubectlRedirectUri"`
	// Comma-separated list of identifiers.
	Scopes pulumi.StringPtrInput `pulumi:"scopes"`
	// Claim in OIDC ID token that holds username.
	UserClaim pulumi.StringPtrInput `pulumi:"userClaim"`
	// Prefix to prepend to user name.
	UserPrefix pulumi.StringPtrInput `pulumi:"userPrefix"`
}

func (IdentityServiceOidcConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceOidcConfig)(nil)).Elem()
}

func (i IdentityServiceOidcConfigArgs) ToIdentityServiceOidcConfigOutput() IdentityServiceOidcConfigOutput {
	return i.ToIdentityServiceOidcConfigOutputWithContext(context.Background())
}

func (i IdentityServiceOidcConfigArgs) ToIdentityServiceOidcConfigOutputWithContext(ctx context.Context) IdentityServiceOidcConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceOidcConfigOutput)
}

func (i IdentityServiceOidcConfigArgs) ToIdentityServiceOidcConfigPtrOutput() IdentityServiceOidcConfigPtrOutput {
	return i.ToIdentityServiceOidcConfigPtrOutputWithContext(context.Background())
}

func (i IdentityServiceOidcConfigArgs) ToIdentityServiceOidcConfigPtrOutputWithContext(ctx context.Context) IdentityServiceOidcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceOidcConfigOutput).ToIdentityServiceOidcConfigPtrOutputWithContext(ctx)
}

// IdentityServiceOidcConfigPtrInput is an input type that accepts IdentityServiceOidcConfigArgs, IdentityServiceOidcConfigPtr and IdentityServiceOidcConfigPtrOutput values.
// You can construct a concrete instance of `IdentityServiceOidcConfigPtrInput` via:
//
//	        IdentityServiceOidcConfigArgs{...}
//
//	or:
//
//	        nil
type IdentityServiceOidcConfigPtrInput interface {
	pulumi.Input

	ToIdentityServiceOidcConfigPtrOutput() IdentityServiceOidcConfigPtrOutput
	ToIdentityServiceOidcConfigPtrOutputWithContext(context.Context) IdentityServiceOidcConfigPtrOutput
}

type identityServiceOidcConfigPtrType IdentityServiceOidcConfigArgs

func IdentityServiceOidcConfigPtr(v *IdentityServiceOidcConfigArgs) IdentityServiceOidcConfigPtrInput {
	return (*identityServiceOidcConfigPtrType)(v)
}

func (*identityServiceOidcConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceOidcConfig)(nil)).Elem()
}

func (i *identityServiceOidcConfigPtrType) ToIdentityServiceOidcConfigPtrOutput() IdentityServiceOidcConfigPtrOutput {
	return i.ToIdentityServiceOidcConfigPtrOutputWithContext(context.Background())
}

func (i *identityServiceOidcConfigPtrType) ToIdentityServiceOidcConfigPtrOutputWithContext(ctx context.Context) IdentityServiceOidcConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityServiceOidcConfigPtrOutput)
}

// Configuration for OIDC Auth flow.
type IdentityServiceOidcConfigOutput struct{ *pulumi.OutputState }

func (IdentityServiceOidcConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceOidcConfig)(nil)).Elem()
}

func (o IdentityServiceOidcConfigOutput) ToIdentityServiceOidcConfigOutput() IdentityServiceOidcConfigOutput {
	return o
}

func (o IdentityServiceOidcConfigOutput) ToIdentityServiceOidcConfigOutputWithContext(ctx context.Context) IdentityServiceOidcConfigOutput {
	return o
}

func (o IdentityServiceOidcConfigOutput) ToIdentityServiceOidcConfigPtrOutput() IdentityServiceOidcConfigPtrOutput {
	return o.ToIdentityServiceOidcConfigPtrOutputWithContext(context.Background())
}

func (o IdentityServiceOidcConfigOutput) ToIdentityServiceOidcConfigPtrOutputWithContext(ctx context.Context) IdentityServiceOidcConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IdentityServiceOidcConfig) *IdentityServiceOidcConfig {
		return &v
	}).(IdentityServiceOidcConfigPtrOutput)
}

// PEM-encoded CA for OIDC provider.
func (o IdentityServiceOidcConfigOutput) CertificateAuthorityData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.CertificateAuthorityData }).(pulumi.StringPtrOutput)
}

// ID for OIDC client application.
func (o IdentityServiceOidcConfigOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
func (o IdentityServiceOidcConfigOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
func (o IdentityServiceOidcConfigOutput) DeployCloudConsoleProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *bool { return v.DeployCloudConsoleProxy }).(pulumi.BoolPtrOutput)
}

// Enable access token.
func (o IdentityServiceOidcConfigOutput) EnableAccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *bool { return v.EnableAccessToken }).(pulumi.BoolPtrOutput)
}

// Comma-separated list of key-value pairs.
func (o IdentityServiceOidcConfigOutput) ExtraParams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.ExtraParams }).(pulumi.StringPtrOutput)
}

// Prefix to prepend to group name.
func (o IdentityServiceOidcConfigOutput) GroupPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.GroupPrefix }).(pulumi.StringPtrOutput)
}

// Claim in OIDC ID token that holds group information.
func (o IdentityServiceOidcConfigOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.GroupsClaim }).(pulumi.StringPtrOutput)
}

// URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
func (o IdentityServiceOidcConfigOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.IssuerUri }).(pulumi.StringPtrOutput)
}

// Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
func (o IdentityServiceOidcConfigOutput) KubectlRedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.KubectlRedirectUri }).(pulumi.StringPtrOutput)
}

// Comma-separated list of identifiers.
func (o IdentityServiceOidcConfigOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// Claim in OIDC ID token that holds username.
func (o IdentityServiceOidcConfigOutput) UserClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.UserClaim }).(pulumi.StringPtrOutput)
}

// Prefix to prepend to user name.
func (o IdentityServiceOidcConfigOutput) UserPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfig) *string { return v.UserPrefix }).(pulumi.StringPtrOutput)
}

type IdentityServiceOidcConfigPtrOutput struct{ *pulumi.OutputState }

func (IdentityServiceOidcConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityServiceOidcConfig)(nil)).Elem()
}

func (o IdentityServiceOidcConfigPtrOutput) ToIdentityServiceOidcConfigPtrOutput() IdentityServiceOidcConfigPtrOutput {
	return o
}

func (o IdentityServiceOidcConfigPtrOutput) ToIdentityServiceOidcConfigPtrOutputWithContext(ctx context.Context) IdentityServiceOidcConfigPtrOutput {
	return o
}

func (o IdentityServiceOidcConfigPtrOutput) Elem() IdentityServiceOidcConfigOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) IdentityServiceOidcConfig {
		if v != nil {
			return *v
		}
		var ret IdentityServiceOidcConfig
		return ret
	}).(IdentityServiceOidcConfigOutput)
}

// PEM-encoded CA for OIDC provider.
func (o IdentityServiceOidcConfigPtrOutput) CertificateAuthorityData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.CertificateAuthorityData
	}).(pulumi.StringPtrOutput)
}

// ID for OIDC client application.
func (o IdentityServiceOidcConfigPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
func (o IdentityServiceOidcConfigPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
func (o IdentityServiceOidcConfigPtrOutput) DeployCloudConsoleProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *bool {
		if v == nil {
			return nil
		}
		return v.DeployCloudConsoleProxy
	}).(pulumi.BoolPtrOutput)
}

// Enable access token.
func (o IdentityServiceOidcConfigPtrOutput) EnableAccessToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableAccessToken
	}).(pulumi.BoolPtrOutput)
}

// Comma-separated list of key-value pairs.
func (o IdentityServiceOidcConfigPtrOutput) ExtraParams() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.ExtraParams
	}).(pulumi.StringPtrOutput)
}

// Prefix to prepend to group name.
func (o IdentityServiceOidcConfigPtrOutput) GroupPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.GroupPrefix
	}).(pulumi.StringPtrOutput)
}

// Claim in OIDC ID token that holds group information.
func (o IdentityServiceOidcConfigPtrOutput) GroupsClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.GroupsClaim
	}).(pulumi.StringPtrOutput)
}

// URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
func (o IdentityServiceOidcConfigPtrOutput) IssuerUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.IssuerUri
	}).(pulumi.StringPtrOutput)
}

// Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
func (o IdentityServiceOidcConfigPtrOutput) KubectlRedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.KubectlRedirectUri
	}).(pulumi.StringPtrOutput)
}

// Comma-separated list of identifiers.
func (o IdentityServiceOidcConfigPtrOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringPtrOutput)
}

// Claim in OIDC ID token that holds username.
func (o IdentityServiceOidcConfigPtrOutput) UserClaim() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.UserClaim
	}).(pulumi.StringPtrOutput)
}

// Prefix to prepend to user name.
func (o IdentityServiceOidcConfigPtrOutput) UserPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityServiceOidcConfig) *string {
		if v == nil {
			return nil
		}
		return v.UserPrefix
	}).(pulumi.StringPtrOutput)
}

// Configuration for OIDC Auth flow.
type IdentityServiceOidcConfigResponse struct {
	// PEM-encoded CA for OIDC provider.
	CertificateAuthorityData string `pulumi:"certificateAuthorityData"`
	// ID for OIDC client application.
	ClientId string `pulumi:"clientId"`
	// Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
	ClientSecret string `pulumi:"clientSecret"`
	// Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
	DeployCloudConsoleProxy bool `pulumi:"deployCloudConsoleProxy"`
	// Enable access token.
	EnableAccessToken bool `pulumi:"enableAccessToken"`
	// Encrypted OIDC Client secret
	EncryptedClientSecret string `pulumi:"encryptedClientSecret"`
	// Comma-separated list of key-value pairs.
	ExtraParams string `pulumi:"extraParams"`
	// Prefix to prepend to group name.
	GroupPrefix string `pulumi:"groupPrefix"`
	// Claim in OIDC ID token that holds group information.
	GroupsClaim string `pulumi:"groupsClaim"`
	// URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
	IssuerUri string `pulumi:"issuerUri"`
	// Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
	KubectlRedirectUri string `pulumi:"kubectlRedirectUri"`
	// Comma-separated list of identifiers.
	Scopes string `pulumi:"scopes"`
	// Claim in OIDC ID token that holds username.
	UserClaim string `pulumi:"userClaim"`
	// Prefix to prepend to user name.
	UserPrefix string `pulumi:"userPrefix"`
}

// Configuration for OIDC Auth flow.
type IdentityServiceOidcConfigResponseOutput struct{ *pulumi.OutputState }

func (IdentityServiceOidcConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityServiceOidcConfigResponse)(nil)).Elem()
}

func (o IdentityServiceOidcConfigResponseOutput) ToIdentityServiceOidcConfigResponseOutput() IdentityServiceOidcConfigResponseOutput {
	return o
}

func (o IdentityServiceOidcConfigResponseOutput) ToIdentityServiceOidcConfigResponseOutputWithContext(ctx context.Context) IdentityServiceOidcConfigResponseOutput {
	return o
}

// PEM-encoded CA for OIDC provider.
func (o IdentityServiceOidcConfigResponseOutput) CertificateAuthorityData() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.CertificateAuthorityData }).(pulumi.StringOutput)
}

// ID for OIDC client application.
func (o IdentityServiceOidcConfigResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
func (o IdentityServiceOidcConfigResponseOutput) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
func (o IdentityServiceOidcConfigResponseOutput) DeployCloudConsoleProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) bool { return v.DeployCloudConsoleProxy }).(pulumi.BoolOutput)
}

// Enable access token.
func (o IdentityServiceOidcConfigResponseOutput) EnableAccessToken() pulumi.BoolOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) bool { return v.EnableAccessToken }).(pulumi.BoolOutput)
}

// Encrypted OIDC Client secret
func (o IdentityServiceOidcConfigResponseOutput) EncryptedClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.EncryptedClientSecret }).(pulumi.StringOutput)
}

// Comma-separated list of key-value pairs.
func (o IdentityServiceOidcConfigResponseOutput) ExtraParams() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.ExtraParams }).(pulumi.StringOutput)
}

// Prefix to prepend to group name.
func (o IdentityServiceOidcConfigResponseOutput) GroupPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.GroupPrefix }).(pulumi.StringOutput)
}

// Claim in OIDC ID token that holds group information.
func (o IdentityServiceOidcConfigResponseOutput) GroupsClaim() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.GroupsClaim }).(pulumi.StringOutput)
}

// URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
func (o IdentityServiceOidcConfigResponseOutput) IssuerUri() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.IssuerUri }).(pulumi.StringOutput)
}

// Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
func (o IdentityServiceOidcConfigResponseOutput) KubectlRedirectUri() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.KubectlRedirectUri }).(pulumi.StringOutput)
}

// Comma-separated list of identifiers.
func (o IdentityServiceOidcConfigResponseOutput) Scopes() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.Scopes }).(pulumi.StringOutput)
}

// Claim in OIDC ID token that holds username.
func (o IdentityServiceOidcConfigResponseOutput) UserClaim() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.UserClaim }).(pulumi.StringOutput)
}

// Prefix to prepend to user name.
func (o IdentityServiceOidcConfigResponseOutput) UserPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v IdentityServiceOidcConfigResponse) string { return v.UserPrefix }).(pulumi.StringOutput)
}

// KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters.
type KubernetesMetadataResponse struct {
	// Kubernetes API server version string as reported by `/version`.
	KubernetesApiServerVersion string `pulumi:"kubernetesApiServerVersion"`
	// The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.
	MemoryMb int `pulumi:"memoryMb"`
	// Node count as reported by Kubernetes nodes resources.
	NodeCount int `pulumi:"nodeCount"`
	// Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.
	NodeProviderId string `pulumi:"nodeProviderId"`
	// The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.
	UpdateTime string `pulumi:"updateTime"`
	// vCPU count as reported by Kubernetes nodes resources.
	VcpuCount int `pulumi:"vcpuCount"`
}

// KubernetesMetadata provides informational metadata for Memberships representing Kubernetes clusters.
type KubernetesMetadataResponseOutput struct{ *pulumi.OutputState }

func (KubernetesMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesMetadataResponse)(nil)).Elem()
}

func (o KubernetesMetadataResponseOutput) ToKubernetesMetadataResponseOutput() KubernetesMetadataResponseOutput {
	return o
}

func (o KubernetesMetadataResponseOutput) ToKubernetesMetadataResponseOutputWithContext(ctx context.Context) KubernetesMetadataResponseOutput {
	return o
}

// Kubernetes API server version string as reported by `/version`.
func (o KubernetesMetadataResponseOutput) KubernetesApiServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesMetadataResponse) string { return v.KubernetesApiServerVersion }).(pulumi.StringOutput)
}

// The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.
func (o KubernetesMetadataResponseOutput) MemoryMb() pulumi.IntOutput {
	return o.ApplyT(func(v KubernetesMetadataResponse) int { return v.MemoryMb }).(pulumi.IntOutput)
}

// Node count as reported by Kubernetes nodes resources.
func (o KubernetesMetadataResponseOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v KubernetesMetadataResponse) int { return v.NodeCount }).(pulumi.IntOutput)
}

// Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.
func (o KubernetesMetadataResponseOutput) NodeProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesMetadataResponse) string { return v.NodeProviderId }).(pulumi.StringOutput)
}

// The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.
func (o KubernetesMetadataResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesMetadataResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// vCPU count as reported by Kubernetes nodes resources.
func (o KubernetesMetadataResponseOutput) VcpuCount() pulumi.IntOutput {
	return o.ApplyT(func(v KubernetesMetadataResponse) int { return v.VcpuCount }).(pulumi.IntOutput)
}

// KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
type KubernetesResource struct {
	// Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
	MembershipCrManifest *string `pulumi:"membershipCrManifest"`
	// Optional. Options for Kubernetes resource generation.
	ResourceOptions *ResourceOptions `pulumi:"resourceOptions"`
}

// KubernetesResourceInput is an input type that accepts KubernetesResourceArgs and KubernetesResourceOutput values.
// You can construct a concrete instance of `KubernetesResourceInput` via:
//
//	KubernetesResourceArgs{...}
type KubernetesResourceInput interface {
	pulumi.Input

	ToKubernetesResourceOutput() KubernetesResourceOutput
	ToKubernetesResourceOutputWithContext(context.Context) KubernetesResourceOutput
}

// KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
type KubernetesResourceArgs struct {
	// Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
	MembershipCrManifest pulumi.StringPtrInput `pulumi:"membershipCrManifest"`
	// Optional. Options for Kubernetes resource generation.
	ResourceOptions ResourceOptionsPtrInput `pulumi:"resourceOptions"`
}

func (KubernetesResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesResource)(nil)).Elem()
}

func (i KubernetesResourceArgs) ToKubernetesResourceOutput() KubernetesResourceOutput {
	return i.ToKubernetesResourceOutputWithContext(context.Background())
}

func (i KubernetesResourceArgs) ToKubernetesResourceOutputWithContext(ctx context.Context) KubernetesResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesResourceOutput)
}

func (i KubernetesResourceArgs) ToKubernetesResourcePtrOutput() KubernetesResourcePtrOutput {
	return i.ToKubernetesResourcePtrOutputWithContext(context.Background())
}

func (i KubernetesResourceArgs) ToKubernetesResourcePtrOutputWithContext(ctx context.Context) KubernetesResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesResourceOutput).ToKubernetesResourcePtrOutputWithContext(ctx)
}

// KubernetesResourcePtrInput is an input type that accepts KubernetesResourceArgs, KubernetesResourcePtr and KubernetesResourcePtrOutput values.
// You can construct a concrete instance of `KubernetesResourcePtrInput` via:
//
//	        KubernetesResourceArgs{...}
//
//	or:
//
//	        nil
type KubernetesResourcePtrInput interface {
	pulumi.Input

	ToKubernetesResourcePtrOutput() KubernetesResourcePtrOutput
	ToKubernetesResourcePtrOutputWithContext(context.Context) KubernetesResourcePtrOutput
}

type kubernetesResourcePtrType KubernetesResourceArgs

func KubernetesResourcePtr(v *KubernetesResourceArgs) KubernetesResourcePtrInput {
	return (*kubernetesResourcePtrType)(v)
}

func (*kubernetesResourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesResource)(nil)).Elem()
}

func (i *kubernetesResourcePtrType) ToKubernetesResourcePtrOutput() KubernetesResourcePtrOutput {
	return i.ToKubernetesResourcePtrOutputWithContext(context.Background())
}

func (i *kubernetesResourcePtrType) ToKubernetesResourcePtrOutputWithContext(ctx context.Context) KubernetesResourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesResourcePtrOutput)
}

// KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
type KubernetesResourceOutput struct{ *pulumi.OutputState }

func (KubernetesResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesResource)(nil)).Elem()
}

func (o KubernetesResourceOutput) ToKubernetesResourceOutput() KubernetesResourceOutput {
	return o
}

func (o KubernetesResourceOutput) ToKubernetesResourceOutputWithContext(ctx context.Context) KubernetesResourceOutput {
	return o
}

func (o KubernetesResourceOutput) ToKubernetesResourcePtrOutput() KubernetesResourcePtrOutput {
	return o.ToKubernetesResourcePtrOutputWithContext(context.Background())
}

func (o KubernetesResourceOutput) ToKubernetesResourcePtrOutputWithContext(ctx context.Context) KubernetesResourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KubernetesResource) *KubernetesResource {
		return &v
	}).(KubernetesResourcePtrOutput)
}

// Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
func (o KubernetesResourceOutput) MembershipCrManifest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KubernetesResource) *string { return v.MembershipCrManifest }).(pulumi.StringPtrOutput)
}

// Optional. Options for Kubernetes resource generation.
func (o KubernetesResourceOutput) ResourceOptions() ResourceOptionsPtrOutput {
	return o.ApplyT(func(v KubernetesResource) *ResourceOptions { return v.ResourceOptions }).(ResourceOptionsPtrOutput)
}

type KubernetesResourcePtrOutput struct{ *pulumi.OutputState }

func (KubernetesResourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesResource)(nil)).Elem()
}

func (o KubernetesResourcePtrOutput) ToKubernetesResourcePtrOutput() KubernetesResourcePtrOutput {
	return o
}

func (o KubernetesResourcePtrOutput) ToKubernetesResourcePtrOutputWithContext(ctx context.Context) KubernetesResourcePtrOutput {
	return o
}

func (o KubernetesResourcePtrOutput) Elem() KubernetesResourceOutput {
	return o.ApplyT(func(v *KubernetesResource) KubernetesResource {
		if v != nil {
			return *v
		}
		var ret KubernetesResource
		return ret
	}).(KubernetesResourceOutput)
}

// Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
func (o KubernetesResourcePtrOutput) MembershipCrManifest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KubernetesResource) *string {
		if v == nil {
			return nil
		}
		return v.MembershipCrManifest
	}).(pulumi.StringPtrOutput)
}

// Optional. Options for Kubernetes resource generation.
func (o KubernetesResourcePtrOutput) ResourceOptions() ResourceOptionsPtrOutput {
	return o.ApplyT(func(v *KubernetesResource) *ResourceOptions {
		if v == nil {
			return nil
		}
		return v.ResourceOptions
	}).(ResourceOptionsPtrOutput)
}

// KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
type KubernetesResourceResponse struct {
	// The Kubernetes resources for installing the GKE Connect agent This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
	ConnectResources []ResourceManifestResponse `pulumi:"connectResources"`
	// Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
	MembershipCrManifest string `pulumi:"membershipCrManifest"`
	// Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
	MembershipResources []ResourceManifestResponse `pulumi:"membershipResources"`
	// Optional. Options for Kubernetes resource generation.
	ResourceOptions ResourceOptionsResponse `pulumi:"resourceOptions"`
}

// KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
type KubernetesResourceResponseOutput struct{ *pulumi.OutputState }

func (KubernetesResourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KubernetesResourceResponse)(nil)).Elem()
}

func (o KubernetesResourceResponseOutput) ToKubernetesResourceResponseOutput() KubernetesResourceResponseOutput {
	return o
}

func (o KubernetesResourceResponseOutput) ToKubernetesResourceResponseOutputWithContext(ctx context.Context) KubernetesResourceResponseOutput {
	return o
}

// The Kubernetes resources for installing the GKE Connect agent This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
func (o KubernetesResourceResponseOutput) ConnectResources() ResourceManifestResponseArrayOutput {
	return o.ApplyT(func(v KubernetesResourceResponse) []ResourceManifestResponse { return v.ConnectResources }).(ResourceManifestResponseArrayOutput)
}

// Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
func (o KubernetesResourceResponseOutput) MembershipCrManifest() pulumi.StringOutput {
	return o.ApplyT(func(v KubernetesResourceResponse) string { return v.MembershipCrManifest }).(pulumi.StringOutput)
}

// Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
func (o KubernetesResourceResponseOutput) MembershipResources() ResourceManifestResponseArrayOutput {
	return o.ApplyT(func(v KubernetesResourceResponse) []ResourceManifestResponse { return v.MembershipResources }).(ResourceManifestResponseArrayOutput)
}

// Optional. Options for Kubernetes resource generation.
func (o KubernetesResourceResponseOutput) ResourceOptions() ResourceOptionsResponseOutput {
	return o.ApplyT(func(v KubernetesResourceResponse) ResourceOptionsResponse { return v.ResourceOptions }).(ResourceOptionsResponseOutput)
}

// MembershipBindingLifecycleState describes the state of a Binding resource.
type MembershipBindingLifecycleStateResponse struct {
	// The current state of the MembershipBinding resource.
	Code string `pulumi:"code"`
}

// MembershipBindingLifecycleState describes the state of a Binding resource.
type MembershipBindingLifecycleStateResponseOutput struct{ *pulumi.OutputState }

func (MembershipBindingLifecycleStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipBindingLifecycleStateResponse)(nil)).Elem()
}

func (o MembershipBindingLifecycleStateResponseOutput) ToMembershipBindingLifecycleStateResponseOutput() MembershipBindingLifecycleStateResponseOutput {
	return o
}

func (o MembershipBindingLifecycleStateResponseOutput) ToMembershipBindingLifecycleStateResponseOutputWithContext(ctx context.Context) MembershipBindingLifecycleStateResponseOutput {
	return o
}

// The current state of the MembershipBinding resource.
func (o MembershipBindingLifecycleStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipBindingLifecycleStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
type MembershipEndpoint struct {
	// Optional. Specific information for a GDC Edge Appliance cluster.
	ApplianceCluster *ApplianceCluster `pulumi:"applianceCluster"`
	// Optional. Specific information for a Google Edge cluster.
	EdgeCluster *EdgeCluster `pulumi:"edgeCluster"`
	// Optional. Specific information for a GKE-on-GCP cluster.
	GkeCluster *GkeCluster `pulumi:"gkeCluster"`
	// Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
	KubernetesResource *KubernetesResource `pulumi:"kubernetesResource"`
	// Optional. Specific information for a GKE Multi-Cloud cluster.
	MultiCloudCluster *MultiCloudCluster `pulumi:"multiCloudCluster"`
	// Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
	OnPremCluster *OnPremCluster `pulumi:"onPremCluster"`
}

// MembershipEndpointInput is an input type that accepts MembershipEndpointArgs and MembershipEndpointOutput values.
// You can construct a concrete instance of `MembershipEndpointInput` via:
//
//	MembershipEndpointArgs{...}
type MembershipEndpointInput interface {
	pulumi.Input

	ToMembershipEndpointOutput() MembershipEndpointOutput
	ToMembershipEndpointOutputWithContext(context.Context) MembershipEndpointOutput
}

// MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
type MembershipEndpointArgs struct {
	// Optional. Specific information for a GDC Edge Appliance cluster.
	ApplianceCluster ApplianceClusterPtrInput `pulumi:"applianceCluster"`
	// Optional. Specific information for a Google Edge cluster.
	EdgeCluster EdgeClusterPtrInput `pulumi:"edgeCluster"`
	// Optional. Specific information for a GKE-on-GCP cluster.
	GkeCluster GkeClusterPtrInput `pulumi:"gkeCluster"`
	// Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
	KubernetesResource KubernetesResourcePtrInput `pulumi:"kubernetesResource"`
	// Optional. Specific information for a GKE Multi-Cloud cluster.
	MultiCloudCluster MultiCloudClusterPtrInput `pulumi:"multiCloudCluster"`
	// Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
	OnPremCluster OnPremClusterPtrInput `pulumi:"onPremCluster"`
}

func (MembershipEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipEndpoint)(nil)).Elem()
}

func (i MembershipEndpointArgs) ToMembershipEndpointOutput() MembershipEndpointOutput {
	return i.ToMembershipEndpointOutputWithContext(context.Background())
}

func (i MembershipEndpointArgs) ToMembershipEndpointOutputWithContext(ctx context.Context) MembershipEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipEndpointOutput)
}

func (i MembershipEndpointArgs) ToMembershipEndpointPtrOutput() MembershipEndpointPtrOutput {
	return i.ToMembershipEndpointPtrOutputWithContext(context.Background())
}

func (i MembershipEndpointArgs) ToMembershipEndpointPtrOutputWithContext(ctx context.Context) MembershipEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipEndpointOutput).ToMembershipEndpointPtrOutputWithContext(ctx)
}

// MembershipEndpointPtrInput is an input type that accepts MembershipEndpointArgs, MembershipEndpointPtr and MembershipEndpointPtrOutput values.
// You can construct a concrete instance of `MembershipEndpointPtrInput` via:
//
//	        MembershipEndpointArgs{...}
//
//	or:
//
//	        nil
type MembershipEndpointPtrInput interface {
	pulumi.Input

	ToMembershipEndpointPtrOutput() MembershipEndpointPtrOutput
	ToMembershipEndpointPtrOutputWithContext(context.Context) MembershipEndpointPtrOutput
}

type membershipEndpointPtrType MembershipEndpointArgs

func MembershipEndpointPtr(v *MembershipEndpointArgs) MembershipEndpointPtrInput {
	return (*membershipEndpointPtrType)(v)
}

func (*membershipEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipEndpoint)(nil)).Elem()
}

func (i *membershipEndpointPtrType) ToMembershipEndpointPtrOutput() MembershipEndpointPtrOutput {
	return i.ToMembershipEndpointPtrOutputWithContext(context.Background())
}

func (i *membershipEndpointPtrType) ToMembershipEndpointPtrOutputWithContext(ctx context.Context) MembershipEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipEndpointPtrOutput)
}

// MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
type MembershipEndpointOutput struct{ *pulumi.OutputState }

func (MembershipEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipEndpoint)(nil)).Elem()
}

func (o MembershipEndpointOutput) ToMembershipEndpointOutput() MembershipEndpointOutput {
	return o
}

func (o MembershipEndpointOutput) ToMembershipEndpointOutputWithContext(ctx context.Context) MembershipEndpointOutput {
	return o
}

func (o MembershipEndpointOutput) ToMembershipEndpointPtrOutput() MembershipEndpointPtrOutput {
	return o.ToMembershipEndpointPtrOutputWithContext(context.Background())
}

func (o MembershipEndpointOutput) ToMembershipEndpointPtrOutputWithContext(ctx context.Context) MembershipEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MembershipEndpoint) *MembershipEndpoint {
		return &v
	}).(MembershipEndpointPtrOutput)
}

// Optional. Specific information for a GDC Edge Appliance cluster.
func (o MembershipEndpointOutput) ApplianceCluster() ApplianceClusterPtrOutput {
	return o.ApplyT(func(v MembershipEndpoint) *ApplianceCluster { return v.ApplianceCluster }).(ApplianceClusterPtrOutput)
}

// Optional. Specific information for a Google Edge cluster.
func (o MembershipEndpointOutput) EdgeCluster() EdgeClusterPtrOutput {
	return o.ApplyT(func(v MembershipEndpoint) *EdgeCluster { return v.EdgeCluster }).(EdgeClusterPtrOutput)
}

// Optional. Specific information for a GKE-on-GCP cluster.
func (o MembershipEndpointOutput) GkeCluster() GkeClusterPtrOutput {
	return o.ApplyT(func(v MembershipEndpoint) *GkeCluster { return v.GkeCluster }).(GkeClusterPtrOutput)
}

// Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
func (o MembershipEndpointOutput) KubernetesResource() KubernetesResourcePtrOutput {
	return o.ApplyT(func(v MembershipEndpoint) *KubernetesResource { return v.KubernetesResource }).(KubernetesResourcePtrOutput)
}

// Optional. Specific information for a GKE Multi-Cloud cluster.
func (o MembershipEndpointOutput) MultiCloudCluster() MultiCloudClusterPtrOutput {
	return o.ApplyT(func(v MembershipEndpoint) *MultiCloudCluster { return v.MultiCloudCluster }).(MultiCloudClusterPtrOutput)
}

// Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
func (o MembershipEndpointOutput) OnPremCluster() OnPremClusterPtrOutput {
	return o.ApplyT(func(v MembershipEndpoint) *OnPremCluster { return v.OnPremCluster }).(OnPremClusterPtrOutput)
}

type MembershipEndpointPtrOutput struct{ *pulumi.OutputState }

func (MembershipEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipEndpoint)(nil)).Elem()
}

func (o MembershipEndpointPtrOutput) ToMembershipEndpointPtrOutput() MembershipEndpointPtrOutput {
	return o
}

func (o MembershipEndpointPtrOutput) ToMembershipEndpointPtrOutputWithContext(ctx context.Context) MembershipEndpointPtrOutput {
	return o
}

func (o MembershipEndpointPtrOutput) Elem() MembershipEndpointOutput {
	return o.ApplyT(func(v *MembershipEndpoint) MembershipEndpoint {
		if v != nil {
			return *v
		}
		var ret MembershipEndpoint
		return ret
	}).(MembershipEndpointOutput)
}

// Optional. Specific information for a GDC Edge Appliance cluster.
func (o MembershipEndpointPtrOutput) ApplianceCluster() ApplianceClusterPtrOutput {
	return o.ApplyT(func(v *MembershipEndpoint) *ApplianceCluster {
		if v == nil {
			return nil
		}
		return v.ApplianceCluster
	}).(ApplianceClusterPtrOutput)
}

// Optional. Specific information for a Google Edge cluster.
func (o MembershipEndpointPtrOutput) EdgeCluster() EdgeClusterPtrOutput {
	return o.ApplyT(func(v *MembershipEndpoint) *EdgeCluster {
		if v == nil {
			return nil
		}
		return v.EdgeCluster
	}).(EdgeClusterPtrOutput)
}

// Optional. Specific information for a GKE-on-GCP cluster.
func (o MembershipEndpointPtrOutput) GkeCluster() GkeClusterPtrOutput {
	return o.ApplyT(func(v *MembershipEndpoint) *GkeCluster {
		if v == nil {
			return nil
		}
		return v.GkeCluster
	}).(GkeClusterPtrOutput)
}

// Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
func (o MembershipEndpointPtrOutput) KubernetesResource() KubernetesResourcePtrOutput {
	return o.ApplyT(func(v *MembershipEndpoint) *KubernetesResource {
		if v == nil {
			return nil
		}
		return v.KubernetesResource
	}).(KubernetesResourcePtrOutput)
}

// Optional. Specific information for a GKE Multi-Cloud cluster.
func (o MembershipEndpointPtrOutput) MultiCloudCluster() MultiCloudClusterPtrOutput {
	return o.ApplyT(func(v *MembershipEndpoint) *MultiCloudCluster {
		if v == nil {
			return nil
		}
		return v.MultiCloudCluster
	}).(MultiCloudClusterPtrOutput)
}

// Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
func (o MembershipEndpointPtrOutput) OnPremCluster() OnPremClusterPtrOutput {
	return o.ApplyT(func(v *MembershipEndpoint) *OnPremCluster {
		if v == nil {
			return nil
		}
		return v.OnPremCluster
	}).(OnPremClusterPtrOutput)
}

// MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
type MembershipEndpointResponse struct {
	// Optional. Specific information for a GDC Edge Appliance cluster.
	ApplianceCluster ApplianceClusterResponse `pulumi:"applianceCluster"`
	// Optional. Specific information for a Google Edge cluster.
	EdgeCluster EdgeClusterResponse `pulumi:"edgeCluster"`
	// Optional. Specific information for a GKE-on-GCP cluster.
	GkeCluster GkeClusterResponse `pulumi:"gkeCluster"`
	// Whether the lifecycle of this membership is managed by a google cluster platform service.
	GoogleManaged bool `pulumi:"googleManaged"`
	// Useful Kubernetes-specific metadata.
	KubernetesMetadata KubernetesMetadataResponse `pulumi:"kubernetesMetadata"`
	// Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
	KubernetesResource KubernetesResourceResponse `pulumi:"kubernetesResource"`
	// Optional. Specific information for a GKE Multi-Cloud cluster.
	MultiCloudCluster MultiCloudClusterResponse `pulumi:"multiCloudCluster"`
	// Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
	OnPremCluster OnPremClusterResponse `pulumi:"onPremCluster"`
}

// MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
type MembershipEndpointResponseOutput struct{ *pulumi.OutputState }

func (MembershipEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipEndpointResponse)(nil)).Elem()
}

func (o MembershipEndpointResponseOutput) ToMembershipEndpointResponseOutput() MembershipEndpointResponseOutput {
	return o
}

func (o MembershipEndpointResponseOutput) ToMembershipEndpointResponseOutputWithContext(ctx context.Context) MembershipEndpointResponseOutput {
	return o
}

// Optional. Specific information for a GDC Edge Appliance cluster.
func (o MembershipEndpointResponseOutput) ApplianceCluster() ApplianceClusterResponseOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) ApplianceClusterResponse { return v.ApplianceCluster }).(ApplianceClusterResponseOutput)
}

// Optional. Specific information for a Google Edge cluster.
func (o MembershipEndpointResponseOutput) EdgeCluster() EdgeClusterResponseOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) EdgeClusterResponse { return v.EdgeCluster }).(EdgeClusterResponseOutput)
}

// Optional. Specific information for a GKE-on-GCP cluster.
func (o MembershipEndpointResponseOutput) GkeCluster() GkeClusterResponseOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) GkeClusterResponse { return v.GkeCluster }).(GkeClusterResponseOutput)
}

// Whether the lifecycle of this membership is managed by a google cluster platform service.
func (o MembershipEndpointResponseOutput) GoogleManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) bool { return v.GoogleManaged }).(pulumi.BoolOutput)
}

// Useful Kubernetes-specific metadata.
func (o MembershipEndpointResponseOutput) KubernetesMetadata() KubernetesMetadataResponseOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) KubernetesMetadataResponse { return v.KubernetesMetadata }).(KubernetesMetadataResponseOutput)
}

// Optional. The in-cluster Kubernetes Resources that should be applied for a correctly registered cluster, in the steady state. These resources: * Ensure that the cluster is exclusively registered to one and only one Hub Membership. * Propagate Workload Pool Information available in the Membership Authority field. * Ensure proper initial configuration of default Hub Features.
func (o MembershipEndpointResponseOutput) KubernetesResource() KubernetesResourceResponseOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) KubernetesResourceResponse { return v.KubernetesResource }).(KubernetesResourceResponseOutput)
}

// Optional. Specific information for a GKE Multi-Cloud cluster.
func (o MembershipEndpointResponseOutput) MultiCloudCluster() MultiCloudClusterResponseOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) MultiCloudClusterResponse { return v.MultiCloudCluster }).(MultiCloudClusterResponseOutput)
}

// Optional. Specific information for a GKE On-Prem cluster. An onprem user-cluster who has no resourceLink is not allowed to use this field, it should have a nil "type" instead.
func (o MembershipEndpointResponseOutput) OnPremCluster() OnPremClusterResponseOutput {
	return o.ApplyT(func(v MembershipEndpointResponse) OnPremClusterResponse { return v.OnPremCluster }).(OnPremClusterResponseOutput)
}

// MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.
type MembershipFeatureSpec struct {
	// Config Management-specific spec.
	Configmanagement *ConfigManagementMembershipSpec `pulumi:"configmanagement"`
	// Fleet observability membership spec
	Fleetobservability *FleetObservabilityMembershipSpec `pulumi:"fleetobservability"`
	// Identity Service-specific spec.
	Identityservice *IdentityServiceMembershipSpec `pulumi:"identityservice"`
	// Anthos Service Mesh-specific spec
	Mesh *ServiceMeshMembershipSpec `pulumi:"mesh"`
	// Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
	Origin *Origin `pulumi:"origin"`
	// Policy Controller spec.
	Policycontroller *PolicyControllerMembershipSpec `pulumi:"policycontroller"`
}

// MembershipFeatureSpecInput is an input type that accepts MembershipFeatureSpecArgs and MembershipFeatureSpecOutput values.
// You can construct a concrete instance of `MembershipFeatureSpecInput` via:
//
//	MembershipFeatureSpecArgs{...}
type MembershipFeatureSpecInput interface {
	pulumi.Input

	ToMembershipFeatureSpecOutput() MembershipFeatureSpecOutput
	ToMembershipFeatureSpecOutputWithContext(context.Context) MembershipFeatureSpecOutput
}

// MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.
type MembershipFeatureSpecArgs struct {
	// Config Management-specific spec.
	Configmanagement ConfigManagementMembershipSpecPtrInput `pulumi:"configmanagement"`
	// Fleet observability membership spec
	Fleetobservability FleetObservabilityMembershipSpecPtrInput `pulumi:"fleetobservability"`
	// Identity Service-specific spec.
	Identityservice IdentityServiceMembershipSpecPtrInput `pulumi:"identityservice"`
	// Anthos Service Mesh-specific spec
	Mesh ServiceMeshMembershipSpecPtrInput `pulumi:"mesh"`
	// Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
	Origin OriginPtrInput `pulumi:"origin"`
	// Policy Controller spec.
	Policycontroller PolicyControllerMembershipSpecPtrInput `pulumi:"policycontroller"`
}

func (MembershipFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipFeatureSpec)(nil)).Elem()
}

func (i MembershipFeatureSpecArgs) ToMembershipFeatureSpecOutput() MembershipFeatureSpecOutput {
	return i.ToMembershipFeatureSpecOutputWithContext(context.Background())
}

func (i MembershipFeatureSpecArgs) ToMembershipFeatureSpecOutputWithContext(ctx context.Context) MembershipFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipFeatureSpecOutput)
}

func (i MembershipFeatureSpecArgs) ToMembershipFeatureSpecPtrOutput() MembershipFeatureSpecPtrOutput {
	return i.ToMembershipFeatureSpecPtrOutputWithContext(context.Background())
}

func (i MembershipFeatureSpecArgs) ToMembershipFeatureSpecPtrOutputWithContext(ctx context.Context) MembershipFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipFeatureSpecOutput).ToMembershipFeatureSpecPtrOutputWithContext(ctx)
}

// MembershipFeatureSpecPtrInput is an input type that accepts MembershipFeatureSpecArgs, MembershipFeatureSpecPtr and MembershipFeatureSpecPtrOutput values.
// You can construct a concrete instance of `MembershipFeatureSpecPtrInput` via:
//
//	        MembershipFeatureSpecArgs{...}
//
//	or:
//
//	        nil
type MembershipFeatureSpecPtrInput interface {
	pulumi.Input

	ToMembershipFeatureSpecPtrOutput() MembershipFeatureSpecPtrOutput
	ToMembershipFeatureSpecPtrOutputWithContext(context.Context) MembershipFeatureSpecPtrOutput
}

type membershipFeatureSpecPtrType MembershipFeatureSpecArgs

func MembershipFeatureSpecPtr(v *MembershipFeatureSpecArgs) MembershipFeatureSpecPtrInput {
	return (*membershipFeatureSpecPtrType)(v)
}

func (*membershipFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipFeatureSpec)(nil)).Elem()
}

func (i *membershipFeatureSpecPtrType) ToMembershipFeatureSpecPtrOutput() MembershipFeatureSpecPtrOutput {
	return i.ToMembershipFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *membershipFeatureSpecPtrType) ToMembershipFeatureSpecPtrOutputWithContext(ctx context.Context) MembershipFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipFeatureSpecPtrOutput)
}

// MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.
type MembershipFeatureSpecOutput struct{ *pulumi.OutputState }

func (MembershipFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipFeatureSpec)(nil)).Elem()
}

func (o MembershipFeatureSpecOutput) ToMembershipFeatureSpecOutput() MembershipFeatureSpecOutput {
	return o
}

func (o MembershipFeatureSpecOutput) ToMembershipFeatureSpecOutputWithContext(ctx context.Context) MembershipFeatureSpecOutput {
	return o
}

func (o MembershipFeatureSpecOutput) ToMembershipFeatureSpecPtrOutput() MembershipFeatureSpecPtrOutput {
	return o.ToMembershipFeatureSpecPtrOutputWithContext(context.Background())
}

func (o MembershipFeatureSpecOutput) ToMembershipFeatureSpecPtrOutputWithContext(ctx context.Context) MembershipFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MembershipFeatureSpec) *MembershipFeatureSpec {
		return &v
	}).(MembershipFeatureSpecPtrOutput)
}

// Config Management-specific spec.
func (o MembershipFeatureSpecOutput) Configmanagement() ConfigManagementMembershipSpecPtrOutput {
	return o.ApplyT(func(v MembershipFeatureSpec) *ConfigManagementMembershipSpec { return v.Configmanagement }).(ConfigManagementMembershipSpecPtrOutput)
}

// Fleet observability membership spec
func (o MembershipFeatureSpecOutput) Fleetobservability() FleetObservabilityMembershipSpecPtrOutput {
	return o.ApplyT(func(v MembershipFeatureSpec) *FleetObservabilityMembershipSpec { return v.Fleetobservability }).(FleetObservabilityMembershipSpecPtrOutput)
}

// Identity Service-specific spec.
func (o MembershipFeatureSpecOutput) Identityservice() IdentityServiceMembershipSpecPtrOutput {
	return o.ApplyT(func(v MembershipFeatureSpec) *IdentityServiceMembershipSpec { return v.Identityservice }).(IdentityServiceMembershipSpecPtrOutput)
}

// Anthos Service Mesh-specific spec
func (o MembershipFeatureSpecOutput) Mesh() ServiceMeshMembershipSpecPtrOutput {
	return o.ApplyT(func(v MembershipFeatureSpec) *ServiceMeshMembershipSpec { return v.Mesh }).(ServiceMeshMembershipSpecPtrOutput)
}

// Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
func (o MembershipFeatureSpecOutput) Origin() OriginPtrOutput {
	return o.ApplyT(func(v MembershipFeatureSpec) *Origin { return v.Origin }).(OriginPtrOutput)
}

// Policy Controller spec.
func (o MembershipFeatureSpecOutput) Policycontroller() PolicyControllerMembershipSpecPtrOutput {
	return o.ApplyT(func(v MembershipFeatureSpec) *PolicyControllerMembershipSpec { return v.Policycontroller }).(PolicyControllerMembershipSpecPtrOutput)
}

type MembershipFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (MembershipFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipFeatureSpec)(nil)).Elem()
}

func (o MembershipFeatureSpecPtrOutput) ToMembershipFeatureSpecPtrOutput() MembershipFeatureSpecPtrOutput {
	return o
}

func (o MembershipFeatureSpecPtrOutput) ToMembershipFeatureSpecPtrOutputWithContext(ctx context.Context) MembershipFeatureSpecPtrOutput {
	return o
}

func (o MembershipFeatureSpecPtrOutput) Elem() MembershipFeatureSpecOutput {
	return o.ApplyT(func(v *MembershipFeatureSpec) MembershipFeatureSpec {
		if v != nil {
			return *v
		}
		var ret MembershipFeatureSpec
		return ret
	}).(MembershipFeatureSpecOutput)
}

// Config Management-specific spec.
func (o MembershipFeatureSpecPtrOutput) Configmanagement() ConfigManagementMembershipSpecPtrOutput {
	return o.ApplyT(func(v *MembershipFeatureSpec) *ConfigManagementMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Configmanagement
	}).(ConfigManagementMembershipSpecPtrOutput)
}

// Fleet observability membership spec
func (o MembershipFeatureSpecPtrOutput) Fleetobservability() FleetObservabilityMembershipSpecPtrOutput {
	return o.ApplyT(func(v *MembershipFeatureSpec) *FleetObservabilityMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Fleetobservability
	}).(FleetObservabilityMembershipSpecPtrOutput)
}

// Identity Service-specific spec.
func (o MembershipFeatureSpecPtrOutput) Identityservice() IdentityServiceMembershipSpecPtrOutput {
	return o.ApplyT(func(v *MembershipFeatureSpec) *IdentityServiceMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Identityservice
	}).(IdentityServiceMembershipSpecPtrOutput)
}

// Anthos Service Mesh-specific spec
func (o MembershipFeatureSpecPtrOutput) Mesh() ServiceMeshMembershipSpecPtrOutput {
	return o.ApplyT(func(v *MembershipFeatureSpec) *ServiceMeshMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Mesh
	}).(ServiceMeshMembershipSpecPtrOutput)
}

// Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
func (o MembershipFeatureSpecPtrOutput) Origin() OriginPtrOutput {
	return o.ApplyT(func(v *MembershipFeatureSpec) *Origin {
		if v == nil {
			return nil
		}
		return v.Origin
	}).(OriginPtrOutput)
}

// Policy Controller spec.
func (o MembershipFeatureSpecPtrOutput) Policycontroller() PolicyControllerMembershipSpecPtrOutput {
	return o.ApplyT(func(v *MembershipFeatureSpec) *PolicyControllerMembershipSpec {
		if v == nil {
			return nil
		}
		return v.Policycontroller
	}).(PolicyControllerMembershipSpecPtrOutput)
}

// MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.
type MembershipFeatureSpecResponse struct {
	// Config Management-specific spec.
	Configmanagement ConfigManagementMembershipSpecResponse `pulumi:"configmanagement"`
	// Fleet observability membership spec
	Fleetobservability FleetObservabilityMembershipSpecResponse `pulumi:"fleetobservability"`
	// Identity Service-specific spec.
	Identityservice IdentityServiceMembershipSpecResponse `pulumi:"identityservice"`
	// Anthos Service Mesh-specific spec
	Mesh ServiceMeshMembershipSpecResponse `pulumi:"mesh"`
	// Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
	Origin OriginResponse `pulumi:"origin"`
	// Policy Controller spec.
	Policycontroller PolicyControllerMembershipSpecResponse `pulumi:"policycontroller"`
}

// MembershipFeatureSpec contains configuration information for a single Membership. NOTE: Please use snake case in your feature name.
type MembershipFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (MembershipFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipFeatureSpecResponse)(nil)).Elem()
}

func (o MembershipFeatureSpecResponseOutput) ToMembershipFeatureSpecResponseOutput() MembershipFeatureSpecResponseOutput {
	return o
}

func (o MembershipFeatureSpecResponseOutput) ToMembershipFeatureSpecResponseOutputWithContext(ctx context.Context) MembershipFeatureSpecResponseOutput {
	return o
}

// Config Management-specific spec.
func (o MembershipFeatureSpecResponseOutput) Configmanagement() ConfigManagementMembershipSpecResponseOutput {
	return o.ApplyT(func(v MembershipFeatureSpecResponse) ConfigManagementMembershipSpecResponse {
		return v.Configmanagement
	}).(ConfigManagementMembershipSpecResponseOutput)
}

// Fleet observability membership spec
func (o MembershipFeatureSpecResponseOutput) Fleetobservability() FleetObservabilityMembershipSpecResponseOutput {
	return o.ApplyT(func(v MembershipFeatureSpecResponse) FleetObservabilityMembershipSpecResponse {
		return v.Fleetobservability
	}).(FleetObservabilityMembershipSpecResponseOutput)
}

// Identity Service-specific spec.
func (o MembershipFeatureSpecResponseOutput) Identityservice() IdentityServiceMembershipSpecResponseOutput {
	return o.ApplyT(func(v MembershipFeatureSpecResponse) IdentityServiceMembershipSpecResponse { return v.Identityservice }).(IdentityServiceMembershipSpecResponseOutput)
}

// Anthos Service Mesh-specific spec
func (o MembershipFeatureSpecResponseOutput) Mesh() ServiceMeshMembershipSpecResponseOutput {
	return o.ApplyT(func(v MembershipFeatureSpecResponse) ServiceMeshMembershipSpecResponse { return v.Mesh }).(ServiceMeshMembershipSpecResponseOutput)
}

// Whether this per-Membership spec was inherited from a fleet-level default. This field can be updated by users by either overriding a Membership config (updated to USER implicitly) or setting to FLEET explicitly.
func (o MembershipFeatureSpecResponseOutput) Origin() OriginResponseOutput {
	return o.ApplyT(func(v MembershipFeatureSpecResponse) OriginResponse { return v.Origin }).(OriginResponseOutput)
}

// Policy Controller spec.
func (o MembershipFeatureSpecResponseOutput) Policycontroller() PolicyControllerMembershipSpecResponseOutput {
	return o.ApplyT(func(v MembershipFeatureSpecResponse) PolicyControllerMembershipSpecResponse {
		return v.Policycontroller
	}).(PolicyControllerMembershipSpecResponseOutput)
}

// MembershipFeatureState contains Feature status information for a single Membership.
type MembershipFeatureStateResponse struct {
	// Appdevexperience specific state.
	Appdevexperience AppDevExperienceFeatureStateResponse `pulumi:"appdevexperience"`
	// ClusterUpgrade state.
	Clusterupgrade ClusterUpgradeMembershipStateResponse `pulumi:"clusterupgrade"`
	// Config Management-specific state.
	Configmanagement ConfigManagementMembershipStateResponse `pulumi:"configmanagement"`
	// Fleet observability membership state.
	Fleetobservability FleetObservabilityMembershipStateResponse `pulumi:"fleetobservability"`
	// Identity Service-specific state.
	Identityservice IdentityServiceMembershipStateResponse `pulumi:"identityservice"`
	// Policycontroller-specific state.
	Policycontroller PolicyControllerMembershipStateResponse `pulumi:"policycontroller"`
	// Service Mesh-specific state.
	Servicemesh ServiceMeshMembershipStateResponse `pulumi:"servicemesh"`
	// The high-level state of this Feature for a single membership.
	State FeatureStateResponse `pulumi:"state"`
}

// MembershipFeatureState contains Feature status information for a single Membership.
type MembershipFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (MembershipFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipFeatureStateResponse)(nil)).Elem()
}

func (o MembershipFeatureStateResponseOutput) ToMembershipFeatureStateResponseOutput() MembershipFeatureStateResponseOutput {
	return o
}

func (o MembershipFeatureStateResponseOutput) ToMembershipFeatureStateResponseOutputWithContext(ctx context.Context) MembershipFeatureStateResponseOutput {
	return o
}

// Appdevexperience specific state.
func (o MembershipFeatureStateResponseOutput) Appdevexperience() AppDevExperienceFeatureStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) AppDevExperienceFeatureStateResponse { return v.Appdevexperience }).(AppDevExperienceFeatureStateResponseOutput)
}

// ClusterUpgrade state.
func (o MembershipFeatureStateResponseOutput) Clusterupgrade() ClusterUpgradeMembershipStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) ClusterUpgradeMembershipStateResponse { return v.Clusterupgrade }).(ClusterUpgradeMembershipStateResponseOutput)
}

// Config Management-specific state.
func (o MembershipFeatureStateResponseOutput) Configmanagement() ConfigManagementMembershipStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) ConfigManagementMembershipStateResponse {
		return v.Configmanagement
	}).(ConfigManagementMembershipStateResponseOutput)
}

// Fleet observability membership state.
func (o MembershipFeatureStateResponseOutput) Fleetobservability() FleetObservabilityMembershipStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) FleetObservabilityMembershipStateResponse {
		return v.Fleetobservability
	}).(FleetObservabilityMembershipStateResponseOutput)
}

// Identity Service-specific state.
func (o MembershipFeatureStateResponseOutput) Identityservice() IdentityServiceMembershipStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) IdentityServiceMembershipStateResponse {
		return v.Identityservice
	}).(IdentityServiceMembershipStateResponseOutput)
}

// Policycontroller-specific state.
func (o MembershipFeatureStateResponseOutput) Policycontroller() PolicyControllerMembershipStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) PolicyControllerMembershipStateResponse {
		return v.Policycontroller
	}).(PolicyControllerMembershipStateResponseOutput)
}

// Service Mesh-specific state.
func (o MembershipFeatureStateResponseOutput) Servicemesh() ServiceMeshMembershipStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) ServiceMeshMembershipStateResponse { return v.Servicemesh }).(ServiceMeshMembershipStateResponseOutput)
}

// The high-level state of this Feature for a single membership.
func (o MembershipFeatureStateResponseOutput) State() FeatureStateResponseOutput {
	return o.ApplyT(func(v MembershipFeatureStateResponse) FeatureStateResponse { return v.State }).(FeatureStateResponseOutput)
}

// MembershipState describes the state of a Membership resource.
type MembershipStateResponse struct {
	// The current state of the Membership resource.
	Code string `pulumi:"code"`
}

// MembershipState describes the state of a Membership resource.
type MembershipStateResponseOutput struct{ *pulumi.OutputState }

func (MembershipStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MembershipStateResponse)(nil)).Elem()
}

func (o MembershipStateResponseOutput) ToMembershipStateResponseOutput() MembershipStateResponseOutput {
	return o
}

func (o MembershipStateResponseOutput) ToMembershipStateResponseOutputWithContext(ctx context.Context) MembershipStateResponseOutput {
	return o
}

// The current state of the Membership resource.
func (o MembershipStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v MembershipStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
type MonitoringConfig struct {
	// Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
	Cluster *string `pulumi:"cluster"`
	// Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
	ClusterHash *string `pulumi:"clusterHash"`
	// Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
	KubernetesMetricsPrefix *string `pulumi:"kubernetesMetricsPrefix"`
	// Optional. Location used to report Metrics
	Location *string `pulumi:"location"`
	// Optional. Project used to report Metrics
	Project *string `pulumi:"project"`
}

// MonitoringConfigInput is an input type that accepts MonitoringConfigArgs and MonitoringConfigOutput values.
// You can construct a concrete instance of `MonitoringConfigInput` via:
//
//	MonitoringConfigArgs{...}
type MonitoringConfigInput interface {
	pulumi.Input

	ToMonitoringConfigOutput() MonitoringConfigOutput
	ToMonitoringConfigOutputWithContext(context.Context) MonitoringConfigOutput
}

// MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
type MonitoringConfigArgs struct {
	// Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
	ClusterHash pulumi.StringPtrInput `pulumi:"clusterHash"`
	// Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
	KubernetesMetricsPrefix pulumi.StringPtrInput `pulumi:"kubernetesMetricsPrefix"`
	// Optional. Location used to report Metrics
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Project used to report Metrics
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (MonitoringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringConfig)(nil)).Elem()
}

func (i MonitoringConfigArgs) ToMonitoringConfigOutput() MonitoringConfigOutput {
	return i.ToMonitoringConfigOutputWithContext(context.Background())
}

func (i MonitoringConfigArgs) ToMonitoringConfigOutputWithContext(ctx context.Context) MonitoringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringConfigOutput)
}

func (i MonitoringConfigArgs) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return i.ToMonitoringConfigPtrOutputWithContext(context.Background())
}

func (i MonitoringConfigArgs) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringConfigOutput).ToMonitoringConfigPtrOutputWithContext(ctx)
}

// MonitoringConfigPtrInput is an input type that accepts MonitoringConfigArgs, MonitoringConfigPtr and MonitoringConfigPtrOutput values.
// You can construct a concrete instance of `MonitoringConfigPtrInput` via:
//
//	        MonitoringConfigArgs{...}
//
//	or:
//
//	        nil
type MonitoringConfigPtrInput interface {
	pulumi.Input

	ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput
	ToMonitoringConfigPtrOutputWithContext(context.Context) MonitoringConfigPtrOutput
}

type monitoringConfigPtrType MonitoringConfigArgs

func MonitoringConfigPtr(v *MonitoringConfigArgs) MonitoringConfigPtrInput {
	return (*monitoringConfigPtrType)(v)
}

func (*monitoringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringConfig)(nil)).Elem()
}

func (i *monitoringConfigPtrType) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return i.ToMonitoringConfigPtrOutputWithContext(context.Background())
}

func (i *monitoringConfigPtrType) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringConfigPtrOutput)
}

// MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
type MonitoringConfigOutput struct{ *pulumi.OutputState }

func (MonitoringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringConfig)(nil)).Elem()
}

func (o MonitoringConfigOutput) ToMonitoringConfigOutput() MonitoringConfigOutput {
	return o
}

func (o MonitoringConfigOutput) ToMonitoringConfigOutputWithContext(ctx context.Context) MonitoringConfigOutput {
	return o
}

func (o MonitoringConfigOutput) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return o.ToMonitoringConfigPtrOutputWithContext(context.Background())
}

func (o MonitoringConfigOutput) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MonitoringConfig) *MonitoringConfig {
		return &v
	}).(MonitoringConfigPtrOutput)
}

// Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
func (o MonitoringConfigOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
func (o MonitoringConfigOutput) ClusterHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *string { return v.ClusterHash }).(pulumi.StringPtrOutput)
}

// Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
func (o MonitoringConfigOutput) KubernetesMetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *string { return v.KubernetesMetricsPrefix }).(pulumi.StringPtrOutput)
}

// Optional. Location used to report Metrics
func (o MonitoringConfigOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Project used to report Metrics
func (o MonitoringConfigOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MonitoringConfig) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type MonitoringConfigPtrOutput struct{ *pulumi.OutputState }

func (MonitoringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringConfig)(nil)).Elem()
}

func (o MonitoringConfigPtrOutput) ToMonitoringConfigPtrOutput() MonitoringConfigPtrOutput {
	return o
}

func (o MonitoringConfigPtrOutput) ToMonitoringConfigPtrOutputWithContext(ctx context.Context) MonitoringConfigPtrOutput {
	return o
}

func (o MonitoringConfigPtrOutput) Elem() MonitoringConfigOutput {
	return o.ApplyT(func(v *MonitoringConfig) MonitoringConfig {
		if v != nil {
			return *v
		}
		var ret MonitoringConfig
		return ret
	}).(MonitoringConfigOutput)
}

// Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
func (o MonitoringConfigPtrOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *string {
		if v == nil {
			return nil
		}
		return v.Cluster
	}).(pulumi.StringPtrOutput)
}

// Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
func (o MonitoringConfigPtrOutput) ClusterHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClusterHash
	}).(pulumi.StringPtrOutput)
}

// Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
func (o MonitoringConfigPtrOutput) KubernetesMetricsPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *string {
		if v == nil {
			return nil
		}
		return v.KubernetesMetricsPrefix
	}).(pulumi.StringPtrOutput)
}

// Optional. Location used to report Metrics
func (o MonitoringConfigPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Project used to report Metrics
func (o MonitoringConfigPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MonitoringConfig) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
type MonitoringConfigResponse struct {
	// Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
	Cluster string `pulumi:"cluster"`
	// Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
	ClusterHash string `pulumi:"clusterHash"`
	// Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
	KubernetesMetricsPrefix string `pulumi:"kubernetesMetricsPrefix"`
	// Optional. Location used to report Metrics
	Location string `pulumi:"location"`
	// Optional. Project used to report Metrics
	Project string `pulumi:"project"`
}

// MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can't be mutated directly to prevent accidentally breaking the constinousty of metrics.
type MonitoringConfigResponseOutput struct{ *pulumi.OutputState }

func (MonitoringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringConfigResponse)(nil)).Elem()
}

func (o MonitoringConfigResponseOutput) ToMonitoringConfigResponseOutput() MonitoringConfigResponseOutput {
	return o
}

func (o MonitoringConfigResponseOutput) ToMonitoringConfigResponseOutputWithContext(ctx context.Context) MonitoringConfigResponseOutput {
	return o
}

// Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., "awsClusters/cluster_1".
func (o MonitoringConfigResponseOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) string { return v.Cluster }).(pulumi.StringOutput)
}

// Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
func (o MonitoringConfigResponseOutput) ClusterHash() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) string { return v.ClusterHash }).(pulumi.StringOutput)
}

// Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
func (o MonitoringConfigResponseOutput) KubernetesMetricsPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) string { return v.KubernetesMetricsPrefix }).(pulumi.StringOutput)
}

// Optional. Location used to report Metrics
func (o MonitoringConfigResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Project used to report Metrics
func (o MonitoringConfigResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v MonitoringConfigResponse) string { return v.Project }).(pulumi.StringOutput)
}

// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
type MultiCloudCluster struct {
	// Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
	ResourceLink *string `pulumi:"resourceLink"`
}

// MultiCloudClusterInput is an input type that accepts MultiCloudClusterArgs and MultiCloudClusterOutput values.
// You can construct a concrete instance of `MultiCloudClusterInput` via:
//
//	MultiCloudClusterArgs{...}
type MultiCloudClusterInput interface {
	pulumi.Input

	ToMultiCloudClusterOutput() MultiCloudClusterOutput
	ToMultiCloudClusterOutputWithContext(context.Context) MultiCloudClusterOutput
}

// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
type MultiCloudClusterArgs struct {
	// Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
	ResourceLink pulumi.StringPtrInput `pulumi:"resourceLink"`
}

func (MultiCloudClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiCloudCluster)(nil)).Elem()
}

func (i MultiCloudClusterArgs) ToMultiCloudClusterOutput() MultiCloudClusterOutput {
	return i.ToMultiCloudClusterOutputWithContext(context.Background())
}

func (i MultiCloudClusterArgs) ToMultiCloudClusterOutputWithContext(ctx context.Context) MultiCloudClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiCloudClusterOutput)
}

func (i MultiCloudClusterArgs) ToMultiCloudClusterPtrOutput() MultiCloudClusterPtrOutput {
	return i.ToMultiCloudClusterPtrOutputWithContext(context.Background())
}

func (i MultiCloudClusterArgs) ToMultiCloudClusterPtrOutputWithContext(ctx context.Context) MultiCloudClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiCloudClusterOutput).ToMultiCloudClusterPtrOutputWithContext(ctx)
}

// MultiCloudClusterPtrInput is an input type that accepts MultiCloudClusterArgs, MultiCloudClusterPtr and MultiCloudClusterPtrOutput values.
// You can construct a concrete instance of `MultiCloudClusterPtrInput` via:
//
//	        MultiCloudClusterArgs{...}
//
//	or:
//
//	        nil
type MultiCloudClusterPtrInput interface {
	pulumi.Input

	ToMultiCloudClusterPtrOutput() MultiCloudClusterPtrOutput
	ToMultiCloudClusterPtrOutputWithContext(context.Context) MultiCloudClusterPtrOutput
}

type multiCloudClusterPtrType MultiCloudClusterArgs

func MultiCloudClusterPtr(v *MultiCloudClusterArgs) MultiCloudClusterPtrInput {
	return (*multiCloudClusterPtrType)(v)
}

func (*multiCloudClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiCloudCluster)(nil)).Elem()
}

func (i *multiCloudClusterPtrType) ToMultiCloudClusterPtrOutput() MultiCloudClusterPtrOutput {
	return i.ToMultiCloudClusterPtrOutputWithContext(context.Background())
}

func (i *multiCloudClusterPtrType) ToMultiCloudClusterPtrOutputWithContext(ctx context.Context) MultiCloudClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiCloudClusterPtrOutput)
}

// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
type MultiCloudClusterOutput struct{ *pulumi.OutputState }

func (MultiCloudClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiCloudCluster)(nil)).Elem()
}

func (o MultiCloudClusterOutput) ToMultiCloudClusterOutput() MultiCloudClusterOutput {
	return o
}

func (o MultiCloudClusterOutput) ToMultiCloudClusterOutputWithContext(ctx context.Context) MultiCloudClusterOutput {
	return o
}

func (o MultiCloudClusterOutput) ToMultiCloudClusterPtrOutput() MultiCloudClusterPtrOutput {
	return o.ToMultiCloudClusterPtrOutputWithContext(context.Background())
}

func (o MultiCloudClusterOutput) ToMultiCloudClusterPtrOutputWithContext(ctx context.Context) MultiCloudClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiCloudCluster) *MultiCloudCluster {
		return &v
	}).(MultiCloudClusterPtrOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
func (o MultiCloudClusterOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiCloudCluster) *string { return v.ResourceLink }).(pulumi.StringPtrOutput)
}

type MultiCloudClusterPtrOutput struct{ *pulumi.OutputState }

func (MultiCloudClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiCloudCluster)(nil)).Elem()
}

func (o MultiCloudClusterPtrOutput) ToMultiCloudClusterPtrOutput() MultiCloudClusterPtrOutput {
	return o
}

func (o MultiCloudClusterPtrOutput) ToMultiCloudClusterPtrOutputWithContext(ctx context.Context) MultiCloudClusterPtrOutput {
	return o
}

func (o MultiCloudClusterPtrOutput) Elem() MultiCloudClusterOutput {
	return o.ApplyT(func(v *MultiCloudCluster) MultiCloudCluster {
		if v != nil {
			return *v
		}
		var ret MultiCloudCluster
		return ret
	}).(MultiCloudClusterOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
func (o MultiCloudClusterPtrOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiCloudCluster) *string {
		if v == nil {
			return nil
		}
		return v.ResourceLink
	}).(pulumi.StringPtrOutput)
}

// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
type MultiCloudClusterResponse struct {
	// If cluster_missing is set then it denotes that API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster no longer exists.
	ClusterMissing bool `pulumi:"clusterMissing"`
	// Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
	ResourceLink string `pulumi:"resourceLink"`
}

// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
type MultiCloudClusterResponseOutput struct{ *pulumi.OutputState }

func (MultiCloudClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiCloudClusterResponse)(nil)).Elem()
}

func (o MultiCloudClusterResponseOutput) ToMultiCloudClusterResponseOutput() MultiCloudClusterResponseOutput {
	return o
}

func (o MultiCloudClusterResponseOutput) ToMultiCloudClusterResponseOutputWithContext(ctx context.Context) MultiCloudClusterResponseOutput {
	return o
}

// If cluster_missing is set then it denotes that API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster no longer exists.
func (o MultiCloudClusterResponseOutput) ClusterMissing() pulumi.BoolOutput {
	return o.ApplyT(func(v MultiCloudClusterResponse) bool { return v.ClusterMissing }).(pulumi.BoolOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE Multi-Cloud cluster. For example: //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
func (o MultiCloudClusterResponseOutput) ResourceLink() pulumi.StringOutput {
	return o.ApplyT(func(v MultiCloudClusterResponse) string { return v.ResourceLink }).(pulumi.StringOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpec struct {
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership *string `pulumi:"configMembership"`
}

// MultiClusterIngressFeatureSpecInput is an input type that accepts MultiClusterIngressFeatureSpecArgs and MultiClusterIngressFeatureSpecOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecInput` via:
//
//	MultiClusterIngressFeatureSpecArgs{...}
type MultiClusterIngressFeatureSpecInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput
	ToMultiClusterIngressFeatureSpecOutputWithContext(context.Context) MultiClusterIngressFeatureSpecOutput
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecArgs struct {
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership pulumi.StringPtrInput `pulumi:"configMembership"`
}

func (MultiClusterIngressFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return i.ToMultiClusterIngressFeatureSpecOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput)
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput).ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx)
}

// MultiClusterIngressFeatureSpecPtrInput is an input type that accepts MultiClusterIngressFeatureSpecArgs, MultiClusterIngressFeatureSpecPtr and MultiClusterIngressFeatureSpecPtrOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecPtrInput` via:
//
//	        MultiClusterIngressFeatureSpecArgs{...}
//
//	or:
//
//	        nil
type MultiClusterIngressFeatureSpecPtrInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput
	ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Context) MultiClusterIngressFeatureSpecPtrOutput
}

type multiClusterIngressFeatureSpecPtrType MultiClusterIngressFeatureSpecArgs

func MultiClusterIngressFeatureSpecPtr(v *MultiClusterIngressFeatureSpecArgs) MultiClusterIngressFeatureSpecPtrInput {
	return (*multiClusterIngressFeatureSpecPtrType)(v)
}

func (*multiClusterIngressFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecPtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiClusterIngressFeatureSpec) *MultiClusterIngressFeatureSpec {
		return &v
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *string { return v.ConfigMembership }).(pulumi.StringPtrOutput)
}

type MultiClusterIngressFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) Elem() MultiClusterIngressFeatureSpecOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) MultiClusterIngressFeatureSpec {
		if v != nil {
			return *v
		}
		var ret MultiClusterIngressFeatureSpec
		return ret
	}).(MultiClusterIngressFeatureSpecOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecPtrOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMembership
	}).(pulumi.StringPtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecResponse struct {
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership string `pulumi:"configMembership"`
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpecResponse)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponseOutput() MultiClusterIngressFeatureSpecResponseOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponseOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponseOutput {
	return o
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecResponseOutput) ConfigMembership() pulumi.StringOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpecResponse) string { return v.ConfigMembership }).(pulumi.StringOutput)
}

// NamespaceLifecycleState describes the state of a Namespace resource.
type NamespaceLifecycleStateResponse struct {
	// The current state of the Namespace resource.
	Code string `pulumi:"code"`
}

// NamespaceLifecycleState describes the state of a Namespace resource.
type NamespaceLifecycleStateResponseOutput struct{ *pulumi.OutputState }

func (NamespaceLifecycleStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespaceLifecycleStateResponse)(nil)).Elem()
}

func (o NamespaceLifecycleStateResponseOutput) ToNamespaceLifecycleStateResponseOutput() NamespaceLifecycleStateResponseOutput {
	return o
}

func (o NamespaceLifecycleStateResponseOutput) ToNamespaceLifecycleStateResponseOutputWithContext(ctx context.Context) NamespaceLifecycleStateResponseOutput {
	return o
}

// The current state of the Namespace resource.
func (o NamespaceLifecycleStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v NamespaceLifecycleStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// OnPremCluster contains information specific to GKE On-Prem clusters.
type OnPremCluster struct {
	// Immutable. Whether the cluster is an admin cluster.
	AdminCluster *bool `pulumi:"adminCluster"`
	// Immutable. The on prem cluster's type.
	ClusterType *OnPremClusterClusterType `pulumi:"clusterType"`
	// Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
	ResourceLink *string `pulumi:"resourceLink"`
}

// OnPremClusterInput is an input type that accepts OnPremClusterArgs and OnPremClusterOutput values.
// You can construct a concrete instance of `OnPremClusterInput` via:
//
//	OnPremClusterArgs{...}
type OnPremClusterInput interface {
	pulumi.Input

	ToOnPremClusterOutput() OnPremClusterOutput
	ToOnPremClusterOutputWithContext(context.Context) OnPremClusterOutput
}

// OnPremCluster contains information specific to GKE On-Prem clusters.
type OnPremClusterArgs struct {
	// Immutable. Whether the cluster is an admin cluster.
	AdminCluster pulumi.BoolPtrInput `pulumi:"adminCluster"`
	// Immutable. The on prem cluster's type.
	ClusterType OnPremClusterClusterTypePtrInput `pulumi:"clusterType"`
	// Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
	ResourceLink pulumi.StringPtrInput `pulumi:"resourceLink"`
}

func (OnPremClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremCluster)(nil)).Elem()
}

func (i OnPremClusterArgs) ToOnPremClusterOutput() OnPremClusterOutput {
	return i.ToOnPremClusterOutputWithContext(context.Background())
}

func (i OnPremClusterArgs) ToOnPremClusterOutputWithContext(ctx context.Context) OnPremClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremClusterOutput)
}

func (i OnPremClusterArgs) ToOnPremClusterPtrOutput() OnPremClusterPtrOutput {
	return i.ToOnPremClusterPtrOutputWithContext(context.Background())
}

func (i OnPremClusterArgs) ToOnPremClusterPtrOutputWithContext(ctx context.Context) OnPremClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremClusterOutput).ToOnPremClusterPtrOutputWithContext(ctx)
}

// OnPremClusterPtrInput is an input type that accepts OnPremClusterArgs, OnPremClusterPtr and OnPremClusterPtrOutput values.
// You can construct a concrete instance of `OnPremClusterPtrInput` via:
//
//	        OnPremClusterArgs{...}
//
//	or:
//
//	        nil
type OnPremClusterPtrInput interface {
	pulumi.Input

	ToOnPremClusterPtrOutput() OnPremClusterPtrOutput
	ToOnPremClusterPtrOutputWithContext(context.Context) OnPremClusterPtrOutput
}

type onPremClusterPtrType OnPremClusterArgs

func OnPremClusterPtr(v *OnPremClusterArgs) OnPremClusterPtrInput {
	return (*onPremClusterPtrType)(v)
}

func (*onPremClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremCluster)(nil)).Elem()
}

func (i *onPremClusterPtrType) ToOnPremClusterPtrOutput() OnPremClusterPtrOutput {
	return i.ToOnPremClusterPtrOutputWithContext(context.Background())
}

func (i *onPremClusterPtrType) ToOnPremClusterPtrOutputWithContext(ctx context.Context) OnPremClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremClusterPtrOutput)
}

// OnPremCluster contains information specific to GKE On-Prem clusters.
type OnPremClusterOutput struct{ *pulumi.OutputState }

func (OnPremClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremCluster)(nil)).Elem()
}

func (o OnPremClusterOutput) ToOnPremClusterOutput() OnPremClusterOutput {
	return o
}

func (o OnPremClusterOutput) ToOnPremClusterOutputWithContext(ctx context.Context) OnPremClusterOutput {
	return o
}

func (o OnPremClusterOutput) ToOnPremClusterPtrOutput() OnPremClusterPtrOutput {
	return o.ToOnPremClusterPtrOutputWithContext(context.Background())
}

func (o OnPremClusterOutput) ToOnPremClusterPtrOutputWithContext(ctx context.Context) OnPremClusterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnPremCluster) *OnPremCluster {
		return &v
	}).(OnPremClusterPtrOutput)
}

// Immutable. Whether the cluster is an admin cluster.
func (o OnPremClusterOutput) AdminCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OnPremCluster) *bool { return v.AdminCluster }).(pulumi.BoolPtrOutput)
}

// Immutable. The on prem cluster's type.
func (o OnPremClusterOutput) ClusterType() OnPremClusterClusterTypePtrOutput {
	return o.ApplyT(func(v OnPremCluster) *OnPremClusterClusterType { return v.ClusterType }).(OnPremClusterClusterTypePtrOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
func (o OnPremClusterOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremCluster) *string { return v.ResourceLink }).(pulumi.StringPtrOutput)
}

type OnPremClusterPtrOutput struct{ *pulumi.OutputState }

func (OnPremClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremCluster)(nil)).Elem()
}

func (o OnPremClusterPtrOutput) ToOnPremClusterPtrOutput() OnPremClusterPtrOutput {
	return o
}

func (o OnPremClusterPtrOutput) ToOnPremClusterPtrOutputWithContext(ctx context.Context) OnPremClusterPtrOutput {
	return o
}

func (o OnPremClusterPtrOutput) Elem() OnPremClusterOutput {
	return o.ApplyT(func(v *OnPremCluster) OnPremCluster {
		if v != nil {
			return *v
		}
		var ret OnPremCluster
		return ret
	}).(OnPremClusterOutput)
}

// Immutable. Whether the cluster is an admin cluster.
func (o OnPremClusterPtrOutput) AdminCluster() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OnPremCluster) *bool {
		if v == nil {
			return nil
		}
		return v.AdminCluster
	}).(pulumi.BoolPtrOutput)
}

// Immutable. The on prem cluster's type.
func (o OnPremClusterPtrOutput) ClusterType() OnPremClusterClusterTypePtrOutput {
	return o.ApplyT(func(v *OnPremCluster) *OnPremClusterClusterType {
		if v == nil {
			return nil
		}
		return v.ClusterType
	}).(OnPremClusterClusterTypePtrOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
func (o OnPremClusterPtrOutput) ResourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremCluster) *string {
		if v == nil {
			return nil
		}
		return v.ResourceLink
	}).(pulumi.StringPtrOutput)
}

// OnPremCluster contains information specific to GKE On-Prem clusters.
type OnPremClusterResponse struct {
	// Immutable. Whether the cluster is an admin cluster.
	AdminCluster bool `pulumi:"adminCluster"`
	// If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.
	ClusterMissing bool `pulumi:"clusterMissing"`
	// Immutable. The on prem cluster's type.
	ClusterType string `pulumi:"clusterType"`
	// Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
	ResourceLink string `pulumi:"resourceLink"`
}

// OnPremCluster contains information specific to GKE On-Prem clusters.
type OnPremClusterResponseOutput struct{ *pulumi.OutputState }

func (OnPremClusterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremClusterResponse)(nil)).Elem()
}

func (o OnPremClusterResponseOutput) ToOnPremClusterResponseOutput() OnPremClusterResponseOutput {
	return o
}

func (o OnPremClusterResponseOutput) ToOnPremClusterResponseOutputWithContext(ctx context.Context) OnPremClusterResponseOutput {
	return o
}

// Immutable. Whether the cluster is an admin cluster.
func (o OnPremClusterResponseOutput) AdminCluster() pulumi.BoolOutput {
	return o.ApplyT(func(v OnPremClusterResponse) bool { return v.AdminCluster }).(pulumi.BoolOutput)
}

// If cluster_missing is set then it denotes that API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no longer exists.
func (o OnPremClusterResponseOutput) ClusterMissing() pulumi.BoolOutput {
	return o.ApplyT(func(v OnPremClusterResponse) bool { return v.ClusterMissing }).(pulumi.BoolOutput)
}

// Immutable. The on prem cluster's type.
func (o OnPremClusterResponseOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremClusterResponse) string { return v.ClusterType }).(pulumi.StringOutput)
}

// Immutable. Self-link of the Google Cloud resource for the GKE On-Prem cluster. For example: //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
func (o OnPremClusterResponseOutput) ResourceLink() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremClusterResponse) string { return v.ResourceLink }).(pulumi.StringOutput)
}

// Origin defines where this MembershipFeatureSpec originated from.
type Origin struct {
	// Type specifies which type of origin is set.
	Type *OriginType `pulumi:"type"`
}

// OriginInput is an input type that accepts OriginArgs and OriginOutput values.
// You can construct a concrete instance of `OriginInput` via:
//
//	OriginArgs{...}
type OriginInput interface {
	pulumi.Input

	ToOriginOutput() OriginOutput
	ToOriginOutputWithContext(context.Context) OriginOutput
}

// Origin defines where this MembershipFeatureSpec originated from.
type OriginArgs struct {
	// Type specifies which type of origin is set.
	Type OriginTypePtrInput `pulumi:"type"`
}

func (OriginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Origin)(nil)).Elem()
}

func (i OriginArgs) ToOriginOutput() OriginOutput {
	return i.ToOriginOutputWithContext(context.Background())
}

func (i OriginArgs) ToOriginOutputWithContext(ctx context.Context) OriginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginOutput)
}

func (i OriginArgs) ToOriginPtrOutput() OriginPtrOutput {
	return i.ToOriginPtrOutputWithContext(context.Background())
}

func (i OriginArgs) ToOriginPtrOutputWithContext(ctx context.Context) OriginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginOutput).ToOriginPtrOutputWithContext(ctx)
}

// OriginPtrInput is an input type that accepts OriginArgs, OriginPtr and OriginPtrOutput values.
// You can construct a concrete instance of `OriginPtrInput` via:
//
//	        OriginArgs{...}
//
//	or:
//
//	        nil
type OriginPtrInput interface {
	pulumi.Input

	ToOriginPtrOutput() OriginPtrOutput
	ToOriginPtrOutputWithContext(context.Context) OriginPtrOutput
}

type originPtrType OriginArgs

func OriginPtr(v *OriginArgs) OriginPtrInput {
	return (*originPtrType)(v)
}

func (*originPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Origin)(nil)).Elem()
}

func (i *originPtrType) ToOriginPtrOutput() OriginPtrOutput {
	return i.ToOriginPtrOutputWithContext(context.Background())
}

func (i *originPtrType) ToOriginPtrOutputWithContext(ctx context.Context) OriginPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OriginPtrOutput)
}

// Origin defines where this MembershipFeatureSpec originated from.
type OriginOutput struct{ *pulumi.OutputState }

func (OriginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Origin)(nil)).Elem()
}

func (o OriginOutput) ToOriginOutput() OriginOutput {
	return o
}

func (o OriginOutput) ToOriginOutputWithContext(ctx context.Context) OriginOutput {
	return o
}

func (o OriginOutput) ToOriginPtrOutput() OriginPtrOutput {
	return o.ToOriginPtrOutputWithContext(context.Background())
}

func (o OriginOutput) ToOriginPtrOutputWithContext(ctx context.Context) OriginPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Origin) *Origin {
		return &v
	}).(OriginPtrOutput)
}

// Type specifies which type of origin is set.
func (o OriginOutput) Type() OriginTypePtrOutput {
	return o.ApplyT(func(v Origin) *OriginType { return v.Type }).(OriginTypePtrOutput)
}

type OriginPtrOutput struct{ *pulumi.OutputState }

func (OriginPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Origin)(nil)).Elem()
}

func (o OriginPtrOutput) ToOriginPtrOutput() OriginPtrOutput {
	return o
}

func (o OriginPtrOutput) ToOriginPtrOutputWithContext(ctx context.Context) OriginPtrOutput {
	return o
}

func (o OriginPtrOutput) Elem() OriginOutput {
	return o.ApplyT(func(v *Origin) Origin {
		if v != nil {
			return *v
		}
		var ret Origin
		return ret
	}).(OriginOutput)
}

// Type specifies which type of origin is set.
func (o OriginPtrOutput) Type() OriginTypePtrOutput {
	return o.ApplyT(func(v *Origin) *OriginType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(OriginTypePtrOutput)
}

// Origin defines where this MembershipFeatureSpec originated from.
type OriginResponse struct {
	// Type specifies which type of origin is set.
	Type string `pulumi:"type"`
}

// Origin defines where this MembershipFeatureSpec originated from.
type OriginResponseOutput struct{ *pulumi.OutputState }

func (OriginResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OriginResponse)(nil)).Elem()
}

func (o OriginResponseOutput) ToOriginResponseOutput() OriginResponseOutput {
	return o
}

func (o OriginResponseOutput) ToOriginResponseOutputWithContext(ctx context.Context) OriginResponseOutput {
	return o
}

// Type specifies which type of origin is set.
func (o OriginResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v OriginResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Binauthz policy that applies to this cluster.
type PolicyBinding struct {
	// The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
	Name *string `pulumi:"name"`
}

// PolicyBindingInput is an input type that accepts PolicyBindingArgs and PolicyBindingOutput values.
// You can construct a concrete instance of `PolicyBindingInput` via:
//
//	PolicyBindingArgs{...}
type PolicyBindingInput interface {
	pulumi.Input

	ToPolicyBindingOutput() PolicyBindingOutput
	ToPolicyBindingOutputWithContext(context.Context) PolicyBindingOutput
}

// Binauthz policy that applies to this cluster.
type PolicyBindingArgs struct {
	// The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PolicyBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyBinding)(nil)).Elem()
}

func (i PolicyBindingArgs) ToPolicyBindingOutput() PolicyBindingOutput {
	return i.ToPolicyBindingOutputWithContext(context.Background())
}

func (i PolicyBindingArgs) ToPolicyBindingOutputWithContext(ctx context.Context) PolicyBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBindingOutput)
}

// PolicyBindingArrayInput is an input type that accepts PolicyBindingArray and PolicyBindingArrayOutput values.
// You can construct a concrete instance of `PolicyBindingArrayInput` via:
//
//	PolicyBindingArray{ PolicyBindingArgs{...} }
type PolicyBindingArrayInput interface {
	pulumi.Input

	ToPolicyBindingArrayOutput() PolicyBindingArrayOutput
	ToPolicyBindingArrayOutputWithContext(context.Context) PolicyBindingArrayOutput
}

type PolicyBindingArray []PolicyBindingInput

func (PolicyBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyBinding)(nil)).Elem()
}

func (i PolicyBindingArray) ToPolicyBindingArrayOutput() PolicyBindingArrayOutput {
	return i.ToPolicyBindingArrayOutputWithContext(context.Background())
}

func (i PolicyBindingArray) ToPolicyBindingArrayOutputWithContext(ctx context.Context) PolicyBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBindingArrayOutput)
}

// Binauthz policy that applies to this cluster.
type PolicyBindingOutput struct{ *pulumi.OutputState }

func (PolicyBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyBinding)(nil)).Elem()
}

func (o PolicyBindingOutput) ToPolicyBindingOutput() PolicyBindingOutput {
	return o
}

func (o PolicyBindingOutput) ToPolicyBindingOutputWithContext(ctx context.Context) PolicyBindingOutput {
	return o
}

// The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
func (o PolicyBindingOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyBinding) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PolicyBindingArrayOutput struct{ *pulumi.OutputState }

func (PolicyBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyBinding)(nil)).Elem()
}

func (o PolicyBindingArrayOutput) ToPolicyBindingArrayOutput() PolicyBindingArrayOutput {
	return o
}

func (o PolicyBindingArrayOutput) ToPolicyBindingArrayOutputWithContext(ctx context.Context) PolicyBindingArrayOutput {
	return o
}

func (o PolicyBindingArrayOutput) Index(i pulumi.IntInput) PolicyBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyBinding {
		return vs[0].([]PolicyBinding)[vs[1].(int)]
	}).(PolicyBindingOutput)
}

// Binauthz policy that applies to this cluster.
type PolicyBindingResponse struct {
	// The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
	Name string `pulumi:"name"`
}

// Binauthz policy that applies to this cluster.
type PolicyBindingResponseOutput struct{ *pulumi.OutputState }

func (PolicyBindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyBindingResponse)(nil)).Elem()
}

func (o PolicyBindingResponseOutput) ToPolicyBindingResponseOutput() PolicyBindingResponseOutput {
	return o
}

func (o PolicyBindingResponseOutput) ToPolicyBindingResponseOutputWithContext(ctx context.Context) PolicyBindingResponseOutput {
	return o
}

// The relative resource name of the binauthz platform policy to audit. GKE platform policies have the following format: `projects/{project_number}/platforms/gke/policies/{policy_id}`.
func (o PolicyBindingResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyBindingResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PolicyBindingResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyBindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyBindingResponse)(nil)).Elem()
}

func (o PolicyBindingResponseArrayOutput) ToPolicyBindingResponseArrayOutput() PolicyBindingResponseArrayOutput {
	return o
}

func (o PolicyBindingResponseArrayOutput) ToPolicyBindingResponseArrayOutputWithContext(ctx context.Context) PolicyBindingResponseArrayOutput {
	return o
}

func (o PolicyBindingResponseArrayOutput) Index(i pulumi.IntInput) PolicyBindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyBindingResponse {
		return vs[0].([]PolicyBindingResponse)[vs[1].(int)]
	}).(PolicyBindingResponseOutput)
}

// BundleInstallSpec is the specification configuration for a single managed bundle.
type PolicyControllerBundleInstallSpec struct {
	// The set of namespaces to be exempted from the bundle.
	ExemptedNamespaces []string `pulumi:"exemptedNamespaces"`
}

// PolicyControllerBundleInstallSpecInput is an input type that accepts PolicyControllerBundleInstallSpecArgs and PolicyControllerBundleInstallSpecOutput values.
// You can construct a concrete instance of `PolicyControllerBundleInstallSpecInput` via:
//
//	PolicyControllerBundleInstallSpecArgs{...}
type PolicyControllerBundleInstallSpecInput interface {
	pulumi.Input

	ToPolicyControllerBundleInstallSpecOutput() PolicyControllerBundleInstallSpecOutput
	ToPolicyControllerBundleInstallSpecOutputWithContext(context.Context) PolicyControllerBundleInstallSpecOutput
}

// BundleInstallSpec is the specification configuration for a single managed bundle.
type PolicyControllerBundleInstallSpecArgs struct {
	// The set of namespaces to be exempted from the bundle.
	ExemptedNamespaces pulumi.StringArrayInput `pulumi:"exemptedNamespaces"`
}

func (PolicyControllerBundleInstallSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerBundleInstallSpec)(nil)).Elem()
}

func (i PolicyControllerBundleInstallSpecArgs) ToPolicyControllerBundleInstallSpecOutput() PolicyControllerBundleInstallSpecOutput {
	return i.ToPolicyControllerBundleInstallSpecOutputWithContext(context.Background())
}

func (i PolicyControllerBundleInstallSpecArgs) ToPolicyControllerBundleInstallSpecOutputWithContext(ctx context.Context) PolicyControllerBundleInstallSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerBundleInstallSpecOutput)
}

func (i PolicyControllerBundleInstallSpecArgs) ToPolicyControllerBundleInstallSpecPtrOutput() PolicyControllerBundleInstallSpecPtrOutput {
	return i.ToPolicyControllerBundleInstallSpecPtrOutputWithContext(context.Background())
}

func (i PolicyControllerBundleInstallSpecArgs) ToPolicyControllerBundleInstallSpecPtrOutputWithContext(ctx context.Context) PolicyControllerBundleInstallSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerBundleInstallSpecOutput).ToPolicyControllerBundleInstallSpecPtrOutputWithContext(ctx)
}

// PolicyControllerBundleInstallSpecPtrInput is an input type that accepts PolicyControllerBundleInstallSpecArgs, PolicyControllerBundleInstallSpecPtr and PolicyControllerBundleInstallSpecPtrOutput values.
// You can construct a concrete instance of `PolicyControllerBundleInstallSpecPtrInput` via:
//
//	        PolicyControllerBundleInstallSpecArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerBundleInstallSpecPtrInput interface {
	pulumi.Input

	ToPolicyControllerBundleInstallSpecPtrOutput() PolicyControllerBundleInstallSpecPtrOutput
	ToPolicyControllerBundleInstallSpecPtrOutputWithContext(context.Context) PolicyControllerBundleInstallSpecPtrOutput
}

type policyControllerBundleInstallSpecPtrType PolicyControllerBundleInstallSpecArgs

func PolicyControllerBundleInstallSpecPtr(v *PolicyControllerBundleInstallSpecArgs) PolicyControllerBundleInstallSpecPtrInput {
	return (*policyControllerBundleInstallSpecPtrType)(v)
}

func (*policyControllerBundleInstallSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerBundleInstallSpec)(nil)).Elem()
}

func (i *policyControllerBundleInstallSpecPtrType) ToPolicyControllerBundleInstallSpecPtrOutput() PolicyControllerBundleInstallSpecPtrOutput {
	return i.ToPolicyControllerBundleInstallSpecPtrOutputWithContext(context.Background())
}

func (i *policyControllerBundleInstallSpecPtrType) ToPolicyControllerBundleInstallSpecPtrOutputWithContext(ctx context.Context) PolicyControllerBundleInstallSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerBundleInstallSpecPtrOutput)
}

// BundleInstallSpec is the specification configuration for a single managed bundle.
type PolicyControllerBundleInstallSpecOutput struct{ *pulumi.OutputState }

func (PolicyControllerBundleInstallSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerBundleInstallSpec)(nil)).Elem()
}

func (o PolicyControllerBundleInstallSpecOutput) ToPolicyControllerBundleInstallSpecOutput() PolicyControllerBundleInstallSpecOutput {
	return o
}

func (o PolicyControllerBundleInstallSpecOutput) ToPolicyControllerBundleInstallSpecOutputWithContext(ctx context.Context) PolicyControllerBundleInstallSpecOutput {
	return o
}

func (o PolicyControllerBundleInstallSpecOutput) ToPolicyControllerBundleInstallSpecPtrOutput() PolicyControllerBundleInstallSpecPtrOutput {
	return o.ToPolicyControllerBundleInstallSpecPtrOutputWithContext(context.Background())
}

func (o PolicyControllerBundleInstallSpecOutput) ToPolicyControllerBundleInstallSpecPtrOutputWithContext(ctx context.Context) PolicyControllerBundleInstallSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerBundleInstallSpec) *PolicyControllerBundleInstallSpec {
		return &v
	}).(PolicyControllerBundleInstallSpecPtrOutput)
}

// The set of namespaces to be exempted from the bundle.
func (o PolicyControllerBundleInstallSpecOutput) ExemptedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyControllerBundleInstallSpec) []string { return v.ExemptedNamespaces }).(pulumi.StringArrayOutput)
}

type PolicyControllerBundleInstallSpecPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerBundleInstallSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerBundleInstallSpec)(nil)).Elem()
}

func (o PolicyControllerBundleInstallSpecPtrOutput) ToPolicyControllerBundleInstallSpecPtrOutput() PolicyControllerBundleInstallSpecPtrOutput {
	return o
}

func (o PolicyControllerBundleInstallSpecPtrOutput) ToPolicyControllerBundleInstallSpecPtrOutputWithContext(ctx context.Context) PolicyControllerBundleInstallSpecPtrOutput {
	return o
}

func (o PolicyControllerBundleInstallSpecPtrOutput) Elem() PolicyControllerBundleInstallSpecOutput {
	return o.ApplyT(func(v *PolicyControllerBundleInstallSpec) PolicyControllerBundleInstallSpec {
		if v != nil {
			return *v
		}
		var ret PolicyControllerBundleInstallSpec
		return ret
	}).(PolicyControllerBundleInstallSpecOutput)
}

// The set of namespaces to be exempted from the bundle.
func (o PolicyControllerBundleInstallSpecPtrOutput) ExemptedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyControllerBundleInstallSpec) []string {
		if v == nil {
			return nil
		}
		return v.ExemptedNamespaces
	}).(pulumi.StringArrayOutput)
}

// BundleInstallSpec is the specification configuration for a single managed bundle.
type PolicyControllerBundleInstallSpecResponse struct {
	// The set of namespaces to be exempted from the bundle.
	ExemptedNamespaces []string `pulumi:"exemptedNamespaces"`
}

// BundleInstallSpec is the specification configuration for a single managed bundle.
type PolicyControllerBundleInstallSpecResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerBundleInstallSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerBundleInstallSpecResponse)(nil)).Elem()
}

func (o PolicyControllerBundleInstallSpecResponseOutput) ToPolicyControllerBundleInstallSpecResponseOutput() PolicyControllerBundleInstallSpecResponseOutput {
	return o
}

func (o PolicyControllerBundleInstallSpecResponseOutput) ToPolicyControllerBundleInstallSpecResponseOutputWithContext(ctx context.Context) PolicyControllerBundleInstallSpecResponseOutput {
	return o
}

// The set of namespaces to be exempted from the bundle.
func (o PolicyControllerBundleInstallSpecResponseOutput) ExemptedNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyControllerBundleInstallSpecResponse) []string { return v.ExemptedNamespaces }).(pulumi.StringArrayOutput)
}

// Configuration for Policy Controller
type PolicyControllerHubConfig struct {
	// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
	AuditIntervalSeconds *string `pulumi:"auditIntervalSeconds"`
	// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
	ConstraintViolationLimit *string `pulumi:"constraintViolationLimit"`
	// Map of deployment configs to deployments ("admission", "audit", "mutation').
	DeploymentConfigs *PolicyControllerPolicyControllerDeploymentConfig `pulumi:"deploymentConfigs"`
	// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
	ExemptableNamespaces []string `pulumi:"exemptableNamespaces"`
	// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
	InstallSpec *PolicyControllerHubConfigInstallSpec `pulumi:"installSpec"`
	// Logs all denies and dry run failures.
	LogDeniesEnabled *bool `pulumi:"logDeniesEnabled"`
	// Monitoring specifies the configuration of monitoring.
	Monitoring *PolicyControllerMonitoringConfig `pulumi:"monitoring"`
	// Enables the ability to mutate resources using Policy Controller.
	MutationEnabled *bool `pulumi:"mutationEnabled"`
	// Specifies the desired policy content on the cluster
	PolicyContent *PolicyControllerPolicyContentSpec `pulumi:"policyContent"`
	// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
	ReferentialRulesEnabled *bool `pulumi:"referentialRulesEnabled"`
}

// PolicyControllerHubConfigInput is an input type that accepts PolicyControllerHubConfigArgs and PolicyControllerHubConfigOutput values.
// You can construct a concrete instance of `PolicyControllerHubConfigInput` via:
//
//	PolicyControllerHubConfigArgs{...}
type PolicyControllerHubConfigInput interface {
	pulumi.Input

	ToPolicyControllerHubConfigOutput() PolicyControllerHubConfigOutput
	ToPolicyControllerHubConfigOutputWithContext(context.Context) PolicyControllerHubConfigOutput
}

// Configuration for Policy Controller
type PolicyControllerHubConfigArgs struct {
	// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
	AuditIntervalSeconds pulumi.StringPtrInput `pulumi:"auditIntervalSeconds"`
	// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
	ConstraintViolationLimit pulumi.StringPtrInput `pulumi:"constraintViolationLimit"`
	// Map of deployment configs to deployments ("admission", "audit", "mutation').
	DeploymentConfigs PolicyControllerPolicyControllerDeploymentConfigPtrInput `pulumi:"deploymentConfigs"`
	// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
	ExemptableNamespaces pulumi.StringArrayInput `pulumi:"exemptableNamespaces"`
	// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
	InstallSpec PolicyControllerHubConfigInstallSpecPtrInput `pulumi:"installSpec"`
	// Logs all denies and dry run failures.
	LogDeniesEnabled pulumi.BoolPtrInput `pulumi:"logDeniesEnabled"`
	// Monitoring specifies the configuration of monitoring.
	Monitoring PolicyControllerMonitoringConfigPtrInput `pulumi:"monitoring"`
	// Enables the ability to mutate resources using Policy Controller.
	MutationEnabled pulumi.BoolPtrInput `pulumi:"mutationEnabled"`
	// Specifies the desired policy content on the cluster
	PolicyContent PolicyControllerPolicyContentSpecPtrInput `pulumi:"policyContent"`
	// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
	ReferentialRulesEnabled pulumi.BoolPtrInput `pulumi:"referentialRulesEnabled"`
}

func (PolicyControllerHubConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerHubConfig)(nil)).Elem()
}

func (i PolicyControllerHubConfigArgs) ToPolicyControllerHubConfigOutput() PolicyControllerHubConfigOutput {
	return i.ToPolicyControllerHubConfigOutputWithContext(context.Background())
}

func (i PolicyControllerHubConfigArgs) ToPolicyControllerHubConfigOutputWithContext(ctx context.Context) PolicyControllerHubConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerHubConfigOutput)
}

func (i PolicyControllerHubConfigArgs) ToPolicyControllerHubConfigPtrOutput() PolicyControllerHubConfigPtrOutput {
	return i.ToPolicyControllerHubConfigPtrOutputWithContext(context.Background())
}

func (i PolicyControllerHubConfigArgs) ToPolicyControllerHubConfigPtrOutputWithContext(ctx context.Context) PolicyControllerHubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerHubConfigOutput).ToPolicyControllerHubConfigPtrOutputWithContext(ctx)
}

// PolicyControllerHubConfigPtrInput is an input type that accepts PolicyControllerHubConfigArgs, PolicyControllerHubConfigPtr and PolicyControllerHubConfigPtrOutput values.
// You can construct a concrete instance of `PolicyControllerHubConfigPtrInput` via:
//
//	        PolicyControllerHubConfigArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerHubConfigPtrInput interface {
	pulumi.Input

	ToPolicyControllerHubConfigPtrOutput() PolicyControllerHubConfigPtrOutput
	ToPolicyControllerHubConfigPtrOutputWithContext(context.Context) PolicyControllerHubConfigPtrOutput
}

type policyControllerHubConfigPtrType PolicyControllerHubConfigArgs

func PolicyControllerHubConfigPtr(v *PolicyControllerHubConfigArgs) PolicyControllerHubConfigPtrInput {
	return (*policyControllerHubConfigPtrType)(v)
}

func (*policyControllerHubConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerHubConfig)(nil)).Elem()
}

func (i *policyControllerHubConfigPtrType) ToPolicyControllerHubConfigPtrOutput() PolicyControllerHubConfigPtrOutput {
	return i.ToPolicyControllerHubConfigPtrOutputWithContext(context.Background())
}

func (i *policyControllerHubConfigPtrType) ToPolicyControllerHubConfigPtrOutputWithContext(ctx context.Context) PolicyControllerHubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerHubConfigPtrOutput)
}

// Configuration for Policy Controller
type PolicyControllerHubConfigOutput struct{ *pulumi.OutputState }

func (PolicyControllerHubConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerHubConfig)(nil)).Elem()
}

func (o PolicyControllerHubConfigOutput) ToPolicyControllerHubConfigOutput() PolicyControllerHubConfigOutput {
	return o
}

func (o PolicyControllerHubConfigOutput) ToPolicyControllerHubConfigOutputWithContext(ctx context.Context) PolicyControllerHubConfigOutput {
	return o
}

func (o PolicyControllerHubConfigOutput) ToPolicyControllerHubConfigPtrOutput() PolicyControllerHubConfigPtrOutput {
	return o.ToPolicyControllerHubConfigPtrOutputWithContext(context.Background())
}

func (o PolicyControllerHubConfigOutput) ToPolicyControllerHubConfigPtrOutputWithContext(ctx context.Context) PolicyControllerHubConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerHubConfig) *PolicyControllerHubConfig {
		return &v
	}).(PolicyControllerHubConfigPtrOutput)
}

// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
func (o PolicyControllerHubConfigOutput) AuditIntervalSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *string { return v.AuditIntervalSeconds }).(pulumi.StringPtrOutput)
}

// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
func (o PolicyControllerHubConfigOutput) ConstraintViolationLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *string { return v.ConstraintViolationLimit }).(pulumi.StringPtrOutput)
}

// Map of deployment configs to deployments ("admission", "audit", "mutation').
func (o PolicyControllerHubConfigOutput) DeploymentConfigs() PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *PolicyControllerPolicyControllerDeploymentConfig {
		return v.DeploymentConfigs
	}).(PolicyControllerPolicyControllerDeploymentConfigPtrOutput)
}

// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
func (o PolicyControllerHubConfigOutput) ExemptableNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) []string { return v.ExemptableNamespaces }).(pulumi.StringArrayOutput)
}

// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
func (o PolicyControllerHubConfigOutput) InstallSpec() PolicyControllerHubConfigInstallSpecPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *PolicyControllerHubConfigInstallSpec { return v.InstallSpec }).(PolicyControllerHubConfigInstallSpecPtrOutput)
}

// Logs all denies and dry run failures.
func (o PolicyControllerHubConfigOutput) LogDeniesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *bool { return v.LogDeniesEnabled }).(pulumi.BoolPtrOutput)
}

// Monitoring specifies the configuration of monitoring.
func (o PolicyControllerHubConfigOutput) Monitoring() PolicyControllerMonitoringConfigPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *PolicyControllerMonitoringConfig { return v.Monitoring }).(PolicyControllerMonitoringConfigPtrOutput)
}

// Enables the ability to mutate resources using Policy Controller.
func (o PolicyControllerHubConfigOutput) MutationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *bool { return v.MutationEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the desired policy content on the cluster
func (o PolicyControllerHubConfigOutput) PolicyContent() PolicyControllerPolicyContentSpecPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *PolicyControllerPolicyContentSpec { return v.PolicyContent }).(PolicyControllerPolicyContentSpecPtrOutput)
}

// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
func (o PolicyControllerHubConfigOutput) ReferentialRulesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyControllerHubConfig) *bool { return v.ReferentialRulesEnabled }).(pulumi.BoolPtrOutput)
}

type PolicyControllerHubConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerHubConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerHubConfig)(nil)).Elem()
}

func (o PolicyControllerHubConfigPtrOutput) ToPolicyControllerHubConfigPtrOutput() PolicyControllerHubConfigPtrOutput {
	return o
}

func (o PolicyControllerHubConfigPtrOutput) ToPolicyControllerHubConfigPtrOutputWithContext(ctx context.Context) PolicyControllerHubConfigPtrOutput {
	return o
}

func (o PolicyControllerHubConfigPtrOutput) Elem() PolicyControllerHubConfigOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) PolicyControllerHubConfig {
		if v != nil {
			return *v
		}
		var ret PolicyControllerHubConfig
		return ret
	}).(PolicyControllerHubConfigOutput)
}

// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
func (o PolicyControllerHubConfigPtrOutput) AuditIntervalSeconds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuditIntervalSeconds
	}).(pulumi.StringPtrOutput)
}

// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
func (o PolicyControllerHubConfigPtrOutput) ConstraintViolationLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *string {
		if v == nil {
			return nil
		}
		return v.ConstraintViolationLimit
	}).(pulumi.StringPtrOutput)
}

// Map of deployment configs to deployments ("admission", "audit", "mutation').
func (o PolicyControllerHubConfigPtrOutput) DeploymentConfigs() PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *PolicyControllerPolicyControllerDeploymentConfig {
		if v == nil {
			return nil
		}
		return v.DeploymentConfigs
	}).(PolicyControllerPolicyControllerDeploymentConfigPtrOutput)
}

// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
func (o PolicyControllerHubConfigPtrOutput) ExemptableNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) []string {
		if v == nil {
			return nil
		}
		return v.ExemptableNamespaces
	}).(pulumi.StringArrayOutput)
}

// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
func (o PolicyControllerHubConfigPtrOutput) InstallSpec() PolicyControllerHubConfigInstallSpecPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *PolicyControllerHubConfigInstallSpec {
		if v == nil {
			return nil
		}
		return v.InstallSpec
	}).(PolicyControllerHubConfigInstallSpecPtrOutput)
}

// Logs all denies and dry run failures.
func (o PolicyControllerHubConfigPtrOutput) LogDeniesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *bool {
		if v == nil {
			return nil
		}
		return v.LogDeniesEnabled
	}).(pulumi.BoolPtrOutput)
}

// Monitoring specifies the configuration of monitoring.
func (o PolicyControllerHubConfigPtrOutput) Monitoring() PolicyControllerMonitoringConfigPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *PolicyControllerMonitoringConfig {
		if v == nil {
			return nil
		}
		return v.Monitoring
	}).(PolicyControllerMonitoringConfigPtrOutput)
}

// Enables the ability to mutate resources using Policy Controller.
func (o PolicyControllerHubConfigPtrOutput) MutationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *bool {
		if v == nil {
			return nil
		}
		return v.MutationEnabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies the desired policy content on the cluster
func (o PolicyControllerHubConfigPtrOutput) PolicyContent() PolicyControllerPolicyContentSpecPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *PolicyControllerPolicyContentSpec {
		if v == nil {
			return nil
		}
		return v.PolicyContent
	}).(PolicyControllerPolicyContentSpecPtrOutput)
}

// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
func (o PolicyControllerHubConfigPtrOutput) ReferentialRulesEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyControllerHubConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ReferentialRulesEnabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration for Policy Controller
type PolicyControllerHubConfigResponse struct {
	// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
	AuditIntervalSeconds string `pulumi:"auditIntervalSeconds"`
	// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
	ConstraintViolationLimit string `pulumi:"constraintViolationLimit"`
	// Map of deployment configs to deployments ("admission", "audit", "mutation').
	DeploymentConfigs PolicyControllerPolicyControllerDeploymentConfigResponse `pulumi:"deploymentConfigs"`
	// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
	ExemptableNamespaces []string `pulumi:"exemptableNamespaces"`
	// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
	InstallSpec string `pulumi:"installSpec"`
	// Logs all denies and dry run failures.
	LogDeniesEnabled bool `pulumi:"logDeniesEnabled"`
	// Monitoring specifies the configuration of monitoring.
	Monitoring PolicyControllerMonitoringConfigResponse `pulumi:"monitoring"`
	// Enables the ability to mutate resources using Policy Controller.
	MutationEnabled bool `pulumi:"mutationEnabled"`
	// Specifies the desired policy content on the cluster
	PolicyContent PolicyControllerPolicyContentSpecResponse `pulumi:"policyContent"`
	// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
	ReferentialRulesEnabled bool `pulumi:"referentialRulesEnabled"`
}

// Configuration for Policy Controller
type PolicyControllerHubConfigResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerHubConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerHubConfigResponse)(nil)).Elem()
}

func (o PolicyControllerHubConfigResponseOutput) ToPolicyControllerHubConfigResponseOutput() PolicyControllerHubConfigResponseOutput {
	return o
}

func (o PolicyControllerHubConfigResponseOutput) ToPolicyControllerHubConfigResponseOutputWithContext(ctx context.Context) PolicyControllerHubConfigResponseOutput {
	return o
}

// Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
func (o PolicyControllerHubConfigResponseOutput) AuditIntervalSeconds() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) string { return v.AuditIntervalSeconds }).(pulumi.StringOutput)
}

// The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
func (o PolicyControllerHubConfigResponseOutput) ConstraintViolationLimit() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) string { return v.ConstraintViolationLimit }).(pulumi.StringOutput)
}

// Map of deployment configs to deployments ("admission", "audit", "mutation').
func (o PolicyControllerHubConfigResponseOutput) DeploymentConfigs() PolicyControllerPolicyControllerDeploymentConfigResponseOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) PolicyControllerPolicyControllerDeploymentConfigResponse {
		return v.DeploymentConfigs
	}).(PolicyControllerPolicyControllerDeploymentConfigResponseOutput)
}

// The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
func (o PolicyControllerHubConfigResponseOutput) ExemptableNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) []string { return v.ExemptableNamespaces }).(pulumi.StringArrayOutput)
}

// The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
func (o PolicyControllerHubConfigResponseOutput) InstallSpec() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) string { return v.InstallSpec }).(pulumi.StringOutput)
}

// Logs all denies and dry run failures.
func (o PolicyControllerHubConfigResponseOutput) LogDeniesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) bool { return v.LogDeniesEnabled }).(pulumi.BoolOutput)
}

// Monitoring specifies the configuration of monitoring.
func (o PolicyControllerHubConfigResponseOutput) Monitoring() PolicyControllerMonitoringConfigResponseOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) PolicyControllerMonitoringConfigResponse {
		return v.Monitoring
	}).(PolicyControllerMonitoringConfigResponseOutput)
}

// Enables the ability to mutate resources using Policy Controller.
func (o PolicyControllerHubConfigResponseOutput) MutationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) bool { return v.MutationEnabled }).(pulumi.BoolOutput)
}

// Specifies the desired policy content on the cluster
func (o PolicyControllerHubConfigResponseOutput) PolicyContent() PolicyControllerPolicyContentSpecResponseOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) PolicyControllerPolicyContentSpecResponse {
		return v.PolicyContent
	}).(PolicyControllerPolicyContentSpecResponseOutput)
}

// Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
func (o PolicyControllerHubConfigResponseOutput) ReferentialRulesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyControllerHubConfigResponse) bool { return v.ReferentialRulesEnabled }).(pulumi.BoolOutput)
}

// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
type PolicyControllerMembershipSpec struct {
	// Policy Controller configuration for the cluster.
	PolicyControllerHubConfig *PolicyControllerHubConfig `pulumi:"policyControllerHubConfig"`
	// Version of Policy Controller installed.
	Version *string `pulumi:"version"`
}

// PolicyControllerMembershipSpecInput is an input type that accepts PolicyControllerMembershipSpecArgs and PolicyControllerMembershipSpecOutput values.
// You can construct a concrete instance of `PolicyControllerMembershipSpecInput` via:
//
//	PolicyControllerMembershipSpecArgs{...}
type PolicyControllerMembershipSpecInput interface {
	pulumi.Input

	ToPolicyControllerMembershipSpecOutput() PolicyControllerMembershipSpecOutput
	ToPolicyControllerMembershipSpecOutputWithContext(context.Context) PolicyControllerMembershipSpecOutput
}

// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
type PolicyControllerMembershipSpecArgs struct {
	// Policy Controller configuration for the cluster.
	PolicyControllerHubConfig PolicyControllerHubConfigPtrInput `pulumi:"policyControllerHubConfig"`
	// Version of Policy Controller installed.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (PolicyControllerMembershipSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerMembershipSpec)(nil)).Elem()
}

func (i PolicyControllerMembershipSpecArgs) ToPolicyControllerMembershipSpecOutput() PolicyControllerMembershipSpecOutput {
	return i.ToPolicyControllerMembershipSpecOutputWithContext(context.Background())
}

func (i PolicyControllerMembershipSpecArgs) ToPolicyControllerMembershipSpecOutputWithContext(ctx context.Context) PolicyControllerMembershipSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerMembershipSpecOutput)
}

func (i PolicyControllerMembershipSpecArgs) ToPolicyControllerMembershipSpecPtrOutput() PolicyControllerMembershipSpecPtrOutput {
	return i.ToPolicyControllerMembershipSpecPtrOutputWithContext(context.Background())
}

func (i PolicyControllerMembershipSpecArgs) ToPolicyControllerMembershipSpecPtrOutputWithContext(ctx context.Context) PolicyControllerMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerMembershipSpecOutput).ToPolicyControllerMembershipSpecPtrOutputWithContext(ctx)
}

// PolicyControllerMembershipSpecPtrInput is an input type that accepts PolicyControllerMembershipSpecArgs, PolicyControllerMembershipSpecPtr and PolicyControllerMembershipSpecPtrOutput values.
// You can construct a concrete instance of `PolicyControllerMembershipSpecPtrInput` via:
//
//	        PolicyControllerMembershipSpecArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerMembershipSpecPtrInput interface {
	pulumi.Input

	ToPolicyControllerMembershipSpecPtrOutput() PolicyControllerMembershipSpecPtrOutput
	ToPolicyControllerMembershipSpecPtrOutputWithContext(context.Context) PolicyControllerMembershipSpecPtrOutput
}

type policyControllerMembershipSpecPtrType PolicyControllerMembershipSpecArgs

func PolicyControllerMembershipSpecPtr(v *PolicyControllerMembershipSpecArgs) PolicyControllerMembershipSpecPtrInput {
	return (*policyControllerMembershipSpecPtrType)(v)
}

func (*policyControllerMembershipSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerMembershipSpec)(nil)).Elem()
}

func (i *policyControllerMembershipSpecPtrType) ToPolicyControllerMembershipSpecPtrOutput() PolicyControllerMembershipSpecPtrOutput {
	return i.ToPolicyControllerMembershipSpecPtrOutputWithContext(context.Background())
}

func (i *policyControllerMembershipSpecPtrType) ToPolicyControllerMembershipSpecPtrOutputWithContext(ctx context.Context) PolicyControllerMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerMembershipSpecPtrOutput)
}

// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
type PolicyControllerMembershipSpecOutput struct{ *pulumi.OutputState }

func (PolicyControllerMembershipSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerMembershipSpec)(nil)).Elem()
}

func (o PolicyControllerMembershipSpecOutput) ToPolicyControllerMembershipSpecOutput() PolicyControllerMembershipSpecOutput {
	return o
}

func (o PolicyControllerMembershipSpecOutput) ToPolicyControllerMembershipSpecOutputWithContext(ctx context.Context) PolicyControllerMembershipSpecOutput {
	return o
}

func (o PolicyControllerMembershipSpecOutput) ToPolicyControllerMembershipSpecPtrOutput() PolicyControllerMembershipSpecPtrOutput {
	return o.ToPolicyControllerMembershipSpecPtrOutputWithContext(context.Background())
}

func (o PolicyControllerMembershipSpecOutput) ToPolicyControllerMembershipSpecPtrOutputWithContext(ctx context.Context) PolicyControllerMembershipSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerMembershipSpec) *PolicyControllerMembershipSpec {
		return &v
	}).(PolicyControllerMembershipSpecPtrOutput)
}

// Policy Controller configuration for the cluster.
func (o PolicyControllerMembershipSpecOutput) PolicyControllerHubConfig() PolicyControllerHubConfigPtrOutput {
	return o.ApplyT(func(v PolicyControllerMembershipSpec) *PolicyControllerHubConfig { return v.PolicyControllerHubConfig }).(PolicyControllerHubConfigPtrOutput)
}

// Version of Policy Controller installed.
func (o PolicyControllerMembershipSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerMembershipSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type PolicyControllerMembershipSpecPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerMembershipSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerMembershipSpec)(nil)).Elem()
}

func (o PolicyControllerMembershipSpecPtrOutput) ToPolicyControllerMembershipSpecPtrOutput() PolicyControllerMembershipSpecPtrOutput {
	return o
}

func (o PolicyControllerMembershipSpecPtrOutput) ToPolicyControllerMembershipSpecPtrOutputWithContext(ctx context.Context) PolicyControllerMembershipSpecPtrOutput {
	return o
}

func (o PolicyControllerMembershipSpecPtrOutput) Elem() PolicyControllerMembershipSpecOutput {
	return o.ApplyT(func(v *PolicyControllerMembershipSpec) PolicyControllerMembershipSpec {
		if v != nil {
			return *v
		}
		var ret PolicyControllerMembershipSpec
		return ret
	}).(PolicyControllerMembershipSpecOutput)
}

// Policy Controller configuration for the cluster.
func (o PolicyControllerMembershipSpecPtrOutput) PolicyControllerHubConfig() PolicyControllerHubConfigPtrOutput {
	return o.ApplyT(func(v *PolicyControllerMembershipSpec) *PolicyControllerHubConfig {
		if v == nil {
			return nil
		}
		return v.PolicyControllerHubConfig
	}).(PolicyControllerHubConfigPtrOutput)
}

// Version of Policy Controller installed.
func (o PolicyControllerMembershipSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyControllerMembershipSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
type PolicyControllerMembershipSpecResponse struct {
	// Policy Controller configuration for the cluster.
	PolicyControllerHubConfig PolicyControllerHubConfigResponse `pulumi:"policyControllerHubConfig"`
	// Version of Policy Controller installed.
	Version string `pulumi:"version"`
}

// **Policy Controller**: Configuration for a single cluster. Intended to parallel the PolicyController CR.
type PolicyControllerMembershipSpecResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerMembershipSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerMembershipSpecResponse)(nil)).Elem()
}

func (o PolicyControllerMembershipSpecResponseOutput) ToPolicyControllerMembershipSpecResponseOutput() PolicyControllerMembershipSpecResponseOutput {
	return o
}

func (o PolicyControllerMembershipSpecResponseOutput) ToPolicyControllerMembershipSpecResponseOutputWithContext(ctx context.Context) PolicyControllerMembershipSpecResponseOutput {
	return o
}

// Policy Controller configuration for the cluster.
func (o PolicyControllerMembershipSpecResponseOutput) PolicyControllerHubConfig() PolicyControllerHubConfigResponseOutput {
	return o.ApplyT(func(v PolicyControllerMembershipSpecResponse) PolicyControllerHubConfigResponse {
		return v.PolicyControllerHubConfig
	}).(PolicyControllerHubConfigResponseOutput)
}

// Version of Policy Controller installed.
func (o PolicyControllerMembershipSpecResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerMembershipSpecResponse) string { return v.Version }).(pulumi.StringOutput)
}

// **Policy Controller**: State for a single cluster.
type PolicyControllerMembershipStateResponse struct {
	// Currently these include (also serving as map keys): 1. "admission" 2. "audit" 3. "mutation"
	ComponentStates PolicyControllerOnClusterStateResponse `pulumi:"componentStates"`
	// The overall content state observed by the Hub Feature controller.
	PolicyContentState PolicyControllerPolicyContentStateResponse `pulumi:"policyContentState"`
	// The overall Policy Controller lifecycle state observed by the Hub Feature controller.
	State string `pulumi:"state"`
}

// **Policy Controller**: State for a single cluster.
type PolicyControllerMembershipStateResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerMembershipStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerMembershipStateResponse)(nil)).Elem()
}

func (o PolicyControllerMembershipStateResponseOutput) ToPolicyControllerMembershipStateResponseOutput() PolicyControllerMembershipStateResponseOutput {
	return o
}

func (o PolicyControllerMembershipStateResponseOutput) ToPolicyControllerMembershipStateResponseOutputWithContext(ctx context.Context) PolicyControllerMembershipStateResponseOutput {
	return o
}

// Currently these include (also serving as map keys): 1. "admission" 2. "audit" 3. "mutation"
func (o PolicyControllerMembershipStateResponseOutput) ComponentStates() PolicyControllerOnClusterStateResponseOutput {
	return o.ApplyT(func(v PolicyControllerMembershipStateResponse) PolicyControllerOnClusterStateResponse {
		return v.ComponentStates
	}).(PolicyControllerOnClusterStateResponseOutput)
}

// The overall content state observed by the Hub Feature controller.
func (o PolicyControllerMembershipStateResponseOutput) PolicyContentState() PolicyControllerPolicyContentStateResponseOutput {
	return o.ApplyT(func(v PolicyControllerMembershipStateResponse) PolicyControllerPolicyContentStateResponse {
		return v.PolicyContentState
	}).(PolicyControllerPolicyContentStateResponseOutput)
}

// The overall Policy Controller lifecycle state observed by the Hub Feature controller.
func (o PolicyControllerMembershipStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerMembershipStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type PolicyControllerMonitoringConfig struct {
	// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
	Backends []PolicyControllerMonitoringConfigBackendsItem `pulumi:"backends"`
}

// PolicyControllerMonitoringConfigInput is an input type that accepts PolicyControllerMonitoringConfigArgs and PolicyControllerMonitoringConfigOutput values.
// You can construct a concrete instance of `PolicyControllerMonitoringConfigInput` via:
//
//	PolicyControllerMonitoringConfigArgs{...}
type PolicyControllerMonitoringConfigInput interface {
	pulumi.Input

	ToPolicyControllerMonitoringConfigOutput() PolicyControllerMonitoringConfigOutput
	ToPolicyControllerMonitoringConfigOutputWithContext(context.Context) PolicyControllerMonitoringConfigOutput
}

// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type PolicyControllerMonitoringConfigArgs struct {
	// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
	Backends PolicyControllerMonitoringConfigBackendsItemArrayInput `pulumi:"backends"`
}

func (PolicyControllerMonitoringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerMonitoringConfig)(nil)).Elem()
}

func (i PolicyControllerMonitoringConfigArgs) ToPolicyControllerMonitoringConfigOutput() PolicyControllerMonitoringConfigOutput {
	return i.ToPolicyControllerMonitoringConfigOutputWithContext(context.Background())
}

func (i PolicyControllerMonitoringConfigArgs) ToPolicyControllerMonitoringConfigOutputWithContext(ctx context.Context) PolicyControllerMonitoringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerMonitoringConfigOutput)
}

func (i PolicyControllerMonitoringConfigArgs) ToPolicyControllerMonitoringConfigPtrOutput() PolicyControllerMonitoringConfigPtrOutput {
	return i.ToPolicyControllerMonitoringConfigPtrOutputWithContext(context.Background())
}

func (i PolicyControllerMonitoringConfigArgs) ToPolicyControllerMonitoringConfigPtrOutputWithContext(ctx context.Context) PolicyControllerMonitoringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerMonitoringConfigOutput).ToPolicyControllerMonitoringConfigPtrOutputWithContext(ctx)
}

// PolicyControllerMonitoringConfigPtrInput is an input type that accepts PolicyControllerMonitoringConfigArgs, PolicyControllerMonitoringConfigPtr and PolicyControllerMonitoringConfigPtrOutput values.
// You can construct a concrete instance of `PolicyControllerMonitoringConfigPtrInput` via:
//
//	        PolicyControllerMonitoringConfigArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerMonitoringConfigPtrInput interface {
	pulumi.Input

	ToPolicyControllerMonitoringConfigPtrOutput() PolicyControllerMonitoringConfigPtrOutput
	ToPolicyControllerMonitoringConfigPtrOutputWithContext(context.Context) PolicyControllerMonitoringConfigPtrOutput
}

type policyControllerMonitoringConfigPtrType PolicyControllerMonitoringConfigArgs

func PolicyControllerMonitoringConfigPtr(v *PolicyControllerMonitoringConfigArgs) PolicyControllerMonitoringConfigPtrInput {
	return (*policyControllerMonitoringConfigPtrType)(v)
}

func (*policyControllerMonitoringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerMonitoringConfig)(nil)).Elem()
}

func (i *policyControllerMonitoringConfigPtrType) ToPolicyControllerMonitoringConfigPtrOutput() PolicyControllerMonitoringConfigPtrOutput {
	return i.ToPolicyControllerMonitoringConfigPtrOutputWithContext(context.Background())
}

func (i *policyControllerMonitoringConfigPtrType) ToPolicyControllerMonitoringConfigPtrOutputWithContext(ctx context.Context) PolicyControllerMonitoringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerMonitoringConfigPtrOutput)
}

// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type PolicyControllerMonitoringConfigOutput struct{ *pulumi.OutputState }

func (PolicyControllerMonitoringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerMonitoringConfig)(nil)).Elem()
}

func (o PolicyControllerMonitoringConfigOutput) ToPolicyControllerMonitoringConfigOutput() PolicyControllerMonitoringConfigOutput {
	return o
}

func (o PolicyControllerMonitoringConfigOutput) ToPolicyControllerMonitoringConfigOutputWithContext(ctx context.Context) PolicyControllerMonitoringConfigOutput {
	return o
}

func (o PolicyControllerMonitoringConfigOutput) ToPolicyControllerMonitoringConfigPtrOutput() PolicyControllerMonitoringConfigPtrOutput {
	return o.ToPolicyControllerMonitoringConfigPtrOutputWithContext(context.Background())
}

func (o PolicyControllerMonitoringConfigOutput) ToPolicyControllerMonitoringConfigPtrOutputWithContext(ctx context.Context) PolicyControllerMonitoringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerMonitoringConfig) *PolicyControllerMonitoringConfig {
		return &v
	}).(PolicyControllerMonitoringConfigPtrOutput)
}

// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
func (o PolicyControllerMonitoringConfigOutput) Backends() PolicyControllerMonitoringConfigBackendsItemArrayOutput {
	return o.ApplyT(func(v PolicyControllerMonitoringConfig) []PolicyControllerMonitoringConfigBackendsItem {
		return v.Backends
	}).(PolicyControllerMonitoringConfigBackendsItemArrayOutput)
}

type PolicyControllerMonitoringConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerMonitoringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerMonitoringConfig)(nil)).Elem()
}

func (o PolicyControllerMonitoringConfigPtrOutput) ToPolicyControllerMonitoringConfigPtrOutput() PolicyControllerMonitoringConfigPtrOutput {
	return o
}

func (o PolicyControllerMonitoringConfigPtrOutput) ToPolicyControllerMonitoringConfigPtrOutputWithContext(ctx context.Context) PolicyControllerMonitoringConfigPtrOutput {
	return o
}

func (o PolicyControllerMonitoringConfigPtrOutput) Elem() PolicyControllerMonitoringConfigOutput {
	return o.ApplyT(func(v *PolicyControllerMonitoringConfig) PolicyControllerMonitoringConfig {
		if v != nil {
			return *v
		}
		var ret PolicyControllerMonitoringConfig
		return ret
	}).(PolicyControllerMonitoringConfigOutput)
}

// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
func (o PolicyControllerMonitoringConfigPtrOutput) Backends() PolicyControllerMonitoringConfigBackendsItemArrayOutput {
	return o.ApplyT(func(v *PolicyControllerMonitoringConfig) []PolicyControllerMonitoringConfigBackendsItem {
		if v == nil {
			return nil
		}
		return v.Backends
	}).(PolicyControllerMonitoringConfigBackendsItemArrayOutput)
}

// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type PolicyControllerMonitoringConfigResponse struct {
	// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
	Backends []string `pulumi:"backends"`
}

// MonitoringConfig specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]
type PolicyControllerMonitoringConfigResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerMonitoringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerMonitoringConfigResponse)(nil)).Elem()
}

func (o PolicyControllerMonitoringConfigResponseOutput) ToPolicyControllerMonitoringConfigResponseOutput() PolicyControllerMonitoringConfigResponseOutput {
	return o
}

func (o PolicyControllerMonitoringConfigResponseOutput) ToPolicyControllerMonitoringConfigResponseOutputWithContext(ctx context.Context) PolicyControllerMonitoringConfigResponseOutput {
	return o
}

// Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.
func (o PolicyControllerMonitoringConfigResponseOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyControllerMonitoringConfigResponse) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// OnClusterState represents the state of a sub-component of Policy Controller.
type PolicyControllerOnClusterStateResponse struct {
	// Surface potential errors or information logs.
	Details string `pulumi:"details"`
	// The lifecycle state of this component.
	State string `pulumi:"state"`
}

// OnClusterState represents the state of a sub-component of Policy Controller.
type PolicyControllerOnClusterStateResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerOnClusterStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerOnClusterStateResponse)(nil)).Elem()
}

func (o PolicyControllerOnClusterStateResponseOutput) ToPolicyControllerOnClusterStateResponseOutput() PolicyControllerOnClusterStateResponseOutput {
	return o
}

func (o PolicyControllerOnClusterStateResponseOutput) ToPolicyControllerOnClusterStateResponseOutputWithContext(ctx context.Context) PolicyControllerOnClusterStateResponseOutput {
	return o
}

// Surface potential errors or information logs.
func (o PolicyControllerOnClusterStateResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerOnClusterStateResponse) string { return v.Details }).(pulumi.StringOutput)
}

// The lifecycle state of this component.
func (o PolicyControllerOnClusterStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerOnClusterStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// PolicyContentSpec defines the user's desired content configuration on the cluster.
type PolicyControllerPolicyContentSpec struct {
	// map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
	Bundles *PolicyControllerBundleInstallSpec `pulumi:"bundles"`
	// Configures the installation of the Template Library.
	TemplateLibrary *PolicyControllerTemplateLibraryConfig `pulumi:"templateLibrary"`
}

// PolicyControllerPolicyContentSpecInput is an input type that accepts PolicyControllerPolicyContentSpecArgs and PolicyControllerPolicyContentSpecOutput values.
// You can construct a concrete instance of `PolicyControllerPolicyContentSpecInput` via:
//
//	PolicyControllerPolicyContentSpecArgs{...}
type PolicyControllerPolicyContentSpecInput interface {
	pulumi.Input

	ToPolicyControllerPolicyContentSpecOutput() PolicyControllerPolicyContentSpecOutput
	ToPolicyControllerPolicyContentSpecOutputWithContext(context.Context) PolicyControllerPolicyContentSpecOutput
}

// PolicyContentSpec defines the user's desired content configuration on the cluster.
type PolicyControllerPolicyContentSpecArgs struct {
	// map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
	Bundles PolicyControllerBundleInstallSpecPtrInput `pulumi:"bundles"`
	// Configures the installation of the Template Library.
	TemplateLibrary PolicyControllerTemplateLibraryConfigPtrInput `pulumi:"templateLibrary"`
}

func (PolicyControllerPolicyContentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerPolicyContentSpec)(nil)).Elem()
}

func (i PolicyControllerPolicyContentSpecArgs) ToPolicyControllerPolicyContentSpecOutput() PolicyControllerPolicyContentSpecOutput {
	return i.ToPolicyControllerPolicyContentSpecOutputWithContext(context.Background())
}

func (i PolicyControllerPolicyContentSpecArgs) ToPolicyControllerPolicyContentSpecOutputWithContext(ctx context.Context) PolicyControllerPolicyContentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerPolicyContentSpecOutput)
}

func (i PolicyControllerPolicyContentSpecArgs) ToPolicyControllerPolicyContentSpecPtrOutput() PolicyControllerPolicyContentSpecPtrOutput {
	return i.ToPolicyControllerPolicyContentSpecPtrOutputWithContext(context.Background())
}

func (i PolicyControllerPolicyContentSpecArgs) ToPolicyControllerPolicyContentSpecPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyContentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerPolicyContentSpecOutput).ToPolicyControllerPolicyContentSpecPtrOutputWithContext(ctx)
}

// PolicyControllerPolicyContentSpecPtrInput is an input type that accepts PolicyControllerPolicyContentSpecArgs, PolicyControllerPolicyContentSpecPtr and PolicyControllerPolicyContentSpecPtrOutput values.
// You can construct a concrete instance of `PolicyControllerPolicyContentSpecPtrInput` via:
//
//	        PolicyControllerPolicyContentSpecArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerPolicyContentSpecPtrInput interface {
	pulumi.Input

	ToPolicyControllerPolicyContentSpecPtrOutput() PolicyControllerPolicyContentSpecPtrOutput
	ToPolicyControllerPolicyContentSpecPtrOutputWithContext(context.Context) PolicyControllerPolicyContentSpecPtrOutput
}

type policyControllerPolicyContentSpecPtrType PolicyControllerPolicyContentSpecArgs

func PolicyControllerPolicyContentSpecPtr(v *PolicyControllerPolicyContentSpecArgs) PolicyControllerPolicyContentSpecPtrInput {
	return (*policyControllerPolicyContentSpecPtrType)(v)
}

func (*policyControllerPolicyContentSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerPolicyContentSpec)(nil)).Elem()
}

func (i *policyControllerPolicyContentSpecPtrType) ToPolicyControllerPolicyContentSpecPtrOutput() PolicyControllerPolicyContentSpecPtrOutput {
	return i.ToPolicyControllerPolicyContentSpecPtrOutputWithContext(context.Background())
}

func (i *policyControllerPolicyContentSpecPtrType) ToPolicyControllerPolicyContentSpecPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyContentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerPolicyContentSpecPtrOutput)
}

// PolicyContentSpec defines the user's desired content configuration on the cluster.
type PolicyControllerPolicyContentSpecOutput struct{ *pulumi.OutputState }

func (PolicyControllerPolicyContentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerPolicyContentSpec)(nil)).Elem()
}

func (o PolicyControllerPolicyContentSpecOutput) ToPolicyControllerPolicyContentSpecOutput() PolicyControllerPolicyContentSpecOutput {
	return o
}

func (o PolicyControllerPolicyContentSpecOutput) ToPolicyControllerPolicyContentSpecOutputWithContext(ctx context.Context) PolicyControllerPolicyContentSpecOutput {
	return o
}

func (o PolicyControllerPolicyContentSpecOutput) ToPolicyControllerPolicyContentSpecPtrOutput() PolicyControllerPolicyContentSpecPtrOutput {
	return o.ToPolicyControllerPolicyContentSpecPtrOutputWithContext(context.Background())
}

func (o PolicyControllerPolicyContentSpecOutput) ToPolicyControllerPolicyContentSpecPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyContentSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerPolicyContentSpec) *PolicyControllerPolicyContentSpec {
		return &v
	}).(PolicyControllerPolicyContentSpecPtrOutput)
}

// map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
func (o PolicyControllerPolicyContentSpecOutput) Bundles() PolicyControllerBundleInstallSpecPtrOutput {
	return o.ApplyT(func(v PolicyControllerPolicyContentSpec) *PolicyControllerBundleInstallSpec { return v.Bundles }).(PolicyControllerBundleInstallSpecPtrOutput)
}

// Configures the installation of the Template Library.
func (o PolicyControllerPolicyContentSpecOutput) TemplateLibrary() PolicyControllerTemplateLibraryConfigPtrOutput {
	return o.ApplyT(func(v PolicyControllerPolicyContentSpec) *PolicyControllerTemplateLibraryConfig {
		return v.TemplateLibrary
	}).(PolicyControllerTemplateLibraryConfigPtrOutput)
}

type PolicyControllerPolicyContentSpecPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerPolicyContentSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerPolicyContentSpec)(nil)).Elem()
}

func (o PolicyControllerPolicyContentSpecPtrOutput) ToPolicyControllerPolicyContentSpecPtrOutput() PolicyControllerPolicyContentSpecPtrOutput {
	return o
}

func (o PolicyControllerPolicyContentSpecPtrOutput) ToPolicyControllerPolicyContentSpecPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyContentSpecPtrOutput {
	return o
}

func (o PolicyControllerPolicyContentSpecPtrOutput) Elem() PolicyControllerPolicyContentSpecOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyContentSpec) PolicyControllerPolicyContentSpec {
		if v != nil {
			return *v
		}
		var ret PolicyControllerPolicyContentSpec
		return ret
	}).(PolicyControllerPolicyContentSpecOutput)
}

// map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
func (o PolicyControllerPolicyContentSpecPtrOutput) Bundles() PolicyControllerBundleInstallSpecPtrOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyContentSpec) *PolicyControllerBundleInstallSpec {
		if v == nil {
			return nil
		}
		return v.Bundles
	}).(PolicyControllerBundleInstallSpecPtrOutput)
}

// Configures the installation of the Template Library.
func (o PolicyControllerPolicyContentSpecPtrOutput) TemplateLibrary() PolicyControllerTemplateLibraryConfigPtrOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyContentSpec) *PolicyControllerTemplateLibraryConfig {
		if v == nil {
			return nil
		}
		return v.TemplateLibrary
	}).(PolicyControllerTemplateLibraryConfigPtrOutput)
}

// PolicyContentSpec defines the user's desired content configuration on the cluster.
type PolicyControllerPolicyContentSpecResponse struct {
	// map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
	Bundles PolicyControllerBundleInstallSpecResponse `pulumi:"bundles"`
	// Configures the installation of the Template Library.
	TemplateLibrary PolicyControllerTemplateLibraryConfigResponse `pulumi:"templateLibrary"`
}

// PolicyContentSpec defines the user's desired content configuration on the cluster.
type PolicyControllerPolicyContentSpecResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerPolicyContentSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerPolicyContentSpecResponse)(nil)).Elem()
}

func (o PolicyControllerPolicyContentSpecResponseOutput) ToPolicyControllerPolicyContentSpecResponseOutput() PolicyControllerPolicyContentSpecResponseOutput {
	return o
}

func (o PolicyControllerPolicyContentSpecResponseOutput) ToPolicyControllerPolicyContentSpecResponseOutputWithContext(ctx context.Context) PolicyControllerPolicyContentSpecResponseOutput {
	return o
}

// map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.
func (o PolicyControllerPolicyContentSpecResponseOutput) Bundles() PolicyControllerBundleInstallSpecResponseOutput {
	return o.ApplyT(func(v PolicyControllerPolicyContentSpecResponse) PolicyControllerBundleInstallSpecResponse {
		return v.Bundles
	}).(PolicyControllerBundleInstallSpecResponseOutput)
}

// Configures the installation of the Template Library.
func (o PolicyControllerPolicyContentSpecResponseOutput) TemplateLibrary() PolicyControllerTemplateLibraryConfigResponseOutput {
	return o.ApplyT(func(v PolicyControllerPolicyContentSpecResponse) PolicyControllerTemplateLibraryConfigResponse {
		return v.TemplateLibrary
	}).(PolicyControllerTemplateLibraryConfigResponseOutput)
}

// The state of the policy controller policy content
type PolicyControllerPolicyContentStateResponse struct {
	// The state of the any bundles included in the chosen version of the manifest
	BundleStates PolicyControllerOnClusterStateResponse `pulumi:"bundleStates"`
	// The state of the referential data sync configuration. This could represent the state of either the syncSet object(s) or the config object, depending on the version of PoCo configured by the user.
	ReferentialSyncConfigState PolicyControllerOnClusterStateResponse `pulumi:"referentialSyncConfigState"`
	// The state of the template library
	TemplateLibraryState PolicyControllerOnClusterStateResponse `pulumi:"templateLibraryState"`
}

// The state of the policy controller policy content
type PolicyControllerPolicyContentStateResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerPolicyContentStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerPolicyContentStateResponse)(nil)).Elem()
}

func (o PolicyControllerPolicyContentStateResponseOutput) ToPolicyControllerPolicyContentStateResponseOutput() PolicyControllerPolicyContentStateResponseOutput {
	return o
}

func (o PolicyControllerPolicyContentStateResponseOutput) ToPolicyControllerPolicyContentStateResponseOutputWithContext(ctx context.Context) PolicyControllerPolicyContentStateResponseOutput {
	return o
}

// The state of the any bundles included in the chosen version of the manifest
func (o PolicyControllerPolicyContentStateResponseOutput) BundleStates() PolicyControllerOnClusterStateResponseOutput {
	return o.ApplyT(func(v PolicyControllerPolicyContentStateResponse) PolicyControllerOnClusterStateResponse {
		return v.BundleStates
	}).(PolicyControllerOnClusterStateResponseOutput)
}

// The state of the referential data sync configuration. This could represent the state of either the syncSet object(s) or the config object, depending on the version of PoCo configured by the user.
func (o PolicyControllerPolicyContentStateResponseOutput) ReferentialSyncConfigState() PolicyControllerOnClusterStateResponseOutput {
	return o.ApplyT(func(v PolicyControllerPolicyContentStateResponse) PolicyControllerOnClusterStateResponse {
		return v.ReferentialSyncConfigState
	}).(PolicyControllerOnClusterStateResponseOutput)
}

// The state of the template library
func (o PolicyControllerPolicyContentStateResponseOutput) TemplateLibraryState() PolicyControllerOnClusterStateResponseOutput {
	return o.ApplyT(func(v PolicyControllerPolicyContentStateResponse) PolicyControllerOnClusterStateResponse {
		return v.TemplateLibraryState
	}).(PolicyControllerOnClusterStateResponseOutput)
}

// Deployment-specific configuration.
type PolicyControllerPolicyControllerDeploymentConfig struct {
	// Container resource requirements.
	ContainerResources *PolicyControllerResourceRequirements `pulumi:"containerResources"`
	// Pod affinity configuration.
	PodAffinity *PolicyControllerPolicyControllerDeploymentConfigPodAffinity `pulumi:"podAffinity"`
	// Pod anti-affinity enablement.
	PodAntiAffinity *bool `pulumi:"podAntiAffinity"`
	// Pod tolerations of node taints.
	PodTolerations []PolicyControllerToleration `pulumi:"podTolerations"`
	// Pod replica count.
	ReplicaCount *string `pulumi:"replicaCount"`
}

// PolicyControllerPolicyControllerDeploymentConfigInput is an input type that accepts PolicyControllerPolicyControllerDeploymentConfigArgs and PolicyControllerPolicyControllerDeploymentConfigOutput values.
// You can construct a concrete instance of `PolicyControllerPolicyControllerDeploymentConfigInput` via:
//
//	PolicyControllerPolicyControllerDeploymentConfigArgs{...}
type PolicyControllerPolicyControllerDeploymentConfigInput interface {
	pulumi.Input

	ToPolicyControllerPolicyControllerDeploymentConfigOutput() PolicyControllerPolicyControllerDeploymentConfigOutput
	ToPolicyControllerPolicyControllerDeploymentConfigOutputWithContext(context.Context) PolicyControllerPolicyControllerDeploymentConfigOutput
}

// Deployment-specific configuration.
type PolicyControllerPolicyControllerDeploymentConfigArgs struct {
	// Container resource requirements.
	ContainerResources PolicyControllerResourceRequirementsPtrInput `pulumi:"containerResources"`
	// Pod affinity configuration.
	PodAffinity PolicyControllerPolicyControllerDeploymentConfigPodAffinityPtrInput `pulumi:"podAffinity"`
	// Pod anti-affinity enablement.
	PodAntiAffinity pulumi.BoolPtrInput `pulumi:"podAntiAffinity"`
	// Pod tolerations of node taints.
	PodTolerations PolicyControllerTolerationArrayInput `pulumi:"podTolerations"`
	// Pod replica count.
	ReplicaCount pulumi.StringPtrInput `pulumi:"replicaCount"`
}

func (PolicyControllerPolicyControllerDeploymentConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerPolicyControllerDeploymentConfig)(nil)).Elem()
}

func (i PolicyControllerPolicyControllerDeploymentConfigArgs) ToPolicyControllerPolicyControllerDeploymentConfigOutput() PolicyControllerPolicyControllerDeploymentConfigOutput {
	return i.ToPolicyControllerPolicyControllerDeploymentConfigOutputWithContext(context.Background())
}

func (i PolicyControllerPolicyControllerDeploymentConfigArgs) ToPolicyControllerPolicyControllerDeploymentConfigOutputWithContext(ctx context.Context) PolicyControllerPolicyControllerDeploymentConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerPolicyControllerDeploymentConfigOutput)
}

func (i PolicyControllerPolicyControllerDeploymentConfigArgs) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutput() PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return i.ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(context.Background())
}

func (i PolicyControllerPolicyControllerDeploymentConfigArgs) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerPolicyControllerDeploymentConfigOutput).ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(ctx)
}

// PolicyControllerPolicyControllerDeploymentConfigPtrInput is an input type that accepts PolicyControllerPolicyControllerDeploymentConfigArgs, PolicyControllerPolicyControllerDeploymentConfigPtr and PolicyControllerPolicyControllerDeploymentConfigPtrOutput values.
// You can construct a concrete instance of `PolicyControllerPolicyControllerDeploymentConfigPtrInput` via:
//
//	        PolicyControllerPolicyControllerDeploymentConfigArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerPolicyControllerDeploymentConfigPtrInput interface {
	pulumi.Input

	ToPolicyControllerPolicyControllerDeploymentConfigPtrOutput() PolicyControllerPolicyControllerDeploymentConfigPtrOutput
	ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(context.Context) PolicyControllerPolicyControllerDeploymentConfigPtrOutput
}

type policyControllerPolicyControllerDeploymentConfigPtrType PolicyControllerPolicyControllerDeploymentConfigArgs

func PolicyControllerPolicyControllerDeploymentConfigPtr(v *PolicyControllerPolicyControllerDeploymentConfigArgs) PolicyControllerPolicyControllerDeploymentConfigPtrInput {
	return (*policyControllerPolicyControllerDeploymentConfigPtrType)(v)
}

func (*policyControllerPolicyControllerDeploymentConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerPolicyControllerDeploymentConfig)(nil)).Elem()
}

func (i *policyControllerPolicyControllerDeploymentConfigPtrType) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutput() PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return i.ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(context.Background())
}

func (i *policyControllerPolicyControllerDeploymentConfigPtrType) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerPolicyControllerDeploymentConfigPtrOutput)
}

// Deployment-specific configuration.
type PolicyControllerPolicyControllerDeploymentConfigOutput struct{ *pulumi.OutputState }

func (PolicyControllerPolicyControllerDeploymentConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerPolicyControllerDeploymentConfig)(nil)).Elem()
}

func (o PolicyControllerPolicyControllerDeploymentConfigOutput) ToPolicyControllerPolicyControllerDeploymentConfigOutput() PolicyControllerPolicyControllerDeploymentConfigOutput {
	return o
}

func (o PolicyControllerPolicyControllerDeploymentConfigOutput) ToPolicyControllerPolicyControllerDeploymentConfigOutputWithContext(ctx context.Context) PolicyControllerPolicyControllerDeploymentConfigOutput {
	return o
}

func (o PolicyControllerPolicyControllerDeploymentConfigOutput) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutput() PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return o.ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(context.Background())
}

func (o PolicyControllerPolicyControllerDeploymentConfigOutput) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerPolicyControllerDeploymentConfig) *PolicyControllerPolicyControllerDeploymentConfig {
		return &v
	}).(PolicyControllerPolicyControllerDeploymentConfigPtrOutput)
}

// Container resource requirements.
func (o PolicyControllerPolicyControllerDeploymentConfigOutput) ContainerResources() PolicyControllerResourceRequirementsPtrOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfig) *PolicyControllerResourceRequirements {
		return v.ContainerResources
	}).(PolicyControllerResourceRequirementsPtrOutput)
}

// Pod affinity configuration.
func (o PolicyControllerPolicyControllerDeploymentConfigOutput) PodAffinity() PolicyControllerPolicyControllerDeploymentConfigPodAffinityPtrOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfig) *PolicyControllerPolicyControllerDeploymentConfigPodAffinity {
		return v.PodAffinity
	}).(PolicyControllerPolicyControllerDeploymentConfigPodAffinityPtrOutput)
}

// Pod anti-affinity enablement.
func (o PolicyControllerPolicyControllerDeploymentConfigOutput) PodAntiAffinity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfig) *bool { return v.PodAntiAffinity }).(pulumi.BoolPtrOutput)
}

// Pod tolerations of node taints.
func (o PolicyControllerPolicyControllerDeploymentConfigOutput) PodTolerations() PolicyControllerTolerationArrayOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfig) []PolicyControllerToleration {
		return v.PodTolerations
	}).(PolicyControllerTolerationArrayOutput)
}

// Pod replica count.
func (o PolicyControllerPolicyControllerDeploymentConfigOutput) ReplicaCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfig) *string { return v.ReplicaCount }).(pulumi.StringPtrOutput)
}

type PolicyControllerPolicyControllerDeploymentConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerPolicyControllerDeploymentConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerPolicyControllerDeploymentConfig)(nil)).Elem()
}

func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutput() PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return o
}

func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) ToPolicyControllerPolicyControllerDeploymentConfigPtrOutputWithContext(ctx context.Context) PolicyControllerPolicyControllerDeploymentConfigPtrOutput {
	return o
}

func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) Elem() PolicyControllerPolicyControllerDeploymentConfigOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyControllerDeploymentConfig) PolicyControllerPolicyControllerDeploymentConfig {
		if v != nil {
			return *v
		}
		var ret PolicyControllerPolicyControllerDeploymentConfig
		return ret
	}).(PolicyControllerPolicyControllerDeploymentConfigOutput)
}

// Container resource requirements.
func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) ContainerResources() PolicyControllerResourceRequirementsPtrOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyControllerDeploymentConfig) *PolicyControllerResourceRequirements {
		if v == nil {
			return nil
		}
		return v.ContainerResources
	}).(PolicyControllerResourceRequirementsPtrOutput)
}

// Pod affinity configuration.
func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) PodAffinity() PolicyControllerPolicyControllerDeploymentConfigPodAffinityPtrOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyControllerDeploymentConfig) *PolicyControllerPolicyControllerDeploymentConfigPodAffinity {
		if v == nil {
			return nil
		}
		return v.PodAffinity
	}).(PolicyControllerPolicyControllerDeploymentConfigPodAffinityPtrOutput)
}

// Pod anti-affinity enablement.
func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) PodAntiAffinity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyControllerDeploymentConfig) *bool {
		if v == nil {
			return nil
		}
		return v.PodAntiAffinity
	}).(pulumi.BoolPtrOutput)
}

// Pod tolerations of node taints.
func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) PodTolerations() PolicyControllerTolerationArrayOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyControllerDeploymentConfig) []PolicyControllerToleration {
		if v == nil {
			return nil
		}
		return v.PodTolerations
	}).(PolicyControllerTolerationArrayOutput)
}

// Pod replica count.
func (o PolicyControllerPolicyControllerDeploymentConfigPtrOutput) ReplicaCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyControllerPolicyControllerDeploymentConfig) *string {
		if v == nil {
			return nil
		}
		return v.ReplicaCount
	}).(pulumi.StringPtrOutput)
}

// Deployment-specific configuration.
type PolicyControllerPolicyControllerDeploymentConfigResponse struct {
	// Container resource requirements.
	ContainerResources PolicyControllerResourceRequirementsResponse `pulumi:"containerResources"`
	// Pod affinity configuration.
	PodAffinity string `pulumi:"podAffinity"`
	// Pod anti-affinity enablement.
	PodAntiAffinity bool `pulumi:"podAntiAffinity"`
	// Pod tolerations of node taints.
	PodTolerations []PolicyControllerTolerationResponse `pulumi:"podTolerations"`
	// Pod replica count.
	ReplicaCount string `pulumi:"replicaCount"`
}

// Deployment-specific configuration.
type PolicyControllerPolicyControllerDeploymentConfigResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerPolicyControllerDeploymentConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerPolicyControllerDeploymentConfigResponse)(nil)).Elem()
}

func (o PolicyControllerPolicyControllerDeploymentConfigResponseOutput) ToPolicyControllerPolicyControllerDeploymentConfigResponseOutput() PolicyControllerPolicyControllerDeploymentConfigResponseOutput {
	return o
}

func (o PolicyControllerPolicyControllerDeploymentConfigResponseOutput) ToPolicyControllerPolicyControllerDeploymentConfigResponseOutputWithContext(ctx context.Context) PolicyControllerPolicyControllerDeploymentConfigResponseOutput {
	return o
}

// Container resource requirements.
func (o PolicyControllerPolicyControllerDeploymentConfigResponseOutput) ContainerResources() PolicyControllerResourceRequirementsResponseOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfigResponse) PolicyControllerResourceRequirementsResponse {
		return v.ContainerResources
	}).(PolicyControllerResourceRequirementsResponseOutput)
}

// Pod affinity configuration.
func (o PolicyControllerPolicyControllerDeploymentConfigResponseOutput) PodAffinity() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfigResponse) string { return v.PodAffinity }).(pulumi.StringOutput)
}

// Pod anti-affinity enablement.
func (o PolicyControllerPolicyControllerDeploymentConfigResponseOutput) PodAntiAffinity() pulumi.BoolOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfigResponse) bool { return v.PodAntiAffinity }).(pulumi.BoolOutput)
}

// Pod tolerations of node taints.
func (o PolicyControllerPolicyControllerDeploymentConfigResponseOutput) PodTolerations() PolicyControllerTolerationResponseArrayOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfigResponse) []PolicyControllerTolerationResponse {
		return v.PodTolerations
	}).(PolicyControllerTolerationResponseArrayOutput)
}

// Pod replica count.
func (o PolicyControllerPolicyControllerDeploymentConfigResponseOutput) ReplicaCount() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerPolicyControllerDeploymentConfigResponse) string { return v.ReplicaCount }).(pulumi.StringOutput)
}

// ResourceList contains container resource requirements.
type PolicyControllerResourceList struct {
	// CPU requirement expressed in Kubernetes resource units.
	Cpu *string `pulumi:"cpu"`
	// Memory requirement expressed in Kubernetes resource units.
	Memory *string `pulumi:"memory"`
}

// PolicyControllerResourceListInput is an input type that accepts PolicyControllerResourceListArgs and PolicyControllerResourceListOutput values.
// You can construct a concrete instance of `PolicyControllerResourceListInput` via:
//
//	PolicyControllerResourceListArgs{...}
type PolicyControllerResourceListInput interface {
	pulumi.Input

	ToPolicyControllerResourceListOutput() PolicyControllerResourceListOutput
	ToPolicyControllerResourceListOutputWithContext(context.Context) PolicyControllerResourceListOutput
}

// ResourceList contains container resource requirements.
type PolicyControllerResourceListArgs struct {
	// CPU requirement expressed in Kubernetes resource units.
	Cpu pulumi.StringPtrInput `pulumi:"cpu"`
	// Memory requirement expressed in Kubernetes resource units.
	Memory pulumi.StringPtrInput `pulumi:"memory"`
}

func (PolicyControllerResourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerResourceList)(nil)).Elem()
}

func (i PolicyControllerResourceListArgs) ToPolicyControllerResourceListOutput() PolicyControllerResourceListOutput {
	return i.ToPolicyControllerResourceListOutputWithContext(context.Background())
}

func (i PolicyControllerResourceListArgs) ToPolicyControllerResourceListOutputWithContext(ctx context.Context) PolicyControllerResourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerResourceListOutput)
}

func (i PolicyControllerResourceListArgs) ToPolicyControllerResourceListPtrOutput() PolicyControllerResourceListPtrOutput {
	return i.ToPolicyControllerResourceListPtrOutputWithContext(context.Background())
}

func (i PolicyControllerResourceListArgs) ToPolicyControllerResourceListPtrOutputWithContext(ctx context.Context) PolicyControllerResourceListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerResourceListOutput).ToPolicyControllerResourceListPtrOutputWithContext(ctx)
}

// PolicyControllerResourceListPtrInput is an input type that accepts PolicyControllerResourceListArgs, PolicyControllerResourceListPtr and PolicyControllerResourceListPtrOutput values.
// You can construct a concrete instance of `PolicyControllerResourceListPtrInput` via:
//
//	        PolicyControllerResourceListArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerResourceListPtrInput interface {
	pulumi.Input

	ToPolicyControllerResourceListPtrOutput() PolicyControllerResourceListPtrOutput
	ToPolicyControllerResourceListPtrOutputWithContext(context.Context) PolicyControllerResourceListPtrOutput
}

type policyControllerResourceListPtrType PolicyControllerResourceListArgs

func PolicyControllerResourceListPtr(v *PolicyControllerResourceListArgs) PolicyControllerResourceListPtrInput {
	return (*policyControllerResourceListPtrType)(v)
}

func (*policyControllerResourceListPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerResourceList)(nil)).Elem()
}

func (i *policyControllerResourceListPtrType) ToPolicyControllerResourceListPtrOutput() PolicyControllerResourceListPtrOutput {
	return i.ToPolicyControllerResourceListPtrOutputWithContext(context.Background())
}

func (i *policyControllerResourceListPtrType) ToPolicyControllerResourceListPtrOutputWithContext(ctx context.Context) PolicyControllerResourceListPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerResourceListPtrOutput)
}

// ResourceList contains container resource requirements.
type PolicyControllerResourceListOutput struct{ *pulumi.OutputState }

func (PolicyControllerResourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerResourceList)(nil)).Elem()
}

func (o PolicyControllerResourceListOutput) ToPolicyControllerResourceListOutput() PolicyControllerResourceListOutput {
	return o
}

func (o PolicyControllerResourceListOutput) ToPolicyControllerResourceListOutputWithContext(ctx context.Context) PolicyControllerResourceListOutput {
	return o
}

func (o PolicyControllerResourceListOutput) ToPolicyControllerResourceListPtrOutput() PolicyControllerResourceListPtrOutput {
	return o.ToPolicyControllerResourceListPtrOutputWithContext(context.Background())
}

func (o PolicyControllerResourceListOutput) ToPolicyControllerResourceListPtrOutputWithContext(ctx context.Context) PolicyControllerResourceListPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerResourceList) *PolicyControllerResourceList {
		return &v
	}).(PolicyControllerResourceListPtrOutput)
}

// CPU requirement expressed in Kubernetes resource units.
func (o PolicyControllerResourceListOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerResourceList) *string { return v.Cpu }).(pulumi.StringPtrOutput)
}

// Memory requirement expressed in Kubernetes resource units.
func (o PolicyControllerResourceListOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerResourceList) *string { return v.Memory }).(pulumi.StringPtrOutput)
}

type PolicyControllerResourceListPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerResourceListPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerResourceList)(nil)).Elem()
}

func (o PolicyControllerResourceListPtrOutput) ToPolicyControllerResourceListPtrOutput() PolicyControllerResourceListPtrOutput {
	return o
}

func (o PolicyControllerResourceListPtrOutput) ToPolicyControllerResourceListPtrOutputWithContext(ctx context.Context) PolicyControllerResourceListPtrOutput {
	return o
}

func (o PolicyControllerResourceListPtrOutput) Elem() PolicyControllerResourceListOutput {
	return o.ApplyT(func(v *PolicyControllerResourceList) PolicyControllerResourceList {
		if v != nil {
			return *v
		}
		var ret PolicyControllerResourceList
		return ret
	}).(PolicyControllerResourceListOutput)
}

// CPU requirement expressed in Kubernetes resource units.
func (o PolicyControllerResourceListPtrOutput) Cpu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyControllerResourceList) *string {
		if v == nil {
			return nil
		}
		return v.Cpu
	}).(pulumi.StringPtrOutput)
}

// Memory requirement expressed in Kubernetes resource units.
func (o PolicyControllerResourceListPtrOutput) Memory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyControllerResourceList) *string {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.StringPtrOutput)
}

// ResourceList contains container resource requirements.
type PolicyControllerResourceListResponse struct {
	// CPU requirement expressed in Kubernetes resource units.
	Cpu string `pulumi:"cpu"`
	// Memory requirement expressed in Kubernetes resource units.
	Memory string `pulumi:"memory"`
}

// ResourceList contains container resource requirements.
type PolicyControllerResourceListResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerResourceListResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerResourceListResponse)(nil)).Elem()
}

func (o PolicyControllerResourceListResponseOutput) ToPolicyControllerResourceListResponseOutput() PolicyControllerResourceListResponseOutput {
	return o
}

func (o PolicyControllerResourceListResponseOutput) ToPolicyControllerResourceListResponseOutputWithContext(ctx context.Context) PolicyControllerResourceListResponseOutput {
	return o
}

// CPU requirement expressed in Kubernetes resource units.
func (o PolicyControllerResourceListResponseOutput) Cpu() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerResourceListResponse) string { return v.Cpu }).(pulumi.StringOutput)
}

// Memory requirement expressed in Kubernetes resource units.
func (o PolicyControllerResourceListResponseOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerResourceListResponse) string { return v.Memory }).(pulumi.StringOutput)
}

// ResourceRequirements describes the compute resource requirements.
type PolicyControllerResourceRequirements struct {
	// Limits describes the maximum amount of compute resources allowed for use by the running container.
	Limits *PolicyControllerResourceList `pulumi:"limits"`
	// Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
	Requests *PolicyControllerResourceList `pulumi:"requests"`
}

// PolicyControllerResourceRequirementsInput is an input type that accepts PolicyControllerResourceRequirementsArgs and PolicyControllerResourceRequirementsOutput values.
// You can construct a concrete instance of `PolicyControllerResourceRequirementsInput` via:
//
//	PolicyControllerResourceRequirementsArgs{...}
type PolicyControllerResourceRequirementsInput interface {
	pulumi.Input

	ToPolicyControllerResourceRequirementsOutput() PolicyControllerResourceRequirementsOutput
	ToPolicyControllerResourceRequirementsOutputWithContext(context.Context) PolicyControllerResourceRequirementsOutput
}

// ResourceRequirements describes the compute resource requirements.
type PolicyControllerResourceRequirementsArgs struct {
	// Limits describes the maximum amount of compute resources allowed for use by the running container.
	Limits PolicyControllerResourceListPtrInput `pulumi:"limits"`
	// Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
	Requests PolicyControllerResourceListPtrInput `pulumi:"requests"`
}

func (PolicyControllerResourceRequirementsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerResourceRequirements)(nil)).Elem()
}

func (i PolicyControllerResourceRequirementsArgs) ToPolicyControllerResourceRequirementsOutput() PolicyControllerResourceRequirementsOutput {
	return i.ToPolicyControllerResourceRequirementsOutputWithContext(context.Background())
}

func (i PolicyControllerResourceRequirementsArgs) ToPolicyControllerResourceRequirementsOutputWithContext(ctx context.Context) PolicyControllerResourceRequirementsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerResourceRequirementsOutput)
}

func (i PolicyControllerResourceRequirementsArgs) ToPolicyControllerResourceRequirementsPtrOutput() PolicyControllerResourceRequirementsPtrOutput {
	return i.ToPolicyControllerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i PolicyControllerResourceRequirementsArgs) ToPolicyControllerResourceRequirementsPtrOutputWithContext(ctx context.Context) PolicyControllerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerResourceRequirementsOutput).ToPolicyControllerResourceRequirementsPtrOutputWithContext(ctx)
}

// PolicyControllerResourceRequirementsPtrInput is an input type that accepts PolicyControllerResourceRequirementsArgs, PolicyControllerResourceRequirementsPtr and PolicyControllerResourceRequirementsPtrOutput values.
// You can construct a concrete instance of `PolicyControllerResourceRequirementsPtrInput` via:
//
//	        PolicyControllerResourceRequirementsArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerResourceRequirementsPtrInput interface {
	pulumi.Input

	ToPolicyControllerResourceRequirementsPtrOutput() PolicyControllerResourceRequirementsPtrOutput
	ToPolicyControllerResourceRequirementsPtrOutputWithContext(context.Context) PolicyControllerResourceRequirementsPtrOutput
}

type policyControllerResourceRequirementsPtrType PolicyControllerResourceRequirementsArgs

func PolicyControllerResourceRequirementsPtr(v *PolicyControllerResourceRequirementsArgs) PolicyControllerResourceRequirementsPtrInput {
	return (*policyControllerResourceRequirementsPtrType)(v)
}

func (*policyControllerResourceRequirementsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerResourceRequirements)(nil)).Elem()
}

func (i *policyControllerResourceRequirementsPtrType) ToPolicyControllerResourceRequirementsPtrOutput() PolicyControllerResourceRequirementsPtrOutput {
	return i.ToPolicyControllerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (i *policyControllerResourceRequirementsPtrType) ToPolicyControllerResourceRequirementsPtrOutputWithContext(ctx context.Context) PolicyControllerResourceRequirementsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerResourceRequirementsPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type PolicyControllerResourceRequirementsOutput struct{ *pulumi.OutputState }

func (PolicyControllerResourceRequirementsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerResourceRequirements)(nil)).Elem()
}

func (o PolicyControllerResourceRequirementsOutput) ToPolicyControllerResourceRequirementsOutput() PolicyControllerResourceRequirementsOutput {
	return o
}

func (o PolicyControllerResourceRequirementsOutput) ToPolicyControllerResourceRequirementsOutputWithContext(ctx context.Context) PolicyControllerResourceRequirementsOutput {
	return o
}

func (o PolicyControllerResourceRequirementsOutput) ToPolicyControllerResourceRequirementsPtrOutput() PolicyControllerResourceRequirementsPtrOutput {
	return o.ToPolicyControllerResourceRequirementsPtrOutputWithContext(context.Background())
}

func (o PolicyControllerResourceRequirementsOutput) ToPolicyControllerResourceRequirementsPtrOutputWithContext(ctx context.Context) PolicyControllerResourceRequirementsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerResourceRequirements) *PolicyControllerResourceRequirements {
		return &v
	}).(PolicyControllerResourceRequirementsPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed for use by the running container.
func (o PolicyControllerResourceRequirementsOutput) Limits() PolicyControllerResourceListPtrOutput {
	return o.ApplyT(func(v PolicyControllerResourceRequirements) *PolicyControllerResourceList { return v.Limits }).(PolicyControllerResourceListPtrOutput)
}

// Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
func (o PolicyControllerResourceRequirementsOutput) Requests() PolicyControllerResourceListPtrOutput {
	return o.ApplyT(func(v PolicyControllerResourceRequirements) *PolicyControllerResourceList { return v.Requests }).(PolicyControllerResourceListPtrOutput)
}

type PolicyControllerResourceRequirementsPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerResourceRequirementsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerResourceRequirements)(nil)).Elem()
}

func (o PolicyControllerResourceRequirementsPtrOutput) ToPolicyControllerResourceRequirementsPtrOutput() PolicyControllerResourceRequirementsPtrOutput {
	return o
}

func (o PolicyControllerResourceRequirementsPtrOutput) ToPolicyControllerResourceRequirementsPtrOutputWithContext(ctx context.Context) PolicyControllerResourceRequirementsPtrOutput {
	return o
}

func (o PolicyControllerResourceRequirementsPtrOutput) Elem() PolicyControllerResourceRequirementsOutput {
	return o.ApplyT(func(v *PolicyControllerResourceRequirements) PolicyControllerResourceRequirements {
		if v != nil {
			return *v
		}
		var ret PolicyControllerResourceRequirements
		return ret
	}).(PolicyControllerResourceRequirementsOutput)
}

// Limits describes the maximum amount of compute resources allowed for use by the running container.
func (o PolicyControllerResourceRequirementsPtrOutput) Limits() PolicyControllerResourceListPtrOutput {
	return o.ApplyT(func(v *PolicyControllerResourceRequirements) *PolicyControllerResourceList {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(PolicyControllerResourceListPtrOutput)
}

// Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
func (o PolicyControllerResourceRequirementsPtrOutput) Requests() PolicyControllerResourceListPtrOutput {
	return o.ApplyT(func(v *PolicyControllerResourceRequirements) *PolicyControllerResourceList {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(PolicyControllerResourceListPtrOutput)
}

// ResourceRequirements describes the compute resource requirements.
type PolicyControllerResourceRequirementsResponse struct {
	// Limits describes the maximum amount of compute resources allowed for use by the running container.
	Limits PolicyControllerResourceListResponse `pulumi:"limits"`
	// Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
	Requests PolicyControllerResourceListResponse `pulumi:"requests"`
}

// ResourceRequirements describes the compute resource requirements.
type PolicyControllerResourceRequirementsResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerResourceRequirementsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerResourceRequirementsResponse)(nil)).Elem()
}

func (o PolicyControllerResourceRequirementsResponseOutput) ToPolicyControllerResourceRequirementsResponseOutput() PolicyControllerResourceRequirementsResponseOutput {
	return o
}

func (o PolicyControllerResourceRequirementsResponseOutput) ToPolicyControllerResourceRequirementsResponseOutputWithContext(ctx context.Context) PolicyControllerResourceRequirementsResponseOutput {
	return o
}

// Limits describes the maximum amount of compute resources allowed for use by the running container.
func (o PolicyControllerResourceRequirementsResponseOutput) Limits() PolicyControllerResourceListResponseOutput {
	return o.ApplyT(func(v PolicyControllerResourceRequirementsResponse) PolicyControllerResourceListResponse {
		return v.Limits
	}).(PolicyControllerResourceListResponseOutput)
}

// Requests describes the amount of compute resources reserved for the container by the kube-scheduler.
func (o PolicyControllerResourceRequirementsResponseOutput) Requests() PolicyControllerResourceListResponseOutput {
	return o.ApplyT(func(v PolicyControllerResourceRequirementsResponse) PolicyControllerResourceListResponse {
		return v.Requests
	}).(PolicyControllerResourceListResponseOutput)
}

// The config specifying which default library templates to install.
type PolicyControllerTemplateLibraryConfig struct {
	// Configures the manner in which the template library is installed on the cluster.
	Installation *PolicyControllerTemplateLibraryConfigInstallation `pulumi:"installation"`
}

// PolicyControllerTemplateLibraryConfigInput is an input type that accepts PolicyControllerTemplateLibraryConfigArgs and PolicyControllerTemplateLibraryConfigOutput values.
// You can construct a concrete instance of `PolicyControllerTemplateLibraryConfigInput` via:
//
//	PolicyControllerTemplateLibraryConfigArgs{...}
type PolicyControllerTemplateLibraryConfigInput interface {
	pulumi.Input

	ToPolicyControllerTemplateLibraryConfigOutput() PolicyControllerTemplateLibraryConfigOutput
	ToPolicyControllerTemplateLibraryConfigOutputWithContext(context.Context) PolicyControllerTemplateLibraryConfigOutput
}

// The config specifying which default library templates to install.
type PolicyControllerTemplateLibraryConfigArgs struct {
	// Configures the manner in which the template library is installed on the cluster.
	Installation PolicyControllerTemplateLibraryConfigInstallationPtrInput `pulumi:"installation"`
}

func (PolicyControllerTemplateLibraryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerTemplateLibraryConfig)(nil)).Elem()
}

func (i PolicyControllerTemplateLibraryConfigArgs) ToPolicyControllerTemplateLibraryConfigOutput() PolicyControllerTemplateLibraryConfigOutput {
	return i.ToPolicyControllerTemplateLibraryConfigOutputWithContext(context.Background())
}

func (i PolicyControllerTemplateLibraryConfigArgs) ToPolicyControllerTemplateLibraryConfigOutputWithContext(ctx context.Context) PolicyControllerTemplateLibraryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerTemplateLibraryConfigOutput)
}

func (i PolicyControllerTemplateLibraryConfigArgs) ToPolicyControllerTemplateLibraryConfigPtrOutput() PolicyControllerTemplateLibraryConfigPtrOutput {
	return i.ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(context.Background())
}

func (i PolicyControllerTemplateLibraryConfigArgs) ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(ctx context.Context) PolicyControllerTemplateLibraryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerTemplateLibraryConfigOutput).ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(ctx)
}

// PolicyControllerTemplateLibraryConfigPtrInput is an input type that accepts PolicyControllerTemplateLibraryConfigArgs, PolicyControllerTemplateLibraryConfigPtr and PolicyControllerTemplateLibraryConfigPtrOutput values.
// You can construct a concrete instance of `PolicyControllerTemplateLibraryConfigPtrInput` via:
//
//	        PolicyControllerTemplateLibraryConfigArgs{...}
//
//	or:
//
//	        nil
type PolicyControllerTemplateLibraryConfigPtrInput interface {
	pulumi.Input

	ToPolicyControllerTemplateLibraryConfigPtrOutput() PolicyControllerTemplateLibraryConfigPtrOutput
	ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(context.Context) PolicyControllerTemplateLibraryConfigPtrOutput
}

type policyControllerTemplateLibraryConfigPtrType PolicyControllerTemplateLibraryConfigArgs

func PolicyControllerTemplateLibraryConfigPtr(v *PolicyControllerTemplateLibraryConfigArgs) PolicyControllerTemplateLibraryConfigPtrInput {
	return (*policyControllerTemplateLibraryConfigPtrType)(v)
}

func (*policyControllerTemplateLibraryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerTemplateLibraryConfig)(nil)).Elem()
}

func (i *policyControllerTemplateLibraryConfigPtrType) ToPolicyControllerTemplateLibraryConfigPtrOutput() PolicyControllerTemplateLibraryConfigPtrOutput {
	return i.ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(context.Background())
}

func (i *policyControllerTemplateLibraryConfigPtrType) ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(ctx context.Context) PolicyControllerTemplateLibraryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerTemplateLibraryConfigPtrOutput)
}

// The config specifying which default library templates to install.
type PolicyControllerTemplateLibraryConfigOutput struct{ *pulumi.OutputState }

func (PolicyControllerTemplateLibraryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerTemplateLibraryConfig)(nil)).Elem()
}

func (o PolicyControllerTemplateLibraryConfigOutput) ToPolicyControllerTemplateLibraryConfigOutput() PolicyControllerTemplateLibraryConfigOutput {
	return o
}

func (o PolicyControllerTemplateLibraryConfigOutput) ToPolicyControllerTemplateLibraryConfigOutputWithContext(ctx context.Context) PolicyControllerTemplateLibraryConfigOutput {
	return o
}

func (o PolicyControllerTemplateLibraryConfigOutput) ToPolicyControllerTemplateLibraryConfigPtrOutput() PolicyControllerTemplateLibraryConfigPtrOutput {
	return o.ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(context.Background())
}

func (o PolicyControllerTemplateLibraryConfigOutput) ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(ctx context.Context) PolicyControllerTemplateLibraryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyControllerTemplateLibraryConfig) *PolicyControllerTemplateLibraryConfig {
		return &v
	}).(PolicyControllerTemplateLibraryConfigPtrOutput)
}

// Configures the manner in which the template library is installed on the cluster.
func (o PolicyControllerTemplateLibraryConfigOutput) Installation() PolicyControllerTemplateLibraryConfigInstallationPtrOutput {
	return o.ApplyT(func(v PolicyControllerTemplateLibraryConfig) *PolicyControllerTemplateLibraryConfigInstallation {
		return v.Installation
	}).(PolicyControllerTemplateLibraryConfigInstallationPtrOutput)
}

type PolicyControllerTemplateLibraryConfigPtrOutput struct{ *pulumi.OutputState }

func (PolicyControllerTemplateLibraryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyControllerTemplateLibraryConfig)(nil)).Elem()
}

func (o PolicyControllerTemplateLibraryConfigPtrOutput) ToPolicyControllerTemplateLibraryConfigPtrOutput() PolicyControllerTemplateLibraryConfigPtrOutput {
	return o
}

func (o PolicyControllerTemplateLibraryConfigPtrOutput) ToPolicyControllerTemplateLibraryConfigPtrOutputWithContext(ctx context.Context) PolicyControllerTemplateLibraryConfigPtrOutput {
	return o
}

func (o PolicyControllerTemplateLibraryConfigPtrOutput) Elem() PolicyControllerTemplateLibraryConfigOutput {
	return o.ApplyT(func(v *PolicyControllerTemplateLibraryConfig) PolicyControllerTemplateLibraryConfig {
		if v != nil {
			return *v
		}
		var ret PolicyControllerTemplateLibraryConfig
		return ret
	}).(PolicyControllerTemplateLibraryConfigOutput)
}

// Configures the manner in which the template library is installed on the cluster.
func (o PolicyControllerTemplateLibraryConfigPtrOutput) Installation() PolicyControllerTemplateLibraryConfigInstallationPtrOutput {
	return o.ApplyT(func(v *PolicyControllerTemplateLibraryConfig) *PolicyControllerTemplateLibraryConfigInstallation {
		if v == nil {
			return nil
		}
		return v.Installation
	}).(PolicyControllerTemplateLibraryConfigInstallationPtrOutput)
}

// The config specifying which default library templates to install.
type PolicyControllerTemplateLibraryConfigResponse struct {
	// Configures the manner in which the template library is installed on the cluster.
	Installation string `pulumi:"installation"`
}

// The config specifying which default library templates to install.
type PolicyControllerTemplateLibraryConfigResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerTemplateLibraryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerTemplateLibraryConfigResponse)(nil)).Elem()
}

func (o PolicyControllerTemplateLibraryConfigResponseOutput) ToPolicyControllerTemplateLibraryConfigResponseOutput() PolicyControllerTemplateLibraryConfigResponseOutput {
	return o
}

func (o PolicyControllerTemplateLibraryConfigResponseOutput) ToPolicyControllerTemplateLibraryConfigResponseOutputWithContext(ctx context.Context) PolicyControllerTemplateLibraryConfigResponseOutput {
	return o
}

// Configures the manner in which the template library is installed on the cluster.
func (o PolicyControllerTemplateLibraryConfigResponseOutput) Installation() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerTemplateLibraryConfigResponse) string { return v.Installation }).(pulumi.StringOutput)
}

// Toleration of a node taint.
type PolicyControllerToleration struct {
	// Matches a taint effect.
	Effect *string `pulumi:"effect"`
	// Matches a taint key (not necessarily unique).
	Key *string `pulumi:"key"`
	// Matches a taint operator.
	Operator *string `pulumi:"operator"`
	// Matches a taint value.
	Value *string `pulumi:"value"`
}

// PolicyControllerTolerationInput is an input type that accepts PolicyControllerTolerationArgs and PolicyControllerTolerationOutput values.
// You can construct a concrete instance of `PolicyControllerTolerationInput` via:
//
//	PolicyControllerTolerationArgs{...}
type PolicyControllerTolerationInput interface {
	pulumi.Input

	ToPolicyControllerTolerationOutput() PolicyControllerTolerationOutput
	ToPolicyControllerTolerationOutputWithContext(context.Context) PolicyControllerTolerationOutput
}

// Toleration of a node taint.
type PolicyControllerTolerationArgs struct {
	// Matches a taint effect.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Matches a taint key (not necessarily unique).
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Matches a taint operator.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Matches a taint value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PolicyControllerTolerationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerToleration)(nil)).Elem()
}

func (i PolicyControllerTolerationArgs) ToPolicyControllerTolerationOutput() PolicyControllerTolerationOutput {
	return i.ToPolicyControllerTolerationOutputWithContext(context.Background())
}

func (i PolicyControllerTolerationArgs) ToPolicyControllerTolerationOutputWithContext(ctx context.Context) PolicyControllerTolerationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerTolerationOutput)
}

// PolicyControllerTolerationArrayInput is an input type that accepts PolicyControllerTolerationArray and PolicyControllerTolerationArrayOutput values.
// You can construct a concrete instance of `PolicyControllerTolerationArrayInput` via:
//
//	PolicyControllerTolerationArray{ PolicyControllerTolerationArgs{...} }
type PolicyControllerTolerationArrayInput interface {
	pulumi.Input

	ToPolicyControllerTolerationArrayOutput() PolicyControllerTolerationArrayOutput
	ToPolicyControllerTolerationArrayOutputWithContext(context.Context) PolicyControllerTolerationArrayOutput
}

type PolicyControllerTolerationArray []PolicyControllerTolerationInput

func (PolicyControllerTolerationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyControllerToleration)(nil)).Elem()
}

func (i PolicyControllerTolerationArray) ToPolicyControllerTolerationArrayOutput() PolicyControllerTolerationArrayOutput {
	return i.ToPolicyControllerTolerationArrayOutputWithContext(context.Background())
}

func (i PolicyControllerTolerationArray) ToPolicyControllerTolerationArrayOutputWithContext(ctx context.Context) PolicyControllerTolerationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyControllerTolerationArrayOutput)
}

// Toleration of a node taint.
type PolicyControllerTolerationOutput struct{ *pulumi.OutputState }

func (PolicyControllerTolerationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerToleration)(nil)).Elem()
}

func (o PolicyControllerTolerationOutput) ToPolicyControllerTolerationOutput() PolicyControllerTolerationOutput {
	return o
}

func (o PolicyControllerTolerationOutput) ToPolicyControllerTolerationOutputWithContext(ctx context.Context) PolicyControllerTolerationOutput {
	return o
}

// Matches a taint effect.
func (o PolicyControllerTolerationOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerToleration) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Matches a taint key (not necessarily unique).
func (o PolicyControllerTolerationOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerToleration) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Matches a taint operator.
func (o PolicyControllerTolerationOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerToleration) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Matches a taint value.
func (o PolicyControllerTolerationOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyControllerToleration) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PolicyControllerTolerationArrayOutput struct{ *pulumi.OutputState }

func (PolicyControllerTolerationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyControllerToleration)(nil)).Elem()
}

func (o PolicyControllerTolerationArrayOutput) ToPolicyControllerTolerationArrayOutput() PolicyControllerTolerationArrayOutput {
	return o
}

func (o PolicyControllerTolerationArrayOutput) ToPolicyControllerTolerationArrayOutputWithContext(ctx context.Context) PolicyControllerTolerationArrayOutput {
	return o
}

func (o PolicyControllerTolerationArrayOutput) Index(i pulumi.IntInput) PolicyControllerTolerationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyControllerToleration {
		return vs[0].([]PolicyControllerToleration)[vs[1].(int)]
	}).(PolicyControllerTolerationOutput)
}

// Toleration of a node taint.
type PolicyControllerTolerationResponse struct {
	// Matches a taint effect.
	Effect string `pulumi:"effect"`
	// Matches a taint key (not necessarily unique).
	Key string `pulumi:"key"`
	// Matches a taint operator.
	Operator string `pulumi:"operator"`
	// Matches a taint value.
	Value string `pulumi:"value"`
}

// Toleration of a node taint.
type PolicyControllerTolerationResponseOutput struct{ *pulumi.OutputState }

func (PolicyControllerTolerationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyControllerTolerationResponse)(nil)).Elem()
}

func (o PolicyControllerTolerationResponseOutput) ToPolicyControllerTolerationResponseOutput() PolicyControllerTolerationResponseOutput {
	return o
}

func (o PolicyControllerTolerationResponseOutput) ToPolicyControllerTolerationResponseOutputWithContext(ctx context.Context) PolicyControllerTolerationResponseOutput {
	return o
}

// Matches a taint effect.
func (o PolicyControllerTolerationResponseOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerTolerationResponse) string { return v.Effect }).(pulumi.StringOutput)
}

// Matches a taint key (not necessarily unique).
func (o PolicyControllerTolerationResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerTolerationResponse) string { return v.Key }).(pulumi.StringOutput)
}

// Matches a taint operator.
func (o PolicyControllerTolerationResponseOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerTolerationResponse) string { return v.Operator }).(pulumi.StringOutput)
}

// Matches a taint value.
func (o PolicyControllerTolerationResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyControllerTolerationResponse) string { return v.Value }).(pulumi.StringOutput)
}

type PolicyControllerTolerationResponseArrayOutput struct{ *pulumi.OutputState }

func (PolicyControllerTolerationResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyControllerTolerationResponse)(nil)).Elem()
}

func (o PolicyControllerTolerationResponseArrayOutput) ToPolicyControllerTolerationResponseArrayOutput() PolicyControllerTolerationResponseArrayOutput {
	return o
}

func (o PolicyControllerTolerationResponseArrayOutput) ToPolicyControllerTolerationResponseArrayOutputWithContext(ctx context.Context) PolicyControllerTolerationResponseArrayOutput {
	return o
}

func (o PolicyControllerTolerationResponseArrayOutput) Index(i pulumi.IntInput) PolicyControllerTolerationResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyControllerTolerationResponse {
		return vs[0].([]PolicyControllerTolerationResponse)[vs[1].(int)]
	}).(PolicyControllerTolerationResponseOutput)
}

// RBACRoleBindingLifecycleState describes the state of a RbacRoleBinding resource.
type RBACRoleBindingLifecycleStateResponse struct {
	// The current state of the rbacrolebinding resource.
	Code string `pulumi:"code"`
}

// RBACRoleBindingLifecycleState describes the state of a RbacRoleBinding resource.
type RBACRoleBindingLifecycleStateResponseOutput struct{ *pulumi.OutputState }

func (RBACRoleBindingLifecycleStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RBACRoleBindingLifecycleStateResponse)(nil)).Elem()
}

func (o RBACRoleBindingLifecycleStateResponseOutput) ToRBACRoleBindingLifecycleStateResponseOutput() RBACRoleBindingLifecycleStateResponseOutput {
	return o
}

func (o RBACRoleBindingLifecycleStateResponseOutput) ToRBACRoleBindingLifecycleStateResponseOutputWithContext(ctx context.Context) RBACRoleBindingLifecycleStateResponseOutput {
	return o
}

// The current state of the rbacrolebinding resource.
func (o RBACRoleBindingLifecycleStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v RBACRoleBindingLifecycleStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// ResourceManifest represents a single Kubernetes resource to be applied to the cluster.
type ResourceManifestResponse struct {
	// Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.
	ClusterScoped bool `pulumi:"clusterScoped"`
	// YAML manifest of the resource.
	Manifest string `pulumi:"manifest"`
}

// ResourceManifest represents a single Kubernetes resource to be applied to the cluster.
type ResourceManifestResponseOutput struct{ *pulumi.OutputState }

func (ResourceManifestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceManifestResponse)(nil)).Elem()
}

func (o ResourceManifestResponseOutput) ToResourceManifestResponseOutput() ResourceManifestResponseOutput {
	return o
}

func (o ResourceManifestResponseOutput) ToResourceManifestResponseOutputWithContext(ctx context.Context) ResourceManifestResponseOutput {
	return o
}

// Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.
func (o ResourceManifestResponseOutput) ClusterScoped() pulumi.BoolOutput {
	return o.ApplyT(func(v ResourceManifestResponse) bool { return v.ClusterScoped }).(pulumi.BoolOutput)
}

// YAML manifest of the resource.
func (o ResourceManifestResponseOutput) Manifest() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceManifestResponse) string { return v.Manifest }).(pulumi.StringOutput)
}

type ResourceManifestResponseArrayOutput struct{ *pulumi.OutputState }

func (ResourceManifestResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResourceManifestResponse)(nil)).Elem()
}

func (o ResourceManifestResponseArrayOutput) ToResourceManifestResponseArrayOutput() ResourceManifestResponseArrayOutput {
	return o
}

func (o ResourceManifestResponseArrayOutput) ToResourceManifestResponseArrayOutputWithContext(ctx context.Context) ResourceManifestResponseArrayOutput {
	return o
}

func (o ResourceManifestResponseArrayOutput) Index(i pulumi.IntInput) ResourceManifestResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResourceManifestResponse {
		return vs[0].([]ResourceManifestResponse)[vs[1].(int)]
	}).(ResourceManifestResponseOutput)
}

// ResourceOptions represent options for Kubernetes resource generation.
type ResourceOptions struct {
	// Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
	ConnectVersion *string `pulumi:"connectVersion"`
	// Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
	K8sVersion *string `pulumi:"k8sVersion"`
	// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
	V1beta1Crd *bool `pulumi:"v1beta1Crd"`
}

// ResourceOptionsInput is an input type that accepts ResourceOptionsArgs and ResourceOptionsOutput values.
// You can construct a concrete instance of `ResourceOptionsInput` via:
//
//	ResourceOptionsArgs{...}
type ResourceOptionsInput interface {
	pulumi.Input

	ToResourceOptionsOutput() ResourceOptionsOutput
	ToResourceOptionsOutputWithContext(context.Context) ResourceOptionsOutput
}

// ResourceOptions represent options for Kubernetes resource generation.
type ResourceOptionsArgs struct {
	// Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
	ConnectVersion pulumi.StringPtrInput `pulumi:"connectVersion"`
	// Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
	K8sVersion pulumi.StringPtrInput `pulumi:"k8sVersion"`
	// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
	V1beta1Crd pulumi.BoolPtrInput `pulumi:"v1beta1Crd"`
}

func (ResourceOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceOptions)(nil)).Elem()
}

func (i ResourceOptionsArgs) ToResourceOptionsOutput() ResourceOptionsOutput {
	return i.ToResourceOptionsOutputWithContext(context.Background())
}

func (i ResourceOptionsArgs) ToResourceOptionsOutputWithContext(ctx context.Context) ResourceOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOptionsOutput)
}

func (i ResourceOptionsArgs) ToResourceOptionsPtrOutput() ResourceOptionsPtrOutput {
	return i.ToResourceOptionsPtrOutputWithContext(context.Background())
}

func (i ResourceOptionsArgs) ToResourceOptionsPtrOutputWithContext(ctx context.Context) ResourceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOptionsOutput).ToResourceOptionsPtrOutputWithContext(ctx)
}

// ResourceOptionsPtrInput is an input type that accepts ResourceOptionsArgs, ResourceOptionsPtr and ResourceOptionsPtrOutput values.
// You can construct a concrete instance of `ResourceOptionsPtrInput` via:
//
//	        ResourceOptionsArgs{...}
//
//	or:
//
//	        nil
type ResourceOptionsPtrInput interface {
	pulumi.Input

	ToResourceOptionsPtrOutput() ResourceOptionsPtrOutput
	ToResourceOptionsPtrOutputWithContext(context.Context) ResourceOptionsPtrOutput
}

type resourceOptionsPtrType ResourceOptionsArgs

func ResourceOptionsPtr(v *ResourceOptionsArgs) ResourceOptionsPtrInput {
	return (*resourceOptionsPtrType)(v)
}

func (*resourceOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceOptions)(nil)).Elem()
}

func (i *resourceOptionsPtrType) ToResourceOptionsPtrOutput() ResourceOptionsPtrOutput {
	return i.ToResourceOptionsPtrOutputWithContext(context.Background())
}

func (i *resourceOptionsPtrType) ToResourceOptionsPtrOutputWithContext(ctx context.Context) ResourceOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOptionsPtrOutput)
}

// ResourceOptions represent options for Kubernetes resource generation.
type ResourceOptionsOutput struct{ *pulumi.OutputState }

func (ResourceOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceOptions)(nil)).Elem()
}

func (o ResourceOptionsOutput) ToResourceOptionsOutput() ResourceOptionsOutput {
	return o
}

func (o ResourceOptionsOutput) ToResourceOptionsOutputWithContext(ctx context.Context) ResourceOptionsOutput {
	return o
}

func (o ResourceOptionsOutput) ToResourceOptionsPtrOutput() ResourceOptionsPtrOutput {
	return o.ToResourceOptionsPtrOutputWithContext(context.Background())
}

func (o ResourceOptionsOutput) ToResourceOptionsPtrOutputWithContext(ctx context.Context) ResourceOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceOptions) *ResourceOptions {
		return &v
	}).(ResourceOptionsPtrOutput)
}

// Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
func (o ResourceOptionsOutput) ConnectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOptions) *string { return v.ConnectVersion }).(pulumi.StringPtrOutput)
}

// Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
func (o ResourceOptionsOutput) K8sVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResourceOptions) *string { return v.K8sVersion }).(pulumi.StringPtrOutput)
}

// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
func (o ResourceOptionsOutput) V1beta1Crd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ResourceOptions) *bool { return v.V1beta1Crd }).(pulumi.BoolPtrOutput)
}

type ResourceOptionsPtrOutput struct{ *pulumi.OutputState }

func (ResourceOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceOptions)(nil)).Elem()
}

func (o ResourceOptionsPtrOutput) ToResourceOptionsPtrOutput() ResourceOptionsPtrOutput {
	return o
}

func (o ResourceOptionsPtrOutput) ToResourceOptionsPtrOutputWithContext(ctx context.Context) ResourceOptionsPtrOutput {
	return o
}

func (o ResourceOptionsPtrOutput) Elem() ResourceOptionsOutput {
	return o.ApplyT(func(v *ResourceOptions) ResourceOptions {
		if v != nil {
			return *v
		}
		var ret ResourceOptions
		return ret
	}).(ResourceOptionsOutput)
}

// Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
func (o ResourceOptionsPtrOutput) ConnectVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOptions) *string {
		if v == nil {
			return nil
		}
		return v.ConnectVersion
	}).(pulumi.StringPtrOutput)
}

// Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
func (o ResourceOptionsPtrOutput) K8sVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResourceOptions) *string {
		if v == nil {
			return nil
		}
		return v.K8sVersion
	}).(pulumi.StringPtrOutput)
}

// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
func (o ResourceOptionsPtrOutput) V1beta1Crd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ResourceOptions) *bool {
		if v == nil {
			return nil
		}
		return v.V1beta1Crd
	}).(pulumi.BoolPtrOutput)
}

// ResourceOptions represent options for Kubernetes resource generation.
type ResourceOptionsResponse struct {
	// Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
	ConnectVersion string `pulumi:"connectVersion"`
	// Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
	K8sVersion string `pulumi:"k8sVersion"`
	// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
	V1beta1Crd bool `pulumi:"v1beta1Crd"`
}

// ResourceOptions represent options for Kubernetes resource generation.
type ResourceOptionsResponseOutput struct{ *pulumi.OutputState }

func (ResourceOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceOptionsResponse)(nil)).Elem()
}

func (o ResourceOptionsResponseOutput) ToResourceOptionsResponseOutput() ResourceOptionsResponseOutput {
	return o
}

func (o ResourceOptionsResponseOutput) ToResourceOptionsResponseOutputWithContext(ctx context.Context) ResourceOptionsResponseOutput {
	return o
}

// Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
func (o ResourceOptionsResponseOutput) ConnectVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceOptionsResponse) string { return v.ConnectVersion }).(pulumi.StringOutput)
}

// Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, `apiextensions/v1beta1` or`apiextensions/v1`.
func (o ResourceOptionsResponseOutput) K8sVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceOptionsResponse) string { return v.K8sVersion }).(pulumi.StringOutput)
}

// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions <1.16.
func (o ResourceOptionsResponseOutput) V1beta1Crd() pulumi.BoolOutput {
	return o.ApplyT(func(v ResourceOptionsResponse) bool { return v.V1beta1Crd }).(pulumi.BoolOutput)
}

// Role is the type for Kubernetes roles
type Role struct {
	// predefined_role is the Kubernetes default role to use
	PredefinedRole *RolePredefinedRole `pulumi:"predefinedRole"`
}

// RoleInput is an input type that accepts RoleArgs and RoleOutput values.
// You can construct a concrete instance of `RoleInput` via:
//
//	RoleArgs{...}
type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(context.Context) RoleOutput
}

// Role is the type for Kubernetes roles
type RoleArgs struct {
	// predefined_role is the Kubernetes default role to use
	PredefinedRole RolePredefinedRolePtrInput `pulumi:"predefinedRole"`
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (i RoleArgs) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i RoleArgs) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

// Role is the type for Kubernetes roles
type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

// predefined_role is the Kubernetes default role to use
func (o RoleOutput) PredefinedRole() RolePredefinedRolePtrOutput {
	return o.ApplyT(func(v Role) *RolePredefinedRole { return v.PredefinedRole }).(RolePredefinedRolePtrOutput)
}

// Role is the type for Kubernetes roles
type RoleResponse struct {
	// predefined_role is the Kubernetes default role to use
	PredefinedRole string `pulumi:"predefinedRole"`
}

// Role is the type for Kubernetes roles
type RoleResponseOutput struct{ *pulumi.OutputState }

func (RoleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleResponse)(nil)).Elem()
}

func (o RoleResponseOutput) ToRoleResponseOutput() RoleResponseOutput {
	return o
}

func (o RoleResponseOutput) ToRoleResponseOutputWithContext(ctx context.Context) RoleResponseOutput {
	return o
}

// predefined_role is the Kubernetes default role to use
func (o RoleResponseOutput) PredefinedRole() pulumi.StringOutput {
	return o.ApplyT(func(v RoleResponse) string { return v.PredefinedRole }).(pulumi.StringOutput)
}

// ScopeFeatureSpec contains feature specs for a fleet scope.
type ScopeFeatureSpec struct {
}

// ScopeFeatureSpecInput is an input type that accepts ScopeFeatureSpecArgs and ScopeFeatureSpecOutput values.
// You can construct a concrete instance of `ScopeFeatureSpecInput` via:
//
//	ScopeFeatureSpecArgs{...}
type ScopeFeatureSpecInput interface {
	pulumi.Input

	ToScopeFeatureSpecOutput() ScopeFeatureSpecOutput
	ToScopeFeatureSpecOutputWithContext(context.Context) ScopeFeatureSpecOutput
}

// ScopeFeatureSpec contains feature specs for a fleet scope.
type ScopeFeatureSpecArgs struct {
}

func (ScopeFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeFeatureSpec)(nil)).Elem()
}

func (i ScopeFeatureSpecArgs) ToScopeFeatureSpecOutput() ScopeFeatureSpecOutput {
	return i.ToScopeFeatureSpecOutputWithContext(context.Background())
}

func (i ScopeFeatureSpecArgs) ToScopeFeatureSpecOutputWithContext(ctx context.Context) ScopeFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeFeatureSpecOutput)
}

func (i ScopeFeatureSpecArgs) ToScopeFeatureSpecPtrOutput() ScopeFeatureSpecPtrOutput {
	return i.ToScopeFeatureSpecPtrOutputWithContext(context.Background())
}

func (i ScopeFeatureSpecArgs) ToScopeFeatureSpecPtrOutputWithContext(ctx context.Context) ScopeFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeFeatureSpecOutput).ToScopeFeatureSpecPtrOutputWithContext(ctx)
}

// ScopeFeatureSpecPtrInput is an input type that accepts ScopeFeatureSpecArgs, ScopeFeatureSpecPtr and ScopeFeatureSpecPtrOutput values.
// You can construct a concrete instance of `ScopeFeatureSpecPtrInput` via:
//
//	        ScopeFeatureSpecArgs{...}
//
//	or:
//
//	        nil
type ScopeFeatureSpecPtrInput interface {
	pulumi.Input

	ToScopeFeatureSpecPtrOutput() ScopeFeatureSpecPtrOutput
	ToScopeFeatureSpecPtrOutputWithContext(context.Context) ScopeFeatureSpecPtrOutput
}

type scopeFeatureSpecPtrType ScopeFeatureSpecArgs

func ScopeFeatureSpecPtr(v *ScopeFeatureSpecArgs) ScopeFeatureSpecPtrInput {
	return (*scopeFeatureSpecPtrType)(v)
}

func (*scopeFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeFeatureSpec)(nil)).Elem()
}

func (i *scopeFeatureSpecPtrType) ToScopeFeatureSpecPtrOutput() ScopeFeatureSpecPtrOutput {
	return i.ToScopeFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *scopeFeatureSpecPtrType) ToScopeFeatureSpecPtrOutputWithContext(ctx context.Context) ScopeFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeFeatureSpecPtrOutput)
}

// ScopeFeatureSpec contains feature specs for a fleet scope.
type ScopeFeatureSpecOutput struct{ *pulumi.OutputState }

func (ScopeFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeFeatureSpec)(nil)).Elem()
}

func (o ScopeFeatureSpecOutput) ToScopeFeatureSpecOutput() ScopeFeatureSpecOutput {
	return o
}

func (o ScopeFeatureSpecOutput) ToScopeFeatureSpecOutputWithContext(ctx context.Context) ScopeFeatureSpecOutput {
	return o
}

func (o ScopeFeatureSpecOutput) ToScopeFeatureSpecPtrOutput() ScopeFeatureSpecPtrOutput {
	return o.ToScopeFeatureSpecPtrOutputWithContext(context.Background())
}

func (o ScopeFeatureSpecOutput) ToScopeFeatureSpecPtrOutputWithContext(ctx context.Context) ScopeFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ScopeFeatureSpec) *ScopeFeatureSpec {
		return &v
	}).(ScopeFeatureSpecPtrOutput)
}

type ScopeFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (ScopeFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeFeatureSpec)(nil)).Elem()
}

func (o ScopeFeatureSpecPtrOutput) ToScopeFeatureSpecPtrOutput() ScopeFeatureSpecPtrOutput {
	return o
}

func (o ScopeFeatureSpecPtrOutput) ToScopeFeatureSpecPtrOutputWithContext(ctx context.Context) ScopeFeatureSpecPtrOutput {
	return o
}

func (o ScopeFeatureSpecPtrOutput) Elem() ScopeFeatureSpecOutput {
	return o.ApplyT(func(v *ScopeFeatureSpec) ScopeFeatureSpec {
		if v != nil {
			return *v
		}
		var ret ScopeFeatureSpec
		return ret
	}).(ScopeFeatureSpecOutput)
}

// ScopeFeatureSpec contains feature specs for a fleet scope.
type ScopeFeatureSpecResponse struct {
}

// ScopeFeatureSpec contains feature specs for a fleet scope.
type ScopeFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (ScopeFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeFeatureSpecResponse)(nil)).Elem()
}

func (o ScopeFeatureSpecResponseOutput) ToScopeFeatureSpecResponseOutput() ScopeFeatureSpecResponseOutput {
	return o
}

func (o ScopeFeatureSpecResponseOutput) ToScopeFeatureSpecResponseOutputWithContext(ctx context.Context) ScopeFeatureSpecResponseOutput {
	return o
}

// ScopeFeatureState contains Scope-wide Feature status information.
type ScopeFeatureStateResponse struct {
	// The "running state" of the Feature in this Scope.
	State FeatureStateResponse `pulumi:"state"`
}

// ScopeFeatureState contains Scope-wide Feature status information.
type ScopeFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (ScopeFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeFeatureStateResponse)(nil)).Elem()
}

func (o ScopeFeatureStateResponseOutput) ToScopeFeatureStateResponseOutput() ScopeFeatureStateResponseOutput {
	return o
}

func (o ScopeFeatureStateResponseOutput) ToScopeFeatureStateResponseOutputWithContext(ctx context.Context) ScopeFeatureStateResponseOutput {
	return o
}

// The "running state" of the Feature in this Scope.
func (o ScopeFeatureStateResponseOutput) State() FeatureStateResponseOutput {
	return o.ApplyT(func(v ScopeFeatureStateResponse) FeatureStateResponse { return v.State }).(FeatureStateResponseOutput)
}

// ScopeLifecycleState describes the state of a Scope resource.
type ScopeLifecycleStateResponse struct {
	// The current state of the scope resource.
	Code string `pulumi:"code"`
}

// ScopeLifecycleState describes the state of a Scope resource.
type ScopeLifecycleStateResponseOutput struct{ *pulumi.OutputState }

func (ScopeLifecycleStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScopeLifecycleStateResponse)(nil)).Elem()
}

func (o ScopeLifecycleStateResponseOutput) ToScopeLifecycleStateResponseOutput() ScopeLifecycleStateResponseOutput {
	return o
}

func (o ScopeLifecycleStateResponseOutput) ToScopeLifecycleStateResponseOutputWithContext(ctx context.Context) ScopeLifecycleStateResponseOutput {
	return o
}

// The current state of the scope resource.
func (o ScopeLifecycleStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ScopeLifecycleStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfig struct {
	// Sets which mode to use for Security Posture features.
	Mode *SecurityPostureConfigMode `pulumi:"mode"`
	// Sets which mode to use for vulnerability scanning.
	VulnerabilityMode *SecurityPostureConfigVulnerabilityMode `pulumi:"vulnerabilityMode"`
}

// SecurityPostureConfigInput is an input type that accepts SecurityPostureConfigArgs and SecurityPostureConfigOutput values.
// You can construct a concrete instance of `SecurityPostureConfigInput` via:
//
//	SecurityPostureConfigArgs{...}
type SecurityPostureConfigInput interface {
	pulumi.Input

	ToSecurityPostureConfigOutput() SecurityPostureConfigOutput
	ToSecurityPostureConfigOutputWithContext(context.Context) SecurityPostureConfigOutput
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigArgs struct {
	// Sets which mode to use for Security Posture features.
	Mode SecurityPostureConfigModePtrInput `pulumi:"mode"`
	// Sets which mode to use for vulnerability scanning.
	VulnerabilityMode SecurityPostureConfigVulnerabilityModePtrInput `pulumi:"vulnerabilityMode"`
}

func (SecurityPostureConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureConfig)(nil)).Elem()
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigOutput() SecurityPostureConfigOutput {
	return i.ToSecurityPostureConfigOutputWithContext(context.Background())
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigOutputWithContext(ctx context.Context) SecurityPostureConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureConfigOutput)
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return i.ToSecurityPostureConfigPtrOutputWithContext(context.Background())
}

func (i SecurityPostureConfigArgs) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureConfigOutput).ToSecurityPostureConfigPtrOutputWithContext(ctx)
}

// SecurityPostureConfigPtrInput is an input type that accepts SecurityPostureConfigArgs, SecurityPostureConfigPtr and SecurityPostureConfigPtrOutput values.
// You can construct a concrete instance of `SecurityPostureConfigPtrInput` via:
//
//	        SecurityPostureConfigArgs{...}
//
//	or:
//
//	        nil
type SecurityPostureConfigPtrInput interface {
	pulumi.Input

	ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput
	ToSecurityPostureConfigPtrOutputWithContext(context.Context) SecurityPostureConfigPtrOutput
}

type securityPostureConfigPtrType SecurityPostureConfigArgs

func SecurityPostureConfigPtr(v *SecurityPostureConfigArgs) SecurityPostureConfigPtrInput {
	return (*securityPostureConfigPtrType)(v)
}

func (*securityPostureConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPostureConfig)(nil)).Elem()
}

func (i *securityPostureConfigPtrType) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return i.ToSecurityPostureConfigPtrOutputWithContext(context.Background())
}

func (i *securityPostureConfigPtrType) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPostureConfigPtrOutput)
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigOutput struct{ *pulumi.OutputState }

func (SecurityPostureConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureConfig)(nil)).Elem()
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigOutput() SecurityPostureConfigOutput {
	return o
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigOutputWithContext(ctx context.Context) SecurityPostureConfigOutput {
	return o
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return o.ToSecurityPostureConfigPtrOutputWithContext(context.Background())
}

func (o SecurityPostureConfigOutput) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SecurityPostureConfig) *SecurityPostureConfig {
		return &v
	}).(SecurityPostureConfigPtrOutput)
}

// Sets which mode to use for Security Posture features.
func (o SecurityPostureConfigOutput) Mode() SecurityPostureConfigModePtrOutput {
	return o.ApplyT(func(v SecurityPostureConfig) *SecurityPostureConfigMode { return v.Mode }).(SecurityPostureConfigModePtrOutput)
}

// Sets which mode to use for vulnerability scanning.
func (o SecurityPostureConfigOutput) VulnerabilityMode() SecurityPostureConfigVulnerabilityModePtrOutput {
	return o.ApplyT(func(v SecurityPostureConfig) *SecurityPostureConfigVulnerabilityMode { return v.VulnerabilityMode }).(SecurityPostureConfigVulnerabilityModePtrOutput)
}

type SecurityPostureConfigPtrOutput struct{ *pulumi.OutputState }

func (SecurityPostureConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPostureConfig)(nil)).Elem()
}

func (o SecurityPostureConfigPtrOutput) ToSecurityPostureConfigPtrOutput() SecurityPostureConfigPtrOutput {
	return o
}

func (o SecurityPostureConfigPtrOutput) ToSecurityPostureConfigPtrOutputWithContext(ctx context.Context) SecurityPostureConfigPtrOutput {
	return o
}

func (o SecurityPostureConfigPtrOutput) Elem() SecurityPostureConfigOutput {
	return o.ApplyT(func(v *SecurityPostureConfig) SecurityPostureConfig {
		if v != nil {
			return *v
		}
		var ret SecurityPostureConfig
		return ret
	}).(SecurityPostureConfigOutput)
}

// Sets which mode to use for Security Posture features.
func (o SecurityPostureConfigPtrOutput) Mode() SecurityPostureConfigModePtrOutput {
	return o.ApplyT(func(v *SecurityPostureConfig) *SecurityPostureConfigMode {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(SecurityPostureConfigModePtrOutput)
}

// Sets which mode to use for vulnerability scanning.
func (o SecurityPostureConfigPtrOutput) VulnerabilityMode() SecurityPostureConfigVulnerabilityModePtrOutput {
	return o.ApplyT(func(v *SecurityPostureConfig) *SecurityPostureConfigVulnerabilityMode {
		if v == nil {
			return nil
		}
		return v.VulnerabilityMode
	}).(SecurityPostureConfigVulnerabilityModePtrOutput)
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigResponse struct {
	// Sets which mode to use for Security Posture features.
	Mode string `pulumi:"mode"`
	// Sets which mode to use for vulnerability scanning.
	VulnerabilityMode string `pulumi:"vulnerabilityMode"`
}

// SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.
type SecurityPostureConfigResponseOutput struct{ *pulumi.OutputState }

func (SecurityPostureConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityPostureConfigResponse)(nil)).Elem()
}

func (o SecurityPostureConfigResponseOutput) ToSecurityPostureConfigResponseOutput() SecurityPostureConfigResponseOutput {
	return o
}

func (o SecurityPostureConfigResponseOutput) ToSecurityPostureConfigResponseOutputWithContext(ctx context.Context) SecurityPostureConfigResponseOutput {
	return o
}

// Sets which mode to use for Security Posture features.
func (o SecurityPostureConfigResponseOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPostureConfigResponse) string { return v.Mode }).(pulumi.StringOutput)
}

// Sets which mode to use for vulnerability scanning.
func (o SecurityPostureConfigResponseOutput) VulnerabilityMode() pulumi.StringOutput {
	return o.ApplyT(func(v SecurityPostureConfigResponse) string { return v.VulnerabilityMode }).(pulumi.StringOutput)
}

// Status of control plane management.
type ServiceMeshControlPlaneManagementResponse struct {
	// Explanation of state.
	Details []ServiceMeshStatusDetailsResponse `pulumi:"details"`
	// LifecycleState of control plane management.
	State string `pulumi:"state"`
}

// Status of control plane management.
type ServiceMeshControlPlaneManagementResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshControlPlaneManagementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshControlPlaneManagementResponse)(nil)).Elem()
}

func (o ServiceMeshControlPlaneManagementResponseOutput) ToServiceMeshControlPlaneManagementResponseOutput() ServiceMeshControlPlaneManagementResponseOutput {
	return o
}

func (o ServiceMeshControlPlaneManagementResponseOutput) ToServiceMeshControlPlaneManagementResponseOutputWithContext(ctx context.Context) ServiceMeshControlPlaneManagementResponseOutput {
	return o
}

// Explanation of state.
func (o ServiceMeshControlPlaneManagementResponseOutput) Details() ServiceMeshStatusDetailsResponseArrayOutput {
	return o.ApplyT(func(v ServiceMeshControlPlaneManagementResponse) []ServiceMeshStatusDetailsResponse { return v.Details }).(ServiceMeshStatusDetailsResponseArrayOutput)
}

// LifecycleState of control plane management.
func (o ServiceMeshControlPlaneManagementResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshControlPlaneManagementResponse) string { return v.State }).(pulumi.StringOutput)
}

// Status of data plane management. Only reported per-member.
type ServiceMeshDataPlaneManagementResponse struct {
	// Explanation of the status.
	Details []ServiceMeshStatusDetailsResponse `pulumi:"details"`
	// Lifecycle status of data plane management.
	State string `pulumi:"state"`
}

// Status of data plane management. Only reported per-member.
type ServiceMeshDataPlaneManagementResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshDataPlaneManagementResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshDataPlaneManagementResponse)(nil)).Elem()
}

func (o ServiceMeshDataPlaneManagementResponseOutput) ToServiceMeshDataPlaneManagementResponseOutput() ServiceMeshDataPlaneManagementResponseOutput {
	return o
}

func (o ServiceMeshDataPlaneManagementResponseOutput) ToServiceMeshDataPlaneManagementResponseOutputWithContext(ctx context.Context) ServiceMeshDataPlaneManagementResponseOutput {
	return o
}

// Explanation of the status.
func (o ServiceMeshDataPlaneManagementResponseOutput) Details() ServiceMeshStatusDetailsResponseArrayOutput {
	return o.ApplyT(func(v ServiceMeshDataPlaneManagementResponse) []ServiceMeshStatusDetailsResponse { return v.Details }).(ServiceMeshStatusDetailsResponseArrayOutput)
}

// Lifecycle status of data plane management.
func (o ServiceMeshDataPlaneManagementResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshDataPlaneManagementResponse) string { return v.State }).(pulumi.StringOutput)
}

// **Service Mesh**: Spec for a single Membership for the servicemesh feature
type ServiceMeshMembershipSpec struct {
	// Deprecated: use `management` instead Enables automatic control plane management.
	//
	// Deprecated: Deprecated: use `management` instead Enables automatic control plane management.
	ControlPlane *ServiceMeshMembershipSpecControlPlane `pulumi:"controlPlane"`
	// Enables automatic Service Mesh management.
	Management *ServiceMeshMembershipSpecManagement `pulumi:"management"`
}

// ServiceMeshMembershipSpecInput is an input type that accepts ServiceMeshMembershipSpecArgs and ServiceMeshMembershipSpecOutput values.
// You can construct a concrete instance of `ServiceMeshMembershipSpecInput` via:
//
//	ServiceMeshMembershipSpecArgs{...}
type ServiceMeshMembershipSpecInput interface {
	pulumi.Input

	ToServiceMeshMembershipSpecOutput() ServiceMeshMembershipSpecOutput
	ToServiceMeshMembershipSpecOutputWithContext(context.Context) ServiceMeshMembershipSpecOutput
}

// **Service Mesh**: Spec for a single Membership for the servicemesh feature
type ServiceMeshMembershipSpecArgs struct {
	// Deprecated: use `management` instead Enables automatic control plane management.
	//
	// Deprecated: Deprecated: use `management` instead Enables automatic control plane management.
	ControlPlane ServiceMeshMembershipSpecControlPlanePtrInput `pulumi:"controlPlane"`
	// Enables automatic Service Mesh management.
	Management ServiceMeshMembershipSpecManagementPtrInput `pulumi:"management"`
}

func (ServiceMeshMembershipSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshMembershipSpec)(nil)).Elem()
}

func (i ServiceMeshMembershipSpecArgs) ToServiceMeshMembershipSpecOutput() ServiceMeshMembershipSpecOutput {
	return i.ToServiceMeshMembershipSpecOutputWithContext(context.Background())
}

func (i ServiceMeshMembershipSpecArgs) ToServiceMeshMembershipSpecOutputWithContext(ctx context.Context) ServiceMeshMembershipSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshMembershipSpecOutput)
}

func (i ServiceMeshMembershipSpecArgs) ToServiceMeshMembershipSpecPtrOutput() ServiceMeshMembershipSpecPtrOutput {
	return i.ToServiceMeshMembershipSpecPtrOutputWithContext(context.Background())
}

func (i ServiceMeshMembershipSpecArgs) ToServiceMeshMembershipSpecPtrOutputWithContext(ctx context.Context) ServiceMeshMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshMembershipSpecOutput).ToServiceMeshMembershipSpecPtrOutputWithContext(ctx)
}

// ServiceMeshMembershipSpecPtrInput is an input type that accepts ServiceMeshMembershipSpecArgs, ServiceMeshMembershipSpecPtr and ServiceMeshMembershipSpecPtrOutput values.
// You can construct a concrete instance of `ServiceMeshMembershipSpecPtrInput` via:
//
//	        ServiceMeshMembershipSpecArgs{...}
//
//	or:
//
//	        nil
type ServiceMeshMembershipSpecPtrInput interface {
	pulumi.Input

	ToServiceMeshMembershipSpecPtrOutput() ServiceMeshMembershipSpecPtrOutput
	ToServiceMeshMembershipSpecPtrOutputWithContext(context.Context) ServiceMeshMembershipSpecPtrOutput
}

type serviceMeshMembershipSpecPtrType ServiceMeshMembershipSpecArgs

func ServiceMeshMembershipSpecPtr(v *ServiceMeshMembershipSpecArgs) ServiceMeshMembershipSpecPtrInput {
	return (*serviceMeshMembershipSpecPtrType)(v)
}

func (*serviceMeshMembershipSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshMembershipSpec)(nil)).Elem()
}

func (i *serviceMeshMembershipSpecPtrType) ToServiceMeshMembershipSpecPtrOutput() ServiceMeshMembershipSpecPtrOutput {
	return i.ToServiceMeshMembershipSpecPtrOutputWithContext(context.Background())
}

func (i *serviceMeshMembershipSpecPtrType) ToServiceMeshMembershipSpecPtrOutputWithContext(ctx context.Context) ServiceMeshMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshMembershipSpecPtrOutput)
}

// **Service Mesh**: Spec for a single Membership for the servicemesh feature
type ServiceMeshMembershipSpecOutput struct{ *pulumi.OutputState }

func (ServiceMeshMembershipSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshMembershipSpec)(nil)).Elem()
}

func (o ServiceMeshMembershipSpecOutput) ToServiceMeshMembershipSpecOutput() ServiceMeshMembershipSpecOutput {
	return o
}

func (o ServiceMeshMembershipSpecOutput) ToServiceMeshMembershipSpecOutputWithContext(ctx context.Context) ServiceMeshMembershipSpecOutput {
	return o
}

func (o ServiceMeshMembershipSpecOutput) ToServiceMeshMembershipSpecPtrOutput() ServiceMeshMembershipSpecPtrOutput {
	return o.ToServiceMeshMembershipSpecPtrOutputWithContext(context.Background())
}

func (o ServiceMeshMembershipSpecOutput) ToServiceMeshMembershipSpecPtrOutputWithContext(ctx context.Context) ServiceMeshMembershipSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceMeshMembershipSpec) *ServiceMeshMembershipSpec {
		return &v
	}).(ServiceMeshMembershipSpecPtrOutput)
}

// Deprecated: use `management` instead Enables automatic control plane management.
//
// Deprecated: Deprecated: use `management` instead Enables automatic control plane management.
func (o ServiceMeshMembershipSpecOutput) ControlPlane() ServiceMeshMembershipSpecControlPlanePtrOutput {
	return o.ApplyT(func(v ServiceMeshMembershipSpec) *ServiceMeshMembershipSpecControlPlane { return v.ControlPlane }).(ServiceMeshMembershipSpecControlPlanePtrOutput)
}

// Enables automatic Service Mesh management.
func (o ServiceMeshMembershipSpecOutput) Management() ServiceMeshMembershipSpecManagementPtrOutput {
	return o.ApplyT(func(v ServiceMeshMembershipSpec) *ServiceMeshMembershipSpecManagement { return v.Management }).(ServiceMeshMembershipSpecManagementPtrOutput)
}

type ServiceMeshMembershipSpecPtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshMembershipSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshMembershipSpec)(nil)).Elem()
}

func (o ServiceMeshMembershipSpecPtrOutput) ToServiceMeshMembershipSpecPtrOutput() ServiceMeshMembershipSpecPtrOutput {
	return o
}

func (o ServiceMeshMembershipSpecPtrOutput) ToServiceMeshMembershipSpecPtrOutputWithContext(ctx context.Context) ServiceMeshMembershipSpecPtrOutput {
	return o
}

func (o ServiceMeshMembershipSpecPtrOutput) Elem() ServiceMeshMembershipSpecOutput {
	return o.ApplyT(func(v *ServiceMeshMembershipSpec) ServiceMeshMembershipSpec {
		if v != nil {
			return *v
		}
		var ret ServiceMeshMembershipSpec
		return ret
	}).(ServiceMeshMembershipSpecOutput)
}

// Deprecated: use `management` instead Enables automatic control plane management.
//
// Deprecated: Deprecated: use `management` instead Enables automatic control plane management.
func (o ServiceMeshMembershipSpecPtrOutput) ControlPlane() ServiceMeshMembershipSpecControlPlanePtrOutput {
	return o.ApplyT(func(v *ServiceMeshMembershipSpec) *ServiceMeshMembershipSpecControlPlane {
		if v == nil {
			return nil
		}
		return v.ControlPlane
	}).(ServiceMeshMembershipSpecControlPlanePtrOutput)
}

// Enables automatic Service Mesh management.
func (o ServiceMeshMembershipSpecPtrOutput) Management() ServiceMeshMembershipSpecManagementPtrOutput {
	return o.ApplyT(func(v *ServiceMeshMembershipSpec) *ServiceMeshMembershipSpecManagement {
		if v == nil {
			return nil
		}
		return v.Management
	}).(ServiceMeshMembershipSpecManagementPtrOutput)
}

// **Service Mesh**: Spec for a single Membership for the servicemesh feature
type ServiceMeshMembershipSpecResponse struct {
	// Deprecated: use `management` instead Enables automatic control plane management.
	//
	// Deprecated: Deprecated: use `management` instead Enables automatic control plane management.
	ControlPlane string `pulumi:"controlPlane"`
	// Enables automatic Service Mesh management.
	Management string `pulumi:"management"`
}

// **Service Mesh**: Spec for a single Membership for the servicemesh feature
type ServiceMeshMembershipSpecResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshMembershipSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshMembershipSpecResponse)(nil)).Elem()
}

func (o ServiceMeshMembershipSpecResponseOutput) ToServiceMeshMembershipSpecResponseOutput() ServiceMeshMembershipSpecResponseOutput {
	return o
}

func (o ServiceMeshMembershipSpecResponseOutput) ToServiceMeshMembershipSpecResponseOutputWithContext(ctx context.Context) ServiceMeshMembershipSpecResponseOutput {
	return o
}

// Deprecated: use `management` instead Enables automatic control plane management.
//
// Deprecated: Deprecated: use `management` instead Enables automatic control plane management.
func (o ServiceMeshMembershipSpecResponseOutput) ControlPlane() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshMembershipSpecResponse) string { return v.ControlPlane }).(pulumi.StringOutput)
}

// Enables automatic Service Mesh management.
func (o ServiceMeshMembershipSpecResponseOutput) Management() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshMembershipSpecResponse) string { return v.Management }).(pulumi.StringOutput)
}

// **Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller.
type ServiceMeshMembershipStateResponse struct {
	// Status of control plane management
	ControlPlaneManagement ServiceMeshControlPlaneManagementResponse `pulumi:"controlPlaneManagement"`
	// Status of data plane management.
	DataPlaneManagement ServiceMeshDataPlaneManagementResponse `pulumi:"dataPlaneManagement"`
}

// **Service Mesh**: State for a single Membership, as analyzed by the Service Mesh Hub Controller.
type ServiceMeshMembershipStateResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshMembershipStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshMembershipStateResponse)(nil)).Elem()
}

func (o ServiceMeshMembershipStateResponseOutput) ToServiceMeshMembershipStateResponseOutput() ServiceMeshMembershipStateResponseOutput {
	return o
}

func (o ServiceMeshMembershipStateResponseOutput) ToServiceMeshMembershipStateResponseOutputWithContext(ctx context.Context) ServiceMeshMembershipStateResponseOutput {
	return o
}

// Status of control plane management
func (o ServiceMeshMembershipStateResponseOutput) ControlPlaneManagement() ServiceMeshControlPlaneManagementResponseOutput {
	return o.ApplyT(func(v ServiceMeshMembershipStateResponse) ServiceMeshControlPlaneManagementResponse {
		return v.ControlPlaneManagement
	}).(ServiceMeshControlPlaneManagementResponseOutput)
}

// Status of data plane management.
func (o ServiceMeshMembershipStateResponseOutput) DataPlaneManagement() ServiceMeshDataPlaneManagementResponseOutput {
	return o.ApplyT(func(v ServiceMeshMembershipStateResponse) ServiceMeshDataPlaneManagementResponse {
		return v.DataPlaneManagement
	}).(ServiceMeshDataPlaneManagementResponseOutput)
}

// Structured and human-readable details for a status.
type ServiceMeshStatusDetailsResponse struct {
	// A machine-readable code that further describes a broad status.
	Code string `pulumi:"code"`
	// Human-readable explanation of code.
	Details string `pulumi:"details"`
}

// Structured and human-readable details for a status.
type ServiceMeshStatusDetailsResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshStatusDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshStatusDetailsResponse)(nil)).Elem()
}

func (o ServiceMeshStatusDetailsResponseOutput) ToServiceMeshStatusDetailsResponseOutput() ServiceMeshStatusDetailsResponseOutput {
	return o
}

func (o ServiceMeshStatusDetailsResponseOutput) ToServiceMeshStatusDetailsResponseOutputWithContext(ctx context.Context) ServiceMeshStatusDetailsResponseOutput {
	return o
}

// A machine-readable code that further describes a broad status.
func (o ServiceMeshStatusDetailsResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshStatusDetailsResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Human-readable explanation of code.
func (o ServiceMeshStatusDetailsResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshStatusDetailsResponse) string { return v.Details }).(pulumi.StringOutput)
}

type ServiceMeshStatusDetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceMeshStatusDetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceMeshStatusDetailsResponse)(nil)).Elem()
}

func (o ServiceMeshStatusDetailsResponseArrayOutput) ToServiceMeshStatusDetailsResponseArrayOutput() ServiceMeshStatusDetailsResponseArrayOutput {
	return o
}

func (o ServiceMeshStatusDetailsResponseArrayOutput) ToServiceMeshStatusDetailsResponseArrayOutputWithContext(ctx context.Context) ServiceMeshStatusDetailsResponseArrayOutput {
	return o
}

func (o ServiceMeshStatusDetailsResponseArrayOutput) Index(i pulumi.IntInput) ServiceMeshStatusDetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceMeshStatusDetailsResponse {
		return vs[0].([]ServiceMeshStatusDetailsResponse)[vs[1].(int)]
	}).(ServiceMeshStatusDetailsResponseOutput)
}

// Status specifies state for the subcomponent.
type StatusResponse struct {
	// Code specifies AppDevExperienceFeature's subcomponent ready state.
	Code string `pulumi:"code"`
	// Description is populated if Code is Failed, explaining why it has failed.
	Description string `pulumi:"description"`
}

// Status specifies state for the subcomponent.
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// Code specifies AppDevExperienceFeature's subcomponent ready state.
func (o StatusResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Description is populated if Code is Failed, explaining why it has failed.
func (o StatusResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Description }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppDevExperienceFeatureSpecInput)(nil)).Elem(), AppDevExperienceFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppDevExperienceFeatureSpecPtrInput)(nil)).Elem(), AppDevExperienceFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceClusterInput)(nil)).Elem(), ApplianceClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplianceClusterPtrInput)(nil)).Elem(), ApplianceClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorityInput)(nil)).Elem(), AuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorityPtrInput)(nil)).Elem(), AuthorityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BinaryAuthorizationConfigInput)(nil)).Elem(), BinaryAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BinaryAuthorizationConfigPtrInput)(nil)).Elem(), BinaryAuthorizationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingTypeInput)(nil)).Elem(), BindingTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingTypeArrayInput)(nil)).Elem(), BindingTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeFleetSpecInput)(nil)).Elem(), ClusterUpgradeFleetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeFleetSpecPtrInput)(nil)).Elem(), ClusterUpgradeFleetSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeGKEUpgradeInput)(nil)).Elem(), ClusterUpgradeGKEUpgradeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeGKEUpgradeOverrideInput)(nil)).Elem(), ClusterUpgradeGKEUpgradeOverrideArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradeGKEUpgradeOverrideArrayInput)(nil)).Elem(), ClusterUpgradeGKEUpgradeOverrideArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradePostConditionsInput)(nil)).Elem(), ClusterUpgradePostConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterUpgradePostConditionsPtrInput)(nil)).Elem(), ClusterUpgradePostConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommonFeatureSpecInput)(nil)).Elem(), CommonFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommonFeatureSpecPtrInput)(nil)).Elem(), CommonFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommonFleetDefaultMemberConfigSpecInput)(nil)).Elem(), CommonFleetDefaultMemberConfigSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommonFleetDefaultMemberConfigSpecPtrInput)(nil)).Elem(), CommonFleetDefaultMemberConfigSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementConfigSyncInput)(nil)).Elem(), ConfigManagementConfigSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementConfigSyncPtrInput)(nil)).Elem(), ConfigManagementConfigSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementGitConfigInput)(nil)).Elem(), ConfigManagementGitConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementGitConfigPtrInput)(nil)).Elem(), ConfigManagementGitConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementHierarchyControllerConfigInput)(nil)).Elem(), ConfigManagementHierarchyControllerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementHierarchyControllerConfigPtrInput)(nil)).Elem(), ConfigManagementHierarchyControllerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementMembershipSpecInput)(nil)).Elem(), ConfigManagementMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementMembershipSpecPtrInput)(nil)).Elem(), ConfigManagementMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementOciConfigInput)(nil)).Elem(), ConfigManagementOciConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementOciConfigPtrInput)(nil)).Elem(), ConfigManagementOciConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementPolicyControllerInput)(nil)).Elem(), ConfigManagementPolicyControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementPolicyControllerPtrInput)(nil)).Elem(), ConfigManagementPolicyControllerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementPolicyControllerMonitoringInput)(nil)).Elem(), ConfigManagementPolicyControllerMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigManagementPolicyControllerMonitoringPtrInput)(nil)).Elem(), ConfigManagementPolicyControllerMonitoringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultClusterConfigInput)(nil)).Elem(), DefaultClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DefaultClusterConfigPtrInput)(nil)).Elem(), DefaultClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeClusterInput)(nil)).Elem(), EdgeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeClusterPtrInput)(nil)).Elem(), EdgeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityFeatureSpecInput)(nil)).Elem(), FleetObservabilityFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityFeatureSpecPtrInput)(nil)).Elem(), FleetObservabilityFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityLoggingConfigInput)(nil)).Elem(), FleetObservabilityLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityLoggingConfigPtrInput)(nil)).Elem(), FleetObservabilityLoggingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityMembershipSpecInput)(nil)).Elem(), FleetObservabilityMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityMembershipSpecPtrInput)(nil)).Elem(), FleetObservabilityMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityRoutingConfigInput)(nil)).Elem(), FleetObservabilityRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetObservabilityRoutingConfigPtrInput)(nil)).Elem(), FleetObservabilityRoutingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterInput)(nil)).Elem(), GkeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GkeClusterPtrInput)(nil)).Elem(), GkeClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceAuthMethodInput)(nil)).Elem(), IdentityServiceAuthMethodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceAuthMethodArrayInput)(nil)).Elem(), IdentityServiceAuthMethodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceAzureADConfigInput)(nil)).Elem(), IdentityServiceAzureADConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceAzureADConfigPtrInput)(nil)).Elem(), IdentityServiceAzureADConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceGoogleConfigInput)(nil)).Elem(), IdentityServiceGoogleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceGoogleConfigPtrInput)(nil)).Elem(), IdentityServiceGoogleConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceMembershipSpecInput)(nil)).Elem(), IdentityServiceMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceMembershipSpecPtrInput)(nil)).Elem(), IdentityServiceMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceOidcConfigInput)(nil)).Elem(), IdentityServiceOidcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityServiceOidcConfigPtrInput)(nil)).Elem(), IdentityServiceOidcConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesResourceInput)(nil)).Elem(), KubernetesResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesResourcePtrInput)(nil)).Elem(), KubernetesResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipEndpointInput)(nil)).Elem(), MembershipEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipEndpointPtrInput)(nil)).Elem(), MembershipEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipFeatureSpecInput)(nil)).Elem(), MembershipFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipFeatureSpecPtrInput)(nil)).Elem(), MembershipFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringConfigInput)(nil)).Elem(), MonitoringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitoringConfigPtrInput)(nil)).Elem(), MonitoringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiCloudClusterInput)(nil)).Elem(), MultiCloudClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiCloudClusterPtrInput)(nil)).Elem(), MultiCloudClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterIngressFeatureSpecInput)(nil)).Elem(), MultiClusterIngressFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterIngressFeatureSpecPtrInput)(nil)).Elem(), MultiClusterIngressFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnPremClusterInput)(nil)).Elem(), OnPremClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnPremClusterPtrInput)(nil)).Elem(), OnPremClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginInput)(nil)).Elem(), OriginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OriginPtrInput)(nil)).Elem(), OriginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBindingInput)(nil)).Elem(), PolicyBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBindingArrayInput)(nil)).Elem(), PolicyBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerBundleInstallSpecInput)(nil)).Elem(), PolicyControllerBundleInstallSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerBundleInstallSpecPtrInput)(nil)).Elem(), PolicyControllerBundleInstallSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerHubConfigInput)(nil)).Elem(), PolicyControllerHubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerHubConfigPtrInput)(nil)).Elem(), PolicyControllerHubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerMembershipSpecInput)(nil)).Elem(), PolicyControllerMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerMembershipSpecPtrInput)(nil)).Elem(), PolicyControllerMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerMonitoringConfigInput)(nil)).Elem(), PolicyControllerMonitoringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerMonitoringConfigPtrInput)(nil)).Elem(), PolicyControllerMonitoringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerPolicyContentSpecInput)(nil)).Elem(), PolicyControllerPolicyContentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerPolicyContentSpecPtrInput)(nil)).Elem(), PolicyControllerPolicyContentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerPolicyControllerDeploymentConfigInput)(nil)).Elem(), PolicyControllerPolicyControllerDeploymentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerPolicyControllerDeploymentConfigPtrInput)(nil)).Elem(), PolicyControllerPolicyControllerDeploymentConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerResourceListInput)(nil)).Elem(), PolicyControllerResourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerResourceListPtrInput)(nil)).Elem(), PolicyControllerResourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerResourceRequirementsInput)(nil)).Elem(), PolicyControllerResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerResourceRequirementsPtrInput)(nil)).Elem(), PolicyControllerResourceRequirementsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerTemplateLibraryConfigInput)(nil)).Elem(), PolicyControllerTemplateLibraryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerTemplateLibraryConfigPtrInput)(nil)).Elem(), PolicyControllerTemplateLibraryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerTolerationInput)(nil)).Elem(), PolicyControllerTolerationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyControllerTolerationArrayInput)(nil)).Elem(), PolicyControllerTolerationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceOptionsInput)(nil)).Elem(), ResourceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceOptionsPtrInput)(nil)).Elem(), ResourceOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), RoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeFeatureSpecInput)(nil)).Elem(), ScopeFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeFeatureSpecPtrInput)(nil)).Elem(), ScopeFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPostureConfigInput)(nil)).Elem(), SecurityPostureConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPostureConfigPtrInput)(nil)).Elem(), SecurityPostureConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMeshMembershipSpecInput)(nil)).Elem(), ServiceMeshMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMeshMembershipSpecPtrInput)(nil)).Elem(), ServiceMeshMembershipSpecArgs{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureSpecOutput{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(ApplianceClusterOutput{})
	pulumi.RegisterOutputType(ApplianceClusterPtrOutput{})
	pulumi.RegisterOutputType(ApplianceClusterResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuthorityOutput{})
	pulumi.RegisterOutputType(AuthorityPtrOutput{})
	pulumi.RegisterOutputType(AuthorityResponseOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationConfigOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationConfigPtrOutput{})
	pulumi.RegisterOutputType(BinaryAuthorizationConfigResponseOutput{})
	pulumi.RegisterOutputType(BindingTypeOutput{})
	pulumi.RegisterOutputType(BindingTypeArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeFleetSpecOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeFleetSpecPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeFleetSpecResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeFleetStateResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeFeatureConditionResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeFeatureConditionResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeOverrideOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeOverrideArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeOverrideResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeOverrideResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeStateResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeGKEUpgradeStateResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeIgnoredMembershipResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeMembershipGKEUpgradeStateResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeMembershipGKEUpgradeStateResponseArrayOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeMembershipStateResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePostConditionsOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePostConditionsPtrOutput{})
	pulumi.RegisterOutputType(ClusterUpgradePostConditionsResponseOutput{})
	pulumi.RegisterOutputType(ClusterUpgradeUpgradeStatusResponseOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(CommonFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(CommonFleetDefaultMemberConfigSpecOutput{})
	pulumi.RegisterOutputType(CommonFleetDefaultMemberConfigSpecPtrOutput{})
	pulumi.RegisterOutputType(CommonFleetDefaultMemberConfigSpecResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncPtrOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncDeploymentStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncErrorResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementConfigSyncVersionResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementErrorResourceResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementErrorResourceResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigManagementGatekeeperDeploymentStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementGitConfigOutput{})
	pulumi.RegisterOutputType(ConfigManagementGitConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigManagementGitConfigResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementGroupVersionKindResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementHierarchyControllerConfigOutput{})
	pulumi.RegisterOutputType(ConfigManagementHierarchyControllerConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigManagementHierarchyControllerConfigResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementHierarchyControllerDeploymentStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementHierarchyControllerStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementHierarchyControllerVersionResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementInstallErrorResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementInstallErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigManagementMembershipSpecOutput{})
	pulumi.RegisterOutputType(ConfigManagementMembershipSpecPtrOutput{})
	pulumi.RegisterOutputType(ConfigManagementMembershipSpecResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementMembershipStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementOciConfigOutput{})
	pulumi.RegisterOutputType(ConfigManagementOciConfigPtrOutput{})
	pulumi.RegisterOutputType(ConfigManagementOciConfigResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementOperatorStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerPtrOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerMigrationResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerMonitoringOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerMonitoringPtrOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerMonitoringResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerStateResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementPolicyControllerVersionResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementSyncErrorResponseOutput{})
	pulumi.RegisterOutputType(ConfigManagementSyncErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ConfigManagementSyncStateResponseOutput{})
	pulumi.RegisterOutputType(DefaultClusterConfigOutput{})
	pulumi.RegisterOutputType(DefaultClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(DefaultClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(EdgeClusterOutput{})
	pulumi.RegisterOutputType(EdgeClusterPtrOutput{})
	pulumi.RegisterOutputType(EdgeClusterResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FeatureResourceStateResponseOutput{})
	pulumi.RegisterOutputType(FeatureStateResponseOutput{})
	pulumi.RegisterOutputType(FleetLifecycleStateResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFeatureErrorResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFeatureErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFeatureSpecOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFleetObservabilityBaseFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFleetObservabilityLoggingStateResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityFleetObservabilityMonitoringStateResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityLoggingConfigOutput{})
	pulumi.RegisterOutputType(FleetObservabilityLoggingConfigPtrOutput{})
	pulumi.RegisterOutputType(FleetObservabilityLoggingConfigResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityMembershipSpecOutput{})
	pulumi.RegisterOutputType(FleetObservabilityMembershipSpecPtrOutput{})
	pulumi.RegisterOutputType(FleetObservabilityMembershipSpecResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityMembershipStateResponseOutput{})
	pulumi.RegisterOutputType(FleetObservabilityRoutingConfigOutput{})
	pulumi.RegisterOutputType(FleetObservabilityRoutingConfigPtrOutput{})
	pulumi.RegisterOutputType(FleetObservabilityRoutingConfigResponseOutput{})
	pulumi.RegisterOutputType(GkeClusterOutput{})
	pulumi.RegisterOutputType(GkeClusterPtrOutput{})
	pulumi.RegisterOutputType(GkeClusterResponseOutput{})
	pulumi.RegisterOutputType(IdentityServiceAuthMethodOutput{})
	pulumi.RegisterOutputType(IdentityServiceAuthMethodArrayOutput{})
	pulumi.RegisterOutputType(IdentityServiceAuthMethodResponseOutput{})
	pulumi.RegisterOutputType(IdentityServiceAuthMethodResponseArrayOutput{})
	pulumi.RegisterOutputType(IdentityServiceAzureADConfigOutput{})
	pulumi.RegisterOutputType(IdentityServiceAzureADConfigPtrOutput{})
	pulumi.RegisterOutputType(IdentityServiceAzureADConfigResponseOutput{})
	pulumi.RegisterOutputType(IdentityServiceGoogleConfigOutput{})
	pulumi.RegisterOutputType(IdentityServiceGoogleConfigPtrOutput{})
	pulumi.RegisterOutputType(IdentityServiceGoogleConfigResponseOutput{})
	pulumi.RegisterOutputType(IdentityServiceMembershipSpecOutput{})
	pulumi.RegisterOutputType(IdentityServiceMembershipSpecPtrOutput{})
	pulumi.RegisterOutputType(IdentityServiceMembershipSpecResponseOutput{})
	pulumi.RegisterOutputType(IdentityServiceMembershipStateResponseOutput{})
	pulumi.RegisterOutputType(IdentityServiceOidcConfigOutput{})
	pulumi.RegisterOutputType(IdentityServiceOidcConfigPtrOutput{})
	pulumi.RegisterOutputType(IdentityServiceOidcConfigResponseOutput{})
	pulumi.RegisterOutputType(KubernetesMetadataResponseOutput{})
	pulumi.RegisterOutputType(KubernetesResourceOutput{})
	pulumi.RegisterOutputType(KubernetesResourcePtrOutput{})
	pulumi.RegisterOutputType(KubernetesResourceResponseOutput{})
	pulumi.RegisterOutputType(MembershipBindingLifecycleStateResponseOutput{})
	pulumi.RegisterOutputType(MembershipEndpointOutput{})
	pulumi.RegisterOutputType(MembershipEndpointPtrOutput{})
	pulumi.RegisterOutputType(MembershipEndpointResponseOutput{})
	pulumi.RegisterOutputType(MembershipFeatureSpecOutput{})
	pulumi.RegisterOutputType(MembershipFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(MembershipFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(MembershipFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(MembershipStateResponseOutput{})
	pulumi.RegisterOutputType(MonitoringConfigOutput{})
	pulumi.RegisterOutputType(MonitoringConfigPtrOutput{})
	pulumi.RegisterOutputType(MonitoringConfigResponseOutput{})
	pulumi.RegisterOutputType(MultiCloudClusterOutput{})
	pulumi.RegisterOutputType(MultiCloudClusterPtrOutput{})
	pulumi.RegisterOutputType(MultiCloudClusterResponseOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(NamespaceLifecycleStateResponseOutput{})
	pulumi.RegisterOutputType(OnPremClusterOutput{})
	pulumi.RegisterOutputType(OnPremClusterPtrOutput{})
	pulumi.RegisterOutputType(OnPremClusterResponseOutput{})
	pulumi.RegisterOutputType(OriginOutput{})
	pulumi.RegisterOutputType(OriginPtrOutput{})
	pulumi.RegisterOutputType(OriginResponseOutput{})
	pulumi.RegisterOutputType(PolicyBindingOutput{})
	pulumi.RegisterOutputType(PolicyBindingArrayOutput{})
	pulumi.RegisterOutputType(PolicyBindingResponseOutput{})
	pulumi.RegisterOutputType(PolicyBindingResponseArrayOutput{})
	pulumi.RegisterOutputType(PolicyControllerBundleInstallSpecOutput{})
	pulumi.RegisterOutputType(PolicyControllerBundleInstallSpecPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerBundleInstallSpecResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerHubConfigOutput{})
	pulumi.RegisterOutputType(PolicyControllerHubConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerHubConfigResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerMembershipSpecOutput{})
	pulumi.RegisterOutputType(PolicyControllerMembershipSpecPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerMembershipSpecResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerMembershipStateResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerMonitoringConfigOutput{})
	pulumi.RegisterOutputType(PolicyControllerMonitoringConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerMonitoringConfigResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerOnClusterStateResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerPolicyContentSpecOutput{})
	pulumi.RegisterOutputType(PolicyControllerPolicyContentSpecPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerPolicyContentSpecResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerPolicyContentStateResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerPolicyControllerDeploymentConfigOutput{})
	pulumi.RegisterOutputType(PolicyControllerPolicyControllerDeploymentConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerPolicyControllerDeploymentConfigResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerResourceListOutput{})
	pulumi.RegisterOutputType(PolicyControllerResourceListPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerResourceListResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerResourceRequirementsOutput{})
	pulumi.RegisterOutputType(PolicyControllerResourceRequirementsPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerResourceRequirementsResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerTemplateLibraryConfigOutput{})
	pulumi.RegisterOutputType(PolicyControllerTemplateLibraryConfigPtrOutput{})
	pulumi.RegisterOutputType(PolicyControllerTemplateLibraryConfigResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerTolerationOutput{})
	pulumi.RegisterOutputType(PolicyControllerTolerationArrayOutput{})
	pulumi.RegisterOutputType(PolicyControllerTolerationResponseOutput{})
	pulumi.RegisterOutputType(PolicyControllerTolerationResponseArrayOutput{})
	pulumi.RegisterOutputType(RBACRoleBindingLifecycleStateResponseOutput{})
	pulumi.RegisterOutputType(ResourceManifestResponseOutput{})
	pulumi.RegisterOutputType(ResourceManifestResponseArrayOutput{})
	pulumi.RegisterOutputType(ResourceOptionsOutput{})
	pulumi.RegisterOutputType(ResourceOptionsPtrOutput{})
	pulumi.RegisterOutputType(ResourceOptionsResponseOutput{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleResponseOutput{})
	pulumi.RegisterOutputType(ScopeFeatureSpecOutput{})
	pulumi.RegisterOutputType(ScopeFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(ScopeFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(ScopeFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(ScopeLifecycleStateResponseOutput{})
	pulumi.RegisterOutputType(SecurityPostureConfigOutput{})
	pulumi.RegisterOutputType(SecurityPostureConfigPtrOutput{})
	pulumi.RegisterOutputType(SecurityPostureConfigResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshControlPlaneManagementResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshDataPlaneManagementResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshMembershipSpecOutput{})
	pulumi.RegisterOutputType(ServiceMeshMembershipSpecPtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshMembershipSpecResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshMembershipStateResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshStatusDetailsResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshStatusDetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
}
