// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a MembershipBinding.
// Auto-naming is currently not supported for this resource.
type Binding struct {
	pulumi.CustomResourceState

	// When the membership binding was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// When the membership binding was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Whether the membershipbinding is Fleet-wide; true means that this Membership should be bound to all Namespaces in this entire Fleet.
	Fleet    pulumi.BoolOutput   `pulumi:"fleet"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Required. The ID to use for the MembershipBinding.
	MembershipBindingId pulumi.StringOutput `pulumi:"membershipBindingId"`
	MembershipId        pulumi.StringOutput `pulumi:"membershipId"`
	// The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// A Workspace resource name in the format `projects/*/locations/*/scopes/*`.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// State of the membership binding resource.
	State MembershipBindingLifecycleStateResponseOutput `pulumi:"state"`
	// Google-generated UUID for this resource. This is unique across all membershipbinding resources. If a membershipbinding resource is deleted and another resource with the same name is created, it gets a different uid.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// When the membership binding was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewBinding registers a new resource with the given unique name, arguments, and options.
func NewBinding(ctx *pulumi.Context,
	name string, args *BindingArgs, opts ...pulumi.ResourceOption) (*Binding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MembershipBindingId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipBindingId'")
	}
	if args.MembershipId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"membershipBindingId",
		"membershipId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource Binding
	err := ctx.RegisterResource("google-native:gkehub/v1:Binding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBinding gets an existing Binding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BindingState, opts ...pulumi.ResourceOption) (*Binding, error) {
	var resource Binding
	err := ctx.ReadResource("google-native:gkehub/v1:Binding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Binding resources.
type bindingState struct {
}

type BindingState struct {
}

func (BindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingState)(nil)).Elem()
}

type bindingArgs struct {
	// Whether the membershipbinding is Fleet-wide; true means that this Membership should be bound to all Namespaces in this entire Fleet.
	Fleet    *bool   `pulumi:"fleet"`
	Location *string `pulumi:"location"`
	// Required. The ID to use for the MembershipBinding.
	MembershipBindingId string `pulumi:"membershipBindingId"`
	MembershipId        string `pulumi:"membershipId"`
	// The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// A Workspace resource name in the format `projects/*/locations/*/scopes/*`.
	Scope *string `pulumi:"scope"`
}

// The set of arguments for constructing a Binding resource.
type BindingArgs struct {
	// Whether the membershipbinding is Fleet-wide; true means that this Membership should be bound to all Namespaces in this entire Fleet.
	Fleet    pulumi.BoolPtrInput
	Location pulumi.StringPtrInput
	// Required. The ID to use for the MembershipBinding.
	MembershipBindingId pulumi.StringInput
	MembershipId        pulumi.StringInput
	// The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// A Workspace resource name in the format `projects/*/locations/*/scopes/*`.
	Scope pulumi.StringPtrInput
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingArgs)(nil)).Elem()
}

type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(ctx context.Context) BindingOutput
}

func (*Binding) ElementType() reflect.Type {
	return reflect.TypeOf((**Binding)(nil)).Elem()
}

func (i *Binding) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i *Binding) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// When the membership binding was created.
func (o BindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// When the membership binding was deleted.
func (o BindingOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Whether the membershipbinding is Fleet-wide; true means that this Membership should be bound to all Namespaces in this entire Fleet.
func (o BindingOutput) Fleet() pulumi.BoolOutput {
	return o.ApplyT(func(v *Binding) pulumi.BoolOutput { return v.Fleet }).(pulumi.BoolOutput)
}

func (o BindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Required. The ID to use for the MembershipBinding.
func (o BindingOutput) MembershipBindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.MembershipBindingId }).(pulumi.StringOutput)
}

func (o BindingOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
func (o BindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A Workspace resource name in the format `projects/*/locations/*/scopes/*`.
func (o BindingOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// State of the membership binding resource.
func (o BindingOutput) State() MembershipBindingLifecycleStateResponseOutput {
	return o.ApplyT(func(v *Binding) MembershipBindingLifecycleStateResponseOutput { return v.State }).(MembershipBindingLifecycleStateResponseOutput)
}

// Google-generated UUID for this resource. This is unique across all membershipbinding resources. If a membershipbinding resource is deleted and another resource with the same name is created, it gets a different uid.
func (o BindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// When the membership binding was last updated.
func (o BindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Binding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), &Binding{})
	pulumi.RegisterOutputType(BindingOutput{})
}
