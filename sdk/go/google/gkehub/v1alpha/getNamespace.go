// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the details of a fleet namespace.
func LookupNamespace(ctx *pulumi.Context, args *LookupNamespaceArgs, opts ...pulumi.InvokeOption) (*LookupNamespaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNamespaceResult
	err := ctx.Invoke("google-native:gkehub/v1alpha:getNamespace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupNamespaceArgs struct {
	Location    string  `pulumi:"location"`
	NamespaceId string  `pulumi:"namespaceId"`
	Project     *string `pulumi:"project"`
	ScopeId     string  `pulumi:"scopeId"`
}

type LookupNamespaceResult struct {
	// When the namespace was created.
	CreateTime string `pulumi:"createTime"`
	// When the namespace was deleted.
	DeleteTime string `pulumi:"deleteTime"`
	// Optional. Labels for this Namespace.
	Labels map[string]string `pulumi:"labels"`
	// The resource name for the namespace `projects/{project}/locations/{location}/namespaces/{namespace}`
	Name string `pulumi:"name"`
	// Optional. Namespace-level cluster namespace labels. These labels are applied to the related namespace of the member clusters bound to the parent Scope. Scope-level labels (`namespace_labels` in the Fleet Scope resource) take precedence over Namespace-level labels if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels map[string]string `pulumi:"namespaceLabels"`
	// Scope associated with the namespace
	Scope string `pulumi:"scope"`
	// State of the namespace resource.
	State NamespaceLifecycleStateResponse `pulumi:"state"`
	// Google-generated UUID for this resource. This is unique across all namespace resources. If a namespace resource is deleted and another resource with the same name is created, it gets a different uid.
	Uid string `pulumi:"uid"`
	// When the namespace was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupNamespaceOutput(ctx *pulumi.Context, args LookupNamespaceOutputArgs, opts ...pulumi.InvokeOption) LookupNamespaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNamespaceResult, error) {
			args := v.(LookupNamespaceArgs)
			r, err := LookupNamespace(ctx, &args, opts...)
			var s LookupNamespaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNamespaceResultOutput)
}

type LookupNamespaceOutputArgs struct {
	Location    pulumi.StringInput    `pulumi:"location"`
	NamespaceId pulumi.StringInput    `pulumi:"namespaceId"`
	Project     pulumi.StringPtrInput `pulumi:"project"`
	ScopeId     pulumi.StringInput    `pulumi:"scopeId"`
}

func (LookupNamespaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceArgs)(nil)).Elem()
}

type LookupNamespaceResultOutput struct{ *pulumi.OutputState }

func (LookupNamespaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNamespaceResult)(nil)).Elem()
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutput() LookupNamespaceResultOutput {
	return o
}

func (o LookupNamespaceResultOutput) ToLookupNamespaceResultOutputWithContext(ctx context.Context) LookupNamespaceResultOutput {
	return o
}

// When the namespace was created.
func (o LookupNamespaceResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// When the namespace was deleted.
func (o LookupNamespaceResultOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.DeleteTime }).(pulumi.StringOutput)
}

// Optional. Labels for this Namespace.
func (o LookupNamespaceResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNamespaceResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name for the namespace `projects/{project}/locations/{location}/namespaces/{namespace}`
func (o LookupNamespaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. Namespace-level cluster namespace labels. These labels are applied to the related namespace of the member clusters bound to the parent Scope. Scope-level labels (`namespace_labels` in the Fleet Scope resource) take precedence over Namespace-level labels if they share a key. Keys and values must be Kubernetes-conformant.
func (o LookupNamespaceResultOutput) NamespaceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNamespaceResult) map[string]string { return v.NamespaceLabels }).(pulumi.StringMapOutput)
}

// Scope associated with the namespace
func (o LookupNamespaceResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.Scope }).(pulumi.StringOutput)
}

// State of the namespace resource.
func (o LookupNamespaceResultOutput) State() NamespaceLifecycleStateResponseOutput {
	return o.ApplyT(func(v LookupNamespaceResult) NamespaceLifecycleStateResponse { return v.State }).(NamespaceLifecycleStateResponseOutput)
}

// Google-generated UUID for this resource. This is unique across all namespace resources. If a namespace resource is deleted and another resource with the same name is created, it gets a different uid.
func (o LookupNamespaceResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.Uid }).(pulumi.StringOutput)
}

// When the namespace was last updated.
func (o LookupNamespaceResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNamespaceResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNamespaceResultOutput{})
}
