// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// AuditConfigResponseInput is an input type that accepts AuditConfigResponseArgs and AuditConfigResponseOutput values.
// You can construct a concrete instance of `AuditConfigResponseInput` via:
//
//          AuditConfigResponseArgs{...}
type AuditConfigResponseInput interface {
	pulumi.Input

	ToAuditConfigResponseOutput() AuditConfigResponseOutput
	ToAuditConfigResponseOutputWithContext(context.Context) AuditConfigResponseOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigResponseArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringInput `pulumi:"service"`
}

func (AuditConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return i.ToAuditConfigResponseOutputWithContext(context.Background())
}

func (i AuditConfigResponseArgs) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseOutput)
}

// AuditConfigResponseArrayInput is an input type that accepts AuditConfigResponseArray and AuditConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditConfigResponseArrayInput` via:
//
//          AuditConfigResponseArray{ AuditConfigResponseArgs{...} }
type AuditConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput
	ToAuditConfigResponseArrayOutputWithContext(context.Context) AuditConfigResponseArrayOutput
}

type AuditConfigResponseArray []AuditConfigResponseInput

func (AuditConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return i.ToAuditConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditConfigResponseArray) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigResponseArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// AuditLogConfigResponseInput is an input type that accepts AuditLogConfigResponseArgs and AuditLogConfigResponseOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseInput` via:
//
//          AuditLogConfigResponseArgs{...}
type AuditLogConfigResponseInput interface {
	pulumi.Input

	ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput
	ToAuditLogConfigResponseOutputWithContext(context.Context) AuditLogConfigResponseOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringInput `pulumi:"logType"`
}

func (AuditLogConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return i.ToAuditLogConfigResponseOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArgs) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseOutput)
}

// AuditLogConfigResponseArrayInput is an input type that accepts AuditLogConfigResponseArray and AuditLogConfigResponseArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigResponseArrayInput` via:
//
//          AuditLogConfigResponseArray{ AuditLogConfigResponseArgs{...} }
type AuditLogConfigResponseArrayInput interface {
	pulumi.Input

	ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput
	ToAuditLogConfigResponseArrayOutputWithContext(context.Context) AuditLogConfigResponseArrayOutput
}

type AuditLogConfigResponseArray []AuditLogConfigResponseInput

func (AuditLogConfigResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return i.ToAuditLogConfigResponseArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigResponseArray) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigResponseArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members` with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// BindingResponseInput is an input type that accepts BindingResponseArgs and BindingResponseOutput values.
// You can construct a concrete instance of `BindingResponseInput` via:
//
//          BindingResponseArgs{...}
type BindingResponseInput interface {
	pulumi.Input

	ToBindingResponseOutput() BindingResponseOutput
	ToBindingResponseOutputWithContext(context.Context) BindingResponseOutput
}

// Associates `members` with a `role`.
type BindingResponseArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponseInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringInput `pulumi:"role"`
}

func (BindingResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (i BindingResponseArgs) ToBindingResponseOutput() BindingResponseOutput {
	return i.ToBindingResponseOutputWithContext(context.Background())
}

func (i BindingResponseArgs) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseOutput)
}

// BindingResponseArrayInput is an input type that accepts BindingResponseArray and BindingResponseArrayOutput values.
// You can construct a concrete instance of `BindingResponseArrayInput` via:
//
//          BindingResponseArray{ BindingResponseArgs{...} }
type BindingResponseArrayInput interface {
	pulumi.Input

	ToBindingResponseArrayOutput() BindingResponseArrayOutput
	ToBindingResponseArrayOutputWithContext(context.Context) BindingResponseArrayOutput
}

type BindingResponseArray []BindingResponseInput

func (BindingResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (i BindingResponseArray) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return i.ToBindingResponseArrayOutputWithContext(context.Background())
}

func (i BindingResponseArray) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingResponseArrayOutput)
}

// Associates `members` with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// **Cloud Audit Logging**: Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpec struct {
	// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
	AllowlistedServiceAccounts []string `pulumi:"allowlistedServiceAccounts"`
}

// CloudAuditLoggingFeatureSpecInput is an input type that accepts CloudAuditLoggingFeatureSpecArgs and CloudAuditLoggingFeatureSpecOutput values.
// You can construct a concrete instance of `CloudAuditLoggingFeatureSpecInput` via:
//
//          CloudAuditLoggingFeatureSpecArgs{...}
type CloudAuditLoggingFeatureSpecInput interface {
	pulumi.Input

	ToCloudAuditLoggingFeatureSpecOutput() CloudAuditLoggingFeatureSpecOutput
	ToCloudAuditLoggingFeatureSpecOutputWithContext(context.Context) CloudAuditLoggingFeatureSpecOutput
}

// **Cloud Audit Logging**: Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpecArgs struct {
	// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
	AllowlistedServiceAccounts pulumi.StringArrayInput `pulumi:"allowlistedServiceAccounts"`
}

func (CloudAuditLoggingFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecOutput() CloudAuditLoggingFeatureSpecOutput {
	return i.ToCloudAuditLoggingFeatureSpecOutputWithContext(context.Background())
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecOutput)
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return i.ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Background())
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecOutput).ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx)
}

// CloudAuditLoggingFeatureSpecPtrInput is an input type that accepts CloudAuditLoggingFeatureSpecArgs, CloudAuditLoggingFeatureSpecPtr and CloudAuditLoggingFeatureSpecPtrOutput values.
// You can construct a concrete instance of `CloudAuditLoggingFeatureSpecPtrInput` via:
//
//          CloudAuditLoggingFeatureSpecArgs{...}
//
//  or:
//
//          nil
type CloudAuditLoggingFeatureSpecPtrInput interface {
	pulumi.Input

	ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput
	ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Context) CloudAuditLoggingFeatureSpecPtrOutput
}

type cloudAuditLoggingFeatureSpecPtrType CloudAuditLoggingFeatureSpecArgs

func CloudAuditLoggingFeatureSpecPtr(v *CloudAuditLoggingFeatureSpecArgs) CloudAuditLoggingFeatureSpecPtrInput {
	return (*cloudAuditLoggingFeatureSpecPtrType)(v)
}

func (*cloudAuditLoggingFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (i *cloudAuditLoggingFeatureSpecPtrType) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return i.ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *cloudAuditLoggingFeatureSpecPtrType) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// **Cloud Audit Logging**: Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpecOutput struct{ *pulumi.OutputState }

func (CloudAuditLoggingFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecOutput() CloudAuditLoggingFeatureSpecOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Background())
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ApplyT(func(v CloudAuditLoggingFeatureSpec) *CloudAuditLoggingFeatureSpec {
		return &v
	}).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
func (o CloudAuditLoggingFeatureSpecOutput) AllowlistedServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudAuditLoggingFeatureSpec) []string { return v.AllowlistedServiceAccounts }).(pulumi.StringArrayOutput)
}

type CloudAuditLoggingFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (CloudAuditLoggingFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (o CloudAuditLoggingFeatureSpecPtrOutput) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecPtrOutput) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecPtrOutput) Elem() CloudAuditLoggingFeatureSpecOutput {
	return o.ApplyT(func(v *CloudAuditLoggingFeatureSpec) CloudAuditLoggingFeatureSpec { return *v }).(CloudAuditLoggingFeatureSpecOutput)
}

// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
func (o CloudAuditLoggingFeatureSpecPtrOutput) AllowlistedServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudAuditLoggingFeatureSpec) []string {
		if v == nil {
			return nil
		}
		return v.AllowlistedServiceAccounts
	}).(pulumi.StringArrayOutput)
}

// **Cloud Audit Logging**: Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpecResponse struct {
	// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
	AllowlistedServiceAccounts []string `pulumi:"allowlistedServiceAccounts"`
}

// CloudAuditLoggingFeatureSpecResponseInput is an input type that accepts CloudAuditLoggingFeatureSpecResponseArgs and CloudAuditLoggingFeatureSpecResponseOutput values.
// You can construct a concrete instance of `CloudAuditLoggingFeatureSpecResponseInput` via:
//
//          CloudAuditLoggingFeatureSpecResponseArgs{...}
type CloudAuditLoggingFeatureSpecResponseInput interface {
	pulumi.Input

	ToCloudAuditLoggingFeatureSpecResponseOutput() CloudAuditLoggingFeatureSpecResponseOutput
	ToCloudAuditLoggingFeatureSpecResponseOutputWithContext(context.Context) CloudAuditLoggingFeatureSpecResponseOutput
}

// **Cloud Audit Logging**: Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpecResponseArgs struct {
	// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
	AllowlistedServiceAccounts pulumi.StringArrayInput `pulumi:"allowlistedServiceAccounts"`
}

func (CloudAuditLoggingFeatureSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditLoggingFeatureSpecResponse)(nil)).Elem()
}

func (i CloudAuditLoggingFeatureSpecResponseArgs) ToCloudAuditLoggingFeatureSpecResponseOutput() CloudAuditLoggingFeatureSpecResponseOutput {
	return i.ToCloudAuditLoggingFeatureSpecResponseOutputWithContext(context.Background())
}

func (i CloudAuditLoggingFeatureSpecResponseArgs) ToCloudAuditLoggingFeatureSpecResponseOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecResponseOutput)
}

func (i CloudAuditLoggingFeatureSpecResponseArgs) ToCloudAuditLoggingFeatureSpecResponsePtrOutput() CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return i.ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (i CloudAuditLoggingFeatureSpecResponseArgs) ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecResponseOutput).ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(ctx)
}

// CloudAuditLoggingFeatureSpecResponsePtrInput is an input type that accepts CloudAuditLoggingFeatureSpecResponseArgs, CloudAuditLoggingFeatureSpecResponsePtr and CloudAuditLoggingFeatureSpecResponsePtrOutput values.
// You can construct a concrete instance of `CloudAuditLoggingFeatureSpecResponsePtrInput` via:
//
//          CloudAuditLoggingFeatureSpecResponseArgs{...}
//
//  or:
//
//          nil
type CloudAuditLoggingFeatureSpecResponsePtrInput interface {
	pulumi.Input

	ToCloudAuditLoggingFeatureSpecResponsePtrOutput() CloudAuditLoggingFeatureSpecResponsePtrOutput
	ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(context.Context) CloudAuditLoggingFeatureSpecResponsePtrOutput
}

type cloudAuditLoggingFeatureSpecResponsePtrType CloudAuditLoggingFeatureSpecResponseArgs

func CloudAuditLoggingFeatureSpecResponsePtr(v *CloudAuditLoggingFeatureSpecResponseArgs) CloudAuditLoggingFeatureSpecResponsePtrInput {
	return (*cloudAuditLoggingFeatureSpecResponsePtrType)(v)
}

func (*cloudAuditLoggingFeatureSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditLoggingFeatureSpecResponse)(nil)).Elem()
}

func (i *cloudAuditLoggingFeatureSpecResponsePtrType) ToCloudAuditLoggingFeatureSpecResponsePtrOutput() CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return i.ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (i *cloudAuditLoggingFeatureSpecResponsePtrType) ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecResponsePtrOutput)
}

// **Cloud Audit Logging**: Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (CloudAuditLoggingFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditLoggingFeatureSpecResponse)(nil)).Elem()
}

func (o CloudAuditLoggingFeatureSpecResponseOutput) ToCloudAuditLoggingFeatureSpecResponseOutput() CloudAuditLoggingFeatureSpecResponseOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecResponseOutput) ToCloudAuditLoggingFeatureSpecResponseOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecResponseOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecResponseOutput) ToCloudAuditLoggingFeatureSpecResponsePtrOutput() CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return o.ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (o CloudAuditLoggingFeatureSpecResponseOutput) ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return o.ApplyT(func(v CloudAuditLoggingFeatureSpecResponse) *CloudAuditLoggingFeatureSpecResponse {
		return &v
	}).(CloudAuditLoggingFeatureSpecResponsePtrOutput)
}

// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
func (o CloudAuditLoggingFeatureSpecResponseOutput) AllowlistedServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudAuditLoggingFeatureSpecResponse) []string { return v.AllowlistedServiceAccounts }).(pulumi.StringArrayOutput)
}

type CloudAuditLoggingFeatureSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (CloudAuditLoggingFeatureSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditLoggingFeatureSpecResponse)(nil)).Elem()
}

func (o CloudAuditLoggingFeatureSpecResponsePtrOutput) ToCloudAuditLoggingFeatureSpecResponsePtrOutput() CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecResponsePtrOutput) ToCloudAuditLoggingFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecResponsePtrOutput) Elem() CloudAuditLoggingFeatureSpecResponseOutput {
	return o.ApplyT(func(v *CloudAuditLoggingFeatureSpecResponse) CloudAuditLoggingFeatureSpecResponse { return *v }).(CloudAuditLoggingFeatureSpecResponseOutput)
}

// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
func (o CloudAuditLoggingFeatureSpecResponsePtrOutput) AllowlistedServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudAuditLoggingFeatureSpecResponse) []string {
		if v == nil {
			return nil
		}
		return v.AllowlistedServiceAccounts
	}).(pulumi.StringArrayOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpec struct {
	// Cloud Audit Logging-specific spec.
	Cloudauditlogging *CloudAuditLoggingFeatureSpec `pulumi:"cloudauditlogging"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress *MultiClusterIngressFeatureSpec `pulumi:"multiclusteringress"`
}

// CommonFeatureSpecInput is an input type that accepts CommonFeatureSpecArgs and CommonFeatureSpecOutput values.
// You can construct a concrete instance of `CommonFeatureSpecInput` via:
//
//          CommonFeatureSpecArgs{...}
type CommonFeatureSpecInput interface {
	pulumi.Input

	ToCommonFeatureSpecOutput() CommonFeatureSpecOutput
	ToCommonFeatureSpecOutputWithContext(context.Context) CommonFeatureSpecOutput
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecArgs struct {
	// Cloud Audit Logging-specific spec.
	Cloudauditlogging CloudAuditLoggingFeatureSpecPtrInput `pulumi:"cloudauditlogging"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecPtrInput `pulumi:"multiclusteringress"`
}

func (CommonFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return i.ToCommonFeatureSpecOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput)
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput).ToCommonFeatureSpecPtrOutputWithContext(ctx)
}

// CommonFeatureSpecPtrInput is an input type that accepts CommonFeatureSpecArgs, CommonFeatureSpecPtr and CommonFeatureSpecPtrOutput values.
// You can construct a concrete instance of `CommonFeatureSpecPtrInput` via:
//
//          CommonFeatureSpecArgs{...}
//
//  or:
//
//          nil
type CommonFeatureSpecPtrInput interface {
	pulumi.Input

	ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput
	ToCommonFeatureSpecPtrOutputWithContext(context.Context) CommonFeatureSpecPtrOutput
}

type commonFeatureSpecPtrType CommonFeatureSpecArgs

func CommonFeatureSpecPtr(v *CommonFeatureSpecArgs) CommonFeatureSpecPtrInput {
	return (*commonFeatureSpecPtrType)(v)
}

func (*commonFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecPtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *CommonFeatureSpec {
		return &v
	}).(CommonFeatureSpecPtrOutput)
}

// Cloud Audit Logging-specific spec.
func (o CommonFeatureSpecOutput) Cloudauditlogging() CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *CloudAuditLoggingFeatureSpec { return v.Cloudauditlogging }).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *MultiClusterIngressFeatureSpec { return v.Multiclusteringress }).(MultiClusterIngressFeatureSpecPtrOutput)
}

type CommonFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) Elem() CommonFeatureSpecOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) CommonFeatureSpec { return *v }).(CommonFeatureSpecOutput)
}

// Cloud Audit Logging-specific spec.
func (o CommonFeatureSpecPtrOutput) Cloudauditlogging() CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *CloudAuditLoggingFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Cloudauditlogging
	}).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecPtrOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *MultiClusterIngressFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Multiclusteringress
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecResponse struct {
	// Cloud Audit Logging-specific spec.
	Cloudauditlogging CloudAuditLoggingFeatureSpecResponse `pulumi:"cloudauditlogging"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecResponse `pulumi:"multiclusteringress"`
}

// CommonFeatureSpecResponseInput is an input type that accepts CommonFeatureSpecResponseArgs and CommonFeatureSpecResponseOutput values.
// You can construct a concrete instance of `CommonFeatureSpecResponseInput` via:
//
//          CommonFeatureSpecResponseArgs{...}
type CommonFeatureSpecResponseInput interface {
	pulumi.Input

	ToCommonFeatureSpecResponseOutput() CommonFeatureSpecResponseOutput
	ToCommonFeatureSpecResponseOutputWithContext(context.Context) CommonFeatureSpecResponseOutput
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecResponseArgs struct {
	// Cloud Audit Logging-specific spec.
	Cloudauditlogging CloudAuditLoggingFeatureSpecResponseInput `pulumi:"cloudauditlogging"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecResponseInput `pulumi:"multiclusteringress"`
}

func (CommonFeatureSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpecResponse)(nil)).Elem()
}

func (i CommonFeatureSpecResponseArgs) ToCommonFeatureSpecResponseOutput() CommonFeatureSpecResponseOutput {
	return i.ToCommonFeatureSpecResponseOutputWithContext(context.Background())
}

func (i CommonFeatureSpecResponseArgs) ToCommonFeatureSpecResponseOutputWithContext(ctx context.Context) CommonFeatureSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecResponseOutput)
}

func (i CommonFeatureSpecResponseArgs) ToCommonFeatureSpecResponsePtrOutput() CommonFeatureSpecResponsePtrOutput {
	return i.ToCommonFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (i CommonFeatureSpecResponseArgs) ToCommonFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CommonFeatureSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecResponseOutput).ToCommonFeatureSpecResponsePtrOutputWithContext(ctx)
}

// CommonFeatureSpecResponsePtrInput is an input type that accepts CommonFeatureSpecResponseArgs, CommonFeatureSpecResponsePtr and CommonFeatureSpecResponsePtrOutput values.
// You can construct a concrete instance of `CommonFeatureSpecResponsePtrInput` via:
//
//          CommonFeatureSpecResponseArgs{...}
//
//  or:
//
//          nil
type CommonFeatureSpecResponsePtrInput interface {
	pulumi.Input

	ToCommonFeatureSpecResponsePtrOutput() CommonFeatureSpecResponsePtrOutput
	ToCommonFeatureSpecResponsePtrOutputWithContext(context.Context) CommonFeatureSpecResponsePtrOutput
}

type commonFeatureSpecResponsePtrType CommonFeatureSpecResponseArgs

func CommonFeatureSpecResponsePtr(v *CommonFeatureSpecResponseArgs) CommonFeatureSpecResponsePtrInput {
	return (*commonFeatureSpecResponsePtrType)(v)
}

func (*commonFeatureSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpecResponse)(nil)).Elem()
}

func (i *commonFeatureSpecResponsePtrType) ToCommonFeatureSpecResponsePtrOutput() CommonFeatureSpecResponsePtrOutput {
	return i.ToCommonFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (i *commonFeatureSpecResponsePtrType) ToCommonFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CommonFeatureSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecResponsePtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpecResponse)(nil)).Elem()
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponseOutput() CommonFeatureSpecResponseOutput {
	return o
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponseOutputWithContext(ctx context.Context) CommonFeatureSpecResponseOutput {
	return o
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponsePtrOutput() CommonFeatureSpecResponsePtrOutput {
	return o.ToCommonFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CommonFeatureSpecResponsePtrOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) *CommonFeatureSpecResponse {
		return &v
	}).(CommonFeatureSpecResponsePtrOutput)
}

// Cloud Audit Logging-specific spec.
func (o CommonFeatureSpecResponseOutput) Cloudauditlogging() CloudAuditLoggingFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) CloudAuditLoggingFeatureSpecResponse { return v.Cloudauditlogging }).(CloudAuditLoggingFeatureSpecResponseOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecResponseOutput) Multiclusteringress() MultiClusterIngressFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) MultiClusterIngressFeatureSpecResponse { return v.Multiclusteringress }).(MultiClusterIngressFeatureSpecResponseOutput)
}

type CommonFeatureSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpecResponse)(nil)).Elem()
}

func (o CommonFeatureSpecResponsePtrOutput) ToCommonFeatureSpecResponsePtrOutput() CommonFeatureSpecResponsePtrOutput {
	return o
}

func (o CommonFeatureSpecResponsePtrOutput) ToCommonFeatureSpecResponsePtrOutputWithContext(ctx context.Context) CommonFeatureSpecResponsePtrOutput {
	return o
}

func (o CommonFeatureSpecResponsePtrOutput) Elem() CommonFeatureSpecResponseOutput {
	return o.ApplyT(func(v *CommonFeatureSpecResponse) CommonFeatureSpecResponse { return *v }).(CommonFeatureSpecResponseOutput)
}

// Cloud Audit Logging-specific spec.
func (o CommonFeatureSpecResponsePtrOutput) Cloudauditlogging() CloudAuditLoggingFeatureSpecResponsePtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpecResponse) *CloudAuditLoggingFeatureSpecResponse {
		if v == nil {
			return nil
		}
		return &v.Cloudauditlogging
	}).(CloudAuditLoggingFeatureSpecResponsePtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecResponsePtrOutput) Multiclusteringress() MultiClusterIngressFeatureSpecResponsePtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpecResponse) *MultiClusterIngressFeatureSpecResponse {
		if v == nil {
			return nil
		}
		return &v.Multiclusteringress
	}).(MultiClusterIngressFeatureSpecResponsePtrOutput)
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateResponse struct {
	// Service Mesh-specific state.
	Servicemesh ServiceMeshFeatureStateResponse `pulumi:"servicemesh"`
	// The "running state" of the Feature in this Hub.
	State FeatureStateResponse `pulumi:"state"`
}

// CommonFeatureStateResponseInput is an input type that accepts CommonFeatureStateResponseArgs and CommonFeatureStateResponseOutput values.
// You can construct a concrete instance of `CommonFeatureStateResponseInput` via:
//
//          CommonFeatureStateResponseArgs{...}
type CommonFeatureStateResponseInput interface {
	pulumi.Input

	ToCommonFeatureStateResponseOutput() CommonFeatureStateResponseOutput
	ToCommonFeatureStateResponseOutputWithContext(context.Context) CommonFeatureStateResponseOutput
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateResponseArgs struct {
	// Service Mesh-specific state.
	Servicemesh ServiceMeshFeatureStateResponseInput `pulumi:"servicemesh"`
	// The "running state" of the Feature in this Hub.
	State FeatureStateResponseInput `pulumi:"state"`
}

func (CommonFeatureStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureStateResponse)(nil)).Elem()
}

func (i CommonFeatureStateResponseArgs) ToCommonFeatureStateResponseOutput() CommonFeatureStateResponseOutput {
	return i.ToCommonFeatureStateResponseOutputWithContext(context.Background())
}

func (i CommonFeatureStateResponseArgs) ToCommonFeatureStateResponseOutputWithContext(ctx context.Context) CommonFeatureStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureStateResponseOutput)
}

func (i CommonFeatureStateResponseArgs) ToCommonFeatureStateResponsePtrOutput() CommonFeatureStateResponsePtrOutput {
	return i.ToCommonFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (i CommonFeatureStateResponseArgs) ToCommonFeatureStateResponsePtrOutputWithContext(ctx context.Context) CommonFeatureStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureStateResponseOutput).ToCommonFeatureStateResponsePtrOutputWithContext(ctx)
}

// CommonFeatureStateResponsePtrInput is an input type that accepts CommonFeatureStateResponseArgs, CommonFeatureStateResponsePtr and CommonFeatureStateResponsePtrOutput values.
// You can construct a concrete instance of `CommonFeatureStateResponsePtrInput` via:
//
//          CommonFeatureStateResponseArgs{...}
//
//  or:
//
//          nil
type CommonFeatureStateResponsePtrInput interface {
	pulumi.Input

	ToCommonFeatureStateResponsePtrOutput() CommonFeatureStateResponsePtrOutput
	ToCommonFeatureStateResponsePtrOutputWithContext(context.Context) CommonFeatureStateResponsePtrOutput
}

type commonFeatureStateResponsePtrType CommonFeatureStateResponseArgs

func CommonFeatureStateResponsePtr(v *CommonFeatureStateResponseArgs) CommonFeatureStateResponsePtrInput {
	return (*commonFeatureStateResponsePtrType)(v)
}

func (*commonFeatureStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureStateResponse)(nil)).Elem()
}

func (i *commonFeatureStateResponsePtrType) ToCommonFeatureStateResponsePtrOutput() CommonFeatureStateResponsePtrOutput {
	return i.ToCommonFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (i *commonFeatureStateResponsePtrType) ToCommonFeatureStateResponsePtrOutputWithContext(ctx context.Context) CommonFeatureStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureStateResponsePtrOutput)
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (CommonFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureStateResponse)(nil)).Elem()
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponseOutput() CommonFeatureStateResponseOutput {
	return o
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponseOutputWithContext(ctx context.Context) CommonFeatureStateResponseOutput {
	return o
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponsePtrOutput() CommonFeatureStateResponsePtrOutput {
	return o.ToCommonFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponsePtrOutputWithContext(ctx context.Context) CommonFeatureStateResponsePtrOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) *CommonFeatureStateResponse {
		return &v
	}).(CommonFeatureStateResponsePtrOutput)
}

// Service Mesh-specific state.
func (o CommonFeatureStateResponseOutput) Servicemesh() ServiceMeshFeatureStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) ServiceMeshFeatureStateResponse { return v.Servicemesh }).(ServiceMeshFeatureStateResponseOutput)
}

// The "running state" of the Feature in this Hub.
func (o CommonFeatureStateResponseOutput) State() FeatureStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) FeatureStateResponse { return v.State }).(FeatureStateResponseOutput)
}

type CommonFeatureStateResponsePtrOutput struct{ *pulumi.OutputState }

func (CommonFeatureStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureStateResponse)(nil)).Elem()
}

func (o CommonFeatureStateResponsePtrOutput) ToCommonFeatureStateResponsePtrOutput() CommonFeatureStateResponsePtrOutput {
	return o
}

func (o CommonFeatureStateResponsePtrOutput) ToCommonFeatureStateResponsePtrOutputWithContext(ctx context.Context) CommonFeatureStateResponsePtrOutput {
	return o
}

func (o CommonFeatureStateResponsePtrOutput) Elem() CommonFeatureStateResponseOutput {
	return o.ApplyT(func(v *CommonFeatureStateResponse) CommonFeatureStateResponse { return *v }).(CommonFeatureStateResponseOutput)
}

// Service Mesh-specific state.
func (o CommonFeatureStateResponsePtrOutput) Servicemesh() ServiceMeshFeatureStateResponsePtrOutput {
	return o.ApplyT(func(v *CommonFeatureStateResponse) *ServiceMeshFeatureStateResponse {
		if v == nil {
			return nil
		}
		return &v.Servicemesh
	}).(ServiceMeshFeatureStateResponsePtrOutput)
}

// The "running state" of the Feature in this Hub.
func (o CommonFeatureStateResponsePtrOutput) State() FeatureStateResponsePtrOutput {
	return o.ApplyT(func(v *CommonFeatureStateResponse) *FeatureStateResponse {
		if v == nil {
			return nil
		}
		return &v.State
	}).(FeatureStateResponsePtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// ExprResponseInput is an input type that accepts ExprResponseArgs and ExprResponseOutput values.
// You can construct a concrete instance of `ExprResponseInput` via:
//
//          ExprResponseArgs{...}
type ExprResponseInput interface {
	pulumi.Input

	ToExprResponseOutput() ExprResponseOutput
	ToExprResponseOutputWithContext(context.Context) ExprResponseOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringInput `pulumi:"title"`
}

func (ExprResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (i ExprResponseArgs) ToExprResponseOutput() ExprResponseOutput {
	return i.ToExprResponseOutputWithContext(context.Background())
}

func (i ExprResponseArgs) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateResponse struct {
	// The current state of the Feature resource in the Hub API.
	State string `pulumi:"state"`
}

// FeatureResourceStateResponseInput is an input type that accepts FeatureResourceStateResponseArgs and FeatureResourceStateResponseOutput values.
// You can construct a concrete instance of `FeatureResourceStateResponseInput` via:
//
//          FeatureResourceStateResponseArgs{...}
type FeatureResourceStateResponseInput interface {
	pulumi.Input

	ToFeatureResourceStateResponseOutput() FeatureResourceStateResponseOutput
	ToFeatureResourceStateResponseOutputWithContext(context.Context) FeatureResourceStateResponseOutput
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateResponseArgs struct {
	// The current state of the Feature resource in the Hub API.
	State pulumi.StringInput `pulumi:"state"`
}

func (FeatureResourceStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResourceStateResponse)(nil)).Elem()
}

func (i FeatureResourceStateResponseArgs) ToFeatureResourceStateResponseOutput() FeatureResourceStateResponseOutput {
	return i.ToFeatureResourceStateResponseOutputWithContext(context.Background())
}

func (i FeatureResourceStateResponseArgs) ToFeatureResourceStateResponseOutputWithContext(ctx context.Context) FeatureResourceStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureResourceStateResponseOutput)
}

func (i FeatureResourceStateResponseArgs) ToFeatureResourceStateResponsePtrOutput() FeatureResourceStateResponsePtrOutput {
	return i.ToFeatureResourceStateResponsePtrOutputWithContext(context.Background())
}

func (i FeatureResourceStateResponseArgs) ToFeatureResourceStateResponsePtrOutputWithContext(ctx context.Context) FeatureResourceStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureResourceStateResponseOutput).ToFeatureResourceStateResponsePtrOutputWithContext(ctx)
}

// FeatureResourceStateResponsePtrInput is an input type that accepts FeatureResourceStateResponseArgs, FeatureResourceStateResponsePtr and FeatureResourceStateResponsePtrOutput values.
// You can construct a concrete instance of `FeatureResourceStateResponsePtrInput` via:
//
//          FeatureResourceStateResponseArgs{...}
//
//  or:
//
//          nil
type FeatureResourceStateResponsePtrInput interface {
	pulumi.Input

	ToFeatureResourceStateResponsePtrOutput() FeatureResourceStateResponsePtrOutput
	ToFeatureResourceStateResponsePtrOutputWithContext(context.Context) FeatureResourceStateResponsePtrOutput
}

type featureResourceStateResponsePtrType FeatureResourceStateResponseArgs

func FeatureResourceStateResponsePtr(v *FeatureResourceStateResponseArgs) FeatureResourceStateResponsePtrInput {
	return (*featureResourceStateResponsePtrType)(v)
}

func (*featureResourceStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureResourceStateResponse)(nil)).Elem()
}

func (i *featureResourceStateResponsePtrType) ToFeatureResourceStateResponsePtrOutput() FeatureResourceStateResponsePtrOutput {
	return i.ToFeatureResourceStateResponsePtrOutputWithContext(context.Background())
}

func (i *featureResourceStateResponsePtrType) ToFeatureResourceStateResponsePtrOutputWithContext(ctx context.Context) FeatureResourceStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureResourceStateResponsePtrOutput)
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureResourceStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResourceStateResponse)(nil)).Elem()
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponseOutput() FeatureResourceStateResponseOutput {
	return o
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponseOutputWithContext(ctx context.Context) FeatureResourceStateResponseOutput {
	return o
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponsePtrOutput() FeatureResourceStateResponsePtrOutput {
	return o.ToFeatureResourceStateResponsePtrOutputWithContext(context.Background())
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponsePtrOutputWithContext(ctx context.Context) FeatureResourceStateResponsePtrOutput {
	return o.ApplyT(func(v FeatureResourceStateResponse) *FeatureResourceStateResponse {
		return &v
	}).(FeatureResourceStateResponsePtrOutput)
}

// The current state of the Feature resource in the Hub API.
func (o FeatureResourceStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureResourceStateResponse) string { return v.State }).(pulumi.StringOutput)
}

type FeatureResourceStateResponsePtrOutput struct{ *pulumi.OutputState }

func (FeatureResourceStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureResourceStateResponse)(nil)).Elem()
}

func (o FeatureResourceStateResponsePtrOutput) ToFeatureResourceStateResponsePtrOutput() FeatureResourceStateResponsePtrOutput {
	return o
}

func (o FeatureResourceStateResponsePtrOutput) ToFeatureResourceStateResponsePtrOutputWithContext(ctx context.Context) FeatureResourceStateResponsePtrOutput {
	return o
}

func (o FeatureResourceStateResponsePtrOutput) Elem() FeatureResourceStateResponseOutput {
	return o.ApplyT(func(v *FeatureResourceStateResponse) FeatureResourceStateResponse { return *v }).(FeatureResourceStateResponseOutput)
}

// The current state of the Feature resource in the Hub API.
func (o FeatureResourceStateResponsePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureResourceStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.State
	}).(pulumi.StringPtrOutput)
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateResponse struct {
	// The high-level, machine-readable status of this Feature.
	Code string `pulumi:"code"`
	// A human-readable description of the current status.
	Description string `pulumi:"description"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime string `pulumi:"updateTime"`
}

// FeatureStateResponseInput is an input type that accepts FeatureStateResponseArgs and FeatureStateResponseOutput values.
// You can construct a concrete instance of `FeatureStateResponseInput` via:
//
//          FeatureStateResponseArgs{...}
type FeatureStateResponseInput interface {
	pulumi.Input

	ToFeatureStateResponseOutput() FeatureStateResponseOutput
	ToFeatureStateResponseOutputWithContext(context.Context) FeatureStateResponseOutput
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateResponseArgs struct {
	// The high-level, machine-readable status of this Feature.
	Code pulumi.StringInput `pulumi:"code"`
	// A human-readable description of the current status.
	Description pulumi.StringInput `pulumi:"description"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (FeatureStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStateResponse)(nil)).Elem()
}

func (i FeatureStateResponseArgs) ToFeatureStateResponseOutput() FeatureStateResponseOutput {
	return i.ToFeatureStateResponseOutputWithContext(context.Background())
}

func (i FeatureStateResponseArgs) ToFeatureStateResponseOutputWithContext(ctx context.Context) FeatureStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStateResponseOutput)
}

func (i FeatureStateResponseArgs) ToFeatureStateResponsePtrOutput() FeatureStateResponsePtrOutput {
	return i.ToFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (i FeatureStateResponseArgs) ToFeatureStateResponsePtrOutputWithContext(ctx context.Context) FeatureStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStateResponseOutput).ToFeatureStateResponsePtrOutputWithContext(ctx)
}

// FeatureStateResponsePtrInput is an input type that accepts FeatureStateResponseArgs, FeatureStateResponsePtr and FeatureStateResponsePtrOutput values.
// You can construct a concrete instance of `FeatureStateResponsePtrInput` via:
//
//          FeatureStateResponseArgs{...}
//
//  or:
//
//          nil
type FeatureStateResponsePtrInput interface {
	pulumi.Input

	ToFeatureStateResponsePtrOutput() FeatureStateResponsePtrOutput
	ToFeatureStateResponsePtrOutputWithContext(context.Context) FeatureStateResponsePtrOutput
}

type featureStateResponsePtrType FeatureStateResponseArgs

func FeatureStateResponsePtr(v *FeatureStateResponseArgs) FeatureStateResponsePtrInput {
	return (*featureStateResponsePtrType)(v)
}

func (*featureStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureStateResponse)(nil)).Elem()
}

func (i *featureStateResponsePtrType) ToFeatureStateResponsePtrOutput() FeatureStateResponsePtrOutput {
	return i.ToFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (i *featureStateResponsePtrType) ToFeatureStateResponsePtrOutputWithContext(ctx context.Context) FeatureStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStateResponsePtrOutput)
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStateResponse)(nil)).Elem()
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutput() FeatureStateResponseOutput {
	return o
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutputWithContext(ctx context.Context) FeatureStateResponseOutput {
	return o
}

func (o FeatureStateResponseOutput) ToFeatureStateResponsePtrOutput() FeatureStateResponsePtrOutput {
	return o.ToFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (o FeatureStateResponseOutput) ToFeatureStateResponsePtrOutputWithContext(ctx context.Context) FeatureStateResponsePtrOutput {
	return o.ApplyT(func(v FeatureStateResponse) *FeatureStateResponse {
		return &v
	}).(FeatureStateResponsePtrOutput)
}

// The high-level, machine-readable status of this Feature.
func (o FeatureStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable description of the current status.
func (o FeatureStateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The time this status and any related Feature-specific details were updated.
func (o FeatureStateResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type FeatureStateResponsePtrOutput struct{ *pulumi.OutputState }

func (FeatureStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureStateResponse)(nil)).Elem()
}

func (o FeatureStateResponsePtrOutput) ToFeatureStateResponsePtrOutput() FeatureStateResponsePtrOutput {
	return o
}

func (o FeatureStateResponsePtrOutput) ToFeatureStateResponsePtrOutputWithContext(ctx context.Context) FeatureStateResponsePtrOutput {
	return o
}

func (o FeatureStateResponsePtrOutput) Elem() FeatureStateResponseOutput {
	return o.ApplyT(func(v *FeatureStateResponse) FeatureStateResponse { return *v }).(FeatureStateResponseOutput)
}

// The high-level, machine-readable status of this Feature.
func (o FeatureStateResponsePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Code
	}).(pulumi.StringPtrOutput)
}

// A human-readable description of the current status.
func (o FeatureStateResponsePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Description
	}).(pulumi.StringPtrOutput)
}

// The time this status and any related Feature-specific details were updated.
func (o FeatureStateResponsePtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStateResponse) *string {
		if v == nil {
			return nil
		}
		return &v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpec struct {
	// Customer's billing structure
	Billing *string `pulumi:"billing"`
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership *string `pulumi:"configMembership"`
}

// MultiClusterIngressFeatureSpecInput is an input type that accepts MultiClusterIngressFeatureSpecArgs and MultiClusterIngressFeatureSpecOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecInput` via:
//
//          MultiClusterIngressFeatureSpecArgs{...}
type MultiClusterIngressFeatureSpecInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput
	ToMultiClusterIngressFeatureSpecOutputWithContext(context.Context) MultiClusterIngressFeatureSpecOutput
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecArgs struct {
	// Customer's billing structure
	Billing *MultiClusterIngressFeatureSpecBilling `pulumi:"billing"`
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership pulumi.StringPtrInput `pulumi:"configMembership"`
}

func (MultiClusterIngressFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return i.ToMultiClusterIngressFeatureSpecOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput)
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput).ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx)
}

// MultiClusterIngressFeatureSpecPtrInput is an input type that accepts MultiClusterIngressFeatureSpecArgs, MultiClusterIngressFeatureSpecPtr and MultiClusterIngressFeatureSpecPtrOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecPtrInput` via:
//
//          MultiClusterIngressFeatureSpecArgs{...}
//
//  or:
//
//          nil
type MultiClusterIngressFeatureSpecPtrInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput
	ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Context) MultiClusterIngressFeatureSpecPtrOutput
}

type multiClusterIngressFeatureSpecPtrType MultiClusterIngressFeatureSpecArgs

func MultiClusterIngressFeatureSpecPtr(v *MultiClusterIngressFeatureSpecArgs) MultiClusterIngressFeatureSpecPtrInput {
	return (*multiClusterIngressFeatureSpecPtrType)(v)
}

func (*multiClusterIngressFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecPtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *MultiClusterIngressFeatureSpec {
		return &v
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// Customer's billing structure
func (o MultiClusterIngressFeatureSpecOutput) Billing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *string { return v.Billing }).(pulumi.StringPtrOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *string { return v.ConfigMembership }).(pulumi.StringPtrOutput)
}

type MultiClusterIngressFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) Elem() MultiClusterIngressFeatureSpecOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) MultiClusterIngressFeatureSpec { return *v }).(MultiClusterIngressFeatureSpecOutput)
}

// Customer's billing structure
func (o MultiClusterIngressFeatureSpecPtrOutput) Billing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) *string {
		if v == nil {
			return nil
		}
		return v.Billing
	}).(pulumi.StringPtrOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecPtrOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMembership
	}).(pulumi.StringPtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecResponse struct {
	// Customer's billing structure
	Billing string `pulumi:"billing"`
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership string `pulumi:"configMembership"`
}

// MultiClusterIngressFeatureSpecResponseInput is an input type that accepts MultiClusterIngressFeatureSpecResponseArgs and MultiClusterIngressFeatureSpecResponseOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecResponseInput` via:
//
//          MultiClusterIngressFeatureSpecResponseArgs{...}
type MultiClusterIngressFeatureSpecResponseInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecResponseOutput() MultiClusterIngressFeatureSpecResponseOutput
	ToMultiClusterIngressFeatureSpecResponseOutputWithContext(context.Context) MultiClusterIngressFeatureSpecResponseOutput
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecResponseArgs struct {
	// Customer's billing structure
	Billing pulumi.StringInput `pulumi:"billing"`
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership pulumi.StringInput `pulumi:"configMembership"`
}

func (MultiClusterIngressFeatureSpecResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpecResponse)(nil)).Elem()
}

func (i MultiClusterIngressFeatureSpecResponseArgs) ToMultiClusterIngressFeatureSpecResponseOutput() MultiClusterIngressFeatureSpecResponseOutput {
	return i.ToMultiClusterIngressFeatureSpecResponseOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecResponseArgs) ToMultiClusterIngressFeatureSpecResponseOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecResponseOutput)
}

func (i MultiClusterIngressFeatureSpecResponseArgs) ToMultiClusterIngressFeatureSpecResponsePtrOutput() MultiClusterIngressFeatureSpecResponsePtrOutput {
	return i.ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecResponseArgs) ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecResponseOutput).ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(ctx)
}

// MultiClusterIngressFeatureSpecResponsePtrInput is an input type that accepts MultiClusterIngressFeatureSpecResponseArgs, MultiClusterIngressFeatureSpecResponsePtr and MultiClusterIngressFeatureSpecResponsePtrOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecResponsePtrInput` via:
//
//          MultiClusterIngressFeatureSpecResponseArgs{...}
//
//  or:
//
//          nil
type MultiClusterIngressFeatureSpecResponsePtrInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecResponsePtrOutput() MultiClusterIngressFeatureSpecResponsePtrOutput
	ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(context.Context) MultiClusterIngressFeatureSpecResponsePtrOutput
}

type multiClusterIngressFeatureSpecResponsePtrType MultiClusterIngressFeatureSpecResponseArgs

func MultiClusterIngressFeatureSpecResponsePtr(v *MultiClusterIngressFeatureSpecResponseArgs) MultiClusterIngressFeatureSpecResponsePtrInput {
	return (*multiClusterIngressFeatureSpecResponsePtrType)(v)
}

func (*multiClusterIngressFeatureSpecResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpecResponse)(nil)).Elem()
}

func (i *multiClusterIngressFeatureSpecResponsePtrType) ToMultiClusterIngressFeatureSpecResponsePtrOutput() MultiClusterIngressFeatureSpecResponsePtrOutput {
	return i.ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (i *multiClusterIngressFeatureSpecResponsePtrType) ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecResponsePtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpecResponse)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponseOutput() MultiClusterIngressFeatureSpecResponseOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponseOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponseOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponsePtrOutput() MultiClusterIngressFeatureSpecResponsePtrOutput {
	return o.ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(context.Background())
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponsePtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpecResponse) *MultiClusterIngressFeatureSpecResponse {
		return &v
	}).(MultiClusterIngressFeatureSpecResponsePtrOutput)
}

// Customer's billing structure
func (o MultiClusterIngressFeatureSpecResponseOutput) Billing() pulumi.StringOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpecResponse) string { return v.Billing }).(pulumi.StringOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecResponseOutput) ConfigMembership() pulumi.StringOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpecResponse) string { return v.ConfigMembership }).(pulumi.StringOutput)
}

type MultiClusterIngressFeatureSpecResponsePtrOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpecResponse)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecResponsePtrOutput) ToMultiClusterIngressFeatureSpecResponsePtrOutput() MultiClusterIngressFeatureSpecResponsePtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecResponsePtrOutput) ToMultiClusterIngressFeatureSpecResponsePtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponsePtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecResponsePtrOutput) Elem() MultiClusterIngressFeatureSpecResponseOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpecResponse) MultiClusterIngressFeatureSpecResponse { return *v }).(MultiClusterIngressFeatureSpecResponseOutput)
}

// Customer's billing structure
func (o MultiClusterIngressFeatureSpecResponsePtrOutput) Billing() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Billing
	}).(pulumi.StringPtrOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecResponsePtrOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpecResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ConfigMembership
	}).(pulumi.StringPtrOutput)
}

// AnalysisMessageBase describes some common information that is needed for all messages.
type ServiceMeshAnalysisMessageBaseResponse struct {
	// A url pointing to the Service Mesh or Istio documentation for this specific error type.
	DocumentationUrl string `pulumi:"documentationUrl"`
	// Represents how severe a message is.
	Level string `pulumi:"level"`
	// Represents the specific type of a message.
	Type ServiceMeshTypeResponse `pulumi:"type"`
}

// ServiceMeshAnalysisMessageBaseResponseInput is an input type that accepts ServiceMeshAnalysisMessageBaseResponseArgs and ServiceMeshAnalysisMessageBaseResponseOutput values.
// You can construct a concrete instance of `ServiceMeshAnalysisMessageBaseResponseInput` via:
//
//          ServiceMeshAnalysisMessageBaseResponseArgs{...}
type ServiceMeshAnalysisMessageBaseResponseInput interface {
	pulumi.Input

	ToServiceMeshAnalysisMessageBaseResponseOutput() ServiceMeshAnalysisMessageBaseResponseOutput
	ToServiceMeshAnalysisMessageBaseResponseOutputWithContext(context.Context) ServiceMeshAnalysisMessageBaseResponseOutput
}

// AnalysisMessageBase describes some common information that is needed for all messages.
type ServiceMeshAnalysisMessageBaseResponseArgs struct {
	// A url pointing to the Service Mesh or Istio documentation for this specific error type.
	DocumentationUrl pulumi.StringInput `pulumi:"documentationUrl"`
	// Represents how severe a message is.
	Level pulumi.StringInput `pulumi:"level"`
	// Represents the specific type of a message.
	Type ServiceMeshTypeResponseInput `pulumi:"type"`
}

func (ServiceMeshAnalysisMessageBaseResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessageBaseResponse)(nil)).Elem()
}

func (i ServiceMeshAnalysisMessageBaseResponseArgs) ToServiceMeshAnalysisMessageBaseResponseOutput() ServiceMeshAnalysisMessageBaseResponseOutput {
	return i.ToServiceMeshAnalysisMessageBaseResponseOutputWithContext(context.Background())
}

func (i ServiceMeshAnalysisMessageBaseResponseArgs) ToServiceMeshAnalysisMessageBaseResponseOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBaseResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageBaseResponseOutput)
}

// AnalysisMessageBase describes some common information that is needed for all messages.
type ServiceMeshAnalysisMessageBaseResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshAnalysisMessageBaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessageBaseResponse)(nil)).Elem()
}

func (o ServiceMeshAnalysisMessageBaseResponseOutput) ToServiceMeshAnalysisMessageBaseResponseOutput() ServiceMeshAnalysisMessageBaseResponseOutput {
	return o
}

func (o ServiceMeshAnalysisMessageBaseResponseOutput) ToServiceMeshAnalysisMessageBaseResponseOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBaseResponseOutput {
	return o
}

// A url pointing to the Service Mesh or Istio documentation for this specific error type.
func (o ServiceMeshAnalysisMessageBaseResponseOutput) DocumentationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageBaseResponse) string { return v.DocumentationUrl }).(pulumi.StringOutput)
}

// Represents how severe a message is.
func (o ServiceMeshAnalysisMessageBaseResponseOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageBaseResponse) string { return v.Level }).(pulumi.StringOutput)
}

// Represents the specific type of a message.
func (o ServiceMeshAnalysisMessageBaseResponseOutput) Type() ServiceMeshTypeResponseOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageBaseResponse) ServiceMeshTypeResponse { return v.Type }).(ServiceMeshTypeResponseOutput)
}

// AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
type ServiceMeshAnalysisMessageResponse struct {
	// A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
	Args map[string]string `pulumi:"args"`
	// A human readable description of what the error means. It is suitable for non-internationalize display purposes.
	Description string `pulumi:"description"`
	// Details common to all types of Istio and ServiceMesh analysis messages.
	MessageBase ServiceMeshAnalysisMessageBaseResponse `pulumi:"messageBase"`
	// A list of strings specifying the resource identifiers that were the cause of message generation. A "path" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
	ResourcePaths []string `pulumi:"resourcePaths"`
}

// ServiceMeshAnalysisMessageResponseInput is an input type that accepts ServiceMeshAnalysisMessageResponseArgs and ServiceMeshAnalysisMessageResponseOutput values.
// You can construct a concrete instance of `ServiceMeshAnalysisMessageResponseInput` via:
//
//          ServiceMeshAnalysisMessageResponseArgs{...}
type ServiceMeshAnalysisMessageResponseInput interface {
	pulumi.Input

	ToServiceMeshAnalysisMessageResponseOutput() ServiceMeshAnalysisMessageResponseOutput
	ToServiceMeshAnalysisMessageResponseOutputWithContext(context.Context) ServiceMeshAnalysisMessageResponseOutput
}

// AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
type ServiceMeshAnalysisMessageResponseArgs struct {
	// A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
	Args pulumi.StringMapInput `pulumi:"args"`
	// A human readable description of what the error means. It is suitable for non-internationalize display purposes.
	Description pulumi.StringInput `pulumi:"description"`
	// Details common to all types of Istio and ServiceMesh analysis messages.
	MessageBase ServiceMeshAnalysisMessageBaseResponseInput `pulumi:"messageBase"`
	// A list of strings specifying the resource identifiers that were the cause of message generation. A "path" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
	ResourcePaths pulumi.StringArrayInput `pulumi:"resourcePaths"`
}

func (ServiceMeshAnalysisMessageResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessageResponse)(nil)).Elem()
}

func (i ServiceMeshAnalysisMessageResponseArgs) ToServiceMeshAnalysisMessageResponseOutput() ServiceMeshAnalysisMessageResponseOutput {
	return i.ToServiceMeshAnalysisMessageResponseOutputWithContext(context.Background())
}

func (i ServiceMeshAnalysisMessageResponseArgs) ToServiceMeshAnalysisMessageResponseOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageResponseOutput)
}

// ServiceMeshAnalysisMessageResponseArrayInput is an input type that accepts ServiceMeshAnalysisMessageResponseArray and ServiceMeshAnalysisMessageResponseArrayOutput values.
// You can construct a concrete instance of `ServiceMeshAnalysisMessageResponseArrayInput` via:
//
//          ServiceMeshAnalysisMessageResponseArray{ ServiceMeshAnalysisMessageResponseArgs{...} }
type ServiceMeshAnalysisMessageResponseArrayInput interface {
	pulumi.Input

	ToServiceMeshAnalysisMessageResponseArrayOutput() ServiceMeshAnalysisMessageResponseArrayOutput
	ToServiceMeshAnalysisMessageResponseArrayOutputWithContext(context.Context) ServiceMeshAnalysisMessageResponseArrayOutput
}

type ServiceMeshAnalysisMessageResponseArray []ServiceMeshAnalysisMessageResponseInput

func (ServiceMeshAnalysisMessageResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceMeshAnalysisMessageResponse)(nil)).Elem()
}

func (i ServiceMeshAnalysisMessageResponseArray) ToServiceMeshAnalysisMessageResponseArrayOutput() ServiceMeshAnalysisMessageResponseArrayOutput {
	return i.ToServiceMeshAnalysisMessageResponseArrayOutputWithContext(context.Background())
}

func (i ServiceMeshAnalysisMessageResponseArray) ToServiceMeshAnalysisMessageResponseArrayOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageResponseArrayOutput)
}

// AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
type ServiceMeshAnalysisMessageResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshAnalysisMessageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessageResponse)(nil)).Elem()
}

func (o ServiceMeshAnalysisMessageResponseOutput) ToServiceMeshAnalysisMessageResponseOutput() ServiceMeshAnalysisMessageResponseOutput {
	return o
}

func (o ServiceMeshAnalysisMessageResponseOutput) ToServiceMeshAnalysisMessageResponseOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageResponseOutput {
	return o
}

// A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
func (o ServiceMeshAnalysisMessageResponseOutput) Args() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageResponse) map[string]string { return v.Args }).(pulumi.StringMapOutput)
}

// A human readable description of what the error means. It is suitable for non-internationalize display purposes.
func (o ServiceMeshAnalysisMessageResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Details common to all types of Istio and ServiceMesh analysis messages.
func (o ServiceMeshAnalysisMessageResponseOutput) MessageBase() ServiceMeshAnalysisMessageBaseResponseOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageResponse) ServiceMeshAnalysisMessageBaseResponse {
		return v.MessageBase
	}).(ServiceMeshAnalysisMessageBaseResponseOutput)
}

// A list of strings specifying the resource identifiers that were the cause of message generation. A "path" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
func (o ServiceMeshAnalysisMessageResponseOutput) ResourcePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageResponse) []string { return v.ResourcePaths }).(pulumi.StringArrayOutput)
}

type ServiceMeshAnalysisMessageResponseArrayOutput struct{ *pulumi.OutputState }

func (ServiceMeshAnalysisMessageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceMeshAnalysisMessageResponse)(nil)).Elem()
}

func (o ServiceMeshAnalysisMessageResponseArrayOutput) ToServiceMeshAnalysisMessageResponseArrayOutput() ServiceMeshAnalysisMessageResponseArrayOutput {
	return o
}

func (o ServiceMeshAnalysisMessageResponseArrayOutput) ToServiceMeshAnalysisMessageResponseArrayOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageResponseArrayOutput {
	return o
}

func (o ServiceMeshAnalysisMessageResponseArrayOutput) Index(i pulumi.IntInput) ServiceMeshAnalysisMessageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceMeshAnalysisMessageResponse {
		return vs[0].([]ServiceMeshAnalysisMessageResponse)[vs[1].(int)]
	}).(ServiceMeshAnalysisMessageResponseOutput)
}

// **Service Mesh**: State for the whole Hub, as analyzed by the Service Mesh Hub Controller.
type ServiceMeshFeatureStateResponse struct {
	// Results of running Service Mesh analyzers.
	AnalysisMessages []ServiceMeshAnalysisMessageResponse `pulumi:"analysisMessages"`
}

// ServiceMeshFeatureStateResponseInput is an input type that accepts ServiceMeshFeatureStateResponseArgs and ServiceMeshFeatureStateResponseOutput values.
// You can construct a concrete instance of `ServiceMeshFeatureStateResponseInput` via:
//
//          ServiceMeshFeatureStateResponseArgs{...}
type ServiceMeshFeatureStateResponseInput interface {
	pulumi.Input

	ToServiceMeshFeatureStateResponseOutput() ServiceMeshFeatureStateResponseOutput
	ToServiceMeshFeatureStateResponseOutputWithContext(context.Context) ServiceMeshFeatureStateResponseOutput
}

// **Service Mesh**: State for the whole Hub, as analyzed by the Service Mesh Hub Controller.
type ServiceMeshFeatureStateResponseArgs struct {
	// Results of running Service Mesh analyzers.
	AnalysisMessages ServiceMeshAnalysisMessageResponseArrayInput `pulumi:"analysisMessages"`
}

func (ServiceMeshFeatureStateResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshFeatureStateResponse)(nil)).Elem()
}

func (i ServiceMeshFeatureStateResponseArgs) ToServiceMeshFeatureStateResponseOutput() ServiceMeshFeatureStateResponseOutput {
	return i.ToServiceMeshFeatureStateResponseOutputWithContext(context.Background())
}

func (i ServiceMeshFeatureStateResponseArgs) ToServiceMeshFeatureStateResponseOutputWithContext(ctx context.Context) ServiceMeshFeatureStateResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshFeatureStateResponseOutput)
}

func (i ServiceMeshFeatureStateResponseArgs) ToServiceMeshFeatureStateResponsePtrOutput() ServiceMeshFeatureStateResponsePtrOutput {
	return i.ToServiceMeshFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (i ServiceMeshFeatureStateResponseArgs) ToServiceMeshFeatureStateResponsePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshFeatureStateResponseOutput).ToServiceMeshFeatureStateResponsePtrOutputWithContext(ctx)
}

// ServiceMeshFeatureStateResponsePtrInput is an input type that accepts ServiceMeshFeatureStateResponseArgs, ServiceMeshFeatureStateResponsePtr and ServiceMeshFeatureStateResponsePtrOutput values.
// You can construct a concrete instance of `ServiceMeshFeatureStateResponsePtrInput` via:
//
//          ServiceMeshFeatureStateResponseArgs{...}
//
//  or:
//
//          nil
type ServiceMeshFeatureStateResponsePtrInput interface {
	pulumi.Input

	ToServiceMeshFeatureStateResponsePtrOutput() ServiceMeshFeatureStateResponsePtrOutput
	ToServiceMeshFeatureStateResponsePtrOutputWithContext(context.Context) ServiceMeshFeatureStateResponsePtrOutput
}

type serviceMeshFeatureStateResponsePtrType ServiceMeshFeatureStateResponseArgs

func ServiceMeshFeatureStateResponsePtr(v *ServiceMeshFeatureStateResponseArgs) ServiceMeshFeatureStateResponsePtrInput {
	return (*serviceMeshFeatureStateResponsePtrType)(v)
}

func (*serviceMeshFeatureStateResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshFeatureStateResponse)(nil)).Elem()
}

func (i *serviceMeshFeatureStateResponsePtrType) ToServiceMeshFeatureStateResponsePtrOutput() ServiceMeshFeatureStateResponsePtrOutput {
	return i.ToServiceMeshFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (i *serviceMeshFeatureStateResponsePtrType) ToServiceMeshFeatureStateResponsePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStateResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshFeatureStateResponsePtrOutput)
}

// **Service Mesh**: State for the whole Hub, as analyzed by the Service Mesh Hub Controller.
type ServiceMeshFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshFeatureStateResponse)(nil)).Elem()
}

func (o ServiceMeshFeatureStateResponseOutput) ToServiceMeshFeatureStateResponseOutput() ServiceMeshFeatureStateResponseOutput {
	return o
}

func (o ServiceMeshFeatureStateResponseOutput) ToServiceMeshFeatureStateResponseOutputWithContext(ctx context.Context) ServiceMeshFeatureStateResponseOutput {
	return o
}

func (o ServiceMeshFeatureStateResponseOutput) ToServiceMeshFeatureStateResponsePtrOutput() ServiceMeshFeatureStateResponsePtrOutput {
	return o.ToServiceMeshFeatureStateResponsePtrOutputWithContext(context.Background())
}

func (o ServiceMeshFeatureStateResponseOutput) ToServiceMeshFeatureStateResponsePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStateResponsePtrOutput {
	return o.ApplyT(func(v ServiceMeshFeatureStateResponse) *ServiceMeshFeatureStateResponse {
		return &v
	}).(ServiceMeshFeatureStateResponsePtrOutput)
}

// Results of running Service Mesh analyzers.
func (o ServiceMeshFeatureStateResponseOutput) AnalysisMessages() ServiceMeshAnalysisMessageResponseArrayOutput {
	return o.ApplyT(func(v ServiceMeshFeatureStateResponse) []ServiceMeshAnalysisMessageResponse {
		return v.AnalysisMessages
	}).(ServiceMeshAnalysisMessageResponseArrayOutput)
}

type ServiceMeshFeatureStateResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshFeatureStateResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshFeatureStateResponse)(nil)).Elem()
}

func (o ServiceMeshFeatureStateResponsePtrOutput) ToServiceMeshFeatureStateResponsePtrOutput() ServiceMeshFeatureStateResponsePtrOutput {
	return o
}

func (o ServiceMeshFeatureStateResponsePtrOutput) ToServiceMeshFeatureStateResponsePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStateResponsePtrOutput {
	return o
}

func (o ServiceMeshFeatureStateResponsePtrOutput) Elem() ServiceMeshFeatureStateResponseOutput {
	return o.ApplyT(func(v *ServiceMeshFeatureStateResponse) ServiceMeshFeatureStateResponse { return *v }).(ServiceMeshFeatureStateResponseOutput)
}

// Results of running Service Mesh analyzers.
func (o ServiceMeshFeatureStateResponsePtrOutput) AnalysisMessages() ServiceMeshAnalysisMessageResponseArrayOutput {
	return o.ApplyT(func(v *ServiceMeshFeatureStateResponse) []ServiceMeshAnalysisMessageResponse {
		if v == nil {
			return nil
		}
		return v.AnalysisMessages
	}).(ServiceMeshAnalysisMessageResponseArrayOutput)
}

// A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type
type ServiceMeshTypeResponse struct {
	// A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended to uniquely identify the message type. (e.g. "IST0001" is mapped to the "InternalError" message type.)
	Code string `pulumi:"code"`
	// A human-readable name for the message type. e.g. "InternalError", "PodMissingProxy". This should be the same for all messages of the same type. (This corresponds to the `name` field in open-source Istio.)
	DisplayName string `pulumi:"displayName"`
}

// ServiceMeshTypeResponseInput is an input type that accepts ServiceMeshTypeResponseArgs and ServiceMeshTypeResponseOutput values.
// You can construct a concrete instance of `ServiceMeshTypeResponseInput` via:
//
//          ServiceMeshTypeResponseArgs{...}
type ServiceMeshTypeResponseInput interface {
	pulumi.Input

	ToServiceMeshTypeResponseOutput() ServiceMeshTypeResponseOutput
	ToServiceMeshTypeResponseOutputWithContext(context.Context) ServiceMeshTypeResponseOutput
}

// A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type
type ServiceMeshTypeResponseArgs struct {
	// A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended to uniquely identify the message type. (e.g. "IST0001" is mapped to the "InternalError" message type.)
	Code pulumi.StringInput `pulumi:"code"`
	// A human-readable name for the message type. e.g. "InternalError", "PodMissingProxy". This should be the same for all messages of the same type. (This corresponds to the `name` field in open-source Istio.)
	DisplayName pulumi.StringInput `pulumi:"displayName"`
}

func (ServiceMeshTypeResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshTypeResponse)(nil)).Elem()
}

func (i ServiceMeshTypeResponseArgs) ToServiceMeshTypeResponseOutput() ServiceMeshTypeResponseOutput {
	return i.ToServiceMeshTypeResponseOutputWithContext(context.Background())
}

func (i ServiceMeshTypeResponseArgs) ToServiceMeshTypeResponseOutputWithContext(ctx context.Context) ServiceMeshTypeResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshTypeResponseOutput)
}

// A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type
type ServiceMeshTypeResponseOutput struct{ *pulumi.OutputState }

func (ServiceMeshTypeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshTypeResponse)(nil)).Elem()
}

func (o ServiceMeshTypeResponseOutput) ToServiceMeshTypeResponseOutput() ServiceMeshTypeResponseOutput {
	return o
}

func (o ServiceMeshTypeResponseOutput) ToServiceMeshTypeResponseOutputWithContext(ctx context.Context) ServiceMeshTypeResponseOutput {
	return o
}

// A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended to uniquely identify the message type. (e.g. "IST0001" is mapped to the "InternalError" message type.)
func (o ServiceMeshTypeResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshTypeResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable name for the message type. e.g. "InternalError", "PodMissingProxy". This should be the same for all messages of the same type. (This corresponds to the `name` field in open-source Istio.)
func (o ServiceMeshTypeResponseOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceMeshTypeResponse) string { return v.DisplayName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudAuditLoggingFeatureSpecOutput{})
	pulumi.RegisterOutputType(CloudAuditLoggingFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(CloudAuditLoggingFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(CloudAuditLoggingFeatureSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(CommonFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(CommonFeatureStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FeatureResourceStateResponseOutput{})
	pulumi.RegisterOutputType(FeatureResourceStateResponsePtrOutput{})
	pulumi.RegisterOutputType(FeatureStateResponseOutput{})
	pulumi.RegisterOutputType(FeatureStateResponsePtrOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshAnalysisMessageBaseResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshAnalysisMessageResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshAnalysisMessageResponseArrayOutput{})
	pulumi.RegisterOutputType(ServiceMeshFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(ServiceMeshFeatureStateResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshTypeResponseOutput{})
}
