// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *string `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType pulumi.StringPtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *string { return v.LogType }).(pulumi.StringPtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Associates `members` with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members` with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members` with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpec struct {
	// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
	AllowlistedServiceAccounts []string `pulumi:"allowlistedServiceAccounts"`
}

// CloudAuditLoggingFeatureSpecInput is an input type that accepts CloudAuditLoggingFeatureSpecArgs and CloudAuditLoggingFeatureSpecOutput values.
// You can construct a concrete instance of `CloudAuditLoggingFeatureSpecInput` via:
//
//          CloudAuditLoggingFeatureSpecArgs{...}
type CloudAuditLoggingFeatureSpecInput interface {
	pulumi.Input

	ToCloudAuditLoggingFeatureSpecOutput() CloudAuditLoggingFeatureSpecOutput
	ToCloudAuditLoggingFeatureSpecOutputWithContext(context.Context) CloudAuditLoggingFeatureSpecOutput
}

// Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpecArgs struct {
	// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
	AllowlistedServiceAccounts pulumi.StringArrayInput `pulumi:"allowlistedServiceAccounts"`
}

func (CloudAuditLoggingFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecOutput() CloudAuditLoggingFeatureSpecOutput {
	return i.ToCloudAuditLoggingFeatureSpecOutputWithContext(context.Background())
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecOutput)
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return i.ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Background())
}

func (i CloudAuditLoggingFeatureSpecArgs) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecOutput).ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx)
}

// CloudAuditLoggingFeatureSpecPtrInput is an input type that accepts CloudAuditLoggingFeatureSpecArgs, CloudAuditLoggingFeatureSpecPtr and CloudAuditLoggingFeatureSpecPtrOutput values.
// You can construct a concrete instance of `CloudAuditLoggingFeatureSpecPtrInput` via:
//
//          CloudAuditLoggingFeatureSpecArgs{...}
//
//  or:
//
//          nil
type CloudAuditLoggingFeatureSpecPtrInput interface {
	pulumi.Input

	ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput
	ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Context) CloudAuditLoggingFeatureSpecPtrOutput
}

type cloudAuditLoggingFeatureSpecPtrType CloudAuditLoggingFeatureSpecArgs

func CloudAuditLoggingFeatureSpecPtr(v *CloudAuditLoggingFeatureSpecArgs) CloudAuditLoggingFeatureSpecPtrInput {
	return (*cloudAuditLoggingFeatureSpecPtrType)(v)
}

func (*cloudAuditLoggingFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (i *cloudAuditLoggingFeatureSpecPtrType) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return i.ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *cloudAuditLoggingFeatureSpecPtrType) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// Spec for Audit Logging Allowlisting.
type CloudAuditLoggingFeatureSpecOutput struct{ *pulumi.OutputState }

func (CloudAuditLoggingFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecOutput() CloudAuditLoggingFeatureSpecOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(context.Background())
}

func (o CloudAuditLoggingFeatureSpecOutput) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ApplyT(func(v CloudAuditLoggingFeatureSpec) *CloudAuditLoggingFeatureSpec {
		return &v
	}).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
func (o CloudAuditLoggingFeatureSpecOutput) AllowlistedServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CloudAuditLoggingFeatureSpec) []string { return v.AllowlistedServiceAccounts }).(pulumi.StringArrayOutput)
}

type CloudAuditLoggingFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (CloudAuditLoggingFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudAuditLoggingFeatureSpec)(nil)).Elem()
}

func (o CloudAuditLoggingFeatureSpecPtrOutput) ToCloudAuditLoggingFeatureSpecPtrOutput() CloudAuditLoggingFeatureSpecPtrOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecPtrOutput) ToCloudAuditLoggingFeatureSpecPtrOutputWithContext(ctx context.Context) CloudAuditLoggingFeatureSpecPtrOutput {
	return o
}

func (o CloudAuditLoggingFeatureSpecPtrOutput) Elem() CloudAuditLoggingFeatureSpecOutput {
	return o.ApplyT(func(v *CloudAuditLoggingFeatureSpec) CloudAuditLoggingFeatureSpec { return *v }).(CloudAuditLoggingFeatureSpecOutput)
}

// Service account that should be allowlisted to send the audit logs; eg cloudauditlogging@gcp-project.iam.gserviceaccount.com. These accounts must already exist, but do not need to have any permissions granted to them. The customer's entitlements will be checked prior to allowlisting (i.e. the customer must be an Anthos customer.)
func (o CloudAuditLoggingFeatureSpecPtrOutput) AllowlistedServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudAuditLoggingFeatureSpec) []string {
		if v == nil {
			return nil
		}
		return v.AllowlistedServiceAccounts
	}).(pulumi.StringArrayOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpec struct {
	// Cloud Audit Logging-specific spec.
	Cloudauditlogging *CloudAuditLoggingFeatureSpec `pulumi:"cloudauditlogging"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress *MultiClusterIngressFeatureSpec `pulumi:"multiclusteringress"`
}

// CommonFeatureSpecInput is an input type that accepts CommonFeatureSpecArgs and CommonFeatureSpecOutput values.
// You can construct a concrete instance of `CommonFeatureSpecInput` via:
//
//          CommonFeatureSpecArgs{...}
type CommonFeatureSpecInput interface {
	pulumi.Input

	ToCommonFeatureSpecOutput() CommonFeatureSpecOutput
	ToCommonFeatureSpecOutputWithContext(context.Context) CommonFeatureSpecOutput
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecArgs struct {
	// Cloud Audit Logging-specific spec.
	Cloudauditlogging CloudAuditLoggingFeatureSpecPtrInput `pulumi:"cloudauditlogging"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecPtrInput `pulumi:"multiclusteringress"`
}

func (CommonFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return i.ToCommonFeatureSpecOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput)
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput).ToCommonFeatureSpecPtrOutputWithContext(ctx)
}

// CommonFeatureSpecPtrInput is an input type that accepts CommonFeatureSpecArgs, CommonFeatureSpecPtr and CommonFeatureSpecPtrOutput values.
// You can construct a concrete instance of `CommonFeatureSpecPtrInput` via:
//
//          CommonFeatureSpecArgs{...}
//
//  or:
//
//          nil
type CommonFeatureSpecPtrInput interface {
	pulumi.Input

	ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput
	ToCommonFeatureSpecPtrOutputWithContext(context.Context) CommonFeatureSpecPtrOutput
}

type commonFeatureSpecPtrType CommonFeatureSpecArgs

func CommonFeatureSpecPtr(v *CommonFeatureSpecArgs) CommonFeatureSpecPtrInput {
	return (*commonFeatureSpecPtrType)(v)
}

func (*commonFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecPtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *CommonFeatureSpec {
		return &v
	}).(CommonFeatureSpecPtrOutput)
}

// Cloud Audit Logging-specific spec.
func (o CommonFeatureSpecOutput) Cloudauditlogging() CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *CloudAuditLoggingFeatureSpec { return v.Cloudauditlogging }).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *MultiClusterIngressFeatureSpec { return v.Multiclusteringress }).(MultiClusterIngressFeatureSpecPtrOutput)
}

type CommonFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) Elem() CommonFeatureSpecOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) CommonFeatureSpec { return *v }).(CommonFeatureSpecOutput)
}

// Cloud Audit Logging-specific spec.
func (o CommonFeatureSpecPtrOutput) Cloudauditlogging() CloudAuditLoggingFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *CloudAuditLoggingFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Cloudauditlogging
	}).(CloudAuditLoggingFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecPtrOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *MultiClusterIngressFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Multiclusteringress
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureState struct {
	// Service Mesh-specific state.
	Servicemesh *ServiceMeshFeatureState `pulumi:"servicemesh"`
	// Output only. The "running state" of the Feature in this Hub.
	State *FeatureStateType `pulumi:"state"`
}

// CommonFeatureStateInput is an input type that accepts CommonFeatureStateArgs and CommonFeatureStateOutput values.
// You can construct a concrete instance of `CommonFeatureStateInput` via:
//
//          CommonFeatureStateArgs{...}
type CommonFeatureStateInput interface {
	pulumi.Input

	ToCommonFeatureStateOutput() CommonFeatureStateOutput
	ToCommonFeatureStateOutputWithContext(context.Context) CommonFeatureStateOutput
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateArgs struct {
	// Service Mesh-specific state.
	Servicemesh ServiceMeshFeatureStatePtrInput `pulumi:"servicemesh"`
	// Output only. The "running state" of the Feature in this Hub.
	State FeatureStateTypePtrInput `pulumi:"state"`
}

func (CommonFeatureStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureState)(nil)).Elem()
}

func (i CommonFeatureStateArgs) ToCommonFeatureStateOutput() CommonFeatureStateOutput {
	return i.ToCommonFeatureStateOutputWithContext(context.Background())
}

func (i CommonFeatureStateArgs) ToCommonFeatureStateOutputWithContext(ctx context.Context) CommonFeatureStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureStateOutput)
}

func (i CommonFeatureStateArgs) ToCommonFeatureStatePtrOutput() CommonFeatureStatePtrOutput {
	return i.ToCommonFeatureStatePtrOutputWithContext(context.Background())
}

func (i CommonFeatureStateArgs) ToCommonFeatureStatePtrOutputWithContext(ctx context.Context) CommonFeatureStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureStateOutput).ToCommonFeatureStatePtrOutputWithContext(ctx)
}

// CommonFeatureStatePtrInput is an input type that accepts CommonFeatureStateArgs, CommonFeatureStatePtr and CommonFeatureStatePtrOutput values.
// You can construct a concrete instance of `CommonFeatureStatePtrInput` via:
//
//          CommonFeatureStateArgs{...}
//
//  or:
//
//          nil
type CommonFeatureStatePtrInput interface {
	pulumi.Input

	ToCommonFeatureStatePtrOutput() CommonFeatureStatePtrOutput
	ToCommonFeatureStatePtrOutputWithContext(context.Context) CommonFeatureStatePtrOutput
}

type commonFeatureStatePtrType CommonFeatureStateArgs

func CommonFeatureStatePtr(v *CommonFeatureStateArgs) CommonFeatureStatePtrInput {
	return (*commonFeatureStatePtrType)(v)
}

func (*commonFeatureStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureState)(nil)).Elem()
}

func (i *commonFeatureStatePtrType) ToCommonFeatureStatePtrOutput() CommonFeatureStatePtrOutput {
	return i.ToCommonFeatureStatePtrOutputWithContext(context.Background())
}

func (i *commonFeatureStatePtrType) ToCommonFeatureStatePtrOutputWithContext(ctx context.Context) CommonFeatureStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureStatePtrOutput)
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateOutput struct{ *pulumi.OutputState }

func (CommonFeatureStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureState)(nil)).Elem()
}

func (o CommonFeatureStateOutput) ToCommonFeatureStateOutput() CommonFeatureStateOutput {
	return o
}

func (o CommonFeatureStateOutput) ToCommonFeatureStateOutputWithContext(ctx context.Context) CommonFeatureStateOutput {
	return o
}

func (o CommonFeatureStateOutput) ToCommonFeatureStatePtrOutput() CommonFeatureStatePtrOutput {
	return o.ToCommonFeatureStatePtrOutputWithContext(context.Background())
}

func (o CommonFeatureStateOutput) ToCommonFeatureStatePtrOutputWithContext(ctx context.Context) CommonFeatureStatePtrOutput {
	return o.ApplyT(func(v CommonFeatureState) *CommonFeatureState {
		return &v
	}).(CommonFeatureStatePtrOutput)
}

// Service Mesh-specific state.
func (o CommonFeatureStateOutput) Servicemesh() ServiceMeshFeatureStatePtrOutput {
	return o.ApplyT(func(v CommonFeatureState) *ServiceMeshFeatureState { return v.Servicemesh }).(ServiceMeshFeatureStatePtrOutput)
}

// Output only. The "running state" of the Feature in this Hub.
func (o CommonFeatureStateOutput) State() FeatureStateTypePtrOutput {
	return o.ApplyT(func(v CommonFeatureState) *FeatureStateType { return v.State }).(FeatureStateTypePtrOutput)
}

type CommonFeatureStatePtrOutput struct{ *pulumi.OutputState }

func (CommonFeatureStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureState)(nil)).Elem()
}

func (o CommonFeatureStatePtrOutput) ToCommonFeatureStatePtrOutput() CommonFeatureStatePtrOutput {
	return o
}

func (o CommonFeatureStatePtrOutput) ToCommonFeatureStatePtrOutputWithContext(ctx context.Context) CommonFeatureStatePtrOutput {
	return o
}

func (o CommonFeatureStatePtrOutput) Elem() CommonFeatureStateOutput {
	return o.ApplyT(func(v *CommonFeatureState) CommonFeatureState { return *v }).(CommonFeatureStateOutput)
}

// Service Mesh-specific state.
func (o CommonFeatureStatePtrOutput) Servicemesh() ServiceMeshFeatureStatePtrOutput {
	return o.ApplyT(func(v *CommonFeatureState) *ServiceMeshFeatureState {
		if v == nil {
			return nil
		}
		return v.Servicemesh
	}).(ServiceMeshFeatureStatePtrOutput)
}

// Output only. The "running state" of the Feature in this Hub.
func (o CommonFeatureStatePtrOutput) State() FeatureStateTypePtrOutput {
	return o.ApplyT(func(v *CommonFeatureState) *FeatureStateType {
		if v == nil {
			return nil
		}
		return v.State
	}).(FeatureStateTypePtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyT(func(v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr { return *v }).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceState struct {
	// The current state of the Feature resource in the Hub API.
	State *string `pulumi:"state"`
}

// FeatureResourceStateInput is an input type that accepts FeatureResourceStateArgs and FeatureResourceStateOutput values.
// You can construct a concrete instance of `FeatureResourceStateInput` via:
//
//          FeatureResourceStateArgs{...}
type FeatureResourceStateInput interface {
	pulumi.Input

	ToFeatureResourceStateOutput() FeatureResourceStateOutput
	ToFeatureResourceStateOutputWithContext(context.Context) FeatureResourceStateOutput
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateArgs struct {
	// The current state of the Feature resource in the Hub API.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (FeatureResourceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResourceState)(nil)).Elem()
}

func (i FeatureResourceStateArgs) ToFeatureResourceStateOutput() FeatureResourceStateOutput {
	return i.ToFeatureResourceStateOutputWithContext(context.Background())
}

func (i FeatureResourceStateArgs) ToFeatureResourceStateOutputWithContext(ctx context.Context) FeatureResourceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureResourceStateOutput)
}

func (i FeatureResourceStateArgs) ToFeatureResourceStatePtrOutput() FeatureResourceStatePtrOutput {
	return i.ToFeatureResourceStatePtrOutputWithContext(context.Background())
}

func (i FeatureResourceStateArgs) ToFeatureResourceStatePtrOutputWithContext(ctx context.Context) FeatureResourceStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureResourceStateOutput).ToFeatureResourceStatePtrOutputWithContext(ctx)
}

// FeatureResourceStatePtrInput is an input type that accepts FeatureResourceStateArgs, FeatureResourceStatePtr and FeatureResourceStatePtrOutput values.
// You can construct a concrete instance of `FeatureResourceStatePtrInput` via:
//
//          FeatureResourceStateArgs{...}
//
//  or:
//
//          nil
type FeatureResourceStatePtrInput interface {
	pulumi.Input

	ToFeatureResourceStatePtrOutput() FeatureResourceStatePtrOutput
	ToFeatureResourceStatePtrOutputWithContext(context.Context) FeatureResourceStatePtrOutput
}

type featureResourceStatePtrType FeatureResourceStateArgs

func FeatureResourceStatePtr(v *FeatureResourceStateArgs) FeatureResourceStatePtrInput {
	return (*featureResourceStatePtrType)(v)
}

func (*featureResourceStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureResourceState)(nil)).Elem()
}

func (i *featureResourceStatePtrType) ToFeatureResourceStatePtrOutput() FeatureResourceStatePtrOutput {
	return i.ToFeatureResourceStatePtrOutputWithContext(context.Background())
}

func (i *featureResourceStatePtrType) ToFeatureResourceStatePtrOutputWithContext(ctx context.Context) FeatureResourceStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureResourceStatePtrOutput)
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateOutput struct{ *pulumi.OutputState }

func (FeatureResourceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResourceState)(nil)).Elem()
}

func (o FeatureResourceStateOutput) ToFeatureResourceStateOutput() FeatureResourceStateOutput {
	return o
}

func (o FeatureResourceStateOutput) ToFeatureResourceStateOutputWithContext(ctx context.Context) FeatureResourceStateOutput {
	return o
}

func (o FeatureResourceStateOutput) ToFeatureResourceStatePtrOutput() FeatureResourceStatePtrOutput {
	return o.ToFeatureResourceStatePtrOutputWithContext(context.Background())
}

func (o FeatureResourceStateOutput) ToFeatureResourceStatePtrOutputWithContext(ctx context.Context) FeatureResourceStatePtrOutput {
	return o.ApplyT(func(v FeatureResourceState) *FeatureResourceState {
		return &v
	}).(FeatureResourceStatePtrOutput)
}

// The current state of the Feature resource in the Hub API.
func (o FeatureResourceStateOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureResourceState) *string { return v.State }).(pulumi.StringPtrOutput)
}

type FeatureResourceStatePtrOutput struct{ *pulumi.OutputState }

func (FeatureResourceStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureResourceState)(nil)).Elem()
}

func (o FeatureResourceStatePtrOutput) ToFeatureResourceStatePtrOutput() FeatureResourceStatePtrOutput {
	return o
}

func (o FeatureResourceStatePtrOutput) ToFeatureResourceStatePtrOutputWithContext(ctx context.Context) FeatureResourceStatePtrOutput {
	return o
}

func (o FeatureResourceStatePtrOutput) Elem() FeatureResourceStateOutput {
	return o.ApplyT(func(v *FeatureResourceState) FeatureResourceState { return *v }).(FeatureResourceStateOutput)
}

// The current state of the Feature resource in the Hub API.
func (o FeatureResourceStatePtrOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureResourceState) *string {
		if v == nil {
			return nil
		}
		return v.State
	}).(pulumi.StringPtrOutput)
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateType struct {
	// The high-level, machine-readable status of this Feature.
	Code *string `pulumi:"code"`
	// A human-readable description of the current status.
	Description *string `pulumi:"description"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime *string `pulumi:"updateTime"`
}

// FeatureStateTypeInput is an input type that accepts FeatureStateTypeArgs and FeatureStateTypeOutput values.
// You can construct a concrete instance of `FeatureStateTypeInput` via:
//
//          FeatureStateTypeArgs{...}
type FeatureStateTypeInput interface {
	pulumi.Input

	ToFeatureStateTypeOutput() FeatureStateTypeOutput
	ToFeatureStateTypeOutputWithContext(context.Context) FeatureStateTypeOutput
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateTypeArgs struct {
	// The high-level, machine-readable status of this Feature.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// A human-readable description of the current status.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
}

func (FeatureStateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStateType)(nil)).Elem()
}

func (i FeatureStateTypeArgs) ToFeatureStateTypeOutput() FeatureStateTypeOutput {
	return i.ToFeatureStateTypeOutputWithContext(context.Background())
}

func (i FeatureStateTypeArgs) ToFeatureStateTypeOutputWithContext(ctx context.Context) FeatureStateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStateTypeOutput)
}

func (i FeatureStateTypeArgs) ToFeatureStateTypePtrOutput() FeatureStateTypePtrOutput {
	return i.ToFeatureStateTypePtrOutputWithContext(context.Background())
}

func (i FeatureStateTypeArgs) ToFeatureStateTypePtrOutputWithContext(ctx context.Context) FeatureStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStateTypeOutput).ToFeatureStateTypePtrOutputWithContext(ctx)
}

// FeatureStateTypePtrInput is an input type that accepts FeatureStateTypeArgs, FeatureStateTypePtr and FeatureStateTypePtrOutput values.
// You can construct a concrete instance of `FeatureStateTypePtrInput` via:
//
//          FeatureStateTypeArgs{...}
//
//  or:
//
//          nil
type FeatureStateTypePtrInput interface {
	pulumi.Input

	ToFeatureStateTypePtrOutput() FeatureStateTypePtrOutput
	ToFeatureStateTypePtrOutputWithContext(context.Context) FeatureStateTypePtrOutput
}

type featureStateTypePtrType FeatureStateTypeArgs

func FeatureStateTypePtr(v *FeatureStateTypeArgs) FeatureStateTypePtrInput {
	return (*featureStateTypePtrType)(v)
}

func (*featureStateTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureStateType)(nil)).Elem()
}

func (i *featureStateTypePtrType) ToFeatureStateTypePtrOutput() FeatureStateTypePtrOutput {
	return i.ToFeatureStateTypePtrOutputWithContext(context.Background())
}

func (i *featureStateTypePtrType) ToFeatureStateTypePtrOutputWithContext(ctx context.Context) FeatureStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureStateTypePtrOutput)
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateTypeOutput struct{ *pulumi.OutputState }

func (FeatureStateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStateType)(nil)).Elem()
}

func (o FeatureStateTypeOutput) ToFeatureStateTypeOutput() FeatureStateTypeOutput {
	return o
}

func (o FeatureStateTypeOutput) ToFeatureStateTypeOutputWithContext(ctx context.Context) FeatureStateTypeOutput {
	return o
}

func (o FeatureStateTypeOutput) ToFeatureStateTypePtrOutput() FeatureStateTypePtrOutput {
	return o.ToFeatureStateTypePtrOutputWithContext(context.Background())
}

func (o FeatureStateTypeOutput) ToFeatureStateTypePtrOutputWithContext(ctx context.Context) FeatureStateTypePtrOutput {
	return o.ApplyT(func(v FeatureStateType) *FeatureStateType {
		return &v
	}).(FeatureStateTypePtrOutput)
}

// The high-level, machine-readable status of this Feature.
func (o FeatureStateTypeOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureStateType) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// A human-readable description of the current status.
func (o FeatureStateTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureStateType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The time this status and any related Feature-specific details were updated.
func (o FeatureStateTypeOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureStateType) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

type FeatureStateTypePtrOutput struct{ *pulumi.OutputState }

func (FeatureStateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureStateType)(nil)).Elem()
}

func (o FeatureStateTypePtrOutput) ToFeatureStateTypePtrOutput() FeatureStateTypePtrOutput {
	return o
}

func (o FeatureStateTypePtrOutput) ToFeatureStateTypePtrOutputWithContext(ctx context.Context) FeatureStateTypePtrOutput {
	return o
}

func (o FeatureStateTypePtrOutput) Elem() FeatureStateTypeOutput {
	return o.ApplyT(func(v *FeatureStateType) FeatureStateType { return *v }).(FeatureStateTypeOutput)
}

// The high-level, machine-readable status of this Feature.
func (o FeatureStateTypePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStateType) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// A human-readable description of the current status.
func (o FeatureStateTypePtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStateType) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// The time this status and any related Feature-specific details were updated.
func (o FeatureStateTypePtrOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureStateType) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTime
	}).(pulumi.StringPtrOutput)
}

// FeatureSpec contains the input for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpec struct {
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership *string `pulumi:"configMembership"`
}

// MultiClusterIngressFeatureSpecInput is an input type that accepts MultiClusterIngressFeatureSpecArgs and MultiClusterIngressFeatureSpecOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecInput` via:
//
//          MultiClusterIngressFeatureSpecArgs{...}
type MultiClusterIngressFeatureSpecInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput
	ToMultiClusterIngressFeatureSpecOutputWithContext(context.Context) MultiClusterIngressFeatureSpecOutput
}

// FeatureSpec contains the input for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecArgs struct {
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership pulumi.StringPtrInput `pulumi:"configMembership"`
}

func (MultiClusterIngressFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return i.ToMultiClusterIngressFeatureSpecOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput)
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput).ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx)
}

// MultiClusterIngressFeatureSpecPtrInput is an input type that accepts MultiClusterIngressFeatureSpecArgs, MultiClusterIngressFeatureSpecPtr and MultiClusterIngressFeatureSpecPtrOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecPtrInput` via:
//
//          MultiClusterIngressFeatureSpecArgs{...}
//
//  or:
//
//          nil
type MultiClusterIngressFeatureSpecPtrInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput
	ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Context) MultiClusterIngressFeatureSpecPtrOutput
}

type multiClusterIngressFeatureSpecPtrType MultiClusterIngressFeatureSpecArgs

func MultiClusterIngressFeatureSpecPtr(v *MultiClusterIngressFeatureSpecArgs) MultiClusterIngressFeatureSpecPtrInput {
	return (*multiClusterIngressFeatureSpecPtrType)(v)
}

func (*multiClusterIngressFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecPtrOutput)
}

// FeatureSpec contains the input for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *MultiClusterIngressFeatureSpec {
		return &v
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *string { return v.ConfigMembership }).(pulumi.StringPtrOutput)
}

type MultiClusterIngressFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) Elem() MultiClusterIngressFeatureSpecOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) MultiClusterIngressFeatureSpec { return *v }).(MultiClusterIngressFeatureSpecOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecPtrOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMembership
	}).(pulumi.StringPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type Policy struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs []AuditConfig `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings []Binding `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag *string `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version *int `pulumi:"version"`
}

// PolicyInput is an input type that accepts PolicyArgs and PolicyOutput values.
// You can construct a concrete instance of `PolicyInput` via:
//
//          PolicyArgs{...}
type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(context.Context) PolicyOutput
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyArgs struct {
	// Specifies cloud audit logging configuration for this policy.
	AuditConfigs AuditConfigArrayInput `pulumi:"auditConfigs"`
	// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
	Bindings BindingArrayInput `pulumi:"bindings"`
	// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
	Etag pulumi.StringPtrInput `pulumi:"etag"`
	// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Version pulumi.IntPtrInput `pulumi:"version"`
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i PolicyArgs) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

func (i PolicyArgs) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyArgs) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput).ToPolicyPtrOutputWithContext(ctx)
}

// PolicyPtrInput is an input type that accepts PolicyArgs, PolicyPtr and PolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPtrInput` via:
//
//          PolicyArgs{...}
//
//  or:
//
//          nil
type PolicyPtrInput interface {
	pulumi.Input

	ToPolicyPtrOutput() PolicyPtrOutput
	ToPolicyPtrOutputWithContext(context.Context) PolicyPtrOutput
}

type policyPtrType PolicyArgs

func PolicyPtr(v *PolicyArgs) PolicyPtrInput {
	return (*policyPtrType)(v)
}

func (*policyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *policyPtrType) ToPolicyPtrOutput() PolicyPtrOutput {
	return i.ToPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPtrType) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPtrOutput)
}

// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o.ToPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o.ApplyT(func(v Policy) *Policy {
		return &v
	}).(PolicyPtrOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v Policy) []AuditConfig { return v.AuditConfigs }).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v Policy) []Binding { return v.Bindings }).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Policy) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Policy) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type PolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyPtrOutput) ToPolicyPtrOutput() PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) ToPolicyPtrOutputWithContext(ctx context.Context) PolicyPtrOutput {
	return o
}

func (o PolicyPtrOutput) Elem() PolicyOutput {
	return o.ApplyT(func(v *Policy) Policy { return *v }).(PolicyOutput)
}

// Specifies cloud audit logging configuration for this policy.
func (o PolicyPtrOutput) AuditConfigs() AuditConfigArrayOutput {
	return o.ApplyT(func(v *Policy) []AuditConfig {
		if v == nil {
			return nil
		}
		return v.AuditConfigs
	}).(AuditConfigArrayOutput)
}

// Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
func (o PolicyPtrOutput) Bindings() BindingArrayOutput {
	return o.ApplyT(func(v *Policy) []Binding {
		if v == nil {
			return nil
		}
		return v.Bindings
	}).(BindingArrayOutput)
}

// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
func (o PolicyPtrOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) *string {
		if v == nil {
			return nil
		}
		return v.Etag
	}).(pulumi.StringPtrOutput)
}

// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o PolicyPtrOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) *int {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.IntPtrOutput)
}

// AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
type ServiceMeshAnalysisMessage struct {
	// A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
	Args map[string]string `pulumi:"args"`
	// A human readable description of what the error means. It is suitable for non-internationalize display purposes.
	Description *string `pulumi:"description"`
	// Details common to all types of Istio and ServiceMesh analysis messages.
	MessageBase *ServiceMeshAnalysisMessageBase `pulumi:"messageBase"`
	// A list of strings specifying the resource identifiers that were the cause of message generation. A "path" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
	ResourcePaths []string `pulumi:"resourcePaths"`
}

// ServiceMeshAnalysisMessageInput is an input type that accepts ServiceMeshAnalysisMessageArgs and ServiceMeshAnalysisMessageOutput values.
// You can construct a concrete instance of `ServiceMeshAnalysisMessageInput` via:
//
//          ServiceMeshAnalysisMessageArgs{...}
type ServiceMeshAnalysisMessageInput interface {
	pulumi.Input

	ToServiceMeshAnalysisMessageOutput() ServiceMeshAnalysisMessageOutput
	ToServiceMeshAnalysisMessageOutputWithContext(context.Context) ServiceMeshAnalysisMessageOutput
}

// AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
type ServiceMeshAnalysisMessageArgs struct {
	// A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
	Args pulumi.StringMapInput `pulumi:"args"`
	// A human readable description of what the error means. It is suitable for non-internationalize display purposes.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Details common to all types of Istio and ServiceMesh analysis messages.
	MessageBase ServiceMeshAnalysisMessageBasePtrInput `pulumi:"messageBase"`
	// A list of strings specifying the resource identifiers that were the cause of message generation. A "path" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
	ResourcePaths pulumi.StringArrayInput `pulumi:"resourcePaths"`
}

func (ServiceMeshAnalysisMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessage)(nil)).Elem()
}

func (i ServiceMeshAnalysisMessageArgs) ToServiceMeshAnalysisMessageOutput() ServiceMeshAnalysisMessageOutput {
	return i.ToServiceMeshAnalysisMessageOutputWithContext(context.Background())
}

func (i ServiceMeshAnalysisMessageArgs) ToServiceMeshAnalysisMessageOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageOutput)
}

// ServiceMeshAnalysisMessageArrayInput is an input type that accepts ServiceMeshAnalysisMessageArray and ServiceMeshAnalysisMessageArrayOutput values.
// You can construct a concrete instance of `ServiceMeshAnalysisMessageArrayInput` via:
//
//          ServiceMeshAnalysisMessageArray{ ServiceMeshAnalysisMessageArgs{...} }
type ServiceMeshAnalysisMessageArrayInput interface {
	pulumi.Input

	ToServiceMeshAnalysisMessageArrayOutput() ServiceMeshAnalysisMessageArrayOutput
	ToServiceMeshAnalysisMessageArrayOutputWithContext(context.Context) ServiceMeshAnalysisMessageArrayOutput
}

type ServiceMeshAnalysisMessageArray []ServiceMeshAnalysisMessageInput

func (ServiceMeshAnalysisMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceMeshAnalysisMessage)(nil)).Elem()
}

func (i ServiceMeshAnalysisMessageArray) ToServiceMeshAnalysisMessageArrayOutput() ServiceMeshAnalysisMessageArrayOutput {
	return i.ToServiceMeshAnalysisMessageArrayOutputWithContext(context.Background())
}

func (i ServiceMeshAnalysisMessageArray) ToServiceMeshAnalysisMessageArrayOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageArrayOutput)
}

// AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
type ServiceMeshAnalysisMessageOutput struct{ *pulumi.OutputState }

func (ServiceMeshAnalysisMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessage)(nil)).Elem()
}

func (o ServiceMeshAnalysisMessageOutput) ToServiceMeshAnalysisMessageOutput() ServiceMeshAnalysisMessageOutput {
	return o
}

func (o ServiceMeshAnalysisMessageOutput) ToServiceMeshAnalysisMessageOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageOutput {
	return o
}

// A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
func (o ServiceMeshAnalysisMessageOutput) Args() pulumi.StringMapOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessage) map[string]string { return v.Args }).(pulumi.StringMapOutput)
}

// A human readable description of what the error means. It is suitable for non-internationalize display purposes.
func (o ServiceMeshAnalysisMessageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessage) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Details common to all types of Istio and ServiceMesh analysis messages.
func (o ServiceMeshAnalysisMessageOutput) MessageBase() ServiceMeshAnalysisMessageBasePtrOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessage) *ServiceMeshAnalysisMessageBase { return v.MessageBase }).(ServiceMeshAnalysisMessageBasePtrOutput)
}

// A list of strings specifying the resource identifiers that were the cause of message generation. A "path" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE\/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
func (o ServiceMeshAnalysisMessageOutput) ResourcePaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessage) []string { return v.ResourcePaths }).(pulumi.StringArrayOutput)
}

type ServiceMeshAnalysisMessageArrayOutput struct{ *pulumi.OutputState }

func (ServiceMeshAnalysisMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceMeshAnalysisMessage)(nil)).Elem()
}

func (o ServiceMeshAnalysisMessageArrayOutput) ToServiceMeshAnalysisMessageArrayOutput() ServiceMeshAnalysisMessageArrayOutput {
	return o
}

func (o ServiceMeshAnalysisMessageArrayOutput) ToServiceMeshAnalysisMessageArrayOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageArrayOutput {
	return o
}

func (o ServiceMeshAnalysisMessageArrayOutput) Index(i pulumi.IntInput) ServiceMeshAnalysisMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceMeshAnalysisMessage {
		return vs[0].([]ServiceMeshAnalysisMessage)[vs[1].(int)]
	}).(ServiceMeshAnalysisMessageOutput)
}

// AnalysisMessageBase describes some common information that is needed for all messages.
type ServiceMeshAnalysisMessageBase struct {
	// A url pointing to the Service Mesh or Istio documentation for this specific error type.
	DocumentationUrl *string `pulumi:"documentationUrl"`
	// Represents how severe a message is.
	Level *string `pulumi:"level"`
	// Represents the specific type of a message.
	Type *ServiceMeshType `pulumi:"type"`
}

// ServiceMeshAnalysisMessageBaseInput is an input type that accepts ServiceMeshAnalysisMessageBaseArgs and ServiceMeshAnalysisMessageBaseOutput values.
// You can construct a concrete instance of `ServiceMeshAnalysisMessageBaseInput` via:
//
//          ServiceMeshAnalysisMessageBaseArgs{...}
type ServiceMeshAnalysisMessageBaseInput interface {
	pulumi.Input

	ToServiceMeshAnalysisMessageBaseOutput() ServiceMeshAnalysisMessageBaseOutput
	ToServiceMeshAnalysisMessageBaseOutputWithContext(context.Context) ServiceMeshAnalysisMessageBaseOutput
}

// AnalysisMessageBase describes some common information that is needed for all messages.
type ServiceMeshAnalysisMessageBaseArgs struct {
	// A url pointing to the Service Mesh or Istio documentation for this specific error type.
	DocumentationUrl pulumi.StringPtrInput `pulumi:"documentationUrl"`
	// Represents how severe a message is.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Represents the specific type of a message.
	Type ServiceMeshTypePtrInput `pulumi:"type"`
}

func (ServiceMeshAnalysisMessageBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessageBase)(nil)).Elem()
}

func (i ServiceMeshAnalysisMessageBaseArgs) ToServiceMeshAnalysisMessageBaseOutput() ServiceMeshAnalysisMessageBaseOutput {
	return i.ToServiceMeshAnalysisMessageBaseOutputWithContext(context.Background())
}

func (i ServiceMeshAnalysisMessageBaseArgs) ToServiceMeshAnalysisMessageBaseOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageBaseOutput)
}

func (i ServiceMeshAnalysisMessageBaseArgs) ToServiceMeshAnalysisMessageBasePtrOutput() ServiceMeshAnalysisMessageBasePtrOutput {
	return i.ToServiceMeshAnalysisMessageBasePtrOutputWithContext(context.Background())
}

func (i ServiceMeshAnalysisMessageBaseArgs) ToServiceMeshAnalysisMessageBasePtrOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageBaseOutput).ToServiceMeshAnalysisMessageBasePtrOutputWithContext(ctx)
}

// ServiceMeshAnalysisMessageBasePtrInput is an input type that accepts ServiceMeshAnalysisMessageBaseArgs, ServiceMeshAnalysisMessageBasePtr and ServiceMeshAnalysisMessageBasePtrOutput values.
// You can construct a concrete instance of `ServiceMeshAnalysisMessageBasePtrInput` via:
//
//          ServiceMeshAnalysisMessageBaseArgs{...}
//
//  or:
//
//          nil
type ServiceMeshAnalysisMessageBasePtrInput interface {
	pulumi.Input

	ToServiceMeshAnalysisMessageBasePtrOutput() ServiceMeshAnalysisMessageBasePtrOutput
	ToServiceMeshAnalysisMessageBasePtrOutputWithContext(context.Context) ServiceMeshAnalysisMessageBasePtrOutput
}

type serviceMeshAnalysisMessageBasePtrType ServiceMeshAnalysisMessageBaseArgs

func ServiceMeshAnalysisMessageBasePtr(v *ServiceMeshAnalysisMessageBaseArgs) ServiceMeshAnalysisMessageBasePtrInput {
	return (*serviceMeshAnalysisMessageBasePtrType)(v)
}

func (*serviceMeshAnalysisMessageBasePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshAnalysisMessageBase)(nil)).Elem()
}

func (i *serviceMeshAnalysisMessageBasePtrType) ToServiceMeshAnalysisMessageBasePtrOutput() ServiceMeshAnalysisMessageBasePtrOutput {
	return i.ToServiceMeshAnalysisMessageBasePtrOutputWithContext(context.Background())
}

func (i *serviceMeshAnalysisMessageBasePtrType) ToServiceMeshAnalysisMessageBasePtrOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBasePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshAnalysisMessageBasePtrOutput)
}

// AnalysisMessageBase describes some common information that is needed for all messages.
type ServiceMeshAnalysisMessageBaseOutput struct{ *pulumi.OutputState }

func (ServiceMeshAnalysisMessageBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshAnalysisMessageBase)(nil)).Elem()
}

func (o ServiceMeshAnalysisMessageBaseOutput) ToServiceMeshAnalysisMessageBaseOutput() ServiceMeshAnalysisMessageBaseOutput {
	return o
}

func (o ServiceMeshAnalysisMessageBaseOutput) ToServiceMeshAnalysisMessageBaseOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBaseOutput {
	return o
}

func (o ServiceMeshAnalysisMessageBaseOutput) ToServiceMeshAnalysisMessageBasePtrOutput() ServiceMeshAnalysisMessageBasePtrOutput {
	return o.ToServiceMeshAnalysisMessageBasePtrOutputWithContext(context.Background())
}

func (o ServiceMeshAnalysisMessageBaseOutput) ToServiceMeshAnalysisMessageBasePtrOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBasePtrOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageBase) *ServiceMeshAnalysisMessageBase {
		return &v
	}).(ServiceMeshAnalysisMessageBasePtrOutput)
}

// A url pointing to the Service Mesh or Istio documentation for this specific error type.
func (o ServiceMeshAnalysisMessageBaseOutput) DocumentationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageBase) *string { return v.DocumentationUrl }).(pulumi.StringPtrOutput)
}

// Represents how severe a message is.
func (o ServiceMeshAnalysisMessageBaseOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageBase) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Represents the specific type of a message.
func (o ServiceMeshAnalysisMessageBaseOutput) Type() ServiceMeshTypePtrOutput {
	return o.ApplyT(func(v ServiceMeshAnalysisMessageBase) *ServiceMeshType { return v.Type }).(ServiceMeshTypePtrOutput)
}

type ServiceMeshAnalysisMessageBasePtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshAnalysisMessageBasePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshAnalysisMessageBase)(nil)).Elem()
}

func (o ServiceMeshAnalysisMessageBasePtrOutput) ToServiceMeshAnalysisMessageBasePtrOutput() ServiceMeshAnalysisMessageBasePtrOutput {
	return o
}

func (o ServiceMeshAnalysisMessageBasePtrOutput) ToServiceMeshAnalysisMessageBasePtrOutputWithContext(ctx context.Context) ServiceMeshAnalysisMessageBasePtrOutput {
	return o
}

func (o ServiceMeshAnalysisMessageBasePtrOutput) Elem() ServiceMeshAnalysisMessageBaseOutput {
	return o.ApplyT(func(v *ServiceMeshAnalysisMessageBase) ServiceMeshAnalysisMessageBase { return *v }).(ServiceMeshAnalysisMessageBaseOutput)
}

// A url pointing to the Service Mesh or Istio documentation for this specific error type.
func (o ServiceMeshAnalysisMessageBasePtrOutput) DocumentationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMeshAnalysisMessageBase) *string {
		if v == nil {
			return nil
		}
		return v.DocumentationUrl
	}).(pulumi.StringPtrOutput)
}

// Represents how severe a message is.
func (o ServiceMeshAnalysisMessageBasePtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMeshAnalysisMessageBase) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Represents the specific type of a message.
func (o ServiceMeshAnalysisMessageBasePtrOutput) Type() ServiceMeshTypePtrOutput {
	return o.ApplyT(func(v *ServiceMeshAnalysisMessageBase) *ServiceMeshType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(ServiceMeshTypePtrOutput)
}

// FeatureState describes the state of the Service Mesh Hub Feature as analyzed by the Service Mesh Hub Controller, for the whole Hub.
type ServiceMeshFeatureState struct {
	// Output only. Results of running Service Mesh analyzers.
	AnalysisMessages []ServiceMeshAnalysisMessage `pulumi:"analysisMessages"`
}

// ServiceMeshFeatureStateInput is an input type that accepts ServiceMeshFeatureStateArgs and ServiceMeshFeatureStateOutput values.
// You can construct a concrete instance of `ServiceMeshFeatureStateInput` via:
//
//          ServiceMeshFeatureStateArgs{...}
type ServiceMeshFeatureStateInput interface {
	pulumi.Input

	ToServiceMeshFeatureStateOutput() ServiceMeshFeatureStateOutput
	ToServiceMeshFeatureStateOutputWithContext(context.Context) ServiceMeshFeatureStateOutput
}

// FeatureState describes the state of the Service Mesh Hub Feature as analyzed by the Service Mesh Hub Controller, for the whole Hub.
type ServiceMeshFeatureStateArgs struct {
	// Output only. Results of running Service Mesh analyzers.
	AnalysisMessages ServiceMeshAnalysisMessageArrayInput `pulumi:"analysisMessages"`
}

func (ServiceMeshFeatureStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshFeatureState)(nil)).Elem()
}

func (i ServiceMeshFeatureStateArgs) ToServiceMeshFeatureStateOutput() ServiceMeshFeatureStateOutput {
	return i.ToServiceMeshFeatureStateOutputWithContext(context.Background())
}

func (i ServiceMeshFeatureStateArgs) ToServiceMeshFeatureStateOutputWithContext(ctx context.Context) ServiceMeshFeatureStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshFeatureStateOutput)
}

func (i ServiceMeshFeatureStateArgs) ToServiceMeshFeatureStatePtrOutput() ServiceMeshFeatureStatePtrOutput {
	return i.ToServiceMeshFeatureStatePtrOutputWithContext(context.Background())
}

func (i ServiceMeshFeatureStateArgs) ToServiceMeshFeatureStatePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshFeatureStateOutput).ToServiceMeshFeatureStatePtrOutputWithContext(ctx)
}

// ServiceMeshFeatureStatePtrInput is an input type that accepts ServiceMeshFeatureStateArgs, ServiceMeshFeatureStatePtr and ServiceMeshFeatureStatePtrOutput values.
// You can construct a concrete instance of `ServiceMeshFeatureStatePtrInput` via:
//
//          ServiceMeshFeatureStateArgs{...}
//
//  or:
//
//          nil
type ServiceMeshFeatureStatePtrInput interface {
	pulumi.Input

	ToServiceMeshFeatureStatePtrOutput() ServiceMeshFeatureStatePtrOutput
	ToServiceMeshFeatureStatePtrOutputWithContext(context.Context) ServiceMeshFeatureStatePtrOutput
}

type serviceMeshFeatureStatePtrType ServiceMeshFeatureStateArgs

func ServiceMeshFeatureStatePtr(v *ServiceMeshFeatureStateArgs) ServiceMeshFeatureStatePtrInput {
	return (*serviceMeshFeatureStatePtrType)(v)
}

func (*serviceMeshFeatureStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshFeatureState)(nil)).Elem()
}

func (i *serviceMeshFeatureStatePtrType) ToServiceMeshFeatureStatePtrOutput() ServiceMeshFeatureStatePtrOutput {
	return i.ToServiceMeshFeatureStatePtrOutputWithContext(context.Background())
}

func (i *serviceMeshFeatureStatePtrType) ToServiceMeshFeatureStatePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshFeatureStatePtrOutput)
}

// FeatureState describes the state of the Service Mesh Hub Feature as analyzed by the Service Mesh Hub Controller, for the whole Hub.
type ServiceMeshFeatureStateOutput struct{ *pulumi.OutputState }

func (ServiceMeshFeatureStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshFeatureState)(nil)).Elem()
}

func (o ServiceMeshFeatureStateOutput) ToServiceMeshFeatureStateOutput() ServiceMeshFeatureStateOutput {
	return o
}

func (o ServiceMeshFeatureStateOutput) ToServiceMeshFeatureStateOutputWithContext(ctx context.Context) ServiceMeshFeatureStateOutput {
	return o
}

func (o ServiceMeshFeatureStateOutput) ToServiceMeshFeatureStatePtrOutput() ServiceMeshFeatureStatePtrOutput {
	return o.ToServiceMeshFeatureStatePtrOutputWithContext(context.Background())
}

func (o ServiceMeshFeatureStateOutput) ToServiceMeshFeatureStatePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStatePtrOutput {
	return o.ApplyT(func(v ServiceMeshFeatureState) *ServiceMeshFeatureState {
		return &v
	}).(ServiceMeshFeatureStatePtrOutput)
}

// Output only. Results of running Service Mesh analyzers.
func (o ServiceMeshFeatureStateOutput) AnalysisMessages() ServiceMeshAnalysisMessageArrayOutput {
	return o.ApplyT(func(v ServiceMeshFeatureState) []ServiceMeshAnalysisMessage { return v.AnalysisMessages }).(ServiceMeshAnalysisMessageArrayOutput)
}

type ServiceMeshFeatureStatePtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshFeatureStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshFeatureState)(nil)).Elem()
}

func (o ServiceMeshFeatureStatePtrOutput) ToServiceMeshFeatureStatePtrOutput() ServiceMeshFeatureStatePtrOutput {
	return o
}

func (o ServiceMeshFeatureStatePtrOutput) ToServiceMeshFeatureStatePtrOutputWithContext(ctx context.Context) ServiceMeshFeatureStatePtrOutput {
	return o
}

func (o ServiceMeshFeatureStatePtrOutput) Elem() ServiceMeshFeatureStateOutput {
	return o.ApplyT(func(v *ServiceMeshFeatureState) ServiceMeshFeatureState { return *v }).(ServiceMeshFeatureStateOutput)
}

// Output only. Results of running Service Mesh analyzers.
func (o ServiceMeshFeatureStatePtrOutput) AnalysisMessages() ServiceMeshAnalysisMessageArrayOutput {
	return o.ApplyT(func(v *ServiceMeshFeatureState) []ServiceMeshAnalysisMessage {
		if v == nil {
			return nil
		}
		return v.AnalysisMessages
	}).(ServiceMeshAnalysisMessageArrayOutput)
}

// A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type
type ServiceMeshType struct {
	// A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended to uniquely identify the message type. (e.g. "IST0001" is mapped to the "InternalError" message type.)
	Code *string `pulumi:"code"`
	// A human-readable name for the message type. e.g. "InternalError", "PodMissingProxy". This should be the same for all messages of the same type. (This corresponds to the `name` field in open-source Istio.)
	DisplayName *string `pulumi:"displayName"`
}

// ServiceMeshTypeInput is an input type that accepts ServiceMeshTypeArgs and ServiceMeshTypeOutput values.
// You can construct a concrete instance of `ServiceMeshTypeInput` via:
//
//          ServiceMeshTypeArgs{...}
type ServiceMeshTypeInput interface {
	pulumi.Input

	ToServiceMeshTypeOutput() ServiceMeshTypeOutput
	ToServiceMeshTypeOutputWithContext(context.Context) ServiceMeshTypeOutput
}

// A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type
type ServiceMeshTypeArgs struct {
	// A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended to uniquely identify the message type. (e.g. "IST0001" is mapped to the "InternalError" message type.)
	Code pulumi.StringPtrInput `pulumi:"code"`
	// A human-readable name for the message type. e.g. "InternalError", "PodMissingProxy". This should be the same for all messages of the same type. (This corresponds to the `name` field in open-source Istio.)
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
}

func (ServiceMeshTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshType)(nil)).Elem()
}

func (i ServiceMeshTypeArgs) ToServiceMeshTypeOutput() ServiceMeshTypeOutput {
	return i.ToServiceMeshTypeOutputWithContext(context.Background())
}

func (i ServiceMeshTypeArgs) ToServiceMeshTypeOutputWithContext(ctx context.Context) ServiceMeshTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshTypeOutput)
}

func (i ServiceMeshTypeArgs) ToServiceMeshTypePtrOutput() ServiceMeshTypePtrOutput {
	return i.ToServiceMeshTypePtrOutputWithContext(context.Background())
}

func (i ServiceMeshTypeArgs) ToServiceMeshTypePtrOutputWithContext(ctx context.Context) ServiceMeshTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshTypeOutput).ToServiceMeshTypePtrOutputWithContext(ctx)
}

// ServiceMeshTypePtrInput is an input type that accepts ServiceMeshTypeArgs, ServiceMeshTypePtr and ServiceMeshTypePtrOutput values.
// You can construct a concrete instance of `ServiceMeshTypePtrInput` via:
//
//          ServiceMeshTypeArgs{...}
//
//  or:
//
//          nil
type ServiceMeshTypePtrInput interface {
	pulumi.Input

	ToServiceMeshTypePtrOutput() ServiceMeshTypePtrOutput
	ToServiceMeshTypePtrOutputWithContext(context.Context) ServiceMeshTypePtrOutput
}

type serviceMeshTypePtrType ServiceMeshTypeArgs

func ServiceMeshTypePtr(v *ServiceMeshTypeArgs) ServiceMeshTypePtrInput {
	return (*serviceMeshTypePtrType)(v)
}

func (*serviceMeshTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshType)(nil)).Elem()
}

func (i *serviceMeshTypePtrType) ToServiceMeshTypePtrOutput() ServiceMeshTypePtrOutput {
	return i.ToServiceMeshTypePtrOutputWithContext(context.Background())
}

func (i *serviceMeshTypePtrType) ToServiceMeshTypePtrOutputWithContext(ctx context.Context) ServiceMeshTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMeshTypePtrOutput)
}

// A unique identifier for the type of message. Display_name is intended to be human-readable, code is intended to be machine readable. There should be a one-to-one mapping between display_name and code. (i.e. do not re-use display_names or codes between message types.) See istio.analysis.v1alpha1.AnalysisMessageBase.Type
type ServiceMeshTypeOutput struct{ *pulumi.OutputState }

func (ServiceMeshTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceMeshType)(nil)).Elem()
}

func (o ServiceMeshTypeOutput) ToServiceMeshTypeOutput() ServiceMeshTypeOutput {
	return o
}

func (o ServiceMeshTypeOutput) ToServiceMeshTypeOutputWithContext(ctx context.Context) ServiceMeshTypeOutput {
	return o
}

func (o ServiceMeshTypeOutput) ToServiceMeshTypePtrOutput() ServiceMeshTypePtrOutput {
	return o.ToServiceMeshTypePtrOutputWithContext(context.Background())
}

func (o ServiceMeshTypeOutput) ToServiceMeshTypePtrOutputWithContext(ctx context.Context) ServiceMeshTypePtrOutput {
	return o.ApplyT(func(v ServiceMeshType) *ServiceMeshType {
		return &v
	}).(ServiceMeshTypePtrOutput)
}

// A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended to uniquely identify the message type. (e.g. "IST0001" is mapped to the "InternalError" message type.)
func (o ServiceMeshTypeOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceMeshType) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// A human-readable name for the message type. e.g. "InternalError", "PodMissingProxy". This should be the same for all messages of the same type. (This corresponds to the `name` field in open-source Istio.)
func (o ServiceMeshTypeOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceMeshType) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

type ServiceMeshTypePtrOutput struct{ *pulumi.OutputState }

func (ServiceMeshTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMeshType)(nil)).Elem()
}

func (o ServiceMeshTypePtrOutput) ToServiceMeshTypePtrOutput() ServiceMeshTypePtrOutput {
	return o
}

func (o ServiceMeshTypePtrOutput) ToServiceMeshTypePtrOutputWithContext(ctx context.Context) ServiceMeshTypePtrOutput {
	return o
}

func (o ServiceMeshTypePtrOutput) Elem() ServiceMeshTypeOutput {
	return o.ApplyT(func(v *ServiceMeshType) ServiceMeshType { return *v }).(ServiceMeshTypeOutput)
}

// A 7 character code matching `^IST[0-9]{4}$` or `^ASM[0-9]{4}$`, intended to uniquely identify the message type. (e.g. "IST0001" is mapped to the "InternalError" message type.)
func (o ServiceMeshTypePtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMeshType) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// A human-readable name for the message type. e.g. "InternalError", "PodMissingProxy". This should be the same for all messages of the same type. (This corresponds to the `name` field in open-source Istio.)
func (o ServiceMeshTypePtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMeshType) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(CloudAuditLoggingFeatureSpecOutput{})
	pulumi.RegisterOutputType(CloudAuditLoggingFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(CommonFeatureStateOutput{})
	pulumi.RegisterOutputType(CommonFeatureStatePtrOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(FeatureResourceStateOutput{})
	pulumi.RegisterOutputType(FeatureResourceStatePtrOutput{})
	pulumi.RegisterOutputType(FeatureStateTypeOutput{})
	pulumi.RegisterOutputType(FeatureStateTypePtrOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyPtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshAnalysisMessageOutput{})
	pulumi.RegisterOutputType(ServiceMeshAnalysisMessageArrayOutput{})
	pulumi.RegisterOutputType(ServiceMeshAnalysisMessageBaseOutput{})
	pulumi.RegisterOutputType(ServiceMeshAnalysisMessageBasePtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshFeatureStateOutput{})
	pulumi.RegisterOutputType(ServiceMeshFeatureStatePtrOutput{})
	pulumi.RegisterOutputType(ServiceMeshTypeOutput{})
	pulumi.RegisterOutputType(ServiceMeshTypePtrOutput{})
}
