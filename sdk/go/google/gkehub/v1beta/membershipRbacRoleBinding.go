// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Membership RBACRoleBinding.
// Auto-naming is currently not supported for this resource.
type MembershipRbacRoleBinding struct {
	pulumi.CustomResourceState

	// When the rbacrolebinding was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// When the rbacrolebinding was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringOutput `pulumi:"group"`
	// Optional. Labels for this RBACRolebinding.
	Labels       pulumi.StringMapOutput `pulumi:"labels"`
	Location     pulumi.StringOutput    `pulumi:"location"`
	MembershipId pulumi.StringOutput    `pulumi:"membershipId"`
	// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
	RbacrolebindingId pulumi.StringOutput `pulumi:"rbacrolebindingId"`
	// Role to bind to the principal
	Role RoleResponseOutput `pulumi:"role"`
	// State of the rbacrolebinding resource.
	State RBACRoleBindingLifecycleStateResponseOutput `pulumi:"state"`
	// Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// When the rbacrolebinding was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
	User pulumi.StringOutput `pulumi:"user"`
}

// NewMembershipRbacRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewMembershipRbacRoleBinding(ctx *pulumi.Context,
	name string, args *MembershipRbacRoleBindingArgs, opts ...pulumi.ResourceOption) (*MembershipRbacRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MembershipId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipId'")
	}
	if args.RbacrolebindingId == nil {
		return nil, errors.New("invalid value for required argument 'RbacrolebindingId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"membershipId",
		"project",
		"rbacrolebindingId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MembershipRbacRoleBinding
	err := ctx.RegisterResource("google-native:gkehub/v1beta:MembershipRbacRoleBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMembershipRbacRoleBinding gets an existing MembershipRbacRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMembershipRbacRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MembershipRbacRoleBindingState, opts ...pulumi.ResourceOption) (*MembershipRbacRoleBinding, error) {
	var resource MembershipRbacRoleBinding
	err := ctx.ReadResource("google-native:gkehub/v1beta:MembershipRbacRoleBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MembershipRbacRoleBinding resources.
type membershipRbacRoleBindingState struct {
}

type MembershipRbacRoleBindingState struct {
}

func (MembershipRbacRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipRbacRoleBindingState)(nil)).Elem()
}

type membershipRbacRoleBindingArgs struct {
	// group is the group, as seen by the kubernetes cluster.
	Group *string `pulumi:"group"`
	// Optional. Labels for this RBACRolebinding.
	Labels       map[string]string `pulumi:"labels"`
	Location     *string           `pulumi:"location"`
	MembershipId string            `pulumi:"membershipId"`
	// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
	RbacrolebindingId string `pulumi:"rbacrolebindingId"`
	// Role to bind to the principal
	Role Role `pulumi:"role"`
	// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a MembershipRbacRoleBinding resource.
type MembershipRbacRoleBindingArgs struct {
	// group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrInput
	// Optional. Labels for this RBACRolebinding.
	Labels       pulumi.StringMapInput
	Location     pulumi.StringPtrInput
	MembershipId pulumi.StringInput
	// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
	RbacrolebindingId pulumi.StringInput
	// Role to bind to the principal
	Role RoleInput
	// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (MembershipRbacRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*membershipRbacRoleBindingArgs)(nil)).Elem()
}

type MembershipRbacRoleBindingInput interface {
	pulumi.Input

	ToMembershipRbacRoleBindingOutput() MembershipRbacRoleBindingOutput
	ToMembershipRbacRoleBindingOutputWithContext(ctx context.Context) MembershipRbacRoleBindingOutput
}

func (*MembershipRbacRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipRbacRoleBinding)(nil)).Elem()
}

func (i *MembershipRbacRoleBinding) ToMembershipRbacRoleBindingOutput() MembershipRbacRoleBindingOutput {
	return i.ToMembershipRbacRoleBindingOutputWithContext(context.Background())
}

func (i *MembershipRbacRoleBinding) ToMembershipRbacRoleBindingOutputWithContext(ctx context.Context) MembershipRbacRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MembershipRbacRoleBindingOutput)
}

func (i *MembershipRbacRoleBinding) ToOutput(ctx context.Context) pulumix.Output[*MembershipRbacRoleBinding] {
	return pulumix.Output[*MembershipRbacRoleBinding]{
		OutputState: i.ToMembershipRbacRoleBindingOutputWithContext(ctx).OutputState,
	}
}

type MembershipRbacRoleBindingOutput struct{ *pulumi.OutputState }

func (MembershipRbacRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MembershipRbacRoleBinding)(nil)).Elem()
}

func (o MembershipRbacRoleBindingOutput) ToMembershipRbacRoleBindingOutput() MembershipRbacRoleBindingOutput {
	return o
}

func (o MembershipRbacRoleBindingOutput) ToMembershipRbacRoleBindingOutputWithContext(ctx context.Context) MembershipRbacRoleBindingOutput {
	return o
}

func (o MembershipRbacRoleBindingOutput) ToOutput(ctx context.Context) pulumix.Output[*MembershipRbacRoleBinding] {
	return pulumix.Output[*MembershipRbacRoleBinding]{
		OutputState: o.OutputState,
	}
}

// When the rbacrolebinding was created.
func (o MembershipRbacRoleBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// When the rbacrolebinding was deleted.
func (o MembershipRbacRoleBindingOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// group is the group, as seen by the kubernetes cluster.
func (o MembershipRbacRoleBindingOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// Optional. Labels for this RBACRolebinding.
func (o MembershipRbacRoleBindingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o MembershipRbacRoleBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

func (o MembershipRbacRoleBindingOutput) MembershipId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.MembershipId }).(pulumi.StringOutput)
}

// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
func (o MembershipRbacRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MembershipRbacRoleBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
func (o MembershipRbacRoleBindingOutput) RbacrolebindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.RbacrolebindingId }).(pulumi.StringOutput)
}

// Role to bind to the principal
func (o MembershipRbacRoleBindingOutput) Role() RoleResponseOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) RoleResponseOutput { return v.Role }).(RoleResponseOutput)
}

// State of the rbacrolebinding resource.
func (o MembershipRbacRoleBindingOutput) State() RBACRoleBindingLifecycleStateResponseOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) RBACRoleBindingLifecycleStateResponseOutput { return v.State }).(RBACRoleBindingLifecycleStateResponseOutput)
}

// Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.
func (o MembershipRbacRoleBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// When the rbacrolebinding was last updated.
func (o MembershipRbacRoleBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
func (o MembershipRbacRoleBindingOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *MembershipRbacRoleBinding) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MembershipRbacRoleBindingInput)(nil)).Elem(), &MembershipRbacRoleBinding{})
	pulumi.RegisterOutputType(MembershipRbacRoleBindingOutput{})
}
