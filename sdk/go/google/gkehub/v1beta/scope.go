// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Scope.
// Auto-naming is currently not supported for this resource.
type Scope struct {
	pulumi.CustomResourceState

	// When the scope was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// When the scope was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Optional. Labels for this Scope.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapOutput `pulumi:"namespaceLabels"`
	Project         pulumi.StringOutput    `pulumi:"project"`
	// Required. Client chosen ID for the Scope. `scope_id` must be a ????
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// State of the scope resource.
	State ScopeLifecycleStateResponseOutput `pulumi:"state"`
	// Google-generated UUID for this resource. This is unique across all scope resources. If a scope resource is deleted and another resource with the same name is created, it gets a different uid.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// When the scope was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewScope registers a new resource with the given unique name, arguments, and options.
func NewScope(ctx *pulumi.Context,
	name string, args *ScopeArgs, opts ...pulumi.ResourceOption) (*Scope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"scopeId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Scope
	err := ctx.RegisterResource("google-native:gkehub/v1beta:Scope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScope gets an existing Scope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeState, opts ...pulumi.ResourceOption) (*Scope, error) {
	var resource Scope
	err := ctx.ReadResource("google-native:gkehub/v1beta:Scope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Scope resources.
type scopeState struct {
}

type ScopeState struct {
}

func (ScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeState)(nil)).Elem()
}

type scopeArgs struct {
	// Optional. Labels for this Scope.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
	Name *string `pulumi:"name"`
	// Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels map[string]string `pulumi:"namespaceLabels"`
	Project         *string           `pulumi:"project"`
	// Required. Client chosen ID for the Scope. `scope_id` must be a ????
	ScopeId string `pulumi:"scopeId"`
}

// The set of arguments for constructing a Scope resource.
type ScopeArgs struct {
	// Optional. Labels for this Scope.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
	Name pulumi.StringPtrInput
	// Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
	NamespaceLabels pulumi.StringMapInput
	Project         pulumi.StringPtrInput
	// Required. Client chosen ID for the Scope. `scope_id` must be a ????
	ScopeId pulumi.StringInput
}

func (ScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeArgs)(nil)).Elem()
}

type ScopeInput interface {
	pulumi.Input

	ToScopeOutput() ScopeOutput
	ToScopeOutputWithContext(ctx context.Context) ScopeOutput
}

func (*Scope) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (i *Scope) ToScopeOutput() ScopeOutput {
	return i.ToScopeOutputWithContext(context.Background())
}

func (i *Scope) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeOutput)
}

type ScopeOutput struct{ *pulumi.OutputState }

func (ScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scope)(nil)).Elem()
}

func (o ScopeOutput) ToScopeOutput() ScopeOutput {
	return o
}

func (o ScopeOutput) ToScopeOutputWithContext(ctx context.Context) ScopeOutput {
	return o
}

// When the scope was created.
func (o ScopeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// When the scope was deleted.
func (o ScopeOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Optional. Labels for this Scope.
func (o ScopeOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ScopeOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`
func (o ScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.
func (o ScopeOutput) NamespaceLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringMapOutput { return v.NamespaceLabels }).(pulumi.StringMapOutput)
}

func (o ScopeOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. Client chosen ID for the Scope. `scope_id` must be a ????
func (o ScopeOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// State of the scope resource.
func (o ScopeOutput) State() ScopeLifecycleStateResponseOutput {
	return o.ApplyT(func(v *Scope) ScopeLifecycleStateResponseOutput { return v.State }).(ScopeLifecycleStateResponseOutput)
}

// Google-generated UUID for this resource. This is unique across all scope resources. If a scope resource is deleted and another resource with the same name is created, it gets a different uid.
func (o ScopeOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// When the scope was last updated.
func (o ScopeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Scope) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeInput)(nil)).Elem(), &Scope{})
	pulumi.RegisterOutputType(ScopeOutput{})
}
