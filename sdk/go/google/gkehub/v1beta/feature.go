// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Adds a new Feature.
type Feature struct {
	pulumi.CustomResourceState
}

// NewFeature registers a new resource with the given unique name, arguments, and options.
func NewFeature(ctx *pulumi.Context,
	name string, args *FeatureArgs, opts ...pulumi.ResourceOption) (*Feature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeaturesId == nil {
		return nil, errors.New("invalid value for required argument 'FeaturesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource Feature
	err := ctx.RegisterResource("google-cloud:gkehub/v1beta:Feature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeature gets an existing Feature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureState, opts ...pulumi.ResourceOption) (*Feature, error) {
	var resource Feature
	err := ctx.ReadResource("google-cloud:gkehub/v1beta:Feature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feature resources.
type featureState struct {
}

type FeatureState struct {
}

func (FeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureState)(nil)).Elem()
}

type featureArgs struct {
	// Output only. When the Feature resource was created.
	CreateTime *string `pulumi:"createTime"`
	// Output only. When the Feature resource was deleted.
	DeleteTime *string `pulumi:"deleteTime"`
	FeaturesId string  `pulumi:"featuresId"`
	// GCP labels for this Feature.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
	MembershipSpecs map[string]string `pulumi:"membershipSpecs"`
	// Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
	MembershipStates map[string]string `pulumi:"membershipStates"`
	// Output only. The full, unique name of this Feature resource in the format `projects/*/locations/global/features/*`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// Output only. State of the Feature resource itself.
	ResourceState *FeatureResourceState `pulumi:"resourceState"`
	// Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
	Spec *CommonFeatureSpec `pulumi:"spec"`
	// Output only. The Hub-wide Feature state.
	State *CommonFeatureState `pulumi:"state"`
	// Output only. When the Feature resource was last updated.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a Feature resource.
type FeatureArgs struct {
	// Output only. When the Feature resource was created.
	CreateTime pulumi.StringPtrInput
	// Output only. When the Feature resource was deleted.
	DeleteTime pulumi.StringPtrInput
	FeaturesId pulumi.StringInput
	// GCP labels for this Feature.
	Labels pulumi.StringMapInput
	// Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
	MembershipSpecs pulumi.StringMapInput
	// Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
	MembershipStates pulumi.StringMapInput
	// Output only. The full, unique name of this Feature resource in the format `projects/*/locations/global/features/*`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// Output only. State of the Feature resource itself.
	ResourceState FeatureResourceStatePtrInput
	// Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
	Spec CommonFeatureSpecPtrInput
	// Output only. The Hub-wide Feature state.
	State CommonFeatureStatePtrInput
	// Output only. When the Feature resource was last updated.
	UpdateTime pulumi.StringPtrInput
}

func (FeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureArgs)(nil)).Elem()
}

type FeatureInput interface {
	pulumi.Input

	ToFeatureOutput() FeatureOutput
	ToFeatureOutputWithContext(ctx context.Context) FeatureOutput
}

func (*Feature) ElementType() reflect.Type {
	return reflect.TypeOf((*Feature)(nil))
}

func (i *Feature) ToFeatureOutput() FeatureOutput {
	return i.ToFeatureOutputWithContext(context.Background())
}

func (i *Feature) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOutput)
}

type FeatureOutput struct {
	*pulumi.OutputState
}

func (FeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Feature)(nil))
}

func (o FeatureOutput) ToFeatureOutput() FeatureOutput {
	return o
}

func (o FeatureOutput) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FeatureOutput{})
}
