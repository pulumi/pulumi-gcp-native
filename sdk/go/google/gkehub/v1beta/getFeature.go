// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single Feature.
func LookupFeature(ctx *pulumi.Context, args *LookupFeatureArgs, opts ...pulumi.InvokeOption) (*LookupFeatureResult, error) {
	var rv LookupFeatureResult
	err := ctx.Invoke("google-native:gkehub/v1beta:getFeature", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFeatureArgs struct {
	FeatureId string `pulumi:"featureId"`
	Location  string `pulumi:"location"`
	Project   string `pulumi:"project"`
}

type LookupFeatureResult struct {
	// When the Feature resource was created.
	CreateTime string `pulumi:"createTime"`
	// When the Feature resource was deleted.
	DeleteTime string `pulumi:"deleteTime"`
	// GCP labels for this Feature.
	Labels map[string]string `pulumi:"labels"`
	// Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
	MembershipSpecs map[string]string `pulumi:"membershipSpecs"`
	// Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: projects/{p}/locations/{l}/memberships/{m} Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
	MembershipStates map[string]string `pulumi:"membershipStates"`
	// The full, unique name of this Feature resource in the format `projects/*/locations/*/features/*`.
	Name string `pulumi:"name"`
	// State of the Feature resource itself.
	ResourceState FeatureResourceStateResponse `pulumi:"resourceState"`
	// Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.
	Spec CommonFeatureSpecResponse `pulumi:"spec"`
	// The Hub-wide Feature state.
	State CommonFeatureStateResponse `pulumi:"state"`
	// When the Feature resource was last updated.
	UpdateTime string `pulumi:"updateTime"`
}
