// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Scope RBACRoleBinding.
// Auto-naming is currently not supported for this resource.
type ScopeRbacRoleBinding struct {
	pulumi.CustomResourceState

	// When the rbacrolebinding was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// When the rbacrolebinding was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringOutput `pulumi:"group"`
	// Optional. Labels for this RBACRolebinding.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
	RbacrolebindingId pulumi.StringOutput `pulumi:"rbacrolebindingId"`
	// Role to bind to the principal
	Role    RoleResponseOutput  `pulumi:"role"`
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// State of the rbacrolebinding resource.
	State RBACRoleBindingLifecycleStateResponseOutput `pulumi:"state"`
	// Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// When the rbacrolebinding was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
	User pulumi.StringOutput `pulumi:"user"`
}

// NewScopeRbacRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewScopeRbacRoleBinding(ctx *pulumi.Context,
	name string, args *ScopeRbacRoleBindingArgs, opts ...pulumi.ResourceOption) (*ScopeRbacRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RbacrolebindingId == nil {
		return nil, errors.New("invalid value for required argument 'RbacrolebindingId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"rbacrolebindingId",
		"scopeId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScopeRbacRoleBinding
	err := ctx.RegisterResource("google-native:gkehub/v1beta:ScopeRbacRoleBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScopeRbacRoleBinding gets an existing ScopeRbacRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScopeRbacRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScopeRbacRoleBindingState, opts ...pulumi.ResourceOption) (*ScopeRbacRoleBinding, error) {
	var resource ScopeRbacRoleBinding
	err := ctx.ReadResource("google-native:gkehub/v1beta:ScopeRbacRoleBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScopeRbacRoleBinding resources.
type scopeRbacRoleBindingState struct {
}

type ScopeRbacRoleBindingState struct {
}

func (ScopeRbacRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeRbacRoleBindingState)(nil)).Elem()
}

type scopeRbacRoleBindingArgs struct {
	// group is the group, as seen by the kubernetes cluster.
	Group *string `pulumi:"group"`
	// Optional. Labels for this RBACRolebinding.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
	RbacrolebindingId string `pulumi:"rbacrolebindingId"`
	// Role to bind to the principal
	Role    Role   `pulumi:"role"`
	ScopeId string `pulumi:"scopeId"`
	// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a ScopeRbacRoleBinding resource.
type ScopeRbacRoleBindingArgs struct {
	// group is the group, as seen by the kubernetes cluster.
	Group pulumi.StringPtrInput
	// Optional. Labels for this RBACRolebinding.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
	RbacrolebindingId pulumi.StringInput
	// Role to bind to the principal
	Role    RoleInput
	ScopeId pulumi.StringInput
	// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
	User pulumi.StringPtrInput
}

func (ScopeRbacRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scopeRbacRoleBindingArgs)(nil)).Elem()
}

type ScopeRbacRoleBindingInput interface {
	pulumi.Input

	ToScopeRbacRoleBindingOutput() ScopeRbacRoleBindingOutput
	ToScopeRbacRoleBindingOutputWithContext(ctx context.Context) ScopeRbacRoleBindingOutput
}

func (*ScopeRbacRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeRbacRoleBinding)(nil)).Elem()
}

func (i *ScopeRbacRoleBinding) ToScopeRbacRoleBindingOutput() ScopeRbacRoleBindingOutput {
	return i.ToScopeRbacRoleBindingOutputWithContext(context.Background())
}

func (i *ScopeRbacRoleBinding) ToScopeRbacRoleBindingOutputWithContext(ctx context.Context) ScopeRbacRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScopeRbacRoleBindingOutput)
}

type ScopeRbacRoleBindingOutput struct{ *pulumi.OutputState }

func (ScopeRbacRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScopeRbacRoleBinding)(nil)).Elem()
}

func (o ScopeRbacRoleBindingOutput) ToScopeRbacRoleBindingOutput() ScopeRbacRoleBindingOutput {
	return o
}

func (o ScopeRbacRoleBindingOutput) ToScopeRbacRoleBindingOutputWithContext(ctx context.Context) ScopeRbacRoleBindingOutput {
	return o
}

// When the rbacrolebinding was created.
func (o ScopeRbacRoleBindingOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// When the rbacrolebinding was deleted.
func (o ScopeRbacRoleBindingOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// group is the group, as seen by the kubernetes cluster.
func (o ScopeRbacRoleBindingOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// Optional. Labels for this RBACRolebinding.
func (o ScopeRbacRoleBindingOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ScopeRbacRoleBindingOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`
func (o ScopeRbacRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ScopeRbacRoleBindingOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. Client chosen ID for the RBACRoleBinding. `rbacrolebinding_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.
func (o ScopeRbacRoleBindingOutput) RbacrolebindingId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.RbacrolebindingId }).(pulumi.StringOutput)
}

// Role to bind to the principal
func (o ScopeRbacRoleBindingOutput) Role() RoleResponseOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) RoleResponseOutput { return v.Role }).(RoleResponseOutput)
}

func (o ScopeRbacRoleBindingOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// State of the rbacrolebinding resource.
func (o ScopeRbacRoleBindingOutput) State() RBACRoleBindingLifecycleStateResponseOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) RBACRoleBindingLifecycleStateResponseOutput { return v.State }).(RBACRoleBindingLifecycleStateResponseOutput)
}

// Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.
func (o ScopeRbacRoleBindingOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// When the rbacrolebinding was last updated.
func (o ScopeRbacRoleBindingOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// user is the name of the user as seen by the kubernetes cluster, example "alice" or "alice@domain.tld"
func (o ScopeRbacRoleBindingOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *ScopeRbacRoleBinding) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScopeRbacRoleBindingInput)(nil)).Elem(), &ScopeRbacRoleBinding{})
	pulumi.RegisterOutputType(ScopeRbacRoleBindingOutput{})
}
