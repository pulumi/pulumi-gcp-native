// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **Anthos Observability**: Spec
type AnthosObservabilityFeatureSpec struct {
	// default membership spec for unconfigured memberships
	DefaultMembershipSpec *AnthosObservabilityMembershipSpec `pulumi:"defaultMembershipSpec"`
}

// AnthosObservabilityFeatureSpecInput is an input type that accepts AnthosObservabilityFeatureSpecArgs and AnthosObservabilityFeatureSpecOutput values.
// You can construct a concrete instance of `AnthosObservabilityFeatureSpecInput` via:
//
//          AnthosObservabilityFeatureSpecArgs{...}
type AnthosObservabilityFeatureSpecInput interface {
	pulumi.Input

	ToAnthosObservabilityFeatureSpecOutput() AnthosObservabilityFeatureSpecOutput
	ToAnthosObservabilityFeatureSpecOutputWithContext(context.Context) AnthosObservabilityFeatureSpecOutput
}

// **Anthos Observability**: Spec
type AnthosObservabilityFeatureSpecArgs struct {
	// default membership spec for unconfigured memberships
	DefaultMembershipSpec AnthosObservabilityMembershipSpecPtrInput `pulumi:"defaultMembershipSpec"`
}

func (AnthosObservabilityFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosObservabilityFeatureSpec)(nil)).Elem()
}

func (i AnthosObservabilityFeatureSpecArgs) ToAnthosObservabilityFeatureSpecOutput() AnthosObservabilityFeatureSpecOutput {
	return i.ToAnthosObservabilityFeatureSpecOutputWithContext(context.Background())
}

func (i AnthosObservabilityFeatureSpecArgs) ToAnthosObservabilityFeatureSpecOutputWithContext(ctx context.Context) AnthosObservabilityFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosObservabilityFeatureSpecOutput)
}

func (i AnthosObservabilityFeatureSpecArgs) ToAnthosObservabilityFeatureSpecPtrOutput() AnthosObservabilityFeatureSpecPtrOutput {
	return i.ToAnthosObservabilityFeatureSpecPtrOutputWithContext(context.Background())
}

func (i AnthosObservabilityFeatureSpecArgs) ToAnthosObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosObservabilityFeatureSpecOutput).ToAnthosObservabilityFeatureSpecPtrOutputWithContext(ctx)
}

// AnthosObservabilityFeatureSpecPtrInput is an input type that accepts AnthosObservabilityFeatureSpecArgs, AnthosObservabilityFeatureSpecPtr and AnthosObservabilityFeatureSpecPtrOutput values.
// You can construct a concrete instance of `AnthosObservabilityFeatureSpecPtrInput` via:
//
//          AnthosObservabilityFeatureSpecArgs{...}
//
//  or:
//
//          nil
type AnthosObservabilityFeatureSpecPtrInput interface {
	pulumi.Input

	ToAnthosObservabilityFeatureSpecPtrOutput() AnthosObservabilityFeatureSpecPtrOutput
	ToAnthosObservabilityFeatureSpecPtrOutputWithContext(context.Context) AnthosObservabilityFeatureSpecPtrOutput
}

type anthosObservabilityFeatureSpecPtrType AnthosObservabilityFeatureSpecArgs

func AnthosObservabilityFeatureSpecPtr(v *AnthosObservabilityFeatureSpecArgs) AnthosObservabilityFeatureSpecPtrInput {
	return (*anthosObservabilityFeatureSpecPtrType)(v)
}

func (*anthosObservabilityFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosObservabilityFeatureSpec)(nil)).Elem()
}

func (i *anthosObservabilityFeatureSpecPtrType) ToAnthosObservabilityFeatureSpecPtrOutput() AnthosObservabilityFeatureSpecPtrOutput {
	return i.ToAnthosObservabilityFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *anthosObservabilityFeatureSpecPtrType) ToAnthosObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosObservabilityFeatureSpecPtrOutput)
}

// **Anthos Observability**: Spec
type AnthosObservabilityFeatureSpecOutput struct{ *pulumi.OutputState }

func (AnthosObservabilityFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosObservabilityFeatureSpec)(nil)).Elem()
}

func (o AnthosObservabilityFeatureSpecOutput) ToAnthosObservabilityFeatureSpecOutput() AnthosObservabilityFeatureSpecOutput {
	return o
}

func (o AnthosObservabilityFeatureSpecOutput) ToAnthosObservabilityFeatureSpecOutputWithContext(ctx context.Context) AnthosObservabilityFeatureSpecOutput {
	return o
}

func (o AnthosObservabilityFeatureSpecOutput) ToAnthosObservabilityFeatureSpecPtrOutput() AnthosObservabilityFeatureSpecPtrOutput {
	return o.ToAnthosObservabilityFeatureSpecPtrOutputWithContext(context.Background())
}

func (o AnthosObservabilityFeatureSpecOutput) ToAnthosObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnthosObservabilityFeatureSpec) *AnthosObservabilityFeatureSpec {
		return &v
	}).(AnthosObservabilityFeatureSpecPtrOutput)
}

// default membership spec for unconfigured memberships
func (o AnthosObservabilityFeatureSpecOutput) DefaultMembershipSpec() AnthosObservabilityMembershipSpecPtrOutput {
	return o.ApplyT(func(v AnthosObservabilityFeatureSpec) *AnthosObservabilityMembershipSpec {
		return v.DefaultMembershipSpec
	}).(AnthosObservabilityMembershipSpecPtrOutput)
}

type AnthosObservabilityFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (AnthosObservabilityFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosObservabilityFeatureSpec)(nil)).Elem()
}

func (o AnthosObservabilityFeatureSpecPtrOutput) ToAnthosObservabilityFeatureSpecPtrOutput() AnthosObservabilityFeatureSpecPtrOutput {
	return o
}

func (o AnthosObservabilityFeatureSpecPtrOutput) ToAnthosObservabilityFeatureSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityFeatureSpecPtrOutput {
	return o
}

func (o AnthosObservabilityFeatureSpecPtrOutput) Elem() AnthosObservabilityFeatureSpecOutput {
	return o.ApplyT(func(v *AnthosObservabilityFeatureSpec) AnthosObservabilityFeatureSpec {
		if v != nil {
			return *v
		}
		var ret AnthosObservabilityFeatureSpec
		return ret
	}).(AnthosObservabilityFeatureSpecOutput)
}

// default membership spec for unconfigured memberships
func (o AnthosObservabilityFeatureSpecPtrOutput) DefaultMembershipSpec() AnthosObservabilityMembershipSpecPtrOutput {
	return o.ApplyT(func(v *AnthosObservabilityFeatureSpec) *AnthosObservabilityMembershipSpec {
		if v == nil {
			return nil
		}
		return v.DefaultMembershipSpec
	}).(AnthosObservabilityMembershipSpecPtrOutput)
}

// **Anthos Observability**: Spec
type AnthosObservabilityFeatureSpecResponse struct {
	// default membership spec for unconfigured memberships
	DefaultMembershipSpec AnthosObservabilityMembershipSpecResponse `pulumi:"defaultMembershipSpec"`
}

// **Anthos Observability**: Spec
type AnthosObservabilityFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (AnthosObservabilityFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosObservabilityFeatureSpecResponse)(nil)).Elem()
}

func (o AnthosObservabilityFeatureSpecResponseOutput) ToAnthosObservabilityFeatureSpecResponseOutput() AnthosObservabilityFeatureSpecResponseOutput {
	return o
}

func (o AnthosObservabilityFeatureSpecResponseOutput) ToAnthosObservabilityFeatureSpecResponseOutputWithContext(ctx context.Context) AnthosObservabilityFeatureSpecResponseOutput {
	return o
}

// default membership spec for unconfigured memberships
func (o AnthosObservabilityFeatureSpecResponseOutput) DefaultMembershipSpec() AnthosObservabilityMembershipSpecResponseOutput {
	return o.ApplyT(func(v AnthosObservabilityFeatureSpecResponse) AnthosObservabilityMembershipSpecResponse {
		return v.DefaultMembershipSpec
	}).(AnthosObservabilityMembershipSpecResponseOutput)
}

// **Anthosobservability**: Per-Membership Feature spec.
type AnthosObservabilityMembershipSpec struct {
	// use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics
	DoNotOptimizeMetrics *bool `pulumi:"doNotOptimizeMetrics"`
	// enable collecting and reporting metrics and logs from user apps See go/onyx-application-metrics-logs-user-guide
	EnableStackdriverOnApplications *bool `pulumi:"enableStackdriverOnApplications"`
	// the version of stackdriver operator used by this feature
	Version *string `pulumi:"version"`
}

// AnthosObservabilityMembershipSpecInput is an input type that accepts AnthosObservabilityMembershipSpecArgs and AnthosObservabilityMembershipSpecOutput values.
// You can construct a concrete instance of `AnthosObservabilityMembershipSpecInput` via:
//
//          AnthosObservabilityMembershipSpecArgs{...}
type AnthosObservabilityMembershipSpecInput interface {
	pulumi.Input

	ToAnthosObservabilityMembershipSpecOutput() AnthosObservabilityMembershipSpecOutput
	ToAnthosObservabilityMembershipSpecOutputWithContext(context.Context) AnthosObservabilityMembershipSpecOutput
}

// **Anthosobservability**: Per-Membership Feature spec.
type AnthosObservabilityMembershipSpecArgs struct {
	// use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics
	DoNotOptimizeMetrics pulumi.BoolPtrInput `pulumi:"doNotOptimizeMetrics"`
	// enable collecting and reporting metrics and logs from user apps See go/onyx-application-metrics-logs-user-guide
	EnableStackdriverOnApplications pulumi.BoolPtrInput `pulumi:"enableStackdriverOnApplications"`
	// the version of stackdriver operator used by this feature
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (AnthosObservabilityMembershipSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosObservabilityMembershipSpec)(nil)).Elem()
}

func (i AnthosObservabilityMembershipSpecArgs) ToAnthosObservabilityMembershipSpecOutput() AnthosObservabilityMembershipSpecOutput {
	return i.ToAnthosObservabilityMembershipSpecOutputWithContext(context.Background())
}

func (i AnthosObservabilityMembershipSpecArgs) ToAnthosObservabilityMembershipSpecOutputWithContext(ctx context.Context) AnthosObservabilityMembershipSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosObservabilityMembershipSpecOutput)
}

func (i AnthosObservabilityMembershipSpecArgs) ToAnthosObservabilityMembershipSpecPtrOutput() AnthosObservabilityMembershipSpecPtrOutput {
	return i.ToAnthosObservabilityMembershipSpecPtrOutputWithContext(context.Background())
}

func (i AnthosObservabilityMembershipSpecArgs) ToAnthosObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosObservabilityMembershipSpecOutput).ToAnthosObservabilityMembershipSpecPtrOutputWithContext(ctx)
}

// AnthosObservabilityMembershipSpecPtrInput is an input type that accepts AnthosObservabilityMembershipSpecArgs, AnthosObservabilityMembershipSpecPtr and AnthosObservabilityMembershipSpecPtrOutput values.
// You can construct a concrete instance of `AnthosObservabilityMembershipSpecPtrInput` via:
//
//          AnthosObservabilityMembershipSpecArgs{...}
//
//  or:
//
//          nil
type AnthosObservabilityMembershipSpecPtrInput interface {
	pulumi.Input

	ToAnthosObservabilityMembershipSpecPtrOutput() AnthosObservabilityMembershipSpecPtrOutput
	ToAnthosObservabilityMembershipSpecPtrOutputWithContext(context.Context) AnthosObservabilityMembershipSpecPtrOutput
}

type anthosObservabilityMembershipSpecPtrType AnthosObservabilityMembershipSpecArgs

func AnthosObservabilityMembershipSpecPtr(v *AnthosObservabilityMembershipSpecArgs) AnthosObservabilityMembershipSpecPtrInput {
	return (*anthosObservabilityMembershipSpecPtrType)(v)
}

func (*anthosObservabilityMembershipSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosObservabilityMembershipSpec)(nil)).Elem()
}

func (i *anthosObservabilityMembershipSpecPtrType) ToAnthosObservabilityMembershipSpecPtrOutput() AnthosObservabilityMembershipSpecPtrOutput {
	return i.ToAnthosObservabilityMembershipSpecPtrOutputWithContext(context.Background())
}

func (i *anthosObservabilityMembershipSpecPtrType) ToAnthosObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityMembershipSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnthosObservabilityMembershipSpecPtrOutput)
}

// **Anthosobservability**: Per-Membership Feature spec.
type AnthosObservabilityMembershipSpecOutput struct{ *pulumi.OutputState }

func (AnthosObservabilityMembershipSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosObservabilityMembershipSpec)(nil)).Elem()
}

func (o AnthosObservabilityMembershipSpecOutput) ToAnthosObservabilityMembershipSpecOutput() AnthosObservabilityMembershipSpecOutput {
	return o
}

func (o AnthosObservabilityMembershipSpecOutput) ToAnthosObservabilityMembershipSpecOutputWithContext(ctx context.Context) AnthosObservabilityMembershipSpecOutput {
	return o
}

func (o AnthosObservabilityMembershipSpecOutput) ToAnthosObservabilityMembershipSpecPtrOutput() AnthosObservabilityMembershipSpecPtrOutput {
	return o.ToAnthosObservabilityMembershipSpecPtrOutputWithContext(context.Background())
}

func (o AnthosObservabilityMembershipSpecOutput) ToAnthosObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityMembershipSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnthosObservabilityMembershipSpec) *AnthosObservabilityMembershipSpec {
		return &v
	}).(AnthosObservabilityMembershipSpecPtrOutput)
}

// use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics
func (o AnthosObservabilityMembershipSpecOutput) DoNotOptimizeMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnthosObservabilityMembershipSpec) *bool { return v.DoNotOptimizeMetrics }).(pulumi.BoolPtrOutput)
}

// enable collecting and reporting metrics and logs from user apps See go/onyx-application-metrics-logs-user-guide
func (o AnthosObservabilityMembershipSpecOutput) EnableStackdriverOnApplications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AnthosObservabilityMembershipSpec) *bool { return v.EnableStackdriverOnApplications }).(pulumi.BoolPtrOutput)
}

// the version of stackdriver operator used by this feature
func (o AnthosObservabilityMembershipSpecOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AnthosObservabilityMembershipSpec) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AnthosObservabilityMembershipSpecPtrOutput struct{ *pulumi.OutputState }

func (AnthosObservabilityMembershipSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnthosObservabilityMembershipSpec)(nil)).Elem()
}

func (o AnthosObservabilityMembershipSpecPtrOutput) ToAnthosObservabilityMembershipSpecPtrOutput() AnthosObservabilityMembershipSpecPtrOutput {
	return o
}

func (o AnthosObservabilityMembershipSpecPtrOutput) ToAnthosObservabilityMembershipSpecPtrOutputWithContext(ctx context.Context) AnthosObservabilityMembershipSpecPtrOutput {
	return o
}

func (o AnthosObservabilityMembershipSpecPtrOutput) Elem() AnthosObservabilityMembershipSpecOutput {
	return o.ApplyT(func(v *AnthosObservabilityMembershipSpec) AnthosObservabilityMembershipSpec {
		if v != nil {
			return *v
		}
		var ret AnthosObservabilityMembershipSpec
		return ret
	}).(AnthosObservabilityMembershipSpecOutput)
}

// use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics
func (o AnthosObservabilityMembershipSpecPtrOutput) DoNotOptimizeMetrics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnthosObservabilityMembershipSpec) *bool {
		if v == nil {
			return nil
		}
		return v.DoNotOptimizeMetrics
	}).(pulumi.BoolPtrOutput)
}

// enable collecting and reporting metrics and logs from user apps See go/onyx-application-metrics-logs-user-guide
func (o AnthosObservabilityMembershipSpecPtrOutput) EnableStackdriverOnApplications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AnthosObservabilityMembershipSpec) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStackdriverOnApplications
	}).(pulumi.BoolPtrOutput)
}

// the version of stackdriver operator used by this feature
func (o AnthosObservabilityMembershipSpecPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AnthosObservabilityMembershipSpec) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// **Anthosobservability**: Per-Membership Feature spec.
type AnthosObservabilityMembershipSpecResponse struct {
	// use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics
	DoNotOptimizeMetrics bool `pulumi:"doNotOptimizeMetrics"`
	// enable collecting and reporting metrics and logs from user apps See go/onyx-application-metrics-logs-user-guide
	EnableStackdriverOnApplications bool `pulumi:"enableStackdriverOnApplications"`
	// the version of stackdriver operator used by this feature
	Version string `pulumi:"version"`
}

// **Anthosobservability**: Per-Membership Feature spec.
type AnthosObservabilityMembershipSpecResponseOutput struct{ *pulumi.OutputState }

func (AnthosObservabilityMembershipSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnthosObservabilityMembershipSpecResponse)(nil)).Elem()
}

func (o AnthosObservabilityMembershipSpecResponseOutput) ToAnthosObservabilityMembershipSpecResponseOutput() AnthosObservabilityMembershipSpecResponseOutput {
	return o
}

func (o AnthosObservabilityMembershipSpecResponseOutput) ToAnthosObservabilityMembershipSpecResponseOutputWithContext(ctx context.Context) AnthosObservabilityMembershipSpecResponseOutput {
	return o
}

// use full of metrics rather than optimized metrics. See https://cloud.google.com/anthos/clusters/docs/on-prem/1.8/concepts/logging-and-monitoring#optimized_metrics_default_metrics
func (o AnthosObservabilityMembershipSpecResponseOutput) DoNotOptimizeMetrics() pulumi.BoolOutput {
	return o.ApplyT(func(v AnthosObservabilityMembershipSpecResponse) bool { return v.DoNotOptimizeMetrics }).(pulumi.BoolOutput)
}

// enable collecting and reporting metrics and logs from user apps See go/onyx-application-metrics-logs-user-guide
func (o AnthosObservabilityMembershipSpecResponseOutput) EnableStackdriverOnApplications() pulumi.BoolOutput {
	return o.ApplyT(func(v AnthosObservabilityMembershipSpecResponse) bool { return v.EnableStackdriverOnApplications }).(pulumi.BoolOutput)
}

// the version of stackdriver operator used by this feature
func (o AnthosObservabilityMembershipSpecResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v AnthosObservabilityMembershipSpecResponse) string { return v.Version }).(pulumi.StringOutput)
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpec struct {
}

// AppDevExperienceFeatureSpecInput is an input type that accepts AppDevExperienceFeatureSpecArgs and AppDevExperienceFeatureSpecOutput values.
// You can construct a concrete instance of `AppDevExperienceFeatureSpecInput` via:
//
//          AppDevExperienceFeatureSpecArgs{...}
type AppDevExperienceFeatureSpecInput interface {
	pulumi.Input

	ToAppDevExperienceFeatureSpecOutput() AppDevExperienceFeatureSpecOutput
	ToAppDevExperienceFeatureSpecOutputWithContext(context.Context) AppDevExperienceFeatureSpecOutput
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecArgs struct {
}

func (AppDevExperienceFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecOutput() AppDevExperienceFeatureSpecOutput {
	return i.ToAppDevExperienceFeatureSpecOutputWithContext(context.Background())
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDevExperienceFeatureSpecOutput)
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return i.ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Background())
}

func (i AppDevExperienceFeatureSpecArgs) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDevExperienceFeatureSpecOutput).ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx)
}

// AppDevExperienceFeatureSpecPtrInput is an input type that accepts AppDevExperienceFeatureSpecArgs, AppDevExperienceFeatureSpecPtr and AppDevExperienceFeatureSpecPtrOutput values.
// You can construct a concrete instance of `AppDevExperienceFeatureSpecPtrInput` via:
//
//          AppDevExperienceFeatureSpecArgs{...}
//
//  or:
//
//          nil
type AppDevExperienceFeatureSpecPtrInput interface {
	pulumi.Input

	ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput
	ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Context) AppDevExperienceFeatureSpecPtrOutput
}

type appDevExperienceFeatureSpecPtrType AppDevExperienceFeatureSpecArgs

func AppDevExperienceFeatureSpecPtr(v *AppDevExperienceFeatureSpecArgs) AppDevExperienceFeatureSpecPtrInput {
	return (*appDevExperienceFeatureSpecPtrType)(v)
}

func (*appDevExperienceFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (i *appDevExperienceFeatureSpecPtrType) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return i.ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *appDevExperienceFeatureSpecPtrType) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppDevExperienceFeatureSpecPtrOutput)
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecOutput() AppDevExperienceFeatureSpecOutput {
	return o
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecOutput {
	return o
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return o.ToAppDevExperienceFeatureSpecPtrOutputWithContext(context.Background())
}

func (o AppDevExperienceFeatureSpecOutput) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AppDevExperienceFeatureSpec) *AppDevExperienceFeatureSpec {
		return &v
	}).(AppDevExperienceFeatureSpecPtrOutput)
}

type AppDevExperienceFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppDevExperienceFeatureSpec)(nil)).Elem()
}

func (o AppDevExperienceFeatureSpecPtrOutput) ToAppDevExperienceFeatureSpecPtrOutput() AppDevExperienceFeatureSpecPtrOutput {
	return o
}

func (o AppDevExperienceFeatureSpecPtrOutput) ToAppDevExperienceFeatureSpecPtrOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecPtrOutput {
	return o
}

func (o AppDevExperienceFeatureSpecPtrOutput) Elem() AppDevExperienceFeatureSpecOutput {
	return o.ApplyT(func(v *AppDevExperienceFeatureSpec) AppDevExperienceFeatureSpec {
		if v != nil {
			return *v
		}
		var ret AppDevExperienceFeatureSpec
		return ret
	}).(AppDevExperienceFeatureSpecOutput)
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecResponse struct {
}

// Spec for App Dev Experience Feature.
type AppDevExperienceFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureSpecResponse)(nil)).Elem()
}

func (o AppDevExperienceFeatureSpecResponseOutput) ToAppDevExperienceFeatureSpecResponseOutput() AppDevExperienceFeatureSpecResponseOutput {
	return o
}

func (o AppDevExperienceFeatureSpecResponseOutput) ToAppDevExperienceFeatureSpecResponseOutputWithContext(ctx context.Context) AppDevExperienceFeatureSpecResponseOutput {
	return o
}

// State for App Dev Exp Feature.
type AppDevExperienceFeatureStateResponse struct {
	// Status of subcomponent that detects configured Service Mesh resources.
	NetworkingInstallSucceeded StatusResponse `pulumi:"networkingInstallSucceeded"`
}

// State for App Dev Exp Feature.
type AppDevExperienceFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (AppDevExperienceFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppDevExperienceFeatureStateResponse)(nil)).Elem()
}

func (o AppDevExperienceFeatureStateResponseOutput) ToAppDevExperienceFeatureStateResponseOutput() AppDevExperienceFeatureStateResponseOutput {
	return o
}

func (o AppDevExperienceFeatureStateResponseOutput) ToAppDevExperienceFeatureStateResponseOutputWithContext(ctx context.Context) AppDevExperienceFeatureStateResponseOutput {
	return o
}

// Status of subcomponent that detects configured Service Mesh resources.
func (o AppDevExperienceFeatureStateResponseOutput) NetworkingInstallSucceeded() StatusResponseOutput {
	return o.ApplyT(func(v AppDevExperienceFeatureStateResponse) StatusResponse { return v.NetworkingInstallSucceeded }).(StatusResponseOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//          AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//          AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts jose@example.com from DATA_READ logging, and aliya@example.com from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//          AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//          AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//          BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//          BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpec struct {
	// Anthos Observability spec
	Anthosobservability *AnthosObservabilityFeatureSpec `pulumi:"anthosobservability"`
	// Appdevexperience specific spec.
	Appdevexperience *AppDevExperienceFeatureSpec `pulumi:"appdevexperience"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress *MultiClusterIngressFeatureSpec `pulumi:"multiclusteringress"`
}

// CommonFeatureSpecInput is an input type that accepts CommonFeatureSpecArgs and CommonFeatureSpecOutput values.
// You can construct a concrete instance of `CommonFeatureSpecInput` via:
//
//          CommonFeatureSpecArgs{...}
type CommonFeatureSpecInput interface {
	pulumi.Input

	ToCommonFeatureSpecOutput() CommonFeatureSpecOutput
	ToCommonFeatureSpecOutputWithContext(context.Context) CommonFeatureSpecOutput
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecArgs struct {
	// Anthos Observability spec
	Anthosobservability AnthosObservabilityFeatureSpecPtrInput `pulumi:"anthosobservability"`
	// Appdevexperience specific spec.
	Appdevexperience AppDevExperienceFeatureSpecPtrInput `pulumi:"appdevexperience"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecPtrInput `pulumi:"multiclusteringress"`
}

func (CommonFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return i.ToCommonFeatureSpecOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput)
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i CommonFeatureSpecArgs) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecOutput).ToCommonFeatureSpecPtrOutputWithContext(ctx)
}

// CommonFeatureSpecPtrInput is an input type that accepts CommonFeatureSpecArgs, CommonFeatureSpecPtr and CommonFeatureSpecPtrOutput values.
// You can construct a concrete instance of `CommonFeatureSpecPtrInput` via:
//
//          CommonFeatureSpecArgs{...}
//
//  or:
//
//          nil
type CommonFeatureSpecPtrInput interface {
	pulumi.Input

	ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput
	ToCommonFeatureSpecPtrOutputWithContext(context.Context) CommonFeatureSpecPtrOutput
}

type commonFeatureSpecPtrType CommonFeatureSpecArgs

func CommonFeatureSpecPtr(v *CommonFeatureSpecArgs) CommonFeatureSpecPtrInput {
	return (*commonFeatureSpecPtrType)(v)
}

func (*commonFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return i.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *commonFeatureSpecPtrType) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommonFeatureSpecPtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutput() CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecOutputWithContext(ctx context.Context) CommonFeatureSpecOutput {
	return o
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o.ToCommonFeatureSpecPtrOutputWithContext(context.Background())
}

func (o CommonFeatureSpecOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CommonFeatureSpec) *CommonFeatureSpec {
		return &v
	}).(CommonFeatureSpecPtrOutput)
}

// Anthos Observability spec
func (o CommonFeatureSpecOutput) Anthosobservability() AnthosObservabilityFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *AnthosObservabilityFeatureSpec { return v.Anthosobservability }).(AnthosObservabilityFeatureSpecPtrOutput)
}

// Appdevexperience specific spec.
func (o CommonFeatureSpecOutput) Appdevexperience() AppDevExperienceFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *AppDevExperienceFeatureSpec { return v.Appdevexperience }).(AppDevExperienceFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v CommonFeatureSpec) *MultiClusterIngressFeatureSpec { return v.Multiclusteringress }).(MultiClusterIngressFeatureSpecPtrOutput)
}

type CommonFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CommonFeatureSpec)(nil)).Elem()
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutput() CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) ToCommonFeatureSpecPtrOutputWithContext(ctx context.Context) CommonFeatureSpecPtrOutput {
	return o
}

func (o CommonFeatureSpecPtrOutput) Elem() CommonFeatureSpecOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) CommonFeatureSpec {
		if v != nil {
			return *v
		}
		var ret CommonFeatureSpec
		return ret
	}).(CommonFeatureSpecOutput)
}

// Anthos Observability spec
func (o CommonFeatureSpecPtrOutput) Anthosobservability() AnthosObservabilityFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *AnthosObservabilityFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Anthosobservability
	}).(AnthosObservabilityFeatureSpecPtrOutput)
}

// Appdevexperience specific spec.
func (o CommonFeatureSpecPtrOutput) Appdevexperience() AppDevExperienceFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *AppDevExperienceFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Appdevexperience
	}).(AppDevExperienceFeatureSpecPtrOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecPtrOutput) Multiclusteringress() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyT(func(v *CommonFeatureSpec) *MultiClusterIngressFeatureSpec {
		if v == nil {
			return nil
		}
		return v.Multiclusteringress
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecResponse struct {
	// Anthos Observability spec
	Anthosobservability AnthosObservabilityFeatureSpecResponse `pulumi:"anthosobservability"`
	// Appdevexperience specific spec.
	Appdevexperience AppDevExperienceFeatureSpecResponse `pulumi:"appdevexperience"`
	// Multicluster Ingress-specific spec.
	Multiclusteringress MultiClusterIngressFeatureSpecResponse `pulumi:"multiclusteringress"`
}

// CommonFeatureSpec contains Hub-wide configuration information
type CommonFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (CommonFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureSpecResponse)(nil)).Elem()
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponseOutput() CommonFeatureSpecResponseOutput {
	return o
}

func (o CommonFeatureSpecResponseOutput) ToCommonFeatureSpecResponseOutputWithContext(ctx context.Context) CommonFeatureSpecResponseOutput {
	return o
}

// Anthos Observability spec
func (o CommonFeatureSpecResponseOutput) Anthosobservability() AnthosObservabilityFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) AnthosObservabilityFeatureSpecResponse { return v.Anthosobservability }).(AnthosObservabilityFeatureSpecResponseOutput)
}

// Appdevexperience specific spec.
func (o CommonFeatureSpecResponseOutput) Appdevexperience() AppDevExperienceFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) AppDevExperienceFeatureSpecResponse { return v.Appdevexperience }).(AppDevExperienceFeatureSpecResponseOutput)
}

// Multicluster Ingress-specific spec.
func (o CommonFeatureSpecResponseOutput) Multiclusteringress() MultiClusterIngressFeatureSpecResponseOutput {
	return o.ApplyT(func(v CommonFeatureSpecResponse) MultiClusterIngressFeatureSpecResponse { return v.Multiclusteringress }).(MultiClusterIngressFeatureSpecResponseOutput)
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateResponse struct {
	// Appdevexperience specific state.
	Appdevexperience AppDevExperienceFeatureStateResponse `pulumi:"appdevexperience"`
	// The "running state" of the Feature in this Hub.
	State FeatureStateResponse `pulumi:"state"`
}

// CommonFeatureState contains Hub-wide Feature status information.
type CommonFeatureStateResponseOutput struct{ *pulumi.OutputState }

func (CommonFeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommonFeatureStateResponse)(nil)).Elem()
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponseOutput() CommonFeatureStateResponseOutput {
	return o
}

func (o CommonFeatureStateResponseOutput) ToCommonFeatureStateResponseOutputWithContext(ctx context.Context) CommonFeatureStateResponseOutput {
	return o
}

// Appdevexperience specific state.
func (o CommonFeatureStateResponseOutput) Appdevexperience() AppDevExperienceFeatureStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) AppDevExperienceFeatureStateResponse { return v.Appdevexperience }).(AppDevExperienceFeatureStateResponseOutput)
}

// The "running state" of the Feature in this Hub.
func (o CommonFeatureStateResponseOutput) State() FeatureStateResponseOutput {
	return o.ApplyT(func(v CommonFeatureStateResponse) FeatureStateResponse { return v.State }).(FeatureStateResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//          ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//          ExprArgs{...}
//
//  or:
//
//          nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateResponse struct {
	// The current state of the Feature resource in the Hub API.
	State string `pulumi:"state"`
}

// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
type FeatureResourceStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureResourceStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureResourceStateResponse)(nil)).Elem()
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponseOutput() FeatureResourceStateResponseOutput {
	return o
}

func (o FeatureResourceStateResponseOutput) ToFeatureResourceStateResponseOutputWithContext(ctx context.Context) FeatureResourceStateResponseOutput {
	return o
}

// The current state of the Feature resource in the Hub API.
func (o FeatureResourceStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureResourceStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateResponse struct {
	// The high-level, machine-readable status of this Feature.
	Code string `pulumi:"code"`
	// A human-readable description of the current status.
	Description string `pulumi:"description"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime string `pulumi:"updateTime"`
}

// FeatureState describes the high-level state of a Feature. It may be used to describe a Feature's state at the environ-level, or per-membershop, depending on the context.
type FeatureStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStateResponse)(nil)).Elem()
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutput() FeatureStateResponseOutput {
	return o
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutputWithContext(ctx context.Context) FeatureStateResponseOutput {
	return o
}

// The high-level, machine-readable status of this Feature.
func (o FeatureStateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable description of the current status.
func (o FeatureStateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The time this status and any related Feature-specific details were updated.
func (o FeatureStateResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureStateResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpec struct {
	// Deprecated: This field will be ignored and should not be set. Customer's billing structure.
	//
	// Deprecated: Deprecated: This field will be ignored and should not be set. Customer's billing structure.
	Billing *MultiClusterIngressFeatureSpecBilling `pulumi:"billing"`
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership *string `pulumi:"configMembership"`
}

// MultiClusterIngressFeatureSpecInput is an input type that accepts MultiClusterIngressFeatureSpecArgs and MultiClusterIngressFeatureSpecOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecInput` via:
//
//          MultiClusterIngressFeatureSpecArgs{...}
type MultiClusterIngressFeatureSpecInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput
	ToMultiClusterIngressFeatureSpecOutputWithContext(context.Context) MultiClusterIngressFeatureSpecOutput
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecArgs struct {
	// Deprecated: This field will be ignored and should not be set. Customer's billing structure.
	//
	// Deprecated: Deprecated: This field will be ignored and should not be set. Customer's billing structure.
	Billing MultiClusterIngressFeatureSpecBillingPtrInput `pulumi:"billing"`
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership pulumi.StringPtrInput `pulumi:"configMembership"`
}

func (MultiClusterIngressFeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return i.ToMultiClusterIngressFeatureSpecOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput)
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i MultiClusterIngressFeatureSpecArgs) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecOutput).ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx)
}

// MultiClusterIngressFeatureSpecPtrInput is an input type that accepts MultiClusterIngressFeatureSpecArgs, MultiClusterIngressFeatureSpecPtr and MultiClusterIngressFeatureSpecPtrOutput values.
// You can construct a concrete instance of `MultiClusterIngressFeatureSpecPtrInput` via:
//
//          MultiClusterIngressFeatureSpecArgs{...}
//
//  or:
//
//          nil
type MultiClusterIngressFeatureSpecPtrInput interface {
	pulumi.Input

	ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput
	ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Context) MultiClusterIngressFeatureSpecPtrOutput
}

type multiClusterIngressFeatureSpecPtrType MultiClusterIngressFeatureSpecArgs

func MultiClusterIngressFeatureSpecPtr(v *MultiClusterIngressFeatureSpecArgs) MultiClusterIngressFeatureSpecPtrInput {
	return (*multiClusterIngressFeatureSpecPtrType)(v)
}

func (*multiClusterIngressFeatureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return i.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *multiClusterIngressFeatureSpecPtrType) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MultiClusterIngressFeatureSpecPtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutput() MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o.ToMultiClusterIngressFeatureSpecPtrOutputWithContext(context.Background())
}

func (o MultiClusterIngressFeatureSpecOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MultiClusterIngressFeatureSpec) *MultiClusterIngressFeatureSpec {
		return &v
	}).(MultiClusterIngressFeatureSpecPtrOutput)
}

// Deprecated: This field will be ignored and should not be set. Customer's billing structure.
//
// Deprecated: Deprecated: This field will be ignored and should not be set. Customer's billing structure.
func (o MultiClusterIngressFeatureSpecOutput) Billing() MultiClusterIngressFeatureSpecBillingPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *MultiClusterIngressFeatureSpecBilling { return v.Billing }).(MultiClusterIngressFeatureSpecBillingPtrOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpec) *string { return v.ConfigMembership }).(pulumi.StringPtrOutput)
}

type MultiClusterIngressFeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MultiClusterIngressFeatureSpec)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutput() MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) ToMultiClusterIngressFeatureSpecPtrOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecPtrOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecPtrOutput) Elem() MultiClusterIngressFeatureSpecOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) MultiClusterIngressFeatureSpec {
		if v != nil {
			return *v
		}
		var ret MultiClusterIngressFeatureSpec
		return ret
	}).(MultiClusterIngressFeatureSpecOutput)
}

// Deprecated: This field will be ignored and should not be set. Customer's billing structure.
//
// Deprecated: Deprecated: This field will be ignored and should not be set. Customer's billing structure.
func (o MultiClusterIngressFeatureSpecPtrOutput) Billing() MultiClusterIngressFeatureSpecBillingPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) *MultiClusterIngressFeatureSpecBilling {
		if v == nil {
			return nil
		}
		return v.Billing
	}).(MultiClusterIngressFeatureSpecBillingPtrOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecPtrOutput) ConfigMembership() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MultiClusterIngressFeatureSpec) *string {
		if v == nil {
			return nil
		}
		return v.ConfigMembership
	}).(pulumi.StringPtrOutput)
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecResponse struct {
	// Deprecated: This field will be ignored and should not be set. Customer's billing structure.
	//
	// Deprecated: Deprecated: This field will be ignored and should not be set. Customer's billing structure.
	Billing string `pulumi:"billing"`
	// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
	ConfigMembership string `pulumi:"configMembership"`
}

// **Multi-cluster Ingress**: The configuration for the MultiClusterIngress feature.
type MultiClusterIngressFeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (MultiClusterIngressFeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MultiClusterIngressFeatureSpecResponse)(nil)).Elem()
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponseOutput() MultiClusterIngressFeatureSpecResponseOutput {
	return o
}

func (o MultiClusterIngressFeatureSpecResponseOutput) ToMultiClusterIngressFeatureSpecResponseOutputWithContext(ctx context.Context) MultiClusterIngressFeatureSpecResponseOutput {
	return o
}

// Deprecated: This field will be ignored and should not be set. Customer's billing structure.
//
// Deprecated: Deprecated: This field will be ignored and should not be set. Customer's billing structure.
func (o MultiClusterIngressFeatureSpecResponseOutput) Billing() pulumi.StringOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpecResponse) string { return v.Billing }).(pulumi.StringOutput)
}

// Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`
func (o MultiClusterIngressFeatureSpecResponseOutput) ConfigMembership() pulumi.StringOutput {
	return o.ApplyT(func(v MultiClusterIngressFeatureSpecResponse) string { return v.ConfigMembership }).(pulumi.StringOutput)
}

// Status specifies state for the subcomponent.
type StatusResponse struct {
	// Code specifies AppDevExperienceFeature's subcomponent ready state.
	Code string `pulumi:"code"`
	// Description is populated if Code is Failed, explaining why it has failed.
	Description string `pulumi:"description"`
}

// Status specifies state for the subcomponent.
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// Code specifies AppDevExperienceFeature's subcomponent ready state.
func (o StatusResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Code }).(pulumi.StringOutput)
}

// Description is populated if Code is Failed, explaining why it has failed.
func (o StatusResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Description }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosObservabilityFeatureSpecInput)(nil)).Elem(), AnthosObservabilityFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosObservabilityFeatureSpecPtrInput)(nil)).Elem(), AnthosObservabilityFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosObservabilityMembershipSpecInput)(nil)).Elem(), AnthosObservabilityMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnthosObservabilityMembershipSpecPtrInput)(nil)).Elem(), AnthosObservabilityMembershipSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppDevExperienceFeatureSpecInput)(nil)).Elem(), AppDevExperienceFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppDevExperienceFeatureSpecPtrInput)(nil)).Elem(), AppDevExperienceFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommonFeatureSpecInput)(nil)).Elem(), CommonFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommonFeatureSpecPtrInput)(nil)).Elem(), CommonFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterIngressFeatureSpecInput)(nil)).Elem(), MultiClusterIngressFeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MultiClusterIngressFeatureSpecPtrInput)(nil)).Elem(), MultiClusterIngressFeatureSpecArgs{})
	pulumi.RegisterOutputType(AnthosObservabilityFeatureSpecOutput{})
	pulumi.RegisterOutputType(AnthosObservabilityFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(AnthosObservabilityFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(AnthosObservabilityMembershipSpecOutput{})
	pulumi.RegisterOutputType(AnthosObservabilityMembershipSpecPtrOutput{})
	pulumi.RegisterOutputType(AnthosObservabilityMembershipSpecResponseOutput{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureSpecOutput{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(AppDevExperienceFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(CommonFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(CommonFeatureStateResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(FeatureResourceStateResponseOutput{})
	pulumi.RegisterOutputType(FeatureStateResponseOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(MultiClusterIngressFeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
}
