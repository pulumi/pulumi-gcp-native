// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates FeatureConfig under a given parent.
// Auto-naming is currently not supported for this resource.
type FeatureConfig struct {
	pulumi.CustomResourceState

	// When the FeatureConfig resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// When the FeatureConfig resource was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// GCP labels for this FeatureConfig.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Resource name of this FeatureConfig, in the format: `projects/{project}/locations/global/FeatureConfigs/{feature_type}/{feature_config}`
	Name pulumi.StringOutput `pulumi:"name"`
	// Input only. Immutable. User input of feature spec. Note that this field is immutable. Must create a new FeatureConfig if a new feature spec is needed.
	Spec FeatureSpecResponseOutput `pulumi:"spec"`
	// Lifecycle information of the FeatureConfig.
	State FeatureConfigStateResponseOutput `pulumi:"state"`
	// Google-generated UUID for this resource. This is unique across all FeatureConfig resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
	// When the FeatureConfig resource was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFeatureConfig registers a new resource with the given unique name, arguments, and options.
func NewFeatureConfig(ctx *pulumi.Context,
	name string, args *FeatureConfigArgs, opts ...pulumi.ResourceOption) (*FeatureConfig, error) {
	if args == nil {
		args = &FeatureConfigArgs{}
	}

	var resource FeatureConfig
	err := ctx.RegisterResource("google-native:gkehub/v2alpha:FeatureConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureConfig gets an existing FeatureConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureConfigState, opts ...pulumi.ResourceOption) (*FeatureConfig, error) {
	var resource FeatureConfig
	err := ctx.ReadResource("google-native:gkehub/v2alpha:FeatureConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureConfig resources.
type featureConfigState struct {
}

type FeatureConfigState struct {
}

func (FeatureConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureConfigState)(nil)).Elem()
}

type featureConfigArgs struct {
	FeatureConfigId *string `pulumi:"featureConfigId"`
	// GCP labels for this FeatureConfig.
	Labels    map[string]string `pulumi:"labels"`
	Location  *string           `pulumi:"location"`
	Project   *string           `pulumi:"project"`
	RequestId *string           `pulumi:"requestId"`
	// Input only. Immutable. User input of feature spec. Note that this field is immutable. Must create a new FeatureConfig if a new feature spec is needed.
	Spec *FeatureSpec `pulumi:"spec"`
	// Lifecycle information of the FeatureConfig.
	State *FeatureConfigStateType `pulumi:"state"`
}

// The set of arguments for constructing a FeatureConfig resource.
type FeatureConfigArgs struct {
	FeatureConfigId pulumi.StringPtrInput
	// GCP labels for this FeatureConfig.
	Labels    pulumi.StringMapInput
	Location  pulumi.StringPtrInput
	Project   pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// Input only. Immutable. User input of feature spec. Note that this field is immutable. Must create a new FeatureConfig if a new feature spec is needed.
	Spec FeatureSpecPtrInput
	// Lifecycle information of the FeatureConfig.
	State FeatureConfigStateTypePtrInput
}

func (FeatureConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureConfigArgs)(nil)).Elem()
}

type FeatureConfigInput interface {
	pulumi.Input

	ToFeatureConfigOutput() FeatureConfigOutput
	ToFeatureConfigOutputWithContext(ctx context.Context) FeatureConfigOutput
}

func (*FeatureConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureConfig)(nil)).Elem()
}

func (i *FeatureConfig) ToFeatureConfigOutput() FeatureConfigOutput {
	return i.ToFeatureConfigOutputWithContext(context.Background())
}

func (i *FeatureConfig) ToFeatureConfigOutputWithContext(ctx context.Context) FeatureConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureConfigOutput)
}

type FeatureConfigOutput struct{ *pulumi.OutputState }

func (FeatureConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureConfig)(nil)).Elem()
}

func (o FeatureConfigOutput) ToFeatureConfigOutput() FeatureConfigOutput {
	return o
}

func (o FeatureConfigOutput) ToFeatureConfigOutputWithContext(ctx context.Context) FeatureConfigOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureConfigInput)(nil)).Elem(), &FeatureConfig{})
	pulumi.RegisterOutputType(FeatureConfigOutput{})
}
