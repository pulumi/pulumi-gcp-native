// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ========= MembershipFeature Services ========= Gets details of a membershipFeature.
func LookupFeature(ctx *pulumi.Context, args *LookupFeatureArgs, opts ...pulumi.InvokeOption) (*LookupFeatureResult, error) {
	var rv LookupFeatureResult
	err := ctx.Invoke("google-native:gkehub/v2alpha:getFeature", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupFeatureArgs struct {
	FeatureId    string  `pulumi:"featureId"`
	Location     string  `pulumi:"location"`
	MembershipId string  `pulumi:"membershipId"`
	Project      *string `pulumi:"project"`
}

type LookupFeatureResult struct {
	// When the MembershipFeature resource was created.
	CreateTime string `pulumi:"createTime"`
	// When the MembershipFeature resource was deleted.
	DeleteTime string `pulumi:"deleteTime"`
	// Reference information for a FeatureConfig applied on the MembershipFeature.
	FeatureConfigRef FeatureConfigRefResponse `pulumi:"featureConfigRef"`
	// GCP labels for this MembershipFeature.
	Labels map[string]string `pulumi:"labels"`
	// The resource name of the membershipFeature, in the format: `projects/{project}/locations/{location}/memberships/{membership}/features/{feature}`. Note that `membershipFeatures` is shortened to `features` in the resource name. (see http://go/aip/122#collection-identifiers)
	Name string `pulumi:"name"`
	// Lifecycle information of the resource itself.
	ResourceState ResourceStateResponse `pulumi:"resourceState"`
	// Spec of this membershipFeature.
	Spec FeatureSpecResponse `pulumi:"spec"`
	// State of the this membershipFeature.
	State FeatureStateResponse `pulumi:"state"`
	// When the MembershipFeature resource was last updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupFeatureOutput(ctx *pulumi.Context, args LookupFeatureOutputArgs, opts ...pulumi.InvokeOption) LookupFeatureResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFeatureResult, error) {
			args := v.(LookupFeatureArgs)
			r, err := LookupFeature(ctx, &args, opts...)
			return *r, err
		}).(LookupFeatureResultOutput)
}

type LookupFeatureOutputArgs struct {
	FeatureId    pulumi.StringInput    `pulumi:"featureId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	MembershipId pulumi.StringInput    `pulumi:"membershipId"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupFeatureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureArgs)(nil)).Elem()
}

type LookupFeatureResultOutput struct{ *pulumi.OutputState }

func (LookupFeatureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFeatureResult)(nil)).Elem()
}

func (o LookupFeatureResultOutput) ToLookupFeatureResultOutput() LookupFeatureResultOutput {
	return o
}

func (o LookupFeatureResultOutput) ToLookupFeatureResultOutputWithContext(ctx context.Context) LookupFeatureResultOutput {
	return o
}

// When the MembershipFeature resource was created.
func (o LookupFeatureResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// When the MembershipFeature resource was deleted.
func (o LookupFeatureResultOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureResult) string { return v.DeleteTime }).(pulumi.StringOutput)
}

// Reference information for a FeatureConfig applied on the MembershipFeature.
func (o LookupFeatureResultOutput) FeatureConfigRef() FeatureConfigRefResponseOutput {
	return o.ApplyT(func(v LookupFeatureResult) FeatureConfigRefResponse { return v.FeatureConfigRef }).(FeatureConfigRefResponseOutput)
}

// GCP labels for this MembershipFeature.
func (o LookupFeatureResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupFeatureResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource name of the membershipFeature, in the format: `projects/{project}/locations/{location}/memberships/{membership}/features/{feature}`. Note that `membershipFeatures` is shortened to `features` in the resource name. (see http://go/aip/122#collection-identifiers)
func (o LookupFeatureResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureResult) string { return v.Name }).(pulumi.StringOutput)
}

// Lifecycle information of the resource itself.
func (o LookupFeatureResultOutput) ResourceState() ResourceStateResponseOutput {
	return o.ApplyT(func(v LookupFeatureResult) ResourceStateResponse { return v.ResourceState }).(ResourceStateResponseOutput)
}

// Spec of this membershipFeature.
func (o LookupFeatureResultOutput) Spec() FeatureSpecResponseOutput {
	return o.ApplyT(func(v LookupFeatureResult) FeatureSpecResponse { return v.Spec }).(FeatureSpecResponseOutput)
}

// State of the this membershipFeature.
func (o LookupFeatureResultOutput) State() FeatureStateResponseOutput {
	return o.ApplyT(func(v LookupFeatureResult) FeatureStateResponse { return v.State }).(FeatureStateResponseOutput)
}

// When the MembershipFeature resource was last updated.
func (o LookupFeatureResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFeatureResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFeatureResultOutput{})
}
