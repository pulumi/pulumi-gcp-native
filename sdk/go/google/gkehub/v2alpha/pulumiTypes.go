// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Information of the FeatureConfig applied on the MembershipFeature.
type FeatureConfigRef struct {
	// Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
	Config *string `pulumi:"config"`
}

// FeatureConfigRefInput is an input type that accepts FeatureConfigRefArgs and FeatureConfigRefOutput values.
// You can construct a concrete instance of `FeatureConfigRefInput` via:
//
//          FeatureConfigRefArgs{...}
type FeatureConfigRefInput interface {
	pulumi.Input

	ToFeatureConfigRefOutput() FeatureConfigRefOutput
	ToFeatureConfigRefOutputWithContext(context.Context) FeatureConfigRefOutput
}

// Information of the FeatureConfig applied on the MembershipFeature.
type FeatureConfigRefArgs struct {
	// Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
	Config pulumi.StringPtrInput `pulumi:"config"`
}

func (FeatureConfigRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureConfigRef)(nil)).Elem()
}

func (i FeatureConfigRefArgs) ToFeatureConfigRefOutput() FeatureConfigRefOutput {
	return i.ToFeatureConfigRefOutputWithContext(context.Background())
}

func (i FeatureConfigRefArgs) ToFeatureConfigRefOutputWithContext(ctx context.Context) FeatureConfigRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureConfigRefOutput)
}

func (i FeatureConfigRefArgs) ToFeatureConfigRefPtrOutput() FeatureConfigRefPtrOutput {
	return i.ToFeatureConfigRefPtrOutputWithContext(context.Background())
}

func (i FeatureConfigRefArgs) ToFeatureConfigRefPtrOutputWithContext(ctx context.Context) FeatureConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureConfigRefOutput).ToFeatureConfigRefPtrOutputWithContext(ctx)
}

// FeatureConfigRefPtrInput is an input type that accepts FeatureConfigRefArgs, FeatureConfigRefPtr and FeatureConfigRefPtrOutput values.
// You can construct a concrete instance of `FeatureConfigRefPtrInput` via:
//
//          FeatureConfigRefArgs{...}
//
//  or:
//
//          nil
type FeatureConfigRefPtrInput interface {
	pulumi.Input

	ToFeatureConfigRefPtrOutput() FeatureConfigRefPtrOutput
	ToFeatureConfigRefPtrOutputWithContext(context.Context) FeatureConfigRefPtrOutput
}

type featureConfigRefPtrType FeatureConfigRefArgs

func FeatureConfigRefPtr(v *FeatureConfigRefArgs) FeatureConfigRefPtrInput {
	return (*featureConfigRefPtrType)(v)
}

func (*featureConfigRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureConfigRef)(nil)).Elem()
}

func (i *featureConfigRefPtrType) ToFeatureConfigRefPtrOutput() FeatureConfigRefPtrOutput {
	return i.ToFeatureConfigRefPtrOutputWithContext(context.Background())
}

func (i *featureConfigRefPtrType) ToFeatureConfigRefPtrOutputWithContext(ctx context.Context) FeatureConfigRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureConfigRefPtrOutput)
}

// Information of the FeatureConfig applied on the MembershipFeature.
type FeatureConfigRefOutput struct{ *pulumi.OutputState }

func (FeatureConfigRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureConfigRef)(nil)).Elem()
}

func (o FeatureConfigRefOutput) ToFeatureConfigRefOutput() FeatureConfigRefOutput {
	return o
}

func (o FeatureConfigRefOutput) ToFeatureConfigRefOutputWithContext(ctx context.Context) FeatureConfigRefOutput {
	return o
}

func (o FeatureConfigRefOutput) ToFeatureConfigRefPtrOutput() FeatureConfigRefPtrOutput {
	return o.ToFeatureConfigRefPtrOutputWithContext(context.Background())
}

func (o FeatureConfigRefOutput) ToFeatureConfigRefPtrOutputWithContext(ctx context.Context) FeatureConfigRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureConfigRef) *FeatureConfigRef {
		return &v
	}).(FeatureConfigRefPtrOutput)
}

// Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
func (o FeatureConfigRefOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FeatureConfigRef) *string { return v.Config }).(pulumi.StringPtrOutput)
}

type FeatureConfigRefPtrOutput struct{ *pulumi.OutputState }

func (FeatureConfigRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureConfigRef)(nil)).Elem()
}

func (o FeatureConfigRefPtrOutput) ToFeatureConfigRefPtrOutput() FeatureConfigRefPtrOutput {
	return o
}

func (o FeatureConfigRefPtrOutput) ToFeatureConfigRefPtrOutputWithContext(ctx context.Context) FeatureConfigRefPtrOutput {
	return o
}

func (o FeatureConfigRefPtrOutput) Elem() FeatureConfigRefOutput {
	return o.ApplyT(func(v *FeatureConfigRef) FeatureConfigRef {
		if v != nil {
			return *v
		}
		var ret FeatureConfigRef
		return ret
	}).(FeatureConfigRefOutput)
}

// Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
func (o FeatureConfigRefPtrOutput) Config() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureConfigRef) *string {
		if v == nil {
			return nil
		}
		return v.Config
	}).(pulumi.StringPtrOutput)
}

// Information of the FeatureConfig applied on the MembershipFeature.
type FeatureConfigRefResponse struct {
	// Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
	Config string `pulumi:"config"`
	// When the FeatureConfig was last applied and copied to FeatureSpec.
	ConfigUpdateTime string `pulumi:"configUpdateTime"`
	// An id that uniquely identify a FeatureConfig object.
	Uuid string `pulumi:"uuid"`
}

// Information of the FeatureConfig applied on the MembershipFeature.
type FeatureConfigRefResponseOutput struct{ *pulumi.OutputState }

func (FeatureConfigRefResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureConfigRefResponse)(nil)).Elem()
}

func (o FeatureConfigRefResponseOutput) ToFeatureConfigRefResponseOutput() FeatureConfigRefResponseOutput {
	return o
}

func (o FeatureConfigRefResponseOutput) ToFeatureConfigRefResponseOutputWithContext(ctx context.Context) FeatureConfigRefResponseOutput {
	return o
}

// Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
func (o FeatureConfigRefResponseOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureConfigRefResponse) string { return v.Config }).(pulumi.StringOutput)
}

// When the FeatureConfig was last applied and copied to FeatureSpec.
func (o FeatureConfigRefResponseOutput) ConfigUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureConfigRefResponse) string { return v.ConfigUpdateTime }).(pulumi.StringOutput)
}

// An id that uniquely identify a FeatureConfig object.
func (o FeatureConfigRefResponseOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureConfigRefResponse) string { return v.Uuid }).(pulumi.StringOutput)
}

// FeatureConfigState describes the state of a FeatureConfig resource.
type FeatureConfigStateType struct {
}

// FeatureConfigStateTypeInput is an input type that accepts FeatureConfigStateTypeArgs and FeatureConfigStateTypeOutput values.
// You can construct a concrete instance of `FeatureConfigStateTypeInput` via:
//
//          FeatureConfigStateTypeArgs{...}
type FeatureConfigStateTypeInput interface {
	pulumi.Input

	ToFeatureConfigStateTypeOutput() FeatureConfigStateTypeOutput
	ToFeatureConfigStateTypeOutputWithContext(context.Context) FeatureConfigStateTypeOutput
}

// FeatureConfigState describes the state of a FeatureConfig resource.
type FeatureConfigStateTypeArgs struct {
}

func (FeatureConfigStateTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureConfigStateType)(nil)).Elem()
}

func (i FeatureConfigStateTypeArgs) ToFeatureConfigStateTypeOutput() FeatureConfigStateTypeOutput {
	return i.ToFeatureConfigStateTypeOutputWithContext(context.Background())
}

func (i FeatureConfigStateTypeArgs) ToFeatureConfigStateTypeOutputWithContext(ctx context.Context) FeatureConfigStateTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureConfigStateTypeOutput)
}

func (i FeatureConfigStateTypeArgs) ToFeatureConfigStateTypePtrOutput() FeatureConfigStateTypePtrOutput {
	return i.ToFeatureConfigStateTypePtrOutputWithContext(context.Background())
}

func (i FeatureConfigStateTypeArgs) ToFeatureConfigStateTypePtrOutputWithContext(ctx context.Context) FeatureConfigStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureConfigStateTypeOutput).ToFeatureConfigStateTypePtrOutputWithContext(ctx)
}

// FeatureConfigStateTypePtrInput is an input type that accepts FeatureConfigStateTypeArgs, FeatureConfigStateTypePtr and FeatureConfigStateTypePtrOutput values.
// You can construct a concrete instance of `FeatureConfigStateTypePtrInput` via:
//
//          FeatureConfigStateTypeArgs{...}
//
//  or:
//
//          nil
type FeatureConfigStateTypePtrInput interface {
	pulumi.Input

	ToFeatureConfigStateTypePtrOutput() FeatureConfigStateTypePtrOutput
	ToFeatureConfigStateTypePtrOutputWithContext(context.Context) FeatureConfigStateTypePtrOutput
}

type featureConfigStateTypePtrType FeatureConfigStateTypeArgs

func FeatureConfigStateTypePtr(v *FeatureConfigStateTypeArgs) FeatureConfigStateTypePtrInput {
	return (*featureConfigStateTypePtrType)(v)
}

func (*featureConfigStateTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureConfigStateType)(nil)).Elem()
}

func (i *featureConfigStateTypePtrType) ToFeatureConfigStateTypePtrOutput() FeatureConfigStateTypePtrOutput {
	return i.ToFeatureConfigStateTypePtrOutputWithContext(context.Background())
}

func (i *featureConfigStateTypePtrType) ToFeatureConfigStateTypePtrOutputWithContext(ctx context.Context) FeatureConfigStateTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureConfigStateTypePtrOutput)
}

// FeatureConfigState describes the state of a FeatureConfig resource.
type FeatureConfigStateTypeOutput struct{ *pulumi.OutputState }

func (FeatureConfigStateTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureConfigStateType)(nil)).Elem()
}

func (o FeatureConfigStateTypeOutput) ToFeatureConfigStateTypeOutput() FeatureConfigStateTypeOutput {
	return o
}

func (o FeatureConfigStateTypeOutput) ToFeatureConfigStateTypeOutputWithContext(ctx context.Context) FeatureConfigStateTypeOutput {
	return o
}

func (o FeatureConfigStateTypeOutput) ToFeatureConfigStateTypePtrOutput() FeatureConfigStateTypePtrOutput {
	return o.ToFeatureConfigStateTypePtrOutputWithContext(context.Background())
}

func (o FeatureConfigStateTypeOutput) ToFeatureConfigStateTypePtrOutputWithContext(ctx context.Context) FeatureConfigStateTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureConfigStateType) *FeatureConfigStateType {
		return &v
	}).(FeatureConfigStateTypePtrOutput)
}

type FeatureConfigStateTypePtrOutput struct{ *pulumi.OutputState }

func (FeatureConfigStateTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureConfigStateType)(nil)).Elem()
}

func (o FeatureConfigStateTypePtrOutput) ToFeatureConfigStateTypePtrOutput() FeatureConfigStateTypePtrOutput {
	return o
}

func (o FeatureConfigStateTypePtrOutput) ToFeatureConfigStateTypePtrOutputWithContext(ctx context.Context) FeatureConfigStateTypePtrOutput {
	return o
}

func (o FeatureConfigStateTypePtrOutput) Elem() FeatureConfigStateTypeOutput {
	return o.ApplyT(func(v *FeatureConfigStateType) FeatureConfigStateType {
		if v != nil {
			return *v
		}
		var ret FeatureConfigStateType
		return ret
	}).(FeatureConfigStateTypeOutput)
}

// FeatureConfigState describes the state of a FeatureConfig resource.
type FeatureConfigStateResponse struct {
	// The current state of the FeatureConfig resource.
	State string `pulumi:"state"`
}

// FeatureConfigState describes the state of a FeatureConfig resource.
type FeatureConfigStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureConfigStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureConfigStateResponse)(nil)).Elem()
}

func (o FeatureConfigStateResponseOutput) ToFeatureConfigStateResponseOutput() FeatureConfigStateResponseOutput {
	return o
}

func (o FeatureConfigStateResponseOutput) ToFeatureConfigStateResponseOutputWithContext(ctx context.Context) FeatureConfigStateResponseOutput {
	return o
}

// The current state of the FeatureConfig resource.
func (o FeatureConfigStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v FeatureConfigStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// FeatureSpec contains user input per-feature spec information.
type FeatureSpec struct {
}

// FeatureSpecInput is an input type that accepts FeatureSpecArgs and FeatureSpecOutput values.
// You can construct a concrete instance of `FeatureSpecInput` via:
//
//          FeatureSpecArgs{...}
type FeatureSpecInput interface {
	pulumi.Input

	ToFeatureSpecOutput() FeatureSpecOutput
	ToFeatureSpecOutputWithContext(context.Context) FeatureSpecOutput
}

// FeatureSpec contains user input per-feature spec information.
type FeatureSpecArgs struct {
}

func (FeatureSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSpec)(nil)).Elem()
}

func (i FeatureSpecArgs) ToFeatureSpecOutput() FeatureSpecOutput {
	return i.ToFeatureSpecOutputWithContext(context.Background())
}

func (i FeatureSpecArgs) ToFeatureSpecOutputWithContext(ctx context.Context) FeatureSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSpecOutput)
}

func (i FeatureSpecArgs) ToFeatureSpecPtrOutput() FeatureSpecPtrOutput {
	return i.ToFeatureSpecPtrOutputWithContext(context.Background())
}

func (i FeatureSpecArgs) ToFeatureSpecPtrOutputWithContext(ctx context.Context) FeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSpecOutput).ToFeatureSpecPtrOutputWithContext(ctx)
}

// FeatureSpecPtrInput is an input type that accepts FeatureSpecArgs, FeatureSpecPtr and FeatureSpecPtrOutput values.
// You can construct a concrete instance of `FeatureSpecPtrInput` via:
//
//          FeatureSpecArgs{...}
//
//  or:
//
//          nil
type FeatureSpecPtrInput interface {
	pulumi.Input

	ToFeatureSpecPtrOutput() FeatureSpecPtrOutput
	ToFeatureSpecPtrOutputWithContext(context.Context) FeatureSpecPtrOutput
}

type featureSpecPtrType FeatureSpecArgs

func FeatureSpecPtr(v *FeatureSpecArgs) FeatureSpecPtrInput {
	return (*featureSpecPtrType)(v)
}

func (*featureSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSpec)(nil)).Elem()
}

func (i *featureSpecPtrType) ToFeatureSpecPtrOutput() FeatureSpecPtrOutput {
	return i.ToFeatureSpecPtrOutputWithContext(context.Background())
}

func (i *featureSpecPtrType) ToFeatureSpecPtrOutputWithContext(ctx context.Context) FeatureSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureSpecPtrOutput)
}

// FeatureSpec contains user input per-feature spec information.
type FeatureSpecOutput struct{ *pulumi.OutputState }

func (FeatureSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSpec)(nil)).Elem()
}

func (o FeatureSpecOutput) ToFeatureSpecOutput() FeatureSpecOutput {
	return o
}

func (o FeatureSpecOutput) ToFeatureSpecOutputWithContext(ctx context.Context) FeatureSpecOutput {
	return o
}

func (o FeatureSpecOutput) ToFeatureSpecPtrOutput() FeatureSpecPtrOutput {
	return o.ToFeatureSpecPtrOutputWithContext(context.Background())
}

func (o FeatureSpecOutput) ToFeatureSpecPtrOutputWithContext(ctx context.Context) FeatureSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FeatureSpec) *FeatureSpec {
		return &v
	}).(FeatureSpecPtrOutput)
}

type FeatureSpecPtrOutput struct{ *pulumi.OutputState }

func (FeatureSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureSpec)(nil)).Elem()
}

func (o FeatureSpecPtrOutput) ToFeatureSpecPtrOutput() FeatureSpecPtrOutput {
	return o
}

func (o FeatureSpecPtrOutput) ToFeatureSpecPtrOutputWithContext(ctx context.Context) FeatureSpecPtrOutput {
	return o
}

func (o FeatureSpecPtrOutput) Elem() FeatureSpecOutput {
	return o.ApplyT(func(v *FeatureSpec) FeatureSpec {
		if v != nil {
			return *v
		}
		var ret FeatureSpec
		return ret
	}).(FeatureSpecOutput)
}

// FeatureSpec contains user input per-feature spec information.
type FeatureSpecResponse struct {
}

// FeatureSpec contains user input per-feature spec information.
type FeatureSpecResponseOutput struct{ *pulumi.OutputState }

func (FeatureSpecResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureSpecResponse)(nil)).Elem()
}

func (o FeatureSpecResponseOutput) ToFeatureSpecResponseOutput() FeatureSpecResponseOutput {
	return o
}

func (o FeatureSpecResponseOutput) ToFeatureSpecResponseOutputWithContext(ctx context.Context) FeatureSpecResponseOutput {
	return o
}

// FeatureState contains high-level state information and per-feature state information for this MembershipFeature.
type FeatureStateResponse struct {
	// The high-level state of this MembershipFeature.
	State StateResponse `pulumi:"state"`
}

// FeatureState contains high-level state information and per-feature state information for this MembershipFeature.
type FeatureStateResponseOutput struct{ *pulumi.OutputState }

func (FeatureStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FeatureStateResponse)(nil)).Elem()
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutput() FeatureStateResponseOutput {
	return o
}

func (o FeatureStateResponseOutput) ToFeatureStateResponseOutputWithContext(ctx context.Context) FeatureStateResponseOutput {
	return o
}

// The high-level state of this MembershipFeature.
func (o FeatureStateResponseOutput) State() StateResponseOutput {
	return o.ApplyT(func(v FeatureStateResponse) StateResponse { return v.State }).(StateResponseOutput)
}

// ResourceState describes the state of a MembershipFeature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the MembershipFeature.
type ResourceState struct {
}

// ResourceStateInput is an input type that accepts ResourceStateArgs and ResourceStateOutput values.
// You can construct a concrete instance of `ResourceStateInput` via:
//
//          ResourceStateArgs{...}
type ResourceStateInput interface {
	pulumi.Input

	ToResourceStateOutput() ResourceStateOutput
	ToResourceStateOutputWithContext(context.Context) ResourceStateOutput
}

// ResourceState describes the state of a MembershipFeature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the MembershipFeature.
type ResourceStateArgs struct {
}

func (ResourceStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceState)(nil)).Elem()
}

func (i ResourceStateArgs) ToResourceStateOutput() ResourceStateOutput {
	return i.ToResourceStateOutputWithContext(context.Background())
}

func (i ResourceStateArgs) ToResourceStateOutputWithContext(ctx context.Context) ResourceStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceStateOutput)
}

func (i ResourceStateArgs) ToResourceStatePtrOutput() ResourceStatePtrOutput {
	return i.ToResourceStatePtrOutputWithContext(context.Background())
}

func (i ResourceStateArgs) ToResourceStatePtrOutputWithContext(ctx context.Context) ResourceStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceStateOutput).ToResourceStatePtrOutputWithContext(ctx)
}

// ResourceStatePtrInput is an input type that accepts ResourceStateArgs, ResourceStatePtr and ResourceStatePtrOutput values.
// You can construct a concrete instance of `ResourceStatePtrInput` via:
//
//          ResourceStateArgs{...}
//
//  or:
//
//          nil
type ResourceStatePtrInput interface {
	pulumi.Input

	ToResourceStatePtrOutput() ResourceStatePtrOutput
	ToResourceStatePtrOutputWithContext(context.Context) ResourceStatePtrOutput
}

type resourceStatePtrType ResourceStateArgs

func ResourceStatePtr(v *ResourceStateArgs) ResourceStatePtrInput {
	return (*resourceStatePtrType)(v)
}

func (*resourceStatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceState)(nil)).Elem()
}

func (i *resourceStatePtrType) ToResourceStatePtrOutput() ResourceStatePtrOutput {
	return i.ToResourceStatePtrOutputWithContext(context.Background())
}

func (i *resourceStatePtrType) ToResourceStatePtrOutputWithContext(ctx context.Context) ResourceStatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceStatePtrOutput)
}

// ResourceState describes the state of a MembershipFeature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the MembershipFeature.
type ResourceStateOutput struct{ *pulumi.OutputState }

func (ResourceStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceState)(nil)).Elem()
}

func (o ResourceStateOutput) ToResourceStateOutput() ResourceStateOutput {
	return o
}

func (o ResourceStateOutput) ToResourceStateOutputWithContext(ctx context.Context) ResourceStateOutput {
	return o
}

func (o ResourceStateOutput) ToResourceStatePtrOutput() ResourceStatePtrOutput {
	return o.ToResourceStatePtrOutputWithContext(context.Background())
}

func (o ResourceStateOutput) ToResourceStatePtrOutputWithContext(ctx context.Context) ResourceStatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceState) *ResourceState {
		return &v
	}).(ResourceStatePtrOutput)
}

type ResourceStatePtrOutput struct{ *pulumi.OutputState }

func (ResourceStatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceState)(nil)).Elem()
}

func (o ResourceStatePtrOutput) ToResourceStatePtrOutput() ResourceStatePtrOutput {
	return o
}

func (o ResourceStatePtrOutput) ToResourceStatePtrOutputWithContext(ctx context.Context) ResourceStatePtrOutput {
	return o
}

func (o ResourceStatePtrOutput) Elem() ResourceStateOutput {
	return o.ApplyT(func(v *ResourceState) ResourceState {
		if v != nil {
			return *v
		}
		var ret ResourceState
		return ret
	}).(ResourceStateOutput)
}

// ResourceState describes the state of a MembershipFeature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the MembershipFeature.
type ResourceStateResponse struct {
	// The current state of the Feature resource in the Hub API.
	State string `pulumi:"state"`
}

// ResourceState describes the state of a MembershipFeature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the MembershipFeature.
type ResourceStateResponseOutput struct{ *pulumi.OutputState }

func (ResourceStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceStateResponse)(nil)).Elem()
}

func (o ResourceStateResponseOutput) ToResourceStateResponseOutput() ResourceStateResponseOutput {
	return o
}

func (o ResourceStateResponseOutput) ToResourceStateResponseOutputWithContext(ctx context.Context) ResourceStateResponseOutput {
	return o
}

// The current state of the Feature resource in the Hub API.
func (o ResourceStateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ResourceStateResponse) string { return v.State }).(pulumi.StringOutput)
}

// High-level state of a MembershipFeature.
type StateResponse struct {
	// The high-level, machine-readable status of this MembershipFeature.
	Code string `pulumi:"code"`
	// A human-readable description of the current status.
	Description string `pulumi:"description"`
	// The time this status and any related Feature-specific details were updated.
	UpdateTime string `pulumi:"updateTime"`
}

// High-level state of a MembershipFeature.
type StateResponseOutput struct{ *pulumi.OutputState }

func (StateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateResponse)(nil)).Elem()
}

func (o StateResponseOutput) ToStateResponseOutput() StateResponseOutput {
	return o
}

func (o StateResponseOutput) ToStateResponseOutputWithContext(ctx context.Context) StateResponseOutput {
	return o
}

// The high-level, machine-readable status of this MembershipFeature.
func (o StateResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v StateResponse) string { return v.Code }).(pulumi.StringOutput)
}

// A human-readable description of the current status.
func (o StateResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v StateResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The time this status and any related Feature-specific details were updated.
func (o StateResponseOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v StateResponse) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureConfigRefInput)(nil)).Elem(), FeatureConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureConfigRefPtrInput)(nil)).Elem(), FeatureConfigRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureConfigStateTypeInput)(nil)).Elem(), FeatureConfigStateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureConfigStateTypePtrInput)(nil)).Elem(), FeatureConfigStateTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureSpecInput)(nil)).Elem(), FeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureSpecPtrInput)(nil)).Elem(), FeatureSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceStateInput)(nil)).Elem(), ResourceStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceStatePtrInput)(nil)).Elem(), ResourceStateArgs{})
	pulumi.RegisterOutputType(FeatureConfigRefOutput{})
	pulumi.RegisterOutputType(FeatureConfigRefPtrOutput{})
	pulumi.RegisterOutputType(FeatureConfigRefResponseOutput{})
	pulumi.RegisterOutputType(FeatureConfigStateTypeOutput{})
	pulumi.RegisterOutputType(FeatureConfigStateTypePtrOutput{})
	pulumi.RegisterOutputType(FeatureConfigStateResponseOutput{})
	pulumi.RegisterOutputType(FeatureSpecOutput{})
	pulumi.RegisterOutputType(FeatureSpecPtrOutput{})
	pulumi.RegisterOutputType(FeatureSpecResponseOutput{})
	pulumi.RegisterOutputType(FeatureStateResponseOutput{})
	pulumi.RegisterOutputType(ResourceStateOutput{})
	pulumi.RegisterOutputType(ResourceStatePtrOutput{})
	pulumi.RegisterOutputType(ResourceStateResponseOutput{})
	pulumi.RegisterOutputType(StateResponseOutput{})
}
