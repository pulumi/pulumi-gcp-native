// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v2alpha

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates membershipFeature under a given parent.
// Auto-naming is currently not supported for this resource.
type Feature struct {
	pulumi.CustomResourceState

	// When the MembershipFeature resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// When the MembershipFeature resource was deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Reference information for a FeatureConfig applied on the MembershipFeature.
	FeatureConfigRef FeatureConfigRefResponseOutput `pulumi:"featureConfigRef"`
	// GCP labels for this MembershipFeature.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource name of the membershipFeature, in the format: `projects/{project}/locations/{location}/memberships/{membership}/features/{feature}`. Note that `membershipFeatures` is shortened to `features` in the resource name. (see http://go/aip/122#collection-identifiers)
	Name pulumi.StringOutput `pulumi:"name"`
	// Lifecycle information of the resource itself.
	ResourceState ResourceStateResponseOutput `pulumi:"resourceState"`
	// Spec of this membershipFeature.
	Spec FeatureSpecResponseOutput `pulumi:"spec"`
	// State of the this membershipFeature.
	State FeatureStateResponseOutput `pulumi:"state"`
	// When the MembershipFeature resource was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFeature registers a new resource with the given unique name, arguments, and options.
func NewFeature(ctx *pulumi.Context,
	name string, args *FeatureArgs, opts ...pulumi.ResourceOption) (*Feature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MembershipId == nil {
		return nil, errors.New("invalid value for required argument 'MembershipId'")
	}
	var resource Feature
	err := ctx.RegisterResource("google-native:gkehub/v2alpha:Feature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeature gets an existing Feature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureState, opts ...pulumi.ResourceOption) (*Feature, error) {
	var resource Feature
	err := ctx.ReadResource("google-native:gkehub/v2alpha:Feature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Feature resources.
type featureState struct {
}

type FeatureState struct {
}

func (FeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureState)(nil)).Elem()
}

type featureArgs struct {
	// Reference information for a FeatureConfig applied on the MembershipFeature.
	FeatureConfigRef *FeatureConfigRef `pulumi:"featureConfigRef"`
	// GCP labels for this MembershipFeature.
	Labels       map[string]string `pulumi:"labels"`
	Location     *string           `pulumi:"location"`
	MembershipId string            `pulumi:"membershipId"`
	Project      *string           `pulumi:"project"`
	// Idempotent request UUID.
	RequestId *string `pulumi:"requestId"`
	// Lifecycle information of the resource itself.
	ResourceState *ResourceState `pulumi:"resourceState"`
}

// The set of arguments for constructing a Feature resource.
type FeatureArgs struct {
	// Reference information for a FeatureConfig applied on the MembershipFeature.
	FeatureConfigRef FeatureConfigRefPtrInput
	// GCP labels for this MembershipFeature.
	Labels       pulumi.StringMapInput
	Location     pulumi.StringPtrInput
	MembershipId pulumi.StringInput
	Project      pulumi.StringPtrInput
	// Idempotent request UUID.
	RequestId pulumi.StringPtrInput
	// Lifecycle information of the resource itself.
	ResourceState ResourceStatePtrInput
}

func (FeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureArgs)(nil)).Elem()
}

type FeatureInput interface {
	pulumi.Input

	ToFeatureOutput() FeatureOutput
	ToFeatureOutputWithContext(ctx context.Context) FeatureOutput
}

func (*Feature) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (i *Feature) ToFeatureOutput() FeatureOutput {
	return i.ToFeatureOutputWithContext(context.Background())
}

func (i *Feature) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureOutput)
}

type FeatureOutput struct{ *pulumi.OutputState }

func (FeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Feature)(nil)).Elem()
}

func (o FeatureOutput) ToFeatureOutput() FeatureOutput {
	return o
}

func (o FeatureOutput) ToFeatureOutputWithContext(ctx context.Context) FeatureOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureInput)(nil)).Elem(), &Feature{})
	pulumi.RegisterOutputType(FeatureOutput{})
}
