// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
type AwsAccessRole struct {
	// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
	IamRoleId *string `pulumi:"iamRoleId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
	Identity *string `pulumi:"identity"`
}

// AwsAccessRoleInput is an input type that accepts AwsAccessRoleArgs and AwsAccessRoleOutput values.
// You can construct a concrete instance of `AwsAccessRoleInput` via:
//
//	AwsAccessRoleArgs{...}
type AwsAccessRoleInput interface {
	pulumi.Input

	ToAwsAccessRoleOutput() AwsAccessRoleOutput
	ToAwsAccessRoleOutputWithContext(context.Context) AwsAccessRoleOutput
}

// Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
type AwsAccessRoleArgs struct {
	// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
	IamRoleId pulumi.StringPtrInput `pulumi:"iamRoleId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
	Identity pulumi.StringPtrInput `pulumi:"identity"`
}

func (AwsAccessRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsAccessRole)(nil)).Elem()
}

func (i AwsAccessRoleArgs) ToAwsAccessRoleOutput() AwsAccessRoleOutput {
	return i.ToAwsAccessRoleOutputWithContext(context.Background())
}

func (i AwsAccessRoleArgs) ToAwsAccessRoleOutputWithContext(ctx context.Context) AwsAccessRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAccessRoleOutput)
}

func (i AwsAccessRoleArgs) ToAwsAccessRolePtrOutput() AwsAccessRolePtrOutput {
	return i.ToAwsAccessRolePtrOutputWithContext(context.Background())
}

func (i AwsAccessRoleArgs) ToAwsAccessRolePtrOutputWithContext(ctx context.Context) AwsAccessRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAccessRoleOutput).ToAwsAccessRolePtrOutputWithContext(ctx)
}

// AwsAccessRolePtrInput is an input type that accepts AwsAccessRoleArgs, AwsAccessRolePtr and AwsAccessRolePtrOutput values.
// You can construct a concrete instance of `AwsAccessRolePtrInput` via:
//
//	        AwsAccessRoleArgs{...}
//
//	or:
//
//	        nil
type AwsAccessRolePtrInput interface {
	pulumi.Input

	ToAwsAccessRolePtrOutput() AwsAccessRolePtrOutput
	ToAwsAccessRolePtrOutputWithContext(context.Context) AwsAccessRolePtrOutput
}

type awsAccessRolePtrType AwsAccessRoleArgs

func AwsAccessRolePtr(v *AwsAccessRoleArgs) AwsAccessRolePtrInput {
	return (*awsAccessRolePtrType)(v)
}

func (*awsAccessRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsAccessRole)(nil)).Elem()
}

func (i *awsAccessRolePtrType) ToAwsAccessRolePtrOutput() AwsAccessRolePtrOutput {
	return i.ToAwsAccessRolePtrOutputWithContext(context.Background())
}

func (i *awsAccessRolePtrType) ToAwsAccessRolePtrOutputWithContext(ctx context.Context) AwsAccessRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsAccessRolePtrOutput)
}

// Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
type AwsAccessRoleOutput struct{ *pulumi.OutputState }

func (AwsAccessRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsAccessRole)(nil)).Elem()
}

func (o AwsAccessRoleOutput) ToAwsAccessRoleOutput() AwsAccessRoleOutput {
	return o
}

func (o AwsAccessRoleOutput) ToAwsAccessRoleOutputWithContext(ctx context.Context) AwsAccessRoleOutput {
	return o
}

func (o AwsAccessRoleOutput) ToAwsAccessRolePtrOutput() AwsAccessRolePtrOutput {
	return o.ToAwsAccessRolePtrOutputWithContext(context.Background())
}

func (o AwsAccessRoleOutput) ToAwsAccessRolePtrOutputWithContext(ctx context.Context) AwsAccessRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AwsAccessRole) *AwsAccessRole {
		return &v
	}).(AwsAccessRolePtrOutput)
}

// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
func (o AwsAccessRoleOutput) IamRoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsAccessRole) *string { return v.IamRoleId }).(pulumi.StringPtrOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
func (o AwsAccessRoleOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AwsAccessRole) *string { return v.Identity }).(pulumi.StringPtrOutput)
}

type AwsAccessRolePtrOutput struct{ *pulumi.OutputState }

func (AwsAccessRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsAccessRole)(nil)).Elem()
}

func (o AwsAccessRolePtrOutput) ToAwsAccessRolePtrOutput() AwsAccessRolePtrOutput {
	return o
}

func (o AwsAccessRolePtrOutput) ToAwsAccessRolePtrOutputWithContext(ctx context.Context) AwsAccessRolePtrOutput {
	return o
}

func (o AwsAccessRolePtrOutput) Elem() AwsAccessRoleOutput {
	return o.ApplyT(func(v *AwsAccessRole) AwsAccessRole {
		if v != nil {
			return *v
		}
		var ret AwsAccessRole
		return ret
	}).(AwsAccessRoleOutput)
}

// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
func (o AwsAccessRolePtrOutput) IamRoleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsAccessRole) *string {
		if v == nil {
			return nil
		}
		return v.IamRoleId
	}).(pulumi.StringPtrOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
func (o AwsAccessRolePtrOutput) Identity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AwsAccessRole) *string {
		if v == nil {
			return nil
		}
		return v.Identity
	}).(pulumi.StringPtrOutput)
}

// Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
type AwsAccessRoleResponse struct {
	// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
	IamRoleId string `pulumi:"iamRoleId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
	Identity string `pulumi:"identity"`
}

// Authentication method for Amazon Web Services (AWS) that uses Google owned Google service account to assume into customer's AWS IAM Role.
type AwsAccessRoleResponseOutput struct{ *pulumi.OutputState }

func (AwsAccessRoleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsAccessRoleResponse)(nil)).Elem()
}

func (o AwsAccessRoleResponseOutput) ToAwsAccessRoleResponseOutput() AwsAccessRoleResponseOutput {
	return o
}

func (o AwsAccessRoleResponseOutput) ToAwsAccessRoleResponseOutputWithContext(ctx context.Context) AwsAccessRoleResponseOutput {
	return o
}

// The user’s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
func (o AwsAccessRoleResponseOutput) IamRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v AwsAccessRoleResponse) string { return v.IamRoleId }).(pulumi.StringOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
func (o AwsAccessRoleResponseOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v AwsAccessRoleResponse) string { return v.Identity }).(pulumi.StringOutput)
}

// Connection properties specific to Amazon Web Services (AWS).
type AwsProperties struct {
	// Authentication using Google owned service account to assume into customer's AWS IAM Role.
	AccessRole *AwsAccessRole `pulumi:"accessRole"`
}

// AwsPropertiesInput is an input type that accepts AwsPropertiesArgs and AwsPropertiesOutput values.
// You can construct a concrete instance of `AwsPropertiesInput` via:
//
//	AwsPropertiesArgs{...}
type AwsPropertiesInput interface {
	pulumi.Input

	ToAwsPropertiesOutput() AwsPropertiesOutput
	ToAwsPropertiesOutputWithContext(context.Context) AwsPropertiesOutput
}

// Connection properties specific to Amazon Web Services (AWS).
type AwsPropertiesArgs struct {
	// Authentication using Google owned service account to assume into customer's AWS IAM Role.
	AccessRole AwsAccessRolePtrInput `pulumi:"accessRole"`
}

func (AwsPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsProperties)(nil)).Elem()
}

func (i AwsPropertiesArgs) ToAwsPropertiesOutput() AwsPropertiesOutput {
	return i.ToAwsPropertiesOutputWithContext(context.Background())
}

func (i AwsPropertiesArgs) ToAwsPropertiesOutputWithContext(ctx context.Context) AwsPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsPropertiesOutput)
}

func (i AwsPropertiesArgs) ToAwsPropertiesPtrOutput() AwsPropertiesPtrOutput {
	return i.ToAwsPropertiesPtrOutputWithContext(context.Background())
}

func (i AwsPropertiesArgs) ToAwsPropertiesPtrOutputWithContext(ctx context.Context) AwsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsPropertiesOutput).ToAwsPropertiesPtrOutputWithContext(ctx)
}

// AwsPropertiesPtrInput is an input type that accepts AwsPropertiesArgs, AwsPropertiesPtr and AwsPropertiesPtrOutput values.
// You can construct a concrete instance of `AwsPropertiesPtrInput` via:
//
//	        AwsPropertiesArgs{...}
//
//	or:
//
//	        nil
type AwsPropertiesPtrInput interface {
	pulumi.Input

	ToAwsPropertiesPtrOutput() AwsPropertiesPtrOutput
	ToAwsPropertiesPtrOutputWithContext(context.Context) AwsPropertiesPtrOutput
}

type awsPropertiesPtrType AwsPropertiesArgs

func AwsPropertiesPtr(v *AwsPropertiesArgs) AwsPropertiesPtrInput {
	return (*awsPropertiesPtrType)(v)
}

func (*awsPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProperties)(nil)).Elem()
}

func (i *awsPropertiesPtrType) ToAwsPropertiesPtrOutput() AwsPropertiesPtrOutput {
	return i.ToAwsPropertiesPtrOutputWithContext(context.Background())
}

func (i *awsPropertiesPtrType) ToAwsPropertiesPtrOutputWithContext(ctx context.Context) AwsPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsPropertiesPtrOutput)
}

// Connection properties specific to Amazon Web Services (AWS).
type AwsPropertiesOutput struct{ *pulumi.OutputState }

func (AwsPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsProperties)(nil)).Elem()
}

func (o AwsPropertiesOutput) ToAwsPropertiesOutput() AwsPropertiesOutput {
	return o
}

func (o AwsPropertiesOutput) ToAwsPropertiesOutputWithContext(ctx context.Context) AwsPropertiesOutput {
	return o
}

func (o AwsPropertiesOutput) ToAwsPropertiesPtrOutput() AwsPropertiesPtrOutput {
	return o.ToAwsPropertiesPtrOutputWithContext(context.Background())
}

func (o AwsPropertiesOutput) ToAwsPropertiesPtrOutputWithContext(ctx context.Context) AwsPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AwsProperties) *AwsProperties {
		return &v
	}).(AwsPropertiesPtrOutput)
}

// Authentication using Google owned service account to assume into customer's AWS IAM Role.
func (o AwsPropertiesOutput) AccessRole() AwsAccessRolePtrOutput {
	return o.ApplyT(func(v AwsProperties) *AwsAccessRole { return v.AccessRole }).(AwsAccessRolePtrOutput)
}

type AwsPropertiesPtrOutput struct{ *pulumi.OutputState }

func (AwsPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsProperties)(nil)).Elem()
}

func (o AwsPropertiesPtrOutput) ToAwsPropertiesPtrOutput() AwsPropertiesPtrOutput {
	return o
}

func (o AwsPropertiesPtrOutput) ToAwsPropertiesPtrOutputWithContext(ctx context.Context) AwsPropertiesPtrOutput {
	return o
}

func (o AwsPropertiesPtrOutput) Elem() AwsPropertiesOutput {
	return o.ApplyT(func(v *AwsProperties) AwsProperties {
		if v != nil {
			return *v
		}
		var ret AwsProperties
		return ret
	}).(AwsPropertiesOutput)
}

// Authentication using Google owned service account to assume into customer's AWS IAM Role.
func (o AwsPropertiesPtrOutput) AccessRole() AwsAccessRolePtrOutput {
	return o.ApplyT(func(v *AwsProperties) *AwsAccessRole {
		if v == nil {
			return nil
		}
		return v.AccessRole
	}).(AwsAccessRolePtrOutput)
}

// Connection properties specific to Amazon Web Services (AWS).
type AwsPropertiesResponse struct {
	// Authentication using Google owned service account to assume into customer's AWS IAM Role.
	AccessRole AwsAccessRoleResponse `pulumi:"accessRole"`
}

// Connection properties specific to Amazon Web Services (AWS).
type AwsPropertiesResponseOutput struct{ *pulumi.OutputState }

func (AwsPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AwsPropertiesResponse)(nil)).Elem()
}

func (o AwsPropertiesResponseOutput) ToAwsPropertiesResponseOutput() AwsPropertiesResponseOutput {
	return o
}

func (o AwsPropertiesResponseOutput) ToAwsPropertiesResponseOutputWithContext(ctx context.Context) AwsPropertiesResponseOutput {
	return o
}

// Authentication using Google owned service account to assume into customer's AWS IAM Role.
func (o AwsPropertiesResponseOutput) AccessRole() AwsAccessRoleResponseOutput {
	return o.ApplyT(func(v AwsPropertiesResponse) AwsAccessRoleResponse { return v.AccessRole }).(AwsAccessRoleResponseOutput)
}

// Container for connection properties specific to Azure.
type AzureProperties struct {
	// The id of customer's directory that host the data.
	CustomerTenantId *string `pulumi:"customerTenantId"`
	// The client ID of the user's Azure Active Directory Application used for a federated connection.
	FederatedApplicationClientId *string `pulumi:"federatedApplicationClientId"`
	// The URL user will be redirected to after granting consent during connection setup.
	RedirectUri *string `pulumi:"redirectUri"`
}

// AzurePropertiesInput is an input type that accepts AzurePropertiesArgs and AzurePropertiesOutput values.
// You can construct a concrete instance of `AzurePropertiesInput` via:
//
//	AzurePropertiesArgs{...}
type AzurePropertiesInput interface {
	pulumi.Input

	ToAzurePropertiesOutput() AzurePropertiesOutput
	ToAzurePropertiesOutputWithContext(context.Context) AzurePropertiesOutput
}

// Container for connection properties specific to Azure.
type AzurePropertiesArgs struct {
	// The id of customer's directory that host the data.
	CustomerTenantId pulumi.StringPtrInput `pulumi:"customerTenantId"`
	// The client ID of the user's Azure Active Directory Application used for a federated connection.
	FederatedApplicationClientId pulumi.StringPtrInput `pulumi:"federatedApplicationClientId"`
	// The URL user will be redirected to after granting consent during connection setup.
	RedirectUri pulumi.StringPtrInput `pulumi:"redirectUri"`
}

func (AzurePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureProperties)(nil)).Elem()
}

func (i AzurePropertiesArgs) ToAzurePropertiesOutput() AzurePropertiesOutput {
	return i.ToAzurePropertiesOutputWithContext(context.Background())
}

func (i AzurePropertiesArgs) ToAzurePropertiesOutputWithContext(ctx context.Context) AzurePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePropertiesOutput)
}

func (i AzurePropertiesArgs) ToAzurePropertiesPtrOutput() AzurePropertiesPtrOutput {
	return i.ToAzurePropertiesPtrOutputWithContext(context.Background())
}

func (i AzurePropertiesArgs) ToAzurePropertiesPtrOutputWithContext(ctx context.Context) AzurePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePropertiesOutput).ToAzurePropertiesPtrOutputWithContext(ctx)
}

// AzurePropertiesPtrInput is an input type that accepts AzurePropertiesArgs, AzurePropertiesPtr and AzurePropertiesPtrOutput values.
// You can construct a concrete instance of `AzurePropertiesPtrInput` via:
//
//	        AzurePropertiesArgs{...}
//
//	or:
//
//	        nil
type AzurePropertiesPtrInput interface {
	pulumi.Input

	ToAzurePropertiesPtrOutput() AzurePropertiesPtrOutput
	ToAzurePropertiesPtrOutputWithContext(context.Context) AzurePropertiesPtrOutput
}

type azurePropertiesPtrType AzurePropertiesArgs

func AzurePropertiesPtr(v *AzurePropertiesArgs) AzurePropertiesPtrInput {
	return (*azurePropertiesPtrType)(v)
}

func (*azurePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureProperties)(nil)).Elem()
}

func (i *azurePropertiesPtrType) ToAzurePropertiesPtrOutput() AzurePropertiesPtrOutput {
	return i.ToAzurePropertiesPtrOutputWithContext(context.Background())
}

func (i *azurePropertiesPtrType) ToAzurePropertiesPtrOutputWithContext(ctx context.Context) AzurePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AzurePropertiesPtrOutput)
}

// Container for connection properties specific to Azure.
type AzurePropertiesOutput struct{ *pulumi.OutputState }

func (AzurePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzureProperties)(nil)).Elem()
}

func (o AzurePropertiesOutput) ToAzurePropertiesOutput() AzurePropertiesOutput {
	return o
}

func (o AzurePropertiesOutput) ToAzurePropertiesOutputWithContext(ctx context.Context) AzurePropertiesOutput {
	return o
}

func (o AzurePropertiesOutput) ToAzurePropertiesPtrOutput() AzurePropertiesPtrOutput {
	return o.ToAzurePropertiesPtrOutputWithContext(context.Background())
}

func (o AzurePropertiesOutput) ToAzurePropertiesPtrOutputWithContext(ctx context.Context) AzurePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AzureProperties) *AzureProperties {
		return &v
	}).(AzurePropertiesPtrOutput)
}

// The id of customer's directory that host the data.
func (o AzurePropertiesOutput) CustomerTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureProperties) *string { return v.CustomerTenantId }).(pulumi.StringPtrOutput)
}

// The client ID of the user's Azure Active Directory Application used for a federated connection.
func (o AzurePropertiesOutput) FederatedApplicationClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureProperties) *string { return v.FederatedApplicationClientId }).(pulumi.StringPtrOutput)
}

// The URL user will be redirected to after granting consent during connection setup.
func (o AzurePropertiesOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AzureProperties) *string { return v.RedirectUri }).(pulumi.StringPtrOutput)
}

type AzurePropertiesPtrOutput struct{ *pulumi.OutputState }

func (AzurePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AzureProperties)(nil)).Elem()
}

func (o AzurePropertiesPtrOutput) ToAzurePropertiesPtrOutput() AzurePropertiesPtrOutput {
	return o
}

func (o AzurePropertiesPtrOutput) ToAzurePropertiesPtrOutputWithContext(ctx context.Context) AzurePropertiesPtrOutput {
	return o
}

func (o AzurePropertiesPtrOutput) Elem() AzurePropertiesOutput {
	return o.ApplyT(func(v *AzureProperties) AzureProperties {
		if v != nil {
			return *v
		}
		var ret AzureProperties
		return ret
	}).(AzurePropertiesOutput)
}

// The id of customer's directory that host the data.
func (o AzurePropertiesPtrOutput) CustomerTenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureProperties) *string {
		if v == nil {
			return nil
		}
		return v.CustomerTenantId
	}).(pulumi.StringPtrOutput)
}

// The client ID of the user's Azure Active Directory Application used for a federated connection.
func (o AzurePropertiesPtrOutput) FederatedApplicationClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureProperties) *string {
		if v == nil {
			return nil
		}
		return v.FederatedApplicationClientId
	}).(pulumi.StringPtrOutput)
}

// The URL user will be redirected to after granting consent during connection setup.
func (o AzurePropertiesPtrOutput) RedirectUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AzureProperties) *string {
		if v == nil {
			return nil
		}
		return v.RedirectUri
	}).(pulumi.StringPtrOutput)
}

// Container for connection properties specific to Azure.
type AzurePropertiesResponse struct {
	// The name of the Azure Active Directory Application.
	Application string `pulumi:"application"`
	// The client id of the Azure Active Directory Application.
	ClientId string `pulumi:"clientId"`
	// The id of customer's directory that host the data.
	CustomerTenantId string `pulumi:"customerTenantId"`
	// The client ID of the user's Azure Active Directory Application used for a federated connection.
	FederatedApplicationClientId string `pulumi:"federatedApplicationClientId"`
	// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
	Identity string `pulumi:"identity"`
	// The object id of the Azure Active Directory Application.
	ObjectId string `pulumi:"objectId"`
	// The URL user will be redirected to after granting consent during connection setup.
	RedirectUri string `pulumi:"redirectUri"`
}

// Container for connection properties specific to Azure.
type AzurePropertiesResponseOutput struct{ *pulumi.OutputState }

func (AzurePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AzurePropertiesResponse)(nil)).Elem()
}

func (o AzurePropertiesResponseOutput) ToAzurePropertiesResponseOutput() AzurePropertiesResponseOutput {
	return o
}

func (o AzurePropertiesResponseOutput) ToAzurePropertiesResponseOutputWithContext(ctx context.Context) AzurePropertiesResponseOutput {
	return o
}

// The name of the Azure Active Directory Application.
func (o AzurePropertiesResponseOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePropertiesResponse) string { return v.Application }).(pulumi.StringOutput)
}

// The client id of the Azure Active Directory Application.
func (o AzurePropertiesResponseOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePropertiesResponse) string { return v.ClientId }).(pulumi.StringOutput)
}

// The id of customer's directory that host the data.
func (o AzurePropertiesResponseOutput) CustomerTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePropertiesResponse) string { return v.CustomerTenantId }).(pulumi.StringOutput)
}

// The client ID of the user's Azure Active Directory Application used for a federated connection.
func (o AzurePropertiesResponseOutput) FederatedApplicationClientId() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePropertiesResponse) string { return v.FederatedApplicationClientId }).(pulumi.StringOutput)
}

// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
func (o AzurePropertiesResponseOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePropertiesResponse) string { return v.Identity }).(pulumi.StringOutput)
}

// The object id of the Azure Active Directory Application.
func (o AzurePropertiesResponseOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePropertiesResponse) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The URL user will be redirected to after granting consent during connection setup.
func (o AzurePropertiesResponseOutput) RedirectUri() pulumi.StringOutput {
	return o.ApplyT(func(v AzurePropertiesResponse) string { return v.RedirectUri }).(pulumi.StringOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM roles and permissions, see the [IAM documentation](https://cloud.google.com/iam/docs/roles-overview). For a list of the available pre-defined roles, see [here](https://cloud.google.com/iam/docs/understanding-roles).
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Container for connection properties for delegation of access to GCP resources.
type CloudResourceProperties struct {
}

// CloudResourcePropertiesInput is an input type that accepts CloudResourcePropertiesArgs and CloudResourcePropertiesOutput values.
// You can construct a concrete instance of `CloudResourcePropertiesInput` via:
//
//	CloudResourcePropertiesArgs{...}
type CloudResourcePropertiesInput interface {
	pulumi.Input

	ToCloudResourcePropertiesOutput() CloudResourcePropertiesOutput
	ToCloudResourcePropertiesOutputWithContext(context.Context) CloudResourcePropertiesOutput
}

// Container for connection properties for delegation of access to GCP resources.
type CloudResourcePropertiesArgs struct {
}

func (CloudResourcePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudResourceProperties)(nil)).Elem()
}

func (i CloudResourcePropertiesArgs) ToCloudResourcePropertiesOutput() CloudResourcePropertiesOutput {
	return i.ToCloudResourcePropertiesOutputWithContext(context.Background())
}

func (i CloudResourcePropertiesArgs) ToCloudResourcePropertiesOutputWithContext(ctx context.Context) CloudResourcePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudResourcePropertiesOutput)
}

func (i CloudResourcePropertiesArgs) ToCloudResourcePropertiesPtrOutput() CloudResourcePropertiesPtrOutput {
	return i.ToCloudResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i CloudResourcePropertiesArgs) ToCloudResourcePropertiesPtrOutputWithContext(ctx context.Context) CloudResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudResourcePropertiesOutput).ToCloudResourcePropertiesPtrOutputWithContext(ctx)
}

// CloudResourcePropertiesPtrInput is an input type that accepts CloudResourcePropertiesArgs, CloudResourcePropertiesPtr and CloudResourcePropertiesPtrOutput values.
// You can construct a concrete instance of `CloudResourcePropertiesPtrInput` via:
//
//	        CloudResourcePropertiesArgs{...}
//
//	or:
//
//	        nil
type CloudResourcePropertiesPtrInput interface {
	pulumi.Input

	ToCloudResourcePropertiesPtrOutput() CloudResourcePropertiesPtrOutput
	ToCloudResourcePropertiesPtrOutputWithContext(context.Context) CloudResourcePropertiesPtrOutput
}

type cloudResourcePropertiesPtrType CloudResourcePropertiesArgs

func CloudResourcePropertiesPtr(v *CloudResourcePropertiesArgs) CloudResourcePropertiesPtrInput {
	return (*cloudResourcePropertiesPtrType)(v)
}

func (*cloudResourcePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudResourceProperties)(nil)).Elem()
}

func (i *cloudResourcePropertiesPtrType) ToCloudResourcePropertiesPtrOutput() CloudResourcePropertiesPtrOutput {
	return i.ToCloudResourcePropertiesPtrOutputWithContext(context.Background())
}

func (i *cloudResourcePropertiesPtrType) ToCloudResourcePropertiesPtrOutputWithContext(ctx context.Context) CloudResourcePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudResourcePropertiesPtrOutput)
}

// Container for connection properties for delegation of access to GCP resources.
type CloudResourcePropertiesOutput struct{ *pulumi.OutputState }

func (CloudResourcePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudResourceProperties)(nil)).Elem()
}

func (o CloudResourcePropertiesOutput) ToCloudResourcePropertiesOutput() CloudResourcePropertiesOutput {
	return o
}

func (o CloudResourcePropertiesOutput) ToCloudResourcePropertiesOutputWithContext(ctx context.Context) CloudResourcePropertiesOutput {
	return o
}

func (o CloudResourcePropertiesOutput) ToCloudResourcePropertiesPtrOutput() CloudResourcePropertiesPtrOutput {
	return o.ToCloudResourcePropertiesPtrOutputWithContext(context.Background())
}

func (o CloudResourcePropertiesOutput) ToCloudResourcePropertiesPtrOutputWithContext(ctx context.Context) CloudResourcePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudResourceProperties) *CloudResourceProperties {
		return &v
	}).(CloudResourcePropertiesPtrOutput)
}

type CloudResourcePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CloudResourcePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudResourceProperties)(nil)).Elem()
}

func (o CloudResourcePropertiesPtrOutput) ToCloudResourcePropertiesPtrOutput() CloudResourcePropertiesPtrOutput {
	return o
}

func (o CloudResourcePropertiesPtrOutput) ToCloudResourcePropertiesPtrOutputWithContext(ctx context.Context) CloudResourcePropertiesPtrOutput {
	return o
}

func (o CloudResourcePropertiesPtrOutput) Elem() CloudResourcePropertiesOutput {
	return o.ApplyT(func(v *CloudResourceProperties) CloudResourceProperties {
		if v != nil {
			return *v
		}
		var ret CloudResourceProperties
		return ret
	}).(CloudResourcePropertiesOutput)
}

// Container for connection properties for delegation of access to GCP resources.
type CloudResourcePropertiesResponse struct {
	// The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of an operation in BigQuery, the service account will be used to connect to the desired resources in GCP. The account ID is in the form of: @gcp-sa-bigquery-cloudresource.iam.gserviceaccount.com
	ServiceAccountId string `pulumi:"serviceAccountId"`
}

// Container for connection properties for delegation of access to GCP resources.
type CloudResourcePropertiesResponseOutput struct{ *pulumi.OutputState }

func (CloudResourcePropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudResourcePropertiesResponse)(nil)).Elem()
}

func (o CloudResourcePropertiesResponseOutput) ToCloudResourcePropertiesResponseOutput() CloudResourcePropertiesResponseOutput {
	return o
}

func (o CloudResourcePropertiesResponseOutput) ToCloudResourcePropertiesResponseOutputWithContext(ctx context.Context) CloudResourcePropertiesResponseOutput {
	return o
}

// The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of an operation in BigQuery, the service account will be used to connect to the desired resources in GCP. The account ID is in the form of: @gcp-sa-bigquery-cloudresource.iam.gserviceaccount.com
func (o CloudResourcePropertiesResponseOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudResourcePropertiesResponse) string { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// Connection properties specific to Cloud Spanner.
type CloudSpannerProperties struct {
	// Cloud Spanner database in the form `project/instance/database'
	Database *string `pulumi:"database"`
	// Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
	DatabaseRole *string `pulumi:"databaseRole"`
	// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
	MaxParallelism *int `pulumi:"maxParallelism"`
	// If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
	UseDataBoost *bool `pulumi:"useDataBoost"`
	// If parallelism should be used when reading from Cloud Spanner
	UseParallelism *bool `pulumi:"useParallelism"`
	// Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
	//
	// Deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
	UseServerlessAnalytics *bool `pulumi:"useServerlessAnalytics"`
}

// CloudSpannerPropertiesInput is an input type that accepts CloudSpannerPropertiesArgs and CloudSpannerPropertiesOutput values.
// You can construct a concrete instance of `CloudSpannerPropertiesInput` via:
//
//	CloudSpannerPropertiesArgs{...}
type CloudSpannerPropertiesInput interface {
	pulumi.Input

	ToCloudSpannerPropertiesOutput() CloudSpannerPropertiesOutput
	ToCloudSpannerPropertiesOutputWithContext(context.Context) CloudSpannerPropertiesOutput
}

// Connection properties specific to Cloud Spanner.
type CloudSpannerPropertiesArgs struct {
	// Cloud Spanner database in the form `project/instance/database'
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
	DatabaseRole pulumi.StringPtrInput `pulumi:"databaseRole"`
	// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
	MaxParallelism pulumi.IntPtrInput `pulumi:"maxParallelism"`
	// If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
	UseDataBoost pulumi.BoolPtrInput `pulumi:"useDataBoost"`
	// If parallelism should be used when reading from Cloud Spanner
	UseParallelism pulumi.BoolPtrInput `pulumi:"useParallelism"`
	// Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
	//
	// Deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
	UseServerlessAnalytics pulumi.BoolPtrInput `pulumi:"useServerlessAnalytics"`
}

func (CloudSpannerPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSpannerProperties)(nil)).Elem()
}

func (i CloudSpannerPropertiesArgs) ToCloudSpannerPropertiesOutput() CloudSpannerPropertiesOutput {
	return i.ToCloudSpannerPropertiesOutputWithContext(context.Background())
}

func (i CloudSpannerPropertiesArgs) ToCloudSpannerPropertiesOutputWithContext(ctx context.Context) CloudSpannerPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSpannerPropertiesOutput)
}

func (i CloudSpannerPropertiesArgs) ToCloudSpannerPropertiesPtrOutput() CloudSpannerPropertiesPtrOutput {
	return i.ToCloudSpannerPropertiesPtrOutputWithContext(context.Background())
}

func (i CloudSpannerPropertiesArgs) ToCloudSpannerPropertiesPtrOutputWithContext(ctx context.Context) CloudSpannerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSpannerPropertiesOutput).ToCloudSpannerPropertiesPtrOutputWithContext(ctx)
}

// CloudSpannerPropertiesPtrInput is an input type that accepts CloudSpannerPropertiesArgs, CloudSpannerPropertiesPtr and CloudSpannerPropertiesPtrOutput values.
// You can construct a concrete instance of `CloudSpannerPropertiesPtrInput` via:
//
//	        CloudSpannerPropertiesArgs{...}
//
//	or:
//
//	        nil
type CloudSpannerPropertiesPtrInput interface {
	pulumi.Input

	ToCloudSpannerPropertiesPtrOutput() CloudSpannerPropertiesPtrOutput
	ToCloudSpannerPropertiesPtrOutputWithContext(context.Context) CloudSpannerPropertiesPtrOutput
}

type cloudSpannerPropertiesPtrType CloudSpannerPropertiesArgs

func CloudSpannerPropertiesPtr(v *CloudSpannerPropertiesArgs) CloudSpannerPropertiesPtrInput {
	return (*cloudSpannerPropertiesPtrType)(v)
}

func (*cloudSpannerPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSpannerProperties)(nil)).Elem()
}

func (i *cloudSpannerPropertiesPtrType) ToCloudSpannerPropertiesPtrOutput() CloudSpannerPropertiesPtrOutput {
	return i.ToCloudSpannerPropertiesPtrOutputWithContext(context.Background())
}

func (i *cloudSpannerPropertiesPtrType) ToCloudSpannerPropertiesPtrOutputWithContext(ctx context.Context) CloudSpannerPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSpannerPropertiesPtrOutput)
}

// Connection properties specific to Cloud Spanner.
type CloudSpannerPropertiesOutput struct{ *pulumi.OutputState }

func (CloudSpannerPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSpannerProperties)(nil)).Elem()
}

func (o CloudSpannerPropertiesOutput) ToCloudSpannerPropertiesOutput() CloudSpannerPropertiesOutput {
	return o
}

func (o CloudSpannerPropertiesOutput) ToCloudSpannerPropertiesOutputWithContext(ctx context.Context) CloudSpannerPropertiesOutput {
	return o
}

func (o CloudSpannerPropertiesOutput) ToCloudSpannerPropertiesPtrOutput() CloudSpannerPropertiesPtrOutput {
	return o.ToCloudSpannerPropertiesPtrOutputWithContext(context.Background())
}

func (o CloudSpannerPropertiesOutput) ToCloudSpannerPropertiesPtrOutputWithContext(ctx context.Context) CloudSpannerPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudSpannerProperties) *CloudSpannerProperties {
		return &v
	}).(CloudSpannerPropertiesPtrOutput)
}

// Cloud Spanner database in the form `project/instance/database'
func (o CloudSpannerPropertiesOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSpannerProperties) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
func (o CloudSpannerPropertiesOutput) DatabaseRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSpannerProperties) *string { return v.DatabaseRole }).(pulumi.StringPtrOutput)
}

// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
func (o CloudSpannerPropertiesOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CloudSpannerProperties) *int { return v.MaxParallelism }).(pulumi.IntPtrOutput)
}

// If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
func (o CloudSpannerPropertiesOutput) UseDataBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudSpannerProperties) *bool { return v.UseDataBoost }).(pulumi.BoolPtrOutput)
}

// If parallelism should be used when reading from Cloud Spanner
func (o CloudSpannerPropertiesOutput) UseParallelism() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudSpannerProperties) *bool { return v.UseParallelism }).(pulumi.BoolPtrOutput)
}

// Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
//
// Deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
func (o CloudSpannerPropertiesOutput) UseServerlessAnalytics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CloudSpannerProperties) *bool { return v.UseServerlessAnalytics }).(pulumi.BoolPtrOutput)
}

type CloudSpannerPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CloudSpannerPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSpannerProperties)(nil)).Elem()
}

func (o CloudSpannerPropertiesPtrOutput) ToCloudSpannerPropertiesPtrOutput() CloudSpannerPropertiesPtrOutput {
	return o
}

func (o CloudSpannerPropertiesPtrOutput) ToCloudSpannerPropertiesPtrOutputWithContext(ctx context.Context) CloudSpannerPropertiesPtrOutput {
	return o
}

func (o CloudSpannerPropertiesPtrOutput) Elem() CloudSpannerPropertiesOutput {
	return o.ApplyT(func(v *CloudSpannerProperties) CloudSpannerProperties {
		if v != nil {
			return *v
		}
		var ret CloudSpannerProperties
		return ret
	}).(CloudSpannerPropertiesOutput)
}

// Cloud Spanner database in the form `project/instance/database'
func (o CloudSpannerPropertiesPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSpannerProperties) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
func (o CloudSpannerPropertiesPtrOutput) DatabaseRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSpannerProperties) *string {
		if v == nil {
			return nil
		}
		return v.DatabaseRole
	}).(pulumi.StringPtrOutput)
}

// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
func (o CloudSpannerPropertiesPtrOutput) MaxParallelism() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CloudSpannerProperties) *int {
		if v == nil {
			return nil
		}
		return v.MaxParallelism
	}).(pulumi.IntPtrOutput)
}

// If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
func (o CloudSpannerPropertiesPtrOutput) UseDataBoost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudSpannerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.UseDataBoost
	}).(pulumi.BoolPtrOutput)
}

// If parallelism should be used when reading from Cloud Spanner
func (o CloudSpannerPropertiesPtrOutput) UseParallelism() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudSpannerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.UseParallelism
	}).(pulumi.BoolPtrOutput)
}

// Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
//
// Deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
func (o CloudSpannerPropertiesPtrOutput) UseServerlessAnalytics() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CloudSpannerProperties) *bool {
		if v == nil {
			return nil
		}
		return v.UseServerlessAnalytics
	}).(pulumi.BoolPtrOutput)
}

// Connection properties specific to Cloud Spanner.
type CloudSpannerPropertiesResponse struct {
	// Cloud Spanner database in the form `project/instance/database'
	Database string `pulumi:"database"`
	// Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
	DatabaseRole string `pulumi:"databaseRole"`
	// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
	MaxParallelism int `pulumi:"maxParallelism"`
	// If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
	UseDataBoost bool `pulumi:"useDataBoost"`
	// If parallelism should be used when reading from Cloud Spanner
	UseParallelism bool `pulumi:"useParallelism"`
	// Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
	//
	// Deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
	UseServerlessAnalytics bool `pulumi:"useServerlessAnalytics"`
}

// Connection properties specific to Cloud Spanner.
type CloudSpannerPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CloudSpannerPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSpannerPropertiesResponse)(nil)).Elem()
}

func (o CloudSpannerPropertiesResponseOutput) ToCloudSpannerPropertiesResponseOutput() CloudSpannerPropertiesResponseOutput {
	return o
}

func (o CloudSpannerPropertiesResponseOutput) ToCloudSpannerPropertiesResponseOutputWithContext(ctx context.Context) CloudSpannerPropertiesResponseOutput {
	return o
}

// Cloud Spanner database in the form `project/instance/database'
func (o CloudSpannerPropertiesResponseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSpannerPropertiesResponse) string { return v.Database }).(pulumi.StringOutput)
}

// Optional. Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as `SELECT` and `INSERT`. Other users should only use roles provided by their Cloud Spanner admins. For more details, see [About fine-grained access control] (https://cloud.google.com/spanner/docs/fgac-about). REQUIRES: The database role name must start with a letter, and can only contain letters, numbers, and underscores.
func (o CloudSpannerPropertiesResponseOutput) DatabaseRole() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSpannerPropertiesResponse) string { return v.DatabaseRole }).(pulumi.StringOutput)
}

// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. REQUIRES: `use_parallelism` must be set. REQUIRES: `use_data_boost` must be set.
func (o CloudSpannerPropertiesResponseOutput) MaxParallelism() pulumi.IntOutput {
	return o.ApplyT(func(v CloudSpannerPropertiesResponse) int { return v.MaxParallelism }).(pulumi.IntOutput)
}

// If set, the request will be executed via Spanner independent compute resources. REQUIRES: `use_parallelism` must be set.
func (o CloudSpannerPropertiesResponseOutput) UseDataBoost() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudSpannerPropertiesResponse) bool { return v.UseDataBoost }).(pulumi.BoolOutput)
}

// If parallelism should be used when reading from Cloud Spanner
func (o CloudSpannerPropertiesResponseOutput) UseParallelism() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudSpannerPropertiesResponse) bool { return v.UseParallelism }).(pulumi.BoolOutput)
}

// Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
//
// Deprecated: Deprecated: prefer use_data_boost instead. If the serverless analytics service should be used to read data from Cloud Spanner. Note: `use_parallelism` must be set when using serverless analytics.
func (o CloudSpannerPropertiesResponseOutput) UseServerlessAnalytics() pulumi.BoolOutput {
	return o.ApplyT(func(v CloudSpannerPropertiesResponse) bool { return v.UseServerlessAnalytics }).(pulumi.BoolOutput)
}

// Credential info for the Cloud SQL.
type CloudSqlCredential struct {
	// The password for the credential.
	Password *string `pulumi:"password"`
	// The username for the credential.
	Username *string `pulumi:"username"`
}

// CloudSqlCredentialInput is an input type that accepts CloudSqlCredentialArgs and CloudSqlCredentialOutput values.
// You can construct a concrete instance of `CloudSqlCredentialInput` via:
//
//	CloudSqlCredentialArgs{...}
type CloudSqlCredentialInput interface {
	pulumi.Input

	ToCloudSqlCredentialOutput() CloudSqlCredentialOutput
	ToCloudSqlCredentialOutputWithContext(context.Context) CloudSqlCredentialOutput
}

// Credential info for the Cloud SQL.
type CloudSqlCredentialArgs struct {
	// The password for the credential.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username for the credential.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (CloudSqlCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlCredential)(nil)).Elem()
}

func (i CloudSqlCredentialArgs) ToCloudSqlCredentialOutput() CloudSqlCredentialOutput {
	return i.ToCloudSqlCredentialOutputWithContext(context.Background())
}

func (i CloudSqlCredentialArgs) ToCloudSqlCredentialOutputWithContext(ctx context.Context) CloudSqlCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlCredentialOutput)
}

func (i CloudSqlCredentialArgs) ToCloudSqlCredentialPtrOutput() CloudSqlCredentialPtrOutput {
	return i.ToCloudSqlCredentialPtrOutputWithContext(context.Background())
}

func (i CloudSqlCredentialArgs) ToCloudSqlCredentialPtrOutputWithContext(ctx context.Context) CloudSqlCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlCredentialOutput).ToCloudSqlCredentialPtrOutputWithContext(ctx)
}

// CloudSqlCredentialPtrInput is an input type that accepts CloudSqlCredentialArgs, CloudSqlCredentialPtr and CloudSqlCredentialPtrOutput values.
// You can construct a concrete instance of `CloudSqlCredentialPtrInput` via:
//
//	        CloudSqlCredentialArgs{...}
//
//	or:
//
//	        nil
type CloudSqlCredentialPtrInput interface {
	pulumi.Input

	ToCloudSqlCredentialPtrOutput() CloudSqlCredentialPtrOutput
	ToCloudSqlCredentialPtrOutputWithContext(context.Context) CloudSqlCredentialPtrOutput
}

type cloudSqlCredentialPtrType CloudSqlCredentialArgs

func CloudSqlCredentialPtr(v *CloudSqlCredentialArgs) CloudSqlCredentialPtrInput {
	return (*cloudSqlCredentialPtrType)(v)
}

func (*cloudSqlCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlCredential)(nil)).Elem()
}

func (i *cloudSqlCredentialPtrType) ToCloudSqlCredentialPtrOutput() CloudSqlCredentialPtrOutput {
	return i.ToCloudSqlCredentialPtrOutputWithContext(context.Background())
}

func (i *cloudSqlCredentialPtrType) ToCloudSqlCredentialPtrOutputWithContext(ctx context.Context) CloudSqlCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlCredentialPtrOutput)
}

// Credential info for the Cloud SQL.
type CloudSqlCredentialOutput struct{ *pulumi.OutputState }

func (CloudSqlCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlCredential)(nil)).Elem()
}

func (o CloudSqlCredentialOutput) ToCloudSqlCredentialOutput() CloudSqlCredentialOutput {
	return o
}

func (o CloudSqlCredentialOutput) ToCloudSqlCredentialOutputWithContext(ctx context.Context) CloudSqlCredentialOutput {
	return o
}

func (o CloudSqlCredentialOutput) ToCloudSqlCredentialPtrOutput() CloudSqlCredentialPtrOutput {
	return o.ToCloudSqlCredentialPtrOutputWithContext(context.Background())
}

func (o CloudSqlCredentialOutput) ToCloudSqlCredentialPtrOutputWithContext(ctx context.Context) CloudSqlCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudSqlCredential) *CloudSqlCredential {
		return &v
	}).(CloudSqlCredentialPtrOutput)
}

// The password for the credential.
func (o CloudSqlCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username for the credential.
func (o CloudSqlCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type CloudSqlCredentialPtrOutput struct{ *pulumi.OutputState }

func (CloudSqlCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlCredential)(nil)).Elem()
}

func (o CloudSqlCredentialPtrOutput) ToCloudSqlCredentialPtrOutput() CloudSqlCredentialPtrOutput {
	return o
}

func (o CloudSqlCredentialPtrOutput) ToCloudSqlCredentialPtrOutputWithContext(ctx context.Context) CloudSqlCredentialPtrOutput {
	return o
}

func (o CloudSqlCredentialPtrOutput) Elem() CloudSqlCredentialOutput {
	return o.ApplyT(func(v *CloudSqlCredential) CloudSqlCredential {
		if v != nil {
			return *v
		}
		var ret CloudSqlCredential
		return ret
	}).(CloudSqlCredentialOutput)
}

// The password for the credential.
func (o CloudSqlCredentialPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlCredential) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username for the credential.
func (o CloudSqlCredentialPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlCredential) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Credential info for the Cloud SQL.
type CloudSqlCredentialResponse struct {
	// The password for the credential.
	Password string `pulumi:"password"`
	// The username for the credential.
	Username string `pulumi:"username"`
}

// Credential info for the Cloud SQL.
type CloudSqlCredentialResponseOutput struct{ *pulumi.OutputState }

func (CloudSqlCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlCredentialResponse)(nil)).Elem()
}

func (o CloudSqlCredentialResponseOutput) ToCloudSqlCredentialResponseOutput() CloudSqlCredentialResponseOutput {
	return o
}

func (o CloudSqlCredentialResponseOutput) ToCloudSqlCredentialResponseOutputWithContext(ctx context.Context) CloudSqlCredentialResponseOutput {
	return o
}

// The password for the credential.
func (o CloudSqlCredentialResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlCredentialResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The username for the credential.
func (o CloudSqlCredentialResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlCredentialResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Connection properties specific to the Cloud SQL.
type CloudSqlProperties struct {
	// Input only. Cloud SQL credential.
	Credential *CloudSqlCredential `pulumi:"credential"`
	// Database name.
	Database *string `pulumi:"database"`
	// Cloud SQL instance ID in the form `project:location:instance`.
	InstanceId *string `pulumi:"instanceId"`
	// Type of the Cloud SQL database.
	Type *CloudSqlPropertiesType `pulumi:"type"`
}

// CloudSqlPropertiesInput is an input type that accepts CloudSqlPropertiesArgs and CloudSqlPropertiesOutput values.
// You can construct a concrete instance of `CloudSqlPropertiesInput` via:
//
//	CloudSqlPropertiesArgs{...}
type CloudSqlPropertiesInput interface {
	pulumi.Input

	ToCloudSqlPropertiesOutput() CloudSqlPropertiesOutput
	ToCloudSqlPropertiesOutputWithContext(context.Context) CloudSqlPropertiesOutput
}

// Connection properties specific to the Cloud SQL.
type CloudSqlPropertiesArgs struct {
	// Input only. Cloud SQL credential.
	Credential CloudSqlCredentialPtrInput `pulumi:"credential"`
	// Database name.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Cloud SQL instance ID in the form `project:location:instance`.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Type of the Cloud SQL database.
	Type CloudSqlPropertiesTypePtrInput `pulumi:"type"`
}

func (CloudSqlPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlProperties)(nil)).Elem()
}

func (i CloudSqlPropertiesArgs) ToCloudSqlPropertiesOutput() CloudSqlPropertiesOutput {
	return i.ToCloudSqlPropertiesOutputWithContext(context.Background())
}

func (i CloudSqlPropertiesArgs) ToCloudSqlPropertiesOutputWithContext(ctx context.Context) CloudSqlPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlPropertiesOutput)
}

func (i CloudSqlPropertiesArgs) ToCloudSqlPropertiesPtrOutput() CloudSqlPropertiesPtrOutput {
	return i.ToCloudSqlPropertiesPtrOutputWithContext(context.Background())
}

func (i CloudSqlPropertiesArgs) ToCloudSqlPropertiesPtrOutputWithContext(ctx context.Context) CloudSqlPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlPropertiesOutput).ToCloudSqlPropertiesPtrOutputWithContext(ctx)
}

// CloudSqlPropertiesPtrInput is an input type that accepts CloudSqlPropertiesArgs, CloudSqlPropertiesPtr and CloudSqlPropertiesPtrOutput values.
// You can construct a concrete instance of `CloudSqlPropertiesPtrInput` via:
//
//	        CloudSqlPropertiesArgs{...}
//
//	or:
//
//	        nil
type CloudSqlPropertiesPtrInput interface {
	pulumi.Input

	ToCloudSqlPropertiesPtrOutput() CloudSqlPropertiesPtrOutput
	ToCloudSqlPropertiesPtrOutputWithContext(context.Context) CloudSqlPropertiesPtrOutput
}

type cloudSqlPropertiesPtrType CloudSqlPropertiesArgs

func CloudSqlPropertiesPtr(v *CloudSqlPropertiesArgs) CloudSqlPropertiesPtrInput {
	return (*cloudSqlPropertiesPtrType)(v)
}

func (*cloudSqlPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlProperties)(nil)).Elem()
}

func (i *cloudSqlPropertiesPtrType) ToCloudSqlPropertiesPtrOutput() CloudSqlPropertiesPtrOutput {
	return i.ToCloudSqlPropertiesPtrOutputWithContext(context.Background())
}

func (i *cloudSqlPropertiesPtrType) ToCloudSqlPropertiesPtrOutputWithContext(ctx context.Context) CloudSqlPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudSqlPropertiesPtrOutput)
}

// Connection properties specific to the Cloud SQL.
type CloudSqlPropertiesOutput struct{ *pulumi.OutputState }

func (CloudSqlPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlProperties)(nil)).Elem()
}

func (o CloudSqlPropertiesOutput) ToCloudSqlPropertiesOutput() CloudSqlPropertiesOutput {
	return o
}

func (o CloudSqlPropertiesOutput) ToCloudSqlPropertiesOutputWithContext(ctx context.Context) CloudSqlPropertiesOutput {
	return o
}

func (o CloudSqlPropertiesOutput) ToCloudSqlPropertiesPtrOutput() CloudSqlPropertiesPtrOutput {
	return o.ToCloudSqlPropertiesPtrOutputWithContext(context.Background())
}

func (o CloudSqlPropertiesOutput) ToCloudSqlPropertiesPtrOutputWithContext(ctx context.Context) CloudSqlPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CloudSqlProperties) *CloudSqlProperties {
		return &v
	}).(CloudSqlPropertiesPtrOutput)
}

// Input only. Cloud SQL credential.
func (o CloudSqlPropertiesOutput) Credential() CloudSqlCredentialPtrOutput {
	return o.ApplyT(func(v CloudSqlProperties) *CloudSqlCredential { return v.Credential }).(CloudSqlCredentialPtrOutput)
}

// Database name.
func (o CloudSqlPropertiesOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlProperties) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Cloud SQL instance ID in the form `project:location:instance`.
func (o CloudSqlPropertiesOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CloudSqlProperties) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Type of the Cloud SQL database.
func (o CloudSqlPropertiesOutput) Type() CloudSqlPropertiesTypePtrOutput {
	return o.ApplyT(func(v CloudSqlProperties) *CloudSqlPropertiesType { return v.Type }).(CloudSqlPropertiesTypePtrOutput)
}

type CloudSqlPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CloudSqlPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudSqlProperties)(nil)).Elem()
}

func (o CloudSqlPropertiesPtrOutput) ToCloudSqlPropertiesPtrOutput() CloudSqlPropertiesPtrOutput {
	return o
}

func (o CloudSqlPropertiesPtrOutput) ToCloudSqlPropertiesPtrOutputWithContext(ctx context.Context) CloudSqlPropertiesPtrOutput {
	return o
}

func (o CloudSqlPropertiesPtrOutput) Elem() CloudSqlPropertiesOutput {
	return o.ApplyT(func(v *CloudSqlProperties) CloudSqlProperties {
		if v != nil {
			return *v
		}
		var ret CloudSqlProperties
		return ret
	}).(CloudSqlPropertiesOutput)
}

// Input only. Cloud SQL credential.
func (o CloudSqlPropertiesPtrOutput) Credential() CloudSqlCredentialPtrOutput {
	return o.ApplyT(func(v *CloudSqlProperties) *CloudSqlCredential {
		if v == nil {
			return nil
		}
		return v.Credential
	}).(CloudSqlCredentialPtrOutput)
}

// Database name.
func (o CloudSqlPropertiesPtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlProperties) *string {
		if v == nil {
			return nil
		}
		return v.Database
	}).(pulumi.StringPtrOutput)
}

// Cloud SQL instance ID in the form `project:location:instance`.
func (o CloudSqlPropertiesPtrOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CloudSqlProperties) *string {
		if v == nil {
			return nil
		}
		return v.InstanceId
	}).(pulumi.StringPtrOutput)
}

// Type of the Cloud SQL database.
func (o CloudSqlPropertiesPtrOutput) Type() CloudSqlPropertiesTypePtrOutput {
	return o.ApplyT(func(v *CloudSqlProperties) *CloudSqlPropertiesType {
		if v == nil {
			return nil
		}
		return v.Type
	}).(CloudSqlPropertiesTypePtrOutput)
}

// Connection properties specific to the Cloud SQL.
type CloudSqlPropertiesResponse struct {
	// Input only. Cloud SQL credential.
	Credential CloudSqlCredentialResponse `pulumi:"credential"`
	// Database name.
	Database string `pulumi:"database"`
	// Cloud SQL instance ID in the form `project:location:instance`.
	InstanceId string `pulumi:"instanceId"`
	// The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
	ServiceAccountId string `pulumi:"serviceAccountId"`
	// Type of the Cloud SQL database.
	Type string `pulumi:"type"`
}

// Connection properties specific to the Cloud SQL.
type CloudSqlPropertiesResponseOutput struct{ *pulumi.OutputState }

func (CloudSqlPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudSqlPropertiesResponse)(nil)).Elem()
}

func (o CloudSqlPropertiesResponseOutput) ToCloudSqlPropertiesResponseOutput() CloudSqlPropertiesResponseOutput {
	return o
}

func (o CloudSqlPropertiesResponseOutput) ToCloudSqlPropertiesResponseOutputWithContext(ctx context.Context) CloudSqlPropertiesResponseOutput {
	return o
}

// Input only. Cloud SQL credential.
func (o CloudSqlPropertiesResponseOutput) Credential() CloudSqlCredentialResponseOutput {
	return o.ApplyT(func(v CloudSqlPropertiesResponse) CloudSqlCredentialResponse { return v.Credential }).(CloudSqlCredentialResponseOutput)
}

// Database name.
func (o CloudSqlPropertiesResponseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlPropertiesResponse) string { return v.Database }).(pulumi.StringOutput)
}

// Cloud SQL instance ID in the form `project:location:instance`.
func (o CloudSqlPropertiesResponseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlPropertiesResponse) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The account ID of the service used for the purpose of this connection. When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
func (o CloudSqlPropertiesResponseOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlPropertiesResponse) string { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// Type of the Cloud SQL database.
func (o CloudSqlPropertiesResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CloudSqlPropertiesResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Represents concrete parameter values for Connector Configuration.
type ConnectorConfiguration struct {
	// Client authentication.
	Authentication *ConnectorConfigurationAuthentication `pulumi:"authentication"`
	// Immutable. The ID of the Connector these parameters are configured for.
	ConnectorId string `pulumi:"connectorId"`
	// Specifies how to reach the remote system this connection is pointing to.
	Endpoint *ConnectorConfigurationEndpoint `pulumi:"endpoint"`
}

// ConnectorConfigurationInput is an input type that accepts ConnectorConfigurationArgs and ConnectorConfigurationOutput values.
// You can construct a concrete instance of `ConnectorConfigurationInput` via:
//
//	ConnectorConfigurationArgs{...}
type ConnectorConfigurationInput interface {
	pulumi.Input

	ToConnectorConfigurationOutput() ConnectorConfigurationOutput
	ToConnectorConfigurationOutputWithContext(context.Context) ConnectorConfigurationOutput
}

// Represents concrete parameter values for Connector Configuration.
type ConnectorConfigurationArgs struct {
	// Client authentication.
	Authentication ConnectorConfigurationAuthenticationPtrInput `pulumi:"authentication"`
	// Immutable. The ID of the Connector these parameters are configured for.
	ConnectorId pulumi.StringInput `pulumi:"connectorId"`
	// Specifies how to reach the remote system this connection is pointing to.
	Endpoint ConnectorConfigurationEndpointPtrInput `pulumi:"endpoint"`
}

func (ConnectorConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfiguration)(nil)).Elem()
}

func (i ConnectorConfigurationArgs) ToConnectorConfigurationOutput() ConnectorConfigurationOutput {
	return i.ToConnectorConfigurationOutputWithContext(context.Background())
}

func (i ConnectorConfigurationArgs) ToConnectorConfigurationOutputWithContext(ctx context.Context) ConnectorConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationOutput)
}

func (i ConnectorConfigurationArgs) ToConnectorConfigurationPtrOutput() ConnectorConfigurationPtrOutput {
	return i.ToConnectorConfigurationPtrOutputWithContext(context.Background())
}

func (i ConnectorConfigurationArgs) ToConnectorConfigurationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationOutput).ToConnectorConfigurationPtrOutputWithContext(ctx)
}

// ConnectorConfigurationPtrInput is an input type that accepts ConnectorConfigurationArgs, ConnectorConfigurationPtr and ConnectorConfigurationPtrOutput values.
// You can construct a concrete instance of `ConnectorConfigurationPtrInput` via:
//
//	        ConnectorConfigurationArgs{...}
//
//	or:
//
//	        nil
type ConnectorConfigurationPtrInput interface {
	pulumi.Input

	ToConnectorConfigurationPtrOutput() ConnectorConfigurationPtrOutput
	ToConnectorConfigurationPtrOutputWithContext(context.Context) ConnectorConfigurationPtrOutput
}

type connectorConfigurationPtrType ConnectorConfigurationArgs

func ConnectorConfigurationPtr(v *ConnectorConfigurationArgs) ConnectorConfigurationPtrInput {
	return (*connectorConfigurationPtrType)(v)
}

func (*connectorConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfiguration)(nil)).Elem()
}

func (i *connectorConfigurationPtrType) ToConnectorConfigurationPtrOutput() ConnectorConfigurationPtrOutput {
	return i.ToConnectorConfigurationPtrOutputWithContext(context.Background())
}

func (i *connectorConfigurationPtrType) ToConnectorConfigurationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationPtrOutput)
}

// Represents concrete parameter values for Connector Configuration.
type ConnectorConfigurationOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfiguration)(nil)).Elem()
}

func (o ConnectorConfigurationOutput) ToConnectorConfigurationOutput() ConnectorConfigurationOutput {
	return o
}

func (o ConnectorConfigurationOutput) ToConnectorConfigurationOutputWithContext(ctx context.Context) ConnectorConfigurationOutput {
	return o
}

func (o ConnectorConfigurationOutput) ToConnectorConfigurationPtrOutput() ConnectorConfigurationPtrOutput {
	return o.ToConnectorConfigurationPtrOutputWithContext(context.Background())
}

func (o ConnectorConfigurationOutput) ToConnectorConfigurationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorConfiguration) *ConnectorConfiguration {
		return &v
	}).(ConnectorConfigurationPtrOutput)
}

// Client authentication.
func (o ConnectorConfigurationOutput) Authentication() ConnectorConfigurationAuthenticationPtrOutput {
	return o.ApplyT(func(v ConnectorConfiguration) *ConnectorConfigurationAuthentication { return v.Authentication }).(ConnectorConfigurationAuthenticationPtrOutput)
}

// Immutable. The ID of the Connector these parameters are configured for.
func (o ConnectorConfigurationOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorConfiguration) string { return v.ConnectorId }).(pulumi.StringOutput)
}

// Specifies how to reach the remote system this connection is pointing to.
func (o ConnectorConfigurationOutput) Endpoint() ConnectorConfigurationEndpointPtrOutput {
	return o.ApplyT(func(v ConnectorConfiguration) *ConnectorConfigurationEndpoint { return v.Endpoint }).(ConnectorConfigurationEndpointPtrOutput)
}

type ConnectorConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfiguration)(nil)).Elem()
}

func (o ConnectorConfigurationPtrOutput) ToConnectorConfigurationPtrOutput() ConnectorConfigurationPtrOutput {
	return o
}

func (o ConnectorConfigurationPtrOutput) ToConnectorConfigurationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationPtrOutput {
	return o
}

func (o ConnectorConfigurationPtrOutput) Elem() ConnectorConfigurationOutput {
	return o.ApplyT(func(v *ConnectorConfiguration) ConnectorConfiguration {
		if v != nil {
			return *v
		}
		var ret ConnectorConfiguration
		return ret
	}).(ConnectorConfigurationOutput)
}

// Client authentication.
func (o ConnectorConfigurationPtrOutput) Authentication() ConnectorConfigurationAuthenticationPtrOutput {
	return o.ApplyT(func(v *ConnectorConfiguration) *ConnectorConfigurationAuthentication {
		if v == nil {
			return nil
		}
		return v.Authentication
	}).(ConnectorConfigurationAuthenticationPtrOutput)
}

// Immutable. The ID of the Connector these parameters are configured for.
func (o ConnectorConfigurationPtrOutput) ConnectorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorConfiguration) *string {
		if v == nil {
			return nil
		}
		return &v.ConnectorId
	}).(pulumi.StringPtrOutput)
}

// Specifies how to reach the remote system this connection is pointing to.
func (o ConnectorConfigurationPtrOutput) Endpoint() ConnectorConfigurationEndpointPtrOutput {
	return o.ApplyT(func(v *ConnectorConfiguration) *ConnectorConfigurationEndpoint {
		if v == nil {
			return nil
		}
		return v.Endpoint
	}).(ConnectorConfigurationEndpointPtrOutput)
}

// Client authentication.
type ConnectorConfigurationAuthentication struct {
	// Username/password authentication.
	UsernamePassword *ConnectorConfigurationUsernamePassword `pulumi:"usernamePassword"`
}

// ConnectorConfigurationAuthenticationInput is an input type that accepts ConnectorConfigurationAuthenticationArgs and ConnectorConfigurationAuthenticationOutput values.
// You can construct a concrete instance of `ConnectorConfigurationAuthenticationInput` via:
//
//	ConnectorConfigurationAuthenticationArgs{...}
type ConnectorConfigurationAuthenticationInput interface {
	pulumi.Input

	ToConnectorConfigurationAuthenticationOutput() ConnectorConfigurationAuthenticationOutput
	ToConnectorConfigurationAuthenticationOutputWithContext(context.Context) ConnectorConfigurationAuthenticationOutput
}

// Client authentication.
type ConnectorConfigurationAuthenticationArgs struct {
	// Username/password authentication.
	UsernamePassword ConnectorConfigurationUsernamePasswordPtrInput `pulumi:"usernamePassword"`
}

func (ConnectorConfigurationAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationAuthentication)(nil)).Elem()
}

func (i ConnectorConfigurationAuthenticationArgs) ToConnectorConfigurationAuthenticationOutput() ConnectorConfigurationAuthenticationOutput {
	return i.ToConnectorConfigurationAuthenticationOutputWithContext(context.Background())
}

func (i ConnectorConfigurationAuthenticationArgs) ToConnectorConfigurationAuthenticationOutputWithContext(ctx context.Context) ConnectorConfigurationAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationAuthenticationOutput)
}

func (i ConnectorConfigurationAuthenticationArgs) ToConnectorConfigurationAuthenticationPtrOutput() ConnectorConfigurationAuthenticationPtrOutput {
	return i.ToConnectorConfigurationAuthenticationPtrOutputWithContext(context.Background())
}

func (i ConnectorConfigurationAuthenticationArgs) ToConnectorConfigurationAuthenticationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationAuthenticationOutput).ToConnectorConfigurationAuthenticationPtrOutputWithContext(ctx)
}

// ConnectorConfigurationAuthenticationPtrInput is an input type that accepts ConnectorConfigurationAuthenticationArgs, ConnectorConfigurationAuthenticationPtr and ConnectorConfigurationAuthenticationPtrOutput values.
// You can construct a concrete instance of `ConnectorConfigurationAuthenticationPtrInput` via:
//
//	        ConnectorConfigurationAuthenticationArgs{...}
//
//	or:
//
//	        nil
type ConnectorConfigurationAuthenticationPtrInput interface {
	pulumi.Input

	ToConnectorConfigurationAuthenticationPtrOutput() ConnectorConfigurationAuthenticationPtrOutput
	ToConnectorConfigurationAuthenticationPtrOutputWithContext(context.Context) ConnectorConfigurationAuthenticationPtrOutput
}

type connectorConfigurationAuthenticationPtrType ConnectorConfigurationAuthenticationArgs

func ConnectorConfigurationAuthenticationPtr(v *ConnectorConfigurationAuthenticationArgs) ConnectorConfigurationAuthenticationPtrInput {
	return (*connectorConfigurationAuthenticationPtrType)(v)
}

func (*connectorConfigurationAuthenticationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationAuthentication)(nil)).Elem()
}

func (i *connectorConfigurationAuthenticationPtrType) ToConnectorConfigurationAuthenticationPtrOutput() ConnectorConfigurationAuthenticationPtrOutput {
	return i.ToConnectorConfigurationAuthenticationPtrOutputWithContext(context.Background())
}

func (i *connectorConfigurationAuthenticationPtrType) ToConnectorConfigurationAuthenticationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationAuthenticationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationAuthenticationPtrOutput)
}

// Client authentication.
type ConnectorConfigurationAuthenticationOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationAuthentication)(nil)).Elem()
}

func (o ConnectorConfigurationAuthenticationOutput) ToConnectorConfigurationAuthenticationOutput() ConnectorConfigurationAuthenticationOutput {
	return o
}

func (o ConnectorConfigurationAuthenticationOutput) ToConnectorConfigurationAuthenticationOutputWithContext(ctx context.Context) ConnectorConfigurationAuthenticationOutput {
	return o
}

func (o ConnectorConfigurationAuthenticationOutput) ToConnectorConfigurationAuthenticationPtrOutput() ConnectorConfigurationAuthenticationPtrOutput {
	return o.ToConnectorConfigurationAuthenticationPtrOutputWithContext(context.Background())
}

func (o ConnectorConfigurationAuthenticationOutput) ToConnectorConfigurationAuthenticationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationAuthenticationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorConfigurationAuthentication) *ConnectorConfigurationAuthentication {
		return &v
	}).(ConnectorConfigurationAuthenticationPtrOutput)
}

// Username/password authentication.
func (o ConnectorConfigurationAuthenticationOutput) UsernamePassword() ConnectorConfigurationUsernamePasswordPtrOutput {
	return o.ApplyT(func(v ConnectorConfigurationAuthentication) *ConnectorConfigurationUsernamePassword {
		return v.UsernamePassword
	}).(ConnectorConfigurationUsernamePasswordPtrOutput)
}

type ConnectorConfigurationAuthenticationPtrOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationAuthenticationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationAuthentication)(nil)).Elem()
}

func (o ConnectorConfigurationAuthenticationPtrOutput) ToConnectorConfigurationAuthenticationPtrOutput() ConnectorConfigurationAuthenticationPtrOutput {
	return o
}

func (o ConnectorConfigurationAuthenticationPtrOutput) ToConnectorConfigurationAuthenticationPtrOutputWithContext(ctx context.Context) ConnectorConfigurationAuthenticationPtrOutput {
	return o
}

func (o ConnectorConfigurationAuthenticationPtrOutput) Elem() ConnectorConfigurationAuthenticationOutput {
	return o.ApplyT(func(v *ConnectorConfigurationAuthentication) ConnectorConfigurationAuthentication {
		if v != nil {
			return *v
		}
		var ret ConnectorConfigurationAuthentication
		return ret
	}).(ConnectorConfigurationAuthenticationOutput)
}

// Username/password authentication.
func (o ConnectorConfigurationAuthenticationPtrOutput) UsernamePassword() ConnectorConfigurationUsernamePasswordPtrOutput {
	return o.ApplyT(func(v *ConnectorConfigurationAuthentication) *ConnectorConfigurationUsernamePassword {
		if v == nil {
			return nil
		}
		return v.UsernamePassword
	}).(ConnectorConfigurationUsernamePasswordPtrOutput)
}

// Client authentication.
type ConnectorConfigurationAuthenticationResponse struct {
	// Username/password authentication.
	UsernamePassword ConnectorConfigurationUsernamePasswordResponse `pulumi:"usernamePassword"`
}

// Client authentication.
type ConnectorConfigurationAuthenticationResponseOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationAuthenticationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationAuthenticationResponse)(nil)).Elem()
}

func (o ConnectorConfigurationAuthenticationResponseOutput) ToConnectorConfigurationAuthenticationResponseOutput() ConnectorConfigurationAuthenticationResponseOutput {
	return o
}

func (o ConnectorConfigurationAuthenticationResponseOutput) ToConnectorConfigurationAuthenticationResponseOutputWithContext(ctx context.Context) ConnectorConfigurationAuthenticationResponseOutput {
	return o
}

// Username/password authentication.
func (o ConnectorConfigurationAuthenticationResponseOutput) UsernamePassword() ConnectorConfigurationUsernamePasswordResponseOutput {
	return o.ApplyT(func(v ConnectorConfigurationAuthenticationResponse) ConnectorConfigurationUsernamePasswordResponse {
		return v.UsernamePassword
	}).(ConnectorConfigurationUsernamePasswordResponseOutput)
}

// Remote endpoint specification.
type ConnectorConfigurationEndpoint struct {
	// Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
	HostPort *string `pulumi:"hostPort"`
}

// ConnectorConfigurationEndpointInput is an input type that accepts ConnectorConfigurationEndpointArgs and ConnectorConfigurationEndpointOutput values.
// You can construct a concrete instance of `ConnectorConfigurationEndpointInput` via:
//
//	ConnectorConfigurationEndpointArgs{...}
type ConnectorConfigurationEndpointInput interface {
	pulumi.Input

	ToConnectorConfigurationEndpointOutput() ConnectorConfigurationEndpointOutput
	ToConnectorConfigurationEndpointOutputWithContext(context.Context) ConnectorConfigurationEndpointOutput
}

// Remote endpoint specification.
type ConnectorConfigurationEndpointArgs struct {
	// Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
	HostPort pulumi.StringPtrInput `pulumi:"hostPort"`
}

func (ConnectorConfigurationEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationEndpoint)(nil)).Elem()
}

func (i ConnectorConfigurationEndpointArgs) ToConnectorConfigurationEndpointOutput() ConnectorConfigurationEndpointOutput {
	return i.ToConnectorConfigurationEndpointOutputWithContext(context.Background())
}

func (i ConnectorConfigurationEndpointArgs) ToConnectorConfigurationEndpointOutputWithContext(ctx context.Context) ConnectorConfigurationEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationEndpointOutput)
}

func (i ConnectorConfigurationEndpointArgs) ToConnectorConfigurationEndpointPtrOutput() ConnectorConfigurationEndpointPtrOutput {
	return i.ToConnectorConfigurationEndpointPtrOutputWithContext(context.Background())
}

func (i ConnectorConfigurationEndpointArgs) ToConnectorConfigurationEndpointPtrOutputWithContext(ctx context.Context) ConnectorConfigurationEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationEndpointOutput).ToConnectorConfigurationEndpointPtrOutputWithContext(ctx)
}

// ConnectorConfigurationEndpointPtrInput is an input type that accepts ConnectorConfigurationEndpointArgs, ConnectorConfigurationEndpointPtr and ConnectorConfigurationEndpointPtrOutput values.
// You can construct a concrete instance of `ConnectorConfigurationEndpointPtrInput` via:
//
//	        ConnectorConfigurationEndpointArgs{...}
//
//	or:
//
//	        nil
type ConnectorConfigurationEndpointPtrInput interface {
	pulumi.Input

	ToConnectorConfigurationEndpointPtrOutput() ConnectorConfigurationEndpointPtrOutput
	ToConnectorConfigurationEndpointPtrOutputWithContext(context.Context) ConnectorConfigurationEndpointPtrOutput
}

type connectorConfigurationEndpointPtrType ConnectorConfigurationEndpointArgs

func ConnectorConfigurationEndpointPtr(v *ConnectorConfigurationEndpointArgs) ConnectorConfigurationEndpointPtrInput {
	return (*connectorConfigurationEndpointPtrType)(v)
}

func (*connectorConfigurationEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationEndpoint)(nil)).Elem()
}

func (i *connectorConfigurationEndpointPtrType) ToConnectorConfigurationEndpointPtrOutput() ConnectorConfigurationEndpointPtrOutput {
	return i.ToConnectorConfigurationEndpointPtrOutputWithContext(context.Background())
}

func (i *connectorConfigurationEndpointPtrType) ToConnectorConfigurationEndpointPtrOutputWithContext(ctx context.Context) ConnectorConfigurationEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationEndpointPtrOutput)
}

// Remote endpoint specification.
type ConnectorConfigurationEndpointOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationEndpoint)(nil)).Elem()
}

func (o ConnectorConfigurationEndpointOutput) ToConnectorConfigurationEndpointOutput() ConnectorConfigurationEndpointOutput {
	return o
}

func (o ConnectorConfigurationEndpointOutput) ToConnectorConfigurationEndpointOutputWithContext(ctx context.Context) ConnectorConfigurationEndpointOutput {
	return o
}

func (o ConnectorConfigurationEndpointOutput) ToConnectorConfigurationEndpointPtrOutput() ConnectorConfigurationEndpointPtrOutput {
	return o.ToConnectorConfigurationEndpointPtrOutputWithContext(context.Background())
}

func (o ConnectorConfigurationEndpointOutput) ToConnectorConfigurationEndpointPtrOutputWithContext(ctx context.Context) ConnectorConfigurationEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorConfigurationEndpoint) *ConnectorConfigurationEndpoint {
		return &v
	}).(ConnectorConfigurationEndpointPtrOutput)
}

// Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
func (o ConnectorConfigurationEndpointOutput) HostPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorConfigurationEndpoint) *string { return v.HostPort }).(pulumi.StringPtrOutput)
}

type ConnectorConfigurationEndpointPtrOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationEndpoint)(nil)).Elem()
}

func (o ConnectorConfigurationEndpointPtrOutput) ToConnectorConfigurationEndpointPtrOutput() ConnectorConfigurationEndpointPtrOutput {
	return o
}

func (o ConnectorConfigurationEndpointPtrOutput) ToConnectorConfigurationEndpointPtrOutputWithContext(ctx context.Context) ConnectorConfigurationEndpointPtrOutput {
	return o
}

func (o ConnectorConfigurationEndpointPtrOutput) Elem() ConnectorConfigurationEndpointOutput {
	return o.ApplyT(func(v *ConnectorConfigurationEndpoint) ConnectorConfigurationEndpoint {
		if v != nil {
			return *v
		}
		var ret ConnectorConfigurationEndpoint
		return ret
	}).(ConnectorConfigurationEndpointOutput)
}

// Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
func (o ConnectorConfigurationEndpointPtrOutput) HostPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorConfigurationEndpoint) *string {
		if v == nil {
			return nil
		}
		return v.HostPort
	}).(pulumi.StringPtrOutput)
}

// Remote endpoint specification.
type ConnectorConfigurationEndpointResponse struct {
	// Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
	HostPort string `pulumi:"hostPort"`
}

// Remote endpoint specification.
type ConnectorConfigurationEndpointResponseOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationEndpointResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationEndpointResponse)(nil)).Elem()
}

func (o ConnectorConfigurationEndpointResponseOutput) ToConnectorConfigurationEndpointResponseOutput() ConnectorConfigurationEndpointResponseOutput {
	return o
}

func (o ConnectorConfigurationEndpointResponseOutput) ToConnectorConfigurationEndpointResponseOutputWithContext(ctx context.Context) ConnectorConfigurationEndpointResponseOutput {
	return o
}

// Host and port in a format of `hostname:port` as defined in https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
func (o ConnectorConfigurationEndpointResponseOutput) HostPort() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorConfigurationEndpointResponse) string { return v.HostPort }).(pulumi.StringOutput)
}

// Represents concrete parameter values for Connector Configuration.
type ConnectorConfigurationResponse struct {
	// Client authentication.
	Authentication ConnectorConfigurationAuthenticationResponse `pulumi:"authentication"`
	// Immutable. The ID of the Connector these parameters are configured for.
	ConnectorId string `pulumi:"connectorId"`
	// Specifies how to reach the remote system this connection is pointing to.
	Endpoint ConnectorConfigurationEndpointResponse `pulumi:"endpoint"`
}

// Represents concrete parameter values for Connector Configuration.
type ConnectorConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationResponse)(nil)).Elem()
}

func (o ConnectorConfigurationResponseOutput) ToConnectorConfigurationResponseOutput() ConnectorConfigurationResponseOutput {
	return o
}

func (o ConnectorConfigurationResponseOutput) ToConnectorConfigurationResponseOutputWithContext(ctx context.Context) ConnectorConfigurationResponseOutput {
	return o
}

// Client authentication.
func (o ConnectorConfigurationResponseOutput) Authentication() ConnectorConfigurationAuthenticationResponseOutput {
	return o.ApplyT(func(v ConnectorConfigurationResponse) ConnectorConfigurationAuthenticationResponse {
		return v.Authentication
	}).(ConnectorConfigurationAuthenticationResponseOutput)
}

// Immutable. The ID of the Connector these parameters are configured for.
func (o ConnectorConfigurationResponseOutput) ConnectorId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorConfigurationResponse) string { return v.ConnectorId }).(pulumi.StringOutput)
}

// Specifies how to reach the remote system this connection is pointing to.
func (o ConnectorConfigurationResponseOutput) Endpoint() ConnectorConfigurationEndpointResponseOutput {
	return o.ApplyT(func(v ConnectorConfigurationResponse) ConnectorConfigurationEndpointResponse { return v.Endpoint }).(ConnectorConfigurationEndpointResponseOutput)
}

// Secret value parameter.
type ConnectorConfigurationSecret struct {
	// Input only. Secret as plaintext.
	Plaintext *string `pulumi:"plaintext"`
}

// ConnectorConfigurationSecretInput is an input type that accepts ConnectorConfigurationSecretArgs and ConnectorConfigurationSecretOutput values.
// You can construct a concrete instance of `ConnectorConfigurationSecretInput` via:
//
//	ConnectorConfigurationSecretArgs{...}
type ConnectorConfigurationSecretInput interface {
	pulumi.Input

	ToConnectorConfigurationSecretOutput() ConnectorConfigurationSecretOutput
	ToConnectorConfigurationSecretOutputWithContext(context.Context) ConnectorConfigurationSecretOutput
}

// Secret value parameter.
type ConnectorConfigurationSecretArgs struct {
	// Input only. Secret as plaintext.
	Plaintext pulumi.StringPtrInput `pulumi:"plaintext"`
}

func (ConnectorConfigurationSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationSecret)(nil)).Elem()
}

func (i ConnectorConfigurationSecretArgs) ToConnectorConfigurationSecretOutput() ConnectorConfigurationSecretOutput {
	return i.ToConnectorConfigurationSecretOutputWithContext(context.Background())
}

func (i ConnectorConfigurationSecretArgs) ToConnectorConfigurationSecretOutputWithContext(ctx context.Context) ConnectorConfigurationSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationSecretOutput)
}

func (i ConnectorConfigurationSecretArgs) ToConnectorConfigurationSecretPtrOutput() ConnectorConfigurationSecretPtrOutput {
	return i.ToConnectorConfigurationSecretPtrOutputWithContext(context.Background())
}

func (i ConnectorConfigurationSecretArgs) ToConnectorConfigurationSecretPtrOutputWithContext(ctx context.Context) ConnectorConfigurationSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationSecretOutput).ToConnectorConfigurationSecretPtrOutputWithContext(ctx)
}

// ConnectorConfigurationSecretPtrInput is an input type that accepts ConnectorConfigurationSecretArgs, ConnectorConfigurationSecretPtr and ConnectorConfigurationSecretPtrOutput values.
// You can construct a concrete instance of `ConnectorConfigurationSecretPtrInput` via:
//
//	        ConnectorConfigurationSecretArgs{...}
//
//	or:
//
//	        nil
type ConnectorConfigurationSecretPtrInput interface {
	pulumi.Input

	ToConnectorConfigurationSecretPtrOutput() ConnectorConfigurationSecretPtrOutput
	ToConnectorConfigurationSecretPtrOutputWithContext(context.Context) ConnectorConfigurationSecretPtrOutput
}

type connectorConfigurationSecretPtrType ConnectorConfigurationSecretArgs

func ConnectorConfigurationSecretPtr(v *ConnectorConfigurationSecretArgs) ConnectorConfigurationSecretPtrInput {
	return (*connectorConfigurationSecretPtrType)(v)
}

func (*connectorConfigurationSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationSecret)(nil)).Elem()
}

func (i *connectorConfigurationSecretPtrType) ToConnectorConfigurationSecretPtrOutput() ConnectorConfigurationSecretPtrOutput {
	return i.ToConnectorConfigurationSecretPtrOutputWithContext(context.Background())
}

func (i *connectorConfigurationSecretPtrType) ToConnectorConfigurationSecretPtrOutputWithContext(ctx context.Context) ConnectorConfigurationSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationSecretPtrOutput)
}

// Secret value parameter.
type ConnectorConfigurationSecretOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationSecret)(nil)).Elem()
}

func (o ConnectorConfigurationSecretOutput) ToConnectorConfigurationSecretOutput() ConnectorConfigurationSecretOutput {
	return o
}

func (o ConnectorConfigurationSecretOutput) ToConnectorConfigurationSecretOutputWithContext(ctx context.Context) ConnectorConfigurationSecretOutput {
	return o
}

func (o ConnectorConfigurationSecretOutput) ToConnectorConfigurationSecretPtrOutput() ConnectorConfigurationSecretPtrOutput {
	return o.ToConnectorConfigurationSecretPtrOutputWithContext(context.Background())
}

func (o ConnectorConfigurationSecretOutput) ToConnectorConfigurationSecretPtrOutputWithContext(ctx context.Context) ConnectorConfigurationSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorConfigurationSecret) *ConnectorConfigurationSecret {
		return &v
	}).(ConnectorConfigurationSecretPtrOutput)
}

// Input only. Secret as plaintext.
func (o ConnectorConfigurationSecretOutput) Plaintext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectorConfigurationSecret) *string { return v.Plaintext }).(pulumi.StringPtrOutput)
}

type ConnectorConfigurationSecretPtrOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationSecret)(nil)).Elem()
}

func (o ConnectorConfigurationSecretPtrOutput) ToConnectorConfigurationSecretPtrOutput() ConnectorConfigurationSecretPtrOutput {
	return o
}

func (o ConnectorConfigurationSecretPtrOutput) ToConnectorConfigurationSecretPtrOutputWithContext(ctx context.Context) ConnectorConfigurationSecretPtrOutput {
	return o
}

func (o ConnectorConfigurationSecretPtrOutput) Elem() ConnectorConfigurationSecretOutput {
	return o.ApplyT(func(v *ConnectorConfigurationSecret) ConnectorConfigurationSecret {
		if v != nil {
			return *v
		}
		var ret ConnectorConfigurationSecret
		return ret
	}).(ConnectorConfigurationSecretOutput)
}

// Input only. Secret as plaintext.
func (o ConnectorConfigurationSecretPtrOutput) Plaintext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorConfigurationSecret) *string {
		if v == nil {
			return nil
		}
		return v.Plaintext
	}).(pulumi.StringPtrOutput)
}

// Secret value parameter.
type ConnectorConfigurationSecretResponse struct {
	// Input only. Secret as plaintext.
	Plaintext string `pulumi:"plaintext"`
	// Indicates type of secret. Can be used to check type of stored secret value even if it's `INPUT_ONLY`.
	SecretType string `pulumi:"secretType"`
}

// Secret value parameter.
type ConnectorConfigurationSecretResponseOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationSecretResponse)(nil)).Elem()
}

func (o ConnectorConfigurationSecretResponseOutput) ToConnectorConfigurationSecretResponseOutput() ConnectorConfigurationSecretResponseOutput {
	return o
}

func (o ConnectorConfigurationSecretResponseOutput) ToConnectorConfigurationSecretResponseOutputWithContext(ctx context.Context) ConnectorConfigurationSecretResponseOutput {
	return o
}

// Input only. Secret as plaintext.
func (o ConnectorConfigurationSecretResponseOutput) Plaintext() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorConfigurationSecretResponse) string { return v.Plaintext }).(pulumi.StringOutput)
}

// Indicates type of secret. Can be used to check type of stored secret value even if it's `INPUT_ONLY`.
func (o ConnectorConfigurationSecretResponseOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorConfigurationSecretResponse) string { return v.SecretType }).(pulumi.StringOutput)
}

// Username and Password authentication.
type ConnectorConfigurationUsernamePassword struct {
	// Password.
	Password ConnectorConfigurationSecret `pulumi:"password"`
	// Username.
	Username string `pulumi:"username"`
}

// ConnectorConfigurationUsernamePasswordInput is an input type that accepts ConnectorConfigurationUsernamePasswordArgs and ConnectorConfigurationUsernamePasswordOutput values.
// You can construct a concrete instance of `ConnectorConfigurationUsernamePasswordInput` via:
//
//	ConnectorConfigurationUsernamePasswordArgs{...}
type ConnectorConfigurationUsernamePasswordInput interface {
	pulumi.Input

	ToConnectorConfigurationUsernamePasswordOutput() ConnectorConfigurationUsernamePasswordOutput
	ToConnectorConfigurationUsernamePasswordOutputWithContext(context.Context) ConnectorConfigurationUsernamePasswordOutput
}

// Username and Password authentication.
type ConnectorConfigurationUsernamePasswordArgs struct {
	// Password.
	Password ConnectorConfigurationSecretInput `pulumi:"password"`
	// Username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ConnectorConfigurationUsernamePasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationUsernamePassword)(nil)).Elem()
}

func (i ConnectorConfigurationUsernamePasswordArgs) ToConnectorConfigurationUsernamePasswordOutput() ConnectorConfigurationUsernamePasswordOutput {
	return i.ToConnectorConfigurationUsernamePasswordOutputWithContext(context.Background())
}

func (i ConnectorConfigurationUsernamePasswordArgs) ToConnectorConfigurationUsernamePasswordOutputWithContext(ctx context.Context) ConnectorConfigurationUsernamePasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationUsernamePasswordOutput)
}

func (i ConnectorConfigurationUsernamePasswordArgs) ToConnectorConfigurationUsernamePasswordPtrOutput() ConnectorConfigurationUsernamePasswordPtrOutput {
	return i.ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i ConnectorConfigurationUsernamePasswordArgs) ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(ctx context.Context) ConnectorConfigurationUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationUsernamePasswordOutput).ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(ctx)
}

// ConnectorConfigurationUsernamePasswordPtrInput is an input type that accepts ConnectorConfigurationUsernamePasswordArgs, ConnectorConfigurationUsernamePasswordPtr and ConnectorConfigurationUsernamePasswordPtrOutput values.
// You can construct a concrete instance of `ConnectorConfigurationUsernamePasswordPtrInput` via:
//
//	        ConnectorConfigurationUsernamePasswordArgs{...}
//
//	or:
//
//	        nil
type ConnectorConfigurationUsernamePasswordPtrInput interface {
	pulumi.Input

	ToConnectorConfigurationUsernamePasswordPtrOutput() ConnectorConfigurationUsernamePasswordPtrOutput
	ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(context.Context) ConnectorConfigurationUsernamePasswordPtrOutput
}

type connectorConfigurationUsernamePasswordPtrType ConnectorConfigurationUsernamePasswordArgs

func ConnectorConfigurationUsernamePasswordPtr(v *ConnectorConfigurationUsernamePasswordArgs) ConnectorConfigurationUsernamePasswordPtrInput {
	return (*connectorConfigurationUsernamePasswordPtrType)(v)
}

func (*connectorConfigurationUsernamePasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationUsernamePassword)(nil)).Elem()
}

func (i *connectorConfigurationUsernamePasswordPtrType) ToConnectorConfigurationUsernamePasswordPtrOutput() ConnectorConfigurationUsernamePasswordPtrOutput {
	return i.ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(context.Background())
}

func (i *connectorConfigurationUsernamePasswordPtrType) ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(ctx context.Context) ConnectorConfigurationUsernamePasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectorConfigurationUsernamePasswordPtrOutput)
}

// Username and Password authentication.
type ConnectorConfigurationUsernamePasswordOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationUsernamePasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationUsernamePassword)(nil)).Elem()
}

func (o ConnectorConfigurationUsernamePasswordOutput) ToConnectorConfigurationUsernamePasswordOutput() ConnectorConfigurationUsernamePasswordOutput {
	return o
}

func (o ConnectorConfigurationUsernamePasswordOutput) ToConnectorConfigurationUsernamePasswordOutputWithContext(ctx context.Context) ConnectorConfigurationUsernamePasswordOutput {
	return o
}

func (o ConnectorConfigurationUsernamePasswordOutput) ToConnectorConfigurationUsernamePasswordPtrOutput() ConnectorConfigurationUsernamePasswordPtrOutput {
	return o.ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(context.Background())
}

func (o ConnectorConfigurationUsernamePasswordOutput) ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(ctx context.Context) ConnectorConfigurationUsernamePasswordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectorConfigurationUsernamePassword) *ConnectorConfigurationUsernamePassword {
		return &v
	}).(ConnectorConfigurationUsernamePasswordPtrOutput)
}

// Password.
func (o ConnectorConfigurationUsernamePasswordOutput) Password() ConnectorConfigurationSecretOutput {
	return o.ApplyT(func(v ConnectorConfigurationUsernamePassword) ConnectorConfigurationSecret { return v.Password }).(ConnectorConfigurationSecretOutput)
}

// Username.
func (o ConnectorConfigurationUsernamePasswordOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorConfigurationUsernamePassword) string { return v.Username }).(pulumi.StringOutput)
}

type ConnectorConfigurationUsernamePasswordPtrOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationUsernamePasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectorConfigurationUsernamePassword)(nil)).Elem()
}

func (o ConnectorConfigurationUsernamePasswordPtrOutput) ToConnectorConfigurationUsernamePasswordPtrOutput() ConnectorConfigurationUsernamePasswordPtrOutput {
	return o
}

func (o ConnectorConfigurationUsernamePasswordPtrOutput) ToConnectorConfigurationUsernamePasswordPtrOutputWithContext(ctx context.Context) ConnectorConfigurationUsernamePasswordPtrOutput {
	return o
}

func (o ConnectorConfigurationUsernamePasswordPtrOutput) Elem() ConnectorConfigurationUsernamePasswordOutput {
	return o.ApplyT(func(v *ConnectorConfigurationUsernamePassword) ConnectorConfigurationUsernamePassword {
		if v != nil {
			return *v
		}
		var ret ConnectorConfigurationUsernamePassword
		return ret
	}).(ConnectorConfigurationUsernamePasswordOutput)
}

// Password.
func (o ConnectorConfigurationUsernamePasswordPtrOutput) Password() ConnectorConfigurationSecretPtrOutput {
	return o.ApplyT(func(v *ConnectorConfigurationUsernamePassword) *ConnectorConfigurationSecret {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(ConnectorConfigurationSecretPtrOutput)
}

// Username.
func (o ConnectorConfigurationUsernamePasswordPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectorConfigurationUsernamePassword) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Username and Password authentication.
type ConnectorConfigurationUsernamePasswordResponse struct {
	// Password.
	Password ConnectorConfigurationSecretResponse `pulumi:"password"`
	// Username.
	Username string `pulumi:"username"`
}

// Username and Password authentication.
type ConnectorConfigurationUsernamePasswordResponseOutput struct{ *pulumi.OutputState }

func (ConnectorConfigurationUsernamePasswordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectorConfigurationUsernamePasswordResponse)(nil)).Elem()
}

func (o ConnectorConfigurationUsernamePasswordResponseOutput) ToConnectorConfigurationUsernamePasswordResponseOutput() ConnectorConfigurationUsernamePasswordResponseOutput {
	return o
}

func (o ConnectorConfigurationUsernamePasswordResponseOutput) ToConnectorConfigurationUsernamePasswordResponseOutputWithContext(ctx context.Context) ConnectorConfigurationUsernamePasswordResponseOutput {
	return o
}

// Password.
func (o ConnectorConfigurationUsernamePasswordResponseOutput) Password() ConnectorConfigurationSecretResponseOutput {
	return o.ApplyT(func(v ConnectorConfigurationUsernamePasswordResponse) ConnectorConfigurationSecretResponse {
		return v.Password
	}).(ConnectorConfigurationSecretResponseOutput)
}

// Username.
func (o ConnectorConfigurationUsernamePasswordResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectorConfigurationUsernamePasswordResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Configuration of the Dataproc Metastore Service.
type MetastoreServiceConfig struct {
	// Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
	MetastoreService *string `pulumi:"metastoreService"`
}

// MetastoreServiceConfigInput is an input type that accepts MetastoreServiceConfigArgs and MetastoreServiceConfigOutput values.
// You can construct a concrete instance of `MetastoreServiceConfigInput` via:
//
//	MetastoreServiceConfigArgs{...}
type MetastoreServiceConfigInput interface {
	pulumi.Input

	ToMetastoreServiceConfigOutput() MetastoreServiceConfigOutput
	ToMetastoreServiceConfigOutputWithContext(context.Context) MetastoreServiceConfigOutput
}

// Configuration of the Dataproc Metastore Service.
type MetastoreServiceConfigArgs struct {
	// Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
	MetastoreService pulumi.StringPtrInput `pulumi:"metastoreService"`
}

func (MetastoreServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MetastoreServiceConfig)(nil)).Elem()
}

func (i MetastoreServiceConfigArgs) ToMetastoreServiceConfigOutput() MetastoreServiceConfigOutput {
	return i.ToMetastoreServiceConfigOutputWithContext(context.Background())
}

func (i MetastoreServiceConfigArgs) ToMetastoreServiceConfigOutputWithContext(ctx context.Context) MetastoreServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceConfigOutput)
}

func (i MetastoreServiceConfigArgs) ToMetastoreServiceConfigPtrOutput() MetastoreServiceConfigPtrOutput {
	return i.ToMetastoreServiceConfigPtrOutputWithContext(context.Background())
}

func (i MetastoreServiceConfigArgs) ToMetastoreServiceConfigPtrOutputWithContext(ctx context.Context) MetastoreServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceConfigOutput).ToMetastoreServiceConfigPtrOutputWithContext(ctx)
}

// MetastoreServiceConfigPtrInput is an input type that accepts MetastoreServiceConfigArgs, MetastoreServiceConfigPtr and MetastoreServiceConfigPtrOutput values.
// You can construct a concrete instance of `MetastoreServiceConfigPtrInput` via:
//
//	        MetastoreServiceConfigArgs{...}
//
//	or:
//
//	        nil
type MetastoreServiceConfigPtrInput interface {
	pulumi.Input

	ToMetastoreServiceConfigPtrOutput() MetastoreServiceConfigPtrOutput
	ToMetastoreServiceConfigPtrOutputWithContext(context.Context) MetastoreServiceConfigPtrOutput
}

type metastoreServiceConfigPtrType MetastoreServiceConfigArgs

func MetastoreServiceConfigPtr(v *MetastoreServiceConfigArgs) MetastoreServiceConfigPtrInput {
	return (*metastoreServiceConfigPtrType)(v)
}

func (*metastoreServiceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreServiceConfig)(nil)).Elem()
}

func (i *metastoreServiceConfigPtrType) ToMetastoreServiceConfigPtrOutput() MetastoreServiceConfigPtrOutput {
	return i.ToMetastoreServiceConfigPtrOutputWithContext(context.Background())
}

func (i *metastoreServiceConfigPtrType) ToMetastoreServiceConfigPtrOutputWithContext(ctx context.Context) MetastoreServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetastoreServiceConfigPtrOutput)
}

// Configuration of the Dataproc Metastore Service.
type MetastoreServiceConfigOutput struct{ *pulumi.OutputState }

func (MetastoreServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetastoreServiceConfig)(nil)).Elem()
}

func (o MetastoreServiceConfigOutput) ToMetastoreServiceConfigOutput() MetastoreServiceConfigOutput {
	return o
}

func (o MetastoreServiceConfigOutput) ToMetastoreServiceConfigOutputWithContext(ctx context.Context) MetastoreServiceConfigOutput {
	return o
}

func (o MetastoreServiceConfigOutput) ToMetastoreServiceConfigPtrOutput() MetastoreServiceConfigPtrOutput {
	return o.ToMetastoreServiceConfigPtrOutputWithContext(context.Background())
}

func (o MetastoreServiceConfigOutput) ToMetastoreServiceConfigPtrOutputWithContext(ctx context.Context) MetastoreServiceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MetastoreServiceConfig) *MetastoreServiceConfig {
		return &v
	}).(MetastoreServiceConfigPtrOutput)
}

// Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
func (o MetastoreServiceConfigOutput) MetastoreService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MetastoreServiceConfig) *string { return v.MetastoreService }).(pulumi.StringPtrOutput)
}

type MetastoreServiceConfigPtrOutput struct{ *pulumi.OutputState }

func (MetastoreServiceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MetastoreServiceConfig)(nil)).Elem()
}

func (o MetastoreServiceConfigPtrOutput) ToMetastoreServiceConfigPtrOutput() MetastoreServiceConfigPtrOutput {
	return o
}

func (o MetastoreServiceConfigPtrOutput) ToMetastoreServiceConfigPtrOutputWithContext(ctx context.Context) MetastoreServiceConfigPtrOutput {
	return o
}

func (o MetastoreServiceConfigPtrOutput) Elem() MetastoreServiceConfigOutput {
	return o.ApplyT(func(v *MetastoreServiceConfig) MetastoreServiceConfig {
		if v != nil {
			return *v
		}
		var ret MetastoreServiceConfig
		return ret
	}).(MetastoreServiceConfigOutput)
}

// Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
func (o MetastoreServiceConfigPtrOutput) MetastoreService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MetastoreServiceConfig) *string {
		if v == nil {
			return nil
		}
		return v.MetastoreService
	}).(pulumi.StringPtrOutput)
}

// Configuration of the Dataproc Metastore Service.
type MetastoreServiceConfigResponse struct {
	// Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
	MetastoreService string `pulumi:"metastoreService"`
}

// Configuration of the Dataproc Metastore Service.
type MetastoreServiceConfigResponseOutput struct{ *pulumi.OutputState }

func (MetastoreServiceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetastoreServiceConfigResponse)(nil)).Elem()
}

func (o MetastoreServiceConfigResponseOutput) ToMetastoreServiceConfigResponseOutput() MetastoreServiceConfigResponseOutput {
	return o
}

func (o MetastoreServiceConfigResponseOutput) ToMetastoreServiceConfigResponseOutputWithContext(ctx context.Context) MetastoreServiceConfigResponseOutput {
	return o
}

// Optional. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[region]/services/[service_id]`
func (o MetastoreServiceConfigResponseOutput) MetastoreService() pulumi.StringOutput {
	return o.ApplyT(func(v MetastoreServiceConfigResponse) string { return v.MetastoreService }).(pulumi.StringOutput)
}

// Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
type SalesforceDataCloudProperties struct {
	// The URL to the user's Salesforce DataCloud instance.
	InstanceUri *string `pulumi:"instanceUri"`
	// The ID of the user's Salesforce tenant.
	TenantId *string `pulumi:"tenantId"`
}

// SalesforceDataCloudPropertiesInput is an input type that accepts SalesforceDataCloudPropertiesArgs and SalesforceDataCloudPropertiesOutput values.
// You can construct a concrete instance of `SalesforceDataCloudPropertiesInput` via:
//
//	SalesforceDataCloudPropertiesArgs{...}
type SalesforceDataCloudPropertiesInput interface {
	pulumi.Input

	ToSalesforceDataCloudPropertiesOutput() SalesforceDataCloudPropertiesOutput
	ToSalesforceDataCloudPropertiesOutputWithContext(context.Context) SalesforceDataCloudPropertiesOutput
}

// Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
type SalesforceDataCloudPropertiesArgs struct {
	// The URL to the user's Salesforce DataCloud instance.
	InstanceUri pulumi.StringPtrInput `pulumi:"instanceUri"`
	// The ID of the user's Salesforce tenant.
	TenantId pulumi.StringPtrInput `pulumi:"tenantId"`
}

func (SalesforceDataCloudPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceDataCloudProperties)(nil)).Elem()
}

func (i SalesforceDataCloudPropertiesArgs) ToSalesforceDataCloudPropertiesOutput() SalesforceDataCloudPropertiesOutput {
	return i.ToSalesforceDataCloudPropertiesOutputWithContext(context.Background())
}

func (i SalesforceDataCloudPropertiesArgs) ToSalesforceDataCloudPropertiesOutputWithContext(ctx context.Context) SalesforceDataCloudPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceDataCloudPropertiesOutput)
}

func (i SalesforceDataCloudPropertiesArgs) ToSalesforceDataCloudPropertiesPtrOutput() SalesforceDataCloudPropertiesPtrOutput {
	return i.ToSalesforceDataCloudPropertiesPtrOutputWithContext(context.Background())
}

func (i SalesforceDataCloudPropertiesArgs) ToSalesforceDataCloudPropertiesPtrOutputWithContext(ctx context.Context) SalesforceDataCloudPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceDataCloudPropertiesOutput).ToSalesforceDataCloudPropertiesPtrOutputWithContext(ctx)
}

// SalesforceDataCloudPropertiesPtrInput is an input type that accepts SalesforceDataCloudPropertiesArgs, SalesforceDataCloudPropertiesPtr and SalesforceDataCloudPropertiesPtrOutput values.
// You can construct a concrete instance of `SalesforceDataCloudPropertiesPtrInput` via:
//
//	        SalesforceDataCloudPropertiesArgs{...}
//
//	or:
//
//	        nil
type SalesforceDataCloudPropertiesPtrInput interface {
	pulumi.Input

	ToSalesforceDataCloudPropertiesPtrOutput() SalesforceDataCloudPropertiesPtrOutput
	ToSalesforceDataCloudPropertiesPtrOutputWithContext(context.Context) SalesforceDataCloudPropertiesPtrOutput
}

type salesforceDataCloudPropertiesPtrType SalesforceDataCloudPropertiesArgs

func SalesforceDataCloudPropertiesPtr(v *SalesforceDataCloudPropertiesArgs) SalesforceDataCloudPropertiesPtrInput {
	return (*salesforceDataCloudPropertiesPtrType)(v)
}

func (*salesforceDataCloudPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SalesforceDataCloudProperties)(nil)).Elem()
}

func (i *salesforceDataCloudPropertiesPtrType) ToSalesforceDataCloudPropertiesPtrOutput() SalesforceDataCloudPropertiesPtrOutput {
	return i.ToSalesforceDataCloudPropertiesPtrOutputWithContext(context.Background())
}

func (i *salesforceDataCloudPropertiesPtrType) ToSalesforceDataCloudPropertiesPtrOutputWithContext(ctx context.Context) SalesforceDataCloudPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SalesforceDataCloudPropertiesPtrOutput)
}

// Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
type SalesforceDataCloudPropertiesOutput struct{ *pulumi.OutputState }

func (SalesforceDataCloudPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceDataCloudProperties)(nil)).Elem()
}

func (o SalesforceDataCloudPropertiesOutput) ToSalesforceDataCloudPropertiesOutput() SalesforceDataCloudPropertiesOutput {
	return o
}

func (o SalesforceDataCloudPropertiesOutput) ToSalesforceDataCloudPropertiesOutputWithContext(ctx context.Context) SalesforceDataCloudPropertiesOutput {
	return o
}

func (o SalesforceDataCloudPropertiesOutput) ToSalesforceDataCloudPropertiesPtrOutput() SalesforceDataCloudPropertiesPtrOutput {
	return o.ToSalesforceDataCloudPropertiesPtrOutputWithContext(context.Background())
}

func (o SalesforceDataCloudPropertiesOutput) ToSalesforceDataCloudPropertiesPtrOutputWithContext(ctx context.Context) SalesforceDataCloudPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SalesforceDataCloudProperties) *SalesforceDataCloudProperties {
		return &v
	}).(SalesforceDataCloudPropertiesPtrOutput)
}

// The URL to the user's Salesforce DataCloud instance.
func (o SalesforceDataCloudPropertiesOutput) InstanceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceDataCloudProperties) *string { return v.InstanceUri }).(pulumi.StringPtrOutput)
}

// The ID of the user's Salesforce tenant.
func (o SalesforceDataCloudPropertiesOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SalesforceDataCloudProperties) *string { return v.TenantId }).(pulumi.StringPtrOutput)
}

type SalesforceDataCloudPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SalesforceDataCloudPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SalesforceDataCloudProperties)(nil)).Elem()
}

func (o SalesforceDataCloudPropertiesPtrOutput) ToSalesforceDataCloudPropertiesPtrOutput() SalesforceDataCloudPropertiesPtrOutput {
	return o
}

func (o SalesforceDataCloudPropertiesPtrOutput) ToSalesforceDataCloudPropertiesPtrOutputWithContext(ctx context.Context) SalesforceDataCloudPropertiesPtrOutput {
	return o
}

func (o SalesforceDataCloudPropertiesPtrOutput) Elem() SalesforceDataCloudPropertiesOutput {
	return o.ApplyT(func(v *SalesforceDataCloudProperties) SalesforceDataCloudProperties {
		if v != nil {
			return *v
		}
		var ret SalesforceDataCloudProperties
		return ret
	}).(SalesforceDataCloudPropertiesOutput)
}

// The URL to the user's Salesforce DataCloud instance.
func (o SalesforceDataCloudPropertiesPtrOutput) InstanceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SalesforceDataCloudProperties) *string {
		if v == nil {
			return nil
		}
		return v.InstanceUri
	}).(pulumi.StringPtrOutput)
}

// The ID of the user's Salesforce tenant.
func (o SalesforceDataCloudPropertiesPtrOutput) TenantId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SalesforceDataCloudProperties) *string {
		if v == nil {
			return nil
		}
		return v.TenantId
	}).(pulumi.StringPtrOutput)
}

// Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
type SalesforceDataCloudPropertiesResponse struct {
	// A unique Google-owned and Google-generated service account identity for the connection.
	Identity string `pulumi:"identity"`
	// The URL to the user's Salesforce DataCloud instance.
	InstanceUri string `pulumi:"instanceUri"`
	// The ID of the user's Salesforce tenant.
	TenantId string `pulumi:"tenantId"`
}

// Connection properties specific to Salesforce DataCloud. This is intended for use only by Salesforce partner projects.
type SalesforceDataCloudPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SalesforceDataCloudPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SalesforceDataCloudPropertiesResponse)(nil)).Elem()
}

func (o SalesforceDataCloudPropertiesResponseOutput) ToSalesforceDataCloudPropertiesResponseOutput() SalesforceDataCloudPropertiesResponseOutput {
	return o
}

func (o SalesforceDataCloudPropertiesResponseOutput) ToSalesforceDataCloudPropertiesResponseOutputWithContext(ctx context.Context) SalesforceDataCloudPropertiesResponseOutput {
	return o
}

// A unique Google-owned and Google-generated service account identity for the connection.
func (o SalesforceDataCloudPropertiesResponseOutput) Identity() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceDataCloudPropertiesResponse) string { return v.Identity }).(pulumi.StringOutput)
}

// The URL to the user's Salesforce DataCloud instance.
func (o SalesforceDataCloudPropertiesResponseOutput) InstanceUri() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceDataCloudPropertiesResponse) string { return v.InstanceUri }).(pulumi.StringOutput)
}

// The ID of the user's Salesforce tenant.
func (o SalesforceDataCloudPropertiesResponseOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v SalesforceDataCloudPropertiesResponse) string { return v.TenantId }).(pulumi.StringOutput)
}

// Configuration of the Spark History Server.
type SparkHistoryServerConfig struct {
	// Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
	DataprocCluster *string `pulumi:"dataprocCluster"`
}

// SparkHistoryServerConfigInput is an input type that accepts SparkHistoryServerConfigArgs and SparkHistoryServerConfigOutput values.
// You can construct a concrete instance of `SparkHistoryServerConfigInput` via:
//
//	SparkHistoryServerConfigArgs{...}
type SparkHistoryServerConfigInput interface {
	pulumi.Input

	ToSparkHistoryServerConfigOutput() SparkHistoryServerConfigOutput
	ToSparkHistoryServerConfigOutputWithContext(context.Context) SparkHistoryServerConfigOutput
}

// Configuration of the Spark History Server.
type SparkHistoryServerConfigArgs struct {
	// Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
	DataprocCluster pulumi.StringPtrInput `pulumi:"dataprocCluster"`
}

func (SparkHistoryServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkHistoryServerConfig)(nil)).Elem()
}

func (i SparkHistoryServerConfigArgs) ToSparkHistoryServerConfigOutput() SparkHistoryServerConfigOutput {
	return i.ToSparkHistoryServerConfigOutputWithContext(context.Background())
}

func (i SparkHistoryServerConfigArgs) ToSparkHistoryServerConfigOutputWithContext(ctx context.Context) SparkHistoryServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkHistoryServerConfigOutput)
}

func (i SparkHistoryServerConfigArgs) ToSparkHistoryServerConfigPtrOutput() SparkHistoryServerConfigPtrOutput {
	return i.ToSparkHistoryServerConfigPtrOutputWithContext(context.Background())
}

func (i SparkHistoryServerConfigArgs) ToSparkHistoryServerConfigPtrOutputWithContext(ctx context.Context) SparkHistoryServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkHistoryServerConfigOutput).ToSparkHistoryServerConfigPtrOutputWithContext(ctx)
}

// SparkHistoryServerConfigPtrInput is an input type that accepts SparkHistoryServerConfigArgs, SparkHistoryServerConfigPtr and SparkHistoryServerConfigPtrOutput values.
// You can construct a concrete instance of `SparkHistoryServerConfigPtrInput` via:
//
//	        SparkHistoryServerConfigArgs{...}
//
//	or:
//
//	        nil
type SparkHistoryServerConfigPtrInput interface {
	pulumi.Input

	ToSparkHistoryServerConfigPtrOutput() SparkHistoryServerConfigPtrOutput
	ToSparkHistoryServerConfigPtrOutputWithContext(context.Context) SparkHistoryServerConfigPtrOutput
}

type sparkHistoryServerConfigPtrType SparkHistoryServerConfigArgs

func SparkHistoryServerConfigPtr(v *SparkHistoryServerConfigArgs) SparkHistoryServerConfigPtrInput {
	return (*sparkHistoryServerConfigPtrType)(v)
}

func (*sparkHistoryServerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkHistoryServerConfig)(nil)).Elem()
}

func (i *sparkHistoryServerConfigPtrType) ToSparkHistoryServerConfigPtrOutput() SparkHistoryServerConfigPtrOutput {
	return i.ToSparkHistoryServerConfigPtrOutputWithContext(context.Background())
}

func (i *sparkHistoryServerConfigPtrType) ToSparkHistoryServerConfigPtrOutputWithContext(ctx context.Context) SparkHistoryServerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkHistoryServerConfigPtrOutput)
}

// Configuration of the Spark History Server.
type SparkHistoryServerConfigOutput struct{ *pulumi.OutputState }

func (SparkHistoryServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkHistoryServerConfig)(nil)).Elem()
}

func (o SparkHistoryServerConfigOutput) ToSparkHistoryServerConfigOutput() SparkHistoryServerConfigOutput {
	return o
}

func (o SparkHistoryServerConfigOutput) ToSparkHistoryServerConfigOutputWithContext(ctx context.Context) SparkHistoryServerConfigOutput {
	return o
}

func (o SparkHistoryServerConfigOutput) ToSparkHistoryServerConfigPtrOutput() SparkHistoryServerConfigPtrOutput {
	return o.ToSparkHistoryServerConfigPtrOutputWithContext(context.Background())
}

func (o SparkHistoryServerConfigOutput) ToSparkHistoryServerConfigPtrOutputWithContext(ctx context.Context) SparkHistoryServerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkHistoryServerConfig) *SparkHistoryServerConfig {
		return &v
	}).(SparkHistoryServerConfigPtrOutput)
}

// Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
func (o SparkHistoryServerConfigOutput) DataprocCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SparkHistoryServerConfig) *string { return v.DataprocCluster }).(pulumi.StringPtrOutput)
}

type SparkHistoryServerConfigPtrOutput struct{ *pulumi.OutputState }

func (SparkHistoryServerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkHistoryServerConfig)(nil)).Elem()
}

func (o SparkHistoryServerConfigPtrOutput) ToSparkHistoryServerConfigPtrOutput() SparkHistoryServerConfigPtrOutput {
	return o
}

func (o SparkHistoryServerConfigPtrOutput) ToSparkHistoryServerConfigPtrOutputWithContext(ctx context.Context) SparkHistoryServerConfigPtrOutput {
	return o
}

func (o SparkHistoryServerConfigPtrOutput) Elem() SparkHistoryServerConfigOutput {
	return o.ApplyT(func(v *SparkHistoryServerConfig) SparkHistoryServerConfig {
		if v != nil {
			return *v
		}
		var ret SparkHistoryServerConfig
		return ret
	}).(SparkHistoryServerConfigOutput)
}

// Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
func (o SparkHistoryServerConfigPtrOutput) DataprocCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkHistoryServerConfig) *string {
		if v == nil {
			return nil
		}
		return v.DataprocCluster
	}).(pulumi.StringPtrOutput)
}

// Configuration of the Spark History Server.
type SparkHistoryServerConfigResponse struct {
	// Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
	DataprocCluster string `pulumi:"dataprocCluster"`
}

// Configuration of the Spark History Server.
type SparkHistoryServerConfigResponseOutput struct{ *pulumi.OutputState }

func (SparkHistoryServerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkHistoryServerConfigResponse)(nil)).Elem()
}

func (o SparkHistoryServerConfigResponseOutput) ToSparkHistoryServerConfigResponseOutput() SparkHistoryServerConfigResponseOutput {
	return o
}

func (o SparkHistoryServerConfigResponseOutput) ToSparkHistoryServerConfigResponseOutputWithContext(ctx context.Context) SparkHistoryServerConfigResponseOutput {
	return o
}

// Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
func (o SparkHistoryServerConfigResponseOutput) DataprocCluster() pulumi.StringOutput {
	return o.ApplyT(func(v SparkHistoryServerConfigResponse) string { return v.DataprocCluster }).(pulumi.StringOutput)
}

// Container for connection properties to execute stored procedures for Apache Spark.
type SparkProperties struct {
	// Optional. Dataproc Metastore Service configuration for the connection.
	MetastoreServiceConfig *MetastoreServiceConfig `pulumi:"metastoreServiceConfig"`
	// Optional. Spark History Server configuration for the connection.
	SparkHistoryServerConfig *SparkHistoryServerConfig `pulumi:"sparkHistoryServerConfig"`
}

// SparkPropertiesInput is an input type that accepts SparkPropertiesArgs and SparkPropertiesOutput values.
// You can construct a concrete instance of `SparkPropertiesInput` via:
//
//	SparkPropertiesArgs{...}
type SparkPropertiesInput interface {
	pulumi.Input

	ToSparkPropertiesOutput() SparkPropertiesOutput
	ToSparkPropertiesOutputWithContext(context.Context) SparkPropertiesOutput
}

// Container for connection properties to execute stored procedures for Apache Spark.
type SparkPropertiesArgs struct {
	// Optional. Dataproc Metastore Service configuration for the connection.
	MetastoreServiceConfig MetastoreServiceConfigPtrInput `pulumi:"metastoreServiceConfig"`
	// Optional. Spark History Server configuration for the connection.
	SparkHistoryServerConfig SparkHistoryServerConfigPtrInput `pulumi:"sparkHistoryServerConfig"`
}

func (SparkPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProperties)(nil)).Elem()
}

func (i SparkPropertiesArgs) ToSparkPropertiesOutput() SparkPropertiesOutput {
	return i.ToSparkPropertiesOutputWithContext(context.Background())
}

func (i SparkPropertiesArgs) ToSparkPropertiesOutputWithContext(ctx context.Context) SparkPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPropertiesOutput)
}

func (i SparkPropertiesArgs) ToSparkPropertiesPtrOutput() SparkPropertiesPtrOutput {
	return i.ToSparkPropertiesPtrOutputWithContext(context.Background())
}

func (i SparkPropertiesArgs) ToSparkPropertiesPtrOutputWithContext(ctx context.Context) SparkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPropertiesOutput).ToSparkPropertiesPtrOutputWithContext(ctx)
}

// SparkPropertiesPtrInput is an input type that accepts SparkPropertiesArgs, SparkPropertiesPtr and SparkPropertiesPtrOutput values.
// You can construct a concrete instance of `SparkPropertiesPtrInput` via:
//
//	        SparkPropertiesArgs{...}
//
//	or:
//
//	        nil
type SparkPropertiesPtrInput interface {
	pulumi.Input

	ToSparkPropertiesPtrOutput() SparkPropertiesPtrOutput
	ToSparkPropertiesPtrOutputWithContext(context.Context) SparkPropertiesPtrOutput
}

type sparkPropertiesPtrType SparkPropertiesArgs

func SparkPropertiesPtr(v *SparkPropertiesArgs) SparkPropertiesPtrInput {
	return (*sparkPropertiesPtrType)(v)
}

func (*sparkPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProperties)(nil)).Elem()
}

func (i *sparkPropertiesPtrType) ToSparkPropertiesPtrOutput() SparkPropertiesPtrOutput {
	return i.ToSparkPropertiesPtrOutputWithContext(context.Background())
}

func (i *sparkPropertiesPtrType) ToSparkPropertiesPtrOutputWithContext(ctx context.Context) SparkPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkPropertiesPtrOutput)
}

// Container for connection properties to execute stored procedures for Apache Spark.
type SparkPropertiesOutput struct{ *pulumi.OutputState }

func (SparkPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkProperties)(nil)).Elem()
}

func (o SparkPropertiesOutput) ToSparkPropertiesOutput() SparkPropertiesOutput {
	return o
}

func (o SparkPropertiesOutput) ToSparkPropertiesOutputWithContext(ctx context.Context) SparkPropertiesOutput {
	return o
}

func (o SparkPropertiesOutput) ToSparkPropertiesPtrOutput() SparkPropertiesPtrOutput {
	return o.ToSparkPropertiesPtrOutputWithContext(context.Background())
}

func (o SparkPropertiesOutput) ToSparkPropertiesPtrOutputWithContext(ctx context.Context) SparkPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SparkProperties) *SparkProperties {
		return &v
	}).(SparkPropertiesPtrOutput)
}

// Optional. Dataproc Metastore Service configuration for the connection.
func (o SparkPropertiesOutput) MetastoreServiceConfig() MetastoreServiceConfigPtrOutput {
	return o.ApplyT(func(v SparkProperties) *MetastoreServiceConfig { return v.MetastoreServiceConfig }).(MetastoreServiceConfigPtrOutput)
}

// Optional. Spark History Server configuration for the connection.
func (o SparkPropertiesOutput) SparkHistoryServerConfig() SparkHistoryServerConfigPtrOutput {
	return o.ApplyT(func(v SparkProperties) *SparkHistoryServerConfig { return v.SparkHistoryServerConfig }).(SparkHistoryServerConfigPtrOutput)
}

type SparkPropertiesPtrOutput struct{ *pulumi.OutputState }

func (SparkPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkProperties)(nil)).Elem()
}

func (o SparkPropertiesPtrOutput) ToSparkPropertiesPtrOutput() SparkPropertiesPtrOutput {
	return o
}

func (o SparkPropertiesPtrOutput) ToSparkPropertiesPtrOutputWithContext(ctx context.Context) SparkPropertiesPtrOutput {
	return o
}

func (o SparkPropertiesPtrOutput) Elem() SparkPropertiesOutput {
	return o.ApplyT(func(v *SparkProperties) SparkProperties {
		if v != nil {
			return *v
		}
		var ret SparkProperties
		return ret
	}).(SparkPropertiesOutput)
}

// Optional. Dataproc Metastore Service configuration for the connection.
func (o SparkPropertiesPtrOutput) MetastoreServiceConfig() MetastoreServiceConfigPtrOutput {
	return o.ApplyT(func(v *SparkProperties) *MetastoreServiceConfig {
		if v == nil {
			return nil
		}
		return v.MetastoreServiceConfig
	}).(MetastoreServiceConfigPtrOutput)
}

// Optional. Spark History Server configuration for the connection.
func (o SparkPropertiesPtrOutput) SparkHistoryServerConfig() SparkHistoryServerConfigPtrOutput {
	return o.ApplyT(func(v *SparkProperties) *SparkHistoryServerConfig {
		if v == nil {
			return nil
		}
		return v.SparkHistoryServerConfig
	}).(SparkHistoryServerConfigPtrOutput)
}

// Container for connection properties to execute stored procedures for Apache Spark.
type SparkPropertiesResponse struct {
	// Optional. Dataproc Metastore Service configuration for the connection.
	MetastoreServiceConfig MetastoreServiceConfigResponse `pulumi:"metastoreServiceConfig"`
	// The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of a stored procedure for Apache Spark in BigQuery, the service account is used to connect to the desired resources in Google Cloud. The account ID is in the form of: bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com
	ServiceAccountId string `pulumi:"serviceAccountId"`
	// Optional. Spark History Server configuration for the connection.
	SparkHistoryServerConfig SparkHistoryServerConfigResponse `pulumi:"sparkHistoryServerConfig"`
}

// Container for connection properties to execute stored procedures for Apache Spark.
type SparkPropertiesResponseOutput struct{ *pulumi.OutputState }

func (SparkPropertiesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkPropertiesResponse)(nil)).Elem()
}

func (o SparkPropertiesResponseOutput) ToSparkPropertiesResponseOutput() SparkPropertiesResponseOutput {
	return o
}

func (o SparkPropertiesResponseOutput) ToSparkPropertiesResponseOutputWithContext(ctx context.Context) SparkPropertiesResponseOutput {
	return o
}

// Optional. Dataproc Metastore Service configuration for the connection.
func (o SparkPropertiesResponseOutput) MetastoreServiceConfig() MetastoreServiceConfigResponseOutput {
	return o.ApplyT(func(v SparkPropertiesResponse) MetastoreServiceConfigResponse { return v.MetastoreServiceConfig }).(MetastoreServiceConfigResponseOutput)
}

// The account ID of the service created for the purpose of this connection. The service account does not have any permissions associated with it when it is created. After creation, customers delegate permissions to the service account. When the connection is used in the context of a stored procedure for Apache Spark in BigQuery, the service account is used to connect to the desired resources in Google Cloud. The account ID is in the form of: bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com
func (o SparkPropertiesResponseOutput) ServiceAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v SparkPropertiesResponse) string { return v.ServiceAccountId }).(pulumi.StringOutput)
}

// Optional. Spark History Server configuration for the connection.
func (o SparkPropertiesResponseOutput) SparkHistoryServerConfig() SparkHistoryServerConfigResponseOutput {
	return o.ApplyT(func(v SparkPropertiesResponse) SparkHistoryServerConfigResponse { return v.SparkHistoryServerConfig }).(SparkHistoryServerConfigResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsAccessRoleInput)(nil)).Elem(), AwsAccessRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsAccessRolePtrInput)(nil)).Elem(), AwsAccessRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsPropertiesInput)(nil)).Elem(), AwsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsPropertiesPtrInput)(nil)).Elem(), AwsPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzurePropertiesInput)(nil)).Elem(), AzurePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AzurePropertiesPtrInput)(nil)).Elem(), AzurePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudResourcePropertiesInput)(nil)).Elem(), CloudResourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudResourcePropertiesPtrInput)(nil)).Elem(), CloudResourcePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSpannerPropertiesInput)(nil)).Elem(), CloudSpannerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSpannerPropertiesPtrInput)(nil)).Elem(), CloudSpannerPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlCredentialInput)(nil)).Elem(), CloudSqlCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlCredentialPtrInput)(nil)).Elem(), CloudSqlCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlPropertiesInput)(nil)).Elem(), CloudSqlPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudSqlPropertiesPtrInput)(nil)).Elem(), CloudSqlPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationInput)(nil)).Elem(), ConnectorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationPtrInput)(nil)).Elem(), ConnectorConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationAuthenticationInput)(nil)).Elem(), ConnectorConfigurationAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationAuthenticationPtrInput)(nil)).Elem(), ConnectorConfigurationAuthenticationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationEndpointInput)(nil)).Elem(), ConnectorConfigurationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationEndpointPtrInput)(nil)).Elem(), ConnectorConfigurationEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationSecretInput)(nil)).Elem(), ConnectorConfigurationSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationSecretPtrInput)(nil)).Elem(), ConnectorConfigurationSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationUsernamePasswordInput)(nil)).Elem(), ConnectorConfigurationUsernamePasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectorConfigurationUsernamePasswordPtrInput)(nil)).Elem(), ConnectorConfigurationUsernamePasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreServiceConfigInput)(nil)).Elem(), MetastoreServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MetastoreServiceConfigPtrInput)(nil)).Elem(), MetastoreServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SalesforceDataCloudPropertiesInput)(nil)).Elem(), SalesforceDataCloudPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SalesforceDataCloudPropertiesPtrInput)(nil)).Elem(), SalesforceDataCloudPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkHistoryServerConfigInput)(nil)).Elem(), SparkHistoryServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkHistoryServerConfigPtrInput)(nil)).Elem(), SparkHistoryServerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkPropertiesInput)(nil)).Elem(), SparkPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkPropertiesPtrInput)(nil)).Elem(), SparkPropertiesArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AwsAccessRoleOutput{})
	pulumi.RegisterOutputType(AwsAccessRolePtrOutput{})
	pulumi.RegisterOutputType(AwsAccessRoleResponseOutput{})
	pulumi.RegisterOutputType(AwsPropertiesOutput{})
	pulumi.RegisterOutputType(AwsPropertiesPtrOutput{})
	pulumi.RegisterOutputType(AwsPropertiesResponseOutput{})
	pulumi.RegisterOutputType(AzurePropertiesOutput{})
	pulumi.RegisterOutputType(AzurePropertiesPtrOutput{})
	pulumi.RegisterOutputType(AzurePropertiesResponseOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(CloudResourcePropertiesOutput{})
	pulumi.RegisterOutputType(CloudResourcePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CloudResourcePropertiesResponseOutput{})
	pulumi.RegisterOutputType(CloudSpannerPropertiesOutput{})
	pulumi.RegisterOutputType(CloudSpannerPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CloudSpannerPropertiesResponseOutput{})
	pulumi.RegisterOutputType(CloudSqlCredentialOutput{})
	pulumi.RegisterOutputType(CloudSqlCredentialPtrOutput{})
	pulumi.RegisterOutputType(CloudSqlCredentialResponseOutput{})
	pulumi.RegisterOutputType(CloudSqlPropertiesOutput{})
	pulumi.RegisterOutputType(CloudSqlPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CloudSqlPropertiesResponseOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationAuthenticationOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationAuthenticationPtrOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationAuthenticationResponseOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationEndpointOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationEndpointPtrOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationEndpointResponseOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationResponseOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationSecretOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationSecretPtrOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationSecretResponseOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationUsernamePasswordOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationUsernamePasswordPtrOutput{})
	pulumi.RegisterOutputType(ConnectorConfigurationUsernamePasswordResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(MetastoreServiceConfigOutput{})
	pulumi.RegisterOutputType(MetastoreServiceConfigPtrOutput{})
	pulumi.RegisterOutputType(MetastoreServiceConfigResponseOutput{})
	pulumi.RegisterOutputType(SalesforceDataCloudPropertiesOutput{})
	pulumi.RegisterOutputType(SalesforceDataCloudPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SalesforceDataCloudPropertiesResponseOutput{})
	pulumi.RegisterOutputType(SparkHistoryServerConfigOutput{})
	pulumi.RegisterOutputType(SparkHistoryServerConfigPtrOutput{})
	pulumi.RegisterOutputType(SparkHistoryServerConfigResponseOutput{})
	pulumi.RegisterOutputType(SparkPropertiesOutput{})
	pulumi.RegisterOutputType(SparkPropertiesPtrOutput{})
	pulumi.RegisterOutputType(SparkPropertiesResponseOutput{})
}
