// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.
// Auto-naming is currently not supported for this resource.
type Item struct {
	pulumi.CustomResourceState

	// Access control list for this item.
	Acl ItemAclResponseOutput `pulumi:"acl"`
	// Item content to be indexed and made text searchable.
	Content      ItemContentResponseOutput `pulumi:"content"`
	DatasourceId pulumi.StringOutput       `pulumi:"datasourceId"`
	ItemId       pulumi.StringOutput       `pulumi:"itemId"`
	// The type for this item.
	ItemType pulumi.StringOutput `pulumi:"itemType"`
	// The metadata information.
	Metadata ItemMetadataResponseOutput `pulumi:"metadata"`
	// The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Additional state connector can store for this item. The maximum length is 10000 bytes.
	Payload pulumi.StringOutput `pulumi:"payload"`
	// Queue this item belongs to. The maximum length is 100 characters.
	Queue pulumi.StringOutput `pulumi:"queue"`
	// Status of the item. Output only field.
	Status ItemStatusResponseOutput `pulumi:"status"`
	// The structured data for the item that should conform to a registered object definition in the schema for the data source.
	StructuredData ItemStructuredDataResponseOutput `pulumi:"structuredData"`
	// The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewItem registers a new resource with the given unique name, arguments, and options.
func NewItem(ctx *pulumi.Context,
	name string, args *ItemArgs, opts ...pulumi.ResourceOption) (*Item, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasourceId == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceId'")
	}
	if args.ItemId == nil {
		return nil, errors.New("invalid value for required argument 'ItemId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"datasourceId",
		"itemId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Item
	err := ctx.RegisterResource("google-native:cloudsearch/v1:Item", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetItem gets an existing Item resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ItemState, opts ...pulumi.ResourceOption) (*Item, error) {
	var resource Item
	err := ctx.ReadResource("google-native:cloudsearch/v1:Item", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Item resources.
type itemState struct {
}

type ItemState struct {
}

func (ItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*itemState)(nil)).Elem()
}

type itemArgs struct {
	// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
	ConnectorName *string `pulumi:"connectorName"`
	DatasourceId  string  `pulumi:"datasourceId"`
	// Common debug options.
	DebugOptions *DebugOptions `pulumi:"debugOptions"`
	ItemId       string        `pulumi:"itemId"`
}

// The set of arguments for constructing a Item resource.
type ItemArgs struct {
	// The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}
	ConnectorName pulumi.StringPtrInput
	DatasourceId  pulumi.StringInput
	// Common debug options.
	DebugOptions DebugOptionsPtrInput
	ItemId       pulumi.StringInput
}

func (ItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*itemArgs)(nil)).Elem()
}

type ItemInput interface {
	pulumi.Input

	ToItemOutput() ItemOutput
	ToItemOutputWithContext(ctx context.Context) ItemOutput
}

func (*Item) ElementType() reflect.Type {
	return reflect.TypeOf((**Item)(nil)).Elem()
}

func (i *Item) ToItemOutput() ItemOutput {
	return i.ToItemOutputWithContext(context.Background())
}

func (i *Item) ToItemOutputWithContext(ctx context.Context) ItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ItemOutput)
}

type ItemOutput struct{ *pulumi.OutputState }

func (ItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Item)(nil)).Elem()
}

func (o ItemOutput) ToItemOutput() ItemOutput {
	return o
}

func (o ItemOutput) ToItemOutputWithContext(ctx context.Context) ItemOutput {
	return o
}

// Access control list for this item.
func (o ItemOutput) Acl() ItemAclResponseOutput {
	return o.ApplyT(func(v *Item) ItemAclResponseOutput { return v.Acl }).(ItemAclResponseOutput)
}

// Item content to be indexed and made text searchable.
func (o ItemOutput) Content() ItemContentResponseOutput {
	return o.ApplyT(func(v *Item) ItemContentResponseOutput { return v.Content }).(ItemContentResponseOutput)
}

func (o ItemOutput) DatasourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Item) pulumi.StringOutput { return v.DatasourceId }).(pulumi.StringOutput)
}

func (o ItemOutput) ItemId() pulumi.StringOutput {
	return o.ApplyT(func(v *Item) pulumi.StringOutput { return v.ItemId }).(pulumi.StringOutput)
}

// The type for this item.
func (o ItemOutput) ItemType() pulumi.StringOutput {
	return o.ApplyT(func(v *Item) pulumi.StringOutput { return v.ItemType }).(pulumi.StringOutput)
}

// The metadata information.
func (o ItemOutput) Metadata() ItemMetadataResponseOutput {
	return o.ApplyT(func(v *Item) ItemMetadataResponseOutput { return v.Metadata }).(ItemMetadataResponseOutput)
}

// The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.
func (o ItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Item) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Additional state connector can store for this item. The maximum length is 10000 bytes.
func (o ItemOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v *Item) pulumi.StringOutput { return v.Payload }).(pulumi.StringOutput)
}

// Queue this item belongs to. The maximum length is 100 characters.
func (o ItemOutput) Queue() pulumi.StringOutput {
	return o.ApplyT(func(v *Item) pulumi.StringOutput { return v.Queue }).(pulumi.StringOutput)
}

// Status of the item. Output only field.
func (o ItemOutput) Status() ItemStatusResponseOutput {
	return o.ApplyT(func(v *Item) ItemStatusResponseOutput { return v.Status }).(ItemStatusResponseOutput)
}

// The structured data for the item that should conform to a registered object definition in the schema for the data source.
func (o ItemOutput) StructuredData() ItemStructuredDataResponseOutput {
	return o.ApplyT(func(v *Item) ItemStructuredDataResponseOutput { return v.StructuredData }).(ItemStructuredDataResponseOutput)
}

// The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).
func (o ItemOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Item) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ItemInput)(nil)).Elem(), &Item{})
	pulumi.RegisterOutputType(ItemOutput{})
}
