// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// The budgeted amount for each usage period.
type GoogleCloudBillingBudgetsV1BudgetAmount struct {
	// Use the last period's actual spend as the budget for the present period. LastPeriodAmount can only be set when the budget's time period is a Filter.calendar_period. It cannot be set in combination with Filter.custom_period.
	LastPeriodAmount *GoogleCloudBillingBudgetsV1LastPeriodAmount `pulumi:"lastPeriodAmount"`
	// A specified amount to use as the budget. `currency_code` is optional. If specified when creating a budget, it must match the currency of the billing account. If specified when updating a budget, it must match the currency_code of the existing budget. The `currency_code` is provided on output.
	SpecifiedAmount *GoogleTypeMoney `pulumi:"specifiedAmount"`
}

// GoogleCloudBillingBudgetsV1BudgetAmountInput is an input type that accepts GoogleCloudBillingBudgetsV1BudgetAmountArgs and GoogleCloudBillingBudgetsV1BudgetAmountOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1BudgetAmountInput` via:
//
//	GoogleCloudBillingBudgetsV1BudgetAmountArgs{...}
type GoogleCloudBillingBudgetsV1BudgetAmountInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1BudgetAmountOutput() GoogleCloudBillingBudgetsV1BudgetAmountOutput
	ToGoogleCloudBillingBudgetsV1BudgetAmountOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1BudgetAmountOutput
}

// The budgeted amount for each usage period.
type GoogleCloudBillingBudgetsV1BudgetAmountArgs struct {
	// Use the last period's actual spend as the budget for the present period. LastPeriodAmount can only be set when the budget's time period is a Filter.calendar_period. It cannot be set in combination with Filter.custom_period.
	LastPeriodAmount GoogleCloudBillingBudgetsV1LastPeriodAmountPtrInput `pulumi:"lastPeriodAmount"`
	// A specified amount to use as the budget. `currency_code` is optional. If specified when creating a budget, it must match the currency of the billing account. If specified when updating a budget, it must match the currency_code of the existing budget. The `currency_code` is provided on output.
	SpecifiedAmount GoogleTypeMoneyPtrInput `pulumi:"specifiedAmount"`
}

func (GoogleCloudBillingBudgetsV1BudgetAmountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1BudgetAmount)(nil)).Elem()
}

func (i GoogleCloudBillingBudgetsV1BudgetAmountArgs) ToGoogleCloudBillingBudgetsV1BudgetAmountOutput() GoogleCloudBillingBudgetsV1BudgetAmountOutput {
	return i.ToGoogleCloudBillingBudgetsV1BudgetAmountOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1BudgetAmountArgs) ToGoogleCloudBillingBudgetsV1BudgetAmountOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1BudgetAmountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1BudgetAmountOutput)
}

// The budgeted amount for each usage period.
type GoogleCloudBillingBudgetsV1BudgetAmountOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1BudgetAmountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1BudgetAmount)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1BudgetAmountOutput) ToGoogleCloudBillingBudgetsV1BudgetAmountOutput() GoogleCloudBillingBudgetsV1BudgetAmountOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1BudgetAmountOutput) ToGoogleCloudBillingBudgetsV1BudgetAmountOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1BudgetAmountOutput {
	return o
}

// Use the last period's actual spend as the budget for the present period. LastPeriodAmount can only be set when the budget's time period is a Filter.calendar_period. It cannot be set in combination with Filter.custom_period.
func (o GoogleCloudBillingBudgetsV1BudgetAmountOutput) LastPeriodAmount() GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1BudgetAmount) *GoogleCloudBillingBudgetsV1LastPeriodAmount {
		return v.LastPeriodAmount
	}).(GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput)
}

// A specified amount to use as the budget. `currency_code` is optional. If specified when creating a budget, it must match the currency of the billing account. If specified when updating a budget, it must match the currency_code of the existing budget. The `currency_code` is provided on output.
func (o GoogleCloudBillingBudgetsV1BudgetAmountOutput) SpecifiedAmount() GoogleTypeMoneyPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1BudgetAmount) *GoogleTypeMoney { return v.SpecifiedAmount }).(GoogleTypeMoneyPtrOutput)
}

// The budgeted amount for each usage period.
type GoogleCloudBillingBudgetsV1BudgetAmountResponse struct {
	// Use the last period's actual spend as the budget for the present period. LastPeriodAmount can only be set when the budget's time period is a Filter.calendar_period. It cannot be set in combination with Filter.custom_period.
	LastPeriodAmount GoogleCloudBillingBudgetsV1LastPeriodAmountResponse `pulumi:"lastPeriodAmount"`
	// A specified amount to use as the budget. `currency_code` is optional. If specified when creating a budget, it must match the currency of the billing account. If specified when updating a budget, it must match the currency_code of the existing budget. The `currency_code` is provided on output.
	SpecifiedAmount GoogleTypeMoneyResponse `pulumi:"specifiedAmount"`
}

// The budgeted amount for each usage period.
type GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1BudgetAmountResponse)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput) ToGoogleCloudBillingBudgetsV1BudgetAmountResponseOutput() GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput) ToGoogleCloudBillingBudgetsV1BudgetAmountResponseOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput {
	return o
}

// Use the last period's actual spend as the budget for the present period. LastPeriodAmount can only be set when the budget's time period is a Filter.calendar_period. It cannot be set in combination with Filter.custom_period.
func (o GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput) LastPeriodAmount() GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1BudgetAmountResponse) GoogleCloudBillingBudgetsV1LastPeriodAmountResponse {
		return v.LastPeriodAmount
	}).(GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput)
}

// A specified amount to use as the budget. `currency_code` is optional. If specified when creating a budget, it must match the currency of the billing account. If specified when updating a budget, it must match the currency_code of the existing budget. The `currency_code` is provided on output.
func (o GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput) SpecifiedAmount() GoogleTypeMoneyResponseOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1BudgetAmountResponse) GoogleTypeMoneyResponse {
		return v.SpecifiedAmount
	}).(GoogleTypeMoneyResponseOutput)
}

// All date times begin at 12 AM US and Canadian Pacific Time (UTC-8).
type GoogleCloudBillingBudgetsV1CustomPeriod struct {
	// Optional. The end date of the time period. Budgets with elapsed end date won't be processed. If unset, specifies to track all usage incurred since the start_date.
	EndDate *GoogleTypeDate `pulumi:"endDate"`
	// The start date must be after January 1, 2017.
	StartDate GoogleTypeDate `pulumi:"startDate"`
}

// GoogleCloudBillingBudgetsV1CustomPeriodInput is an input type that accepts GoogleCloudBillingBudgetsV1CustomPeriodArgs and GoogleCloudBillingBudgetsV1CustomPeriodOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1CustomPeriodInput` via:
//
//	GoogleCloudBillingBudgetsV1CustomPeriodArgs{...}
type GoogleCloudBillingBudgetsV1CustomPeriodInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1CustomPeriodOutput() GoogleCloudBillingBudgetsV1CustomPeriodOutput
	ToGoogleCloudBillingBudgetsV1CustomPeriodOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1CustomPeriodOutput
}

// All date times begin at 12 AM US and Canadian Pacific Time (UTC-8).
type GoogleCloudBillingBudgetsV1CustomPeriodArgs struct {
	// Optional. The end date of the time period. Budgets with elapsed end date won't be processed. If unset, specifies to track all usage incurred since the start_date.
	EndDate GoogleTypeDatePtrInput `pulumi:"endDate"`
	// The start date must be after January 1, 2017.
	StartDate GoogleTypeDateInput `pulumi:"startDate"`
}

func (GoogleCloudBillingBudgetsV1CustomPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1CustomPeriod)(nil)).Elem()
}

func (i GoogleCloudBillingBudgetsV1CustomPeriodArgs) ToGoogleCloudBillingBudgetsV1CustomPeriodOutput() GoogleCloudBillingBudgetsV1CustomPeriodOutput {
	return i.ToGoogleCloudBillingBudgetsV1CustomPeriodOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1CustomPeriodArgs) ToGoogleCloudBillingBudgetsV1CustomPeriodOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1CustomPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1CustomPeriodOutput)
}

func (i GoogleCloudBillingBudgetsV1CustomPeriodArgs) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutput() GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1CustomPeriodArgs) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1CustomPeriodOutput).ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(ctx)
}

// GoogleCloudBillingBudgetsV1CustomPeriodPtrInput is an input type that accepts GoogleCloudBillingBudgetsV1CustomPeriodArgs, GoogleCloudBillingBudgetsV1CustomPeriodPtr and GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1CustomPeriodPtrInput` via:
//
//	        GoogleCloudBillingBudgetsV1CustomPeriodArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudBillingBudgetsV1CustomPeriodPtrInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutput() GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput
	ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput
}

type googleCloudBillingBudgetsV1CustomPeriodPtrType GoogleCloudBillingBudgetsV1CustomPeriodArgs

func GoogleCloudBillingBudgetsV1CustomPeriodPtr(v *GoogleCloudBillingBudgetsV1CustomPeriodArgs) GoogleCloudBillingBudgetsV1CustomPeriodPtrInput {
	return (*googleCloudBillingBudgetsV1CustomPeriodPtrType)(v)
}

func (*googleCloudBillingBudgetsV1CustomPeriodPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1CustomPeriod)(nil)).Elem()
}

func (i *googleCloudBillingBudgetsV1CustomPeriodPtrType) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutput() GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(context.Background())
}

func (i *googleCloudBillingBudgetsV1CustomPeriodPtrType) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput)
}

// All date times begin at 12 AM US and Canadian Pacific Time (UTC-8).
type GoogleCloudBillingBudgetsV1CustomPeriodOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1CustomPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1CustomPeriod)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodOutput() GoogleCloudBillingBudgetsV1CustomPeriodOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1CustomPeriodOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutput() GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return o.ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(context.Background())
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudBillingBudgetsV1CustomPeriod) *GoogleCloudBillingBudgetsV1CustomPeriod {
		return &v
	}).(GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput)
}

// Optional. The end date of the time period. Budgets with elapsed end date won't be processed. If unset, specifies to track all usage incurred since the start_date.
func (o GoogleCloudBillingBudgetsV1CustomPeriodOutput) EndDate() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1CustomPeriod) *GoogleTypeDate { return v.EndDate }).(GoogleTypeDatePtrOutput)
}

// The start date must be after January 1, 2017.
func (o GoogleCloudBillingBudgetsV1CustomPeriodOutput) StartDate() GoogleTypeDateOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1CustomPeriod) GoogleTypeDate { return v.StartDate }).(GoogleTypeDateOutput)
}

type GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1CustomPeriod)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutput() GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput) Elem() GoogleCloudBillingBudgetsV1CustomPeriodOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1CustomPeriod) GoogleCloudBillingBudgetsV1CustomPeriod {
		if v != nil {
			return *v
		}
		var ret GoogleCloudBillingBudgetsV1CustomPeriod
		return ret
	}).(GoogleCloudBillingBudgetsV1CustomPeriodOutput)
}

// Optional. The end date of the time period. Budgets with elapsed end date won't be processed. If unset, specifies to track all usage incurred since the start_date.
func (o GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput) EndDate() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1CustomPeriod) *GoogleTypeDate {
		if v == nil {
			return nil
		}
		return v.EndDate
	}).(GoogleTypeDatePtrOutput)
}

// The start date must be after January 1, 2017.
func (o GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput) StartDate() GoogleTypeDatePtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1CustomPeriod) *GoogleTypeDate {
		if v == nil {
			return nil
		}
		return &v.StartDate
	}).(GoogleTypeDatePtrOutput)
}

// All date times begin at 12 AM US and Canadian Pacific Time (UTC-8).
type GoogleCloudBillingBudgetsV1CustomPeriodResponse struct {
	// Optional. The end date of the time period. Budgets with elapsed end date won't be processed. If unset, specifies to track all usage incurred since the start_date.
	EndDate GoogleTypeDateResponse `pulumi:"endDate"`
	// The start date must be after January 1, 2017.
	StartDate GoogleTypeDateResponse `pulumi:"startDate"`
}

// All date times begin at 12 AM US and Canadian Pacific Time (UTC-8).
type GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1CustomPeriodResponse)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodResponseOutput() GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput) ToGoogleCloudBillingBudgetsV1CustomPeriodResponseOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput {
	return o
}

// Optional. The end date of the time period. Budgets with elapsed end date won't be processed. If unset, specifies to track all usage incurred since the start_date.
func (o GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput) EndDate() GoogleTypeDateResponseOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1CustomPeriodResponse) GoogleTypeDateResponse { return v.EndDate }).(GoogleTypeDateResponseOutput)
}

// The start date must be after January 1, 2017.
func (o GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput) StartDate() GoogleTypeDateResponseOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1CustomPeriodResponse) GoogleTypeDateResponse { return v.StartDate }).(GoogleTypeDateResponseOutput)
}

// A filter for a budget, limiting the scope of the cost to calculate.
type GoogleCloudBillingBudgetsV1Filter struct {
	// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget tracks usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it tracks usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
	CalendarPeriod *GoogleCloudBillingBudgetsV1FilterCalendarPeriod `pulumi:"calendarPeriod"`
	// Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
	CreditTypes []string `pulumi:"creditTypes"`
	// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
	CreditTypesTreatment *GoogleCloudBillingBudgetsV1FilterCreditTypesTreatment `pulumi:"creditTypesTreatment"`
	// Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
	CustomPeriod *GoogleCloudBillingBudgetsV1CustomPeriod `pulumi:"customPeriod"`
	// Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report includes all labeled and unlabeled usage. An object containing a single `"key": value` pair. Example: `{ "name": "wrench" }`. _Currently, multiple entries or multiple values per entry are not allowed._
	Labels map[string][]interface{} `pulumi:"labels"`
	// Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report includes all usage for the billing account, regardless of which project the usage occurred on.
	Projects []string `pulumi:"projects"`
	// Optional. A set of folder and organization names of the form `folders/{folderId}` or `organizations/{organizationId}`, specifying that usage from only this set of folders and organizations should be included in the budget. If omitted, the budget includes all usage that the billing account pays for. If the folder or organization contains projects that are paid for by a different Cloud Billing account, the budget *doesn't* apply to those projects.
	ResourceAncestors []string `pulumi:"resourceAncestors"`
	// Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report includes usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
	Services []string `pulumi:"services"`
	// Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account is included. If the field is omitted, the report includes usage from the parent account and all subaccounts, if they exist.
	Subaccounts []string `pulumi:"subaccounts"`
}

// GoogleCloudBillingBudgetsV1FilterInput is an input type that accepts GoogleCloudBillingBudgetsV1FilterArgs and GoogleCloudBillingBudgetsV1FilterOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1FilterInput` via:
//
//	GoogleCloudBillingBudgetsV1FilterArgs{...}
type GoogleCloudBillingBudgetsV1FilterInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1FilterOutput() GoogleCloudBillingBudgetsV1FilterOutput
	ToGoogleCloudBillingBudgetsV1FilterOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1FilterOutput
}

// A filter for a budget, limiting the scope of the cost to calculate.
type GoogleCloudBillingBudgetsV1FilterArgs struct {
	// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget tracks usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it tracks usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
	CalendarPeriod GoogleCloudBillingBudgetsV1FilterCalendarPeriodPtrInput `pulumi:"calendarPeriod"`
	// Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
	CreditTypes pulumi.StringArrayInput `pulumi:"creditTypes"`
	// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
	CreditTypesTreatment GoogleCloudBillingBudgetsV1FilterCreditTypesTreatmentPtrInput `pulumi:"creditTypesTreatment"`
	// Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
	CustomPeriod GoogleCloudBillingBudgetsV1CustomPeriodPtrInput `pulumi:"customPeriod"`
	// Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report includes all labeled and unlabeled usage. An object containing a single `"key": value` pair. Example: `{ "name": "wrench" }`. _Currently, multiple entries or multiple values per entry are not allowed._
	Labels pulumi.ArrayMapInput `pulumi:"labels"`
	// Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report includes all usage for the billing account, regardless of which project the usage occurred on.
	Projects pulumi.StringArrayInput `pulumi:"projects"`
	// Optional. A set of folder and organization names of the form `folders/{folderId}` or `organizations/{organizationId}`, specifying that usage from only this set of folders and organizations should be included in the budget. If omitted, the budget includes all usage that the billing account pays for. If the folder or organization contains projects that are paid for by a different Cloud Billing account, the budget *doesn't* apply to those projects.
	ResourceAncestors pulumi.StringArrayInput `pulumi:"resourceAncestors"`
	// Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report includes usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
	Services pulumi.StringArrayInput `pulumi:"services"`
	// Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account is included. If the field is omitted, the report includes usage from the parent account and all subaccounts, if they exist.
	Subaccounts pulumi.StringArrayInput `pulumi:"subaccounts"`
}

func (GoogleCloudBillingBudgetsV1FilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1Filter)(nil)).Elem()
}

func (i GoogleCloudBillingBudgetsV1FilterArgs) ToGoogleCloudBillingBudgetsV1FilterOutput() GoogleCloudBillingBudgetsV1FilterOutput {
	return i.ToGoogleCloudBillingBudgetsV1FilterOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1FilterArgs) ToGoogleCloudBillingBudgetsV1FilterOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1FilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1FilterOutput)
}

func (i GoogleCloudBillingBudgetsV1FilterArgs) ToGoogleCloudBillingBudgetsV1FilterPtrOutput() GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1FilterArgs) ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1FilterOutput).ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(ctx)
}

// GoogleCloudBillingBudgetsV1FilterPtrInput is an input type that accepts GoogleCloudBillingBudgetsV1FilterArgs, GoogleCloudBillingBudgetsV1FilterPtr and GoogleCloudBillingBudgetsV1FilterPtrOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1FilterPtrInput` via:
//
//	        GoogleCloudBillingBudgetsV1FilterArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudBillingBudgetsV1FilterPtrInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1FilterPtrOutput() GoogleCloudBillingBudgetsV1FilterPtrOutput
	ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1FilterPtrOutput
}

type googleCloudBillingBudgetsV1FilterPtrType GoogleCloudBillingBudgetsV1FilterArgs

func GoogleCloudBillingBudgetsV1FilterPtr(v *GoogleCloudBillingBudgetsV1FilterArgs) GoogleCloudBillingBudgetsV1FilterPtrInput {
	return (*googleCloudBillingBudgetsV1FilterPtrType)(v)
}

func (*googleCloudBillingBudgetsV1FilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1Filter)(nil)).Elem()
}

func (i *googleCloudBillingBudgetsV1FilterPtrType) ToGoogleCloudBillingBudgetsV1FilterPtrOutput() GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(context.Background())
}

func (i *googleCloudBillingBudgetsV1FilterPtrType) ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1FilterPtrOutput)
}

// A filter for a budget, limiting the scope of the cost to calculate.
type GoogleCloudBillingBudgetsV1FilterOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1FilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1Filter)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1FilterOutput) ToGoogleCloudBillingBudgetsV1FilterOutput() GoogleCloudBillingBudgetsV1FilterOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1FilterOutput) ToGoogleCloudBillingBudgetsV1FilterOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1FilterOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1FilterOutput) ToGoogleCloudBillingBudgetsV1FilterPtrOutput() GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return o.ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(context.Background())
}

func (o GoogleCloudBillingBudgetsV1FilterOutput) ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudBillingBudgetsV1Filter) *GoogleCloudBillingBudgetsV1Filter {
		return &v
	}).(GoogleCloudBillingBudgetsV1FilterPtrOutput)
}

// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget tracks usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it tracks usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
func (o GoogleCloudBillingBudgetsV1FilterOutput) CalendarPeriod() GoogleCloudBillingBudgetsV1FilterCalendarPeriodPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) *GoogleCloudBillingBudgetsV1FilterCalendarPeriod {
		return v.CalendarPeriod
	}).(GoogleCloudBillingBudgetsV1FilterCalendarPeriodPtrOutput)
}

// Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
func (o GoogleCloudBillingBudgetsV1FilterOutput) CreditTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) []string { return v.CreditTypes }).(pulumi.StringArrayOutput)
}

// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
func (o GoogleCloudBillingBudgetsV1FilterOutput) CreditTypesTreatment() GoogleCloudBillingBudgetsV1FilterCreditTypesTreatmentPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) *GoogleCloudBillingBudgetsV1FilterCreditTypesTreatment {
		return v.CreditTypesTreatment
	}).(GoogleCloudBillingBudgetsV1FilterCreditTypesTreatmentPtrOutput)
}

// Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
func (o GoogleCloudBillingBudgetsV1FilterOutput) CustomPeriod() GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) *GoogleCloudBillingBudgetsV1CustomPeriod {
		return v.CustomPeriod
	}).(GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput)
}

// Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report includes all labeled and unlabeled usage. An object containing a single `"key": value` pair. Example: `{ "name": "wrench" }`. _Currently, multiple entries or multiple values per entry are not allowed._
func (o GoogleCloudBillingBudgetsV1FilterOutput) Labels() pulumi.ArrayMapOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) map[string][]interface{} { return v.Labels }).(pulumi.ArrayMapOutput)
}

// Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report includes all usage for the billing account, regardless of which project the usage occurred on.
func (o GoogleCloudBillingBudgetsV1FilterOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) []string { return v.Projects }).(pulumi.StringArrayOutput)
}

// Optional. A set of folder and organization names of the form `folders/{folderId}` or `organizations/{organizationId}`, specifying that usage from only this set of folders and organizations should be included in the budget. If omitted, the budget includes all usage that the billing account pays for. If the folder or organization contains projects that are paid for by a different Cloud Billing account, the budget *doesn't* apply to those projects.
func (o GoogleCloudBillingBudgetsV1FilterOutput) ResourceAncestors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) []string { return v.ResourceAncestors }).(pulumi.StringArrayOutput)
}

// Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report includes usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
func (o GoogleCloudBillingBudgetsV1FilterOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account is included. If the field is omitted, the report includes usage from the parent account and all subaccounts, if they exist.
func (o GoogleCloudBillingBudgetsV1FilterOutput) Subaccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1Filter) []string { return v.Subaccounts }).(pulumi.StringArrayOutput)
}

type GoogleCloudBillingBudgetsV1FilterPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1FilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1Filter)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) ToGoogleCloudBillingBudgetsV1FilterPtrOutput() GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) ToGoogleCloudBillingBudgetsV1FilterPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1FilterPtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) Elem() GoogleCloudBillingBudgetsV1FilterOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) GoogleCloudBillingBudgetsV1Filter {
		if v != nil {
			return *v
		}
		var ret GoogleCloudBillingBudgetsV1Filter
		return ret
	}).(GoogleCloudBillingBudgetsV1FilterOutput)
}

// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget tracks usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it tracks usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) CalendarPeriod() GoogleCloudBillingBudgetsV1FilterCalendarPeriodPtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) *GoogleCloudBillingBudgetsV1FilterCalendarPeriod {
		if v == nil {
			return nil
		}
		return v.CalendarPeriod
	}).(GoogleCloudBillingBudgetsV1FilterCalendarPeriodPtrOutput)
}

// Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) CreditTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) []string {
		if v == nil {
			return nil
		}
		return v.CreditTypes
	}).(pulumi.StringArrayOutput)
}

// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) CreditTypesTreatment() GoogleCloudBillingBudgetsV1FilterCreditTypesTreatmentPtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) *GoogleCloudBillingBudgetsV1FilterCreditTypesTreatment {
		if v == nil {
			return nil
		}
		return v.CreditTypesTreatment
	}).(GoogleCloudBillingBudgetsV1FilterCreditTypesTreatmentPtrOutput)
}

// Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) CustomPeriod() GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) *GoogleCloudBillingBudgetsV1CustomPeriod {
		if v == nil {
			return nil
		}
		return v.CustomPeriod
	}).(GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput)
}

// Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report includes all labeled and unlabeled usage. An object containing a single `"key": value` pair. Example: `{ "name": "wrench" }`. _Currently, multiple entries or multiple values per entry are not allowed._
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) Labels() pulumi.ArrayMapOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) map[string][]interface{} {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.ArrayMapOutput)
}

// Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report includes all usage for the billing account, regardless of which project the usage occurred on.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) []string {
		if v == nil {
			return nil
		}
		return v.Projects
	}).(pulumi.StringArrayOutput)
}

// Optional. A set of folder and organization names of the form `folders/{folderId}` or `organizations/{organizationId}`, specifying that usage from only this set of folders and organizations should be included in the budget. If omitted, the budget includes all usage that the billing account pays for. If the folder or organization contains projects that are paid for by a different Cloud Billing account, the budget *doesn't* apply to those projects.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) ResourceAncestors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) []string {
		if v == nil {
			return nil
		}
		return v.ResourceAncestors
	}).(pulumi.StringArrayOutput)
}

// Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report includes usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) []string {
		if v == nil {
			return nil
		}
		return v.Services
	}).(pulumi.StringArrayOutput)
}

// Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account is included. If the field is omitted, the report includes usage from the parent account and all subaccounts, if they exist.
func (o GoogleCloudBillingBudgetsV1FilterPtrOutput) Subaccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1Filter) []string {
		if v == nil {
			return nil
		}
		return v.Subaccounts
	}).(pulumi.StringArrayOutput)
}

// A filter for a budget, limiting the scope of the cost to calculate.
type GoogleCloudBillingBudgetsV1FilterResponse struct {
	// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget tracks usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it tracks usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
	CalendarPeriod string `pulumi:"calendarPeriod"`
	// Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
	CreditTypes []string `pulumi:"creditTypes"`
	// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
	CreditTypesTreatment string `pulumi:"creditTypesTreatment"`
	// Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
	CustomPeriod GoogleCloudBillingBudgetsV1CustomPeriodResponse `pulumi:"customPeriod"`
	// Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report includes all labeled and unlabeled usage. An object containing a single `"key": value` pair. Example: `{ "name": "wrench" }`. _Currently, multiple entries or multiple values per entry are not allowed._
	Labels map[string][]interface{} `pulumi:"labels"`
	// Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report includes all usage for the billing account, regardless of which project the usage occurred on.
	Projects []string `pulumi:"projects"`
	// Optional. A set of folder and organization names of the form `folders/{folderId}` or `organizations/{organizationId}`, specifying that usage from only this set of folders and organizations should be included in the budget. If omitted, the budget includes all usage that the billing account pays for. If the folder or organization contains projects that are paid for by a different Cloud Billing account, the budget *doesn't* apply to those projects.
	ResourceAncestors []string `pulumi:"resourceAncestors"`
	// Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report includes usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
	Services []string `pulumi:"services"`
	// Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account is included. If the field is omitted, the report includes usage from the parent account and all subaccounts, if they exist.
	Subaccounts []string `pulumi:"subaccounts"`
}

// A filter for a budget, limiting the scope of the cost to calculate.
type GoogleCloudBillingBudgetsV1FilterResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1FilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1FilterResponse)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) ToGoogleCloudBillingBudgetsV1FilterResponseOutput() GoogleCloudBillingBudgetsV1FilterResponseOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) ToGoogleCloudBillingBudgetsV1FilterResponseOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1FilterResponseOutput {
	return o
}

// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget tracks usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it tracks usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) CalendarPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) string { return v.CalendarPeriod }).(pulumi.StringOutput)
}

// Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) CreditTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) []string { return v.CreditTypes }).(pulumi.StringArrayOutput)
}

// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) CreditTypesTreatment() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) string { return v.CreditTypesTreatment }).(pulumi.StringOutput)
}

// Optional. Specifies to track usage from any start date (required) to any end date (optional). This time period is static, it does not recur.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) CustomPeriod() GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) GoogleCloudBillingBudgetsV1CustomPeriodResponse {
		return v.CustomPeriod
	}).(GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput)
}

// Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report includes all labeled and unlabeled usage. An object containing a single `"key": value` pair. Example: `{ "name": "wrench" }`. _Currently, multiple entries or multiple values per entry are not allowed._
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) Labels() pulumi.ArrayMapOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) map[string][]interface{} { return v.Labels }).(pulumi.ArrayMapOutput)
}

// Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report includes all usage for the billing account, regardless of which project the usage occurred on.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) Projects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) []string { return v.Projects }).(pulumi.StringArrayOutput)
}

// Optional. A set of folder and organization names of the form `folders/{folderId}` or `organizations/{organizationId}`, specifying that usage from only this set of folders and organizations should be included in the budget. If omitted, the budget includes all usage that the billing account pays for. If the folder or organization contains projects that are paid for by a different Cloud Billing account, the budget *doesn't* apply to those projects.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) ResourceAncestors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) []string { return v.ResourceAncestors }).(pulumi.StringArrayOutput)
}

// Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report includes usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account is included. If the field is omitted, the report includes usage from the parent account and all subaccounts, if they exist.
func (o GoogleCloudBillingBudgetsV1FilterResponseOutput) Subaccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1FilterResponse) []string { return v.Subaccounts }).(pulumi.StringArrayOutput)
}

// Describes a budget amount targeted to the last Filter.calendar_period spend. At this time, the amount is automatically 100% of the last calendar period's spend; that is, there are no other options yet. LastPeriodAmount cannot be set for a budget configured with a Filter.custom_period.
type GoogleCloudBillingBudgetsV1LastPeriodAmount struct {
}

// GoogleCloudBillingBudgetsV1LastPeriodAmountInput is an input type that accepts GoogleCloudBillingBudgetsV1LastPeriodAmountArgs and GoogleCloudBillingBudgetsV1LastPeriodAmountOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1LastPeriodAmountInput` via:
//
//	GoogleCloudBillingBudgetsV1LastPeriodAmountArgs{...}
type GoogleCloudBillingBudgetsV1LastPeriodAmountInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1LastPeriodAmountOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountOutput
	ToGoogleCloudBillingBudgetsV1LastPeriodAmountOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountOutput
}

// Describes a budget amount targeted to the last Filter.calendar_period spend. At this time, the amount is automatically 100% of the last calendar period's spend; that is, there are no other options yet. LastPeriodAmount cannot be set for a budget configured with a Filter.custom_period.
type GoogleCloudBillingBudgetsV1LastPeriodAmountArgs struct {
}

func (GoogleCloudBillingBudgetsV1LastPeriodAmountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1LastPeriodAmount)(nil)).Elem()
}

func (i GoogleCloudBillingBudgetsV1LastPeriodAmountArgs) ToGoogleCloudBillingBudgetsV1LastPeriodAmountOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountOutput {
	return i.ToGoogleCloudBillingBudgetsV1LastPeriodAmountOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1LastPeriodAmountArgs) ToGoogleCloudBillingBudgetsV1LastPeriodAmountOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1LastPeriodAmountOutput)
}

func (i GoogleCloudBillingBudgetsV1LastPeriodAmountArgs) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1LastPeriodAmountArgs) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1LastPeriodAmountOutput).ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(ctx)
}

// GoogleCloudBillingBudgetsV1LastPeriodAmountPtrInput is an input type that accepts GoogleCloudBillingBudgetsV1LastPeriodAmountArgs, GoogleCloudBillingBudgetsV1LastPeriodAmountPtr and GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1LastPeriodAmountPtrInput` via:
//
//	        GoogleCloudBillingBudgetsV1LastPeriodAmountArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudBillingBudgetsV1LastPeriodAmountPtrInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput
	ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput
}

type googleCloudBillingBudgetsV1LastPeriodAmountPtrType GoogleCloudBillingBudgetsV1LastPeriodAmountArgs

func GoogleCloudBillingBudgetsV1LastPeriodAmountPtr(v *GoogleCloudBillingBudgetsV1LastPeriodAmountArgs) GoogleCloudBillingBudgetsV1LastPeriodAmountPtrInput {
	return (*googleCloudBillingBudgetsV1LastPeriodAmountPtrType)(v)
}

func (*googleCloudBillingBudgetsV1LastPeriodAmountPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1LastPeriodAmount)(nil)).Elem()
}

func (i *googleCloudBillingBudgetsV1LastPeriodAmountPtrType) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(context.Background())
}

func (i *googleCloudBillingBudgetsV1LastPeriodAmountPtrType) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput)
}

// Describes a budget amount targeted to the last Filter.calendar_period spend. At this time, the amount is automatically 100% of the last calendar period's spend; that is, there are no other options yet. LastPeriodAmount cannot be set for a budget configured with a Filter.custom_period.
type GoogleCloudBillingBudgetsV1LastPeriodAmountOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1LastPeriodAmountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1LastPeriodAmount)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return o.ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(context.Background())
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudBillingBudgetsV1LastPeriodAmount) *GoogleCloudBillingBudgetsV1LastPeriodAmount {
		return &v
	}).(GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput)
}

type GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1LastPeriodAmount)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput) Elem() GoogleCloudBillingBudgetsV1LastPeriodAmountOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1LastPeriodAmount) GoogleCloudBillingBudgetsV1LastPeriodAmount {
		if v != nil {
			return *v
		}
		var ret GoogleCloudBillingBudgetsV1LastPeriodAmount
		return ret
	}).(GoogleCloudBillingBudgetsV1LastPeriodAmountOutput)
}

// Describes a budget amount targeted to the last Filter.calendar_period spend. At this time, the amount is automatically 100% of the last calendar period's spend; that is, there are no other options yet. LastPeriodAmount cannot be set for a budget configured with a Filter.custom_period.
type GoogleCloudBillingBudgetsV1LastPeriodAmountResponse struct {
}

// Describes a budget amount targeted to the last Filter.calendar_period spend. At this time, the amount is automatically 100% of the last calendar period's spend; that is, there are no other options yet. LastPeriodAmount cannot be set for a budget configured with a Filter.custom_period.
type GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1LastPeriodAmountResponse)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput() GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput) ToGoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput {
	return o
}

// NotificationsRule defines notifications that are sent based on budget spend and thresholds.
type GoogleCloudBillingBudgetsV1NotificationsRule struct {
	// Optional. When set to true, disables default notifications sent when a threshold is exceeded. Default notifications are sent to those with Billing Account Administrator and Billing Account User IAM roles for the target account.
	DisableDefaultIamRecipients *bool `pulumi:"disableDefaultIamRecipients"`
	// Optional. When set to true, and when the budget has a single project configured, notifications will be sent to project level recipients of that project. This field will be ignored if the budget has multiple or no project configured. Currently, project level recipients are the users with `Owner` role on a cloud project.
	EnableProjectLevelRecipients *bool `pulumi:"enableProjectLevelRecipients"`
	// Optional. Email targets to send notifications to when a threshold is exceeded. This is in addition to the `DefaultIamRecipients` who receive alert emails based on their billing account IAM role. The value is the full REST resource name of a Cloud Monitoring email notification channel with the form `projects/{project_id}/notificationChannels/{channel_id}`. A maximum of 5 email notifications are allowed. To customize budget alert email recipients with monitoring notification channels, you _must create the monitoring notification channels before you link them to a budget_. For guidance on setting up notification channels to use with budgets, see [Customize budget alert email recipients](https://cloud.google.com/billing/docs/how-to/budgets-notification-recipients). For Cloud Billing budget alerts, you _must use email notification channels_. The other types of notification channels are _not_ supported, such as Slack, SMS, or PagerDuty. If you want to [send budget notifications to Slack](https://cloud.google.com/billing/docs/how-to/notify#send_notifications_to_slack), use a pubsubTopic and configure [programmatic notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications).
	MonitoringNotificationChannels []string `pulumi:"monitoringNotificationChannels"`
	// Optional. The name of the Pub/Sub topic where budget-related messages are published, in the form `projects/{project_id}/topics/{topic_id}`. Updates are sent to the topic at regular intervals; the timing of the updates is not dependent on the [threshold rules](#thresholdrule) you've set. Note that if you want your [Pub/Sub JSON object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) to contain data for `alertThresholdExceeded`, you need at least one [alert threshold rule](#thresholdrule). When you set threshold rules, you must also enable at least one of the email notification options, either using the default IAM recipients or Cloud Monitoring email notification channels. To use Pub/Sub topics with budgets, you must do the following: 1. Create the Pub/Sub topic before connecting it to your budget. For guidance, see [Manage programmatic budget alert notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications). 2. Grant the API caller the `pubsub.topics.setIamPolicy` permission on the Pub/Sub topic. If not set, the API call fails with PERMISSION_DENIED. For additional details on Pub/Sub roles and permissions, see [Permissions required for this task](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#permissions_required_for_this_task).
	PubsubTopic *string `pulumi:"pubsubTopic"`
	// Optional. Required when NotificationsRule.pubsub_topic is set. The schema version of the notification sent to NotificationsRule.pubsub_topic. Only "1.0" is accepted. It represents the JSON schema as defined in https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format.
	SchemaVersion *string `pulumi:"schemaVersion"`
}

// GoogleCloudBillingBudgetsV1NotificationsRuleInput is an input type that accepts GoogleCloudBillingBudgetsV1NotificationsRuleArgs and GoogleCloudBillingBudgetsV1NotificationsRuleOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1NotificationsRuleInput` via:
//
//	GoogleCloudBillingBudgetsV1NotificationsRuleArgs{...}
type GoogleCloudBillingBudgetsV1NotificationsRuleInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1NotificationsRuleOutput() GoogleCloudBillingBudgetsV1NotificationsRuleOutput
	ToGoogleCloudBillingBudgetsV1NotificationsRuleOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1NotificationsRuleOutput
}

// NotificationsRule defines notifications that are sent based on budget spend and thresholds.
type GoogleCloudBillingBudgetsV1NotificationsRuleArgs struct {
	// Optional. When set to true, disables default notifications sent when a threshold is exceeded. Default notifications are sent to those with Billing Account Administrator and Billing Account User IAM roles for the target account.
	DisableDefaultIamRecipients pulumi.BoolPtrInput `pulumi:"disableDefaultIamRecipients"`
	// Optional. When set to true, and when the budget has a single project configured, notifications will be sent to project level recipients of that project. This field will be ignored if the budget has multiple or no project configured. Currently, project level recipients are the users with `Owner` role on a cloud project.
	EnableProjectLevelRecipients pulumi.BoolPtrInput `pulumi:"enableProjectLevelRecipients"`
	// Optional. Email targets to send notifications to when a threshold is exceeded. This is in addition to the `DefaultIamRecipients` who receive alert emails based on their billing account IAM role. The value is the full REST resource name of a Cloud Monitoring email notification channel with the form `projects/{project_id}/notificationChannels/{channel_id}`. A maximum of 5 email notifications are allowed. To customize budget alert email recipients with monitoring notification channels, you _must create the monitoring notification channels before you link them to a budget_. For guidance on setting up notification channels to use with budgets, see [Customize budget alert email recipients](https://cloud.google.com/billing/docs/how-to/budgets-notification-recipients). For Cloud Billing budget alerts, you _must use email notification channels_. The other types of notification channels are _not_ supported, such as Slack, SMS, or PagerDuty. If you want to [send budget notifications to Slack](https://cloud.google.com/billing/docs/how-to/notify#send_notifications_to_slack), use a pubsubTopic and configure [programmatic notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications).
	MonitoringNotificationChannels pulumi.StringArrayInput `pulumi:"monitoringNotificationChannels"`
	// Optional. The name of the Pub/Sub topic where budget-related messages are published, in the form `projects/{project_id}/topics/{topic_id}`. Updates are sent to the topic at regular intervals; the timing of the updates is not dependent on the [threshold rules](#thresholdrule) you've set. Note that if you want your [Pub/Sub JSON object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) to contain data for `alertThresholdExceeded`, you need at least one [alert threshold rule](#thresholdrule). When you set threshold rules, you must also enable at least one of the email notification options, either using the default IAM recipients or Cloud Monitoring email notification channels. To use Pub/Sub topics with budgets, you must do the following: 1. Create the Pub/Sub topic before connecting it to your budget. For guidance, see [Manage programmatic budget alert notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications). 2. Grant the API caller the `pubsub.topics.setIamPolicy` permission on the Pub/Sub topic. If not set, the API call fails with PERMISSION_DENIED. For additional details on Pub/Sub roles and permissions, see [Permissions required for this task](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#permissions_required_for_this_task).
	PubsubTopic pulumi.StringPtrInput `pulumi:"pubsubTopic"`
	// Optional. Required when NotificationsRule.pubsub_topic is set. The schema version of the notification sent to NotificationsRule.pubsub_topic. Only "1.0" is accepted. It represents the JSON schema as defined in https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format.
	SchemaVersion pulumi.StringPtrInput `pulumi:"schemaVersion"`
}

func (GoogleCloudBillingBudgetsV1NotificationsRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1NotificationsRule)(nil)).Elem()
}

func (i GoogleCloudBillingBudgetsV1NotificationsRuleArgs) ToGoogleCloudBillingBudgetsV1NotificationsRuleOutput() GoogleCloudBillingBudgetsV1NotificationsRuleOutput {
	return i.ToGoogleCloudBillingBudgetsV1NotificationsRuleOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1NotificationsRuleArgs) ToGoogleCloudBillingBudgetsV1NotificationsRuleOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1NotificationsRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1NotificationsRuleOutput)
}

func (i GoogleCloudBillingBudgetsV1NotificationsRuleArgs) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutput() GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1NotificationsRuleArgs) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1NotificationsRuleOutput).ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(ctx)
}

// GoogleCloudBillingBudgetsV1NotificationsRulePtrInput is an input type that accepts GoogleCloudBillingBudgetsV1NotificationsRuleArgs, GoogleCloudBillingBudgetsV1NotificationsRulePtr and GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1NotificationsRulePtrInput` via:
//
//	        GoogleCloudBillingBudgetsV1NotificationsRuleArgs{...}
//
//	or:
//
//	        nil
type GoogleCloudBillingBudgetsV1NotificationsRulePtrInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutput() GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput
	ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput
}

type googleCloudBillingBudgetsV1NotificationsRulePtrType GoogleCloudBillingBudgetsV1NotificationsRuleArgs

func GoogleCloudBillingBudgetsV1NotificationsRulePtr(v *GoogleCloudBillingBudgetsV1NotificationsRuleArgs) GoogleCloudBillingBudgetsV1NotificationsRulePtrInput {
	return (*googleCloudBillingBudgetsV1NotificationsRulePtrType)(v)
}

func (*googleCloudBillingBudgetsV1NotificationsRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1NotificationsRule)(nil)).Elem()
}

func (i *googleCloudBillingBudgetsV1NotificationsRulePtrType) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutput() GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return i.ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(context.Background())
}

func (i *googleCloudBillingBudgetsV1NotificationsRulePtrType) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput)
}

// NotificationsRule defines notifications that are sent based on budget spend and thresholds.
type GoogleCloudBillingBudgetsV1NotificationsRuleOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1NotificationsRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1NotificationsRule)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) ToGoogleCloudBillingBudgetsV1NotificationsRuleOutput() GoogleCloudBillingBudgetsV1NotificationsRuleOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) ToGoogleCloudBillingBudgetsV1NotificationsRuleOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1NotificationsRuleOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutput() GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return o.ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(context.Background())
}

func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleCloudBillingBudgetsV1NotificationsRule) *GoogleCloudBillingBudgetsV1NotificationsRule {
		return &v
	}).(GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput)
}

// Optional. When set to true, disables default notifications sent when a threshold is exceeded. Default notifications are sent to those with Billing Account Administrator and Billing Account User IAM roles for the target account.
func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) DisableDefaultIamRecipients() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRule) *bool { return v.DisableDefaultIamRecipients }).(pulumi.BoolPtrOutput)
}

// Optional. When set to true, and when the budget has a single project configured, notifications will be sent to project level recipients of that project. This field will be ignored if the budget has multiple or no project configured. Currently, project level recipients are the users with `Owner` role on a cloud project.
func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) EnableProjectLevelRecipients() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRule) *bool { return v.EnableProjectLevelRecipients }).(pulumi.BoolPtrOutput)
}

// Optional. Email targets to send notifications to when a threshold is exceeded. This is in addition to the `DefaultIamRecipients` who receive alert emails based on their billing account IAM role. The value is the full REST resource name of a Cloud Monitoring email notification channel with the form `projects/{project_id}/notificationChannels/{channel_id}`. A maximum of 5 email notifications are allowed. To customize budget alert email recipients with monitoring notification channels, you _must create the monitoring notification channels before you link them to a budget_. For guidance on setting up notification channels to use with budgets, see [Customize budget alert email recipients](https://cloud.google.com/billing/docs/how-to/budgets-notification-recipients). For Cloud Billing budget alerts, you _must use email notification channels_. The other types of notification channels are _not_ supported, such as Slack, SMS, or PagerDuty. If you want to [send budget notifications to Slack](https://cloud.google.com/billing/docs/how-to/notify#send_notifications_to_slack), use a pubsubTopic and configure [programmatic notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications).
func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) MonitoringNotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRule) []string { return v.MonitoringNotificationChannels }).(pulumi.StringArrayOutput)
}

// Optional. The name of the Pub/Sub topic where budget-related messages are published, in the form `projects/{project_id}/topics/{topic_id}`. Updates are sent to the topic at regular intervals; the timing of the updates is not dependent on the [threshold rules](#thresholdrule) you've set. Note that if you want your [Pub/Sub JSON object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) to contain data for `alertThresholdExceeded`, you need at least one [alert threshold rule](#thresholdrule). When you set threshold rules, you must also enable at least one of the email notification options, either using the default IAM recipients or Cloud Monitoring email notification channels. To use Pub/Sub topics with budgets, you must do the following: 1. Create the Pub/Sub topic before connecting it to your budget. For guidance, see [Manage programmatic budget alert notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications). 2. Grant the API caller the `pubsub.topics.setIamPolicy` permission on the Pub/Sub topic. If not set, the API call fails with PERMISSION_DENIED. For additional details on Pub/Sub roles and permissions, see [Permissions required for this task](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#permissions_required_for_this_task).
func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRule) *string { return v.PubsubTopic }).(pulumi.StringPtrOutput)
}

// Optional. Required when NotificationsRule.pubsub_topic is set. The schema version of the notification sent to NotificationsRule.pubsub_topic. Only "1.0" is accepted. It represents the JSON schema as defined in https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format.
func (o GoogleCloudBillingBudgetsV1NotificationsRuleOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRule) *string { return v.SchemaVersion }).(pulumi.StringPtrOutput)
}

type GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleCloudBillingBudgetsV1NotificationsRule)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutput() GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) ToGoogleCloudBillingBudgetsV1NotificationsRulePtrOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) Elem() GoogleCloudBillingBudgetsV1NotificationsRuleOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1NotificationsRule) GoogleCloudBillingBudgetsV1NotificationsRule {
		if v != nil {
			return *v
		}
		var ret GoogleCloudBillingBudgetsV1NotificationsRule
		return ret
	}).(GoogleCloudBillingBudgetsV1NotificationsRuleOutput)
}

// Optional. When set to true, disables default notifications sent when a threshold is exceeded. Default notifications are sent to those with Billing Account Administrator and Billing Account User IAM roles for the target account.
func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) DisableDefaultIamRecipients() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1NotificationsRule) *bool {
		if v == nil {
			return nil
		}
		return v.DisableDefaultIamRecipients
	}).(pulumi.BoolPtrOutput)
}

// Optional. When set to true, and when the budget has a single project configured, notifications will be sent to project level recipients of that project. This field will be ignored if the budget has multiple or no project configured. Currently, project level recipients are the users with `Owner` role on a cloud project.
func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) EnableProjectLevelRecipients() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1NotificationsRule) *bool {
		if v == nil {
			return nil
		}
		return v.EnableProjectLevelRecipients
	}).(pulumi.BoolPtrOutput)
}

// Optional. Email targets to send notifications to when a threshold is exceeded. This is in addition to the `DefaultIamRecipients` who receive alert emails based on their billing account IAM role. The value is the full REST resource name of a Cloud Monitoring email notification channel with the form `projects/{project_id}/notificationChannels/{channel_id}`. A maximum of 5 email notifications are allowed. To customize budget alert email recipients with monitoring notification channels, you _must create the monitoring notification channels before you link them to a budget_. For guidance on setting up notification channels to use with budgets, see [Customize budget alert email recipients](https://cloud.google.com/billing/docs/how-to/budgets-notification-recipients). For Cloud Billing budget alerts, you _must use email notification channels_. The other types of notification channels are _not_ supported, such as Slack, SMS, or PagerDuty. If you want to [send budget notifications to Slack](https://cloud.google.com/billing/docs/how-to/notify#send_notifications_to_slack), use a pubsubTopic and configure [programmatic notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications).
func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) MonitoringNotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1NotificationsRule) []string {
		if v == nil {
			return nil
		}
		return v.MonitoringNotificationChannels
	}).(pulumi.StringArrayOutput)
}

// Optional. The name of the Pub/Sub topic where budget-related messages are published, in the form `projects/{project_id}/topics/{topic_id}`. Updates are sent to the topic at regular intervals; the timing of the updates is not dependent on the [threshold rules](#thresholdrule) you've set. Note that if you want your [Pub/Sub JSON object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) to contain data for `alertThresholdExceeded`, you need at least one [alert threshold rule](#thresholdrule). When you set threshold rules, you must also enable at least one of the email notification options, either using the default IAM recipients or Cloud Monitoring email notification channels. To use Pub/Sub topics with budgets, you must do the following: 1. Create the Pub/Sub topic before connecting it to your budget. For guidance, see [Manage programmatic budget alert notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications). 2. Grant the API caller the `pubsub.topics.setIamPolicy` permission on the Pub/Sub topic. If not set, the API call fails with PERMISSION_DENIED. For additional details on Pub/Sub roles and permissions, see [Permissions required for this task](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#permissions_required_for_this_task).
func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) PubsubTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1NotificationsRule) *string {
		if v == nil {
			return nil
		}
		return v.PubsubTopic
	}).(pulumi.StringPtrOutput)
}

// Optional. Required when NotificationsRule.pubsub_topic is set. The schema version of the notification sent to NotificationsRule.pubsub_topic. Only "1.0" is accepted. It represents the JSON schema as defined in https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format.
func (o GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput) SchemaVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleCloudBillingBudgetsV1NotificationsRule) *string {
		if v == nil {
			return nil
		}
		return v.SchemaVersion
	}).(pulumi.StringPtrOutput)
}

// NotificationsRule defines notifications that are sent based on budget spend and thresholds.
type GoogleCloudBillingBudgetsV1NotificationsRuleResponse struct {
	// Optional. When set to true, disables default notifications sent when a threshold is exceeded. Default notifications are sent to those with Billing Account Administrator and Billing Account User IAM roles for the target account.
	DisableDefaultIamRecipients bool `pulumi:"disableDefaultIamRecipients"`
	// Optional. When set to true, and when the budget has a single project configured, notifications will be sent to project level recipients of that project. This field will be ignored if the budget has multiple or no project configured. Currently, project level recipients are the users with `Owner` role on a cloud project.
	EnableProjectLevelRecipients bool `pulumi:"enableProjectLevelRecipients"`
	// Optional. Email targets to send notifications to when a threshold is exceeded. This is in addition to the `DefaultIamRecipients` who receive alert emails based on their billing account IAM role. The value is the full REST resource name of a Cloud Monitoring email notification channel with the form `projects/{project_id}/notificationChannels/{channel_id}`. A maximum of 5 email notifications are allowed. To customize budget alert email recipients with monitoring notification channels, you _must create the monitoring notification channels before you link them to a budget_. For guidance on setting up notification channels to use with budgets, see [Customize budget alert email recipients](https://cloud.google.com/billing/docs/how-to/budgets-notification-recipients). For Cloud Billing budget alerts, you _must use email notification channels_. The other types of notification channels are _not_ supported, such as Slack, SMS, or PagerDuty. If you want to [send budget notifications to Slack](https://cloud.google.com/billing/docs/how-to/notify#send_notifications_to_slack), use a pubsubTopic and configure [programmatic notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications).
	MonitoringNotificationChannels []string `pulumi:"monitoringNotificationChannels"`
	// Optional. The name of the Pub/Sub topic where budget-related messages are published, in the form `projects/{project_id}/topics/{topic_id}`. Updates are sent to the topic at regular intervals; the timing of the updates is not dependent on the [threshold rules](#thresholdrule) you've set. Note that if you want your [Pub/Sub JSON object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) to contain data for `alertThresholdExceeded`, you need at least one [alert threshold rule](#thresholdrule). When you set threshold rules, you must also enable at least one of the email notification options, either using the default IAM recipients or Cloud Monitoring email notification channels. To use Pub/Sub topics with budgets, you must do the following: 1. Create the Pub/Sub topic before connecting it to your budget. For guidance, see [Manage programmatic budget alert notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications). 2. Grant the API caller the `pubsub.topics.setIamPolicy` permission on the Pub/Sub topic. If not set, the API call fails with PERMISSION_DENIED. For additional details on Pub/Sub roles and permissions, see [Permissions required for this task](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#permissions_required_for_this_task).
	PubsubTopic string `pulumi:"pubsubTopic"`
	// Optional. Required when NotificationsRule.pubsub_topic is set. The schema version of the notification sent to NotificationsRule.pubsub_topic. Only "1.0" is accepted. It represents the JSON schema as defined in https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format.
	SchemaVersion string `pulumi:"schemaVersion"`
}

// NotificationsRule defines notifications that are sent based on budget spend and thresholds.
type GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1NotificationsRuleResponse)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) ToGoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput() GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) ToGoogleCloudBillingBudgetsV1NotificationsRuleResponseOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput {
	return o
}

// Optional. When set to true, disables default notifications sent when a threshold is exceeded. Default notifications are sent to those with Billing Account Administrator and Billing Account User IAM roles for the target account.
func (o GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) DisableDefaultIamRecipients() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRuleResponse) bool {
		return v.DisableDefaultIamRecipients
	}).(pulumi.BoolOutput)
}

// Optional. When set to true, and when the budget has a single project configured, notifications will be sent to project level recipients of that project. This field will be ignored if the budget has multiple or no project configured. Currently, project level recipients are the users with `Owner` role on a cloud project.
func (o GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) EnableProjectLevelRecipients() pulumi.BoolOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRuleResponse) bool {
		return v.EnableProjectLevelRecipients
	}).(pulumi.BoolOutput)
}

// Optional. Email targets to send notifications to when a threshold is exceeded. This is in addition to the `DefaultIamRecipients` who receive alert emails based on their billing account IAM role. The value is the full REST resource name of a Cloud Monitoring email notification channel with the form `projects/{project_id}/notificationChannels/{channel_id}`. A maximum of 5 email notifications are allowed. To customize budget alert email recipients with monitoring notification channels, you _must create the monitoring notification channels before you link them to a budget_. For guidance on setting up notification channels to use with budgets, see [Customize budget alert email recipients](https://cloud.google.com/billing/docs/how-to/budgets-notification-recipients). For Cloud Billing budget alerts, you _must use email notification channels_. The other types of notification channels are _not_ supported, such as Slack, SMS, or PagerDuty. If you want to [send budget notifications to Slack](https://cloud.google.com/billing/docs/how-to/notify#send_notifications_to_slack), use a pubsubTopic and configure [programmatic notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications).
func (o GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) MonitoringNotificationChannels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRuleResponse) []string {
		return v.MonitoringNotificationChannels
	}).(pulumi.StringArrayOutput)
}

// Optional. The name of the Pub/Sub topic where budget-related messages are published, in the form `projects/{project_id}/topics/{topic_id}`. Updates are sent to the topic at regular intervals; the timing of the updates is not dependent on the [threshold rules](#thresholdrule) you've set. Note that if you want your [Pub/Sub JSON object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) to contain data for `alertThresholdExceeded`, you need at least one [alert threshold rule](#thresholdrule). When you set threshold rules, you must also enable at least one of the email notification options, either using the default IAM recipients or Cloud Monitoring email notification channels. To use Pub/Sub topics with budgets, you must do the following: 1. Create the Pub/Sub topic before connecting it to your budget. For guidance, see [Manage programmatic budget alert notifications](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications). 2. Grant the API caller the `pubsub.topics.setIamPolicy` permission on the Pub/Sub topic. If not set, the API call fails with PERMISSION_DENIED. For additional details on Pub/Sub roles and permissions, see [Permissions required for this task](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#permissions_required_for_this_task).
func (o GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) PubsubTopic() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRuleResponse) string { return v.PubsubTopic }).(pulumi.StringOutput)
}

// Optional. Required when NotificationsRule.pubsub_topic is set. The schema version of the notification sent to NotificationsRule.pubsub_topic. Only "1.0" is accepted. It represents the JSON schema as defined in https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format.
func (o GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput) SchemaVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1NotificationsRuleResponse) string { return v.SchemaVersion }).(pulumi.StringOutput)
}

// ThresholdRule contains the definition of a threshold. Threshold rules define the triggering events used to generate a budget notification email. When a threshold is crossed (spend exceeds the specified percentages of the budget), budget alert emails are sent to the email recipients you specify in the [NotificationsRule](#notificationsrule). Threshold rules also affect the fields included in the [JSON data object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) sent to a Pub/Sub topic. Threshold rules are _required_ if using email notifications. Threshold rules are _optional_ if only setting a [`pubsubTopic` NotificationsRule](#NotificationsRule), unless you want your JSON data object to include data about the thresholds you set. For more information, see [set budget threshold rules and actions](https://cloud.google.com/billing/docs/how-to/budgets#budget-actions).
type GoogleCloudBillingBudgetsV1ThresholdRule struct {
	// Optional. The type of basis used to determine if spend has passed the threshold. Behavior defaults to CURRENT_SPEND if not set.
	SpendBasis *GoogleCloudBillingBudgetsV1ThresholdRuleSpendBasis `pulumi:"spendBasis"`
	// Send an alert when this threshold is exceeded. This is a 1.0-based percentage, so 0.5 = 50%. Validation: non-negative number.
	ThresholdPercent float64 `pulumi:"thresholdPercent"`
}

// GoogleCloudBillingBudgetsV1ThresholdRuleInput is an input type that accepts GoogleCloudBillingBudgetsV1ThresholdRuleArgs and GoogleCloudBillingBudgetsV1ThresholdRuleOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1ThresholdRuleInput` via:
//
//	GoogleCloudBillingBudgetsV1ThresholdRuleArgs{...}
type GoogleCloudBillingBudgetsV1ThresholdRuleInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1ThresholdRuleOutput() GoogleCloudBillingBudgetsV1ThresholdRuleOutput
	ToGoogleCloudBillingBudgetsV1ThresholdRuleOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleOutput
}

// ThresholdRule contains the definition of a threshold. Threshold rules define the triggering events used to generate a budget notification email. When a threshold is crossed (spend exceeds the specified percentages of the budget), budget alert emails are sent to the email recipients you specify in the [NotificationsRule](#notificationsrule). Threshold rules also affect the fields included in the [JSON data object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) sent to a Pub/Sub topic. Threshold rules are _required_ if using email notifications. Threshold rules are _optional_ if only setting a [`pubsubTopic` NotificationsRule](#NotificationsRule), unless you want your JSON data object to include data about the thresholds you set. For more information, see [set budget threshold rules and actions](https://cloud.google.com/billing/docs/how-to/budgets#budget-actions).
type GoogleCloudBillingBudgetsV1ThresholdRuleArgs struct {
	// Optional. The type of basis used to determine if spend has passed the threshold. Behavior defaults to CURRENT_SPEND if not set.
	SpendBasis GoogleCloudBillingBudgetsV1ThresholdRuleSpendBasisPtrInput `pulumi:"spendBasis"`
	// Send an alert when this threshold is exceeded. This is a 1.0-based percentage, so 0.5 = 50%. Validation: non-negative number.
	ThresholdPercent pulumi.Float64Input `pulumi:"thresholdPercent"`
}

func (GoogleCloudBillingBudgetsV1ThresholdRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1ThresholdRule)(nil)).Elem()
}

func (i GoogleCloudBillingBudgetsV1ThresholdRuleArgs) ToGoogleCloudBillingBudgetsV1ThresholdRuleOutput() GoogleCloudBillingBudgetsV1ThresholdRuleOutput {
	return i.ToGoogleCloudBillingBudgetsV1ThresholdRuleOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1ThresholdRuleArgs) ToGoogleCloudBillingBudgetsV1ThresholdRuleOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1ThresholdRuleOutput)
}

// GoogleCloudBillingBudgetsV1ThresholdRuleArrayInput is an input type that accepts GoogleCloudBillingBudgetsV1ThresholdRuleArray and GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput values.
// You can construct a concrete instance of `GoogleCloudBillingBudgetsV1ThresholdRuleArrayInput` via:
//
//	GoogleCloudBillingBudgetsV1ThresholdRuleArray{ GoogleCloudBillingBudgetsV1ThresholdRuleArgs{...} }
type GoogleCloudBillingBudgetsV1ThresholdRuleArrayInput interface {
	pulumi.Input

	ToGoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput() GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput
	ToGoogleCloudBillingBudgetsV1ThresholdRuleArrayOutputWithContext(context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput
}

type GoogleCloudBillingBudgetsV1ThresholdRuleArray []GoogleCloudBillingBudgetsV1ThresholdRuleInput

func (GoogleCloudBillingBudgetsV1ThresholdRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBillingBudgetsV1ThresholdRule)(nil)).Elem()
}

func (i GoogleCloudBillingBudgetsV1ThresholdRuleArray) ToGoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput() GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput {
	return i.ToGoogleCloudBillingBudgetsV1ThresholdRuleArrayOutputWithContext(context.Background())
}

func (i GoogleCloudBillingBudgetsV1ThresholdRuleArray) ToGoogleCloudBillingBudgetsV1ThresholdRuleArrayOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput)
}

// ThresholdRule contains the definition of a threshold. Threshold rules define the triggering events used to generate a budget notification email. When a threshold is crossed (spend exceeds the specified percentages of the budget), budget alert emails are sent to the email recipients you specify in the [NotificationsRule](#notificationsrule). Threshold rules also affect the fields included in the [JSON data object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) sent to a Pub/Sub topic. Threshold rules are _required_ if using email notifications. Threshold rules are _optional_ if only setting a [`pubsubTopic` NotificationsRule](#NotificationsRule), unless you want your JSON data object to include data about the thresholds you set. For more information, see [set budget threshold rules and actions](https://cloud.google.com/billing/docs/how-to/budgets#budget-actions).
type GoogleCloudBillingBudgetsV1ThresholdRuleOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1ThresholdRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1ThresholdRule)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleOutput() GoogleCloudBillingBudgetsV1ThresholdRuleOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleOutput {
	return o
}

// Optional. The type of basis used to determine if spend has passed the threshold. Behavior defaults to CURRENT_SPEND if not set.
func (o GoogleCloudBillingBudgetsV1ThresholdRuleOutput) SpendBasis() GoogleCloudBillingBudgetsV1ThresholdRuleSpendBasisPtrOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1ThresholdRule) *GoogleCloudBillingBudgetsV1ThresholdRuleSpendBasis {
		return v.SpendBasis
	}).(GoogleCloudBillingBudgetsV1ThresholdRuleSpendBasisPtrOutput)
}

// Send an alert when this threshold is exceeded. This is a 1.0-based percentage, so 0.5 = 50%. Validation: non-negative number.
func (o GoogleCloudBillingBudgetsV1ThresholdRuleOutput) ThresholdPercent() pulumi.Float64Output {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1ThresholdRule) float64 { return v.ThresholdPercent }).(pulumi.Float64Output)
}

type GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBillingBudgetsV1ThresholdRule)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput() GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleArrayOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput) Index(i pulumi.IntInput) GoogleCloudBillingBudgetsV1ThresholdRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudBillingBudgetsV1ThresholdRule {
		return vs[0].([]GoogleCloudBillingBudgetsV1ThresholdRule)[vs[1].(int)]
	}).(GoogleCloudBillingBudgetsV1ThresholdRuleOutput)
}

// ThresholdRule contains the definition of a threshold. Threshold rules define the triggering events used to generate a budget notification email. When a threshold is crossed (spend exceeds the specified percentages of the budget), budget alert emails are sent to the email recipients you specify in the [NotificationsRule](#notificationsrule). Threshold rules also affect the fields included in the [JSON data object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) sent to a Pub/Sub topic. Threshold rules are _required_ if using email notifications. Threshold rules are _optional_ if only setting a [`pubsubTopic` NotificationsRule](#NotificationsRule), unless you want your JSON data object to include data about the thresholds you set. For more information, see [set budget threshold rules and actions](https://cloud.google.com/billing/docs/how-to/budgets#budget-actions).
type GoogleCloudBillingBudgetsV1ThresholdRuleResponse struct {
	// Optional. The type of basis used to determine if spend has passed the threshold. Behavior defaults to CURRENT_SPEND if not set.
	SpendBasis string `pulumi:"spendBasis"`
	// Send an alert when this threshold is exceeded. This is a 1.0-based percentage, so 0.5 = 50%. Validation: non-negative number.
	ThresholdPercent float64 `pulumi:"thresholdPercent"`
}

// ThresholdRule contains the definition of a threshold. Threshold rules define the triggering events used to generate a budget notification email. When a threshold is crossed (spend exceeds the specified percentages of the budget), budget alert emails are sent to the email recipients you specify in the [NotificationsRule](#notificationsrule). Threshold rules also affect the fields included in the [JSON data object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) sent to a Pub/Sub topic. Threshold rules are _required_ if using email notifications. Threshold rules are _optional_ if only setting a [`pubsubTopic` NotificationsRule](#NotificationsRule), unless you want your JSON data object to include data about the thresholds you set. For more information, see [set budget threshold rules and actions](https://cloud.google.com/billing/docs/how-to/budgets#budget-actions).
type GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleCloudBillingBudgetsV1ThresholdRuleResponse)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput() GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleResponseOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput {
	return o
}

// Optional. The type of basis used to determine if spend has passed the threshold. Behavior defaults to CURRENT_SPEND if not set.
func (o GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput) SpendBasis() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1ThresholdRuleResponse) string { return v.SpendBasis }).(pulumi.StringOutput)
}

// Send an alert when this threshold is exceeded. This is a 1.0-based percentage, so 0.5 = 50%. Validation: non-negative number.
func (o GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput) ThresholdPercent() pulumi.Float64Output {
	return o.ApplyT(func(v GoogleCloudBillingBudgetsV1ThresholdRuleResponse) float64 { return v.ThresholdPercent }).(pulumi.Float64Output)
}

type GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput struct{ *pulumi.OutputState }

func (GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoogleCloudBillingBudgetsV1ThresholdRuleResponse)(nil)).Elem()
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput() GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput) ToGoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutputWithContext(ctx context.Context) GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput {
	return o
}

func (o GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput) Index(i pulumi.IntInput) GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoogleCloudBillingBudgetsV1ThresholdRuleResponse {
		return vs[0].([]GoogleCloudBillingBudgetsV1ThresholdRuleResponse)[vs[1].(int)]
	}).(GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDate struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day *int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month *int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year *int `pulumi:"year"`
}

// GoogleTypeDateInput is an input type that accepts GoogleTypeDateArgs and GoogleTypeDateOutput values.
// You can construct a concrete instance of `GoogleTypeDateInput` via:
//
//	GoogleTypeDateArgs{...}
type GoogleTypeDateInput interface {
	pulumi.Input

	ToGoogleTypeDateOutput() GoogleTypeDateOutput
	ToGoogleTypeDateOutputWithContext(context.Context) GoogleTypeDateOutput
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateArgs struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day pulumi.IntPtrInput `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month pulumi.IntPtrInput `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year pulumi.IntPtrInput `pulumi:"year"`
}

func (GoogleTypeDateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDate)(nil)).Elem()
}

func (i GoogleTypeDateArgs) ToGoogleTypeDateOutput() GoogleTypeDateOutput {
	return i.ToGoogleTypeDateOutputWithContext(context.Background())
}

func (i GoogleTypeDateArgs) ToGoogleTypeDateOutputWithContext(ctx context.Context) GoogleTypeDateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDateOutput)
}

func (i GoogleTypeDateArgs) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return i.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (i GoogleTypeDateArgs) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDateOutput).ToGoogleTypeDatePtrOutputWithContext(ctx)
}

// GoogleTypeDatePtrInput is an input type that accepts GoogleTypeDateArgs, GoogleTypeDatePtr and GoogleTypeDatePtrOutput values.
// You can construct a concrete instance of `GoogleTypeDatePtrInput` via:
//
//	        GoogleTypeDateArgs{...}
//
//	or:
//
//	        nil
type GoogleTypeDatePtrInput interface {
	pulumi.Input

	ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput
	ToGoogleTypeDatePtrOutputWithContext(context.Context) GoogleTypeDatePtrOutput
}

type googleTypeDatePtrType GoogleTypeDateArgs

func GoogleTypeDatePtr(v *GoogleTypeDateArgs) GoogleTypeDatePtrInput {
	return (*googleTypeDatePtrType)(v)
}

func (*googleTypeDatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeDate)(nil)).Elem()
}

func (i *googleTypeDatePtrType) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return i.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (i *googleTypeDatePtrType) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeDatePtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateOutput struct{ *pulumi.OutputState }

func (GoogleTypeDateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDate)(nil)).Elem()
}

func (o GoogleTypeDateOutput) ToGoogleTypeDateOutput() GoogleTypeDateOutput {
	return o
}

func (o GoogleTypeDateOutput) ToGoogleTypeDateOutputWithContext(ctx context.Context) GoogleTypeDateOutput {
	return o
}

func (o GoogleTypeDateOutput) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return o.ToGoogleTypeDatePtrOutputWithContext(context.Background())
}

func (o GoogleTypeDateOutput) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleTypeDate) *GoogleTypeDate {
		return &v
	}).(GoogleTypeDatePtrOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDateOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Day }).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDateOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Month }).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDateOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeDate) *int { return v.Year }).(pulumi.IntPtrOutput)
}

type GoogleTypeDatePtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeDatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeDate)(nil)).Elem()
}

func (o GoogleTypeDatePtrOutput) ToGoogleTypeDatePtrOutput() GoogleTypeDatePtrOutput {
	return o
}

func (o GoogleTypeDatePtrOutput) ToGoogleTypeDatePtrOutputWithContext(ctx context.Context) GoogleTypeDatePtrOutput {
	return o
}

func (o GoogleTypeDatePtrOutput) Elem() GoogleTypeDateOutput {
	return o.ApplyT(func(v *GoogleTypeDate) GoogleTypeDate {
		if v != nil {
			return *v
		}
		var ret GoogleTypeDate
		return ret
	}).(GoogleTypeDateOutput)
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDatePtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.IntPtrOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDatePtrOutput) Month() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Month
	}).(pulumi.IntPtrOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDatePtrOutput) Year() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeDate) *int {
		if v == nil {
			return nil
		}
		return v.Year
	}).(pulumi.IntPtrOutput)
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateResponse struct {
	// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
	Day int `pulumi:"day"`
	// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
	Month int `pulumi:"month"`
	// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
	Year int `pulumi:"year"`
}

// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
type GoogleTypeDateResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeDateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeDateResponse)(nil)).Elem()
}

func (o GoogleTypeDateResponseOutput) ToGoogleTypeDateResponseOutput() GoogleTypeDateResponseOutput {
	return o
}

func (o GoogleTypeDateResponseOutput) ToGoogleTypeDateResponseOutputWithContext(ctx context.Context) GoogleTypeDateResponseOutput {
	return o
}

// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
func (o GoogleTypeDateResponseOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeDateResponse) int { return v.Day }).(pulumi.IntOutput)
}

// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
func (o GoogleTypeDateResponseOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeDateResponse) int { return v.Month }).(pulumi.IntOutput)
}

// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
func (o GoogleTypeDateResponseOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeDateResponse) int { return v.Year }).(pulumi.IntOutput)
}

// Represents an amount of money with its currency type.
type GoogleTypeMoney struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode *string `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos *int `pulumi:"nanos"`
	// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units *string `pulumi:"units"`
}

// GoogleTypeMoneyInput is an input type that accepts GoogleTypeMoneyArgs and GoogleTypeMoneyOutput values.
// You can construct a concrete instance of `GoogleTypeMoneyInput` via:
//
//	GoogleTypeMoneyArgs{...}
type GoogleTypeMoneyInput interface {
	pulumi.Input

	ToGoogleTypeMoneyOutput() GoogleTypeMoneyOutput
	ToGoogleTypeMoneyOutputWithContext(context.Context) GoogleTypeMoneyOutput
}

// Represents an amount of money with its currency type.
type GoogleTypeMoneyArgs struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode pulumi.StringPtrInput `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos pulumi.IntPtrInput `pulumi:"nanos"`
	// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units pulumi.StringPtrInput `pulumi:"units"`
}

func (GoogleTypeMoneyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeMoney)(nil)).Elem()
}

func (i GoogleTypeMoneyArgs) ToGoogleTypeMoneyOutput() GoogleTypeMoneyOutput {
	return i.ToGoogleTypeMoneyOutputWithContext(context.Background())
}

func (i GoogleTypeMoneyArgs) ToGoogleTypeMoneyOutputWithContext(ctx context.Context) GoogleTypeMoneyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeMoneyOutput)
}

func (i GoogleTypeMoneyArgs) ToGoogleTypeMoneyPtrOutput() GoogleTypeMoneyPtrOutput {
	return i.ToGoogleTypeMoneyPtrOutputWithContext(context.Background())
}

func (i GoogleTypeMoneyArgs) ToGoogleTypeMoneyPtrOutputWithContext(ctx context.Context) GoogleTypeMoneyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeMoneyOutput).ToGoogleTypeMoneyPtrOutputWithContext(ctx)
}

// GoogleTypeMoneyPtrInput is an input type that accepts GoogleTypeMoneyArgs, GoogleTypeMoneyPtr and GoogleTypeMoneyPtrOutput values.
// You can construct a concrete instance of `GoogleTypeMoneyPtrInput` via:
//
//	        GoogleTypeMoneyArgs{...}
//
//	or:
//
//	        nil
type GoogleTypeMoneyPtrInput interface {
	pulumi.Input

	ToGoogleTypeMoneyPtrOutput() GoogleTypeMoneyPtrOutput
	ToGoogleTypeMoneyPtrOutputWithContext(context.Context) GoogleTypeMoneyPtrOutput
}

type googleTypeMoneyPtrType GoogleTypeMoneyArgs

func GoogleTypeMoneyPtr(v *GoogleTypeMoneyArgs) GoogleTypeMoneyPtrInput {
	return (*googleTypeMoneyPtrType)(v)
}

func (*googleTypeMoneyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeMoney)(nil)).Elem()
}

func (i *googleTypeMoneyPtrType) ToGoogleTypeMoneyPtrOutput() GoogleTypeMoneyPtrOutput {
	return i.ToGoogleTypeMoneyPtrOutputWithContext(context.Background())
}

func (i *googleTypeMoneyPtrType) ToGoogleTypeMoneyPtrOutputWithContext(ctx context.Context) GoogleTypeMoneyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleTypeMoneyPtrOutput)
}

// Represents an amount of money with its currency type.
type GoogleTypeMoneyOutput struct{ *pulumi.OutputState }

func (GoogleTypeMoneyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeMoney)(nil)).Elem()
}

func (o GoogleTypeMoneyOutput) ToGoogleTypeMoneyOutput() GoogleTypeMoneyOutput {
	return o
}

func (o GoogleTypeMoneyOutput) ToGoogleTypeMoneyOutputWithContext(ctx context.Context) GoogleTypeMoneyOutput {
	return o
}

func (o GoogleTypeMoneyOutput) ToGoogleTypeMoneyPtrOutput() GoogleTypeMoneyPtrOutput {
	return o.ToGoogleTypeMoneyPtrOutputWithContext(context.Background())
}

func (o GoogleTypeMoneyOutput) ToGoogleTypeMoneyPtrOutputWithContext(ctx context.Context) GoogleTypeMoneyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleTypeMoney) *GoogleTypeMoney {
		return &v
	}).(GoogleTypeMoneyPtrOutput)
}

// The three-letter currency code defined in ISO 4217.
func (o GoogleTypeMoneyOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeMoney) *string { return v.CurrencyCode }).(pulumi.StringPtrOutput)
}

// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
func (o GoogleTypeMoneyOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GoogleTypeMoney) *int { return v.Nanos }).(pulumi.IntPtrOutput)
}

// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
func (o GoogleTypeMoneyOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleTypeMoney) *string { return v.Units }).(pulumi.StringPtrOutput)
}

type GoogleTypeMoneyPtrOutput struct{ *pulumi.OutputState }

func (GoogleTypeMoneyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleTypeMoney)(nil)).Elem()
}

func (o GoogleTypeMoneyPtrOutput) ToGoogleTypeMoneyPtrOutput() GoogleTypeMoneyPtrOutput {
	return o
}

func (o GoogleTypeMoneyPtrOutput) ToGoogleTypeMoneyPtrOutputWithContext(ctx context.Context) GoogleTypeMoneyPtrOutput {
	return o
}

func (o GoogleTypeMoneyPtrOutput) Elem() GoogleTypeMoneyOutput {
	return o.ApplyT(func(v *GoogleTypeMoney) GoogleTypeMoney {
		if v != nil {
			return *v
		}
		var ret GoogleTypeMoney
		return ret
	}).(GoogleTypeMoneyOutput)
}

// The three-letter currency code defined in ISO 4217.
func (o GoogleTypeMoneyPtrOutput) CurrencyCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeMoney) *string {
		if v == nil {
			return nil
		}
		return v.CurrencyCode
	}).(pulumi.StringPtrOutput)
}

// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
func (o GoogleTypeMoneyPtrOutput) Nanos() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GoogleTypeMoney) *int {
		if v == nil {
			return nil
		}
		return v.Nanos
	}).(pulumi.IntPtrOutput)
}

// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
func (o GoogleTypeMoneyPtrOutput) Units() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleTypeMoney) *string {
		if v == nil {
			return nil
		}
		return v.Units
	}).(pulumi.StringPtrOutput)
}

// Represents an amount of money with its currency type.
type GoogleTypeMoneyResponse struct {
	// The three-letter currency code defined in ISO 4217.
	CurrencyCode string `pulumi:"currencyCode"`
	// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
	Nanos int `pulumi:"nanos"`
	// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
	Units string `pulumi:"units"`
}

// Represents an amount of money with its currency type.
type GoogleTypeMoneyResponseOutput struct{ *pulumi.OutputState }

func (GoogleTypeMoneyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleTypeMoneyResponse)(nil)).Elem()
}

func (o GoogleTypeMoneyResponseOutput) ToGoogleTypeMoneyResponseOutput() GoogleTypeMoneyResponseOutput {
	return o
}

func (o GoogleTypeMoneyResponseOutput) ToGoogleTypeMoneyResponseOutputWithContext(ctx context.Context) GoogleTypeMoneyResponseOutput {
	return o
}

// The three-letter currency code defined in ISO 4217.
func (o GoogleTypeMoneyResponseOutput) CurrencyCode() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeMoneyResponse) string { return v.CurrencyCode }).(pulumi.StringOutput)
}

// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
func (o GoogleTypeMoneyResponseOutput) Nanos() pulumi.IntOutput {
	return o.ApplyT(func(v GoogleTypeMoneyResponse) int { return v.Nanos }).(pulumi.IntOutput)
}

// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
func (o GoogleTypeMoneyResponseOutput) Units() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleTypeMoneyResponse) string { return v.Units }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1BudgetAmountInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1BudgetAmountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1CustomPeriodInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1CustomPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1CustomPeriodPtrInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1CustomPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1FilterInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1FilterPtrInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1FilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1LastPeriodAmountInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1LastPeriodAmountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1LastPeriodAmountPtrInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1LastPeriodAmountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1NotificationsRuleInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1NotificationsRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1NotificationsRulePtrInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1NotificationsRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1ThresholdRuleInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1ThresholdRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleCloudBillingBudgetsV1ThresholdRuleArrayInput)(nil)).Elem(), GoogleCloudBillingBudgetsV1ThresholdRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeDateInput)(nil)).Elem(), GoogleTypeDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeDatePtrInput)(nil)).Elem(), GoogleTypeDateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeMoneyInput)(nil)).Elem(), GoogleTypeMoneyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleTypeMoneyPtrInput)(nil)).Elem(), GoogleTypeMoneyArgs{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1BudgetAmountOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1BudgetAmountResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1CustomPeriodOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1CustomPeriodPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1CustomPeriodResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1FilterOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1FilterPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1FilterResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1LastPeriodAmountOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1LastPeriodAmountPtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1LastPeriodAmountResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1NotificationsRuleOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1NotificationsRulePtrOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1NotificationsRuleResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1ThresholdRuleOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1ThresholdRuleArrayOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1ThresholdRuleResponseOutput{})
	pulumi.RegisterOutputType(GoogleCloudBillingBudgetsV1ThresholdRuleResponseArrayOutput{})
	pulumi.RegisterOutputType(GoogleTypeDateOutput{})
	pulumi.RegisterOutputType(GoogleTypeDatePtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeDateResponseOutput{})
	pulumi.RegisterOutputType(GoogleTypeMoneyOutput{})
	pulumi.RegisterOutputType(GoogleTypeMoneyPtrOutput{})
	pulumi.RegisterOutputType(GoogleTypeMoneyResponseOutput{})
}
