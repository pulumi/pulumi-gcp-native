// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new session. A session can be used to perform transactions that read and/or modify data in a Cloud Spanner database. Sessions are meant to be reused for many consecutive transactions. Sessions can only execute one transaction at a time. To execute multiple concurrent read-write/write-only transactions, create multiple sessions. Note that standalone reads and queries use a transaction internally, and count toward the one transaction limit. Active sessions use additional server resources, so it is a good idea to delete idle and unneeded sessions. Aside from explicit deletes, Cloud Spanner may delete sessions for which no operations are sent for more than an hour. If a session is deleted, requests to it return `NOT_FOUND`. Idle sessions can be kept alive by sending a trivial SQL query periodically, e.g., `"SELECT 1"`.
// Auto-naming is currently not supported for this resource.
type Session struct {
	pulumi.CustomResourceState

	// The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.
	ApproximateLastUseTime pulumi.StringOutput `pulumi:"approximateLastUseTime"`
	// The timestamp when the session is created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The database role which created this session.
	CreatorRole pulumi.StringOutput `pulumi:"creatorRole"`
	DatabaseId  pulumi.StringOutput `pulumi:"databaseId"`
	InstanceId  pulumi.StringOutput `pulumi:"instanceId"`
	// The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the session. This is always system-assigned.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewSession registers a new resource with the given unique name, arguments, and options.
func NewSession(ctx *pulumi.Context,
	name string, args *SessionArgs, opts ...pulumi.ResourceOption) (*Session, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"databaseId",
		"instanceId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Session
	err := ctx.RegisterResource("google-native:spanner/v1:Session", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSession gets an existing Session resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SessionState, opts ...pulumi.ResourceOption) (*Session, error) {
	var resource Session
	err := ctx.ReadResource("google-native:spanner/v1:Session", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Session resources.
type sessionState struct {
}

type SessionState struct {
}

func (SessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionState)(nil)).Elem()
}

type sessionArgs struct {
	// The database role which created this session.
	CreatorRole *string `pulumi:"creatorRole"`
	DatabaseId  string  `pulumi:"databaseId"`
	InstanceId  string  `pulumi:"instanceId"`
	// The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
	Labels  map[string]string `pulumi:"labels"`
	Project *string           `pulumi:"project"`
}

// The set of arguments for constructing a Session resource.
type SessionArgs struct {
	// The database role which created this session.
	CreatorRole pulumi.StringPtrInput
	DatabaseId  pulumi.StringInput
	InstanceId  pulumi.StringInput
	// The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
	Labels  pulumi.StringMapInput
	Project pulumi.StringPtrInput
}

func (SessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sessionArgs)(nil)).Elem()
}

type SessionInput interface {
	pulumi.Input

	ToSessionOutput() SessionOutput
	ToSessionOutputWithContext(ctx context.Context) SessionOutput
}

func (*Session) ElementType() reflect.Type {
	return reflect.TypeOf((**Session)(nil)).Elem()
}

func (i *Session) ToSessionOutput() SessionOutput {
	return i.ToSessionOutputWithContext(context.Background())
}

func (i *Session) ToSessionOutputWithContext(ctx context.Context) SessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SessionOutput)
}

func (i *Session) ToOutput(ctx context.Context) pulumix.Output[*Session] {
	return pulumix.Output[*Session]{
		OutputState: i.ToSessionOutputWithContext(ctx).OutputState,
	}
}

type SessionOutput struct{ *pulumi.OutputState }

func (SessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Session)(nil)).Elem()
}

func (o SessionOutput) ToSessionOutput() SessionOutput {
	return o
}

func (o SessionOutput) ToSessionOutputWithContext(ctx context.Context) SessionOutput {
	return o
}

func (o SessionOutput) ToOutput(ctx context.Context) pulumix.Output[*Session] {
	return pulumix.Output[*Session]{
		OutputState: o.OutputState,
	}
}

// The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.
func (o SessionOutput) ApproximateLastUseTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.ApproximateLastUseTime }).(pulumi.StringOutput)
}

// The timestamp when the session is created.
func (o SessionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The database role which created this session.
func (o SessionOutput) CreatorRole() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.CreatorRole }).(pulumi.StringOutput)
}

func (o SessionOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

func (o SessionOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
func (o SessionOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Session) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the session. This is always system-assigned.
func (o SessionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SessionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Session) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SessionInput)(nil)).Elem(), &Session{})
	pulumi.RegisterOutputType(SessionOutput{})
}
