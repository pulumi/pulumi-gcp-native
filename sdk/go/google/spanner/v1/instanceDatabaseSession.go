// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new session. A session can be used to perform transactions that read and/or modify data in a Cloud Spanner database. Sessions are meant to be reused for many consecutive transactions. Sessions can only execute one transaction at a time. To execute multiple concurrent read-write/write-only transactions, create multiple sessions. Note that standalone reads and queries use a transaction internally, and count toward the one transaction limit. Active sessions use additional server resources, so it is a good idea to delete idle and unneeded sessions. Aside from explicit deletes, Cloud Spanner may delete sessions for which no operations are sent for more than an hour. If a session is deleted, requests to it return `NOT_FOUND`. Idle sessions can be kept alive by sending a trivial SQL query periodically, e.g., `"SELECT 1"`.
type InstanceDatabaseSession struct {
	pulumi.CustomResourceState

	// The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.
	ApproximateLastUseTime pulumi.StringOutput `pulumi:"approximateLastUseTime"`
	// The timestamp when the session is created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the session. This is always system-assigned.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewInstanceDatabaseSession registers a new resource with the given unique name, arguments, and options.
func NewInstanceDatabaseSession(ctx *pulumi.Context,
	name string, args *InstanceDatabaseSessionArgs, opts ...pulumi.ResourceOption) (*InstanceDatabaseSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabasesId == nil {
		return nil, errors.New("invalid value for required argument 'DatabasesId'")
	}
	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.SessionsId == nil {
		return nil, errors.New("invalid value for required argument 'SessionsId'")
	}
	var resource InstanceDatabaseSession
	err := ctx.RegisterResource("google-cloud:spanner/v1:InstanceDatabaseSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceDatabaseSession gets an existing InstanceDatabaseSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceDatabaseSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceDatabaseSessionState, opts ...pulumi.ResourceOption) (*InstanceDatabaseSession, error) {
	var resource InstanceDatabaseSession
	err := ctx.ReadResource("google-cloud:spanner/v1:InstanceDatabaseSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceDatabaseSession resources.
type instanceDatabaseSessionState struct {
	// The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.
	ApproximateLastUseTime *string `pulumi:"approximateLastUseTime"`
	// The timestamp when the session is created.
	CreateTime *string `pulumi:"createTime"`
	// The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
	Labels map[string]string `pulumi:"labels"`
	// The name of the session. This is always system-assigned.
	Name *string `pulumi:"name"`
}

type InstanceDatabaseSessionState struct {
	// The approximate timestamp when the session is last used. It is typically earlier than the actual last use time.
	ApproximateLastUseTime pulumi.StringPtrInput
	// The timestamp when the session is created.
	CreateTime pulumi.StringPtrInput
	// The labels for the session. * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. * No more than 64 labels can be associated with a given session. See https://goo.gl/xmQnxf for more information on and examples of labels.
	Labels pulumi.StringMapInput
	// The name of the session. This is always system-assigned.
	Name pulumi.StringPtrInput
}

func (InstanceDatabaseSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDatabaseSessionState)(nil)).Elem()
}

type instanceDatabaseSessionArgs struct {
	DatabasesId string `pulumi:"databasesId"`
	InstancesId string `pulumi:"instancesId"`
	ProjectsId  string `pulumi:"projectsId"`
	// Required. The session to create.
	Session    *Session `pulumi:"session"`
	SessionsId string   `pulumi:"sessionsId"`
}

// The set of arguments for constructing a InstanceDatabaseSession resource.
type InstanceDatabaseSessionArgs struct {
	DatabasesId pulumi.StringInput
	InstancesId pulumi.StringInput
	ProjectsId  pulumi.StringInput
	// Required. The session to create.
	Session    SessionPtrInput
	SessionsId pulumi.StringInput
}

func (InstanceDatabaseSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDatabaseSessionArgs)(nil)).Elem()
}

type InstanceDatabaseSessionInput interface {
	pulumi.Input

	ToInstanceDatabaseSessionOutput() InstanceDatabaseSessionOutput
	ToInstanceDatabaseSessionOutputWithContext(ctx context.Context) InstanceDatabaseSessionOutput
}

func (*InstanceDatabaseSession) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabaseSession)(nil))
}

func (i *InstanceDatabaseSession) ToInstanceDatabaseSessionOutput() InstanceDatabaseSessionOutput {
	return i.ToInstanceDatabaseSessionOutputWithContext(context.Background())
}

func (i *InstanceDatabaseSession) ToInstanceDatabaseSessionOutputWithContext(ctx context.Context) InstanceDatabaseSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatabaseSessionOutput)
}

type InstanceDatabaseSessionOutput struct {
	*pulumi.OutputState
}

func (InstanceDatabaseSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabaseSession)(nil))
}

func (o InstanceDatabaseSessionOutput) ToInstanceDatabaseSessionOutput() InstanceDatabaseSessionOutput {
	return o
}

func (o InstanceDatabaseSessionOutput) ToInstanceDatabaseSessionOutputWithContext(ctx context.Context) InstanceDatabaseSessionOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceDatabaseSessionOutput{})
}
