// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on a database or backup resource. Replaces any existing policy. Authorization requires `spanner.databases.setIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.setIamPolicy` permission on resource.
type InstanceDatabaseIamPolicy struct {
	pulumi.CustomResourceState
}

// NewInstanceDatabaseIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewInstanceDatabaseIamPolicy(ctx *pulumi.Context,
	name string, args *InstanceDatabaseIamPolicyArgs, opts ...pulumi.ResourceOption) (*InstanceDatabaseIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabasesId == nil {
		return nil, errors.New("invalid value for required argument 'DatabasesId'")
	}
	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource InstanceDatabaseIamPolicy
	err := ctx.RegisterResource("google-cloud:spanner/v1:InstanceDatabaseIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceDatabaseIamPolicy gets an existing InstanceDatabaseIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceDatabaseIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceDatabaseIamPolicyState, opts ...pulumi.ResourceOption) (*InstanceDatabaseIamPolicy, error) {
	var resource InstanceDatabaseIamPolicy
	err := ctx.ReadResource("google-cloud:spanner/v1:InstanceDatabaseIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceDatabaseIamPolicy resources.
type instanceDatabaseIamPolicyState struct {
}

type InstanceDatabaseIamPolicyState struct {
}

func (InstanceDatabaseIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDatabaseIamPolicyState)(nil)).Elem()
}

type instanceDatabaseIamPolicyArgs struct {
	DatabasesId string `pulumi:"databasesId"`
	InstancesId string `pulumi:"instancesId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
}

// The set of arguments for constructing a InstanceDatabaseIamPolicy resource.
type InstanceDatabaseIamPolicyArgs struct {
	DatabasesId pulumi.StringInput
	InstancesId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
}

func (InstanceDatabaseIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDatabaseIamPolicyArgs)(nil)).Elem()
}

type InstanceDatabaseIamPolicyInput interface {
	pulumi.Input

	ToInstanceDatabaseIamPolicyOutput() InstanceDatabaseIamPolicyOutput
	ToInstanceDatabaseIamPolicyOutputWithContext(ctx context.Context) InstanceDatabaseIamPolicyOutput
}

func (*InstanceDatabaseIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabaseIamPolicy)(nil))
}

func (i *InstanceDatabaseIamPolicy) ToInstanceDatabaseIamPolicyOutput() InstanceDatabaseIamPolicyOutput {
	return i.ToInstanceDatabaseIamPolicyOutputWithContext(context.Background())
}

func (i *InstanceDatabaseIamPolicy) ToInstanceDatabaseIamPolicyOutputWithContext(ctx context.Context) InstanceDatabaseIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatabaseIamPolicyOutput)
}

type InstanceDatabaseIamPolicyOutput struct {
	*pulumi.OutputState
}

func (InstanceDatabaseIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabaseIamPolicy)(nil))
}

func (o InstanceDatabaseIamPolicyOutput) ToInstanceDatabaseIamPolicyOutput() InstanceDatabaseIamPolicyOutput {
	return o
}

func (o InstanceDatabaseIamPolicyOutput) ToInstanceDatabaseIamPolicyOutputWithContext(ctx context.Context) InstanceDatabaseIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceDatabaseIamPolicyOutput{})
}
