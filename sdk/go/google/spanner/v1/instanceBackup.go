// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Starts creating a new Cloud Spanner Backup. The returned backup long-running operation will have a name of the format `projects//instances//backups//operations/` and can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup. There can be only one pending backup creation per database. Backup creation of different databases can run concurrently.
type InstanceBackup struct {
	pulumi.CustomResourceState

	// The time the CreateBackup request is received. If the request does not specify `version_time`, the `version_time` of the backup will be equivalent to the `create_time`.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.
	Database pulumi.StringOutput `pulumi:"database"`
	// The encryption information for the backup.
	EncryptionInfo EncryptionInfoResponseOutput `pulumi:"encryptionInfo"`
	// Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The names of the restored databases that reference the backup. The database names are of the form `projects//instances//databases/`. Referencing databases may exist in different instances. The existence of any referencing database prevents the backup from being deleted. When a restored database from the backup enters the `READY` state, the reference to the backup is removed.
	ReferencingDatabases pulumi.StringArrayOutput `pulumi:"referencingDatabases"`
	// Size of the backup in bytes.
	SizeBytes pulumi.StringOutput `pulumi:"sizeBytes"`
	// The current state of the backup.
	State pulumi.StringOutput `pulumi:"state"`
	// The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.
	VersionTime pulumi.StringOutput `pulumi:"versionTime"`
}

// NewInstanceBackup registers a new resource with the given unique name, arguments, and options.
func NewInstanceBackup(ctx *pulumi.Context,
	name string, args *InstanceBackupArgs, opts ...pulumi.ResourceOption) (*InstanceBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupId == nil {
		return nil, errors.New("invalid value for required argument 'BackupId'")
	}
	if args.BackupsId == nil {
		return nil, errors.New("invalid value for required argument 'BackupsId'")
	}
	if args.EncryptionConfigEncryptionType == nil {
		return nil, errors.New("invalid value for required argument 'EncryptionConfigEncryptionType'")
	}
	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource InstanceBackup
	err := ctx.RegisterResource("google-native:spanner/v1:InstanceBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceBackup gets an existing InstanceBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceBackupState, opts ...pulumi.ResourceOption) (*InstanceBackup, error) {
	var resource InstanceBackup
	err := ctx.ReadResource("google-native:spanner/v1:InstanceBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceBackup resources.
type instanceBackupState struct {
	// The time the CreateBackup request is received. If the request does not specify `version_time`, the `version_time` of the backup will be equivalent to the `create_time`.
	CreateTime *string `pulumi:"createTime"`
	// Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.
	Database *string `pulumi:"database"`
	// The encryption information for the backup.
	EncryptionInfo *EncryptionInfoResponse `pulumi:"encryptionInfo"`
	// Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
	ExpireTime *string `pulumi:"expireTime"`
	// Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.
	Name *string `pulumi:"name"`
	// The names of the restored databases that reference the backup. The database names are of the form `projects//instances//databases/`. Referencing databases may exist in different instances. The existence of any referencing database prevents the backup from being deleted. When a restored database from the backup enters the `READY` state, the reference to the backup is removed.
	ReferencingDatabases []string `pulumi:"referencingDatabases"`
	// Size of the backup in bytes.
	SizeBytes *string `pulumi:"sizeBytes"`
	// The current state of the backup.
	State *string `pulumi:"state"`
	// The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.
	VersionTime *string `pulumi:"versionTime"`
}

type InstanceBackupState struct {
	// The time the CreateBackup request is received. If the request does not specify `version_time`, the `version_time` of the backup will be equivalent to the `create_time`.
	CreateTime pulumi.StringPtrInput
	// Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.
	Database pulumi.StringPtrInput
	// The encryption information for the backup.
	EncryptionInfo EncryptionInfoResponsePtrInput
	// Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
	ExpireTime pulumi.StringPtrInput
	// Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.
	Name pulumi.StringPtrInput
	// The names of the restored databases that reference the backup. The database names are of the form `projects//instances//databases/`. Referencing databases may exist in different instances. The existence of any referencing database prevents the backup from being deleted. When a restored database from the backup enters the `READY` state, the reference to the backup is removed.
	ReferencingDatabases pulumi.StringArrayInput
	// Size of the backup in bytes.
	SizeBytes pulumi.StringPtrInput
	// The current state of the backup.
	State pulumi.StringPtrInput
	// The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.
	VersionTime pulumi.StringPtrInput
}

func (InstanceBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceBackupState)(nil)).Elem()
}

type instanceBackupArgs struct {
	BackupId  string `pulumi:"backupId"`
	BackupsId string `pulumi:"backupsId"`
	// Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.
	Database                       *string `pulumi:"database"`
	EncryptionConfigEncryptionType string  `pulumi:"encryptionConfigEncryptionType"`
	EncryptionConfigKmsKeyName     *string `pulumi:"encryptionConfigKmsKeyName"`
	// Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
	ExpireTime  *string `pulumi:"expireTime"`
	InstancesId string  `pulumi:"instancesId"`
	// Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.
	VersionTime *string `pulumi:"versionTime"`
}

// The set of arguments for constructing a InstanceBackup resource.
type InstanceBackupArgs struct {
	BackupId  pulumi.StringInput
	BackupsId pulumi.StringInput
	// Required for the CreateBackup operation. Name of the database from which this backup was created. This needs to be in the same instance as the backup. Values are of the form `projects//instances//databases/`.
	Database                       pulumi.StringPtrInput
	EncryptionConfigEncryptionType pulumi.StringInput
	EncryptionConfigKmsKeyName     pulumi.StringPtrInput
	// Required for the CreateBackup operation. The expiration time of the backup, with microseconds granularity that must be at least 6 hours and at most 366 days from the time the CreateBackup request is processed. Once the `expire_time` has passed, the backup is eligible to be automatically deleted by Cloud Spanner to free the resources used by the backup.
	ExpireTime  pulumi.StringPtrInput
	InstancesId pulumi.StringInput
	// Output only for the CreateBackup operation. Required for the UpdateBackup operation. A globally unique identifier for the backup which cannot be changed. Values are of the form `projects//instances//backups/a-z*[a-z0-9]` The final segment of the name must be between 2 and 60 characters in length. The backup is stored in the location(s) specified in the instance configuration of the instance containing the backup, identified by the prefix of the backup name of the form `projects//instances/`.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// The backup will contain an externally consistent copy of the database at the timestamp specified by `version_time`. If `version_time` is not specified, the system will set `version_time` to the `create_time` of the backup.
	VersionTime pulumi.StringPtrInput
}

func (InstanceBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceBackupArgs)(nil)).Elem()
}

type InstanceBackupInput interface {
	pulumi.Input

	ToInstanceBackupOutput() InstanceBackupOutput
	ToInstanceBackupOutputWithContext(ctx context.Context) InstanceBackupOutput
}

func (*InstanceBackup) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackup)(nil))
}

func (i *InstanceBackup) ToInstanceBackupOutput() InstanceBackupOutput {
	return i.ToInstanceBackupOutputWithContext(context.Background())
}

func (i *InstanceBackup) ToInstanceBackupOutputWithContext(ctx context.Context) InstanceBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupOutput)
}

type InstanceBackupOutput struct {
	*pulumi.OutputState
}

func (InstanceBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackup)(nil))
}

func (o InstanceBackupOutput) ToInstanceBackupOutput() InstanceBackupOutput {
	return o
}

func (o InstanceBackupOutput) ToInstanceBackupOutputWithContext(ctx context.Context) InstanceBackupOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceBackupOutput{})
}
