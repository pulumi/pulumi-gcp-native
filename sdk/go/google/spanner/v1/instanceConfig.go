// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an instance config and begins preparing it to be used. The returned long-running operation can be used to track the progress of preparing the new instance config. The instance config name is assigned by the caller. If the named instance config already exists, `CreateInstanceConfig` returns `ALREADY_EXISTS`. Immediately after the request returns: * The instance config is readable via the API, with all requested attributes. The instance config's reconciling field is set to true. Its state is `CREATING`. While the operation is pending: * Cancelling the operation renders the instance config immediately unreadable via the API. * Except for deleting the creating resource, all other attempts to modify the instance config are rejected. Upon completion of the returned operation: * Instances can be created using the instance configuration. * The instance config's reconciling field becomes false. Its state becomes `READY`. The returned long-running operation will have a name of the format `/operations/` and can be used to track creation of the instance config. The metadata field type is CreateInstanceConfigMetadata. The response field type is InstanceConfig, if successful. Authorization requires `spanner.instanceConfigs.create` permission on the resource parent.
type InstanceConfig struct {
	pulumi.CustomResourceState

	// Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user managed configurations. `base_config` must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.
	BaseConfig pulumi.StringOutput `pulumi:"baseConfig"`
	// Whether this instance config is a Google or User Managed Configuration.
	ConfigType pulumi.StringOutput `pulumi:"configType"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance config from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance config updates in order to avoid race conditions: An etag is returned in the response which contains instance configs, and systems are expected to put that etag in the request to update instance config to ensure that their change will be applied to the same version of the instance config. If no etag is provided in the call to update instance config, then the existing instance config is overwritten blindly.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Describes whether free instances are available to be created in this instance config.
	FreeInstanceAvailability pulumi.StringOutput `pulumi:"freeInstanceAvailability"`
	// Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + "_" + value would prove problematic if we were to allow "_" in a future release.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Allowed values of the "default_leader" schema option for databases in instances that use this instance configuration.
	LeaderOptions pulumi.StringArrayOutput `pulumi:"leaderOptions"`
	// A unique identifier for the instance configuration. Values are of the form `projects//instanceConfigs/a-z*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The available optional replicas to choose from for user managed configurations. Populated for Google managed configurations.
	OptionalReplicas ReplicaInfoResponseArrayOutput `pulumi:"optionalReplicas"`
	Project          pulumi.StringOutput            `pulumi:"project"`
	// If true, the instance config is being created or updated. If false, there are no ongoing operations for the instance config.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas ReplicaInfoResponseArrayOutput `pulumi:"replicas"`
	// The current instance config state. Applicable only for USER_MANAGED configs.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewInstanceConfig registers a new resource with the given unique name, arguments, and options.
func NewInstanceConfig(ctx *pulumi.Context,
	name string, args *InstanceConfigArgs, opts ...pulumi.ResourceOption) (*InstanceConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceConfigId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceConfigId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource InstanceConfig
	err := ctx.RegisterResource("google-native:spanner/v1:InstanceConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceConfig gets an existing InstanceConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceConfigState, opts ...pulumi.ResourceOption) (*InstanceConfig, error) {
	var resource InstanceConfig
	err := ctx.ReadResource("google-native:spanner/v1:InstanceConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceConfig resources.
type instanceConfigState struct {
}

type InstanceConfigState struct {
}

func (InstanceConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceConfigState)(nil)).Elem()
}

type instanceConfigArgs struct {
	// Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user managed configurations. `base_config` must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.
	BaseConfig *string `pulumi:"baseConfig"`
	// The name of this instance configuration as it appears in UIs.
	DisplayName *string `pulumi:"displayName"`
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance config from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance config updates in order to avoid race conditions: An etag is returned in the response which contains instance configs, and systems are expected to put that etag in the request to update instance config to ensure that their change will be applied to the same version of the instance config. If no etag is provided in the call to update instance config, then the existing instance config is overwritten blindly.
	Etag *string `pulumi:"etag"`
	// The ID of the instance config to create. Valid identifiers are of the form `custom-[-a-z0-9]*[a-z0-9]` and must be between 2 and 64 characters in length. The `custom-` prefix is required to avoid name conflicts with Google managed configurations.
	InstanceConfigId string `pulumi:"instanceConfigId"`
	// Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + "_" + value would prove problematic if we were to allow "_" in a future release.
	Labels map[string]string `pulumi:"labels"`
	// Allowed values of the "default_leader" schema option for databases in instances that use this instance configuration.
	LeaderOptions []string `pulumi:"leaderOptions"`
	// A unique identifier for the instance configuration. Values are of the form `projects//instanceConfigs/a-z*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas []ReplicaInfo `pulumi:"replicas"`
	// An option to validate, but not actually execute, a request, and provide the same response.
	ValidateOnly *bool `pulumi:"validateOnly"`
}

// The set of arguments for constructing a InstanceConfig resource.
type InstanceConfigArgs struct {
	// Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user managed configurations. `base_config` must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.
	BaseConfig pulumi.StringPtrInput
	// The name of this instance configuration as it appears in UIs.
	DisplayName pulumi.StringPtrInput
	// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance config from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance config updates in order to avoid race conditions: An etag is returned in the response which contains instance configs, and systems are expected to put that etag in the request to update instance config to ensure that their change will be applied to the same version of the instance config. If no etag is provided in the call to update instance config, then the existing instance config is overwritten blindly.
	Etag pulumi.StringPtrInput
	// The ID of the instance config to create. Valid identifiers are of the form `custom-[-a-z0-9]*[a-z0-9]` and must be between 2 and 64 characters in length. The `custom-` prefix is required to avoid name conflicts with Google managed configurations.
	InstanceConfigId pulumi.StringInput
	// Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + "_" + value would prove problematic if we were to allow "_" in a future release.
	Labels pulumi.StringMapInput
	// Allowed values of the "default_leader" schema option for databases in instances that use this instance configuration.
	LeaderOptions pulumi.StringArrayInput
	// A unique identifier for the instance configuration. Values are of the form `projects//instanceConfigs/a-z*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The geographic placement of nodes in this instance configuration and their replication properties.
	Replicas ReplicaInfoArrayInput
	// An option to validate, but not actually execute, a request, and provide the same response.
	ValidateOnly pulumi.BoolPtrInput
}

func (InstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceConfigArgs)(nil)).Elem()
}

type InstanceConfigInput interface {
	pulumi.Input

	ToInstanceConfigOutput() InstanceConfigOutput
	ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput
}

func (*InstanceConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfig)(nil)).Elem()
}

func (i *InstanceConfig) ToInstanceConfigOutput() InstanceConfigOutput {
	return i.ToInstanceConfigOutputWithContext(context.Background())
}

func (i *InstanceConfig) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigOutput)
}

type InstanceConfigOutput struct{ *pulumi.OutputState }

func (InstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceConfig)(nil)).Elem()
}

func (o InstanceConfigOutput) ToInstanceConfigOutput() InstanceConfigOutput {
	return o
}

func (o InstanceConfigOutput) ToInstanceConfigOutputWithContext(ctx context.Context) InstanceConfigOutput {
	return o
}

// Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user managed configurations. `base_config` must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.
func (o InstanceConfigOutput) BaseConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.BaseConfig }).(pulumi.StringOutput)
}

// Whether this instance config is a Google or User Managed Configuration.
func (o InstanceConfigOutput) ConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.ConfigType }).(pulumi.StringOutput)
}

// The name of this instance configuration as it appears in UIs.
func (o InstanceConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance config from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance config updates in order to avoid race conditions: An etag is returned in the response which contains instance configs, and systems are expected to put that etag in the request to update instance config to ensure that their change will be applied to the same version of the instance config. If no etag is provided in the call to update instance config, then the existing instance config is overwritten blindly.
func (o InstanceConfigOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Describes whether free instances are available to be created in this instance config.
func (o InstanceConfigOutput) FreeInstanceAvailability() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.FreeInstanceAvailability }).(pulumi.StringOutput)
}

// Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + "_" + value would prove problematic if we were to allow "_" in a future release.
func (o InstanceConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Allowed values of the "default_leader" schema option for databases in instances that use this instance configuration.
func (o InstanceConfigOutput) LeaderOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringArrayOutput { return v.LeaderOptions }).(pulumi.StringArrayOutput)
}

// A unique identifier for the instance configuration. Values are of the form `projects//instanceConfigs/a-z*`.
func (o InstanceConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The available optional replicas to choose from for user managed configurations. Populated for Google managed configurations.
func (o InstanceConfigOutput) OptionalReplicas() ReplicaInfoResponseArrayOutput {
	return o.ApplyT(func(v *InstanceConfig) ReplicaInfoResponseArrayOutput { return v.OptionalReplicas }).(ReplicaInfoResponseArrayOutput)
}

func (o InstanceConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// If true, the instance config is being created or updated. If false, there are no ongoing operations for the instance config.
func (o InstanceConfigOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// The geographic placement of nodes in this instance configuration and their replication properties.
func (o InstanceConfigOutput) Replicas() ReplicaInfoResponseArrayOutput {
	return o.ApplyT(func(v *InstanceConfig) ReplicaInfoResponseArrayOutput { return v.Replicas }).(ReplicaInfoResponseArrayOutput)
}

// The current instance config state. Applicable only for USER_MANAGED configs.
func (o InstanceConfigOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceConfig) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigInput)(nil)).Elem(), &InstanceConfig{})
	pulumi.RegisterOutputType(InstanceConfigOutput{})
}
