// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an instance partition and begins preparing it to be used. The returned long-running operation can be used to track the progress of preparing the new instance partition. The instance partition name is assigned by the caller. If the named instance partition already exists, `CreateInstancePartition` returns `ALREADY_EXISTS`. Immediately upon completion of this request: * The instance partition is readable via the API, with all requested attributes but no allocated resources. Its state is `CREATING`. Until completion of the returned operation: * Cancelling the operation renders the instance partition immediately unreadable via the API. * The instance partition can be deleted. * All other attempts to modify the instance partition are rejected. Upon completion of the returned operation: * Billing for all successfully-allocated resources begins (some types may have lower than the requested levels). * Databases can start using this instance partition. * The instance partition's allocated resource levels are readable via the API. * The instance partition's state becomes `READY`. The returned long-running operation will have a name of the format `/operations/` and can be used to track creation of the instance partition. The metadata field type is CreateInstancePartitionMetadata. The response field type is InstancePartition, if successful.
type InstancePartition struct {
	pulumi.CustomResourceState

	// The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
	Config pulumi.StringOutput `pulumi:"config"`
	// The time at which the instance partition was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
	Etag       pulumi.StringOutput `pulumi:"etag"`
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	ProcessingUnits pulumi.IntOutput    `pulumi:"processingUnits"`
	Project         pulumi.StringOutput `pulumi:"project"`
	// The names of the backups that reference this instance partition. Referencing backups should share the parent instance. The existence of any referencing backup prevents the instance partition from being deleted.
	ReferencingBackups pulumi.StringArrayOutput `pulumi:"referencingBackups"`
	// The names of the databases that reference this instance partition. Referencing databases should share the parent instance. The existence of any referencing database prevents the instance partition from being deleted.
	ReferencingDatabases pulumi.StringArrayOutput `pulumi:"referencingDatabases"`
	// The current instance partition state.
	State pulumi.StringOutput `pulumi:"state"`
	// The time at which the instance partition was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewInstancePartition registers a new resource with the given unique name, arguments, and options.
func NewInstancePartition(ctx *pulumi.Context,
	name string, args *InstancePartitionArgs, opts ...pulumi.ResourceOption) (*InstancePartition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.InstancePartitionId == nil {
		return nil, errors.New("invalid value for required argument 'InstancePartitionId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"instanceId",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstancePartition
	err := ctx.RegisterResource("google-native:spanner/v1:InstancePartition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstancePartition gets an existing InstancePartition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstancePartition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstancePartitionState, opts ...pulumi.ResourceOption) (*InstancePartition, error) {
	var resource InstancePartition
	err := ctx.ReadResource("google-native:spanner/v1:InstancePartition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstancePartition resources.
type instancePartitionState struct {
}

type InstancePartitionState struct {
}

func (InstancePartitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePartitionState)(nil)).Elem()
}

type instancePartitionArgs struct {
	// The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
	Config string `pulumi:"config"`
	// The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
	DisplayName string `pulumi:"displayName"`
	// Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
	Etag       *string `pulumi:"etag"`
	InstanceId string  `pulumi:"instanceId"`
	// The ID of the instance partition to create. Valid identifiers are of the form `a-z*[a-z0-9]` and must be between 2 and 64 characters in length.
	InstancePartitionId string `pulumi:"instancePartitionId"`
	// A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
	Name *string `pulumi:"name"`
	// The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	NodeCount *int `pulumi:"nodeCount"`
	// The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	ProcessingUnits *int    `pulumi:"processingUnits"`
	Project         *string `pulumi:"project"`
}

// The set of arguments for constructing a InstancePartition resource.
type InstancePartitionArgs struct {
	// The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
	Config pulumi.StringInput
	// The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
	DisplayName pulumi.StringInput
	// Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
	Etag       pulumi.StringPtrInput
	InstanceId pulumi.StringInput
	// The ID of the instance partition to create. Valid identifiers are of the form `a-z*[a-z0-9]` and must be between 2 and 64 characters in length.
	InstancePartitionId pulumi.StringInput
	// A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
	Name pulumi.StringPtrInput
	// The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	NodeCount pulumi.IntPtrInput
	// The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	ProcessingUnits pulumi.IntPtrInput
	Project         pulumi.StringPtrInput
}

func (InstancePartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePartitionArgs)(nil)).Elem()
}

type InstancePartitionInput interface {
	pulumi.Input

	ToInstancePartitionOutput() InstancePartitionOutput
	ToInstancePartitionOutputWithContext(ctx context.Context) InstancePartitionOutput
}

func (*InstancePartition) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePartition)(nil)).Elem()
}

func (i *InstancePartition) ToInstancePartitionOutput() InstancePartitionOutput {
	return i.ToInstancePartitionOutputWithContext(context.Background())
}

func (i *InstancePartition) ToInstancePartitionOutputWithContext(ctx context.Context) InstancePartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePartitionOutput)
}

type InstancePartitionOutput struct{ *pulumi.OutputState }

func (InstancePartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePartition)(nil)).Elem()
}

func (o InstancePartitionOutput) ToInstancePartitionOutput() InstancePartitionOutput {
	return o
}

func (o InstancePartitionOutput) ToInstancePartitionOutputWithContext(ctx context.Context) InstancePartitionOutput {
	return o
}

// The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
func (o InstancePartitionOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// The time at which the instance partition was created.
func (o InstancePartitionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
func (o InstancePartitionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
func (o InstancePartitionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

func (o InstancePartitionOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
func (o InstancePartitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
func (o InstancePartitionOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
func (o InstancePartitionOutput) ProcessingUnits() pulumi.IntOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.IntOutput { return v.ProcessingUnits }).(pulumi.IntOutput)
}

func (o InstancePartitionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The names of the backups that reference this instance partition. Referencing backups should share the parent instance. The existence of any referencing backup prevents the instance partition from being deleted.
func (o InstancePartitionOutput) ReferencingBackups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringArrayOutput { return v.ReferencingBackups }).(pulumi.StringArrayOutput)
}

// The names of the databases that reference this instance partition. Referencing databases should share the parent instance. The existence of any referencing database prevents the instance partition from being deleted.
func (o InstancePartitionOutput) ReferencingDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringArrayOutput { return v.ReferencingDatabases }).(pulumi.StringArrayOutput)
}

// The current instance partition state.
func (o InstancePartitionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The time at which the instance partition was most recently updated.
func (o InstancePartitionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePartition) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePartitionInput)(nil)).Elem(), &InstancePartition{})
	pulumi.RegisterOutputType(InstancePartitionOutput{})
}
