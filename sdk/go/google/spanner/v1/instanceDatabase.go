// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a new Cloud Spanner database and starts to prepare it for serving. The returned long-running operation will have a name of the format `/operations/` and can be used to track preparation of the database. The metadata field type is CreateDatabaseMetadata. The response field type is Database, if successful.
type InstanceDatabase struct {
	pulumi.CustomResourceState
}

// NewInstanceDatabase registers a new resource with the given unique name, arguments, and options.
func NewInstanceDatabase(ctx *pulumi.Context,
	name string, args *InstanceDatabaseArgs, opts ...pulumi.ResourceOption) (*InstanceDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabasesId == nil {
		return nil, errors.New("invalid value for required argument 'DatabasesId'")
	}
	if args.InstancesId == nil {
		return nil, errors.New("invalid value for required argument 'InstancesId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource InstanceDatabase
	err := ctx.RegisterResource("google-cloud:spanner/v1:InstanceDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceDatabase gets an existing InstanceDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceDatabaseState, opts ...pulumi.ResourceOption) (*InstanceDatabase, error) {
	var resource InstanceDatabase
	err := ctx.ReadResource("google-cloud:spanner/v1:InstanceDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceDatabase resources.
type instanceDatabaseState struct {
}

type InstanceDatabaseState struct {
}

func (InstanceDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDatabaseState)(nil)).Elem()
}

type instanceDatabaseArgs struct {
	// Required. A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
	CreateStatement *string `pulumi:"createStatement"`
	DatabasesId     string  `pulumi:"databasesId"`
	// Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
	EncryptionConfig *EncryptionConfig `pulumi:"encryptionConfig"`
	// Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
	ExtraStatements []string `pulumi:"extraStatements"`
	InstancesId     string   `pulumi:"instancesId"`
	ProjectsId      string   `pulumi:"projectsId"`
}

// The set of arguments for constructing a InstanceDatabase resource.
type InstanceDatabaseArgs struct {
	// Required. A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).
	CreateStatement pulumi.StringPtrInput
	DatabasesId     pulumi.StringInput
	// Optional. The encryption configuration for the database. If this field is not specified, Cloud Spanner will encrypt/decrypt all data at rest using Google default encryption.
	EncryptionConfig EncryptionConfigPtrInput
	// Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.
	ExtraStatements pulumi.StringArrayInput
	InstancesId     pulumi.StringInput
	ProjectsId      pulumi.StringInput
}

func (InstanceDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceDatabaseArgs)(nil)).Elem()
}

type InstanceDatabaseInput interface {
	pulumi.Input

	ToInstanceDatabaseOutput() InstanceDatabaseOutput
	ToInstanceDatabaseOutputWithContext(ctx context.Context) InstanceDatabaseOutput
}

func (*InstanceDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabase)(nil))
}

func (i *InstanceDatabase) ToInstanceDatabaseOutput() InstanceDatabaseOutput {
	return i.ToInstanceDatabaseOutputWithContext(context.Background())
}

func (i *InstanceDatabase) ToInstanceDatabaseOutputWithContext(ctx context.Context) InstanceDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatabaseOutput)
}

type InstanceDatabaseOutput struct {
	*pulumi.OutputState
}

func (InstanceDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatabase)(nil))
}

func (o InstanceDatabaseOutput) ToInstanceDatabaseOutput() InstanceDatabaseOutput {
	return o
}

func (o InstanceDatabaseOutput) ToInstanceDatabaseOutputWithContext(ctx context.Context) InstanceDatabaseOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(InstanceDatabaseOutput{})
}
