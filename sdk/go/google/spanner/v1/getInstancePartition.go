// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets information about a particular instance partition.
func LookupInstancePartition(ctx *pulumi.Context, args *LookupInstancePartitionArgs, opts ...pulumi.InvokeOption) (*LookupInstancePartitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstancePartitionResult
	err := ctx.Invoke("google-native:spanner/v1:getInstancePartition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupInstancePartitionArgs struct {
	InstanceId          string  `pulumi:"instanceId"`
	InstancePartitionId string  `pulumi:"instancePartitionId"`
	Project             *string `pulumi:"project"`
}

type LookupInstancePartitionResult struct {
	// The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
	Config string `pulumi:"config"`
	// The time at which the instance partition was created.
	CreateTime string `pulumi:"createTime"`
	// The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
	DisplayName string `pulumi:"displayName"`
	// Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
	Etag string `pulumi:"etag"`
	// A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
	Name string `pulumi:"name"`
	// The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	NodeCount int `pulumi:"nodeCount"`
	// The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
	ProcessingUnits int `pulumi:"processingUnits"`
	// The names of the backups that reference this instance partition. Referencing backups should share the parent instance. The existence of any referencing backup prevents the instance partition from being deleted.
	ReferencingBackups []string `pulumi:"referencingBackups"`
	// The names of the databases that reference this instance partition. Referencing databases should share the parent instance. The existence of any referencing database prevents the instance partition from being deleted.
	ReferencingDatabases []string `pulumi:"referencingDatabases"`
	// The current instance partition state.
	State string `pulumi:"state"`
	// The time at which the instance partition was most recently updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupInstancePartitionOutput(ctx *pulumi.Context, args LookupInstancePartitionOutputArgs, opts ...pulumi.InvokeOption) LookupInstancePartitionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInstancePartitionResult, error) {
			args := v.(LookupInstancePartitionArgs)
			r, err := LookupInstancePartition(ctx, &args, opts...)
			var s LookupInstancePartitionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInstancePartitionResultOutput)
}

type LookupInstancePartitionOutputArgs struct {
	InstanceId          pulumi.StringInput    `pulumi:"instanceId"`
	InstancePartitionId pulumi.StringInput    `pulumi:"instancePartitionId"`
	Project             pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupInstancePartitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancePartitionArgs)(nil)).Elem()
}

type LookupInstancePartitionResultOutput struct{ *pulumi.OutputState }

func (LookupInstancePartitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstancePartitionResult)(nil)).Elem()
}

func (o LookupInstancePartitionResultOutput) ToLookupInstancePartitionResultOutput() LookupInstancePartitionResultOutput {
	return o
}

func (o LookupInstancePartitionResultOutput) ToLookupInstancePartitionResultOutputWithContext(ctx context.Context) LookupInstancePartitionResultOutput {
	return o
}

// The name of the instance partition's configuration. Values are of the form `projects//instanceConfigs/`. See also InstanceConfig and ListInstanceConfigs.
func (o LookupInstancePartitionResultOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) string { return v.Config }).(pulumi.StringOutput)
}

// The time at which the instance partition was created.
func (o LookupInstancePartitionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The descriptive name for this instance partition as it appears in UIs. Must be unique per project and between 4 and 30 characters in length.
func (o LookupInstancePartitionResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance partition from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance partition updates in order to avoid race conditions: An etag is returned in the response which contains instance partitions, and systems are expected to put that etag in the request to update instance partitions to ensure that their change will be applied to the same version of the instance partition. If no etag is provided in the call to update instance partition, then the existing instance partition is overwritten blindly.
func (o LookupInstancePartitionResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) string { return v.Etag }).(pulumi.StringOutput)
}

// A unique identifier for the instance partition. Values are of the form `projects//instances//instancePartitions/a-z*[a-z0-9]`. The final segment of the name must be between 2 and 64 characters in length. An instance partition's name cannot be changed after the instance partition is created.
func (o LookupInstancePartitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) string { return v.Name }).(pulumi.StringOutput)
}

// The number of nodes allocated to this instance partition. Users can set the node_count field to specify the target number of nodes allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
func (o LookupInstancePartitionResultOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) int { return v.NodeCount }).(pulumi.IntOutput)
}

// The number of processing units allocated to this instance partition. Users can set the processing_units field to specify the target number of processing units allocated to the instance partition. This may be zero in API responses for instance partitions that are not yet in state `READY`.
func (o LookupInstancePartitionResultOutput) ProcessingUnits() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) int { return v.ProcessingUnits }).(pulumi.IntOutput)
}

// The names of the backups that reference this instance partition. Referencing backups should share the parent instance. The existence of any referencing backup prevents the instance partition from being deleted.
func (o LookupInstancePartitionResultOutput) ReferencingBackups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) []string { return v.ReferencingBackups }).(pulumi.StringArrayOutput)
}

// The names of the databases that reference this instance partition. Referencing databases should share the parent instance. The existence of any referencing database prevents the instance partition from being deleted.
func (o LookupInstancePartitionResultOutput) ReferencingDatabases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) []string { return v.ReferencingDatabases }).(pulumi.StringArrayOutput)
}

// The current instance partition state.
func (o LookupInstancePartitionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) string { return v.State }).(pulumi.StringOutput)
}

// The time at which the instance partition was most recently updated.
func (o LookupInstancePartitionResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstancePartitionResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstancePartitionResultOutput{})
}
