// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new Certificate in a given project and location.
type Certificate struct {
	pulumi.CustomResourceState

	// The creation timestamp of a Certificate.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a certificate.
	Description pulumi.StringOutput `pulumi:"description"`
	// The expiry timestamp of a Certificate.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Set of labels associated with a Certificate.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// If set, contains configuration and state of a managed certificate.
	Managed ManagedCertificateResponseOutput `pulumi:"managed"`
	// A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The PEM-encoded certificate chain.
	PemCertificate pulumi.StringOutput `pulumi:"pemCertificate"`
	// The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.
	SanDnsnames pulumi.StringArrayOutput `pulumi:"sanDnsnames"`
	// Immutable. The scope of the certificate.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// If set, defines data of a self-managed certificate.
	SelfManaged SelfManagedCertificateResponseOutput `pulumi:"selfManaged"`
	// The last update timestamp of a Certificate.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateId'")
	}
	var resource Certificate
	err := ctx.RegisterResource("google-native:certificatemanager/v1:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("google-native:certificatemanager/v1:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
}

type CertificateState struct {
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// Required. A user-provided name of the certificate.
	CertificateId string `pulumi:"certificateId"`
	// One or more paragraphs of text description of a certificate.
	Description *string `pulumi:"description"`
	// Set of labels associated with a Certificate.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// If set, contains configuration and state of a managed certificate.
	Managed *ManagedCertificate `pulumi:"managed"`
	// A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Immutable. The scope of the certificate.
	Scope *CertificateScope `pulumi:"scope"`
	// If set, defines data of a self-managed certificate.
	SelfManaged *SelfManagedCertificate `pulumi:"selfManaged"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// Required. A user-provided name of the certificate.
	CertificateId pulumi.StringInput
	// One or more paragraphs of text description of a certificate.
	Description pulumi.StringPtrInput
	// Set of labels associated with a Certificate.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// If set, contains configuration and state of a managed certificate.
	Managed ManagedCertificatePtrInput
	// A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Immutable. The scope of the certificate.
	Scope CertificateScopePtrInput
	// If set, defines data of a self-managed certificate.
	SelfManaged SelfManagedCertificatePtrInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterOutputType(CertificateOutput{})
}
