// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single DnsAuthorization.
func LookupDnsAuthorization(ctx *pulumi.Context, args *LookupDnsAuthorizationArgs, opts ...pulumi.InvokeOption) (*LookupDnsAuthorizationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsAuthorizationResult
	err := ctx.Invoke("google-native:certificatemanager/v1:getDnsAuthorization", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDnsAuthorizationArgs struct {
	DnsAuthorizationId string  `pulumi:"dnsAuthorizationId"`
	Location           string  `pulumi:"location"`
	Project            *string `pulumi:"project"`
}

type LookupDnsAuthorizationResult struct {
	// The creation timestamp of a DnsAuthorization.
	CreateTime string `pulumi:"createTime"`
	// One or more paragraphs of text description of a DnsAuthorization.
	Description string `pulumi:"description"`
	// DNS Resource Record that needs to be added to DNS configuration.
	DnsResourceRecord DnsResourceRecordResponse `pulumi:"dnsResourceRecord"`
	// Immutable. A domain that is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
	Domain string `pulumi:"domain"`
	// Set of labels associated with a DnsAuthorization.
	Labels map[string]string `pulumi:"labels"`
	// A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*/locations/*/dnsAuthorizations/*`.
	Name string `pulumi:"name"`
	// The last update timestamp of a DnsAuthorization.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupDnsAuthorizationOutput(ctx *pulumi.Context, args LookupDnsAuthorizationOutputArgs, opts ...pulumi.InvokeOption) LookupDnsAuthorizationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsAuthorizationResult, error) {
			args := v.(LookupDnsAuthorizationArgs)
			r, err := LookupDnsAuthorization(ctx, &args, opts...)
			var s LookupDnsAuthorizationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDnsAuthorizationResultOutput)
}

type LookupDnsAuthorizationOutputArgs struct {
	DnsAuthorizationId pulumi.StringInput    `pulumi:"dnsAuthorizationId"`
	Location           pulumi.StringInput    `pulumi:"location"`
	Project            pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDnsAuthorizationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsAuthorizationArgs)(nil)).Elem()
}

type LookupDnsAuthorizationResultOutput struct{ *pulumi.OutputState }

func (LookupDnsAuthorizationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsAuthorizationResult)(nil)).Elem()
}

func (o LookupDnsAuthorizationResultOutput) ToLookupDnsAuthorizationResultOutput() LookupDnsAuthorizationResultOutput {
	return o
}

func (o LookupDnsAuthorizationResultOutput) ToLookupDnsAuthorizationResultOutputWithContext(ctx context.Context) LookupDnsAuthorizationResultOutput {
	return o
}

// The creation timestamp of a DnsAuthorization.
func (o LookupDnsAuthorizationResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a DnsAuthorization.
func (o LookupDnsAuthorizationResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Description }).(pulumi.StringOutput)
}

// DNS Resource Record that needs to be added to DNS configuration.
func (o LookupDnsAuthorizationResultOutput) DnsResourceRecord() DnsResourceRecordResponseOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) DnsResourceRecordResponse { return v.DnsResourceRecord }).(DnsResourceRecordResponseOutput)
}

// Immutable. A domain that is being authorized. A DnsAuthorization resource covers a single domain and its wildcard, e.g. authorization for `example.com` can be used to issue certificates for `example.com` and `*.example.com`.
func (o LookupDnsAuthorizationResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Domain }).(pulumi.StringOutput)
}

// Set of labels associated with a DnsAuthorization.
func (o LookupDnsAuthorizationResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// A user-defined name of the dns authorization. DnsAuthorization names must be unique globally and match pattern `projects/*/locations/*/dnsAuthorizations/*`.
func (o LookupDnsAuthorizationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The last update timestamp of a DnsAuthorization.
func (o LookupDnsAuthorizationResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsAuthorizationResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsAuthorizationResultOutput{})
}
