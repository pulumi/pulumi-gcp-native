// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new CertificateMapEntry in a given project and location.
type CertificateMapEntry struct {
	pulumi.CustomResourceState

	// Required. A user-provided name of the certificate map entry.
	CertificateMapEntryId pulumi.StringOutput `pulumi:"certificateMapEntryId"`
	CertificateMapId      pulumi.StringOutput `pulumi:"certificateMapId"`
	// A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
	Certificates pulumi.StringArrayOutput `pulumi:"certificates"`
	// The creation timestamp of a Certificate Map Entry.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a certificate map entry.
	Description pulumi.StringOutput `pulumi:"description"`
	// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// Set of labels associated with a Certificate Map Entry.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// A predefined matcher for particular cases, other than SNI selection.
	Matcher pulumi.StringOutput `pulumi:"matcher"`
	// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// A serving state of this Certificate Map Entry.
	State pulumi.StringOutput `pulumi:"state"`
	// The update timestamp of a Certificate Map Entry.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificateMapEntry registers a new resource with the given unique name, arguments, and options.
func NewCertificateMapEntry(ctx *pulumi.Context,
	name string, args *CertificateMapEntryArgs, opts ...pulumi.ResourceOption) (*CertificateMapEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateMapEntryId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateMapEntryId'")
	}
	if args.CertificateMapId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateMapId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"certificateMapEntryId",
		"certificateMapId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateMapEntry
	err := ctx.RegisterResource("google-native:certificatemanager/v1:CertificateMapEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateMapEntry gets an existing CertificateMapEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateMapEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateMapEntryState, opts ...pulumi.ResourceOption) (*CertificateMapEntry, error) {
	var resource CertificateMapEntry
	err := ctx.ReadResource("google-native:certificatemanager/v1:CertificateMapEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateMapEntry resources.
type certificateMapEntryState struct {
}

type CertificateMapEntryState struct {
}

func (CertificateMapEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapEntryState)(nil)).Elem()
}

type certificateMapEntryArgs struct {
	// Required. A user-provided name of the certificate map entry.
	CertificateMapEntryId string `pulumi:"certificateMapEntryId"`
	CertificateMapId      string `pulumi:"certificateMapId"`
	// A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
	Certificates []string `pulumi:"certificates"`
	// One or more paragraphs of text description of a certificate map entry.
	Description *string `pulumi:"description"`
	// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
	Hostname *string `pulumi:"hostname"`
	// Set of labels associated with a Certificate Map Entry.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// A predefined matcher for particular cases, other than SNI selection.
	Matcher *CertificateMapEntryMatcher `pulumi:"matcher"`
	// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CertificateMapEntry resource.
type CertificateMapEntryArgs struct {
	// Required. A user-provided name of the certificate map entry.
	CertificateMapEntryId pulumi.StringInput
	CertificateMapId      pulumi.StringInput
	// A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
	Certificates pulumi.StringArrayInput
	// One or more paragraphs of text description of a certificate map entry.
	Description pulumi.StringPtrInput
	// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
	Hostname pulumi.StringPtrInput
	// Set of labels associated with a Certificate Map Entry.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// A predefined matcher for particular cases, other than SNI selection.
	Matcher CertificateMapEntryMatcherPtrInput
	// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (CertificateMapEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapEntryArgs)(nil)).Elem()
}

type CertificateMapEntryInput interface {
	pulumi.Input

	ToCertificateMapEntryOutput() CertificateMapEntryOutput
	ToCertificateMapEntryOutputWithContext(ctx context.Context) CertificateMapEntryOutput
}

func (*CertificateMapEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMapEntry)(nil)).Elem()
}

func (i *CertificateMapEntry) ToCertificateMapEntryOutput() CertificateMapEntryOutput {
	return i.ToCertificateMapEntryOutputWithContext(context.Background())
}

func (i *CertificateMapEntry) ToCertificateMapEntryOutputWithContext(ctx context.Context) CertificateMapEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapEntryOutput)
}

func (i *CertificateMapEntry) ToOutput(ctx context.Context) pulumix.Output[*CertificateMapEntry] {
	return pulumix.Output[*CertificateMapEntry]{
		OutputState: i.ToCertificateMapEntryOutputWithContext(ctx).OutputState,
	}
}

type CertificateMapEntryOutput struct{ *pulumi.OutputState }

func (CertificateMapEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMapEntry)(nil)).Elem()
}

func (o CertificateMapEntryOutput) ToCertificateMapEntryOutput() CertificateMapEntryOutput {
	return o
}

func (o CertificateMapEntryOutput) ToCertificateMapEntryOutputWithContext(ctx context.Context) CertificateMapEntryOutput {
	return o
}

func (o CertificateMapEntryOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateMapEntry] {
	return pulumix.Output[*CertificateMapEntry]{
		OutputState: o.OutputState,
	}
}

// Required. A user-provided name of the certificate map entry.
func (o CertificateMapEntryOutput) CertificateMapEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.CertificateMapEntryId }).(pulumi.StringOutput)
}

func (o CertificateMapEntryOutput) CertificateMapId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.CertificateMapId }).(pulumi.StringOutput)
}

// A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
func (o CertificateMapEntryOutput) Certificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringArrayOutput { return v.Certificates }).(pulumi.StringArrayOutput)
}

// The creation timestamp of a Certificate Map Entry.
func (o CertificateMapEntryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a certificate map entry.
func (o CertificateMapEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
func (o CertificateMapEntryOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.Hostname }).(pulumi.StringOutput)
}

// Set of labels associated with a Certificate Map Entry.
func (o CertificateMapEntryOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o CertificateMapEntryOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A predefined matcher for particular cases, other than SNI selection.
func (o CertificateMapEntryOutput) Matcher() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.Matcher }).(pulumi.StringOutput)
}

// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
func (o CertificateMapEntryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CertificateMapEntryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A serving state of this Certificate Map Entry.
func (o CertificateMapEntryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The update timestamp of a Certificate Map Entry.
func (o CertificateMapEntryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMapEntry) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapEntryInput)(nil)).Elem(), &CertificateMapEntry{})
	pulumi.RegisterOutputType(CertificateMapEntryOutput{})
}
