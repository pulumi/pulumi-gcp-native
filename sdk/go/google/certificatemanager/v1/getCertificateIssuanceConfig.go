// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single CertificateIssuanceConfig.
func LookupCertificateIssuanceConfig(ctx *pulumi.Context, args *LookupCertificateIssuanceConfigArgs, opts ...pulumi.InvokeOption) (*LookupCertificateIssuanceConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateIssuanceConfigResult
	err := ctx.Invoke("google-native:certificatemanager/v1:getCertificateIssuanceConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCertificateIssuanceConfigArgs struct {
	CertificateIssuanceConfigId string  `pulumi:"certificateIssuanceConfigId"`
	Location                    string  `pulumi:"location"`
	Project                     *string `pulumi:"project"`
}

type LookupCertificateIssuanceConfigResult struct {
	// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
	CertificateAuthorityConfig CertificateAuthorityConfigResponse `pulumi:"certificateAuthorityConfig"`
	// The creation timestamp of a CertificateIssuanceConfig.
	CreateTime string `pulumi:"createTime"`
	// One or more paragraphs of text description of a CertificateIssuanceConfig.
	Description string `pulumi:"description"`
	// The key algorithm to use when generating the private key.
	KeyAlgorithm string `pulumi:"keyAlgorithm"`
	// Set of labels associated with a CertificateIssuanceConfig.
	Labels map[string]string `pulumi:"labels"`
	// Workload certificate lifetime requested.
	Lifetime string `pulumi:"lifetime"`
	// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.
	Name string `pulumi:"name"`
	// Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
	RotationWindowPercentage int `pulumi:"rotationWindowPercentage"`
	// The last update timestamp of a CertificateIssuanceConfig.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupCertificateIssuanceConfigOutput(ctx *pulumi.Context, args LookupCertificateIssuanceConfigOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateIssuanceConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateIssuanceConfigResult, error) {
			args := v.(LookupCertificateIssuanceConfigArgs)
			r, err := LookupCertificateIssuanceConfig(ctx, &args, opts...)
			var s LookupCertificateIssuanceConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertificateIssuanceConfigResultOutput)
}

type LookupCertificateIssuanceConfigOutputArgs struct {
	CertificateIssuanceConfigId pulumi.StringInput    `pulumi:"certificateIssuanceConfigId"`
	Location                    pulumi.StringInput    `pulumi:"location"`
	Project                     pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCertificateIssuanceConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateIssuanceConfigArgs)(nil)).Elem()
}

type LookupCertificateIssuanceConfigResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateIssuanceConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateIssuanceConfigResult)(nil)).Elem()
}

func (o LookupCertificateIssuanceConfigResultOutput) ToLookupCertificateIssuanceConfigResultOutput() LookupCertificateIssuanceConfigResultOutput {
	return o
}

func (o LookupCertificateIssuanceConfigResultOutput) ToLookupCertificateIssuanceConfigResultOutputWithContext(ctx context.Context) LookupCertificateIssuanceConfigResultOutput {
	return o
}

func (o LookupCertificateIssuanceConfigResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCertificateIssuanceConfigResult] {
	return pulumix.Output[LookupCertificateIssuanceConfigResult]{
		OutputState: o.OutputState,
	}
}

// The CA that issues the workload certificate. It includes the CA address, type, authentication to CA service, etc.
func (o LookupCertificateIssuanceConfigResultOutput) CertificateAuthorityConfig() CertificateAuthorityConfigResponseOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) CertificateAuthorityConfigResponse {
		return v.CertificateAuthorityConfig
	}).(CertificateAuthorityConfigResponseOutput)
}

// The creation timestamp of a CertificateIssuanceConfig.
func (o LookupCertificateIssuanceConfigResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a CertificateIssuanceConfig.
func (o LookupCertificateIssuanceConfigResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) string { return v.Description }).(pulumi.StringOutput)
}

// The key algorithm to use when generating the private key.
func (o LookupCertificateIssuanceConfigResultOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) string { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

// Set of labels associated with a CertificateIssuanceConfig.
func (o LookupCertificateIssuanceConfigResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Workload certificate lifetime requested.
func (o LookupCertificateIssuanceConfigResultOutput) Lifetime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) string { return v.Lifetime }).(pulumi.StringOutput)
}

// A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.
func (o LookupCertificateIssuanceConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.
func (o LookupCertificateIssuanceConfigResultOutput) RotationWindowPercentage() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) int { return v.RotationWindowPercentage }).(pulumi.IntOutput)
}

// The last update timestamp of a CertificateIssuanceConfig.
func (o LookupCertificateIssuanceConfigResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateIssuanceConfigResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateIssuanceConfigResultOutput{})
}
