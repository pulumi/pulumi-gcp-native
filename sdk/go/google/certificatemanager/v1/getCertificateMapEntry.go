// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single CertificateMapEntry.
func LookupCertificateMapEntry(ctx *pulumi.Context, args *LookupCertificateMapEntryArgs, opts ...pulumi.InvokeOption) (*LookupCertificateMapEntryResult, error) {
	var rv LookupCertificateMapEntryResult
	err := ctx.Invoke("google-native:certificatemanager/v1:getCertificateMapEntry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCertificateMapEntryArgs struct {
	CertificateMapEntryId string  `pulumi:"certificateMapEntryId"`
	CertificateMapId      string  `pulumi:"certificateMapId"`
	Location              string  `pulumi:"location"`
	Project               *string `pulumi:"project"`
}

type LookupCertificateMapEntryResult struct {
	// A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
	Certificates []string `pulumi:"certificates"`
	// The creation timestamp of a Certificate Map Entry.
	CreateTime string `pulumi:"createTime"`
	// One or more paragraphs of text description of a certificate map entry.
	Description string `pulumi:"description"`
	// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
	Hostname string `pulumi:"hostname"`
	// Set of labels associated with a Certificate Map Entry.
	Labels map[string]string `pulumi:"labels"`
	// A predefined matcher for particular cases, other than SNI selection.
	Matcher string `pulumi:"matcher"`
	// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
	Name string `pulumi:"name"`
	// A serving state of this Certificate Map Entry.
	State string `pulumi:"state"`
	// The update timestamp of a Certificate Map Entry.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupCertificateMapEntryOutput(ctx *pulumi.Context, args LookupCertificateMapEntryOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateMapEntryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateMapEntryResult, error) {
			args := v.(LookupCertificateMapEntryArgs)
			r, err := LookupCertificateMapEntry(ctx, &args, opts...)
			return *r, err
		}).(LookupCertificateMapEntryResultOutput)
}

type LookupCertificateMapEntryOutputArgs struct {
	CertificateMapEntryId pulumi.StringInput    `pulumi:"certificateMapEntryId"`
	CertificateMapId      pulumi.StringInput    `pulumi:"certificateMapId"`
	Location              pulumi.StringInput    `pulumi:"location"`
	Project               pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCertificateMapEntryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateMapEntryArgs)(nil)).Elem()
}

type LookupCertificateMapEntryResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateMapEntryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateMapEntryResult)(nil)).Elem()
}

func (o LookupCertificateMapEntryResultOutput) ToLookupCertificateMapEntryResultOutput() LookupCertificateMapEntryResultOutput {
	return o
}

func (o LookupCertificateMapEntryResultOutput) ToLookupCertificateMapEntryResultOutputWithContext(ctx context.Context) LookupCertificateMapEntryResultOutput {
	return o
}

// A set of Certificates defines for the given `hostname`. There can be defined up to fifteen certificates in each Certificate Map Entry. Each certificate must match pattern `projects/*/locations/*/certificates/*`.
func (o LookupCertificateMapEntryResultOutput) Certificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) []string { return v.Certificates }).(pulumi.StringArrayOutput)
}

// The creation timestamp of a Certificate Map Entry.
func (o LookupCertificateMapEntryResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a certificate map entry.
func (o LookupCertificateMapEntryResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) string { return v.Description }).(pulumi.StringOutput)
}

// A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
func (o LookupCertificateMapEntryResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// Set of labels associated with a Certificate Map Entry.
func (o LookupCertificateMapEntryResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// A predefined matcher for particular cases, other than SNI selection.
func (o LookupCertificateMapEntryResultOutput) Matcher() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) string { return v.Matcher }).(pulumi.StringOutput)
}

// A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*/certificateMapEntries/*`.
func (o LookupCertificateMapEntryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) string { return v.Name }).(pulumi.StringOutput)
}

// A serving state of this Certificate Map Entry.
func (o LookupCertificateMapEntryResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) string { return v.State }).(pulumi.StringOutput)
}

// The update timestamp of a Certificate Map Entry.
func (o LookupCertificateMapEntryResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateMapEntryResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateMapEntryResultOutput{})
}
