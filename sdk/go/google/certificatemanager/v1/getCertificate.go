// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single Certificate.
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("google-native:certificatemanager/v1:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupCertificateArgs struct {
	CertificateId string  `pulumi:"certificateId"`
	Location      string  `pulumi:"location"`
	Project       *string `pulumi:"project"`
}

type LookupCertificateResult struct {
	// The creation timestamp of a Certificate.
	CreateTime string `pulumi:"createTime"`
	// One or more paragraphs of text description of a certificate.
	Description string `pulumi:"description"`
	// The expiry timestamp of a Certificate.
	ExpireTime string `pulumi:"expireTime"`
	// Set of labels associated with a Certificate.
	Labels map[string]string `pulumi:"labels"`
	// If set, contains configuration and state of a managed certificate.
	Managed ManagedCertificateResponse `pulumi:"managed"`
	// A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.
	Name string `pulumi:"name"`
	// The PEM-encoded certificate chain.
	PemCertificate string `pulumi:"pemCertificate"`
	// The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.
	SanDnsnames []string `pulumi:"sanDnsnames"`
	// Immutable. The scope of the certificate.
	Scope string `pulumi:"scope"`
	// If set, defines data of a self-managed certificate.
	SelfManaged SelfManagedCertificateResponse `pulumi:"selfManaged"`
	// The last update timestamp of a Certificate.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCertificateResult, error) {
			args := v.(LookupCertificateArgs)
			r, err := LookupCertificate(ctx, &args, opts...)
			var s LookupCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCertificateResultOutput)
}

type LookupCertificateOutputArgs struct {
	CertificateId pulumi.StringInput    `pulumi:"certificateId"`
	Location      pulumi.StringInput    `pulumi:"location"`
	Project       pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCertificateResult] {
	return pulumix.Output[LookupCertificateResult]{
		OutputState: o.OutputState,
	}
}

// The creation timestamp of a Certificate.
func (o LookupCertificateResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a certificate.
func (o LookupCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

// The expiry timestamp of a Certificate.
func (o LookupCertificateResultOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Set of labels associated with a Certificate.
func (o LookupCertificateResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCertificateResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// If set, contains configuration and state of a managed certificate.
func (o LookupCertificateResultOutput) Managed() ManagedCertificateResponseOutput {
	return o.ApplyT(func(v LookupCertificateResult) ManagedCertificateResponse { return v.Managed }).(ManagedCertificateResponseOutput)
}

// A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.
func (o LookupCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The PEM-encoded certificate chain.
func (o LookupCertificateResultOutput) PemCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.PemCertificate }).(pulumi.StringOutput)
}

// The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.
func (o LookupCertificateResultOutput) SanDnsnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []string { return v.SanDnsnames }).(pulumi.StringArrayOutput)
}

// Immutable. The scope of the certificate.
func (o LookupCertificateResultOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Scope }).(pulumi.StringOutput)
}

// If set, defines data of a self-managed certificate.
func (o LookupCertificateResultOutput) SelfManaged() SelfManagedCertificateResponseOutput {
	return o.ApplyT(func(v LookupCertificateResult) SelfManagedCertificateResponse { return v.SelfManaged }).(SelfManagedCertificateResponseOutput)
}

// The last update timestamp of a Certificate.
func (o LookupCertificateResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
