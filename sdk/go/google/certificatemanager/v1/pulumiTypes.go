// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// State of the latest attempt to authorize a domain for certificate issuance.
type AuthorizationAttemptInfoResponse struct {
	// Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
	Details string `pulumi:"details"`
	// Domain name of the authorization attempt.
	Domain string `pulumi:"domain"`
	// Reason for failure of the authorization attempt for the domain.
	FailureReason string `pulumi:"failureReason"`
	// State of the domain for managed certificate issuance.
	State string `pulumi:"state"`
}

// State of the latest attempt to authorize a domain for certificate issuance.
type AuthorizationAttemptInfoResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationAttemptInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationAttemptInfoResponse)(nil)).Elem()
}

func (o AuthorizationAttemptInfoResponseOutput) ToAuthorizationAttemptInfoResponseOutput() AuthorizationAttemptInfoResponseOutput {
	return o
}

func (o AuthorizationAttemptInfoResponseOutput) ToAuthorizationAttemptInfoResponseOutputWithContext(ctx context.Context) AuthorizationAttemptInfoResponseOutput {
	return o
}

// Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
func (o AuthorizationAttemptInfoResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.Details }).(pulumi.StringOutput)
}

// Domain name of the authorization attempt.
func (o AuthorizationAttemptInfoResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// Reason for failure of the authorization attempt for the domain.
func (o AuthorizationAttemptInfoResponseOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.FailureReason }).(pulumi.StringOutput)
}

// State of the domain for managed certificate issuance.
func (o AuthorizationAttemptInfoResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.State }).(pulumi.StringOutput)
}

type AuthorizationAttemptInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationAttemptInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationAttemptInfoResponse)(nil)).Elem()
}

func (o AuthorizationAttemptInfoResponseArrayOutput) ToAuthorizationAttemptInfoResponseArrayOutput() AuthorizationAttemptInfoResponseArrayOutput {
	return o
}

func (o AuthorizationAttemptInfoResponseArrayOutput) ToAuthorizationAttemptInfoResponseArrayOutputWithContext(ctx context.Context) AuthorizationAttemptInfoResponseArrayOutput {
	return o
}

func (o AuthorizationAttemptInfoResponseArrayOutput) Index(i pulumi.IntInput) AuthorizationAttemptInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationAttemptInfoResponse {
		return vs[0].([]AuthorizationAttemptInfoResponse)[vs[1].(int)]
	}).(AuthorizationAttemptInfoResponseOutput)
}

// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be usable by certificate.
type DnsResourceRecordResponse struct {
	// Data of the DNS Resource Record.
	Data string `pulumi:"data"`
	// Fully qualified name of the DNS Resource Record. e.g. `_acme-challenge.example.com`
	Name string `pulumi:"name"`
	// Type of the DNS Resource Record. Currently always set to "CNAME".
	Type string `pulumi:"type"`
}

// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be usable by certificate.
type DnsResourceRecordResponseOutput struct{ *pulumi.OutputState }

func (DnsResourceRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsResourceRecordResponse)(nil)).Elem()
}

func (o DnsResourceRecordResponseOutput) ToDnsResourceRecordResponseOutput() DnsResourceRecordResponseOutput {
	return o
}

func (o DnsResourceRecordResponseOutput) ToDnsResourceRecordResponseOutputWithContext(ctx context.Context) DnsResourceRecordResponseOutput {
	return o
}

// Data of the DNS Resource Record.
func (o DnsResourceRecordResponseOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v DnsResourceRecordResponse) string { return v.Data }).(pulumi.StringOutput)
}

// Fully qualified name of the DNS Resource Record. e.g. `_acme-challenge.example.com`
func (o DnsResourceRecordResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DnsResourceRecordResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the DNS Resource Record. Currently always set to "CNAME".
func (o DnsResourceRecordResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DnsResourceRecordResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Describes a Target Proxy which uses this Certificate Map.
type GclbTargetResponse struct {
	// IP configurations for this Target Proxy where the Certificate Map is serving.
	IpConfigs []IpConfigResponse `pulumi:"ipConfigs"`
	// A name must be in the format `projects/*/locations/*/targetHttpsProxies/*`.
	TargetHttpsProxy string `pulumi:"targetHttpsProxy"`
	// A name must be in the format `projects/*/locations/*/targetSslProxies/*`.
	TargetSslProxy string `pulumi:"targetSslProxy"`
}

// Describes a Target Proxy which uses this Certificate Map.
type GclbTargetResponseOutput struct{ *pulumi.OutputState }

func (GclbTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GclbTargetResponse)(nil)).Elem()
}

func (o GclbTargetResponseOutput) ToGclbTargetResponseOutput() GclbTargetResponseOutput {
	return o
}

func (o GclbTargetResponseOutput) ToGclbTargetResponseOutputWithContext(ctx context.Context) GclbTargetResponseOutput {
	return o
}

// IP configurations for this Target Proxy where the Certificate Map is serving.
func (o GclbTargetResponseOutput) IpConfigs() IpConfigResponseArrayOutput {
	return o.ApplyT(func(v GclbTargetResponse) []IpConfigResponse { return v.IpConfigs }).(IpConfigResponseArrayOutput)
}

// A name must be in the format `projects/*/locations/*/targetHttpsProxies/*`.
func (o GclbTargetResponseOutput) TargetHttpsProxy() pulumi.StringOutput {
	return o.ApplyT(func(v GclbTargetResponse) string { return v.TargetHttpsProxy }).(pulumi.StringOutput)
}

// A name must be in the format `projects/*/locations/*/targetSslProxies/*`.
func (o GclbTargetResponseOutput) TargetSslProxy() pulumi.StringOutput {
	return o.ApplyT(func(v GclbTargetResponse) string { return v.TargetSslProxy }).(pulumi.StringOutput)
}

type GclbTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (GclbTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GclbTargetResponse)(nil)).Elem()
}

func (o GclbTargetResponseArrayOutput) ToGclbTargetResponseArrayOutput() GclbTargetResponseArrayOutput {
	return o
}

func (o GclbTargetResponseArrayOutput) ToGclbTargetResponseArrayOutputWithContext(ctx context.Context) GclbTargetResponseArrayOutput {
	return o
}

func (o GclbTargetResponseArrayOutput) Index(i pulumi.IntInput) GclbTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GclbTargetResponse {
		return vs[0].([]GclbTargetResponse)[vs[1].(int)]
	}).(GclbTargetResponseOutput)
}

// Defines IP configuration where this Certificate Map is serving.
type IpConfigResponse struct {
	// An external IP address.
	IpAddress string `pulumi:"ipAddress"`
	// Ports.
	Ports []int `pulumi:"ports"`
}

// Defines IP configuration where this Certificate Map is serving.
type IpConfigResponseOutput struct{ *pulumi.OutputState }

func (IpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpConfigResponse)(nil)).Elem()
}

func (o IpConfigResponseOutput) ToIpConfigResponseOutput() IpConfigResponseOutput {
	return o
}

func (o IpConfigResponseOutput) ToIpConfigResponseOutputWithContext(ctx context.Context) IpConfigResponseOutput {
	return o
}

// An external IP address.
func (o IpConfigResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v IpConfigResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Ports.
func (o IpConfigResponseOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v IpConfigResponse) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type IpConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (IpConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpConfigResponse)(nil)).Elem()
}

func (o IpConfigResponseArrayOutput) ToIpConfigResponseArrayOutput() IpConfigResponseArrayOutput {
	return o
}

func (o IpConfigResponseArrayOutput) ToIpConfigResponseArrayOutputWithContext(ctx context.Context) IpConfigResponseArrayOutput {
	return o
}

func (o IpConfigResponseArrayOutput) Index(i pulumi.IntInput) IpConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpConfigResponse {
		return vs[0].([]IpConfigResponse)[vs[1].(int)]
	}).(IpConfigResponseOutput)
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificate struct {
	// Immutable. Authorizations that will be used for performing domain authorization.
	DnsAuthorizations []string `pulumi:"dnsAuthorizations"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains []string `pulumi:"domains"`
	// Information about issues with provisioning a Managed Certificate.
	ProvisioningIssue *ProvisioningIssue `pulumi:"provisioningIssue"`
}

// ManagedCertificateInput is an input type that accepts ManagedCertificateArgs and ManagedCertificateOutput values.
// You can construct a concrete instance of `ManagedCertificateInput` via:
//
//          ManagedCertificateArgs{...}
type ManagedCertificateInput interface {
	pulumi.Input

	ToManagedCertificateOutput() ManagedCertificateOutput
	ToManagedCertificateOutputWithContext(context.Context) ManagedCertificateOutput
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateArgs struct {
	// Immutable. Authorizations that will be used for performing domain authorization.
	DnsAuthorizations pulumi.StringArrayInput `pulumi:"dnsAuthorizations"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// Information about issues with provisioning a Managed Certificate.
	ProvisioningIssue ProvisioningIssuePtrInput `pulumi:"provisioningIssue"`
}

func (ManagedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificate)(nil)).Elem()
}

func (i ManagedCertificateArgs) ToManagedCertificateOutput() ManagedCertificateOutput {
	return i.ToManagedCertificateOutputWithContext(context.Background())
}

func (i ManagedCertificateArgs) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificateOutput)
}

func (i ManagedCertificateArgs) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return i.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (i ManagedCertificateArgs) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificateOutput).ToManagedCertificatePtrOutputWithContext(ctx)
}

// ManagedCertificatePtrInput is an input type that accepts ManagedCertificateArgs, ManagedCertificatePtr and ManagedCertificatePtrOutput values.
// You can construct a concrete instance of `ManagedCertificatePtrInput` via:
//
//          ManagedCertificateArgs{...}
//
//  or:
//
//          nil
type ManagedCertificatePtrInput interface {
	pulumi.Input

	ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput
	ToManagedCertificatePtrOutputWithContext(context.Context) ManagedCertificatePtrOutput
}

type managedCertificatePtrType ManagedCertificateArgs

func ManagedCertificatePtr(v *ManagedCertificateArgs) ManagedCertificatePtrInput {
	return (*managedCertificatePtrType)(v)
}

func (*managedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificate)(nil)).Elem()
}

func (i *managedCertificatePtrType) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return i.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (i *managedCertificatePtrType) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificatePtrOutput)
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateOutput struct{ *pulumi.OutputState }

func (ManagedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificate)(nil)).Elem()
}

func (o ManagedCertificateOutput) ToManagedCertificateOutput() ManagedCertificateOutput {
	return o
}

func (o ManagedCertificateOutput) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return o
}

func (o ManagedCertificateOutput) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return o.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (o ManagedCertificateOutput) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedCertificate) *ManagedCertificate {
		return &v
	}).(ManagedCertificatePtrOutput)
}

// Immutable. Authorizations that will be used for performing domain authorization.
func (o ManagedCertificateOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificate) []string { return v.DnsAuthorizations }).(pulumi.StringArrayOutput)
}

// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
func (o ManagedCertificateOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificate) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Information about issues with provisioning a Managed Certificate.
func (o ManagedCertificateOutput) ProvisioningIssue() ProvisioningIssuePtrOutput {
	return o.ApplyT(func(v ManagedCertificate) *ProvisioningIssue { return v.ProvisioningIssue }).(ProvisioningIssuePtrOutput)
}

type ManagedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ManagedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificate)(nil)).Elem()
}

func (o ManagedCertificatePtrOutput) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return o
}

func (o ManagedCertificatePtrOutput) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return o
}

func (o ManagedCertificatePtrOutput) Elem() ManagedCertificateOutput {
	return o.ApplyT(func(v *ManagedCertificate) ManagedCertificate {
		if v != nil {
			return *v
		}
		var ret ManagedCertificate
		return ret
	}).(ManagedCertificateOutput)
}

// Immutable. Authorizations that will be used for performing domain authorization.
func (o ManagedCertificatePtrOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedCertificate) []string {
		if v == nil {
			return nil
		}
		return v.DnsAuthorizations
	}).(pulumi.StringArrayOutput)
}

// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
func (o ManagedCertificatePtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedCertificate) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// Information about issues with provisioning a Managed Certificate.
func (o ManagedCertificatePtrOutput) ProvisioningIssue() ProvisioningIssuePtrOutput {
	return o.ApplyT(func(v *ManagedCertificate) *ProvisioningIssue {
		if v == nil {
			return nil
		}
		return v.ProvisioningIssue
	}).(ProvisioningIssuePtrOutput)
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateResponse struct {
	// Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
	AuthorizationAttemptInfo []AuthorizationAttemptInfoResponse `pulumi:"authorizationAttemptInfo"`
	// Immutable. Authorizations that will be used for performing domain authorization.
	DnsAuthorizations []string `pulumi:"dnsAuthorizations"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains []string `pulumi:"domains"`
	// Information about issues with provisioning a Managed Certificate.
	ProvisioningIssue ProvisioningIssueResponse `pulumi:"provisioningIssue"`
	// State of the managed certificate resource.
	State string `pulumi:"state"`
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateResponseOutput struct{ *pulumi.OutputState }

func (ManagedCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificateResponse)(nil)).Elem()
}

func (o ManagedCertificateResponseOutput) ToManagedCertificateResponseOutput() ManagedCertificateResponseOutput {
	return o
}

func (o ManagedCertificateResponseOutput) ToManagedCertificateResponseOutputWithContext(ctx context.Context) ManagedCertificateResponseOutput {
	return o
}

// Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
func (o ManagedCertificateResponseOutput) AuthorizationAttemptInfo() AuthorizationAttemptInfoResponseArrayOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) []AuthorizationAttemptInfoResponse {
		return v.AuthorizationAttemptInfo
	}).(AuthorizationAttemptInfoResponseArrayOutput)
}

// Immutable. Authorizations that will be used for performing domain authorization.
func (o ManagedCertificateResponseOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) []string { return v.DnsAuthorizations }).(pulumi.StringArrayOutput)
}

// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
func (o ManagedCertificateResponseOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Information about issues with provisioning a Managed Certificate.
func (o ManagedCertificateResponseOutput) ProvisioningIssue() ProvisioningIssueResponseOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) ProvisioningIssueResponse { return v.ProvisioningIssue }).(ProvisioningIssueResponseOutput)
}

// State of the managed certificate resource.
func (o ManagedCertificateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) string { return v.State }).(pulumi.StringOutput)
}

// Information about issues with provisioning a Managed Certificate.
type ProvisioningIssue struct {
	// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
	Details *string `pulumi:"details"`
	// Reason for provisioning failures.
	Reason *ProvisioningIssueReason `pulumi:"reason"`
}

// ProvisioningIssueInput is an input type that accepts ProvisioningIssueArgs and ProvisioningIssueOutput values.
// You can construct a concrete instance of `ProvisioningIssueInput` via:
//
//          ProvisioningIssueArgs{...}
type ProvisioningIssueInput interface {
	pulumi.Input

	ToProvisioningIssueOutput() ProvisioningIssueOutput
	ToProvisioningIssueOutputWithContext(context.Context) ProvisioningIssueOutput
}

// Information about issues with provisioning a Managed Certificate.
type ProvisioningIssueArgs struct {
	// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// Reason for provisioning failures.
	Reason ProvisioningIssueReasonPtrInput `pulumi:"reason"`
}

func (ProvisioningIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningIssue)(nil)).Elem()
}

func (i ProvisioningIssueArgs) ToProvisioningIssueOutput() ProvisioningIssueOutput {
	return i.ToProvisioningIssueOutputWithContext(context.Background())
}

func (i ProvisioningIssueArgs) ToProvisioningIssueOutputWithContext(ctx context.Context) ProvisioningIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningIssueOutput)
}

func (i ProvisioningIssueArgs) ToProvisioningIssuePtrOutput() ProvisioningIssuePtrOutput {
	return i.ToProvisioningIssuePtrOutputWithContext(context.Background())
}

func (i ProvisioningIssueArgs) ToProvisioningIssuePtrOutputWithContext(ctx context.Context) ProvisioningIssuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningIssueOutput).ToProvisioningIssuePtrOutputWithContext(ctx)
}

// ProvisioningIssuePtrInput is an input type that accepts ProvisioningIssueArgs, ProvisioningIssuePtr and ProvisioningIssuePtrOutput values.
// You can construct a concrete instance of `ProvisioningIssuePtrInput` via:
//
//          ProvisioningIssueArgs{...}
//
//  or:
//
//          nil
type ProvisioningIssuePtrInput interface {
	pulumi.Input

	ToProvisioningIssuePtrOutput() ProvisioningIssuePtrOutput
	ToProvisioningIssuePtrOutputWithContext(context.Context) ProvisioningIssuePtrOutput
}

type provisioningIssuePtrType ProvisioningIssueArgs

func ProvisioningIssuePtr(v *ProvisioningIssueArgs) ProvisioningIssuePtrInput {
	return (*provisioningIssuePtrType)(v)
}

func (*provisioningIssuePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningIssue)(nil)).Elem()
}

func (i *provisioningIssuePtrType) ToProvisioningIssuePtrOutput() ProvisioningIssuePtrOutput {
	return i.ToProvisioningIssuePtrOutputWithContext(context.Background())
}

func (i *provisioningIssuePtrType) ToProvisioningIssuePtrOutputWithContext(ctx context.Context) ProvisioningIssuePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningIssuePtrOutput)
}

// Information about issues with provisioning a Managed Certificate.
type ProvisioningIssueOutput struct{ *pulumi.OutputState }

func (ProvisioningIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningIssue)(nil)).Elem()
}

func (o ProvisioningIssueOutput) ToProvisioningIssueOutput() ProvisioningIssueOutput {
	return o
}

func (o ProvisioningIssueOutput) ToProvisioningIssueOutputWithContext(ctx context.Context) ProvisioningIssueOutput {
	return o
}

func (o ProvisioningIssueOutput) ToProvisioningIssuePtrOutput() ProvisioningIssuePtrOutput {
	return o.ToProvisioningIssuePtrOutputWithContext(context.Background())
}

func (o ProvisioningIssueOutput) ToProvisioningIssuePtrOutputWithContext(ctx context.Context) ProvisioningIssuePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisioningIssue) *ProvisioningIssue {
		return &v
	}).(ProvisioningIssuePtrOutput)
}

// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
func (o ProvisioningIssueOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProvisioningIssue) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Reason for provisioning failures.
func (o ProvisioningIssueOutput) Reason() ProvisioningIssueReasonPtrOutput {
	return o.ApplyT(func(v ProvisioningIssue) *ProvisioningIssueReason { return v.Reason }).(ProvisioningIssueReasonPtrOutput)
}

type ProvisioningIssuePtrOutput struct{ *pulumi.OutputState }

func (ProvisioningIssuePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningIssue)(nil)).Elem()
}

func (o ProvisioningIssuePtrOutput) ToProvisioningIssuePtrOutput() ProvisioningIssuePtrOutput {
	return o
}

func (o ProvisioningIssuePtrOutput) ToProvisioningIssuePtrOutputWithContext(ctx context.Context) ProvisioningIssuePtrOutput {
	return o
}

func (o ProvisioningIssuePtrOutput) Elem() ProvisioningIssueOutput {
	return o.ApplyT(func(v *ProvisioningIssue) ProvisioningIssue {
		if v != nil {
			return *v
		}
		var ret ProvisioningIssue
		return ret
	}).(ProvisioningIssueOutput)
}

// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
func (o ProvisioningIssuePtrOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProvisioningIssue) *string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringPtrOutput)
}

// Reason for provisioning failures.
func (o ProvisioningIssuePtrOutput) Reason() ProvisioningIssueReasonPtrOutput {
	return o.ApplyT(func(v *ProvisioningIssue) *ProvisioningIssueReason {
		if v == nil {
			return nil
		}
		return v.Reason
	}).(ProvisioningIssueReasonPtrOutput)
}

// Information about issues with provisioning a Managed Certificate.
type ProvisioningIssueResponse struct {
	// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
	Details string `pulumi:"details"`
	// Reason for provisioning failures.
	Reason string `pulumi:"reason"`
}

// Information about issues with provisioning a Managed Certificate.
type ProvisioningIssueResponseOutput struct{ *pulumi.OutputState }

func (ProvisioningIssueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningIssueResponse)(nil)).Elem()
}

func (o ProvisioningIssueResponseOutput) ToProvisioningIssueResponseOutput() ProvisioningIssueResponseOutput {
	return o
}

func (o ProvisioningIssueResponseOutput) ToProvisioningIssueResponseOutputWithContext(ctx context.Context) ProvisioningIssueResponseOutput {
	return o
}

// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
func (o ProvisioningIssueResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisioningIssueResponse) string { return v.Details }).(pulumi.StringOutput)
}

// Reason for provisioning failures.
func (o ProvisioningIssueResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisioningIssueResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificate struct {
	// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
	PemCertificate *string `pulumi:"pemCertificate"`
	// Input only. The PEM-encoded private key of the leaf certificate.
	PemPrivateKey *string `pulumi:"pemPrivateKey"`
}

// SelfManagedCertificateInput is an input type that accepts SelfManagedCertificateArgs and SelfManagedCertificateOutput values.
// You can construct a concrete instance of `SelfManagedCertificateInput` via:
//
//          SelfManagedCertificateArgs{...}
type SelfManagedCertificateInput interface {
	pulumi.Input

	ToSelfManagedCertificateOutput() SelfManagedCertificateOutput
	ToSelfManagedCertificateOutputWithContext(context.Context) SelfManagedCertificateOutput
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateArgs struct {
	// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
	PemCertificate pulumi.StringPtrInput `pulumi:"pemCertificate"`
	// Input only. The PEM-encoded private key of the leaf certificate.
	PemPrivateKey pulumi.StringPtrInput `pulumi:"pemPrivateKey"`
}

func (SelfManagedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfManagedCertificate)(nil)).Elem()
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificateOutput() SelfManagedCertificateOutput {
	return i.ToSelfManagedCertificateOutputWithContext(context.Background())
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificateOutputWithContext(ctx context.Context) SelfManagedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfManagedCertificateOutput)
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return i.ToSelfManagedCertificatePtrOutputWithContext(context.Background())
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfManagedCertificateOutput).ToSelfManagedCertificatePtrOutputWithContext(ctx)
}

// SelfManagedCertificatePtrInput is an input type that accepts SelfManagedCertificateArgs, SelfManagedCertificatePtr and SelfManagedCertificatePtrOutput values.
// You can construct a concrete instance of `SelfManagedCertificatePtrInput` via:
//
//          SelfManagedCertificateArgs{...}
//
//  or:
//
//          nil
type SelfManagedCertificatePtrInput interface {
	pulumi.Input

	ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput
	ToSelfManagedCertificatePtrOutputWithContext(context.Context) SelfManagedCertificatePtrOutput
}

type selfManagedCertificatePtrType SelfManagedCertificateArgs

func SelfManagedCertificatePtr(v *SelfManagedCertificateArgs) SelfManagedCertificatePtrInput {
	return (*selfManagedCertificatePtrType)(v)
}

func (*selfManagedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfManagedCertificate)(nil)).Elem()
}

func (i *selfManagedCertificatePtrType) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return i.ToSelfManagedCertificatePtrOutputWithContext(context.Background())
}

func (i *selfManagedCertificatePtrType) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfManagedCertificatePtrOutput)
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateOutput struct{ *pulumi.OutputState }

func (SelfManagedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfManagedCertificate)(nil)).Elem()
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificateOutput() SelfManagedCertificateOutput {
	return o
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificateOutputWithContext(ctx context.Context) SelfManagedCertificateOutput {
	return o
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return o.ToSelfManagedCertificatePtrOutputWithContext(context.Background())
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelfManagedCertificate) *SelfManagedCertificate {
		return &v
	}).(SelfManagedCertificatePtrOutput)
}

// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
func (o SelfManagedCertificateOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfManagedCertificate) *string { return v.PemCertificate }).(pulumi.StringPtrOutput)
}

// Input only. The PEM-encoded private key of the leaf certificate.
func (o SelfManagedCertificateOutput) PemPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfManagedCertificate) *string { return v.PemPrivateKey }).(pulumi.StringPtrOutput)
}

type SelfManagedCertificatePtrOutput struct{ *pulumi.OutputState }

func (SelfManagedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfManagedCertificate)(nil)).Elem()
}

func (o SelfManagedCertificatePtrOutput) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return o
}

func (o SelfManagedCertificatePtrOutput) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return o
}

func (o SelfManagedCertificatePtrOutput) Elem() SelfManagedCertificateOutput {
	return o.ApplyT(func(v *SelfManagedCertificate) SelfManagedCertificate {
		if v != nil {
			return *v
		}
		var ret SelfManagedCertificate
		return ret
	}).(SelfManagedCertificateOutput)
}

// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
func (o SelfManagedCertificatePtrOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfManagedCertificate) *string {
		if v == nil {
			return nil
		}
		return v.PemCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. The PEM-encoded private key of the leaf certificate.
func (o SelfManagedCertificatePtrOutput) PemPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfManagedCertificate) *string {
		if v == nil {
			return nil
		}
		return v.PemPrivateKey
	}).(pulumi.StringPtrOutput)
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateResponse struct {
	// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
	PemCertificate string `pulumi:"pemCertificate"`
	// Input only. The PEM-encoded private key of the leaf certificate.
	PemPrivateKey string `pulumi:"pemPrivateKey"`
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateResponseOutput struct{ *pulumi.OutputState }

func (SelfManagedCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfManagedCertificateResponse)(nil)).Elem()
}

func (o SelfManagedCertificateResponseOutput) ToSelfManagedCertificateResponseOutput() SelfManagedCertificateResponseOutput {
	return o
}

func (o SelfManagedCertificateResponseOutput) ToSelfManagedCertificateResponseOutputWithContext(ctx context.Context) SelfManagedCertificateResponseOutput {
	return o
}

// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
func (o SelfManagedCertificateResponseOutput) PemCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v SelfManagedCertificateResponse) string { return v.PemCertificate }).(pulumi.StringOutput)
}

// Input only. The PEM-encoded private key of the leaf certificate.
func (o SelfManagedCertificateResponseOutput) PemPrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SelfManagedCertificateResponse) string { return v.PemPrivateKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedCertificateInput)(nil)).Elem(), ManagedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedCertificatePtrInput)(nil)).Elem(), ManagedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisioningIssueInput)(nil)).Elem(), ProvisioningIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisioningIssuePtrInput)(nil)).Elem(), ProvisioningIssueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfManagedCertificateInput)(nil)).Elem(), SelfManagedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfManagedCertificatePtrInput)(nil)).Elem(), SelfManagedCertificateArgs{})
	pulumi.RegisterOutputType(AuthorizationAttemptInfoResponseOutput{})
	pulumi.RegisterOutputType(AuthorizationAttemptInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(DnsResourceRecordResponseOutput{})
	pulumi.RegisterOutputType(GclbTargetResponseOutput{})
	pulumi.RegisterOutputType(GclbTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(IpConfigResponseOutput{})
	pulumi.RegisterOutputType(IpConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedCertificateOutput{})
	pulumi.RegisterOutputType(ManagedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ManagedCertificateResponseOutput{})
	pulumi.RegisterOutputType(ProvisioningIssueOutput{})
	pulumi.RegisterOutputType(ProvisioningIssuePtrOutput{})
	pulumi.RegisterOutputType(ProvisioningIssueResponseOutput{})
	pulumi.RegisterOutputType(SelfManagedCertificateOutput{})
	pulumi.RegisterOutputType(SelfManagedCertificatePtrOutput{})
	pulumi.RegisterOutputType(SelfManagedCertificateResponseOutput{})
}
