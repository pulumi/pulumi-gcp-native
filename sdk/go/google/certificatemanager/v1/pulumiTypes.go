// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// State of the latest attempt to authorize a domain for certificate issuance.
type AuthorizationAttemptInfoResponse struct {
	// Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.
	Details string `pulumi:"details"`
	// Domain name of the authorization attempt.
	Domain string `pulumi:"domain"`
	// Reason for failure of the authorization attempt for the domain.
	FailureReason string `pulumi:"failureReason"`
	// State of the domain for managed certificate issuance.
	State string `pulumi:"state"`
}

// State of the latest attempt to authorize a domain for certificate issuance.
type AuthorizationAttemptInfoResponseOutput struct{ *pulumi.OutputState }

func (AuthorizationAttemptInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationAttemptInfoResponse)(nil)).Elem()
}

func (o AuthorizationAttemptInfoResponseOutput) ToAuthorizationAttemptInfoResponseOutput() AuthorizationAttemptInfoResponseOutput {
	return o
}

func (o AuthorizationAttemptInfoResponseOutput) ToAuthorizationAttemptInfoResponseOutputWithContext(ctx context.Context) AuthorizationAttemptInfoResponseOutput {
	return o
}

// Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.
func (o AuthorizationAttemptInfoResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.Details }).(pulumi.StringOutput)
}

// Domain name of the authorization attempt.
func (o AuthorizationAttemptInfoResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// Reason for failure of the authorization attempt for the domain.
func (o AuthorizationAttemptInfoResponseOutput) FailureReason() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.FailureReason }).(pulumi.StringOutput)
}

// State of the domain for managed certificate issuance.
func (o AuthorizationAttemptInfoResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationAttemptInfoResponse) string { return v.State }).(pulumi.StringOutput)
}

type AuthorizationAttemptInfoResponseArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationAttemptInfoResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationAttemptInfoResponse)(nil)).Elem()
}

func (o AuthorizationAttemptInfoResponseArrayOutput) ToAuthorizationAttemptInfoResponseArrayOutput() AuthorizationAttemptInfoResponseArrayOutput {
	return o
}

func (o AuthorizationAttemptInfoResponseArrayOutput) ToAuthorizationAttemptInfoResponseArrayOutputWithContext(ctx context.Context) AuthorizationAttemptInfoResponseArrayOutput {
	return o
}

func (o AuthorizationAttemptInfoResponseArrayOutput) Index(i pulumi.IntInput) AuthorizationAttemptInfoResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationAttemptInfoResponse {
		return vs[0].([]AuthorizationAttemptInfoResponse)[vs[1].(int)]
	}).(AuthorizationAttemptInfoResponseOutput)
}

// The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
type CertificateAuthorityConfig struct {
	// Defines a CertificateAuthorityServiceConfig.
	CertificateAuthorityServiceConfig *CertificateAuthorityServiceConfig `pulumi:"certificateAuthorityServiceConfig"`
}

// CertificateAuthorityConfigInput is an input type that accepts CertificateAuthorityConfigArgs and CertificateAuthorityConfigOutput values.
// You can construct a concrete instance of `CertificateAuthorityConfigInput` via:
//
//	CertificateAuthorityConfigArgs{...}
type CertificateAuthorityConfigInput interface {
	pulumi.Input

	ToCertificateAuthorityConfigOutput() CertificateAuthorityConfigOutput
	ToCertificateAuthorityConfigOutputWithContext(context.Context) CertificateAuthorityConfigOutput
}

// The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
type CertificateAuthorityConfigArgs struct {
	// Defines a CertificateAuthorityServiceConfig.
	CertificateAuthorityServiceConfig CertificateAuthorityServiceConfigPtrInput `pulumi:"certificateAuthorityServiceConfig"`
}

func (CertificateAuthorityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityConfig)(nil)).Elem()
}

func (i CertificateAuthorityConfigArgs) ToCertificateAuthorityConfigOutput() CertificateAuthorityConfigOutput {
	return i.ToCertificateAuthorityConfigOutputWithContext(context.Background())
}

func (i CertificateAuthorityConfigArgs) ToCertificateAuthorityConfigOutputWithContext(ctx context.Context) CertificateAuthorityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityConfigOutput)
}

// The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
type CertificateAuthorityConfigOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityConfig)(nil)).Elem()
}

func (o CertificateAuthorityConfigOutput) ToCertificateAuthorityConfigOutput() CertificateAuthorityConfigOutput {
	return o
}

func (o CertificateAuthorityConfigOutput) ToCertificateAuthorityConfigOutputWithContext(ctx context.Context) CertificateAuthorityConfigOutput {
	return o
}

// Defines a CertificateAuthorityServiceConfig.
func (o CertificateAuthorityConfigOutput) CertificateAuthorityServiceConfig() CertificateAuthorityServiceConfigPtrOutput {
	return o.ApplyT(func(v CertificateAuthorityConfig) *CertificateAuthorityServiceConfig {
		return v.CertificateAuthorityServiceConfig
	}).(CertificateAuthorityServiceConfigPtrOutput)
}

// The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
type CertificateAuthorityConfigResponse struct {
	// Defines a CertificateAuthorityServiceConfig.
	CertificateAuthorityServiceConfig CertificateAuthorityServiceConfigResponse `pulumi:"certificateAuthorityServiceConfig"`
}

// The CA that issues the workload certificate. It includes CA address, type, authentication to CA service, etc.
type CertificateAuthorityConfigResponseOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityConfigResponse)(nil)).Elem()
}

func (o CertificateAuthorityConfigResponseOutput) ToCertificateAuthorityConfigResponseOutput() CertificateAuthorityConfigResponseOutput {
	return o
}

func (o CertificateAuthorityConfigResponseOutput) ToCertificateAuthorityConfigResponseOutputWithContext(ctx context.Context) CertificateAuthorityConfigResponseOutput {
	return o
}

// Defines a CertificateAuthorityServiceConfig.
func (o CertificateAuthorityConfigResponseOutput) CertificateAuthorityServiceConfig() CertificateAuthorityServiceConfigResponseOutput {
	return o.ApplyT(func(v CertificateAuthorityConfigResponse) CertificateAuthorityServiceConfigResponse {
		return v.CertificateAuthorityServiceConfig
	}).(CertificateAuthorityServiceConfigResponseOutput)
}

// Contains information required to contact CA service.
type CertificateAuthorityServiceConfig struct {
	// A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
	CaPool string `pulumi:"caPool"`
}

// CertificateAuthorityServiceConfigInput is an input type that accepts CertificateAuthorityServiceConfigArgs and CertificateAuthorityServiceConfigOutput values.
// You can construct a concrete instance of `CertificateAuthorityServiceConfigInput` via:
//
//	CertificateAuthorityServiceConfigArgs{...}
type CertificateAuthorityServiceConfigInput interface {
	pulumi.Input

	ToCertificateAuthorityServiceConfigOutput() CertificateAuthorityServiceConfigOutput
	ToCertificateAuthorityServiceConfigOutputWithContext(context.Context) CertificateAuthorityServiceConfigOutput
}

// Contains information required to contact CA service.
type CertificateAuthorityServiceConfigArgs struct {
	// A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
	CaPool pulumi.StringInput `pulumi:"caPool"`
}

func (CertificateAuthorityServiceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityServiceConfig)(nil)).Elem()
}

func (i CertificateAuthorityServiceConfigArgs) ToCertificateAuthorityServiceConfigOutput() CertificateAuthorityServiceConfigOutput {
	return i.ToCertificateAuthorityServiceConfigOutputWithContext(context.Background())
}

func (i CertificateAuthorityServiceConfigArgs) ToCertificateAuthorityServiceConfigOutputWithContext(ctx context.Context) CertificateAuthorityServiceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityServiceConfigOutput)
}

func (i CertificateAuthorityServiceConfigArgs) ToCertificateAuthorityServiceConfigPtrOutput() CertificateAuthorityServiceConfigPtrOutput {
	return i.ToCertificateAuthorityServiceConfigPtrOutputWithContext(context.Background())
}

func (i CertificateAuthorityServiceConfigArgs) ToCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateAuthorityServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityServiceConfigOutput).ToCertificateAuthorityServiceConfigPtrOutputWithContext(ctx)
}

// CertificateAuthorityServiceConfigPtrInput is an input type that accepts CertificateAuthorityServiceConfigArgs, CertificateAuthorityServiceConfigPtr and CertificateAuthorityServiceConfigPtrOutput values.
// You can construct a concrete instance of `CertificateAuthorityServiceConfigPtrInput` via:
//
//	        CertificateAuthorityServiceConfigArgs{...}
//
//	or:
//
//	        nil
type CertificateAuthorityServiceConfigPtrInput interface {
	pulumi.Input

	ToCertificateAuthorityServiceConfigPtrOutput() CertificateAuthorityServiceConfigPtrOutput
	ToCertificateAuthorityServiceConfigPtrOutputWithContext(context.Context) CertificateAuthorityServiceConfigPtrOutput
}

type certificateAuthorityServiceConfigPtrType CertificateAuthorityServiceConfigArgs

func CertificateAuthorityServiceConfigPtr(v *CertificateAuthorityServiceConfigArgs) CertificateAuthorityServiceConfigPtrInput {
	return (*certificateAuthorityServiceConfigPtrType)(v)
}

func (*certificateAuthorityServiceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthorityServiceConfig)(nil)).Elem()
}

func (i *certificateAuthorityServiceConfigPtrType) ToCertificateAuthorityServiceConfigPtrOutput() CertificateAuthorityServiceConfigPtrOutput {
	return i.ToCertificateAuthorityServiceConfigPtrOutputWithContext(context.Background())
}

func (i *certificateAuthorityServiceConfigPtrType) ToCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateAuthorityServiceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateAuthorityServiceConfigPtrOutput)
}

// Contains information required to contact CA service.
type CertificateAuthorityServiceConfigOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityServiceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityServiceConfig)(nil)).Elem()
}

func (o CertificateAuthorityServiceConfigOutput) ToCertificateAuthorityServiceConfigOutput() CertificateAuthorityServiceConfigOutput {
	return o
}

func (o CertificateAuthorityServiceConfigOutput) ToCertificateAuthorityServiceConfigOutputWithContext(ctx context.Context) CertificateAuthorityServiceConfigOutput {
	return o
}

func (o CertificateAuthorityServiceConfigOutput) ToCertificateAuthorityServiceConfigPtrOutput() CertificateAuthorityServiceConfigPtrOutput {
	return o.ToCertificateAuthorityServiceConfigPtrOutputWithContext(context.Background())
}

func (o CertificateAuthorityServiceConfigOutput) ToCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateAuthorityServiceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateAuthorityServiceConfig) *CertificateAuthorityServiceConfig {
		return &v
	}).(CertificateAuthorityServiceConfigPtrOutput)
}

// A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
func (o CertificateAuthorityServiceConfigOutput) CaPool() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateAuthorityServiceConfig) string { return v.CaPool }).(pulumi.StringOutput)
}

type CertificateAuthorityServiceConfigPtrOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityServiceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateAuthorityServiceConfig)(nil)).Elem()
}

func (o CertificateAuthorityServiceConfigPtrOutput) ToCertificateAuthorityServiceConfigPtrOutput() CertificateAuthorityServiceConfigPtrOutput {
	return o
}

func (o CertificateAuthorityServiceConfigPtrOutput) ToCertificateAuthorityServiceConfigPtrOutputWithContext(ctx context.Context) CertificateAuthorityServiceConfigPtrOutput {
	return o
}

func (o CertificateAuthorityServiceConfigPtrOutput) Elem() CertificateAuthorityServiceConfigOutput {
	return o.ApplyT(func(v *CertificateAuthorityServiceConfig) CertificateAuthorityServiceConfig {
		if v != nil {
			return *v
		}
		var ret CertificateAuthorityServiceConfig
		return ret
	}).(CertificateAuthorityServiceConfigOutput)
}

// A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
func (o CertificateAuthorityServiceConfigPtrOutput) CaPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateAuthorityServiceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.CaPool
	}).(pulumi.StringPtrOutput)
}

// Contains information required to contact CA service.
type CertificateAuthorityServiceConfigResponse struct {
	// A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
	CaPool string `pulumi:"caPool"`
}

// Contains information required to contact CA service.
type CertificateAuthorityServiceConfigResponseOutput struct{ *pulumi.OutputState }

func (CertificateAuthorityServiceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateAuthorityServiceConfigResponse)(nil)).Elem()
}

func (o CertificateAuthorityServiceConfigResponseOutput) ToCertificateAuthorityServiceConfigResponseOutput() CertificateAuthorityServiceConfigResponseOutput {
	return o
}

func (o CertificateAuthorityServiceConfigResponseOutput) ToCertificateAuthorityServiceConfigResponseOutputWithContext(ctx context.Context) CertificateAuthorityServiceConfigResponseOutput {
	return o
}

// A CA pool resource used to issue a certificate. The CA pool string has a relative resource path following the form "projects/{project}/locations/{location}/caPools/{ca_pool}".
func (o CertificateAuthorityServiceConfigResponseOutput) CaPool() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateAuthorityServiceConfigResponse) string { return v.CaPool }).(pulumi.StringOutput)
}

// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be usable by certificate.
type DnsResourceRecordResponse struct {
	// Data of the DNS Resource Record.
	Data string `pulumi:"data"`
	// Fully qualified name of the DNS Resource Record. e.g. `_acme-challenge.example.com`
	Name string `pulumi:"name"`
	// Type of the DNS Resource Record. Currently always set to "CNAME".
	Type string `pulumi:"type"`
}

// The structure describing the DNS Resource Record that needs to be added to DNS configuration for the authorization to be usable by certificate.
type DnsResourceRecordResponseOutput struct{ *pulumi.OutputState }

func (DnsResourceRecordResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsResourceRecordResponse)(nil)).Elem()
}

func (o DnsResourceRecordResponseOutput) ToDnsResourceRecordResponseOutput() DnsResourceRecordResponseOutput {
	return o
}

func (o DnsResourceRecordResponseOutput) ToDnsResourceRecordResponseOutputWithContext(ctx context.Context) DnsResourceRecordResponseOutput {
	return o
}

// Data of the DNS Resource Record.
func (o DnsResourceRecordResponseOutput) Data() pulumi.StringOutput {
	return o.ApplyT(func(v DnsResourceRecordResponse) string { return v.Data }).(pulumi.StringOutput)
}

// Fully qualified name of the DNS Resource Record. e.g. `_acme-challenge.example.com`
func (o DnsResourceRecordResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DnsResourceRecordResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Type of the DNS Resource Record. Currently always set to "CNAME".
func (o DnsResourceRecordResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v DnsResourceRecordResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Describes a Target Proxy that uses this Certificate Map.
type GclbTargetResponse struct {
	// IP configurations for this Target Proxy where the Certificate Map is serving.
	IpConfigs []IpConfigResponse `pulumi:"ipConfigs"`
	// This field returns the resource name in the following format: `//compute.googleapis.com/projects/*/global/targetHttpsProxies/*`.
	TargetHttpsProxy string `pulumi:"targetHttpsProxy"`
	// This field returns the resource name in the following format: `//compute.googleapis.com/projects/*/global/targetSslProxies/*`.
	TargetSslProxy string `pulumi:"targetSslProxy"`
}

// Describes a Target Proxy that uses this Certificate Map.
type GclbTargetResponseOutput struct{ *pulumi.OutputState }

func (GclbTargetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GclbTargetResponse)(nil)).Elem()
}

func (o GclbTargetResponseOutput) ToGclbTargetResponseOutput() GclbTargetResponseOutput {
	return o
}

func (o GclbTargetResponseOutput) ToGclbTargetResponseOutputWithContext(ctx context.Context) GclbTargetResponseOutput {
	return o
}

// IP configurations for this Target Proxy where the Certificate Map is serving.
func (o GclbTargetResponseOutput) IpConfigs() IpConfigResponseArrayOutput {
	return o.ApplyT(func(v GclbTargetResponse) []IpConfigResponse { return v.IpConfigs }).(IpConfigResponseArrayOutput)
}

// This field returns the resource name in the following format: `//compute.googleapis.com/projects/*/global/targetHttpsProxies/*`.
func (o GclbTargetResponseOutput) TargetHttpsProxy() pulumi.StringOutput {
	return o.ApplyT(func(v GclbTargetResponse) string { return v.TargetHttpsProxy }).(pulumi.StringOutput)
}

// This field returns the resource name in the following format: `//compute.googleapis.com/projects/*/global/targetSslProxies/*`.
func (o GclbTargetResponseOutput) TargetSslProxy() pulumi.StringOutput {
	return o.ApplyT(func(v GclbTargetResponse) string { return v.TargetSslProxy }).(pulumi.StringOutput)
}

type GclbTargetResponseArrayOutput struct{ *pulumi.OutputState }

func (GclbTargetResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GclbTargetResponse)(nil)).Elem()
}

func (o GclbTargetResponseArrayOutput) ToGclbTargetResponseArrayOutput() GclbTargetResponseArrayOutput {
	return o
}

func (o GclbTargetResponseArrayOutput) ToGclbTargetResponseArrayOutputWithContext(ctx context.Context) GclbTargetResponseArrayOutput {
	return o
}

func (o GclbTargetResponseArrayOutput) Index(i pulumi.IntInput) GclbTargetResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GclbTargetResponse {
		return vs[0].([]GclbTargetResponse)[vs[1].(int)]
	}).(GclbTargetResponseOutput)
}

// Defines an intermediate CA.
type IntermediateCA struct {
	// PEM intermediate certificate used for building up paths for validation. Each certificate provided in PEM format may occupy up to 5kB.
	PemCertificate *string `pulumi:"pemCertificate"`
}

// IntermediateCAInput is an input type that accepts IntermediateCAArgs and IntermediateCAOutput values.
// You can construct a concrete instance of `IntermediateCAInput` via:
//
//	IntermediateCAArgs{...}
type IntermediateCAInput interface {
	pulumi.Input

	ToIntermediateCAOutput() IntermediateCAOutput
	ToIntermediateCAOutputWithContext(context.Context) IntermediateCAOutput
}

// Defines an intermediate CA.
type IntermediateCAArgs struct {
	// PEM intermediate certificate used for building up paths for validation. Each certificate provided in PEM format may occupy up to 5kB.
	PemCertificate pulumi.StringPtrInput `pulumi:"pemCertificate"`
}

func (IntermediateCAArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IntermediateCA)(nil)).Elem()
}

func (i IntermediateCAArgs) ToIntermediateCAOutput() IntermediateCAOutput {
	return i.ToIntermediateCAOutputWithContext(context.Background())
}

func (i IntermediateCAArgs) ToIntermediateCAOutputWithContext(ctx context.Context) IntermediateCAOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntermediateCAOutput)
}

// IntermediateCAArrayInput is an input type that accepts IntermediateCAArray and IntermediateCAArrayOutput values.
// You can construct a concrete instance of `IntermediateCAArrayInput` via:
//
//	IntermediateCAArray{ IntermediateCAArgs{...} }
type IntermediateCAArrayInput interface {
	pulumi.Input

	ToIntermediateCAArrayOutput() IntermediateCAArrayOutput
	ToIntermediateCAArrayOutputWithContext(context.Context) IntermediateCAArrayOutput
}

type IntermediateCAArray []IntermediateCAInput

func (IntermediateCAArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntermediateCA)(nil)).Elem()
}

func (i IntermediateCAArray) ToIntermediateCAArrayOutput() IntermediateCAArrayOutput {
	return i.ToIntermediateCAArrayOutputWithContext(context.Background())
}

func (i IntermediateCAArray) ToIntermediateCAArrayOutputWithContext(ctx context.Context) IntermediateCAArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IntermediateCAArrayOutput)
}

// Defines an intermediate CA.
type IntermediateCAOutput struct{ *pulumi.OutputState }

func (IntermediateCAOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntermediateCA)(nil)).Elem()
}

func (o IntermediateCAOutput) ToIntermediateCAOutput() IntermediateCAOutput {
	return o
}

func (o IntermediateCAOutput) ToIntermediateCAOutputWithContext(ctx context.Context) IntermediateCAOutput {
	return o
}

// PEM intermediate certificate used for building up paths for validation. Each certificate provided in PEM format may occupy up to 5kB.
func (o IntermediateCAOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IntermediateCA) *string { return v.PemCertificate }).(pulumi.StringPtrOutput)
}

type IntermediateCAArrayOutput struct{ *pulumi.OutputState }

func (IntermediateCAArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntermediateCA)(nil)).Elem()
}

func (o IntermediateCAArrayOutput) ToIntermediateCAArrayOutput() IntermediateCAArrayOutput {
	return o
}

func (o IntermediateCAArrayOutput) ToIntermediateCAArrayOutputWithContext(ctx context.Context) IntermediateCAArrayOutput {
	return o
}

func (o IntermediateCAArrayOutput) Index(i pulumi.IntInput) IntermediateCAOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntermediateCA {
		return vs[0].([]IntermediateCA)[vs[1].(int)]
	}).(IntermediateCAOutput)
}

// Defines an intermediate CA.
type IntermediateCAResponse struct {
	// PEM intermediate certificate used for building up paths for validation. Each certificate provided in PEM format may occupy up to 5kB.
	PemCertificate string `pulumi:"pemCertificate"`
}

// Defines an intermediate CA.
type IntermediateCAResponseOutput struct{ *pulumi.OutputState }

func (IntermediateCAResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IntermediateCAResponse)(nil)).Elem()
}

func (o IntermediateCAResponseOutput) ToIntermediateCAResponseOutput() IntermediateCAResponseOutput {
	return o
}

func (o IntermediateCAResponseOutput) ToIntermediateCAResponseOutputWithContext(ctx context.Context) IntermediateCAResponseOutput {
	return o
}

// PEM intermediate certificate used for building up paths for validation. Each certificate provided in PEM format may occupy up to 5kB.
func (o IntermediateCAResponseOutput) PemCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v IntermediateCAResponse) string { return v.PemCertificate }).(pulumi.StringOutput)
}

type IntermediateCAResponseArrayOutput struct{ *pulumi.OutputState }

func (IntermediateCAResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IntermediateCAResponse)(nil)).Elem()
}

func (o IntermediateCAResponseArrayOutput) ToIntermediateCAResponseArrayOutput() IntermediateCAResponseArrayOutput {
	return o
}

func (o IntermediateCAResponseArrayOutput) ToIntermediateCAResponseArrayOutputWithContext(ctx context.Context) IntermediateCAResponseArrayOutput {
	return o
}

func (o IntermediateCAResponseArrayOutput) Index(i pulumi.IntInput) IntermediateCAResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IntermediateCAResponse {
		return vs[0].([]IntermediateCAResponse)[vs[1].(int)]
	}).(IntermediateCAResponseOutput)
}

// Defines IP configuration where this Certificate Map is serving.
type IpConfigResponse struct {
	// An external IP address.
	IpAddress string `pulumi:"ipAddress"`
	// Ports.
	Ports []int `pulumi:"ports"`
}

// Defines IP configuration where this Certificate Map is serving.
type IpConfigResponseOutput struct{ *pulumi.OutputState }

func (IpConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpConfigResponse)(nil)).Elem()
}

func (o IpConfigResponseOutput) ToIpConfigResponseOutput() IpConfigResponseOutput {
	return o
}

func (o IpConfigResponseOutput) ToIpConfigResponseOutputWithContext(ctx context.Context) IpConfigResponseOutput {
	return o
}

// An external IP address.
func (o IpConfigResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v IpConfigResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Ports.
func (o IpConfigResponseOutput) Ports() pulumi.IntArrayOutput {
	return o.ApplyT(func(v IpConfigResponse) []int { return v.Ports }).(pulumi.IntArrayOutput)
}

type IpConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (IpConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpConfigResponse)(nil)).Elem()
}

func (o IpConfigResponseArrayOutput) ToIpConfigResponseArrayOutput() IpConfigResponseArrayOutput {
	return o
}

func (o IpConfigResponseArrayOutput) ToIpConfigResponseArrayOutputWithContext(ctx context.Context) IpConfigResponseArrayOutput {
	return o
}

func (o IpConfigResponseArrayOutput) Index(i pulumi.IntInput) IpConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpConfigResponse {
		return vs[0].([]IpConfigResponse)[vs[1].(int)]
	}).(IpConfigResponseOutput)
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificate struct {
	// Immutable. Authorizations that will be used for performing domain authorization.
	DnsAuthorizations []string `pulumi:"dnsAuthorizations"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains []string `pulumi:"domains"`
	// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	IssuanceConfig *string `pulumi:"issuanceConfig"`
}

// ManagedCertificateInput is an input type that accepts ManagedCertificateArgs and ManagedCertificateOutput values.
// You can construct a concrete instance of `ManagedCertificateInput` via:
//
//	ManagedCertificateArgs{...}
type ManagedCertificateInput interface {
	pulumi.Input

	ToManagedCertificateOutput() ManagedCertificateOutput
	ToManagedCertificateOutputWithContext(context.Context) ManagedCertificateOutput
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateArgs struct {
	// Immutable. Authorizations that will be used for performing domain authorization.
	DnsAuthorizations pulumi.StringArrayInput `pulumi:"dnsAuthorizations"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	IssuanceConfig pulumi.StringPtrInput `pulumi:"issuanceConfig"`
}

func (ManagedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificate)(nil)).Elem()
}

func (i ManagedCertificateArgs) ToManagedCertificateOutput() ManagedCertificateOutput {
	return i.ToManagedCertificateOutputWithContext(context.Background())
}

func (i ManagedCertificateArgs) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificateOutput)
}

func (i ManagedCertificateArgs) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return i.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (i ManagedCertificateArgs) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificateOutput).ToManagedCertificatePtrOutputWithContext(ctx)
}

// ManagedCertificatePtrInput is an input type that accepts ManagedCertificateArgs, ManagedCertificatePtr and ManagedCertificatePtrOutput values.
// You can construct a concrete instance of `ManagedCertificatePtrInput` via:
//
//	        ManagedCertificateArgs{...}
//
//	or:
//
//	        nil
type ManagedCertificatePtrInput interface {
	pulumi.Input

	ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput
	ToManagedCertificatePtrOutputWithContext(context.Context) ManagedCertificatePtrOutput
}

type managedCertificatePtrType ManagedCertificateArgs

func ManagedCertificatePtr(v *ManagedCertificateArgs) ManagedCertificatePtrInput {
	return (*managedCertificatePtrType)(v)
}

func (*managedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificate)(nil)).Elem()
}

func (i *managedCertificatePtrType) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return i.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (i *managedCertificatePtrType) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedCertificatePtrOutput)
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateOutput struct{ *pulumi.OutputState }

func (ManagedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificate)(nil)).Elem()
}

func (o ManagedCertificateOutput) ToManagedCertificateOutput() ManagedCertificateOutput {
	return o
}

func (o ManagedCertificateOutput) ToManagedCertificateOutputWithContext(ctx context.Context) ManagedCertificateOutput {
	return o
}

func (o ManagedCertificateOutput) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return o.ToManagedCertificatePtrOutputWithContext(context.Background())
}

func (o ManagedCertificateOutput) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedCertificate) *ManagedCertificate {
		return &v
	}).(ManagedCertificatePtrOutput)
}

// Immutable. Authorizations that will be used for performing domain authorization.
func (o ManagedCertificateOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificate) []string { return v.DnsAuthorizations }).(pulumi.StringArrayOutput)
}

// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
func (o ManagedCertificateOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificate) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
func (o ManagedCertificateOutput) IssuanceConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ManagedCertificate) *string { return v.IssuanceConfig }).(pulumi.StringPtrOutput)
}

type ManagedCertificatePtrOutput struct{ *pulumi.OutputState }

func (ManagedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedCertificate)(nil)).Elem()
}

func (o ManagedCertificatePtrOutput) ToManagedCertificatePtrOutput() ManagedCertificatePtrOutput {
	return o
}

func (o ManagedCertificatePtrOutput) ToManagedCertificatePtrOutputWithContext(ctx context.Context) ManagedCertificatePtrOutput {
	return o
}

func (o ManagedCertificatePtrOutput) Elem() ManagedCertificateOutput {
	return o.ApplyT(func(v *ManagedCertificate) ManagedCertificate {
		if v != nil {
			return *v
		}
		var ret ManagedCertificate
		return ret
	}).(ManagedCertificateOutput)
}

// Immutable. Authorizations that will be used for performing domain authorization.
func (o ManagedCertificatePtrOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedCertificate) []string {
		if v == nil {
			return nil
		}
		return v.DnsAuthorizations
	}).(pulumi.StringArrayOutput)
}

// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
func (o ManagedCertificatePtrOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedCertificate) []string {
		if v == nil {
			return nil
		}
		return v.Domains
	}).(pulumi.StringArrayOutput)
}

// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
func (o ManagedCertificatePtrOutput) IssuanceConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedCertificate) *string {
		if v == nil {
			return nil
		}
		return v.IssuanceConfig
	}).(pulumi.StringPtrOutput)
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateResponse struct {
	// Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
	AuthorizationAttemptInfo []AuthorizationAttemptInfoResponse `pulumi:"authorizationAttemptInfo"`
	// Immutable. Authorizations that will be used for performing domain authorization.
	DnsAuthorizations []string `pulumi:"dnsAuthorizations"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains []string `pulumi:"domains"`
	// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	IssuanceConfig string `pulumi:"issuanceConfig"`
	// Information about issues with provisioning a Managed Certificate.
	ProvisioningIssue ProvisioningIssueResponse `pulumi:"provisioningIssue"`
	// State of the managed certificate resource.
	State string `pulumi:"state"`
}

// Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateResponseOutput struct{ *pulumi.OutputState }

func (ManagedCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedCertificateResponse)(nil)).Elem()
}

func (o ManagedCertificateResponseOutput) ToManagedCertificateResponseOutput() ManagedCertificateResponseOutput {
	return o
}

func (o ManagedCertificateResponseOutput) ToManagedCertificateResponseOutputWithContext(ctx context.Context) ManagedCertificateResponseOutput {
	return o
}

// Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
func (o ManagedCertificateResponseOutput) AuthorizationAttemptInfo() AuthorizationAttemptInfoResponseArrayOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) []AuthorizationAttemptInfoResponse {
		return v.AuthorizationAttemptInfo
	}).(AuthorizationAttemptInfoResponseArrayOutput)
}

// Immutable. Authorizations that will be used for performing domain authorization.
func (o ManagedCertificateResponseOutput) DnsAuthorizations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) []string { return v.DnsAuthorizations }).(pulumi.StringArrayOutput)
}

// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
func (o ManagedCertificateResponseOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
func (o ManagedCertificateResponseOutput) IssuanceConfig() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) string { return v.IssuanceConfig }).(pulumi.StringOutput)
}

// Information about issues with provisioning a Managed Certificate.
func (o ManagedCertificateResponseOutput) ProvisioningIssue() ProvisioningIssueResponseOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) ProvisioningIssueResponse { return v.ProvisioningIssue }).(ProvisioningIssueResponseOutput)
}

// State of the managed certificate resource.
func (o ManagedCertificateResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedCertificateResponse) string { return v.State }).(pulumi.StringOutput)
}

// Information about issues with provisioning a Managed Certificate.
type ProvisioningIssueResponse struct {
	// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
	Details string `pulumi:"details"`
	// Reason for provisioning failures.
	Reason string `pulumi:"reason"`
}

// Information about issues with provisioning a Managed Certificate.
type ProvisioningIssueResponseOutput struct{ *pulumi.OutputState }

func (ProvisioningIssueResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningIssueResponse)(nil)).Elem()
}

func (o ProvisioningIssueResponseOutput) ToProvisioningIssueResponseOutput() ProvisioningIssueResponseOutput {
	return o
}

func (o ProvisioningIssueResponseOutput) ToProvisioningIssueResponseOutputWithContext(ctx context.Context) ProvisioningIssueResponseOutput {
	return o
}

// Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.
func (o ProvisioningIssueResponseOutput) Details() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisioningIssueResponse) string { return v.Details }).(pulumi.StringOutput)
}

// Reason for provisioning failures.
func (o ProvisioningIssueResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ProvisioningIssueResponse) string { return v.Reason }).(pulumi.StringOutput)
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificate struct {
	// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
	PemCertificate *string `pulumi:"pemCertificate"`
	// Input only. The PEM-encoded private key of the leaf certificate.
	PemPrivateKey *string `pulumi:"pemPrivateKey"`
}

// SelfManagedCertificateInput is an input type that accepts SelfManagedCertificateArgs and SelfManagedCertificateOutput values.
// You can construct a concrete instance of `SelfManagedCertificateInput` via:
//
//	SelfManagedCertificateArgs{...}
type SelfManagedCertificateInput interface {
	pulumi.Input

	ToSelfManagedCertificateOutput() SelfManagedCertificateOutput
	ToSelfManagedCertificateOutputWithContext(context.Context) SelfManagedCertificateOutput
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateArgs struct {
	// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
	PemCertificate pulumi.StringPtrInput `pulumi:"pemCertificate"`
	// Input only. The PEM-encoded private key of the leaf certificate.
	PemPrivateKey pulumi.StringPtrInput `pulumi:"pemPrivateKey"`
}

func (SelfManagedCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfManagedCertificate)(nil)).Elem()
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificateOutput() SelfManagedCertificateOutput {
	return i.ToSelfManagedCertificateOutputWithContext(context.Background())
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificateOutputWithContext(ctx context.Context) SelfManagedCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfManagedCertificateOutput)
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return i.ToSelfManagedCertificatePtrOutputWithContext(context.Background())
}

func (i SelfManagedCertificateArgs) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfManagedCertificateOutput).ToSelfManagedCertificatePtrOutputWithContext(ctx)
}

// SelfManagedCertificatePtrInput is an input type that accepts SelfManagedCertificateArgs, SelfManagedCertificatePtr and SelfManagedCertificatePtrOutput values.
// You can construct a concrete instance of `SelfManagedCertificatePtrInput` via:
//
//	        SelfManagedCertificateArgs{...}
//
//	or:
//
//	        nil
type SelfManagedCertificatePtrInput interface {
	pulumi.Input

	ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput
	ToSelfManagedCertificatePtrOutputWithContext(context.Context) SelfManagedCertificatePtrOutput
}

type selfManagedCertificatePtrType SelfManagedCertificateArgs

func SelfManagedCertificatePtr(v *SelfManagedCertificateArgs) SelfManagedCertificatePtrInput {
	return (*selfManagedCertificatePtrType)(v)
}

func (*selfManagedCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfManagedCertificate)(nil)).Elem()
}

func (i *selfManagedCertificatePtrType) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return i.ToSelfManagedCertificatePtrOutputWithContext(context.Background())
}

func (i *selfManagedCertificatePtrType) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SelfManagedCertificatePtrOutput)
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateOutput struct{ *pulumi.OutputState }

func (SelfManagedCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfManagedCertificate)(nil)).Elem()
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificateOutput() SelfManagedCertificateOutput {
	return o
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificateOutputWithContext(ctx context.Context) SelfManagedCertificateOutput {
	return o
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return o.ToSelfManagedCertificatePtrOutputWithContext(context.Background())
}

func (o SelfManagedCertificateOutput) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SelfManagedCertificate) *SelfManagedCertificate {
		return &v
	}).(SelfManagedCertificatePtrOutput)
}

// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
func (o SelfManagedCertificateOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfManagedCertificate) *string { return v.PemCertificate }).(pulumi.StringPtrOutput)
}

// Input only. The PEM-encoded private key of the leaf certificate.
func (o SelfManagedCertificateOutput) PemPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SelfManagedCertificate) *string { return v.PemPrivateKey }).(pulumi.StringPtrOutput)
}

type SelfManagedCertificatePtrOutput struct{ *pulumi.OutputState }

func (SelfManagedCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SelfManagedCertificate)(nil)).Elem()
}

func (o SelfManagedCertificatePtrOutput) ToSelfManagedCertificatePtrOutput() SelfManagedCertificatePtrOutput {
	return o
}

func (o SelfManagedCertificatePtrOutput) ToSelfManagedCertificatePtrOutputWithContext(ctx context.Context) SelfManagedCertificatePtrOutput {
	return o
}

func (o SelfManagedCertificatePtrOutput) Elem() SelfManagedCertificateOutput {
	return o.ApplyT(func(v *SelfManagedCertificate) SelfManagedCertificate {
		if v != nil {
			return *v
		}
		var ret SelfManagedCertificate
		return ret
	}).(SelfManagedCertificateOutput)
}

// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
func (o SelfManagedCertificatePtrOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfManagedCertificate) *string {
		if v == nil {
			return nil
		}
		return v.PemCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. The PEM-encoded private key of the leaf certificate.
func (o SelfManagedCertificatePtrOutput) PemPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SelfManagedCertificate) *string {
		if v == nil {
			return nil
		}
		return v.PemPrivateKey
	}).(pulumi.StringPtrOutput)
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateResponse struct {
	// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
	PemCertificate string `pulumi:"pemCertificate"`
	// Input only. The PEM-encoded private key of the leaf certificate.
	PemPrivateKey string `pulumi:"pemPrivateKey"`
}

// Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.
type SelfManagedCertificateResponseOutput struct{ *pulumi.OutputState }

func (SelfManagedCertificateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SelfManagedCertificateResponse)(nil)).Elem()
}

func (o SelfManagedCertificateResponseOutput) ToSelfManagedCertificateResponseOutput() SelfManagedCertificateResponseOutput {
	return o
}

func (o SelfManagedCertificateResponseOutput) ToSelfManagedCertificateResponseOutputWithContext(ctx context.Context) SelfManagedCertificateResponseOutput {
	return o
}

// Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.
func (o SelfManagedCertificateResponseOutput) PemCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v SelfManagedCertificateResponse) string { return v.PemCertificate }).(pulumi.StringOutput)
}

// Input only. The PEM-encoded private key of the leaf certificate.
func (o SelfManagedCertificateResponseOutput) PemPrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v SelfManagedCertificateResponse) string { return v.PemPrivateKey }).(pulumi.StringOutput)
}

// Defines a trust anchor.
type TrustAnchor struct {
	// PEM root certificate of the PKI used for validation. Each certificate provided in PEM format may occupy up to 5kB.
	PemCertificate *string `pulumi:"pemCertificate"`
}

// TrustAnchorInput is an input type that accepts TrustAnchorArgs and TrustAnchorOutput values.
// You can construct a concrete instance of `TrustAnchorInput` via:
//
//	TrustAnchorArgs{...}
type TrustAnchorInput interface {
	pulumi.Input

	ToTrustAnchorOutput() TrustAnchorOutput
	ToTrustAnchorOutputWithContext(context.Context) TrustAnchorOutput
}

// Defines a trust anchor.
type TrustAnchorArgs struct {
	// PEM root certificate of the PKI used for validation. Each certificate provided in PEM format may occupy up to 5kB.
	PemCertificate pulumi.StringPtrInput `pulumi:"pemCertificate"`
}

func (TrustAnchorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchor)(nil)).Elem()
}

func (i TrustAnchorArgs) ToTrustAnchorOutput() TrustAnchorOutput {
	return i.ToTrustAnchorOutputWithContext(context.Background())
}

func (i TrustAnchorArgs) ToTrustAnchorOutputWithContext(ctx context.Context) TrustAnchorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorOutput)
}

// TrustAnchorArrayInput is an input type that accepts TrustAnchorArray and TrustAnchorArrayOutput values.
// You can construct a concrete instance of `TrustAnchorArrayInput` via:
//
//	TrustAnchorArray{ TrustAnchorArgs{...} }
type TrustAnchorArrayInput interface {
	pulumi.Input

	ToTrustAnchorArrayOutput() TrustAnchorArrayOutput
	ToTrustAnchorArrayOutputWithContext(context.Context) TrustAnchorArrayOutput
}

type TrustAnchorArray []TrustAnchorInput

func (TrustAnchorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustAnchor)(nil)).Elem()
}

func (i TrustAnchorArray) ToTrustAnchorArrayOutput() TrustAnchorArrayOutput {
	return i.ToTrustAnchorArrayOutputWithContext(context.Background())
}

func (i TrustAnchorArray) ToTrustAnchorArrayOutputWithContext(ctx context.Context) TrustAnchorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustAnchorArrayOutput)
}

// Defines a trust anchor.
type TrustAnchorOutput struct{ *pulumi.OutputState }

func (TrustAnchorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchor)(nil)).Elem()
}

func (o TrustAnchorOutput) ToTrustAnchorOutput() TrustAnchorOutput {
	return o
}

func (o TrustAnchorOutput) ToTrustAnchorOutputWithContext(ctx context.Context) TrustAnchorOutput {
	return o
}

// PEM root certificate of the PKI used for validation. Each certificate provided in PEM format may occupy up to 5kB.
func (o TrustAnchorOutput) PemCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TrustAnchor) *string { return v.PemCertificate }).(pulumi.StringPtrOutput)
}

type TrustAnchorArrayOutput struct{ *pulumi.OutputState }

func (TrustAnchorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustAnchor)(nil)).Elem()
}

func (o TrustAnchorArrayOutput) ToTrustAnchorArrayOutput() TrustAnchorArrayOutput {
	return o
}

func (o TrustAnchorArrayOutput) ToTrustAnchorArrayOutputWithContext(ctx context.Context) TrustAnchorArrayOutput {
	return o
}

func (o TrustAnchorArrayOutput) Index(i pulumi.IntInput) TrustAnchorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustAnchor {
		return vs[0].([]TrustAnchor)[vs[1].(int)]
	}).(TrustAnchorOutput)
}

// Defines a trust anchor.
type TrustAnchorResponse struct {
	// PEM root certificate of the PKI used for validation. Each certificate provided in PEM format may occupy up to 5kB.
	PemCertificate string `pulumi:"pemCertificate"`
}

// Defines a trust anchor.
type TrustAnchorResponseOutput struct{ *pulumi.OutputState }

func (TrustAnchorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustAnchorResponse)(nil)).Elem()
}

func (o TrustAnchorResponseOutput) ToTrustAnchorResponseOutput() TrustAnchorResponseOutput {
	return o
}

func (o TrustAnchorResponseOutput) ToTrustAnchorResponseOutputWithContext(ctx context.Context) TrustAnchorResponseOutput {
	return o
}

// PEM root certificate of the PKI used for validation. Each certificate provided in PEM format may occupy up to 5kB.
func (o TrustAnchorResponseOutput) PemCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v TrustAnchorResponse) string { return v.PemCertificate }).(pulumi.StringOutput)
}

type TrustAnchorResponseArrayOutput struct{ *pulumi.OutputState }

func (TrustAnchorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustAnchorResponse)(nil)).Elem()
}

func (o TrustAnchorResponseArrayOutput) ToTrustAnchorResponseArrayOutput() TrustAnchorResponseArrayOutput {
	return o
}

func (o TrustAnchorResponseArrayOutput) ToTrustAnchorResponseArrayOutputWithContext(ctx context.Context) TrustAnchorResponseArrayOutput {
	return o
}

func (o TrustAnchorResponseArrayOutput) Index(i pulumi.IntInput) TrustAnchorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustAnchorResponse {
		return vs[0].([]TrustAnchorResponse)[vs[1].(int)]
	}).(TrustAnchorResponseOutput)
}

// Defines a trust store.
type TrustStore struct {
	// Set of intermediate CA certificates used for the path building phase of chain validation. The field is currently not supported if TrustConfig is used for the workload certificate feature.
	IntermediateCas []IntermediateCA `pulumi:"intermediateCas"`
	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	TrustAnchors []TrustAnchor `pulumi:"trustAnchors"`
}

// TrustStoreInput is an input type that accepts TrustStoreArgs and TrustStoreOutput values.
// You can construct a concrete instance of `TrustStoreInput` via:
//
//	TrustStoreArgs{...}
type TrustStoreInput interface {
	pulumi.Input

	ToTrustStoreOutput() TrustStoreOutput
	ToTrustStoreOutputWithContext(context.Context) TrustStoreOutput
}

// Defines a trust store.
type TrustStoreArgs struct {
	// Set of intermediate CA certificates used for the path building phase of chain validation. The field is currently not supported if TrustConfig is used for the workload certificate feature.
	IntermediateCas IntermediateCAArrayInput `pulumi:"intermediateCas"`
	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	TrustAnchors TrustAnchorArrayInput `pulumi:"trustAnchors"`
}

func (TrustStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustStore)(nil)).Elem()
}

func (i TrustStoreArgs) ToTrustStoreOutput() TrustStoreOutput {
	return i.ToTrustStoreOutputWithContext(context.Background())
}

func (i TrustStoreArgs) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreOutput)
}

// TrustStoreArrayInput is an input type that accepts TrustStoreArray and TrustStoreArrayOutput values.
// You can construct a concrete instance of `TrustStoreArrayInput` via:
//
//	TrustStoreArray{ TrustStoreArgs{...} }
type TrustStoreArrayInput interface {
	pulumi.Input

	ToTrustStoreArrayOutput() TrustStoreArrayOutput
	ToTrustStoreArrayOutputWithContext(context.Context) TrustStoreArrayOutput
}

type TrustStoreArray []TrustStoreInput

func (TrustStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustStore)(nil)).Elem()
}

func (i TrustStoreArray) ToTrustStoreArrayOutput() TrustStoreArrayOutput {
	return i.ToTrustStoreArrayOutputWithContext(context.Background())
}

func (i TrustStoreArray) ToTrustStoreArrayOutputWithContext(ctx context.Context) TrustStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustStoreArrayOutput)
}

// Defines a trust store.
type TrustStoreOutput struct{ *pulumi.OutputState }

func (TrustStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustStore)(nil)).Elem()
}

func (o TrustStoreOutput) ToTrustStoreOutput() TrustStoreOutput {
	return o
}

func (o TrustStoreOutput) ToTrustStoreOutputWithContext(ctx context.Context) TrustStoreOutput {
	return o
}

// Set of intermediate CA certificates used for the path building phase of chain validation. The field is currently not supported if TrustConfig is used for the workload certificate feature.
func (o TrustStoreOutput) IntermediateCas() IntermediateCAArrayOutput {
	return o.ApplyT(func(v TrustStore) []IntermediateCA { return v.IntermediateCas }).(IntermediateCAArrayOutput)
}

// List of Trust Anchors to be used while performing validation against a given TrustStore.
func (o TrustStoreOutput) TrustAnchors() TrustAnchorArrayOutput {
	return o.ApplyT(func(v TrustStore) []TrustAnchor { return v.TrustAnchors }).(TrustAnchorArrayOutput)
}

type TrustStoreArrayOutput struct{ *pulumi.OutputState }

func (TrustStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustStore)(nil)).Elem()
}

func (o TrustStoreArrayOutput) ToTrustStoreArrayOutput() TrustStoreArrayOutput {
	return o
}

func (o TrustStoreArrayOutput) ToTrustStoreArrayOutputWithContext(ctx context.Context) TrustStoreArrayOutput {
	return o
}

func (o TrustStoreArrayOutput) Index(i pulumi.IntInput) TrustStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustStore {
		return vs[0].([]TrustStore)[vs[1].(int)]
	}).(TrustStoreOutput)
}

// Defines a trust store.
type TrustStoreResponse struct {
	// Set of intermediate CA certificates used for the path building phase of chain validation. The field is currently not supported if TrustConfig is used for the workload certificate feature.
	IntermediateCas []IntermediateCAResponse `pulumi:"intermediateCas"`
	// List of Trust Anchors to be used while performing validation against a given TrustStore.
	TrustAnchors []TrustAnchorResponse `pulumi:"trustAnchors"`
}

// Defines a trust store.
type TrustStoreResponseOutput struct{ *pulumi.OutputState }

func (TrustStoreResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrustStoreResponse)(nil)).Elem()
}

func (o TrustStoreResponseOutput) ToTrustStoreResponseOutput() TrustStoreResponseOutput {
	return o
}

func (o TrustStoreResponseOutput) ToTrustStoreResponseOutputWithContext(ctx context.Context) TrustStoreResponseOutput {
	return o
}

// Set of intermediate CA certificates used for the path building phase of chain validation. The field is currently not supported if TrustConfig is used for the workload certificate feature.
func (o TrustStoreResponseOutput) IntermediateCas() IntermediateCAResponseArrayOutput {
	return o.ApplyT(func(v TrustStoreResponse) []IntermediateCAResponse { return v.IntermediateCas }).(IntermediateCAResponseArrayOutput)
}

// List of Trust Anchors to be used while performing validation against a given TrustStore.
func (o TrustStoreResponseOutput) TrustAnchors() TrustAnchorResponseArrayOutput {
	return o.ApplyT(func(v TrustStoreResponse) []TrustAnchorResponse { return v.TrustAnchors }).(TrustAnchorResponseArrayOutput)
}

type TrustStoreResponseArrayOutput struct{ *pulumi.OutputState }

func (TrustStoreResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TrustStoreResponse)(nil)).Elem()
}

func (o TrustStoreResponseArrayOutput) ToTrustStoreResponseArrayOutput() TrustStoreResponseArrayOutput {
	return o
}

func (o TrustStoreResponseArrayOutput) ToTrustStoreResponseArrayOutputWithContext(ctx context.Context) TrustStoreResponseArrayOutput {
	return o
}

func (o TrustStoreResponseArrayOutput) Index(i pulumi.IntInput) TrustStoreResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TrustStoreResponse {
		return vs[0].([]TrustStoreResponse)[vs[1].(int)]
	}).(TrustStoreResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityConfigInput)(nil)).Elem(), CertificateAuthorityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityServiceConfigInput)(nil)).Elem(), CertificateAuthorityServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateAuthorityServiceConfigPtrInput)(nil)).Elem(), CertificateAuthorityServiceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntermediateCAInput)(nil)).Elem(), IntermediateCAArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IntermediateCAArrayInput)(nil)).Elem(), IntermediateCAArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedCertificateInput)(nil)).Elem(), ManagedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedCertificatePtrInput)(nil)).Elem(), ManagedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfManagedCertificateInput)(nil)).Elem(), SelfManagedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SelfManagedCertificatePtrInput)(nil)).Elem(), SelfManagedCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorInput)(nil)).Elem(), TrustAnchorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustAnchorArrayInput)(nil)).Elem(), TrustAnchorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreInput)(nil)).Elem(), TrustStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrustStoreArrayInput)(nil)).Elem(), TrustStoreArray{})
	pulumi.RegisterOutputType(AuthorizationAttemptInfoResponseOutput{})
	pulumi.RegisterOutputType(AuthorizationAttemptInfoResponseArrayOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityConfigOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityConfigResponseOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityServiceConfigOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityServiceConfigPtrOutput{})
	pulumi.RegisterOutputType(CertificateAuthorityServiceConfigResponseOutput{})
	pulumi.RegisterOutputType(DnsResourceRecordResponseOutput{})
	pulumi.RegisterOutputType(GclbTargetResponseOutput{})
	pulumi.RegisterOutputType(GclbTargetResponseArrayOutput{})
	pulumi.RegisterOutputType(IntermediateCAOutput{})
	pulumi.RegisterOutputType(IntermediateCAArrayOutput{})
	pulumi.RegisterOutputType(IntermediateCAResponseOutput{})
	pulumi.RegisterOutputType(IntermediateCAResponseArrayOutput{})
	pulumi.RegisterOutputType(IpConfigResponseOutput{})
	pulumi.RegisterOutputType(IpConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(ManagedCertificateOutput{})
	pulumi.RegisterOutputType(ManagedCertificatePtrOutput{})
	pulumi.RegisterOutputType(ManagedCertificateResponseOutput{})
	pulumi.RegisterOutputType(ProvisioningIssueResponseOutput{})
	pulumi.RegisterOutputType(SelfManagedCertificateOutput{})
	pulumi.RegisterOutputType(SelfManagedCertificatePtrOutput{})
	pulumi.RegisterOutputType(SelfManagedCertificateResponseOutput{})
	pulumi.RegisterOutputType(TrustAnchorOutput{})
	pulumi.RegisterOutputType(TrustAnchorArrayOutput{})
	pulumi.RegisterOutputType(TrustAnchorResponseOutput{})
	pulumi.RegisterOutputType(TrustAnchorResponseArrayOutput{})
	pulumi.RegisterOutputType(TrustStoreOutput{})
	pulumi.RegisterOutputType(TrustStoreArrayOutput{})
	pulumi.RegisterOutputType(TrustStoreResponseOutput{})
	pulumi.RegisterOutputType(TrustStoreResponseArrayOutput{})
}
