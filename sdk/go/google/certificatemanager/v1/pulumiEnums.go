// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A predefined matcher for particular cases, other than SNI selection.
type CertificateMapEntryMatcher string

const (
	// A matcher has't been recognized.
	CertificateMapEntryMatcherMatcherUnspecified = CertificateMapEntryMatcher("MATCHER_UNSPECIFIED")
	// A primary certificate that is served when SNI wasn't specified in the request or SNI couldn't be found in the map.
	CertificateMapEntryMatcherPrimary = CertificateMapEntryMatcher("PRIMARY")
)

func (CertificateMapEntryMatcher) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapEntryMatcher)(nil)).Elem()
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherOutput() CertificateMapEntryMatcherOutput {
	return pulumi.ToOutput(e).(CertificateMapEntryMatcherOutput)
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherOutputWithContext(ctx context.Context) CertificateMapEntryMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateMapEntryMatcherOutput)
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return e.ToCertificateMapEntryMatcherPtrOutputWithContext(context.Background())
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return CertificateMapEntryMatcher(e).ToCertificateMapEntryMatcherOutputWithContext(ctx).ToCertificateMapEntryMatcherPtrOutputWithContext(ctx)
}

func (e CertificateMapEntryMatcher) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateMapEntryMatcher) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateMapEntryMatcher) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateMapEntryMatcher) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateMapEntryMatcherOutput struct{ *pulumi.OutputState }

func (CertificateMapEntryMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapEntryMatcher)(nil)).Elem()
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherOutput() CertificateMapEntryMatcherOutput {
	return o
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherOutputWithContext(ctx context.Context) CertificateMapEntryMatcherOutput {
	return o
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return o.ToCertificateMapEntryMatcherPtrOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateMapEntryMatcher) *CertificateMapEntryMatcher {
		return &v
	}).(CertificateMapEntryMatcherPtrOutput)
}

func (o CertificateMapEntryMatcherOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateMapEntryMatcher) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateMapEntryMatcherOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateMapEntryMatcher) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateMapEntryMatcherPtrOutput struct{ *pulumi.OutputState }

func (CertificateMapEntryMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMapEntryMatcher)(nil)).Elem()
}

func (o CertificateMapEntryMatcherPtrOutput) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return o
}

func (o CertificateMapEntryMatcherPtrOutput) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return o
}

func (o CertificateMapEntryMatcherPtrOutput) Elem() CertificateMapEntryMatcherOutput {
	return o.ApplyT(func(v *CertificateMapEntryMatcher) CertificateMapEntryMatcher {
		if v != nil {
			return *v
		}
		var ret CertificateMapEntryMatcher
		return ret
	}).(CertificateMapEntryMatcherOutput)
}

func (o CertificateMapEntryMatcherPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateMapEntryMatcher) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateMapEntryMatcherInput is an input type that accepts CertificateMapEntryMatcherArgs and CertificateMapEntryMatcherOutput values.
// You can construct a concrete instance of `CertificateMapEntryMatcherInput` via:
//
//          CertificateMapEntryMatcherArgs{...}
type CertificateMapEntryMatcherInput interface {
	pulumi.Input

	ToCertificateMapEntryMatcherOutput() CertificateMapEntryMatcherOutput
	ToCertificateMapEntryMatcherOutputWithContext(context.Context) CertificateMapEntryMatcherOutput
}

var certificateMapEntryMatcherPtrType = reflect.TypeOf((**CertificateMapEntryMatcher)(nil)).Elem()

type CertificateMapEntryMatcherPtrInput interface {
	pulumi.Input

	ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput
	ToCertificateMapEntryMatcherPtrOutputWithContext(context.Context) CertificateMapEntryMatcherPtrOutput
}

type certificateMapEntryMatcherPtr string

func CertificateMapEntryMatcherPtr(v string) CertificateMapEntryMatcherPtrInput {
	return (*certificateMapEntryMatcherPtr)(&v)
}

func (*certificateMapEntryMatcherPtr) ElementType() reflect.Type {
	return certificateMapEntryMatcherPtrType
}

func (in *certificateMapEntryMatcherPtr) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return pulumi.ToOutput(in).(CertificateMapEntryMatcherPtrOutput)
}

func (in *certificateMapEntryMatcherPtr) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateMapEntryMatcherPtrOutput)
}

// Immutable. The scope of the certificate.
type CertificateScope string

const (
	// Certificates with default scope are served from core Google data centers. If unsure, choose this option.
	CertificateScopeDefault = CertificateScope("DEFAULT")
	// Certificates with scope EDGE_CACHE are special-purposed certificates, served from non-core Google data centers.
	CertificateScopeEdgeCache = CertificateScope("EDGE_CACHE")
)

func (CertificateScope) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateScope)(nil)).Elem()
}

func (e CertificateScope) ToCertificateScopeOutput() CertificateScopeOutput {
	return pulumi.ToOutput(e).(CertificateScopeOutput)
}

func (e CertificateScope) ToCertificateScopeOutputWithContext(ctx context.Context) CertificateScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateScopeOutput)
}

func (e CertificateScope) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return e.ToCertificateScopePtrOutputWithContext(context.Background())
}

func (e CertificateScope) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return CertificateScope(e).ToCertificateScopeOutputWithContext(ctx).ToCertificateScopePtrOutputWithContext(ctx)
}

func (e CertificateScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateScopeOutput struct{ *pulumi.OutputState }

func (CertificateScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateScope)(nil)).Elem()
}

func (o CertificateScopeOutput) ToCertificateScopeOutput() CertificateScopeOutput {
	return o
}

func (o CertificateScopeOutput) ToCertificateScopeOutputWithContext(ctx context.Context) CertificateScopeOutput {
	return o
}

func (o CertificateScopeOutput) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return o.ToCertificateScopePtrOutputWithContext(context.Background())
}

func (o CertificateScopeOutput) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateScope) *CertificateScope {
		return &v
	}).(CertificateScopePtrOutput)
}

func (o CertificateScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateScope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateScope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateScopePtrOutput struct{ *pulumi.OutputState }

func (CertificateScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateScope)(nil)).Elem()
}

func (o CertificateScopePtrOutput) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return o
}

func (o CertificateScopePtrOutput) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return o
}

func (o CertificateScopePtrOutput) Elem() CertificateScopeOutput {
	return o.ApplyT(func(v *CertificateScope) CertificateScope {
		if v != nil {
			return *v
		}
		var ret CertificateScope
		return ret
	}).(CertificateScopeOutput)
}

func (o CertificateScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateScope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateScopeInput is an input type that accepts CertificateScopeArgs and CertificateScopeOutput values.
// You can construct a concrete instance of `CertificateScopeInput` via:
//
//          CertificateScopeArgs{...}
type CertificateScopeInput interface {
	pulumi.Input

	ToCertificateScopeOutput() CertificateScopeOutput
	ToCertificateScopeOutputWithContext(context.Context) CertificateScopeOutput
}

var certificateScopePtrType = reflect.TypeOf((**CertificateScope)(nil)).Elem()

type CertificateScopePtrInput interface {
	pulumi.Input

	ToCertificateScopePtrOutput() CertificateScopePtrOutput
	ToCertificateScopePtrOutputWithContext(context.Context) CertificateScopePtrOutput
}

type certificateScopePtr string

func CertificateScopePtr(v string) CertificateScopePtrInput {
	return (*certificateScopePtr)(&v)
}

func (*certificateScopePtr) ElementType() reflect.Type {
	return certificateScopePtrType
}

func (in *certificateScopePtr) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return pulumi.ToOutput(in).(CertificateScopePtrOutput)
}

func (in *certificateScopePtr) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateScopePtrOutput)
}

// Reason for provisioning failures.
type ProvisioningIssueReason string

const (
	ProvisioningIssueReasonReasonUnspecified = ProvisioningIssueReason("REASON_UNSPECIFIED")
	// Certificate provisioning failed due to an issue with one or more of the domains on the certificate. For details of which domains failed, consult the `authorization_attempt_info` field.
	ProvisioningIssueReasonAuthorizationIssue = ProvisioningIssueReason("AUTHORIZATION_ISSUE")
	// Exceeded Certificate Authority quotas or internal rate limits of the system. Provisioning may take longer to complete.
	ProvisioningIssueReasonRateLimited = ProvisioningIssueReason("RATE_LIMITED")
)

func (ProvisioningIssueReason) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningIssueReason)(nil)).Elem()
}

func (e ProvisioningIssueReason) ToProvisioningIssueReasonOutput() ProvisioningIssueReasonOutput {
	return pulumi.ToOutput(e).(ProvisioningIssueReasonOutput)
}

func (e ProvisioningIssueReason) ToProvisioningIssueReasonOutputWithContext(ctx context.Context) ProvisioningIssueReasonOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ProvisioningIssueReasonOutput)
}

func (e ProvisioningIssueReason) ToProvisioningIssueReasonPtrOutput() ProvisioningIssueReasonPtrOutput {
	return e.ToProvisioningIssueReasonPtrOutputWithContext(context.Background())
}

func (e ProvisioningIssueReason) ToProvisioningIssueReasonPtrOutputWithContext(ctx context.Context) ProvisioningIssueReasonPtrOutput {
	return ProvisioningIssueReason(e).ToProvisioningIssueReasonOutputWithContext(ctx).ToProvisioningIssueReasonPtrOutputWithContext(ctx)
}

func (e ProvisioningIssueReason) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningIssueReason) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ProvisioningIssueReason) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ProvisioningIssueReason) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ProvisioningIssueReasonOutput struct{ *pulumi.OutputState }

func (ProvisioningIssueReasonOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProvisioningIssueReason)(nil)).Elem()
}

func (o ProvisioningIssueReasonOutput) ToProvisioningIssueReasonOutput() ProvisioningIssueReasonOutput {
	return o
}

func (o ProvisioningIssueReasonOutput) ToProvisioningIssueReasonOutputWithContext(ctx context.Context) ProvisioningIssueReasonOutput {
	return o
}

func (o ProvisioningIssueReasonOutput) ToProvisioningIssueReasonPtrOutput() ProvisioningIssueReasonPtrOutput {
	return o.ToProvisioningIssueReasonPtrOutputWithContext(context.Background())
}

func (o ProvisioningIssueReasonOutput) ToProvisioningIssueReasonPtrOutputWithContext(ctx context.Context) ProvisioningIssueReasonPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProvisioningIssueReason) *ProvisioningIssueReason {
		return &v
	}).(ProvisioningIssueReasonPtrOutput)
}

func (o ProvisioningIssueReasonOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ProvisioningIssueReasonOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProvisioningIssueReason) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ProvisioningIssueReasonOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProvisioningIssueReasonOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ProvisioningIssueReason) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ProvisioningIssueReasonPtrOutput struct{ *pulumi.OutputState }

func (ProvisioningIssueReasonPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProvisioningIssueReason)(nil)).Elem()
}

func (o ProvisioningIssueReasonPtrOutput) ToProvisioningIssueReasonPtrOutput() ProvisioningIssueReasonPtrOutput {
	return o
}

func (o ProvisioningIssueReasonPtrOutput) ToProvisioningIssueReasonPtrOutputWithContext(ctx context.Context) ProvisioningIssueReasonPtrOutput {
	return o
}

func (o ProvisioningIssueReasonPtrOutput) Elem() ProvisioningIssueReasonOutput {
	return o.ApplyT(func(v *ProvisioningIssueReason) ProvisioningIssueReason {
		if v != nil {
			return *v
		}
		var ret ProvisioningIssueReason
		return ret
	}).(ProvisioningIssueReasonOutput)
}

func (o ProvisioningIssueReasonPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ProvisioningIssueReasonPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ProvisioningIssueReason) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ProvisioningIssueReasonInput is an input type that accepts ProvisioningIssueReasonArgs and ProvisioningIssueReasonOutput values.
// You can construct a concrete instance of `ProvisioningIssueReasonInput` via:
//
//          ProvisioningIssueReasonArgs{...}
type ProvisioningIssueReasonInput interface {
	pulumi.Input

	ToProvisioningIssueReasonOutput() ProvisioningIssueReasonOutput
	ToProvisioningIssueReasonOutputWithContext(context.Context) ProvisioningIssueReasonOutput
}

var provisioningIssueReasonPtrType = reflect.TypeOf((**ProvisioningIssueReason)(nil)).Elem()

type ProvisioningIssueReasonPtrInput interface {
	pulumi.Input

	ToProvisioningIssueReasonPtrOutput() ProvisioningIssueReasonPtrOutput
	ToProvisioningIssueReasonPtrOutputWithContext(context.Context) ProvisioningIssueReasonPtrOutput
}

type provisioningIssueReasonPtr string

func ProvisioningIssueReasonPtr(v string) ProvisioningIssueReasonPtrInput {
	return (*provisioningIssueReasonPtr)(&v)
}

func (*provisioningIssueReasonPtr) ElementType() reflect.Type {
	return provisioningIssueReasonPtrType
}

func (in *provisioningIssueReasonPtr) ToProvisioningIssueReasonPtrOutput() ProvisioningIssueReasonPtrOutput {
	return pulumi.ToOutput(in).(ProvisioningIssueReasonPtrOutput)
}

func (in *provisioningIssueReasonPtr) ToProvisioningIssueReasonPtrOutputWithContext(ctx context.Context) ProvisioningIssueReasonPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ProvisioningIssueReasonPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapEntryMatcherInput)(nil)).Elem(), CertificateMapEntryMatcher("MATCHER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapEntryMatcherPtrInput)(nil)).Elem(), CertificateMapEntryMatcher("MATCHER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateScopeInput)(nil)).Elem(), CertificateScope("DEFAULT"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateScopePtrInput)(nil)).Elem(), CertificateScope("DEFAULT"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisioningIssueReasonInput)(nil)).Elem(), ProvisioningIssueReason("REASON_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisioningIssueReasonPtrInput)(nil)).Elem(), ProvisioningIssueReason("REASON_UNSPECIFIED"))
	pulumi.RegisterOutputType(CertificateMapEntryMatcherOutput{})
	pulumi.RegisterOutputType(CertificateMapEntryMatcherPtrOutput{})
	pulumi.RegisterOutputType(CertificateScopeOutput{})
	pulumi.RegisterOutputType(CertificateScopePtrOutput{})
	pulumi.RegisterOutputType(ProvisioningIssueReasonOutput{})
	pulumi.RegisterOutputType(ProvisioningIssueReasonPtrOutput{})
}
