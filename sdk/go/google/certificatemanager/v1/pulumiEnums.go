// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Required. The key algorithm to use when generating the private key.
type CertificateIssuanceConfigKeyAlgorithm string

const (
	// Unspecified key algorithm.
	CertificateIssuanceConfigKeyAlgorithmKeyAlgorithmUnspecified = CertificateIssuanceConfigKeyAlgorithm("KEY_ALGORITHM_UNSPECIFIED")
	// Specifies RSA with a 2048-bit modulus.
	CertificateIssuanceConfigKeyAlgorithmRsa2048 = CertificateIssuanceConfigKeyAlgorithm("RSA_2048")
	// Specifies ECDSA with curve P256.
	CertificateIssuanceConfigKeyAlgorithmEcdsaP256 = CertificateIssuanceConfigKeyAlgorithm("ECDSA_P256")
)

func (CertificateIssuanceConfigKeyAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuanceConfigKeyAlgorithm)(nil)).Elem()
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToCertificateIssuanceConfigKeyAlgorithmOutput() CertificateIssuanceConfigKeyAlgorithmOutput {
	return pulumi.ToOutput(e).(CertificateIssuanceConfigKeyAlgorithmOutput)
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToCertificateIssuanceConfigKeyAlgorithmOutputWithContext(ctx context.Context) CertificateIssuanceConfigKeyAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateIssuanceConfigKeyAlgorithmOutput)
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToCertificateIssuanceConfigKeyAlgorithmPtrOutput() CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return e.ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(context.Background())
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return CertificateIssuanceConfigKeyAlgorithm(e).ToCertificateIssuanceConfigKeyAlgorithmOutputWithContext(ctx).ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(ctx)
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateIssuanceConfigKeyAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateIssuanceConfigKeyAlgorithmOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigKeyAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuanceConfigKeyAlgorithm)(nil)).Elem()
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToCertificateIssuanceConfigKeyAlgorithmOutput() CertificateIssuanceConfigKeyAlgorithmOutput {
	return o
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToCertificateIssuanceConfigKeyAlgorithmOutputWithContext(ctx context.Context) CertificateIssuanceConfigKeyAlgorithmOutput {
	return o
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToCertificateIssuanceConfigKeyAlgorithmPtrOutput() CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return o.ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(context.Background())
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateIssuanceConfigKeyAlgorithm) *CertificateIssuanceConfigKeyAlgorithm {
		return &v
	}).(CertificateIssuanceConfigKeyAlgorithmPtrOutput)
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateIssuanceConfigKeyAlgorithm] {
	return pulumix.Output[CertificateIssuanceConfigKeyAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateIssuanceConfigKeyAlgorithm) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateIssuanceConfigKeyAlgorithmOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateIssuanceConfigKeyAlgorithm) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateIssuanceConfigKeyAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (CertificateIssuanceConfigKeyAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateIssuanceConfigKeyAlgorithm)(nil)).Elem()
}

func (o CertificateIssuanceConfigKeyAlgorithmPtrOutput) ToCertificateIssuanceConfigKeyAlgorithmPtrOutput() CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return o
}

func (o CertificateIssuanceConfigKeyAlgorithmPtrOutput) ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return o
}

func (o CertificateIssuanceConfigKeyAlgorithmPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateIssuanceConfigKeyAlgorithm] {
	return pulumix.Output[*CertificateIssuanceConfigKeyAlgorithm]{
		OutputState: o.OutputState,
	}
}

func (o CertificateIssuanceConfigKeyAlgorithmPtrOutput) Elem() CertificateIssuanceConfigKeyAlgorithmOutput {
	return o.ApplyT(func(v *CertificateIssuanceConfigKeyAlgorithm) CertificateIssuanceConfigKeyAlgorithm {
		if v != nil {
			return *v
		}
		var ret CertificateIssuanceConfigKeyAlgorithm
		return ret
	}).(CertificateIssuanceConfigKeyAlgorithmOutput)
}

func (o CertificateIssuanceConfigKeyAlgorithmPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateIssuanceConfigKeyAlgorithmPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateIssuanceConfigKeyAlgorithm) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateIssuanceConfigKeyAlgorithmInput is an input type that accepts CertificateIssuanceConfigKeyAlgorithmArgs and CertificateIssuanceConfigKeyAlgorithmOutput values.
// You can construct a concrete instance of `CertificateIssuanceConfigKeyAlgorithmInput` via:
//
//	CertificateIssuanceConfigKeyAlgorithmArgs{...}
type CertificateIssuanceConfigKeyAlgorithmInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigKeyAlgorithmOutput() CertificateIssuanceConfigKeyAlgorithmOutput
	ToCertificateIssuanceConfigKeyAlgorithmOutputWithContext(context.Context) CertificateIssuanceConfigKeyAlgorithmOutput
}

var certificateIssuanceConfigKeyAlgorithmPtrType = reflect.TypeOf((**CertificateIssuanceConfigKeyAlgorithm)(nil)).Elem()

type CertificateIssuanceConfigKeyAlgorithmPtrInput interface {
	pulumi.Input

	ToCertificateIssuanceConfigKeyAlgorithmPtrOutput() CertificateIssuanceConfigKeyAlgorithmPtrOutput
	ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(context.Context) CertificateIssuanceConfigKeyAlgorithmPtrOutput
}

type certificateIssuanceConfigKeyAlgorithmPtr string

func CertificateIssuanceConfigKeyAlgorithmPtr(v string) CertificateIssuanceConfigKeyAlgorithmPtrInput {
	return (*certificateIssuanceConfigKeyAlgorithmPtr)(&v)
}

func (*certificateIssuanceConfigKeyAlgorithmPtr) ElementType() reflect.Type {
	return certificateIssuanceConfigKeyAlgorithmPtrType
}

func (in *certificateIssuanceConfigKeyAlgorithmPtr) ToCertificateIssuanceConfigKeyAlgorithmPtrOutput() CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return pulumi.ToOutput(in).(CertificateIssuanceConfigKeyAlgorithmPtrOutput)
}

func (in *certificateIssuanceConfigKeyAlgorithmPtr) ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(ctx context.Context) CertificateIssuanceConfigKeyAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateIssuanceConfigKeyAlgorithmPtrOutput)
}

func (in *certificateIssuanceConfigKeyAlgorithmPtr) ToOutput(ctx context.Context) pulumix.Output[*CertificateIssuanceConfigKeyAlgorithm] {
	return pulumix.Output[*CertificateIssuanceConfigKeyAlgorithm]{
		OutputState: in.ToCertificateIssuanceConfigKeyAlgorithmPtrOutputWithContext(ctx).OutputState,
	}
}

// A predefined matcher for particular cases, other than SNI selection.
type CertificateMapEntryMatcher string

const (
	// A matcher has't been recognized.
	CertificateMapEntryMatcherMatcherUnspecified = CertificateMapEntryMatcher("MATCHER_UNSPECIFIED")
	// A primary certificate that is served when SNI wasn't specified in the request or SNI couldn't be found in the map.
	CertificateMapEntryMatcherPrimary = CertificateMapEntryMatcher("PRIMARY")
)

func (CertificateMapEntryMatcher) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapEntryMatcher)(nil)).Elem()
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherOutput() CertificateMapEntryMatcherOutput {
	return pulumi.ToOutput(e).(CertificateMapEntryMatcherOutput)
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherOutputWithContext(ctx context.Context) CertificateMapEntryMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateMapEntryMatcherOutput)
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return e.ToCertificateMapEntryMatcherPtrOutputWithContext(context.Background())
}

func (e CertificateMapEntryMatcher) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return CertificateMapEntryMatcher(e).ToCertificateMapEntryMatcherOutputWithContext(ctx).ToCertificateMapEntryMatcherPtrOutputWithContext(ctx)
}

func (e CertificateMapEntryMatcher) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateMapEntryMatcher) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateMapEntryMatcher) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateMapEntryMatcher) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateMapEntryMatcherOutput struct{ *pulumi.OutputState }

func (CertificateMapEntryMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateMapEntryMatcher)(nil)).Elem()
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherOutput() CertificateMapEntryMatcherOutput {
	return o
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherOutputWithContext(ctx context.Context) CertificateMapEntryMatcherOutput {
	return o
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return o.ToCertificateMapEntryMatcherPtrOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherOutput) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateMapEntryMatcher) *CertificateMapEntryMatcher {
		return &v
	}).(CertificateMapEntryMatcherPtrOutput)
}

func (o CertificateMapEntryMatcherOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateMapEntryMatcher] {
	return pulumix.Output[CertificateMapEntryMatcher]{
		OutputState: o.OutputState,
	}
}

func (o CertificateMapEntryMatcherOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateMapEntryMatcher) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateMapEntryMatcherOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateMapEntryMatcher) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateMapEntryMatcherPtrOutput struct{ *pulumi.OutputState }

func (CertificateMapEntryMatcherPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMapEntryMatcher)(nil)).Elem()
}

func (o CertificateMapEntryMatcherPtrOutput) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return o
}

func (o CertificateMapEntryMatcherPtrOutput) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return o
}

func (o CertificateMapEntryMatcherPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateMapEntryMatcher] {
	return pulumix.Output[*CertificateMapEntryMatcher]{
		OutputState: o.OutputState,
	}
}

func (o CertificateMapEntryMatcherPtrOutput) Elem() CertificateMapEntryMatcherOutput {
	return o.ApplyT(func(v *CertificateMapEntryMatcher) CertificateMapEntryMatcher {
		if v != nil {
			return *v
		}
		var ret CertificateMapEntryMatcher
		return ret
	}).(CertificateMapEntryMatcherOutput)
}

func (o CertificateMapEntryMatcherPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateMapEntryMatcherPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateMapEntryMatcher) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateMapEntryMatcherInput is an input type that accepts CertificateMapEntryMatcherArgs and CertificateMapEntryMatcherOutput values.
// You can construct a concrete instance of `CertificateMapEntryMatcherInput` via:
//
//	CertificateMapEntryMatcherArgs{...}
type CertificateMapEntryMatcherInput interface {
	pulumi.Input

	ToCertificateMapEntryMatcherOutput() CertificateMapEntryMatcherOutput
	ToCertificateMapEntryMatcherOutputWithContext(context.Context) CertificateMapEntryMatcherOutput
}

var certificateMapEntryMatcherPtrType = reflect.TypeOf((**CertificateMapEntryMatcher)(nil)).Elem()

type CertificateMapEntryMatcherPtrInput interface {
	pulumi.Input

	ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput
	ToCertificateMapEntryMatcherPtrOutputWithContext(context.Context) CertificateMapEntryMatcherPtrOutput
}

type certificateMapEntryMatcherPtr string

func CertificateMapEntryMatcherPtr(v string) CertificateMapEntryMatcherPtrInput {
	return (*certificateMapEntryMatcherPtr)(&v)
}

func (*certificateMapEntryMatcherPtr) ElementType() reflect.Type {
	return certificateMapEntryMatcherPtrType
}

func (in *certificateMapEntryMatcherPtr) ToCertificateMapEntryMatcherPtrOutput() CertificateMapEntryMatcherPtrOutput {
	return pulumi.ToOutput(in).(CertificateMapEntryMatcherPtrOutput)
}

func (in *certificateMapEntryMatcherPtr) ToCertificateMapEntryMatcherPtrOutputWithContext(ctx context.Context) CertificateMapEntryMatcherPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateMapEntryMatcherPtrOutput)
}

func (in *certificateMapEntryMatcherPtr) ToOutput(ctx context.Context) pulumix.Output[*CertificateMapEntryMatcher] {
	return pulumix.Output[*CertificateMapEntryMatcher]{
		OutputState: in.ToCertificateMapEntryMatcherPtrOutputWithContext(ctx).OutputState,
	}
}

// Immutable. The scope of the certificate.
type CertificateScope string

const (
	// Certificates with default scope are served from core Google data centers. If unsure, choose this option.
	CertificateScopeDefault = CertificateScope("DEFAULT")
	// Certificates with scope EDGE_CACHE are special-purposed certificates, served from Edge Points of Presence. See https://cloud.google.com/vpc/docs/edge-locations.
	CertificateScopeEdgeCache = CertificateScope("EDGE_CACHE")
	// Certificates with ALL_REGIONS scope are served from all Google Cloud regions. See https://cloud.google.com/compute/docs/regions-zones.
	CertificateScopeAllRegions = CertificateScope("ALL_REGIONS")
)

func (CertificateScope) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateScope)(nil)).Elem()
}

func (e CertificateScope) ToCertificateScopeOutput() CertificateScopeOutput {
	return pulumi.ToOutput(e).(CertificateScopeOutput)
}

func (e CertificateScope) ToCertificateScopeOutputWithContext(ctx context.Context) CertificateScopeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(CertificateScopeOutput)
}

func (e CertificateScope) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return e.ToCertificateScopePtrOutputWithContext(context.Background())
}

func (e CertificateScope) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return CertificateScope(e).ToCertificateScopeOutputWithContext(ctx).ToCertificateScopePtrOutputWithContext(ctx)
}

func (e CertificateScope) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateScope) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e CertificateScope) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e CertificateScope) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type CertificateScopeOutput struct{ *pulumi.OutputState }

func (CertificateScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateScope)(nil)).Elem()
}

func (o CertificateScopeOutput) ToCertificateScopeOutput() CertificateScopeOutput {
	return o
}

func (o CertificateScopeOutput) ToCertificateScopeOutputWithContext(ctx context.Context) CertificateScopeOutput {
	return o
}

func (o CertificateScopeOutput) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return o.ToCertificateScopePtrOutputWithContext(context.Background())
}

func (o CertificateScopeOutput) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateScope) *CertificateScope {
		return &v
	}).(CertificateScopePtrOutput)
}

func (o CertificateScopeOutput) ToOutput(ctx context.Context) pulumix.Output[CertificateScope] {
	return pulumix.Output[CertificateScope]{
		OutputState: o.OutputState,
	}
}

func (o CertificateScopeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o CertificateScopeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateScope) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o CertificateScopeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateScopeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e CertificateScope) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type CertificateScopePtrOutput struct{ *pulumi.OutputState }

func (CertificateScopePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateScope)(nil)).Elem()
}

func (o CertificateScopePtrOutput) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return o
}

func (o CertificateScopePtrOutput) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return o
}

func (o CertificateScopePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*CertificateScope] {
	return pulumix.Output[*CertificateScope]{
		OutputState: o.OutputState,
	}
}

func (o CertificateScopePtrOutput) Elem() CertificateScopeOutput {
	return o.ApplyT(func(v *CertificateScope) CertificateScope {
		if v != nil {
			return *v
		}
		var ret CertificateScope
		return ret
	}).(CertificateScopeOutput)
}

func (o CertificateScopePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o CertificateScopePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *CertificateScope) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// CertificateScopeInput is an input type that accepts CertificateScopeArgs and CertificateScopeOutput values.
// You can construct a concrete instance of `CertificateScopeInput` via:
//
//	CertificateScopeArgs{...}
type CertificateScopeInput interface {
	pulumi.Input

	ToCertificateScopeOutput() CertificateScopeOutput
	ToCertificateScopeOutputWithContext(context.Context) CertificateScopeOutput
}

var certificateScopePtrType = reflect.TypeOf((**CertificateScope)(nil)).Elem()

type CertificateScopePtrInput interface {
	pulumi.Input

	ToCertificateScopePtrOutput() CertificateScopePtrOutput
	ToCertificateScopePtrOutputWithContext(context.Context) CertificateScopePtrOutput
}

type certificateScopePtr string

func CertificateScopePtr(v string) CertificateScopePtrInput {
	return (*certificateScopePtr)(&v)
}

func (*certificateScopePtr) ElementType() reflect.Type {
	return certificateScopePtrType
}

func (in *certificateScopePtr) ToCertificateScopePtrOutput() CertificateScopePtrOutput {
	return pulumi.ToOutput(in).(CertificateScopePtrOutput)
}

func (in *certificateScopePtr) ToCertificateScopePtrOutputWithContext(ctx context.Context) CertificateScopePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(CertificateScopePtrOutput)
}

func (in *certificateScopePtr) ToOutput(ctx context.Context) pulumix.Output[*CertificateScope] {
	return pulumix.Output[*CertificateScope]{
		OutputState: in.ToCertificateScopePtrOutputWithContext(ctx).OutputState,
	}
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigKeyAlgorithmInput)(nil)).Elem(), CertificateIssuanceConfigKeyAlgorithm("KEY_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuanceConfigKeyAlgorithmPtrInput)(nil)).Elem(), CertificateIssuanceConfigKeyAlgorithm("KEY_ALGORITHM_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapEntryMatcherInput)(nil)).Elem(), CertificateMapEntryMatcher("MATCHER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapEntryMatcherPtrInput)(nil)).Elem(), CertificateMapEntryMatcher("MATCHER_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateScopeInput)(nil)).Elem(), CertificateScope("DEFAULT"))
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateScopePtrInput)(nil)).Elem(), CertificateScope("DEFAULT"))
	pulumi.RegisterOutputType(CertificateIssuanceConfigKeyAlgorithmOutput{})
	pulumi.RegisterOutputType(CertificateIssuanceConfigKeyAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(CertificateMapEntryMatcherOutput{})
	pulumi.RegisterOutputType(CertificateMapEntryMatcherPtrOutput{})
	pulumi.RegisterOutputType(CertificateScopeOutput{})
	pulumi.RegisterOutputType(CertificateScopePtrOutput{})
}
