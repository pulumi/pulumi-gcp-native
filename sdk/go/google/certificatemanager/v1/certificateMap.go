// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new CertificateMap in a given project and location.
type CertificateMap struct {
	pulumi.CustomResourceState

	// The creation timestamp of a Certificate Map.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a certificate map.
	Description pulumi.StringOutput `pulumi:"description"`
	// A list of GCLB targets which use this Certificate Map.
	GclbTargets GclbTargetResponseArrayOutput `pulumi:"gclbTargets"`
	// Set of labels associated with a Certificate Map.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// The update timestamp of a Certificate Map.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificateMap registers a new resource with the given unique name, arguments, and options.
func NewCertificateMap(ctx *pulumi.Context,
	name string, args *CertificateMapArgs, opts ...pulumi.ResourceOption) (*CertificateMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateMapId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateMapId'")
	}
	var resource CertificateMap
	err := ctx.RegisterResource("google-native:certificatemanager/v1:CertificateMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateMap gets an existing CertificateMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateMapState, opts ...pulumi.ResourceOption) (*CertificateMap, error) {
	var resource CertificateMap
	err := ctx.ReadResource("google-native:certificatemanager/v1:CertificateMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateMap resources.
type certificateMapState struct {
}

type CertificateMapState struct {
}

func (CertificateMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapState)(nil)).Elem()
}

type certificateMapArgs struct {
	CertificateMapId string `pulumi:"certificateMapId"`
	// One or more paragraphs of text description of a certificate map.
	Description *string `pulumi:"description"`
	// Set of labels associated with a Certificate Map.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CertificateMap resource.
type CertificateMapArgs struct {
	CertificateMapId pulumi.StringInput
	// One or more paragraphs of text description of a certificate map.
	Description pulumi.StringPtrInput
	// Set of labels associated with a Certificate Map.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (CertificateMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapArgs)(nil)).Elem()
}

type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput
}

func (*CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMap)(nil)).Elem()
}

func (i *CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i *CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMap)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), &CertificateMap{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
