// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new CertificateMap in a given project and location.
type CertificateMap struct {
	pulumi.CustomResourceState

	// Required. A user-provided name of the certificate map.
	CertificateMapId pulumi.StringOutput `pulumi:"certificateMapId"`
	// The creation timestamp of a Certificate Map.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a certificate map.
	Description pulumi.StringOutput `pulumi:"description"`
	// A list of GCLB targets that use this Certificate Map. A Target Proxy is only present on this list if it's attached to a Forwarding Rule.
	GclbTargets GclbTargetResponseArrayOutput `pulumi:"gclbTargets"`
	// Set of labels associated with a Certificate Map.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The update timestamp of a Certificate Map.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewCertificateMap registers a new resource with the given unique name, arguments, and options.
func NewCertificateMap(ctx *pulumi.Context,
	name string, args *CertificateMapArgs, opts ...pulumi.ResourceOption) (*CertificateMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateMapId == nil {
		return nil, errors.New("invalid value for required argument 'CertificateMapId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"certificateMapId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateMap
	err := ctx.RegisterResource("google-native:certificatemanager/v1:CertificateMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateMap gets an existing CertificateMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateMapState, opts ...pulumi.ResourceOption) (*CertificateMap, error) {
	var resource CertificateMap
	err := ctx.ReadResource("google-native:certificatemanager/v1:CertificateMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateMap resources.
type certificateMapState struct {
}

type CertificateMapState struct {
}

func (CertificateMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapState)(nil)).Elem()
}

type certificateMapArgs struct {
	// Required. A user-provided name of the certificate map.
	CertificateMapId string `pulumi:"certificateMapId"`
	// One or more paragraphs of text description of a certificate map.
	Description *string `pulumi:"description"`
	// Set of labels associated with a Certificate Map.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a CertificateMap resource.
type CertificateMapArgs struct {
	// Required. A user-provided name of the certificate map.
	CertificateMapId pulumi.StringInput
	// One or more paragraphs of text description of a certificate map.
	Description pulumi.StringPtrInput
	// Set of labels associated with a Certificate Map.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (CertificateMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateMapArgs)(nil)).Elem()
}

type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput
}

func (*CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMap)(nil)).Elem()
}

func (i *CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i *CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateMap)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

// Required. A user-provided name of the certificate map.
func (o CertificateMapOutput) CertificateMapId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.CertificateMapId }).(pulumi.StringOutput)
}

// The creation timestamp of a Certificate Map.
func (o CertificateMapOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a certificate map.
func (o CertificateMapOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// A list of GCLB targets that use this Certificate Map. A Target Proxy is only present on this list if it's attached to a Forwarding Rule.
func (o CertificateMapOutput) GclbTargets() GclbTargetResponseArrayOutput {
	return o.ApplyT(func(v *CertificateMap) GclbTargetResponseArrayOutput { return v.GclbTargets }).(GclbTargetResponseArrayOutput)
}

// Set of labels associated with a Certificate Map.
func (o CertificateMapOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o CertificateMapOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A user-defined name of the Certificate Map. Certificate Map names must be unique globally and match pattern `projects/*/locations/*/certificateMaps/*`.
func (o CertificateMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CertificateMapOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The update timestamp of a Certificate Map.
func (o CertificateMapOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateMap) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), &CertificateMap{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
