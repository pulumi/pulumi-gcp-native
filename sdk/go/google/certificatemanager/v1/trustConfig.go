// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new TrustConfig in a given project and location.
type TrustConfig struct {
	pulumi.CustomResourceState

	// The creation timestamp of a TrustConfig.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// One or more paragraphs of text description of a TrustConfig.
	Description pulumi.StringOutput `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Set of labels associated with a TrustConfig.
	Labels   pulumi.StringMapOutput `pulumi:"labels"`
	Location pulumi.StringOutput    `pulumi:"location"`
	// A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. A user-provided name of the TrustConfig.
	TrustConfigId pulumi.StringOutput `pulumi:"trustConfigId"`
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.
	TrustStores TrustStoreResponseArrayOutput `pulumi:"trustStores"`
	// The last update timestamp of a TrustConfig.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTrustConfig registers a new resource with the given unique name, arguments, and options.
func NewTrustConfig(ctx *pulumi.Context,
	name string, args *TrustConfigArgs, opts ...pulumi.ResourceOption) (*TrustConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TrustConfigId == nil {
		return nil, errors.New("invalid value for required argument 'TrustConfigId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"trustConfigId",
	})
	opts = append(opts, replaceOnChanges)
	var resource TrustConfig
	err := ctx.RegisterResource("google-native:certificatemanager/v1:TrustConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrustConfig gets an existing TrustConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrustConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrustConfigState, opts ...pulumi.ResourceOption) (*TrustConfig, error) {
	var resource TrustConfig
	err := ctx.ReadResource("google-native:certificatemanager/v1:TrustConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrustConfig resources.
type trustConfigState struct {
}

type TrustConfigState struct {
}

func (TrustConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*trustConfigState)(nil)).Elem()
}

type trustConfigArgs struct {
	// One or more paragraphs of text description of a TrustConfig.
	Description *string `pulumi:"description"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Set of labels associated with a TrustConfig.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Required. A user-provided name of the TrustConfig.
	TrustConfigId string `pulumi:"trustConfigId"`
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.
	TrustStores []TrustStore `pulumi:"trustStores"`
}

// The set of arguments for constructing a TrustConfig resource.
type TrustConfigArgs struct {
	// One or more paragraphs of text description of a TrustConfig.
	Description pulumi.StringPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Set of labels associated with a TrustConfig.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Required. A user-provided name of the TrustConfig.
	TrustConfigId pulumi.StringInput
	// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.
	TrustStores TrustStoreArrayInput
}

func (TrustConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trustConfigArgs)(nil)).Elem()
}

type TrustConfigInput interface {
	pulumi.Input

	ToTrustConfigOutput() TrustConfigOutput
	ToTrustConfigOutputWithContext(ctx context.Context) TrustConfigOutput
}

func (*TrustConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustConfig)(nil)).Elem()
}

func (i *TrustConfig) ToTrustConfigOutput() TrustConfigOutput {
	return i.ToTrustConfigOutputWithContext(context.Background())
}

func (i *TrustConfig) ToTrustConfigOutputWithContext(ctx context.Context) TrustConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrustConfigOutput)
}

type TrustConfigOutput struct{ *pulumi.OutputState }

func (TrustConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrustConfig)(nil)).Elem()
}

func (o TrustConfigOutput) ToTrustConfigOutput() TrustConfigOutput {
	return o
}

func (o TrustConfigOutput) ToTrustConfigOutputWithContext(ctx context.Context) TrustConfigOutput {
	return o
}

// The creation timestamp of a TrustConfig.
func (o TrustConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// One or more paragraphs of text description of a TrustConfig.
func (o TrustConfigOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o TrustConfigOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Set of labels associated with a TrustConfig.
func (o TrustConfigOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o TrustConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.
func (o TrustConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TrustConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. A user-provided name of the TrustConfig.
func (o TrustConfigOutput) TrustConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.TrustConfigId }).(pulumi.StringOutput)
}

// Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.
func (o TrustConfigOutput) TrustStores() TrustStoreResponseArrayOutput {
	return o.ApplyT(func(v *TrustConfig) TrustStoreResponseArrayOutput { return v.TrustStores }).(TrustStoreResponseArrayOutput)
}

// The last update timestamp of a TrustConfig.
func (o TrustConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TrustConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrustConfigInput)(nil)).Elem(), &TrustConfig{})
	pulumi.RegisterOutputType(TrustConfigOutput{})
}
