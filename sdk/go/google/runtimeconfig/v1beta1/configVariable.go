// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a variable within the given configuration. You cannot create a variable with a name that is a prefix of an existing variable name, or a name that has an existing variable name as a prefix. To learn more about creating a variable, read the [Setting and Getting Data](/deployment-manager/runtime-configurator/set-and-get-variables) documentation.
type ConfigVariable struct {
	pulumi.CustomResourceState
}

// NewConfigVariable registers a new resource with the given unique name, arguments, and options.
func NewConfigVariable(ctx *pulumi.Context,
	name string, args *ConfigVariableArgs, opts ...pulumi.ResourceOption) (*ConfigVariable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigsId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.VariablesId == nil {
		return nil, errors.New("invalid value for required argument 'VariablesId'")
	}
	var resource ConfigVariable
	err := ctx.RegisterResource("google-cloud:runtimeconfig/v1beta1:ConfigVariable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigVariable gets an existing ConfigVariable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigVariable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigVariableState, opts ...pulumi.ResourceOption) (*ConfigVariable, error) {
	var resource ConfigVariable
	err := ctx.ReadResource("google-cloud:runtimeconfig/v1beta1:ConfigVariable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigVariable resources.
type configVariableState struct {
}

type ConfigVariableState struct {
}

func (ConfigVariableState) ElementType() reflect.Type {
	return reflect.TypeOf((*configVariableState)(nil)).Elem()
}

type configVariableArgs struct {
	ConfigsId string `pulumi:"configsId"`
	// The name of the variable resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME] The `[PROJECT_ID]` must be a valid project ID, `[CONFIG_NAME]` must be a valid RuntimeConfig resource and `[VARIABLE_NAME]` follows Unix file system file path naming. The `[VARIABLE_NAME]` can contain ASCII letters, numbers, slashes and dashes. Slashes are used as path element separators and are not part of the `[VARIABLE_NAME]` itself, so `[VARIABLE_NAME]` must contain at least one non-slash character. Multiple slashes are coalesced into single slash character. Each path segment should match [0-9A-Za-z](?:[_.A-Za-z0-9-]{0,62}[_.A-Za-z0-9])? regular expression. The length of a `[VARIABLE_NAME]` must be less than 256 characters. Once you create a variable, you cannot change the variable name.
	Name       *string `pulumi:"name"`
	ProjectsId string  `pulumi:"projectsId"`
	// Output only. The current state of the variable. The variable state indicates the outcome of the `variables().watch` call and is visible through the `get` and `list` calls.
	State *string `pulumi:"state"`
	// The string value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. For example, `text: "my text value"`. The string must be valid UTF-8.
	Text *string `pulumi:"text"`
	// Output only. The time of the last variable update. Timestamp will be UTC timestamp.
	UpdateTime *string `pulumi:"updateTime"`
	// The binary value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. The value must be base64 encoded, and must comply with IETF RFC4648 (https://www.ietf.org/rfc/rfc4648.txt). Only one of `value` or `text` can be set.
	Value       *string `pulumi:"value"`
	VariablesId string  `pulumi:"variablesId"`
}

// The set of arguments for constructing a ConfigVariable resource.
type ConfigVariableArgs struct {
	ConfigsId pulumi.StringInput
	// The name of the variable resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME] The `[PROJECT_ID]` must be a valid project ID, `[CONFIG_NAME]` must be a valid RuntimeConfig resource and `[VARIABLE_NAME]` follows Unix file system file path naming. The `[VARIABLE_NAME]` can contain ASCII letters, numbers, slashes and dashes. Slashes are used as path element separators and are not part of the `[VARIABLE_NAME]` itself, so `[VARIABLE_NAME]` must contain at least one non-slash character. Multiple slashes are coalesced into single slash character. Each path segment should match [0-9A-Za-z](?:[_.A-Za-z0-9-]{0,62}[_.A-Za-z0-9])? regular expression. The length of a `[VARIABLE_NAME]` must be less than 256 characters. Once you create a variable, you cannot change the variable name.
	Name       pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// Output only. The current state of the variable. The variable state indicates the outcome of the `variables().watch` call and is visible through the `get` and `list` calls.
	State pulumi.StringPtrInput
	// The string value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. For example, `text: "my text value"`. The string must be valid UTF-8.
	Text pulumi.StringPtrInput
	// Output only. The time of the last variable update. Timestamp will be UTC timestamp.
	UpdateTime pulumi.StringPtrInput
	// The binary value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. The value must be base64 encoded, and must comply with IETF RFC4648 (https://www.ietf.org/rfc/rfc4648.txt). Only one of `value` or `text` can be set.
	Value       pulumi.StringPtrInput
	VariablesId pulumi.StringInput
}

func (ConfigVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configVariableArgs)(nil)).Elem()
}

type ConfigVariableInput interface {
	pulumi.Input

	ToConfigVariableOutput() ConfigVariableOutput
	ToConfigVariableOutputWithContext(ctx context.Context) ConfigVariableOutput
}

func (*ConfigVariable) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariable)(nil))
}

func (i *ConfigVariable) ToConfigVariableOutput() ConfigVariableOutput {
	return i.ToConfigVariableOutputWithContext(context.Background())
}

func (i *ConfigVariable) ToConfigVariableOutputWithContext(ctx context.Context) ConfigVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigVariableOutput)
}

type ConfigVariableOutput struct {
	*pulumi.OutputState
}

func (ConfigVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigVariable)(nil))
}

func (o ConfigVariableOutput) ToConfigVariableOutput() ConfigVariableOutput {
	return o
}

func (o ConfigVariableOutput) ToConfigVariableOutputWithContext(ctx context.Context) ConfigVariableOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ConfigVariableOutput{})
}
