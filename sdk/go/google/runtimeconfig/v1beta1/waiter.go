// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Waiter resource. This operation returns a long-running Operation resource which can be polled for completion. However, a waiter with the given name will exist (and can be retrieved) prior to the operation completing. If the operation fails, the failed Waiter resource will still exist and must be deleted prior to subsequent creation attempts.
type Waiter struct {
	pulumi.CustomResourceState

	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// The instant at which this Waiter resource was created. Adding the value of `timeout` to this instant yields the timeout deadline for the waiter.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// If the value is `false`, it means the waiter is still waiting for one of its conditions to be met. If true, the waiter has finished. If the waiter finished due to a timeout or failure, `error` will be set.
	Done pulumi.BoolOutput `pulumi:"done"`
	// If the waiter ended due to a failure or timeout, this value will be set.
	Error StatusResponseOutput `pulumi:"error"`
	// [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
	Failure EndConditionResponseOutput `pulumi:"failure"`
	// The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// An optional but recommended unique `request_id`. If the server receives two `create()` requests with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored. It is responsibility of the client to ensure uniqueness of the `request_id` strings. `request_id` strings are limited to 64 characters.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
	Success EndConditionResponseOutput `pulumi:"success"`
	// [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
	Timeout pulumi.StringOutput `pulumi:"timeout"`
}

// NewWaiter registers a new resource with the given unique name, arguments, and options.
func NewWaiter(ctx *pulumi.Context,
	name string, args *WaiterArgs, opts ...pulumi.ResourceOption) (*Waiter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	var resource Waiter
	err := ctx.RegisterResource("google-native:runtimeconfig/v1beta1:Waiter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWaiter gets an existing Waiter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWaiter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WaiterState, opts ...pulumi.ResourceOption) (*Waiter, error) {
	var resource Waiter
	err := ctx.ReadResource("google-native:runtimeconfig/v1beta1:Waiter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Waiter resources.
type waiterState struct {
}

type WaiterState struct {
}

func (WaiterState) ElementType() reflect.Type {
	return reflect.TypeOf((*waiterState)(nil)).Elem()
}

type waiterArgs struct {
	ConfigId string `pulumi:"configId"`
	// [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
	Failure *EndCondition `pulumi:"failure"`
	// The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// An optional but recommended unique `request_id`. If the server receives two `create()` requests with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored. It is responsibility of the client to ensure uniqueness of the `request_id` strings. `request_id` strings are limited to 64 characters.
	RequestId *string `pulumi:"requestId"`
	// [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
	Success *EndCondition `pulumi:"success"`
	// [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
	Timeout *string `pulumi:"timeout"`
}

// The set of arguments for constructing a Waiter resource.
type WaiterArgs struct {
	ConfigId pulumi.StringInput
	// [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
	Failure EndConditionPtrInput
	// The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// An optional but recommended unique `request_id`. If the server receives two `create()` requests with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored. It is responsibility of the client to ensure uniqueness of the `request_id` strings. `request_id` strings are limited to 64 characters.
	RequestId pulumi.StringPtrInput
	// [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
	Success EndConditionPtrInput
	// [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
	Timeout pulumi.StringPtrInput
}

func (WaiterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*waiterArgs)(nil)).Elem()
}

type WaiterInput interface {
	pulumi.Input

	ToWaiterOutput() WaiterOutput
	ToWaiterOutputWithContext(ctx context.Context) WaiterOutput
}

func (*Waiter) ElementType() reflect.Type {
	return reflect.TypeOf((**Waiter)(nil)).Elem()
}

func (i *Waiter) ToWaiterOutput() WaiterOutput {
	return i.ToWaiterOutputWithContext(context.Background())
}

func (i *Waiter) ToWaiterOutputWithContext(ctx context.Context) WaiterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WaiterOutput)
}

type WaiterOutput struct{ *pulumi.OutputState }

func (WaiterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Waiter)(nil)).Elem()
}

func (o WaiterOutput) ToWaiterOutput() WaiterOutput {
	return o
}

func (o WaiterOutput) ToWaiterOutputWithContext(ctx context.Context) WaiterOutput {
	return o
}

func (o WaiterOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *Waiter) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// The instant at which this Waiter resource was created. Adding the value of `timeout` to this instant yields the timeout deadline for the waiter.
func (o WaiterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Waiter) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// If the value is `false`, it means the waiter is still waiting for one of its conditions to be met. If true, the waiter has finished. If the waiter finished due to a timeout or failure, `error` will be set.
func (o WaiterOutput) Done() pulumi.BoolOutput {
	return o.ApplyT(func(v *Waiter) pulumi.BoolOutput { return v.Done }).(pulumi.BoolOutput)
}

// If the waiter ended due to a failure or timeout, this value will be set.
func (o WaiterOutput) Error() StatusResponseOutput {
	return o.ApplyT(func(v *Waiter) StatusResponseOutput { return v.Error }).(StatusResponseOutput)
}

// [Optional] The failure condition of this waiter. If this condition is met, `done` will be set to `true` and the `error` code will be set to `ABORTED`. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated. This value is optional; if no failure condition is set, the only failure scenario will be a timeout.
func (o WaiterOutput) Failure() EndConditionResponseOutput {
	return o.ApplyT(func(v *Waiter) EndConditionResponseOutput { return v.Failure }).(EndConditionResponseOutput)
}

// The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.
func (o WaiterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Waiter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o WaiterOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Waiter) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// An optional but recommended unique `request_id`. If the server receives two `create()` requests with the same `request_id`, then the second request will be ignored and the first resource created and stored in the backend is returned. Empty `request_id` fields are ignored. It is responsibility of the client to ensure uniqueness of the `request_id` strings. `request_id` strings are limited to 64 characters.
func (o WaiterOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Waiter) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// [Required] The success condition. If this condition is met, `done` will be set to `true` and the `error` value will remain unset. The failure condition takes precedence over the success condition. If both conditions are met, a failure will be indicated.
func (o WaiterOutput) Success() EndConditionResponseOutput {
	return o.ApplyT(func(v *Waiter) EndConditionResponseOutput { return v.Success }).(EndConditionResponseOutput)
}

// [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.
func (o WaiterOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Waiter) pulumi.StringOutput { return v.Timeout }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WaiterInput)(nil)).Elem(), &Waiter{})
	pulumi.RegisterOutputType(WaiterOutput{})
}
