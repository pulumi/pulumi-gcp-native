// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	iam "github.com/pulumi/pulumi-google-native/sdk/go/google/iam/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Updates an IAM policy for the specified object.
type ObjectIamMember struct {
	pulumi.CustomResourceState

	// An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
	Condition iam.ConditionPtrOutput `pulumi:"condition"`
	// The etag of the resource's IAM policy.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:
	// - allUsers — A special identifier that represents anyone on the internet; with or without a Google account.
	// - allAuthenticatedUsers — A special identifier that represents anyone who is authenticated with a Google account or a service account.
	// - user:emailid — An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.
	// - serviceAccount:emailid — An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .
	// - group:emailid — An email address that represents a Google group. For example, group:admins@example.com.
	// - domain:domain — A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.
	// - projectOwner:projectid — Owners of the given project. For example, projectOwner:my-example-project
	// - projectEditor:projectid — Editors of the given project. For example, projectEditor:my-example-project
	// - projectViewer:projectid — Viewers of the given project. For example, projectViewer:my-example-project
	Member pulumi.StringOutput `pulumi:"member"`
	// The name of the resource to manage IAM policies for.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project in which the resource belongs. If it is not provided, a default will be supplied.
	Project pulumi.StringOutput `pulumi:"project"`
	// The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole.
	// The new IAM roles are:
	// - roles/storage.admin — Full control of Google Cloud Storage resources.
	// - roles/storage.objectViewer — Read-Only access to Google Cloud Storage objects.
	// - roles/storage.objectCreator — Access to create objects in Google Cloud Storage.
	// - roles/storage.objectAdmin — Full control of Google Cloud Storage objects.   The legacy IAM roles are:
	// - roles/storage.legacyObjectReader — Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.
	// - roles/storage.legacyObjectOwner — Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.
	// - roles/storage.legacyBucketReader — Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.
	// - roles/storage.legacyBucketWriter — Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.
	// - roles/storage.legacyBucketOwner — Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewObjectIamMember registers a new resource with the given unique name, arguments, and options.
func NewObjectIamMember(ctx *pulumi.Context,
	name string, args *ObjectIamMemberArgs, opts ...pulumi.ResourceOption) (*ObjectIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ObjectIamMember
	err := ctx.RegisterResource("google-native:storage/v1:ObjectIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectIamMember gets an existing ObjectIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectIamMemberState, opts ...pulumi.ResourceOption) (*ObjectIamMember, error) {
	var resource ObjectIamMember
	err := ctx.ReadResource("google-native:storage/v1:ObjectIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectIamMember resources.
type objectIamMemberState struct {
}

type ObjectIamMemberState struct {
}

func (ObjectIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectIamMemberState)(nil)).Elem()
}

type objectIamMemberArgs struct {
	// An IAM Condition for a given binding.
	Condition *iam.Condition `pulumi:"condition"`
	// Identity that will be granted the privilege in role. The entry can have one of the following values:
	//
	//  * user:{emailid}: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	//  * serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	//  * group:{emailid}: An email address that represents a Google group. For example, admins@example.com.
	//  * domain:{domain}: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Member string `pulumi:"member"`
	// The name of the resource to manage IAM policies for.
	Name string `pulumi:"name"`
	// The role that should be applied.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a ObjectIamMember resource.
type ObjectIamMemberArgs struct {
	// An IAM Condition for a given binding.
	Condition iam.ConditionPtrInput
	// Identity that will be granted the privilege in role. The entry can have one of the following values:
	//
	//  * user:{emailid}: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
	//  * serviceAccount:{emailid}: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
	//  * group:{emailid}: An email address that represents a Google group. For example, admins@example.com.
	//  * domain:{domain}: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
	Member pulumi.StringInput
	// The name of the resource to manage IAM policies for.
	Name pulumi.StringInput
	// The role that should be applied.
	Role pulumi.StringInput
}

func (ObjectIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectIamMemberArgs)(nil)).Elem()
}

type ObjectIamMemberInput interface {
	pulumi.Input

	ToObjectIamMemberOutput() ObjectIamMemberOutput
	ToObjectIamMemberOutputWithContext(ctx context.Context) ObjectIamMemberOutput
}

func (*ObjectIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectIamMember)(nil)).Elem()
}

func (i *ObjectIamMember) ToObjectIamMemberOutput() ObjectIamMemberOutput {
	return i.ToObjectIamMemberOutputWithContext(context.Background())
}

func (i *ObjectIamMember) ToObjectIamMemberOutputWithContext(ctx context.Context) ObjectIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectIamMemberOutput)
}

type ObjectIamMemberOutput struct{ *pulumi.OutputState }

func (ObjectIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectIamMember)(nil)).Elem()
}

func (o ObjectIamMemberOutput) ToObjectIamMemberOutput() ObjectIamMemberOutput {
	return o
}

func (o ObjectIamMemberOutput) ToObjectIamMemberOutputWithContext(ctx context.Context) ObjectIamMemberOutput {
	return o
}

// An IAM Condition for a given binding. See https://cloud.google.com/iam/docs/conditions-overview for additional details.
func (o ObjectIamMemberOutput) Condition() iam.ConditionPtrOutput {
	return o.ApplyT(func(v *ObjectIamMember) iam.ConditionPtrOutput { return v.Condition }).(iam.ConditionPtrOutput)
}

// The etag of the resource's IAM policy.
func (o ObjectIamMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIamMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:
// - allUsers — A special identifier that represents anyone on the internet; with or without a Google account.
// - allAuthenticatedUsers — A special identifier that represents anyone who is authenticated with a Google account or a service account.
// - user:emailid — An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.
// - serviceAccount:emailid — An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .
// - group:emailid — An email address that represents a Google group. For example, group:admins@example.com.
// - domain:domain — A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.
// - projectOwner:projectid — Owners of the given project. For example, projectOwner:my-example-project
// - projectEditor:projectid — Editors of the given project. For example, projectEditor:my-example-project
// - projectViewer:projectid — Viewers of the given project. For example, projectViewer:my-example-project
func (o ObjectIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The name of the resource to manage IAM policies for.
func (o ObjectIamMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIamMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project in which the resource belongs. If it is not provided, a default will be supplied.
func (o ObjectIamMemberOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIamMember) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole.
// The new IAM roles are:
// - roles/storage.admin — Full control of Google Cloud Storage resources.
// - roles/storage.objectViewer — Read-Only access to Google Cloud Storage objects.
// - roles/storage.objectCreator — Access to create objects in Google Cloud Storage.
// - roles/storage.objectAdmin — Full control of Google Cloud Storage objects.   The legacy IAM roles are:
// - roles/storage.legacyObjectReader — Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.
// - roles/storage.legacyObjectOwner — Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.
// - roles/storage.legacyBucketReader — Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.
// - roles/storage.legacyBucketWriter — Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.
// - roles/storage.legacyBucketOwner — Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.
func (o ObjectIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectIamMemberInput)(nil)).Elem(), &ObjectIamMember{})
	pulumi.RegisterOutputType(ObjectIamMemberOutput{})
}
