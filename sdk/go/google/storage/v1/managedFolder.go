// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new managed folder.
type ManagedFolder struct {
	pulumi.CustomResourceState

	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The creation time of the managed folder in RFC 3339 format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The kind of item this is. For managed folders, this is always storage#managedFolder.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
	Metageneration pulumi.StringOutput `pulumi:"metageneration"`
	// The name of the managed folder. Required if not specified by URL parameter.
	Name pulumi.StringOutput `pulumi:"name"`
	// The link to this managed folder.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The last update time of the managed folder metadata in RFC 3339 format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewManagedFolder registers a new resource with the given unique name, arguments, and options.
func NewManagedFolder(ctx *pulumi.Context,
	name string, args *ManagedFolderArgs, opts ...pulumi.ResourceOption) (*ManagedFolder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"bucket",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedFolder
	err := ctx.RegisterResource("google-native:storage/v1:ManagedFolder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedFolder gets an existing ManagedFolder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedFolderState, opts ...pulumi.ResourceOption) (*ManagedFolder, error) {
	var resource ManagedFolder
	err := ctx.ReadResource("google-native:storage/v1:ManagedFolder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedFolder resources.
type managedFolderState struct {
}

type ManagedFolderState struct {
}

func (ManagedFolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedFolderState)(nil)).Elem()
}

type managedFolderArgs struct {
	// The name of the bucket containing this managed folder.
	Bucket string `pulumi:"bucket"`
	// The creation time of the managed folder in RFC 3339 format.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the managed folder, including the bucket name and managed folder name.
	Id *string `pulumi:"id"`
	// The kind of item this is. For managed folders, this is always storage#managedFolder.
	Kind *string `pulumi:"kind"`
	// The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
	Metageneration *string `pulumi:"metageneration"`
	// The name of the managed folder. Required if not specified by URL parameter.
	Name *string `pulumi:"name"`
	// The link to this managed folder.
	SelfLink *string `pulumi:"selfLink"`
	// The last update time of the managed folder metadata in RFC 3339 format.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a ManagedFolder resource.
type ManagedFolderArgs struct {
	// The name of the bucket containing this managed folder.
	Bucket pulumi.StringInput
	// The creation time of the managed folder in RFC 3339 format.
	CreateTime pulumi.StringPtrInput
	// The ID of the managed folder, including the bucket name and managed folder name.
	Id pulumi.StringPtrInput
	// The kind of item this is. For managed folders, this is always storage#managedFolder.
	Kind pulumi.StringPtrInput
	// The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
	Metageneration pulumi.StringPtrInput
	// The name of the managed folder. Required if not specified by URL parameter.
	Name pulumi.StringPtrInput
	// The link to this managed folder.
	SelfLink pulumi.StringPtrInput
	// The last update time of the managed folder metadata in RFC 3339 format.
	UpdateTime pulumi.StringPtrInput
}

func (ManagedFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedFolderArgs)(nil)).Elem()
}

type ManagedFolderInput interface {
	pulumi.Input

	ToManagedFolderOutput() ManagedFolderOutput
	ToManagedFolderOutputWithContext(ctx context.Context) ManagedFolderOutput
}

func (*ManagedFolder) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedFolder)(nil)).Elem()
}

func (i *ManagedFolder) ToManagedFolderOutput() ManagedFolderOutput {
	return i.ToManagedFolderOutputWithContext(context.Background())
}

func (i *ManagedFolder) ToManagedFolderOutputWithContext(ctx context.Context) ManagedFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedFolderOutput)
}

type ManagedFolderOutput struct{ *pulumi.OutputState }

func (ManagedFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedFolder)(nil)).Elem()
}

func (o ManagedFolderOutput) ToManagedFolderOutput() ManagedFolderOutput {
	return o
}

func (o ManagedFolderOutput) ToManagedFolderOutputWithContext(ctx context.Context) ManagedFolderOutput {
	return o
}

func (o ManagedFolderOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The creation time of the managed folder in RFC 3339 format.
func (o ManagedFolderOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The kind of item this is. For managed folders, this is always storage#managedFolder.
func (o ManagedFolderOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
func (o ManagedFolderOutput) Metageneration() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.Metageneration }).(pulumi.StringOutput)
}

// The name of the managed folder. Required if not specified by URL parameter.
func (o ManagedFolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The link to this managed folder.
func (o ManagedFolderOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The last update time of the managed folder metadata in RFC 3339 format.
func (o ManagedFolderOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedFolder) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedFolderInput)(nil)).Elem(), &ManagedFolder{})
	pulumi.RegisterOutputType(ManagedFolderOutput{})
}
