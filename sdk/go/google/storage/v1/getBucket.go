// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns metadata for the specified bucket.
func LookupBucket(ctx *pulumi.Context, args *LookupBucketArgs, opts ...pulumi.InvokeOption) (*LookupBucketResult, error) {
	var rv LookupBucketResult
	err := ctx.Invoke("google-native:storage/v1:getBucket", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBucketArgs struct {
	Bucket                   string  `pulumi:"bucket"`
	IfMetagenerationMatch    *string `pulumi:"ifMetagenerationMatch"`
	IfMetagenerationNotMatch *string `pulumi:"ifMetagenerationNotMatch"`
	Projection               *string `pulumi:"projection"`
	UserProject              *string `pulumi:"userProject"`
}

type LookupBucketResult struct {
	// Access controls on the bucket.
	Acl []BucketAccessControlResponse `pulumi:"acl"`
	// The bucket's Autoclass configuration.
	Autoclass BucketAutoclassResponse `pulumi:"autoclass"`
	// The bucket's billing configuration.
	Billing BucketBillingResponse `pulumi:"billing"`
	// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
	Cors []BucketCorsItemResponse `pulumi:"cors"`
	// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
	DefaultEventBasedHold bool `pulumi:"defaultEventBasedHold"`
	// Default access controls to apply to new objects when no ACL is provided.
	DefaultObjectAcl []ObjectAccessControlResponse `pulumi:"defaultObjectAcl"`
	// Encryption configuration for a bucket.
	Encryption BucketEncryptionResponse `pulumi:"encryption"`
	// HTTP 1.1 Entity tag for the bucket.
	Etag string `pulumi:"etag"`
	// The bucket's IAM configuration.
	IamConfiguration BucketIamConfigurationResponse `pulumi:"iamConfiguration"`
	// The kind of item this is. For buckets, this is always storage#bucket.
	Kind string `pulumi:"kind"`
	// User-provided labels, in key/value pairs.
	Labels map[string]string `pulumi:"labels"`
	// The bucket's lifecycle configuration. See lifecycle management for more information.
	Lifecycle BucketLifecycleResponse `pulumi:"lifecycle"`
	// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
	Location string `pulumi:"location"`
	// The type of the bucket location.
	LocationType string `pulumi:"locationType"`
	// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
	Logging BucketLoggingResponse `pulumi:"logging"`
	// The metadata generation of this bucket.
	Metageneration string `pulumi:"metageneration"`
	// The name of the bucket.
	Name string `pulumi:"name"`
	// The owner of the bucket. This is always the project team's owner group.
	Owner BucketOwnerResponse `pulumi:"owner"`
	// The project number of the project the bucket belongs to.
	ProjectNumber string `pulumi:"projectNumber"`
	// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
	RetentionPolicy BucketRetentionPolicyResponse `pulumi:"retentionPolicy"`
	// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
	Rpo string `pulumi:"rpo"`
	// Reserved for future use.
	SatisfiesPZS bool `pulumi:"satisfiesPZS"`
	// The URI of this bucket.
	SelfLink string `pulumi:"selfLink"`
	// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
	StorageClass string `pulumi:"storageClass"`
	// The creation time of the bucket in RFC 3339 format.
	TimeCreated string `pulumi:"timeCreated"`
	// The modification time of the bucket in RFC 3339 format.
	Updated string `pulumi:"updated"`
	// The bucket's versioning configuration.
	Versioning BucketVersioningResponse `pulumi:"versioning"`
	// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
	Website BucketWebsiteResponse `pulumi:"website"`
}

func LookupBucketOutput(ctx *pulumi.Context, args LookupBucketOutputArgs, opts ...pulumi.InvokeOption) LookupBucketResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBucketResult, error) {
			args := v.(LookupBucketArgs)
			r, err := LookupBucket(ctx, &args, opts...)
			var s LookupBucketResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBucketResultOutput)
}

type LookupBucketOutputArgs struct {
	Bucket                   pulumi.StringInput    `pulumi:"bucket"`
	IfMetagenerationMatch    pulumi.StringPtrInput `pulumi:"ifMetagenerationMatch"`
	IfMetagenerationNotMatch pulumi.StringPtrInput `pulumi:"ifMetagenerationNotMatch"`
	Projection               pulumi.StringPtrInput `pulumi:"projection"`
	UserProject              pulumi.StringPtrInput `pulumi:"userProject"`
}

func (LookupBucketOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBucketArgs)(nil)).Elem()
}

type LookupBucketResultOutput struct{ *pulumi.OutputState }

func (LookupBucketResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBucketResult)(nil)).Elem()
}

func (o LookupBucketResultOutput) ToLookupBucketResultOutput() LookupBucketResultOutput {
	return o
}

func (o LookupBucketResultOutput) ToLookupBucketResultOutputWithContext(ctx context.Context) LookupBucketResultOutput {
	return o
}

// Access controls on the bucket.
func (o LookupBucketResultOutput) Acl() BucketAccessControlResponseArrayOutput {
	return o.ApplyT(func(v LookupBucketResult) []BucketAccessControlResponse { return v.Acl }).(BucketAccessControlResponseArrayOutput)
}

// The bucket's Autoclass configuration.
func (o LookupBucketResultOutput) Autoclass() BucketAutoclassResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketAutoclassResponse { return v.Autoclass }).(BucketAutoclassResponseOutput)
}

// The bucket's billing configuration.
func (o LookupBucketResultOutput) Billing() BucketBillingResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketBillingResponse { return v.Billing }).(BucketBillingResponseOutput)
}

// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
func (o LookupBucketResultOutput) Cors() BucketCorsItemResponseArrayOutput {
	return o.ApplyT(func(v LookupBucketResult) []BucketCorsItemResponse { return v.Cors }).(BucketCorsItemResponseArrayOutput)
}

// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
func (o LookupBucketResultOutput) DefaultEventBasedHold() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBucketResult) bool { return v.DefaultEventBasedHold }).(pulumi.BoolOutput)
}

// Default access controls to apply to new objects when no ACL is provided.
func (o LookupBucketResultOutput) DefaultObjectAcl() ObjectAccessControlResponseArrayOutput {
	return o.ApplyT(func(v LookupBucketResult) []ObjectAccessControlResponse { return v.DefaultObjectAcl }).(ObjectAccessControlResponseArrayOutput)
}

// Encryption configuration for a bucket.
func (o LookupBucketResultOutput) Encryption() BucketEncryptionResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketEncryptionResponse { return v.Encryption }).(BucketEncryptionResponseOutput)
}

// HTTP 1.1 Entity tag for the bucket.
func (o LookupBucketResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Etag }).(pulumi.StringOutput)
}

// The bucket's IAM configuration.
func (o LookupBucketResultOutput) IamConfiguration() BucketIamConfigurationResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketIamConfigurationResponse { return v.IamConfiguration }).(BucketIamConfigurationResponseOutput)
}

// The kind of item this is. For buckets, this is always storage#bucket.
func (o LookupBucketResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Kind }).(pulumi.StringOutput)
}

// User-provided labels, in key/value pairs.
func (o LookupBucketResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBucketResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The bucket's lifecycle configuration. See lifecycle management for more information.
func (o LookupBucketResultOutput) Lifecycle() BucketLifecycleResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketLifecycleResponse { return v.Lifecycle }).(BucketLifecycleResponseOutput)
}

// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
func (o LookupBucketResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Location }).(pulumi.StringOutput)
}

// The type of the bucket location.
func (o LookupBucketResultOutput) LocationType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.LocationType }).(pulumi.StringOutput)
}

// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
func (o LookupBucketResultOutput) Logging() BucketLoggingResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketLoggingResponse { return v.Logging }).(BucketLoggingResponseOutput)
}

// The metadata generation of this bucket.
func (o LookupBucketResultOutput) Metageneration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Metageneration }).(pulumi.StringOutput)
}

// The name of the bucket.
func (o LookupBucketResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Name }).(pulumi.StringOutput)
}

// The owner of the bucket. This is always the project team's owner group.
func (o LookupBucketResultOutput) Owner() BucketOwnerResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketOwnerResponse { return v.Owner }).(BucketOwnerResponseOutput)
}

// The project number of the project the bucket belongs to.
func (o LookupBucketResultOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.ProjectNumber }).(pulumi.StringOutput)
}

// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
func (o LookupBucketResultOutput) RetentionPolicy() BucketRetentionPolicyResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketRetentionPolicyResponse { return v.RetentionPolicy }).(BucketRetentionPolicyResponseOutput)
}

// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
func (o LookupBucketResultOutput) Rpo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Rpo }).(pulumi.StringOutput)
}

// Reserved for future use.
func (o LookupBucketResultOutput) SatisfiesPZS() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBucketResult) bool { return v.SatisfiesPZS }).(pulumi.BoolOutput)
}

// The URI of this bucket.
func (o LookupBucketResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
func (o LookupBucketResultOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.StorageClass }).(pulumi.StringOutput)
}

// The creation time of the bucket in RFC 3339 format.
func (o LookupBucketResultOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.TimeCreated }).(pulumi.StringOutput)
}

// The modification time of the bucket in RFC 3339 format.
func (o LookupBucketResultOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Updated }).(pulumi.StringOutput)
}

// The bucket's versioning configuration.
func (o LookupBucketResultOutput) Versioning() BucketVersioningResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketVersioningResponse { return v.Versioning }).(BucketVersioningResponseOutput)
}

// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
func (o LookupBucketResultOutput) Website() BucketWebsiteResponseOutput {
	return o.ApplyT(func(v LookupBucketResult) BucketWebsiteResponse { return v.Website }).(BucketWebsiteResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBucketResultOutput{})
}
