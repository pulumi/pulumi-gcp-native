// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new folder. Only applicable to buckets with hierarchical namespace enabled.
type Folder struct {
	pulumi.CustomResourceState

	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The creation time of the folder in RFC 3339 format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The kind of item this is. For folders, this is always storage#folder.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.
	Metageneration pulumi.StringOutput `pulumi:"metageneration"`
	// The name of the folder. Required if not specified by URL parameter.
	Name pulumi.StringOutput `pulumi:"name"`
	// Only present if the folder is part of an ongoing rename folder operation. Contains information which can be used to query the operation status.
	PendingRenameInfo FolderPendingRenameInfoResponseOutput `pulumi:"pendingRenameInfo"`
	// If true, any parent folder which doesn’t exist will be created automatically.
	Recursive pulumi.BoolPtrOutput `pulumi:"recursive"`
	// The link to this folder.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The modification time of the folder metadata in RFC 3339 format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewFolder registers a new resource with the given unique name, arguments, and options.
func NewFolder(ctx *pulumi.Context,
	name string, args *FolderArgs, opts ...pulumi.ResourceOption) (*Folder, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"bucket",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Folder
	err := ctx.RegisterResource("google-native:storage/v1:Folder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolder gets an existing Folder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderState, opts ...pulumi.ResourceOption) (*Folder, error) {
	var resource Folder
	err := ctx.ReadResource("google-native:storage/v1:Folder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Folder resources.
type folderState struct {
}

type FolderState struct {
}

func (FolderState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderState)(nil)).Elem()
}

type folderArgs struct {
	// The name of the bucket containing this folder.
	Bucket string `pulumi:"bucket"`
	// The creation time of the folder in RFC 3339 format.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the folder, including the bucket name, folder name.
	Id *string `pulumi:"id"`
	// The kind of item this is. For folders, this is always storage#folder.
	Kind *string `pulumi:"kind"`
	// The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.
	Metageneration *string `pulumi:"metageneration"`
	// The name of the folder. Required if not specified by URL parameter.
	Name *string `pulumi:"name"`
	// Only present if the folder is part of an ongoing rename folder operation. Contains information which can be used to query the operation status.
	PendingRenameInfo *FolderPendingRenameInfo `pulumi:"pendingRenameInfo"`
	// If true, any parent folder which doesn’t exist will be created automatically.
	Recursive *bool `pulumi:"recursive"`
	// The link to this folder.
	SelfLink *string `pulumi:"selfLink"`
	// The modification time of the folder metadata in RFC 3339 format.
	UpdateTime *string `pulumi:"updateTime"`
}

// The set of arguments for constructing a Folder resource.
type FolderArgs struct {
	// The name of the bucket containing this folder.
	Bucket pulumi.StringInput
	// The creation time of the folder in RFC 3339 format.
	CreateTime pulumi.StringPtrInput
	// The ID of the folder, including the bucket name, folder name.
	Id pulumi.StringPtrInput
	// The kind of item this is. For folders, this is always storage#folder.
	Kind pulumi.StringPtrInput
	// The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.
	Metageneration pulumi.StringPtrInput
	// The name of the folder. Required if not specified by URL parameter.
	Name pulumi.StringPtrInput
	// Only present if the folder is part of an ongoing rename folder operation. Contains information which can be used to query the operation status.
	PendingRenameInfo FolderPendingRenameInfoPtrInput
	// If true, any parent folder which doesn’t exist will be created automatically.
	Recursive pulumi.BoolPtrInput
	// The link to this folder.
	SelfLink pulumi.StringPtrInput
	// The modification time of the folder metadata in RFC 3339 format.
	UpdateTime pulumi.StringPtrInput
}

func (FolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderArgs)(nil)).Elem()
}

type FolderInput interface {
	pulumi.Input

	ToFolderOutput() FolderOutput
	ToFolderOutputWithContext(ctx context.Context) FolderOutput
}

func (*Folder) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (i *Folder) ToFolderOutput() FolderOutput {
	return i.ToFolderOutputWithContext(context.Background())
}

func (i *Folder) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderOutput)
}

type FolderOutput struct{ *pulumi.OutputState }

func (FolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Folder)(nil)).Elem()
}

func (o FolderOutput) ToFolderOutput() FolderOutput {
	return o
}

func (o FolderOutput) ToFolderOutputWithContext(ctx context.Context) FolderOutput {
	return o
}

func (o FolderOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The creation time of the folder in RFC 3339 format.
func (o FolderOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The kind of item this is. For folders, this is always storage#folder.
func (o FolderOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.
func (o FolderOutput) Metageneration() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Metageneration }).(pulumi.StringOutput)
}

// The name of the folder. Required if not specified by URL parameter.
func (o FolderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Only present if the folder is part of an ongoing rename folder operation. Contains information which can be used to query the operation status.
func (o FolderOutput) PendingRenameInfo() FolderPendingRenameInfoResponseOutput {
	return o.ApplyT(func(v *Folder) FolderPendingRenameInfoResponseOutput { return v.PendingRenameInfo }).(FolderPendingRenameInfoResponseOutput)
}

// If true, any parent folder which doesn’t exist will be created automatically.
func (o FolderOutput) Recursive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Folder) pulumi.BoolPtrOutput { return v.Recursive }).(pulumi.BoolPtrOutput)
}

// The link to this folder.
func (o FolderOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The modification time of the folder metadata in RFC 3339 format.
func (o FolderOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Folder) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderInput)(nil)).Elem(), &Folder{})
	pulumi.RegisterOutputType(FolderOutput{})
}
