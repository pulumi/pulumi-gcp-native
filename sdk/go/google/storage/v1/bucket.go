// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new bucket.
type Bucket struct {
	pulumi.CustomResourceState

	// Access controls on the bucket.
	Acl BucketAccessControlResponseArrayOutput `pulumi:"acl"`
	// The bucket's Autoclass configuration.
	Autoclass BucketAutoclassResponseOutput `pulumi:"autoclass"`
	// The bucket's billing configuration.
	Billing BucketBillingResponseOutput `pulumi:"billing"`
	// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
	Cors BucketCorsItemResponseArrayOutput `pulumi:"cors"`
	// The bucket's custom placement configuration for Custom Dual Regions.
	CustomPlacementConfig BucketCustomPlacementConfigResponseOutput `pulumi:"customPlacementConfig"`
	// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
	DefaultEventBasedHold pulumi.BoolOutput `pulumi:"defaultEventBasedHold"`
	// Default access controls to apply to new objects when no ACL is provided.
	DefaultObjectAcl ObjectAccessControlResponseArrayOutput `pulumi:"defaultObjectAcl"`
	// When set to true, object retention is enabled for this bucket.
	EnableObjectRetention pulumi.BoolPtrOutput `pulumi:"enableObjectRetention"`
	// Encryption configuration for a bucket.
	Encryption BucketEncryptionResponseOutput `pulumi:"encryption"`
	// HTTP 1.1 Entity tag for the bucket.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The bucket's IAM configuration.
	IamConfiguration BucketIamConfigurationResponseOutput `pulumi:"iamConfiguration"`
	// The kind of item this is. For buckets, this is always storage#bucket.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// User-provided labels, in key/value pairs.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The bucket's lifecycle configuration. See lifecycle management for more information.
	Lifecycle BucketLifecycleResponseOutput `pulumi:"lifecycle"`
	// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
	Location pulumi.StringOutput `pulumi:"location"`
	// The type of the bucket location.
	LocationType pulumi.StringOutput `pulumi:"locationType"`
	// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
	Logging BucketLoggingResponseOutput `pulumi:"logging"`
	// The metadata generation of this bucket.
	Metageneration pulumi.StringOutput `pulumi:"metageneration"`
	// The name of the bucket.
	Name pulumi.StringOutput `pulumi:"name"`
	// The bucket's object retention config.
	ObjectRetention BucketObjectRetentionResponseOutput `pulumi:"objectRetention"`
	// The owner of the bucket. This is always the project team's owner group.
	Owner BucketOwnerResponseOutput `pulumi:"owner"`
	// Apply a predefined set of access controls to this bucket.
	PredefinedAcl pulumi.StringPtrOutput `pulumi:"predefinedAcl"`
	// Apply a predefined set of default object access controls to this bucket.
	PredefinedDefaultObjectAcl pulumi.StringPtrOutput `pulumi:"predefinedDefaultObjectAcl"`
	// A valid API project identifier.
	Project pulumi.StringOutput `pulumi:"project"`
	// The project number of the project the bucket belongs to.
	ProjectNumber pulumi.StringOutput `pulumi:"projectNumber"`
	// Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
	Projection pulumi.StringPtrOutput `pulumi:"projection"`
	// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
	RetentionPolicy BucketRetentionPolicyResponseOutput `pulumi:"retentionPolicy"`
	// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
	Rpo pulumi.StringOutput `pulumi:"rpo"`
	// Reserved for future use.
	SatisfiesPZS pulumi.BoolOutput `pulumi:"satisfiesPZS"`
	// The URI of this bucket.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted.
	SoftDeletePolicy BucketSoftDeletePolicyResponseOutput `pulumi:"softDeletePolicy"`
	// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
	StorageClass pulumi.StringOutput `pulumi:"storageClass"`
	// The creation time of the bucket in RFC 3339 format.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The modification time of the bucket in RFC 3339 format.
	Updated pulumi.StringOutput `pulumi:"updated"`
	// The project to be billed for this request.
	UserProject pulumi.StringPtrOutput `pulumi:"userProject"`
	// The bucket's versioning configuration.
	Versioning BucketVersioningResponseOutput `pulumi:"versioning"`
	// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
	Website BucketWebsiteResponseOutput `pulumi:"website"`
}

// NewBucket registers a new resource with the given unique name, arguments, and options.
func NewBucket(ctx *pulumi.Context,
	name string, args *BucketArgs, opts ...pulumi.ResourceOption) (*Bucket, error) {
	if args == nil {
		args = &BucketArgs{}
	}

	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bucket
	err := ctx.RegisterResource("google-native:storage/v1:Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucket gets an existing Bucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketState, opts ...pulumi.ResourceOption) (*Bucket, error) {
	var resource Bucket
	err := ctx.ReadResource("google-native:storage/v1:Bucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bucket resources.
type bucketState struct {
}

type BucketState struct {
}

func (BucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketState)(nil)).Elem()
}

type bucketArgs struct {
	// Access controls on the bucket.
	Acl []BucketAccessControlType `pulumi:"acl"`
	// The bucket's Autoclass configuration.
	Autoclass *BucketAutoclass `pulumi:"autoclass"`
	// The bucket's billing configuration.
	Billing *BucketBilling `pulumi:"billing"`
	// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
	Cors []BucketCorsItem `pulumi:"cors"`
	// The bucket's custom placement configuration for Custom Dual Regions.
	CustomPlacementConfig *BucketCustomPlacementConfig `pulumi:"customPlacementConfig"`
	// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
	DefaultEventBasedHold *bool `pulumi:"defaultEventBasedHold"`
	// Default access controls to apply to new objects when no ACL is provided.
	DefaultObjectAcl []ObjectAccessControlType `pulumi:"defaultObjectAcl"`
	// When set to true, object retention is enabled for this bucket.
	EnableObjectRetention *bool `pulumi:"enableObjectRetention"`
	// Encryption configuration for a bucket.
	Encryption *BucketEncryption `pulumi:"encryption"`
	// HTTP 1.1 Entity tag for the bucket.
	Etag *string `pulumi:"etag"`
	// The bucket's IAM configuration.
	IamConfiguration *BucketIamConfiguration `pulumi:"iamConfiguration"`
	// The ID of the bucket. For buckets, the id and name properties are the same.
	Id *string `pulumi:"id"`
	// The kind of item this is. For buckets, this is always storage#bucket.
	Kind *string `pulumi:"kind"`
	// User-provided labels, in key/value pairs.
	Labels map[string]string `pulumi:"labels"`
	// The bucket's lifecycle configuration. See lifecycle management for more information.
	Lifecycle *BucketLifecycle `pulumi:"lifecycle"`
	// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
	Location *string `pulumi:"location"`
	// The type of the bucket location.
	LocationType *string `pulumi:"locationType"`
	// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
	Logging *BucketLogging `pulumi:"logging"`
	// The metadata generation of this bucket.
	Metageneration *string `pulumi:"metageneration"`
	// The name of the bucket.
	Name *string `pulumi:"name"`
	// The bucket's object retention config.
	ObjectRetention *BucketObjectRetention `pulumi:"objectRetention"`
	// The owner of the bucket. This is always the project team's owner group.
	Owner *BucketOwner `pulumi:"owner"`
	// Apply a predefined set of access controls to this bucket.
	PredefinedAcl *string `pulumi:"predefinedAcl"`
	// Apply a predefined set of default object access controls to this bucket.
	PredefinedDefaultObjectAcl *string `pulumi:"predefinedDefaultObjectAcl"`
	// A valid API project identifier.
	Project *string `pulumi:"project"`
	// The project number of the project the bucket belongs to.
	ProjectNumber *string `pulumi:"projectNumber"`
	// Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
	Projection *string `pulumi:"projection"`
	// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
	RetentionPolicy *BucketRetentionPolicy `pulumi:"retentionPolicy"`
	// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
	Rpo *string `pulumi:"rpo"`
	// Reserved for future use.
	SatisfiesPZS *bool `pulumi:"satisfiesPZS"`
	// The URI of this bucket.
	SelfLink *string `pulumi:"selfLink"`
	// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted.
	SoftDeletePolicy *BucketSoftDeletePolicy `pulumi:"softDeletePolicy"`
	// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
	StorageClass *string `pulumi:"storageClass"`
	// The creation time of the bucket in RFC 3339 format.
	TimeCreated *string `pulumi:"timeCreated"`
	// The modification time of the bucket in RFC 3339 format.
	Updated *string `pulumi:"updated"`
	// The project to be billed for this request.
	UserProject *string `pulumi:"userProject"`
	// The bucket's versioning configuration.
	Versioning *BucketVersioning `pulumi:"versioning"`
	// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
	Website *BucketWebsite `pulumi:"website"`
}

// The set of arguments for constructing a Bucket resource.
type BucketArgs struct {
	// Access controls on the bucket.
	Acl BucketAccessControlTypeArrayInput
	// The bucket's Autoclass configuration.
	Autoclass BucketAutoclassPtrInput
	// The bucket's billing configuration.
	Billing BucketBillingPtrInput
	// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
	Cors BucketCorsItemArrayInput
	// The bucket's custom placement configuration for Custom Dual Regions.
	CustomPlacementConfig BucketCustomPlacementConfigPtrInput
	// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
	DefaultEventBasedHold pulumi.BoolPtrInput
	// Default access controls to apply to new objects when no ACL is provided.
	DefaultObjectAcl ObjectAccessControlTypeArrayInput
	// When set to true, object retention is enabled for this bucket.
	EnableObjectRetention pulumi.BoolPtrInput
	// Encryption configuration for a bucket.
	Encryption BucketEncryptionPtrInput
	// HTTP 1.1 Entity tag for the bucket.
	Etag pulumi.StringPtrInput
	// The bucket's IAM configuration.
	IamConfiguration BucketIamConfigurationPtrInput
	// The ID of the bucket. For buckets, the id and name properties are the same.
	Id pulumi.StringPtrInput
	// The kind of item this is. For buckets, this is always storage#bucket.
	Kind pulumi.StringPtrInput
	// User-provided labels, in key/value pairs.
	Labels pulumi.StringMapInput
	// The bucket's lifecycle configuration. See lifecycle management for more information.
	Lifecycle BucketLifecyclePtrInput
	// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
	Location pulumi.StringPtrInput
	// The type of the bucket location.
	LocationType pulumi.StringPtrInput
	// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
	Logging BucketLoggingPtrInput
	// The metadata generation of this bucket.
	Metageneration pulumi.StringPtrInput
	// The name of the bucket.
	Name pulumi.StringPtrInput
	// The bucket's object retention config.
	ObjectRetention BucketObjectRetentionPtrInput
	// The owner of the bucket. This is always the project team's owner group.
	Owner BucketOwnerPtrInput
	// Apply a predefined set of access controls to this bucket.
	PredefinedAcl pulumi.StringPtrInput
	// Apply a predefined set of default object access controls to this bucket.
	PredefinedDefaultObjectAcl pulumi.StringPtrInput
	// A valid API project identifier.
	Project pulumi.StringPtrInput
	// The project number of the project the bucket belongs to.
	ProjectNumber pulumi.StringPtrInput
	// Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
	Projection pulumi.StringPtrInput
	// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
	RetentionPolicy BucketRetentionPolicyPtrInput
	// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
	Rpo pulumi.StringPtrInput
	// Reserved for future use.
	SatisfiesPZS pulumi.BoolPtrInput
	// The URI of this bucket.
	SelfLink pulumi.StringPtrInput
	// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted.
	SoftDeletePolicy BucketSoftDeletePolicyPtrInput
	// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
	StorageClass pulumi.StringPtrInput
	// The creation time of the bucket in RFC 3339 format.
	TimeCreated pulumi.StringPtrInput
	// The modification time of the bucket in RFC 3339 format.
	Updated pulumi.StringPtrInput
	// The project to be billed for this request.
	UserProject pulumi.StringPtrInput
	// The bucket's versioning configuration.
	Versioning BucketVersioningPtrInput
	// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
	Website BucketWebsitePtrInput
}

func (BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketArgs)(nil)).Elem()
}

type BucketInput interface {
	pulumi.Input

	ToBucketOutput() BucketOutput
	ToBucketOutputWithContext(ctx context.Context) BucketOutput
}

func (*Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (i *Bucket) ToBucketOutput() BucketOutput {
	return i.ToBucketOutputWithContext(context.Background())
}

func (i *Bucket) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOutput)
}

type BucketOutput struct{ *pulumi.OutputState }

func (BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (o BucketOutput) ToBucketOutput() BucketOutput {
	return o
}

func (o BucketOutput) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return o
}

// Access controls on the bucket.
func (o BucketOutput) Acl() BucketAccessControlResponseArrayOutput {
	return o.ApplyT(func(v *Bucket) BucketAccessControlResponseArrayOutput { return v.Acl }).(BucketAccessControlResponseArrayOutput)
}

// The bucket's Autoclass configuration.
func (o BucketOutput) Autoclass() BucketAutoclassResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketAutoclassResponseOutput { return v.Autoclass }).(BucketAutoclassResponseOutput)
}

// The bucket's billing configuration.
func (o BucketOutput) Billing() BucketBillingResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketBillingResponseOutput { return v.Billing }).(BucketBillingResponseOutput)
}

// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
func (o BucketOutput) Cors() BucketCorsItemResponseArrayOutput {
	return o.ApplyT(func(v *Bucket) BucketCorsItemResponseArrayOutput { return v.Cors }).(BucketCorsItemResponseArrayOutput)
}

// The bucket's custom placement configuration for Custom Dual Regions.
func (o BucketOutput) CustomPlacementConfig() BucketCustomPlacementConfigResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketCustomPlacementConfigResponseOutput { return v.CustomPlacementConfig }).(BucketCustomPlacementConfigResponseOutput)
}

// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
func (o BucketOutput) DefaultEventBasedHold() pulumi.BoolOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolOutput { return v.DefaultEventBasedHold }).(pulumi.BoolOutput)
}

// Default access controls to apply to new objects when no ACL is provided.
func (o BucketOutput) DefaultObjectAcl() ObjectAccessControlResponseArrayOutput {
	return o.ApplyT(func(v *Bucket) ObjectAccessControlResponseArrayOutput { return v.DefaultObjectAcl }).(ObjectAccessControlResponseArrayOutput)
}

// When set to true, object retention is enabled for this bucket.
func (o BucketOutput) EnableObjectRetention() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolPtrOutput { return v.EnableObjectRetention }).(pulumi.BoolPtrOutput)
}

// Encryption configuration for a bucket.
func (o BucketOutput) Encryption() BucketEncryptionResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketEncryptionResponseOutput { return v.Encryption }).(BucketEncryptionResponseOutput)
}

// HTTP 1.1 Entity tag for the bucket.
func (o BucketOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The bucket's IAM configuration.
func (o BucketOutput) IamConfiguration() BucketIamConfigurationResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketIamConfigurationResponseOutput { return v.IamConfiguration }).(BucketIamConfigurationResponseOutput)
}

// The kind of item this is. For buckets, this is always storage#bucket.
func (o BucketOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// User-provided labels, in key/value pairs.
func (o BucketOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The bucket's lifecycle configuration. See lifecycle management for more information.
func (o BucketOutput) Lifecycle() BucketLifecycleResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketLifecycleResponseOutput { return v.Lifecycle }).(BucketLifecycleResponseOutput)
}

// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
func (o BucketOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The type of the bucket location.
func (o BucketOutput) LocationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.LocationType }).(pulumi.StringOutput)
}

// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
func (o BucketOutput) Logging() BucketLoggingResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketLoggingResponseOutput { return v.Logging }).(BucketLoggingResponseOutput)
}

// The metadata generation of this bucket.
func (o BucketOutput) Metageneration() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Metageneration }).(pulumi.StringOutput)
}

// The name of the bucket.
func (o BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The bucket's object retention config.
func (o BucketOutput) ObjectRetention() BucketObjectRetentionResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketObjectRetentionResponseOutput { return v.ObjectRetention }).(BucketObjectRetentionResponseOutput)
}

// The owner of the bucket. This is always the project team's owner group.
func (o BucketOutput) Owner() BucketOwnerResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketOwnerResponseOutput { return v.Owner }).(BucketOwnerResponseOutput)
}

// Apply a predefined set of access controls to this bucket.
func (o BucketOutput) PredefinedAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringPtrOutput { return v.PredefinedAcl }).(pulumi.StringPtrOutput)
}

// Apply a predefined set of default object access controls to this bucket.
func (o BucketOutput) PredefinedDefaultObjectAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringPtrOutput { return v.PredefinedDefaultObjectAcl }).(pulumi.StringPtrOutput)
}

// A valid API project identifier.
func (o BucketOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The project number of the project the bucket belongs to.
func (o BucketOutput) ProjectNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.ProjectNumber }).(pulumi.StringOutput)
}

// Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
func (o BucketOutput) Projection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringPtrOutput { return v.Projection }).(pulumi.StringPtrOutput)
}

// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
func (o BucketOutput) RetentionPolicy() BucketRetentionPolicyResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketRetentionPolicyResponseOutput { return v.RetentionPolicy }).(BucketRetentionPolicyResponseOutput)
}

// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
func (o BucketOutput) Rpo() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Rpo }).(pulumi.StringOutput)
}

// Reserved for future use.
func (o BucketOutput) SatisfiesPZS() pulumi.BoolOutput {
	return o.ApplyT(func(v *Bucket) pulumi.BoolOutput { return v.SatisfiesPZS }).(pulumi.BoolOutput)
}

// The URI of this bucket.
func (o BucketOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted.
func (o BucketOutput) SoftDeletePolicy() BucketSoftDeletePolicyResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketSoftDeletePolicyResponseOutput { return v.SoftDeletePolicy }).(BucketSoftDeletePolicyResponseOutput)
}

// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
func (o BucketOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.StorageClass }).(pulumi.StringOutput)
}

// The creation time of the bucket in RFC 3339 format.
func (o BucketOutput) TimeCreated() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.TimeCreated }).(pulumi.StringOutput)
}

// The modification time of the bucket in RFC 3339 format.
func (o BucketOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

// The project to be billed for this request.
func (o BucketOutput) UserProject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringPtrOutput { return v.UserProject }).(pulumi.StringPtrOutput)
}

// The bucket's versioning configuration.
func (o BucketOutput) Versioning() BucketVersioningResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketVersioningResponseOutput { return v.Versioning }).(BucketVersioningResponseOutput)
}

// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
func (o BucketOutput) Website() BucketWebsiteResponseOutput {
	return o.ApplyT(func(v *Bucket) BucketWebsiteResponseOutput { return v.Website }).(BucketWebsiteResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketInput)(nil)).Elem(), &Bucket{})
	pulumi.RegisterOutputType(BucketOutput{})
}
