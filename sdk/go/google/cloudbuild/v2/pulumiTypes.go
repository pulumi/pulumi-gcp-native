// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// Configuration for connections to github.com.
type GitHubConfig struct {
	// GitHub App installation id.
	AppInstallationId *string `pulumi:"appInstallationId"`
	// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
	AuthorizerCredential *OAuthCredential `pulumi:"authorizerCredential"`
}

// GitHubConfigInput is an input type that accepts GitHubConfigArgs and GitHubConfigOutput values.
// You can construct a concrete instance of `GitHubConfigInput` via:
//
//	GitHubConfigArgs{...}
type GitHubConfigInput interface {
	pulumi.Input

	ToGitHubConfigOutput() GitHubConfigOutput
	ToGitHubConfigOutputWithContext(context.Context) GitHubConfigOutput
}

// Configuration for connections to github.com.
type GitHubConfigArgs struct {
	// GitHub App installation id.
	AppInstallationId pulumi.StringPtrInput `pulumi:"appInstallationId"`
	// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
	AuthorizerCredential OAuthCredentialPtrInput `pulumi:"authorizerCredential"`
}

func (GitHubConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubConfig)(nil)).Elem()
}

func (i GitHubConfigArgs) ToGitHubConfigOutput() GitHubConfigOutput {
	return i.ToGitHubConfigOutputWithContext(context.Background())
}

func (i GitHubConfigArgs) ToGitHubConfigOutputWithContext(ctx context.Context) GitHubConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubConfigOutput)
}

func (i GitHubConfigArgs) ToGitHubConfigPtrOutput() GitHubConfigPtrOutput {
	return i.ToGitHubConfigPtrOutputWithContext(context.Background())
}

func (i GitHubConfigArgs) ToGitHubConfigPtrOutputWithContext(ctx context.Context) GitHubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubConfigOutput).ToGitHubConfigPtrOutputWithContext(ctx)
}

// GitHubConfigPtrInput is an input type that accepts GitHubConfigArgs, GitHubConfigPtr and GitHubConfigPtrOutput values.
// You can construct a concrete instance of `GitHubConfigPtrInput` via:
//
//	        GitHubConfigArgs{...}
//
//	or:
//
//	        nil
type GitHubConfigPtrInput interface {
	pulumi.Input

	ToGitHubConfigPtrOutput() GitHubConfigPtrOutput
	ToGitHubConfigPtrOutputWithContext(context.Context) GitHubConfigPtrOutput
}

type gitHubConfigPtrType GitHubConfigArgs

func GitHubConfigPtr(v *GitHubConfigArgs) GitHubConfigPtrInput {
	return (*gitHubConfigPtrType)(v)
}

func (*gitHubConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubConfig)(nil)).Elem()
}

func (i *gitHubConfigPtrType) ToGitHubConfigPtrOutput() GitHubConfigPtrOutput {
	return i.ToGitHubConfigPtrOutputWithContext(context.Background())
}

func (i *gitHubConfigPtrType) ToGitHubConfigPtrOutputWithContext(ctx context.Context) GitHubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubConfigPtrOutput)
}

// Configuration for connections to github.com.
type GitHubConfigOutput struct{ *pulumi.OutputState }

func (GitHubConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubConfig)(nil)).Elem()
}

func (o GitHubConfigOutput) ToGitHubConfigOutput() GitHubConfigOutput {
	return o
}

func (o GitHubConfigOutput) ToGitHubConfigOutputWithContext(ctx context.Context) GitHubConfigOutput {
	return o
}

func (o GitHubConfigOutput) ToGitHubConfigPtrOutput() GitHubConfigPtrOutput {
	return o.ToGitHubConfigPtrOutputWithContext(context.Background())
}

func (o GitHubConfigOutput) ToGitHubConfigPtrOutputWithContext(ctx context.Context) GitHubConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubConfig) *GitHubConfig {
		return &v
	}).(GitHubConfigPtrOutput)
}

// GitHub App installation id.
func (o GitHubConfigOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubConfig) *string { return v.AppInstallationId }).(pulumi.StringPtrOutput)
}

// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
func (o GitHubConfigOutput) AuthorizerCredential() OAuthCredentialPtrOutput {
	return o.ApplyT(func(v GitHubConfig) *OAuthCredential { return v.AuthorizerCredential }).(OAuthCredentialPtrOutput)
}

type GitHubConfigPtrOutput struct{ *pulumi.OutputState }

func (GitHubConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubConfig)(nil)).Elem()
}

func (o GitHubConfigPtrOutput) ToGitHubConfigPtrOutput() GitHubConfigPtrOutput {
	return o
}

func (o GitHubConfigPtrOutput) ToGitHubConfigPtrOutputWithContext(ctx context.Context) GitHubConfigPtrOutput {
	return o
}

func (o GitHubConfigPtrOutput) Elem() GitHubConfigOutput {
	return o.ApplyT(func(v *GitHubConfig) GitHubConfig {
		if v != nil {
			return *v
		}
		var ret GitHubConfig
		return ret
	}).(GitHubConfigOutput)
}

// GitHub App installation id.
func (o GitHubConfigPtrOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.StringPtrOutput)
}

// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
func (o GitHubConfigPtrOutput) AuthorizerCredential() OAuthCredentialPtrOutput {
	return o.ApplyT(func(v *GitHubConfig) *OAuthCredential {
		if v == nil {
			return nil
		}
		return v.AuthorizerCredential
	}).(OAuthCredentialPtrOutput)
}

// Configuration for connections to github.com.
type GitHubConfigResponse struct {
	// GitHub App installation id.
	AppInstallationId string `pulumi:"appInstallationId"`
	// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
	AuthorizerCredential OAuthCredentialResponse `pulumi:"authorizerCredential"`
}

// Configuration for connections to github.com.
type GitHubConfigResponseOutput struct{ *pulumi.OutputState }

func (GitHubConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubConfigResponse)(nil)).Elem()
}

func (o GitHubConfigResponseOutput) ToGitHubConfigResponseOutput() GitHubConfigResponseOutput {
	return o
}

func (o GitHubConfigResponseOutput) ToGitHubConfigResponseOutputWithContext(ctx context.Context) GitHubConfigResponseOutput {
	return o
}

// GitHub App installation id.
func (o GitHubConfigResponseOutput) AppInstallationId() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubConfigResponse) string { return v.AppInstallationId }).(pulumi.StringOutput)
}

// OAuth credential of the account that authorized the Cloud Build GitHub App. It is recommended to use a robot account instead of a human user account. The OAuth token must be tied to the Cloud Build GitHub App.
func (o GitHubConfigResponseOutput) AuthorizerCredential() OAuthCredentialResponseOutput {
	return o.ApplyT(func(v GitHubConfigResponse) OAuthCredentialResponse { return v.AuthorizerCredential }).(OAuthCredentialResponseOutput)
}

// Configuration for connections to an instance of GitHub Enterprise.
type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig struct {
	// API Key used for authentication of webhook events.
	ApiKey string `pulumi:"apiKey"`
	// Id of the GitHub App created from the manifest.
	AppId *string `pulumi:"appId"`
	// ID of the installation of the GitHub App.
	AppInstallationId *string `pulumi:"appInstallationId"`
	// The URL-friendly name of the GitHub App.
	AppSlug *string `pulumi:"appSlug"`
	// The URI of the GitHub Enterprise host this connection is for.
	HostUri string `pulumi:"hostUri"`
	// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion *string `pulumi:"privateKeySecretVersion"`
	// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
	ServiceDirectoryConfig *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitHub Enterprise.
	SslCa *string `pulumi:"sslCa"`
	// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion *string `pulumi:"webhookSecretSecretVersion"`
}

// GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigInput is an input type that accepts GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs and GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput values.
// You can construct a concrete instance of `GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigInput` via:
//
//	GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs{...}
type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigInput interface {
	pulumi.Input

	ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput
	ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutputWithContext(context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput
}

// Configuration for connections to an instance of GitHub Enterprise.
type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs struct {
	// API Key used for authentication of webhook events.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// Id of the GitHub App created from the manifest.
	AppId pulumi.StringPtrInput `pulumi:"appId"`
	// ID of the installation of the GitHub App.
	AppInstallationId pulumi.StringPtrInput `pulumi:"appInstallationId"`
	// The URL-friendly name of the GitHub App.
	AppSlug pulumi.StringPtrInput `pulumi:"appSlug"`
	// The URI of the GitHub Enterprise host this connection is for.
	HostUri pulumi.StringInput `pulumi:"hostUri"`
	// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion pulumi.StringPtrInput `pulumi:"privateKeySecretVersion"`
	// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
	ServiceDirectoryConfig GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitHub Enterprise.
	SslCa pulumi.StringPtrInput `pulumi:"sslCa"`
	// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion pulumi.StringPtrInput `pulumi:"webhookSecretSecretVersion"`
}

func (GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig)(nil)).Elem()
}

func (i GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput {
	return i.ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutputWithContext(context.Background())
}

func (i GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput)
}

func (i GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return i.ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput).ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(ctx)
}

// GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrInput is an input type that accepts GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs, GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtr and GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrInput` via:
//
//	        GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput
	ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput
}

type googleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrType GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs

func GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtr(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrInput {
	return (*googleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrType)(v)
}

func (*googleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig)(nil)).Elem()
}

func (i *googleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrType) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return i.ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrType) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput)
}

// Configuration for connections to an instance of GitHub Enterprise.
type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return o.ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig {
		return &v
	}).(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput)
}

// API Key used for authentication of webhook events.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Id of the GitHub App created from the manifest.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string { return v.AppId }).(pulumi.StringPtrOutput)
}

// ID of the installation of the GitHub App.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string { return v.AppInstallationId }).(pulumi.StringPtrOutput)
}

// The URL-friendly name of the GitHub App.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string { return v.AppSlug }).(pulumi.StringPtrOutput)
}

// The URI of the GitHub Enterprise host this connection is for.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) string { return v.HostUri }).(pulumi.StringOutput)
}

// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string { return v.PrivateKeySecretVersion }).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) ServiceDirectoryConfig() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitHub Enterprise.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string { return v.SslCa }).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string { return v.WebhookSecretSecretVersion }).(pulumi.StringPtrOutput)
}

type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) Elem() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig
		return ret
	}).(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput)
}

// API Key used for authentication of webhook events.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ApiKey
	}).(pulumi.StringPtrOutput)
}

// Id of the GitHub App created from the manifest.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) AppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppId
	}).(pulumi.StringPtrOutput)
}

// ID of the installation of the GitHub App.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) AppInstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppInstallationId
	}).(pulumi.StringPtrOutput)
}

// The URL-friendly name of the GitHub App.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) AppSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.AppSlug
	}).(pulumi.StringPtrOutput)
}

// The URI of the GitHub Enterprise host this connection is for.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return &v.HostUri
	}).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) PrivateKeySecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeySecretVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) ServiceDirectoryConfig() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitHub Enterprise.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCa
	}).(pulumi.StringPtrOutput)
}

// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration for connections to an instance of GitHub Enterprise.
type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse struct {
	// API Key used for authentication of webhook events.
	ApiKey string `pulumi:"apiKey"`
	// Id of the GitHub App created from the manifest.
	AppId string `pulumi:"appId"`
	// ID of the installation of the GitHub App.
	AppInstallationId string `pulumi:"appInstallationId"`
	// The URL-friendly name of the GitHub App.
	AppSlug string `pulumi:"appSlug"`
	// The URI of the GitHub Enterprise host this connection is for.
	HostUri string `pulumi:"hostUri"`
	// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	PrivateKeySecretVersion string `pulumi:"privateKeySecretVersion"`
	// GitHub Enterprise version installed at the host_uri.
	ServerVersion string `pulumi:"serverVersion"`
	// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
	ServiceDirectoryConfig GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponse `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitHub Enterprise.
	SslCa string `pulumi:"sslCa"`
	// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
}

// Configuration for connections to an instance of GitHub Enterprise.
type GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) ToGoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput {
	return o
}

// API Key used for authentication of webhook events.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Id of the GitHub App created from the manifest.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string { return v.AppId }).(pulumi.StringOutput)
}

// ID of the installation of the GitHub App.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) AppInstallationId() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string { return v.AppInstallationId }).(pulumi.StringOutput)
}

// The URL-friendly name of the GitHub App.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) AppSlug() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string { return v.AppSlug }).(pulumi.StringOutput)
}

// The URI of the GitHub Enterprise host this connection is for.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string { return v.HostUri }).(pulumi.StringOutput)
}

// SecretManager resource containing the private key of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) PrivateKeySecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string {
		return v.PrivateKeySecretVersion
	}).(pulumi.StringOutput)
}

// GitHub Enterprise version installed at the host_uri.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) ServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string { return v.ServerVersion }).(pulumi.StringOutput)
}

// Configuration for using Service Directory to privately connect to a GitHub Enterprise server. This should only be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitHub Enterprise server will be made over the public internet.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) ServiceDirectoryConfig() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponse {
		return v.ServiceDirectoryConfig
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput)
}

// SSL certificate to use for requests to GitHub Enterprise.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) SslCa() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string { return v.SslCa }).(pulumi.StringOutput)
}

// SecretManager resource containing the webhook secret of the GitHub App, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse) string {
		return v.WebhookSecretSecretVersion
	}).(pulumi.StringOutput)
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
type GoogleDevtoolsCloudbuildV2GitLabConfig struct {
	// A GitLab personal access token with the `api` scope access.
	AuthorizerCredential UserCredential `pulumi:"authorizerCredential"`
	// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
	HostUri *string `pulumi:"hostUri"`
	// A GitLab personal access token with the minimum `read_api` scope access.
	ReadAuthorizerCredential UserCredential `pulumi:"readAuthorizerCredential"`
	// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
	ServiceDirectoryConfig *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitLab Enterprise.
	SslCa *string `pulumi:"sslCa"`
	// Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
}

// GoogleDevtoolsCloudbuildV2GitLabConfigInput is an input type that accepts GoogleDevtoolsCloudbuildV2GitLabConfigArgs and GoogleDevtoolsCloudbuildV2GitLabConfigOutput values.
// You can construct a concrete instance of `GoogleDevtoolsCloudbuildV2GitLabConfigInput` via:
//
//	GoogleDevtoolsCloudbuildV2GitLabConfigArgs{...}
type GoogleDevtoolsCloudbuildV2GitLabConfigInput interface {
	pulumi.Input

	ToGoogleDevtoolsCloudbuildV2GitLabConfigOutput() GoogleDevtoolsCloudbuildV2GitLabConfigOutput
	ToGoogleDevtoolsCloudbuildV2GitLabConfigOutputWithContext(context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigOutput
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
type GoogleDevtoolsCloudbuildV2GitLabConfigArgs struct {
	// A GitLab personal access token with the `api` scope access.
	AuthorizerCredential UserCredentialInput `pulumi:"authorizerCredential"`
	// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// A GitLab personal access token with the minimum `read_api` scope access.
	ReadAuthorizerCredential UserCredentialInput `pulumi:"readAuthorizerCredential"`
	// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
	ServiceDirectoryConfig GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitLab Enterprise.
	SslCa pulumi.StringPtrInput `pulumi:"sslCa"`
	// Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion pulumi.StringInput `pulumi:"webhookSecretSecretVersion"`
}

func (GoogleDevtoolsCloudbuildV2GitLabConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitLabConfig)(nil)).Elem()
}

func (i GoogleDevtoolsCloudbuildV2GitLabConfigArgs) ToGoogleDevtoolsCloudbuildV2GitLabConfigOutput() GoogleDevtoolsCloudbuildV2GitLabConfigOutput {
	return i.ToGoogleDevtoolsCloudbuildV2GitLabConfigOutputWithContext(context.Background())
}

func (i GoogleDevtoolsCloudbuildV2GitLabConfigArgs) ToGoogleDevtoolsCloudbuildV2GitLabConfigOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2GitLabConfigOutput)
}

func (i GoogleDevtoolsCloudbuildV2GitLabConfigArgs) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return i.ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsCloudbuildV2GitLabConfigArgs) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2GitLabConfigOutput).ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(ctx)
}

// GoogleDevtoolsCloudbuildV2GitLabConfigPtrInput is an input type that accepts GoogleDevtoolsCloudbuildV2GitLabConfigArgs, GoogleDevtoolsCloudbuildV2GitLabConfigPtr and GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsCloudbuildV2GitLabConfigPtrInput` via:
//
//	        GoogleDevtoolsCloudbuildV2GitLabConfigArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsCloudbuildV2GitLabConfigPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput
	ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput
}

type googleDevtoolsCloudbuildV2GitLabConfigPtrType GoogleDevtoolsCloudbuildV2GitLabConfigArgs

func GoogleDevtoolsCloudbuildV2GitLabConfigPtr(v *GoogleDevtoolsCloudbuildV2GitLabConfigArgs) GoogleDevtoolsCloudbuildV2GitLabConfigPtrInput {
	return (*googleDevtoolsCloudbuildV2GitLabConfigPtrType)(v)
}

func (*googleDevtoolsCloudbuildV2GitLabConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsCloudbuildV2GitLabConfig)(nil)).Elem()
}

func (i *googleDevtoolsCloudbuildV2GitLabConfigPtrType) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return i.ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsCloudbuildV2GitLabConfigPtrType) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput)
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
type GoogleDevtoolsCloudbuildV2GitLabConfigOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2GitLabConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitLabConfig)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigOutput() GoogleDevtoolsCloudbuildV2GitLabConfigOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return o.ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsCloudbuildV2GitLabConfig) *GoogleDevtoolsCloudbuildV2GitLabConfig {
		return &v
	}).(GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput)
}

// A GitLab personal access token with the `api` scope access.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) AuthorizerCredential() UserCredentialOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfig) UserCredential { return v.AuthorizerCredential }).(UserCredentialOutput)
}

// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfig) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// A GitLab personal access token with the minimum `read_api` scope access.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) ReadAuthorizerCredential() UserCredentialOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfig) UserCredential { return v.ReadAuthorizerCredential }).(UserCredentialOutput)
}

// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) ServiceDirectoryConfig() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfig) *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig {
		return v.ServiceDirectoryConfig
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitLab Enterprise.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfig) *string { return v.SslCa }).(pulumi.StringPtrOutput)
}

// Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfig) string { return v.WebhookSecretSecretVersion }).(pulumi.StringOutput)
}

type GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsCloudbuildV2GitLabConfig)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput() GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) Elem() GoogleDevtoolsCloudbuildV2GitLabConfigOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitLabConfig) GoogleDevtoolsCloudbuildV2GitLabConfig {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsCloudbuildV2GitLabConfig
		return ret
	}).(GoogleDevtoolsCloudbuildV2GitLabConfigOutput)
}

// A GitLab personal access token with the `api` scope access.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) AuthorizerCredential() UserCredentialPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitLabConfig) *UserCredential {
		if v == nil {
			return nil
		}
		return &v.AuthorizerCredential
	}).(UserCredentialPtrOutput)
}

// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitLabConfig) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// A GitLab personal access token with the minimum `read_api` scope access.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) ReadAuthorizerCredential() UserCredentialPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitLabConfig) *UserCredential {
		if v == nil {
			return nil
		}
		return &v.ReadAuthorizerCredential
	}).(UserCredentialPtrOutput)
}

// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) ServiceDirectoryConfig() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitLabConfig) *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput)
}

// SSL certificate to use for requests to GitLab Enterprise.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitLabConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCa
	}).(pulumi.StringPtrOutput)
}

// Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput) WebhookSecretSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2GitLabConfig) *string {
		if v == nil {
			return nil
		}
		return &v.WebhookSecretSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
type GoogleDevtoolsCloudbuildV2GitLabConfigResponse struct {
	// A GitLab personal access token with the `api` scope access.
	AuthorizerCredential UserCredentialResponse `pulumi:"authorizerCredential"`
	// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
	HostUri string `pulumi:"hostUri"`
	// A GitLab personal access token with the minimum `read_api` scope access.
	ReadAuthorizerCredential UserCredentialResponse `pulumi:"readAuthorizerCredential"`
	// Version of the GitLab Enterprise server running on the `host_uri`.
	ServerVersion string `pulumi:"serverVersion"`
	// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
	ServiceDirectoryConfig GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponse `pulumi:"serviceDirectoryConfig"`
	// SSL certificate to use for requests to GitLab Enterprise.
	SslCa string `pulumi:"sslCa"`
	// Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
	WebhookSecretSecretVersion string `pulumi:"webhookSecretSecretVersion"`
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
type GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitLabConfigResponse)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput() GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) ToGoogleDevtoolsCloudbuildV2GitLabConfigResponseOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput {
	return o
}

// A GitLab personal access token with the `api` scope access.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) AuthorizerCredential() UserCredentialResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfigResponse) UserCredentialResponse {
		return v.AuthorizerCredential
	}).(UserCredentialResponseOutput)
}

// The URI of the GitLab Enterprise host this connection is for. If not specified, the default value is https://gitlab.com.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfigResponse) string { return v.HostUri }).(pulumi.StringOutput)
}

// A GitLab personal access token with the minimum `read_api` scope access.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) ReadAuthorizerCredential() UserCredentialResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfigResponse) UserCredentialResponse {
		return v.ReadAuthorizerCredential
	}).(UserCredentialResponseOutput)
}

// Version of the GitLab Enterprise server running on the `host_uri`.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) ServerVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfigResponse) string { return v.ServerVersion }).(pulumi.StringOutput)
}

// Configuration for using Service Directory to privately connect to a GitLab Enterprise server. This should only be set if the GitLab Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, calls to the GitLab Enterprise server will be made over the public internet.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) ServiceDirectoryConfig() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfigResponse) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponse {
		return v.ServiceDirectoryConfig
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput)
}

// SSL certificate to use for requests to GitLab Enterprise.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) SslCa() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfigResponse) string { return v.SslCa }).(pulumi.StringOutput)
}

// Immutable. SecretManager resource containing the webhook secret of a GitLab Enterprise project, formatted as `projects/*/secrets/*/versions/*`.
func (o GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput) WebhookSecretSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2GitLabConfigResponse) string { return v.WebhookSecretSecretVersion }).(pulumi.StringOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a connection.
type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig struct {
	// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigInput is an input type that accepts GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs and GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigInput` via:
//
//	GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs{...}
type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigInput interface {
	pulumi.Input

	ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput
	ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutputWithContext(context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput
}

// ServiceDirectoryConfig represents Service Directory configuration for a connection.
type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs struct {
	// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringInput `pulumi:"service"`
}

func (GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig)(nil)).Elem()
}

func (i GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput {
	return i.ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput)
}

func (i GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return i.ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput).ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrInput is an input type that accepts GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs, GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtr and GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrInput` via:
//
//	        GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput
	ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput
}

type googleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrType GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs

func GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtr(v *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrInput {
	return (*googleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrType)(v)
}

func (*googleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig)(nil)).Elem()
}

func (i *googleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrType) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return i.ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *googleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrType) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a connection.
type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o.ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig) *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig {
		return &v
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput)
}

// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig) string { return v.Service }).(pulumi.StringOutput)
}

type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput) Elem() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig
		return ret
	}).(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput)
}

// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Service
	}).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a connection.
type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponse struct {
	// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ServiceDirectoryConfig represents Service Directory configuration for a connection.
type GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput struct{ *pulumi.OutputState }

func (GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponse)(nil)).Elem()
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput() GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput {
	return o
}

func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput) ToGoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutputWithContext(ctx context.Context) GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput {
	return o
}

// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Describes stage and necessary actions to be taken by the user to complete the installation. Used for GitHub and GitHub Enterprise based connections.
type InstallationStateResponse struct {
	// Link to follow for next action. Empty string if the installation is already complete.
	ActionUri string `pulumi:"actionUri"`
	// Message of what the user should do next to continue the installation. Empty string if the installation is already complete.
	Message string `pulumi:"message"`
	// Current step of the installation process.
	Stage string `pulumi:"stage"`
}

// Describes stage and necessary actions to be taken by the user to complete the installation. Used for GitHub and GitHub Enterprise based connections.
type InstallationStateResponseOutput struct{ *pulumi.OutputState }

func (InstallationStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstallationStateResponse)(nil)).Elem()
}

func (o InstallationStateResponseOutput) ToInstallationStateResponseOutput() InstallationStateResponseOutput {
	return o
}

func (o InstallationStateResponseOutput) ToInstallationStateResponseOutputWithContext(ctx context.Context) InstallationStateResponseOutput {
	return o
}

// Link to follow for next action. Empty string if the installation is already complete.
func (o InstallationStateResponseOutput) ActionUri() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationStateResponse) string { return v.ActionUri }).(pulumi.StringOutput)
}

// Message of what the user should do next to continue the installation. Empty string if the installation is already complete.
func (o InstallationStateResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationStateResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Current step of the installation process.
func (o InstallationStateResponseOutput) Stage() pulumi.StringOutput {
	return o.ApplyT(func(v InstallationStateResponse) string { return v.Stage }).(pulumi.StringOutput)
}

// Represents an OAuth token of the account that authorized the Connection, and associated metadata.
type OAuthCredential struct {
	// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion *string `pulumi:"oauthTokenSecretVersion"`
}

// OAuthCredentialInput is an input type that accepts OAuthCredentialArgs and OAuthCredentialOutput values.
// You can construct a concrete instance of `OAuthCredentialInput` via:
//
//	OAuthCredentialArgs{...}
type OAuthCredentialInput interface {
	pulumi.Input

	ToOAuthCredentialOutput() OAuthCredentialOutput
	ToOAuthCredentialOutputWithContext(context.Context) OAuthCredentialOutput
}

// Represents an OAuth token of the account that authorized the Connection, and associated metadata.
type OAuthCredentialArgs struct {
	// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion pulumi.StringPtrInput `pulumi:"oauthTokenSecretVersion"`
}

func (OAuthCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthCredential)(nil)).Elem()
}

func (i OAuthCredentialArgs) ToOAuthCredentialOutput() OAuthCredentialOutput {
	return i.ToOAuthCredentialOutputWithContext(context.Background())
}

func (i OAuthCredentialArgs) ToOAuthCredentialOutputWithContext(ctx context.Context) OAuthCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthCredentialOutput)
}

func (i OAuthCredentialArgs) ToOAuthCredentialPtrOutput() OAuthCredentialPtrOutput {
	return i.ToOAuthCredentialPtrOutputWithContext(context.Background())
}

func (i OAuthCredentialArgs) ToOAuthCredentialPtrOutputWithContext(ctx context.Context) OAuthCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthCredentialOutput).ToOAuthCredentialPtrOutputWithContext(ctx)
}

// OAuthCredentialPtrInput is an input type that accepts OAuthCredentialArgs, OAuthCredentialPtr and OAuthCredentialPtrOutput values.
// You can construct a concrete instance of `OAuthCredentialPtrInput` via:
//
//	        OAuthCredentialArgs{...}
//
//	or:
//
//	        nil
type OAuthCredentialPtrInput interface {
	pulumi.Input

	ToOAuthCredentialPtrOutput() OAuthCredentialPtrOutput
	ToOAuthCredentialPtrOutputWithContext(context.Context) OAuthCredentialPtrOutput
}

type oauthCredentialPtrType OAuthCredentialArgs

func OAuthCredentialPtr(v *OAuthCredentialArgs) OAuthCredentialPtrInput {
	return (*oauthCredentialPtrType)(v)
}

func (*oauthCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthCredential)(nil)).Elem()
}

func (i *oauthCredentialPtrType) ToOAuthCredentialPtrOutput() OAuthCredentialPtrOutput {
	return i.ToOAuthCredentialPtrOutputWithContext(context.Background())
}

func (i *oauthCredentialPtrType) ToOAuthCredentialPtrOutputWithContext(ctx context.Context) OAuthCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OAuthCredentialPtrOutput)
}

// Represents an OAuth token of the account that authorized the Connection, and associated metadata.
type OAuthCredentialOutput struct{ *pulumi.OutputState }

func (OAuthCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthCredential)(nil)).Elem()
}

func (o OAuthCredentialOutput) ToOAuthCredentialOutput() OAuthCredentialOutput {
	return o
}

func (o OAuthCredentialOutput) ToOAuthCredentialOutputWithContext(ctx context.Context) OAuthCredentialOutput {
	return o
}

func (o OAuthCredentialOutput) ToOAuthCredentialPtrOutput() OAuthCredentialPtrOutput {
	return o.ToOAuthCredentialPtrOutputWithContext(context.Background())
}

func (o OAuthCredentialOutput) ToOAuthCredentialPtrOutputWithContext(ctx context.Context) OAuthCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OAuthCredential) *OAuthCredential {
		return &v
	}).(OAuthCredentialPtrOutput)
}

// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o OAuthCredentialOutput) OauthTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OAuthCredential) *string { return v.OauthTokenSecretVersion }).(pulumi.StringPtrOutput)
}

type OAuthCredentialPtrOutput struct{ *pulumi.OutputState }

func (OAuthCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OAuthCredential)(nil)).Elem()
}

func (o OAuthCredentialPtrOutput) ToOAuthCredentialPtrOutput() OAuthCredentialPtrOutput {
	return o
}

func (o OAuthCredentialPtrOutput) ToOAuthCredentialPtrOutputWithContext(ctx context.Context) OAuthCredentialPtrOutput {
	return o
}

func (o OAuthCredentialPtrOutput) Elem() OAuthCredentialOutput {
	return o.ApplyT(func(v *OAuthCredential) OAuthCredential {
		if v != nil {
			return *v
		}
		var ret OAuthCredential
		return ret
	}).(OAuthCredentialOutput)
}

// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o OAuthCredentialPtrOutput) OauthTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OAuthCredential) *string {
		if v == nil {
			return nil
		}
		return v.OauthTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Represents an OAuth token of the account that authorized the Connection, and associated metadata.
type OAuthCredentialResponse struct {
	// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	OauthTokenSecretVersion string `pulumi:"oauthTokenSecretVersion"`
	// The username associated to this token.
	Username string `pulumi:"username"`
}

// Represents an OAuth token of the account that authorized the Connection, and associated metadata.
type OAuthCredentialResponseOutput struct{ *pulumi.OutputState }

func (OAuthCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OAuthCredentialResponse)(nil)).Elem()
}

func (o OAuthCredentialResponseOutput) ToOAuthCredentialResponseOutput() OAuthCredentialResponseOutput {
	return o
}

func (o OAuthCredentialResponseOutput) ToOAuthCredentialResponseOutputWithContext(ctx context.Context) OAuthCredentialResponseOutput {
	return o
}

// A SecretManager resource containing the OAuth token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o OAuthCredentialResponseOutput) OauthTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthCredentialResponse) string { return v.OauthTokenSecretVersion }).(pulumi.StringOutput)
}

// The username associated to this token.
func (o OAuthCredentialResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OAuthCredentialResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Represents a personal access token that authorized the Connection, and associated metadata.
type UserCredential struct {
	// A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
}

// UserCredentialInput is an input type that accepts UserCredentialArgs and UserCredentialOutput values.
// You can construct a concrete instance of `UserCredentialInput` via:
//
//	UserCredentialArgs{...}
type UserCredentialInput interface {
	pulumi.Input

	ToUserCredentialOutput() UserCredentialOutput
	ToUserCredentialOutputWithContext(context.Context) UserCredentialOutput
}

// Represents a personal access token that authorized the Connection, and associated metadata.
type UserCredentialArgs struct {
	// A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion pulumi.StringInput `pulumi:"userTokenSecretVersion"`
}

func (UserCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCredential)(nil)).Elem()
}

func (i UserCredentialArgs) ToUserCredentialOutput() UserCredentialOutput {
	return i.ToUserCredentialOutputWithContext(context.Background())
}

func (i UserCredentialArgs) ToUserCredentialOutputWithContext(ctx context.Context) UserCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCredentialOutput)
}

func (i UserCredentialArgs) ToUserCredentialPtrOutput() UserCredentialPtrOutput {
	return i.ToUserCredentialPtrOutputWithContext(context.Background())
}

func (i UserCredentialArgs) ToUserCredentialPtrOutputWithContext(ctx context.Context) UserCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCredentialOutput).ToUserCredentialPtrOutputWithContext(ctx)
}

// UserCredentialPtrInput is an input type that accepts UserCredentialArgs, UserCredentialPtr and UserCredentialPtrOutput values.
// You can construct a concrete instance of `UserCredentialPtrInput` via:
//
//	        UserCredentialArgs{...}
//
//	or:
//
//	        nil
type UserCredentialPtrInput interface {
	pulumi.Input

	ToUserCredentialPtrOutput() UserCredentialPtrOutput
	ToUserCredentialPtrOutputWithContext(context.Context) UserCredentialPtrOutput
}

type userCredentialPtrType UserCredentialArgs

func UserCredentialPtr(v *UserCredentialArgs) UserCredentialPtrInput {
	return (*userCredentialPtrType)(v)
}

func (*userCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCredential)(nil)).Elem()
}

func (i *userCredentialPtrType) ToUserCredentialPtrOutput() UserCredentialPtrOutput {
	return i.ToUserCredentialPtrOutputWithContext(context.Background())
}

func (i *userCredentialPtrType) ToUserCredentialPtrOutputWithContext(ctx context.Context) UserCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCredentialPtrOutput)
}

// Represents a personal access token that authorized the Connection, and associated metadata.
type UserCredentialOutput struct{ *pulumi.OutputState }

func (UserCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCredential)(nil)).Elem()
}

func (o UserCredentialOutput) ToUserCredentialOutput() UserCredentialOutput {
	return o
}

func (o UserCredentialOutput) ToUserCredentialOutputWithContext(ctx context.Context) UserCredentialOutput {
	return o
}

func (o UserCredentialOutput) ToUserCredentialPtrOutput() UserCredentialPtrOutput {
	return o.ToUserCredentialPtrOutputWithContext(context.Background())
}

func (o UserCredentialOutput) ToUserCredentialPtrOutputWithContext(ctx context.Context) UserCredentialPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserCredential) *UserCredential {
		return &v
	}).(UserCredentialPtrOutput)
}

// A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o UserCredentialOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UserCredential) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

type UserCredentialPtrOutput struct{ *pulumi.OutputState }

func (UserCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserCredential)(nil)).Elem()
}

func (o UserCredentialPtrOutput) ToUserCredentialPtrOutput() UserCredentialPtrOutput {
	return o
}

func (o UserCredentialPtrOutput) ToUserCredentialPtrOutputWithContext(ctx context.Context) UserCredentialPtrOutput {
	return o
}

func (o UserCredentialPtrOutput) Elem() UserCredentialOutput {
	return o.ApplyT(func(v *UserCredential) UserCredential {
		if v != nil {
			return *v
		}
		var ret UserCredential
		return ret
	}).(UserCredentialOutput)
}

// A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o UserCredentialPtrOutput) UserTokenSecretVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserCredential) *string {
		if v == nil {
			return nil
		}
		return &v.UserTokenSecretVersion
	}).(pulumi.StringPtrOutput)
}

// Represents a personal access token that authorized the Connection, and associated metadata.
type UserCredentialResponse struct {
	// A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
	UserTokenSecretVersion string `pulumi:"userTokenSecretVersion"`
	// The username associated to this token.
	Username string `pulumi:"username"`
}

// Represents a personal access token that authorized the Connection, and associated metadata.
type UserCredentialResponseOutput struct{ *pulumi.OutputState }

func (UserCredentialResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCredentialResponse)(nil)).Elem()
}

func (o UserCredentialResponseOutput) ToUserCredentialResponseOutput() UserCredentialResponseOutput {
	return o
}

func (o UserCredentialResponseOutput) ToUserCredentialResponseOutputWithContext(ctx context.Context) UserCredentialResponseOutput {
	return o
}

// A SecretManager resource containing the user token that authorizes the Cloud Build connection. Format: `projects/*/secrets/*/versions/*`.
func (o UserCredentialResponseOutput) UserTokenSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v UserCredentialResponse) string { return v.UserTokenSecretVersion }).(pulumi.StringOutput)
}

// The username associated to this token.
func (o UserCredentialResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v UserCredentialResponse) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubConfigInput)(nil)).Elem(), GitHubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubConfigPtrInput)(nil)).Elem(), GitHubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigInput)(nil)).Elem(), GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrInput)(nil)).Elem(), GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitLabConfigInput)(nil)).Elem(), GoogleDevtoolsCloudbuildV2GitLabConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsCloudbuildV2GitLabConfigPtrInput)(nil)).Elem(), GoogleDevtoolsCloudbuildV2GitLabConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigInput)(nil)).Elem(), GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrInput)(nil)).Elem(), GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthCredentialInput)(nil)).Elem(), OAuthCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OAuthCredentialPtrInput)(nil)).Elem(), OAuthCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCredentialInput)(nil)).Elem(), UserCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCredentialPtrInput)(nil)).Elem(), UserCredentialArgs{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GitHubConfigOutput{})
	pulumi.RegisterOutputType(GitHubConfigPtrOutput{})
	pulumi.RegisterOutputType(GitHubConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2GitLabConfigOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2GitLabConfigPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(GoogleDevtoolsCloudbuildV2ServiceDirectoryConfigResponseOutput{})
	pulumi.RegisterOutputType(InstallationStateResponseOutput{})
	pulumi.RegisterOutputType(OAuthCredentialOutput{})
	pulumi.RegisterOutputType(OAuthCredentialPtrOutput{})
	pulumi.RegisterOutputType(OAuthCredentialResponseOutput{})
	pulumi.RegisterOutputType(UserCredentialOutput{})
	pulumi.RegisterOutputType(UserCredentialPtrOutput{})
	pulumi.RegisterOutputType(UserCredentialResponseOutput{})
}
