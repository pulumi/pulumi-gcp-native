// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details of a single connection.
func LookupConnection(ctx *pulumi.Context, args *LookupConnectionArgs, opts ...pulumi.InvokeOption) (*LookupConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConnectionResult
	err := ctx.Invoke("google-native:cloudbuild/v2:getConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConnectionArgs struct {
	ConnectionId string  `pulumi:"connectionId"`
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
}

type LookupConnectionResult struct {
	// Allows clients to store small amounts of arbitrary data.
	Annotations map[string]string `pulumi:"annotations"`
	// Server assigned timestamp for when the connection was created.
	CreateTime string `pulumi:"createTime"`
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled bool `pulumi:"disabled"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Configuration for connections to github.com.
	GithubConfig GitHubConfigResponse `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	GithubEnterpriseConfig GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	GitlabConfig GoogleDevtoolsCloudbuildV2GitLabConfigResponse `pulumi:"gitlabConfig"`
	// Installation state of the Connection.
	InstallationState InstallationStateResponse `pulumi:"installationState"`
	// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
	Name string `pulumi:"name"`
	// Set to true when the connection is being set up or updated in the background.
	Reconciling bool `pulumi:"reconciling"`
	// Server assigned timestamp for when the connection was updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupConnectionOutput(ctx *pulumi.Context, args LookupConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupConnectionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConnectionResult, error) {
			args := v.(LookupConnectionArgs)
			r, err := LookupConnection(ctx, &args, opts...)
			var s LookupConnectionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConnectionResultOutput)
}

type LookupConnectionOutputArgs struct {
	ConnectionId pulumi.StringInput    `pulumi:"connectionId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionArgs)(nil)).Elem()
}

type LookupConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConnectionResult)(nil)).Elem()
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutput() LookupConnectionResultOutput {
	return o
}

func (o LookupConnectionResultOutput) ToLookupConnectionResultOutputWithContext(ctx context.Context) LookupConnectionResultOutput {
	return o
}

func (o LookupConnectionResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupConnectionResult] {
	return pulumix.Output[LookupConnectionResult]{
		OutputState: o.OutputState,
	}
}

// Allows clients to store small amounts of arbitrary data.
func (o LookupConnectionResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupConnectionResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Server assigned timestamp for when the connection was created.
func (o LookupConnectionResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
func (o LookupConnectionResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConnectionResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o LookupConnectionResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Configuration for connections to github.com.
func (o LookupConnectionResultOutput) GithubConfig() GitHubConfigResponseOutput {
	return o.ApplyT(func(v LookupConnectionResult) GitHubConfigResponse { return v.GithubConfig }).(GitHubConfigResponseOutput)
}

// Configuration for connections to an instance of GitHub Enterprise.
func (o LookupConnectionResultOutput) GithubEnterpriseConfig() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput {
	return o.ApplyT(func(v LookupConnectionResult) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponse {
		return v.GithubEnterpriseConfig
	}).(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput)
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
func (o LookupConnectionResultOutput) GitlabConfig() GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput {
	return o.ApplyT(func(v LookupConnectionResult) GoogleDevtoolsCloudbuildV2GitLabConfigResponse { return v.GitlabConfig }).(GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput)
}

// Installation state of the Connection.
func (o LookupConnectionResultOutput) InstallationState() InstallationStateResponseOutput {
	return o.ApplyT(func(v LookupConnectionResult) InstallationStateResponse { return v.InstallationState }).(InstallationStateResponseOutput)
}

// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
func (o LookupConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Set to true when the connection is being set up or updated in the background.
func (o LookupConnectionResultOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConnectionResult) bool { return v.Reconciling }).(pulumi.BoolOutput)
}

// Server assigned timestamp for when the connection was updated.
func (o LookupConnectionResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConnectionResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConnectionResultOutput{})
}
