// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a Connection.
type Connection struct {
	pulumi.CustomResourceState

	// Allows clients to store small amounts of arbitrary data.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Required. The ID to use for the Connection, which will become the final component of the Connection's resource name. Names must be unique per-project per-location. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	ConnectionId pulumi.StringOutput `pulumi:"connectionId"`
	// Server assigned timestamp for when the connection was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Configuration for connections to github.com.
	GithubConfig GitHubConfigResponseOutput `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	GithubEnterpriseConfig GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	GitlabConfig GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput `pulumi:"gitlabConfig"`
	// Installation state of the Connection.
	InstallationState InstallationStateResponseOutput `pulumi:"installationState"`
	Location          pulumi.StringOutput             `pulumi:"location"`
	// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Set to true when the connection is being set up or updated in the background.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// Server assigned timestamp for when the connection was updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"connectionId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("google-native:cloudbuild/v2:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("google-native:cloudbuild/v2:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
}

type ConnectionState struct {
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// Allows clients to store small amounts of arbitrary data.
	Annotations map[string]string `pulumi:"annotations"`
	// Required. The ID to use for the Connection, which will become the final component of the Connection's resource name. Names must be unique per-project per-location. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	ConnectionId string `pulumi:"connectionId"`
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled *bool `pulumi:"disabled"`
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Configuration for connections to github.com.
	GithubConfig *GitHubConfig `pulumi:"githubConfig"`
	// Configuration for connections to an instance of GitHub Enterprise.
	GithubEnterpriseConfig *GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig `pulumi:"githubEnterpriseConfig"`
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	GitlabConfig *GoogleDevtoolsCloudbuildV2GitLabConfig `pulumi:"gitlabConfig"`
	Location     *string                                 `pulumi:"location"`
	// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// Allows clients to store small amounts of arbitrary data.
	Annotations pulumi.StringMapInput
	// Required. The ID to use for the Connection, which will become the final component of the Connection's resource name. Names must be unique per-project per-location. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
	ConnectionId pulumi.StringInput
	// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
	Disabled pulumi.BoolPtrInput
	// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Configuration for connections to github.com.
	GithubConfig GitHubConfigPtrInput
	// Configuration for connections to an instance of GitHub Enterprise.
	GithubEnterpriseConfig GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigPtrInput
	// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
	GitlabConfig GoogleDevtoolsCloudbuildV2GitLabConfigPtrInput
	Location     pulumi.StringPtrInput
	// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

func (i *Connection) ToOutput(ctx context.Context) pulumix.Output[*Connection] {
	return pulumix.Output[*Connection]{
		OutputState: i.ToConnectionOutputWithContext(ctx).OutputState,
	}
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*Connection] {
	return pulumix.Output[*Connection]{
		OutputState: o.OutputState,
	}
}

// Allows clients to store small amounts of arbitrary data.
func (o ConnectionOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Required. The ID to use for the Connection, which will become the final component of the Connection's resource name. Names must be unique per-project per-location. Allows alphanumeric characters and any of -._~%!$&'()*+,;=@.
func (o ConnectionOutput) ConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectionId }).(pulumi.StringOutput)
}

// Server assigned timestamp for when the connection was created.
func (o ConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// If disabled is set to true, functionality is disabled for this connection. Repository based API methods and webhooks processing for repositories in this connection will be disabled.
func (o ConnectionOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
func (o ConnectionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Configuration for connections to github.com.
func (o ConnectionOutput) GithubConfig() GitHubConfigResponseOutput {
	return o.ApplyT(func(v *Connection) GitHubConfigResponseOutput { return v.GithubConfig }).(GitHubConfigResponseOutput)
}

// Configuration for connections to an instance of GitHub Enterprise.
func (o ConnectionOutput) GithubEnterpriseConfig() GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput {
	return o.ApplyT(func(v *Connection) GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput {
		return v.GithubEnterpriseConfig
	}).(GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfigResponseOutput)
}

// Configuration for connections to gitlab.com or an instance of GitLab Enterprise.
func (o ConnectionOutput) GitlabConfig() GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput {
	return o.ApplyT(func(v *Connection) GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput { return v.GitlabConfig }).(GoogleDevtoolsCloudbuildV2GitLabConfigResponseOutput)
}

// Installation state of the Connection.
func (o ConnectionOutput) InstallationState() InstallationStateResponseOutput {
	return o.ApplyT(func(v *Connection) InstallationStateResponseOutput { return v.InstallationState }).(InstallationStateResponseOutput)
}

func (o ConnectionOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The resource name of the connection, in the format `projects/{project}/locations/{location}/connections/{connection_id}`.
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ConnectionOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Set to true when the connection is being set up or updated in the background.
func (o ConnectionOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// Server assigned timestamp for when the connection was updated.
func (o ConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterOutputType(ConnectionOutput{})
}
