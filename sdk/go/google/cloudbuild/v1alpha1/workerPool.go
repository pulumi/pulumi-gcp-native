// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates a `WorkerPool` to run the builds, and returns the new worker pool.
type WorkerPool struct {
	pulumi.CustomResourceState
}

// NewWorkerPool registers a new resource with the given unique name, arguments, and options.
func NewWorkerPool(ctx *pulumi.Context,
	name string, args *WorkerPoolArgs, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	if args.WorkerPoolsId == nil {
		return nil, errors.New("invalid value for required argument 'WorkerPoolsId'")
	}
	var resource WorkerPool
	err := ctx.RegisterResource("google-cloud:cloudbuild/v1alpha1:WorkerPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkerPool gets an existing WorkerPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkerPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkerPoolState, opts ...pulumi.ResourceOption) (*WorkerPool, error) {
	var resource WorkerPool
	err := ctx.ReadResource("google-cloud:cloudbuild/v1alpha1:WorkerPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkerPool resources.
type workerPoolState struct {
}

type WorkerPoolState struct {
}

func (WorkerPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolState)(nil)).Elem()
}

type workerPoolArgs struct {
	// Output only. Time at which the request to create the `WorkerPool` was received.
	CreateTime *string `pulumi:"createTime"`
	// Output only. Time at which the request to delete the `WorkerPool` was received.
	DeleteTime *string `pulumi:"deleteTime"`
	// User-defined name of the `WorkerPool`.
	Name *string `pulumi:"name"`
	// The project ID of the GCP project for which the `WorkerPool` is created.
	ProjectId  *string `pulumi:"projectId"`
	ProjectsId string  `pulumi:"projectsId"`
	// List of regions to create the `WorkerPool`. Regions can't be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region.
	Regions []string `pulumi:"regions"`
	// Output only. The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// Output only. WorkerPool Status.
	Status *string `pulumi:"status"`
	// Output only. Time at which the request to update the `WorkerPool` was received.
	UpdateTime *string `pulumi:"updateTime"`
	// Configuration to be used for a creating workers in the `WorkerPool`.
	WorkerConfig *WorkerConfig `pulumi:"workerConfig"`
	// Total number of workers to be created across all requested regions.
	WorkerCount   *string `pulumi:"workerCount"`
	WorkerPoolsId string  `pulumi:"workerPoolsId"`
}

// The set of arguments for constructing a WorkerPool resource.
type WorkerPoolArgs struct {
	// Output only. Time at which the request to create the `WorkerPool` was received.
	CreateTime pulumi.StringPtrInput
	// Output only. Time at which the request to delete the `WorkerPool` was received.
	DeleteTime pulumi.StringPtrInput
	// User-defined name of the `WorkerPool`.
	Name pulumi.StringPtrInput
	// The project ID of the GCP project for which the `WorkerPool` is created.
	ProjectId  pulumi.StringPtrInput
	ProjectsId pulumi.StringInput
	// List of regions to create the `WorkerPool`. Regions can't be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region.
	Regions pulumi.StringArrayInput
	// Output only. The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level.
	ServiceAccountEmail pulumi.StringPtrInput
	// Output only. WorkerPool Status.
	Status pulumi.StringPtrInput
	// Output only. Time at which the request to update the `WorkerPool` was received.
	UpdateTime pulumi.StringPtrInput
	// Configuration to be used for a creating workers in the `WorkerPool`.
	WorkerConfig WorkerConfigPtrInput
	// Total number of workers to be created across all requested regions.
	WorkerCount   pulumi.StringPtrInput
	WorkerPoolsId pulumi.StringInput
}

func (WorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workerPoolArgs)(nil)).Elem()
}

type WorkerPoolInput interface {
	pulumi.Input

	ToWorkerPoolOutput() WorkerPoolOutput
	ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput
}

func (*WorkerPool) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil))
}

func (i *WorkerPool) ToWorkerPoolOutput() WorkerPoolOutput {
	return i.ToWorkerPoolOutputWithContext(context.Background())
}

func (i *WorkerPool) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolOutput)
}

type WorkerPoolOutput struct {
	*pulumi.OutputState
}

func (WorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil))
}

func (o WorkerPoolOutput) ToWorkerPoolOutput() WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(WorkerPoolOutput{})
}
