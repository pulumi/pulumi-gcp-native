// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Network describes the GCP network used to create workers in.
type Network struct {
	// Network on which the workers are created. "default" network is used if empty.
	Network *string `pulumi:"network"`
	// Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.
	Project *string `pulumi:"project"`
	// Subnetwork on which the workers are created. "default" subnetwork is used if empty.
	Subnetwork *string `pulumi:"subnetwork"`
}

// NetworkInput is an input type that accepts NetworkArgs and NetworkOutput values.
// You can construct a concrete instance of `NetworkInput` via:
//
//          NetworkArgs{...}
type NetworkInput interface {
	pulumi.Input

	ToNetworkOutput() NetworkOutput
	ToNetworkOutputWithContext(context.Context) NetworkOutput
}

// Network describes the GCP network used to create workers in.
type NetworkArgs struct {
	// Network on which the workers are created. "default" network is used if empty.
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Subnetwork on which the workers are created. "default" subnetwork is used if empty.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
}

func (NetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (i NetworkArgs) ToNetworkOutput() NetworkOutput {
	return i.ToNetworkOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput)
}

func (i NetworkArgs) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i NetworkArgs) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkOutput).ToNetworkPtrOutputWithContext(ctx)
}

// NetworkPtrInput is an input type that accepts NetworkArgs, NetworkPtr and NetworkPtrOutput values.
// You can construct a concrete instance of `NetworkPtrInput` via:
//
//          NetworkArgs{...}
//
//  or:
//
//          nil
type NetworkPtrInput interface {
	pulumi.Input

	ToNetworkPtrOutput() NetworkPtrOutput
	ToNetworkPtrOutputWithContext(context.Context) NetworkPtrOutput
}

type networkPtrType NetworkArgs

func NetworkPtr(v *NetworkArgs) NetworkPtrInput {
	return (*networkPtrType)(v)
}

func (*networkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (i *networkPtrType) ToNetworkPtrOutput() NetworkPtrOutput {
	return i.ToNetworkPtrOutputWithContext(context.Background())
}

func (i *networkPtrType) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPtrOutput)
}

// Network describes the GCP network used to create workers in.
type NetworkOutput struct{ *pulumi.OutputState }

func (NetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Network)(nil)).Elem()
}

func (o NetworkOutput) ToNetworkOutput() NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkOutputWithContext(ctx context.Context) NetworkOutput {
	return o
}

func (o NetworkOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o.ToNetworkPtrOutputWithContext(context.Background())
}

func (o NetworkOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Network) *Network {
		return &v
	}).(NetworkPtrOutput)
}

// Network on which the workers are created. "default" network is used if empty.
func (o NetworkOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.
func (o NetworkOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Subnetwork on which the workers are created. "default" subnetwork is used if empty.
func (o NetworkOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Network) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

type NetworkPtrOutput struct{ *pulumi.OutputState }

func (NetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Network)(nil)).Elem()
}

func (o NetworkPtrOutput) ToNetworkPtrOutput() NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) ToNetworkPtrOutputWithContext(ctx context.Context) NetworkPtrOutput {
	return o
}

func (o NetworkPtrOutput) Elem() NetworkOutput {
	return o.ApplyT(func(v *Network) Network {
		if v != nil {
			return *v
		}
		var ret Network
		return ret
	}).(NetworkOutput)
}

// Network on which the workers are created. "default" network is used if empty.
func (o NetworkPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.
func (o NetworkPtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Subnetwork on which the workers are created. "default" subnetwork is used if empty.
func (o NetworkPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Network) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// Network describes the GCP network used to create workers in.
type NetworkResponse struct {
	// Network on which the workers are created. "default" network is used if empty.
	Network string `pulumi:"network"`
	// Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.
	Project string `pulumi:"project"`
	// Subnetwork on which the workers are created. "default" subnetwork is used if empty.
	Subnetwork string `pulumi:"subnetwork"`
}

// Network describes the GCP network used to create workers in.
type NetworkResponseOutput struct{ *pulumi.OutputState }

func (NetworkResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkResponse)(nil)).Elem()
}

func (o NetworkResponseOutput) ToNetworkResponseOutput() NetworkResponseOutput {
	return o
}

func (o NetworkResponseOutput) ToNetworkResponseOutputWithContext(ctx context.Context) NetworkResponseOutput {
	return o
}

// Network on which the workers are created. "default" network is used if empty.
func (o NetworkResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Network }).(pulumi.StringOutput)
}

// Project id containing the defined network and subnetwork. For a peered VPC, this will be the same as the project_id in which the workers are created. For a shared VPC, this will be the project sharing the network with the project_id project in which workers will be created. For custom workers with no VPC, this will be the same as project_id.
func (o NetworkResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Subnetwork on which the workers are created. "default" subnetwork is used if empty.
func (o NetworkResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

// WorkerConfig defines the configuration to be used for a creating workers in the pool.
type WorkerConfig struct {
	// Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes
	MachineType *string `pulumi:"machineType"`
	// The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network.
	Network *Network `pulumi:"network"`
	// The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`.
	Tag *string `pulumi:"tag"`
}

// WorkerConfigInput is an input type that accepts WorkerConfigArgs and WorkerConfigOutput values.
// You can construct a concrete instance of `WorkerConfigInput` via:
//
//          WorkerConfigArgs{...}
type WorkerConfigInput interface {
	pulumi.Input

	ToWorkerConfigOutput() WorkerConfigOutput
	ToWorkerConfigOutputWithContext(context.Context) WorkerConfigOutput
}

// WorkerConfig defines the configuration to be used for a creating workers in the pool.
type WorkerConfigArgs struct {
	// Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network.
	Network NetworkPtrInput `pulumi:"network"`
	// The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (WorkerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerConfig)(nil)).Elem()
}

func (i WorkerConfigArgs) ToWorkerConfigOutput() WorkerConfigOutput {
	return i.ToWorkerConfigOutputWithContext(context.Background())
}

func (i WorkerConfigArgs) ToWorkerConfigOutputWithContext(ctx context.Context) WorkerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerConfigOutput)
}

func (i WorkerConfigArgs) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return i.ToWorkerConfigPtrOutputWithContext(context.Background())
}

func (i WorkerConfigArgs) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerConfigOutput).ToWorkerConfigPtrOutputWithContext(ctx)
}

// WorkerConfigPtrInput is an input type that accepts WorkerConfigArgs, WorkerConfigPtr and WorkerConfigPtrOutput values.
// You can construct a concrete instance of `WorkerConfigPtrInput` via:
//
//          WorkerConfigArgs{...}
//
//  or:
//
//          nil
type WorkerConfigPtrInput interface {
	pulumi.Input

	ToWorkerConfigPtrOutput() WorkerConfigPtrOutput
	ToWorkerConfigPtrOutputWithContext(context.Context) WorkerConfigPtrOutput
}

type workerConfigPtrType WorkerConfigArgs

func WorkerConfigPtr(v *WorkerConfigArgs) WorkerConfigPtrInput {
	return (*workerConfigPtrType)(v)
}

func (*workerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerConfig)(nil)).Elem()
}

func (i *workerConfigPtrType) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return i.ToWorkerConfigPtrOutputWithContext(context.Background())
}

func (i *workerConfigPtrType) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerConfigPtrOutput)
}

// WorkerConfig defines the configuration to be used for a creating workers in the pool.
type WorkerConfigOutput struct{ *pulumi.OutputState }

func (WorkerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerConfig)(nil)).Elem()
}

func (o WorkerConfigOutput) ToWorkerConfigOutput() WorkerConfigOutput {
	return o
}

func (o WorkerConfigOutput) ToWorkerConfigOutputWithContext(ctx context.Context) WorkerConfigOutput {
	return o
}

func (o WorkerConfigOutput) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return o.ToWorkerConfigPtrOutputWithContext(context.Background())
}

func (o WorkerConfigOutput) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkerConfig) *WorkerConfig {
		return &v
	}).(WorkerConfigPtrOutput)
}

// Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions
func (o WorkerConfigOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerConfig) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes
func (o WorkerConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network.
func (o WorkerConfigOutput) Network() NetworkPtrOutput {
	return o.ApplyT(func(v WorkerConfig) *Network { return v.Network }).(NetworkPtrOutput)
}

// The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`.
func (o WorkerConfigOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerConfig) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type WorkerConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerConfig)(nil)).Elem()
}

func (o WorkerConfigPtrOutput) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return o
}

func (o WorkerConfigPtrOutput) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return o
}

func (o WorkerConfigPtrOutput) Elem() WorkerConfigOutput {
	return o.ApplyT(func(v *WorkerConfig) WorkerConfig {
		if v != nil {
			return *v
		}
		var ret WorkerConfig
		return ret
	}).(WorkerConfigOutput)
}

// Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions
func (o WorkerConfigPtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerConfig) *string {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes
func (o WorkerConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network.
func (o WorkerConfigPtrOutput) Network() NetworkPtrOutput {
	return o.ApplyT(func(v *WorkerConfig) *Network {
		if v == nil {
			return nil
		}
		return v.Network
	}).(NetworkPtrOutput)
}

// The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`.
func (o WorkerConfigPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerConfig) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// WorkerConfig defines the configuration to be used for a creating workers in the pool.
type WorkerConfigResponse struct {
	// Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes
	MachineType string `pulumi:"machineType"`
	// The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network.
	Network NetworkResponse `pulumi:"network"`
	// The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`.
	Tag string `pulumi:"tag"`
}

// WorkerConfig defines the configuration to be used for a creating workers in the pool.
type WorkerConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerConfigResponse)(nil)).Elem()
}

func (o WorkerConfigResponseOutput) ToWorkerConfigResponseOutput() WorkerConfigResponseOutput {
	return o
}

func (o WorkerConfigResponseOutput) ToWorkerConfigResponseOutputWithContext(ctx context.Context) WorkerConfigResponseOutput {
	return o
}

// Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size. `disk_size` is overridden if you specify a different disk size in `build_options`. In this case, a VM with a disk size specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/api/reference/rest/v1/projects.builds#buildoptions
func (o WorkerConfigResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerConfigResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool. `machine_type` is overridden if you specify a different machine type in `build_options`. In this case, the VM specified in the `build_options` will be created on demand at build time. For more information see https://cloud.google.com/cloud-build/docs/speeding-up-builds#using_custom_virtual_machine_sizes
func (o WorkerConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// The network definition used to create the worker. If this section is left empty, the workers will be created in WorkerPool.project_id on the default network.
func (o WorkerConfigResponseOutput) Network() NetworkResponseOutput {
	return o.ApplyT(func(v WorkerConfigResponse) NetworkResponse { return v.Network }).(NetworkResponseOutput)
}

// The tag applied to the worker, and the same tag used by the firewall rule. It is used to identify the Cloud Build workers among other VMs. The default value for tag is `worker`.
func (o WorkerConfigResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerConfigResponse) string { return v.Tag }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInput)(nil)).Elem(), NetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPtrInput)(nil)).Elem(), NetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerConfigInput)(nil)).Elem(), WorkerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerConfigPtrInput)(nil)).Elem(), WorkerConfigArgs{})
	pulumi.RegisterOutputType(NetworkOutput{})
	pulumi.RegisterOutputType(NetworkPtrOutput{})
	pulumi.RegisterOutputType(NetworkResponseOutput{})
	pulumi.RegisterOutputType(WorkerConfigOutput{})
	pulumi.RegisterOutputType(WorkerConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkerConfigResponseOutput{})
}
