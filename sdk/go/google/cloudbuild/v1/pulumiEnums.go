// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Option to define build log streaming behavior to Google Cloud Storage.
type BuildOptionsLogStreamingOption pulumi.String

const (
	// Service may automatically determine build log streaming behavior.
	BuildOptionsLogStreamingOptionStreamDefault = BuildOptionsLogStreamingOption("STREAM_DEFAULT")
	// Build logs should be streamed to Google Cloud Storage.
	BuildOptionsLogStreamingOptionStreamOn = BuildOptionsLogStreamingOption("STREAM_ON")
	// Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed.
	BuildOptionsLogStreamingOptionStreamOff = BuildOptionsLogStreamingOption("STREAM_OFF")
)

func (BuildOptionsLogStreamingOption) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BuildOptionsLogStreamingOption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsLogStreamingOption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsLogStreamingOption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BuildOptionsLogStreamingOption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
type BuildOptionsLogging pulumi.String

const (
	// The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.
	BuildOptionsLoggingLoggingUnspecified = BuildOptionsLogging("LOGGING_UNSPECIFIED")
	// Cloud Logging and Cloud Storage logging are enabled.
	BuildOptionsLoggingLegacy = BuildOptionsLogging("LEGACY")
	// Only Cloud Storage logging is enabled.
	BuildOptionsLoggingGcsOnly = BuildOptionsLogging("GCS_ONLY")
	// This option is the same as CLOUD_LOGGING_ONLY.
	BuildOptionsLoggingStackdriverOnly = BuildOptionsLogging("STACKDRIVER_ONLY")
	// Only Cloud Logging is enabled. Note that logs for both the Cloud Console UI and Cloud SDK are based on Cloud Storage logs, so neither will provide logs if this option is chosen.
	BuildOptionsLoggingCloudLoggingOnly = BuildOptionsLogging("CLOUD_LOGGING_ONLY")
	// Turn off all logging. No build logs will be captured.
	BuildOptionsLoggingNone = BuildOptionsLogging("NONE")
)

func (BuildOptionsLogging) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BuildOptionsLogging) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsLogging) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsLogging) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BuildOptionsLogging) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Compute Engine machine type on which to run the build.
type BuildOptionsMachineType pulumi.String

const (
	// Standard machine type.
	BuildOptionsMachineTypeUnspecified = BuildOptionsMachineType("UNSPECIFIED")
	// Highcpu machine with 8 CPUs.
	BuildOptionsMachineTypeN1Highcpu8 = BuildOptionsMachineType("N1_HIGHCPU_8")
	// Highcpu machine with 32 CPUs.
	BuildOptionsMachineTypeN1Highcpu32 = BuildOptionsMachineType("N1_HIGHCPU_32")
	// Highcpu e2 machine with 8 CPUs.
	BuildOptionsMachineTypeE2Highcpu8 = BuildOptionsMachineType("E2_HIGHCPU_8")
	// Highcpu e2 machine with 32 CPUs.
	BuildOptionsMachineTypeE2Highcpu32 = BuildOptionsMachineType("E2_HIGHCPU_32")
)

func (BuildOptionsMachineType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BuildOptionsMachineType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsMachineType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsMachineType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BuildOptionsMachineType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Requested verifiability options.
type BuildOptionsRequestedVerifyOption pulumi.String

const (
	// Not a verifiable build. (default)
	BuildOptionsRequestedVerifyOptionNotVerified = BuildOptionsRequestedVerifyOption("NOT_VERIFIED")
	// Verified build.
	BuildOptionsRequestedVerifyOptionVerified = BuildOptionsRequestedVerifyOption("VERIFIED")
)

func (BuildOptionsRequestedVerifyOption) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BuildOptionsRequestedVerifyOption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsRequestedVerifyOption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsRequestedVerifyOption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BuildOptionsRequestedVerifyOption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BuildOptionsSourceProvenanceHashItem pulumi.String

const (
	// No hash requested.
	BuildOptionsSourceProvenanceHashItemNone = BuildOptionsSourceProvenanceHashItem("NONE")
	// Use a sha256 hash.
	BuildOptionsSourceProvenanceHashItemSha256 = BuildOptionsSourceProvenanceHashItem("SHA256")
	// Use a md5 hash.
	BuildOptionsSourceProvenanceHashItemMd5 = BuildOptionsSourceProvenanceHashItem("MD5")
)

func (BuildOptionsSourceProvenanceHashItem) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BuildOptionsSourceProvenanceHashItem) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsSourceProvenanceHashItem) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsSourceProvenanceHashItem) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BuildOptionsSourceProvenanceHashItem) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// BuildOptionsSourceProvenanceHashItemArrayInput is an input type that accepts BuildOptionsSourceProvenanceHashItemArray and BuildOptionsSourceProvenanceHashItemArrayOutput values.
// You can construct a concrete instance of `BuildOptionsSourceProvenanceHashItemArrayInput` via:
//
//          BuildOptionsSourceProvenanceHashItemArray{ BuildOptionsSourceProvenanceHashItemArgs{...} }
type BuildOptionsSourceProvenanceHashItemArrayInput interface {
	pulumi.Input

	ToBuildOptionsSourceProvenanceHashItemArrayOutput() BuildOptionsSourceProvenanceHashItemArrayOutput
	ToBuildOptionsSourceProvenanceHashItemArrayOutputWithContext(context.Context) BuildOptionsSourceProvenanceHashItemArrayOutput
}

type BuildOptionsSourceProvenanceHashItemArray []BuildOptionsSourceProvenanceHashItem

func (BuildOptionsSourceProvenanceHashItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildOptionsSourceProvenanceHashItem)(nil)).Elem()
}

func (i BuildOptionsSourceProvenanceHashItemArray) ToBuildOptionsSourceProvenanceHashItemArrayOutput() BuildOptionsSourceProvenanceHashItemArrayOutput {
	return i.ToBuildOptionsSourceProvenanceHashItemArrayOutputWithContext(context.Background())
}

func (i BuildOptionsSourceProvenanceHashItemArray) ToBuildOptionsSourceProvenanceHashItemArrayOutputWithContext(ctx context.Context) BuildOptionsSourceProvenanceHashItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsSourceProvenanceHashItemArrayOutput)
}

type BuildOptionsSourceProvenanceHashItemArrayOutput struct{ *pulumi.OutputState }

func (BuildOptionsSourceProvenanceHashItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildOptionsSourceProvenanceHashItem)(nil)).Elem()
}

func (o BuildOptionsSourceProvenanceHashItemArrayOutput) ToBuildOptionsSourceProvenanceHashItemArrayOutput() BuildOptionsSourceProvenanceHashItemArrayOutput {
	return o
}

func (o BuildOptionsSourceProvenanceHashItemArrayOutput) ToBuildOptionsSourceProvenanceHashItemArrayOutputWithContext(ctx context.Context) BuildOptionsSourceProvenanceHashItemArrayOutput {
	return o
}

func (o BuildOptionsSourceProvenanceHashItemArrayOutput) Index(i pulumi.IntInput) pulumi.StringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) pulumi.StringOutput {
		return vs[0].([]BuildOptionsSourceProvenanceHashItem)[vs[1].(int)].ToStringOutput()
	}).(pulumi.StringOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
type BuildOptionsSubstitutionOption pulumi.String

const (
	// Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.
	BuildOptionsSubstitutionOptionMustMatch = BuildOptionsSubstitutionOption("MUST_MATCH")
	// Do not fail the build if error in substitutions checks.
	BuildOptionsSubstitutionOptionAllowLoose = BuildOptionsSubstitutionOption("ALLOW_LOOSE")
)

func (BuildOptionsSubstitutionOption) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e BuildOptionsSubstitutionOption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsSubstitutionOption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BuildOptionsSubstitutionOption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BuildOptionsSubstitutionOption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
type PubsubConfigState pulumi.String

const (
	// The subscription configuration has not been checked.
	PubsubConfigStateStateUnspecified = PubsubConfigState("STATE_UNSPECIFIED")
	// The Pub/Sub subscription is properly configured.
	PubsubConfigStateOk = PubsubConfigState("OK")
	// The subscription has been deleted.
	PubsubConfigStateSubscriptionDeleted = PubsubConfigState("SUBSCRIPTION_DELETED")
	// The topic has been deleted.
	PubsubConfigStateTopicDeleted = PubsubConfigState("TOPIC_DELETED")
	// Some of the subscription's field are misconfigured.
	PubsubConfigStateSubscriptionMisconfigured = PubsubConfigState("SUBSCRIPTION_MISCONFIGURED")
)

func (PubsubConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PubsubConfigState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PubsubConfigState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PubsubConfigState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PubsubConfigState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
type PullRequestFilterCommentControl pulumi.String

const (
	// Do not require comments on Pull Requests before builds are triggered.
	PullRequestFilterCommentControlCommentsDisabled = PullRequestFilterCommentControl("COMMENTS_DISABLED")
	// Enforce that repository owners or collaborators must comment on Pull Requests before builds are triggered.
	PullRequestFilterCommentControlCommentsEnabled = PullRequestFilterCommentControl("COMMENTS_ENABLED")
	// Enforce that repository owners or collaborators must comment on external contributors' Pull Requests before builds are triggered.
	PullRequestFilterCommentControlCommentsEnabledForExternalContributorsOnly = PullRequestFilterCommentControl("COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY")
)

func (PullRequestFilterCommentControl) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e PullRequestFilterCommentControl) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e PullRequestFilterCommentControl) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e PullRequestFilterCommentControl) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e PullRequestFilterCommentControl) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
