// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// ApprovalConfig describes configuration for manual approval of a build.
type ApprovalConfig struct {
	// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
	ApprovalRequired *bool `pulumi:"approvalRequired"`
}

// ApprovalConfigInput is an input type that accepts ApprovalConfigArgs and ApprovalConfigOutput values.
// You can construct a concrete instance of `ApprovalConfigInput` via:
//
//	ApprovalConfigArgs{...}
type ApprovalConfigInput interface {
	pulumi.Input

	ToApprovalConfigOutput() ApprovalConfigOutput
	ToApprovalConfigOutputWithContext(context.Context) ApprovalConfigOutput
}

// ApprovalConfig describes configuration for manual approval of a build.
type ApprovalConfigArgs struct {
	// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
	ApprovalRequired pulumi.BoolPtrInput `pulumi:"approvalRequired"`
}

func (ApprovalConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalConfig)(nil)).Elem()
}

func (i ApprovalConfigArgs) ToApprovalConfigOutput() ApprovalConfigOutput {
	return i.ToApprovalConfigOutputWithContext(context.Background())
}

func (i ApprovalConfigArgs) ToApprovalConfigOutputWithContext(ctx context.Context) ApprovalConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalConfigOutput)
}

func (i ApprovalConfigArgs) ToApprovalConfigPtrOutput() ApprovalConfigPtrOutput {
	return i.ToApprovalConfigPtrOutputWithContext(context.Background())
}

func (i ApprovalConfigArgs) ToApprovalConfigPtrOutputWithContext(ctx context.Context) ApprovalConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalConfigOutput).ToApprovalConfigPtrOutputWithContext(ctx)
}

// ApprovalConfigPtrInput is an input type that accepts ApprovalConfigArgs, ApprovalConfigPtr and ApprovalConfigPtrOutput values.
// You can construct a concrete instance of `ApprovalConfigPtrInput` via:
//
//	        ApprovalConfigArgs{...}
//
//	or:
//
//	        nil
type ApprovalConfigPtrInput interface {
	pulumi.Input

	ToApprovalConfigPtrOutput() ApprovalConfigPtrOutput
	ToApprovalConfigPtrOutputWithContext(context.Context) ApprovalConfigPtrOutput
}

type approvalConfigPtrType ApprovalConfigArgs

func ApprovalConfigPtr(v *ApprovalConfigArgs) ApprovalConfigPtrInput {
	return (*approvalConfigPtrType)(v)
}

func (*approvalConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalConfig)(nil)).Elem()
}

func (i *approvalConfigPtrType) ToApprovalConfigPtrOutput() ApprovalConfigPtrOutput {
	return i.ToApprovalConfigPtrOutputWithContext(context.Background())
}

func (i *approvalConfigPtrType) ToApprovalConfigPtrOutputWithContext(ctx context.Context) ApprovalConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApprovalConfigPtrOutput)
}

// ApprovalConfig describes configuration for manual approval of a build.
type ApprovalConfigOutput struct{ *pulumi.OutputState }

func (ApprovalConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalConfig)(nil)).Elem()
}

func (o ApprovalConfigOutput) ToApprovalConfigOutput() ApprovalConfigOutput {
	return o
}

func (o ApprovalConfigOutput) ToApprovalConfigOutputWithContext(ctx context.Context) ApprovalConfigOutput {
	return o
}

func (o ApprovalConfigOutput) ToApprovalConfigPtrOutput() ApprovalConfigPtrOutput {
	return o.ToApprovalConfigPtrOutputWithContext(context.Background())
}

func (o ApprovalConfigOutput) ToApprovalConfigPtrOutputWithContext(ctx context.Context) ApprovalConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApprovalConfig) *ApprovalConfig {
		return &v
	}).(ApprovalConfigPtrOutput)
}

// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
func (o ApprovalConfigOutput) ApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApprovalConfig) *bool { return v.ApprovalRequired }).(pulumi.BoolPtrOutput)
}

type ApprovalConfigPtrOutput struct{ *pulumi.OutputState }

func (ApprovalConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApprovalConfig)(nil)).Elem()
}

func (o ApprovalConfigPtrOutput) ToApprovalConfigPtrOutput() ApprovalConfigPtrOutput {
	return o
}

func (o ApprovalConfigPtrOutput) ToApprovalConfigPtrOutputWithContext(ctx context.Context) ApprovalConfigPtrOutput {
	return o
}

func (o ApprovalConfigPtrOutput) Elem() ApprovalConfigOutput {
	return o.ApplyT(func(v *ApprovalConfig) ApprovalConfig {
		if v != nil {
			return *v
		}
		var ret ApprovalConfig
		return ret
	}).(ApprovalConfigOutput)
}

// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
func (o ApprovalConfigPtrOutput) ApprovalRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApprovalConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ApprovalRequired
	}).(pulumi.BoolPtrOutput)
}

// ApprovalConfig describes configuration for manual approval of a build.
type ApprovalConfigResponse struct {
	// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
	ApprovalRequired bool `pulumi:"approvalRequired"`
}

// ApprovalConfig describes configuration for manual approval of a build.
type ApprovalConfigResponseOutput struct{ *pulumi.OutputState }

func (ApprovalConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalConfigResponse)(nil)).Elem()
}

func (o ApprovalConfigResponseOutput) ToApprovalConfigResponseOutput() ApprovalConfigResponseOutput {
	return o
}

func (o ApprovalConfigResponseOutput) ToApprovalConfigResponseOutputWithContext(ctx context.Context) ApprovalConfigResponseOutput {
	return o
}

// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
func (o ApprovalConfigResponseOutput) ApprovalRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v ApprovalConfigResponse) bool { return v.ApprovalRequired }).(pulumi.BoolOutput)
}

// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
type ApprovalResultResponse struct {
	// The time when the approval decision was made.
	ApprovalTime string `pulumi:"approvalTime"`
	// Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
	ApproverAccount string `pulumi:"approverAccount"`
	// Optional. An optional comment for this manual approval result.
	Comment string `pulumi:"comment"`
	// The decision of this manual approval.
	Decision string `pulumi:"decision"`
	// Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
	Url string `pulumi:"url"`
}

// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
type ApprovalResultResponseOutput struct{ *pulumi.OutputState }

func (ApprovalResultResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApprovalResultResponse)(nil)).Elem()
}

func (o ApprovalResultResponseOutput) ToApprovalResultResponseOutput() ApprovalResultResponseOutput {
	return o
}

func (o ApprovalResultResponseOutput) ToApprovalResultResponseOutputWithContext(ctx context.Context) ApprovalResultResponseOutput {
	return o
}

// The time when the approval decision was made.
func (o ApprovalResultResponseOutput) ApprovalTime() pulumi.StringOutput {
	return o.ApplyT(func(v ApprovalResultResponse) string { return v.ApprovalTime }).(pulumi.StringOutput)
}

// Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
func (o ApprovalResultResponseOutput) ApproverAccount() pulumi.StringOutput {
	return o.ApplyT(func(v ApprovalResultResponse) string { return v.ApproverAccount }).(pulumi.StringOutput)
}

// Optional. An optional comment for this manual approval result.
func (o ApprovalResultResponseOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v ApprovalResultResponse) string { return v.Comment }).(pulumi.StringOutput)
}

// The decision of this manual approval.
func (o ApprovalResultResponseOutput) Decision() pulumi.StringOutput {
	return o.ApplyT(func(v ApprovalResultResponse) string { return v.Decision }).(pulumi.StringOutput)
}

// Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
func (o ApprovalResultResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ApprovalResultResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjects struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
	Location *string `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths []string `pulumi:"paths"`
}

// ArtifactObjectsInput is an input type that accepts ArtifactObjectsArgs and ArtifactObjectsOutput values.
// You can construct a concrete instance of `ArtifactObjectsInput` via:
//
//	ArtifactObjectsArgs{...}
type ArtifactObjectsInput interface {
	pulumi.Input

	ToArtifactObjectsOutput() ArtifactObjectsOutput
	ToArtifactObjectsOutputWithContext(context.Context) ArtifactObjectsOutput
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsArgs struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
}

func (ArtifactObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactObjects)(nil)).Elem()
}

func (i ArtifactObjectsArgs) ToArtifactObjectsOutput() ArtifactObjectsOutput {
	return i.ToArtifactObjectsOutputWithContext(context.Background())
}

func (i ArtifactObjectsArgs) ToArtifactObjectsOutputWithContext(ctx context.Context) ArtifactObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsOutput)
}

func (i ArtifactObjectsArgs) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return i.ToArtifactObjectsPtrOutputWithContext(context.Background())
}

func (i ArtifactObjectsArgs) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsOutput).ToArtifactObjectsPtrOutputWithContext(ctx)
}

// ArtifactObjectsPtrInput is an input type that accepts ArtifactObjectsArgs, ArtifactObjectsPtr and ArtifactObjectsPtrOutput values.
// You can construct a concrete instance of `ArtifactObjectsPtrInput` via:
//
//	        ArtifactObjectsArgs{...}
//
//	or:
//
//	        nil
type ArtifactObjectsPtrInput interface {
	pulumi.Input

	ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput
	ToArtifactObjectsPtrOutputWithContext(context.Context) ArtifactObjectsPtrOutput
}

type artifactObjectsPtrType ArtifactObjectsArgs

func ArtifactObjectsPtr(v *ArtifactObjectsArgs) ArtifactObjectsPtrInput {
	return (*artifactObjectsPtrType)(v)
}

func (*artifactObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactObjects)(nil)).Elem()
}

func (i *artifactObjectsPtrType) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return i.ToArtifactObjectsPtrOutputWithContext(context.Background())
}

func (i *artifactObjectsPtrType) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactObjectsPtrOutput)
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsOutput struct{ *pulumi.OutputState }

func (ArtifactObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactObjects)(nil)).Elem()
}

func (o ArtifactObjectsOutput) ToArtifactObjectsOutput() ArtifactObjectsOutput {
	return o
}

func (o ArtifactObjectsOutput) ToArtifactObjectsOutputWithContext(ctx context.Context) ArtifactObjectsOutput {
	return o
}

func (o ArtifactObjectsOutput) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return o.ToArtifactObjectsPtrOutputWithContext(context.Background())
}

func (o ArtifactObjectsOutput) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ArtifactObjects) *ArtifactObjects {
		return &v
	}).(ArtifactObjectsPtrOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
func (o ArtifactObjectsOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ArtifactObjects) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Path globs used to match files in the build's workspace.
func (o ArtifactObjectsOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactObjects) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

type ArtifactObjectsPtrOutput struct{ *pulumi.OutputState }

func (ArtifactObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactObjects)(nil)).Elem()
}

func (o ArtifactObjectsPtrOutput) ToArtifactObjectsPtrOutput() ArtifactObjectsPtrOutput {
	return o
}

func (o ArtifactObjectsPtrOutput) ToArtifactObjectsPtrOutputWithContext(ctx context.Context) ArtifactObjectsPtrOutput {
	return o
}

func (o ArtifactObjectsPtrOutput) Elem() ArtifactObjectsOutput {
	return o.ApplyT(func(v *ArtifactObjects) ArtifactObjects {
		if v != nil {
			return *v
		}
		var ret ArtifactObjects
		return ret
	}).(ArtifactObjectsOutput)
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
func (o ArtifactObjectsPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ArtifactObjects) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Path globs used to match files in the build's workspace.
func (o ArtifactObjectsPtrOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ArtifactObjects) []string {
		if v == nil {
			return nil
		}
		return v.Paths
	}).(pulumi.StringArrayOutput)
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsResponse struct {
	// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
	Location string `pulumi:"location"`
	// Path globs used to match files in the build's workspace.
	Paths []string `pulumi:"paths"`
	// Stores timing information for pushing all artifact objects.
	Timing TimeSpanResponse `pulumi:"timing"`
}

// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
type ArtifactObjectsResponseOutput struct{ *pulumi.OutputState }

func (ArtifactObjectsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactObjectsResponse)(nil)).Elem()
}

func (o ArtifactObjectsResponseOutput) ToArtifactObjectsResponseOutput() ArtifactObjectsResponseOutput {
	return o
}

func (o ArtifactObjectsResponseOutput) ToArtifactObjectsResponseOutputWithContext(ctx context.Context) ArtifactObjectsResponseOutput {
	return o
}

// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
func (o ArtifactObjectsResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ArtifactObjectsResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Path globs used to match files in the build's workspace.
func (o ArtifactObjectsResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactObjectsResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Stores timing information for pushing all artifact objects.
func (o ArtifactObjectsResponseOutput) Timing() TimeSpanResponseOutput {
	return o.ApplyT(func(v ArtifactObjectsResponse) TimeSpanResponse { return v.Timing }).(TimeSpanResponseOutput)
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type Artifacts struct {
	// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `pulumi:"images"`
	// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
	MavenArtifacts []MavenArtifact `pulumi:"mavenArtifacts"`
	// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
	NpmPackages []NpmPackage `pulumi:"npmPackages"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
	Objects *ArtifactObjects `pulumi:"objects"`
	// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
	PythonPackages []PythonPackage `pulumi:"pythonPackages"`
}

// ArtifactsInput is an input type that accepts ArtifactsArgs and ArtifactsOutput values.
// You can construct a concrete instance of `ArtifactsInput` via:
//
//	ArtifactsArgs{...}
type ArtifactsInput interface {
	pulumi.Input

	ToArtifactsOutput() ArtifactsOutput
	ToArtifactsOutputWithContext(context.Context) ArtifactsOutput
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsArgs struct {
	// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
	MavenArtifacts MavenArtifactArrayInput `pulumi:"mavenArtifacts"`
	// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
	NpmPackages NpmPackageArrayInput `pulumi:"npmPackages"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
	Objects ArtifactObjectsPtrInput `pulumi:"objects"`
	// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
	PythonPackages PythonPackageArrayInput `pulumi:"pythonPackages"`
}

func (ArtifactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifacts)(nil)).Elem()
}

func (i ArtifactsArgs) ToArtifactsOutput() ArtifactsOutput {
	return i.ToArtifactsOutputWithContext(context.Background())
}

func (i ArtifactsArgs) ToArtifactsOutputWithContext(ctx context.Context) ArtifactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsOutput)
}

func (i ArtifactsArgs) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return i.ToArtifactsPtrOutputWithContext(context.Background())
}

func (i ArtifactsArgs) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsOutput).ToArtifactsPtrOutputWithContext(ctx)
}

// ArtifactsPtrInput is an input type that accepts ArtifactsArgs, ArtifactsPtr and ArtifactsPtrOutput values.
// You can construct a concrete instance of `ArtifactsPtrInput` via:
//
//	        ArtifactsArgs{...}
//
//	or:
//
//	        nil
type ArtifactsPtrInput interface {
	pulumi.Input

	ToArtifactsPtrOutput() ArtifactsPtrOutput
	ToArtifactsPtrOutputWithContext(context.Context) ArtifactsPtrOutput
}

type artifactsPtrType ArtifactsArgs

func ArtifactsPtr(v *ArtifactsArgs) ArtifactsPtrInput {
	return (*artifactsPtrType)(v)
}

func (*artifactsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifacts)(nil)).Elem()
}

func (i *artifactsPtrType) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return i.ToArtifactsPtrOutputWithContext(context.Background())
}

func (i *artifactsPtrType) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsPtrOutput)
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsOutput struct{ *pulumi.OutputState }

func (ArtifactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Artifacts)(nil)).Elem()
}

func (o ArtifactsOutput) ToArtifactsOutput() ArtifactsOutput {
	return o
}

func (o ArtifactsOutput) ToArtifactsOutputWithContext(ctx context.Context) ArtifactsOutput {
	return o
}

func (o ArtifactsOutput) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return o.ToArtifactsPtrOutputWithContext(context.Background())
}

func (o ArtifactsOutput) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Artifacts) *Artifacts {
		return &v
	}).(ArtifactsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
func (o ArtifactsOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Artifacts) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
func (o ArtifactsOutput) MavenArtifacts() MavenArtifactArrayOutput {
	return o.ApplyT(func(v Artifacts) []MavenArtifact { return v.MavenArtifacts }).(MavenArtifactArrayOutput)
}

// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
func (o ArtifactsOutput) NpmPackages() NpmPackageArrayOutput {
	return o.ApplyT(func(v Artifacts) []NpmPackage { return v.NpmPackages }).(NpmPackageArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsOutput) Objects() ArtifactObjectsPtrOutput {
	return o.ApplyT(func(v Artifacts) *ArtifactObjects { return v.Objects }).(ArtifactObjectsPtrOutput)
}

// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsOutput) PythonPackages() PythonPackageArrayOutput {
	return o.ApplyT(func(v Artifacts) []PythonPackage { return v.PythonPackages }).(PythonPackageArrayOutput)
}

type ArtifactsPtrOutput struct{ *pulumi.OutputState }

func (ArtifactsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Artifacts)(nil)).Elem()
}

func (o ArtifactsPtrOutput) ToArtifactsPtrOutput() ArtifactsPtrOutput {
	return o
}

func (o ArtifactsPtrOutput) ToArtifactsPtrOutputWithContext(ctx context.Context) ArtifactsPtrOutput {
	return o
}

func (o ArtifactsPtrOutput) Elem() ArtifactsOutput {
	return o.ApplyT(func(v *Artifacts) Artifacts {
		if v != nil {
			return *v
		}
		var ret Artifacts
		return ret
	}).(ArtifactsOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
func (o ArtifactsPtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Artifacts) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
func (o ArtifactsPtrOutput) MavenArtifacts() MavenArtifactArrayOutput {
	return o.ApplyT(func(v *Artifacts) []MavenArtifact {
		if v == nil {
			return nil
		}
		return v.MavenArtifacts
	}).(MavenArtifactArrayOutput)
}

// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
func (o ArtifactsPtrOutput) NpmPackages() NpmPackageArrayOutput {
	return o.ApplyT(func(v *Artifacts) []NpmPackage {
		if v == nil {
			return nil
		}
		return v.NpmPackages
	}).(NpmPackageArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsPtrOutput) Objects() ArtifactObjectsPtrOutput {
	return o.ApplyT(func(v *Artifacts) *ArtifactObjects {
		if v == nil {
			return nil
		}
		return v.Objects
	}).(ArtifactObjectsPtrOutput)
}

// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsPtrOutput) PythonPackages() PythonPackageArrayOutput {
	return o.ApplyT(func(v *Artifacts) []PythonPackage {
		if v == nil {
			return nil
		}
		return v.PythonPackages
	}).(PythonPackageArrayOutput)
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsResponse struct {
	// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
	Images []string `pulumi:"images"`
	// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
	MavenArtifacts []MavenArtifactResponse `pulumi:"mavenArtifacts"`
	// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
	NpmPackages []NpmPackageResponse `pulumi:"npmPackages"`
	// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
	Objects ArtifactObjectsResponse `pulumi:"objects"`
	// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
	PythonPackages []PythonPackageResponse `pulumi:"pythonPackages"`
}

// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
type ArtifactsResponseOutput struct{ *pulumi.OutputState }

func (ArtifactsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsResponse)(nil)).Elem()
}

func (o ArtifactsResponseOutput) ToArtifactsResponseOutput() ArtifactsResponseOutput {
	return o
}

func (o ArtifactsResponseOutput) ToArtifactsResponseOutputWithContext(ctx context.Context) ArtifactsResponseOutput {
	return o
}

// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponseOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ArtifactsResponse) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponseOutput) MavenArtifacts() MavenArtifactResponseArrayOutput {
	return o.ApplyT(func(v ArtifactsResponse) []MavenArtifactResponse { return v.MavenArtifacts }).(MavenArtifactResponseArrayOutput)
}

// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponseOutput) NpmPackages() NpmPackageResponseArrayOutput {
	return o.ApplyT(func(v ArtifactsResponse) []NpmPackageResponse { return v.NpmPackages }).(NpmPackageResponseArrayOutput)
}

// A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponseOutput) Objects() ArtifactObjectsResponseOutput {
	return o.ApplyT(func(v ArtifactsResponse) ArtifactObjectsResponse { return v.Objects }).(ArtifactObjectsResponseOutput)
}

// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
func (o ArtifactsResponseOutput) PythonPackages() PythonPackageResponseArrayOutput {
	return o.ApplyT(func(v ArtifactsResponse) []PythonPackageResponse { return v.PythonPackages }).(PythonPackageResponseArrayOutput)
}

// BitbucketServerConfig represents the configuration for a Bitbucket Server.
type BitbucketServerConfigResponse struct {
	// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	ApiKey string `pulumi:"apiKey"`
	// Connected Bitbucket Server repositories for this config.
	ConnectedRepositories []BitbucketServerRepositoryIdResponse `pulumi:"connectedRepositories"`
	// Time when the config was created.
	CreateTime string `pulumi:"createTime"`
	// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	HostUri string `pulumi:"hostUri"`
	// The resource name for the config.
	Name string `pulumi:"name"`
	// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
	PeeredNetwork string `pulumi:"peeredNetwork"`
	// Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set.
	PeeredNetworkIpRange string `pulumi:"peeredNetworkIpRange"`
	// Secret Manager secrets needed by the config.
	Secrets BitbucketServerSecretsResponse `pulumi:"secrets"`
	// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
	SslCa string `pulumi:"sslCa"`
	// Username of the account Cloud Build will use on Bitbucket Server.
	Username string `pulumi:"username"`
	// UUID included in webhook requests. The UUID is used to look up the corresponding config.
	WebhookKey string `pulumi:"webhookKey"`
}

// BitbucketServerConfig represents the configuration for a Bitbucket Server.
type BitbucketServerConfigResponseOutput struct{ *pulumi.OutputState }

func (BitbucketServerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerConfigResponse)(nil)).Elem()
}

func (o BitbucketServerConfigResponseOutput) ToBitbucketServerConfigResponseOutput() BitbucketServerConfigResponseOutput {
	return o
}

func (o BitbucketServerConfigResponseOutput) ToBitbucketServerConfigResponseOutputWithContext(ctx context.Context) BitbucketServerConfigResponseOutput {
	return o
}

// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
func (o BitbucketServerConfigResponseOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Connected Bitbucket Server repositories for this config.
func (o BitbucketServerConfigResponseOutput) ConnectedRepositories() BitbucketServerRepositoryIdResponseArrayOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) []BitbucketServerRepositoryIdResponse {
		return v.ConnectedRepositories
	}).(BitbucketServerRepositoryIdResponseArrayOutput)
}

// Time when the config was created.
func (o BitbucketServerConfigResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
func (o BitbucketServerConfigResponseOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.HostUri }).(pulumi.StringOutput)
}

// The resource name for the config.
func (o BitbucketServerConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
func (o BitbucketServerConfigResponseOutput) PeeredNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.PeeredNetwork }).(pulumi.StringOutput)
}

// Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set.
func (o BitbucketServerConfigResponseOutput) PeeredNetworkIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.PeeredNetworkIpRange }).(pulumi.StringOutput)
}

// Secret Manager secrets needed by the config.
func (o BitbucketServerConfigResponseOutput) Secrets() BitbucketServerSecretsResponseOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) BitbucketServerSecretsResponse { return v.Secrets }).(BitbucketServerSecretsResponseOutput)
}

// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
func (o BitbucketServerConfigResponseOutput) SslCa() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.SslCa }).(pulumi.StringOutput)
}

// Username of the account Cloud Build will use on Bitbucket Server.
func (o BitbucketServerConfigResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.Username }).(pulumi.StringOutput)
}

// UUID included in webhook requests. The UUID is used to look up the corresponding config.
func (o BitbucketServerConfigResponseOutput) WebhookKey() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerConfigResponse) string { return v.WebhookKey }).(pulumi.StringOutput)
}

// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
type BitbucketServerRepositoryIdResponse struct {
	// Identifier for the project storing the repository.
	ProjectKey string `pulumi:"projectKey"`
	// Identifier for the repository.
	RepoSlug string `pulumi:"repoSlug"`
	// The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
	WebhookId int `pulumi:"webhookId"`
}

// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
type BitbucketServerRepositoryIdResponseOutput struct{ *pulumi.OutputState }

func (BitbucketServerRepositoryIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerRepositoryIdResponse)(nil)).Elem()
}

func (o BitbucketServerRepositoryIdResponseOutput) ToBitbucketServerRepositoryIdResponseOutput() BitbucketServerRepositoryIdResponseOutput {
	return o
}

func (o BitbucketServerRepositoryIdResponseOutput) ToBitbucketServerRepositoryIdResponseOutputWithContext(ctx context.Context) BitbucketServerRepositoryIdResponseOutput {
	return o
}

// Identifier for the project storing the repository.
func (o BitbucketServerRepositoryIdResponseOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerRepositoryIdResponse) string { return v.ProjectKey }).(pulumi.StringOutput)
}

// Identifier for the repository.
func (o BitbucketServerRepositoryIdResponseOutput) RepoSlug() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerRepositoryIdResponse) string { return v.RepoSlug }).(pulumi.StringOutput)
}

// The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
func (o BitbucketServerRepositoryIdResponseOutput) WebhookId() pulumi.IntOutput {
	return o.ApplyT(func(v BitbucketServerRepositoryIdResponse) int { return v.WebhookId }).(pulumi.IntOutput)
}

type BitbucketServerRepositoryIdResponseArrayOutput struct{ *pulumi.OutputState }

func (BitbucketServerRepositoryIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BitbucketServerRepositoryIdResponse)(nil)).Elem()
}

func (o BitbucketServerRepositoryIdResponseArrayOutput) ToBitbucketServerRepositoryIdResponseArrayOutput() BitbucketServerRepositoryIdResponseArrayOutput {
	return o
}

func (o BitbucketServerRepositoryIdResponseArrayOutput) ToBitbucketServerRepositoryIdResponseArrayOutputWithContext(ctx context.Context) BitbucketServerRepositoryIdResponseArrayOutput {
	return o
}

func (o BitbucketServerRepositoryIdResponseArrayOutput) Index(i pulumi.IntInput) BitbucketServerRepositoryIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BitbucketServerRepositoryIdResponse {
		return vs[0].([]BitbucketServerRepositoryIdResponse)[vs[1].(int)]
	}).(BitbucketServerRepositoryIdResponseOutput)
}

// BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
type BitbucketServerSecrets struct {
	// The resource name for the admin access token's secret version.
	AdminAccessTokenVersionName string `pulumi:"adminAccessTokenVersionName"`
	// The resource name for the read access token's secret version.
	ReadAccessTokenVersionName string `pulumi:"readAccessTokenVersionName"`
	// Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	WebhookSecretVersionName string `pulumi:"webhookSecretVersionName"`
}

// BitbucketServerSecretsInput is an input type that accepts BitbucketServerSecretsArgs and BitbucketServerSecretsOutput values.
// You can construct a concrete instance of `BitbucketServerSecretsInput` via:
//
//	BitbucketServerSecretsArgs{...}
type BitbucketServerSecretsInput interface {
	pulumi.Input

	ToBitbucketServerSecretsOutput() BitbucketServerSecretsOutput
	ToBitbucketServerSecretsOutputWithContext(context.Context) BitbucketServerSecretsOutput
}

// BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
type BitbucketServerSecretsArgs struct {
	// The resource name for the admin access token's secret version.
	AdminAccessTokenVersionName pulumi.StringInput `pulumi:"adminAccessTokenVersionName"`
	// The resource name for the read access token's secret version.
	ReadAccessTokenVersionName pulumi.StringInput `pulumi:"readAccessTokenVersionName"`
	// Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	WebhookSecretVersionName pulumi.StringInput `pulumi:"webhookSecretVersionName"`
}

func (BitbucketServerSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerSecrets)(nil)).Elem()
}

func (i BitbucketServerSecretsArgs) ToBitbucketServerSecretsOutput() BitbucketServerSecretsOutput {
	return i.ToBitbucketServerSecretsOutputWithContext(context.Background())
}

func (i BitbucketServerSecretsArgs) ToBitbucketServerSecretsOutputWithContext(ctx context.Context) BitbucketServerSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketServerSecretsOutput)
}

// BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
type BitbucketServerSecretsOutput struct{ *pulumi.OutputState }

func (BitbucketServerSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerSecrets)(nil)).Elem()
}

func (o BitbucketServerSecretsOutput) ToBitbucketServerSecretsOutput() BitbucketServerSecretsOutput {
	return o
}

func (o BitbucketServerSecretsOutput) ToBitbucketServerSecretsOutputWithContext(ctx context.Context) BitbucketServerSecretsOutput {
	return o
}

// The resource name for the admin access token's secret version.
func (o BitbucketServerSecretsOutput) AdminAccessTokenVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerSecrets) string { return v.AdminAccessTokenVersionName }).(pulumi.StringOutput)
}

// The resource name for the read access token's secret version.
func (o BitbucketServerSecretsOutput) ReadAccessTokenVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerSecrets) string { return v.ReadAccessTokenVersionName }).(pulumi.StringOutput)
}

// Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
func (o BitbucketServerSecretsOutput) WebhookSecretVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerSecrets) string { return v.WebhookSecretVersionName }).(pulumi.StringOutput)
}

// BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
type BitbucketServerSecretsResponse struct {
	// The resource name for the admin access token's secret version.
	AdminAccessTokenVersionName string `pulumi:"adminAccessTokenVersionName"`
	// The resource name for the read access token's secret version.
	ReadAccessTokenVersionName string `pulumi:"readAccessTokenVersionName"`
	// Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	WebhookSecretVersionName string `pulumi:"webhookSecretVersionName"`
}

// BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
type BitbucketServerSecretsResponseOutput struct{ *pulumi.OutputState }

func (BitbucketServerSecretsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerSecretsResponse)(nil)).Elem()
}

func (o BitbucketServerSecretsResponseOutput) ToBitbucketServerSecretsResponseOutput() BitbucketServerSecretsResponseOutput {
	return o
}

func (o BitbucketServerSecretsResponseOutput) ToBitbucketServerSecretsResponseOutputWithContext(ctx context.Context) BitbucketServerSecretsResponseOutput {
	return o
}

// The resource name for the admin access token's secret version.
func (o BitbucketServerSecretsResponseOutput) AdminAccessTokenVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerSecretsResponse) string { return v.AdminAccessTokenVersionName }).(pulumi.StringOutput)
}

// The resource name for the read access token's secret version.
func (o BitbucketServerSecretsResponseOutput) ReadAccessTokenVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerSecretsResponse) string { return v.ReadAccessTokenVersionName }).(pulumi.StringOutput)
}

// Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
func (o BitbucketServerSecretsResponseOutput) WebhookSecretVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerSecretsResponse) string { return v.WebhookSecretVersionName }).(pulumi.StringOutput)
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
type BitbucketServerTriggerConfig struct {
	// The Bitbucket server config resource that this trigger config maps to.
	BitbucketServerConfigResource string `pulumi:"bitbucketServerConfigResource"`
	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	ProjectKey string `pulumi:"projectKey"`
	// Filter to match changes in pull requests.
	PullRequest *PullRequestFilter `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push *PushFilter `pulumi:"push"`
	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	RepoSlug string `pulumi:"repoSlug"`
}

// BitbucketServerTriggerConfigInput is an input type that accepts BitbucketServerTriggerConfigArgs and BitbucketServerTriggerConfigOutput values.
// You can construct a concrete instance of `BitbucketServerTriggerConfigInput` via:
//
//	BitbucketServerTriggerConfigArgs{...}
type BitbucketServerTriggerConfigInput interface {
	pulumi.Input

	ToBitbucketServerTriggerConfigOutput() BitbucketServerTriggerConfigOutput
	ToBitbucketServerTriggerConfigOutputWithContext(context.Context) BitbucketServerTriggerConfigOutput
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
type BitbucketServerTriggerConfigArgs struct {
	// The Bitbucket server config resource that this trigger config maps to.
	BitbucketServerConfigResource pulumi.StringInput `pulumi:"bitbucketServerConfigResource"`
	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	ProjectKey pulumi.StringInput `pulumi:"projectKey"`
	// Filter to match changes in pull requests.
	PullRequest PullRequestFilterPtrInput `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push PushFilterPtrInput `pulumi:"push"`
	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	RepoSlug pulumi.StringInput `pulumi:"repoSlug"`
}

func (BitbucketServerTriggerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerTriggerConfig)(nil)).Elem()
}

func (i BitbucketServerTriggerConfigArgs) ToBitbucketServerTriggerConfigOutput() BitbucketServerTriggerConfigOutput {
	return i.ToBitbucketServerTriggerConfigOutputWithContext(context.Background())
}

func (i BitbucketServerTriggerConfigArgs) ToBitbucketServerTriggerConfigOutputWithContext(ctx context.Context) BitbucketServerTriggerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketServerTriggerConfigOutput)
}

func (i BitbucketServerTriggerConfigArgs) ToBitbucketServerTriggerConfigPtrOutput() BitbucketServerTriggerConfigPtrOutput {
	return i.ToBitbucketServerTriggerConfigPtrOutputWithContext(context.Background())
}

func (i BitbucketServerTriggerConfigArgs) ToBitbucketServerTriggerConfigPtrOutputWithContext(ctx context.Context) BitbucketServerTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketServerTriggerConfigOutput).ToBitbucketServerTriggerConfigPtrOutputWithContext(ctx)
}

// BitbucketServerTriggerConfigPtrInput is an input type that accepts BitbucketServerTriggerConfigArgs, BitbucketServerTriggerConfigPtr and BitbucketServerTriggerConfigPtrOutput values.
// You can construct a concrete instance of `BitbucketServerTriggerConfigPtrInput` via:
//
//	        BitbucketServerTriggerConfigArgs{...}
//
//	or:
//
//	        nil
type BitbucketServerTriggerConfigPtrInput interface {
	pulumi.Input

	ToBitbucketServerTriggerConfigPtrOutput() BitbucketServerTriggerConfigPtrOutput
	ToBitbucketServerTriggerConfigPtrOutputWithContext(context.Context) BitbucketServerTriggerConfigPtrOutput
}

type bitbucketServerTriggerConfigPtrType BitbucketServerTriggerConfigArgs

func BitbucketServerTriggerConfigPtr(v *BitbucketServerTriggerConfigArgs) BitbucketServerTriggerConfigPtrInput {
	return (*bitbucketServerTriggerConfigPtrType)(v)
}

func (*bitbucketServerTriggerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BitbucketServerTriggerConfig)(nil)).Elem()
}

func (i *bitbucketServerTriggerConfigPtrType) ToBitbucketServerTriggerConfigPtrOutput() BitbucketServerTriggerConfigPtrOutput {
	return i.ToBitbucketServerTriggerConfigPtrOutputWithContext(context.Background())
}

func (i *bitbucketServerTriggerConfigPtrType) ToBitbucketServerTriggerConfigPtrOutputWithContext(ctx context.Context) BitbucketServerTriggerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketServerTriggerConfigPtrOutput)
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
type BitbucketServerTriggerConfigOutput struct{ *pulumi.OutputState }

func (BitbucketServerTriggerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerTriggerConfig)(nil)).Elem()
}

func (o BitbucketServerTriggerConfigOutput) ToBitbucketServerTriggerConfigOutput() BitbucketServerTriggerConfigOutput {
	return o
}

func (o BitbucketServerTriggerConfigOutput) ToBitbucketServerTriggerConfigOutputWithContext(ctx context.Context) BitbucketServerTriggerConfigOutput {
	return o
}

func (o BitbucketServerTriggerConfigOutput) ToBitbucketServerTriggerConfigPtrOutput() BitbucketServerTriggerConfigPtrOutput {
	return o.ToBitbucketServerTriggerConfigPtrOutputWithContext(context.Background())
}

func (o BitbucketServerTriggerConfigOutput) ToBitbucketServerTriggerConfigPtrOutputWithContext(ctx context.Context) BitbucketServerTriggerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BitbucketServerTriggerConfig) *BitbucketServerTriggerConfig {
		return &v
	}).(BitbucketServerTriggerConfigPtrOutput)
}

// The Bitbucket server config resource that this trigger config maps to.
func (o BitbucketServerTriggerConfigOutput) BitbucketServerConfigResource() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfig) string { return v.BitbucketServerConfigResource }).(pulumi.StringOutput)
}

// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
func (o BitbucketServerTriggerConfigOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfig) string { return v.ProjectKey }).(pulumi.StringOutput)
}

// Filter to match changes in pull requests.
func (o BitbucketServerTriggerConfigOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfig) *PullRequestFilter { return v.PullRequest }).(PullRequestFilterPtrOutput)
}

// Filter to match changes in refs like branches, tags.
func (o BitbucketServerTriggerConfigOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfig) *PushFilter { return v.Push }).(PushFilterPtrOutput)
}

// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
func (o BitbucketServerTriggerConfigOutput) RepoSlug() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfig) string { return v.RepoSlug }).(pulumi.StringOutput)
}

type BitbucketServerTriggerConfigPtrOutput struct{ *pulumi.OutputState }

func (BitbucketServerTriggerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BitbucketServerTriggerConfig)(nil)).Elem()
}

func (o BitbucketServerTriggerConfigPtrOutput) ToBitbucketServerTriggerConfigPtrOutput() BitbucketServerTriggerConfigPtrOutput {
	return o
}

func (o BitbucketServerTriggerConfigPtrOutput) ToBitbucketServerTriggerConfigPtrOutputWithContext(ctx context.Context) BitbucketServerTriggerConfigPtrOutput {
	return o
}

func (o BitbucketServerTriggerConfigPtrOutput) Elem() BitbucketServerTriggerConfigOutput {
	return o.ApplyT(func(v *BitbucketServerTriggerConfig) BitbucketServerTriggerConfig {
		if v != nil {
			return *v
		}
		var ret BitbucketServerTriggerConfig
		return ret
	}).(BitbucketServerTriggerConfigOutput)
}

// The Bitbucket server config resource that this trigger config maps to.
func (o BitbucketServerTriggerConfigPtrOutput) BitbucketServerConfigResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BitbucketServerTriggerConfig) *string {
		if v == nil {
			return nil
		}
		return &v.BitbucketServerConfigResource
	}).(pulumi.StringPtrOutput)
}

// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
func (o BitbucketServerTriggerConfigPtrOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BitbucketServerTriggerConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ProjectKey
	}).(pulumi.StringPtrOutput)
}

// Filter to match changes in pull requests.
func (o BitbucketServerTriggerConfigPtrOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v *BitbucketServerTriggerConfig) *PullRequestFilter {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PullRequestFilterPtrOutput)
}

// Filter to match changes in refs like branches, tags.
func (o BitbucketServerTriggerConfigPtrOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v *BitbucketServerTriggerConfig) *PushFilter {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PushFilterPtrOutput)
}

// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
func (o BitbucketServerTriggerConfigPtrOutput) RepoSlug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BitbucketServerTriggerConfig) *string {
		if v == nil {
			return nil
		}
		return &v.RepoSlug
	}).(pulumi.StringPtrOutput)
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
type BitbucketServerTriggerConfigResponse struct {
	// The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
	BitbucketServerConfig BitbucketServerConfigResponse `pulumi:"bitbucketServerConfig"`
	// The Bitbucket server config resource that this trigger config maps to.
	BitbucketServerConfigResource string `pulumi:"bitbucketServerConfigResource"`
	// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
	ProjectKey string `pulumi:"projectKey"`
	// Filter to match changes in pull requests.
	PullRequest PullRequestFilterResponse `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push PushFilterResponse `pulumi:"push"`
	// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
	RepoSlug string `pulumi:"repoSlug"`
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
type BitbucketServerTriggerConfigResponseOutput struct{ *pulumi.OutputState }

func (BitbucketServerTriggerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BitbucketServerTriggerConfigResponse)(nil)).Elem()
}

func (o BitbucketServerTriggerConfigResponseOutput) ToBitbucketServerTriggerConfigResponseOutput() BitbucketServerTriggerConfigResponseOutput {
	return o
}

func (o BitbucketServerTriggerConfigResponseOutput) ToBitbucketServerTriggerConfigResponseOutputWithContext(ctx context.Context) BitbucketServerTriggerConfigResponseOutput {
	return o
}

// The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
func (o BitbucketServerTriggerConfigResponseOutput) BitbucketServerConfig() BitbucketServerConfigResponseOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfigResponse) BitbucketServerConfigResponse {
		return v.BitbucketServerConfig
	}).(BitbucketServerConfigResponseOutput)
}

// The Bitbucket server config resource that this trigger config maps to.
func (o BitbucketServerTriggerConfigResponseOutput) BitbucketServerConfigResource() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfigResponse) string { return v.BitbucketServerConfigResource }).(pulumi.StringOutput)
}

// Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
func (o BitbucketServerTriggerConfigResponseOutput) ProjectKey() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfigResponse) string { return v.ProjectKey }).(pulumi.StringOutput)
}

// Filter to match changes in pull requests.
func (o BitbucketServerTriggerConfigResponseOutput) PullRequest() PullRequestFilterResponseOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfigResponse) PullRequestFilterResponse { return v.PullRequest }).(PullRequestFilterResponseOutput)
}

// Filter to match changes in refs like branches, tags.
func (o BitbucketServerTriggerConfigResponseOutput) Push() PushFilterResponseOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfigResponse) PushFilterResponse { return v.Push }).(PushFilterResponseOutput)
}

// Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
func (o BitbucketServerTriggerConfigResponseOutput) RepoSlug() pulumi.StringOutput {
	return o.ApplyT(func(v BitbucketServerTriggerConfigResponse) string { return v.RepoSlug }).(pulumi.StringOutput)
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildType struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts *Artifacts `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets *Secrets `pulumi:"availableSecrets"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images []string `pulumi:"images"`
	// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket *string `pulumi:"logsBucket"`
	// Special options for this build.
	Options *BuildOptions `pulumi:"options"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl *string `pulumi:"queueTtl"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets []Secret `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source *Source `pulumi:"source"`
	// The operations to be performed on the workspace.
	Steps []BuildStep `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags []string `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
	Timeout *string `pulumi:"timeout"`
}

// BuildTypeInput is an input type that accepts BuildTypeArgs and BuildTypeOutput values.
// You can construct a concrete instance of `BuildTypeInput` via:
//
//	BuildTypeArgs{...}
type BuildTypeInput interface {
	pulumi.Input

	ToBuildTypeOutput() BuildTypeOutput
	ToBuildTypeOutputWithContext(context.Context) BuildTypeOutput
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildTypeArgs struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsPtrInput `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets SecretsPtrInput `pulumi:"availableSecrets"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images pulumi.StringArrayInput `pulumi:"images"`
	// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket pulumi.StringPtrInput `pulumi:"logsBucket"`
	// Special options for this build.
	Options BuildOptionsPtrInput `pulumi:"options"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl pulumi.StringPtrInput `pulumi:"queueTtl"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets SecretArrayInput `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source SourcePtrInput `pulumi:"source"`
	// The operations to be performed on the workspace.
	Steps BuildStepArrayInput `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (BuildTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (i BuildTypeArgs) ToBuildTypeOutput() BuildTypeOutput {
	return i.ToBuildTypeOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput)
}

func (i BuildTypeArgs) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i BuildTypeArgs) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypeOutput).ToBuildTypePtrOutputWithContext(ctx)
}

// BuildTypePtrInput is an input type that accepts BuildTypeArgs, BuildTypePtr and BuildTypePtrOutput values.
// You can construct a concrete instance of `BuildTypePtrInput` via:
//
//	        BuildTypeArgs{...}
//
//	or:
//
//	        nil
type BuildTypePtrInput interface {
	pulumi.Input

	ToBuildTypePtrOutput() BuildTypePtrOutput
	ToBuildTypePtrOutputWithContext(context.Context) BuildTypePtrOutput
}

type buildTypePtrType BuildTypeArgs

func BuildTypePtr(v *BuildTypeArgs) BuildTypePtrInput {
	return (*buildTypePtrType)(v)
}

func (*buildTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (i *buildTypePtrType) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return i.ToBuildTypePtrOutputWithContext(context.Background())
}

func (i *buildTypePtrType) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildTypePtrOutput)
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildTypeOutput struct{ *pulumi.OutputState }

func (BuildTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildType)(nil)).Elem()
}

func (o BuildTypeOutput) ToBuildTypeOutput() BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypeOutputWithContext(ctx context.Context) BuildTypeOutput {
	return o
}

func (o BuildTypeOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o.ToBuildTypePtrOutputWithContext(context.Background())
}

func (o BuildTypeOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildType) *BuildType {
		return &v
	}).(BuildTypePtrOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildTypeOutput) Artifacts() ArtifactsPtrOutput {
	return o.ApplyT(func(v BuildType) *Artifacts { return v.Artifacts }).(ArtifactsPtrOutput)
}

// Secrets and secret environment variables.
func (o BuildTypeOutput) AvailableSecrets() SecretsPtrOutput {
	return o.ApplyT(func(v BuildType) *Secrets { return v.AvailableSecrets }).(SecretsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildTypeOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildType) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildTypeOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.LogsBucket }).(pulumi.StringPtrOutput)
}

// Special options for this build.
func (o BuildTypeOutput) Options() BuildOptionsPtrOutput {
	return o.ApplyT(func(v BuildType) *BuildOptions { return v.Options }).(BuildOptionsPtrOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildTypeOutput) QueueTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.QueueTtl }).(pulumi.StringPtrOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildTypeOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v BuildType) []Secret { return v.Secrets }).(SecretArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
func (o BuildTypeOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// The location of the source files to build.
func (o BuildTypeOutput) Source() SourcePtrOutput {
	return o.ApplyT(func(v BuildType) *Source { return v.Source }).(SourcePtrOutput)
}

// The operations to be performed on the workspace.
func (o BuildTypeOutput) Steps() BuildStepArrayOutput {
	return o.ApplyT(func(v BuildType) []BuildStep { return v.Steps }).(BuildStepArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildTypeOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildType) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildTypeOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildType) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
func (o BuildTypeOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildType) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type BuildTypePtrOutput struct{ *pulumi.OutputState }

func (BuildTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildType)(nil)).Elem()
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutput() BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) ToBuildTypePtrOutputWithContext(ctx context.Context) BuildTypePtrOutput {
	return o
}

func (o BuildTypePtrOutput) Elem() BuildTypeOutput {
	return o.ApplyT(func(v *BuildType) BuildType {
		if v != nil {
			return *v
		}
		var ret BuildType
		return ret
	}).(BuildTypeOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildTypePtrOutput) Artifacts() ArtifactsPtrOutput {
	return o.ApplyT(func(v *BuildType) *Artifacts {
		if v == nil {
			return nil
		}
		return v.Artifacts
	}).(ArtifactsPtrOutput)
}

// Secrets and secret environment variables.
func (o BuildTypePtrOutput) AvailableSecrets() SecretsPtrOutput {
	return o.ApplyT(func(v *BuildType) *Secrets {
		if v == nil {
			return nil
		}
		return v.AvailableSecrets
	}).(SecretsPtrOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildTypePtrOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildType) []string {
		if v == nil {
			return nil
		}
		return v.Images
	}).(pulumi.StringArrayOutput)
}

// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildTypePtrOutput) LogsBucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.LogsBucket
	}).(pulumi.StringPtrOutput)
}

// Special options for this build.
func (o BuildTypePtrOutput) Options() BuildOptionsPtrOutput {
	return o.ApplyT(func(v *BuildType) *BuildOptions {
		if v == nil {
			return nil
		}
		return v.Options
	}).(BuildOptionsPtrOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildTypePtrOutput) QueueTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.QueueTtl
	}).(pulumi.StringPtrOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildTypePtrOutput) Secrets() SecretArrayOutput {
	return o.ApplyT(func(v *BuildType) []Secret {
		if v == nil {
			return nil
		}
		return v.Secrets
	}).(SecretArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
func (o BuildTypePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// The location of the source files to build.
func (o BuildTypePtrOutput) Source() SourcePtrOutput {
	return o.ApplyT(func(v *BuildType) *Source {
		if v == nil {
			return nil
		}
		return v.Source
	}).(SourcePtrOutput)
}

// The operations to be performed on the workspace.
func (o BuildTypePtrOutput) Steps() BuildStepArrayOutput {
	return o.ApplyT(func(v *BuildType) []BuildStep {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(BuildStepArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildTypePtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *BuildType) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildTypePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildType) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
func (o BuildTypePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildType) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// BuildApproval describes a build's approval configuration, state, and result.
type BuildApprovalResponse struct {
	// Configuration for manual approval of this build.
	Config ApprovalConfigResponse `pulumi:"config"`
	// Result of manual approval for this Build.
	Result ApprovalResultResponse `pulumi:"result"`
	// The state of this build's approval.
	State string `pulumi:"state"`
}

// BuildApproval describes a build's approval configuration, state, and result.
type BuildApprovalResponseOutput struct{ *pulumi.OutputState }

func (BuildApprovalResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildApprovalResponse)(nil)).Elem()
}

func (o BuildApprovalResponseOutput) ToBuildApprovalResponseOutput() BuildApprovalResponseOutput {
	return o
}

func (o BuildApprovalResponseOutput) ToBuildApprovalResponseOutputWithContext(ctx context.Context) BuildApprovalResponseOutput {
	return o
}

// Configuration for manual approval of this build.
func (o BuildApprovalResponseOutput) Config() ApprovalConfigResponseOutput {
	return o.ApplyT(func(v BuildApprovalResponse) ApprovalConfigResponse { return v.Config }).(ApprovalConfigResponseOutput)
}

// Result of manual approval for this Build.
func (o BuildApprovalResponseOutput) Result() ApprovalResultResponseOutput {
	return o.ApplyT(func(v BuildApprovalResponse) ApprovalResultResponse { return v.Result }).(ApprovalResultResponseOutput)
}

// The state of this build's approval.
func (o BuildApprovalResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v BuildApprovalResponse) string { return v.State }).(pulumi.StringOutput)
}

// Optional arguments to enable specific features of builds.
type BuildOptions struct {
	// Option to include built-in and custom substitutions as env variables for all build steps.
	AutomapSubstitutions *bool `pulumi:"automapSubstitutions"`
	// Optional. Option to specify how default logs buckets are setup.
	DefaultLogsBucketBehavior *BuildOptionsDefaultLogsBucketBehavior `pulumi:"defaultLogsBucketBehavior"`
	// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions *bool `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Option to define build log streaming behavior to Cloud Storage.
	LogStreamingOption *BuildOptionsLogStreamingOption `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	Logging *BuildOptionsLogging `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	MachineType *BuildOptionsMachineType `pulumi:"machineType"`
	// Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
	Pool *PoolOption `pulumi:"pool"`
	// Requested verifiability options.
	RequestedVerifyOption *BuildOptionsRequestedVerifyOption `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
	SecretEnv []string `pulumi:"secretEnv"`
	// Requested hash for SourceProvenance.
	SourceProvenanceHash []BuildOptionsSourceProvenanceHashItem `pulumi:"sourceProvenanceHash"`
	// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
	SubstitutionOption *BuildOptionsSubstitutionOption `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []Volume `pulumi:"volumes"`
	// This field deprecated; please use `pool.name` instead.
	WorkerPool *string `pulumi:"workerPool"`
}

// BuildOptionsInput is an input type that accepts BuildOptionsArgs and BuildOptionsOutput values.
// You can construct a concrete instance of `BuildOptionsInput` via:
//
//	BuildOptionsArgs{...}
type BuildOptionsInput interface {
	pulumi.Input

	ToBuildOptionsOutput() BuildOptionsOutput
	ToBuildOptionsOutputWithContext(context.Context) BuildOptionsOutput
}

// Optional arguments to enable specific features of builds.
type BuildOptionsArgs struct {
	// Option to include built-in and custom substitutions as env variables for all build steps.
	AutomapSubstitutions pulumi.BoolPtrInput `pulumi:"automapSubstitutions"`
	// Optional. Option to specify how default logs buckets are setup.
	DefaultLogsBucketBehavior BuildOptionsDefaultLogsBucketBehaviorPtrInput `pulumi:"defaultLogsBucketBehavior"`
	// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions pulumi.BoolPtrInput `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Option to define build log streaming behavior to Cloud Storage.
	LogStreamingOption BuildOptionsLogStreamingOptionPtrInput `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	Logging BuildOptionsLoggingPtrInput `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	MachineType BuildOptionsMachineTypePtrInput `pulumi:"machineType"`
	// Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
	Pool PoolOptionPtrInput `pulumi:"pool"`
	// Requested verifiability options.
	RequestedVerifyOption BuildOptionsRequestedVerifyOptionPtrInput `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
	SecretEnv pulumi.StringArrayInput `pulumi:"secretEnv"`
	// Requested hash for SourceProvenance.
	SourceProvenanceHash BuildOptionsSourceProvenanceHashItemArrayInput `pulumi:"sourceProvenanceHash"`
	// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
	SubstitutionOption BuildOptionsSubstitutionOptionPtrInput `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes VolumeArrayInput `pulumi:"volumes"`
	// This field deprecated; please use `pool.name` instead.
	WorkerPool pulumi.StringPtrInput `pulumi:"workerPool"`
}

func (BuildOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOptions)(nil)).Elem()
}

func (i BuildOptionsArgs) ToBuildOptionsOutput() BuildOptionsOutput {
	return i.ToBuildOptionsOutputWithContext(context.Background())
}

func (i BuildOptionsArgs) ToBuildOptionsOutputWithContext(ctx context.Context) BuildOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsOutput)
}

func (i BuildOptionsArgs) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return i.ToBuildOptionsPtrOutputWithContext(context.Background())
}

func (i BuildOptionsArgs) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsOutput).ToBuildOptionsPtrOutputWithContext(ctx)
}

// BuildOptionsPtrInput is an input type that accepts BuildOptionsArgs, BuildOptionsPtr and BuildOptionsPtrOutput values.
// You can construct a concrete instance of `BuildOptionsPtrInput` via:
//
//	        BuildOptionsArgs{...}
//
//	or:
//
//	        nil
type BuildOptionsPtrInput interface {
	pulumi.Input

	ToBuildOptionsPtrOutput() BuildOptionsPtrOutput
	ToBuildOptionsPtrOutputWithContext(context.Context) BuildOptionsPtrOutput
}

type buildOptionsPtrType BuildOptionsArgs

func BuildOptionsPtr(v *BuildOptionsArgs) BuildOptionsPtrInput {
	return (*buildOptionsPtrType)(v)
}

func (*buildOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOptions)(nil)).Elem()
}

func (i *buildOptionsPtrType) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return i.ToBuildOptionsPtrOutputWithContext(context.Background())
}

func (i *buildOptionsPtrType) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOptionsPtrOutput)
}

// Optional arguments to enable specific features of builds.
type BuildOptionsOutput struct{ *pulumi.OutputState }

func (BuildOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOptions)(nil)).Elem()
}

func (o BuildOptionsOutput) ToBuildOptionsOutput() BuildOptionsOutput {
	return o
}

func (o BuildOptionsOutput) ToBuildOptionsOutputWithContext(ctx context.Context) BuildOptionsOutput {
	return o
}

func (o BuildOptionsOutput) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return o.ToBuildOptionsPtrOutputWithContext(context.Background())
}

func (o BuildOptionsOutput) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BuildOptions) *BuildOptions {
		return &v
	}).(BuildOptionsPtrOutput)
}

// Option to include built-in and custom substitutions as env variables for all build steps.
func (o BuildOptionsOutput) AutomapSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildOptions) *bool { return v.AutomapSubstitutions }).(pulumi.BoolPtrOutput)
}

// Optional. Option to specify how default logs buckets are setup.
func (o BuildOptionsOutput) DefaultLogsBucketBehavior() BuildOptionsDefaultLogsBucketBehaviorPtrOutput {
	return o.ApplyT(func(v BuildOptions) *BuildOptionsDefaultLogsBucketBehavior { return v.DefaultLogsBucketBehavior }).(BuildOptionsDefaultLogsBucketBehaviorPtrOutput)
}

// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
func (o BuildOptionsOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsOutput) DynamicSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildOptions) *bool { return v.DynamicSubstitutions }).(pulumi.BoolPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildOptionsOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptions) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Cloud Storage.
func (o BuildOptionsOutput) LogStreamingOption() BuildOptionsLogStreamingOptionPtrOutput {
	return o.ApplyT(func(v BuildOptions) *BuildOptionsLogStreamingOption { return v.LogStreamingOption }).(BuildOptionsLogStreamingOptionPtrOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
func (o BuildOptionsOutput) Logging() BuildOptionsLoggingPtrOutput {
	return o.ApplyT(func(v BuildOptions) *BuildOptionsLogging { return v.Logging }).(BuildOptionsLoggingPtrOutput)
}

// Compute Engine machine type on which to run the build.
func (o BuildOptionsOutput) MachineType() BuildOptionsMachineTypePtrOutput {
	return o.ApplyT(func(v BuildOptions) *BuildOptionsMachineType { return v.MachineType }).(BuildOptionsMachineTypePtrOutput)
}

// Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
func (o BuildOptionsOutput) Pool() PoolOptionPtrOutput {
	return o.ApplyT(func(v BuildOptions) *PoolOption { return v.Pool }).(PoolOptionPtrOutput)
}

// Requested verifiability options.
func (o BuildOptionsOutput) RequestedVerifyOption() BuildOptionsRequestedVerifyOptionPtrOutput {
	return o.ApplyT(func(v BuildOptions) *BuildOptionsRequestedVerifyOption { return v.RequestedVerifyOption }).(BuildOptionsRequestedVerifyOptionPtrOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
func (o BuildOptionsOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptions) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
func (o BuildOptionsOutput) SourceProvenanceHash() BuildOptionsSourceProvenanceHashItemArrayOutput {
	return o.ApplyT(func(v BuildOptions) []BuildOptionsSourceProvenanceHashItem { return v.SourceProvenanceHash }).(BuildOptionsSourceProvenanceHashItemArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsOutput) SubstitutionOption() BuildOptionsSubstitutionOptionPtrOutput {
	return o.ApplyT(func(v BuildOptions) *BuildOptionsSubstitutionOption { return v.SubstitutionOption }).(BuildOptionsSubstitutionOptionPtrOutput)
}

// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildOptionsOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v BuildOptions) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

// This field deprecated; please use `pool.name` instead.
func (o BuildOptionsOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildOptions) *string { return v.WorkerPool }).(pulumi.StringPtrOutput)
}

type BuildOptionsPtrOutput struct{ *pulumi.OutputState }

func (BuildOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildOptions)(nil)).Elem()
}

func (o BuildOptionsPtrOutput) ToBuildOptionsPtrOutput() BuildOptionsPtrOutput {
	return o
}

func (o BuildOptionsPtrOutput) ToBuildOptionsPtrOutputWithContext(ctx context.Context) BuildOptionsPtrOutput {
	return o
}

func (o BuildOptionsPtrOutput) Elem() BuildOptionsOutput {
	return o.ApplyT(func(v *BuildOptions) BuildOptions {
		if v != nil {
			return *v
		}
		var ret BuildOptions
		return ret
	}).(BuildOptionsOutput)
}

// Option to include built-in and custom substitutions as env variables for all build steps.
func (o BuildOptionsPtrOutput) AutomapSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *bool {
		if v == nil {
			return nil
		}
		return v.AutomapSubstitutions
	}).(pulumi.BoolPtrOutput)
}

// Optional. Option to specify how default logs buckets are setup.
func (o BuildOptionsPtrOutput) DefaultLogsBucketBehavior() BuildOptionsDefaultLogsBucketBehaviorPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *BuildOptionsDefaultLogsBucketBehavior {
		if v == nil {
			return nil
		}
		return v.DefaultLogsBucketBehavior
	}).(BuildOptionsDefaultLogsBucketBehaviorPtrOutput)
}

// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
func (o BuildOptionsPtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsPtrOutput) DynamicSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *bool {
		if v == nil {
			return nil
		}
		return v.DynamicSubstitutions
	}).(pulumi.BoolPtrOutput)
}

// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildOptionsPtrOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Cloud Storage.
func (o BuildOptionsPtrOutput) LogStreamingOption() BuildOptionsLogStreamingOptionPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *BuildOptionsLogStreamingOption {
		if v == nil {
			return nil
		}
		return v.LogStreamingOption
	}).(BuildOptionsLogStreamingOptionPtrOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
func (o BuildOptionsPtrOutput) Logging() BuildOptionsLoggingPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *BuildOptionsLogging {
		if v == nil {
			return nil
		}
		return v.Logging
	}).(BuildOptionsLoggingPtrOutput)
}

// Compute Engine machine type on which to run the build.
func (o BuildOptionsPtrOutput) MachineType() BuildOptionsMachineTypePtrOutput {
	return o.ApplyT(func(v *BuildOptions) *BuildOptionsMachineType {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(BuildOptionsMachineTypePtrOutput)
}

// Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
func (o BuildOptionsPtrOutput) Pool() PoolOptionPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *PoolOption {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(PoolOptionPtrOutput)
}

// Requested verifiability options.
func (o BuildOptionsPtrOutput) RequestedVerifyOption() BuildOptionsRequestedVerifyOptionPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *BuildOptionsRequestedVerifyOption {
		if v == nil {
			return nil
		}
		return v.RequestedVerifyOption
	}).(BuildOptionsRequestedVerifyOptionPtrOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
func (o BuildOptionsPtrOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []string {
		if v == nil {
			return nil
		}
		return v.SecretEnv
	}).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
func (o BuildOptionsPtrOutput) SourceProvenanceHash() BuildOptionsSourceProvenanceHashItemArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []BuildOptionsSourceProvenanceHashItem {
		if v == nil {
			return nil
		}
		return v.SourceProvenanceHash
	}).(BuildOptionsSourceProvenanceHashItemArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsPtrOutput) SubstitutionOption() BuildOptionsSubstitutionOptionPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *BuildOptionsSubstitutionOption {
		if v == nil {
			return nil
		}
		return v.SubstitutionOption
	}).(BuildOptionsSubstitutionOptionPtrOutput)
}

// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildOptionsPtrOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v *BuildOptions) []Volume {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(VolumeArrayOutput)
}

// This field deprecated; please use `pool.name` instead.
func (o BuildOptionsPtrOutput) WorkerPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BuildOptions) *string {
		if v == nil {
			return nil
		}
		return v.WorkerPool
	}).(pulumi.StringPtrOutput)
}

// Optional arguments to enable specific features of builds.
type BuildOptionsResponse struct {
	// Option to include built-in and custom substitutions as env variables for all build steps.
	AutomapSubstitutions bool `pulumi:"automapSubstitutions"`
	// Optional. Option to specify how default logs buckets are setup.
	DefaultLogsBucketBehavior string `pulumi:"defaultLogsBucketBehavior"`
	// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
	DynamicSubstitutions bool `pulumi:"dynamicSubstitutions"`
	// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Option to define build log streaming behavior to Cloud Storage.
	LogStreamingOption string `pulumi:"logStreamingOption"`
	// Option to specify the logging mode, which determines if and where build logs are stored.
	Logging string `pulumi:"logging"`
	// Compute Engine machine type on which to run the build.
	MachineType string `pulumi:"machineType"`
	// Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
	Pool PoolOptionResponse `pulumi:"pool"`
	// Requested verifiability options.
	RequestedVerifyOption string `pulumi:"requestedVerifyOption"`
	// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
	SecretEnv []string `pulumi:"secretEnv"`
	// Requested hash for SourceProvenance.
	SourceProvenanceHash []string `pulumi:"sourceProvenanceHash"`
	// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
	SubstitutionOption string `pulumi:"substitutionOption"`
	// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []VolumeResponse `pulumi:"volumes"`
	// This field deprecated; please use `pool.name` instead.
	WorkerPool string `pulumi:"workerPool"`
}

// Optional arguments to enable specific features of builds.
type BuildOptionsResponseOutput struct{ *pulumi.OutputState }

func (BuildOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildOptionsResponse)(nil)).Elem()
}

func (o BuildOptionsResponseOutput) ToBuildOptionsResponseOutput() BuildOptionsResponseOutput {
	return o
}

func (o BuildOptionsResponseOutput) ToBuildOptionsResponseOutputWithContext(ctx context.Context) BuildOptionsResponseOutput {
	return o
}

// Option to include built-in and custom substitutions as env variables for all build steps.
func (o BuildOptionsResponseOutput) AutomapSubstitutions() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildOptionsResponse) bool { return v.AutomapSubstitutions }).(pulumi.BoolOutput)
}

// Optional. Option to specify how default logs buckets are setup.
func (o BuildOptionsResponseOutput) DefaultLogsBucketBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.DefaultLogsBucketBehavior }).(pulumi.StringOutput)
}

// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
func (o BuildOptionsResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsResponseOutput) DynamicSubstitutions() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildOptionsResponse) bool { return v.DynamicSubstitutions }).(pulumi.BoolOutput)
}

// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildOptionsResponseOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Option to define build log streaming behavior to Cloud Storage.
func (o BuildOptionsResponseOutput) LogStreamingOption() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.LogStreamingOption }).(pulumi.StringOutput)
}

// Option to specify the logging mode, which determines if and where build logs are stored.
func (o BuildOptionsResponseOutput) Logging() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.Logging }).(pulumi.StringOutput)
}

// Compute Engine machine type on which to run the build.
func (o BuildOptionsResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
func (o BuildOptionsResponseOutput) Pool() PoolOptionResponseOutput {
	return o.ApplyT(func(v BuildOptionsResponse) PoolOptionResponse { return v.Pool }).(PoolOptionResponseOutput)
}

// Requested verifiability options.
func (o BuildOptionsResponseOutput) RequestedVerifyOption() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.RequestedVerifyOption }).(pulumi.StringOutput)
}

// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
func (o BuildOptionsResponseOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Requested hash for SourceProvenance.
func (o BuildOptionsResponseOutput) SourceProvenanceHash() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []string { return v.SourceProvenanceHash }).(pulumi.StringArrayOutput)
}

// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
func (o BuildOptionsResponseOutput) SubstitutionOption() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.SubstitutionOption }).(pulumi.StringOutput)
}

// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildOptionsResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v BuildOptionsResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// This field deprecated; please use `pool.name` instead.
func (o BuildOptionsResponseOutput) WorkerPool() pulumi.StringOutput {
	return o.ApplyT(func(v BuildOptionsResponse) string { return v.WorkerPool }).(pulumi.StringOutput)
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildResponse struct {
	// Describes this build's approval configuration, status, and result.
	Approval BuildApprovalResponse `pulumi:"approval"`
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsResponse `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets SecretsResponse `pulumi:"availableSecrets"`
	// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
	BuildTriggerId string `pulumi:"buildTriggerId"`
	// Time at which the request to create the build was received.
	CreateTime string `pulumi:"createTime"`
	// Contains information about the build when status=FAILURE.
	FailureInfo FailureInfoResponse `pulumi:"failureInfo"`
	// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
	FinishTime string `pulumi:"finishTime"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images []string `pulumi:"images"`
	// URL to logs for this build in Google Cloud Console.
	LogUrl string `pulumi:"logUrl"`
	// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket string `pulumi:"logsBucket"`
	// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
	Name string `pulumi:"name"`
	// Special options for this build.
	Options BuildOptionsResponse `pulumi:"options"`
	// ID of the project.
	Project string `pulumi:"project"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl string `pulumi:"queueTtl"`
	// Results of the build.
	Results ResultsResponse `pulumi:"results"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets []SecretResponse `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source SourceResponse `pulumi:"source"`
	// A permanent fixed identifier for source.
	SourceProvenance SourceProvenanceResponse `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime string `pulumi:"startTime"`
	// Status of the build.
	Status string `pulumi:"status"`
	// Customer-readable message about the current status.
	StatusDetail string `pulumi:"statusDetail"`
	// The operations to be performed on the workspace.
	Steps []BuildStepResponse `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags []string `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
	Timeout string `pulumi:"timeout"`
	// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
	Timing map[string]TimeSpanResponse `pulumi:"timing"`
	// Non-fatal problems encountered during the execution of the build.
	Warnings []WarningResponse `pulumi:"warnings"`
}

// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
type BuildResponseOutput struct{ *pulumi.OutputState }

func (BuildResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildResponse)(nil)).Elem()
}

func (o BuildResponseOutput) ToBuildResponseOutput() BuildResponseOutput {
	return o
}

func (o BuildResponseOutput) ToBuildResponseOutputWithContext(ctx context.Context) BuildResponseOutput {
	return o
}

// Describes this build's approval configuration, status, and result.
func (o BuildResponseOutput) Approval() BuildApprovalResponseOutput {
	return o.ApplyT(func(v BuildResponse) BuildApprovalResponse { return v.Approval }).(BuildApprovalResponseOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildResponseOutput) Artifacts() ArtifactsResponseOutput {
	return o.ApplyT(func(v BuildResponse) ArtifactsResponse { return v.Artifacts }).(ArtifactsResponseOutput)
}

// Secrets and secret environment variables.
func (o BuildResponseOutput) AvailableSecrets() SecretsResponseOutput {
	return o.ApplyT(func(v BuildResponse) SecretsResponse { return v.AvailableSecrets }).(SecretsResponseOutput)
}

// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
func (o BuildResponseOutput) BuildTriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.BuildTriggerId }).(pulumi.StringOutput)
}

// Time at which the request to create the build was received.
func (o BuildResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Contains information about the build when status=FAILURE.
func (o BuildResponseOutput) FailureInfo() FailureInfoResponseOutput {
	return o.ApplyT(func(v BuildResponse) FailureInfoResponse { return v.FailureInfo }).(FailureInfoResponseOutput)
}

// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
func (o BuildResponseOutput) FinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.FinishTime }).(pulumi.StringOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildResponseOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildResponse) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// URL to logs for this build in Google Cloud Console.
func (o BuildResponseOutput) LogUrl() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.LogUrl }).(pulumi.StringOutput)
}

// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildResponseOutput) LogsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.LogsBucket }).(pulumi.StringOutput)
}

// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
func (o BuildResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Special options for this build.
func (o BuildResponseOutput) Options() BuildOptionsResponseOutput {
	return o.ApplyT(func(v BuildResponse) BuildOptionsResponse { return v.Options }).(BuildOptionsResponseOutput)
}

// ID of the project.
func (o BuildResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.Project }).(pulumi.StringOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildResponseOutput) QueueTtl() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.QueueTtl }).(pulumi.StringOutput)
}

// Results of the build.
func (o BuildResponseOutput) Results() ResultsResponseOutput {
	return o.ApplyT(func(v BuildResponse) ResultsResponse { return v.Results }).(ResultsResponseOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildResponseOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v BuildResponse) []SecretResponse { return v.Secrets }).(SecretResponseArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
func (o BuildResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The location of the source files to build.
func (o BuildResponseOutput) Source() SourceResponseOutput {
	return o.ApplyT(func(v BuildResponse) SourceResponse { return v.Source }).(SourceResponseOutput)
}

// A permanent fixed identifier for source.
func (o BuildResponseOutput) SourceProvenance() SourceProvenanceResponseOutput {
	return o.ApplyT(func(v BuildResponse) SourceProvenanceResponse { return v.SourceProvenance }).(SourceProvenanceResponseOutput)
}

// Time at which execution of the build was started.
func (o BuildResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// Status of the build.
func (o BuildResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Customer-readable message about the current status.
func (o BuildResponseOutput) StatusDetail() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.StatusDetail }).(pulumi.StringOutput)
}

// The operations to be performed on the workspace.
func (o BuildResponseOutput) Steps() BuildStepResponseArrayOutput {
	return o.ApplyT(func(v BuildResponse) []BuildStepResponse { return v.Steps }).(BuildStepResponseArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildResponseOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v BuildResponse) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
func (o BuildResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v BuildResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
func (o BuildResponseOutput) Timing() TimeSpanResponseMapOutput {
	return o.ApplyT(func(v BuildResponse) map[string]TimeSpanResponse { return v.Timing }).(TimeSpanResponseMapOutput)
}

// Non-fatal problems encountered during the execution of the build.
func (o BuildResponseOutput) Warnings() WarningResponseArrayOutput {
	return o.ApplyT(func(v BuildResponse) []WarningResponse { return v.Warnings }).(WarningResponseArrayOutput)
}

// A step in the build pipeline.
type BuildStep struct {
	// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
	AllowExitCodes []int `pulumi:"allowExitCodes"`
	// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
	AllowFailure *bool `pulumi:"allowFailure"`
	// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
	Args []string `pulumi:"args"`
	// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
	AutomapSubstitutions *bool `pulumi:"automapSubstitutions"`
	// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
	Dir *string `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
	Entrypoint *string `pulumi:"entrypoint"`
	// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
	Id *string `pulumi:"id"`
	// The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
	Name string `pulumi:"name"`
	// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
	Script *string `pulumi:"script"`
	// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
	SecretEnv []string `pulumi:"secretEnv"`
	// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
	Timeout *string `pulumi:"timeout"`
	// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []Volume `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
	WaitFor []string `pulumi:"waitFor"`
}

// BuildStepInput is an input type that accepts BuildStepArgs and BuildStepOutput values.
// You can construct a concrete instance of `BuildStepInput` via:
//
//	BuildStepArgs{...}
type BuildStepInput interface {
	pulumi.Input

	ToBuildStepOutput() BuildStepOutput
	ToBuildStepOutputWithContext(context.Context) BuildStepOutput
}

// A step in the build pipeline.
type BuildStepArgs struct {
	// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
	AllowExitCodes pulumi.IntArrayInput `pulumi:"allowExitCodes"`
	// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
	AllowFailure pulumi.BoolPtrInput `pulumi:"allowFailure"`
	// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
	AutomapSubstitutions pulumi.BoolPtrInput `pulumi:"automapSubstitutions"`
	// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
	Entrypoint pulumi.StringPtrInput `pulumi:"entrypoint"`
	// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env pulumi.StringArrayInput `pulumi:"env"`
	// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
	Name pulumi.StringInput `pulumi:"name"`
	// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
	Script pulumi.StringPtrInput `pulumi:"script"`
	// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
	SecretEnv pulumi.StringArrayInput `pulumi:"secretEnv"`
	// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes VolumeArrayInput `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
	WaitFor pulumi.StringArrayInput `pulumi:"waitFor"`
}

func (BuildStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStep)(nil)).Elem()
}

func (i BuildStepArgs) ToBuildStepOutput() BuildStepOutput {
	return i.ToBuildStepOutputWithContext(context.Background())
}

func (i BuildStepArgs) ToBuildStepOutputWithContext(ctx context.Context) BuildStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildStepOutput)
}

// BuildStepArrayInput is an input type that accepts BuildStepArray and BuildStepArrayOutput values.
// You can construct a concrete instance of `BuildStepArrayInput` via:
//
//	BuildStepArray{ BuildStepArgs{...} }
type BuildStepArrayInput interface {
	pulumi.Input

	ToBuildStepArrayOutput() BuildStepArrayOutput
	ToBuildStepArrayOutputWithContext(context.Context) BuildStepArrayOutput
}

type BuildStepArray []BuildStepInput

func (BuildStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildStep)(nil)).Elem()
}

func (i BuildStepArray) ToBuildStepArrayOutput() BuildStepArrayOutput {
	return i.ToBuildStepArrayOutputWithContext(context.Background())
}

func (i BuildStepArray) ToBuildStepArrayOutputWithContext(ctx context.Context) BuildStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildStepArrayOutput)
}

// A step in the build pipeline.
type BuildStepOutput struct{ *pulumi.OutputState }

func (BuildStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStep)(nil)).Elem()
}

func (o BuildStepOutput) ToBuildStepOutput() BuildStepOutput {
	return o
}

func (o BuildStepOutput) ToBuildStepOutputWithContext(ctx context.Context) BuildStepOutput {
	return o
}

// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
func (o BuildStepOutput) AllowExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v BuildStep) []int { return v.AllowExitCodes }).(pulumi.IntArrayOutput)
}

// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
func (o BuildStepOutput) AllowFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildStep) *bool { return v.AllowFailure }).(pulumi.BoolPtrOutput)
}

// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
func (o BuildStepOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
func (o BuildStepOutput) AutomapSubstitutions() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BuildStep) *bool { return v.AutomapSubstitutions }).(pulumi.BoolPtrOutput)
}

// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
func (o BuildStepOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
func (o BuildStepOutput) Entrypoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Entrypoint }).(pulumi.StringPtrOutput)
}

// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildStepOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
func (o BuildStepOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
func (o BuildStepOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStep) string { return v.Name }).(pulumi.StringOutput)
}

// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
func (o BuildStepOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Script }).(pulumi.StringPtrOutput)
}

// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
func (o BuildStepOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
func (o BuildStepOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BuildStep) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildStepOutput) Volumes() VolumeArrayOutput {
	return o.ApplyT(func(v BuildStep) []Volume { return v.Volumes }).(VolumeArrayOutput)
}

// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
func (o BuildStepOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStep) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type BuildStepArrayOutput struct{ *pulumi.OutputState }

func (BuildStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildStep)(nil)).Elem()
}

func (o BuildStepArrayOutput) ToBuildStepArrayOutput() BuildStepArrayOutput {
	return o
}

func (o BuildStepArrayOutput) ToBuildStepArrayOutputWithContext(ctx context.Context) BuildStepArrayOutput {
	return o
}

func (o BuildStepArrayOutput) Index(i pulumi.IntInput) BuildStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildStep {
		return vs[0].([]BuildStep)[vs[1].(int)]
	}).(BuildStepOutput)
}

// A step in the build pipeline.
type BuildStepResponse struct {
	// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
	AllowExitCodes []int `pulumi:"allowExitCodes"`
	// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
	AllowFailure bool `pulumi:"allowFailure"`
	// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
	Args []string `pulumi:"args"`
	// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
	AutomapSubstitutions bool `pulumi:"automapSubstitutions"`
	// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
	Dir string `pulumi:"dir"`
	// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
	Entrypoint string `pulumi:"entrypoint"`
	// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
	Env []string `pulumi:"env"`
	// Return code from running the step.
	ExitCode int `pulumi:"exitCode"`
	// The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
	Name string `pulumi:"name"`
	// Stores timing information for pulling this build step's builder image only.
	PullTiming TimeSpanResponse `pulumi:"pullTiming"`
	// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
	Script string `pulumi:"script"`
	// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
	SecretEnv []string `pulumi:"secretEnv"`
	// Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
	Status string `pulumi:"status"`
	// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
	Timeout string `pulumi:"timeout"`
	// Stores timing information for executing this build step.
	Timing TimeSpanResponse `pulumi:"timing"`
	// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
	Volumes []VolumeResponse `pulumi:"volumes"`
	// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
	WaitFor []string `pulumi:"waitFor"`
}

// A step in the build pipeline.
type BuildStepResponseOutput struct{ *pulumi.OutputState }

func (BuildStepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildStepResponse)(nil)).Elem()
}

func (o BuildStepResponseOutput) ToBuildStepResponseOutput() BuildStepResponseOutput {
	return o
}

func (o BuildStepResponseOutput) ToBuildStepResponseOutputWithContext(ctx context.Context) BuildStepResponseOutput {
	return o
}

// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
func (o BuildStepResponseOutput) AllowExitCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []int { return v.AllowExitCodes }).(pulumi.IntArrayOutput)
}

// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
func (o BuildStepResponseOutput) AllowFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildStepResponse) bool { return v.AllowFailure }).(pulumi.BoolOutput)
}

// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
func (o BuildStepResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
func (o BuildStepResponseOutput) AutomapSubstitutions() pulumi.BoolOutput {
	return o.ApplyT(func(v BuildStepResponse) bool { return v.AutomapSubstitutions }).(pulumi.BoolOutput)
}

// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
func (o BuildStepResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
func (o BuildStepResponseOutput) Entrypoint() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Entrypoint }).(pulumi.StringOutput)
}

// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
func (o BuildStepResponseOutput) Env() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.Env }).(pulumi.StringArrayOutput)
}

// Return code from running the step.
func (o BuildStepResponseOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v BuildStepResponse) int { return v.ExitCode }).(pulumi.IntOutput)
}

// The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
func (o BuildStepResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Stores timing information for pulling this build step's builder image only.
func (o BuildStepResponseOutput) PullTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v BuildStepResponse) TimeSpanResponse { return v.PullTiming }).(TimeSpanResponseOutput)
}

// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
func (o BuildStepResponseOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Script }).(pulumi.StringOutput)
}

// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
func (o BuildStepResponseOutput) SecretEnv() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.SecretEnv }).(pulumi.StringArrayOutput)
}

// Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
func (o BuildStepResponseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Status }).(pulumi.StringOutput)
}

// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
func (o BuildStepResponseOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v BuildStepResponse) string { return v.Timeout }).(pulumi.StringOutput)
}

// Stores timing information for executing this build step.
func (o BuildStepResponseOutput) Timing() TimeSpanResponseOutput {
	return o.ApplyT(func(v BuildStepResponse) TimeSpanResponse { return v.Timing }).(TimeSpanResponseOutput)
}

// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
func (o BuildStepResponseOutput) Volumes() VolumeResponseArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []VolumeResponse { return v.Volumes }).(VolumeResponseArrayOutput)
}

// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
func (o BuildStepResponseOutput) WaitFor() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BuildStepResponse) []string { return v.WaitFor }).(pulumi.StringArrayOutput)
}

type BuildStepResponseArrayOutput struct{ *pulumi.OutputState }

func (BuildStepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildStepResponse)(nil)).Elem()
}

func (o BuildStepResponseArrayOutput) ToBuildStepResponseArrayOutput() BuildStepResponseArrayOutput {
	return o
}

func (o BuildStepResponseArrayOutput) ToBuildStepResponseArrayOutputWithContext(ctx context.Context) BuildStepResponseArrayOutput {
	return o
}

func (o BuildStepResponseArrayOutput) Index(i pulumi.IntInput) BuildStepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildStepResponse {
		return vs[0].([]BuildStepResponse)[vs[1].(int)]
	}).(BuildStepResponseOutput)
}

// An image built by the pipeline.
type BuiltImageResponse struct {
	// Docker Registry 2.0 digest.
	Digest string `pulumi:"digest"`
	// Name used to push the container image to Google Container Registry, as presented to `docker push`.
	Name string `pulumi:"name"`
	// Stores timing information for pushing the specified image.
	PushTiming TimeSpanResponse `pulumi:"pushTiming"`
}

// An image built by the pipeline.
type BuiltImageResponseOutput struct{ *pulumi.OutputState }

func (BuiltImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuiltImageResponse)(nil)).Elem()
}

func (o BuiltImageResponseOutput) ToBuiltImageResponseOutput() BuiltImageResponseOutput {
	return o
}

func (o BuiltImageResponseOutput) ToBuiltImageResponseOutputWithContext(ctx context.Context) BuiltImageResponseOutput {
	return o
}

// Docker Registry 2.0 digest.
func (o BuiltImageResponseOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltImageResponse) string { return v.Digest }).(pulumi.StringOutput)
}

// Name used to push the container image to Google Container Registry, as presented to `docker push`.
func (o BuiltImageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BuiltImageResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Stores timing information for pushing the specified image.
func (o BuiltImageResponseOutput) PushTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v BuiltImageResponse) TimeSpanResponse { return v.PushTiming }).(TimeSpanResponseOutput)
}

type BuiltImageResponseArrayOutput struct{ *pulumi.OutputState }

func (BuiltImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuiltImageResponse)(nil)).Elem()
}

func (o BuiltImageResponseArrayOutput) ToBuiltImageResponseArrayOutput() BuiltImageResponseArrayOutput {
	return o
}

func (o BuiltImageResponseArrayOutput) ToBuiltImageResponseArrayOutputWithContext(ctx context.Context) BuiltImageResponseArrayOutput {
	return o
}

func (o BuiltImageResponseArrayOutput) Index(i pulumi.IntInput) BuiltImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuiltImageResponse {
		return vs[0].([]BuiltImageResponse)[vs[1].(int)]
	}).(BuiltImageResponseOutput)
}

// Location of the source in a 2nd-gen Google Cloud Build repository resource.
type ConnectedRepository struct {
	// Directory, relative to the source root, in which to run the build.
	Dir *string `pulumi:"dir"`
	// Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
	Repository string `pulumi:"repository"`
	// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
	Revision *string `pulumi:"revision"`
}

// ConnectedRepositoryInput is an input type that accepts ConnectedRepositoryArgs and ConnectedRepositoryOutput values.
// You can construct a concrete instance of `ConnectedRepositoryInput` via:
//
//	ConnectedRepositoryArgs{...}
type ConnectedRepositoryInput interface {
	pulumi.Input

	ToConnectedRepositoryOutput() ConnectedRepositoryOutput
	ToConnectedRepositoryOutputWithContext(context.Context) ConnectedRepositoryOutput
}

// Location of the source in a 2nd-gen Google Cloud Build repository resource.
type ConnectedRepositoryArgs struct {
	// Directory, relative to the source root, in which to run the build.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
	Repository pulumi.StringInput `pulumi:"repository"`
	// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (ConnectedRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedRepository)(nil)).Elem()
}

func (i ConnectedRepositoryArgs) ToConnectedRepositoryOutput() ConnectedRepositoryOutput {
	return i.ToConnectedRepositoryOutputWithContext(context.Background())
}

func (i ConnectedRepositoryArgs) ToConnectedRepositoryOutputWithContext(ctx context.Context) ConnectedRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedRepositoryOutput)
}

func (i ConnectedRepositoryArgs) ToConnectedRepositoryPtrOutput() ConnectedRepositoryPtrOutput {
	return i.ToConnectedRepositoryPtrOutputWithContext(context.Background())
}

func (i ConnectedRepositoryArgs) ToConnectedRepositoryPtrOutputWithContext(ctx context.Context) ConnectedRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedRepositoryOutput).ToConnectedRepositoryPtrOutputWithContext(ctx)
}

// ConnectedRepositoryPtrInput is an input type that accepts ConnectedRepositoryArgs, ConnectedRepositoryPtr and ConnectedRepositoryPtrOutput values.
// You can construct a concrete instance of `ConnectedRepositoryPtrInput` via:
//
//	        ConnectedRepositoryArgs{...}
//
//	or:
//
//	        nil
type ConnectedRepositoryPtrInput interface {
	pulumi.Input

	ToConnectedRepositoryPtrOutput() ConnectedRepositoryPtrOutput
	ToConnectedRepositoryPtrOutputWithContext(context.Context) ConnectedRepositoryPtrOutput
}

type connectedRepositoryPtrType ConnectedRepositoryArgs

func ConnectedRepositoryPtr(v *ConnectedRepositoryArgs) ConnectedRepositoryPtrInput {
	return (*connectedRepositoryPtrType)(v)
}

func (*connectedRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedRepository)(nil)).Elem()
}

func (i *connectedRepositoryPtrType) ToConnectedRepositoryPtrOutput() ConnectedRepositoryPtrOutput {
	return i.ToConnectedRepositoryPtrOutputWithContext(context.Background())
}

func (i *connectedRepositoryPtrType) ToConnectedRepositoryPtrOutputWithContext(ctx context.Context) ConnectedRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedRepositoryPtrOutput)
}

// Location of the source in a 2nd-gen Google Cloud Build repository resource.
type ConnectedRepositoryOutput struct{ *pulumi.OutputState }

func (ConnectedRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedRepository)(nil)).Elem()
}

func (o ConnectedRepositoryOutput) ToConnectedRepositoryOutput() ConnectedRepositoryOutput {
	return o
}

func (o ConnectedRepositoryOutput) ToConnectedRepositoryOutputWithContext(ctx context.Context) ConnectedRepositoryOutput {
	return o
}

func (o ConnectedRepositoryOutput) ToConnectedRepositoryPtrOutput() ConnectedRepositoryPtrOutput {
	return o.ToConnectedRepositoryPtrOutputWithContext(context.Background())
}

func (o ConnectedRepositoryOutput) ToConnectedRepositoryPtrOutputWithContext(ctx context.Context) ConnectedRepositoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ConnectedRepository) *ConnectedRepository {
		return &v
	}).(ConnectedRepositoryPtrOutput)
}

// Directory, relative to the source root, in which to run the build.
func (o ConnectedRepositoryOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectedRepository) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
func (o ConnectedRepositoryOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectedRepository) string { return v.Repository }).(pulumi.StringOutput)
}

// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
func (o ConnectedRepositoryOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectedRepository) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type ConnectedRepositoryPtrOutput struct{ *pulumi.OutputState }

func (ConnectedRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedRepository)(nil)).Elem()
}

func (o ConnectedRepositoryPtrOutput) ToConnectedRepositoryPtrOutput() ConnectedRepositoryPtrOutput {
	return o
}

func (o ConnectedRepositoryPtrOutput) ToConnectedRepositoryPtrOutputWithContext(ctx context.Context) ConnectedRepositoryPtrOutput {
	return o
}

func (o ConnectedRepositoryPtrOutput) Elem() ConnectedRepositoryOutput {
	return o.ApplyT(func(v *ConnectedRepository) ConnectedRepository {
		if v != nil {
			return *v
		}
		var ret ConnectedRepository
		return ret
	}).(ConnectedRepositoryOutput)
}

// Directory, relative to the source root, in which to run the build.
func (o ConnectedRepositoryPtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRepository) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

// Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
func (o ConnectedRepositoryPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRepository) *string {
		if v == nil {
			return nil
		}
		return &v.Repository
	}).(pulumi.StringPtrOutput)
}

// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
func (o ConnectedRepositoryPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRepository) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Location of the source in a 2nd-gen Google Cloud Build repository resource.
type ConnectedRepositoryResponse struct {
	// Directory, relative to the source root, in which to run the build.
	Dir string `pulumi:"dir"`
	// Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
	Repository string `pulumi:"repository"`
	// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
	Revision string `pulumi:"revision"`
}

// Location of the source in a 2nd-gen Google Cloud Build repository resource.
type ConnectedRepositoryResponseOutput struct{ *pulumi.OutputState }

func (ConnectedRepositoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectedRepositoryResponse)(nil)).Elem()
}

func (o ConnectedRepositoryResponseOutput) ToConnectedRepositoryResponseOutput() ConnectedRepositoryResponseOutput {
	return o
}

func (o ConnectedRepositoryResponseOutput) ToConnectedRepositoryResponseOutputWithContext(ctx context.Context) ConnectedRepositoryResponseOutput {
	return o
}

// Directory, relative to the source root, in which to run the build.
func (o ConnectedRepositoryResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectedRepositoryResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
func (o ConnectedRepositoryResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectedRepositoryResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
func (o ConnectedRepositoryResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectedRepositoryResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// A fatal problem encountered during the execution of the build.
type FailureInfoResponse struct {
	// Explains the failure issue in more detail using hard-coded text.
	Detail string `pulumi:"detail"`
	// The name of the failure.
	Type string `pulumi:"type"`
}

// A fatal problem encountered during the execution of the build.
type FailureInfoResponseOutput struct{ *pulumi.OutputState }

func (FailureInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FailureInfoResponse)(nil)).Elem()
}

func (o FailureInfoResponseOutput) ToFailureInfoResponseOutput() FailureInfoResponseOutput {
	return o
}

func (o FailureInfoResponseOutput) ToFailureInfoResponseOutputWithContext(ctx context.Context) FailureInfoResponseOutput {
	return o
}

// Explains the failure issue in more detail using hard-coded text.
func (o FailureInfoResponseOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v FailureInfoResponse) string { return v.Detail }).(pulumi.StringOutput)
}

// The name of the failure.
func (o FailureInfoResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v FailureInfoResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
type FileHashesResponse struct {
	// Collection of file hashes.
	FileHash []HashResponse `pulumi:"fileHash"`
}

// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
type FileHashesResponseOutput struct{ *pulumi.OutputState }

func (FileHashesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileHashesResponse)(nil)).Elem()
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutput() FileHashesResponseOutput {
	return o
}

func (o FileHashesResponseOutput) ToFileHashesResponseOutputWithContext(ctx context.Context) FileHashesResponseOutput {
	return o
}

// Collection of file hashes.
func (o FileHashesResponseOutput) FileHash() HashResponseArrayOutput {
	return o.ApplyT(func(v FileHashesResponse) []HashResponse { return v.FileHash }).(HashResponseArrayOutput)
}

type FileHashesResponseMapOutput struct{ *pulumi.OutputState }

func (FileHashesResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FileHashesResponse)(nil)).Elem()
}

func (o FileHashesResponseMapOutput) ToFileHashesResponseMapOutput() FileHashesResponseMapOutput {
	return o
}

func (o FileHashesResponseMapOutput) ToFileHashesResponseMapOutputWithContext(ctx context.Context) FileHashesResponseMapOutput {
	return o
}

func (o FileHashesResponseMapOutput) MapIndex(k pulumi.StringInput) FileHashesResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FileHashesResponse {
		return vs[0].(map[string]FileHashesResponse)[vs[1].(string)]
	}).(FileHashesResponseOutput)
}

// GitFileSource describes a file within a (possibly remote) code repository.
type GitFileSource struct {
	// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
	BitbucketServerConfig *string `pulumi:"bitbucketServerConfig"`
	// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
	GithubEnterpriseConfig *string `pulumi:"githubEnterpriseConfig"`
	// The path of the file, with the repo root as the root of the path.
	Path *string `pulumi:"path"`
	// See RepoType above.
	RepoType *GitFileSourceRepoType `pulumi:"repoType"`
	// The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Repository *string `pulumi:"repository"`
	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	Revision *string `pulumi:"revision"`
	// The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Uri *string `pulumi:"uri"`
}

// GitFileSourceInput is an input type that accepts GitFileSourceArgs and GitFileSourceOutput values.
// You can construct a concrete instance of `GitFileSourceInput` via:
//
//	GitFileSourceArgs{...}
type GitFileSourceInput interface {
	pulumi.Input

	ToGitFileSourceOutput() GitFileSourceOutput
	ToGitFileSourceOutputWithContext(context.Context) GitFileSourceOutput
}

// GitFileSource describes a file within a (possibly remote) code repository.
type GitFileSourceArgs struct {
	// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
	BitbucketServerConfig pulumi.StringPtrInput `pulumi:"bitbucketServerConfig"`
	// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
	GithubEnterpriseConfig pulumi.StringPtrInput `pulumi:"githubEnterpriseConfig"`
	// The path of the file, with the repo root as the root of the path.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// See RepoType above.
	RepoType GitFileSourceRepoTypePtrInput `pulumi:"repoType"`
	// The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (GitFileSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitFileSource)(nil)).Elem()
}

func (i GitFileSourceArgs) ToGitFileSourceOutput() GitFileSourceOutput {
	return i.ToGitFileSourceOutputWithContext(context.Background())
}

func (i GitFileSourceArgs) ToGitFileSourceOutputWithContext(ctx context.Context) GitFileSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitFileSourceOutput)
}

func (i GitFileSourceArgs) ToGitFileSourcePtrOutput() GitFileSourcePtrOutput {
	return i.ToGitFileSourcePtrOutputWithContext(context.Background())
}

func (i GitFileSourceArgs) ToGitFileSourcePtrOutputWithContext(ctx context.Context) GitFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitFileSourceOutput).ToGitFileSourcePtrOutputWithContext(ctx)
}

// GitFileSourcePtrInput is an input type that accepts GitFileSourceArgs, GitFileSourcePtr and GitFileSourcePtrOutput values.
// You can construct a concrete instance of `GitFileSourcePtrInput` via:
//
//	        GitFileSourceArgs{...}
//
//	or:
//
//	        nil
type GitFileSourcePtrInput interface {
	pulumi.Input

	ToGitFileSourcePtrOutput() GitFileSourcePtrOutput
	ToGitFileSourcePtrOutputWithContext(context.Context) GitFileSourcePtrOutput
}

type gitFileSourcePtrType GitFileSourceArgs

func GitFileSourcePtr(v *GitFileSourceArgs) GitFileSourcePtrInput {
	return (*gitFileSourcePtrType)(v)
}

func (*gitFileSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitFileSource)(nil)).Elem()
}

func (i *gitFileSourcePtrType) ToGitFileSourcePtrOutput() GitFileSourcePtrOutput {
	return i.ToGitFileSourcePtrOutputWithContext(context.Background())
}

func (i *gitFileSourcePtrType) ToGitFileSourcePtrOutputWithContext(ctx context.Context) GitFileSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitFileSourcePtrOutput)
}

// GitFileSource describes a file within a (possibly remote) code repository.
type GitFileSourceOutput struct{ *pulumi.OutputState }

func (GitFileSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitFileSource)(nil)).Elem()
}

func (o GitFileSourceOutput) ToGitFileSourceOutput() GitFileSourceOutput {
	return o
}

func (o GitFileSourceOutput) ToGitFileSourceOutputWithContext(ctx context.Context) GitFileSourceOutput {
	return o
}

func (o GitFileSourceOutput) ToGitFileSourcePtrOutput() GitFileSourcePtrOutput {
	return o.ToGitFileSourcePtrOutputWithContext(context.Background())
}

func (o GitFileSourceOutput) ToGitFileSourcePtrOutputWithContext(ctx context.Context) GitFileSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitFileSource) *GitFileSource {
		return &v
	}).(GitFileSourcePtrOutput)
}

// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
func (o GitFileSourceOutput) BitbucketServerConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitFileSource) *string { return v.BitbucketServerConfig }).(pulumi.StringPtrOutput)
}

// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
func (o GitFileSourceOutput) GithubEnterpriseConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitFileSource) *string { return v.GithubEnterpriseConfig }).(pulumi.StringPtrOutput)
}

// The path of the file, with the repo root as the root of the path.
func (o GitFileSourceOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitFileSource) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// See RepoType above.
func (o GitFileSourceOutput) RepoType() GitFileSourceRepoTypePtrOutput {
	return o.ApplyT(func(v GitFileSource) *GitFileSourceRepoType { return v.RepoType }).(GitFileSourceRepoTypePtrOutput)
}

// The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
func (o GitFileSourceOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitFileSource) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
func (o GitFileSourceOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitFileSource) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
func (o GitFileSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitFileSource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GitFileSourcePtrOutput struct{ *pulumi.OutputState }

func (GitFileSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitFileSource)(nil)).Elem()
}

func (o GitFileSourcePtrOutput) ToGitFileSourcePtrOutput() GitFileSourcePtrOutput {
	return o
}

func (o GitFileSourcePtrOutput) ToGitFileSourcePtrOutputWithContext(ctx context.Context) GitFileSourcePtrOutput {
	return o
}

func (o GitFileSourcePtrOutput) Elem() GitFileSourceOutput {
	return o.ApplyT(func(v *GitFileSource) GitFileSource {
		if v != nil {
			return *v
		}
		var ret GitFileSource
		return ret
	}).(GitFileSourceOutput)
}

// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
func (o GitFileSourcePtrOutput) BitbucketServerConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitFileSource) *string {
		if v == nil {
			return nil
		}
		return v.BitbucketServerConfig
	}).(pulumi.StringPtrOutput)
}

// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
func (o GitFileSourcePtrOutput) GithubEnterpriseConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitFileSource) *string {
		if v == nil {
			return nil
		}
		return v.GithubEnterpriseConfig
	}).(pulumi.StringPtrOutput)
}

// The path of the file, with the repo root as the root of the path.
func (o GitFileSourcePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitFileSource) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// See RepoType above.
func (o GitFileSourcePtrOutput) RepoType() GitFileSourceRepoTypePtrOutput {
	return o.ApplyT(func(v *GitFileSource) *GitFileSourceRepoType {
		if v == nil {
			return nil
		}
		return v.RepoType
	}).(GitFileSourceRepoTypePtrOutput)
}

// The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
func (o GitFileSourcePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitFileSource) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
func (o GitFileSourcePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitFileSource) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
func (o GitFileSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitFileSource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// GitFileSource describes a file within a (possibly remote) code repository.
type GitFileSourceResponse struct {
	// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
	BitbucketServerConfig string `pulumi:"bitbucketServerConfig"`
	// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
	GithubEnterpriseConfig string `pulumi:"githubEnterpriseConfig"`
	// The path of the file, with the repo root as the root of the path.
	Path string `pulumi:"path"`
	// See RepoType above.
	RepoType string `pulumi:"repoType"`
	// The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Repository string `pulumi:"repository"`
	// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
	Revision string `pulumi:"revision"`
	// The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
	Uri string `pulumi:"uri"`
}

// GitFileSource describes a file within a (possibly remote) code repository.
type GitFileSourceResponseOutput struct{ *pulumi.OutputState }

func (GitFileSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitFileSourceResponse)(nil)).Elem()
}

func (o GitFileSourceResponseOutput) ToGitFileSourceResponseOutput() GitFileSourceResponseOutput {
	return o
}

func (o GitFileSourceResponseOutput) ToGitFileSourceResponseOutputWithContext(ctx context.Context) GitFileSourceResponseOutput {
	return o
}

// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
func (o GitFileSourceResponseOutput) BitbucketServerConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GitFileSourceResponse) string { return v.BitbucketServerConfig }).(pulumi.StringOutput)
}

// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
func (o GitFileSourceResponseOutput) GithubEnterpriseConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GitFileSourceResponse) string { return v.GithubEnterpriseConfig }).(pulumi.StringOutput)
}

// The path of the file, with the repo root as the root of the path.
func (o GitFileSourceResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GitFileSourceResponse) string { return v.Path }).(pulumi.StringOutput)
}

// See RepoType above.
func (o GitFileSourceResponseOutput) RepoType() pulumi.StringOutput {
	return o.ApplyT(func(v GitFileSourceResponse) string { return v.RepoType }).(pulumi.StringOutput)
}

// The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
func (o GitFileSourceResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitFileSourceResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
func (o GitFileSourceResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GitFileSourceResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
func (o GitFileSourceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GitFileSourceResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
type GitHubEnterpriseSecrets struct {
	// The resource name for the OAuth client ID secret in Secret Manager.
	OauthClientIdName *string `pulumi:"oauthClientIdName"`
	// The resource name for the OAuth client ID secret version in Secret Manager.
	OauthClientIdVersionName *string `pulumi:"oauthClientIdVersionName"`
	// The resource name for the OAuth secret in Secret Manager.
	OauthSecretName *string `pulumi:"oauthSecretName"`
	// The resource name for the OAuth secret secret version in Secret Manager.
	OauthSecretVersionName *string `pulumi:"oauthSecretVersionName"`
	// The resource name for the private key secret.
	PrivateKeyName *string `pulumi:"privateKeyName"`
	// The resource name for the private key secret version.
	PrivateKeyVersionName *string `pulumi:"privateKeyVersionName"`
	// The resource name for the webhook secret in Secret Manager.
	WebhookSecretName *string `pulumi:"webhookSecretName"`
	// The resource name for the webhook secret secret version in Secret Manager.
	WebhookSecretVersionName *string `pulumi:"webhookSecretVersionName"`
}

// GitHubEnterpriseSecretsInput is an input type that accepts GitHubEnterpriseSecretsArgs and GitHubEnterpriseSecretsOutput values.
// You can construct a concrete instance of `GitHubEnterpriseSecretsInput` via:
//
//	GitHubEnterpriseSecretsArgs{...}
type GitHubEnterpriseSecretsInput interface {
	pulumi.Input

	ToGitHubEnterpriseSecretsOutput() GitHubEnterpriseSecretsOutput
	ToGitHubEnterpriseSecretsOutputWithContext(context.Context) GitHubEnterpriseSecretsOutput
}

// GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
type GitHubEnterpriseSecretsArgs struct {
	// The resource name for the OAuth client ID secret in Secret Manager.
	OauthClientIdName pulumi.StringPtrInput `pulumi:"oauthClientIdName"`
	// The resource name for the OAuth client ID secret version in Secret Manager.
	OauthClientIdVersionName pulumi.StringPtrInput `pulumi:"oauthClientIdVersionName"`
	// The resource name for the OAuth secret in Secret Manager.
	OauthSecretName pulumi.StringPtrInput `pulumi:"oauthSecretName"`
	// The resource name for the OAuth secret secret version in Secret Manager.
	OauthSecretVersionName pulumi.StringPtrInput `pulumi:"oauthSecretVersionName"`
	// The resource name for the private key secret.
	PrivateKeyName pulumi.StringPtrInput `pulumi:"privateKeyName"`
	// The resource name for the private key secret version.
	PrivateKeyVersionName pulumi.StringPtrInput `pulumi:"privateKeyVersionName"`
	// The resource name for the webhook secret in Secret Manager.
	WebhookSecretName pulumi.StringPtrInput `pulumi:"webhookSecretName"`
	// The resource name for the webhook secret secret version in Secret Manager.
	WebhookSecretVersionName pulumi.StringPtrInput `pulumi:"webhookSecretVersionName"`
}

func (GitHubEnterpriseSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEnterpriseSecrets)(nil)).Elem()
}

func (i GitHubEnterpriseSecretsArgs) ToGitHubEnterpriseSecretsOutput() GitHubEnterpriseSecretsOutput {
	return i.ToGitHubEnterpriseSecretsOutputWithContext(context.Background())
}

func (i GitHubEnterpriseSecretsArgs) ToGitHubEnterpriseSecretsOutputWithContext(ctx context.Context) GitHubEnterpriseSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEnterpriseSecretsOutput)
}

func (i GitHubEnterpriseSecretsArgs) ToGitHubEnterpriseSecretsPtrOutput() GitHubEnterpriseSecretsPtrOutput {
	return i.ToGitHubEnterpriseSecretsPtrOutputWithContext(context.Background())
}

func (i GitHubEnterpriseSecretsArgs) ToGitHubEnterpriseSecretsPtrOutputWithContext(ctx context.Context) GitHubEnterpriseSecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEnterpriseSecretsOutput).ToGitHubEnterpriseSecretsPtrOutputWithContext(ctx)
}

// GitHubEnterpriseSecretsPtrInput is an input type that accepts GitHubEnterpriseSecretsArgs, GitHubEnterpriseSecretsPtr and GitHubEnterpriseSecretsPtrOutput values.
// You can construct a concrete instance of `GitHubEnterpriseSecretsPtrInput` via:
//
//	        GitHubEnterpriseSecretsArgs{...}
//
//	or:
//
//	        nil
type GitHubEnterpriseSecretsPtrInput interface {
	pulumi.Input

	ToGitHubEnterpriseSecretsPtrOutput() GitHubEnterpriseSecretsPtrOutput
	ToGitHubEnterpriseSecretsPtrOutputWithContext(context.Context) GitHubEnterpriseSecretsPtrOutput
}

type gitHubEnterpriseSecretsPtrType GitHubEnterpriseSecretsArgs

func GitHubEnterpriseSecretsPtr(v *GitHubEnterpriseSecretsArgs) GitHubEnterpriseSecretsPtrInput {
	return (*gitHubEnterpriseSecretsPtrType)(v)
}

func (*gitHubEnterpriseSecretsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEnterpriseSecrets)(nil)).Elem()
}

func (i *gitHubEnterpriseSecretsPtrType) ToGitHubEnterpriseSecretsPtrOutput() GitHubEnterpriseSecretsPtrOutput {
	return i.ToGitHubEnterpriseSecretsPtrOutputWithContext(context.Background())
}

func (i *gitHubEnterpriseSecretsPtrType) ToGitHubEnterpriseSecretsPtrOutputWithContext(ctx context.Context) GitHubEnterpriseSecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEnterpriseSecretsPtrOutput)
}

// GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
type GitHubEnterpriseSecretsOutput struct{ *pulumi.OutputState }

func (GitHubEnterpriseSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEnterpriseSecrets)(nil)).Elem()
}

func (o GitHubEnterpriseSecretsOutput) ToGitHubEnterpriseSecretsOutput() GitHubEnterpriseSecretsOutput {
	return o
}

func (o GitHubEnterpriseSecretsOutput) ToGitHubEnterpriseSecretsOutputWithContext(ctx context.Context) GitHubEnterpriseSecretsOutput {
	return o
}

func (o GitHubEnterpriseSecretsOutput) ToGitHubEnterpriseSecretsPtrOutput() GitHubEnterpriseSecretsPtrOutput {
	return o.ToGitHubEnterpriseSecretsPtrOutputWithContext(context.Background())
}

func (o GitHubEnterpriseSecretsOutput) ToGitHubEnterpriseSecretsPtrOutputWithContext(ctx context.Context) GitHubEnterpriseSecretsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubEnterpriseSecrets) *GitHubEnterpriseSecrets {
		return &v
	}).(GitHubEnterpriseSecretsPtrOutput)
}

// The resource name for the OAuth client ID secret in Secret Manager.
func (o GitHubEnterpriseSecretsOutput) OauthClientIdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.OauthClientIdName }).(pulumi.StringPtrOutput)
}

// The resource name for the OAuth client ID secret version in Secret Manager.
func (o GitHubEnterpriseSecretsOutput) OauthClientIdVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.OauthClientIdVersionName }).(pulumi.StringPtrOutput)
}

// The resource name for the OAuth secret in Secret Manager.
func (o GitHubEnterpriseSecretsOutput) OauthSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.OauthSecretName }).(pulumi.StringPtrOutput)
}

// The resource name for the OAuth secret secret version in Secret Manager.
func (o GitHubEnterpriseSecretsOutput) OauthSecretVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.OauthSecretVersionName }).(pulumi.StringPtrOutput)
}

// The resource name for the private key secret.
func (o GitHubEnterpriseSecretsOutput) PrivateKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.PrivateKeyName }).(pulumi.StringPtrOutput)
}

// The resource name for the private key secret version.
func (o GitHubEnterpriseSecretsOutput) PrivateKeyVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.PrivateKeyVersionName }).(pulumi.StringPtrOutput)
}

// The resource name for the webhook secret in Secret Manager.
func (o GitHubEnterpriseSecretsOutput) WebhookSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.WebhookSecretName }).(pulumi.StringPtrOutput)
}

// The resource name for the webhook secret secret version in Secret Manager.
func (o GitHubEnterpriseSecretsOutput) WebhookSecretVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecrets) *string { return v.WebhookSecretVersionName }).(pulumi.StringPtrOutput)
}

type GitHubEnterpriseSecretsPtrOutput struct{ *pulumi.OutputState }

func (GitHubEnterpriseSecretsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEnterpriseSecrets)(nil)).Elem()
}

func (o GitHubEnterpriseSecretsPtrOutput) ToGitHubEnterpriseSecretsPtrOutput() GitHubEnterpriseSecretsPtrOutput {
	return o
}

func (o GitHubEnterpriseSecretsPtrOutput) ToGitHubEnterpriseSecretsPtrOutputWithContext(ctx context.Context) GitHubEnterpriseSecretsPtrOutput {
	return o
}

func (o GitHubEnterpriseSecretsPtrOutput) Elem() GitHubEnterpriseSecretsOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) GitHubEnterpriseSecrets {
		if v != nil {
			return *v
		}
		var ret GitHubEnterpriseSecrets
		return ret
	}).(GitHubEnterpriseSecretsOutput)
}

// The resource name for the OAuth client ID secret in Secret Manager.
func (o GitHubEnterpriseSecretsPtrOutput) OauthClientIdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.OauthClientIdName
	}).(pulumi.StringPtrOutput)
}

// The resource name for the OAuth client ID secret version in Secret Manager.
func (o GitHubEnterpriseSecretsPtrOutput) OauthClientIdVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.OauthClientIdVersionName
	}).(pulumi.StringPtrOutput)
}

// The resource name for the OAuth secret in Secret Manager.
func (o GitHubEnterpriseSecretsPtrOutput) OauthSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.OauthSecretName
	}).(pulumi.StringPtrOutput)
}

// The resource name for the OAuth secret secret version in Secret Manager.
func (o GitHubEnterpriseSecretsPtrOutput) OauthSecretVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.OauthSecretVersionName
	}).(pulumi.StringPtrOutput)
}

// The resource name for the private key secret.
func (o GitHubEnterpriseSecretsPtrOutput) PrivateKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyName
	}).(pulumi.StringPtrOutput)
}

// The resource name for the private key secret version.
func (o GitHubEnterpriseSecretsPtrOutput) PrivateKeyVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyVersionName
	}).(pulumi.StringPtrOutput)
}

// The resource name for the webhook secret in Secret Manager.
func (o GitHubEnterpriseSecretsPtrOutput) WebhookSecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.WebhookSecretName
	}).(pulumi.StringPtrOutput)
}

// The resource name for the webhook secret secret version in Secret Manager.
func (o GitHubEnterpriseSecretsPtrOutput) WebhookSecretVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEnterpriseSecrets) *string {
		if v == nil {
			return nil
		}
		return v.WebhookSecretVersionName
	}).(pulumi.StringPtrOutput)
}

// GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
type GitHubEnterpriseSecretsResponse struct {
	// The resource name for the OAuth client ID secret in Secret Manager.
	OauthClientIdName string `pulumi:"oauthClientIdName"`
	// The resource name for the OAuth client ID secret version in Secret Manager.
	OauthClientIdVersionName string `pulumi:"oauthClientIdVersionName"`
	// The resource name for the OAuth secret in Secret Manager.
	OauthSecretName string `pulumi:"oauthSecretName"`
	// The resource name for the OAuth secret secret version in Secret Manager.
	OauthSecretVersionName string `pulumi:"oauthSecretVersionName"`
	// The resource name for the private key secret.
	PrivateKeyName string `pulumi:"privateKeyName"`
	// The resource name for the private key secret version.
	PrivateKeyVersionName string `pulumi:"privateKeyVersionName"`
	// The resource name for the webhook secret in Secret Manager.
	WebhookSecretName string `pulumi:"webhookSecretName"`
	// The resource name for the webhook secret secret version in Secret Manager.
	WebhookSecretVersionName string `pulumi:"webhookSecretVersionName"`
}

// GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
type GitHubEnterpriseSecretsResponseOutput struct{ *pulumi.OutputState }

func (GitHubEnterpriseSecretsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEnterpriseSecretsResponse)(nil)).Elem()
}

func (o GitHubEnterpriseSecretsResponseOutput) ToGitHubEnterpriseSecretsResponseOutput() GitHubEnterpriseSecretsResponseOutput {
	return o
}

func (o GitHubEnterpriseSecretsResponseOutput) ToGitHubEnterpriseSecretsResponseOutputWithContext(ctx context.Context) GitHubEnterpriseSecretsResponseOutput {
	return o
}

// The resource name for the OAuth client ID secret in Secret Manager.
func (o GitHubEnterpriseSecretsResponseOutput) OauthClientIdName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.OauthClientIdName }).(pulumi.StringOutput)
}

// The resource name for the OAuth client ID secret version in Secret Manager.
func (o GitHubEnterpriseSecretsResponseOutput) OauthClientIdVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.OauthClientIdVersionName }).(pulumi.StringOutput)
}

// The resource name for the OAuth secret in Secret Manager.
func (o GitHubEnterpriseSecretsResponseOutput) OauthSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.OauthSecretName }).(pulumi.StringOutput)
}

// The resource name for the OAuth secret secret version in Secret Manager.
func (o GitHubEnterpriseSecretsResponseOutput) OauthSecretVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.OauthSecretVersionName }).(pulumi.StringOutput)
}

// The resource name for the private key secret.
func (o GitHubEnterpriseSecretsResponseOutput) PrivateKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.PrivateKeyName }).(pulumi.StringOutput)
}

// The resource name for the private key secret version.
func (o GitHubEnterpriseSecretsResponseOutput) PrivateKeyVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.PrivateKeyVersionName }).(pulumi.StringOutput)
}

// The resource name for the webhook secret in Secret Manager.
func (o GitHubEnterpriseSecretsResponseOutput) WebhookSecretName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.WebhookSecretName }).(pulumi.StringOutput)
}

// The resource name for the webhook secret secret version in Secret Manager.
func (o GitHubEnterpriseSecretsResponseOutput) WebhookSecretVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEnterpriseSecretsResponse) string { return v.WebhookSecretVersionName }).(pulumi.StringOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
type GitHubEventsConfig struct {
	// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
	EnterpriseConfigResourceName *string `pulumi:"enterpriseConfigResourceName"`
	// The installationID that emits the GitHub event.
	InstallationId *string `pulumi:"installationId"`
	// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name *string `pulumi:"name"`
	// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner *string `pulumi:"owner"`
	// filter to match changes in pull requests.
	PullRequest *PullRequestFilter `pulumi:"pullRequest"`
	// filter to match changes in refs like branches, tags.
	Push *PushFilter `pulumi:"push"`
}

// GitHubEventsConfigInput is an input type that accepts GitHubEventsConfigArgs and GitHubEventsConfigOutput values.
// You can construct a concrete instance of `GitHubEventsConfigInput` via:
//
//	GitHubEventsConfigArgs{...}
type GitHubEventsConfigInput interface {
	pulumi.Input

	ToGitHubEventsConfigOutput() GitHubEventsConfigOutput
	ToGitHubEventsConfigOutputWithContext(context.Context) GitHubEventsConfigOutput
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
type GitHubEventsConfigArgs struct {
	// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
	EnterpriseConfigResourceName pulumi.StringPtrInput `pulumi:"enterpriseConfigResourceName"`
	// The installationID that emits the GitHub event.
	InstallationId pulumi.StringPtrInput `pulumi:"installationId"`
	// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner pulumi.StringPtrInput `pulumi:"owner"`
	// filter to match changes in pull requests.
	PullRequest PullRequestFilterPtrInput `pulumi:"pullRequest"`
	// filter to match changes in refs like branches, tags.
	Push PushFilterPtrInput `pulumi:"push"`
}

func (GitHubEventsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEventsConfig)(nil)).Elem()
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigOutput() GitHubEventsConfigOutput {
	return i.ToGitHubEventsConfigOutputWithContext(context.Background())
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigOutputWithContext(ctx context.Context) GitHubEventsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigOutput)
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return i.ToGitHubEventsConfigPtrOutputWithContext(context.Background())
}

func (i GitHubEventsConfigArgs) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigOutput).ToGitHubEventsConfigPtrOutputWithContext(ctx)
}

// GitHubEventsConfigPtrInput is an input type that accepts GitHubEventsConfigArgs, GitHubEventsConfigPtr and GitHubEventsConfigPtrOutput values.
// You can construct a concrete instance of `GitHubEventsConfigPtrInput` via:
//
//	        GitHubEventsConfigArgs{...}
//
//	or:
//
//	        nil
type GitHubEventsConfigPtrInput interface {
	pulumi.Input

	ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput
	ToGitHubEventsConfigPtrOutputWithContext(context.Context) GitHubEventsConfigPtrOutput
}

type gitHubEventsConfigPtrType GitHubEventsConfigArgs

func GitHubEventsConfigPtr(v *GitHubEventsConfigArgs) GitHubEventsConfigPtrInput {
	return (*gitHubEventsConfigPtrType)(v)
}

func (*gitHubEventsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEventsConfig)(nil)).Elem()
}

func (i *gitHubEventsConfigPtrType) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return i.ToGitHubEventsConfigPtrOutputWithContext(context.Background())
}

func (i *gitHubEventsConfigPtrType) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitHubEventsConfigPtrOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
type GitHubEventsConfigOutput struct{ *pulumi.OutputState }

func (GitHubEventsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEventsConfig)(nil)).Elem()
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigOutput() GitHubEventsConfigOutput {
	return o
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigOutputWithContext(ctx context.Context) GitHubEventsConfigOutput {
	return o
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return o.ToGitHubEventsConfigPtrOutputWithContext(context.Background())
}

func (o GitHubEventsConfigOutput) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitHubEventsConfig) *GitHubEventsConfig {
		return &v
	}).(GitHubEventsConfigPtrOutput)
}

// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
func (o GitHubEventsConfigOutput) EnterpriseConfigResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *string { return v.EnterpriseConfigResourceName }).(pulumi.StringPtrOutput)
}

// The installationID that emits the GitHub event.
func (o GitHubEventsConfigOutput) InstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *string { return v.InstallationId }).(pulumi.StringPtrOutput)
}

// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
func (o GitHubEventsConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o GitHubEventsConfigOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *string { return v.Owner }).(pulumi.StringPtrOutput)
}

// filter to match changes in pull requests.
func (o GitHubEventsConfigOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *PullRequestFilter { return v.PullRequest }).(PullRequestFilterPtrOutput)
}

// filter to match changes in refs like branches, tags.
func (o GitHubEventsConfigOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v GitHubEventsConfig) *PushFilter { return v.Push }).(PushFilterPtrOutput)
}

type GitHubEventsConfigPtrOutput struct{ *pulumi.OutputState }

func (GitHubEventsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitHubEventsConfig)(nil)).Elem()
}

func (o GitHubEventsConfigPtrOutput) ToGitHubEventsConfigPtrOutput() GitHubEventsConfigPtrOutput {
	return o
}

func (o GitHubEventsConfigPtrOutput) ToGitHubEventsConfigPtrOutputWithContext(ctx context.Context) GitHubEventsConfigPtrOutput {
	return o
}

func (o GitHubEventsConfigPtrOutput) Elem() GitHubEventsConfigOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) GitHubEventsConfig {
		if v != nil {
			return *v
		}
		var ret GitHubEventsConfig
		return ret
	}).(GitHubEventsConfigOutput)
}

// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
func (o GitHubEventsConfigPtrOutput) EnterpriseConfigResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnterpriseConfigResourceName
	}).(pulumi.StringPtrOutput)
}

// The installationID that emits the GitHub event.
func (o GitHubEventsConfigPtrOutput) InstallationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.InstallationId
	}).(pulumi.StringPtrOutput)
}

// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
func (o GitHubEventsConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o GitHubEventsConfigPtrOutput) Owner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.Owner
	}).(pulumi.StringPtrOutput)
}

// filter to match changes in pull requests.
func (o GitHubEventsConfigPtrOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *PullRequestFilter {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PullRequestFilterPtrOutput)
}

// filter to match changes in refs like branches, tags.
func (o GitHubEventsConfigPtrOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v *GitHubEventsConfig) *PushFilter {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PushFilterPtrOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
type GitHubEventsConfigResponse struct {
	// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
	EnterpriseConfigResourceName string `pulumi:"enterpriseConfigResourceName"`
	// The installationID that emits the GitHub event.
	InstallationId string `pulumi:"installationId"`
	// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
	Name string `pulumi:"name"`
	// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
	Owner string `pulumi:"owner"`
	// filter to match changes in pull requests.
	PullRequest PullRequestFilterResponse `pulumi:"pullRequest"`
	// filter to match changes in refs like branches, tags.
	Push PushFilterResponse `pulumi:"push"`
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
type GitHubEventsConfigResponseOutput struct{ *pulumi.OutputState }

func (GitHubEventsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitHubEventsConfigResponse)(nil)).Elem()
}

func (o GitHubEventsConfigResponseOutput) ToGitHubEventsConfigResponseOutput() GitHubEventsConfigResponseOutput {
	return o
}

func (o GitHubEventsConfigResponseOutput) ToGitHubEventsConfigResponseOutputWithContext(ctx context.Context) GitHubEventsConfigResponseOutput {
	return o
}

// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
func (o GitHubEventsConfigResponseOutput) EnterpriseConfigResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) string { return v.EnterpriseConfigResourceName }).(pulumi.StringOutput)
}

// The installationID that emits the GitHub event.
func (o GitHubEventsConfigResponseOutput) InstallationId() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) string { return v.InstallationId }).(pulumi.StringOutput)
}

// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
func (o GitHubEventsConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
func (o GitHubEventsConfigResponseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) string { return v.Owner }).(pulumi.StringOutput)
}

// filter to match changes in pull requests.
func (o GitHubEventsConfigResponseOutput) PullRequest() PullRequestFilterResponseOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) PullRequestFilterResponse { return v.PullRequest }).(PullRequestFilterResponseOutput)
}

// filter to match changes in refs like branches, tags.
func (o GitHubEventsConfigResponseOutput) Push() PushFilterResponseOutput {
	return o.ApplyT(func(v GitHubEventsConfigResponse) PushFilterResponse { return v.Push }).(PushFilterResponseOutput)
}

// GitLabConfig represents the configuration for a GitLab integration.
type GitLabConfigResponse struct {
	// Connected GitLab.com or GitLabEnterprise repositories for this config.
	ConnectedRepositories []GitLabRepositoryIdResponse `pulumi:"connectedRepositories"`
	// Time when the config was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. GitLabEnterprise config.
	EnterpriseConfig GitLabEnterpriseConfigResponse `pulumi:"enterpriseConfig"`
	// The resource name for the config.
	Name string `pulumi:"name"`
	// Secret Manager secrets needed by the config.
	Secrets GitLabSecretsResponse `pulumi:"secrets"`
	// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
	Username string `pulumi:"username"`
	// UUID included in webhook requests. The UUID is used to look up the corresponding config.
	WebhookKey string `pulumi:"webhookKey"`
}

// GitLabConfig represents the configuration for a GitLab integration.
type GitLabConfigResponseOutput struct{ *pulumi.OutputState }

func (GitLabConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabConfigResponse)(nil)).Elem()
}

func (o GitLabConfigResponseOutput) ToGitLabConfigResponseOutput() GitLabConfigResponseOutput {
	return o
}

func (o GitLabConfigResponseOutput) ToGitLabConfigResponseOutputWithContext(ctx context.Context) GitLabConfigResponseOutput {
	return o
}

// Connected GitLab.com or GitLabEnterprise repositories for this config.
func (o GitLabConfigResponseOutput) ConnectedRepositories() GitLabRepositoryIdResponseArrayOutput {
	return o.ApplyT(func(v GitLabConfigResponse) []GitLabRepositoryIdResponse { return v.ConnectedRepositories }).(GitLabRepositoryIdResponseArrayOutput)
}

// Time when the config was created.
func (o GitLabConfigResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabConfigResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. GitLabEnterprise config.
func (o GitLabConfigResponseOutput) EnterpriseConfig() GitLabEnterpriseConfigResponseOutput {
	return o.ApplyT(func(v GitLabConfigResponse) GitLabEnterpriseConfigResponse { return v.EnterpriseConfig }).(GitLabEnterpriseConfigResponseOutput)
}

// The resource name for the config.
func (o GitLabConfigResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabConfigResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Secret Manager secrets needed by the config.
func (o GitLabConfigResponseOutput) Secrets() GitLabSecretsResponseOutput {
	return o.ApplyT(func(v GitLabConfigResponse) GitLabSecretsResponse { return v.Secrets }).(GitLabSecretsResponseOutput)
}

// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
func (o GitLabConfigResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabConfigResponse) string { return v.Username }).(pulumi.StringOutput)
}

// UUID included in webhook requests. The UUID is used to look up the corresponding config.
func (o GitLabConfigResponseOutput) WebhookKey() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabConfigResponse) string { return v.WebhookKey }).(pulumi.StringOutput)
}

// GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
type GitLabEnterpriseConfig struct {
	// Immutable. The URI of the GitlabEnterprise host.
	HostUri *string `pulumi:"hostUri"`
	// The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
	ServiceDirectoryConfig *ServiceDirectoryConfig `pulumi:"serviceDirectoryConfig"`
	// The SSL certificate to use in requests to GitLab Enterprise instances.
	SslCa *string `pulumi:"sslCa"`
}

// GitLabEnterpriseConfigInput is an input type that accepts GitLabEnterpriseConfigArgs and GitLabEnterpriseConfigOutput values.
// You can construct a concrete instance of `GitLabEnterpriseConfigInput` via:
//
//	GitLabEnterpriseConfigArgs{...}
type GitLabEnterpriseConfigInput interface {
	pulumi.Input

	ToGitLabEnterpriseConfigOutput() GitLabEnterpriseConfigOutput
	ToGitLabEnterpriseConfigOutputWithContext(context.Context) GitLabEnterpriseConfigOutput
}

// GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
type GitLabEnterpriseConfigArgs struct {
	// Immutable. The URI of the GitlabEnterprise host.
	HostUri pulumi.StringPtrInput `pulumi:"hostUri"`
	// The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
	ServiceDirectoryConfig ServiceDirectoryConfigPtrInput `pulumi:"serviceDirectoryConfig"`
	// The SSL certificate to use in requests to GitLab Enterprise instances.
	SslCa pulumi.StringPtrInput `pulumi:"sslCa"`
}

func (GitLabEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabEnterpriseConfig)(nil)).Elem()
}

func (i GitLabEnterpriseConfigArgs) ToGitLabEnterpriseConfigOutput() GitLabEnterpriseConfigOutput {
	return i.ToGitLabEnterpriseConfigOutputWithContext(context.Background())
}

func (i GitLabEnterpriseConfigArgs) ToGitLabEnterpriseConfigOutputWithContext(ctx context.Context) GitLabEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabEnterpriseConfigOutput)
}

func (i GitLabEnterpriseConfigArgs) ToGitLabEnterpriseConfigPtrOutput() GitLabEnterpriseConfigPtrOutput {
	return i.ToGitLabEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i GitLabEnterpriseConfigArgs) ToGitLabEnterpriseConfigPtrOutputWithContext(ctx context.Context) GitLabEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabEnterpriseConfigOutput).ToGitLabEnterpriseConfigPtrOutputWithContext(ctx)
}

// GitLabEnterpriseConfigPtrInput is an input type that accepts GitLabEnterpriseConfigArgs, GitLabEnterpriseConfigPtr and GitLabEnterpriseConfigPtrOutput values.
// You can construct a concrete instance of `GitLabEnterpriseConfigPtrInput` via:
//
//	        GitLabEnterpriseConfigArgs{...}
//
//	or:
//
//	        nil
type GitLabEnterpriseConfigPtrInput interface {
	pulumi.Input

	ToGitLabEnterpriseConfigPtrOutput() GitLabEnterpriseConfigPtrOutput
	ToGitLabEnterpriseConfigPtrOutputWithContext(context.Context) GitLabEnterpriseConfigPtrOutput
}

type gitLabEnterpriseConfigPtrType GitLabEnterpriseConfigArgs

func GitLabEnterpriseConfigPtr(v *GitLabEnterpriseConfigArgs) GitLabEnterpriseConfigPtrInput {
	return (*gitLabEnterpriseConfigPtrType)(v)
}

func (*gitLabEnterpriseConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitLabEnterpriseConfig)(nil)).Elem()
}

func (i *gitLabEnterpriseConfigPtrType) ToGitLabEnterpriseConfigPtrOutput() GitLabEnterpriseConfigPtrOutput {
	return i.ToGitLabEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (i *gitLabEnterpriseConfigPtrType) ToGitLabEnterpriseConfigPtrOutputWithContext(ctx context.Context) GitLabEnterpriseConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabEnterpriseConfigPtrOutput)
}

// GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
type GitLabEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (GitLabEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabEnterpriseConfig)(nil)).Elem()
}

func (o GitLabEnterpriseConfigOutput) ToGitLabEnterpriseConfigOutput() GitLabEnterpriseConfigOutput {
	return o
}

func (o GitLabEnterpriseConfigOutput) ToGitLabEnterpriseConfigOutputWithContext(ctx context.Context) GitLabEnterpriseConfigOutput {
	return o
}

func (o GitLabEnterpriseConfigOutput) ToGitLabEnterpriseConfigPtrOutput() GitLabEnterpriseConfigPtrOutput {
	return o.ToGitLabEnterpriseConfigPtrOutputWithContext(context.Background())
}

func (o GitLabEnterpriseConfigOutput) ToGitLabEnterpriseConfigPtrOutputWithContext(ctx context.Context) GitLabEnterpriseConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitLabEnterpriseConfig) *GitLabEnterpriseConfig {
		return &v
	}).(GitLabEnterpriseConfigPtrOutput)
}

// Immutable. The URI of the GitlabEnterprise host.
func (o GitLabEnterpriseConfigOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitLabEnterpriseConfig) *string { return v.HostUri }).(pulumi.StringPtrOutput)
}

// The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
func (o GitLabEnterpriseConfigOutput) ServiceDirectoryConfig() ServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v GitLabEnterpriseConfig) *ServiceDirectoryConfig { return v.ServiceDirectoryConfig }).(ServiceDirectoryConfigPtrOutput)
}

// The SSL certificate to use in requests to GitLab Enterprise instances.
func (o GitLabEnterpriseConfigOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitLabEnterpriseConfig) *string { return v.SslCa }).(pulumi.StringPtrOutput)
}

type GitLabEnterpriseConfigPtrOutput struct{ *pulumi.OutputState }

func (GitLabEnterpriseConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitLabEnterpriseConfig)(nil)).Elem()
}

func (o GitLabEnterpriseConfigPtrOutput) ToGitLabEnterpriseConfigPtrOutput() GitLabEnterpriseConfigPtrOutput {
	return o
}

func (o GitLabEnterpriseConfigPtrOutput) ToGitLabEnterpriseConfigPtrOutputWithContext(ctx context.Context) GitLabEnterpriseConfigPtrOutput {
	return o
}

func (o GitLabEnterpriseConfigPtrOutput) Elem() GitLabEnterpriseConfigOutput {
	return o.ApplyT(func(v *GitLabEnterpriseConfig) GitLabEnterpriseConfig {
		if v != nil {
			return *v
		}
		var ret GitLabEnterpriseConfig
		return ret
	}).(GitLabEnterpriseConfigOutput)
}

// Immutable. The URI of the GitlabEnterprise host.
func (o GitLabEnterpriseConfigPtrOutput) HostUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitLabEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.HostUri
	}).(pulumi.StringPtrOutput)
}

// The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
func (o GitLabEnterpriseConfigPtrOutput) ServiceDirectoryConfig() ServiceDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *GitLabEnterpriseConfig) *ServiceDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ServiceDirectoryConfig
	}).(ServiceDirectoryConfigPtrOutput)
}

// The SSL certificate to use in requests to GitLab Enterprise instances.
func (o GitLabEnterpriseConfigPtrOutput) SslCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitLabEnterpriseConfig) *string {
		if v == nil {
			return nil
		}
		return v.SslCa
	}).(pulumi.StringPtrOutput)
}

// GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
type GitLabEnterpriseConfigResponse struct {
	// Immutable. The URI of the GitlabEnterprise host.
	HostUri string `pulumi:"hostUri"`
	// The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
	ServiceDirectoryConfig ServiceDirectoryConfigResponse `pulumi:"serviceDirectoryConfig"`
	// The SSL certificate to use in requests to GitLab Enterprise instances.
	SslCa string `pulumi:"sslCa"`
}

// GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
type GitLabEnterpriseConfigResponseOutput struct{ *pulumi.OutputState }

func (GitLabEnterpriseConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabEnterpriseConfigResponse)(nil)).Elem()
}

func (o GitLabEnterpriseConfigResponseOutput) ToGitLabEnterpriseConfigResponseOutput() GitLabEnterpriseConfigResponseOutput {
	return o
}

func (o GitLabEnterpriseConfigResponseOutput) ToGitLabEnterpriseConfigResponseOutputWithContext(ctx context.Context) GitLabEnterpriseConfigResponseOutput {
	return o
}

// Immutable. The URI of the GitlabEnterprise host.
func (o GitLabEnterpriseConfigResponseOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabEnterpriseConfigResponse) string { return v.HostUri }).(pulumi.StringOutput)
}

// The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
func (o GitLabEnterpriseConfigResponseOutput) ServiceDirectoryConfig() ServiceDirectoryConfigResponseOutput {
	return o.ApplyT(func(v GitLabEnterpriseConfigResponse) ServiceDirectoryConfigResponse { return v.ServiceDirectoryConfig }).(ServiceDirectoryConfigResponseOutput)
}

// The SSL certificate to use in requests to GitLab Enterprise instances.
func (o GitLabEnterpriseConfigResponseOutput) SslCa() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabEnterpriseConfigResponse) string { return v.SslCa }).(pulumi.StringOutput)
}

// GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
type GitLabEventsConfig struct {
	// The GitLab config resource that this trigger config maps to.
	GitlabConfigResource *string `pulumi:"gitlabConfigResource"`
	// Namespace of the GitLab project.
	ProjectNamespace *string `pulumi:"projectNamespace"`
	// Filter to match changes in pull requests.
	PullRequest *PullRequestFilter `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push *PushFilter `pulumi:"push"`
}

// GitLabEventsConfigInput is an input type that accepts GitLabEventsConfigArgs and GitLabEventsConfigOutput values.
// You can construct a concrete instance of `GitLabEventsConfigInput` via:
//
//	GitLabEventsConfigArgs{...}
type GitLabEventsConfigInput interface {
	pulumi.Input

	ToGitLabEventsConfigOutput() GitLabEventsConfigOutput
	ToGitLabEventsConfigOutputWithContext(context.Context) GitLabEventsConfigOutput
}

// GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
type GitLabEventsConfigArgs struct {
	// The GitLab config resource that this trigger config maps to.
	GitlabConfigResource pulumi.StringPtrInput `pulumi:"gitlabConfigResource"`
	// Namespace of the GitLab project.
	ProjectNamespace pulumi.StringPtrInput `pulumi:"projectNamespace"`
	// Filter to match changes in pull requests.
	PullRequest PullRequestFilterPtrInput `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push PushFilterPtrInput `pulumi:"push"`
}

func (GitLabEventsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabEventsConfig)(nil)).Elem()
}

func (i GitLabEventsConfigArgs) ToGitLabEventsConfigOutput() GitLabEventsConfigOutput {
	return i.ToGitLabEventsConfigOutputWithContext(context.Background())
}

func (i GitLabEventsConfigArgs) ToGitLabEventsConfigOutputWithContext(ctx context.Context) GitLabEventsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabEventsConfigOutput)
}

func (i GitLabEventsConfigArgs) ToGitLabEventsConfigPtrOutput() GitLabEventsConfigPtrOutput {
	return i.ToGitLabEventsConfigPtrOutputWithContext(context.Background())
}

func (i GitLabEventsConfigArgs) ToGitLabEventsConfigPtrOutputWithContext(ctx context.Context) GitLabEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabEventsConfigOutput).ToGitLabEventsConfigPtrOutputWithContext(ctx)
}

// GitLabEventsConfigPtrInput is an input type that accepts GitLabEventsConfigArgs, GitLabEventsConfigPtr and GitLabEventsConfigPtrOutput values.
// You can construct a concrete instance of `GitLabEventsConfigPtrInput` via:
//
//	        GitLabEventsConfigArgs{...}
//
//	or:
//
//	        nil
type GitLabEventsConfigPtrInput interface {
	pulumi.Input

	ToGitLabEventsConfigPtrOutput() GitLabEventsConfigPtrOutput
	ToGitLabEventsConfigPtrOutputWithContext(context.Context) GitLabEventsConfigPtrOutput
}

type gitLabEventsConfigPtrType GitLabEventsConfigArgs

func GitLabEventsConfigPtr(v *GitLabEventsConfigArgs) GitLabEventsConfigPtrInput {
	return (*gitLabEventsConfigPtrType)(v)
}

func (*gitLabEventsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitLabEventsConfig)(nil)).Elem()
}

func (i *gitLabEventsConfigPtrType) ToGitLabEventsConfigPtrOutput() GitLabEventsConfigPtrOutput {
	return i.ToGitLabEventsConfigPtrOutputWithContext(context.Background())
}

func (i *gitLabEventsConfigPtrType) ToGitLabEventsConfigPtrOutputWithContext(ctx context.Context) GitLabEventsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabEventsConfigPtrOutput)
}

// GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
type GitLabEventsConfigOutput struct{ *pulumi.OutputState }

func (GitLabEventsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabEventsConfig)(nil)).Elem()
}

func (o GitLabEventsConfigOutput) ToGitLabEventsConfigOutput() GitLabEventsConfigOutput {
	return o
}

func (o GitLabEventsConfigOutput) ToGitLabEventsConfigOutputWithContext(ctx context.Context) GitLabEventsConfigOutput {
	return o
}

func (o GitLabEventsConfigOutput) ToGitLabEventsConfigPtrOutput() GitLabEventsConfigPtrOutput {
	return o.ToGitLabEventsConfigPtrOutputWithContext(context.Background())
}

func (o GitLabEventsConfigOutput) ToGitLabEventsConfigPtrOutputWithContext(ctx context.Context) GitLabEventsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitLabEventsConfig) *GitLabEventsConfig {
		return &v
	}).(GitLabEventsConfigPtrOutput)
}

// The GitLab config resource that this trigger config maps to.
func (o GitLabEventsConfigOutput) GitlabConfigResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitLabEventsConfig) *string { return v.GitlabConfigResource }).(pulumi.StringPtrOutput)
}

// Namespace of the GitLab project.
func (o GitLabEventsConfigOutput) ProjectNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitLabEventsConfig) *string { return v.ProjectNamespace }).(pulumi.StringPtrOutput)
}

// Filter to match changes in pull requests.
func (o GitLabEventsConfigOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v GitLabEventsConfig) *PullRequestFilter { return v.PullRequest }).(PullRequestFilterPtrOutput)
}

// Filter to match changes in refs like branches, tags.
func (o GitLabEventsConfigOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v GitLabEventsConfig) *PushFilter { return v.Push }).(PushFilterPtrOutput)
}

type GitLabEventsConfigPtrOutput struct{ *pulumi.OutputState }

func (GitLabEventsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitLabEventsConfig)(nil)).Elem()
}

func (o GitLabEventsConfigPtrOutput) ToGitLabEventsConfigPtrOutput() GitLabEventsConfigPtrOutput {
	return o
}

func (o GitLabEventsConfigPtrOutput) ToGitLabEventsConfigPtrOutputWithContext(ctx context.Context) GitLabEventsConfigPtrOutput {
	return o
}

func (o GitLabEventsConfigPtrOutput) Elem() GitLabEventsConfigOutput {
	return o.ApplyT(func(v *GitLabEventsConfig) GitLabEventsConfig {
		if v != nil {
			return *v
		}
		var ret GitLabEventsConfig
		return ret
	}).(GitLabEventsConfigOutput)
}

// The GitLab config resource that this trigger config maps to.
func (o GitLabEventsConfigPtrOutput) GitlabConfigResource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitLabEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.GitlabConfigResource
	}).(pulumi.StringPtrOutput)
}

// Namespace of the GitLab project.
func (o GitLabEventsConfigPtrOutput) ProjectNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitLabEventsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ProjectNamespace
	}).(pulumi.StringPtrOutput)
}

// Filter to match changes in pull requests.
func (o GitLabEventsConfigPtrOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v *GitLabEventsConfig) *PullRequestFilter {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PullRequestFilterPtrOutput)
}

// Filter to match changes in refs like branches, tags.
func (o GitLabEventsConfigPtrOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v *GitLabEventsConfig) *PushFilter {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PushFilterPtrOutput)
}

// GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
type GitLabEventsConfigResponse struct {
	// The GitLabConfig specified in the gitlab_config_resource field.
	GitlabConfig GitLabConfigResponse `pulumi:"gitlabConfig"`
	// The GitLab config resource that this trigger config maps to.
	GitlabConfigResource string `pulumi:"gitlabConfigResource"`
	// Namespace of the GitLab project.
	ProjectNamespace string `pulumi:"projectNamespace"`
	// Filter to match changes in pull requests.
	PullRequest PullRequestFilterResponse `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push PushFilterResponse `pulumi:"push"`
}

// GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
type GitLabEventsConfigResponseOutput struct{ *pulumi.OutputState }

func (GitLabEventsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabEventsConfigResponse)(nil)).Elem()
}

func (o GitLabEventsConfigResponseOutput) ToGitLabEventsConfigResponseOutput() GitLabEventsConfigResponseOutput {
	return o
}

func (o GitLabEventsConfigResponseOutput) ToGitLabEventsConfigResponseOutputWithContext(ctx context.Context) GitLabEventsConfigResponseOutput {
	return o
}

// The GitLabConfig specified in the gitlab_config_resource field.
func (o GitLabEventsConfigResponseOutput) GitlabConfig() GitLabConfigResponseOutput {
	return o.ApplyT(func(v GitLabEventsConfigResponse) GitLabConfigResponse { return v.GitlabConfig }).(GitLabConfigResponseOutput)
}

// The GitLab config resource that this trigger config maps to.
func (o GitLabEventsConfigResponseOutput) GitlabConfigResource() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabEventsConfigResponse) string { return v.GitlabConfigResource }).(pulumi.StringOutput)
}

// Namespace of the GitLab project.
func (o GitLabEventsConfigResponseOutput) ProjectNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabEventsConfigResponse) string { return v.ProjectNamespace }).(pulumi.StringOutput)
}

// Filter to match changes in pull requests.
func (o GitLabEventsConfigResponseOutput) PullRequest() PullRequestFilterResponseOutput {
	return o.ApplyT(func(v GitLabEventsConfigResponse) PullRequestFilterResponse { return v.PullRequest }).(PullRequestFilterResponseOutput)
}

// Filter to match changes in refs like branches, tags.
func (o GitLabEventsConfigResponseOutput) Push() PushFilterResponseOutput {
	return o.ApplyT(func(v GitLabEventsConfigResponse) PushFilterResponse { return v.Push }).(PushFilterResponseOutput)
}

// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
type GitLabRepositoryId struct {
	// Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID
	Id string `pulumi:"id"`
}

// GitLabRepositoryIdInput is an input type that accepts GitLabRepositoryIdArgs and GitLabRepositoryIdOutput values.
// You can construct a concrete instance of `GitLabRepositoryIdInput` via:
//
//	GitLabRepositoryIdArgs{...}
type GitLabRepositoryIdInput interface {
	pulumi.Input

	ToGitLabRepositoryIdOutput() GitLabRepositoryIdOutput
	ToGitLabRepositoryIdOutputWithContext(context.Context) GitLabRepositoryIdOutput
}

// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
type GitLabRepositoryIdArgs struct {
	// Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID
	Id pulumi.StringInput `pulumi:"id"`
}

func (GitLabRepositoryIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabRepositoryId)(nil)).Elem()
}

func (i GitLabRepositoryIdArgs) ToGitLabRepositoryIdOutput() GitLabRepositoryIdOutput {
	return i.ToGitLabRepositoryIdOutputWithContext(context.Background())
}

func (i GitLabRepositoryIdArgs) ToGitLabRepositoryIdOutputWithContext(ctx context.Context) GitLabRepositoryIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabRepositoryIdOutput)
}

// GitLabRepositoryIdArrayInput is an input type that accepts GitLabRepositoryIdArray and GitLabRepositoryIdArrayOutput values.
// You can construct a concrete instance of `GitLabRepositoryIdArrayInput` via:
//
//	GitLabRepositoryIdArray{ GitLabRepositoryIdArgs{...} }
type GitLabRepositoryIdArrayInput interface {
	pulumi.Input

	ToGitLabRepositoryIdArrayOutput() GitLabRepositoryIdArrayOutput
	ToGitLabRepositoryIdArrayOutputWithContext(context.Context) GitLabRepositoryIdArrayOutput
}

type GitLabRepositoryIdArray []GitLabRepositoryIdInput

func (GitLabRepositoryIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitLabRepositoryId)(nil)).Elem()
}

func (i GitLabRepositoryIdArray) ToGitLabRepositoryIdArrayOutput() GitLabRepositoryIdArrayOutput {
	return i.ToGitLabRepositoryIdArrayOutputWithContext(context.Background())
}

func (i GitLabRepositoryIdArray) ToGitLabRepositoryIdArrayOutputWithContext(ctx context.Context) GitLabRepositoryIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabRepositoryIdArrayOutput)
}

// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
type GitLabRepositoryIdOutput struct{ *pulumi.OutputState }

func (GitLabRepositoryIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabRepositoryId)(nil)).Elem()
}

func (o GitLabRepositoryIdOutput) ToGitLabRepositoryIdOutput() GitLabRepositoryIdOutput {
	return o
}

func (o GitLabRepositoryIdOutput) ToGitLabRepositoryIdOutputWithContext(ctx context.Context) GitLabRepositoryIdOutput {
	return o
}

// Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID
func (o GitLabRepositoryIdOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabRepositoryId) string { return v.Id }).(pulumi.StringOutput)
}

type GitLabRepositoryIdArrayOutput struct{ *pulumi.OutputState }

func (GitLabRepositoryIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitLabRepositoryId)(nil)).Elem()
}

func (o GitLabRepositoryIdArrayOutput) ToGitLabRepositoryIdArrayOutput() GitLabRepositoryIdArrayOutput {
	return o
}

func (o GitLabRepositoryIdArrayOutput) ToGitLabRepositoryIdArrayOutputWithContext(ctx context.Context) GitLabRepositoryIdArrayOutput {
	return o
}

func (o GitLabRepositoryIdArrayOutput) Index(i pulumi.IntInput) GitLabRepositoryIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitLabRepositoryId {
		return vs[0].([]GitLabRepositoryId)[vs[1].(int)]
	}).(GitLabRepositoryIdOutput)
}

// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
type GitLabRepositoryIdResponse struct {
	// The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
	WebhookId int `pulumi:"webhookId"`
}

// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
type GitLabRepositoryIdResponseOutput struct{ *pulumi.OutputState }

func (GitLabRepositoryIdResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabRepositoryIdResponse)(nil)).Elem()
}

func (o GitLabRepositoryIdResponseOutput) ToGitLabRepositoryIdResponseOutput() GitLabRepositoryIdResponseOutput {
	return o
}

func (o GitLabRepositoryIdResponseOutput) ToGitLabRepositoryIdResponseOutputWithContext(ctx context.Context) GitLabRepositoryIdResponseOutput {
	return o
}

// The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
func (o GitLabRepositoryIdResponseOutput) WebhookId() pulumi.IntOutput {
	return o.ApplyT(func(v GitLabRepositoryIdResponse) int { return v.WebhookId }).(pulumi.IntOutput)
}

type GitLabRepositoryIdResponseArrayOutput struct{ *pulumi.OutputState }

func (GitLabRepositoryIdResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GitLabRepositoryIdResponse)(nil)).Elem()
}

func (o GitLabRepositoryIdResponseArrayOutput) ToGitLabRepositoryIdResponseArrayOutput() GitLabRepositoryIdResponseArrayOutput {
	return o
}

func (o GitLabRepositoryIdResponseArrayOutput) ToGitLabRepositoryIdResponseArrayOutputWithContext(ctx context.Context) GitLabRepositoryIdResponseArrayOutput {
	return o
}

func (o GitLabRepositoryIdResponseArrayOutput) Index(i pulumi.IntInput) GitLabRepositoryIdResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GitLabRepositoryIdResponse {
		return vs[0].([]GitLabRepositoryIdResponse)[vs[1].(int)]
	}).(GitLabRepositoryIdResponseOutput)
}

// GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
type GitLabSecrets struct {
	// The resource name for the api access token’s secret version
	ApiAccessTokenVersion string `pulumi:"apiAccessTokenVersion"`
	// Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
	ApiKeyVersion string `pulumi:"apiKeyVersion"`
	// The resource name for the read access token’s secret version
	ReadAccessTokenVersion string `pulumi:"readAccessTokenVersion"`
	// Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.
	WebhookSecretVersion string `pulumi:"webhookSecretVersion"`
}

// GitLabSecretsInput is an input type that accepts GitLabSecretsArgs and GitLabSecretsOutput values.
// You can construct a concrete instance of `GitLabSecretsInput` via:
//
//	GitLabSecretsArgs{...}
type GitLabSecretsInput interface {
	pulumi.Input

	ToGitLabSecretsOutput() GitLabSecretsOutput
	ToGitLabSecretsOutputWithContext(context.Context) GitLabSecretsOutput
}

// GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
type GitLabSecretsArgs struct {
	// The resource name for the api access token’s secret version
	ApiAccessTokenVersion pulumi.StringInput `pulumi:"apiAccessTokenVersion"`
	// Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
	ApiKeyVersion pulumi.StringInput `pulumi:"apiKeyVersion"`
	// The resource name for the read access token’s secret version
	ReadAccessTokenVersion pulumi.StringInput `pulumi:"readAccessTokenVersion"`
	// Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.
	WebhookSecretVersion pulumi.StringInput `pulumi:"webhookSecretVersion"`
}

func (GitLabSecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabSecrets)(nil)).Elem()
}

func (i GitLabSecretsArgs) ToGitLabSecretsOutput() GitLabSecretsOutput {
	return i.ToGitLabSecretsOutputWithContext(context.Background())
}

func (i GitLabSecretsArgs) ToGitLabSecretsOutputWithContext(ctx context.Context) GitLabSecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabSecretsOutput)
}

// GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
type GitLabSecretsOutput struct{ *pulumi.OutputState }

func (GitLabSecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabSecrets)(nil)).Elem()
}

func (o GitLabSecretsOutput) ToGitLabSecretsOutput() GitLabSecretsOutput {
	return o
}

func (o GitLabSecretsOutput) ToGitLabSecretsOutputWithContext(ctx context.Context) GitLabSecretsOutput {
	return o
}

// The resource name for the api access token’s secret version
func (o GitLabSecretsOutput) ApiAccessTokenVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecrets) string { return v.ApiAccessTokenVersion }).(pulumi.StringOutput)
}

// Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
func (o GitLabSecretsOutput) ApiKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecrets) string { return v.ApiKeyVersion }).(pulumi.StringOutput)
}

// The resource name for the read access token’s secret version
func (o GitLabSecretsOutput) ReadAccessTokenVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecrets) string { return v.ReadAccessTokenVersion }).(pulumi.StringOutput)
}

// Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.
func (o GitLabSecretsOutput) WebhookSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecrets) string { return v.WebhookSecretVersion }).(pulumi.StringOutput)
}

// GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
type GitLabSecretsResponse struct {
	// The resource name for the api access token’s secret version
	ApiAccessTokenVersion string `pulumi:"apiAccessTokenVersion"`
	// Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
	ApiKeyVersion string `pulumi:"apiKeyVersion"`
	// The resource name for the read access token’s secret version
	ReadAccessTokenVersion string `pulumi:"readAccessTokenVersion"`
	// Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.
	WebhookSecretVersion string `pulumi:"webhookSecretVersion"`
}

// GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
type GitLabSecretsResponseOutput struct{ *pulumi.OutputState }

func (GitLabSecretsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitLabSecretsResponse)(nil)).Elem()
}

func (o GitLabSecretsResponseOutput) ToGitLabSecretsResponseOutput() GitLabSecretsResponseOutput {
	return o
}

func (o GitLabSecretsResponseOutput) ToGitLabSecretsResponseOutputWithContext(ctx context.Context) GitLabSecretsResponseOutput {
	return o
}

// The resource name for the api access token’s secret version
func (o GitLabSecretsResponseOutput) ApiAccessTokenVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecretsResponse) string { return v.ApiAccessTokenVersion }).(pulumi.StringOutput)
}

// Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
func (o GitLabSecretsResponseOutput) ApiKeyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecretsResponse) string { return v.ApiKeyVersion }).(pulumi.StringOutput)
}

// The resource name for the read access token’s secret version
func (o GitLabSecretsResponseOutput) ReadAccessTokenVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecretsResponse) string { return v.ReadAccessTokenVersion }).(pulumi.StringOutput)
}

// Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.
func (o GitLabSecretsResponseOutput) WebhookSecretVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GitLabSecretsResponse) string { return v.WebhookSecretVersion }).(pulumi.StringOutput)
}

// GitRepoSource describes a repo and ref of a code repository.
type GitRepoSource struct {
	// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
	BitbucketServerConfig *string `pulumi:"bitbucketServerConfig"`
	// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
	GithubEnterpriseConfig *string `pulumi:"githubEnterpriseConfig"`
	// The branch or tag to use. Must start with "refs/" (required).
	Ref *string `pulumi:"ref"`
	// See RepoType below.
	RepoType *GitRepoSourceRepoType `pulumi:"repoType"`
	// The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.
	Repository *string `pulumi:"repository"`
	// The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.
	Uri *string `pulumi:"uri"`
}

// GitRepoSourceInput is an input type that accepts GitRepoSourceArgs and GitRepoSourceOutput values.
// You can construct a concrete instance of `GitRepoSourceInput` via:
//
//	GitRepoSourceArgs{...}
type GitRepoSourceInput interface {
	pulumi.Input

	ToGitRepoSourceOutput() GitRepoSourceOutput
	ToGitRepoSourceOutputWithContext(context.Context) GitRepoSourceOutput
}

// GitRepoSource describes a repo and ref of a code repository.
type GitRepoSourceArgs struct {
	// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
	BitbucketServerConfig pulumi.StringPtrInput `pulumi:"bitbucketServerConfig"`
	// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
	GithubEnterpriseConfig pulumi.StringPtrInput `pulumi:"githubEnterpriseConfig"`
	// The branch or tag to use. Must start with "refs/" (required).
	Ref pulumi.StringPtrInput `pulumi:"ref"`
	// See RepoType below.
	RepoType GitRepoSourceRepoTypePtrInput `pulumi:"repoType"`
	// The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (GitRepoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoSource)(nil)).Elem()
}

func (i GitRepoSourceArgs) ToGitRepoSourceOutput() GitRepoSourceOutput {
	return i.ToGitRepoSourceOutputWithContext(context.Background())
}

func (i GitRepoSourceArgs) ToGitRepoSourceOutputWithContext(ctx context.Context) GitRepoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoSourceOutput)
}

func (i GitRepoSourceArgs) ToGitRepoSourcePtrOutput() GitRepoSourcePtrOutput {
	return i.ToGitRepoSourcePtrOutputWithContext(context.Background())
}

func (i GitRepoSourceArgs) ToGitRepoSourcePtrOutputWithContext(ctx context.Context) GitRepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoSourceOutput).ToGitRepoSourcePtrOutputWithContext(ctx)
}

// GitRepoSourcePtrInput is an input type that accepts GitRepoSourceArgs, GitRepoSourcePtr and GitRepoSourcePtrOutput values.
// You can construct a concrete instance of `GitRepoSourcePtrInput` via:
//
//	        GitRepoSourceArgs{...}
//
//	or:
//
//	        nil
type GitRepoSourcePtrInput interface {
	pulumi.Input

	ToGitRepoSourcePtrOutput() GitRepoSourcePtrOutput
	ToGitRepoSourcePtrOutputWithContext(context.Context) GitRepoSourcePtrOutput
}

type gitRepoSourcePtrType GitRepoSourceArgs

func GitRepoSourcePtr(v *GitRepoSourceArgs) GitRepoSourcePtrInput {
	return (*gitRepoSourcePtrType)(v)
}

func (*gitRepoSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoSource)(nil)).Elem()
}

func (i *gitRepoSourcePtrType) ToGitRepoSourcePtrOutput() GitRepoSourcePtrOutput {
	return i.ToGitRepoSourcePtrOutputWithContext(context.Background())
}

func (i *gitRepoSourcePtrType) ToGitRepoSourcePtrOutputWithContext(ctx context.Context) GitRepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitRepoSourcePtrOutput)
}

// GitRepoSource describes a repo and ref of a code repository.
type GitRepoSourceOutput struct{ *pulumi.OutputState }

func (GitRepoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoSource)(nil)).Elem()
}

func (o GitRepoSourceOutput) ToGitRepoSourceOutput() GitRepoSourceOutput {
	return o
}

func (o GitRepoSourceOutput) ToGitRepoSourceOutputWithContext(ctx context.Context) GitRepoSourceOutput {
	return o
}

func (o GitRepoSourceOutput) ToGitRepoSourcePtrOutput() GitRepoSourcePtrOutput {
	return o.ToGitRepoSourcePtrOutputWithContext(context.Background())
}

func (o GitRepoSourceOutput) ToGitRepoSourcePtrOutputWithContext(ctx context.Context) GitRepoSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitRepoSource) *GitRepoSource {
		return &v
	}).(GitRepoSourcePtrOutput)
}

// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
func (o GitRepoSourceOutput) BitbucketServerConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoSource) *string { return v.BitbucketServerConfig }).(pulumi.StringPtrOutput)
}

// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
func (o GitRepoSourceOutput) GithubEnterpriseConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoSource) *string { return v.GithubEnterpriseConfig }).(pulumi.StringPtrOutput)
}

// The branch or tag to use. Must start with "refs/" (required).
func (o GitRepoSourceOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoSource) *string { return v.Ref }).(pulumi.StringPtrOutput)
}

// See RepoType below.
func (o GitRepoSourceOutput) RepoType() GitRepoSourceRepoTypePtrOutput {
	return o.ApplyT(func(v GitRepoSource) *GitRepoSourceRepoType { return v.RepoType }).(GitRepoSourceRepoTypePtrOutput)
}

// The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.
func (o GitRepoSourceOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoSource) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.
func (o GitRepoSourceOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitRepoSource) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type GitRepoSourcePtrOutput struct{ *pulumi.OutputState }

func (GitRepoSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitRepoSource)(nil)).Elem()
}

func (o GitRepoSourcePtrOutput) ToGitRepoSourcePtrOutput() GitRepoSourcePtrOutput {
	return o
}

func (o GitRepoSourcePtrOutput) ToGitRepoSourcePtrOutputWithContext(ctx context.Context) GitRepoSourcePtrOutput {
	return o
}

func (o GitRepoSourcePtrOutput) Elem() GitRepoSourceOutput {
	return o.ApplyT(func(v *GitRepoSource) GitRepoSource {
		if v != nil {
			return *v
		}
		var ret GitRepoSource
		return ret
	}).(GitRepoSourceOutput)
}

// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
func (o GitRepoSourcePtrOutput) BitbucketServerConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.BitbucketServerConfig
	}).(pulumi.StringPtrOutput)
}

// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
func (o GitRepoSourcePtrOutput) GithubEnterpriseConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.GithubEnterpriseConfig
	}).(pulumi.StringPtrOutput)
}

// The branch or tag to use. Must start with "refs/" (required).
func (o GitRepoSourcePtrOutput) Ref() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Ref
	}).(pulumi.StringPtrOutput)
}

// See RepoType below.
func (o GitRepoSourcePtrOutput) RepoType() GitRepoSourceRepoTypePtrOutput {
	return o.ApplyT(func(v *GitRepoSource) *GitRepoSourceRepoType {
		if v == nil {
			return nil
		}
		return v.RepoType
	}).(GitRepoSourceRepoTypePtrOutput)
}

// The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.
func (o GitRepoSourcePtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.
func (o GitRepoSourcePtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitRepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

// GitRepoSource describes a repo and ref of a code repository.
type GitRepoSourceResponse struct {
	// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
	BitbucketServerConfig string `pulumi:"bitbucketServerConfig"`
	// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
	GithubEnterpriseConfig string `pulumi:"githubEnterpriseConfig"`
	// The branch or tag to use. Must start with "refs/" (required).
	Ref string `pulumi:"ref"`
	// See RepoType below.
	RepoType string `pulumi:"repoType"`
	// The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.
	Repository string `pulumi:"repository"`
	// The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.
	Uri string `pulumi:"uri"`
}

// GitRepoSource describes a repo and ref of a code repository.
type GitRepoSourceResponseOutput struct{ *pulumi.OutputState }

func (GitRepoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitRepoSourceResponse)(nil)).Elem()
}

func (o GitRepoSourceResponseOutput) ToGitRepoSourceResponseOutput() GitRepoSourceResponseOutput {
	return o
}

func (o GitRepoSourceResponseOutput) ToGitRepoSourceResponseOutputWithContext(ctx context.Context) GitRepoSourceResponseOutput {
	return o
}

// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
func (o GitRepoSourceResponseOutput) BitbucketServerConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoSourceResponse) string { return v.BitbucketServerConfig }).(pulumi.StringOutput)
}

// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
func (o GitRepoSourceResponseOutput) GithubEnterpriseConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoSourceResponse) string { return v.GithubEnterpriseConfig }).(pulumi.StringOutput)
}

// The branch or tag to use. Must start with "refs/" (required).
func (o GitRepoSourceResponseOutput) Ref() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoSourceResponse) string { return v.Ref }).(pulumi.StringOutput)
}

// See RepoType below.
func (o GitRepoSourceResponseOutput) RepoType() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoSourceResponse) string { return v.RepoType }).(pulumi.StringOutput)
}

// The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.
func (o GitRepoSourceResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoSourceResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.
func (o GitRepoSourceResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GitRepoSourceResponse) string { return v.Uri }).(pulumi.StringOutput)
}

// Location of the source in any accessible Git repository.
type GitSource struct {
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir *string `pulumi:"dir"`
	// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
	Revision *string `pulumi:"revision"`
	// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
	Url *string `pulumi:"url"`
}

// GitSourceInput is an input type that accepts GitSourceArgs and GitSourceOutput values.
// You can construct a concrete instance of `GitSourceInput` via:
//
//	GitSourceArgs{...}
type GitSourceInput interface {
	pulumi.Input

	ToGitSourceOutput() GitSourceOutput
	ToGitSourceOutputWithContext(context.Context) GitSourceOutput
}

// Location of the source in any accessible Git repository.
type GitSourceArgs struct {
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
	// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (GitSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSource)(nil)).Elem()
}

func (i GitSourceArgs) ToGitSourceOutput() GitSourceOutput {
	return i.ToGitSourceOutputWithContext(context.Background())
}

func (i GitSourceArgs) ToGitSourceOutputWithContext(ctx context.Context) GitSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceOutput)
}

func (i GitSourceArgs) ToGitSourcePtrOutput() GitSourcePtrOutput {
	return i.ToGitSourcePtrOutputWithContext(context.Background())
}

func (i GitSourceArgs) ToGitSourcePtrOutputWithContext(ctx context.Context) GitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourceOutput).ToGitSourcePtrOutputWithContext(ctx)
}

// GitSourcePtrInput is an input type that accepts GitSourceArgs, GitSourcePtr and GitSourcePtrOutput values.
// You can construct a concrete instance of `GitSourcePtrInput` via:
//
//	        GitSourceArgs{...}
//
//	or:
//
//	        nil
type GitSourcePtrInput interface {
	pulumi.Input

	ToGitSourcePtrOutput() GitSourcePtrOutput
	ToGitSourcePtrOutputWithContext(context.Context) GitSourcePtrOutput
}

type gitSourcePtrType GitSourceArgs

func GitSourcePtr(v *GitSourceArgs) GitSourcePtrInput {
	return (*gitSourcePtrType)(v)
}

func (*gitSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSource)(nil)).Elem()
}

func (i *gitSourcePtrType) ToGitSourcePtrOutput() GitSourcePtrOutput {
	return i.ToGitSourcePtrOutputWithContext(context.Background())
}

func (i *gitSourcePtrType) ToGitSourcePtrOutputWithContext(ctx context.Context) GitSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitSourcePtrOutput)
}

// Location of the source in any accessible Git repository.
type GitSourceOutput struct{ *pulumi.OutputState }

func (GitSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSource)(nil)).Elem()
}

func (o GitSourceOutput) ToGitSourceOutput() GitSourceOutput {
	return o
}

func (o GitSourceOutput) ToGitSourceOutputWithContext(ctx context.Context) GitSourceOutput {
	return o
}

func (o GitSourceOutput) ToGitSourcePtrOutput() GitSourcePtrOutput {
	return o.ToGitSourcePtrOutputWithContext(context.Background())
}

func (o GitSourceOutput) ToGitSourcePtrOutputWithContext(ctx context.Context) GitSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GitSource) *GitSource {
		return &v
	}).(GitSourcePtrOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o GitSourceOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSource) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
func (o GitSourceOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSource) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
func (o GitSourceOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GitSource) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type GitSourcePtrOutput struct{ *pulumi.OutputState }

func (GitSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitSource)(nil)).Elem()
}

func (o GitSourcePtrOutput) ToGitSourcePtrOutput() GitSourcePtrOutput {
	return o
}

func (o GitSourcePtrOutput) ToGitSourcePtrOutputWithContext(ctx context.Context) GitSourcePtrOutput {
	return o
}

func (o GitSourcePtrOutput) Elem() GitSourceOutput {
	return o.ApplyT(func(v *GitSource) GitSource {
		if v != nil {
			return *v
		}
		var ret GitSource
		return ret
	}).(GitSourceOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o GitSourcePtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSource) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
func (o GitSourcePtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSource) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
func (o GitSourcePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitSource) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// Location of the source in any accessible Git repository.
type GitSourceResponse struct {
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir string `pulumi:"dir"`
	// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
	Revision string `pulumi:"revision"`
	// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
	Url string `pulumi:"url"`
}

// Location of the source in any accessible Git repository.
type GitSourceResponseOutput struct{ *pulumi.OutputState }

func (GitSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GitSourceResponse)(nil)).Elem()
}

func (o GitSourceResponseOutput) ToGitSourceResponseOutput() GitSourceResponseOutput {
	return o
}

func (o GitSourceResponseOutput) ToGitSourceResponseOutputWithContext(ctx context.Context) GitSourceResponseOutput {
	return o
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o GitSourceResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v GitSourceResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
func (o GitSourceResponseOutput) Revision() pulumi.StringOutput {
	return o.ApplyT(func(v GitSourceResponse) string { return v.Revision }).(pulumi.StringOutput)
}

// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
func (o GitSourceResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GitSourceResponse) string { return v.Url }).(pulumi.StringOutput)
}

// Container message for hash values.
type HashResponse struct {
	// The type of hash that was performed.
	Type string `pulumi:"type"`
	// The hash value.
	Value string `pulumi:"value"`
}

// Container message for hash values.
type HashResponseOutput struct{ *pulumi.OutputState }

func (HashResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HashResponse)(nil)).Elem()
}

func (o HashResponseOutput) ToHashResponseOutput() HashResponseOutput {
	return o
}

func (o HashResponseOutput) ToHashResponseOutputWithContext(ctx context.Context) HashResponseOutput {
	return o
}

// The type of hash that was performed.
func (o HashResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Type }).(pulumi.StringOutput)
}

// The hash value.
func (o HashResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v HashResponse) string { return v.Value }).(pulumi.StringOutput)
}

type HashResponseArrayOutput struct{ *pulumi.OutputState }

func (HashResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HashResponse)(nil)).Elem()
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutput() HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) ToHashResponseArrayOutputWithContext(ctx context.Context) HashResponseArrayOutput {
	return o
}

func (o HashResponseArrayOutput) Index(i pulumi.IntInput) HashResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HashResponse {
		return vs[0].([]HashResponse)[vs[1].(int)]
	}).(HashResponseOutput)
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecret struct {
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	EnvMap map[string]string `pulumi:"envMap"`
	// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// InlineSecretInput is an input type that accepts InlineSecretArgs and InlineSecretOutput values.
// You can construct a concrete instance of `InlineSecretInput` via:
//
//	InlineSecretArgs{...}
type InlineSecretInput interface {
	pulumi.Input

	ToInlineSecretOutput() InlineSecretOutput
	ToInlineSecretOutputWithContext(context.Context) InlineSecretOutput
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretArgs struct {
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	EnvMap pulumi.StringMapInput `pulumi:"envMap"`
	// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (InlineSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineSecret)(nil)).Elem()
}

func (i InlineSecretArgs) ToInlineSecretOutput() InlineSecretOutput {
	return i.ToInlineSecretOutputWithContext(context.Background())
}

func (i InlineSecretArgs) ToInlineSecretOutputWithContext(ctx context.Context) InlineSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineSecretOutput)
}

// InlineSecretArrayInput is an input type that accepts InlineSecretArray and InlineSecretArrayOutput values.
// You can construct a concrete instance of `InlineSecretArrayInput` via:
//
//	InlineSecretArray{ InlineSecretArgs{...} }
type InlineSecretArrayInput interface {
	pulumi.Input

	ToInlineSecretArrayOutput() InlineSecretArrayOutput
	ToInlineSecretArrayOutputWithContext(context.Context) InlineSecretArrayOutput
}

type InlineSecretArray []InlineSecretInput

func (InlineSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InlineSecret)(nil)).Elem()
}

func (i InlineSecretArray) ToInlineSecretArrayOutput() InlineSecretArrayOutput {
	return i.ToInlineSecretArrayOutputWithContext(context.Background())
}

func (i InlineSecretArray) ToInlineSecretArrayOutputWithContext(ctx context.Context) InlineSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InlineSecretArrayOutput)
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretOutput struct{ *pulumi.OutputState }

func (InlineSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineSecret)(nil)).Elem()
}

func (o InlineSecretOutput) ToInlineSecretOutput() InlineSecretOutput {
	return o
}

func (o InlineSecretOutput) ToInlineSecretOutputWithContext(ctx context.Context) InlineSecretOutput {
	return o
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o InlineSecretOutput) EnvMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v InlineSecret) map[string]string { return v.EnvMap }).(pulumi.StringMapOutput)
}

// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
func (o InlineSecretOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InlineSecret) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type InlineSecretArrayOutput struct{ *pulumi.OutputState }

func (InlineSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InlineSecret)(nil)).Elem()
}

func (o InlineSecretArrayOutput) ToInlineSecretArrayOutput() InlineSecretArrayOutput {
	return o
}

func (o InlineSecretArrayOutput) ToInlineSecretArrayOutputWithContext(ctx context.Context) InlineSecretArrayOutput {
	return o
}

func (o InlineSecretArrayOutput) Index(i pulumi.IntInput) InlineSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InlineSecret {
		return vs[0].([]InlineSecret)[vs[1].(int)]
	}).(InlineSecretOutput)
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretResponse struct {
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	EnvMap map[string]string `pulumi:"envMap"`
	// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
type InlineSecretResponseOutput struct{ *pulumi.OutputState }

func (InlineSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InlineSecretResponse)(nil)).Elem()
}

func (o InlineSecretResponseOutput) ToInlineSecretResponseOutput() InlineSecretResponseOutput {
	return o
}

func (o InlineSecretResponseOutput) ToInlineSecretResponseOutputWithContext(ctx context.Context) InlineSecretResponseOutput {
	return o
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o InlineSecretResponseOutput) EnvMap() pulumi.StringMapOutput {
	return o.ApplyT(func(v InlineSecretResponse) map[string]string { return v.EnvMap }).(pulumi.StringMapOutput)
}

// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
func (o InlineSecretResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v InlineSecretResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

type InlineSecretResponseArrayOutput struct{ *pulumi.OutputState }

func (InlineSecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InlineSecretResponse)(nil)).Elem()
}

func (o InlineSecretResponseArrayOutput) ToInlineSecretResponseArrayOutput() InlineSecretResponseArrayOutput {
	return o
}

func (o InlineSecretResponseArrayOutput) ToInlineSecretResponseArrayOutputWithContext(ctx context.Context) InlineSecretResponseArrayOutput {
	return o
}

func (o InlineSecretResponseArrayOutput) Index(i pulumi.IntInput) InlineSecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InlineSecretResponse {
		return vs[0].([]InlineSecretResponse)[vs[1].(int)]
	}).(InlineSecretResponseOutput)
}

// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
type MavenArtifact struct {
	// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
	ArtifactId *string `pulumi:"artifactId"`
	// Maven `groupId` value used when uploading the artifact to Artifact Registry.
	GroupId *string `pulumi:"groupId"`
	// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
	Path *string `pulumi:"path"`
	// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
	Repository *string `pulumi:"repository"`
	// Maven `version` value used when uploading the artifact to Artifact Registry.
	Version *string `pulumi:"version"`
}

// MavenArtifactInput is an input type that accepts MavenArtifactArgs and MavenArtifactOutput values.
// You can construct a concrete instance of `MavenArtifactInput` via:
//
//	MavenArtifactArgs{...}
type MavenArtifactInput interface {
	pulumi.Input

	ToMavenArtifactOutput() MavenArtifactOutput
	ToMavenArtifactOutputWithContext(context.Context) MavenArtifactOutput
}

// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
type MavenArtifactArgs struct {
	// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
	ArtifactId pulumi.StringPtrInput `pulumi:"artifactId"`
	// Maven `groupId` value used when uploading the artifact to Artifact Registry.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// Maven `version` value used when uploading the artifact to Artifact Registry.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (MavenArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenArtifact)(nil)).Elem()
}

func (i MavenArtifactArgs) ToMavenArtifactOutput() MavenArtifactOutput {
	return i.ToMavenArtifactOutputWithContext(context.Background())
}

func (i MavenArtifactArgs) ToMavenArtifactOutputWithContext(ctx context.Context) MavenArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenArtifactOutput)
}

// MavenArtifactArrayInput is an input type that accepts MavenArtifactArray and MavenArtifactArrayOutput values.
// You can construct a concrete instance of `MavenArtifactArrayInput` via:
//
//	MavenArtifactArray{ MavenArtifactArgs{...} }
type MavenArtifactArrayInput interface {
	pulumi.Input

	ToMavenArtifactArrayOutput() MavenArtifactArrayOutput
	ToMavenArtifactArrayOutputWithContext(context.Context) MavenArtifactArrayOutput
}

type MavenArtifactArray []MavenArtifactInput

func (MavenArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MavenArtifact)(nil)).Elem()
}

func (i MavenArtifactArray) ToMavenArtifactArrayOutput() MavenArtifactArrayOutput {
	return i.ToMavenArtifactArrayOutputWithContext(context.Background())
}

func (i MavenArtifactArray) ToMavenArtifactArrayOutputWithContext(ctx context.Context) MavenArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MavenArtifactArrayOutput)
}

// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
type MavenArtifactOutput struct{ *pulumi.OutputState }

func (MavenArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenArtifact)(nil)).Elem()
}

func (o MavenArtifactOutput) ToMavenArtifactOutput() MavenArtifactOutput {
	return o
}

func (o MavenArtifactOutput) ToMavenArtifactOutputWithContext(ctx context.Context) MavenArtifactOutput {
	return o
}

// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
func (o MavenArtifactOutput) ArtifactId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MavenArtifact) *string { return v.ArtifactId }).(pulumi.StringPtrOutput)
}

// Maven `groupId` value used when uploading the artifact to Artifact Registry.
func (o MavenArtifactOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MavenArtifact) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
func (o MavenArtifactOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MavenArtifact) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
func (o MavenArtifactOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MavenArtifact) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// Maven `version` value used when uploading the artifact to Artifact Registry.
func (o MavenArtifactOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MavenArtifact) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type MavenArtifactArrayOutput struct{ *pulumi.OutputState }

func (MavenArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MavenArtifact)(nil)).Elem()
}

func (o MavenArtifactArrayOutput) ToMavenArtifactArrayOutput() MavenArtifactArrayOutput {
	return o
}

func (o MavenArtifactArrayOutput) ToMavenArtifactArrayOutputWithContext(ctx context.Context) MavenArtifactArrayOutput {
	return o
}

func (o MavenArtifactArrayOutput) Index(i pulumi.IntInput) MavenArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MavenArtifact {
		return vs[0].([]MavenArtifact)[vs[1].(int)]
	}).(MavenArtifactOutput)
}

// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
type MavenArtifactResponse struct {
	// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
	ArtifactId string `pulumi:"artifactId"`
	// Maven `groupId` value used when uploading the artifact to Artifact Registry.
	GroupId string `pulumi:"groupId"`
	// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
	Path string `pulumi:"path"`
	// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
	Repository string `pulumi:"repository"`
	// Maven `version` value used when uploading the artifact to Artifact Registry.
	Version string `pulumi:"version"`
}

// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
type MavenArtifactResponseOutput struct{ *pulumi.OutputState }

func (MavenArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MavenArtifactResponse)(nil)).Elem()
}

func (o MavenArtifactResponseOutput) ToMavenArtifactResponseOutput() MavenArtifactResponseOutput {
	return o
}

func (o MavenArtifactResponseOutput) ToMavenArtifactResponseOutputWithContext(ctx context.Context) MavenArtifactResponseOutput {
	return o
}

// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
func (o MavenArtifactResponseOutput) ArtifactId() pulumi.StringOutput {
	return o.ApplyT(func(v MavenArtifactResponse) string { return v.ArtifactId }).(pulumi.StringOutput)
}

// Maven `groupId` value used when uploading the artifact to Artifact Registry.
func (o MavenArtifactResponseOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v MavenArtifactResponse) string { return v.GroupId }).(pulumi.StringOutput)
}

// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
func (o MavenArtifactResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v MavenArtifactResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
func (o MavenArtifactResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v MavenArtifactResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// Maven `version` value used when uploading the artifact to Artifact Registry.
func (o MavenArtifactResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v MavenArtifactResponse) string { return v.Version }).(pulumi.StringOutput)
}

type MavenArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (MavenArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MavenArtifactResponse)(nil)).Elem()
}

func (o MavenArtifactResponseArrayOutput) ToMavenArtifactResponseArrayOutput() MavenArtifactResponseArrayOutput {
	return o
}

func (o MavenArtifactResponseArrayOutput) ToMavenArtifactResponseArrayOutputWithContext(ctx context.Context) MavenArtifactResponseArrayOutput {
	return o
}

func (o MavenArtifactResponseArrayOutput) Index(i pulumi.IntInput) MavenArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MavenArtifactResponse {
		return vs[0].([]MavenArtifactResponse)[vs[1].(int)]
	}).(MavenArtifactResponseOutput)
}

// Defines the network configuration for the pool.
type NetworkConfig struct {
	// Option to configure network egress for the workers.
	EgressOption *NetworkConfigEgressOption `pulumi:"egressOption"`
	// Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
	PeeredNetwork string `pulumi:"peeredNetwork"`
	// Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.
	PeeredNetworkIpRange *string `pulumi:"peeredNetworkIpRange"`
}

// NetworkConfigInput is an input type that accepts NetworkConfigArgs and NetworkConfigOutput values.
// You can construct a concrete instance of `NetworkConfigInput` via:
//
//	NetworkConfigArgs{...}
type NetworkConfigInput interface {
	pulumi.Input

	ToNetworkConfigOutput() NetworkConfigOutput
	ToNetworkConfigOutputWithContext(context.Context) NetworkConfigOutput
}

// Defines the network configuration for the pool.
type NetworkConfigArgs struct {
	// Option to configure network egress for the workers.
	EgressOption NetworkConfigEgressOptionPtrInput `pulumi:"egressOption"`
	// Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
	PeeredNetwork pulumi.StringInput `pulumi:"peeredNetwork"`
	// Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.
	PeeredNetworkIpRange pulumi.StringPtrInput `pulumi:"peeredNetworkIpRange"`
}

func (NetworkConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (i NetworkConfigArgs) ToNetworkConfigOutput() NetworkConfigOutput {
	return i.ToNetworkConfigOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput)
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i NetworkConfigArgs) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigOutput).ToNetworkConfigPtrOutputWithContext(ctx)
}

// NetworkConfigPtrInput is an input type that accepts NetworkConfigArgs, NetworkConfigPtr and NetworkConfigPtrOutput values.
// You can construct a concrete instance of `NetworkConfigPtrInput` via:
//
//	        NetworkConfigArgs{...}
//
//	or:
//
//	        nil
type NetworkConfigPtrInput interface {
	pulumi.Input

	ToNetworkConfigPtrOutput() NetworkConfigPtrOutput
	ToNetworkConfigPtrOutputWithContext(context.Context) NetworkConfigPtrOutput
}

type networkConfigPtrType NetworkConfigArgs

func NetworkConfigPtr(v *NetworkConfigArgs) NetworkConfigPtrInput {
	return (*networkConfigPtrType)(v)
}

func (*networkConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return i.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (i *networkConfigPtrType) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkConfigPtrOutput)
}

// Defines the network configuration for the pool.
type NetworkConfigOutput struct{ *pulumi.OutputState }

func (NetworkConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigOutput) ToNetworkConfigOutput() NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigOutputWithContext(ctx context.Context) NetworkConfigOutput {
	return o
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o.ToNetworkConfigPtrOutputWithContext(context.Background())
}

func (o NetworkConfigOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NetworkConfig) *NetworkConfig {
		return &v
	}).(NetworkConfigPtrOutput)
}

// Option to configure network egress for the workers.
func (o NetworkConfigOutput) EgressOption() NetworkConfigEgressOptionPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *NetworkConfigEgressOption { return v.EgressOption }).(NetworkConfigEgressOptionPtrOutput)
}

// Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
func (o NetworkConfigOutput) PeeredNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfig) string { return v.PeeredNetwork }).(pulumi.StringOutput)
}

// Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.
func (o NetworkConfigOutput) PeeredNetworkIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkConfig) *string { return v.PeeredNetworkIpRange }).(pulumi.StringPtrOutput)
}

type NetworkConfigPtrOutput struct{ *pulumi.OutputState }

func (NetworkConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkConfig)(nil)).Elem()
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutput() NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) ToNetworkConfigPtrOutputWithContext(ctx context.Context) NetworkConfigPtrOutput {
	return o
}

func (o NetworkConfigPtrOutput) Elem() NetworkConfigOutput {
	return o.ApplyT(func(v *NetworkConfig) NetworkConfig {
		if v != nil {
			return *v
		}
		var ret NetworkConfig
		return ret
	}).(NetworkConfigOutput)
}

// Option to configure network egress for the workers.
func (o NetworkConfigPtrOutput) EgressOption() NetworkConfigEgressOptionPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *NetworkConfigEgressOption {
		if v == nil {
			return nil
		}
		return v.EgressOption
	}).(NetworkConfigEgressOptionPtrOutput)
}

// Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
func (o NetworkConfigPtrOutput) PeeredNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return &v.PeeredNetwork
	}).(pulumi.StringPtrOutput)
}

// Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.
func (o NetworkConfigPtrOutput) PeeredNetworkIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetworkConfig) *string {
		if v == nil {
			return nil
		}
		return v.PeeredNetworkIpRange
	}).(pulumi.StringPtrOutput)
}

// Defines the network configuration for the pool.
type NetworkConfigResponse struct {
	// Option to configure network egress for the workers.
	EgressOption string `pulumi:"egressOption"`
	// Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
	PeeredNetwork string `pulumi:"peeredNetwork"`
	// Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.
	PeeredNetworkIpRange string `pulumi:"peeredNetworkIpRange"`
}

// Defines the network configuration for the pool.
type NetworkConfigResponseOutput struct{ *pulumi.OutputState }

func (NetworkConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkConfigResponse)(nil)).Elem()
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutput() NetworkConfigResponseOutput {
	return o
}

func (o NetworkConfigResponseOutput) ToNetworkConfigResponseOutputWithContext(ctx context.Context) NetworkConfigResponseOutput {
	return o
}

// Option to configure network egress for the workers.
func (o NetworkConfigResponseOutput) EgressOption() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.EgressOption }).(pulumi.StringOutput)
}

// Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
func (o NetworkConfigResponseOutput) PeeredNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.PeeredNetwork }).(pulumi.StringOutput)
}

// Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.
func (o NetworkConfigResponseOutput) PeeredNetworkIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v NetworkConfigResponse) string { return v.PeeredNetworkIpRange }).(pulumi.StringOutput)
}

// Npm package to upload to Artifact Registry upon successful completion of all build steps.
type NpmPackage struct {
	// Path to the package.json. e.g. workspace/path/to/package
	PackagePath *string `pulumi:"packagePath"`
	// Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
	Repository *string `pulumi:"repository"`
}

// NpmPackageInput is an input type that accepts NpmPackageArgs and NpmPackageOutput values.
// You can construct a concrete instance of `NpmPackageInput` via:
//
//	NpmPackageArgs{...}
type NpmPackageInput interface {
	pulumi.Input

	ToNpmPackageOutput() NpmPackageOutput
	ToNpmPackageOutputWithContext(context.Context) NpmPackageOutput
}

// Npm package to upload to Artifact Registry upon successful completion of all build steps.
type NpmPackageArgs struct {
	// Path to the package.json. e.g. workspace/path/to/package
	PackagePath pulumi.StringPtrInput `pulumi:"packagePath"`
	// Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (NpmPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmPackage)(nil)).Elem()
}

func (i NpmPackageArgs) ToNpmPackageOutput() NpmPackageOutput {
	return i.ToNpmPackageOutputWithContext(context.Background())
}

func (i NpmPackageArgs) ToNpmPackageOutputWithContext(ctx context.Context) NpmPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmPackageOutput)
}

// NpmPackageArrayInput is an input type that accepts NpmPackageArray and NpmPackageArrayOutput values.
// You can construct a concrete instance of `NpmPackageArrayInput` via:
//
//	NpmPackageArray{ NpmPackageArgs{...} }
type NpmPackageArrayInput interface {
	pulumi.Input

	ToNpmPackageArrayOutput() NpmPackageArrayOutput
	ToNpmPackageArrayOutputWithContext(context.Context) NpmPackageArrayOutput
}

type NpmPackageArray []NpmPackageInput

func (NpmPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NpmPackage)(nil)).Elem()
}

func (i NpmPackageArray) ToNpmPackageArrayOutput() NpmPackageArrayOutput {
	return i.ToNpmPackageArrayOutputWithContext(context.Background())
}

func (i NpmPackageArray) ToNpmPackageArrayOutputWithContext(ctx context.Context) NpmPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NpmPackageArrayOutput)
}

// Npm package to upload to Artifact Registry upon successful completion of all build steps.
type NpmPackageOutput struct{ *pulumi.OutputState }

func (NpmPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmPackage)(nil)).Elem()
}

func (o NpmPackageOutput) ToNpmPackageOutput() NpmPackageOutput {
	return o
}

func (o NpmPackageOutput) ToNpmPackageOutputWithContext(ctx context.Context) NpmPackageOutput {
	return o
}

// Path to the package.json. e.g. workspace/path/to/package
func (o NpmPackageOutput) PackagePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NpmPackage) *string { return v.PackagePath }).(pulumi.StringPtrOutput)
}

// Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
func (o NpmPackageOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NpmPackage) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type NpmPackageArrayOutput struct{ *pulumi.OutputState }

func (NpmPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NpmPackage)(nil)).Elem()
}

func (o NpmPackageArrayOutput) ToNpmPackageArrayOutput() NpmPackageArrayOutput {
	return o
}

func (o NpmPackageArrayOutput) ToNpmPackageArrayOutputWithContext(ctx context.Context) NpmPackageArrayOutput {
	return o
}

func (o NpmPackageArrayOutput) Index(i pulumi.IntInput) NpmPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NpmPackage {
		return vs[0].([]NpmPackage)[vs[1].(int)]
	}).(NpmPackageOutput)
}

// Npm package to upload to Artifact Registry upon successful completion of all build steps.
type NpmPackageResponse struct {
	// Path to the package.json. e.g. workspace/path/to/package
	PackagePath string `pulumi:"packagePath"`
	// Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
	Repository string `pulumi:"repository"`
}

// Npm package to upload to Artifact Registry upon successful completion of all build steps.
type NpmPackageResponseOutput struct{ *pulumi.OutputState }

func (NpmPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NpmPackageResponse)(nil)).Elem()
}

func (o NpmPackageResponseOutput) ToNpmPackageResponseOutput() NpmPackageResponseOutput {
	return o
}

func (o NpmPackageResponseOutput) ToNpmPackageResponseOutputWithContext(ctx context.Context) NpmPackageResponseOutput {
	return o
}

// Path to the package.json. e.g. workspace/path/to/package
func (o NpmPackageResponseOutput) PackagePath() pulumi.StringOutput {
	return o.ApplyT(func(v NpmPackageResponse) string { return v.PackagePath }).(pulumi.StringOutput)
}

// Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
func (o NpmPackageResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v NpmPackageResponse) string { return v.Repository }).(pulumi.StringOutput)
}

type NpmPackageResponseArrayOutput struct{ *pulumi.OutputState }

func (NpmPackageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NpmPackageResponse)(nil)).Elem()
}

func (o NpmPackageResponseArrayOutput) ToNpmPackageResponseArrayOutput() NpmPackageResponseArrayOutput {
	return o
}

func (o NpmPackageResponseArrayOutput) ToNpmPackageResponseArrayOutputWithContext(ctx context.Context) NpmPackageResponseArrayOutput {
	return o
}

func (o NpmPackageResponseArrayOutput) Index(i pulumi.IntInput) NpmPackageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NpmPackageResponse {
		return vs[0].([]NpmPackageResponse)[vs[1].(int)]
	}).(NpmPackageResponseOutput)
}

// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
type PoolOption struct {
	// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
	Name *string `pulumi:"name"`
}

// PoolOptionInput is an input type that accepts PoolOptionArgs and PoolOptionOutput values.
// You can construct a concrete instance of `PoolOptionInput` via:
//
//	PoolOptionArgs{...}
type PoolOptionInput interface {
	pulumi.Input

	ToPoolOptionOutput() PoolOptionOutput
	ToPoolOptionOutputWithContext(context.Context) PoolOptionOutput
}

// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
type PoolOptionArgs struct {
	// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PoolOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolOption)(nil)).Elem()
}

func (i PoolOptionArgs) ToPoolOptionOutput() PoolOptionOutput {
	return i.ToPoolOptionOutputWithContext(context.Background())
}

func (i PoolOptionArgs) ToPoolOptionOutputWithContext(ctx context.Context) PoolOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOptionOutput)
}

func (i PoolOptionArgs) ToPoolOptionPtrOutput() PoolOptionPtrOutput {
	return i.ToPoolOptionPtrOutputWithContext(context.Background())
}

func (i PoolOptionArgs) ToPoolOptionPtrOutputWithContext(ctx context.Context) PoolOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOptionOutput).ToPoolOptionPtrOutputWithContext(ctx)
}

// PoolOptionPtrInput is an input type that accepts PoolOptionArgs, PoolOptionPtr and PoolOptionPtrOutput values.
// You can construct a concrete instance of `PoolOptionPtrInput` via:
//
//	        PoolOptionArgs{...}
//
//	or:
//
//	        nil
type PoolOptionPtrInput interface {
	pulumi.Input

	ToPoolOptionPtrOutput() PoolOptionPtrOutput
	ToPoolOptionPtrOutputWithContext(context.Context) PoolOptionPtrOutput
}

type poolOptionPtrType PoolOptionArgs

func PoolOptionPtr(v *PoolOptionArgs) PoolOptionPtrInput {
	return (*poolOptionPtrType)(v)
}

func (*poolOptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolOption)(nil)).Elem()
}

func (i *poolOptionPtrType) ToPoolOptionPtrOutput() PoolOptionPtrOutput {
	return i.ToPoolOptionPtrOutputWithContext(context.Background())
}

func (i *poolOptionPtrType) ToPoolOptionPtrOutputWithContext(ctx context.Context) PoolOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOptionPtrOutput)
}

// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
type PoolOptionOutput struct{ *pulumi.OutputState }

func (PoolOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolOption)(nil)).Elem()
}

func (o PoolOptionOutput) ToPoolOptionOutput() PoolOptionOutput {
	return o
}

func (o PoolOptionOutput) ToPoolOptionOutputWithContext(ctx context.Context) PoolOptionOutput {
	return o
}

func (o PoolOptionOutput) ToPoolOptionPtrOutput() PoolOptionPtrOutput {
	return o.ToPoolOptionPtrOutputWithContext(context.Background())
}

func (o PoolOptionOutput) ToPoolOptionPtrOutputWithContext(ctx context.Context) PoolOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PoolOption) *PoolOption {
		return &v
	}).(PoolOptionPtrOutput)
}

// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
func (o PoolOptionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PoolOption) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PoolOptionPtrOutput struct{ *pulumi.OutputState }

func (PoolOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PoolOption)(nil)).Elem()
}

func (o PoolOptionPtrOutput) ToPoolOptionPtrOutput() PoolOptionPtrOutput {
	return o
}

func (o PoolOptionPtrOutput) ToPoolOptionPtrOutputWithContext(ctx context.Context) PoolOptionPtrOutput {
	return o
}

func (o PoolOptionPtrOutput) Elem() PoolOptionOutput {
	return o.ApplyT(func(v *PoolOption) PoolOption {
		if v != nil {
			return *v
		}
		var ret PoolOption
		return ret
	}).(PoolOptionOutput)
}

// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
func (o PoolOptionPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PoolOption) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
type PoolOptionResponse struct {
	// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
	Name string `pulumi:"name"`
}

// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
type PoolOptionResponseOutput struct{ *pulumi.OutputState }

func (PoolOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoolOptionResponse)(nil)).Elem()
}

func (o PoolOptionResponseOutput) ToPoolOptionResponseOutput() PoolOptionResponseOutput {
	return o
}

func (o PoolOptionResponseOutput) ToPoolOptionResponseOutputWithContext(ctx context.Context) PoolOptionResponseOutput {
	return o
}

// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
func (o PoolOptionResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PoolOptionResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Configuration for a V1 `PrivatePool`.
type PrivatePoolV1Config struct {
	// Network configuration for the pool.
	NetworkConfig *NetworkConfig `pulumi:"networkConfig"`
	// Machine configuration for the workers in the pool.
	WorkerConfig *WorkerConfig `pulumi:"workerConfig"`
}

// PrivatePoolV1ConfigInput is an input type that accepts PrivatePoolV1ConfigArgs and PrivatePoolV1ConfigOutput values.
// You can construct a concrete instance of `PrivatePoolV1ConfigInput` via:
//
//	PrivatePoolV1ConfigArgs{...}
type PrivatePoolV1ConfigInput interface {
	pulumi.Input

	ToPrivatePoolV1ConfigOutput() PrivatePoolV1ConfigOutput
	ToPrivatePoolV1ConfigOutputWithContext(context.Context) PrivatePoolV1ConfigOutput
}

// Configuration for a V1 `PrivatePool`.
type PrivatePoolV1ConfigArgs struct {
	// Network configuration for the pool.
	NetworkConfig NetworkConfigPtrInput `pulumi:"networkConfig"`
	// Machine configuration for the workers in the pool.
	WorkerConfig WorkerConfigPtrInput `pulumi:"workerConfig"`
}

func (PrivatePoolV1ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePoolV1Config)(nil)).Elem()
}

func (i PrivatePoolV1ConfigArgs) ToPrivatePoolV1ConfigOutput() PrivatePoolV1ConfigOutput {
	return i.ToPrivatePoolV1ConfigOutputWithContext(context.Background())
}

func (i PrivatePoolV1ConfigArgs) ToPrivatePoolV1ConfigOutputWithContext(ctx context.Context) PrivatePoolV1ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolV1ConfigOutput)
}

func (i PrivatePoolV1ConfigArgs) ToPrivatePoolV1ConfigPtrOutput() PrivatePoolV1ConfigPtrOutput {
	return i.ToPrivatePoolV1ConfigPtrOutputWithContext(context.Background())
}

func (i PrivatePoolV1ConfigArgs) ToPrivatePoolV1ConfigPtrOutputWithContext(ctx context.Context) PrivatePoolV1ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolV1ConfigOutput).ToPrivatePoolV1ConfigPtrOutputWithContext(ctx)
}

// PrivatePoolV1ConfigPtrInput is an input type that accepts PrivatePoolV1ConfigArgs, PrivatePoolV1ConfigPtr and PrivatePoolV1ConfigPtrOutput values.
// You can construct a concrete instance of `PrivatePoolV1ConfigPtrInput` via:
//
//	        PrivatePoolV1ConfigArgs{...}
//
//	or:
//
//	        nil
type PrivatePoolV1ConfigPtrInput interface {
	pulumi.Input

	ToPrivatePoolV1ConfigPtrOutput() PrivatePoolV1ConfigPtrOutput
	ToPrivatePoolV1ConfigPtrOutputWithContext(context.Context) PrivatePoolV1ConfigPtrOutput
}

type privatePoolV1ConfigPtrType PrivatePoolV1ConfigArgs

func PrivatePoolV1ConfigPtr(v *PrivatePoolV1ConfigArgs) PrivatePoolV1ConfigPtrInput {
	return (*privatePoolV1ConfigPtrType)(v)
}

func (*privatePoolV1ConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatePoolV1Config)(nil)).Elem()
}

func (i *privatePoolV1ConfigPtrType) ToPrivatePoolV1ConfigPtrOutput() PrivatePoolV1ConfigPtrOutput {
	return i.ToPrivatePoolV1ConfigPtrOutputWithContext(context.Background())
}

func (i *privatePoolV1ConfigPtrType) ToPrivatePoolV1ConfigPtrOutputWithContext(ctx context.Context) PrivatePoolV1ConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivatePoolV1ConfigPtrOutput)
}

// Configuration for a V1 `PrivatePool`.
type PrivatePoolV1ConfigOutput struct{ *pulumi.OutputState }

func (PrivatePoolV1ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePoolV1Config)(nil)).Elem()
}

func (o PrivatePoolV1ConfigOutput) ToPrivatePoolV1ConfigOutput() PrivatePoolV1ConfigOutput {
	return o
}

func (o PrivatePoolV1ConfigOutput) ToPrivatePoolV1ConfigOutputWithContext(ctx context.Context) PrivatePoolV1ConfigOutput {
	return o
}

func (o PrivatePoolV1ConfigOutput) ToPrivatePoolV1ConfigPtrOutput() PrivatePoolV1ConfigPtrOutput {
	return o.ToPrivatePoolV1ConfigPtrOutputWithContext(context.Background())
}

func (o PrivatePoolV1ConfigOutput) ToPrivatePoolV1ConfigPtrOutputWithContext(ctx context.Context) PrivatePoolV1ConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivatePoolV1Config) *PrivatePoolV1Config {
		return &v
	}).(PrivatePoolV1ConfigPtrOutput)
}

// Network configuration for the pool.
func (o PrivatePoolV1ConfigOutput) NetworkConfig() NetworkConfigPtrOutput {
	return o.ApplyT(func(v PrivatePoolV1Config) *NetworkConfig { return v.NetworkConfig }).(NetworkConfigPtrOutput)
}

// Machine configuration for the workers in the pool.
func (o PrivatePoolV1ConfigOutput) WorkerConfig() WorkerConfigPtrOutput {
	return o.ApplyT(func(v PrivatePoolV1Config) *WorkerConfig { return v.WorkerConfig }).(WorkerConfigPtrOutput)
}

type PrivatePoolV1ConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivatePoolV1ConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivatePoolV1Config)(nil)).Elem()
}

func (o PrivatePoolV1ConfigPtrOutput) ToPrivatePoolV1ConfigPtrOutput() PrivatePoolV1ConfigPtrOutput {
	return o
}

func (o PrivatePoolV1ConfigPtrOutput) ToPrivatePoolV1ConfigPtrOutputWithContext(ctx context.Context) PrivatePoolV1ConfigPtrOutput {
	return o
}

func (o PrivatePoolV1ConfigPtrOutput) Elem() PrivatePoolV1ConfigOutput {
	return o.ApplyT(func(v *PrivatePoolV1Config) PrivatePoolV1Config {
		if v != nil {
			return *v
		}
		var ret PrivatePoolV1Config
		return ret
	}).(PrivatePoolV1ConfigOutput)
}

// Network configuration for the pool.
func (o PrivatePoolV1ConfigPtrOutput) NetworkConfig() NetworkConfigPtrOutput {
	return o.ApplyT(func(v *PrivatePoolV1Config) *NetworkConfig {
		if v == nil {
			return nil
		}
		return v.NetworkConfig
	}).(NetworkConfigPtrOutput)
}

// Machine configuration for the workers in the pool.
func (o PrivatePoolV1ConfigPtrOutput) WorkerConfig() WorkerConfigPtrOutput {
	return o.ApplyT(func(v *PrivatePoolV1Config) *WorkerConfig {
		if v == nil {
			return nil
		}
		return v.WorkerConfig
	}).(WorkerConfigPtrOutput)
}

// Configuration for a V1 `PrivatePool`.
type PrivatePoolV1ConfigResponse struct {
	// Network configuration for the pool.
	NetworkConfig NetworkConfigResponse `pulumi:"networkConfig"`
	// Machine configuration for the workers in the pool.
	WorkerConfig WorkerConfigResponse `pulumi:"workerConfig"`
}

// Configuration for a V1 `PrivatePool`.
type PrivatePoolV1ConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivatePoolV1ConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivatePoolV1ConfigResponse)(nil)).Elem()
}

func (o PrivatePoolV1ConfigResponseOutput) ToPrivatePoolV1ConfigResponseOutput() PrivatePoolV1ConfigResponseOutput {
	return o
}

func (o PrivatePoolV1ConfigResponseOutput) ToPrivatePoolV1ConfigResponseOutputWithContext(ctx context.Context) PrivatePoolV1ConfigResponseOutput {
	return o
}

// Network configuration for the pool.
func (o PrivatePoolV1ConfigResponseOutput) NetworkConfig() NetworkConfigResponseOutput {
	return o.ApplyT(func(v PrivatePoolV1ConfigResponse) NetworkConfigResponse { return v.NetworkConfig }).(NetworkConfigResponseOutput)
}

// Machine configuration for the workers in the pool.
func (o PrivatePoolV1ConfigResponseOutput) WorkerConfig() WorkerConfigResponseOutput {
	return o.ApplyT(func(v PrivatePoolV1ConfigResponse) WorkerConfigResponse { return v.WorkerConfig }).(WorkerConfigResponseOutput)
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
type PubsubConfig struct {
	// Service account that will make the push request.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
	State *PubsubConfigState `pulumi:"state"`
	// The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
	Topic *string `pulumi:"topic"`
}

// PubsubConfigInput is an input type that accepts PubsubConfigArgs and PubsubConfigOutput values.
// You can construct a concrete instance of `PubsubConfigInput` via:
//
//	PubsubConfigArgs{...}
type PubsubConfigInput interface {
	pulumi.Input

	ToPubsubConfigOutput() PubsubConfigOutput
	ToPubsubConfigOutputWithContext(context.Context) PubsubConfigOutput
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
type PubsubConfigArgs struct {
	// Service account that will make the push request.
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
	// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
	State PubsubConfigStatePtrInput `pulumi:"state"`
	// The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubsubConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubConfig)(nil)).Elem()
}

func (i PubsubConfigArgs) ToPubsubConfigOutput() PubsubConfigOutput {
	return i.ToPubsubConfigOutputWithContext(context.Background())
}

func (i PubsubConfigArgs) ToPubsubConfigOutputWithContext(ctx context.Context) PubsubConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubConfigOutput)
}

func (i PubsubConfigArgs) ToPubsubConfigPtrOutput() PubsubConfigPtrOutput {
	return i.ToPubsubConfigPtrOutputWithContext(context.Background())
}

func (i PubsubConfigArgs) ToPubsubConfigPtrOutputWithContext(ctx context.Context) PubsubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubConfigOutput).ToPubsubConfigPtrOutputWithContext(ctx)
}

// PubsubConfigPtrInput is an input type that accepts PubsubConfigArgs, PubsubConfigPtr and PubsubConfigPtrOutput values.
// You can construct a concrete instance of `PubsubConfigPtrInput` via:
//
//	        PubsubConfigArgs{...}
//
//	or:
//
//	        nil
type PubsubConfigPtrInput interface {
	pulumi.Input

	ToPubsubConfigPtrOutput() PubsubConfigPtrOutput
	ToPubsubConfigPtrOutputWithContext(context.Context) PubsubConfigPtrOutput
}

type pubsubConfigPtrType PubsubConfigArgs

func PubsubConfigPtr(v *PubsubConfigArgs) PubsubConfigPtrInput {
	return (*pubsubConfigPtrType)(v)
}

func (*pubsubConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubConfig)(nil)).Elem()
}

func (i *pubsubConfigPtrType) ToPubsubConfigPtrOutput() PubsubConfigPtrOutput {
	return i.ToPubsubConfigPtrOutputWithContext(context.Background())
}

func (i *pubsubConfigPtrType) ToPubsubConfigPtrOutputWithContext(ctx context.Context) PubsubConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubsubConfigPtrOutput)
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
type PubsubConfigOutput struct{ *pulumi.OutputState }

func (PubsubConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubConfig)(nil)).Elem()
}

func (o PubsubConfigOutput) ToPubsubConfigOutput() PubsubConfigOutput {
	return o
}

func (o PubsubConfigOutput) ToPubsubConfigOutputWithContext(ctx context.Context) PubsubConfigOutput {
	return o
}

func (o PubsubConfigOutput) ToPubsubConfigPtrOutput() PubsubConfigPtrOutput {
	return o.ToPubsubConfigPtrOutputWithContext(context.Background())
}

func (o PubsubConfigOutput) ToPubsubConfigPtrOutputWithContext(ctx context.Context) PubsubConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PubsubConfig) *PubsubConfig {
		return &v
	}).(PubsubConfigPtrOutput)
}

// Service account that will make the push request.
func (o PubsubConfigOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubsubConfig) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
func (o PubsubConfigOutput) State() PubsubConfigStatePtrOutput {
	return o.ApplyT(func(v PubsubConfig) *PubsubConfigState { return v.State }).(PubsubConfigStatePtrOutput)
}

// The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
func (o PubsubConfigOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubsubConfig) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubsubConfigPtrOutput struct{ *pulumi.OutputState }

func (PubsubConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PubsubConfig)(nil)).Elem()
}

func (o PubsubConfigPtrOutput) ToPubsubConfigPtrOutput() PubsubConfigPtrOutput {
	return o
}

func (o PubsubConfigPtrOutput) ToPubsubConfigPtrOutputWithContext(ctx context.Context) PubsubConfigPtrOutput {
	return o
}

func (o PubsubConfigPtrOutput) Elem() PubsubConfigOutput {
	return o.ApplyT(func(v *PubsubConfig) PubsubConfig {
		if v != nil {
			return *v
		}
		var ret PubsubConfig
		return ret
	}).(PubsubConfigOutput)
}

// Service account that will make the push request.
func (o PubsubConfigPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
func (o PubsubConfigPtrOutput) State() PubsubConfigStatePtrOutput {
	return o.ApplyT(func(v *PubsubConfig) *PubsubConfigState {
		if v == nil {
			return nil
		}
		return v.State
	}).(PubsubConfigStatePtrOutput)
}

// The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
func (o PubsubConfigPtrOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PubsubConfig) *string {
		if v == nil {
			return nil
		}
		return v.Topic
	}).(pulumi.StringPtrOutput)
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
type PubsubConfigResponse struct {
	// Service account that will make the push request.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
	// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
	State string `pulumi:"state"`
	// Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.
	Subscription string `pulumi:"subscription"`
	// The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
	Topic string `pulumi:"topic"`
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
type PubsubConfigResponseOutput struct{ *pulumi.OutputState }

func (PubsubConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubsubConfigResponse)(nil)).Elem()
}

func (o PubsubConfigResponseOutput) ToPubsubConfigResponseOutput() PubsubConfigResponseOutput {
	return o
}

func (o PubsubConfigResponseOutput) ToPubsubConfigResponseOutputWithContext(ctx context.Context) PubsubConfigResponseOutput {
	return o
}

// Service account that will make the push request.
func (o PubsubConfigResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubConfigResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
func (o PubsubConfigResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubConfigResponse) string { return v.State }).(pulumi.StringOutput)
}

// Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.
func (o PubsubConfigResponseOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubConfigResponse) string { return v.Subscription }).(pulumi.StringOutput)
}

// The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
func (o PubsubConfigResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubsubConfigResponse) string { return v.Topic }).(pulumi.StringOutput)
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilter struct {
	// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `pulumi:"branch"`
	// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
	CommentControl *PullRequestFilterCommentControl `pulumi:"commentControl"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	InvertRegex *bool `pulumi:"invertRegex"`
}

// PullRequestFilterInput is an input type that accepts PullRequestFilterArgs and PullRequestFilterOutput values.
// You can construct a concrete instance of `PullRequestFilterInput` via:
//
//	PullRequestFilterArgs{...}
type PullRequestFilterInput interface {
	pulumi.Input

	ToPullRequestFilterOutput() PullRequestFilterOutput
	ToPullRequestFilterOutputWithContext(context.Context) PullRequestFilterOutput
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterArgs struct {
	// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
	CommentControl PullRequestFilterCommentControlPtrInput `pulumi:"commentControl"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
}

func (PullRequestFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestFilter)(nil)).Elem()
}

func (i PullRequestFilterArgs) ToPullRequestFilterOutput() PullRequestFilterOutput {
	return i.ToPullRequestFilterOutputWithContext(context.Background())
}

func (i PullRequestFilterArgs) ToPullRequestFilterOutputWithContext(ctx context.Context) PullRequestFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterOutput)
}

func (i PullRequestFilterArgs) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return i.ToPullRequestFilterPtrOutputWithContext(context.Background())
}

func (i PullRequestFilterArgs) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterOutput).ToPullRequestFilterPtrOutputWithContext(ctx)
}

// PullRequestFilterPtrInput is an input type that accepts PullRequestFilterArgs, PullRequestFilterPtr and PullRequestFilterPtrOutput values.
// You can construct a concrete instance of `PullRequestFilterPtrInput` via:
//
//	        PullRequestFilterArgs{...}
//
//	or:
//
//	        nil
type PullRequestFilterPtrInput interface {
	pulumi.Input

	ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput
	ToPullRequestFilterPtrOutputWithContext(context.Context) PullRequestFilterPtrOutput
}

type pullRequestFilterPtrType PullRequestFilterArgs

func PullRequestFilterPtr(v *PullRequestFilterArgs) PullRequestFilterPtrInput {
	return (*pullRequestFilterPtrType)(v)
}

func (*pullRequestFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PullRequestFilter)(nil)).Elem()
}

func (i *pullRequestFilterPtrType) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return i.ToPullRequestFilterPtrOutputWithContext(context.Background())
}

func (i *pullRequestFilterPtrType) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PullRequestFilterPtrOutput)
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterOutput struct{ *pulumi.OutputState }

func (PullRequestFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestFilter)(nil)).Elem()
}

func (o PullRequestFilterOutput) ToPullRequestFilterOutput() PullRequestFilterOutput {
	return o
}

func (o PullRequestFilterOutput) ToPullRequestFilterOutputWithContext(ctx context.Context) PullRequestFilterOutput {
	return o
}

func (o PullRequestFilterOutput) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return o.ToPullRequestFilterPtrOutputWithContext(context.Background())
}

func (o PullRequestFilterOutput) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PullRequestFilter) *PullRequestFilter {
		return &v
	}).(PullRequestFilterPtrOutput)
}

// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PullRequestFilterOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PullRequestFilter) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
func (o PullRequestFilterOutput) CommentControl() PullRequestFilterCommentControlPtrOutput {
	return o.ApplyT(func(v PullRequestFilter) *PullRequestFilterCommentControl { return v.CommentControl }).(PullRequestFilterCommentControlPtrOutput)
}

// If true, branches that do NOT match the git_ref will trigger a build.
func (o PullRequestFilterOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PullRequestFilter) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

type PullRequestFilterPtrOutput struct{ *pulumi.OutputState }

func (PullRequestFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PullRequestFilter)(nil)).Elem()
}

func (o PullRequestFilterPtrOutput) ToPullRequestFilterPtrOutput() PullRequestFilterPtrOutput {
	return o
}

func (o PullRequestFilterPtrOutput) ToPullRequestFilterPtrOutputWithContext(ctx context.Context) PullRequestFilterPtrOutput {
	return o
}

func (o PullRequestFilterPtrOutput) Elem() PullRequestFilterOutput {
	return o.ApplyT(func(v *PullRequestFilter) PullRequestFilter {
		if v != nil {
			return *v
		}
		var ret PullRequestFilter
		return ret
	}).(PullRequestFilterOutput)
}

// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PullRequestFilterPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PullRequestFilter) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
func (o PullRequestFilterPtrOutput) CommentControl() PullRequestFilterCommentControlPtrOutput {
	return o.ApplyT(func(v *PullRequestFilter) *PullRequestFilterCommentControl {
		if v == nil {
			return nil
		}
		return v.CommentControl
	}).(PullRequestFilterCommentControlPtrOutput)
}

// If true, branches that do NOT match the git_ref will trigger a build.
func (o PullRequestFilterPtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PullRequestFilter) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterResponse struct {
	// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch string `pulumi:"branch"`
	// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
	CommentControl string `pulumi:"commentControl"`
	// If true, branches that do NOT match the git_ref will trigger a build.
	InvertRegex bool `pulumi:"invertRegex"`
}

// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
type PullRequestFilterResponseOutput struct{ *pulumi.OutputState }

func (PullRequestFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PullRequestFilterResponse)(nil)).Elem()
}

func (o PullRequestFilterResponseOutput) ToPullRequestFilterResponseOutput() PullRequestFilterResponseOutput {
	return o
}

func (o PullRequestFilterResponseOutput) ToPullRequestFilterResponseOutputWithContext(ctx context.Context) PullRequestFilterResponseOutput {
	return o
}

// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PullRequestFilterResponseOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v PullRequestFilterResponse) string { return v.Branch }).(pulumi.StringOutput)
}

// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
func (o PullRequestFilterResponseOutput) CommentControl() pulumi.StringOutput {
	return o.ApplyT(func(v PullRequestFilterResponse) string { return v.CommentControl }).(pulumi.StringOutput)
}

// If true, branches that do NOT match the git_ref will trigger a build.
func (o PullRequestFilterResponseOutput) InvertRegex() pulumi.BoolOutput {
	return o.ApplyT(func(v PullRequestFilterResponse) bool { return v.InvertRegex }).(pulumi.BoolOutput)
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilter struct {
	// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch *string `pulumi:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	InvertRegex *bool `pulumi:"invertRegex"`
	// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag *string `pulumi:"tag"`
}

// PushFilterInput is an input type that accepts PushFilterArgs and PushFilterOutput values.
// You can construct a concrete instance of `PushFilterInput` via:
//
//	PushFilterArgs{...}
type PushFilterInput interface {
	pulumi.Input

	ToPushFilterOutput() PushFilterOutput
	ToPushFilterOutputWithContext(context.Context) PushFilterOutput
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterArgs struct {
	// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch pulumi.StringPtrInput `pulumi:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
	// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag pulumi.StringPtrInput `pulumi:"tag"`
}

func (PushFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PushFilter)(nil)).Elem()
}

func (i PushFilterArgs) ToPushFilterOutput() PushFilterOutput {
	return i.ToPushFilterOutputWithContext(context.Background())
}

func (i PushFilterArgs) ToPushFilterOutputWithContext(ctx context.Context) PushFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterOutput)
}

func (i PushFilterArgs) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return i.ToPushFilterPtrOutputWithContext(context.Background())
}

func (i PushFilterArgs) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterOutput).ToPushFilterPtrOutputWithContext(ctx)
}

// PushFilterPtrInput is an input type that accepts PushFilterArgs, PushFilterPtr and PushFilterPtrOutput values.
// You can construct a concrete instance of `PushFilterPtrInput` via:
//
//	        PushFilterArgs{...}
//
//	or:
//
//	        nil
type PushFilterPtrInput interface {
	pulumi.Input

	ToPushFilterPtrOutput() PushFilterPtrOutput
	ToPushFilterPtrOutputWithContext(context.Context) PushFilterPtrOutput
}

type pushFilterPtrType PushFilterArgs

func PushFilterPtr(v *PushFilterArgs) PushFilterPtrInput {
	return (*pushFilterPtrType)(v)
}

func (*pushFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PushFilter)(nil)).Elem()
}

func (i *pushFilterPtrType) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return i.ToPushFilterPtrOutputWithContext(context.Background())
}

func (i *pushFilterPtrType) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PushFilterPtrOutput)
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterOutput struct{ *pulumi.OutputState }

func (PushFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushFilter)(nil)).Elem()
}

func (o PushFilterOutput) ToPushFilterOutput() PushFilterOutput {
	return o
}

func (o PushFilterOutput) ToPushFilterOutputWithContext(ctx context.Context) PushFilterOutput {
	return o
}

func (o PushFilterOutput) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return o.ToPushFilterPtrOutputWithContext(context.Background())
}

func (o PushFilterOutput) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PushFilter) *PushFilter {
		return &v
	}).(PushFilterPtrOutput)
}

// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushFilter) *string { return v.Branch }).(pulumi.StringPtrOutput)
}

// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
func (o PushFilterOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PushFilter) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PushFilter) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

type PushFilterPtrOutput struct{ *pulumi.OutputState }

func (PushFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PushFilter)(nil)).Elem()
}

func (o PushFilterPtrOutput) ToPushFilterPtrOutput() PushFilterPtrOutput {
	return o
}

func (o PushFilterPtrOutput) ToPushFilterPtrOutputWithContext(ctx context.Context) PushFilterPtrOutput {
	return o
}

func (o PushFilterPtrOutput) Elem() PushFilterOutput {
	return o.ApplyT(func(v *PushFilter) PushFilter {
		if v != nil {
			return *v
		}
		var ret PushFilter
		return ret
	}).(PushFilterOutput)
}

// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterPtrOutput) Branch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushFilter) *string {
		if v == nil {
			return nil
		}
		return v.Branch
	}).(pulumi.StringPtrOutput)
}

// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
func (o PushFilterPtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PushFilter) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterPtrOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PushFilter) *string {
		if v == nil {
			return nil
		}
		return v.Tag
	}).(pulumi.StringPtrOutput)
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterResponse struct {
	// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Branch string `pulumi:"branch"`
	// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
	InvertRegex bool `pulumi:"invertRegex"`
	// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	Tag string `pulumi:"tag"`
}

// Push contains filter properties for matching GitHub git pushes.
type PushFilterResponseOutput struct{ *pulumi.OutputState }

func (PushFilterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PushFilterResponse)(nil)).Elem()
}

func (o PushFilterResponseOutput) ToPushFilterResponseOutput() PushFilterResponseOutput {
	return o
}

func (o PushFilterResponseOutput) ToPushFilterResponseOutputWithContext(ctx context.Context) PushFilterResponseOutput {
	return o
}

// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterResponseOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v PushFilterResponse) string { return v.Branch }).(pulumi.StringOutput)
}

// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
func (o PushFilterResponseOutput) InvertRegex() pulumi.BoolOutput {
	return o.ApplyT(func(v PushFilterResponse) bool { return v.InvertRegex }).(pulumi.BoolOutput)
}

// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o PushFilterResponseOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v PushFilterResponse) string { return v.Tag }).(pulumi.StringOutput)
}

// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
type PythonPackage struct {
	// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
	Paths []string `pulumi:"paths"`
	// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
	Repository *string `pulumi:"repository"`
}

// PythonPackageInput is an input type that accepts PythonPackageArgs and PythonPackageOutput values.
// You can construct a concrete instance of `PythonPackageInput` via:
//
//	PythonPackageArgs{...}
type PythonPackageInput interface {
	pulumi.Input

	ToPythonPackageOutput() PythonPackageOutput
	ToPythonPackageOutputWithContext(context.Context) PythonPackageOutput
}

// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
type PythonPackageArgs struct {
	// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
	Paths pulumi.StringArrayInput `pulumi:"paths"`
	// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (PythonPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonPackage)(nil)).Elem()
}

func (i PythonPackageArgs) ToPythonPackageOutput() PythonPackageOutput {
	return i.ToPythonPackageOutputWithContext(context.Background())
}

func (i PythonPackageArgs) ToPythonPackageOutputWithContext(ctx context.Context) PythonPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonPackageOutput)
}

// PythonPackageArrayInput is an input type that accepts PythonPackageArray and PythonPackageArrayOutput values.
// You can construct a concrete instance of `PythonPackageArrayInput` via:
//
//	PythonPackageArray{ PythonPackageArgs{...} }
type PythonPackageArrayInput interface {
	pulumi.Input

	ToPythonPackageArrayOutput() PythonPackageArrayOutput
	ToPythonPackageArrayOutputWithContext(context.Context) PythonPackageArrayOutput
}

type PythonPackageArray []PythonPackageInput

func (PythonPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PythonPackage)(nil)).Elem()
}

func (i PythonPackageArray) ToPythonPackageArrayOutput() PythonPackageArrayOutput {
	return i.ToPythonPackageArrayOutputWithContext(context.Background())
}

func (i PythonPackageArray) ToPythonPackageArrayOutputWithContext(ctx context.Context) PythonPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PythonPackageArrayOutput)
}

// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
type PythonPackageOutput struct{ *pulumi.OutputState }

func (PythonPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonPackage)(nil)).Elem()
}

func (o PythonPackageOutput) ToPythonPackageOutput() PythonPackageOutput {
	return o
}

func (o PythonPackageOutput) ToPythonPackageOutputWithContext(ctx context.Context) PythonPackageOutput {
	return o
}

// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
func (o PythonPackageOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PythonPackage) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
func (o PythonPackageOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PythonPackage) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type PythonPackageArrayOutput struct{ *pulumi.OutputState }

func (PythonPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PythonPackage)(nil)).Elem()
}

func (o PythonPackageArrayOutput) ToPythonPackageArrayOutput() PythonPackageArrayOutput {
	return o
}

func (o PythonPackageArrayOutput) ToPythonPackageArrayOutputWithContext(ctx context.Context) PythonPackageArrayOutput {
	return o
}

func (o PythonPackageArrayOutput) Index(i pulumi.IntInput) PythonPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PythonPackage {
		return vs[0].([]PythonPackage)[vs[1].(int)]
	}).(PythonPackageOutput)
}

// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
type PythonPackageResponse struct {
	// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
	Paths []string `pulumi:"paths"`
	// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
	Repository string `pulumi:"repository"`
}

// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
type PythonPackageResponseOutput struct{ *pulumi.OutputState }

func (PythonPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PythonPackageResponse)(nil)).Elem()
}

func (o PythonPackageResponseOutput) ToPythonPackageResponseOutput() PythonPackageResponseOutput {
	return o
}

func (o PythonPackageResponseOutput) ToPythonPackageResponseOutputWithContext(ctx context.Context) PythonPackageResponseOutput {
	return o
}

// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
func (o PythonPackageResponseOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PythonPackageResponse) []string { return v.Paths }).(pulumi.StringArrayOutput)
}

// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
func (o PythonPackageResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v PythonPackageResponse) string { return v.Repository }).(pulumi.StringOutput)
}

type PythonPackageResponseArrayOutput struct{ *pulumi.OutputState }

func (PythonPackageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PythonPackageResponse)(nil)).Elem()
}

func (o PythonPackageResponseArrayOutput) ToPythonPackageResponseArrayOutput() PythonPackageResponseArrayOutput {
	return o
}

func (o PythonPackageResponseArrayOutput) ToPythonPackageResponseArrayOutputWithContext(ctx context.Context) PythonPackageResponseArrayOutput {
	return o
}

func (o PythonPackageResponseArrayOutput) Index(i pulumi.IntInput) PythonPackageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PythonPackageResponse {
		return vs[0].([]PythonPackageResponse)[vs[1].(int)]
	}).(PythonPackageResponseOutput)
}

// Location of the source in a Google Cloud Source Repository.
type RepoSource struct {
	// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	BranchName *string `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha *string `pulumi:"commitSha"`
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir *string `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex *bool `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
	Project *string `pulumi:"project"`
	// Name of the Cloud Source Repository.
	RepoName *string `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
	Substitutions map[string]string `pulumi:"substitutions"`
	// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	TagName *string `pulumi:"tagName"`
}

// RepoSourceInput is an input type that accepts RepoSourceArgs and RepoSourceOutput values.
// You can construct a concrete instance of `RepoSourceInput` via:
//
//	RepoSourceArgs{...}
type RepoSourceInput interface {
	pulumi.Input

	ToRepoSourceOutput() RepoSourceOutput
	ToRepoSourceOutputWithContext(context.Context) RepoSourceOutput
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceArgs struct {
	// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	BranchName pulumi.StringPtrInput `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha pulumi.StringPtrInput `pulumi:"commitSha"`
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir pulumi.StringPtrInput `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex pulumi.BoolPtrInput `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Name of the Cloud Source Repository.
	RepoName pulumi.StringPtrInput `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
	Substitutions pulumi.StringMapInput `pulumi:"substitutions"`
	// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	TagName pulumi.StringPtrInput `pulumi:"tagName"`
}

func (RepoSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (i RepoSourceArgs) ToRepoSourceOutput() RepoSourceOutput {
	return i.ToRepoSourceOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput)
}

func (i RepoSourceArgs) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i RepoSourceArgs) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourceOutput).ToRepoSourcePtrOutputWithContext(ctx)
}

// RepoSourcePtrInput is an input type that accepts RepoSourceArgs, RepoSourcePtr and RepoSourcePtrOutput values.
// You can construct a concrete instance of `RepoSourcePtrInput` via:
//
//	        RepoSourceArgs{...}
//
//	or:
//
//	        nil
type RepoSourcePtrInput interface {
	pulumi.Input

	ToRepoSourcePtrOutput() RepoSourcePtrOutput
	ToRepoSourcePtrOutputWithContext(context.Context) RepoSourcePtrOutput
}

type repoSourcePtrType RepoSourceArgs

func RepoSourcePtr(v *RepoSourceArgs) RepoSourcePtrInput {
	return (*repoSourcePtrType)(v)
}

func (*repoSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return i.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (i *repoSourcePtrType) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepoSourcePtrOutput)
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceOutput struct{ *pulumi.OutputState }

func (RepoSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSource)(nil)).Elem()
}

func (o RepoSourceOutput) ToRepoSourceOutput() RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourceOutputWithContext(ctx context.Context) RepoSourceOutput {
	return o
}

func (o RepoSourceOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o.ToRepoSourcePtrOutputWithContext(context.Background())
}

func (o RepoSourceOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepoSource) *RepoSource {
		return &v
	}).(RepoSourcePtrOutput)
}

// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.BranchName }).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.CommitSha }).(pulumi.StringPtrOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o RepoSourceOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.Dir }).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o RepoSourceOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RepoSource) *bool { return v.InvertRegex }).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
func (o RepoSourceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o RepoSourceOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.RepoName }).(pulumi.StringPtrOutput)
}

// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
func (o RepoSourceOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v RepoSource) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepoSource) *string { return v.TagName }).(pulumi.StringPtrOutput)
}

type RepoSourcePtrOutput struct{ *pulumi.OutputState }

func (RepoSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepoSource)(nil)).Elem()
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutput() RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) ToRepoSourcePtrOutputWithContext(ctx context.Context) RepoSourcePtrOutput {
	return o
}

func (o RepoSourcePtrOutput) Elem() RepoSourceOutput {
	return o.ApplyT(func(v *RepoSource) RepoSource {
		if v != nil {
			return *v
		}
		var ret RepoSource
		return ret
	}).(RepoSourceOutput)
}

// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourcePtrOutput) BranchName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.BranchName
	}).(pulumi.StringPtrOutput)
}

// Explicit commit SHA to build.
func (o RepoSourcePtrOutput) CommitSha() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.CommitSha
	}).(pulumi.StringPtrOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o RepoSourcePtrOutput) Dir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Dir
	}).(pulumi.StringPtrOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o RepoSourcePtrOutput) InvertRegex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RepoSource) *bool {
		if v == nil {
			return nil
		}
		return v.InvertRegex
	}).(pulumi.BoolPtrOutput)
}

// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
func (o RepoSourcePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// Name of the Cloud Source Repository.
func (o RepoSourcePtrOutput) RepoName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.RepoName
	}).(pulumi.StringPtrOutput)
}

// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
func (o RepoSourcePtrOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RepoSource) map[string]string {
		if v == nil {
			return nil
		}
		return v.Substitutions
	}).(pulumi.StringMapOutput)
}

// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourcePtrOutput) TagName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepoSource) *string {
		if v == nil {
			return nil
		}
		return v.TagName
	}).(pulumi.StringPtrOutput)
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceResponse struct {
	// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	BranchName string `pulumi:"branchName"`
	// Explicit commit SHA to build.
	CommitSha string `pulumi:"commitSha"`
	// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
	Dir string `pulumi:"dir"`
	// Only trigger a build if the revision regex does NOT match the revision regex.
	InvertRegex bool `pulumi:"invertRegex"`
	// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
	Project string `pulumi:"project"`
	// Name of the Cloud Source Repository.
	RepoName string `pulumi:"repoName"`
	// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
	Substitutions map[string]string `pulumi:"substitutions"`
	// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
	TagName string `pulumi:"tagName"`
}

// Location of the source in a Google Cloud Source Repository.
type RepoSourceResponseOutput struct{ *pulumi.OutputState }

func (RepoSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepoSourceResponse)(nil)).Elem()
}

func (o RepoSourceResponseOutput) ToRepoSourceResponseOutput() RepoSourceResponseOutput {
	return o
}

func (o RepoSourceResponseOutput) ToRepoSourceResponseOutputWithContext(ctx context.Context) RepoSourceResponseOutput {
	return o
}

// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceResponseOutput) BranchName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.BranchName }).(pulumi.StringOutput)
}

// Explicit commit SHA to build.
func (o RepoSourceResponseOutput) CommitSha() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.CommitSha }).(pulumi.StringOutput)
}

// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
func (o RepoSourceResponseOutput) Dir() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.Dir }).(pulumi.StringOutput)
}

// Only trigger a build if the revision regex does NOT match the revision regex.
func (o RepoSourceResponseOutput) InvertRegex() pulumi.BoolOutput {
	return o.ApplyT(func(v RepoSourceResponse) bool { return v.InvertRegex }).(pulumi.BoolOutput)
}

// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
func (o RepoSourceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Name of the Cloud Source Repository.
func (o RepoSourceResponseOutput) RepoName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.RepoName }).(pulumi.StringOutput)
}

// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
func (o RepoSourceResponseOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v RepoSourceResponse) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
func (o RepoSourceResponseOutput) TagName() pulumi.StringOutput {
	return o.ApplyT(func(v RepoSourceResponse) string { return v.TagName }).(pulumi.StringOutput)
}

// The configuration of a trigger that creates a build whenever an event from Repo API is received.
type RepositoryEventConfig struct {
	// Filter to match changes in pull requests.
	PullRequest *PullRequestFilter `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push *PushFilter `pulumi:"push"`
	// The resource name of the Repo API resource.
	Repository *string `pulumi:"repository"`
}

// RepositoryEventConfigInput is an input type that accepts RepositoryEventConfigArgs and RepositoryEventConfigOutput values.
// You can construct a concrete instance of `RepositoryEventConfigInput` via:
//
//	RepositoryEventConfigArgs{...}
type RepositoryEventConfigInput interface {
	pulumi.Input

	ToRepositoryEventConfigOutput() RepositoryEventConfigOutput
	ToRepositoryEventConfigOutputWithContext(context.Context) RepositoryEventConfigOutput
}

// The configuration of a trigger that creates a build whenever an event from Repo API is received.
type RepositoryEventConfigArgs struct {
	// Filter to match changes in pull requests.
	PullRequest PullRequestFilterPtrInput `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push PushFilterPtrInput `pulumi:"push"`
	// The resource name of the Repo API resource.
	Repository pulumi.StringPtrInput `pulumi:"repository"`
}

func (RepositoryEventConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEventConfig)(nil)).Elem()
}

func (i RepositoryEventConfigArgs) ToRepositoryEventConfigOutput() RepositoryEventConfigOutput {
	return i.ToRepositoryEventConfigOutputWithContext(context.Background())
}

func (i RepositoryEventConfigArgs) ToRepositoryEventConfigOutputWithContext(ctx context.Context) RepositoryEventConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEventConfigOutput)
}

func (i RepositoryEventConfigArgs) ToRepositoryEventConfigPtrOutput() RepositoryEventConfigPtrOutput {
	return i.ToRepositoryEventConfigPtrOutputWithContext(context.Background())
}

func (i RepositoryEventConfigArgs) ToRepositoryEventConfigPtrOutputWithContext(ctx context.Context) RepositoryEventConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEventConfigOutput).ToRepositoryEventConfigPtrOutputWithContext(ctx)
}

// RepositoryEventConfigPtrInput is an input type that accepts RepositoryEventConfigArgs, RepositoryEventConfigPtr and RepositoryEventConfigPtrOutput values.
// You can construct a concrete instance of `RepositoryEventConfigPtrInput` via:
//
//	        RepositoryEventConfigArgs{...}
//
//	or:
//
//	        nil
type RepositoryEventConfigPtrInput interface {
	pulumi.Input

	ToRepositoryEventConfigPtrOutput() RepositoryEventConfigPtrOutput
	ToRepositoryEventConfigPtrOutputWithContext(context.Context) RepositoryEventConfigPtrOutput
}

type repositoryEventConfigPtrType RepositoryEventConfigArgs

func RepositoryEventConfigPtr(v *RepositoryEventConfigArgs) RepositoryEventConfigPtrInput {
	return (*repositoryEventConfigPtrType)(v)
}

func (*repositoryEventConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEventConfig)(nil)).Elem()
}

func (i *repositoryEventConfigPtrType) ToRepositoryEventConfigPtrOutput() RepositoryEventConfigPtrOutput {
	return i.ToRepositoryEventConfigPtrOutputWithContext(context.Background())
}

func (i *repositoryEventConfigPtrType) ToRepositoryEventConfigPtrOutputWithContext(ctx context.Context) RepositoryEventConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryEventConfigPtrOutput)
}

// The configuration of a trigger that creates a build whenever an event from Repo API is received.
type RepositoryEventConfigOutput struct{ *pulumi.OutputState }

func (RepositoryEventConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEventConfig)(nil)).Elem()
}

func (o RepositoryEventConfigOutput) ToRepositoryEventConfigOutput() RepositoryEventConfigOutput {
	return o
}

func (o RepositoryEventConfigOutput) ToRepositoryEventConfigOutputWithContext(ctx context.Context) RepositoryEventConfigOutput {
	return o
}

func (o RepositoryEventConfigOutput) ToRepositoryEventConfigPtrOutput() RepositoryEventConfigPtrOutput {
	return o.ToRepositoryEventConfigPtrOutputWithContext(context.Background())
}

func (o RepositoryEventConfigOutput) ToRepositoryEventConfigPtrOutputWithContext(ctx context.Context) RepositoryEventConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryEventConfig) *RepositoryEventConfig {
		return &v
	}).(RepositoryEventConfigPtrOutput)
}

// Filter to match changes in pull requests.
func (o RepositoryEventConfigOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v RepositoryEventConfig) *PullRequestFilter { return v.PullRequest }).(PullRequestFilterPtrOutput)
}

// Filter to match changes in refs like branches, tags.
func (o RepositoryEventConfigOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v RepositoryEventConfig) *PushFilter { return v.Push }).(PushFilterPtrOutput)
}

// The resource name of the Repo API resource.
func (o RepositoryEventConfigOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryEventConfig) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

type RepositoryEventConfigPtrOutput struct{ *pulumi.OutputState }

func (RepositoryEventConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryEventConfig)(nil)).Elem()
}

func (o RepositoryEventConfigPtrOutput) ToRepositoryEventConfigPtrOutput() RepositoryEventConfigPtrOutput {
	return o
}

func (o RepositoryEventConfigPtrOutput) ToRepositoryEventConfigPtrOutputWithContext(ctx context.Context) RepositoryEventConfigPtrOutput {
	return o
}

func (o RepositoryEventConfigPtrOutput) Elem() RepositoryEventConfigOutput {
	return o.ApplyT(func(v *RepositoryEventConfig) RepositoryEventConfig {
		if v != nil {
			return *v
		}
		var ret RepositoryEventConfig
		return ret
	}).(RepositoryEventConfigOutput)
}

// Filter to match changes in pull requests.
func (o RepositoryEventConfigPtrOutput) PullRequest() PullRequestFilterPtrOutput {
	return o.ApplyT(func(v *RepositoryEventConfig) *PullRequestFilter {
		if v == nil {
			return nil
		}
		return v.PullRequest
	}).(PullRequestFilterPtrOutput)
}

// Filter to match changes in refs like branches, tags.
func (o RepositoryEventConfigPtrOutput) Push() PushFilterPtrOutput {
	return o.ApplyT(func(v *RepositoryEventConfig) *PushFilter {
		if v == nil {
			return nil
		}
		return v.Push
	}).(PushFilterPtrOutput)
}

// The resource name of the Repo API resource.
func (o RepositoryEventConfigPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryEventConfig) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// The configuration of a trigger that creates a build whenever an event from Repo API is received.
type RepositoryEventConfigResponse struct {
	// Filter to match changes in pull requests.
	PullRequest PullRequestFilterResponse `pulumi:"pullRequest"`
	// Filter to match changes in refs like branches, tags.
	Push PushFilterResponse `pulumi:"push"`
	// The resource name of the Repo API resource.
	Repository string `pulumi:"repository"`
	// The type of the SCM vendor the repository points to.
	RepositoryType string `pulumi:"repositoryType"`
}

// The configuration of a trigger that creates a build whenever an event from Repo API is received.
type RepositoryEventConfigResponseOutput struct{ *pulumi.OutputState }

func (RepositoryEventConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryEventConfigResponse)(nil)).Elem()
}

func (o RepositoryEventConfigResponseOutput) ToRepositoryEventConfigResponseOutput() RepositoryEventConfigResponseOutput {
	return o
}

func (o RepositoryEventConfigResponseOutput) ToRepositoryEventConfigResponseOutputWithContext(ctx context.Context) RepositoryEventConfigResponseOutput {
	return o
}

// Filter to match changes in pull requests.
func (o RepositoryEventConfigResponseOutput) PullRequest() PullRequestFilterResponseOutput {
	return o.ApplyT(func(v RepositoryEventConfigResponse) PullRequestFilterResponse { return v.PullRequest }).(PullRequestFilterResponseOutput)
}

// Filter to match changes in refs like branches, tags.
func (o RepositoryEventConfigResponseOutput) Push() PushFilterResponseOutput {
	return o.ApplyT(func(v RepositoryEventConfigResponse) PushFilterResponse { return v.Push }).(PushFilterResponseOutput)
}

// The resource name of the Repo API resource.
func (o RepositoryEventConfigResponseOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryEventConfigResponse) string { return v.Repository }).(pulumi.StringOutput)
}

// The type of the SCM vendor the repository points to.
func (o RepositoryEventConfigResponseOutput) RepositoryType() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryEventConfigResponse) string { return v.RepositoryType }).(pulumi.StringOutput)
}

// Artifacts created by the build pipeline.
type ResultsResponse struct {
	// Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
	ArtifactManifest string `pulumi:"artifactManifest"`
	// Time to push all non-container artifacts to Cloud Storage.
	ArtifactTiming TimeSpanResponse `pulumi:"artifactTiming"`
	// List of build step digests, in the order corresponding to build step indices.
	BuildStepImages []string `pulumi:"buildStepImages"`
	// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored.
	BuildStepOutputs []string `pulumi:"buildStepOutputs"`
	// Container images that were built as a part of the build.
	Images []BuiltImageResponse `pulumi:"images"`
	// Maven artifacts uploaded to Artifact Registry at the end of the build.
	MavenArtifacts []UploadedMavenArtifactResponse `pulumi:"mavenArtifacts"`
	// Npm packages uploaded to Artifact Registry at the end of the build.
	NpmPackages []UploadedNpmPackageResponse `pulumi:"npmPackages"`
	// Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
	NumArtifacts string `pulumi:"numArtifacts"`
	// Python artifacts uploaded to Artifact Registry at the end of the build.
	PythonPackages []UploadedPythonPackageResponse `pulumi:"pythonPackages"`
}

// Artifacts created by the build pipeline.
type ResultsResponseOutput struct{ *pulumi.OutputState }

func (ResultsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResultsResponse)(nil)).Elem()
}

func (o ResultsResponseOutput) ToResultsResponseOutput() ResultsResponseOutput {
	return o
}

func (o ResultsResponseOutput) ToResultsResponseOutputWithContext(ctx context.Context) ResultsResponseOutput {
	return o
}

// Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
func (o ResultsResponseOutput) ArtifactManifest() pulumi.StringOutput {
	return o.ApplyT(func(v ResultsResponse) string { return v.ArtifactManifest }).(pulumi.StringOutput)
}

// Time to push all non-container artifacts to Cloud Storage.
func (o ResultsResponseOutput) ArtifactTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v ResultsResponse) TimeSpanResponse { return v.ArtifactTiming }).(TimeSpanResponseOutput)
}

// List of build step digests, in the order corresponding to build step indices.
func (o ResultsResponseOutput) BuildStepImages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []string { return v.BuildStepImages }).(pulumi.StringArrayOutput)
}

// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored.
func (o ResultsResponseOutput) BuildStepOutputs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []string { return v.BuildStepOutputs }).(pulumi.StringArrayOutput)
}

// Container images that were built as a part of the build.
func (o ResultsResponseOutput) Images() BuiltImageResponseArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []BuiltImageResponse { return v.Images }).(BuiltImageResponseArrayOutput)
}

// Maven artifacts uploaded to Artifact Registry at the end of the build.
func (o ResultsResponseOutput) MavenArtifacts() UploadedMavenArtifactResponseArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []UploadedMavenArtifactResponse { return v.MavenArtifacts }).(UploadedMavenArtifactResponseArrayOutput)
}

// Npm packages uploaded to Artifact Registry at the end of the build.
func (o ResultsResponseOutput) NpmPackages() UploadedNpmPackageResponseArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []UploadedNpmPackageResponse { return v.NpmPackages }).(UploadedNpmPackageResponseArrayOutput)
}

// Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
func (o ResultsResponseOutput) NumArtifacts() pulumi.StringOutput {
	return o.ApplyT(func(v ResultsResponse) string { return v.NumArtifacts }).(pulumi.StringOutput)
}

// Python artifacts uploaded to Artifact Registry at the end of the build.
func (o ResultsResponseOutput) PythonPackages() UploadedPythonPackageResponseArrayOutput {
	return o.ApplyT(func(v ResultsResponse) []UploadedPythonPackageResponse { return v.PythonPackages }).(UploadedPythonPackageResponseArrayOutput)
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type Secret struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	SecretEnv map[string]string `pulumi:"secretEnv"`
}

// SecretInput is an input type that accepts SecretArgs and SecretOutput values.
// You can construct a concrete instance of `SecretInput` via:
//
//	SecretArgs{...}
type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(context.Context) SecretOutput
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretArgs struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	SecretEnv pulumi.StringMapInput `pulumi:"secretEnv"`
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (i SecretArgs) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i SecretArgs) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// Cloud KMS key name to use to decrypt these envs.
func (o SecretOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Secret) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o SecretOutput) SecretEnv() pulumi.StringMapOutput {
	return o.ApplyT(func(v Secret) map[string]string { return v.SecretEnv }).(pulumi.StringMapOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Secret {
		return vs[0].([]Secret)[vs[1].(int)]
	}).(SecretOutput)
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecret struct {
	// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
	Env *string `pulumi:"env"`
	// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
	VersionName *string `pulumi:"versionName"`
}

// SecretManagerSecretInput is an input type that accepts SecretManagerSecretArgs and SecretManagerSecretOutput values.
// You can construct a concrete instance of `SecretManagerSecretInput` via:
//
//	SecretManagerSecretArgs{...}
type SecretManagerSecretInput interface {
	pulumi.Input

	ToSecretManagerSecretOutput() SecretManagerSecretOutput
	ToSecretManagerSecretOutputWithContext(context.Context) SecretManagerSecretOutput
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretArgs struct {
	// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
	Env pulumi.StringPtrInput `pulumi:"env"`
	// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
	VersionName pulumi.StringPtrInput `pulumi:"versionName"`
}

func (SecretManagerSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSecret)(nil)).Elem()
}

func (i SecretManagerSecretArgs) ToSecretManagerSecretOutput() SecretManagerSecretOutput {
	return i.ToSecretManagerSecretOutputWithContext(context.Background())
}

func (i SecretManagerSecretArgs) ToSecretManagerSecretOutputWithContext(ctx context.Context) SecretManagerSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSecretOutput)
}

// SecretManagerSecretArrayInput is an input type that accepts SecretManagerSecretArray and SecretManagerSecretArrayOutput values.
// You can construct a concrete instance of `SecretManagerSecretArrayInput` via:
//
//	SecretManagerSecretArray{ SecretManagerSecretArgs{...} }
type SecretManagerSecretArrayInput interface {
	pulumi.Input

	ToSecretManagerSecretArrayOutput() SecretManagerSecretArrayOutput
	ToSecretManagerSecretArrayOutputWithContext(context.Context) SecretManagerSecretArrayOutput
}

type SecretManagerSecretArray []SecretManagerSecretInput

func (SecretManagerSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretManagerSecret)(nil)).Elem()
}

func (i SecretManagerSecretArray) ToSecretManagerSecretArrayOutput() SecretManagerSecretArrayOutput {
	return i.ToSecretManagerSecretArrayOutputWithContext(context.Background())
}

func (i SecretManagerSecretArray) ToSecretManagerSecretArrayOutputWithContext(ctx context.Context) SecretManagerSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretManagerSecretArrayOutput)
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSecret)(nil)).Elem()
}

func (o SecretManagerSecretOutput) ToSecretManagerSecretOutput() SecretManagerSecretOutput {
	return o
}

func (o SecretManagerSecretOutput) ToSecretManagerSecretOutputWithContext(ctx context.Context) SecretManagerSecretOutput {
	return o
}

// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
func (o SecretManagerSecretOutput) Env() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretManagerSecret) *string { return v.Env }).(pulumi.StringPtrOutput)
}

// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
func (o SecretManagerSecretOutput) VersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecretManagerSecret) *string { return v.VersionName }).(pulumi.StringPtrOutput)
}

type SecretManagerSecretArrayOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretManagerSecret)(nil)).Elem()
}

func (o SecretManagerSecretArrayOutput) ToSecretManagerSecretArrayOutput() SecretManagerSecretArrayOutput {
	return o
}

func (o SecretManagerSecretArrayOutput) ToSecretManagerSecretArrayOutputWithContext(ctx context.Context) SecretManagerSecretArrayOutput {
	return o
}

func (o SecretManagerSecretArrayOutput) Index(i pulumi.IntInput) SecretManagerSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretManagerSecret {
		return vs[0].([]SecretManagerSecret)[vs[1].(int)]
	}).(SecretManagerSecretOutput)
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretResponse struct {
	// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
	Env string `pulumi:"env"`
	// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
	VersionName string `pulumi:"versionName"`
}

// Pairs a secret environment variable with a SecretVersion in Secret Manager.
type SecretManagerSecretResponseOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretManagerSecretResponse)(nil)).Elem()
}

func (o SecretManagerSecretResponseOutput) ToSecretManagerSecretResponseOutput() SecretManagerSecretResponseOutput {
	return o
}

func (o SecretManagerSecretResponseOutput) ToSecretManagerSecretResponseOutputWithContext(ctx context.Context) SecretManagerSecretResponseOutput {
	return o
}

// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
func (o SecretManagerSecretResponseOutput) Env() pulumi.StringOutput {
	return o.ApplyT(func(v SecretManagerSecretResponse) string { return v.Env }).(pulumi.StringOutput)
}

// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
func (o SecretManagerSecretResponseOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretManagerSecretResponse) string { return v.VersionName }).(pulumi.StringOutput)
}

type SecretManagerSecretResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretManagerSecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretManagerSecretResponse)(nil)).Elem()
}

func (o SecretManagerSecretResponseArrayOutput) ToSecretManagerSecretResponseArrayOutput() SecretManagerSecretResponseArrayOutput {
	return o
}

func (o SecretManagerSecretResponseArrayOutput) ToSecretManagerSecretResponseArrayOutputWithContext(ctx context.Context) SecretManagerSecretResponseArrayOutput {
	return o
}

func (o SecretManagerSecretResponseArrayOutput) Index(i pulumi.IntInput) SecretManagerSecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretManagerSecretResponse {
		return vs[0].([]SecretManagerSecretResponse)[vs[1].(int)]
	}).(SecretManagerSecretResponseOutput)
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretResponse struct {
	// Cloud KMS key name to use to decrypt these envs.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
	SecretEnv map[string]string `pulumi:"secretEnv"`
}

// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
type SecretResponseOutput struct{ *pulumi.OutputState }

func (SecretResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretResponse)(nil)).Elem()
}

func (o SecretResponseOutput) ToSecretResponseOutput() SecretResponseOutput {
	return o
}

func (o SecretResponseOutput) ToSecretResponseOutputWithContext(ctx context.Context) SecretResponseOutput {
	return o
}

// Cloud KMS key name to use to decrypt these envs.
func (o SecretResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
func (o SecretResponseOutput) SecretEnv() pulumi.StringMapOutput {
	return o.ApplyT(func(v SecretResponse) map[string]string { return v.SecretEnv }).(pulumi.StringMapOutput)
}

type SecretResponseArrayOutput struct{ *pulumi.OutputState }

func (SecretResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretResponse)(nil)).Elem()
}

func (o SecretResponseArrayOutput) ToSecretResponseArrayOutput() SecretResponseArrayOutput {
	return o
}

func (o SecretResponseArrayOutput) ToSecretResponseArrayOutputWithContext(ctx context.Context) SecretResponseArrayOutput {
	return o
}

func (o SecretResponseArrayOutput) Index(i pulumi.IntInput) SecretResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretResponse {
		return vs[0].([]SecretResponse)[vs[1].(int)]
	}).(SecretResponseOutput)
}

// Secrets and secret environment variables.
type Secrets struct {
	// Secrets encrypted with KMS key and the associated secret environment variable.
	Inline []InlineSecret `pulumi:"inline"`
	// Secrets in Secret Manager and associated secret environment variable.
	SecretManager []SecretManagerSecret `pulumi:"secretManager"`
}

// SecretsInput is an input type that accepts SecretsArgs and SecretsOutput values.
// You can construct a concrete instance of `SecretsInput` via:
//
//	SecretsArgs{...}
type SecretsInput interface {
	pulumi.Input

	ToSecretsOutput() SecretsOutput
	ToSecretsOutputWithContext(context.Context) SecretsOutput
}

// Secrets and secret environment variables.
type SecretsArgs struct {
	// Secrets encrypted with KMS key and the associated secret environment variable.
	Inline InlineSecretArrayInput `pulumi:"inline"`
	// Secrets in Secret Manager and associated secret environment variable.
	SecretManager SecretManagerSecretArrayInput `pulumi:"secretManager"`
}

func (SecretsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Secrets)(nil)).Elem()
}

func (i SecretsArgs) ToSecretsOutput() SecretsOutput {
	return i.ToSecretsOutputWithContext(context.Background())
}

func (i SecretsArgs) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsOutput)
}

func (i SecretsArgs) ToSecretsPtrOutput() SecretsPtrOutput {
	return i.ToSecretsPtrOutputWithContext(context.Background())
}

func (i SecretsArgs) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsOutput).ToSecretsPtrOutputWithContext(ctx)
}

// SecretsPtrInput is an input type that accepts SecretsArgs, SecretsPtr and SecretsPtrOutput values.
// You can construct a concrete instance of `SecretsPtrInput` via:
//
//	        SecretsArgs{...}
//
//	or:
//
//	        nil
type SecretsPtrInput interface {
	pulumi.Input

	ToSecretsPtrOutput() SecretsPtrOutput
	ToSecretsPtrOutputWithContext(context.Context) SecretsPtrOutput
}

type secretsPtrType SecretsArgs

func SecretsPtr(v *SecretsArgs) SecretsPtrInput {
	return (*secretsPtrType)(v)
}

func (*secretsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (i *secretsPtrType) ToSecretsPtrOutput() SecretsPtrOutput {
	return i.ToSecretsPtrOutputWithContext(context.Background())
}

func (i *secretsPtrType) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsPtrOutput)
}

// Secrets and secret environment variables.
type SecretsOutput struct{ *pulumi.OutputState }

func (SecretsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Secrets)(nil)).Elem()
}

func (o SecretsOutput) ToSecretsOutput() SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsOutputWithContext(ctx context.Context) SecretsOutput {
	return o
}

func (o SecretsOutput) ToSecretsPtrOutput() SecretsPtrOutput {
	return o.ToSecretsPtrOutputWithContext(context.Background())
}

func (o SecretsOutput) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Secrets) *Secrets {
		return &v
	}).(SecretsPtrOutput)
}

// Secrets encrypted with KMS key and the associated secret environment variable.
func (o SecretsOutput) Inline() InlineSecretArrayOutput {
	return o.ApplyT(func(v Secrets) []InlineSecret { return v.Inline }).(InlineSecretArrayOutput)
}

// Secrets in Secret Manager and associated secret environment variable.
func (o SecretsOutput) SecretManager() SecretManagerSecretArrayOutput {
	return o.ApplyT(func(v Secrets) []SecretManagerSecret { return v.SecretManager }).(SecretManagerSecretArrayOutput)
}

type SecretsPtrOutput struct{ *pulumi.OutputState }

func (SecretsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secrets)(nil)).Elem()
}

func (o SecretsPtrOutput) ToSecretsPtrOutput() SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) ToSecretsPtrOutputWithContext(ctx context.Context) SecretsPtrOutput {
	return o
}

func (o SecretsPtrOutput) Elem() SecretsOutput {
	return o.ApplyT(func(v *Secrets) Secrets {
		if v != nil {
			return *v
		}
		var ret Secrets
		return ret
	}).(SecretsOutput)
}

// Secrets encrypted with KMS key and the associated secret environment variable.
func (o SecretsPtrOutput) Inline() InlineSecretArrayOutput {
	return o.ApplyT(func(v *Secrets) []InlineSecret {
		if v == nil {
			return nil
		}
		return v.Inline
	}).(InlineSecretArrayOutput)
}

// Secrets in Secret Manager and associated secret environment variable.
func (o SecretsPtrOutput) SecretManager() SecretManagerSecretArrayOutput {
	return o.ApplyT(func(v *Secrets) []SecretManagerSecret {
		if v == nil {
			return nil
		}
		return v.SecretManager
	}).(SecretManagerSecretArrayOutput)
}

// Secrets and secret environment variables.
type SecretsResponse struct {
	// Secrets encrypted with KMS key and the associated secret environment variable.
	Inline []InlineSecretResponse `pulumi:"inline"`
	// Secrets in Secret Manager and associated secret environment variable.
	SecretManager []SecretManagerSecretResponse `pulumi:"secretManager"`
}

// Secrets and secret environment variables.
type SecretsResponseOutput struct{ *pulumi.OutputState }

func (SecretsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsResponse)(nil)).Elem()
}

func (o SecretsResponseOutput) ToSecretsResponseOutput() SecretsResponseOutput {
	return o
}

func (o SecretsResponseOutput) ToSecretsResponseOutputWithContext(ctx context.Context) SecretsResponseOutput {
	return o
}

// Secrets encrypted with KMS key and the associated secret environment variable.
func (o SecretsResponseOutput) Inline() InlineSecretResponseArrayOutput {
	return o.ApplyT(func(v SecretsResponse) []InlineSecretResponse { return v.Inline }).(InlineSecretResponseArrayOutput)
}

// Secrets in Secret Manager and associated secret environment variable.
func (o SecretsResponseOutput) SecretManager() SecretManagerSecretResponseArrayOutput {
	return o.ApplyT(func(v SecretsResponse) []SecretManagerSecretResponse { return v.SecretManager }).(SecretManagerSecretResponseArrayOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
type ServiceDirectoryConfig struct {
	// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service *string `pulumi:"service"`
}

// ServiceDirectoryConfigInput is an input type that accepts ServiceDirectoryConfigArgs and ServiceDirectoryConfigOutput values.
// You can construct a concrete instance of `ServiceDirectoryConfigInput` via:
//
//	ServiceDirectoryConfigArgs{...}
type ServiceDirectoryConfigInput interface {
	pulumi.Input

	ToServiceDirectoryConfigOutput() ServiceDirectoryConfigOutput
	ToServiceDirectoryConfigOutputWithContext(context.Context) ServiceDirectoryConfigOutput
}

// ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
type ServiceDirectoryConfigArgs struct {
	// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (ServiceDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDirectoryConfig)(nil)).Elem()
}

func (i ServiceDirectoryConfigArgs) ToServiceDirectoryConfigOutput() ServiceDirectoryConfigOutput {
	return i.ToServiceDirectoryConfigOutputWithContext(context.Background())
}

func (i ServiceDirectoryConfigArgs) ToServiceDirectoryConfigOutputWithContext(ctx context.Context) ServiceDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDirectoryConfigOutput)
}

func (i ServiceDirectoryConfigArgs) ToServiceDirectoryConfigPtrOutput() ServiceDirectoryConfigPtrOutput {
	return i.ToServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i ServiceDirectoryConfigArgs) ToServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDirectoryConfigOutput).ToServiceDirectoryConfigPtrOutputWithContext(ctx)
}

// ServiceDirectoryConfigPtrInput is an input type that accepts ServiceDirectoryConfigArgs, ServiceDirectoryConfigPtr and ServiceDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `ServiceDirectoryConfigPtrInput` via:
//
//	        ServiceDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type ServiceDirectoryConfigPtrInput interface {
	pulumi.Input

	ToServiceDirectoryConfigPtrOutput() ServiceDirectoryConfigPtrOutput
	ToServiceDirectoryConfigPtrOutputWithContext(context.Context) ServiceDirectoryConfigPtrOutput
}

type serviceDirectoryConfigPtrType ServiceDirectoryConfigArgs

func ServiceDirectoryConfigPtr(v *ServiceDirectoryConfigArgs) ServiceDirectoryConfigPtrInput {
	return (*serviceDirectoryConfigPtrType)(v)
}

func (*serviceDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDirectoryConfig)(nil)).Elem()
}

func (i *serviceDirectoryConfigPtrType) ToServiceDirectoryConfigPtrOutput() ServiceDirectoryConfigPtrOutput {
	return i.ToServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *serviceDirectoryConfigPtrType) ToServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ServiceDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDirectoryConfigPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
type ServiceDirectoryConfigOutput struct{ *pulumi.OutputState }

func (ServiceDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDirectoryConfig)(nil)).Elem()
}

func (o ServiceDirectoryConfigOutput) ToServiceDirectoryConfigOutput() ServiceDirectoryConfigOutput {
	return o
}

func (o ServiceDirectoryConfigOutput) ToServiceDirectoryConfigOutputWithContext(ctx context.Context) ServiceDirectoryConfigOutput {
	return o
}

func (o ServiceDirectoryConfigOutput) ToServiceDirectoryConfigPtrOutput() ServiceDirectoryConfigPtrOutput {
	return o.ToServiceDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o ServiceDirectoryConfigOutput) ToServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ServiceDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceDirectoryConfig) *ServiceDirectoryConfig {
		return &v
	}).(ServiceDirectoryConfigPtrOutput)
}

// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ServiceDirectoryConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceDirectoryConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type ServiceDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (ServiceDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDirectoryConfig)(nil)).Elem()
}

func (o ServiceDirectoryConfigPtrOutput) ToServiceDirectoryConfigPtrOutput() ServiceDirectoryConfigPtrOutput {
	return o
}

func (o ServiceDirectoryConfigPtrOutput) ToServiceDirectoryConfigPtrOutputWithContext(ctx context.Context) ServiceDirectoryConfigPtrOutput {
	return o
}

func (o ServiceDirectoryConfigPtrOutput) Elem() ServiceDirectoryConfigOutput {
	return o.ApplyT(func(v *ServiceDirectoryConfig) ServiceDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret ServiceDirectoryConfig
		return ret
	}).(ServiceDirectoryConfigOutput)
}

// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ServiceDirectoryConfigPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
type ServiceDirectoryConfigResponse struct {
	// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
	Service string `pulumi:"service"`
}

// ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
type ServiceDirectoryConfigResponseOutput struct{ *pulumi.OutputState }

func (ServiceDirectoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDirectoryConfigResponse)(nil)).Elem()
}

func (o ServiceDirectoryConfigResponseOutput) ToServiceDirectoryConfigResponseOutput() ServiceDirectoryConfigResponseOutput {
	return o
}

func (o ServiceDirectoryConfigResponseOutput) ToServiceDirectoryConfigResponseOutputWithContext(ctx context.Context) ServiceDirectoryConfigResponseOutput {
	return o
}

// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
func (o ServiceDirectoryConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceDirectoryConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

// Location of the source in a supported storage service.
type Source struct {
	// Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.
	ConnectedRepository *ConnectedRepository `pulumi:"connectedRepository"`
	// If provided, get the source from this Git repository.
	GitSource *GitSource `pulumi:"gitSource"`
	// If provided, get the source from this location in a Cloud Source Repository.
	RepoSource *RepoSource `pulumi:"repoSource"`
	// If provided, get the source from this location in Cloud Storage.
	StorageSource *StorageSource `pulumi:"storageSource"`
	// If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
	StorageSourceManifest *StorageSourceManifest `pulumi:"storageSourceManifest"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//	SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// Location of the source in a supported storage service.
type SourceArgs struct {
	// Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.
	ConnectedRepository ConnectedRepositoryPtrInput `pulumi:"connectedRepository"`
	// If provided, get the source from this Git repository.
	GitSource GitSourcePtrInput `pulumi:"gitSource"`
	// If provided, get the source from this location in a Cloud Source Repository.
	RepoSource RepoSourcePtrInput `pulumi:"repoSource"`
	// If provided, get the source from this location in Cloud Storage.
	StorageSource StorageSourcePtrInput `pulumi:"storageSource"`
	// If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
	StorageSourceManifest StorageSourceManifestPtrInput `pulumi:"storageSourceManifest"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//	        SourceArgs{...}
//
//	or:
//
//	        nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// Location of the source in a supported storage service.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.
func (o SourceOutput) ConnectedRepository() ConnectedRepositoryPtrOutput {
	return o.ApplyT(func(v Source) *ConnectedRepository { return v.ConnectedRepository }).(ConnectedRepositoryPtrOutput)
}

// If provided, get the source from this Git repository.
func (o SourceOutput) GitSource() GitSourcePtrOutput {
	return o.ApplyT(func(v Source) *GitSource { return v.GitSource }).(GitSourcePtrOutput)
}

// If provided, get the source from this location in a Cloud Source Repository.
func (o SourceOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v Source) *RepoSource { return v.RepoSource }).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in Cloud Storage.
func (o SourceOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v Source) *StorageSource { return v.StorageSource }).(StorageSourcePtrOutput)
}

// If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
func (o SourceOutput) StorageSourceManifest() StorageSourceManifestPtrOutput {
	return o.ApplyT(func(v Source) *StorageSourceManifest { return v.StorageSourceManifest }).(StorageSourceManifestPtrOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source {
		if v != nil {
			return *v
		}
		var ret Source
		return ret
	}).(SourceOutput)
}

// Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.
func (o SourcePtrOutput) ConnectedRepository() ConnectedRepositoryPtrOutput {
	return o.ApplyT(func(v *Source) *ConnectedRepository {
		if v == nil {
			return nil
		}
		return v.ConnectedRepository
	}).(ConnectedRepositoryPtrOutput)
}

// If provided, get the source from this Git repository.
func (o SourcePtrOutput) GitSource() GitSourcePtrOutput {
	return o.ApplyT(func(v *Source) *GitSource {
		if v == nil {
			return nil
		}
		return v.GitSource
	}).(GitSourcePtrOutput)
}

// If provided, get the source from this location in a Cloud Source Repository.
func (o SourcePtrOutput) RepoSource() RepoSourcePtrOutput {
	return o.ApplyT(func(v *Source) *RepoSource {
		if v == nil {
			return nil
		}
		return v.RepoSource
	}).(RepoSourcePtrOutput)
}

// If provided, get the source from this location in Cloud Storage.
func (o SourcePtrOutput) StorageSource() StorageSourcePtrOutput {
	return o.ApplyT(func(v *Source) *StorageSource {
		if v == nil {
			return nil
		}
		return v.StorageSource
	}).(StorageSourcePtrOutput)
}

// If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
func (o SourcePtrOutput) StorageSourceManifest() StorageSourceManifestPtrOutput {
	return o.ApplyT(func(v *Source) *StorageSourceManifest {
		if v == nil {
			return nil
		}
		return v.StorageSourceManifest
	}).(StorageSourceManifestPtrOutput)
}

// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
type SourceProvenanceResponse struct {
	// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
	FileHashes map[string]FileHashesResponse `pulumi:"fileHashes"`
	// A copy of the build's `source.connected_repository`, if exists, with any revisions resolved.
	ResolvedConnectedRepository ConnectedRepositoryResponse `pulumi:"resolvedConnectedRepository"`
	// A copy of the build's `source.git_source`, if exists, with any revisions resolved.
	ResolvedGitSource GitSourceResponse `pulumi:"resolvedGitSource"`
	// A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
	ResolvedRepoSource RepoSourceResponse `pulumi:"resolvedRepoSource"`
	// A copy of the build's `source.storage_source`, if exists, with any generations resolved.
	ResolvedStorageSource StorageSourceResponse `pulumi:"resolvedStorageSource"`
	// A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
	ResolvedStorageSourceManifest StorageSourceManifestResponse `pulumi:"resolvedStorageSourceManifest"`
}

// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
type SourceProvenanceResponseOutput struct{ *pulumi.OutputState }

func (SourceProvenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceProvenanceResponse)(nil)).Elem()
}

func (o SourceProvenanceResponseOutput) ToSourceProvenanceResponseOutput() SourceProvenanceResponseOutput {
	return o
}

func (o SourceProvenanceResponseOutput) ToSourceProvenanceResponseOutputWithContext(ctx context.Context) SourceProvenanceResponseOutput {
	return o
}

// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
func (o SourceProvenanceResponseOutput) FileHashes() FileHashesResponseMapOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) map[string]FileHashesResponse { return v.FileHashes }).(FileHashesResponseMapOutput)
}

// A copy of the build's `source.connected_repository`, if exists, with any revisions resolved.
func (o SourceProvenanceResponseOutput) ResolvedConnectedRepository() ConnectedRepositoryResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) ConnectedRepositoryResponse { return v.ResolvedConnectedRepository }).(ConnectedRepositoryResponseOutput)
}

// A copy of the build's `source.git_source`, if exists, with any revisions resolved.
func (o SourceProvenanceResponseOutput) ResolvedGitSource() GitSourceResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) GitSourceResponse { return v.ResolvedGitSource }).(GitSourceResponseOutput)
}

// A copy of the build's `source.repo_source`, if exists, with any revisions resolved.
func (o SourceProvenanceResponseOutput) ResolvedRepoSource() RepoSourceResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) RepoSourceResponse { return v.ResolvedRepoSource }).(RepoSourceResponseOutput)
}

// A copy of the build's `source.storage_source`, if exists, with any generations resolved.
func (o SourceProvenanceResponseOutput) ResolvedStorageSource() StorageSourceResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) StorageSourceResponse { return v.ResolvedStorageSource }).(StorageSourceResponseOutput)
}

// A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.
func (o SourceProvenanceResponseOutput) ResolvedStorageSourceManifest() StorageSourceManifestResponseOutput {
	return o.ApplyT(func(v SourceProvenanceResponse) StorageSourceManifestResponse { return v.ResolvedStorageSourceManifest }).(StorageSourceManifestResponseOutput)
}

// Location of the source in a supported storage service.
type SourceResponse struct {
	// Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.
	ConnectedRepository ConnectedRepositoryResponse `pulumi:"connectedRepository"`
	// If provided, get the source from this Git repository.
	GitSource GitSourceResponse `pulumi:"gitSource"`
	// If provided, get the source from this location in a Cloud Source Repository.
	RepoSource RepoSourceResponse `pulumi:"repoSource"`
	// If provided, get the source from this location in Cloud Storage.
	StorageSource StorageSourceResponse `pulumi:"storageSource"`
	// If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
	StorageSourceManifest StorageSourceManifestResponse `pulumi:"storageSourceManifest"`
}

// Location of the source in a supported storage service.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

// Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.
func (o SourceResponseOutput) ConnectedRepository() ConnectedRepositoryResponseOutput {
	return o.ApplyT(func(v SourceResponse) ConnectedRepositoryResponse { return v.ConnectedRepository }).(ConnectedRepositoryResponseOutput)
}

// If provided, get the source from this Git repository.
func (o SourceResponseOutput) GitSource() GitSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) GitSourceResponse { return v.GitSource }).(GitSourceResponseOutput)
}

// If provided, get the source from this location in a Cloud Source Repository.
func (o SourceResponseOutput) RepoSource() RepoSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) RepoSourceResponse { return v.RepoSource }).(RepoSourceResponseOutput)
}

// If provided, get the source from this location in Cloud Storage.
func (o SourceResponseOutput) StorageSource() StorageSourceResponseOutput {
	return o.ApplyT(func(v SourceResponse) StorageSourceResponse { return v.StorageSource }).(StorageSourceResponseOutput)
}

// If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
func (o SourceResponseOutput) StorageSourceManifest() StorageSourceManifestResponseOutput {
	return o.ApplyT(func(v SourceResponse) StorageSourceManifestResponse { return v.StorageSourceManifest }).(StorageSourceManifestResponseOutput)
}

// Location of the source in an archive file in Cloud Storage.
type StorageSource struct {
	// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket *string `pulumi:"bucket"`
	// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation *string `pulumi:"generation"`
	// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
	Object *string `pulumi:"object"`
	// Optional. Option to specify the tool to fetch the source file for the build.
	SourceFetcher *StorageSourceSourceFetcher `pulumi:"sourceFetcher"`
}

// StorageSourceInput is an input type that accepts StorageSourceArgs and StorageSourceOutput values.
// You can construct a concrete instance of `StorageSourceInput` via:
//
//	StorageSourceArgs{...}
type StorageSourceInput interface {
	pulumi.Input

	ToStorageSourceOutput() StorageSourceOutput
	ToStorageSourceOutputWithContext(context.Context) StorageSourceOutput
}

// Location of the source in an archive file in Cloud Storage.
type StorageSourceArgs struct {
	// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
	Object pulumi.StringPtrInput `pulumi:"object"`
	// Optional. Option to specify the tool to fetch the source file for the build.
	SourceFetcher StorageSourceSourceFetcherPtrInput `pulumi:"sourceFetcher"`
}

func (StorageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (i StorageSourceArgs) ToStorageSourceOutput() StorageSourceOutput {
	return i.ToStorageSourceOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput)
}

func (i StorageSourceArgs) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i StorageSourceArgs) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceOutput).ToStorageSourcePtrOutputWithContext(ctx)
}

// StorageSourcePtrInput is an input type that accepts StorageSourceArgs, StorageSourcePtr and StorageSourcePtrOutput values.
// You can construct a concrete instance of `StorageSourcePtrInput` via:
//
//	        StorageSourceArgs{...}
//
//	or:
//
//	        nil
type StorageSourcePtrInput interface {
	pulumi.Input

	ToStorageSourcePtrOutput() StorageSourcePtrOutput
	ToStorageSourcePtrOutputWithContext(context.Context) StorageSourcePtrOutput
}

type storageSourcePtrType StorageSourceArgs

func StorageSourcePtr(v *StorageSourceArgs) StorageSourcePtrInput {
	return (*storageSourcePtrType)(v)
}

func (*storageSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return i.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (i *storageSourcePtrType) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourcePtrOutput)
}

// Location of the source in an archive file in Cloud Storage.
type StorageSourceOutput struct{ *pulumi.OutputState }

func (StorageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSource)(nil)).Elem()
}

func (o StorageSourceOutput) ToStorageSourceOutput() StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourceOutputWithContext(ctx context.Context) StorageSourceOutput {
	return o
}

func (o StorageSourceOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o.ToStorageSourcePtrOutputWithContext(context.Background())
}

func (o StorageSourceOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageSource) *StorageSource {
		return &v
	}).(StorageSourcePtrOutput)
}

// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
func (o StorageSourceOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSource) *string { return v.Object }).(pulumi.StringPtrOutput)
}

// Optional. Option to specify the tool to fetch the source file for the build.
func (o StorageSourceOutput) SourceFetcher() StorageSourceSourceFetcherPtrOutput {
	return o.ApplyT(func(v StorageSource) *StorageSourceSourceFetcher { return v.SourceFetcher }).(StorageSourceSourceFetcherPtrOutput)
}

type StorageSourcePtrOutput struct{ *pulumi.OutputState }

func (StorageSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSource)(nil)).Elem()
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutput() StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) ToStorageSourcePtrOutputWithContext(ctx context.Context) StorageSourcePtrOutput {
	return o
}

func (o StorageSourcePtrOutput) Elem() StorageSourceOutput {
	return o.ApplyT(func(v *StorageSource) StorageSource {
		if v != nil {
			return *v
		}
		var ret StorageSource
		return ret
	}).(StorageSourceOutput)
}

// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourcePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourcePtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
func (o StorageSourcePtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSource) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Optional. Option to specify the tool to fetch the source file for the build.
func (o StorageSourcePtrOutput) SourceFetcher() StorageSourceSourceFetcherPtrOutput {
	return o.ApplyT(func(v *StorageSource) *StorageSourceSourceFetcher {
		if v == nil {
			return nil
		}
		return v.SourceFetcher
	}).(StorageSourceSourceFetcherPtrOutput)
}

// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
type StorageSourceManifest struct {
	// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket *string `pulumi:"bucket"`
	// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation *string `pulumi:"generation"`
	// Cloud Storage object containing the source manifest. This object must be a JSON file.
	Object *string `pulumi:"object"`
}

// StorageSourceManifestInput is an input type that accepts StorageSourceManifestArgs and StorageSourceManifestOutput values.
// You can construct a concrete instance of `StorageSourceManifestInput` via:
//
//	StorageSourceManifestArgs{...}
type StorageSourceManifestInput interface {
	pulumi.Input

	ToStorageSourceManifestOutput() StorageSourceManifestOutput
	ToStorageSourceManifestOutputWithContext(context.Context) StorageSourceManifestOutput
}

// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
type StorageSourceManifestArgs struct {
	// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Cloud Storage object containing the source manifest. This object must be a JSON file.
	Object pulumi.StringPtrInput `pulumi:"object"`
}

func (StorageSourceManifestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceManifest)(nil)).Elem()
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestOutput() StorageSourceManifestOutput {
	return i.ToStorageSourceManifestOutputWithContext(context.Background())
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestOutputWithContext(ctx context.Context) StorageSourceManifestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestOutput)
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return i.ToStorageSourceManifestPtrOutputWithContext(context.Background())
}

func (i StorageSourceManifestArgs) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestOutput).ToStorageSourceManifestPtrOutputWithContext(ctx)
}

// StorageSourceManifestPtrInput is an input type that accepts StorageSourceManifestArgs, StorageSourceManifestPtr and StorageSourceManifestPtrOutput values.
// You can construct a concrete instance of `StorageSourceManifestPtrInput` via:
//
//	        StorageSourceManifestArgs{...}
//
//	or:
//
//	        nil
type StorageSourceManifestPtrInput interface {
	pulumi.Input

	ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput
	ToStorageSourceManifestPtrOutputWithContext(context.Context) StorageSourceManifestPtrOutput
}

type storageSourceManifestPtrType StorageSourceManifestArgs

func StorageSourceManifestPtr(v *StorageSourceManifestArgs) StorageSourceManifestPtrInput {
	return (*storageSourceManifestPtrType)(v)
}

func (*storageSourceManifestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceManifest)(nil)).Elem()
}

func (i *storageSourceManifestPtrType) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return i.ToStorageSourceManifestPtrOutputWithContext(context.Background())
}

func (i *storageSourceManifestPtrType) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageSourceManifestPtrOutput)
}

// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
type StorageSourceManifestOutput struct{ *pulumi.OutputState }

func (StorageSourceManifestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceManifest)(nil)).Elem()
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestOutput() StorageSourceManifestOutput {
	return o
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestOutputWithContext(ctx context.Context) StorageSourceManifestOutput {
	return o
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return o.ToStorageSourceManifestPtrOutputWithContext(context.Background())
}

func (o StorageSourceManifestOutput) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorageSourceManifest) *StorageSourceManifest {
		return &v
	}).(StorageSourceManifestPtrOutput)
}

// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceManifestOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSourceManifest) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceManifestOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSourceManifest) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// Cloud Storage object containing the source manifest. This object must be a JSON file.
func (o StorageSourceManifestOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StorageSourceManifest) *string { return v.Object }).(pulumi.StringPtrOutput)
}

type StorageSourceManifestPtrOutput struct{ *pulumi.OutputState }

func (StorageSourceManifestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageSourceManifest)(nil)).Elem()
}

func (o StorageSourceManifestPtrOutput) ToStorageSourceManifestPtrOutput() StorageSourceManifestPtrOutput {
	return o
}

func (o StorageSourceManifestPtrOutput) ToStorageSourceManifestPtrOutputWithContext(ctx context.Context) StorageSourceManifestPtrOutput {
	return o
}

func (o StorageSourceManifestPtrOutput) Elem() StorageSourceManifestOutput {
	return o.ApplyT(func(v *StorageSourceManifest) StorageSourceManifest {
		if v != nil {
			return *v
		}
		var ret StorageSourceManifest
		return ret
	}).(StorageSourceManifestOutput)
}

// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceManifestPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifest) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceManifestPtrOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifest) *string {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage object containing the source manifest. This object must be a JSON file.
func (o StorageSourceManifestPtrOutput) Object() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageSourceManifest) *string {
		if v == nil {
			return nil
		}
		return v.Object
	}).(pulumi.StringPtrOutput)
}

// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
type StorageSourceManifestResponse struct {
	// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `pulumi:"bucket"`
	// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation string `pulumi:"generation"`
	// Cloud Storage object containing the source manifest. This object must be a JSON file.
	Object string `pulumi:"object"`
}

// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
type StorageSourceManifestResponseOutput struct{ *pulumi.OutputState }

func (StorageSourceManifestResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceManifestResponse)(nil)).Elem()
}

func (o StorageSourceManifestResponseOutput) ToStorageSourceManifestResponseOutput() StorageSourceManifestResponseOutput {
	return o
}

func (o StorageSourceManifestResponseOutput) ToStorageSourceManifestResponseOutputWithContext(ctx context.Context) StorageSourceManifestResponseOutput {
	return o
}

// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceManifestResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceManifestResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceManifestResponseOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceManifestResponse) string { return v.Generation }).(pulumi.StringOutput)
}

// Cloud Storage object containing the source manifest. This object must be a JSON file.
func (o StorageSourceManifestResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceManifestResponse) string { return v.Object }).(pulumi.StringOutput)
}

// Location of the source in an archive file in Cloud Storage.
type StorageSourceResponse struct {
	// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
	Bucket string `pulumi:"bucket"`
	// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
	Generation string `pulumi:"generation"`
	// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
	Object string `pulumi:"object"`
	// Optional. Option to specify the tool to fetch the source file for the build.
	SourceFetcher string `pulumi:"sourceFetcher"`
}

// Location of the source in an archive file in Cloud Storage.
type StorageSourceResponseOutput struct{ *pulumi.OutputState }

func (StorageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorageSourceResponse)(nil)).Elem()
}

func (o StorageSourceResponseOutput) ToStorageSourceResponseOutput() StorageSourceResponseOutput {
	return o
}

func (o StorageSourceResponseOutput) ToStorageSourceResponseOutputWithContext(ctx context.Context) StorageSourceResponseOutput {
	return o
}

// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
func (o StorageSourceResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
func (o StorageSourceResponseOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Generation }).(pulumi.StringOutput)
}

// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
func (o StorageSourceResponseOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.Object }).(pulumi.StringOutput)
}

// Optional. Option to specify the tool to fetch the source file for the build.
func (o StorageSourceResponseOutput) SourceFetcher() pulumi.StringOutput {
	return o.ApplyT(func(v StorageSourceResponse) string { return v.SourceFetcher }).(pulumi.StringOutput)
}

// Start and end times for a build execution phase.
type TimeSpanResponse struct {
	// End of time span.
	EndTime string `pulumi:"endTime"`
	// Start of time span.
	StartTime string `pulumi:"startTime"`
}

// Start and end times for a build execution phase.
type TimeSpanResponseOutput struct{ *pulumi.OutputState }

func (TimeSpanResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimeSpanResponse)(nil)).Elem()
}

func (o TimeSpanResponseOutput) ToTimeSpanResponseOutput() TimeSpanResponseOutput {
	return o
}

func (o TimeSpanResponseOutput) ToTimeSpanResponseOutputWithContext(ctx context.Context) TimeSpanResponseOutput {
	return o
}

// End of time span.
func (o TimeSpanResponseOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeSpanResponse) string { return v.EndTime }).(pulumi.StringOutput)
}

// Start of time span.
func (o TimeSpanResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TimeSpanResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

type TimeSpanResponseMapOutput struct{ *pulumi.OutputState }

func (TimeSpanResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TimeSpanResponse)(nil)).Elem()
}

func (o TimeSpanResponseMapOutput) ToTimeSpanResponseMapOutput() TimeSpanResponseMapOutput {
	return o
}

func (o TimeSpanResponseMapOutput) ToTimeSpanResponseMapOutputWithContext(ctx context.Context) TimeSpanResponseMapOutput {
	return o
}

func (o TimeSpanResponseMapOutput) MapIndex(k pulumi.StringInput) TimeSpanResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TimeSpanResponse {
		return vs[0].(map[string]TimeSpanResponse)[vs[1].(string)]
	}).(TimeSpanResponseOutput)
}

// A Maven artifact uploaded using the MavenArtifact directive.
type UploadedMavenArtifactResponse struct {
	// Hash types and values of the Maven Artifact.
	FileHashes FileHashesResponse `pulumi:"fileHashes"`
	// Stores timing information for pushing the specified artifact.
	PushTiming TimeSpanResponse `pulumi:"pushTiming"`
	// URI of the uploaded artifact.
	Uri string `pulumi:"uri"`
}

// A Maven artifact uploaded using the MavenArtifact directive.
type UploadedMavenArtifactResponseOutput struct{ *pulumi.OutputState }

func (UploadedMavenArtifactResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadedMavenArtifactResponse)(nil)).Elem()
}

func (o UploadedMavenArtifactResponseOutput) ToUploadedMavenArtifactResponseOutput() UploadedMavenArtifactResponseOutput {
	return o
}

func (o UploadedMavenArtifactResponseOutput) ToUploadedMavenArtifactResponseOutputWithContext(ctx context.Context) UploadedMavenArtifactResponseOutput {
	return o
}

// Hash types and values of the Maven Artifact.
func (o UploadedMavenArtifactResponseOutput) FileHashes() FileHashesResponseOutput {
	return o.ApplyT(func(v UploadedMavenArtifactResponse) FileHashesResponse { return v.FileHashes }).(FileHashesResponseOutput)
}

// Stores timing information for pushing the specified artifact.
func (o UploadedMavenArtifactResponseOutput) PushTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v UploadedMavenArtifactResponse) TimeSpanResponse { return v.PushTiming }).(TimeSpanResponseOutput)
}

// URI of the uploaded artifact.
func (o UploadedMavenArtifactResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UploadedMavenArtifactResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type UploadedMavenArtifactResponseArrayOutput struct{ *pulumi.OutputState }

func (UploadedMavenArtifactResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UploadedMavenArtifactResponse)(nil)).Elem()
}

func (o UploadedMavenArtifactResponseArrayOutput) ToUploadedMavenArtifactResponseArrayOutput() UploadedMavenArtifactResponseArrayOutput {
	return o
}

func (o UploadedMavenArtifactResponseArrayOutput) ToUploadedMavenArtifactResponseArrayOutputWithContext(ctx context.Context) UploadedMavenArtifactResponseArrayOutput {
	return o
}

func (o UploadedMavenArtifactResponseArrayOutput) Index(i pulumi.IntInput) UploadedMavenArtifactResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UploadedMavenArtifactResponse {
		return vs[0].([]UploadedMavenArtifactResponse)[vs[1].(int)]
	}).(UploadedMavenArtifactResponseOutput)
}

// An npm package uploaded to Artifact Registry using the NpmPackage directive.
type UploadedNpmPackageResponse struct {
	// Hash types and values of the npm package.
	FileHashes FileHashesResponse `pulumi:"fileHashes"`
	// Stores timing information for pushing the specified artifact.
	PushTiming TimeSpanResponse `pulumi:"pushTiming"`
	// URI of the uploaded npm package.
	Uri string `pulumi:"uri"`
}

// An npm package uploaded to Artifact Registry using the NpmPackage directive.
type UploadedNpmPackageResponseOutput struct{ *pulumi.OutputState }

func (UploadedNpmPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadedNpmPackageResponse)(nil)).Elem()
}

func (o UploadedNpmPackageResponseOutput) ToUploadedNpmPackageResponseOutput() UploadedNpmPackageResponseOutput {
	return o
}

func (o UploadedNpmPackageResponseOutput) ToUploadedNpmPackageResponseOutputWithContext(ctx context.Context) UploadedNpmPackageResponseOutput {
	return o
}

// Hash types and values of the npm package.
func (o UploadedNpmPackageResponseOutput) FileHashes() FileHashesResponseOutput {
	return o.ApplyT(func(v UploadedNpmPackageResponse) FileHashesResponse { return v.FileHashes }).(FileHashesResponseOutput)
}

// Stores timing information for pushing the specified artifact.
func (o UploadedNpmPackageResponseOutput) PushTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v UploadedNpmPackageResponse) TimeSpanResponse { return v.PushTiming }).(TimeSpanResponseOutput)
}

// URI of the uploaded npm package.
func (o UploadedNpmPackageResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UploadedNpmPackageResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type UploadedNpmPackageResponseArrayOutput struct{ *pulumi.OutputState }

func (UploadedNpmPackageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UploadedNpmPackageResponse)(nil)).Elem()
}

func (o UploadedNpmPackageResponseArrayOutput) ToUploadedNpmPackageResponseArrayOutput() UploadedNpmPackageResponseArrayOutput {
	return o
}

func (o UploadedNpmPackageResponseArrayOutput) ToUploadedNpmPackageResponseArrayOutputWithContext(ctx context.Context) UploadedNpmPackageResponseArrayOutput {
	return o
}

func (o UploadedNpmPackageResponseArrayOutput) Index(i pulumi.IntInput) UploadedNpmPackageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UploadedNpmPackageResponse {
		return vs[0].([]UploadedNpmPackageResponse)[vs[1].(int)]
	}).(UploadedNpmPackageResponseOutput)
}

// Artifact uploaded using the PythonPackage directive.
type UploadedPythonPackageResponse struct {
	// Hash types and values of the Python Artifact.
	FileHashes FileHashesResponse `pulumi:"fileHashes"`
	// Stores timing information for pushing the specified artifact.
	PushTiming TimeSpanResponse `pulumi:"pushTiming"`
	// URI of the uploaded artifact.
	Uri string `pulumi:"uri"`
}

// Artifact uploaded using the PythonPackage directive.
type UploadedPythonPackageResponseOutput struct{ *pulumi.OutputState }

func (UploadedPythonPackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UploadedPythonPackageResponse)(nil)).Elem()
}

func (o UploadedPythonPackageResponseOutput) ToUploadedPythonPackageResponseOutput() UploadedPythonPackageResponseOutput {
	return o
}

func (o UploadedPythonPackageResponseOutput) ToUploadedPythonPackageResponseOutputWithContext(ctx context.Context) UploadedPythonPackageResponseOutput {
	return o
}

// Hash types and values of the Python Artifact.
func (o UploadedPythonPackageResponseOutput) FileHashes() FileHashesResponseOutput {
	return o.ApplyT(func(v UploadedPythonPackageResponse) FileHashesResponse { return v.FileHashes }).(FileHashesResponseOutput)
}

// Stores timing information for pushing the specified artifact.
func (o UploadedPythonPackageResponseOutput) PushTiming() TimeSpanResponseOutput {
	return o.ApplyT(func(v UploadedPythonPackageResponse) TimeSpanResponse { return v.PushTiming }).(TimeSpanResponseOutput)
}

// URI of the uploaded artifact.
func (o UploadedPythonPackageResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v UploadedPythonPackageResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type UploadedPythonPackageResponseArrayOutput struct{ *pulumi.OutputState }

func (UploadedPythonPackageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UploadedPythonPackageResponse)(nil)).Elem()
}

func (o UploadedPythonPackageResponseArrayOutput) ToUploadedPythonPackageResponseArrayOutput() UploadedPythonPackageResponseArrayOutput {
	return o
}

func (o UploadedPythonPackageResponseArrayOutput) ToUploadedPythonPackageResponseArrayOutputWithContext(ctx context.Context) UploadedPythonPackageResponseArrayOutput {
	return o
}

func (o UploadedPythonPackageResponseArrayOutput) Index(i pulumi.IntInput) UploadedPythonPackageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UploadedPythonPackageResponse {
		return vs[0].([]UploadedPythonPackageResponse)[vs[1].(int)]
	}).(UploadedPythonPackageResponseOutput)
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type Volume struct {
	// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
	Name *string `pulumi:"name"`
	// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
	Path *string `pulumi:"path"`
}

// VolumeInput is an input type that accepts VolumeArgs and VolumeOutput values.
// You can construct a concrete instance of `VolumeInput` via:
//
//	VolumeArgs{...}
type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(context.Context) VolumeOutput
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeArgs struct {
	// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (i VolumeArgs) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i VolumeArgs) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
func (o VolumeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
func (o VolumeOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Volume) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Volume {
		return vs[0].([]Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeResponse struct {
	// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
	Name string `pulumi:"name"`
	// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
	Path string `pulumi:"path"`
}

// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
type VolumeResponseOutput struct{ *pulumi.OutputState }

func (VolumeResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseOutput) ToVolumeResponseOutput() VolumeResponseOutput {
	return o
}

func (o VolumeResponseOutput) ToVolumeResponseOutputWithContext(ctx context.Context) VolumeResponseOutput {
	return o
}

// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
func (o VolumeResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
func (o VolumeResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v VolumeResponse) string { return v.Path }).(pulumi.StringOutput)
}

type VolumeResponseArrayOutput struct{ *pulumi.OutputState }

func (VolumeResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeResponse)(nil)).Elem()
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutput() VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) ToVolumeResponseArrayOutputWithContext(ctx context.Context) VolumeResponseArrayOutput {
	return o
}

func (o VolumeResponseArrayOutput) Index(i pulumi.IntInput) VolumeResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeResponse {
		return vs[0].([]VolumeResponse)[vs[1].(int)]
	}).(VolumeResponseOutput)
}

// A non-fatal problem encountered during the execution of the build.
type WarningResponse struct {
	// The priority for this warning.
	Priority string `pulumi:"priority"`
	// Explanation of the warning generated.
	Text string `pulumi:"text"`
}

// A non-fatal problem encountered during the execution of the build.
type WarningResponseOutput struct{ *pulumi.OutputState }

func (WarningResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WarningResponse)(nil)).Elem()
}

func (o WarningResponseOutput) ToWarningResponseOutput() WarningResponseOutput {
	return o
}

func (o WarningResponseOutput) ToWarningResponseOutputWithContext(ctx context.Context) WarningResponseOutput {
	return o
}

// The priority for this warning.
func (o WarningResponseOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v WarningResponse) string { return v.Priority }).(pulumi.StringOutput)
}

// Explanation of the warning generated.
func (o WarningResponseOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v WarningResponse) string { return v.Text }).(pulumi.StringOutput)
}

type WarningResponseArrayOutput struct{ *pulumi.OutputState }

func (WarningResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WarningResponse)(nil)).Elem()
}

func (o WarningResponseArrayOutput) ToWarningResponseArrayOutput() WarningResponseArrayOutput {
	return o
}

func (o WarningResponseArrayOutput) ToWarningResponseArrayOutputWithContext(ctx context.Context) WarningResponseArrayOutput {
	return o
}

func (o WarningResponseArrayOutput) Index(i pulumi.IntInput) WarningResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WarningResponse {
		return vs[0].([]WarningResponse)[vs[1].(int)]
	}).(WarningResponseOutput)
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
type WebhookConfig struct {
	// Resource name for the secret required as a URL parameter.
	Secret string `pulumi:"secret"`
	// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
	State *WebhookConfigState `pulumi:"state"`
}

// WebhookConfigInput is an input type that accepts WebhookConfigArgs and WebhookConfigOutput values.
// You can construct a concrete instance of `WebhookConfigInput` via:
//
//	WebhookConfigArgs{...}
type WebhookConfigInput interface {
	pulumi.Input

	ToWebhookConfigOutput() WebhookConfigOutput
	ToWebhookConfigOutputWithContext(context.Context) WebhookConfigOutput
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
type WebhookConfigArgs struct {
	// Resource name for the secret required as a URL parameter.
	Secret pulumi.StringInput `pulumi:"secret"`
	// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
	State WebhookConfigStatePtrInput `pulumi:"state"`
}

func (WebhookConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookConfig)(nil)).Elem()
}

func (i WebhookConfigArgs) ToWebhookConfigOutput() WebhookConfigOutput {
	return i.ToWebhookConfigOutputWithContext(context.Background())
}

func (i WebhookConfigArgs) ToWebhookConfigOutputWithContext(ctx context.Context) WebhookConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookConfigOutput)
}

func (i WebhookConfigArgs) ToWebhookConfigPtrOutput() WebhookConfigPtrOutput {
	return i.ToWebhookConfigPtrOutputWithContext(context.Background())
}

func (i WebhookConfigArgs) ToWebhookConfigPtrOutputWithContext(ctx context.Context) WebhookConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookConfigOutput).ToWebhookConfigPtrOutputWithContext(ctx)
}

// WebhookConfigPtrInput is an input type that accepts WebhookConfigArgs, WebhookConfigPtr and WebhookConfigPtrOutput values.
// You can construct a concrete instance of `WebhookConfigPtrInput` via:
//
//	        WebhookConfigArgs{...}
//
//	or:
//
//	        nil
type WebhookConfigPtrInput interface {
	pulumi.Input

	ToWebhookConfigPtrOutput() WebhookConfigPtrOutput
	ToWebhookConfigPtrOutputWithContext(context.Context) WebhookConfigPtrOutput
}

type webhookConfigPtrType WebhookConfigArgs

func WebhookConfigPtr(v *WebhookConfigArgs) WebhookConfigPtrInput {
	return (*webhookConfigPtrType)(v)
}

func (*webhookConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookConfig)(nil)).Elem()
}

func (i *webhookConfigPtrType) ToWebhookConfigPtrOutput() WebhookConfigPtrOutput {
	return i.ToWebhookConfigPtrOutputWithContext(context.Background())
}

func (i *webhookConfigPtrType) ToWebhookConfigPtrOutputWithContext(ctx context.Context) WebhookConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookConfigPtrOutput)
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
type WebhookConfigOutput struct{ *pulumi.OutputState }

func (WebhookConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookConfig)(nil)).Elem()
}

func (o WebhookConfigOutput) ToWebhookConfigOutput() WebhookConfigOutput {
	return o
}

func (o WebhookConfigOutput) ToWebhookConfigOutputWithContext(ctx context.Context) WebhookConfigOutput {
	return o
}

func (o WebhookConfigOutput) ToWebhookConfigPtrOutput() WebhookConfigPtrOutput {
	return o.ToWebhookConfigPtrOutputWithContext(context.Background())
}

func (o WebhookConfigOutput) ToWebhookConfigPtrOutputWithContext(ctx context.Context) WebhookConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WebhookConfig) *WebhookConfig {
		return &v
	}).(WebhookConfigPtrOutput)
}

// Resource name for the secret required as a URL parameter.
func (o WebhookConfigOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookConfig) string { return v.Secret }).(pulumi.StringOutput)
}

// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
func (o WebhookConfigOutput) State() WebhookConfigStatePtrOutput {
	return o.ApplyT(func(v WebhookConfig) *WebhookConfigState { return v.State }).(WebhookConfigStatePtrOutput)
}

type WebhookConfigPtrOutput struct{ *pulumi.OutputState }

func (WebhookConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WebhookConfig)(nil)).Elem()
}

func (o WebhookConfigPtrOutput) ToWebhookConfigPtrOutput() WebhookConfigPtrOutput {
	return o
}

func (o WebhookConfigPtrOutput) ToWebhookConfigPtrOutputWithContext(ctx context.Context) WebhookConfigPtrOutput {
	return o
}

func (o WebhookConfigPtrOutput) Elem() WebhookConfigOutput {
	return o.ApplyT(func(v *WebhookConfig) WebhookConfig {
		if v != nil {
			return *v
		}
		var ret WebhookConfig
		return ret
	}).(WebhookConfigOutput)
}

// Resource name for the secret required as a URL parameter.
func (o WebhookConfigPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WebhookConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
func (o WebhookConfigPtrOutput) State() WebhookConfigStatePtrOutput {
	return o.ApplyT(func(v *WebhookConfig) *WebhookConfigState {
		if v == nil {
			return nil
		}
		return v.State
	}).(WebhookConfigStatePtrOutput)
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
type WebhookConfigResponse struct {
	// Resource name for the secret required as a URL parameter.
	Secret string `pulumi:"secret"`
	// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
	State string `pulumi:"state"`
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
type WebhookConfigResponseOutput struct{ *pulumi.OutputState }

func (WebhookConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WebhookConfigResponse)(nil)).Elem()
}

func (o WebhookConfigResponseOutput) ToWebhookConfigResponseOutput() WebhookConfigResponseOutput {
	return o
}

func (o WebhookConfigResponseOutput) ToWebhookConfigResponseOutputWithContext(ctx context.Context) WebhookConfigResponseOutput {
	return o
}

// Resource name for the secret required as a URL parameter.
func (o WebhookConfigResponseOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookConfigResponse) string { return v.Secret }).(pulumi.StringOutput)
}

// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
func (o WebhookConfigResponseOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v WebhookConfigResponse) string { return v.State }).(pulumi.StringOutput)
}

// Defines the configuration to be used for creating workers in the pool.
type WorkerConfig struct {
	// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.
	DiskSizeGb *string `pulumi:"diskSizeGb"`
	// Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
	MachineType *string `pulumi:"machineType"`
}

// WorkerConfigInput is an input type that accepts WorkerConfigArgs and WorkerConfigOutput values.
// You can construct a concrete instance of `WorkerConfigInput` via:
//
//	WorkerConfigArgs{...}
type WorkerConfigInput interface {
	pulumi.Input

	ToWorkerConfigOutput() WorkerConfigOutput
	ToWorkerConfigOutputWithContext(context.Context) WorkerConfigOutput
}

// Defines the configuration to be used for creating workers in the pool.
type WorkerConfigArgs struct {
	// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.
	DiskSizeGb pulumi.StringPtrInput `pulumi:"diskSizeGb"`
	// Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
}

func (WorkerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerConfig)(nil)).Elem()
}

func (i WorkerConfigArgs) ToWorkerConfigOutput() WorkerConfigOutput {
	return i.ToWorkerConfigOutputWithContext(context.Background())
}

func (i WorkerConfigArgs) ToWorkerConfigOutputWithContext(ctx context.Context) WorkerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerConfigOutput)
}

func (i WorkerConfigArgs) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return i.ToWorkerConfigPtrOutputWithContext(context.Background())
}

func (i WorkerConfigArgs) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerConfigOutput).ToWorkerConfigPtrOutputWithContext(ctx)
}

// WorkerConfigPtrInput is an input type that accepts WorkerConfigArgs, WorkerConfigPtr and WorkerConfigPtrOutput values.
// You can construct a concrete instance of `WorkerConfigPtrInput` via:
//
//	        WorkerConfigArgs{...}
//
//	or:
//
//	        nil
type WorkerConfigPtrInput interface {
	pulumi.Input

	ToWorkerConfigPtrOutput() WorkerConfigPtrOutput
	ToWorkerConfigPtrOutputWithContext(context.Context) WorkerConfigPtrOutput
}

type workerConfigPtrType WorkerConfigArgs

func WorkerConfigPtr(v *WorkerConfigArgs) WorkerConfigPtrInput {
	return (*workerConfigPtrType)(v)
}

func (*workerConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerConfig)(nil)).Elem()
}

func (i *workerConfigPtrType) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return i.ToWorkerConfigPtrOutputWithContext(context.Background())
}

func (i *workerConfigPtrType) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerConfigPtrOutput)
}

// Defines the configuration to be used for creating workers in the pool.
type WorkerConfigOutput struct{ *pulumi.OutputState }

func (WorkerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerConfig)(nil)).Elem()
}

func (o WorkerConfigOutput) ToWorkerConfigOutput() WorkerConfigOutput {
	return o
}

func (o WorkerConfigOutput) ToWorkerConfigOutputWithContext(ctx context.Context) WorkerConfigOutput {
	return o
}

func (o WorkerConfigOutput) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return o.ToWorkerConfigPtrOutputWithContext(context.Background())
}

func (o WorkerConfigOutput) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkerConfig) *WorkerConfig {
		return &v
	}).(WorkerConfigPtrOutput)
}

// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.
func (o WorkerConfigOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerConfig) *string { return v.DiskSizeGb }).(pulumi.StringPtrOutput)
}

// Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
func (o WorkerConfigOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerConfig) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

type WorkerConfigPtrOutput struct{ *pulumi.OutputState }

func (WorkerConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerConfig)(nil)).Elem()
}

func (o WorkerConfigPtrOutput) ToWorkerConfigPtrOutput() WorkerConfigPtrOutput {
	return o
}

func (o WorkerConfigPtrOutput) ToWorkerConfigPtrOutputWithContext(ctx context.Context) WorkerConfigPtrOutput {
	return o
}

func (o WorkerConfigPtrOutput) Elem() WorkerConfigOutput {
	return o.ApplyT(func(v *WorkerConfig) WorkerConfig {
		if v != nil {
			return *v
		}
		var ret WorkerConfig
		return ret
	}).(WorkerConfigOutput)
}

// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.
func (o WorkerConfigPtrOutput) DiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerConfig) *string {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
func (o WorkerConfigPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerConfig) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Defines the configuration to be used for creating workers in the pool.
type WorkerConfigResponse struct {
	// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.
	DiskSizeGb string `pulumi:"diskSizeGb"`
	// Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
	MachineType string `pulumi:"machineType"`
}

// Defines the configuration to be used for creating workers in the pool.
type WorkerConfigResponseOutput struct{ *pulumi.OutputState }

func (WorkerConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerConfigResponse)(nil)).Elem()
}

func (o WorkerConfigResponseOutput) ToWorkerConfigResponseOutput() WorkerConfigResponseOutput {
	return o
}

func (o WorkerConfigResponseOutput) ToWorkerConfigResponseOutputWithContext(ctx context.Context) WorkerConfigResponseOutput {
	return o
}

// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.
func (o WorkerConfigResponseOutput) DiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerConfigResponse) string { return v.DiskSizeGb }).(pulumi.StringOutput)
}

// Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
func (o WorkerConfigResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerConfigResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalConfigInput)(nil)).Elem(), ApprovalConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApprovalConfigPtrInput)(nil)).Elem(), ApprovalConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactObjectsInput)(nil)).Elem(), ArtifactObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactObjectsPtrInput)(nil)).Elem(), ArtifactObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactsInput)(nil)).Elem(), ArtifactsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArtifactsPtrInput)(nil)).Elem(), ArtifactsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BitbucketServerSecretsInput)(nil)).Elem(), BitbucketServerSecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BitbucketServerTriggerConfigInput)(nil)).Elem(), BitbucketServerTriggerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BitbucketServerTriggerConfigPtrInput)(nil)).Elem(), BitbucketServerTriggerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildTypeInput)(nil)).Elem(), BuildTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildTypePtrInput)(nil)).Elem(), BuildTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildOptionsInput)(nil)).Elem(), BuildOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildOptionsPtrInput)(nil)).Elem(), BuildOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildStepInput)(nil)).Elem(), BuildStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BuildStepArrayInput)(nil)).Elem(), BuildStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectedRepositoryInput)(nil)).Elem(), ConnectedRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectedRepositoryPtrInput)(nil)).Elem(), ConnectedRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitFileSourceInput)(nil)).Elem(), GitFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitFileSourcePtrInput)(nil)).Elem(), GitFileSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubEnterpriseSecretsInput)(nil)).Elem(), GitHubEnterpriseSecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubEnterpriseSecretsPtrInput)(nil)).Elem(), GitHubEnterpriseSecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubEventsConfigInput)(nil)).Elem(), GitHubEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitHubEventsConfigPtrInput)(nil)).Elem(), GitHubEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabEnterpriseConfigInput)(nil)).Elem(), GitLabEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabEnterpriseConfigPtrInput)(nil)).Elem(), GitLabEnterpriseConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabEventsConfigInput)(nil)).Elem(), GitLabEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabEventsConfigPtrInput)(nil)).Elem(), GitLabEventsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabRepositoryIdInput)(nil)).Elem(), GitLabRepositoryIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabRepositoryIdArrayInput)(nil)).Elem(), GitLabRepositoryIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabSecretsInput)(nil)).Elem(), GitLabSecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepoSourceInput)(nil)).Elem(), GitRepoSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitRepoSourcePtrInput)(nil)).Elem(), GitRepoSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSourceInput)(nil)).Elem(), GitSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GitSourcePtrInput)(nil)).Elem(), GitSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InlineSecretInput)(nil)).Elem(), InlineSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InlineSecretArrayInput)(nil)).Elem(), InlineSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenArtifactInput)(nil)).Elem(), MavenArtifactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MavenArtifactArrayInput)(nil)).Elem(), MavenArtifactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkConfigPtrInput)(nil)).Elem(), NetworkConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NpmPackageInput)(nil)).Elem(), NpmPackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NpmPackageArrayInput)(nil)).Elem(), NpmPackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolOptionInput)(nil)).Elem(), PoolOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolOptionPtrInput)(nil)).Elem(), PoolOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatePoolV1ConfigInput)(nil)).Elem(), PrivatePoolV1ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivatePoolV1ConfigPtrInput)(nil)).Elem(), PrivatePoolV1ConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubConfigInput)(nil)).Elem(), PubsubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubsubConfigPtrInput)(nil)).Elem(), PubsubConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullRequestFilterInput)(nil)).Elem(), PullRequestFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PullRequestFilterPtrInput)(nil)).Elem(), PullRequestFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushFilterInput)(nil)).Elem(), PushFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PushFilterPtrInput)(nil)).Elem(), PushFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PythonPackageInput)(nil)).Elem(), PythonPackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PythonPackageArrayInput)(nil)).Elem(), PythonPackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoSourceInput)(nil)).Elem(), RepoSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepoSourcePtrInput)(nil)).Elem(), RepoSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryEventConfigInput)(nil)).Elem(), RepositoryEventConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryEventConfigPtrInput)(nil)).Elem(), RepositoryEventConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), SecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretArrayInput)(nil)).Elem(), SecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretManagerSecretInput)(nil)).Elem(), SecretManagerSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretManagerSecretArrayInput)(nil)).Elem(), SecretManagerSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsInput)(nil)).Elem(), SecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsPtrInput)(nil)).Elem(), SecretsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDirectoryConfigInput)(nil)).Elem(), ServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDirectoryConfigPtrInput)(nil)).Elem(), ServiceDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourcePtrInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSourceInput)(nil)).Elem(), StorageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSourcePtrInput)(nil)).Elem(), StorageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSourceManifestInput)(nil)).Elem(), StorageSourceManifestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageSourceManifestPtrInput)(nil)).Elem(), StorageSourceManifestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), VolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookConfigInput)(nil)).Elem(), WebhookConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookConfigPtrInput)(nil)).Elem(), WebhookConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerConfigInput)(nil)).Elem(), WorkerConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerConfigPtrInput)(nil)).Elem(), WorkerConfigArgs{})
	pulumi.RegisterOutputType(ApprovalConfigOutput{})
	pulumi.RegisterOutputType(ApprovalConfigPtrOutput{})
	pulumi.RegisterOutputType(ApprovalConfigResponseOutput{})
	pulumi.RegisterOutputType(ApprovalResultResponseOutput{})
	pulumi.RegisterOutputType(ArtifactObjectsOutput{})
	pulumi.RegisterOutputType(ArtifactObjectsPtrOutput{})
	pulumi.RegisterOutputType(ArtifactObjectsResponseOutput{})
	pulumi.RegisterOutputType(ArtifactsOutput{})
	pulumi.RegisterOutputType(ArtifactsPtrOutput{})
	pulumi.RegisterOutputType(ArtifactsResponseOutput{})
	pulumi.RegisterOutputType(BitbucketServerConfigResponseOutput{})
	pulumi.RegisterOutputType(BitbucketServerRepositoryIdResponseOutput{})
	pulumi.RegisterOutputType(BitbucketServerRepositoryIdResponseArrayOutput{})
	pulumi.RegisterOutputType(BitbucketServerSecretsOutput{})
	pulumi.RegisterOutputType(BitbucketServerSecretsResponseOutput{})
	pulumi.RegisterOutputType(BitbucketServerTriggerConfigOutput{})
	pulumi.RegisterOutputType(BitbucketServerTriggerConfigPtrOutput{})
	pulumi.RegisterOutputType(BitbucketServerTriggerConfigResponseOutput{})
	pulumi.RegisterOutputType(BuildTypeOutput{})
	pulumi.RegisterOutputType(BuildTypePtrOutput{})
	pulumi.RegisterOutputType(BuildApprovalResponseOutput{})
	pulumi.RegisterOutputType(BuildOptionsOutput{})
	pulumi.RegisterOutputType(BuildOptionsPtrOutput{})
	pulumi.RegisterOutputType(BuildOptionsResponseOutput{})
	pulumi.RegisterOutputType(BuildResponseOutput{})
	pulumi.RegisterOutputType(BuildStepOutput{})
	pulumi.RegisterOutputType(BuildStepArrayOutput{})
	pulumi.RegisterOutputType(BuildStepResponseOutput{})
	pulumi.RegisterOutputType(BuildStepResponseArrayOutput{})
	pulumi.RegisterOutputType(BuiltImageResponseOutput{})
	pulumi.RegisterOutputType(BuiltImageResponseArrayOutput{})
	pulumi.RegisterOutputType(ConnectedRepositoryOutput{})
	pulumi.RegisterOutputType(ConnectedRepositoryPtrOutput{})
	pulumi.RegisterOutputType(ConnectedRepositoryResponseOutput{})
	pulumi.RegisterOutputType(FailureInfoResponseOutput{})
	pulumi.RegisterOutputType(FileHashesResponseOutput{})
	pulumi.RegisterOutputType(FileHashesResponseMapOutput{})
	pulumi.RegisterOutputType(GitFileSourceOutput{})
	pulumi.RegisterOutputType(GitFileSourcePtrOutput{})
	pulumi.RegisterOutputType(GitFileSourceResponseOutput{})
	pulumi.RegisterOutputType(GitHubEnterpriseSecretsOutput{})
	pulumi.RegisterOutputType(GitHubEnterpriseSecretsPtrOutput{})
	pulumi.RegisterOutputType(GitHubEnterpriseSecretsResponseOutput{})
	pulumi.RegisterOutputType(GitHubEventsConfigOutput{})
	pulumi.RegisterOutputType(GitHubEventsConfigPtrOutput{})
	pulumi.RegisterOutputType(GitHubEventsConfigResponseOutput{})
	pulumi.RegisterOutputType(GitLabConfigResponseOutput{})
	pulumi.RegisterOutputType(GitLabEnterpriseConfigOutput{})
	pulumi.RegisterOutputType(GitLabEnterpriseConfigPtrOutput{})
	pulumi.RegisterOutputType(GitLabEnterpriseConfigResponseOutput{})
	pulumi.RegisterOutputType(GitLabEventsConfigOutput{})
	pulumi.RegisterOutputType(GitLabEventsConfigPtrOutput{})
	pulumi.RegisterOutputType(GitLabEventsConfigResponseOutput{})
	pulumi.RegisterOutputType(GitLabRepositoryIdOutput{})
	pulumi.RegisterOutputType(GitLabRepositoryIdArrayOutput{})
	pulumi.RegisterOutputType(GitLabRepositoryIdResponseOutput{})
	pulumi.RegisterOutputType(GitLabRepositoryIdResponseArrayOutput{})
	pulumi.RegisterOutputType(GitLabSecretsOutput{})
	pulumi.RegisterOutputType(GitLabSecretsResponseOutput{})
	pulumi.RegisterOutputType(GitRepoSourceOutput{})
	pulumi.RegisterOutputType(GitRepoSourcePtrOutput{})
	pulumi.RegisterOutputType(GitRepoSourceResponseOutput{})
	pulumi.RegisterOutputType(GitSourceOutput{})
	pulumi.RegisterOutputType(GitSourcePtrOutput{})
	pulumi.RegisterOutputType(GitSourceResponseOutput{})
	pulumi.RegisterOutputType(HashResponseOutput{})
	pulumi.RegisterOutputType(HashResponseArrayOutput{})
	pulumi.RegisterOutputType(InlineSecretOutput{})
	pulumi.RegisterOutputType(InlineSecretArrayOutput{})
	pulumi.RegisterOutputType(InlineSecretResponseOutput{})
	pulumi.RegisterOutputType(InlineSecretResponseArrayOutput{})
	pulumi.RegisterOutputType(MavenArtifactOutput{})
	pulumi.RegisterOutputType(MavenArtifactArrayOutput{})
	pulumi.RegisterOutputType(MavenArtifactResponseOutput{})
	pulumi.RegisterOutputType(MavenArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(NetworkConfigOutput{})
	pulumi.RegisterOutputType(NetworkConfigPtrOutput{})
	pulumi.RegisterOutputType(NetworkConfigResponseOutput{})
	pulumi.RegisterOutputType(NpmPackageOutput{})
	pulumi.RegisterOutputType(NpmPackageArrayOutput{})
	pulumi.RegisterOutputType(NpmPackageResponseOutput{})
	pulumi.RegisterOutputType(NpmPackageResponseArrayOutput{})
	pulumi.RegisterOutputType(PoolOptionOutput{})
	pulumi.RegisterOutputType(PoolOptionPtrOutput{})
	pulumi.RegisterOutputType(PoolOptionResponseOutput{})
	pulumi.RegisterOutputType(PrivatePoolV1ConfigOutput{})
	pulumi.RegisterOutputType(PrivatePoolV1ConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivatePoolV1ConfigResponseOutput{})
	pulumi.RegisterOutputType(PubsubConfigOutput{})
	pulumi.RegisterOutputType(PubsubConfigPtrOutput{})
	pulumi.RegisterOutputType(PubsubConfigResponseOutput{})
	pulumi.RegisterOutputType(PullRequestFilterOutput{})
	pulumi.RegisterOutputType(PullRequestFilterPtrOutput{})
	pulumi.RegisterOutputType(PullRequestFilterResponseOutput{})
	pulumi.RegisterOutputType(PushFilterOutput{})
	pulumi.RegisterOutputType(PushFilterPtrOutput{})
	pulumi.RegisterOutputType(PushFilterResponseOutput{})
	pulumi.RegisterOutputType(PythonPackageOutput{})
	pulumi.RegisterOutputType(PythonPackageArrayOutput{})
	pulumi.RegisterOutputType(PythonPackageResponseOutput{})
	pulumi.RegisterOutputType(PythonPackageResponseArrayOutput{})
	pulumi.RegisterOutputType(RepoSourceOutput{})
	pulumi.RegisterOutputType(RepoSourcePtrOutput{})
	pulumi.RegisterOutputType(RepoSourceResponseOutput{})
	pulumi.RegisterOutputType(RepositoryEventConfigOutput{})
	pulumi.RegisterOutputType(RepositoryEventConfigPtrOutput{})
	pulumi.RegisterOutputType(RepositoryEventConfigResponseOutput{})
	pulumi.RegisterOutputType(ResultsResponseOutput{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretArrayOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretResponseOutput{})
	pulumi.RegisterOutputType(SecretManagerSecretResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretResponseOutput{})
	pulumi.RegisterOutputType(SecretResponseArrayOutput{})
	pulumi.RegisterOutputType(SecretsOutput{})
	pulumi.RegisterOutputType(SecretsPtrOutput{})
	pulumi.RegisterOutputType(SecretsResponseOutput{})
	pulumi.RegisterOutputType(ServiceDirectoryConfigOutput{})
	pulumi.RegisterOutputType(ServiceDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(ServiceDirectoryConfigResponseOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
	pulumi.RegisterOutputType(SourceProvenanceResponseOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
	pulumi.RegisterOutputType(StorageSourceOutput{})
	pulumi.RegisterOutputType(StorageSourcePtrOutput{})
	pulumi.RegisterOutputType(StorageSourceManifestOutput{})
	pulumi.RegisterOutputType(StorageSourceManifestPtrOutput{})
	pulumi.RegisterOutputType(StorageSourceManifestResponseOutput{})
	pulumi.RegisterOutputType(StorageSourceResponseOutput{})
	pulumi.RegisterOutputType(TimeSpanResponseOutput{})
	pulumi.RegisterOutputType(TimeSpanResponseMapOutput{})
	pulumi.RegisterOutputType(UploadedMavenArtifactResponseOutput{})
	pulumi.RegisterOutputType(UploadedMavenArtifactResponseArrayOutput{})
	pulumi.RegisterOutputType(UploadedNpmPackageResponseOutput{})
	pulumi.RegisterOutputType(UploadedNpmPackageResponseArrayOutput{})
	pulumi.RegisterOutputType(UploadedPythonPackageResponseOutput{})
	pulumi.RegisterOutputType(UploadedPythonPackageResponseArrayOutput{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeResponseOutput{})
	pulumi.RegisterOutputType(VolumeResponseArrayOutput{})
	pulumi.RegisterOutputType(WarningResponseOutput{})
	pulumi.RegisterOutputType(WarningResponseArrayOutput{})
	pulumi.RegisterOutputType(WebhookConfigOutput{})
	pulumi.RegisterOutputType(WebhookConfigPtrOutput{})
	pulumi.RegisterOutputType(WebhookConfigResponseOutput{})
	pulumi.RegisterOutputType(WorkerConfigOutput{})
	pulumi.RegisterOutputType(WorkerConfigPtrOutput{})
	pulumi.RegisterOutputType(WorkerConfigResponseOutput{})
}
