// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns information about a `BuildTrigger`. This API is experimental.
func LookupTrigger(ctx *pulumi.Context, args *LookupTriggerArgs, opts ...pulumi.InvokeOption) (*LookupTriggerResult, error) {
	var rv LookupTriggerResult
	err := ctx.Invoke("google-native:cloudbuild/v1:getTrigger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTriggerArgs struct {
	Location  string  `pulumi:"location"`
	Project   *string `pulumi:"project"`
	ProjectId string  `pulumi:"projectId"`
	TriggerId string  `pulumi:"triggerId"`
}

type LookupTriggerResult struct {
	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	ApprovalConfig ApprovalConfigResponse `pulumi:"approvalConfig"`
	// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
	Autodetect bool `pulumi:"autodetect"`
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	BitbucketServerTriggerConfig BitbucketServerTriggerConfigResponse `pulumi:"bitbucketServerTriggerConfig"`
	// Contents of the build template.
	Build BuildResponse `pulumi:"build"`
	// Time when the trigger was created.
	CreateTime string `pulumi:"createTime"`
	// Human-readable description of this trigger.
	Description string `pulumi:"description"`
	// If true, the trigger will never automatically execute a build.
	Disabled bool `pulumi:"disabled"`
	// EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
	EventType string `pulumi:"eventType"`
	// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
	Filename string `pulumi:"filename"`
	// A Common Expression Language string.
	Filter string `pulumi:"filter"`
	// The file source describing the local or remote Build template.
	GitFileSource GitFileSourceResponse `pulumi:"gitFileSource"`
	// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
	Github GitHubEventsConfigResponse `pulumi:"github"`
	// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
	IgnoredFiles []string `pulumi:"ignoredFiles"`
	// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
	IncludedFiles []string `pulumi:"includedFiles"`
	// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	Name string `pulumi:"name"`
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
	PubsubConfig PubsubConfigResponse `pulumi:"pubsubConfig"`
	// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
	ResourceName string `pulumi:"resourceName"`
	// The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
	ServiceAccount string `pulumi:"serviceAccount"`
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	SourceToBuild GitRepoSourceResponse `pulumi:"sourceToBuild"`
	// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `BuildTrigger`
	Tags []string `pulumi:"tags"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
	TriggerTemplate RepoSourceResponse `pulumi:"triggerTemplate"`
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
	WebhookConfig WebhookConfigResponse `pulumi:"webhookConfig"`
}

func LookupTriggerOutput(ctx *pulumi.Context, args LookupTriggerOutputArgs, opts ...pulumi.InvokeOption) LookupTriggerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTriggerResult, error) {
			args := v.(LookupTriggerArgs)
			r, err := LookupTrigger(ctx, &args, opts...)
			return *r, err
		}).(LookupTriggerResultOutput)
}

type LookupTriggerOutputArgs struct {
	Location  pulumi.StringInput    `pulumi:"location"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	ProjectId pulumi.StringInput    `pulumi:"projectId"`
	TriggerId pulumi.StringInput    `pulumi:"triggerId"`
}

func (LookupTriggerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerArgs)(nil)).Elem()
}

type LookupTriggerResultOutput struct{ *pulumi.OutputState }

func (LookupTriggerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTriggerResult)(nil)).Elem()
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutput() LookupTriggerResultOutput {
	return o
}

func (o LookupTriggerResultOutput) ToLookupTriggerResultOutputWithContext(ctx context.Context) LookupTriggerResultOutput {
	return o
}

// Configuration for manual approval to start a build invocation of this BuildTrigger.
func (o LookupTriggerResultOutput) ApprovalConfig() ApprovalConfigResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) ApprovalConfigResponse { return v.ApprovalConfig }).(ApprovalConfigResponseOutput)
}

// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
func (o LookupTriggerResultOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTriggerResult) bool { return v.Autodetect }).(pulumi.BoolOutput)
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
func (o LookupTriggerResultOutput) BitbucketServerTriggerConfig() BitbucketServerTriggerConfigResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) BitbucketServerTriggerConfigResponse {
		return v.BitbucketServerTriggerConfig
	}).(BitbucketServerTriggerConfigResponseOutput)
}

// Contents of the build template.
func (o LookupTriggerResultOutput) Build() BuildResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) BuildResponse { return v.Build }).(BuildResponseOutput)
}

// Time when the trigger was created.
func (o LookupTriggerResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Human-readable description of this trigger.
func (o LookupTriggerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Description }).(pulumi.StringOutput)
}

// If true, the trigger will never automatically execute a build.
func (o LookupTriggerResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTriggerResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
func (o LookupTriggerResultOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.EventType }).(pulumi.StringOutput)
}

// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
func (o LookupTriggerResultOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Filename }).(pulumi.StringOutput)
}

// A Common Expression Language string.
func (o LookupTriggerResultOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Filter }).(pulumi.StringOutput)
}

// The file source describing the local or remote Build template.
func (o LookupTriggerResultOutput) GitFileSource() GitFileSourceResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) GitFileSourceResponse { return v.GitFileSource }).(GitFileSourceResponseOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
func (o LookupTriggerResultOutput) Github() GitHubEventsConfigResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) GitHubEventsConfigResponse { return v.Github }).(GitHubEventsConfigResponseOutput)
}

// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
func (o LookupTriggerResultOutput) IgnoredFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTriggerResult) []string { return v.IgnoredFiles }).(pulumi.StringArrayOutput)
}

// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
func (o LookupTriggerResultOutput) IncludedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTriggerResult) []string { return v.IncludedFiles }).(pulumi.StringArrayOutput)
}

// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
func (o LookupTriggerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.Name }).(pulumi.StringOutput)
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
func (o LookupTriggerResultOutput) PubsubConfig() PubsubConfigResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) PubsubConfigResponse { return v.PubsubConfig }).(PubsubConfigResponseOutput)
}

// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
func (o LookupTriggerResultOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.ResourceName }).(pulumi.StringOutput)
}

// The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
func (o LookupTriggerResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTriggerResult) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
func (o LookupTriggerResultOutput) SourceToBuild() GitRepoSourceResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) GitRepoSourceResponse { return v.SourceToBuild }).(GitRepoSourceResponseOutput)
}

// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
func (o LookupTriggerResultOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupTriggerResult) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `BuildTrigger`
func (o LookupTriggerResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTriggerResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
func (o LookupTriggerResultOutput) TriggerTemplate() RepoSourceResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) RepoSourceResponse { return v.TriggerTemplate }).(RepoSourceResponseOutput)
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
func (o LookupTriggerResultOutput) WebhookConfig() WebhookConfigResponseOutput {
	return o.ApplyT(func(v LookupTriggerResult) WebhookConfigResponse { return v.WebhookConfig }).(WebhookConfigResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTriggerResultOutput{})
}
