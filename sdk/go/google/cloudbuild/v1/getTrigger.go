// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns information about a `BuildTrigger`. This API is experimental.
func LookupTrigger(ctx *pulumi.Context, args *LookupTriggerArgs, opts ...pulumi.InvokeOption) (*LookupTriggerResult, error) {
	var rv LookupTriggerResult
	err := ctx.Invoke("google-native:cloudbuild/v1:getTrigger", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupTriggerArgs struct {
	Project   string `pulumi:"project"`
	TriggerId string `pulumi:"triggerId"`
}

type LookupTriggerResult struct {
	// Contents of the build template.
	Build BuildResponse `pulumi:"build"`
	// Time when the trigger was created.
	CreateTime string `pulumi:"createTime"`
	// Human-readable description of this trigger.
	Description string `pulumi:"description"`
	// If true, the trigger will never automatically execute a build.
	Disabled bool `pulumi:"disabled"`
	// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
	Filename string `pulumi:"filename"`
	// Optional. A Common Expression Language string.
	Filter string `pulumi:"filter"`
	// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
	Github GitHubEventsConfigResponse `pulumi:"github"`
	// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
	IgnoredFiles []string `pulumi:"ignoredFiles"`
	// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
	IncludedFiles []string `pulumi:"includedFiles"`
	// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	Name string `pulumi:"name"`
	// Optional. PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
	PubsubConfig PubsubConfigResponse `pulumi:"pubsubConfig"`
	// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `BuildTrigger`
	Tags []string `pulumi:"tags"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
	TriggerTemplate RepoSourceResponse `pulumi:"triggerTemplate"`
}
