// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Build struct {
	pulumi.CustomResourceState

	// Describes this build's approval configuration, status, and result.
	Approval BuildApprovalResponseOutput `pulumi:"approval"`
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsResponseOutput `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets SecretsResponseOutput `pulumi:"availableSecrets"`
	// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
	BuildTriggerId pulumi.StringOutput `pulumi:"buildTriggerId"`
	// Time at which the request to create the build was received.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Contains information about the build when status=FAILURE.
	FailureInfo FailureInfoResponseOutput `pulumi:"failureInfo"`
	// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
	FinishTime pulumi.StringOutput `pulumi:"finishTime"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images   pulumi.StringArrayOutput `pulumi:"images"`
	Location pulumi.StringOutput      `pulumi:"location"`
	// URL to logs for this build in Google Cloud Console.
	LogUrl pulumi.StringOutput `pulumi:"logUrl"`
	// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket pulumi.StringOutput `pulumi:"logsBucket"`
	// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
	Name pulumi.StringOutput `pulumi:"name"`
	// Special options for this build.
	Options BuildOptionsResponseOutput `pulumi:"options"`
	Project pulumi.StringOutput        `pulumi:"project"`
	// Required. ID of the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl pulumi.StringOutput `pulumi:"queueTtl"`
	// Results of the build.
	Results ResultsResponseOutput `pulumi:"results"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets SecretResponseArrayOutput `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source SourceResponseOutput `pulumi:"source"`
	// A permanent fixed identifier for source.
	SourceProvenance SourceProvenanceResponseOutput `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// Status of the build.
	Status pulumi.StringOutput `pulumi:"status"`
	// Customer-readable message about the current status.
	StatusDetail pulumi.StringOutput `pulumi:"statusDetail"`
	// The operations to be performed on the workspace.
	Steps BuildStepResponseArrayOutput `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions pulumi.StringMapOutput `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
	Timeout pulumi.StringOutput `pulumi:"timeout"`
	// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
	Timing TimeSpanResponseOutput `pulumi:"timing"`
	// Non-fatal problems encountered during the execution of the build.
	Warnings WarningResponseArrayOutput `pulumi:"warnings"`
}

// NewBuild registers a new resource with the given unique name, arguments, and options.
func NewBuild(ctx *pulumi.Context,
	name string, args *BuildArgs, opts ...pulumi.ResourceOption) (*Build, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Steps == nil {
		return nil, errors.New("invalid value for required argument 'Steps'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"projectId",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Build
	err := ctx.RegisterResource("google-native:cloudbuild/v1:Build", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuild gets an existing Build resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuild(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildState, opts ...pulumi.ResourceOption) (*Build, error) {
	var resource Build
	err := ctx.ReadResource("google-native:cloudbuild/v1:Build", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Build resources.
type buildState struct {
}

type BuildState struct {
}

func (BuildState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildState)(nil)).Elem()
}

type buildArgs struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts *Artifacts `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets *Secrets `pulumi:"availableSecrets"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images   []string `pulumi:"images"`
	Location *string  `pulumi:"location"`
	// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket *string `pulumi:"logsBucket"`
	// Special options for this build.
	Options *BuildOptions `pulumi:"options"`
	Project *string       `pulumi:"project"`
	// Required. ID of the project.
	ProjectId string `pulumi:"projectId"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl *string `pulumi:"queueTtl"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets []Secret `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source *Source `pulumi:"source"`
	// The operations to be performed on the workspace.
	Steps []BuildStep `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags []string `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
	Timeout *string `pulumi:"timeout"`
}

// The set of arguments for constructing a Build resource.
type BuildArgs struct {
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsPtrInput
	// Secrets and secret environment variables.
	AvailableSecrets SecretsPtrInput
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images   pulumi.StringArrayInput
	Location pulumi.StringPtrInput
	// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket pulumi.StringPtrInput
	// Special options for this build.
	Options BuildOptionsPtrInput
	Project pulumi.StringPtrInput
	// Required. ID of the project.
	ProjectId pulumi.StringInput
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl pulumi.StringPtrInput
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets SecretArrayInput
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
	ServiceAccount pulumi.StringPtrInput
	// The location of the source files to build.
	Source SourcePtrInput
	// The operations to be performed on the workspace.
	Steps BuildStepArrayInput
	// Substitutions data for `Build` resource.
	Substitutions pulumi.StringMapInput
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags pulumi.StringArrayInput
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
	Timeout pulumi.StringPtrInput
}

func (BuildArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildArgs)(nil)).Elem()
}

type BuildInput interface {
	pulumi.Input

	ToBuildOutput() BuildOutput
	ToBuildOutputWithContext(ctx context.Context) BuildOutput
}

func (*Build) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (i *Build) ToBuildOutput() BuildOutput {
	return i.ToBuildOutputWithContext(context.Background())
}

func (i *Build) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildOutput)
}

type BuildOutput struct{ *pulumi.OutputState }

func (BuildOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Build)(nil)).Elem()
}

func (o BuildOutput) ToBuildOutput() BuildOutput {
	return o
}

func (o BuildOutput) ToBuildOutputWithContext(ctx context.Context) BuildOutput {
	return o
}

// Describes this build's approval configuration, status, and result.
func (o BuildOutput) Approval() BuildApprovalResponseOutput {
	return o.ApplyT(func(v *Build) BuildApprovalResponseOutput { return v.Approval }).(BuildApprovalResponseOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o BuildOutput) Artifacts() ArtifactsResponseOutput {
	return o.ApplyT(func(v *Build) ArtifactsResponseOutput { return v.Artifacts }).(ArtifactsResponseOutput)
}

// Secrets and secret environment variables.
func (o BuildOutput) AvailableSecrets() SecretsResponseOutput {
	return o.ApplyT(func(v *Build) SecretsResponseOutput { return v.AvailableSecrets }).(SecretsResponseOutput)
}

// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
func (o BuildOutput) BuildTriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.BuildTriggerId }).(pulumi.StringOutput)
}

// Time at which the request to create the build was received.
func (o BuildOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Contains information about the build when status=FAILURE.
func (o BuildOutput) FailureInfo() FailureInfoResponseOutput {
	return o.ApplyT(func(v *Build) FailureInfoResponseOutput { return v.FailureInfo }).(FailureInfoResponseOutput)
}

// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
func (o BuildOutput) FinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.FinishTime }).(pulumi.StringOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o BuildOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Build) pulumi.StringArrayOutput { return v.Images }).(pulumi.StringArrayOutput)
}

func (o BuildOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// URL to logs for this build in Google Cloud Console.
func (o BuildOutput) LogUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.LogUrl }).(pulumi.StringOutput)
}

// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o BuildOutput) LogsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.LogsBucket }).(pulumi.StringOutput)
}

// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
func (o BuildOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Special options for this build.
func (o BuildOutput) Options() BuildOptionsResponseOutput {
	return o.ApplyT(func(v *Build) BuildOptionsResponseOutput { return v.Options }).(BuildOptionsResponseOutput)
}

func (o BuildOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. ID of the project.
func (o BuildOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o BuildOutput) QueueTtl() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.QueueTtl }).(pulumi.StringOutput)
}

// Results of the build.
func (o BuildOutput) Results() ResultsResponseOutput {
	return o.ApplyT(func(v *Build) ResultsResponseOutput { return v.Results }).(ResultsResponseOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o BuildOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v *Build) SecretResponseArrayOutput { return v.Secrets }).(SecretResponseArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
func (o BuildOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The location of the source files to build.
func (o BuildOutput) Source() SourceResponseOutput {
	return o.ApplyT(func(v *Build) SourceResponseOutput { return v.Source }).(SourceResponseOutput)
}

// A permanent fixed identifier for source.
func (o BuildOutput) SourceProvenance() SourceProvenanceResponseOutput {
	return o.ApplyT(func(v *Build) SourceProvenanceResponseOutput { return v.SourceProvenance }).(SourceProvenanceResponseOutput)
}

// Time at which execution of the build was started.
func (o BuildOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// Status of the build.
func (o BuildOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Customer-readable message about the current status.
func (o BuildOutput) StatusDetail() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.StatusDetail }).(pulumi.StringOutput)
}

// The operations to be performed on the workspace.
func (o BuildOutput) Steps() BuildStepResponseArrayOutput {
	return o.ApplyT(func(v *Build) BuildStepResponseArrayOutput { return v.Steps }).(BuildStepResponseArrayOutput)
}

// Substitutions data for `Build` resource.
func (o BuildOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Build) pulumi.StringMapOutput { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o BuildOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Build) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
func (o BuildOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v *Build) pulumi.StringOutput { return v.Timeout }).(pulumi.StringOutput)
}

// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
func (o BuildOutput) Timing() TimeSpanResponseOutput {
	return o.ApplyT(func(v *Build) TimeSpanResponseOutput { return v.Timing }).(TimeSpanResponseOutput)
}

// Non-fatal problems encountered during the execution of the build.
func (o BuildOutput) Warnings() WarningResponseArrayOutput {
	return o.ApplyT(func(v *Build) WarningResponseArrayOutput { return v.Warnings }).(WarningResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BuildInput)(nil)).Elem(), &Build{})
	pulumi.RegisterOutputType(BuildOutput{})
}
