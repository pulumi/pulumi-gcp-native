// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Create an association between a GCP project and a GitHub Enterprise server.
type GithubEnterpriseConfig struct {
	pulumi.CustomResourceState

	// The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Time when the installation was associated with the project.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Name to display for this config.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
	GheConfigId pulumi.StringPtrOutput `pulumi:"gheConfigId"`
	// The URL of the github enterprise host the configuration is for.
	HostUrl  pulumi.StringOutput `pulumi:"hostUrl"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
	PeeredNetwork pulumi.StringOutput `pulumi:"peeredNetwork"`
	Project       pulumi.StringOutput `pulumi:"project"`
	// ID of the project.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Names of secrets in Secret Manager.
	Secrets GitHubEnterpriseSecretsResponseOutput `pulumi:"secrets"`
	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	SslCa pulumi.StringOutput `pulumi:"sslCa"`
	// The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
	WebhookKey pulumi.StringOutput `pulumi:"webhookKey"`
}

// NewGithubEnterpriseConfig registers a new resource with the given unique name, arguments, and options.
func NewGithubEnterpriseConfig(ctx *pulumi.Context,
	name string, args *GithubEnterpriseConfigArgs, opts ...pulumi.ResourceOption) (*GithubEnterpriseConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GithubEnterpriseConfig
	err := ctx.RegisterResource("google-native:cloudbuild/v1:GithubEnterpriseConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGithubEnterpriseConfig gets an existing GithubEnterpriseConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGithubEnterpriseConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GithubEnterpriseConfigState, opts ...pulumi.ResourceOption) (*GithubEnterpriseConfig, error) {
	var resource GithubEnterpriseConfig
	err := ctx.ReadResource("google-native:cloudbuild/v1:GithubEnterpriseConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GithubEnterpriseConfig resources.
type githubEnterpriseConfigState struct {
}

type GithubEnterpriseConfigState struct {
}

func (GithubEnterpriseConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*githubEnterpriseConfigState)(nil)).Elem()
}

type githubEnterpriseConfigArgs struct {
	// The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
	AppId string `pulumi:"appId"`
	// Name to display for this config.
	DisplayName *string `pulumi:"displayName"`
	// Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
	GheConfigId *string `pulumi:"gheConfigId"`
	// The URL of the github enterprise host the configuration is for.
	HostUrl  *string `pulumi:"hostUrl"`
	Location *string `pulumi:"location"`
	// Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
	Name *string `pulumi:"name"`
	// Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
	PeeredNetwork *string `pulumi:"peeredNetwork"`
	Project       *string `pulumi:"project"`
	// ID of the project.
	ProjectId *string `pulumi:"projectId"`
	// Names of secrets in Secret Manager.
	Secrets *GitHubEnterpriseSecrets `pulumi:"secrets"`
	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	SslCa *string `pulumi:"sslCa"`
	// The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
	WebhookKey *string `pulumi:"webhookKey"`
}

// The set of arguments for constructing a GithubEnterpriseConfig resource.
type GithubEnterpriseConfigArgs struct {
	// The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
	AppId pulumi.StringInput
	// Name to display for this config.
	DisplayName pulumi.StringPtrInput
	// Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
	GheConfigId pulumi.StringPtrInput
	// The URL of the github enterprise host the configuration is for.
	HostUrl  pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
	Name pulumi.StringPtrInput
	// Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
	PeeredNetwork pulumi.StringPtrInput
	Project       pulumi.StringPtrInput
	// ID of the project.
	ProjectId pulumi.StringPtrInput
	// Names of secrets in Secret Manager.
	Secrets GitHubEnterpriseSecretsPtrInput
	// Optional. SSL certificate to use for requests to GitHub Enterprise.
	SslCa pulumi.StringPtrInput
	// The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
	WebhookKey pulumi.StringPtrInput
}

func (GithubEnterpriseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*githubEnterpriseConfigArgs)(nil)).Elem()
}

type GithubEnterpriseConfigInput interface {
	pulumi.Input

	ToGithubEnterpriseConfigOutput() GithubEnterpriseConfigOutput
	ToGithubEnterpriseConfigOutputWithContext(ctx context.Context) GithubEnterpriseConfigOutput
}

func (*GithubEnterpriseConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubEnterpriseConfig)(nil)).Elem()
}

func (i *GithubEnterpriseConfig) ToGithubEnterpriseConfigOutput() GithubEnterpriseConfigOutput {
	return i.ToGithubEnterpriseConfigOutputWithContext(context.Background())
}

func (i *GithubEnterpriseConfig) ToGithubEnterpriseConfigOutputWithContext(ctx context.Context) GithubEnterpriseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GithubEnterpriseConfigOutput)
}

func (i *GithubEnterpriseConfig) ToOutput(ctx context.Context) pulumix.Output[*GithubEnterpriseConfig] {
	return pulumix.Output[*GithubEnterpriseConfig]{
		OutputState: i.ToGithubEnterpriseConfigOutputWithContext(ctx).OutputState,
	}
}

type GithubEnterpriseConfigOutput struct{ *pulumi.OutputState }

func (GithubEnterpriseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GithubEnterpriseConfig)(nil)).Elem()
}

func (o GithubEnterpriseConfigOutput) ToGithubEnterpriseConfigOutput() GithubEnterpriseConfigOutput {
	return o
}

func (o GithubEnterpriseConfigOutput) ToGithubEnterpriseConfigOutputWithContext(ctx context.Context) GithubEnterpriseConfigOutput {
	return o
}

func (o GithubEnterpriseConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*GithubEnterpriseConfig] {
	return pulumix.Output[*GithubEnterpriseConfig]{
		OutputState: o.OutputState,
	}
}

// The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
func (o GithubEnterpriseConfigOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Time when the installation was associated with the project.
func (o GithubEnterpriseConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Name to display for this config.
func (o GithubEnterpriseConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
func (o GithubEnterpriseConfigOutput) GheConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringPtrOutput { return v.GheConfigId }).(pulumi.StringPtrOutput)
}

// The URL of the github enterprise host the configuration is for.
func (o GithubEnterpriseConfigOutput) HostUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.HostUrl }).(pulumi.StringOutput)
}

func (o GithubEnterpriseConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
func (o GithubEnterpriseConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
func (o GithubEnterpriseConfigOutput) PeeredNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.PeeredNetwork }).(pulumi.StringOutput)
}

func (o GithubEnterpriseConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// ID of the project.
func (o GithubEnterpriseConfigOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Names of secrets in Secret Manager.
func (o GithubEnterpriseConfigOutput) Secrets() GitHubEnterpriseSecretsResponseOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) GitHubEnterpriseSecretsResponseOutput { return v.Secrets }).(GitHubEnterpriseSecretsResponseOutput)
}

// Optional. SSL certificate to use for requests to GitHub Enterprise.
func (o GithubEnterpriseConfigOutput) SslCa() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.SslCa }).(pulumi.StringOutput)
}

// The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
func (o GithubEnterpriseConfigOutput) WebhookKey() pulumi.StringOutput {
	return o.ApplyT(func(v *GithubEnterpriseConfig) pulumi.StringOutput { return v.WebhookKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GithubEnterpriseConfigInput)(nil)).Elem(), &GithubEnterpriseConfig{})
	pulumi.RegisterOutputType(GithubEnterpriseConfigOutput{})
}
