// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Retrieves a `GitLabConfig`. This API is experimental
func LookupGitLabConfig(ctx *pulumi.Context, args *LookupGitLabConfigArgs, opts ...pulumi.InvokeOption) (*LookupGitLabConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupGitLabConfigResult
	err := ctx.Invoke("google-native:cloudbuild/v1:getGitLabConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupGitLabConfigArgs struct {
	GitLabConfigId string  `pulumi:"gitLabConfigId"`
	Location       string  `pulumi:"location"`
	Project        *string `pulumi:"project"`
}

type LookupGitLabConfigResult struct {
	// Connected GitLab.com or GitLabEnterprise repositories for this config.
	ConnectedRepositories []GitLabRepositoryIdResponse `pulumi:"connectedRepositories"`
	// Time when the config was created.
	CreateTime string `pulumi:"createTime"`
	// Optional. GitLabEnterprise config.
	EnterpriseConfig GitLabEnterpriseConfigResponse `pulumi:"enterpriseConfig"`
	// The resource name for the config.
	Name string `pulumi:"name"`
	// Secret Manager secrets needed by the config.
	Secrets GitLabSecretsResponse `pulumi:"secrets"`
	// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
	Username string `pulumi:"username"`
	// UUID included in webhook requests. The UUID is used to look up the corresponding config.
	WebhookKey string `pulumi:"webhookKey"`
}

func LookupGitLabConfigOutput(ctx *pulumi.Context, args LookupGitLabConfigOutputArgs, opts ...pulumi.InvokeOption) LookupGitLabConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGitLabConfigResult, error) {
			args := v.(LookupGitLabConfigArgs)
			r, err := LookupGitLabConfig(ctx, &args, opts...)
			var s LookupGitLabConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGitLabConfigResultOutput)
}

type LookupGitLabConfigOutputArgs struct {
	GitLabConfigId pulumi.StringInput    `pulumi:"gitLabConfigId"`
	Location       pulumi.StringInput    `pulumi:"location"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupGitLabConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitLabConfigArgs)(nil)).Elem()
}

type LookupGitLabConfigResultOutput struct{ *pulumi.OutputState }

func (LookupGitLabConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGitLabConfigResult)(nil)).Elem()
}

func (o LookupGitLabConfigResultOutput) ToLookupGitLabConfigResultOutput() LookupGitLabConfigResultOutput {
	return o
}

func (o LookupGitLabConfigResultOutput) ToLookupGitLabConfigResultOutputWithContext(ctx context.Context) LookupGitLabConfigResultOutput {
	return o
}

func (o LookupGitLabConfigResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupGitLabConfigResult] {
	return pulumix.Output[LookupGitLabConfigResult]{
		OutputState: o.OutputState,
	}
}

// Connected GitLab.com or GitLabEnterprise repositories for this config.
func (o LookupGitLabConfigResultOutput) ConnectedRepositories() GitLabRepositoryIdResponseArrayOutput {
	return o.ApplyT(func(v LookupGitLabConfigResult) []GitLabRepositoryIdResponse { return v.ConnectedRepositories }).(GitLabRepositoryIdResponseArrayOutput)
}

// Time when the config was created.
func (o LookupGitLabConfigResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitLabConfigResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. GitLabEnterprise config.
func (o LookupGitLabConfigResultOutput) EnterpriseConfig() GitLabEnterpriseConfigResponseOutput {
	return o.ApplyT(func(v LookupGitLabConfigResult) GitLabEnterpriseConfigResponse { return v.EnterpriseConfig }).(GitLabEnterpriseConfigResponseOutput)
}

// The resource name for the config.
func (o LookupGitLabConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitLabConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// Secret Manager secrets needed by the config.
func (o LookupGitLabConfigResultOutput) Secrets() GitLabSecretsResponseOutput {
	return o.ApplyT(func(v LookupGitLabConfigResult) GitLabSecretsResponse { return v.Secrets }).(GitLabSecretsResponseOutput)
}

// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
func (o LookupGitLabConfigResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitLabConfigResult) string { return v.Username }).(pulumi.StringOutput)
}

// UUID included in webhook requests. The UUID is used to look up the corresponding config.
func (o LookupGitLabConfigResultOutput) WebhookKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGitLabConfigResult) string { return v.WebhookKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGitLabConfigResultOutput{})
}
