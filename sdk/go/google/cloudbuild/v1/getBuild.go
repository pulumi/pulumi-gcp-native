// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.
func LookupBuild(ctx *pulumi.Context, args *LookupBuildArgs, opts ...pulumi.InvokeOption) (*LookupBuildResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBuildResult
	err := ctx.Invoke("google-native:cloudbuild/v1:getBuild", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupBuildArgs struct {
	BuildId   string  `pulumi:"buildId"`
	Id        string  `pulumi:"id"`
	Location  string  `pulumi:"location"`
	Project   *string `pulumi:"project"`
	ProjectId string  `pulumi:"projectId"`
}

type LookupBuildResult struct {
	// Describes this build's approval configuration, status, and result.
	Approval BuildApprovalResponse `pulumi:"approval"`
	// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	Artifacts ArtifactsResponse `pulumi:"artifacts"`
	// Secrets and secret environment variables.
	AvailableSecrets SecretsResponse `pulumi:"availableSecrets"`
	// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
	BuildTriggerId string `pulumi:"buildTriggerId"`
	// Time at which the request to create the build was received.
	CreateTime string `pulumi:"createTime"`
	// Contains information about the build when status=FAILURE.
	FailureInfo FailureInfoResponse `pulumi:"failureInfo"`
	// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
	FinishTime string `pulumi:"finishTime"`
	// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	Images []string `pulumi:"images"`
	// URL to logs for this build in Google Cloud Console.
	LogUrl string `pulumi:"logUrl"`
	// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	LogsBucket string `pulumi:"logsBucket"`
	// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
	Name string `pulumi:"name"`
	// Special options for this build.
	Options BuildOptionsResponse `pulumi:"options"`
	// ID of the project.
	Project string `pulumi:"project"`
	// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	QueueTtl string `pulumi:"queueTtl"`
	// Results of the build.
	Results ResultsResponse `pulumi:"results"`
	// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	Secrets []SecretResponse `pulumi:"secrets"`
	// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
	ServiceAccount string `pulumi:"serviceAccount"`
	// The location of the source files to build.
	Source SourceResponse `pulumi:"source"`
	// A permanent fixed identifier for source.
	SourceProvenance SourceProvenanceResponse `pulumi:"sourceProvenance"`
	// Time at which execution of the build was started.
	StartTime string `pulumi:"startTime"`
	// Status of the build.
	Status string `pulumi:"status"`
	// Customer-readable message about the current status.
	StatusDetail string `pulumi:"statusDetail"`
	// The operations to be performed on the workspace.
	Steps []BuildStepResponse `pulumi:"steps"`
	// Substitutions data for `Build` resource.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `Build`. These are not docker tags.
	Tags []string `pulumi:"tags"`
	// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
	Timeout string `pulumi:"timeout"`
	// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
	Timing map[string]TimeSpanResponse `pulumi:"timing"`
	// Non-fatal problems encountered during the execution of the build.
	Warnings []WarningResponse `pulumi:"warnings"`
}

func LookupBuildOutput(ctx *pulumi.Context, args LookupBuildOutputArgs, opts ...pulumi.InvokeOption) LookupBuildResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBuildResult, error) {
			args := v.(LookupBuildArgs)
			r, err := LookupBuild(ctx, &args, opts...)
			var s LookupBuildResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBuildResultOutput)
}

type LookupBuildOutputArgs struct {
	BuildId   pulumi.StringInput    `pulumi:"buildId"`
	Id        pulumi.StringInput    `pulumi:"id"`
	Location  pulumi.StringInput    `pulumi:"location"`
	Project   pulumi.StringPtrInput `pulumi:"project"`
	ProjectId pulumi.StringInput    `pulumi:"projectId"`
}

func (LookupBuildOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBuildArgs)(nil)).Elem()
}

type LookupBuildResultOutput struct{ *pulumi.OutputState }

func (LookupBuildResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBuildResult)(nil)).Elem()
}

func (o LookupBuildResultOutput) ToLookupBuildResultOutput() LookupBuildResultOutput {
	return o
}

func (o LookupBuildResultOutput) ToLookupBuildResultOutputWithContext(ctx context.Context) LookupBuildResultOutput {
	return o
}

// Describes this build's approval configuration, status, and result.
func (o LookupBuildResultOutput) Approval() BuildApprovalResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) BuildApprovalResponse { return v.Approval }).(BuildApprovalResponseOutput)
}

// Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
func (o LookupBuildResultOutput) Artifacts() ArtifactsResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) ArtifactsResponse { return v.Artifacts }).(ArtifactsResponseOutput)
}

// Secrets and secret environment variables.
func (o LookupBuildResultOutput) AvailableSecrets() SecretsResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) SecretsResponse { return v.AvailableSecrets }).(SecretsResponseOutput)
}

// The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
func (o LookupBuildResultOutput) BuildTriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.BuildTriggerId }).(pulumi.StringOutput)
}

// Time at which the request to create the build was received.
func (o LookupBuildResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Contains information about the build when status=FAILURE.
func (o LookupBuildResultOutput) FailureInfo() FailureInfoResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) FailureInfoResponse { return v.FailureInfo }).(FailureInfoResponseOutput)
}

// Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
func (o LookupBuildResultOutput) FinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.FinishTime }).(pulumi.StringOutput)
}

// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
func (o LookupBuildResultOutput) Images() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBuildResult) []string { return v.Images }).(pulumi.StringArrayOutput)
}

// URL to logs for this build in Google Cloud Console.
func (o LookupBuildResultOutput) LogUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.LogUrl }).(pulumi.StringOutput)
}

// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
func (o LookupBuildResultOutput) LogsBucket() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.LogsBucket }).(pulumi.StringOutput)
}

// The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
func (o LookupBuildResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.Name }).(pulumi.StringOutput)
}

// Special options for this build.
func (o LookupBuildResultOutput) Options() BuildOptionsResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) BuildOptionsResponse { return v.Options }).(BuildOptionsResponseOutput)
}

// ID of the project.
func (o LookupBuildResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.Project }).(pulumi.StringOutput)
}

// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
func (o LookupBuildResultOutput) QueueTtl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.QueueTtl }).(pulumi.StringOutput)
}

// Results of the build.
func (o LookupBuildResultOutput) Results() ResultsResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) ResultsResponse { return v.Results }).(ResultsResponseOutput)
}

// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
func (o LookupBuildResultOutput) Secrets() SecretResponseArrayOutput {
	return o.ApplyT(func(v LookupBuildResult) []SecretResponse { return v.Secrets }).(SecretResponseArrayOutput)
}

// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account.
func (o LookupBuildResultOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The location of the source files to build.
func (o LookupBuildResultOutput) Source() SourceResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) SourceResponse { return v.Source }).(SourceResponseOutput)
}

// A permanent fixed identifier for source.
func (o LookupBuildResultOutput) SourceProvenance() SourceProvenanceResponseOutput {
	return o.ApplyT(func(v LookupBuildResult) SourceProvenanceResponse { return v.SourceProvenance }).(SourceProvenanceResponseOutput)
}

// Time at which execution of the build was started.
func (o LookupBuildResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// Status of the build.
func (o LookupBuildResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.Status }).(pulumi.StringOutput)
}

// Customer-readable message about the current status.
func (o LookupBuildResultOutput) StatusDetail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.StatusDetail }).(pulumi.StringOutput)
}

// The operations to be performed on the workspace.
func (o LookupBuildResultOutput) Steps() BuildStepResponseArrayOutput {
	return o.ApplyT(func(v LookupBuildResult) []BuildStepResponse { return v.Steps }).(BuildStepResponseArrayOutput)
}

// Substitutions data for `Build` resource.
func (o LookupBuildResultOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupBuildResult) map[string]string { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `Build`. These are not docker tags.
func (o LookupBuildResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupBuildResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
func (o LookupBuildResultOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBuildResult) string { return v.Timeout }).(pulumi.StringOutput)
}

// Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
func (o LookupBuildResultOutput) Timing() TimeSpanResponseMapOutput {
	return o.ApplyT(func(v LookupBuildResult) map[string]TimeSpanResponse { return v.Timing }).(TimeSpanResponseMapOutput)
}

// Non-fatal problems encountered during the execution of the build.
func (o LookupBuildResultOutput) Warnings() WarningResponseArrayOutput {
	return o.ApplyT(func(v LookupBuildResult) []WarningResponse { return v.Warnings }).(WarningResponseArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBuildResultOutput{})
}
