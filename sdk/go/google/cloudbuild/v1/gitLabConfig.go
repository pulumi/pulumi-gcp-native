// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new `GitLabConfig`. This API is experimental
type GitLabConfig struct {
	pulumi.CustomResourceState

	// Connected GitLab.com or GitLabEnterprise repositories for this config.
	ConnectedRepositories GitLabRepositoryIdResponseArrayOutput `pulumi:"connectedRepositories"`
	// Time when the config was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Optional. GitLabEnterprise config.
	EnterpriseConfig GitLabEnterpriseConfigResponseOutput `pulumi:"enterpriseConfig"`
	// Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
	GitlabConfigId pulumi.StringPtrOutput `pulumi:"gitlabConfigId"`
	Location       pulumi.StringOutput    `pulumi:"location"`
	// The resource name for the config.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Secret Manager secrets needed by the config.
	Secrets GitLabSecretsResponseOutput `pulumi:"secrets"`
	// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
	Username pulumi.StringOutput `pulumi:"username"`
	// UUID included in webhook requests. The UUID is used to look up the corresponding config.
	WebhookKey pulumi.StringOutput `pulumi:"webhookKey"`
}

// NewGitLabConfig registers a new resource with the given unique name, arguments, and options.
func NewGitLabConfig(ctx *pulumi.Context,
	name string, args *GitLabConfigArgs, opts ...pulumi.ResourceOption) (*GitLabConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Secrets == nil {
		return nil, errors.New("invalid value for required argument 'Secrets'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource GitLabConfig
	err := ctx.RegisterResource("google-native:cloudbuild/v1:GitLabConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGitLabConfig gets an existing GitLabConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGitLabConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GitLabConfigState, opts ...pulumi.ResourceOption) (*GitLabConfig, error) {
	var resource GitLabConfig
	err := ctx.ReadResource("google-native:cloudbuild/v1:GitLabConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GitLabConfig resources.
type gitLabConfigState struct {
}

type GitLabConfigState struct {
}

func (GitLabConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*gitLabConfigState)(nil)).Elem()
}

type gitLabConfigArgs struct {
	// Connected GitLab.com or GitLabEnterprise repositories for this config.
	ConnectedRepositories []GitLabRepositoryId `pulumi:"connectedRepositories"`
	// Optional. GitLabEnterprise config.
	EnterpriseConfig *GitLabEnterpriseConfig `pulumi:"enterpriseConfig"`
	// Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
	GitlabConfigId *string `pulumi:"gitlabConfigId"`
	Location       *string `pulumi:"location"`
	// The resource name for the config.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Secret Manager secrets needed by the config.
	Secrets GitLabSecrets `pulumi:"secrets"`
	// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a GitLabConfig resource.
type GitLabConfigArgs struct {
	// Connected GitLab.com or GitLabEnterprise repositories for this config.
	ConnectedRepositories GitLabRepositoryIdArrayInput
	// Optional. GitLabEnterprise config.
	EnterpriseConfig GitLabEnterpriseConfigPtrInput
	// Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
	GitlabConfigId pulumi.StringPtrInput
	Location       pulumi.StringPtrInput
	// The resource name for the config.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Secret Manager secrets needed by the config.
	Secrets GitLabSecretsInput
	// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
	Username pulumi.StringPtrInput
}

func (GitLabConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gitLabConfigArgs)(nil)).Elem()
}

type GitLabConfigInput interface {
	pulumi.Input

	ToGitLabConfigOutput() GitLabConfigOutput
	ToGitLabConfigOutputWithContext(ctx context.Context) GitLabConfigOutput
}

func (*GitLabConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**GitLabConfig)(nil)).Elem()
}

func (i *GitLabConfig) ToGitLabConfigOutput() GitLabConfigOutput {
	return i.ToGitLabConfigOutputWithContext(context.Background())
}

func (i *GitLabConfig) ToGitLabConfigOutputWithContext(ctx context.Context) GitLabConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GitLabConfigOutput)
}

type GitLabConfigOutput struct{ *pulumi.OutputState }

func (GitLabConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GitLabConfig)(nil)).Elem()
}

func (o GitLabConfigOutput) ToGitLabConfigOutput() GitLabConfigOutput {
	return o
}

func (o GitLabConfigOutput) ToGitLabConfigOutputWithContext(ctx context.Context) GitLabConfigOutput {
	return o
}

// Connected GitLab.com or GitLabEnterprise repositories for this config.
func (o GitLabConfigOutput) ConnectedRepositories() GitLabRepositoryIdResponseArrayOutput {
	return o.ApplyT(func(v *GitLabConfig) GitLabRepositoryIdResponseArrayOutput { return v.ConnectedRepositories }).(GitLabRepositoryIdResponseArrayOutput)
}

// Time when the config was created.
func (o GitLabConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GitLabConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Optional. GitLabEnterprise config.
func (o GitLabConfigOutput) EnterpriseConfig() GitLabEnterpriseConfigResponseOutput {
	return o.ApplyT(func(v *GitLabConfig) GitLabEnterpriseConfigResponseOutput { return v.EnterpriseConfig }).(GitLabEnterpriseConfigResponseOutput)
}

// Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character
func (o GitLabConfigOutput) GitlabConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GitLabConfig) pulumi.StringPtrOutput { return v.GitlabConfigId }).(pulumi.StringPtrOutput)
}

func (o GitLabConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *GitLabConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the config.
func (o GitLabConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GitLabConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GitLabConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *GitLabConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Secret Manager secrets needed by the config.
func (o GitLabConfigOutput) Secrets() GitLabSecretsResponseOutput {
	return o.ApplyT(func(v *GitLabConfig) GitLabSecretsResponseOutput { return v.Secrets }).(GitLabSecretsResponseOutput)
}

// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
func (o GitLabConfigOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *GitLabConfig) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// UUID included in webhook requests. The UUID is used to look up the corresponding config.
func (o GitLabConfigOutput) WebhookKey() pulumi.StringOutput {
	return o.ApplyT(func(v *GitLabConfig) pulumi.StringOutput { return v.WebhookKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GitLabConfigInput)(nil)).Elem(), &GitLabConfig{})
	pulumi.RegisterOutputType(GitLabConfigOutput{})
}
