// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a new `BitbucketServerConfig`. This API is experimental.
type BitbucketServerConfig struct {
	pulumi.CustomResourceState

	// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	BitbucketServerConfigId pulumi.StringPtrOutput `pulumi:"bitbucketServerConfigId"`
	// Connected Bitbucket Server repositories for this config.
	ConnectedRepositories BitbucketServerRepositoryIdResponseArrayOutput `pulumi:"connectedRepositories"`
	// Time when the config was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	HostUri  pulumi.StringOutput `pulumi:"hostUri"`
	Location pulumi.StringOutput `pulumi:"location"`
	// The resource name for the config.
	Name pulumi.StringOutput `pulumi:"name"`
	// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
	PeeredNetwork pulumi.StringOutput `pulumi:"peeredNetwork"`
	// Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set.
	PeeredNetworkIpRange pulumi.StringOutput `pulumi:"peeredNetworkIpRange"`
	Project              pulumi.StringOutput `pulumi:"project"`
	// Secret Manager secrets needed by the config.
	Secrets BitbucketServerSecretsResponseOutput `pulumi:"secrets"`
	// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
	SslCa pulumi.StringOutput `pulumi:"sslCa"`
	// Username of the account Cloud Build will use on Bitbucket Server.
	Username pulumi.StringOutput `pulumi:"username"`
	// UUID included in webhook requests. The UUID is used to look up the corresponding config.
	WebhookKey pulumi.StringOutput `pulumi:"webhookKey"`
}

// NewBitbucketServerConfig registers a new resource with the given unique name, arguments, and options.
func NewBitbucketServerConfig(ctx *pulumi.Context,
	name string, args *BitbucketServerConfigArgs, opts ...pulumi.ResourceOption) (*BitbucketServerConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	if args.HostUri == nil {
		return nil, errors.New("invalid value for required argument 'HostUri'")
	}
	if args.Secrets == nil {
		return nil, errors.New("invalid value for required argument 'Secrets'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BitbucketServerConfig
	err := ctx.RegisterResource("google-native:cloudbuild/v1:BitbucketServerConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBitbucketServerConfig gets an existing BitbucketServerConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBitbucketServerConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BitbucketServerConfigState, opts ...pulumi.ResourceOption) (*BitbucketServerConfig, error) {
	var resource BitbucketServerConfig
	err := ctx.ReadResource("google-native:cloudbuild/v1:BitbucketServerConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BitbucketServerConfig resources.
type bitbucketServerConfigState struct {
}

type BitbucketServerConfigState struct {
}

func (BitbucketServerConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*bitbucketServerConfigState)(nil)).Elem()
}

type bitbucketServerConfigArgs struct {
	// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	ApiKey string `pulumi:"apiKey"`
	// Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	BitbucketServerConfigId *string `pulumi:"bitbucketServerConfigId"`
	// Time when the config was created.
	CreateTime *string `pulumi:"createTime"`
	// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	HostUri  string  `pulumi:"hostUri"`
	Location *string `pulumi:"location"`
	// The resource name for the config.
	Name *string `pulumi:"name"`
	// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
	PeeredNetwork *string `pulumi:"peeredNetwork"`
	// Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set.
	PeeredNetworkIpRange *string `pulumi:"peeredNetworkIpRange"`
	Project              *string `pulumi:"project"`
	// Secret Manager secrets needed by the config.
	Secrets BitbucketServerSecrets `pulumi:"secrets"`
	// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
	SslCa *string `pulumi:"sslCa"`
	// Username of the account Cloud Build will use on Bitbucket Server.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a BitbucketServerConfig resource.
type BitbucketServerConfigArgs struct {
	// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	ApiKey pulumi.StringInput
	// Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	BitbucketServerConfigId pulumi.StringPtrInput
	// Time when the config was created.
	CreateTime pulumi.StringPtrInput
	// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
	HostUri  pulumi.StringInput
	Location pulumi.StringPtrInput
	// The resource name for the config.
	Name pulumi.StringPtrInput
	// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
	PeeredNetwork pulumi.StringPtrInput
	// Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set.
	PeeredNetworkIpRange pulumi.StringPtrInput
	Project              pulumi.StringPtrInput
	// Secret Manager secrets needed by the config.
	Secrets BitbucketServerSecretsInput
	// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
	SslCa pulumi.StringPtrInput
	// Username of the account Cloud Build will use on Bitbucket Server.
	Username pulumi.StringPtrInput
}

func (BitbucketServerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bitbucketServerConfigArgs)(nil)).Elem()
}

type BitbucketServerConfigInput interface {
	pulumi.Input

	ToBitbucketServerConfigOutput() BitbucketServerConfigOutput
	ToBitbucketServerConfigOutputWithContext(ctx context.Context) BitbucketServerConfigOutput
}

func (*BitbucketServerConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**BitbucketServerConfig)(nil)).Elem()
}

func (i *BitbucketServerConfig) ToBitbucketServerConfigOutput() BitbucketServerConfigOutput {
	return i.ToBitbucketServerConfigOutputWithContext(context.Background())
}

func (i *BitbucketServerConfig) ToBitbucketServerConfigOutputWithContext(ctx context.Context) BitbucketServerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BitbucketServerConfigOutput)
}

func (i *BitbucketServerConfig) ToOutput(ctx context.Context) pulumix.Output[*BitbucketServerConfig] {
	return pulumix.Output[*BitbucketServerConfig]{
		OutputState: i.ToBitbucketServerConfigOutputWithContext(ctx).OutputState,
	}
}

type BitbucketServerConfigOutput struct{ *pulumi.OutputState }

func (BitbucketServerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BitbucketServerConfig)(nil)).Elem()
}

func (o BitbucketServerConfigOutput) ToBitbucketServerConfigOutput() BitbucketServerConfigOutput {
	return o
}

func (o BitbucketServerConfigOutput) ToBitbucketServerConfigOutputWithContext(ctx context.Context) BitbucketServerConfigOutput {
	return o
}

func (o BitbucketServerConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*BitbucketServerConfig] {
	return pulumix.Output[*BitbucketServerConfig]{
		OutputState: o.OutputState,
	}
}

// Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
func (o BitbucketServerConfigOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
func (o BitbucketServerConfigOutput) BitbucketServerConfigId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringPtrOutput { return v.BitbucketServerConfigId }).(pulumi.StringPtrOutput)
}

// Connected Bitbucket Server repositories for this config.
func (o BitbucketServerConfigOutput) ConnectedRepositories() BitbucketServerRepositoryIdResponseArrayOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) BitbucketServerRepositoryIdResponseArrayOutput {
		return v.ConnectedRepositories
	}).(BitbucketServerRepositoryIdResponseArrayOutput)
}

// Time when the config was created.
func (o BitbucketServerConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
func (o BitbucketServerConfigOutput) HostUri() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.HostUri }).(pulumi.StringOutput)
}

func (o BitbucketServerConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The resource name for the config.
func (o BitbucketServerConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
func (o BitbucketServerConfigOutput) PeeredNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.PeeredNetwork }).(pulumi.StringOutput)
}

// Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set.
func (o BitbucketServerConfigOutput) PeeredNetworkIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.PeeredNetworkIpRange }).(pulumi.StringOutput)
}

func (o BitbucketServerConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Secret Manager secrets needed by the config.
func (o BitbucketServerConfigOutput) Secrets() BitbucketServerSecretsResponseOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) BitbucketServerSecretsResponseOutput { return v.Secrets }).(BitbucketServerSecretsResponseOutput)
}

// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
func (o BitbucketServerConfigOutput) SslCa() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.SslCa }).(pulumi.StringOutput)
}

// Username of the account Cloud Build will use on Bitbucket Server.
func (o BitbucketServerConfigOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// UUID included in webhook requests. The UUID is used to look up the corresponding config.
func (o BitbucketServerConfigOutput) WebhookKey() pulumi.StringOutput {
	return o.ApplyT(func(v *BitbucketServerConfig) pulumi.StringOutput { return v.WebhookKey }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BitbucketServerConfigInput)(nil)).Elem(), &BitbucketServerConfig{})
	pulumi.RegisterOutputType(BitbucketServerConfigOutput{})
}
