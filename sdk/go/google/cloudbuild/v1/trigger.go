// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new `BuildTrigger`. This API is experimental.
type Trigger struct {
	pulumi.CustomResourceState

	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	ApprovalConfig ApprovalConfigResponseOutput `pulumi:"approvalConfig"`
	// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
	Autodetect pulumi.BoolOutput `pulumi:"autodetect"`
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	BitbucketServerTriggerConfig BitbucketServerTriggerConfigResponseOutput `pulumi:"bitbucketServerTriggerConfig"`
	// Contents of the build template.
	Build BuildResponseOutput `pulumi:"build"`
	// Time when the trigger was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Human-readable description of this trigger.
	Description pulumi.StringOutput `pulumi:"description"`
	// If true, the trigger will never automatically execute a build.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
	EventType pulumi.StringOutput `pulumi:"eventType"`
	// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
	Filename pulumi.StringOutput `pulumi:"filename"`
	// A Common Expression Language string.
	Filter pulumi.StringOutput `pulumi:"filter"`
	// The file source describing the local or remote Build template.
	GitFileSource GitFileSourceResponseOutput `pulumi:"gitFileSource"`
	// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
	Github GitHubEventsConfigResponseOutput `pulumi:"github"`
	// GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.
	GitlabEnterpriseEventsConfig GitLabEventsConfigResponseOutput `pulumi:"gitlabEnterpriseEventsConfig"`
	// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
	IgnoredFiles pulumi.StringArrayOutput `pulumi:"ignoredFiles"`
	// If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.
	IncludeBuildLogs pulumi.StringOutput `pulumi:"includeBuildLogs"`
	// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
	IncludedFiles pulumi.StringArrayOutput `pulumi:"includedFiles"`
	Location      pulumi.StringOutput      `pulumi:"location"`
	// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Required. ID of the project for which to configure automatic builds.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
	PubsubConfig PubsubConfigResponseOutput `pulumi:"pubsubConfig"`
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig RepositoryEventConfigResponseOutput `pulumi:"repositoryEventConfig"`
	// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
	ServiceAccount pulumi.StringOutput `pulumi:"serviceAccount"`
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	SourceToBuild GitRepoSourceResponseOutput `pulumi:"sourceToBuild"`
	// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
	Substitutions pulumi.StringMapOutput `pulumi:"substitutions"`
	// Tags for annotation of a `BuildTrigger`
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
	TriggerTemplate RepoSourceResponseOutput `pulumi:"triggerTemplate"`
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
	WebhookConfig WebhookConfigResponseOutput `pulumi:"webhookConfig"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"projectId",
	})
	opts = append(opts, replaceOnChanges)
	var resource Trigger
	err := ctx.RegisterResource("google-native:cloudbuild/v1:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("google-native:cloudbuild/v1:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
}

type TriggerState struct {
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	ApprovalConfig *ApprovalConfig `pulumi:"approvalConfig"`
	// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
	Autodetect *bool `pulumi:"autodetect"`
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	BitbucketServerTriggerConfig *BitbucketServerTriggerConfig `pulumi:"bitbucketServerTriggerConfig"`
	// Contents of the build template.
	Build *BuildType `pulumi:"build"`
	// Human-readable description of this trigger.
	Description *string `pulumi:"description"`
	// If true, the trigger will never automatically execute a build.
	Disabled *bool `pulumi:"disabled"`
	// EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
	EventType *TriggerEventType `pulumi:"eventType"`
	// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
	Filename *string `pulumi:"filename"`
	// A Common Expression Language string.
	Filter *string `pulumi:"filter"`
	// The file source describing the local or remote Build template.
	GitFileSource *GitFileSource `pulumi:"gitFileSource"`
	// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
	Github *GitHubEventsConfig `pulumi:"github"`
	// GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.
	GitlabEnterpriseEventsConfig *GitLabEventsConfig `pulumi:"gitlabEnterpriseEventsConfig"`
	// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
	IgnoredFiles []string `pulumi:"ignoredFiles"`
	// If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.
	IncludeBuildLogs *TriggerIncludeBuildLogs `pulumi:"includeBuildLogs"`
	// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
	IncludedFiles []string `pulumi:"includedFiles"`
	Location      *string  `pulumi:"location"`
	// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Required. ID of the project for which to configure automatic builds.
	ProjectId string `pulumi:"projectId"`
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
	PubsubConfig *PubsubConfig `pulumi:"pubsubConfig"`
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig *RepositoryEventConfig `pulumi:"repositoryEventConfig"`
	// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
	ResourceName *string `pulumi:"resourceName"`
	// The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
	ServiceAccount *string `pulumi:"serviceAccount"`
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	SourceToBuild *GitRepoSource `pulumi:"sourceToBuild"`
	// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
	Substitutions map[string]string `pulumi:"substitutions"`
	// Tags for annotation of a `BuildTrigger`
	Tags []string `pulumi:"tags"`
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
	TriggerTemplate *RepoSource `pulumi:"triggerTemplate"`
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
	WebhookConfig *WebhookConfig `pulumi:"webhookConfig"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// Configuration for manual approval to start a build invocation of this BuildTrigger.
	ApprovalConfig ApprovalConfigPtrInput
	// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
	Autodetect pulumi.BoolPtrInput
	// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	BitbucketServerTriggerConfig BitbucketServerTriggerConfigPtrInput
	// Contents of the build template.
	Build BuildTypePtrInput
	// Human-readable description of this trigger.
	Description pulumi.StringPtrInput
	// If true, the trigger will never automatically execute a build.
	Disabled pulumi.BoolPtrInput
	// EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
	EventType TriggerEventTypePtrInput
	// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
	Filename pulumi.StringPtrInput
	// A Common Expression Language string.
	Filter pulumi.StringPtrInput
	// The file source describing the local or remote Build template.
	GitFileSource GitFileSourcePtrInput
	// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
	Github GitHubEventsConfigPtrInput
	// GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.
	GitlabEnterpriseEventsConfig GitLabEventsConfigPtrInput
	// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
	IgnoredFiles pulumi.StringArrayInput
	// If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.
	IncludeBuildLogs TriggerIncludeBuildLogsPtrInput
	// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
	IncludedFiles pulumi.StringArrayInput
	Location      pulumi.StringPtrInput
	// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Required. ID of the project for which to configure automatic builds.
	ProjectId pulumi.StringInput
	// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
	PubsubConfig PubsubConfigPtrInput
	// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	RepositoryEventConfig RepositoryEventConfigPtrInput
	// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
	ResourceName pulumi.StringPtrInput
	// The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
	ServiceAccount pulumi.StringPtrInput
	// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
	SourceToBuild GitRepoSourcePtrInput
	// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
	Substitutions pulumi.StringMapInput
	// Tags for annotation of a `BuildTrigger`
	Tags pulumi.StringArrayInput
	// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
	TriggerTemplate RepoSourcePtrInput
	// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
	WebhookConfig WebhookConfigPtrInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

// Configuration for manual approval to start a build invocation of this BuildTrigger.
func (o TriggerOutput) ApprovalConfig() ApprovalConfigResponseOutput {
	return o.ApplyT(func(v *Trigger) ApprovalConfigResponseOutput { return v.ApprovalConfig }).(ApprovalConfigResponseOutput)
}

// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
func (o TriggerOutput) Autodetect() pulumi.BoolOutput {
	return o.ApplyT(func(v *Trigger) pulumi.BoolOutput { return v.Autodetect }).(pulumi.BoolOutput)
}

// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
func (o TriggerOutput) BitbucketServerTriggerConfig() BitbucketServerTriggerConfigResponseOutput {
	return o.ApplyT(func(v *Trigger) BitbucketServerTriggerConfigResponseOutput { return v.BitbucketServerTriggerConfig }).(BitbucketServerTriggerConfigResponseOutput)
}

// Contents of the build template.
func (o TriggerOutput) Build() BuildResponseOutput {
	return o.ApplyT(func(v *Trigger) BuildResponseOutput { return v.Build }).(BuildResponseOutput)
}

// Time when the trigger was created.
func (o TriggerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Human-readable description of this trigger.
func (o TriggerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// If true, the trigger will never automatically execute a build.
func (o TriggerOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Trigger) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
func (o TriggerOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.EventType }).(pulumi.StringOutput)
}

// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
func (o TriggerOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

// A Common Expression Language string.
func (o TriggerOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Filter }).(pulumi.StringOutput)
}

// The file source describing the local or remote Build template.
func (o TriggerOutput) GitFileSource() GitFileSourceResponseOutput {
	return o.ApplyT(func(v *Trigger) GitFileSourceResponseOutput { return v.GitFileSource }).(GitFileSourceResponseOutput)
}

// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
func (o TriggerOutput) Github() GitHubEventsConfigResponseOutput {
	return o.ApplyT(func(v *Trigger) GitHubEventsConfigResponseOutput { return v.Github }).(GitHubEventsConfigResponseOutput)
}

// GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.
func (o TriggerOutput) GitlabEnterpriseEventsConfig() GitLabEventsConfigResponseOutput {
	return o.ApplyT(func(v *Trigger) GitLabEventsConfigResponseOutput { return v.GitlabEnterpriseEventsConfig }).(GitLabEventsConfigResponseOutput)
}

// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
func (o TriggerOutput) IgnoredFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringArrayOutput { return v.IgnoredFiles }).(pulumi.StringArrayOutput)
}

// If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.
func (o TriggerOutput) IncludeBuildLogs() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.IncludeBuildLogs }).(pulumi.StringOutput)
}

// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
func (o TriggerOutput) IncludedFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringArrayOutput { return v.IncludedFiles }).(pulumi.StringArrayOutput)
}

func (o TriggerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
func (o TriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TriggerOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Required. ID of the project for which to configure automatic builds.
func (o TriggerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
func (o TriggerOutput) PubsubConfig() PubsubConfigResponseOutput {
	return o.ApplyT(func(v *Trigger) PubsubConfigResponseOutput { return v.PubsubConfig }).(PubsubConfigResponseOutput)
}

// The configuration of a trigger that creates a build whenever an event from Repo API is received.
func (o TriggerOutput) RepositoryEventConfig() RepositoryEventConfigResponseOutput {
	return o.ApplyT(func(v *Trigger) RepositoryEventConfigResponseOutput { return v.RepositoryEventConfig }).(RepositoryEventConfigResponseOutput)
}

// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
func (o TriggerOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
func (o TriggerOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.ServiceAccount }).(pulumi.StringOutput)
}

// The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.
func (o TriggerOutput) SourceToBuild() GitRepoSourceResponseOutput {
	return o.ApplyT(func(v *Trigger) GitRepoSourceResponseOutput { return v.SourceToBuild }).(GitRepoSourceResponseOutput)
}

// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
func (o TriggerOutput) Substitutions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringMapOutput { return v.Substitutions }).(pulumi.StringMapOutput)
}

// Tags for annotation of a `BuildTrigger`
func (o TriggerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
func (o TriggerOutput) TriggerTemplate() RepoSourceResponseOutput {
	return o.ApplyT(func(v *Trigger) RepoSourceResponseOutput { return v.TriggerTemplate }).(RepoSourceResponseOutput)
}

// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
func (o TriggerOutput) WebhookConfig() WebhookConfigResponseOutput {
	return o.ApplyT(func(v *Trigger) WebhookConfigResponseOutput { return v.WebhookConfig }).(WebhookConfigResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerInput)(nil)).Elem(), &Trigger{})
	pulumi.RegisterOutputType(TriggerOutput{})
}
