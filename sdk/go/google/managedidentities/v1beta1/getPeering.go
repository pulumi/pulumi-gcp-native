// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single Peering.
func LookupPeering(ctx *pulumi.Context, args *LookupPeeringArgs, opts ...pulumi.InvokeOption) (*LookupPeeringResult, error) {
	var rv LookupPeeringResult
	err := ctx.Invoke("google-native:managedidentities/v1beta1:getPeering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupPeeringArgs struct {
	PeeringId string `pulumi:"peeringId"`
	Project   string `pulumi:"project"`
}

type LookupPeeringResult struct {
	// The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Caller needs to make sure that CIDR subnets do not overlap between networks, else peering creation will fail.
	AuthorizedNetwork string `pulumi:"authorizedNetwork"`
	// The time the instance was created.
	CreateTime string `pulumi:"createTime"`
	// Full domain resource path for the Managed AD Domain involved in peering. The resource path should be in the form: `projects/{project_id}/locations/global/domains/{domain_name}`
	DomainResource string `pulumi:"domainResource"`
	// Optional. Resource labels to represent user provided metadata.
	Labels map[string]string `pulumi:"labels"`
	// Unique name of the peering in this scope including projects and location using the form: `projects/{project_id}/locations/global/peerings/{peering_id}`.
	Name string `pulumi:"name"`
	// The current state of this Peering.
	State string `pulumi:"state"`
	// Additional information about the current status of this peering, if available.
	StatusMessage string `pulumi:"statusMessage"`
	// Last update time.
	UpdateTime string `pulumi:"updateTime"`
}
