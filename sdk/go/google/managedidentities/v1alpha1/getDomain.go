// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets details of a single Domain.
func LookupDomain(ctx *pulumi.Context, args *LookupDomainArgs, opts ...pulumi.InvokeOption) (*LookupDomainResult, error) {
	var rv LookupDomainResult
	err := ctx.Invoke("google-native:managedidentities/v1alpha1:getDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDomainArgs struct {
	DomainId string  `pulumi:"domainId"`
	Project  *string `pulumi:"project"`
}

type LookupDomainResult struct {
	// Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
	AuditLogsEnabled bool `pulumi:"auditLogsEnabled"`
	// Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Network can be added using UpdateDomain later. Domain is only available on network part of authorized_networks. Caller needs to make sure that CIDR subnets do not overlap between networks, else domain creation will fail.
	AuthorizedNetworks []string `pulumi:"authorizedNetworks"`
	// The time the instance was created. Synthetic field is populated automatically by CCFE. go/ccfe-synthetic-field-user-guide
	CreateTime string `pulumi:"createTime"`
	// Fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory that is set up on an internal network.
	Fqdn string `pulumi:"fqdn"`
	// Optional. Resource labels to represent user provided metadata
	Labels map[string]string `pulumi:"labels"`
	// Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
	Locations []string `pulumi:"locations"`
	// Optional. Name of customer-visible admin used to perform Active Directory operations. If not specified `setupadmin` would be used.
	ManagedIdentitiesAdminName string `pulumi:"managedIdentitiesAdminName"`
	// Unique name of the domain in this scope including projects and location using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
	Name string `pulumi:"name"`
	// The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
	ReservedIpRange string `pulumi:"reservedIpRange"`
	// The current state of this domain.
	State string `pulumi:"state"`
	// Additional information about the current status of this domain, if available.
	StatusMessage string `pulumi:"statusMessage"`
	// The current trusts associated with the domain.
	Trusts []TrustResponse `pulumi:"trusts"`
	// Last update time. Synthetic field is populated automatically by CCFE.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupDomainOutput(ctx *pulumi.Context, args LookupDomainOutputArgs, opts ...pulumi.InvokeOption) LookupDomainResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDomainResult, error) {
			args := v.(LookupDomainArgs)
			r, err := LookupDomain(ctx, &args, opts...)
			return *r, err
		}).(LookupDomainResultOutput)
}

type LookupDomainOutputArgs struct {
	DomainId pulumi.StringInput    `pulumi:"domainId"`
	Project  pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainArgs)(nil)).Elem()
}

type LookupDomainResultOutput struct{ *pulumi.OutputState }

func (LookupDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDomainResult)(nil)).Elem()
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutput() LookupDomainResultOutput {
	return o
}

func (o LookupDomainResultOutput) ToLookupDomainResultOutputWithContext(ctx context.Context) LookupDomainResultOutput {
	return o
}

// Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.
func (o LookupDomainResultOutput) AuditLogsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDomainResult) bool { return v.AuditLogsEnabled }).(pulumi.BoolOutput)
}

// Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) to which the instance is connected. Network can be added using UpdateDomain later. Domain is only available on network part of authorized_networks. Caller needs to make sure that CIDR subnets do not overlap between networks, else domain creation will fail.
func (o LookupDomainResultOutput) AuthorizedNetworks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []string { return v.AuthorizedNetworks }).(pulumi.StringArrayOutput)
}

// The time the instance was created. Synthetic field is populated automatically by CCFE. go/ccfe-synthetic-field-user-guide
func (o LookupDomainResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory that is set up on an internal network.
func (o LookupDomainResultOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.Fqdn }).(pulumi.StringOutput)
}

// Optional. Resource labels to represent user provided metadata
func (o LookupDomainResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupDomainResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.
func (o LookupDomainResultOutput) Locations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []string { return v.Locations }).(pulumi.StringArrayOutput)
}

// Optional. Name of customer-visible admin used to perform Active Directory operations. If not specified `setupadmin` would be used.
func (o LookupDomainResultOutput) ManagedIdentitiesAdminName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.ManagedIdentitiesAdminName }).(pulumi.StringOutput)
}

// Unique name of the domain in this scope including projects and location using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.
func (o LookupDomainResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.Name }).(pulumi.StringOutput)
}

// The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].
func (o LookupDomainResultOutput) ReservedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.ReservedIpRange }).(pulumi.StringOutput)
}

// The current state of this domain.
func (o LookupDomainResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.State }).(pulumi.StringOutput)
}

// Additional information about the current status of this domain, if available.
func (o LookupDomainResultOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// The current trusts associated with the domain.
func (o LookupDomainResultOutput) Trusts() TrustResponseArrayOutput {
	return o.ApplyT(func(v LookupDomainResult) []TrustResponse { return v.Trusts }).(TrustResponseArrayOutput)
}

// Last update time. Synthetic field is populated automatically by CCFE.
func (o LookupDomainResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDomainResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDomainResultOutput{})
}
