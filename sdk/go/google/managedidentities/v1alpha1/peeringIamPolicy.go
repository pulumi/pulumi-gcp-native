// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
type PeeringIamPolicy struct {
	pulumi.CustomResourceState
}

// NewPeeringIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewPeeringIamPolicy(ctx *pulumi.Context,
	name string, args *PeeringIamPolicyArgs, opts ...pulumi.ResourceOption) (*PeeringIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeeringsId == nil {
		return nil, errors.New("invalid value for required argument 'PeeringsId'")
	}
	if args.ProjectsId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectsId'")
	}
	var resource PeeringIamPolicy
	err := ctx.RegisterResource("google-cloud:managedidentities/v1alpha1:PeeringIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringIamPolicy gets an existing PeeringIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringIamPolicyState, opts ...pulumi.ResourceOption) (*PeeringIamPolicy, error) {
	var resource PeeringIamPolicy
	err := ctx.ReadResource("google-cloud:managedidentities/v1alpha1:PeeringIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringIamPolicy resources.
type peeringIamPolicyState struct {
}

type PeeringIamPolicyState struct {
}

func (PeeringIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringIamPolicyState)(nil)).Elem()
}

type peeringIamPolicyArgs struct {
	PeeringsId string `pulumi:"peeringsId"`
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     *Policy `pulumi:"policy"`
	ProjectsId string  `pulumi:"projectsId"`
}

// The set of arguments for constructing a PeeringIamPolicy resource.
type PeeringIamPolicyArgs struct {
	PeeringsId pulumi.StringInput
	// REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.
	Policy     PolicyPtrInput
	ProjectsId pulumi.StringInput
}

func (PeeringIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringIamPolicyArgs)(nil)).Elem()
}

type PeeringIamPolicyInput interface {
	pulumi.Input

	ToPeeringIamPolicyOutput() PeeringIamPolicyOutput
	ToPeeringIamPolicyOutputWithContext(ctx context.Context) PeeringIamPolicyOutput
}

func (*PeeringIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringIamPolicy)(nil))
}

func (i *PeeringIamPolicy) ToPeeringIamPolicyOutput() PeeringIamPolicyOutput {
	return i.ToPeeringIamPolicyOutputWithContext(context.Background())
}

func (i *PeeringIamPolicy) ToPeeringIamPolicyOutputWithContext(ctx context.Context) PeeringIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringIamPolicyOutput)
}

type PeeringIamPolicyOutput struct {
	*pulumi.OutputState
}

func (PeeringIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PeeringIamPolicy)(nil))
}

func (o PeeringIamPolicyOutput) ToPeeringIamPolicyOutput() PeeringIamPolicyOutput {
	return o
}

func (o PeeringIamPolicyOutput) ToPeeringIamPolicyOutputWithContext(ctx context.Context) PeeringIamPolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PeeringIamPolicyOutput{})
}
