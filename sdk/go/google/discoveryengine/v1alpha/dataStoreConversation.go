// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
// Auto-naming is currently not supported for this resource.
type DataStoreConversation struct {
	pulumi.CustomResourceState

	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	DataStoreId  pulumi.StringOutput `pulumi:"dataStoreId"`
	// The time the conversation finished.
	EndTime  pulumi.StringOutput `pulumi:"endTime"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Conversation messages.
	Messages GoogleCloudDiscoveryengineV1alphaConversationMessageResponseArrayOutput `pulumi:"messages"`
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The time the conversation started.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The state of the Conversation.
	State pulumi.StringOutput `pulumi:"state"`
	// A unique identifier for tracking users.
	UserPseudoId pulumi.StringOutput `pulumi:"userPseudoId"`
}

// NewDataStoreConversation registers a new resource with the given unique name, arguments, and options.
func NewDataStoreConversation(ctx *pulumi.Context,
	name string, args *DataStoreConversationArgs, opts ...pulumi.ResourceOption) (*DataStoreConversation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"collectionId",
		"dataStoreId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataStoreConversation
	err := ctx.RegisterResource("google-native:discoveryengine/v1alpha:DataStoreConversation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataStoreConversation gets an existing DataStoreConversation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataStoreConversation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataStoreConversationState, opts ...pulumi.ResourceOption) (*DataStoreConversation, error) {
	var resource DataStoreConversation
	err := ctx.ReadResource("google-native:discoveryengine/v1alpha:DataStoreConversation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataStoreConversation resources.
type dataStoreConversationState struct {
}

type DataStoreConversationState struct {
}

func (DataStoreConversationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreConversationState)(nil)).Elem()
}

type dataStoreConversationArgs struct {
	CollectionId string  `pulumi:"collectionId"`
	DataStoreId  string  `pulumi:"dataStoreId"`
	Location     *string `pulumi:"location"`
	// Conversation messages.
	Messages []GoogleCloudDiscoveryengineV1alphaConversationMessage `pulumi:"messages"`
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The state of the Conversation.
	State *DataStoreConversationStateEnum `pulumi:"state"`
	// A unique identifier for tracking users.
	UserPseudoId *string `pulumi:"userPseudoId"`
}

// The set of arguments for constructing a DataStoreConversation resource.
type DataStoreConversationArgs struct {
	CollectionId pulumi.StringInput
	DataStoreId  pulumi.StringInput
	Location     pulumi.StringPtrInput
	// Conversation messages.
	Messages GoogleCloudDiscoveryengineV1alphaConversationMessageArrayInput
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The state of the Conversation.
	State DataStoreConversationStateEnumPtrInput
	// A unique identifier for tracking users.
	UserPseudoId pulumi.StringPtrInput
}

func (DataStoreConversationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreConversationArgs)(nil)).Elem()
}

type DataStoreConversationInput interface {
	pulumi.Input

	ToDataStoreConversationOutput() DataStoreConversationOutput
	ToDataStoreConversationOutputWithContext(ctx context.Context) DataStoreConversationOutput
}

func (*DataStoreConversation) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStoreConversation)(nil)).Elem()
}

func (i *DataStoreConversation) ToDataStoreConversationOutput() DataStoreConversationOutput {
	return i.ToDataStoreConversationOutputWithContext(context.Background())
}

func (i *DataStoreConversation) ToDataStoreConversationOutputWithContext(ctx context.Context) DataStoreConversationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStoreConversationOutput)
}

type DataStoreConversationOutput struct{ *pulumi.OutputState }

func (DataStoreConversationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStoreConversation)(nil)).Elem()
}

func (o DataStoreConversationOutput) ToDataStoreConversationOutput() DataStoreConversationOutput {
	return o
}

func (o DataStoreConversationOutput) ToDataStoreConversationOutputWithContext(ctx context.Context) DataStoreConversationOutput {
	return o
}

func (o DataStoreConversationOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

func (o DataStoreConversationOutput) DataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.DataStoreId }).(pulumi.StringOutput)
}

// The time the conversation finished.
func (o DataStoreConversationOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

func (o DataStoreConversationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Conversation messages.
func (o DataStoreConversationOutput) Messages() GoogleCloudDiscoveryengineV1alphaConversationMessageResponseArrayOutput {
	return o.ApplyT(func(v *DataStoreConversation) GoogleCloudDiscoveryengineV1alphaConversationMessageResponseArrayOutput {
		return v.Messages
	}).(GoogleCloudDiscoveryengineV1alphaConversationMessageResponseArrayOutput)
}

// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
func (o DataStoreConversationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataStoreConversationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The time the conversation started.
func (o DataStoreConversationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the Conversation.
func (o DataStoreConversationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A unique identifier for tracking users.
func (o DataStoreConversationOutput) UserPseudoId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStoreConversation) pulumi.StringOutput { return v.UserPseudoId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataStoreConversationInput)(nil)).Elem(), &DataStoreConversation{})
	pulumi.RegisterOutputType(DataStoreConversationOutput{})
}
