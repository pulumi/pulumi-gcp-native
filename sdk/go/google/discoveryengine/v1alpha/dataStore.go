// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a DataStore. DataStore is for storing Documents. To serve these documents for Search, or Recommendation use case, an Engine needs to be created separately.
type DataStore struct {
	pulumi.CustomResourceState

	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
	ContentConfig pulumi.StringOutput `pulumi:"contentConfig"`
	// A boolean flag indicating whether user want to directly create an advanced data store for site search. If the data store is not configured as site search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will be ignored.
	CreateAdvancedSiteSearch pulumi.BoolPtrOutput `pulumi:"createAdvancedSiteSearch"`
	// Timestamp the DataStore was created at.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Required. The ID to use for the DataStore, which will become the final component of the DataStore's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	DataStoreId pulumi.StringOutput `pulumi:"dataStoreId"`
	// The id of the default Schema asscociated to this data store.
	DefaultSchemaId pulumi.StringOutput `pulumi:"defaultSchemaId"`
	// The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Immutable. The industry vertical that the data store registers.
	IndustryVertical pulumi.StringOutput `pulumi:"industryVertical"`
	Location         pulumi.StringOutput `pulumi:"location"`
	// Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.
	SolutionTypes pulumi.StringArrayOutput `pulumi:"solutionTypes"`
}

// NewDataStore registers a new resource with the given unique name, arguments, and options.
func NewDataStore(ctx *pulumi.Context,
	name string, args *DataStoreArgs, opts ...pulumi.ResourceOption) (*DataStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"collectionId",
		"dataStoreId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataStore
	err := ctx.RegisterResource("google-native:discoveryengine/v1alpha:DataStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataStore gets an existing DataStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataStoreState, opts ...pulumi.ResourceOption) (*DataStore, error) {
	var resource DataStore
	err := ctx.ReadResource("google-native:discoveryengine/v1alpha:DataStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataStore resources.
type dataStoreState struct {
}

type DataStoreState struct {
}

func (DataStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreState)(nil)).Elem()
}

type dataStoreArgs struct {
	CollectionId string `pulumi:"collectionId"`
	// Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
	ContentConfig *DataStoreContentConfig `pulumi:"contentConfig"`
	// A boolean flag indicating whether user want to directly create an advanced data store for site search. If the data store is not configured as site search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will be ignored.
	CreateAdvancedSiteSearch *bool `pulumi:"createAdvancedSiteSearch"`
	// Required. The ID to use for the DataStore, which will become the final component of the DataStore's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	DataStoreId string `pulumi:"dataStoreId"`
	// The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	DisplayName string `pulumi:"displayName"`
	// Immutable. The industry vertical that the data store registers.
	IndustryVertical *DataStoreIndustryVertical `pulumi:"industryVertical"`
	Location         *string                    `pulumi:"location"`
	// Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.
	SolutionTypes []DataStoreSolutionTypesItem `pulumi:"solutionTypes"`
}

// The set of arguments for constructing a DataStore resource.
type DataStoreArgs struct {
	CollectionId pulumi.StringInput
	// Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
	ContentConfig DataStoreContentConfigPtrInput
	// A boolean flag indicating whether user want to directly create an advanced data store for site search. If the data store is not configured as site search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will be ignored.
	CreateAdvancedSiteSearch pulumi.BoolPtrInput
	// Required. The ID to use for the DataStore, which will become the final component of the DataStore's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	DataStoreId pulumi.StringInput
	// The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	DisplayName pulumi.StringInput
	// Immutable. The industry vertical that the data store registers.
	IndustryVertical DataStoreIndustryVerticalPtrInput
	Location         pulumi.StringPtrInput
	// Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.
	SolutionTypes DataStoreSolutionTypesItemArrayInput
}

func (DataStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataStoreArgs)(nil)).Elem()
}

type DataStoreInput interface {
	pulumi.Input

	ToDataStoreOutput() DataStoreOutput
	ToDataStoreOutputWithContext(ctx context.Context) DataStoreOutput
}

func (*DataStore) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStore)(nil)).Elem()
}

func (i *DataStore) ToDataStoreOutput() DataStoreOutput {
	return i.ToDataStoreOutputWithContext(context.Background())
}

func (i *DataStore) ToDataStoreOutputWithContext(ctx context.Context) DataStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataStoreOutput)
}

type DataStoreOutput struct{ *pulumi.OutputState }

func (DataStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataStore)(nil)).Elem()
}

func (o DataStoreOutput) ToDataStoreOutput() DataStoreOutput {
	return o
}

func (o DataStoreOutput) ToDataStoreOutputWithContext(ctx context.Context) DataStoreOutput {
	return o
}

func (o DataStoreOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
func (o DataStoreOutput) ContentConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.ContentConfig }).(pulumi.StringOutput)
}

// A boolean flag indicating whether user want to directly create an advanced data store for site search. If the data store is not configured as site search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will be ignored.
func (o DataStoreOutput) CreateAdvancedSiteSearch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataStore) pulumi.BoolPtrOutput { return v.CreateAdvancedSiteSearch }).(pulumi.BoolPtrOutput)
}

// Timestamp the DataStore was created at.
func (o DataStoreOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Required. The ID to use for the DataStore, which will become the final component of the DataStore's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
func (o DataStoreOutput) DataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.DataStoreId }).(pulumi.StringOutput)
}

// The id of the default Schema asscociated to this data store.
func (o DataStoreOutput) DefaultSchemaId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.DefaultSchemaId }).(pulumi.StringOutput)
}

// The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
func (o DataStoreOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Immutable. The industry vertical that the data store registers.
func (o DataStoreOutput) IndustryVertical() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.IndustryVertical }).(pulumi.StringOutput)
}

func (o DataStoreOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
func (o DataStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DataStoreOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.
func (o DataStoreOutput) SolutionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataStore) pulumi.StringArrayOutput { return v.SolutionTypes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataStoreInput)(nil)).Elem(), &DataStore{})
	pulumi.RegisterOutputType(DataStoreOutput{})
}
