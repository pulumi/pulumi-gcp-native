// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Document.
type Document struct {
	pulumi.CustomResourceState

	BranchId     pulumi.StringOutput `pulumi:"branchId"`
	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// The unstructured data linked to this document. Content must be set if this document is under a `CONTENT_REQUIRED` data store.
	Content     GoogleCloudDiscoveryengineV1alphaDocumentContentResponseOutput `pulumi:"content"`
	DataStoreId pulumi.StringOutput                                            `pulumi:"dataStoreId"`
	// This field is OUTPUT_ONLY. It contains derived data that are not in the original input document.
	DerivedStructData pulumi.MapOutput `pulumi:"derivedStructData"`
	// Required. The ID to use for the Document, which will become the final component of the Document.name. If the caller does not have permission to create the Document, regardless of whether or not it exists, a `PERMISSION_DENIED` error is returned. This field must be unique among all Documents with the same parent. Otherwise, an `ALREADY_EXISTS` error is returned. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
	DocumentId pulumi.StringOutput `pulumi:"documentId"`
	// The JSON string representation of the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
	JsonData pulumi.StringOutput `pulumi:"jsonData"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
	ParentDocumentId pulumi.StringOutput `pulumi:"parentDocumentId"`
	Project          pulumi.StringOutput `pulumi:"project"`
	// The identifier of the schema located in the same data store.
	SchemaId pulumi.StringOutput `pulumi:"schemaId"`
	// The structured JSON data for the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
	StructData pulumi.MapOutput `pulumi:"structData"`
}

// NewDocument registers a new resource with the given unique name, arguments, and options.
func NewDocument(ctx *pulumi.Context,
	name string, args *DocumentArgs, opts ...pulumi.ResourceOption) (*Document, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BranchId == nil {
		return nil, errors.New("invalid value for required argument 'BranchId'")
	}
	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DataStoreId == nil {
		return nil, errors.New("invalid value for required argument 'DataStoreId'")
	}
	if args.DocumentId == nil {
		return nil, errors.New("invalid value for required argument 'DocumentId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"branchId",
		"collectionId",
		"dataStoreId",
		"documentId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Document
	err := ctx.RegisterResource("google-native:discoveryengine/v1alpha:Document", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDocument gets an existing Document resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDocument(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DocumentState, opts ...pulumi.ResourceOption) (*Document, error) {
	var resource Document
	err := ctx.ReadResource("google-native:discoveryengine/v1alpha:Document", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Document resources.
type documentState struct {
}

type DocumentState struct {
}

func (DocumentState) ElementType() reflect.Type {
	return reflect.TypeOf((*documentState)(nil)).Elem()
}

type documentArgs struct {
	BranchId     string `pulumi:"branchId"`
	CollectionId string `pulumi:"collectionId"`
	// The unstructured data linked to this document. Content must be set if this document is under a `CONTENT_REQUIRED` data store.
	Content     *GoogleCloudDiscoveryengineV1alphaDocumentContent `pulumi:"content"`
	DataStoreId string                                            `pulumi:"dataStoreId"`
	// Required. The ID to use for the Document, which will become the final component of the Document.name. If the caller does not have permission to create the Document, regardless of whether or not it exists, a `PERMISSION_DENIED` error is returned. This field must be unique among all Documents with the same parent. Otherwise, an `ALREADY_EXISTS` error is returned. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
	DocumentId string `pulumi:"documentId"`
	// Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
	Id *string `pulumi:"id"`
	// The JSON string representation of the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
	JsonData *string `pulumi:"jsonData"`
	Location *string `pulumi:"location"`
	// Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name *string `pulumi:"name"`
	// The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
	ParentDocumentId *string `pulumi:"parentDocumentId"`
	Project          *string `pulumi:"project"`
	// The identifier of the schema located in the same data store.
	SchemaId *string `pulumi:"schemaId"`
	// The structured JSON data for the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
	StructData map[string]interface{} `pulumi:"structData"`
}

// The set of arguments for constructing a Document resource.
type DocumentArgs struct {
	BranchId     pulumi.StringInput
	CollectionId pulumi.StringInput
	// The unstructured data linked to this document. Content must be set if this document is under a `CONTENT_REQUIRED` data store.
	Content     GoogleCloudDiscoveryengineV1alphaDocumentContentPtrInput
	DataStoreId pulumi.StringInput
	// Required. The ID to use for the Document, which will become the final component of the Document.name. If the caller does not have permission to create the Document, regardless of whether or not it exists, a `PERMISSION_DENIED` error is returned. This field must be unique among all Documents with the same parent. Otherwise, an `ALREADY_EXISTS` error is returned. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
	DocumentId pulumi.StringInput
	// Immutable. The identifier of the document. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
	Id pulumi.StringPtrInput
	// The JSON string representation of the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
	JsonData pulumi.StringPtrInput
	Location pulumi.StringPtrInput
	// Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name pulumi.StringPtrInput
	// The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
	ParentDocumentId pulumi.StringPtrInput
	Project          pulumi.StringPtrInput
	// The identifier of the schema located in the same data store.
	SchemaId pulumi.StringPtrInput
	// The structured JSON data for the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
	StructData pulumi.MapInput
}

func (DocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*documentArgs)(nil)).Elem()
}

type DocumentInput interface {
	pulumi.Input

	ToDocumentOutput() DocumentOutput
	ToDocumentOutputWithContext(ctx context.Context) DocumentOutput
}

func (*Document) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (i *Document) ToDocumentOutput() DocumentOutput {
	return i.ToDocumentOutputWithContext(context.Background())
}

func (i *Document) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DocumentOutput)
}

type DocumentOutput struct{ *pulumi.OutputState }

func (DocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Document)(nil)).Elem()
}

func (o DocumentOutput) ToDocumentOutput() DocumentOutput {
	return o
}

func (o DocumentOutput) ToDocumentOutputWithContext(ctx context.Context) DocumentOutput {
	return o
}

func (o DocumentOutput) BranchId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.BranchId }).(pulumi.StringOutput)
}

func (o DocumentOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// The unstructured data linked to this document. Content must be set if this document is under a `CONTENT_REQUIRED` data store.
func (o DocumentOutput) Content() GoogleCloudDiscoveryengineV1alphaDocumentContentResponseOutput {
	return o.ApplyT(func(v *Document) GoogleCloudDiscoveryengineV1alphaDocumentContentResponseOutput { return v.Content }).(GoogleCloudDiscoveryengineV1alphaDocumentContentResponseOutput)
}

func (o DocumentOutput) DataStoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DataStoreId }).(pulumi.StringOutput)
}

// This field is OUTPUT_ONLY. It contains derived data that are not in the original input document.
func (o DocumentOutput) DerivedStructData() pulumi.MapOutput {
	return o.ApplyT(func(v *Document) pulumi.MapOutput { return v.DerivedStructData }).(pulumi.MapOutput)
}

// Required. The ID to use for the Document, which will become the final component of the Document.name. If the caller does not have permission to create the Document, regardless of whether or not it exists, a `PERMISSION_DENIED` error is returned. This field must be unique among all Documents with the same parent. Otherwise, an `ALREADY_EXISTS` error is returned. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
func (o DocumentOutput) DocumentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.DocumentId }).(pulumi.StringOutput)
}

// The JSON string representation of the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
func (o DocumentOutput) JsonData() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.JsonData }).(pulumi.StringOutput)
}

func (o DocumentOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Immutable. The full resource name of the document. Format: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
func (o DocumentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The identifier of the parent document. Currently supports at most two level document hierarchy. Id should conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters.
func (o DocumentOutput) ParentDocumentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.ParentDocumentId }).(pulumi.StringOutput)
}

func (o DocumentOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The identifier of the schema located in the same data store.
func (o DocumentOutput) SchemaId() pulumi.StringOutput {
	return o.ApplyT(func(v *Document) pulumi.StringOutput { return v.SchemaId }).(pulumi.StringOutput)
}

// The structured JSON data for the document. It should conform to the registered Schema or an `INVALID_ARGUMENT` error is thrown.
func (o DocumentOutput) StructData() pulumi.MapOutput {
	return o.ApplyT(func(v *Document) pulumi.MapOutput { return v.StructData }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DocumentInput)(nil)).Elem(), &Document{})
	pulumi.RegisterOutputType(DocumentOutput{})
}
