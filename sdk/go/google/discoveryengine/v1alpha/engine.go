// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Engine.
type Engine struct {
	pulumi.CustomResourceState

	// Configurations for the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
	ChatEngineConfig GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigResponseOutput `pulumi:"chatEngineConfig"`
	// Additional information of the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
	ChatEngineMetadata GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadataResponseOutput `pulumi:"chatEngineMetadata"`
	CollectionId       pulumi.StringOutput                                                     `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig GoogleCloudDiscoveryengineV1alphaEngineCommonConfigResponseOutput `pulumi:"commonConfig"`
	// Timestamp the Recommendation Engine was created at.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary intializations.
	DataStoreIds pulumi.StringArrayOutput `pulumi:"dataStoreIds"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Required. The ID to use for the Engine, which will become the final component of the Engine's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	IndustryVertical pulumi.StringOutput `pulumi:"industryVertical"`
	Location         pulumi.StringOutput `pulumi:"location"`
	// Configurations for the Media Engine. Only applicable on the data stores with solution_type SOLUTION_TYPE_RECOMMENDATION and IndustryVertical.MEDIA vertical.
	MediaRecommendationEngineConfig GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigResponseOutput `pulumi:"mediaRecommendationEngineConfig"`
	// Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// Additional information of a recommendation engine. Only applicable if solution_type is SOLUTION_TYPE_RECOMMENDATION.
	RecommendationMetadata GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadataResponseOutput `pulumi:"recommendationMetadata"`
	// Configurations for the Search Engine. Only applicable if solution_type is SOLUTION_TYPE_SEARCH.
	SearchEngineConfig GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigResponseOutput `pulumi:"searchEngineConfig"`
	// Additional config specs for a `similar-items` engine.
	SimilarDocumentsConfig GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigResponseOutput `pulumi:"similarDocumentsConfig"`
	// The solutions of the engine.
	SolutionType pulumi.StringOutput `pulumi:"solutionType"`
	// Timestamp the Recommendation Engine was last updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEngine registers a new resource with the given unique name, arguments, and options.
func NewEngine(ctx *pulumi.Context,
	name string, args *EngineArgs, opts ...pulumi.ResourceOption) (*Engine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	if args.SolutionType == nil {
		return nil, errors.New("invalid value for required argument 'SolutionType'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"collectionId",
		"engineId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Engine
	err := ctx.RegisterResource("google-native:discoveryengine/v1alpha:Engine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEngine gets an existing Engine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEngine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EngineState, opts ...pulumi.ResourceOption) (*Engine, error) {
	var resource Engine
	err := ctx.ReadResource("google-native:discoveryengine/v1alpha:Engine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Engine resources.
type engineState struct {
}

type EngineState struct {
}

func (EngineState) ElementType() reflect.Type {
	return reflect.TypeOf((*engineState)(nil)).Elem()
}

type engineArgs struct {
	// Configurations for the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
	ChatEngineConfig *GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfig `pulumi:"chatEngineConfig"`
	CollectionId     string                                                   `pulumi:"collectionId"`
	// Common config spec that specifies the metadata of the engine.
	CommonConfig *GoogleCloudDiscoveryengineV1alphaEngineCommonConfig `pulumi:"commonConfig"`
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary intializations.
	DataStoreIds []string `pulumi:"dataStoreIds"`
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName string `pulumi:"displayName"`
	// Required. The ID to use for the Engine, which will become the final component of the Engine's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	EngineId string `pulumi:"engineId"`
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	IndustryVertical *EngineIndustryVertical `pulumi:"industryVertical"`
	Location         *string                 `pulumi:"location"`
	// Configurations for the Media Engine. Only applicable on the data stores with solution_type SOLUTION_TYPE_RECOMMENDATION and IndustryVertical.MEDIA vertical.
	MediaRecommendationEngineConfig *GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfig `pulumi:"mediaRecommendationEngineConfig"`
	// Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// Configurations for the Search Engine. Only applicable if solution_type is SOLUTION_TYPE_SEARCH.
	SearchEngineConfig *GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfig `pulumi:"searchEngineConfig"`
	// Additional config specs for a `similar-items` engine.
	SimilarDocumentsConfig *GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfig `pulumi:"similarDocumentsConfig"`
	// The solutions of the engine.
	SolutionType EngineSolutionType `pulumi:"solutionType"`
}

// The set of arguments for constructing a Engine resource.
type EngineArgs struct {
	// Configurations for the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
	ChatEngineConfig GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigPtrInput
	CollectionId     pulumi.StringInput
	// Common config spec that specifies the metadata of the engine.
	CommonConfig GoogleCloudDiscoveryengineV1alphaEngineCommonConfigPtrInput
	// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary intializations.
	DataStoreIds pulumi.StringArrayInput
	// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
	DisplayName pulumi.StringInput
	// Required. The ID to use for the Engine, which will become the final component of the Engine's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	EngineId pulumi.StringInput
	// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
	IndustryVertical EngineIndustryVerticalPtrInput
	Location         pulumi.StringPtrInput
	// Configurations for the Media Engine. Only applicable on the data stores with solution_type SOLUTION_TYPE_RECOMMENDATION and IndustryVertical.MEDIA vertical.
	MediaRecommendationEngineConfig GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigPtrInput
	// Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// Configurations for the Search Engine. Only applicable if solution_type is SOLUTION_TYPE_SEARCH.
	SearchEngineConfig GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigPtrInput
	// Additional config specs for a `similar-items` engine.
	SimilarDocumentsConfig GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigPtrInput
	// The solutions of the engine.
	SolutionType EngineSolutionTypeInput
}

func (EngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*engineArgs)(nil)).Elem()
}

type EngineInput interface {
	pulumi.Input

	ToEngineOutput() EngineOutput
	ToEngineOutputWithContext(ctx context.Context) EngineOutput
}

func (*Engine) ElementType() reflect.Type {
	return reflect.TypeOf((**Engine)(nil)).Elem()
}

func (i *Engine) ToEngineOutput() EngineOutput {
	return i.ToEngineOutputWithContext(context.Background())
}

func (i *Engine) ToEngineOutputWithContext(ctx context.Context) EngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EngineOutput)
}

type EngineOutput struct{ *pulumi.OutputState }

func (EngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Engine)(nil)).Elem()
}

func (o EngineOutput) ToEngineOutput() EngineOutput {
	return o
}

func (o EngineOutput) ToEngineOutputWithContext(ctx context.Context) EngineOutput {
	return o
}

// Configurations for the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
func (o EngineOutput) ChatEngineConfig() GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigResponseOutput {
	return o.ApplyT(func(v *Engine) GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigResponseOutput {
		return v.ChatEngineConfig
	}).(GoogleCloudDiscoveryengineV1alphaEngineChatEngineConfigResponseOutput)
}

// Additional information of the Chat Engine. Only applicable if solution_type is SOLUTION_TYPE_CHAT.
func (o EngineOutput) ChatEngineMetadata() GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadataResponseOutput {
	return o.ApplyT(func(v *Engine) GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadataResponseOutput {
		return v.ChatEngineMetadata
	}).(GoogleCloudDiscoveryengineV1alphaEngineChatEngineMetadataResponseOutput)
}

func (o EngineOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// Common config spec that specifies the metadata of the engine.
func (o EngineOutput) CommonConfig() GoogleCloudDiscoveryengineV1alphaEngineCommonConfigResponseOutput {
	return o.ApplyT(func(v *Engine) GoogleCloudDiscoveryengineV1alphaEngineCommonConfigResponseOutput {
		return v.CommonConfig
	}).(GoogleCloudDiscoveryengineV1alphaEngineCommonConfigResponseOutput)
}

// Timestamp the Recommendation Engine was created at.
func (o EngineOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary intializations.
func (o EngineOutput) DataStoreIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringArrayOutput { return v.DataStoreIds }).(pulumi.StringArrayOutput)
}

// The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.
func (o EngineOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Required. The ID to use for the Engine, which will become the final component of the Engine's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
func (o EngineOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

// The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.
func (o EngineOutput) IndustryVertical() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.IndustryVertical }).(pulumi.StringOutput)
}

func (o EngineOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Configurations for the Media Engine. Only applicable on the data stores with solution_type SOLUTION_TYPE_RECOMMENDATION and IndustryVertical.MEDIA vertical.
func (o EngineOutput) MediaRecommendationEngineConfig() GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigResponseOutput {
	return o.ApplyT(func(v *Engine) GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigResponseOutput {
		return v.MediaRecommendationEngineConfig
	}).(GoogleCloudDiscoveryengineV1alphaEngineMediaRecommendationEngineConfigResponseOutput)
}

// Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.
func (o EngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EngineOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Additional information of a recommendation engine. Only applicable if solution_type is SOLUTION_TYPE_RECOMMENDATION.
func (o EngineOutput) RecommendationMetadata() GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadataResponseOutput {
	return o.ApplyT(func(v *Engine) GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadataResponseOutput {
		return v.RecommendationMetadata
	}).(GoogleCloudDiscoveryengineV1alphaEngineRecommendationMetadataResponseOutput)
}

// Configurations for the Search Engine. Only applicable if solution_type is SOLUTION_TYPE_SEARCH.
func (o EngineOutput) SearchEngineConfig() GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigResponseOutput {
	return o.ApplyT(func(v *Engine) GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigResponseOutput {
		return v.SearchEngineConfig
	}).(GoogleCloudDiscoveryengineV1alphaEngineSearchEngineConfigResponseOutput)
}

// Additional config specs for a `similar-items` engine.
func (o EngineOutput) SimilarDocumentsConfig() GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigResponseOutput {
	return o.ApplyT(func(v *Engine) GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigResponseOutput {
		return v.SimilarDocumentsConfig
	}).(GoogleCloudDiscoveryengineV1alphaEngineSimilarDocumentsEngineConfigResponseOutput)
}

// The solutions of the engine.
func (o EngineOutput) SolutionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.SolutionType }).(pulumi.StringOutput)
}

// Timestamp the Recommendation Engine was last updated.
func (o EngineOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Engine) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EngineInput)(nil)).Elem(), &Engine{})
	pulumi.RegisterOutputType(EngineOutput{})
}
