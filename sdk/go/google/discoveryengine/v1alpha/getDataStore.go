// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a DataStore.
func LookupDataStore(ctx *pulumi.Context, args *LookupDataStoreArgs, opts ...pulumi.InvokeOption) (*LookupDataStoreResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDataStoreResult
	err := ctx.Invoke("google-native:discoveryengine/v1alpha:getDataStore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDataStoreArgs struct {
	CollectionId string  `pulumi:"collectionId"`
	DataStoreId  string  `pulumi:"dataStoreId"`
	Location     string  `pulumi:"location"`
	Project      *string `pulumi:"project"`
}

type LookupDataStoreResult struct {
	// Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
	ContentConfig string `pulumi:"contentConfig"`
	// Timestamp the DataStore was created at.
	CreateTime string `pulumi:"createTime"`
	// The id of the default Schema asscociated to this data store.
	DefaultSchemaId string `pulumi:"defaultSchemaId"`
	// The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
	DisplayName string `pulumi:"displayName"`
	// Immutable. The industry vertical that the data store registers.
	IndustryVertical string `pulumi:"industryVertical"`
	// Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
	Name string `pulumi:"name"`
	// The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.
	SolutionTypes []string `pulumi:"solutionTypes"`
}

func LookupDataStoreOutput(ctx *pulumi.Context, args LookupDataStoreOutputArgs, opts ...pulumi.InvokeOption) LookupDataStoreResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataStoreResult, error) {
			args := v.(LookupDataStoreArgs)
			r, err := LookupDataStore(ctx, &args, opts...)
			var s LookupDataStoreResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDataStoreResultOutput)
}

type LookupDataStoreOutputArgs struct {
	CollectionId pulumi.StringInput    `pulumi:"collectionId"`
	DataStoreId  pulumi.StringInput    `pulumi:"dataStoreId"`
	Location     pulumi.StringInput    `pulumi:"location"`
	Project      pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDataStoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataStoreArgs)(nil)).Elem()
}

type LookupDataStoreResultOutput struct{ *pulumi.OutputState }

func (LookupDataStoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataStoreResult)(nil)).Elem()
}

func (o LookupDataStoreResultOutput) ToLookupDataStoreResultOutput() LookupDataStoreResultOutput {
	return o
}

func (o LookupDataStoreResultOutput) ToLookupDataStoreResultOutputWithContext(ctx context.Context) LookupDataStoreResultOutput {
	return o
}

// Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.
func (o LookupDataStoreResultOutput) ContentConfig() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreResult) string { return v.ContentConfig }).(pulumi.StringOutput)
}

// Timestamp the DataStore was created at.
func (o LookupDataStoreResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the default Schema asscociated to this data store.
func (o LookupDataStoreResultOutput) DefaultSchemaId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreResult) string { return v.DefaultSchemaId }).(pulumi.StringOutput)
}

// The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
func (o LookupDataStoreResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Immutable. The industry vertical that the data store registers.
func (o LookupDataStoreResultOutput) IndustryVertical() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreResult) string { return v.IndustryVertical }).(pulumi.StringOutput)
}

// Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.
func (o LookupDataStoreResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreResult) string { return v.Name }).(pulumi.StringOutput)
}

// The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.
func (o LookupDataStoreResultOutput) SolutionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDataStoreResult) []string { return v.SolutionTypes }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataStoreResultOutput{})
}
