// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a Conversation.
func LookupEngineConversation(ctx *pulumi.Context, args *LookupEngineConversationArgs, opts ...pulumi.InvokeOption) (*LookupEngineConversationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEngineConversationResult
	err := ctx.Invoke("google-native:discoveryengine/v1alpha:getEngineConversation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupEngineConversationArgs struct {
	CollectionId   string  `pulumi:"collectionId"`
	ConversationId string  `pulumi:"conversationId"`
	EngineId       string  `pulumi:"engineId"`
	Location       string  `pulumi:"location"`
	Project        *string `pulumi:"project"`
}

type LookupEngineConversationResult struct {
	// The time the conversation finished.
	EndTime string `pulumi:"endTime"`
	// Conversation messages.
	Messages []GoogleCloudDiscoveryengineV1alphaConversationMessageResponse `pulumi:"messages"`
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name string `pulumi:"name"`
	// The time the conversation started.
	StartTime string `pulumi:"startTime"`
	// The state of the Conversation.
	State string `pulumi:"state"`
	// A unique identifier for tracking users.
	UserPseudoId string `pulumi:"userPseudoId"`
}

func LookupEngineConversationOutput(ctx *pulumi.Context, args LookupEngineConversationOutputArgs, opts ...pulumi.InvokeOption) LookupEngineConversationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupEngineConversationResult, error) {
			args := v.(LookupEngineConversationArgs)
			r, err := LookupEngineConversation(ctx, &args, opts...)
			var s LookupEngineConversationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupEngineConversationResultOutput)
}

type LookupEngineConversationOutputArgs struct {
	CollectionId   pulumi.StringInput    `pulumi:"collectionId"`
	ConversationId pulumi.StringInput    `pulumi:"conversationId"`
	EngineId       pulumi.StringInput    `pulumi:"engineId"`
	Location       pulumi.StringInput    `pulumi:"location"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupEngineConversationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEngineConversationArgs)(nil)).Elem()
}

type LookupEngineConversationResultOutput struct{ *pulumi.OutputState }

func (LookupEngineConversationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEngineConversationResult)(nil)).Elem()
}

func (o LookupEngineConversationResultOutput) ToLookupEngineConversationResultOutput() LookupEngineConversationResultOutput {
	return o
}

func (o LookupEngineConversationResultOutput) ToLookupEngineConversationResultOutputWithContext(ctx context.Context) LookupEngineConversationResultOutput {
	return o
}

// The time the conversation finished.
func (o LookupEngineConversationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEngineConversationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// Conversation messages.
func (o LookupEngineConversationResultOutput) Messages() GoogleCloudDiscoveryengineV1alphaConversationMessageResponseArrayOutput {
	return o.ApplyT(func(v LookupEngineConversationResult) []GoogleCloudDiscoveryengineV1alphaConversationMessageResponse {
		return v.Messages
	}).(GoogleCloudDiscoveryengineV1alphaConversationMessageResponseArrayOutput)
}

// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
func (o LookupEngineConversationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEngineConversationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The time the conversation started.
func (o LookupEngineConversationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEngineConversationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the Conversation.
func (o LookupEngineConversationResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEngineConversationResult) string { return v.State }).(pulumi.StringOutput)
}

// A unique identifier for tracking users.
func (o LookupEngineConversationResultOutput) UserPseudoId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEngineConversationResult) string { return v.UserPseudoId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEngineConversationResultOutput{})
}
