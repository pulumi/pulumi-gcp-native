// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Conversation. If the Conversation to create already exists, an ALREADY_EXISTS error is returned.
// Auto-naming is currently not supported for this resource.
type EngineConversation struct {
	pulumi.CustomResourceState

	CollectionId pulumi.StringOutput `pulumi:"collectionId"`
	// The time the conversation finished.
	EndTime  pulumi.StringOutput `pulumi:"endTime"`
	EngineId pulumi.StringOutput `pulumi:"engineId"`
	Location pulumi.StringOutput `pulumi:"location"`
	// Conversation messages.
	Messages GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput `pulumi:"messages"`
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name    pulumi.StringOutput `pulumi:"name"`
	Project pulumi.StringOutput `pulumi:"project"`
	// The time the conversation started.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The state of the Conversation.
	State pulumi.StringOutput `pulumi:"state"`
	// A unique identifier for tracking users.
	UserPseudoId pulumi.StringOutput `pulumi:"userPseudoId"`
}

// NewEngineConversation registers a new resource with the given unique name, arguments, and options.
func NewEngineConversation(ctx *pulumi.Context,
	name string, args *EngineConversationArgs, opts ...pulumi.ResourceOption) (*EngineConversation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CollectionId == nil {
		return nil, errors.New("invalid value for required argument 'CollectionId'")
	}
	if args.EngineId == nil {
		return nil, errors.New("invalid value for required argument 'EngineId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"collectionId",
		"engineId",
		"location",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EngineConversation
	err := ctx.RegisterResource("google-native:discoveryengine/v1beta:EngineConversation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEngineConversation gets an existing EngineConversation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEngineConversation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EngineConversationState, opts ...pulumi.ResourceOption) (*EngineConversation, error) {
	var resource EngineConversation
	err := ctx.ReadResource("google-native:discoveryengine/v1beta:EngineConversation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EngineConversation resources.
type engineConversationState struct {
}

type EngineConversationState struct {
}

func (EngineConversationState) ElementType() reflect.Type {
	return reflect.TypeOf((*engineConversationState)(nil)).Elem()
}

type engineConversationArgs struct {
	CollectionId string  `pulumi:"collectionId"`
	EngineId     string  `pulumi:"engineId"`
	Location     *string `pulumi:"location"`
	// Conversation messages.
	Messages []GoogleCloudDiscoveryengineV1betaConversationMessage `pulumi:"messages"`
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name    *string `pulumi:"name"`
	Project *string `pulumi:"project"`
	// The state of the Conversation.
	State *EngineConversationStateEnum `pulumi:"state"`
	// A unique identifier for tracking users.
	UserPseudoId *string `pulumi:"userPseudoId"`
}

// The set of arguments for constructing a EngineConversation resource.
type EngineConversationArgs struct {
	CollectionId pulumi.StringInput
	EngineId     pulumi.StringInput
	Location     pulumi.StringPtrInput
	// Conversation messages.
	Messages GoogleCloudDiscoveryengineV1betaConversationMessageArrayInput
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name    pulumi.StringPtrInput
	Project pulumi.StringPtrInput
	// The state of the Conversation.
	State EngineConversationStateEnumPtrInput
	// A unique identifier for tracking users.
	UserPseudoId pulumi.StringPtrInput
}

func (EngineConversationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*engineConversationArgs)(nil)).Elem()
}

type EngineConversationInput interface {
	pulumi.Input

	ToEngineConversationOutput() EngineConversationOutput
	ToEngineConversationOutputWithContext(ctx context.Context) EngineConversationOutput
}

func (*EngineConversation) ElementType() reflect.Type {
	return reflect.TypeOf((**EngineConversation)(nil)).Elem()
}

func (i *EngineConversation) ToEngineConversationOutput() EngineConversationOutput {
	return i.ToEngineConversationOutputWithContext(context.Background())
}

func (i *EngineConversation) ToEngineConversationOutputWithContext(ctx context.Context) EngineConversationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EngineConversationOutput)
}

type EngineConversationOutput struct{ *pulumi.OutputState }

func (EngineConversationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EngineConversation)(nil)).Elem()
}

func (o EngineConversationOutput) ToEngineConversationOutput() EngineConversationOutput {
	return o
}

func (o EngineConversationOutput) ToEngineConversationOutputWithContext(ctx context.Context) EngineConversationOutput {
	return o
}

func (o EngineConversationOutput) CollectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.CollectionId }).(pulumi.StringOutput)
}

// The time the conversation finished.
func (o EngineConversationOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

func (o EngineConversationOutput) EngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.EngineId }).(pulumi.StringOutput)
}

func (o EngineConversationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Conversation messages.
func (o EngineConversationOutput) Messages() GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput {
	return o.ApplyT(func(v *EngineConversation) GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput {
		return v.Messages
	}).(GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput)
}

// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
func (o EngineConversationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o EngineConversationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The time the conversation started.
func (o EngineConversationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the Conversation.
func (o EngineConversationOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A unique identifier for tracking users.
func (o EngineConversationOutput) UserPseudoId() pulumi.StringOutput {
	return o.ApplyT(func(v *EngineConversation) pulumi.StringOutput { return v.UserPseudoId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EngineConversationInput)(nil)).Elem(), &EngineConversation{})
	pulumi.RegisterOutputType(EngineConversationOutput{})
}
