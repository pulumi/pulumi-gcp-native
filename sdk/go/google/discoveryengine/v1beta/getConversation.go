// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets a Conversation.
func LookupConversation(ctx *pulumi.Context, args *LookupConversationArgs, opts ...pulumi.InvokeOption) (*LookupConversationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConversationResult
	err := ctx.Invoke("google-native:discoveryengine/v1beta:getConversation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupConversationArgs struct {
	CollectionId   string  `pulumi:"collectionId"`
	ConversationId string  `pulumi:"conversationId"`
	DataStoreId    string  `pulumi:"dataStoreId"`
	Location       string  `pulumi:"location"`
	Project        *string `pulumi:"project"`
}

type LookupConversationResult struct {
	// The time the conversation finished.
	EndTime string `pulumi:"endTime"`
	// Conversation messages.
	Messages []GoogleCloudDiscoveryengineV1betaConversationMessageResponse `pulumi:"messages"`
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
	Name string `pulumi:"name"`
	// The time the conversation started.
	StartTime string `pulumi:"startTime"`
	// The state of the Conversation.
	State string `pulumi:"state"`
	// A unique identifier for tracking users.
	UserPseudoId string `pulumi:"userPseudoId"`
}

func LookupConversationOutput(ctx *pulumi.Context, args LookupConversationOutputArgs, opts ...pulumi.InvokeOption) LookupConversationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupConversationResult, error) {
			args := v.(LookupConversationArgs)
			r, err := LookupConversation(ctx, &args, opts...)
			var s LookupConversationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupConversationResultOutput)
}

type LookupConversationOutputArgs struct {
	CollectionId   pulumi.StringInput    `pulumi:"collectionId"`
	ConversationId pulumi.StringInput    `pulumi:"conversationId"`
	DataStoreId    pulumi.StringInput    `pulumi:"dataStoreId"`
	Location       pulumi.StringInput    `pulumi:"location"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupConversationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConversationArgs)(nil)).Elem()
}

type LookupConversationResultOutput struct{ *pulumi.OutputState }

func (LookupConversationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConversationResult)(nil)).Elem()
}

func (o LookupConversationResultOutput) ToLookupConversationResultOutput() LookupConversationResultOutput {
	return o
}

func (o LookupConversationResultOutput) ToLookupConversationResultOutputWithContext(ctx context.Context) LookupConversationResultOutput {
	return o
}

func (o LookupConversationResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupConversationResult] {
	return pulumix.Output[LookupConversationResult]{
		OutputState: o.OutputState,
	}
}

// The time the conversation finished.
func (o LookupConversationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// Conversation messages.
func (o LookupConversationResultOutput) Messages() GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput {
	return o.ApplyT(func(v LookupConversationResult) []GoogleCloudDiscoveryengineV1betaConversationMessageResponse {
		return v.Messages
	}).(GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput)
}

// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*`
func (o LookupConversationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The time the conversation started.
func (o LookupConversationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the Conversation.
func (o LookupConversationResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationResult) string { return v.State }).(pulumi.StringOutput)
}

// A unique identifier for tracking users.
func (o LookupConversationResultOutput) UserPseudoId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConversationResult) string { return v.UserPseudoId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConversationResultOutput{})
}
