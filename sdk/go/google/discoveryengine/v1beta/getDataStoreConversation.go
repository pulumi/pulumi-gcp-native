// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Gets a Conversation.
func LookupDataStoreConversation(ctx *pulumi.Context, args *LookupDataStoreConversationArgs, opts ...pulumi.InvokeOption) (*LookupDataStoreConversationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDataStoreConversationResult
	err := ctx.Invoke("google-native:discoveryengine/v1beta:getDataStoreConversation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupDataStoreConversationArgs struct {
	CollectionId   string  `pulumi:"collectionId"`
	ConversationId string  `pulumi:"conversationId"`
	DataStoreId    string  `pulumi:"dataStoreId"`
	Location       string  `pulumi:"location"`
	Project        *string `pulumi:"project"`
}

type LookupDataStoreConversationResult struct {
	// The time the conversation finished.
	EndTime string `pulumi:"endTime"`
	// Conversation messages.
	Messages []GoogleCloudDiscoveryengineV1betaConversationMessageResponse `pulumi:"messages"`
	// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
	Name string `pulumi:"name"`
	// The time the conversation started.
	StartTime string `pulumi:"startTime"`
	// The state of the Conversation.
	State string `pulumi:"state"`
	// A unique identifier for tracking users.
	UserPseudoId string `pulumi:"userPseudoId"`
}

func LookupDataStoreConversationOutput(ctx *pulumi.Context, args LookupDataStoreConversationOutputArgs, opts ...pulumi.InvokeOption) LookupDataStoreConversationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataStoreConversationResult, error) {
			args := v.(LookupDataStoreConversationArgs)
			r, err := LookupDataStoreConversation(ctx, &args, opts...)
			var s LookupDataStoreConversationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDataStoreConversationResultOutput)
}

type LookupDataStoreConversationOutputArgs struct {
	CollectionId   pulumi.StringInput    `pulumi:"collectionId"`
	ConversationId pulumi.StringInput    `pulumi:"conversationId"`
	DataStoreId    pulumi.StringInput    `pulumi:"dataStoreId"`
	Location       pulumi.StringInput    `pulumi:"location"`
	Project        pulumi.StringPtrInput `pulumi:"project"`
}

func (LookupDataStoreConversationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataStoreConversationArgs)(nil)).Elem()
}

type LookupDataStoreConversationResultOutput struct{ *pulumi.OutputState }

func (LookupDataStoreConversationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataStoreConversationResult)(nil)).Elem()
}

func (o LookupDataStoreConversationResultOutput) ToLookupDataStoreConversationResultOutput() LookupDataStoreConversationResultOutput {
	return o
}

func (o LookupDataStoreConversationResultOutput) ToLookupDataStoreConversationResultOutputWithContext(ctx context.Context) LookupDataStoreConversationResultOutput {
	return o
}

// The time the conversation finished.
func (o LookupDataStoreConversationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreConversationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// Conversation messages.
func (o LookupDataStoreConversationResultOutput) Messages() GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput {
	return o.ApplyT(func(v LookupDataStoreConversationResult) []GoogleCloudDiscoveryengineV1betaConversationMessageResponse {
		return v.Messages
	}).(GoogleCloudDiscoveryengineV1betaConversationMessageResponseArrayOutput)
}

// Immutable. Fully qualified name `project/*/locations/global/collections/{collection}/dataStore/*/conversations/*` or `project/*/locations/global/collections/{collection}/engines/*/conversations/*`.
func (o LookupDataStoreConversationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreConversationResult) string { return v.Name }).(pulumi.StringOutput)
}

// The time the conversation started.
func (o LookupDataStoreConversationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreConversationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The state of the Conversation.
func (o LookupDataStoreConversationResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreConversationResult) string { return v.State }).(pulumi.StringOutput)
}

// A unique identifier for tracking users.
func (o LookupDataStoreConversationResultOutput) UserPseudoId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataStoreConversationResult) string { return v.UserPseudoId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataStoreConversationResultOutput{})
}
