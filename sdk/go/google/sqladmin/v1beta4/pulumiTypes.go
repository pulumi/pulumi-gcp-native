// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta4

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// An entry for an Access Control list.
type AclEntry struct {
	// The time when this access control entry expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
	ExpirationTime *string `pulumi:"expirationTime"`
	// This is always *sql#aclEntry*.
	Kind *string `pulumi:"kind"`
	// Optional. A label to identify this entry.
	Name *string `pulumi:"name"`
	// The allowlisted value for the access control list.
	Value *string `pulumi:"value"`
}

// AclEntryInput is an input type that accepts AclEntryArgs and AclEntryOutput values.
// You can construct a concrete instance of `AclEntryInput` via:
//
//          AclEntryArgs{...}
type AclEntryInput interface {
	pulumi.Input

	ToAclEntryOutput() AclEntryOutput
	ToAclEntryOutputWithContext(context.Context) AclEntryOutput
}

// An entry for an Access Control list.
type AclEntryArgs struct {
	// The time when this access control entry expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// This is always *sql#aclEntry*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Optional. A label to identify this entry.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The allowlisted value for the access control list.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclEntry)(nil)).Elem()
}

func (i AclEntryArgs) ToAclEntryOutput() AclEntryOutput {
	return i.ToAclEntryOutputWithContext(context.Background())
}

func (i AclEntryArgs) ToAclEntryOutputWithContext(ctx context.Context) AclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclEntryOutput)
}

// AclEntryArrayInput is an input type that accepts AclEntryArray and AclEntryArrayOutput values.
// You can construct a concrete instance of `AclEntryArrayInput` via:
//
//          AclEntryArray{ AclEntryArgs{...} }
type AclEntryArrayInput interface {
	pulumi.Input

	ToAclEntryArrayOutput() AclEntryArrayOutput
	ToAclEntryArrayOutputWithContext(context.Context) AclEntryArrayOutput
}

type AclEntryArray []AclEntryInput

func (AclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclEntry)(nil)).Elem()
}

func (i AclEntryArray) ToAclEntryArrayOutput() AclEntryArrayOutput {
	return i.ToAclEntryArrayOutputWithContext(context.Background())
}

func (i AclEntryArray) ToAclEntryArrayOutputWithContext(ctx context.Context) AclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclEntryArrayOutput)
}

// An entry for an Access Control list.
type AclEntryOutput struct{ *pulumi.OutputState }

func (AclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclEntry)(nil)).Elem()
}

func (o AclEntryOutput) ToAclEntryOutput() AclEntryOutput {
	return o
}

func (o AclEntryOutput) ToAclEntryOutputWithContext(ctx context.Context) AclEntryOutput {
	return o
}

// The time when this access control entry expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
func (o AclEntryOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// This is always *sql#aclEntry*.
func (o AclEntryOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Optional. A label to identify this entry.
func (o AclEntryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The allowlisted value for the access control list.
func (o AclEntryOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AclEntryArrayOutput struct{ *pulumi.OutputState }

func (AclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclEntry)(nil)).Elem()
}

func (o AclEntryArrayOutput) ToAclEntryArrayOutput() AclEntryArrayOutput {
	return o
}

func (o AclEntryArrayOutput) ToAclEntryArrayOutputWithContext(ctx context.Context) AclEntryArrayOutput {
	return o
}

func (o AclEntryArrayOutput) Index(i pulumi.IntInput) AclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclEntry {
		return vs[0].([]AclEntry)[vs[1].(int)]
	}).(AclEntryOutput)
}

// Database instance backup configuration.
type BackupConfiguration struct {
	// Backup retention settings.
	BackupRetentionSettings *BackupRetentionSettings `pulumi:"backupRetentionSettings"`
	// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
	BinaryLogEnabled *bool `pulumi:"binaryLogEnabled"`
	// Whether this configuration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// This is always *sql#backupConfiguration*.
	Kind *string `pulumi:"kind"`
	// Location of the backup
	Location *string `pulumi:"location"`
	// Reserved for future use.
	PointInTimeRecoveryEnabled *bool `pulumi:"pointInTimeRecoveryEnabled"`
	// Reserved for future use.
	ReplicationLogArchivingEnabled *bool `pulumi:"replicationLogArchivingEnabled"`
	// Start time for the daily backup configuration in UTC timezone in the 24 hour format - *HH:MM*.
	StartTime *string `pulumi:"startTime"`
	// The number of days of transaction logs we retain for point in time restore, from 1-7.
	TransactionLogRetentionDays *int `pulumi:"transactionLogRetentionDays"`
}

// BackupConfigurationInput is an input type that accepts BackupConfigurationArgs and BackupConfigurationOutput values.
// You can construct a concrete instance of `BackupConfigurationInput` via:
//
//          BackupConfigurationArgs{...}
type BackupConfigurationInput interface {
	pulumi.Input

	ToBackupConfigurationOutput() BackupConfigurationOutput
	ToBackupConfigurationOutputWithContext(context.Context) BackupConfigurationOutput
}

// Database instance backup configuration.
type BackupConfigurationArgs struct {
	// Backup retention settings.
	BackupRetentionSettings BackupRetentionSettingsPtrInput `pulumi:"backupRetentionSettings"`
	// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
	BinaryLogEnabled pulumi.BoolPtrInput `pulumi:"binaryLogEnabled"`
	// Whether this configuration is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// This is always *sql#backupConfiguration*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Location of the backup
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Reserved for future use.
	PointInTimeRecoveryEnabled pulumi.BoolPtrInput `pulumi:"pointInTimeRecoveryEnabled"`
	// Reserved for future use.
	ReplicationLogArchivingEnabled pulumi.BoolPtrInput `pulumi:"replicationLogArchivingEnabled"`
	// Start time for the daily backup configuration in UTC timezone in the 24 hour format - *HH:MM*.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of days of transaction logs we retain for point in time restore, from 1-7.
	TransactionLogRetentionDays pulumi.IntPtrInput `pulumi:"transactionLogRetentionDays"`
}

func (BackupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupConfiguration)(nil)).Elem()
}

func (i BackupConfigurationArgs) ToBackupConfigurationOutput() BackupConfigurationOutput {
	return i.ToBackupConfigurationOutputWithContext(context.Background())
}

func (i BackupConfigurationArgs) ToBackupConfigurationOutputWithContext(ctx context.Context) BackupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigurationOutput)
}

func (i BackupConfigurationArgs) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return i.ToBackupConfigurationPtrOutputWithContext(context.Background())
}

func (i BackupConfigurationArgs) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigurationOutput).ToBackupConfigurationPtrOutputWithContext(ctx)
}

// BackupConfigurationPtrInput is an input type that accepts BackupConfigurationArgs, BackupConfigurationPtr and BackupConfigurationPtrOutput values.
// You can construct a concrete instance of `BackupConfigurationPtrInput` via:
//
//          BackupConfigurationArgs{...}
//
//  or:
//
//          nil
type BackupConfigurationPtrInput interface {
	pulumi.Input

	ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput
	ToBackupConfigurationPtrOutputWithContext(context.Context) BackupConfigurationPtrOutput
}

type backupConfigurationPtrType BackupConfigurationArgs

func BackupConfigurationPtr(v *BackupConfigurationArgs) BackupConfigurationPtrInput {
	return (*backupConfigurationPtrType)(v)
}

func (*backupConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupConfiguration)(nil)).Elem()
}

func (i *backupConfigurationPtrType) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return i.ToBackupConfigurationPtrOutputWithContext(context.Background())
}

func (i *backupConfigurationPtrType) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigurationPtrOutput)
}

// Database instance backup configuration.
type BackupConfigurationOutput struct{ *pulumi.OutputState }

func (BackupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupConfiguration)(nil)).Elem()
}

func (o BackupConfigurationOutput) ToBackupConfigurationOutput() BackupConfigurationOutput {
	return o
}

func (o BackupConfigurationOutput) ToBackupConfigurationOutputWithContext(ctx context.Context) BackupConfigurationOutput {
	return o
}

func (o BackupConfigurationOutput) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return o.ToBackupConfigurationPtrOutputWithContext(context.Background())
}

func (o BackupConfigurationOutput) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *BackupConfiguration {
		return &v
	}).(BackupConfigurationPtrOutput)
}

// Backup retention settings.
func (o BackupConfigurationOutput) BackupRetentionSettings() BackupRetentionSettingsPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *BackupRetentionSettings { return v.BackupRetentionSettings }).(BackupRetentionSettingsPtrOutput)
}

// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
func (o BackupConfigurationOutput) BinaryLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.BinaryLogEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this configuration is enabled.
func (o BackupConfigurationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// This is always *sql#backupConfiguration*.
func (o BackupConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Location of the backup
func (o BackupConfigurationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Reserved for future use.
func (o BackupConfigurationOutput) PointInTimeRecoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.PointInTimeRecoveryEnabled }).(pulumi.BoolPtrOutput)
}

// Reserved for future use.
func (o BackupConfigurationOutput) ReplicationLogArchivingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.ReplicationLogArchivingEnabled }).(pulumi.BoolPtrOutput)
}

// Start time for the daily backup configuration in UTC timezone in the 24 hour format - *HH:MM*.
func (o BackupConfigurationOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of days of transaction logs we retain for point in time restore, from 1-7.
func (o BackupConfigurationOutput) TransactionLogRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *int { return v.TransactionLogRetentionDays }).(pulumi.IntPtrOutput)
}

type BackupConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BackupConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupConfiguration)(nil)).Elem()
}

func (o BackupConfigurationPtrOutput) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return o
}

func (o BackupConfigurationPtrOutput) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return o
}

func (o BackupConfigurationPtrOutput) Elem() BackupConfigurationOutput {
	return o.ApplyT(func(v *BackupConfiguration) BackupConfiguration { return *v }).(BackupConfigurationOutput)
}

// Backup retention settings.
func (o BackupConfigurationPtrOutput) BackupRetentionSettings() BackupRetentionSettingsPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *BackupRetentionSettings {
		if v == nil {
			return nil
		}
		return v.BackupRetentionSettings
	}).(BackupRetentionSettingsPtrOutput)
}

// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
func (o BackupConfigurationPtrOutput) BinaryLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.BinaryLogEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether this configuration is enabled.
func (o BackupConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// This is always *sql#backupConfiguration*.
func (o BackupConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Location of the backup
func (o BackupConfigurationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Reserved for future use.
func (o BackupConfigurationPtrOutput) PointInTimeRecoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.PointInTimeRecoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// Reserved for future use.
func (o BackupConfigurationPtrOutput) ReplicationLogArchivingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ReplicationLogArchivingEnabled
	}).(pulumi.BoolPtrOutput)
}

// Start time for the daily backup configuration in UTC timezone in the 24 hour format - *HH:MM*.
func (o BackupConfigurationPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of days of transaction logs we retain for point in time restore, from 1-7.
func (o BackupConfigurationPtrOutput) TransactionLogRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TransactionLogRetentionDays
	}).(pulumi.IntPtrOutput)
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettings struct {
	// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
	RetainedBackups *int `pulumi:"retainedBackups"`
	// The unit that 'retained_backups' represents.
	RetentionUnit *string `pulumi:"retentionUnit"`
}

// BackupRetentionSettingsInput is an input type that accepts BackupRetentionSettingsArgs and BackupRetentionSettingsOutput values.
// You can construct a concrete instance of `BackupRetentionSettingsInput` via:
//
//          BackupRetentionSettingsArgs{...}
type BackupRetentionSettingsInput interface {
	pulumi.Input

	ToBackupRetentionSettingsOutput() BackupRetentionSettingsOutput
	ToBackupRetentionSettingsOutputWithContext(context.Context) BackupRetentionSettingsOutput
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettingsArgs struct {
	// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
	RetainedBackups pulumi.IntPtrInput `pulumi:"retainedBackups"`
	// The unit that 'retained_backups' represents.
	RetentionUnit pulumi.StringPtrInput `pulumi:"retentionUnit"`
}

func (BackupRetentionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupRetentionSettings)(nil)).Elem()
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsOutput() BackupRetentionSettingsOutput {
	return i.ToBackupRetentionSettingsOutputWithContext(context.Background())
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsOutputWithContext(ctx context.Context) BackupRetentionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupRetentionSettingsOutput)
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return i.ToBackupRetentionSettingsPtrOutputWithContext(context.Background())
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupRetentionSettingsOutput).ToBackupRetentionSettingsPtrOutputWithContext(ctx)
}

// BackupRetentionSettingsPtrInput is an input type that accepts BackupRetentionSettingsArgs, BackupRetentionSettingsPtr and BackupRetentionSettingsPtrOutput values.
// You can construct a concrete instance of `BackupRetentionSettingsPtrInput` via:
//
//          BackupRetentionSettingsArgs{...}
//
//  or:
//
//          nil
type BackupRetentionSettingsPtrInput interface {
	pulumi.Input

	ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput
	ToBackupRetentionSettingsPtrOutputWithContext(context.Context) BackupRetentionSettingsPtrOutput
}

type backupRetentionSettingsPtrType BackupRetentionSettingsArgs

func BackupRetentionSettingsPtr(v *BackupRetentionSettingsArgs) BackupRetentionSettingsPtrInput {
	return (*backupRetentionSettingsPtrType)(v)
}

func (*backupRetentionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupRetentionSettings)(nil)).Elem()
}

func (i *backupRetentionSettingsPtrType) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return i.ToBackupRetentionSettingsPtrOutputWithContext(context.Background())
}

func (i *backupRetentionSettingsPtrType) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupRetentionSettingsPtrOutput)
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettingsOutput struct{ *pulumi.OutputState }

func (BackupRetentionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupRetentionSettings)(nil)).Elem()
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsOutput() BackupRetentionSettingsOutput {
	return o
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsOutputWithContext(ctx context.Context) BackupRetentionSettingsOutput {
	return o
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return o.ToBackupRetentionSettingsPtrOutputWithContext(context.Background())
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return o.ApplyT(func(v BackupRetentionSettings) *BackupRetentionSettings {
		return &v
	}).(BackupRetentionSettingsPtrOutput)
}

// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
func (o BackupRetentionSettingsOutput) RetainedBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupRetentionSettings) *int { return v.RetainedBackups }).(pulumi.IntPtrOutput)
}

// The unit that 'retained_backups' represents.
func (o BackupRetentionSettingsOutput) RetentionUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupRetentionSettings) *string { return v.RetentionUnit }).(pulumi.StringPtrOutput)
}

type BackupRetentionSettingsPtrOutput struct{ *pulumi.OutputState }

func (BackupRetentionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupRetentionSettings)(nil)).Elem()
}

func (o BackupRetentionSettingsPtrOutput) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return o
}

func (o BackupRetentionSettingsPtrOutput) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return o
}

func (o BackupRetentionSettingsPtrOutput) Elem() BackupRetentionSettingsOutput {
	return o.ApplyT(func(v *BackupRetentionSettings) BackupRetentionSettings { return *v }).(BackupRetentionSettingsOutput)
}

// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
func (o BackupRetentionSettingsPtrOutput) RetainedBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupRetentionSettings) *int {
		if v == nil {
			return nil
		}
		return v.RetainedBackups
	}).(pulumi.IntPtrOutput)
}

// The unit that 'retained_backups' represents.
func (o BackupRetentionSettingsPtrOutput) RetentionUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupRetentionSettings) *string {
		if v == nil {
			return nil
		}
		return v.RetentionUnit
	}).(pulumi.StringPtrOutput)
}

// Database flags for Cloud SQL instances.
type DatabaseFlags struct {
	// The name of the flag. These flags are passed at instance startup, so include both server options and system variables for MySQL. Flags are specified with underscores, not hyphens. For more information, see Configuring Database Flags in the Cloud SQL documentation.
	Name *string `pulumi:"name"`
	// The value of the flag. Booleans are set to *on* for true and *off* for false. This field must be omitted if the flag doesn't take a value.
	Value *string `pulumi:"value"`
}

// DatabaseFlagsInput is an input type that accepts DatabaseFlagsArgs and DatabaseFlagsOutput values.
// You can construct a concrete instance of `DatabaseFlagsInput` via:
//
//          DatabaseFlagsArgs{...}
type DatabaseFlagsInput interface {
	pulumi.Input

	ToDatabaseFlagsOutput() DatabaseFlagsOutput
	ToDatabaseFlagsOutputWithContext(context.Context) DatabaseFlagsOutput
}

// Database flags for Cloud SQL instances.
type DatabaseFlagsArgs struct {
	// The name of the flag. These flags are passed at instance startup, so include both server options and system variables for MySQL. Flags are specified with underscores, not hyphens. For more information, see Configuring Database Flags in the Cloud SQL documentation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the flag. Booleans are set to *on* for true and *off* for false. This field must be omitted if the flag doesn't take a value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DatabaseFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFlags)(nil)).Elem()
}

func (i DatabaseFlagsArgs) ToDatabaseFlagsOutput() DatabaseFlagsOutput {
	return i.ToDatabaseFlagsOutputWithContext(context.Background())
}

func (i DatabaseFlagsArgs) ToDatabaseFlagsOutputWithContext(ctx context.Context) DatabaseFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFlagsOutput)
}

// DatabaseFlagsArrayInput is an input type that accepts DatabaseFlagsArray and DatabaseFlagsArrayOutput values.
// You can construct a concrete instance of `DatabaseFlagsArrayInput` via:
//
//          DatabaseFlagsArray{ DatabaseFlagsArgs{...} }
type DatabaseFlagsArrayInput interface {
	pulumi.Input

	ToDatabaseFlagsArrayOutput() DatabaseFlagsArrayOutput
	ToDatabaseFlagsArrayOutputWithContext(context.Context) DatabaseFlagsArrayOutput
}

type DatabaseFlagsArray []DatabaseFlagsInput

func (DatabaseFlagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFlags)(nil)).Elem()
}

func (i DatabaseFlagsArray) ToDatabaseFlagsArrayOutput() DatabaseFlagsArrayOutput {
	return i.ToDatabaseFlagsArrayOutputWithContext(context.Background())
}

func (i DatabaseFlagsArray) ToDatabaseFlagsArrayOutputWithContext(ctx context.Context) DatabaseFlagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFlagsArrayOutput)
}

// Database flags for Cloud SQL instances.
type DatabaseFlagsOutput struct{ *pulumi.OutputState }

func (DatabaseFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFlags)(nil)).Elem()
}

func (o DatabaseFlagsOutput) ToDatabaseFlagsOutput() DatabaseFlagsOutput {
	return o
}

func (o DatabaseFlagsOutput) ToDatabaseFlagsOutputWithContext(ctx context.Context) DatabaseFlagsOutput {
	return o
}

// The name of the flag. These flags are passed at instance startup, so include both server options and system variables for MySQL. Flags are specified with underscores, not hyphens. For more information, see Configuring Database Flags in the Cloud SQL documentation.
func (o DatabaseFlagsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFlags) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the flag. Booleans are set to *on* for true and *off* for false. This field must be omitted if the flag doesn't take a value.
func (o DatabaseFlagsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFlags) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DatabaseFlagsArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFlagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFlags)(nil)).Elem()
}

func (o DatabaseFlagsArrayOutput) ToDatabaseFlagsArrayOutput() DatabaseFlagsArrayOutput {
	return o
}

func (o DatabaseFlagsArrayOutput) ToDatabaseFlagsArrayOutputWithContext(ctx context.Context) DatabaseFlagsArrayOutput {
	return o
}

func (o DatabaseFlagsArrayOutput) Index(i pulumi.IntInput) DatabaseFlagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFlags {
		return vs[0].([]DatabaseFlags)[vs[1].(int)]
	}).(DatabaseFlagsOutput)
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriod struct {
	// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	EndDate *string `pulumi:"endDate"`
	// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	StartDate *string `pulumi:"startDate"`
	// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
	Time *string `pulumi:"time"`
}

// DenyMaintenancePeriodInput is an input type that accepts DenyMaintenancePeriodArgs and DenyMaintenancePeriodOutput values.
// You can construct a concrete instance of `DenyMaintenancePeriodInput` via:
//
//          DenyMaintenancePeriodArgs{...}
type DenyMaintenancePeriodInput interface {
	pulumi.Input

	ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput
	ToDenyMaintenancePeriodOutputWithContext(context.Context) DenyMaintenancePeriodOutput
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriodArgs struct {
	// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (DenyMaintenancePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriod)(nil)).Elem()
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput {
	return i.ToDenyMaintenancePeriodOutputWithContext(context.Background())
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodOutputWithContext(ctx context.Context) DenyMaintenancePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyMaintenancePeriodOutput)
}

// DenyMaintenancePeriodArrayInput is an input type that accepts DenyMaintenancePeriodArray and DenyMaintenancePeriodArrayOutput values.
// You can construct a concrete instance of `DenyMaintenancePeriodArrayInput` via:
//
//          DenyMaintenancePeriodArray{ DenyMaintenancePeriodArgs{...} }
type DenyMaintenancePeriodArrayInput interface {
	pulumi.Input

	ToDenyMaintenancePeriodArrayOutput() DenyMaintenancePeriodArrayOutput
	ToDenyMaintenancePeriodArrayOutputWithContext(context.Context) DenyMaintenancePeriodArrayOutput
}

type DenyMaintenancePeriodArray []DenyMaintenancePeriodInput

func (DenyMaintenancePeriodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DenyMaintenancePeriod)(nil)).Elem()
}

func (i DenyMaintenancePeriodArray) ToDenyMaintenancePeriodArrayOutput() DenyMaintenancePeriodArrayOutput {
	return i.ToDenyMaintenancePeriodArrayOutputWithContext(context.Background())
}

func (i DenyMaintenancePeriodArray) ToDenyMaintenancePeriodArrayOutputWithContext(ctx context.Context) DenyMaintenancePeriodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyMaintenancePeriodArrayOutput)
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriodOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriod)(nil)).Elem()
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput {
	return o
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodOutputWithContext(ctx context.Context) DenyMaintenancePeriodOutput {
	return o
}

// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
func (o DenyMaintenancePeriodOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
func (o DenyMaintenancePeriodOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
func (o DenyMaintenancePeriodOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type DenyMaintenancePeriodArrayOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DenyMaintenancePeriod)(nil)).Elem()
}

func (o DenyMaintenancePeriodArrayOutput) ToDenyMaintenancePeriodArrayOutput() DenyMaintenancePeriodArrayOutput {
	return o
}

func (o DenyMaintenancePeriodArrayOutput) ToDenyMaintenancePeriodArrayOutputWithContext(ctx context.Context) DenyMaintenancePeriodArrayOutput {
	return o
}

func (o DenyMaintenancePeriodArrayOutput) Index(i pulumi.IntInput) DenyMaintenancePeriodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DenyMaintenancePeriod {
		return vs[0].([]DenyMaintenancePeriod)[vs[1].(int)]
	}).(DenyMaintenancePeriodOutput)
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfiguration struct {
	// This is always *sql#diskEncryptionConfiguration*.
	Kind *string `pulumi:"kind"`
	// Resource name of KMS key for disk encryption
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// DiskEncryptionConfigurationInput is an input type that accepts DiskEncryptionConfigurationArgs and DiskEncryptionConfigurationOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationInput` via:
//
//          DiskEncryptionConfigurationArgs{...}
type DiskEncryptionConfigurationInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput
	ToDiskEncryptionConfigurationOutputWithContext(context.Context) DiskEncryptionConfigurationOutput
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfigurationArgs struct {
	// This is always *sql#diskEncryptionConfiguration*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Resource name of KMS key for disk encryption
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (DiskEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfiguration)(nil)).Elem()
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput {
	return i.ToDiskEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationOutputWithContext(ctx context.Context) DiskEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationOutput)
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return i.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationOutput).ToDiskEncryptionConfigurationPtrOutputWithContext(ctx)
}

// DiskEncryptionConfigurationPtrInput is an input type that accepts DiskEncryptionConfigurationArgs, DiskEncryptionConfigurationPtr and DiskEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationPtrInput` via:
//
//          DiskEncryptionConfigurationArgs{...}
//
//  or:
//
//          nil
type DiskEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput
	ToDiskEncryptionConfigurationPtrOutputWithContext(context.Context) DiskEncryptionConfigurationPtrOutput
}

type diskEncryptionConfigurationPtrType DiskEncryptionConfigurationArgs

func DiskEncryptionConfigurationPtr(v *DiskEncryptionConfigurationArgs) DiskEncryptionConfigurationPtrInput {
	return (*diskEncryptionConfigurationPtrType)(v)
}

func (*diskEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfiguration)(nil)).Elem()
}

func (i *diskEncryptionConfigurationPtrType) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return i.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionConfigurationPtrType) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationPtrOutput)
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfiguration)(nil)).Elem()
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput {
	return o
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationOutputWithContext(ctx context.Context) DiskEncryptionConfigurationOutput {
	return o
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return o.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return o.ApplyT(func(v DiskEncryptionConfiguration) *DiskEncryptionConfiguration {
		return &v
	}).(DiskEncryptionConfigurationPtrOutput)
}

// This is always *sql#diskEncryptionConfiguration*.
func (o DiskEncryptionConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource name of KMS key for disk encryption
func (o DiskEncryptionConfigurationOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionConfiguration) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type DiskEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfiguration)(nil)).Elem()
}

func (o DiskEncryptionConfigurationPtrOutput) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return o
}

func (o DiskEncryptionConfigurationPtrOutput) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return o
}

func (o DiskEncryptionConfigurationPtrOutput) Elem() DiskEncryptionConfigurationOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) DiskEncryptionConfiguration { return *v }).(DiskEncryptionConfigurationOutput)
}

// This is always *sql#diskEncryptionConfiguration*.
func (o DiskEncryptionConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Resource name of KMS key for disk encryption
func (o DiskEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Disk encryption status for an instance.
type DiskEncryptionStatus struct {
	// This is always *sql#diskEncryptionStatus*.
	Kind *string `pulumi:"kind"`
	// KMS key version used to encrypt the Cloud SQL instance resource
	KmsKeyVersionName *string `pulumi:"kmsKeyVersionName"`
}

// DiskEncryptionStatusInput is an input type that accepts DiskEncryptionStatusArgs and DiskEncryptionStatusOutput values.
// You can construct a concrete instance of `DiskEncryptionStatusInput` via:
//
//          DiskEncryptionStatusArgs{...}
type DiskEncryptionStatusInput interface {
	pulumi.Input

	ToDiskEncryptionStatusOutput() DiskEncryptionStatusOutput
	ToDiskEncryptionStatusOutputWithContext(context.Context) DiskEncryptionStatusOutput
}

// Disk encryption status for an instance.
type DiskEncryptionStatusArgs struct {
	// This is always *sql#diskEncryptionStatus*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// KMS key version used to encrypt the Cloud SQL instance resource
	KmsKeyVersionName pulumi.StringPtrInput `pulumi:"kmsKeyVersionName"`
}

func (DiskEncryptionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionStatus)(nil)).Elem()
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusOutput() DiskEncryptionStatusOutput {
	return i.ToDiskEncryptionStatusOutputWithContext(context.Background())
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusOutputWithContext(ctx context.Context) DiskEncryptionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionStatusOutput)
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return i.ToDiskEncryptionStatusPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionStatusOutput).ToDiskEncryptionStatusPtrOutputWithContext(ctx)
}

// DiskEncryptionStatusPtrInput is an input type that accepts DiskEncryptionStatusArgs, DiskEncryptionStatusPtr and DiskEncryptionStatusPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionStatusPtrInput` via:
//
//          DiskEncryptionStatusArgs{...}
//
//  or:
//
//          nil
type DiskEncryptionStatusPtrInput interface {
	pulumi.Input

	ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput
	ToDiskEncryptionStatusPtrOutputWithContext(context.Context) DiskEncryptionStatusPtrOutput
}

type diskEncryptionStatusPtrType DiskEncryptionStatusArgs

func DiskEncryptionStatusPtr(v *DiskEncryptionStatusArgs) DiskEncryptionStatusPtrInput {
	return (*diskEncryptionStatusPtrType)(v)
}

func (*diskEncryptionStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionStatus)(nil)).Elem()
}

func (i *diskEncryptionStatusPtrType) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return i.ToDiskEncryptionStatusPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionStatusPtrType) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionStatusPtrOutput)
}

// Disk encryption status for an instance.
type DiskEncryptionStatusOutput struct{ *pulumi.OutputState }

func (DiskEncryptionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionStatus)(nil)).Elem()
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusOutput() DiskEncryptionStatusOutput {
	return o
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusOutputWithContext(ctx context.Context) DiskEncryptionStatusOutput {
	return o
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return o.ToDiskEncryptionStatusPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return o.ApplyT(func(v DiskEncryptionStatus) *DiskEncryptionStatus {
		return &v
	}).(DiskEncryptionStatusPtrOutput)
}

// This is always *sql#diskEncryptionStatus*.
func (o DiskEncryptionStatusOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionStatus) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// KMS key version used to encrypt the Cloud SQL instance resource
func (o DiskEncryptionStatusOutput) KmsKeyVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionStatus) *string { return v.KmsKeyVersionName }).(pulumi.StringPtrOutput)
}

type DiskEncryptionStatusPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionStatus)(nil)).Elem()
}

func (o DiskEncryptionStatusPtrOutput) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return o
}

func (o DiskEncryptionStatusPtrOutput) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return o
}

func (o DiskEncryptionStatusPtrOutput) Elem() DiskEncryptionStatusOutput {
	return o.ApplyT(func(v *DiskEncryptionStatus) DiskEncryptionStatus { return *v }).(DiskEncryptionStatusOutput)
}

// This is always *sql#diskEncryptionStatus*.
func (o DiskEncryptionStatusPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionStatus) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// KMS key version used to encrypt the Cloud SQL instance resource
func (o DiskEncryptionStatusPtrOutput) KmsKeyVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionStatus) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyVersionName
	}).(pulumi.StringPtrOutput)
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfig struct {
	// Whether Query Insights feature is enabled.
	QueryInsightsEnabled *bool `pulumi:"queryInsightsEnabled"`
	// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
	QueryStringLength *int `pulumi:"queryStringLength"`
	// Whether Query Insights will record application tags from query when enabled.
	RecordApplicationTags *bool `pulumi:"recordApplicationTags"`
	// Whether Query Insights will record client address when enabled.
	RecordClientAddress *bool `pulumi:"recordClientAddress"`
}

// InsightsConfigInput is an input type that accepts InsightsConfigArgs and InsightsConfigOutput values.
// You can construct a concrete instance of `InsightsConfigInput` via:
//
//          InsightsConfigArgs{...}
type InsightsConfigInput interface {
	pulumi.Input

	ToInsightsConfigOutput() InsightsConfigOutput
	ToInsightsConfigOutputWithContext(context.Context) InsightsConfigOutput
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfigArgs struct {
	// Whether Query Insights feature is enabled.
	QueryInsightsEnabled pulumi.BoolPtrInput `pulumi:"queryInsightsEnabled"`
	// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
	QueryStringLength pulumi.IntPtrInput `pulumi:"queryStringLength"`
	// Whether Query Insights will record application tags from query when enabled.
	RecordApplicationTags pulumi.BoolPtrInput `pulumi:"recordApplicationTags"`
	// Whether Query Insights will record client address when enabled.
	RecordClientAddress pulumi.BoolPtrInput `pulumi:"recordClientAddress"`
}

func (InsightsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsConfig)(nil)).Elem()
}

func (i InsightsConfigArgs) ToInsightsConfigOutput() InsightsConfigOutput {
	return i.ToInsightsConfigOutputWithContext(context.Background())
}

func (i InsightsConfigArgs) ToInsightsConfigOutputWithContext(ctx context.Context) InsightsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigOutput)
}

func (i InsightsConfigArgs) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return i.ToInsightsConfigPtrOutputWithContext(context.Background())
}

func (i InsightsConfigArgs) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigOutput).ToInsightsConfigPtrOutputWithContext(ctx)
}

// InsightsConfigPtrInput is an input type that accepts InsightsConfigArgs, InsightsConfigPtr and InsightsConfigPtrOutput values.
// You can construct a concrete instance of `InsightsConfigPtrInput` via:
//
//          InsightsConfigArgs{...}
//
//  or:
//
//          nil
type InsightsConfigPtrInput interface {
	pulumi.Input

	ToInsightsConfigPtrOutput() InsightsConfigPtrOutput
	ToInsightsConfigPtrOutputWithContext(context.Context) InsightsConfigPtrOutput
}

type insightsConfigPtrType InsightsConfigArgs

func InsightsConfigPtr(v *InsightsConfigArgs) InsightsConfigPtrInput {
	return (*insightsConfigPtrType)(v)
}

func (*insightsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsConfig)(nil)).Elem()
}

func (i *insightsConfigPtrType) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return i.ToInsightsConfigPtrOutputWithContext(context.Background())
}

func (i *insightsConfigPtrType) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigPtrOutput)
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfigOutput struct{ *pulumi.OutputState }

func (InsightsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsConfig)(nil)).Elem()
}

func (o InsightsConfigOutput) ToInsightsConfigOutput() InsightsConfigOutput {
	return o
}

func (o InsightsConfigOutput) ToInsightsConfigOutputWithContext(ctx context.Context) InsightsConfigOutput {
	return o
}

func (o InsightsConfigOutput) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return o.ToInsightsConfigPtrOutputWithContext(context.Background())
}

func (o InsightsConfigOutput) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *InsightsConfig {
		return &v
	}).(InsightsConfigPtrOutput)
}

// Whether Query Insights feature is enabled.
func (o InsightsConfigOutput) QueryInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *bool { return v.QueryInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
func (o InsightsConfigOutput) QueryStringLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *int { return v.QueryStringLength }).(pulumi.IntPtrOutput)
}

// Whether Query Insights will record application tags from query when enabled.
func (o InsightsConfigOutput) RecordApplicationTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *bool { return v.RecordApplicationTags }).(pulumi.BoolPtrOutput)
}

// Whether Query Insights will record client address when enabled.
func (o InsightsConfigOutput) RecordClientAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *bool { return v.RecordClientAddress }).(pulumi.BoolPtrOutput)
}

type InsightsConfigPtrOutput struct{ *pulumi.OutputState }

func (InsightsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsConfig)(nil)).Elem()
}

func (o InsightsConfigPtrOutput) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return o
}

func (o InsightsConfigPtrOutput) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return o
}

func (o InsightsConfigPtrOutput) Elem() InsightsConfigOutput {
	return o.ApplyT(func(v *InsightsConfig) InsightsConfig { return *v }).(InsightsConfigOutput)
}

// Whether Query Insights feature is enabled.
func (o InsightsConfigPtrOutput) QueryInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.QueryInsightsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
func (o InsightsConfigPtrOutput) QueryStringLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *int {
		if v == nil {
			return nil
		}
		return v.QueryStringLength
	}).(pulumi.IntPtrOutput)
}

// Whether Query Insights will record application tags from query when enabled.
func (o InsightsConfigPtrOutput) RecordApplicationTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RecordApplicationTags
	}).(pulumi.BoolPtrOutput)
}

// Whether Query Insights will record client address when enabled.
func (o InsightsConfigPtrOutput) RecordClientAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RecordClientAddress
	}).(pulumi.BoolPtrOutput)
}

// IP Management configuration.
type IpConfiguration struct {
	// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: *192.168.100.0/24*).
	AuthorizedNetworks []AclEntry `pulumi:"authorizedNetworks"`
	// Whether the instance is assigned a public IP address or not.
	Ipv4Enabled *bool `pulumi:"ipv4Enabled"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, */projects/myProject/global/networks/default*. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork *string `pulumi:"privateNetwork"`
	// Whether SSL connections over IP are enforced or not.
	RequireSsl *bool `pulumi:"requireSsl"`
}

// IpConfigurationInput is an input type that accepts IpConfigurationArgs and IpConfigurationOutput values.
// You can construct a concrete instance of `IpConfigurationInput` via:
//
//          IpConfigurationArgs{...}
type IpConfigurationInput interface {
	pulumi.Input

	ToIpConfigurationOutput() IpConfigurationOutput
	ToIpConfigurationOutputWithContext(context.Context) IpConfigurationOutput
}

// IP Management configuration.
type IpConfigurationArgs struct {
	// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: *192.168.100.0/24*).
	AuthorizedNetworks AclEntryArrayInput `pulumi:"authorizedNetworks"`
	// Whether the instance is assigned a public IP address or not.
	Ipv4Enabled pulumi.BoolPtrInput `pulumi:"ipv4Enabled"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, */projects/myProject/global/networks/default*. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork pulumi.StringPtrInput `pulumi:"privateNetwork"`
	// Whether SSL connections over IP are enforced or not.
	RequireSsl pulumi.BoolPtrInput `pulumi:"requireSsl"`
}

func (IpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpConfiguration)(nil)).Elem()
}

func (i IpConfigurationArgs) ToIpConfigurationOutput() IpConfigurationOutput {
	return i.ToIpConfigurationOutputWithContext(context.Background())
}

func (i IpConfigurationArgs) ToIpConfigurationOutputWithContext(ctx context.Context) IpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpConfigurationOutput)
}

func (i IpConfigurationArgs) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return i.ToIpConfigurationPtrOutputWithContext(context.Background())
}

func (i IpConfigurationArgs) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpConfigurationOutput).ToIpConfigurationPtrOutputWithContext(ctx)
}

// IpConfigurationPtrInput is an input type that accepts IpConfigurationArgs, IpConfigurationPtr and IpConfigurationPtrOutput values.
// You can construct a concrete instance of `IpConfigurationPtrInput` via:
//
//          IpConfigurationArgs{...}
//
//  or:
//
//          nil
type IpConfigurationPtrInput interface {
	pulumi.Input

	ToIpConfigurationPtrOutput() IpConfigurationPtrOutput
	ToIpConfigurationPtrOutputWithContext(context.Context) IpConfigurationPtrOutput
}

type ipConfigurationPtrType IpConfigurationArgs

func IpConfigurationPtr(v *IpConfigurationArgs) IpConfigurationPtrInput {
	return (*ipConfigurationPtrType)(v)
}

func (*ipConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpConfiguration)(nil)).Elem()
}

func (i *ipConfigurationPtrType) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return i.ToIpConfigurationPtrOutputWithContext(context.Background())
}

func (i *ipConfigurationPtrType) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpConfigurationPtrOutput)
}

// IP Management configuration.
type IpConfigurationOutput struct{ *pulumi.OutputState }

func (IpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpConfiguration)(nil)).Elem()
}

func (o IpConfigurationOutput) ToIpConfigurationOutput() IpConfigurationOutput {
	return o
}

func (o IpConfigurationOutput) ToIpConfigurationOutputWithContext(ctx context.Context) IpConfigurationOutput {
	return o
}

func (o IpConfigurationOutput) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return o.ToIpConfigurationPtrOutputWithContext(context.Background())
}

func (o IpConfigurationOutput) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *IpConfiguration {
		return &v
	}).(IpConfigurationPtrOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: *192.168.100.0/24*).
func (o IpConfigurationOutput) AuthorizedNetworks() AclEntryArrayOutput {
	return o.ApplyT(func(v IpConfiguration) []AclEntry { return v.AuthorizedNetworks }).(AclEntryArrayOutput)
}

// Whether the instance is assigned a public IP address or not.
func (o IpConfigurationOutput) Ipv4Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *bool { return v.Ipv4Enabled }).(pulumi.BoolPtrOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, */projects/myProject/global/networks/default*. This setting can be updated, but it cannot be removed after it is set.
func (o IpConfigurationOutput) PrivateNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *string { return v.PrivateNetwork }).(pulumi.StringPtrOutput)
}

// Whether SSL connections over IP are enforced or not.
func (o IpConfigurationOutput) RequireSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *bool { return v.RequireSsl }).(pulumi.BoolPtrOutput)
}

type IpConfigurationPtrOutput struct{ *pulumi.OutputState }

func (IpConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpConfiguration)(nil)).Elem()
}

func (o IpConfigurationPtrOutput) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return o
}

func (o IpConfigurationPtrOutput) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return o
}

func (o IpConfigurationPtrOutput) Elem() IpConfigurationOutput {
	return o.ApplyT(func(v *IpConfiguration) IpConfiguration { return *v }).(IpConfigurationOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: *192.168.100.0/24*).
func (o IpConfigurationPtrOutput) AuthorizedNetworks() AclEntryArrayOutput {
	return o.ApplyT(func(v *IpConfiguration) []AclEntry {
		if v == nil {
			return nil
		}
		return v.AuthorizedNetworks
	}).(AclEntryArrayOutput)
}

// Whether the instance is assigned a public IP address or not.
func (o IpConfigurationPtrOutput) Ipv4Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Ipv4Enabled
	}).(pulumi.BoolPtrOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, */projects/myProject/global/networks/default*. This setting can be updated, but it cannot be removed after it is set.
func (o IpConfigurationPtrOutput) PrivateNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PrivateNetwork
	}).(pulumi.StringPtrOutput)
}

// Whether SSL connections over IP are enforced or not.
func (o IpConfigurationPtrOutput) RequireSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.RequireSsl
	}).(pulumi.BoolPtrOutput)
}

// Database instance IP Mapping.
type IpMapping struct {
	// The IP address assigned.
	IpAddress *string `pulumi:"ipAddress"`
	// The due time for this IP to be retired in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*. This field is only available when the IP is scheduled to be retired.
	TimeToRetire *string `pulumi:"timeToRetire"`
	// The type of this IP address. A *PRIMARY* address is a public address that can accept incoming connections. A *PRIVATE* address is a private address that can accept incoming connections. An *OUTGOING* address is the source address of connections originating from the instance, if supported.
	Type *string `pulumi:"type"`
}

// IpMappingInput is an input type that accepts IpMappingArgs and IpMappingOutput values.
// You can construct a concrete instance of `IpMappingInput` via:
//
//          IpMappingArgs{...}
type IpMappingInput interface {
	pulumi.Input

	ToIpMappingOutput() IpMappingOutput
	ToIpMappingOutputWithContext(context.Context) IpMappingOutput
}

// Database instance IP Mapping.
type IpMappingArgs struct {
	// The IP address assigned.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The due time for this IP to be retired in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*. This field is only available when the IP is scheduled to be retired.
	TimeToRetire pulumi.StringPtrInput `pulumi:"timeToRetire"`
	// The type of this IP address. A *PRIMARY* address is a public address that can accept incoming connections. A *PRIVATE* address is a private address that can accept incoming connections. An *OUTGOING* address is the source address of connections originating from the instance, if supported.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (IpMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMapping)(nil)).Elem()
}

func (i IpMappingArgs) ToIpMappingOutput() IpMappingOutput {
	return i.ToIpMappingOutputWithContext(context.Background())
}

func (i IpMappingArgs) ToIpMappingOutputWithContext(ctx context.Context) IpMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMappingOutput)
}

// IpMappingArrayInput is an input type that accepts IpMappingArray and IpMappingArrayOutput values.
// You can construct a concrete instance of `IpMappingArrayInput` via:
//
//          IpMappingArray{ IpMappingArgs{...} }
type IpMappingArrayInput interface {
	pulumi.Input

	ToIpMappingArrayOutput() IpMappingArrayOutput
	ToIpMappingArrayOutputWithContext(context.Context) IpMappingArrayOutput
}

type IpMappingArray []IpMappingInput

func (IpMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpMapping)(nil)).Elem()
}

func (i IpMappingArray) ToIpMappingArrayOutput() IpMappingArrayOutput {
	return i.ToIpMappingArrayOutputWithContext(context.Background())
}

func (i IpMappingArray) ToIpMappingArrayOutputWithContext(ctx context.Context) IpMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMappingArrayOutput)
}

// Database instance IP Mapping.
type IpMappingOutput struct{ *pulumi.OutputState }

func (IpMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMapping)(nil)).Elem()
}

func (o IpMappingOutput) ToIpMappingOutput() IpMappingOutput {
	return o
}

func (o IpMappingOutput) ToIpMappingOutputWithContext(ctx context.Context) IpMappingOutput {
	return o
}

// The IP address assigned.
func (o IpMappingOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMapping) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The due time for this IP to be retired in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*. This field is only available when the IP is scheduled to be retired.
func (o IpMappingOutput) TimeToRetire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMapping) *string { return v.TimeToRetire }).(pulumi.StringPtrOutput)
}

// The type of this IP address. A *PRIMARY* address is a public address that can accept incoming connections. A *PRIVATE* address is a private address that can accept incoming connections. An *OUTGOING* address is the source address of connections originating from the instance, if supported.
func (o IpMappingOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMapping) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type IpMappingArrayOutput struct{ *pulumi.OutputState }

func (IpMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpMapping)(nil)).Elem()
}

func (o IpMappingArrayOutput) ToIpMappingArrayOutput() IpMappingArrayOutput {
	return o
}

func (o IpMappingArrayOutput) ToIpMappingArrayOutputWithContext(ctx context.Context) IpMappingArrayOutput {
	return o
}

func (o IpMappingArrayOutput) Index(i pulumi.IntInput) IpMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpMapping {
		return vs[0].([]IpMapping)[vs[1].(int)]
	}).(IpMappingOutput)
}

// Preferred location. This specifies where a Cloud SQL instance is located, either in a specific Compute Engine zone, or co-located with an App Engine application. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreference struct {
	// The App Engine application to follow, it must be in the same region as the Cloud SQL instance.
	FollowGaeApplication *string `pulumi:"followGaeApplication"`
	// This is always *sql#locationPreference*.
	Kind *string `pulumi:"kind"`
	// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). Reserved for future use.
	SecondaryZone *string `pulumi:"secondaryZone"`
	// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.).
	Zone *string `pulumi:"zone"`
}

// LocationPreferenceInput is an input type that accepts LocationPreferenceArgs and LocationPreferenceOutput values.
// You can construct a concrete instance of `LocationPreferenceInput` via:
//
//          LocationPreferenceArgs{...}
type LocationPreferenceInput interface {
	pulumi.Input

	ToLocationPreferenceOutput() LocationPreferenceOutput
	ToLocationPreferenceOutputWithContext(context.Context) LocationPreferenceOutput
}

// Preferred location. This specifies where a Cloud SQL instance is located, either in a specific Compute Engine zone, or co-located with an App Engine application. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreferenceArgs struct {
	// The App Engine application to follow, it must be in the same region as the Cloud SQL instance.
	FollowGaeApplication pulumi.StringPtrInput `pulumi:"followGaeApplication"`
	// This is always *sql#locationPreference*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). Reserved for future use.
	SecondaryZone pulumi.StringPtrInput `pulumi:"secondaryZone"`
	// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.).
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LocationPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationPreference)(nil)).Elem()
}

func (i LocationPreferenceArgs) ToLocationPreferenceOutput() LocationPreferenceOutput {
	return i.ToLocationPreferenceOutputWithContext(context.Background())
}

func (i LocationPreferenceArgs) ToLocationPreferenceOutputWithContext(ctx context.Context) LocationPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationPreferenceOutput)
}

func (i LocationPreferenceArgs) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return i.ToLocationPreferencePtrOutputWithContext(context.Background())
}

func (i LocationPreferenceArgs) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationPreferenceOutput).ToLocationPreferencePtrOutputWithContext(ctx)
}

// LocationPreferencePtrInput is an input type that accepts LocationPreferenceArgs, LocationPreferencePtr and LocationPreferencePtrOutput values.
// You can construct a concrete instance of `LocationPreferencePtrInput` via:
//
//          LocationPreferenceArgs{...}
//
//  or:
//
//          nil
type LocationPreferencePtrInput interface {
	pulumi.Input

	ToLocationPreferencePtrOutput() LocationPreferencePtrOutput
	ToLocationPreferencePtrOutputWithContext(context.Context) LocationPreferencePtrOutput
}

type locationPreferencePtrType LocationPreferenceArgs

func LocationPreferencePtr(v *LocationPreferenceArgs) LocationPreferencePtrInput {
	return (*locationPreferencePtrType)(v)
}

func (*locationPreferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationPreference)(nil)).Elem()
}

func (i *locationPreferencePtrType) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return i.ToLocationPreferencePtrOutputWithContext(context.Background())
}

func (i *locationPreferencePtrType) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationPreferencePtrOutput)
}

// Preferred location. This specifies where a Cloud SQL instance is located, either in a specific Compute Engine zone, or co-located with an App Engine application. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreferenceOutput struct{ *pulumi.OutputState }

func (LocationPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationPreference)(nil)).Elem()
}

func (o LocationPreferenceOutput) ToLocationPreferenceOutput() LocationPreferenceOutput {
	return o
}

func (o LocationPreferenceOutput) ToLocationPreferenceOutputWithContext(ctx context.Context) LocationPreferenceOutput {
	return o
}

func (o LocationPreferenceOutput) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return o.ToLocationPreferencePtrOutputWithContext(context.Background())
}

func (o LocationPreferenceOutput) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return o.ApplyT(func(v LocationPreference) *LocationPreference {
		return &v
	}).(LocationPreferencePtrOutput)
}

// The App Engine application to follow, it must be in the same region as the Cloud SQL instance.
func (o LocationPreferenceOutput) FollowGaeApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.FollowGaeApplication }).(pulumi.StringPtrOutput)
}

// This is always *sql#locationPreference*.
func (o LocationPreferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). Reserved for future use.
func (o LocationPreferenceOutput) SecondaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.SecondaryZone }).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.).
func (o LocationPreferenceOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type LocationPreferencePtrOutput struct{ *pulumi.OutputState }

func (LocationPreferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationPreference)(nil)).Elem()
}

func (o LocationPreferencePtrOutput) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return o
}

func (o LocationPreferencePtrOutput) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return o
}

func (o LocationPreferencePtrOutput) Elem() LocationPreferenceOutput {
	return o.ApplyT(func(v *LocationPreference) LocationPreference { return *v }).(LocationPreferenceOutput)
}

// The App Engine application to follow, it must be in the same region as the Cloud SQL instance.
func (o LocationPreferencePtrOutput) FollowGaeApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.FollowGaeApplication
	}).(pulumi.StringPtrOutput)
}

// This is always *sql#locationPreference*.
func (o LocationPreferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). Reserved for future use.
func (o LocationPreferencePtrOutput) SecondaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryZone
	}).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.).
func (o LocationPreferencePtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindow struct {
	// day of week (1-7), starting on Monday.
	Day *int `pulumi:"day"`
	// hour of day - 0 to 23.
	Hour *int `pulumi:"hour"`
	// This is always *sql#maintenanceWindow*.
	Kind *string `pulumi:"kind"`
	// Maintenance timing setting: *canary* (Earlier) or *stable* (Later). Learn more.
	UpdateTrack *string `pulumi:"updateTrack"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//          MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindowArgs struct {
	// day of week (1-7), starting on Monday.
	Day pulumi.IntPtrInput `pulumi:"day"`
	// hour of day - 0 to 23.
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// This is always *sql#maintenanceWindow*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Maintenance timing setting: *canary* (Earlier) or *stable* (Later). Learn more.
	UpdateTrack pulumi.StringPtrInput `pulumi:"updateTrack"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//          MaintenanceWindowArgs{...}
//
//  or:
//
//          nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

// day of week (1-7), starting on Monday.
func (o MaintenanceWindowOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.Day }).(pulumi.IntPtrOutput)
}

// hour of day - 0 to 23.
func (o MaintenanceWindowOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// This is always *sql#maintenanceWindow*.
func (o MaintenanceWindowOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Maintenance timing setting: *canary* (Earlier) or *stable* (Later). Learn more.
func (o MaintenanceWindowOutput) UpdateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.UpdateTrack }).(pulumi.StringPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow { return *v }).(MaintenanceWindowOutput)
}

// day of week (1-7), starting on Monday.
func (o MaintenanceWindowPtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.IntPtrOutput)
}

// hour of day - 0 to 23.
func (o MaintenanceWindowPtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// This is always *sql#maintenanceWindow*.
func (o MaintenanceWindowPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Maintenance timing setting: *canary* (Earlier) or *stable* (Later). Learn more.
func (o MaintenanceWindowPtrOutput) UpdateTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.UpdateTrack
	}).(pulumi.StringPtrOutput)
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfiguration struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey *string `pulumi:"clientKey"`
	// Seconds to wait between connect retries. MySQL's default is 60 seconds.
	ConnectRetryInterval *int `pulumi:"connectRetryInterval"`
	// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
	DumpFilePath *string `pulumi:"dumpFilePath"`
	// This is always *sql#mysqlReplicaConfiguration*.
	Kind *string `pulumi:"kind"`
	// Interval in milliseconds between replication heartbeats.
	MasterHeartbeatPeriod *string `pulumi:"masterHeartbeatPeriod"`
	// The password for the replication connection.
	Password *string `pulumi:"password"`
	// A list of permissible ciphers to use for SSL encryption.
	SslCipher *string `pulumi:"sslCipher"`
	// The username for the replication connection.
	Username *string `pulumi:"username"`
	// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
	VerifyServerCertificate *bool `pulumi:"verifyServerCertificate"`
}

// MySqlReplicaConfigurationInput is an input type that accepts MySqlReplicaConfigurationArgs and MySqlReplicaConfigurationOutput values.
// You can construct a concrete instance of `MySqlReplicaConfigurationInput` via:
//
//          MySqlReplicaConfigurationArgs{...}
type MySqlReplicaConfigurationInput interface {
	pulumi.Input

	ToMySqlReplicaConfigurationOutput() MySqlReplicaConfigurationOutput
	ToMySqlReplicaConfigurationOutputWithContext(context.Context) MySqlReplicaConfigurationOutput
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfigurationArgs struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Seconds to wait between connect retries. MySQL's default is 60 seconds.
	ConnectRetryInterval pulumi.IntPtrInput `pulumi:"connectRetryInterval"`
	// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
	DumpFilePath pulumi.StringPtrInput `pulumi:"dumpFilePath"`
	// This is always *sql#mysqlReplicaConfiguration*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Interval in milliseconds between replication heartbeats.
	MasterHeartbeatPeriod pulumi.StringPtrInput `pulumi:"masterHeartbeatPeriod"`
	// The password for the replication connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of permissible ciphers to use for SSL encryption.
	SslCipher pulumi.StringPtrInput `pulumi:"sslCipher"`
	// The username for the replication connection.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
	VerifyServerCertificate pulumi.BoolPtrInput `pulumi:"verifyServerCertificate"`
}

func (MySqlReplicaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlReplicaConfiguration)(nil)).Elem()
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationOutput() MySqlReplicaConfigurationOutput {
	return i.ToMySqlReplicaConfigurationOutputWithContext(context.Background())
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationOutputWithContext(ctx context.Context) MySqlReplicaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlReplicaConfigurationOutput)
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return i.ToMySqlReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlReplicaConfigurationOutput).ToMySqlReplicaConfigurationPtrOutputWithContext(ctx)
}

// MySqlReplicaConfigurationPtrInput is an input type that accepts MySqlReplicaConfigurationArgs, MySqlReplicaConfigurationPtr and MySqlReplicaConfigurationPtrOutput values.
// You can construct a concrete instance of `MySqlReplicaConfigurationPtrInput` via:
//
//          MySqlReplicaConfigurationArgs{...}
//
//  or:
//
//          nil
type MySqlReplicaConfigurationPtrInput interface {
	pulumi.Input

	ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput
	ToMySqlReplicaConfigurationPtrOutputWithContext(context.Context) MySqlReplicaConfigurationPtrOutput
}

type mySqlReplicaConfigurationPtrType MySqlReplicaConfigurationArgs

func MySqlReplicaConfigurationPtr(v *MySqlReplicaConfigurationArgs) MySqlReplicaConfigurationPtrInput {
	return (*mySqlReplicaConfigurationPtrType)(v)
}

func (*mySqlReplicaConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlReplicaConfiguration)(nil)).Elem()
}

func (i *mySqlReplicaConfigurationPtrType) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return i.ToMySqlReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i *mySqlReplicaConfigurationPtrType) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlReplicaConfigurationPtrOutput)
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfigurationOutput struct{ *pulumi.OutputState }

func (MySqlReplicaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlReplicaConfiguration)(nil)).Elem()
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationOutput() MySqlReplicaConfigurationOutput {
	return o
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationOutputWithContext(ctx context.Context) MySqlReplicaConfigurationOutput {
	return o
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return o.ToMySqlReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *MySqlReplicaConfiguration {
		return &v
	}).(MySqlReplicaConfigurationPtrOutput)
}

// PEM representation of the trusted CA's x509 certificate.
func (o MySqlReplicaConfigurationOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o MySqlReplicaConfigurationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o MySqlReplicaConfigurationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Seconds to wait between connect retries. MySQL's default is 60 seconds.
func (o MySqlReplicaConfigurationOutput) ConnectRetryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *int { return v.ConnectRetryInterval }).(pulumi.IntPtrOutput)
}

// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
func (o MySqlReplicaConfigurationOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.DumpFilePath }).(pulumi.StringPtrOutput)
}

// This is always *sql#mysqlReplicaConfiguration*.
func (o MySqlReplicaConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Interval in milliseconds between replication heartbeats.
func (o MySqlReplicaConfigurationOutput) MasterHeartbeatPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.MasterHeartbeatPeriod }).(pulumi.StringPtrOutput)
}

// The password for the replication connection.
func (o MySqlReplicaConfigurationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of permissible ciphers to use for SSL encryption.
func (o MySqlReplicaConfigurationOutput) SslCipher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.SslCipher }).(pulumi.StringPtrOutput)
}

// The username for the replication connection.
func (o MySqlReplicaConfigurationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
func (o MySqlReplicaConfigurationOutput) VerifyServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *bool { return v.VerifyServerCertificate }).(pulumi.BoolPtrOutput)
}

type MySqlReplicaConfigurationPtrOutput struct{ *pulumi.OutputState }

func (MySqlReplicaConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlReplicaConfiguration)(nil)).Elem()
}

func (o MySqlReplicaConfigurationPtrOutput) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return o
}

func (o MySqlReplicaConfigurationPtrOutput) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return o
}

func (o MySqlReplicaConfigurationPtrOutput) Elem() MySqlReplicaConfigurationOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) MySqlReplicaConfiguration { return *v }).(MySqlReplicaConfigurationOutput)
}

// PEM representation of the trusted CA's x509 certificate.
func (o MySqlReplicaConfigurationPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o MySqlReplicaConfigurationPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o MySqlReplicaConfigurationPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Seconds to wait between connect retries. MySQL's default is 60 seconds.
func (o MySqlReplicaConfigurationPtrOutput) ConnectRetryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ConnectRetryInterval
	}).(pulumi.IntPtrOutput)
}

// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
func (o MySqlReplicaConfigurationPtrOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DumpFilePath
	}).(pulumi.StringPtrOutput)
}

// This is always *sql#mysqlReplicaConfiguration*.
func (o MySqlReplicaConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Interval in milliseconds between replication heartbeats.
func (o MySqlReplicaConfigurationPtrOutput) MasterHeartbeatPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MasterHeartbeatPeriod
	}).(pulumi.StringPtrOutput)
}

// The password for the replication connection.
func (o MySqlReplicaConfigurationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// A list of permissible ciphers to use for SSL encryption.
func (o MySqlReplicaConfigurationPtrOutput) SslCipher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SslCipher
	}).(pulumi.StringPtrOutput)
}

// The username for the replication connection.
func (o MySqlReplicaConfigurationPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
func (o MySqlReplicaConfigurationPtrOutput) VerifyServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.VerifyServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// On-premises instance configuration.
type OnPremisesConfiguration struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey *string `pulumi:"clientKey"`
	// The dump file to create the Cloud SQL replica.
	DumpFilePath *string `pulumi:"dumpFilePath"`
	// The host and port of the on-premises instance in host:port format
	HostPort *string `pulumi:"hostPort"`
	// This is always *sql#onPremisesConfiguration*.
	Kind *string `pulumi:"kind"`
	// The password for connecting to on-premises instance.
	Password *string `pulumi:"password"`
	// The username for connecting to on-premises instance.
	Username *string `pulumi:"username"`
}

// OnPremisesConfigurationInput is an input type that accepts OnPremisesConfigurationArgs and OnPremisesConfigurationOutput values.
// You can construct a concrete instance of `OnPremisesConfigurationInput` via:
//
//          OnPremisesConfigurationArgs{...}
type OnPremisesConfigurationInput interface {
	pulumi.Input

	ToOnPremisesConfigurationOutput() OnPremisesConfigurationOutput
	ToOnPremisesConfigurationOutputWithContext(context.Context) OnPremisesConfigurationOutput
}

// On-premises instance configuration.
type OnPremisesConfigurationArgs struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The dump file to create the Cloud SQL replica.
	DumpFilePath pulumi.StringPtrInput `pulumi:"dumpFilePath"`
	// The host and port of the on-premises instance in host:port format
	HostPort pulumi.StringPtrInput `pulumi:"hostPort"`
	// This is always *sql#onPremisesConfiguration*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The password for connecting to on-premises instance.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The username for connecting to on-premises instance.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (OnPremisesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremisesConfiguration)(nil)).Elem()
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationOutput() OnPremisesConfigurationOutput {
	return i.ToOnPremisesConfigurationOutputWithContext(context.Background())
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationOutputWithContext(ctx context.Context) OnPremisesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisesConfigurationOutput)
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return i.ToOnPremisesConfigurationPtrOutputWithContext(context.Background())
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisesConfigurationOutput).ToOnPremisesConfigurationPtrOutputWithContext(ctx)
}

// OnPremisesConfigurationPtrInput is an input type that accepts OnPremisesConfigurationArgs, OnPremisesConfigurationPtr and OnPremisesConfigurationPtrOutput values.
// You can construct a concrete instance of `OnPremisesConfigurationPtrInput` via:
//
//          OnPremisesConfigurationArgs{...}
//
//  or:
//
//          nil
type OnPremisesConfigurationPtrInput interface {
	pulumi.Input

	ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput
	ToOnPremisesConfigurationPtrOutputWithContext(context.Context) OnPremisesConfigurationPtrOutput
}

type onPremisesConfigurationPtrType OnPremisesConfigurationArgs

func OnPremisesConfigurationPtr(v *OnPremisesConfigurationArgs) OnPremisesConfigurationPtrInput {
	return (*onPremisesConfigurationPtrType)(v)
}

func (*onPremisesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremisesConfiguration)(nil)).Elem()
}

func (i *onPremisesConfigurationPtrType) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return i.ToOnPremisesConfigurationPtrOutputWithContext(context.Background())
}

func (i *onPremisesConfigurationPtrType) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisesConfigurationPtrOutput)
}

// On-premises instance configuration.
type OnPremisesConfigurationOutput struct{ *pulumi.OutputState }

func (OnPremisesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremisesConfiguration)(nil)).Elem()
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationOutput() OnPremisesConfigurationOutput {
	return o
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationOutputWithContext(ctx context.Context) OnPremisesConfigurationOutput {
	return o
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return o.ToOnPremisesConfigurationPtrOutputWithContext(context.Background())
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *OnPremisesConfiguration {
		return &v
	}).(OnPremisesConfigurationPtrOutput)
}

// PEM representation of the trusted CA's x509 certificate.
func (o OnPremisesConfigurationOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o OnPremisesConfigurationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o OnPremisesConfigurationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The dump file to create the Cloud SQL replica.
func (o OnPremisesConfigurationOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.DumpFilePath }).(pulumi.StringPtrOutput)
}

// The host and port of the on-premises instance in host:port format
func (o OnPremisesConfigurationOutput) HostPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.HostPort }).(pulumi.StringPtrOutput)
}

// This is always *sql#onPremisesConfiguration*.
func (o OnPremisesConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The password for connecting to on-premises instance.
func (o OnPremisesConfigurationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The username for connecting to on-premises instance.
func (o OnPremisesConfigurationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type OnPremisesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OnPremisesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremisesConfiguration)(nil)).Elem()
}

func (o OnPremisesConfigurationPtrOutput) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return o
}

func (o OnPremisesConfigurationPtrOutput) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return o
}

func (o OnPremisesConfigurationPtrOutput) Elem() OnPremisesConfigurationOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) OnPremisesConfiguration { return *v }).(OnPremisesConfigurationOutput)
}

// PEM representation of the trusted CA's x509 certificate.
func (o OnPremisesConfigurationPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o OnPremisesConfigurationPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o OnPremisesConfigurationPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// The dump file to create the Cloud SQL replica.
func (o OnPremisesConfigurationPtrOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DumpFilePath
	}).(pulumi.StringPtrOutput)
}

// The host and port of the on-premises instance in host:port format
func (o OnPremisesConfigurationPtrOutput) HostPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.HostPort
	}).(pulumi.StringPtrOutput)
}

// This is always *sql#onPremisesConfiguration*.
func (o OnPremisesConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The password for connecting to on-premises instance.
func (o OnPremisesConfigurationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The username for connecting to on-premises instance.
func (o OnPremisesConfigurationPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Database instance operation error.
type OperationError struct {
	// Identifies the specific error that occurred.
	Code *string `pulumi:"code"`
	// This is always *sql#operationError*.
	Kind *string `pulumi:"kind"`
	// Additional information about the error encountered.
	Message *string `pulumi:"message"`
}

// OperationErrorInput is an input type that accepts OperationErrorArgs and OperationErrorOutput values.
// You can construct a concrete instance of `OperationErrorInput` via:
//
//          OperationErrorArgs{...}
type OperationErrorInput interface {
	pulumi.Input

	ToOperationErrorOutput() OperationErrorOutput
	ToOperationErrorOutputWithContext(context.Context) OperationErrorOutput
}

// Database instance operation error.
type OperationErrorArgs struct {
	// Identifies the specific error that occurred.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// This is always *sql#operationError*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Additional information about the error encountered.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (OperationErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationError)(nil)).Elem()
}

func (i OperationErrorArgs) ToOperationErrorOutput() OperationErrorOutput {
	return i.ToOperationErrorOutputWithContext(context.Background())
}

func (i OperationErrorArgs) ToOperationErrorOutputWithContext(ctx context.Context) OperationErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationErrorOutput)
}

func (i OperationErrorArgs) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return i.ToOperationErrorPtrOutputWithContext(context.Background())
}

func (i OperationErrorArgs) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationErrorOutput).ToOperationErrorPtrOutputWithContext(ctx)
}

// OperationErrorPtrInput is an input type that accepts OperationErrorArgs, OperationErrorPtr and OperationErrorPtrOutput values.
// You can construct a concrete instance of `OperationErrorPtrInput` via:
//
//          OperationErrorArgs{...}
//
//  or:
//
//          nil
type OperationErrorPtrInput interface {
	pulumi.Input

	ToOperationErrorPtrOutput() OperationErrorPtrOutput
	ToOperationErrorPtrOutputWithContext(context.Context) OperationErrorPtrOutput
}

type operationErrorPtrType OperationErrorArgs

func OperationErrorPtr(v *OperationErrorArgs) OperationErrorPtrInput {
	return (*operationErrorPtrType)(v)
}

func (*operationErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationError)(nil)).Elem()
}

func (i *operationErrorPtrType) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return i.ToOperationErrorPtrOutputWithContext(context.Background())
}

func (i *operationErrorPtrType) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationErrorPtrOutput)
}

// Database instance operation error.
type OperationErrorOutput struct{ *pulumi.OutputState }

func (OperationErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationError)(nil)).Elem()
}

func (o OperationErrorOutput) ToOperationErrorOutput() OperationErrorOutput {
	return o
}

func (o OperationErrorOutput) ToOperationErrorOutputWithContext(ctx context.Context) OperationErrorOutput {
	return o
}

func (o OperationErrorOutput) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return o.ToOperationErrorPtrOutputWithContext(context.Background())
}

func (o OperationErrorOutput) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return o.ApplyT(func(v OperationError) *OperationError {
		return &v
	}).(OperationErrorPtrOutput)
}

// Identifies the specific error that occurred.
func (o OperationErrorOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationError) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// This is always *sql#operationError*.
func (o OperationErrorOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationError) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Additional information about the error encountered.
func (o OperationErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type OperationErrorPtrOutput struct{ *pulumi.OutputState }

func (OperationErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationError)(nil)).Elem()
}

func (o OperationErrorPtrOutput) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return o
}

func (o OperationErrorPtrOutput) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return o
}

func (o OperationErrorPtrOutput) Elem() OperationErrorOutput {
	return o.ApplyT(func(v *OperationError) OperationError { return *v }).(OperationErrorOutput)
}

// Identifies the specific error that occurred.
func (o OperationErrorPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationError) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// This is always *sql#operationError*.
func (o OperationErrorPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationError) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Additional information about the error encountered.
func (o OperationErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfiguration struct {
	// Specifies if the replica is the failover target. If the field is set to *true* the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
	FailoverTarget *bool `pulumi:"failoverTarget"`
	// This is always *sql#replicaConfiguration*.
	Kind *string `pulumi:"kind"`
	// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named *master.info* in the data directory.
	MysqlReplicaConfiguration *MySqlReplicaConfiguration `pulumi:"mysqlReplicaConfiguration"`
}

// ReplicaConfigurationInput is an input type that accepts ReplicaConfigurationArgs and ReplicaConfigurationOutput values.
// You can construct a concrete instance of `ReplicaConfigurationInput` via:
//
//          ReplicaConfigurationArgs{...}
type ReplicaConfigurationInput interface {
	pulumi.Input

	ToReplicaConfigurationOutput() ReplicaConfigurationOutput
	ToReplicaConfigurationOutputWithContext(context.Context) ReplicaConfigurationOutput
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfigurationArgs struct {
	// Specifies if the replica is the failover target. If the field is set to *true* the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
	FailoverTarget pulumi.BoolPtrInput `pulumi:"failoverTarget"`
	// This is always *sql#replicaConfiguration*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named *master.info* in the data directory.
	MysqlReplicaConfiguration MySqlReplicaConfigurationPtrInput `pulumi:"mysqlReplicaConfiguration"`
}

func (ReplicaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaConfiguration)(nil)).Elem()
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationOutput() ReplicaConfigurationOutput {
	return i.ToReplicaConfigurationOutputWithContext(context.Background())
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationOutputWithContext(ctx context.Context) ReplicaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaConfigurationOutput)
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return i.ToReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaConfigurationOutput).ToReplicaConfigurationPtrOutputWithContext(ctx)
}

// ReplicaConfigurationPtrInput is an input type that accepts ReplicaConfigurationArgs, ReplicaConfigurationPtr and ReplicaConfigurationPtrOutput values.
// You can construct a concrete instance of `ReplicaConfigurationPtrInput` via:
//
//          ReplicaConfigurationArgs{...}
//
//  or:
//
//          nil
type ReplicaConfigurationPtrInput interface {
	pulumi.Input

	ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput
	ToReplicaConfigurationPtrOutputWithContext(context.Context) ReplicaConfigurationPtrOutput
}

type replicaConfigurationPtrType ReplicaConfigurationArgs

func ReplicaConfigurationPtr(v *ReplicaConfigurationArgs) ReplicaConfigurationPtrInput {
	return (*replicaConfigurationPtrType)(v)
}

func (*replicaConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaConfiguration)(nil)).Elem()
}

func (i *replicaConfigurationPtrType) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return i.ToReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i *replicaConfigurationPtrType) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaConfigurationPtrOutput)
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaConfiguration)(nil)).Elem()
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationOutput() ReplicaConfigurationOutput {
	return o
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationOutputWithContext(ctx context.Context) ReplicaConfigurationOutput {
	return o
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return o.ToReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return o.ApplyT(func(v ReplicaConfiguration) *ReplicaConfiguration {
		return &v
	}).(ReplicaConfigurationPtrOutput)
}

// Specifies if the replica is the failover target. If the field is set to *true* the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
func (o ReplicaConfigurationOutput) FailoverTarget() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicaConfiguration) *bool { return v.FailoverTarget }).(pulumi.BoolPtrOutput)
}

// This is always *sql#replicaConfiguration*.
func (o ReplicaConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named *master.info* in the data directory.
func (o ReplicaConfigurationOutput) MysqlReplicaConfiguration() MySqlReplicaConfigurationPtrOutput {
	return o.ApplyT(func(v ReplicaConfiguration) *MySqlReplicaConfiguration { return v.MysqlReplicaConfiguration }).(MySqlReplicaConfigurationPtrOutput)
}

type ReplicaConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ReplicaConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaConfiguration)(nil)).Elem()
}

func (o ReplicaConfigurationPtrOutput) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return o
}

func (o ReplicaConfigurationPtrOutput) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return o
}

func (o ReplicaConfigurationPtrOutput) Elem() ReplicaConfigurationOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) ReplicaConfiguration { return *v }).(ReplicaConfigurationOutput)
}

// Specifies if the replica is the failover target. If the field is set to *true* the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
func (o ReplicaConfigurationPtrOutput) FailoverTarget() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.FailoverTarget
	}).(pulumi.BoolPtrOutput)
}

// This is always *sql#replicaConfiguration*.
func (o ReplicaConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named *master.info* in the data directory.
func (o ReplicaConfigurationPtrOutput) MysqlReplicaConfiguration() MySqlReplicaConfigurationPtrOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) *MySqlReplicaConfiguration {
		if v == nil {
			return nil
		}
		return v.MysqlReplicaConfiguration
	}).(MySqlReplicaConfigurationPtrOutput)
}

// Database instance settings.
type Settings struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: *ALWAYS*: The instance is on, and remains so even in the absence of connection requests. *NEVER*: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy *string `pulumi:"activationPolicy"`
	// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
	ActiveDirectoryConfig *SqlActiveDirectoryConfig `pulumi:"activeDirectoryConfig"`
	// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	AuthorizedGaeApplications []string `pulumi:"authorizedGaeApplications"`
	// Availability type. Potential values: *ZONAL*: The instance serves data from only one zone. Outages in that zone affect data accessibility. *REGIONAL*: The instance can serve data from more than one zone in a region (it is highly available). For more information, see Overview of the High Availability Configuration.
	AvailabilityType *string `pulumi:"availabilityType"`
	// The daily backup configuration for the instance.
	BackupConfiguration *BackupConfiguration `pulumi:"backupConfiguration"`
	// The name of server Instance collation.
	Collation *string `pulumi:"collation"`
	// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
	CrashSafeReplicationEnabled *bool `pulumi:"crashSafeReplicationEnabled"`
	// The size of data disk, in GB. The data disk size minimum is 10GB.
	DataDiskSizeGb *string `pulumi:"dataDiskSizeGb"`
	// The type of data disk: PD_SSD (default) or PD_HDD. Not used for First Generation instances.
	DataDiskType *string `pulumi:"dataDiskType"`
	// The database flags passed to the instance at startup.
	DatabaseFlags []DatabaseFlags `pulumi:"databaseFlags"`
	// Configuration specific to read replica instances. Indicates whether replication is enabled or not.
	DatabaseReplicationEnabled *bool `pulumi:"databaseReplicationEnabled"`
	// Deny maintenance periods
	DenyMaintenancePeriods []DenyMaintenancePeriod `pulumi:"denyMaintenancePeriods"`
	// Insights configuration, for now relevant only for Postgres.
	InsightsConfig *InsightsConfig `pulumi:"insightsConfig"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
	IpConfiguration *IpConfiguration `pulumi:"ipConfiguration"`
	// This is always *sql#settings*.
	Kind *string `pulumi:"kind"`
	// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
	LocationPreference *LocationPreference `pulumi:"locationPreference"`
	// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
	MaintenanceWindow *MaintenanceWindow `pulumi:"maintenanceWindow"`
	// The pricing plan for this instance. This can be either *PER_USE* or *PACKAGE*. Only *PER_USE* is supported for Second Generation instances.
	PricingPlan *string `pulumi:"pricingPlan"`
	// The type of replication this instance uses. This can be either *ASYNCHRONOUS* or *SYNCHRONOUS*. (Deprecated_ This property was only applicable to First Generation instances.
	ReplicationType *string `pulumi:"replicationType"`
	// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
	SettingsVersion *string `pulumi:"settingsVersion"`
	// Configuration to increase storage size automatically. The default value is true.
	StorageAutoResize *bool `pulumi:"storageAutoResize"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit *string `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example *db-custom-1-3840* .
	Tier *string `pulumi:"tier"`
	// User-provided labels, represented as a dictionary where each label is a single key value pair.
	UserLabels map[string]string `pulumi:"userLabels"`
}

// SettingsInput is an input type that accepts SettingsArgs and SettingsOutput values.
// You can construct a concrete instance of `SettingsInput` via:
//
//          SettingsArgs{...}
type SettingsInput interface {
	pulumi.Input

	ToSettingsOutput() SettingsOutput
	ToSettingsOutputWithContext(context.Context) SettingsOutput
}

// Database instance settings.
type SettingsArgs struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: *ALWAYS*: The instance is on, and remains so even in the absence of connection requests. *NEVER*: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy pulumi.StringPtrInput `pulumi:"activationPolicy"`
	// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
	ActiveDirectoryConfig SqlActiveDirectoryConfigPtrInput `pulumi:"activeDirectoryConfig"`
	// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	AuthorizedGaeApplications pulumi.StringArrayInput `pulumi:"authorizedGaeApplications"`
	// Availability type. Potential values: *ZONAL*: The instance serves data from only one zone. Outages in that zone affect data accessibility. *REGIONAL*: The instance can serve data from more than one zone in a region (it is highly available). For more information, see Overview of the High Availability Configuration.
	AvailabilityType pulumi.StringPtrInput `pulumi:"availabilityType"`
	// The daily backup configuration for the instance.
	BackupConfiguration BackupConfigurationPtrInput `pulumi:"backupConfiguration"`
	// The name of server Instance collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
	CrashSafeReplicationEnabled pulumi.BoolPtrInput `pulumi:"crashSafeReplicationEnabled"`
	// The size of data disk, in GB. The data disk size minimum is 10GB.
	DataDiskSizeGb pulumi.StringPtrInput `pulumi:"dataDiskSizeGb"`
	// The type of data disk: PD_SSD (default) or PD_HDD. Not used for First Generation instances.
	DataDiskType pulumi.StringPtrInput `pulumi:"dataDiskType"`
	// The database flags passed to the instance at startup.
	DatabaseFlags DatabaseFlagsArrayInput `pulumi:"databaseFlags"`
	// Configuration specific to read replica instances. Indicates whether replication is enabled or not.
	DatabaseReplicationEnabled pulumi.BoolPtrInput `pulumi:"databaseReplicationEnabled"`
	// Deny maintenance periods
	DenyMaintenancePeriods DenyMaintenancePeriodArrayInput `pulumi:"denyMaintenancePeriods"`
	// Insights configuration, for now relevant only for Postgres.
	InsightsConfig InsightsConfigPtrInput `pulumi:"insightsConfig"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
	IpConfiguration IpConfigurationPtrInput `pulumi:"ipConfiguration"`
	// This is always *sql#settings*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
	LocationPreference LocationPreferencePtrInput `pulumi:"locationPreference"`
	// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
	MaintenanceWindow MaintenanceWindowPtrInput `pulumi:"maintenanceWindow"`
	// The pricing plan for this instance. This can be either *PER_USE* or *PACKAGE*. Only *PER_USE* is supported for Second Generation instances.
	PricingPlan pulumi.StringPtrInput `pulumi:"pricingPlan"`
	// The type of replication this instance uses. This can be either *ASYNCHRONOUS* or *SYNCHRONOUS*. (Deprecated_ This property was only applicable to First Generation instances.
	ReplicationType pulumi.StringPtrInput `pulumi:"replicationType"`
	// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
	SettingsVersion pulumi.StringPtrInput `pulumi:"settingsVersion"`
	// Configuration to increase storage size automatically. The default value is true.
	StorageAutoResize pulumi.BoolPtrInput `pulumi:"storageAutoResize"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit pulumi.StringPtrInput `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example *db-custom-1-3840* .
	Tier pulumi.StringPtrInput `pulumi:"tier"`
	// User-provided labels, represented as a dictionary where each label is a single key value pair.
	UserLabels pulumi.StringMapInput `pulumi:"userLabels"`
}

func (SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Settings)(nil)).Elem()
}

func (i SettingsArgs) ToSettingsOutput() SettingsOutput {
	return i.ToSettingsOutputWithContext(context.Background())
}

func (i SettingsArgs) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput)
}

func (i SettingsArgs) ToSettingsPtrOutput() SettingsPtrOutput {
	return i.ToSettingsPtrOutputWithContext(context.Background())
}

func (i SettingsArgs) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput).ToSettingsPtrOutputWithContext(ctx)
}

// SettingsPtrInput is an input type that accepts SettingsArgs, SettingsPtr and SettingsPtrOutput values.
// You can construct a concrete instance of `SettingsPtrInput` via:
//
//          SettingsArgs{...}
//
//  or:
//
//          nil
type SettingsPtrInput interface {
	pulumi.Input

	ToSettingsPtrOutput() SettingsPtrOutput
	ToSettingsPtrOutputWithContext(context.Context) SettingsPtrOutput
}

type settingsPtrType SettingsArgs

func SettingsPtr(v *SettingsArgs) SettingsPtrInput {
	return (*settingsPtrType)(v)
}

func (*settingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (i *settingsPtrType) ToSettingsPtrOutput() SettingsPtrOutput {
	return i.ToSettingsPtrOutputWithContext(context.Background())
}

func (i *settingsPtrType) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPtrOutput)
}

// Database instance settings.
type SettingsOutput struct{ *pulumi.OutputState }

func (SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Settings)(nil)).Elem()
}

func (o SettingsOutput) ToSettingsOutput() SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsPtrOutput() SettingsPtrOutput {
	return o.ToSettingsPtrOutputWithContext(context.Background())
}

func (o SettingsOutput) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return o.ApplyT(func(v Settings) *Settings {
		return &v
	}).(SettingsPtrOutput)
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: *ALWAYS*: The instance is on, and remains so even in the absence of connection requests. *NEVER*: The instance is off; it is not activated, even if a connection request arrives.
func (o SettingsOutput) ActivationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.ActivationPolicy }).(pulumi.StringPtrOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
func (o SettingsOutput) ActiveDirectoryConfig() SqlActiveDirectoryConfigPtrOutput {
	return o.ApplyT(func(v Settings) *SqlActiveDirectoryConfig { return v.ActiveDirectoryConfig }).(SqlActiveDirectoryConfigPtrOutput)
}

// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
func (o SettingsOutput) AuthorizedGaeApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Settings) []string { return v.AuthorizedGaeApplications }).(pulumi.StringArrayOutput)
}

// Availability type. Potential values: *ZONAL*: The instance serves data from only one zone. Outages in that zone affect data accessibility. *REGIONAL*: The instance can serve data from more than one zone in a region (it is highly available). For more information, see Overview of the High Availability Configuration.
func (o SettingsOutput) AvailabilityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.AvailabilityType }).(pulumi.StringPtrOutput)
}

// The daily backup configuration for the instance.
func (o SettingsOutput) BackupConfiguration() BackupConfigurationPtrOutput {
	return o.ApplyT(func(v Settings) *BackupConfiguration { return v.BackupConfiguration }).(BackupConfigurationPtrOutput)
}

// The name of server Instance collation.
func (o SettingsOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
func (o SettingsOutput) CrashSafeReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.CrashSafeReplicationEnabled }).(pulumi.BoolPtrOutput)
}

// The size of data disk, in GB. The data disk size minimum is 10GB.
func (o SettingsOutput) DataDiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.DataDiskSizeGb }).(pulumi.StringPtrOutput)
}

// The type of data disk: PD_SSD (default) or PD_HDD. Not used for First Generation instances.
func (o SettingsOutput) DataDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.DataDiskType }).(pulumi.StringPtrOutput)
}

// The database flags passed to the instance at startup.
func (o SettingsOutput) DatabaseFlags() DatabaseFlagsArrayOutput {
	return o.ApplyT(func(v Settings) []DatabaseFlags { return v.DatabaseFlags }).(DatabaseFlagsArrayOutput)
}

// Configuration specific to read replica instances. Indicates whether replication is enabled or not.
func (o SettingsOutput) DatabaseReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.DatabaseReplicationEnabled }).(pulumi.BoolPtrOutput)
}

// Deny maintenance periods
func (o SettingsOutput) DenyMaintenancePeriods() DenyMaintenancePeriodArrayOutput {
	return o.ApplyT(func(v Settings) []DenyMaintenancePeriod { return v.DenyMaintenancePeriods }).(DenyMaintenancePeriodArrayOutput)
}

// Insights configuration, for now relevant only for Postgres.
func (o SettingsOutput) InsightsConfig() InsightsConfigPtrOutput {
	return o.ApplyT(func(v Settings) *InsightsConfig { return v.InsightsConfig }).(InsightsConfigPtrOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
func (o SettingsOutput) IpConfiguration() IpConfigurationPtrOutput {
	return o.ApplyT(func(v Settings) *IpConfiguration { return v.IpConfiguration }).(IpConfigurationPtrOutput)
}

// This is always *sql#settings*.
func (o SettingsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
func (o SettingsOutput) LocationPreference() LocationPreferencePtrOutput {
	return o.ApplyT(func(v Settings) *LocationPreference { return v.LocationPreference }).(LocationPreferencePtrOutput)
}

// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
func (o SettingsOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v Settings) *MaintenanceWindow { return v.MaintenanceWindow }).(MaintenanceWindowPtrOutput)
}

// The pricing plan for this instance. This can be either *PER_USE* or *PACKAGE*. Only *PER_USE* is supported for Second Generation instances.
func (o SettingsOutput) PricingPlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.PricingPlan }).(pulumi.StringPtrOutput)
}

// The type of replication this instance uses. This can be either *ASYNCHRONOUS* or *SYNCHRONOUS*. (Deprecated_ This property was only applicable to First Generation instances.
func (o SettingsOutput) ReplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.ReplicationType }).(pulumi.StringPtrOutput)
}

// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
func (o SettingsOutput) SettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.SettingsVersion }).(pulumi.StringPtrOutput)
}

// Configuration to increase storage size automatically. The default value is true.
func (o SettingsOutput) StorageAutoResize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.StorageAutoResize }).(pulumi.BoolPtrOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o SettingsOutput) StorageAutoResizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.StorageAutoResizeLimit }).(pulumi.StringPtrOutput)
}

// The tier (or machine type) for this instance, for example *db-custom-1-3840* .
func (o SettingsOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// User-provided labels, represented as a dictionary where each label is a single key value pair.
func (o SettingsOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v Settings) map[string]string { return v.UserLabels }).(pulumi.StringMapOutput)
}

type SettingsPtrOutput struct{ *pulumi.OutputState }

func (SettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (o SettingsPtrOutput) ToSettingsPtrOutput() SettingsPtrOutput {
	return o
}

func (o SettingsPtrOutput) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return o
}

func (o SettingsPtrOutput) Elem() SettingsOutput {
	return o.ApplyT(func(v *Settings) Settings { return *v }).(SettingsOutput)
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: *ALWAYS*: The instance is on, and remains so even in the absence of connection requests. *NEVER*: The instance is off; it is not activated, even if a connection request arrives.
func (o SettingsPtrOutput) ActivationPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.ActivationPolicy
	}).(pulumi.StringPtrOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
func (o SettingsPtrOutput) ActiveDirectoryConfig() SqlActiveDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *Settings) *SqlActiveDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryConfig
	}).(SqlActiveDirectoryConfigPtrOutput)
}

// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
func (o SettingsPtrOutput) AuthorizedGaeApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Settings) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedGaeApplications
	}).(pulumi.StringArrayOutput)
}

// Availability type. Potential values: *ZONAL*: The instance serves data from only one zone. Outages in that zone affect data accessibility. *REGIONAL*: The instance can serve data from more than one zone in a region (it is highly available). For more information, see Overview of the High Availability Configuration.
func (o SettingsPtrOutput) AvailabilityType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.AvailabilityType
	}).(pulumi.StringPtrOutput)
}

// The daily backup configuration for the instance.
func (o SettingsPtrOutput) BackupConfiguration() BackupConfigurationPtrOutput {
	return o.ApplyT(func(v *Settings) *BackupConfiguration {
		if v == nil {
			return nil
		}
		return v.BackupConfiguration
	}).(BackupConfigurationPtrOutput)
}

// The name of server Instance collation.
func (o SettingsPtrOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
func (o SettingsPtrOutput) CrashSafeReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.CrashSafeReplicationEnabled
	}).(pulumi.BoolPtrOutput)
}

// The size of data disk, in GB. The data disk size minimum is 10GB.
func (o SettingsPtrOutput) DataDiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.DataDiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// The type of data disk: PD_SSD (default) or PD_HDD. Not used for First Generation instances.
func (o SettingsPtrOutput) DataDiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.DataDiskType
	}).(pulumi.StringPtrOutput)
}

// The database flags passed to the instance at startup.
func (o SettingsPtrOutput) DatabaseFlags() DatabaseFlagsArrayOutput {
	return o.ApplyT(func(v *Settings) []DatabaseFlags {
		if v == nil {
			return nil
		}
		return v.DatabaseFlags
	}).(DatabaseFlagsArrayOutput)
}

// Configuration specific to read replica instances. Indicates whether replication is enabled or not.
func (o SettingsPtrOutput) DatabaseReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.DatabaseReplicationEnabled
	}).(pulumi.BoolPtrOutput)
}

// Deny maintenance periods
func (o SettingsPtrOutput) DenyMaintenancePeriods() DenyMaintenancePeriodArrayOutput {
	return o.ApplyT(func(v *Settings) []DenyMaintenancePeriod {
		if v == nil {
			return nil
		}
		return v.DenyMaintenancePeriods
	}).(DenyMaintenancePeriodArrayOutput)
}

// Insights configuration, for now relevant only for Postgres.
func (o SettingsPtrOutput) InsightsConfig() InsightsConfigPtrOutput {
	return o.ApplyT(func(v *Settings) *InsightsConfig {
		if v == nil {
			return nil
		}
		return v.InsightsConfig
	}).(InsightsConfigPtrOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
func (o SettingsPtrOutput) IpConfiguration() IpConfigurationPtrOutput {
	return o.ApplyT(func(v *Settings) *IpConfiguration {
		if v == nil {
			return nil
		}
		return v.IpConfiguration
	}).(IpConfigurationPtrOutput)
}

// This is always *sql#settings*.
func (o SettingsPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
func (o SettingsPtrOutput) LocationPreference() LocationPreferencePtrOutput {
	return o.ApplyT(func(v *Settings) *LocationPreference {
		if v == nil {
			return nil
		}
		return v.LocationPreference
	}).(LocationPreferencePtrOutput)
}

// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
func (o SettingsPtrOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *Settings) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindow
	}).(MaintenanceWindowPtrOutput)
}

// The pricing plan for this instance. This can be either *PER_USE* or *PACKAGE*. Only *PER_USE* is supported for Second Generation instances.
func (o SettingsPtrOutput) PricingPlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.PricingPlan
	}).(pulumi.StringPtrOutput)
}

// The type of replication this instance uses. This can be either *ASYNCHRONOUS* or *SYNCHRONOUS*. (Deprecated_ This property was only applicable to First Generation instances.
func (o SettingsPtrOutput) ReplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.ReplicationType
	}).(pulumi.StringPtrOutput)
}

// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
func (o SettingsPtrOutput) SettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.SettingsVersion
	}).(pulumi.StringPtrOutput)
}

// Configuration to increase storage size automatically. The default value is true.
func (o SettingsPtrOutput) StorageAutoResize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAutoResize
	}).(pulumi.BoolPtrOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o SettingsPtrOutput) StorageAutoResizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.StorageAutoResizeLimit
	}).(pulumi.StringPtrOutput)
}

// The tier (or machine type) for this instance, for example *db-custom-1-3840* .
func (o SettingsPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// User-provided labels, represented as a dictionary where each label is a single key value pair.
func (o SettingsPtrOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Settings) map[string]string {
		if v == nil {
			return nil
		}
		return v.UserLabels
	}).(pulumi.StringMapOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfig struct {
	// The name of the domain (e.g., mydomain.com).
	Domain *string `pulumi:"domain"`
	// This is always sql#activeDirectoryConfig.
	Kind *string `pulumi:"kind"`
}

// SqlActiveDirectoryConfigInput is an input type that accepts SqlActiveDirectoryConfigArgs and SqlActiveDirectoryConfigOutput values.
// You can construct a concrete instance of `SqlActiveDirectoryConfigInput` via:
//
//          SqlActiveDirectoryConfigArgs{...}
type SqlActiveDirectoryConfigInput interface {
	pulumi.Input

	ToSqlActiveDirectoryConfigOutput() SqlActiveDirectoryConfigOutput
	ToSqlActiveDirectoryConfigOutputWithContext(context.Context) SqlActiveDirectoryConfigOutput
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfigArgs struct {
	// The name of the domain (e.g., mydomain.com).
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// This is always sql#activeDirectoryConfig.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (SqlActiveDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlActiveDirectoryConfig)(nil)).Elem()
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigOutput() SqlActiveDirectoryConfigOutput {
	return i.ToSqlActiveDirectoryConfigOutputWithContext(context.Background())
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlActiveDirectoryConfigOutput)
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return i.ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlActiveDirectoryConfigOutput).ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx)
}

// SqlActiveDirectoryConfigPtrInput is an input type that accepts SqlActiveDirectoryConfigArgs, SqlActiveDirectoryConfigPtr and SqlActiveDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `SqlActiveDirectoryConfigPtrInput` via:
//
//          SqlActiveDirectoryConfigArgs{...}
//
//  or:
//
//          nil
type SqlActiveDirectoryConfigPtrInput interface {
	pulumi.Input

	ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput
	ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Context) SqlActiveDirectoryConfigPtrOutput
}

type sqlActiveDirectoryConfigPtrType SqlActiveDirectoryConfigArgs

func SqlActiveDirectoryConfigPtr(v *SqlActiveDirectoryConfigArgs) SqlActiveDirectoryConfigPtrInput {
	return (*sqlActiveDirectoryConfigPtrType)(v)
}

func (*sqlActiveDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlActiveDirectoryConfig)(nil)).Elem()
}

func (i *sqlActiveDirectoryConfigPtrType) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return i.ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *sqlActiveDirectoryConfigPtrType) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlActiveDirectoryConfigPtrOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfigOutput struct{ *pulumi.OutputState }

func (SqlActiveDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlActiveDirectoryConfig)(nil)).Elem()
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigOutput() SqlActiveDirectoryConfigOutput {
	return o
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigOutput {
	return o
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return o.ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return o.ApplyT(func(v SqlActiveDirectoryConfig) *SqlActiveDirectoryConfig {
		return &v
	}).(SqlActiveDirectoryConfigPtrOutput)
}

// The name of the domain (e.g., mydomain.com).
func (o SqlActiveDirectoryConfigOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlActiveDirectoryConfig) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// This is always sql#activeDirectoryConfig.
func (o SqlActiveDirectoryConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlActiveDirectoryConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type SqlActiveDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (SqlActiveDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlActiveDirectoryConfig)(nil)).Elem()
}

func (o SqlActiveDirectoryConfigPtrOutput) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return o
}

func (o SqlActiveDirectoryConfigPtrOutput) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return o
}

func (o SqlActiveDirectoryConfigPtrOutput) Elem() SqlActiveDirectoryConfigOutput {
	return o.ApplyT(func(v *SqlActiveDirectoryConfig) SqlActiveDirectoryConfig { return *v }).(SqlActiveDirectoryConfigOutput)
}

// The name of the domain (e.g., mydomain.com).
func (o SqlActiveDirectoryConfigPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlActiveDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// This is always sql#activeDirectoryConfig.
func (o SqlActiveDirectoryConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlActiveDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Any scheduled maintenancce for this instance.
type SqlScheduledMaintenance struct {
	CanDefer *bool `pulumi:"canDefer"`
	// If the scheduled maintenance can be rescheduled.
	CanReschedule *bool `pulumi:"canReschedule"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime *string `pulumi:"startTime"`
}

// SqlScheduledMaintenanceInput is an input type that accepts SqlScheduledMaintenanceArgs and SqlScheduledMaintenanceOutput values.
// You can construct a concrete instance of `SqlScheduledMaintenanceInput` via:
//
//          SqlScheduledMaintenanceArgs{...}
type SqlScheduledMaintenanceInput interface {
	pulumi.Input

	ToSqlScheduledMaintenanceOutput() SqlScheduledMaintenanceOutput
	ToSqlScheduledMaintenanceOutputWithContext(context.Context) SqlScheduledMaintenanceOutput
}

// Any scheduled maintenancce for this instance.
type SqlScheduledMaintenanceArgs struct {
	CanDefer pulumi.BoolPtrInput `pulumi:"canDefer"`
	// If the scheduled maintenance can be rescheduled.
	CanReschedule pulumi.BoolPtrInput `pulumi:"canReschedule"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SqlScheduledMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlScheduledMaintenance)(nil)).Elem()
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenanceOutput() SqlScheduledMaintenanceOutput {
	return i.ToSqlScheduledMaintenanceOutputWithContext(context.Background())
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenanceOutputWithContext(ctx context.Context) SqlScheduledMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlScheduledMaintenanceOutput)
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return i.ToSqlScheduledMaintenancePtrOutputWithContext(context.Background())
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlScheduledMaintenanceOutput).ToSqlScheduledMaintenancePtrOutputWithContext(ctx)
}

// SqlScheduledMaintenancePtrInput is an input type that accepts SqlScheduledMaintenanceArgs, SqlScheduledMaintenancePtr and SqlScheduledMaintenancePtrOutput values.
// You can construct a concrete instance of `SqlScheduledMaintenancePtrInput` via:
//
//          SqlScheduledMaintenanceArgs{...}
//
//  or:
//
//          nil
type SqlScheduledMaintenancePtrInput interface {
	pulumi.Input

	ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput
	ToSqlScheduledMaintenancePtrOutputWithContext(context.Context) SqlScheduledMaintenancePtrOutput
}

type sqlScheduledMaintenancePtrType SqlScheduledMaintenanceArgs

func SqlScheduledMaintenancePtr(v *SqlScheduledMaintenanceArgs) SqlScheduledMaintenancePtrInput {
	return (*sqlScheduledMaintenancePtrType)(v)
}

func (*sqlScheduledMaintenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlScheduledMaintenance)(nil)).Elem()
}

func (i *sqlScheduledMaintenancePtrType) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return i.ToSqlScheduledMaintenancePtrOutputWithContext(context.Background())
}

func (i *sqlScheduledMaintenancePtrType) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlScheduledMaintenancePtrOutput)
}

// Any scheduled maintenancce for this instance.
type SqlScheduledMaintenanceOutput struct{ *pulumi.OutputState }

func (SqlScheduledMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlScheduledMaintenance)(nil)).Elem()
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenanceOutput() SqlScheduledMaintenanceOutput {
	return o
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenanceOutputWithContext(ctx context.Context) SqlScheduledMaintenanceOutput {
	return o
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return o.ToSqlScheduledMaintenancePtrOutputWithContext(context.Background())
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *SqlScheduledMaintenance {
		return &v
	}).(SqlScheduledMaintenancePtrOutput)
}
func (o SqlScheduledMaintenanceOutput) CanDefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *bool { return v.CanDefer }).(pulumi.BoolPtrOutput)
}

// If the scheduled maintenance can be rescheduled.
func (o SqlScheduledMaintenanceOutput) CanReschedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *bool { return v.CanReschedule }).(pulumi.BoolPtrOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o SqlScheduledMaintenanceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SqlScheduledMaintenancePtrOutput struct{ *pulumi.OutputState }

func (SqlScheduledMaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlScheduledMaintenance)(nil)).Elem()
}

func (o SqlScheduledMaintenancePtrOutput) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return o
}

func (o SqlScheduledMaintenancePtrOutput) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return o
}

func (o SqlScheduledMaintenancePtrOutput) Elem() SqlScheduledMaintenanceOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) SqlScheduledMaintenance { return *v }).(SqlScheduledMaintenanceOutput)
}

func (o SqlScheduledMaintenancePtrOutput) CanDefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) *bool {
		if v == nil {
			return nil
		}
		return v.CanDefer
	}).(pulumi.BoolPtrOutput)
}

// If the scheduled maintenance can be rescheduled.
func (o SqlScheduledMaintenancePtrOutput) CanReschedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) *bool {
		if v == nil {
			return nil
		}
		return v.CanReschedule
	}).(pulumi.BoolPtrOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o SqlScheduledMaintenancePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetails struct {
	// The version of SQL Server with which the database is to be made compatible
	CompatibilityLevel *int `pulumi:"compatibilityLevel"`
	// The recovery model of a SQL Server database
	RecoveryModel *string `pulumi:"recoveryModel"`
}

// SqlServerDatabaseDetailsInput is an input type that accepts SqlServerDatabaseDetailsArgs and SqlServerDatabaseDetailsOutput values.
// You can construct a concrete instance of `SqlServerDatabaseDetailsInput` via:
//
//          SqlServerDatabaseDetailsArgs{...}
type SqlServerDatabaseDetailsInput interface {
	pulumi.Input

	ToSqlServerDatabaseDetailsOutput() SqlServerDatabaseDetailsOutput
	ToSqlServerDatabaseDetailsOutputWithContext(context.Context) SqlServerDatabaseDetailsOutput
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetailsArgs struct {
	// The version of SQL Server with which the database is to be made compatible
	CompatibilityLevel pulumi.IntPtrInput `pulumi:"compatibilityLevel"`
	// The recovery model of a SQL Server database
	RecoveryModel pulumi.StringPtrInput `pulumi:"recoveryModel"`
}

func (SqlServerDatabaseDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerDatabaseDetails)(nil)).Elem()
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsOutput() SqlServerDatabaseDetailsOutput {
	return i.ToSqlServerDatabaseDetailsOutputWithContext(context.Background())
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerDatabaseDetailsOutput)
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return i.ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Background())
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerDatabaseDetailsOutput).ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx)
}

// SqlServerDatabaseDetailsPtrInput is an input type that accepts SqlServerDatabaseDetailsArgs, SqlServerDatabaseDetailsPtr and SqlServerDatabaseDetailsPtrOutput values.
// You can construct a concrete instance of `SqlServerDatabaseDetailsPtrInput` via:
//
//          SqlServerDatabaseDetailsArgs{...}
//
//  or:
//
//          nil
type SqlServerDatabaseDetailsPtrInput interface {
	pulumi.Input

	ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput
	ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Context) SqlServerDatabaseDetailsPtrOutput
}

type sqlServerDatabaseDetailsPtrType SqlServerDatabaseDetailsArgs

func SqlServerDatabaseDetailsPtr(v *SqlServerDatabaseDetailsArgs) SqlServerDatabaseDetailsPtrInput {
	return (*sqlServerDatabaseDetailsPtrType)(v)
}

func (*sqlServerDatabaseDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerDatabaseDetails)(nil)).Elem()
}

func (i *sqlServerDatabaseDetailsPtrType) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return i.ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Background())
}

func (i *sqlServerDatabaseDetailsPtrType) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerDatabaseDetailsPtrOutput)
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetailsOutput struct{ *pulumi.OutputState }

func (SqlServerDatabaseDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerDatabaseDetails)(nil)).Elem()
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsOutput() SqlServerDatabaseDetailsOutput {
	return o
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsOutput {
	return o
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return o.ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Background())
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return o.ApplyT(func(v SqlServerDatabaseDetails) *SqlServerDatabaseDetails {
		return &v
	}).(SqlServerDatabaseDetailsPtrOutput)
}

// The version of SQL Server with which the database is to be made compatible
func (o SqlServerDatabaseDetailsOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlServerDatabaseDetails) *int { return v.CompatibilityLevel }).(pulumi.IntPtrOutput)
}

// The recovery model of a SQL Server database
func (o SqlServerDatabaseDetailsOutput) RecoveryModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerDatabaseDetails) *string { return v.RecoveryModel }).(pulumi.StringPtrOutput)
}

type SqlServerDatabaseDetailsPtrOutput struct{ *pulumi.OutputState }

func (SqlServerDatabaseDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerDatabaseDetails)(nil)).Elem()
}

func (o SqlServerDatabaseDetailsPtrOutput) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return o
}

func (o SqlServerDatabaseDetailsPtrOutput) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return o
}

func (o SqlServerDatabaseDetailsPtrOutput) Elem() SqlServerDatabaseDetailsOutput {
	return o.ApplyT(func(v *SqlServerDatabaseDetails) SqlServerDatabaseDetails { return *v }).(SqlServerDatabaseDetailsOutput)
}

// The version of SQL Server with which the database is to be made compatible
func (o SqlServerDatabaseDetailsPtrOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlServerDatabaseDetails) *int {
		if v == nil {
			return nil
		}
		return v.CompatibilityLevel
	}).(pulumi.IntPtrOutput)
}

// The recovery model of a SQL Server database
func (o SqlServerDatabaseDetailsPtrOutput) RecoveryModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerDatabaseDetails) *string {
		if v == nil {
			return nil
		}
		return v.RecoveryModel
	}).(pulumi.StringPtrOutput)
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetails struct {
	// If the user has been disabled
	Disabled *bool `pulumi:"disabled"`
	// The server roles for this user
	ServerRoles []string `pulumi:"serverRoles"`
}

// SqlServerUserDetailsInput is an input type that accepts SqlServerUserDetailsArgs and SqlServerUserDetailsOutput values.
// You can construct a concrete instance of `SqlServerUserDetailsInput` via:
//
//          SqlServerUserDetailsArgs{...}
type SqlServerUserDetailsInput interface {
	pulumi.Input

	ToSqlServerUserDetailsOutput() SqlServerUserDetailsOutput
	ToSqlServerUserDetailsOutputWithContext(context.Context) SqlServerUserDetailsOutput
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetailsArgs struct {
	// If the user has been disabled
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The server roles for this user
	ServerRoles pulumi.StringArrayInput `pulumi:"serverRoles"`
}

func (SqlServerUserDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerUserDetails)(nil)).Elem()
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsOutput() SqlServerUserDetailsOutput {
	return i.ToSqlServerUserDetailsOutputWithContext(context.Background())
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsOutputWithContext(ctx context.Context) SqlServerUserDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerUserDetailsOutput)
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return i.ToSqlServerUserDetailsPtrOutputWithContext(context.Background())
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerUserDetailsOutput).ToSqlServerUserDetailsPtrOutputWithContext(ctx)
}

// SqlServerUserDetailsPtrInput is an input type that accepts SqlServerUserDetailsArgs, SqlServerUserDetailsPtr and SqlServerUserDetailsPtrOutput values.
// You can construct a concrete instance of `SqlServerUserDetailsPtrInput` via:
//
//          SqlServerUserDetailsArgs{...}
//
//  or:
//
//          nil
type SqlServerUserDetailsPtrInput interface {
	pulumi.Input

	ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput
	ToSqlServerUserDetailsPtrOutputWithContext(context.Context) SqlServerUserDetailsPtrOutput
}

type sqlServerUserDetailsPtrType SqlServerUserDetailsArgs

func SqlServerUserDetailsPtr(v *SqlServerUserDetailsArgs) SqlServerUserDetailsPtrInput {
	return (*sqlServerUserDetailsPtrType)(v)
}

func (*sqlServerUserDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerUserDetails)(nil)).Elem()
}

func (i *sqlServerUserDetailsPtrType) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return i.ToSqlServerUserDetailsPtrOutputWithContext(context.Background())
}

func (i *sqlServerUserDetailsPtrType) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerUserDetailsPtrOutput)
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetailsOutput struct{ *pulumi.OutputState }

func (SqlServerUserDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerUserDetails)(nil)).Elem()
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsOutput() SqlServerUserDetailsOutput {
	return o
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsOutputWithContext(ctx context.Context) SqlServerUserDetailsOutput {
	return o
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return o.ToSqlServerUserDetailsPtrOutputWithContext(context.Background())
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return o.ApplyT(func(v SqlServerUserDetails) *SqlServerUserDetails {
		return &v
	}).(SqlServerUserDetailsPtrOutput)
}

// If the user has been disabled
func (o SqlServerUserDetailsOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlServerUserDetails) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The server roles for this user
func (o SqlServerUserDetailsOutput) ServerRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SqlServerUserDetails) []string { return v.ServerRoles }).(pulumi.StringArrayOutput)
}

type SqlServerUserDetailsPtrOutput struct{ *pulumi.OutputState }

func (SqlServerUserDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerUserDetails)(nil)).Elem()
}

func (o SqlServerUserDetailsPtrOutput) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return o
}

func (o SqlServerUserDetailsPtrOutput) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return o
}

func (o SqlServerUserDetailsPtrOutput) Elem() SqlServerUserDetailsOutput {
	return o.ApplyT(func(v *SqlServerUserDetails) SqlServerUserDetails { return *v }).(SqlServerUserDetailsOutput)
}

// If the user has been disabled
func (o SqlServerUserDetailsPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlServerUserDetails) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The server roles for this user
func (o SqlServerUserDetailsPtrOutput) ServerRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlServerUserDetails) []string {
		if v == nil {
			return nil
		}
		return v.ServerRoles
	}).(pulumi.StringArrayOutput)
}

// SslCerts Resource
type SslCertType struct {
	// PEM representation.
	Cert *string `pulumi:"cert"`
	// Serial number, as extracted from the certificate.
	CertSerialNumber *string `pulumi:"certSerialNumber"`
	// User supplied name. Constrained to [a-zA-Z.-_ ]+.
	CommonName *string `pulumi:"commonName"`
	// The time when the certificate was created in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*
	CreateTime *string `pulumi:"createTime"`
	// The time when the certificate expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Name of the database instance.
	Instance *string `pulumi:"instance"`
	// This is always *sql#sslCert*.
	Kind *string `pulumi:"kind"`
	// The URI of this resource.
	SelfLink *string `pulumi:"selfLink"`
	// Sha1 Fingerprint.
	Sha1Fingerprint *string `pulumi:"sha1Fingerprint"`
}

// SslCertTypeInput is an input type that accepts SslCertTypeArgs and SslCertTypeOutput values.
// You can construct a concrete instance of `SslCertTypeInput` via:
//
//          SslCertTypeArgs{...}
type SslCertTypeInput interface {
	pulumi.Input

	ToSslCertTypeOutput() SslCertTypeOutput
	ToSslCertTypeOutputWithContext(context.Context) SslCertTypeOutput
}

// SslCerts Resource
type SslCertTypeArgs struct {
	// PEM representation.
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// Serial number, as extracted from the certificate.
	CertSerialNumber pulumi.StringPtrInput `pulumi:"certSerialNumber"`
	// User supplied name. Constrained to [a-zA-Z.-_ ]+.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// The time when the certificate was created in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// The time when the certificate expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// Name of the database instance.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// This is always *sql#sslCert*.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The URI of this resource.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// Sha1 Fingerprint.
	Sha1Fingerprint pulumi.StringPtrInput `pulumi:"sha1Fingerprint"`
}

func (SslCertTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertType)(nil)).Elem()
}

func (i SslCertTypeArgs) ToSslCertTypeOutput() SslCertTypeOutput {
	return i.ToSslCertTypeOutputWithContext(context.Background())
}

func (i SslCertTypeArgs) ToSslCertTypeOutputWithContext(ctx context.Context) SslCertTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertTypeOutput)
}

func (i SslCertTypeArgs) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return i.ToSslCertTypePtrOutputWithContext(context.Background())
}

func (i SslCertTypeArgs) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertTypeOutput).ToSslCertTypePtrOutputWithContext(ctx)
}

// SslCertTypePtrInput is an input type that accepts SslCertTypeArgs, SslCertTypePtr and SslCertTypePtrOutput values.
// You can construct a concrete instance of `SslCertTypePtrInput` via:
//
//          SslCertTypeArgs{...}
//
//  or:
//
//          nil
type SslCertTypePtrInput interface {
	pulumi.Input

	ToSslCertTypePtrOutput() SslCertTypePtrOutput
	ToSslCertTypePtrOutputWithContext(context.Context) SslCertTypePtrOutput
}

type sslCertTypePtrType SslCertTypeArgs

func SslCertTypePtr(v *SslCertTypeArgs) SslCertTypePtrInput {
	return (*sslCertTypePtrType)(v)
}

func (*sslCertTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertType)(nil)).Elem()
}

func (i *sslCertTypePtrType) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return i.ToSslCertTypePtrOutputWithContext(context.Background())
}

func (i *sslCertTypePtrType) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertTypePtrOutput)
}

// SslCerts Resource
type SslCertTypeOutput struct{ *pulumi.OutputState }

func (SslCertTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertType)(nil)).Elem()
}

func (o SslCertTypeOutput) ToSslCertTypeOutput() SslCertTypeOutput {
	return o
}

func (o SslCertTypeOutput) ToSslCertTypeOutputWithContext(ctx context.Context) SslCertTypeOutput {
	return o
}

func (o SslCertTypeOutput) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return o.ToSslCertTypePtrOutputWithContext(context.Background())
}

func (o SslCertTypeOutput) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return o.ApplyT(func(v SslCertType) *SslCertType {
		return &v
	}).(SslCertTypePtrOutput)
}

// PEM representation.
func (o SslCertTypeOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// Serial number, as extracted from the certificate.
func (o SslCertTypeOutput) CertSerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.CertSerialNumber }).(pulumi.StringPtrOutput)
}

// User supplied name. Constrained to [a-zA-Z.-_ ]+.
func (o SslCertTypeOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// The time when the certificate was created in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*
func (o SslCertTypeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// The time when the certificate expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
func (o SslCertTypeOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// Name of the database instance.
func (o SslCertTypeOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// This is always *sql#sslCert*.
func (o SslCertTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The URI of this resource.
func (o SslCertTypeOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// Sha1 Fingerprint.
func (o SslCertTypeOutput) Sha1Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Sha1Fingerprint }).(pulumi.StringPtrOutput)
}

type SslCertTypePtrOutput struct{ *pulumi.OutputState }

func (SslCertTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertType)(nil)).Elem()
}

func (o SslCertTypePtrOutput) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return o
}

func (o SslCertTypePtrOutput) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return o
}

func (o SslCertTypePtrOutput) Elem() SslCertTypeOutput {
	return o.ApplyT(func(v *SslCertType) SslCertType { return *v }).(SslCertTypeOutput)
}

// PEM representation.
func (o SslCertTypePtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// Serial number, as extracted from the certificate.
func (o SslCertTypePtrOutput) CertSerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.CertSerialNumber
	}).(pulumi.StringPtrOutput)
}

// User supplied name. Constrained to [a-zA-Z.-_ ]+.
func (o SslCertTypePtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.CommonName
	}).(pulumi.StringPtrOutput)
}

// The time when the certificate was created in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*
func (o SslCertTypePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// The time when the certificate expires in RFC 3339 format, for example *2012-11-15T16:19:00.094Z*.
func (o SslCertTypePtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// Name of the database instance.
func (o SslCertTypePtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// This is always *sql#sslCert*.
func (o SslCertTypePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The URI of this resource.
func (o SslCertTypePtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// Sha1 Fingerprint.
func (o SslCertTypePtrOutput) Sha1Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Sha1Fingerprint
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AclEntryOutput{})
	pulumi.RegisterOutputType(AclEntryArrayOutput{})
	pulumi.RegisterOutputType(BackupConfigurationOutput{})
	pulumi.RegisterOutputType(BackupConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BackupRetentionSettingsOutput{})
	pulumi.RegisterOutputType(BackupRetentionSettingsPtrOutput{})
	pulumi.RegisterOutputType(DatabaseFlagsOutput{})
	pulumi.RegisterOutputType(DatabaseFlagsArrayOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodArrayOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionStatusOutput{})
	pulumi.RegisterOutputType(DiskEncryptionStatusPtrOutput{})
	pulumi.RegisterOutputType(InsightsConfigOutput{})
	pulumi.RegisterOutputType(InsightsConfigPtrOutput{})
	pulumi.RegisterOutputType(IpConfigurationOutput{})
	pulumi.RegisterOutputType(IpConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IpMappingOutput{})
	pulumi.RegisterOutputType(IpMappingArrayOutput{})
	pulumi.RegisterOutputType(LocationPreferenceOutput{})
	pulumi.RegisterOutputType(LocationPreferencePtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MySqlReplicaConfigurationOutput{})
	pulumi.RegisterOutputType(MySqlReplicaConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OnPremisesConfigurationOutput{})
	pulumi.RegisterOutputType(OnPremisesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OperationErrorOutput{})
	pulumi.RegisterOutputType(OperationErrorPtrOutput{})
	pulumi.RegisterOutputType(ReplicaConfigurationOutput{})
	pulumi.RegisterOutputType(ReplicaConfigurationPtrOutput{})
	pulumi.RegisterOutputType(SettingsOutput{})
	pulumi.RegisterOutputType(SettingsPtrOutput{})
	pulumi.RegisterOutputType(SqlActiveDirectoryConfigOutput{})
	pulumi.RegisterOutputType(SqlActiveDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(SqlScheduledMaintenanceOutput{})
	pulumi.RegisterOutputType(SqlScheduledMaintenancePtrOutput{})
	pulumi.RegisterOutputType(SqlServerDatabaseDetailsOutput{})
	pulumi.RegisterOutputType(SqlServerDatabaseDetailsPtrOutput{})
	pulumi.RegisterOutputType(SqlServerUserDetailsOutput{})
	pulumi.RegisterOutputType(SqlServerUserDetailsPtrOutput{})
	pulumi.RegisterOutputType(SslCertTypeOutput{})
	pulumi.RegisterOutputType(SslCertTypePtrOutput{})
}
