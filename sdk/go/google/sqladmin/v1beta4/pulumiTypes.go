// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta4

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

// An entry for an Access Control list.
type AclEntry struct {
	// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	ExpirationTime *string `pulumi:"expirationTime"`
	// This is always `sql#aclEntry`.
	Kind *string `pulumi:"kind"`
	// Optional. A label to identify this entry.
	Name *string `pulumi:"name"`
	// The allowlisted value for the access control list.
	Value *string `pulumi:"value"`
}

// AclEntryInput is an input type that accepts AclEntryArgs and AclEntryOutput values.
// You can construct a concrete instance of `AclEntryInput` via:
//
//	AclEntryArgs{...}
type AclEntryInput interface {
	pulumi.Input

	ToAclEntryOutput() AclEntryOutput
	ToAclEntryOutputWithContext(context.Context) AclEntryOutput
}

// An entry for an Access Control list.
type AclEntryArgs struct {
	// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// This is always `sql#aclEntry`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Optional. A label to identify this entry.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The allowlisted value for the access control list.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclEntry)(nil)).Elem()
}

func (i AclEntryArgs) ToAclEntryOutput() AclEntryOutput {
	return i.ToAclEntryOutputWithContext(context.Background())
}

func (i AclEntryArgs) ToAclEntryOutputWithContext(ctx context.Context) AclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclEntryOutput)
}

func (i AclEntryArgs) ToOutput(ctx context.Context) pulumix.Output[AclEntry] {
	return pulumix.Output[AclEntry]{
		OutputState: i.ToAclEntryOutputWithContext(ctx).OutputState,
	}
}

// AclEntryArrayInput is an input type that accepts AclEntryArray and AclEntryArrayOutput values.
// You can construct a concrete instance of `AclEntryArrayInput` via:
//
//	AclEntryArray{ AclEntryArgs{...} }
type AclEntryArrayInput interface {
	pulumi.Input

	ToAclEntryArrayOutput() AclEntryArrayOutput
	ToAclEntryArrayOutputWithContext(context.Context) AclEntryArrayOutput
}

type AclEntryArray []AclEntryInput

func (AclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclEntry)(nil)).Elem()
}

func (i AclEntryArray) ToAclEntryArrayOutput() AclEntryArrayOutput {
	return i.ToAclEntryArrayOutputWithContext(context.Background())
}

func (i AclEntryArray) ToAclEntryArrayOutputWithContext(ctx context.Context) AclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclEntryArrayOutput)
}

func (i AclEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]AclEntry] {
	return pulumix.Output[[]AclEntry]{
		OutputState: i.ToAclEntryArrayOutputWithContext(ctx).OutputState,
	}
}

// An entry for an Access Control list.
type AclEntryOutput struct{ *pulumi.OutputState }

func (AclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclEntry)(nil)).Elem()
}

func (o AclEntryOutput) ToAclEntryOutput() AclEntryOutput {
	return o
}

func (o AclEntryOutput) ToAclEntryOutputWithContext(ctx context.Context) AclEntryOutput {
	return o
}

func (o AclEntryOutput) ToOutput(ctx context.Context) pulumix.Output[AclEntry] {
	return pulumix.Output[AclEntry]{
		OutputState: o.OutputState,
	}
}

// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o AclEntryOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// This is always `sql#aclEntry`.
func (o AclEntryOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Optional. A label to identify this entry.
func (o AclEntryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The allowlisted value for the access control list.
func (o AclEntryOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclEntry) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AclEntryArrayOutput struct{ *pulumi.OutputState }

func (AclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclEntry)(nil)).Elem()
}

func (o AclEntryArrayOutput) ToAclEntryArrayOutput() AclEntryArrayOutput {
	return o
}

func (o AclEntryArrayOutput) ToAclEntryArrayOutputWithContext(ctx context.Context) AclEntryArrayOutput {
	return o
}

func (o AclEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AclEntry] {
	return pulumix.Output[[]AclEntry]{
		OutputState: o.OutputState,
	}
}

func (o AclEntryArrayOutput) Index(i pulumi.IntInput) AclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclEntry {
		return vs[0].([]AclEntry)[vs[1].(int)]
	}).(AclEntryOutput)
}

// An entry for an Access Control list.
type AclEntryResponse struct {
	// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	ExpirationTime string `pulumi:"expirationTime"`
	// This is always `sql#aclEntry`.
	Kind string `pulumi:"kind"`
	// Optional. A label to identify this entry.
	Name string `pulumi:"name"`
	// The allowlisted value for the access control list.
	Value string `pulumi:"value"`
}

// An entry for an Access Control list.
type AclEntryResponseOutput struct{ *pulumi.OutputState }

func (AclEntryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclEntryResponse)(nil)).Elem()
}

func (o AclEntryResponseOutput) ToAclEntryResponseOutput() AclEntryResponseOutput {
	return o
}

func (o AclEntryResponseOutput) ToAclEntryResponseOutputWithContext(ctx context.Context) AclEntryResponseOutput {
	return o
}

func (o AclEntryResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AclEntryResponse] {
	return pulumix.Output[AclEntryResponse]{
		OutputState: o.OutputState,
	}
}

// The time when this access control entry expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o AclEntryResponseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v AclEntryResponse) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// This is always `sql#aclEntry`.
func (o AclEntryResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v AclEntryResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Optional. A label to identify this entry.
func (o AclEntryResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AclEntryResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The allowlisted value for the access control list.
func (o AclEntryResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AclEntryResponse) string { return v.Value }).(pulumi.StringOutput)
}

type AclEntryResponseArrayOutput struct{ *pulumi.OutputState }

func (AclEntryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclEntryResponse)(nil)).Elem()
}

func (o AclEntryResponseArrayOutput) ToAclEntryResponseArrayOutput() AclEntryResponseArrayOutput {
	return o
}

func (o AclEntryResponseArrayOutput) ToAclEntryResponseArrayOutputWithContext(ctx context.Context) AclEntryResponseArrayOutput {
	return o
}

func (o AclEntryResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AclEntryResponse] {
	return pulumix.Output[[]AclEntryResponse]{
		OutputState: o.OutputState,
	}
}

func (o AclEntryResponseArrayOutput) Index(i pulumi.IntInput) AclEntryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclEntryResponse {
		return vs[0].([]AclEntryResponse)[vs[1].(int)]
	}).(AclEntryResponseOutput)
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeatures struct {
	// The number of threads per physical core.
	ThreadsPerCore *int `pulumi:"threadsPerCore"`
}

// AdvancedMachineFeaturesInput is an input type that accepts AdvancedMachineFeaturesArgs and AdvancedMachineFeaturesOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesInput` via:
//
//	AdvancedMachineFeaturesArgs{...}
type AdvancedMachineFeaturesInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput
	ToAdvancedMachineFeaturesOutputWithContext(context.Context) AdvancedMachineFeaturesOutput
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesArgs struct {
	// The number of threads per physical core.
	ThreadsPerCore pulumi.IntPtrInput `pulumi:"threadsPerCore"`
}

func (AdvancedMachineFeaturesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeatures)(nil)).Elem()
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput {
	return i.ToAdvancedMachineFeaturesOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesOutputWithContext(ctx context.Context) AdvancedMachineFeaturesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesOutput)
}

func (i AdvancedMachineFeaturesArgs) ToOutput(ctx context.Context) pulumix.Output[AdvancedMachineFeatures] {
	return pulumix.Output[AdvancedMachineFeatures]{
		OutputState: i.ToAdvancedMachineFeaturesOutputWithContext(ctx).OutputState,
	}
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return i.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (i AdvancedMachineFeaturesArgs) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesOutput).ToAdvancedMachineFeaturesPtrOutputWithContext(ctx)
}

// AdvancedMachineFeaturesPtrInput is an input type that accepts AdvancedMachineFeaturesArgs, AdvancedMachineFeaturesPtr and AdvancedMachineFeaturesPtrOutput values.
// You can construct a concrete instance of `AdvancedMachineFeaturesPtrInput` via:
//
//	        AdvancedMachineFeaturesArgs{...}
//
//	or:
//
//	        nil
type AdvancedMachineFeaturesPtrInput interface {
	pulumi.Input

	ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput
	ToAdvancedMachineFeaturesPtrOutputWithContext(context.Context) AdvancedMachineFeaturesPtrOutput
}

type advancedMachineFeaturesPtrType AdvancedMachineFeaturesArgs

func AdvancedMachineFeaturesPtr(v *AdvancedMachineFeaturesArgs) AdvancedMachineFeaturesPtrInput {
	return (*advancedMachineFeaturesPtrType)(v)
}

func (*advancedMachineFeaturesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeatures)(nil)).Elem()
}

func (i *advancedMachineFeaturesPtrType) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return i.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (i *advancedMachineFeaturesPtrType) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedMachineFeaturesPtrOutput)
}

func (i *advancedMachineFeaturesPtrType) ToOutput(ctx context.Context) pulumix.Output[*AdvancedMachineFeatures] {
	return pulumix.Output[*AdvancedMachineFeatures]{
		OutputState: i.ToAdvancedMachineFeaturesPtrOutputWithContext(ctx).OutputState,
	}
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeatures)(nil)).Elem()
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesOutput() AdvancedMachineFeaturesOutput {
	return o
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesOutputWithContext(ctx context.Context) AdvancedMachineFeaturesOutput {
	return o
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return o.ToAdvancedMachineFeaturesPtrOutputWithContext(context.Background())
}

func (o AdvancedMachineFeaturesOutput) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AdvancedMachineFeatures) *AdvancedMachineFeatures {
		return &v
	}).(AdvancedMachineFeaturesPtrOutput)
}

func (o AdvancedMachineFeaturesOutput) ToOutput(ctx context.Context) pulumix.Output[AdvancedMachineFeatures] {
	return pulumix.Output[AdvancedMachineFeatures]{
		OutputState: o.OutputState,
	}
}

// The number of threads per physical core.
func (o AdvancedMachineFeaturesOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AdvancedMachineFeatures) *int { return v.ThreadsPerCore }).(pulumi.IntPtrOutput)
}

type AdvancedMachineFeaturesPtrOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedMachineFeatures)(nil)).Elem()
}

func (o AdvancedMachineFeaturesPtrOutput) ToAdvancedMachineFeaturesPtrOutput() AdvancedMachineFeaturesPtrOutput {
	return o
}

func (o AdvancedMachineFeaturesPtrOutput) ToAdvancedMachineFeaturesPtrOutputWithContext(ctx context.Context) AdvancedMachineFeaturesPtrOutput {
	return o
}

func (o AdvancedMachineFeaturesPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*AdvancedMachineFeatures] {
	return pulumix.Output[*AdvancedMachineFeatures]{
		OutputState: o.OutputState,
	}
}

func (o AdvancedMachineFeaturesPtrOutput) Elem() AdvancedMachineFeaturesOutput {
	return o.ApplyT(func(v *AdvancedMachineFeatures) AdvancedMachineFeatures {
		if v != nil {
			return *v
		}
		var ret AdvancedMachineFeatures
		return ret
	}).(AdvancedMachineFeaturesOutput)
}

// The number of threads per physical core.
func (o AdvancedMachineFeaturesPtrOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AdvancedMachineFeatures) *int {
		if v == nil {
			return nil
		}
		return v.ThreadsPerCore
	}).(pulumi.IntPtrOutput)
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesResponse struct {
	// The number of threads per physical core.
	ThreadsPerCore int `pulumi:"threadsPerCore"`
}

// Specifies options for controlling advanced machine features.
type AdvancedMachineFeaturesResponseOutput struct{ *pulumi.OutputState }

func (AdvancedMachineFeaturesResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AdvancedMachineFeaturesResponse)(nil)).Elem()
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponseOutput() AdvancedMachineFeaturesResponseOutput {
	return o
}

func (o AdvancedMachineFeaturesResponseOutput) ToAdvancedMachineFeaturesResponseOutputWithContext(ctx context.Context) AdvancedMachineFeaturesResponseOutput {
	return o
}

func (o AdvancedMachineFeaturesResponseOutput) ToOutput(ctx context.Context) pulumix.Output[AdvancedMachineFeaturesResponse] {
	return pulumix.Output[AdvancedMachineFeaturesResponse]{
		OutputState: o.OutputState,
	}
}

// The number of threads per physical core.
func (o AdvancedMachineFeaturesResponseOutput) ThreadsPerCore() pulumi.IntOutput {
	return o.ApplyT(func(v AdvancedMachineFeaturesResponse) int { return v.ThreadsPerCore }).(pulumi.IntOutput)
}

// Database instance backup configuration.
type BackupConfiguration struct {
	// Backup retention settings.
	BackupRetentionSettings *BackupRetentionSettings `pulumi:"backupRetentionSettings"`
	// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
	BinaryLogEnabled *bool `pulumi:"binaryLogEnabled"`
	// Whether this configuration is enabled.
	Enabled *bool `pulumi:"enabled"`
	// This is always `sql#backupConfiguration`.
	Kind *string `pulumi:"kind"`
	// Location of the backup
	Location *string `pulumi:"location"`
	// (Postgres only) Whether point in time recovery is enabled.
	PointInTimeRecoveryEnabled *bool `pulumi:"pointInTimeRecoveryEnabled"`
	// Reserved for future use.
	ReplicationLogArchivingEnabled *bool `pulumi:"replicationLogArchivingEnabled"`
	// Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
	StartTime *string `pulumi:"startTime"`
	// The number of days of transaction logs we retain for point in time restore, from 1-7.
	TransactionLogRetentionDays *int `pulumi:"transactionLogRetentionDays"`
}

// BackupConfigurationInput is an input type that accepts BackupConfigurationArgs and BackupConfigurationOutput values.
// You can construct a concrete instance of `BackupConfigurationInput` via:
//
//	BackupConfigurationArgs{...}
type BackupConfigurationInput interface {
	pulumi.Input

	ToBackupConfigurationOutput() BackupConfigurationOutput
	ToBackupConfigurationOutputWithContext(context.Context) BackupConfigurationOutput
}

// Database instance backup configuration.
type BackupConfigurationArgs struct {
	// Backup retention settings.
	BackupRetentionSettings BackupRetentionSettingsPtrInput `pulumi:"backupRetentionSettings"`
	// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
	BinaryLogEnabled pulumi.BoolPtrInput `pulumi:"binaryLogEnabled"`
	// Whether this configuration is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// This is always `sql#backupConfiguration`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Location of the backup
	Location pulumi.StringPtrInput `pulumi:"location"`
	// (Postgres only) Whether point in time recovery is enabled.
	PointInTimeRecoveryEnabled pulumi.BoolPtrInput `pulumi:"pointInTimeRecoveryEnabled"`
	// Reserved for future use.
	ReplicationLogArchivingEnabled pulumi.BoolPtrInput `pulumi:"replicationLogArchivingEnabled"`
	// Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The number of days of transaction logs we retain for point in time restore, from 1-7.
	TransactionLogRetentionDays pulumi.IntPtrInput `pulumi:"transactionLogRetentionDays"`
}

func (BackupConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupConfiguration)(nil)).Elem()
}

func (i BackupConfigurationArgs) ToBackupConfigurationOutput() BackupConfigurationOutput {
	return i.ToBackupConfigurationOutputWithContext(context.Background())
}

func (i BackupConfigurationArgs) ToBackupConfigurationOutputWithContext(ctx context.Context) BackupConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigurationOutput)
}

func (i BackupConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[BackupConfiguration] {
	return pulumix.Output[BackupConfiguration]{
		OutputState: i.ToBackupConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i BackupConfigurationArgs) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return i.ToBackupConfigurationPtrOutputWithContext(context.Background())
}

func (i BackupConfigurationArgs) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigurationOutput).ToBackupConfigurationPtrOutputWithContext(ctx)
}

// BackupConfigurationPtrInput is an input type that accepts BackupConfigurationArgs, BackupConfigurationPtr and BackupConfigurationPtrOutput values.
// You can construct a concrete instance of `BackupConfigurationPtrInput` via:
//
//	        BackupConfigurationArgs{...}
//
//	or:
//
//	        nil
type BackupConfigurationPtrInput interface {
	pulumi.Input

	ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput
	ToBackupConfigurationPtrOutputWithContext(context.Context) BackupConfigurationPtrOutput
}

type backupConfigurationPtrType BackupConfigurationArgs

func BackupConfigurationPtr(v *BackupConfigurationArgs) BackupConfigurationPtrInput {
	return (*backupConfigurationPtrType)(v)
}

func (*backupConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupConfiguration)(nil)).Elem()
}

func (i *backupConfigurationPtrType) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return i.ToBackupConfigurationPtrOutputWithContext(context.Background())
}

func (i *backupConfigurationPtrType) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupConfigurationPtrOutput)
}

func (i *backupConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*BackupConfiguration] {
	return pulumix.Output[*BackupConfiguration]{
		OutputState: i.ToBackupConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Database instance backup configuration.
type BackupConfigurationOutput struct{ *pulumi.OutputState }

func (BackupConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupConfiguration)(nil)).Elem()
}

func (o BackupConfigurationOutput) ToBackupConfigurationOutput() BackupConfigurationOutput {
	return o
}

func (o BackupConfigurationOutput) ToBackupConfigurationOutputWithContext(ctx context.Context) BackupConfigurationOutput {
	return o
}

func (o BackupConfigurationOutput) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return o.ToBackupConfigurationPtrOutputWithContext(context.Background())
}

func (o BackupConfigurationOutput) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupConfiguration) *BackupConfiguration {
		return &v
	}).(BackupConfigurationPtrOutput)
}

func (o BackupConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[BackupConfiguration] {
	return pulumix.Output[BackupConfiguration]{
		OutputState: o.OutputState,
	}
}

// Backup retention settings.
func (o BackupConfigurationOutput) BackupRetentionSettings() BackupRetentionSettingsPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *BackupRetentionSettings { return v.BackupRetentionSettings }).(BackupRetentionSettingsPtrOutput)
}

// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
func (o BackupConfigurationOutput) BinaryLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.BinaryLogEnabled }).(pulumi.BoolPtrOutput)
}

// Whether this configuration is enabled.
func (o BackupConfigurationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// This is always `sql#backupConfiguration`.
func (o BackupConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Location of the backup
func (o BackupConfigurationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// (Postgres only) Whether point in time recovery is enabled.
func (o BackupConfigurationOutput) PointInTimeRecoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.PointInTimeRecoveryEnabled }).(pulumi.BoolPtrOutput)
}

// Reserved for future use.
func (o BackupConfigurationOutput) ReplicationLogArchivingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *bool { return v.ReplicationLogArchivingEnabled }).(pulumi.BoolPtrOutput)
}

// Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
func (o BackupConfigurationOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The number of days of transaction logs we retain for point in time restore, from 1-7.
func (o BackupConfigurationOutput) TransactionLogRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupConfiguration) *int { return v.TransactionLogRetentionDays }).(pulumi.IntPtrOutput)
}

type BackupConfigurationPtrOutput struct{ *pulumi.OutputState }

func (BackupConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupConfiguration)(nil)).Elem()
}

func (o BackupConfigurationPtrOutput) ToBackupConfigurationPtrOutput() BackupConfigurationPtrOutput {
	return o
}

func (o BackupConfigurationPtrOutput) ToBackupConfigurationPtrOutputWithContext(ctx context.Context) BackupConfigurationPtrOutput {
	return o
}

func (o BackupConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BackupConfiguration] {
	return pulumix.Output[*BackupConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o BackupConfigurationPtrOutput) Elem() BackupConfigurationOutput {
	return o.ApplyT(func(v *BackupConfiguration) BackupConfiguration {
		if v != nil {
			return *v
		}
		var ret BackupConfiguration
		return ret
	}).(BackupConfigurationOutput)
}

// Backup retention settings.
func (o BackupConfigurationPtrOutput) BackupRetentionSettings() BackupRetentionSettingsPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *BackupRetentionSettings {
		if v == nil {
			return nil
		}
		return v.BackupRetentionSettings
	}).(BackupRetentionSettingsPtrOutput)
}

// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
func (o BackupConfigurationPtrOutput) BinaryLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.BinaryLogEnabled
	}).(pulumi.BoolPtrOutput)
}

// Whether this configuration is enabled.
func (o BackupConfigurationPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// This is always `sql#backupConfiguration`.
func (o BackupConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Location of the backup
func (o BackupConfigurationPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// (Postgres only) Whether point in time recovery is enabled.
func (o BackupConfigurationPtrOutput) PointInTimeRecoveryEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.PointInTimeRecoveryEnabled
	}).(pulumi.BoolPtrOutput)
}

// Reserved for future use.
func (o BackupConfigurationPtrOutput) ReplicationLogArchivingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.ReplicationLogArchivingEnabled
	}).(pulumi.BoolPtrOutput)
}

// Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
func (o BackupConfigurationPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The number of days of transaction logs we retain for point in time restore, from 1-7.
func (o BackupConfigurationPtrOutput) TransactionLogRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.TransactionLogRetentionDays
	}).(pulumi.IntPtrOutput)
}

// Database instance backup configuration.
type BackupConfigurationResponse struct {
	// Backup retention settings.
	BackupRetentionSettings BackupRetentionSettingsResponse `pulumi:"backupRetentionSettings"`
	// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
	BinaryLogEnabled bool `pulumi:"binaryLogEnabled"`
	// Whether this configuration is enabled.
	Enabled bool `pulumi:"enabled"`
	// This is always `sql#backupConfiguration`.
	Kind string `pulumi:"kind"`
	// Location of the backup
	Location string `pulumi:"location"`
	// (Postgres only) Whether point in time recovery is enabled.
	PointInTimeRecoveryEnabled bool `pulumi:"pointInTimeRecoveryEnabled"`
	// Reserved for future use.
	ReplicationLogArchivingEnabled bool `pulumi:"replicationLogArchivingEnabled"`
	// Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
	StartTime string `pulumi:"startTime"`
	// The number of days of transaction logs we retain for point in time restore, from 1-7.
	TransactionLogRetentionDays int `pulumi:"transactionLogRetentionDays"`
}

// Database instance backup configuration.
type BackupConfigurationResponseOutput struct{ *pulumi.OutputState }

func (BackupConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupConfigurationResponse)(nil)).Elem()
}

func (o BackupConfigurationResponseOutput) ToBackupConfigurationResponseOutput() BackupConfigurationResponseOutput {
	return o
}

func (o BackupConfigurationResponseOutput) ToBackupConfigurationResponseOutputWithContext(ctx context.Context) BackupConfigurationResponseOutput {
	return o
}

func (o BackupConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BackupConfigurationResponse] {
	return pulumix.Output[BackupConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Backup retention settings.
func (o BackupConfigurationResponseOutput) BackupRetentionSettings() BackupRetentionSettingsResponseOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) BackupRetentionSettingsResponse { return v.BackupRetentionSettings }).(BackupRetentionSettingsResponseOutput)
}

// (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
func (o BackupConfigurationResponseOutput) BinaryLogEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) bool { return v.BinaryLogEnabled }).(pulumi.BoolOutput)
}

// Whether this configuration is enabled.
func (o BackupConfigurationResponseOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// This is always `sql#backupConfiguration`.
func (o BackupConfigurationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Location of the backup
func (o BackupConfigurationResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) string { return v.Location }).(pulumi.StringOutput)
}

// (Postgres only) Whether point in time recovery is enabled.
func (o BackupConfigurationResponseOutput) PointInTimeRecoveryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) bool { return v.PointInTimeRecoveryEnabled }).(pulumi.BoolOutput)
}

// Reserved for future use.
func (o BackupConfigurationResponseOutput) ReplicationLogArchivingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) bool { return v.ReplicationLogArchivingEnabled }).(pulumi.BoolOutput)
}

// Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.
func (o BackupConfigurationResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// The number of days of transaction logs we retain for point in time restore, from 1-7.
func (o BackupConfigurationResponseOutput) TransactionLogRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v BackupConfigurationResponse) int { return v.TransactionLogRetentionDays }).(pulumi.IntOutput)
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettings struct {
	// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
	RetainedBackups *int `pulumi:"retainedBackups"`
	// The unit that 'retained_backups' represents.
	RetentionUnit *BackupRetentionSettingsRetentionUnit `pulumi:"retentionUnit"`
}

// BackupRetentionSettingsInput is an input type that accepts BackupRetentionSettingsArgs and BackupRetentionSettingsOutput values.
// You can construct a concrete instance of `BackupRetentionSettingsInput` via:
//
//	BackupRetentionSettingsArgs{...}
type BackupRetentionSettingsInput interface {
	pulumi.Input

	ToBackupRetentionSettingsOutput() BackupRetentionSettingsOutput
	ToBackupRetentionSettingsOutputWithContext(context.Context) BackupRetentionSettingsOutput
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettingsArgs struct {
	// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
	RetainedBackups pulumi.IntPtrInput `pulumi:"retainedBackups"`
	// The unit that 'retained_backups' represents.
	RetentionUnit BackupRetentionSettingsRetentionUnitPtrInput `pulumi:"retentionUnit"`
}

func (BackupRetentionSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupRetentionSettings)(nil)).Elem()
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsOutput() BackupRetentionSettingsOutput {
	return i.ToBackupRetentionSettingsOutputWithContext(context.Background())
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsOutputWithContext(ctx context.Context) BackupRetentionSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupRetentionSettingsOutput)
}

func (i BackupRetentionSettingsArgs) ToOutput(ctx context.Context) pulumix.Output[BackupRetentionSettings] {
	return pulumix.Output[BackupRetentionSettings]{
		OutputState: i.ToBackupRetentionSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return i.ToBackupRetentionSettingsPtrOutputWithContext(context.Background())
}

func (i BackupRetentionSettingsArgs) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupRetentionSettingsOutput).ToBackupRetentionSettingsPtrOutputWithContext(ctx)
}

// BackupRetentionSettingsPtrInput is an input type that accepts BackupRetentionSettingsArgs, BackupRetentionSettingsPtr and BackupRetentionSettingsPtrOutput values.
// You can construct a concrete instance of `BackupRetentionSettingsPtrInput` via:
//
//	        BackupRetentionSettingsArgs{...}
//
//	or:
//
//	        nil
type BackupRetentionSettingsPtrInput interface {
	pulumi.Input

	ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput
	ToBackupRetentionSettingsPtrOutputWithContext(context.Context) BackupRetentionSettingsPtrOutput
}

type backupRetentionSettingsPtrType BackupRetentionSettingsArgs

func BackupRetentionSettingsPtr(v *BackupRetentionSettingsArgs) BackupRetentionSettingsPtrInput {
	return (*backupRetentionSettingsPtrType)(v)
}

func (*backupRetentionSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupRetentionSettings)(nil)).Elem()
}

func (i *backupRetentionSettingsPtrType) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return i.ToBackupRetentionSettingsPtrOutputWithContext(context.Background())
}

func (i *backupRetentionSettingsPtrType) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupRetentionSettingsPtrOutput)
}

func (i *backupRetentionSettingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*BackupRetentionSettings] {
	return pulumix.Output[*BackupRetentionSettings]{
		OutputState: i.ToBackupRetentionSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettingsOutput struct{ *pulumi.OutputState }

func (BackupRetentionSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupRetentionSettings)(nil)).Elem()
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsOutput() BackupRetentionSettingsOutput {
	return o
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsOutputWithContext(ctx context.Context) BackupRetentionSettingsOutput {
	return o
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return o.ToBackupRetentionSettingsPtrOutputWithContext(context.Background())
}

func (o BackupRetentionSettingsOutput) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackupRetentionSettings) *BackupRetentionSettings {
		return &v
	}).(BackupRetentionSettingsPtrOutput)
}

func (o BackupRetentionSettingsOutput) ToOutput(ctx context.Context) pulumix.Output[BackupRetentionSettings] {
	return pulumix.Output[BackupRetentionSettings]{
		OutputState: o.OutputState,
	}
}

// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
func (o BackupRetentionSettingsOutput) RetainedBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupRetentionSettings) *int { return v.RetainedBackups }).(pulumi.IntPtrOutput)
}

// The unit that 'retained_backups' represents.
func (o BackupRetentionSettingsOutput) RetentionUnit() BackupRetentionSettingsRetentionUnitPtrOutput {
	return o.ApplyT(func(v BackupRetentionSettings) *BackupRetentionSettingsRetentionUnit { return v.RetentionUnit }).(BackupRetentionSettingsRetentionUnitPtrOutput)
}

type BackupRetentionSettingsPtrOutput struct{ *pulumi.OutputState }

func (BackupRetentionSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupRetentionSettings)(nil)).Elem()
}

func (o BackupRetentionSettingsPtrOutput) ToBackupRetentionSettingsPtrOutput() BackupRetentionSettingsPtrOutput {
	return o
}

func (o BackupRetentionSettingsPtrOutput) ToBackupRetentionSettingsPtrOutputWithContext(ctx context.Context) BackupRetentionSettingsPtrOutput {
	return o
}

func (o BackupRetentionSettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*BackupRetentionSettings] {
	return pulumix.Output[*BackupRetentionSettings]{
		OutputState: o.OutputState,
	}
}

func (o BackupRetentionSettingsPtrOutput) Elem() BackupRetentionSettingsOutput {
	return o.ApplyT(func(v *BackupRetentionSettings) BackupRetentionSettings {
		if v != nil {
			return *v
		}
		var ret BackupRetentionSettings
		return ret
	}).(BackupRetentionSettingsOutput)
}

// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
func (o BackupRetentionSettingsPtrOutput) RetainedBackups() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BackupRetentionSettings) *int {
		if v == nil {
			return nil
		}
		return v.RetainedBackups
	}).(pulumi.IntPtrOutput)
}

// The unit that 'retained_backups' represents.
func (o BackupRetentionSettingsPtrOutput) RetentionUnit() BackupRetentionSettingsRetentionUnitPtrOutput {
	return o.ApplyT(func(v *BackupRetentionSettings) *BackupRetentionSettingsRetentionUnit {
		if v == nil {
			return nil
		}
		return v.RetentionUnit
	}).(BackupRetentionSettingsRetentionUnitPtrOutput)
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettingsResponse struct {
	// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
	RetainedBackups int `pulumi:"retainedBackups"`
	// The unit that 'retained_backups' represents.
	RetentionUnit string `pulumi:"retentionUnit"`
}

// We currently only support backup retention by specifying the number of backups we will retain.
type BackupRetentionSettingsResponseOutput struct{ *pulumi.OutputState }

func (BackupRetentionSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupRetentionSettingsResponse)(nil)).Elem()
}

func (o BackupRetentionSettingsResponseOutput) ToBackupRetentionSettingsResponseOutput() BackupRetentionSettingsResponseOutput {
	return o
}

func (o BackupRetentionSettingsResponseOutput) ToBackupRetentionSettingsResponseOutputWithContext(ctx context.Context) BackupRetentionSettingsResponseOutput {
	return o
}

func (o BackupRetentionSettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[BackupRetentionSettingsResponse] {
	return pulumix.Output[BackupRetentionSettingsResponse]{
		OutputState: o.OutputState,
	}
}

// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.
func (o BackupRetentionSettingsResponseOutput) RetainedBackups() pulumi.IntOutput {
	return o.ApplyT(func(v BackupRetentionSettingsResponse) int { return v.RetainedBackups }).(pulumi.IntOutput)
}

// The unit that 'retained_backups' represents.
func (o BackupRetentionSettingsResponseOutput) RetentionUnit() pulumi.StringOutput {
	return o.ApplyT(func(v BackupRetentionSettingsResponse) string { return v.RetentionUnit }).(pulumi.StringOutput)
}

// Database flags for Cloud SQL instances.
type DatabaseFlags struct {
	// The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.
	Name *string `pulumi:"name"`
	// The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.
	Value *string `pulumi:"value"`
}

// DatabaseFlagsInput is an input type that accepts DatabaseFlagsArgs and DatabaseFlagsOutput values.
// You can construct a concrete instance of `DatabaseFlagsInput` via:
//
//	DatabaseFlagsArgs{...}
type DatabaseFlagsInput interface {
	pulumi.Input

	ToDatabaseFlagsOutput() DatabaseFlagsOutput
	ToDatabaseFlagsOutputWithContext(context.Context) DatabaseFlagsOutput
}

// Database flags for Cloud SQL instances.
type DatabaseFlagsArgs struct {
	// The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (DatabaseFlagsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFlags)(nil)).Elem()
}

func (i DatabaseFlagsArgs) ToDatabaseFlagsOutput() DatabaseFlagsOutput {
	return i.ToDatabaseFlagsOutputWithContext(context.Background())
}

func (i DatabaseFlagsArgs) ToDatabaseFlagsOutputWithContext(ctx context.Context) DatabaseFlagsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFlagsOutput)
}

func (i DatabaseFlagsArgs) ToOutput(ctx context.Context) pulumix.Output[DatabaseFlags] {
	return pulumix.Output[DatabaseFlags]{
		OutputState: i.ToDatabaseFlagsOutputWithContext(ctx).OutputState,
	}
}

// DatabaseFlagsArrayInput is an input type that accepts DatabaseFlagsArray and DatabaseFlagsArrayOutput values.
// You can construct a concrete instance of `DatabaseFlagsArrayInput` via:
//
//	DatabaseFlagsArray{ DatabaseFlagsArgs{...} }
type DatabaseFlagsArrayInput interface {
	pulumi.Input

	ToDatabaseFlagsArrayOutput() DatabaseFlagsArrayOutput
	ToDatabaseFlagsArrayOutputWithContext(context.Context) DatabaseFlagsArrayOutput
}

type DatabaseFlagsArray []DatabaseFlagsInput

func (DatabaseFlagsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFlags)(nil)).Elem()
}

func (i DatabaseFlagsArray) ToDatabaseFlagsArrayOutput() DatabaseFlagsArrayOutput {
	return i.ToDatabaseFlagsArrayOutputWithContext(context.Background())
}

func (i DatabaseFlagsArray) ToDatabaseFlagsArrayOutputWithContext(ctx context.Context) DatabaseFlagsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseFlagsArrayOutput)
}

func (i DatabaseFlagsArray) ToOutput(ctx context.Context) pulumix.Output[[]DatabaseFlags] {
	return pulumix.Output[[]DatabaseFlags]{
		OutputState: i.ToDatabaseFlagsArrayOutputWithContext(ctx).OutputState,
	}
}

// Database flags for Cloud SQL instances.
type DatabaseFlagsOutput struct{ *pulumi.OutputState }

func (DatabaseFlagsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFlags)(nil)).Elem()
}

func (o DatabaseFlagsOutput) ToDatabaseFlagsOutput() DatabaseFlagsOutput {
	return o
}

func (o DatabaseFlagsOutput) ToDatabaseFlagsOutputWithContext(ctx context.Context) DatabaseFlagsOutput {
	return o
}

func (o DatabaseFlagsOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseFlags] {
	return pulumix.Output[DatabaseFlags]{
		OutputState: o.OutputState,
	}
}

// The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.
func (o DatabaseFlagsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFlags) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.
func (o DatabaseFlagsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabaseFlags) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type DatabaseFlagsArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFlagsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFlags)(nil)).Elem()
}

func (o DatabaseFlagsArrayOutput) ToDatabaseFlagsArrayOutput() DatabaseFlagsArrayOutput {
	return o
}

func (o DatabaseFlagsArrayOutput) ToDatabaseFlagsArrayOutputWithContext(ctx context.Context) DatabaseFlagsArrayOutput {
	return o
}

func (o DatabaseFlagsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatabaseFlags] {
	return pulumix.Output[[]DatabaseFlags]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseFlagsArrayOutput) Index(i pulumi.IntInput) DatabaseFlagsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFlags {
		return vs[0].([]DatabaseFlags)[vs[1].(int)]
	}).(DatabaseFlagsOutput)
}

// Database flags for Cloud SQL instances.
type DatabaseFlagsResponse struct {
	// The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.
	Name string `pulumi:"name"`
	// The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.
	Value string `pulumi:"value"`
}

// Database flags for Cloud SQL instances.
type DatabaseFlagsResponseOutput struct{ *pulumi.OutputState }

func (DatabaseFlagsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseFlagsResponse)(nil)).Elem()
}

func (o DatabaseFlagsResponseOutput) ToDatabaseFlagsResponseOutput() DatabaseFlagsResponseOutput {
	return o
}

func (o DatabaseFlagsResponseOutput) ToDatabaseFlagsResponseOutputWithContext(ctx context.Context) DatabaseFlagsResponseOutput {
	return o
}

func (o DatabaseFlagsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DatabaseFlagsResponse] {
	return pulumix.Output[DatabaseFlagsResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.
func (o DatabaseFlagsResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseFlagsResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.
func (o DatabaseFlagsResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v DatabaseFlagsResponse) string { return v.Value }).(pulumi.StringOutput)
}

type DatabaseFlagsResponseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseFlagsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseFlagsResponse)(nil)).Elem()
}

func (o DatabaseFlagsResponseArrayOutput) ToDatabaseFlagsResponseArrayOutput() DatabaseFlagsResponseArrayOutput {
	return o
}

func (o DatabaseFlagsResponseArrayOutput) ToDatabaseFlagsResponseArrayOutputWithContext(ctx context.Context) DatabaseFlagsResponseArrayOutput {
	return o
}

func (o DatabaseFlagsResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DatabaseFlagsResponse] {
	return pulumix.Output[[]DatabaseFlagsResponse]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseFlagsResponseArrayOutput) Index(i pulumi.IntInput) DatabaseFlagsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseFlagsResponse {
		return vs[0].([]DatabaseFlagsResponse)[vs[1].(int)]
	}).(DatabaseFlagsResponseOutput)
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriod struct {
	// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	EndDate *string `pulumi:"endDate"`
	// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	StartDate *string `pulumi:"startDate"`
	// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
	Time *string `pulumi:"time"`
}

// DenyMaintenancePeriodInput is an input type that accepts DenyMaintenancePeriodArgs and DenyMaintenancePeriodOutput values.
// You can construct a concrete instance of `DenyMaintenancePeriodInput` via:
//
//	DenyMaintenancePeriodArgs{...}
type DenyMaintenancePeriodInput interface {
	pulumi.Input

	ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput
	ToDenyMaintenancePeriodOutputWithContext(context.Context) DenyMaintenancePeriodOutput
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriodArgs struct {
	// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	StartDate pulumi.StringPtrInput `pulumi:"startDate"`
	// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
	Time pulumi.StringPtrInput `pulumi:"time"`
}

func (DenyMaintenancePeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriod)(nil)).Elem()
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput {
	return i.ToDenyMaintenancePeriodOutputWithContext(context.Background())
}

func (i DenyMaintenancePeriodArgs) ToDenyMaintenancePeriodOutputWithContext(ctx context.Context) DenyMaintenancePeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyMaintenancePeriodOutput)
}

func (i DenyMaintenancePeriodArgs) ToOutput(ctx context.Context) pulumix.Output[DenyMaintenancePeriod] {
	return pulumix.Output[DenyMaintenancePeriod]{
		OutputState: i.ToDenyMaintenancePeriodOutputWithContext(ctx).OutputState,
	}
}

// DenyMaintenancePeriodArrayInput is an input type that accepts DenyMaintenancePeriodArray and DenyMaintenancePeriodArrayOutput values.
// You can construct a concrete instance of `DenyMaintenancePeriodArrayInput` via:
//
//	DenyMaintenancePeriodArray{ DenyMaintenancePeriodArgs{...} }
type DenyMaintenancePeriodArrayInput interface {
	pulumi.Input

	ToDenyMaintenancePeriodArrayOutput() DenyMaintenancePeriodArrayOutput
	ToDenyMaintenancePeriodArrayOutputWithContext(context.Context) DenyMaintenancePeriodArrayOutput
}

type DenyMaintenancePeriodArray []DenyMaintenancePeriodInput

func (DenyMaintenancePeriodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DenyMaintenancePeriod)(nil)).Elem()
}

func (i DenyMaintenancePeriodArray) ToDenyMaintenancePeriodArrayOutput() DenyMaintenancePeriodArrayOutput {
	return i.ToDenyMaintenancePeriodArrayOutputWithContext(context.Background())
}

func (i DenyMaintenancePeriodArray) ToDenyMaintenancePeriodArrayOutputWithContext(ctx context.Context) DenyMaintenancePeriodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DenyMaintenancePeriodArrayOutput)
}

func (i DenyMaintenancePeriodArray) ToOutput(ctx context.Context) pulumix.Output[[]DenyMaintenancePeriod] {
	return pulumix.Output[[]DenyMaintenancePeriod]{
		OutputState: i.ToDenyMaintenancePeriodArrayOutputWithContext(ctx).OutputState,
	}
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriodOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriod)(nil)).Elem()
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodOutput() DenyMaintenancePeriodOutput {
	return o
}

func (o DenyMaintenancePeriodOutput) ToDenyMaintenancePeriodOutputWithContext(ctx context.Context) DenyMaintenancePeriodOutput {
	return o
}

func (o DenyMaintenancePeriodOutput) ToOutput(ctx context.Context) pulumix.Output[DenyMaintenancePeriod] {
	return pulumix.Output[DenyMaintenancePeriod]{
		OutputState: o.OutputState,
	}
}

// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
func (o DenyMaintenancePeriodOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
func (o DenyMaintenancePeriodOutput) StartDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) *string { return v.StartDate }).(pulumi.StringPtrOutput)
}

// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
func (o DenyMaintenancePeriodOutput) Time() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DenyMaintenancePeriod) *string { return v.Time }).(pulumi.StringPtrOutput)
}

type DenyMaintenancePeriodArrayOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DenyMaintenancePeriod)(nil)).Elem()
}

func (o DenyMaintenancePeriodArrayOutput) ToDenyMaintenancePeriodArrayOutput() DenyMaintenancePeriodArrayOutput {
	return o
}

func (o DenyMaintenancePeriodArrayOutput) ToDenyMaintenancePeriodArrayOutputWithContext(ctx context.Context) DenyMaintenancePeriodArrayOutput {
	return o
}

func (o DenyMaintenancePeriodArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DenyMaintenancePeriod] {
	return pulumix.Output[[]DenyMaintenancePeriod]{
		OutputState: o.OutputState,
	}
}

func (o DenyMaintenancePeriodArrayOutput) Index(i pulumi.IntInput) DenyMaintenancePeriodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DenyMaintenancePeriod {
		return vs[0].([]DenyMaintenancePeriod)[vs[1].(int)]
	}).(DenyMaintenancePeriodOutput)
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriodResponse struct {
	// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	EndDate string `pulumi:"endDate"`
	// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
	StartDate string `pulumi:"startDate"`
	// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
	Time string `pulumi:"time"`
}

// Deny Maintenance Periods. This specifies a date range during when all CSA rollout will be denied.
type DenyMaintenancePeriodResponseOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DenyMaintenancePeriodResponse)(nil)).Elem()
}

func (o DenyMaintenancePeriodResponseOutput) ToDenyMaintenancePeriodResponseOutput() DenyMaintenancePeriodResponseOutput {
	return o
}

func (o DenyMaintenancePeriodResponseOutput) ToDenyMaintenancePeriodResponseOutputWithContext(ctx context.Context) DenyMaintenancePeriodResponseOutput {
	return o
}

func (o DenyMaintenancePeriodResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DenyMaintenancePeriodResponse] {
	return pulumix.Output[DenyMaintenancePeriodResponse]{
		OutputState: o.OutputState,
	}
}

// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
func (o DenyMaintenancePeriodResponseOutput) EndDate() pulumi.StringOutput {
	return o.ApplyT(func(v DenyMaintenancePeriodResponse) string { return v.EndDate }).(pulumi.StringOutput)
}

// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
func (o DenyMaintenancePeriodResponseOutput) StartDate() pulumi.StringOutput {
	return o.ApplyT(func(v DenyMaintenancePeriodResponse) string { return v.StartDate }).(pulumi.StringOutput)
}

// Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
func (o DenyMaintenancePeriodResponseOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v DenyMaintenancePeriodResponse) string { return v.Time }).(pulumi.StringOutput)
}

type DenyMaintenancePeriodResponseArrayOutput struct{ *pulumi.OutputState }

func (DenyMaintenancePeriodResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DenyMaintenancePeriodResponse)(nil)).Elem()
}

func (o DenyMaintenancePeriodResponseArrayOutput) ToDenyMaintenancePeriodResponseArrayOutput() DenyMaintenancePeriodResponseArrayOutput {
	return o
}

func (o DenyMaintenancePeriodResponseArrayOutput) ToDenyMaintenancePeriodResponseArrayOutputWithContext(ctx context.Context) DenyMaintenancePeriodResponseArrayOutput {
	return o
}

func (o DenyMaintenancePeriodResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DenyMaintenancePeriodResponse] {
	return pulumix.Output[[]DenyMaintenancePeriodResponse]{
		OutputState: o.OutputState,
	}
}

func (o DenyMaintenancePeriodResponseArrayOutput) Index(i pulumi.IntInput) DenyMaintenancePeriodResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DenyMaintenancePeriodResponse {
		return vs[0].([]DenyMaintenancePeriodResponse)[vs[1].(int)]
	}).(DenyMaintenancePeriodResponseOutput)
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfiguration struct {
	// This is always `sql#diskEncryptionConfiguration`.
	Kind *string `pulumi:"kind"`
	// Resource name of KMS key for disk encryption
	KmsKeyName *string `pulumi:"kmsKeyName"`
}

// DiskEncryptionConfigurationInput is an input type that accepts DiskEncryptionConfigurationArgs and DiskEncryptionConfigurationOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationInput` via:
//
//	DiskEncryptionConfigurationArgs{...}
type DiskEncryptionConfigurationInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput
	ToDiskEncryptionConfigurationOutputWithContext(context.Context) DiskEncryptionConfigurationOutput
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfigurationArgs struct {
	// This is always `sql#diskEncryptionConfiguration`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Resource name of KMS key for disk encryption
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
}

func (DiskEncryptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfiguration)(nil)).Elem()
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput {
	return i.ToDiskEncryptionConfigurationOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationOutputWithContext(ctx context.Context) DiskEncryptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationOutput)
}

func (i DiskEncryptionConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[DiskEncryptionConfiguration] {
	return pulumix.Output[DiskEncryptionConfiguration]{
		OutputState: i.ToDiskEncryptionConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return i.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionConfigurationArgs) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationOutput).ToDiskEncryptionConfigurationPtrOutputWithContext(ctx)
}

// DiskEncryptionConfigurationPtrInput is an input type that accepts DiskEncryptionConfigurationArgs, DiskEncryptionConfigurationPtr and DiskEncryptionConfigurationPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionConfigurationPtrInput` via:
//
//	        DiskEncryptionConfigurationArgs{...}
//
//	or:
//
//	        nil
type DiskEncryptionConfigurationPtrInput interface {
	pulumi.Input

	ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput
	ToDiskEncryptionConfigurationPtrOutputWithContext(context.Context) DiskEncryptionConfigurationPtrOutput
}

type diskEncryptionConfigurationPtrType DiskEncryptionConfigurationArgs

func DiskEncryptionConfigurationPtr(v *DiskEncryptionConfigurationArgs) DiskEncryptionConfigurationPtrInput {
	return (*diskEncryptionConfigurationPtrType)(v)
}

func (*diskEncryptionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfiguration)(nil)).Elem()
}

func (i *diskEncryptionConfigurationPtrType) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return i.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionConfigurationPtrType) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionConfigurationPtrOutput)
}

func (i *diskEncryptionConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*DiskEncryptionConfiguration] {
	return pulumix.Output[*DiskEncryptionConfiguration]{
		OutputState: i.ToDiskEncryptionConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfigurationOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfiguration)(nil)).Elem()
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationOutput() DiskEncryptionConfigurationOutput {
	return o
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationOutputWithContext(ctx context.Context) DiskEncryptionConfigurationOutput {
	return o
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return o.ToDiskEncryptionConfigurationPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionConfigurationOutput) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskEncryptionConfiguration) *DiskEncryptionConfiguration {
		return &v
	}).(DiskEncryptionConfigurationPtrOutput)
}

func (o DiskEncryptionConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[DiskEncryptionConfiguration] {
	return pulumix.Output[DiskEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

// This is always `sql#diskEncryptionConfiguration`.
func (o DiskEncryptionConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Resource name of KMS key for disk encryption
func (o DiskEncryptionConfigurationOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionConfiguration) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

type DiskEncryptionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionConfiguration)(nil)).Elem()
}

func (o DiskEncryptionConfigurationPtrOutput) ToDiskEncryptionConfigurationPtrOutput() DiskEncryptionConfigurationPtrOutput {
	return o
}

func (o DiskEncryptionConfigurationPtrOutput) ToDiskEncryptionConfigurationPtrOutputWithContext(ctx context.Context) DiskEncryptionConfigurationPtrOutput {
	return o
}

func (o DiskEncryptionConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiskEncryptionConfiguration] {
	return pulumix.Output[*DiskEncryptionConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o DiskEncryptionConfigurationPtrOutput) Elem() DiskEncryptionConfigurationOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) DiskEncryptionConfiguration {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionConfiguration
		return ret
	}).(DiskEncryptionConfigurationOutput)
}

// This is always `sql#diskEncryptionConfiguration`.
func (o DiskEncryptionConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Resource name of KMS key for disk encryption
func (o DiskEncryptionConfigurationPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfigurationResponse struct {
	// This is always `sql#diskEncryptionConfiguration`.
	Kind string `pulumi:"kind"`
	// Resource name of KMS key for disk encryption
	KmsKeyName string `pulumi:"kmsKeyName"`
}

// Disk encryption configuration for an instance.
type DiskEncryptionConfigurationResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionConfigurationResponse)(nil)).Elem()
}

func (o DiskEncryptionConfigurationResponseOutput) ToDiskEncryptionConfigurationResponseOutput() DiskEncryptionConfigurationResponseOutput {
	return o
}

func (o DiskEncryptionConfigurationResponseOutput) ToDiskEncryptionConfigurationResponseOutputWithContext(ctx context.Context) DiskEncryptionConfigurationResponseOutput {
	return o
}

func (o DiskEncryptionConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DiskEncryptionConfigurationResponse] {
	return pulumix.Output[DiskEncryptionConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// This is always `sql#diskEncryptionConfiguration`.
func (o DiskEncryptionConfigurationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DiskEncryptionConfigurationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Resource name of KMS key for disk encryption
func (o DiskEncryptionConfigurationResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DiskEncryptionConfigurationResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// Disk encryption status for an instance.
type DiskEncryptionStatus struct {
	// This is always `sql#diskEncryptionStatus`.
	Kind *string `pulumi:"kind"`
	// KMS key version used to encrypt the Cloud SQL instance resource
	KmsKeyVersionName *string `pulumi:"kmsKeyVersionName"`
}

// DiskEncryptionStatusInput is an input type that accepts DiskEncryptionStatusArgs and DiskEncryptionStatusOutput values.
// You can construct a concrete instance of `DiskEncryptionStatusInput` via:
//
//	DiskEncryptionStatusArgs{...}
type DiskEncryptionStatusInput interface {
	pulumi.Input

	ToDiskEncryptionStatusOutput() DiskEncryptionStatusOutput
	ToDiskEncryptionStatusOutputWithContext(context.Context) DiskEncryptionStatusOutput
}

// Disk encryption status for an instance.
type DiskEncryptionStatusArgs struct {
	// This is always `sql#diskEncryptionStatus`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// KMS key version used to encrypt the Cloud SQL instance resource
	KmsKeyVersionName pulumi.StringPtrInput `pulumi:"kmsKeyVersionName"`
}

func (DiskEncryptionStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionStatus)(nil)).Elem()
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusOutput() DiskEncryptionStatusOutput {
	return i.ToDiskEncryptionStatusOutputWithContext(context.Background())
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusOutputWithContext(ctx context.Context) DiskEncryptionStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionStatusOutput)
}

func (i DiskEncryptionStatusArgs) ToOutput(ctx context.Context) pulumix.Output[DiskEncryptionStatus] {
	return pulumix.Output[DiskEncryptionStatus]{
		OutputState: i.ToDiskEncryptionStatusOutputWithContext(ctx).OutputState,
	}
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return i.ToDiskEncryptionStatusPtrOutputWithContext(context.Background())
}

func (i DiskEncryptionStatusArgs) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionStatusOutput).ToDiskEncryptionStatusPtrOutputWithContext(ctx)
}

// DiskEncryptionStatusPtrInput is an input type that accepts DiskEncryptionStatusArgs, DiskEncryptionStatusPtr and DiskEncryptionStatusPtrOutput values.
// You can construct a concrete instance of `DiskEncryptionStatusPtrInput` via:
//
//	        DiskEncryptionStatusArgs{...}
//
//	or:
//
//	        nil
type DiskEncryptionStatusPtrInput interface {
	pulumi.Input

	ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput
	ToDiskEncryptionStatusPtrOutputWithContext(context.Context) DiskEncryptionStatusPtrOutput
}

type diskEncryptionStatusPtrType DiskEncryptionStatusArgs

func DiskEncryptionStatusPtr(v *DiskEncryptionStatusArgs) DiskEncryptionStatusPtrInput {
	return (*diskEncryptionStatusPtrType)(v)
}

func (*diskEncryptionStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionStatus)(nil)).Elem()
}

func (i *diskEncryptionStatusPtrType) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return i.ToDiskEncryptionStatusPtrOutputWithContext(context.Background())
}

func (i *diskEncryptionStatusPtrType) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskEncryptionStatusPtrOutput)
}

func (i *diskEncryptionStatusPtrType) ToOutput(ctx context.Context) pulumix.Output[*DiskEncryptionStatus] {
	return pulumix.Output[*DiskEncryptionStatus]{
		OutputState: i.ToDiskEncryptionStatusPtrOutputWithContext(ctx).OutputState,
	}
}

// Disk encryption status for an instance.
type DiskEncryptionStatusOutput struct{ *pulumi.OutputState }

func (DiskEncryptionStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionStatus)(nil)).Elem()
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusOutput() DiskEncryptionStatusOutput {
	return o
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusOutputWithContext(ctx context.Context) DiskEncryptionStatusOutput {
	return o
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return o.ToDiskEncryptionStatusPtrOutputWithContext(context.Background())
}

func (o DiskEncryptionStatusOutput) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskEncryptionStatus) *DiskEncryptionStatus {
		return &v
	}).(DiskEncryptionStatusPtrOutput)
}

func (o DiskEncryptionStatusOutput) ToOutput(ctx context.Context) pulumix.Output[DiskEncryptionStatus] {
	return pulumix.Output[DiskEncryptionStatus]{
		OutputState: o.OutputState,
	}
}

// This is always `sql#diskEncryptionStatus`.
func (o DiskEncryptionStatusOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionStatus) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// KMS key version used to encrypt the Cloud SQL instance resource
func (o DiskEncryptionStatusOutput) KmsKeyVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DiskEncryptionStatus) *string { return v.KmsKeyVersionName }).(pulumi.StringPtrOutput)
}

type DiskEncryptionStatusPtrOutput struct{ *pulumi.OutputState }

func (DiskEncryptionStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskEncryptionStatus)(nil)).Elem()
}

func (o DiskEncryptionStatusPtrOutput) ToDiskEncryptionStatusPtrOutput() DiskEncryptionStatusPtrOutput {
	return o
}

func (o DiskEncryptionStatusPtrOutput) ToDiskEncryptionStatusPtrOutputWithContext(ctx context.Context) DiskEncryptionStatusPtrOutput {
	return o
}

func (o DiskEncryptionStatusPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*DiskEncryptionStatus] {
	return pulumix.Output[*DiskEncryptionStatus]{
		OutputState: o.OutputState,
	}
}

func (o DiskEncryptionStatusPtrOutput) Elem() DiskEncryptionStatusOutput {
	return o.ApplyT(func(v *DiskEncryptionStatus) DiskEncryptionStatus {
		if v != nil {
			return *v
		}
		var ret DiskEncryptionStatus
		return ret
	}).(DiskEncryptionStatusOutput)
}

// This is always `sql#diskEncryptionStatus`.
func (o DiskEncryptionStatusPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionStatus) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// KMS key version used to encrypt the Cloud SQL instance resource
func (o DiskEncryptionStatusPtrOutput) KmsKeyVersionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DiskEncryptionStatus) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyVersionName
	}).(pulumi.StringPtrOutput)
}

// Disk encryption status for an instance.
type DiskEncryptionStatusResponse struct {
	// This is always `sql#diskEncryptionStatus`.
	Kind string `pulumi:"kind"`
	// KMS key version used to encrypt the Cloud SQL instance resource
	KmsKeyVersionName string `pulumi:"kmsKeyVersionName"`
}

// Disk encryption status for an instance.
type DiskEncryptionStatusResponseOutput struct{ *pulumi.OutputState }

func (DiskEncryptionStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskEncryptionStatusResponse)(nil)).Elem()
}

func (o DiskEncryptionStatusResponseOutput) ToDiskEncryptionStatusResponseOutput() DiskEncryptionStatusResponseOutput {
	return o
}

func (o DiskEncryptionStatusResponseOutput) ToDiskEncryptionStatusResponseOutputWithContext(ctx context.Context) DiskEncryptionStatusResponseOutput {
	return o
}

func (o DiskEncryptionStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[DiskEncryptionStatusResponse] {
	return pulumix.Output[DiskEncryptionStatusResponse]{
		OutputState: o.OutputState,
	}
}

// This is always `sql#diskEncryptionStatus`.
func (o DiskEncryptionStatusResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v DiskEncryptionStatusResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// KMS key version used to encrypt the Cloud SQL instance resource
func (o DiskEncryptionStatusResponseOutput) KmsKeyVersionName() pulumi.StringOutput {
	return o.ApplyT(func(v DiskEncryptionStatusResponse) string { return v.KmsKeyVersionName }).(pulumi.StringOutput)
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfig struct {
	// Whether Query Insights feature is enabled.
	QueryInsightsEnabled *bool `pulumi:"queryInsightsEnabled"`
	// Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
	QueryPlansPerMinute *int `pulumi:"queryPlansPerMinute"`
	// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
	QueryStringLength *int `pulumi:"queryStringLength"`
	// Whether Query Insights will record application tags from query when enabled.
	RecordApplicationTags *bool `pulumi:"recordApplicationTags"`
	// Whether Query Insights will record client address when enabled.
	RecordClientAddress *bool `pulumi:"recordClientAddress"`
}

// InsightsConfigInput is an input type that accepts InsightsConfigArgs and InsightsConfigOutput values.
// You can construct a concrete instance of `InsightsConfigInput` via:
//
//	InsightsConfigArgs{...}
type InsightsConfigInput interface {
	pulumi.Input

	ToInsightsConfigOutput() InsightsConfigOutput
	ToInsightsConfigOutputWithContext(context.Context) InsightsConfigOutput
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfigArgs struct {
	// Whether Query Insights feature is enabled.
	QueryInsightsEnabled pulumi.BoolPtrInput `pulumi:"queryInsightsEnabled"`
	// Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
	QueryPlansPerMinute pulumi.IntPtrInput `pulumi:"queryPlansPerMinute"`
	// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
	QueryStringLength pulumi.IntPtrInput `pulumi:"queryStringLength"`
	// Whether Query Insights will record application tags from query when enabled.
	RecordApplicationTags pulumi.BoolPtrInput `pulumi:"recordApplicationTags"`
	// Whether Query Insights will record client address when enabled.
	RecordClientAddress pulumi.BoolPtrInput `pulumi:"recordClientAddress"`
}

func (InsightsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsConfig)(nil)).Elem()
}

func (i InsightsConfigArgs) ToInsightsConfigOutput() InsightsConfigOutput {
	return i.ToInsightsConfigOutputWithContext(context.Background())
}

func (i InsightsConfigArgs) ToInsightsConfigOutputWithContext(ctx context.Context) InsightsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigOutput)
}

func (i InsightsConfigArgs) ToOutput(ctx context.Context) pulumix.Output[InsightsConfig] {
	return pulumix.Output[InsightsConfig]{
		OutputState: i.ToInsightsConfigOutputWithContext(ctx).OutputState,
	}
}

func (i InsightsConfigArgs) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return i.ToInsightsConfigPtrOutputWithContext(context.Background())
}

func (i InsightsConfigArgs) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigOutput).ToInsightsConfigPtrOutputWithContext(ctx)
}

// InsightsConfigPtrInput is an input type that accepts InsightsConfigArgs, InsightsConfigPtr and InsightsConfigPtrOutput values.
// You can construct a concrete instance of `InsightsConfigPtrInput` via:
//
//	        InsightsConfigArgs{...}
//
//	or:
//
//	        nil
type InsightsConfigPtrInput interface {
	pulumi.Input

	ToInsightsConfigPtrOutput() InsightsConfigPtrOutput
	ToInsightsConfigPtrOutputWithContext(context.Context) InsightsConfigPtrOutput
}

type insightsConfigPtrType InsightsConfigArgs

func InsightsConfigPtr(v *InsightsConfigArgs) InsightsConfigPtrInput {
	return (*insightsConfigPtrType)(v)
}

func (*insightsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsConfig)(nil)).Elem()
}

func (i *insightsConfigPtrType) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return i.ToInsightsConfigPtrOutputWithContext(context.Background())
}

func (i *insightsConfigPtrType) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InsightsConfigPtrOutput)
}

func (i *insightsConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*InsightsConfig] {
	return pulumix.Output[*InsightsConfig]{
		OutputState: i.ToInsightsConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfigOutput struct{ *pulumi.OutputState }

func (InsightsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsConfig)(nil)).Elem()
}

func (o InsightsConfigOutput) ToInsightsConfigOutput() InsightsConfigOutput {
	return o
}

func (o InsightsConfigOutput) ToInsightsConfigOutputWithContext(ctx context.Context) InsightsConfigOutput {
	return o
}

func (o InsightsConfigOutput) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return o.ToInsightsConfigPtrOutputWithContext(context.Background())
}

func (o InsightsConfigOutput) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InsightsConfig) *InsightsConfig {
		return &v
	}).(InsightsConfigPtrOutput)
}

func (o InsightsConfigOutput) ToOutput(ctx context.Context) pulumix.Output[InsightsConfig] {
	return pulumix.Output[InsightsConfig]{
		OutputState: o.OutputState,
	}
}

// Whether Query Insights feature is enabled.
func (o InsightsConfigOutput) QueryInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *bool { return v.QueryInsightsEnabled }).(pulumi.BoolPtrOutput)
}

// Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
func (o InsightsConfigOutput) QueryPlansPerMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *int { return v.QueryPlansPerMinute }).(pulumi.IntPtrOutput)
}

// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
func (o InsightsConfigOutput) QueryStringLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *int { return v.QueryStringLength }).(pulumi.IntPtrOutput)
}

// Whether Query Insights will record application tags from query when enabled.
func (o InsightsConfigOutput) RecordApplicationTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *bool { return v.RecordApplicationTags }).(pulumi.BoolPtrOutput)
}

// Whether Query Insights will record client address when enabled.
func (o InsightsConfigOutput) RecordClientAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InsightsConfig) *bool { return v.RecordClientAddress }).(pulumi.BoolPtrOutput)
}

type InsightsConfigPtrOutput struct{ *pulumi.OutputState }

func (InsightsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InsightsConfig)(nil)).Elem()
}

func (o InsightsConfigPtrOutput) ToInsightsConfigPtrOutput() InsightsConfigPtrOutput {
	return o
}

func (o InsightsConfigPtrOutput) ToInsightsConfigPtrOutputWithContext(ctx context.Context) InsightsConfigPtrOutput {
	return o
}

func (o InsightsConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InsightsConfig] {
	return pulumix.Output[*InsightsConfig]{
		OutputState: o.OutputState,
	}
}

func (o InsightsConfigPtrOutput) Elem() InsightsConfigOutput {
	return o.ApplyT(func(v *InsightsConfig) InsightsConfig {
		if v != nil {
			return *v
		}
		var ret InsightsConfig
		return ret
	}).(InsightsConfigOutput)
}

// Whether Query Insights feature is enabled.
func (o InsightsConfigPtrOutput) QueryInsightsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.QueryInsightsEnabled
	}).(pulumi.BoolPtrOutput)
}

// Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
func (o InsightsConfigPtrOutput) QueryPlansPerMinute() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *int {
		if v == nil {
			return nil
		}
		return v.QueryPlansPerMinute
	}).(pulumi.IntPtrOutput)
}

// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
func (o InsightsConfigPtrOutput) QueryStringLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *int {
		if v == nil {
			return nil
		}
		return v.QueryStringLength
	}).(pulumi.IntPtrOutput)
}

// Whether Query Insights will record application tags from query when enabled.
func (o InsightsConfigPtrOutput) RecordApplicationTags() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RecordApplicationTags
	}).(pulumi.BoolPtrOutput)
}

// Whether Query Insights will record client address when enabled.
func (o InsightsConfigPtrOutput) RecordClientAddress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InsightsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.RecordClientAddress
	}).(pulumi.BoolPtrOutput)
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfigResponse struct {
	// Whether Query Insights feature is enabled.
	QueryInsightsEnabled bool `pulumi:"queryInsightsEnabled"`
	// Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
	QueryPlansPerMinute int `pulumi:"queryPlansPerMinute"`
	// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
	QueryStringLength int `pulumi:"queryStringLength"`
	// Whether Query Insights will record application tags from query when enabled.
	RecordApplicationTags bool `pulumi:"recordApplicationTags"`
	// Whether Query Insights will record client address when enabled.
	RecordClientAddress bool `pulumi:"recordClientAddress"`
}

// Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
type InsightsConfigResponseOutput struct{ *pulumi.OutputState }

func (InsightsConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InsightsConfigResponse)(nil)).Elem()
}

func (o InsightsConfigResponseOutput) ToInsightsConfigResponseOutput() InsightsConfigResponseOutput {
	return o
}

func (o InsightsConfigResponseOutput) ToInsightsConfigResponseOutputWithContext(ctx context.Context) InsightsConfigResponseOutput {
	return o
}

func (o InsightsConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InsightsConfigResponse] {
	return pulumix.Output[InsightsConfigResponse]{
		OutputState: o.OutputState,
	}
}

// Whether Query Insights feature is enabled.
func (o InsightsConfigResponseOutput) QueryInsightsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v InsightsConfigResponse) bool { return v.QueryInsightsEnabled }).(pulumi.BoolOutput)
}

// Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
func (o InsightsConfigResponseOutput) QueryPlansPerMinute() pulumi.IntOutput {
	return o.ApplyT(func(v InsightsConfigResponse) int { return v.QueryPlansPerMinute }).(pulumi.IntOutput)
}

// Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
func (o InsightsConfigResponseOutput) QueryStringLength() pulumi.IntOutput {
	return o.ApplyT(func(v InsightsConfigResponse) int { return v.QueryStringLength }).(pulumi.IntOutput)
}

// Whether Query Insights will record application tags from query when enabled.
func (o InsightsConfigResponseOutput) RecordApplicationTags() pulumi.BoolOutput {
	return o.ApplyT(func(v InsightsConfigResponse) bool { return v.RecordApplicationTags }).(pulumi.BoolOutput)
}

// Whether Query Insights will record client address when enabled.
func (o InsightsConfigResponseOutput) RecordClientAddress() pulumi.BoolOutput {
	return o.ApplyT(func(v InsightsConfigResponse) bool { return v.RecordClientAddress }).(pulumi.BoolOutput)
}

// The name and status of the failover replica.
type InstanceFailoverReplica struct {
	// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
	Available *bool `pulumi:"available"`
	// The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
	Name *string `pulumi:"name"`
}

// InstanceFailoverReplicaInput is an input type that accepts InstanceFailoverReplicaArgs and InstanceFailoverReplicaOutput values.
// You can construct a concrete instance of `InstanceFailoverReplicaInput` via:
//
//	InstanceFailoverReplicaArgs{...}
type InstanceFailoverReplicaInput interface {
	pulumi.Input

	ToInstanceFailoverReplicaOutput() InstanceFailoverReplicaOutput
	ToInstanceFailoverReplicaOutputWithContext(context.Context) InstanceFailoverReplicaOutput
}

// The name and status of the failover replica.
type InstanceFailoverReplicaArgs struct {
	// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
	Available pulumi.BoolPtrInput `pulumi:"available"`
	// The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (InstanceFailoverReplicaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFailoverReplica)(nil)).Elem()
}

func (i InstanceFailoverReplicaArgs) ToInstanceFailoverReplicaOutput() InstanceFailoverReplicaOutput {
	return i.ToInstanceFailoverReplicaOutputWithContext(context.Background())
}

func (i InstanceFailoverReplicaArgs) ToInstanceFailoverReplicaOutputWithContext(ctx context.Context) InstanceFailoverReplicaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFailoverReplicaOutput)
}

func (i InstanceFailoverReplicaArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceFailoverReplica] {
	return pulumix.Output[InstanceFailoverReplica]{
		OutputState: i.ToInstanceFailoverReplicaOutputWithContext(ctx).OutputState,
	}
}

func (i InstanceFailoverReplicaArgs) ToInstanceFailoverReplicaPtrOutput() InstanceFailoverReplicaPtrOutput {
	return i.ToInstanceFailoverReplicaPtrOutputWithContext(context.Background())
}

func (i InstanceFailoverReplicaArgs) ToInstanceFailoverReplicaPtrOutputWithContext(ctx context.Context) InstanceFailoverReplicaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFailoverReplicaOutput).ToInstanceFailoverReplicaPtrOutputWithContext(ctx)
}

// InstanceFailoverReplicaPtrInput is an input type that accepts InstanceFailoverReplicaArgs, InstanceFailoverReplicaPtr and InstanceFailoverReplicaPtrOutput values.
// You can construct a concrete instance of `InstanceFailoverReplicaPtrInput` via:
//
//	        InstanceFailoverReplicaArgs{...}
//
//	or:
//
//	        nil
type InstanceFailoverReplicaPtrInput interface {
	pulumi.Input

	ToInstanceFailoverReplicaPtrOutput() InstanceFailoverReplicaPtrOutput
	ToInstanceFailoverReplicaPtrOutputWithContext(context.Context) InstanceFailoverReplicaPtrOutput
}

type instanceFailoverReplicaPtrType InstanceFailoverReplicaArgs

func InstanceFailoverReplicaPtr(v *InstanceFailoverReplicaArgs) InstanceFailoverReplicaPtrInput {
	return (*instanceFailoverReplicaPtrType)(v)
}

func (*instanceFailoverReplicaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFailoverReplica)(nil)).Elem()
}

func (i *instanceFailoverReplicaPtrType) ToInstanceFailoverReplicaPtrOutput() InstanceFailoverReplicaPtrOutput {
	return i.ToInstanceFailoverReplicaPtrOutputWithContext(context.Background())
}

func (i *instanceFailoverReplicaPtrType) ToInstanceFailoverReplicaPtrOutputWithContext(ctx context.Context) InstanceFailoverReplicaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFailoverReplicaPtrOutput)
}

func (i *instanceFailoverReplicaPtrType) ToOutput(ctx context.Context) pulumix.Output[*InstanceFailoverReplica] {
	return pulumix.Output[*InstanceFailoverReplica]{
		OutputState: i.ToInstanceFailoverReplicaPtrOutputWithContext(ctx).OutputState,
	}
}

// The name and status of the failover replica.
type InstanceFailoverReplicaOutput struct{ *pulumi.OutputState }

func (InstanceFailoverReplicaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFailoverReplica)(nil)).Elem()
}

func (o InstanceFailoverReplicaOutput) ToInstanceFailoverReplicaOutput() InstanceFailoverReplicaOutput {
	return o
}

func (o InstanceFailoverReplicaOutput) ToInstanceFailoverReplicaOutputWithContext(ctx context.Context) InstanceFailoverReplicaOutput {
	return o
}

func (o InstanceFailoverReplicaOutput) ToInstanceFailoverReplicaPtrOutput() InstanceFailoverReplicaPtrOutput {
	return o.ToInstanceFailoverReplicaPtrOutputWithContext(context.Background())
}

func (o InstanceFailoverReplicaOutput) ToInstanceFailoverReplicaPtrOutputWithContext(ctx context.Context) InstanceFailoverReplicaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceFailoverReplica) *InstanceFailoverReplica {
		return &v
	}).(InstanceFailoverReplicaPtrOutput)
}

func (o InstanceFailoverReplicaOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFailoverReplica] {
	return pulumix.Output[InstanceFailoverReplica]{
		OutputState: o.OutputState,
	}
}

// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
func (o InstanceFailoverReplicaOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFailoverReplica) *bool { return v.Available }).(pulumi.BoolPtrOutput)
}

// The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
func (o InstanceFailoverReplicaOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFailoverReplica) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type InstanceFailoverReplicaPtrOutput struct{ *pulumi.OutputState }

func (InstanceFailoverReplicaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceFailoverReplica)(nil)).Elem()
}

func (o InstanceFailoverReplicaPtrOutput) ToInstanceFailoverReplicaPtrOutput() InstanceFailoverReplicaPtrOutput {
	return o
}

func (o InstanceFailoverReplicaPtrOutput) ToInstanceFailoverReplicaPtrOutputWithContext(ctx context.Context) InstanceFailoverReplicaPtrOutput {
	return o
}

func (o InstanceFailoverReplicaPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InstanceFailoverReplica] {
	return pulumix.Output[*InstanceFailoverReplica]{
		OutputState: o.OutputState,
	}
}

func (o InstanceFailoverReplicaPtrOutput) Elem() InstanceFailoverReplicaOutput {
	return o.ApplyT(func(v *InstanceFailoverReplica) InstanceFailoverReplica {
		if v != nil {
			return *v
		}
		var ret InstanceFailoverReplica
		return ret
	}).(InstanceFailoverReplicaOutput)
}

// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
func (o InstanceFailoverReplicaPtrOutput) Available() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceFailoverReplica) *bool {
		if v == nil {
			return nil
		}
		return v.Available
	}).(pulumi.BoolPtrOutput)
}

// The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
func (o InstanceFailoverReplicaPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceFailoverReplica) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The name and status of the failover replica.
type InstanceFailoverReplicaResponse struct {
	// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
	Available bool `pulumi:"available"`
	// The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
	Name string `pulumi:"name"`
}

// The name and status of the failover replica.
type InstanceFailoverReplicaResponseOutput struct{ *pulumi.OutputState }

func (InstanceFailoverReplicaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFailoverReplicaResponse)(nil)).Elem()
}

func (o InstanceFailoverReplicaResponseOutput) ToInstanceFailoverReplicaResponseOutput() InstanceFailoverReplicaResponseOutput {
	return o
}

func (o InstanceFailoverReplicaResponseOutput) ToInstanceFailoverReplicaResponseOutputWithContext(ctx context.Context) InstanceFailoverReplicaResponseOutput {
	return o
}

func (o InstanceFailoverReplicaResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceFailoverReplicaResponse] {
	return pulumix.Output[InstanceFailoverReplicaResponse]{
		OutputState: o.OutputState,
	}
}

// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only failover to the failover replica when the status is true.
func (o InstanceFailoverReplicaResponseOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceFailoverReplicaResponse) bool { return v.Available }).(pulumi.BoolOutput)
}

// The name of the failover replica. If specified at instance creation, a failover replica is created for the instance. The name doesn't include the project ID.
func (o InstanceFailoverReplicaResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFailoverReplicaResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Reference to another Cloud SQL instance.
type InstanceReference struct {
	// The name of the Cloud SQL instance being referenced. This does not include the project ID.
	Name *string `pulumi:"name"`
	// The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
	Project *string `pulumi:"project"`
	// The region of the Cloud SQL instance being referenced.
	Region *string `pulumi:"region"`
}

// InstanceReferenceInput is an input type that accepts InstanceReferenceArgs and InstanceReferenceOutput values.
// You can construct a concrete instance of `InstanceReferenceInput` via:
//
//	InstanceReferenceArgs{...}
type InstanceReferenceInput interface {
	pulumi.Input

	ToInstanceReferenceOutput() InstanceReferenceOutput
	ToInstanceReferenceOutputWithContext(context.Context) InstanceReferenceOutput
}

// Reference to another Cloud SQL instance.
type InstanceReferenceArgs struct {
	// The name of the Cloud SQL instance being referenced. This does not include the project ID.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The region of the Cloud SQL instance being referenced.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (InstanceReferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceReference)(nil)).Elem()
}

func (i InstanceReferenceArgs) ToInstanceReferenceOutput() InstanceReferenceOutput {
	return i.ToInstanceReferenceOutputWithContext(context.Background())
}

func (i InstanceReferenceArgs) ToInstanceReferenceOutputWithContext(ctx context.Context) InstanceReferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceReferenceOutput)
}

func (i InstanceReferenceArgs) ToOutput(ctx context.Context) pulumix.Output[InstanceReference] {
	return pulumix.Output[InstanceReference]{
		OutputState: i.ToInstanceReferenceOutputWithContext(ctx).OutputState,
	}
}

func (i InstanceReferenceArgs) ToInstanceReferencePtrOutput() InstanceReferencePtrOutput {
	return i.ToInstanceReferencePtrOutputWithContext(context.Background())
}

func (i InstanceReferenceArgs) ToInstanceReferencePtrOutputWithContext(ctx context.Context) InstanceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceReferenceOutput).ToInstanceReferencePtrOutputWithContext(ctx)
}

// InstanceReferencePtrInput is an input type that accepts InstanceReferenceArgs, InstanceReferencePtr and InstanceReferencePtrOutput values.
// You can construct a concrete instance of `InstanceReferencePtrInput` via:
//
//	        InstanceReferenceArgs{...}
//
//	or:
//
//	        nil
type InstanceReferencePtrInput interface {
	pulumi.Input

	ToInstanceReferencePtrOutput() InstanceReferencePtrOutput
	ToInstanceReferencePtrOutputWithContext(context.Context) InstanceReferencePtrOutput
}

type instanceReferencePtrType InstanceReferenceArgs

func InstanceReferencePtr(v *InstanceReferenceArgs) InstanceReferencePtrInput {
	return (*instanceReferencePtrType)(v)
}

func (*instanceReferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceReference)(nil)).Elem()
}

func (i *instanceReferencePtrType) ToInstanceReferencePtrOutput() InstanceReferencePtrOutput {
	return i.ToInstanceReferencePtrOutputWithContext(context.Background())
}

func (i *instanceReferencePtrType) ToInstanceReferencePtrOutputWithContext(ctx context.Context) InstanceReferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceReferencePtrOutput)
}

func (i *instanceReferencePtrType) ToOutput(ctx context.Context) pulumix.Output[*InstanceReference] {
	return pulumix.Output[*InstanceReference]{
		OutputState: i.ToInstanceReferencePtrOutputWithContext(ctx).OutputState,
	}
}

// Reference to another Cloud SQL instance.
type InstanceReferenceOutput struct{ *pulumi.OutputState }

func (InstanceReferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceReference)(nil)).Elem()
}

func (o InstanceReferenceOutput) ToInstanceReferenceOutput() InstanceReferenceOutput {
	return o
}

func (o InstanceReferenceOutput) ToInstanceReferenceOutputWithContext(ctx context.Context) InstanceReferenceOutput {
	return o
}

func (o InstanceReferenceOutput) ToInstanceReferencePtrOutput() InstanceReferencePtrOutput {
	return o.ToInstanceReferencePtrOutputWithContext(context.Background())
}

func (o InstanceReferenceOutput) ToInstanceReferencePtrOutputWithContext(ctx context.Context) InstanceReferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceReference) *InstanceReference {
		return &v
	}).(InstanceReferencePtrOutput)
}

func (o InstanceReferenceOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceReference] {
	return pulumix.Output[InstanceReference]{
		OutputState: o.OutputState,
	}
}

// The name of the Cloud SQL instance being referenced. This does not include the project ID.
func (o InstanceReferenceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceReference) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
func (o InstanceReferenceOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceReference) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// The region of the Cloud SQL instance being referenced.
func (o InstanceReferenceOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceReference) *string { return v.Region }).(pulumi.StringPtrOutput)
}

type InstanceReferencePtrOutput struct{ *pulumi.OutputState }

func (InstanceReferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceReference)(nil)).Elem()
}

func (o InstanceReferencePtrOutput) ToInstanceReferencePtrOutput() InstanceReferencePtrOutput {
	return o
}

func (o InstanceReferencePtrOutput) ToInstanceReferencePtrOutputWithContext(ctx context.Context) InstanceReferencePtrOutput {
	return o
}

func (o InstanceReferencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*InstanceReference] {
	return pulumix.Output[*InstanceReference]{
		OutputState: o.OutputState,
	}
}

func (o InstanceReferencePtrOutput) Elem() InstanceReferenceOutput {
	return o.ApplyT(func(v *InstanceReference) InstanceReference {
		if v != nil {
			return *v
		}
		var ret InstanceReference
		return ret
	}).(InstanceReferenceOutput)
}

// The name of the Cloud SQL instance being referenced. This does not include the project ID.
func (o InstanceReferencePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceReference) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
func (o InstanceReferencePtrOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceReference) *string {
		if v == nil {
			return nil
		}
		return v.Project
	}).(pulumi.StringPtrOutput)
}

// The region of the Cloud SQL instance being referenced.
func (o InstanceReferencePtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceReference) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// Reference to another Cloud SQL instance.
type InstanceReferenceResponse struct {
	// The name of the Cloud SQL instance being referenced. This does not include the project ID.
	Name string `pulumi:"name"`
	// The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
	Project string `pulumi:"project"`
	// The region of the Cloud SQL instance being referenced.
	Region string `pulumi:"region"`
}

// Reference to another Cloud SQL instance.
type InstanceReferenceResponseOutput struct{ *pulumi.OutputState }

func (InstanceReferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceReferenceResponse)(nil)).Elem()
}

func (o InstanceReferenceResponseOutput) ToInstanceReferenceResponseOutput() InstanceReferenceResponseOutput {
	return o
}

func (o InstanceReferenceResponseOutput) ToInstanceReferenceResponseOutputWithContext(ctx context.Context) InstanceReferenceResponseOutput {
	return o
}

func (o InstanceReferenceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[InstanceReferenceResponse] {
	return pulumix.Output[InstanceReferenceResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the Cloud SQL instance being referenced. This does not include the project ID.
func (o InstanceReferenceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceReferenceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The project ID of the Cloud SQL instance being referenced. The default is the same project ID as the instance references it.
func (o InstanceReferenceResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceReferenceResponse) string { return v.Project }).(pulumi.StringOutput)
}

// The region of the Cloud SQL instance being referenced.
func (o InstanceReferenceResponseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceReferenceResponse) string { return v.Region }).(pulumi.StringOutput)
}

// IP Management configuration.
type IpConfiguration struct {
	// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
	AllocatedIpRange *string `pulumi:"allocatedIpRange"`
	// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
	AuthorizedNetworks []AclEntry `pulumi:"authorizedNetworks"`
	// Controls connectivity to private IP instances from Google services, such as BigQuery.
	EnablePrivatePathForGoogleCloudServices *bool `pulumi:"enablePrivatePathForGoogleCloudServices"`
	// Whether the instance is assigned a public IP address or not.
	Ipv4Enabled *bool `pulumi:"ipv4Enabled"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork *string `pulumi:"privateNetwork"`
	// Whether SSL connections over IP are enforced or not.
	RequireSsl *bool `pulumi:"requireSsl"`
}

// IpConfigurationInput is an input type that accepts IpConfigurationArgs and IpConfigurationOutput values.
// You can construct a concrete instance of `IpConfigurationInput` via:
//
//	IpConfigurationArgs{...}
type IpConfigurationInput interface {
	pulumi.Input

	ToIpConfigurationOutput() IpConfigurationOutput
	ToIpConfigurationOutputWithContext(context.Context) IpConfigurationOutput
}

// IP Management configuration.
type IpConfigurationArgs struct {
	// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
	AllocatedIpRange pulumi.StringPtrInput `pulumi:"allocatedIpRange"`
	// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
	AuthorizedNetworks AclEntryArrayInput `pulumi:"authorizedNetworks"`
	// Controls connectivity to private IP instances from Google services, such as BigQuery.
	EnablePrivatePathForGoogleCloudServices pulumi.BoolPtrInput `pulumi:"enablePrivatePathForGoogleCloudServices"`
	// Whether the instance is assigned a public IP address or not.
	Ipv4Enabled pulumi.BoolPtrInput `pulumi:"ipv4Enabled"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork pulumi.StringPtrInput `pulumi:"privateNetwork"`
	// Whether SSL connections over IP are enforced or not.
	RequireSsl pulumi.BoolPtrInput `pulumi:"requireSsl"`
}

func (IpConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpConfiguration)(nil)).Elem()
}

func (i IpConfigurationArgs) ToIpConfigurationOutput() IpConfigurationOutput {
	return i.ToIpConfigurationOutputWithContext(context.Background())
}

func (i IpConfigurationArgs) ToIpConfigurationOutputWithContext(ctx context.Context) IpConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpConfigurationOutput)
}

func (i IpConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[IpConfiguration] {
	return pulumix.Output[IpConfiguration]{
		OutputState: i.ToIpConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i IpConfigurationArgs) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return i.ToIpConfigurationPtrOutputWithContext(context.Background())
}

func (i IpConfigurationArgs) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpConfigurationOutput).ToIpConfigurationPtrOutputWithContext(ctx)
}

// IpConfigurationPtrInput is an input type that accepts IpConfigurationArgs, IpConfigurationPtr and IpConfigurationPtrOutput values.
// You can construct a concrete instance of `IpConfigurationPtrInput` via:
//
//	        IpConfigurationArgs{...}
//
//	or:
//
//	        nil
type IpConfigurationPtrInput interface {
	pulumi.Input

	ToIpConfigurationPtrOutput() IpConfigurationPtrOutput
	ToIpConfigurationPtrOutputWithContext(context.Context) IpConfigurationPtrOutput
}

type ipConfigurationPtrType IpConfigurationArgs

func IpConfigurationPtr(v *IpConfigurationArgs) IpConfigurationPtrInput {
	return (*ipConfigurationPtrType)(v)
}

func (*ipConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IpConfiguration)(nil)).Elem()
}

func (i *ipConfigurationPtrType) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return i.ToIpConfigurationPtrOutputWithContext(context.Background())
}

func (i *ipConfigurationPtrType) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpConfigurationPtrOutput)
}

func (i *ipConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*IpConfiguration] {
	return pulumix.Output[*IpConfiguration]{
		OutputState: i.ToIpConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// IP Management configuration.
type IpConfigurationOutput struct{ *pulumi.OutputState }

func (IpConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpConfiguration)(nil)).Elem()
}

func (o IpConfigurationOutput) ToIpConfigurationOutput() IpConfigurationOutput {
	return o
}

func (o IpConfigurationOutput) ToIpConfigurationOutputWithContext(ctx context.Context) IpConfigurationOutput {
	return o
}

func (o IpConfigurationOutput) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return o.ToIpConfigurationPtrOutputWithContext(context.Background())
}

func (o IpConfigurationOutput) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v IpConfiguration) *IpConfiguration {
		return &v
	}).(IpConfigurationPtrOutput)
}

func (o IpConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[IpConfiguration] {
	return pulumix.Output[IpConfiguration]{
		OutputState: o.OutputState,
	}
}

// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
func (o IpConfigurationOutput) AllocatedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *string { return v.AllocatedIpRange }).(pulumi.StringPtrOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
func (o IpConfigurationOutput) AuthorizedNetworks() AclEntryArrayOutput {
	return o.ApplyT(func(v IpConfiguration) []AclEntry { return v.AuthorizedNetworks }).(AclEntryArrayOutput)
}

// Controls connectivity to private IP instances from Google services, such as BigQuery.
func (o IpConfigurationOutput) EnablePrivatePathForGoogleCloudServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *bool { return v.EnablePrivatePathForGoogleCloudServices }).(pulumi.BoolPtrOutput)
}

// Whether the instance is assigned a public IP address or not.
func (o IpConfigurationOutput) Ipv4Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *bool { return v.Ipv4Enabled }).(pulumi.BoolPtrOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
func (o IpConfigurationOutput) PrivateNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *string { return v.PrivateNetwork }).(pulumi.StringPtrOutput)
}

// Whether SSL connections over IP are enforced or not.
func (o IpConfigurationOutput) RequireSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v IpConfiguration) *bool { return v.RequireSsl }).(pulumi.BoolPtrOutput)
}

type IpConfigurationPtrOutput struct{ *pulumi.OutputState }

func (IpConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpConfiguration)(nil)).Elem()
}

func (o IpConfigurationPtrOutput) ToIpConfigurationPtrOutput() IpConfigurationPtrOutput {
	return o
}

func (o IpConfigurationPtrOutput) ToIpConfigurationPtrOutputWithContext(ctx context.Context) IpConfigurationPtrOutput {
	return o
}

func (o IpConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*IpConfiguration] {
	return pulumix.Output[*IpConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o IpConfigurationPtrOutput) Elem() IpConfigurationOutput {
	return o.ApplyT(func(v *IpConfiguration) IpConfiguration {
		if v != nil {
			return *v
		}
		var ret IpConfiguration
		return ret
	}).(IpConfigurationOutput)
}

// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
func (o IpConfigurationPtrOutput) AllocatedIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.AllocatedIpRange
	}).(pulumi.StringPtrOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
func (o IpConfigurationPtrOutput) AuthorizedNetworks() AclEntryArrayOutput {
	return o.ApplyT(func(v *IpConfiguration) []AclEntry {
		if v == nil {
			return nil
		}
		return v.AuthorizedNetworks
	}).(AclEntryArrayOutput)
}

// Controls connectivity to private IP instances from Google services, such as BigQuery.
func (o IpConfigurationPtrOutput) EnablePrivatePathForGoogleCloudServices() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivatePathForGoogleCloudServices
	}).(pulumi.BoolPtrOutput)
}

// Whether the instance is assigned a public IP address or not.
func (o IpConfigurationPtrOutput) Ipv4Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.Ipv4Enabled
	}).(pulumi.BoolPtrOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
func (o IpConfigurationPtrOutput) PrivateNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.PrivateNetwork
	}).(pulumi.StringPtrOutput)
}

// Whether SSL connections over IP are enforced or not.
func (o IpConfigurationPtrOutput) RequireSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.RequireSsl
	}).(pulumi.BoolPtrOutput)
}

// IP Management configuration.
type IpConfigurationResponse struct {
	// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
	AllocatedIpRange string `pulumi:"allocatedIpRange"`
	// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
	AuthorizedNetworks []AclEntryResponse `pulumi:"authorizedNetworks"`
	// Controls connectivity to private IP instances from Google services, such as BigQuery.
	EnablePrivatePathForGoogleCloudServices bool `pulumi:"enablePrivatePathForGoogleCloudServices"`
	// Whether the instance is assigned a public IP address or not.
	Ipv4Enabled bool `pulumi:"ipv4Enabled"`
	// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
	PrivateNetwork string `pulumi:"privateNetwork"`
	// Whether SSL connections over IP are enforced or not.
	RequireSsl bool `pulumi:"requireSsl"`
}

// IP Management configuration.
type IpConfigurationResponseOutput struct{ *pulumi.OutputState }

func (IpConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpConfigurationResponse)(nil)).Elem()
}

func (o IpConfigurationResponseOutput) ToIpConfigurationResponseOutput() IpConfigurationResponseOutput {
	return o
}

func (o IpConfigurationResponseOutput) ToIpConfigurationResponseOutputWithContext(ctx context.Context) IpConfigurationResponseOutput {
	return o
}

func (o IpConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IpConfigurationResponse] {
	return pulumix.Output[IpConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
func (o IpConfigurationResponseOutput) AllocatedIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v IpConfigurationResponse) string { return v.AllocatedIpRange }).(pulumi.StringOutput)
}

// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
func (o IpConfigurationResponseOutput) AuthorizedNetworks() AclEntryResponseArrayOutput {
	return o.ApplyT(func(v IpConfigurationResponse) []AclEntryResponse { return v.AuthorizedNetworks }).(AclEntryResponseArrayOutput)
}

// Controls connectivity to private IP instances from Google services, such as BigQuery.
func (o IpConfigurationResponseOutput) EnablePrivatePathForGoogleCloudServices() pulumi.BoolOutput {
	return o.ApplyT(func(v IpConfigurationResponse) bool { return v.EnablePrivatePathForGoogleCloudServices }).(pulumi.BoolOutput)
}

// Whether the instance is assigned a public IP address or not.
func (o IpConfigurationResponseOutput) Ipv4Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v IpConfigurationResponse) bool { return v.Ipv4Enabled }).(pulumi.BoolOutput)
}

// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
func (o IpConfigurationResponseOutput) PrivateNetwork() pulumi.StringOutput {
	return o.ApplyT(func(v IpConfigurationResponse) string { return v.PrivateNetwork }).(pulumi.StringOutput)
}

// Whether SSL connections over IP are enforced or not.
func (o IpConfigurationResponseOutput) RequireSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v IpConfigurationResponse) bool { return v.RequireSsl }).(pulumi.BoolOutput)
}

// Database instance IP Mapping.
type IpMapping struct {
	// The IP address assigned.
	IpAddress *string `pulumi:"ipAddress"`
	// The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
	TimeToRetire *string `pulumi:"timeToRetire"`
	// The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
	Type *IpMappingType `pulumi:"type"`
}

// IpMappingInput is an input type that accepts IpMappingArgs and IpMappingOutput values.
// You can construct a concrete instance of `IpMappingInput` via:
//
//	IpMappingArgs{...}
type IpMappingInput interface {
	pulumi.Input

	ToIpMappingOutput() IpMappingOutput
	ToIpMappingOutputWithContext(context.Context) IpMappingOutput
}

// Database instance IP Mapping.
type IpMappingArgs struct {
	// The IP address assigned.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
	TimeToRetire pulumi.StringPtrInput `pulumi:"timeToRetire"`
	// The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
	Type IpMappingTypePtrInput `pulumi:"type"`
}

func (IpMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMapping)(nil)).Elem()
}

func (i IpMappingArgs) ToIpMappingOutput() IpMappingOutput {
	return i.ToIpMappingOutputWithContext(context.Background())
}

func (i IpMappingArgs) ToIpMappingOutputWithContext(ctx context.Context) IpMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMappingOutput)
}

func (i IpMappingArgs) ToOutput(ctx context.Context) pulumix.Output[IpMapping] {
	return pulumix.Output[IpMapping]{
		OutputState: i.ToIpMappingOutputWithContext(ctx).OutputState,
	}
}

// IpMappingArrayInput is an input type that accepts IpMappingArray and IpMappingArrayOutput values.
// You can construct a concrete instance of `IpMappingArrayInput` via:
//
//	IpMappingArray{ IpMappingArgs{...} }
type IpMappingArrayInput interface {
	pulumi.Input

	ToIpMappingArrayOutput() IpMappingArrayOutput
	ToIpMappingArrayOutputWithContext(context.Context) IpMappingArrayOutput
}

type IpMappingArray []IpMappingInput

func (IpMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpMapping)(nil)).Elem()
}

func (i IpMappingArray) ToIpMappingArrayOutput() IpMappingArrayOutput {
	return i.ToIpMappingArrayOutputWithContext(context.Background())
}

func (i IpMappingArray) ToIpMappingArrayOutputWithContext(ctx context.Context) IpMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpMappingArrayOutput)
}

func (i IpMappingArray) ToOutput(ctx context.Context) pulumix.Output[[]IpMapping] {
	return pulumix.Output[[]IpMapping]{
		OutputState: i.ToIpMappingArrayOutputWithContext(ctx).OutputState,
	}
}

// Database instance IP Mapping.
type IpMappingOutput struct{ *pulumi.OutputState }

func (IpMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMapping)(nil)).Elem()
}

func (o IpMappingOutput) ToIpMappingOutput() IpMappingOutput {
	return o
}

func (o IpMappingOutput) ToIpMappingOutputWithContext(ctx context.Context) IpMappingOutput {
	return o
}

func (o IpMappingOutput) ToOutput(ctx context.Context) pulumix.Output[IpMapping] {
	return pulumix.Output[IpMapping]{
		OutputState: o.OutputState,
	}
}

// The IP address assigned.
func (o IpMappingOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMapping) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
func (o IpMappingOutput) TimeToRetire() pulumi.StringPtrOutput {
	return o.ApplyT(func(v IpMapping) *string { return v.TimeToRetire }).(pulumi.StringPtrOutput)
}

// The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
func (o IpMappingOutput) Type() IpMappingTypePtrOutput {
	return o.ApplyT(func(v IpMapping) *IpMappingType { return v.Type }).(IpMappingTypePtrOutput)
}

type IpMappingArrayOutput struct{ *pulumi.OutputState }

func (IpMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpMapping)(nil)).Elem()
}

func (o IpMappingArrayOutput) ToIpMappingArrayOutput() IpMappingArrayOutput {
	return o
}

func (o IpMappingArrayOutput) ToIpMappingArrayOutputWithContext(ctx context.Context) IpMappingArrayOutput {
	return o
}

func (o IpMappingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IpMapping] {
	return pulumix.Output[[]IpMapping]{
		OutputState: o.OutputState,
	}
}

func (o IpMappingArrayOutput) Index(i pulumi.IntInput) IpMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpMapping {
		return vs[0].([]IpMapping)[vs[1].(int)]
	}).(IpMappingOutput)
}

// Database instance IP Mapping.
type IpMappingResponse struct {
	// The IP address assigned.
	IpAddress string `pulumi:"ipAddress"`
	// The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
	TimeToRetire string `pulumi:"timeToRetire"`
	// The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
	Type string `pulumi:"type"`
}

// Database instance IP Mapping.
type IpMappingResponseOutput struct{ *pulumi.OutputState }

func (IpMappingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IpMappingResponse)(nil)).Elem()
}

func (o IpMappingResponseOutput) ToIpMappingResponseOutput() IpMappingResponseOutput {
	return o
}

func (o IpMappingResponseOutput) ToIpMappingResponseOutputWithContext(ctx context.Context) IpMappingResponseOutput {
	return o
}

func (o IpMappingResponseOutput) ToOutput(ctx context.Context) pulumix.Output[IpMappingResponse] {
	return pulumix.Output[IpMappingResponse]{
		OutputState: o.OutputState,
	}
}

// The IP address assigned.
func (o IpMappingResponseOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v IpMappingResponse) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
func (o IpMappingResponseOutput) TimeToRetire() pulumi.StringOutput {
	return o.ApplyT(func(v IpMappingResponse) string { return v.TimeToRetire }).(pulumi.StringOutput)
}

// The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
func (o IpMappingResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v IpMappingResponse) string { return v.Type }).(pulumi.StringOutput)
}

type IpMappingResponseArrayOutput struct{ *pulumi.OutputState }

func (IpMappingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IpMappingResponse)(nil)).Elem()
}

func (o IpMappingResponseArrayOutput) ToIpMappingResponseArrayOutput() IpMappingResponseArrayOutput {
	return o
}

func (o IpMappingResponseArrayOutput) ToIpMappingResponseArrayOutputWithContext(ctx context.Context) IpMappingResponseArrayOutput {
	return o
}

func (o IpMappingResponseArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]IpMappingResponse] {
	return pulumix.Output[[]IpMappingResponse]{
		OutputState: o.OutputState,
	}
}

func (o IpMappingResponseArrayOutput) Index(i pulumi.IntInput) IpMappingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IpMappingResponse {
		return vs[0].([]IpMappingResponse)[vs[1].(int)]
	}).(IpMappingResponseOutput)
}

// Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreference struct {
	// The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
	FollowGaeApplication *string `pulumi:"followGaeApplication"`
	// This is always `sql#locationPreference`.
	Kind *string `pulumi:"kind"`
	// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
	SecondaryZone *string `pulumi:"secondaryZone"`
	// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
	Zone *string `pulumi:"zone"`
}

// LocationPreferenceInput is an input type that accepts LocationPreferenceArgs and LocationPreferenceOutput values.
// You can construct a concrete instance of `LocationPreferenceInput` via:
//
//	LocationPreferenceArgs{...}
type LocationPreferenceInput interface {
	pulumi.Input

	ToLocationPreferenceOutput() LocationPreferenceOutput
	ToLocationPreferenceOutputWithContext(context.Context) LocationPreferenceOutput
}

// Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreferenceArgs struct {
	// The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
	FollowGaeApplication pulumi.StringPtrInput `pulumi:"followGaeApplication"`
	// This is always `sql#locationPreference`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
	SecondaryZone pulumi.StringPtrInput `pulumi:"secondaryZone"`
	// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (LocationPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationPreference)(nil)).Elem()
}

func (i LocationPreferenceArgs) ToLocationPreferenceOutput() LocationPreferenceOutput {
	return i.ToLocationPreferenceOutputWithContext(context.Background())
}

func (i LocationPreferenceArgs) ToLocationPreferenceOutputWithContext(ctx context.Context) LocationPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationPreferenceOutput)
}

func (i LocationPreferenceArgs) ToOutput(ctx context.Context) pulumix.Output[LocationPreference] {
	return pulumix.Output[LocationPreference]{
		OutputState: i.ToLocationPreferenceOutputWithContext(ctx).OutputState,
	}
}

func (i LocationPreferenceArgs) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return i.ToLocationPreferencePtrOutputWithContext(context.Background())
}

func (i LocationPreferenceArgs) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationPreferenceOutput).ToLocationPreferencePtrOutputWithContext(ctx)
}

// LocationPreferencePtrInput is an input type that accepts LocationPreferenceArgs, LocationPreferencePtr and LocationPreferencePtrOutput values.
// You can construct a concrete instance of `LocationPreferencePtrInput` via:
//
//	        LocationPreferenceArgs{...}
//
//	or:
//
//	        nil
type LocationPreferencePtrInput interface {
	pulumi.Input

	ToLocationPreferencePtrOutput() LocationPreferencePtrOutput
	ToLocationPreferencePtrOutputWithContext(context.Context) LocationPreferencePtrOutput
}

type locationPreferencePtrType LocationPreferenceArgs

func LocationPreferencePtr(v *LocationPreferenceArgs) LocationPreferencePtrInput {
	return (*locationPreferencePtrType)(v)
}

func (*locationPreferencePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationPreference)(nil)).Elem()
}

func (i *locationPreferencePtrType) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return i.ToLocationPreferencePtrOutputWithContext(context.Background())
}

func (i *locationPreferencePtrType) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationPreferencePtrOutput)
}

func (i *locationPreferencePtrType) ToOutput(ctx context.Context) pulumix.Output[*LocationPreference] {
	return pulumix.Output[*LocationPreference]{
		OutputState: i.ToLocationPreferencePtrOutputWithContext(ctx).OutputState,
	}
}

// Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreferenceOutput struct{ *pulumi.OutputState }

func (LocationPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationPreference)(nil)).Elem()
}

func (o LocationPreferenceOutput) ToLocationPreferenceOutput() LocationPreferenceOutput {
	return o
}

func (o LocationPreferenceOutput) ToLocationPreferenceOutputWithContext(ctx context.Context) LocationPreferenceOutput {
	return o
}

func (o LocationPreferenceOutput) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return o.ToLocationPreferencePtrOutputWithContext(context.Background())
}

func (o LocationPreferenceOutput) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LocationPreference) *LocationPreference {
		return &v
	}).(LocationPreferencePtrOutput)
}

func (o LocationPreferenceOutput) ToOutput(ctx context.Context) pulumix.Output[LocationPreference] {
	return pulumix.Output[LocationPreference]{
		OutputState: o.OutputState,
	}
}

// The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
func (o LocationPreferenceOutput) FollowGaeApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.FollowGaeApplication }).(pulumi.StringPtrOutput)
}

// This is always `sql#locationPreference`.
func (o LocationPreferenceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
func (o LocationPreferenceOutput) SecondaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.SecondaryZone }).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
func (o LocationPreferenceOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LocationPreference) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type LocationPreferencePtrOutput struct{ *pulumi.OutputState }

func (LocationPreferencePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationPreference)(nil)).Elem()
}

func (o LocationPreferencePtrOutput) ToLocationPreferencePtrOutput() LocationPreferencePtrOutput {
	return o
}

func (o LocationPreferencePtrOutput) ToLocationPreferencePtrOutputWithContext(ctx context.Context) LocationPreferencePtrOutput {
	return o
}

func (o LocationPreferencePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*LocationPreference] {
	return pulumix.Output[*LocationPreference]{
		OutputState: o.OutputState,
	}
}

func (o LocationPreferencePtrOutput) Elem() LocationPreferenceOutput {
	return o.ApplyT(func(v *LocationPreference) LocationPreference {
		if v != nil {
			return *v
		}
		var ret LocationPreference
		return ret
	}).(LocationPreferenceOutput)
}

// The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
func (o LocationPreferencePtrOutput) FollowGaeApplication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.FollowGaeApplication
	}).(pulumi.StringPtrOutput)
}

// This is always `sql#locationPreference`.
func (o LocationPreferencePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
func (o LocationPreferencePtrOutput) SecondaryZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.SecondaryZone
	}).(pulumi.StringPtrOutput)
}

// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
func (o LocationPreferencePtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationPreference) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreferenceResponse struct {
	// The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
	FollowGaeApplication string `pulumi:"followGaeApplication"`
	// This is always `sql#locationPreference`.
	Kind string `pulumi:"kind"`
	// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
	SecondaryZone string `pulumi:"secondaryZone"`
	// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
	Zone string `pulumi:"zone"`
}

// Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
type LocationPreferenceResponseOutput struct{ *pulumi.OutputState }

func (LocationPreferenceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LocationPreferenceResponse)(nil)).Elem()
}

func (o LocationPreferenceResponseOutput) ToLocationPreferenceResponseOutput() LocationPreferenceResponseOutput {
	return o
}

func (o LocationPreferenceResponseOutput) ToLocationPreferenceResponseOutputWithContext(ctx context.Context) LocationPreferenceResponseOutput {
	return o
}

func (o LocationPreferenceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[LocationPreferenceResponse] {
	return pulumix.Output[LocationPreferenceResponse]{
		OutputState: o.OutputState,
	}
}

// The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
func (o LocationPreferenceResponseOutput) FollowGaeApplication() pulumi.StringOutput {
	return o.ApplyT(func(v LocationPreferenceResponse) string { return v.FollowGaeApplication }).(pulumi.StringOutput)
}

// This is always `sql#locationPreference`.
func (o LocationPreferenceResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LocationPreferenceResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.).
func (o LocationPreferenceResponseOutput) SecondaryZone() pulumi.StringOutput {
	return o.ApplyT(func(v LocationPreferenceResponse) string { return v.SecondaryZone }).(pulumi.StringOutput)
}

// The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
func (o LocationPreferenceResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v LocationPreferenceResponse) string { return v.Zone }).(pulumi.StringOutput)
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindow struct {
	// day of week (1-7), starting on Monday.
	Day *int `pulumi:"day"`
	// hour of day - 0 to 23.
	Hour *int `pulumi:"hour"`
	// This is always `sql#maintenanceWindow`.
	Kind *string `pulumi:"kind"`
	// Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
	UpdateTrack *MaintenanceWindowUpdateTrack `pulumi:"updateTrack"`
}

// MaintenanceWindowInput is an input type that accepts MaintenanceWindowArgs and MaintenanceWindowOutput values.
// You can construct a concrete instance of `MaintenanceWindowInput` via:
//
//	MaintenanceWindowArgs{...}
type MaintenanceWindowInput interface {
	pulumi.Input

	ToMaintenanceWindowOutput() MaintenanceWindowOutput
	ToMaintenanceWindowOutputWithContext(context.Context) MaintenanceWindowOutput
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindowArgs struct {
	// day of week (1-7), starting on Monday.
	Day pulumi.IntPtrInput `pulumi:"day"`
	// hour of day - 0 to 23.
	Hour pulumi.IntPtrInput `pulumi:"hour"`
	// This is always `sql#maintenanceWindow`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
	UpdateTrack MaintenanceWindowUpdateTrackPtrInput `pulumi:"updateTrack"`
}

func (MaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return i.ToMaintenanceWindowOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput)
}

func (i MaintenanceWindowArgs) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindow] {
	return pulumix.Output[MaintenanceWindow]{
		OutputState: i.ToMaintenanceWindowOutputWithContext(ctx).OutputState,
	}
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i MaintenanceWindowArgs) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowOutput).ToMaintenanceWindowPtrOutputWithContext(ctx)
}

// MaintenanceWindowPtrInput is an input type that accepts MaintenanceWindowArgs, MaintenanceWindowPtr and MaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `MaintenanceWindowPtrInput` via:
//
//	        MaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type MaintenanceWindowPtrInput interface {
	pulumi.Input

	ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput
	ToMaintenanceWindowPtrOutputWithContext(context.Context) MaintenanceWindowPtrOutput
}

type maintenanceWindowPtrType MaintenanceWindowArgs

func MaintenanceWindowPtr(v *MaintenanceWindowArgs) MaintenanceWindowPtrInput {
	return (*maintenanceWindowPtrType)(v)
}

func (*maintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return i.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *maintenanceWindowPtrType) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MaintenanceWindowPtrOutput)
}

func (i *maintenanceWindowPtrType) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindow] {
	return pulumix.Output[*MaintenanceWindow]{
		OutputState: i.ToMaintenanceWindowPtrOutputWithContext(ctx).OutputState,
	}
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindowOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutput() MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowOutputWithContext(ctx context.Context) MaintenanceWindowOutput {
	return o
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o.ToMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o MaintenanceWindowOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MaintenanceWindow) *MaintenanceWindow {
		return &v
	}).(MaintenanceWindowPtrOutput)
}

func (o MaintenanceWindowOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindow] {
	return pulumix.Output[MaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

// day of week (1-7), starting on Monday.
func (o MaintenanceWindowOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.Day }).(pulumi.IntPtrOutput)
}

// hour of day - 0 to 23.
func (o MaintenanceWindowOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *int { return v.Hour }).(pulumi.IntPtrOutput)
}

// This is always `sql#maintenanceWindow`.
func (o MaintenanceWindowOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
func (o MaintenanceWindowOutput) UpdateTrack() MaintenanceWindowUpdateTrackPtrOutput {
	return o.ApplyT(func(v MaintenanceWindow) *MaintenanceWindowUpdateTrack { return v.UpdateTrack }).(MaintenanceWindowUpdateTrackPtrOutput)
}

type MaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MaintenanceWindow)(nil)).Elem()
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutput() MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToMaintenanceWindowPtrOutputWithContext(ctx context.Context) MaintenanceWindowPtrOutput {
	return o
}

func (o MaintenanceWindowPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MaintenanceWindow] {
	return pulumix.Output[*MaintenanceWindow]{
		OutputState: o.OutputState,
	}
}

func (o MaintenanceWindowPtrOutput) Elem() MaintenanceWindowOutput {
	return o.ApplyT(func(v *MaintenanceWindow) MaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret MaintenanceWindow
		return ret
	}).(MaintenanceWindowOutput)
}

// day of week (1-7), starting on Monday.
func (o MaintenanceWindowPtrOutput) Day() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.Day
	}).(pulumi.IntPtrOutput)
}

// hour of day - 0 to 23.
func (o MaintenanceWindowPtrOutput) Hour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *int {
		if v == nil {
			return nil
		}
		return v.Hour
	}).(pulumi.IntPtrOutput)
}

// This is always `sql#maintenanceWindow`.
func (o MaintenanceWindowPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
func (o MaintenanceWindowPtrOutput) UpdateTrack() MaintenanceWindowUpdateTrackPtrOutput {
	return o.ApplyT(func(v *MaintenanceWindow) *MaintenanceWindowUpdateTrack {
		if v == nil {
			return nil
		}
		return v.UpdateTrack
	}).(MaintenanceWindowUpdateTrackPtrOutput)
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindowResponse struct {
	// day of week (1-7), starting on Monday.
	Day int `pulumi:"day"`
	// hour of day - 0 to 23.
	Hour int `pulumi:"hour"`
	// This is always `sql#maintenanceWindow`.
	Kind string `pulumi:"kind"`
	// Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
	UpdateTrack string `pulumi:"updateTrack"`
}

// Maintenance window. This specifies when a Cloud SQL instance is restarted for system maintenance purposes.
type MaintenanceWindowResponseOutput struct{ *pulumi.OutputState }

func (MaintenanceWindowResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaintenanceWindowResponse)(nil)).Elem()
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutput() MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToMaintenanceWindowResponseOutputWithContext(ctx context.Context) MaintenanceWindowResponseOutput {
	return o
}

func (o MaintenanceWindowResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MaintenanceWindowResponse] {
	return pulumix.Output[MaintenanceWindowResponse]{
		OutputState: o.OutputState,
	}
}

// day of week (1-7), starting on Monday.
func (o MaintenanceWindowResponseOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) int { return v.Day }).(pulumi.IntOutput)
}

// hour of day - 0 to 23.
func (o MaintenanceWindowResponseOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) int { return v.Hour }).(pulumi.IntOutput)
}

// This is always `sql#maintenanceWindow`.
func (o MaintenanceWindowResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).
func (o MaintenanceWindowResponseOutput) UpdateTrack() pulumi.StringOutput {
	return o.ApplyT(func(v MaintenanceWindowResponse) string { return v.UpdateTrack }).(pulumi.StringOutput)
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfiguration struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey *string `pulumi:"clientKey"`
	// Seconds to wait between connect retries. MySQL's default is 60 seconds.
	ConnectRetryInterval *int `pulumi:"connectRetryInterval"`
	// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
	DumpFilePath *string `pulumi:"dumpFilePath"`
	// This is always `sql#mysqlReplicaConfiguration`.
	Kind *string `pulumi:"kind"`
	// Interval in milliseconds between replication heartbeats.
	MasterHeartbeatPeriod *string `pulumi:"masterHeartbeatPeriod"`
	// The password for the replication connection.
	Password *string `pulumi:"password"`
	// A list of permissible ciphers to use for SSL encryption.
	SslCipher *string `pulumi:"sslCipher"`
	// The username for the replication connection.
	Username *string `pulumi:"username"`
	// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
	VerifyServerCertificate *bool `pulumi:"verifyServerCertificate"`
}

// MySqlReplicaConfigurationInput is an input type that accepts MySqlReplicaConfigurationArgs and MySqlReplicaConfigurationOutput values.
// You can construct a concrete instance of `MySqlReplicaConfigurationInput` via:
//
//	MySqlReplicaConfigurationArgs{...}
type MySqlReplicaConfigurationInput interface {
	pulumi.Input

	ToMySqlReplicaConfigurationOutput() MySqlReplicaConfigurationOutput
	ToMySqlReplicaConfigurationOutputWithContext(context.Context) MySqlReplicaConfigurationOutput
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfigurationArgs struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Seconds to wait between connect retries. MySQL's default is 60 seconds.
	ConnectRetryInterval pulumi.IntPtrInput `pulumi:"connectRetryInterval"`
	// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
	DumpFilePath pulumi.StringPtrInput `pulumi:"dumpFilePath"`
	// This is always `sql#mysqlReplicaConfiguration`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Interval in milliseconds between replication heartbeats.
	MasterHeartbeatPeriod pulumi.StringPtrInput `pulumi:"masterHeartbeatPeriod"`
	// The password for the replication connection.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// A list of permissible ciphers to use for SSL encryption.
	SslCipher pulumi.StringPtrInput `pulumi:"sslCipher"`
	// The username for the replication connection.
	Username pulumi.StringPtrInput `pulumi:"username"`
	// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
	VerifyServerCertificate pulumi.BoolPtrInput `pulumi:"verifyServerCertificate"`
}

func (MySqlReplicaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlReplicaConfiguration)(nil)).Elem()
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationOutput() MySqlReplicaConfigurationOutput {
	return i.ToMySqlReplicaConfigurationOutputWithContext(context.Background())
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationOutputWithContext(ctx context.Context) MySqlReplicaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlReplicaConfigurationOutput)
}

func (i MySqlReplicaConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[MySqlReplicaConfiguration] {
	return pulumix.Output[MySqlReplicaConfiguration]{
		OutputState: i.ToMySqlReplicaConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return i.ToMySqlReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i MySqlReplicaConfigurationArgs) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlReplicaConfigurationOutput).ToMySqlReplicaConfigurationPtrOutputWithContext(ctx)
}

// MySqlReplicaConfigurationPtrInput is an input type that accepts MySqlReplicaConfigurationArgs, MySqlReplicaConfigurationPtr and MySqlReplicaConfigurationPtrOutput values.
// You can construct a concrete instance of `MySqlReplicaConfigurationPtrInput` via:
//
//	        MySqlReplicaConfigurationArgs{...}
//
//	or:
//
//	        nil
type MySqlReplicaConfigurationPtrInput interface {
	pulumi.Input

	ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput
	ToMySqlReplicaConfigurationPtrOutputWithContext(context.Context) MySqlReplicaConfigurationPtrOutput
}

type mySqlReplicaConfigurationPtrType MySqlReplicaConfigurationArgs

func MySqlReplicaConfigurationPtr(v *MySqlReplicaConfigurationArgs) MySqlReplicaConfigurationPtrInput {
	return (*mySqlReplicaConfigurationPtrType)(v)
}

func (*mySqlReplicaConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlReplicaConfiguration)(nil)).Elem()
}

func (i *mySqlReplicaConfigurationPtrType) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return i.ToMySqlReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i *mySqlReplicaConfigurationPtrType) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MySqlReplicaConfigurationPtrOutput)
}

func (i *mySqlReplicaConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*MySqlReplicaConfiguration] {
	return pulumix.Output[*MySqlReplicaConfiguration]{
		OutputState: i.ToMySqlReplicaConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfigurationOutput struct{ *pulumi.OutputState }

func (MySqlReplicaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlReplicaConfiguration)(nil)).Elem()
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationOutput() MySqlReplicaConfigurationOutput {
	return o
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationOutputWithContext(ctx context.Context) MySqlReplicaConfigurationOutput {
	return o
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return o.ToMySqlReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (o MySqlReplicaConfigurationOutput) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MySqlReplicaConfiguration) *MySqlReplicaConfiguration {
		return &v
	}).(MySqlReplicaConfigurationPtrOutput)
}

func (o MySqlReplicaConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[MySqlReplicaConfiguration] {
	return pulumix.Output[MySqlReplicaConfiguration]{
		OutputState: o.OutputState,
	}
}

// PEM representation of the trusted CA's x509 certificate.
func (o MySqlReplicaConfigurationOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o MySqlReplicaConfigurationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o MySqlReplicaConfigurationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Seconds to wait between connect retries. MySQL's default is 60 seconds.
func (o MySqlReplicaConfigurationOutput) ConnectRetryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *int { return v.ConnectRetryInterval }).(pulumi.IntPtrOutput)
}

// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
func (o MySqlReplicaConfigurationOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.DumpFilePath }).(pulumi.StringPtrOutput)
}

// This is always `sql#mysqlReplicaConfiguration`.
func (o MySqlReplicaConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Interval in milliseconds between replication heartbeats.
func (o MySqlReplicaConfigurationOutput) MasterHeartbeatPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.MasterHeartbeatPeriod }).(pulumi.StringPtrOutput)
}

// The password for the replication connection.
func (o MySqlReplicaConfigurationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// A list of permissible ciphers to use for SSL encryption.
func (o MySqlReplicaConfigurationOutput) SslCipher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.SslCipher }).(pulumi.StringPtrOutput)
}

// The username for the replication connection.
func (o MySqlReplicaConfigurationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *string { return v.Username }).(pulumi.StringPtrOutput)
}

// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
func (o MySqlReplicaConfigurationOutput) VerifyServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MySqlReplicaConfiguration) *bool { return v.VerifyServerCertificate }).(pulumi.BoolPtrOutput)
}

type MySqlReplicaConfigurationPtrOutput struct{ *pulumi.OutputState }

func (MySqlReplicaConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MySqlReplicaConfiguration)(nil)).Elem()
}

func (o MySqlReplicaConfigurationPtrOutput) ToMySqlReplicaConfigurationPtrOutput() MySqlReplicaConfigurationPtrOutput {
	return o
}

func (o MySqlReplicaConfigurationPtrOutput) ToMySqlReplicaConfigurationPtrOutputWithContext(ctx context.Context) MySqlReplicaConfigurationPtrOutput {
	return o
}

func (o MySqlReplicaConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*MySqlReplicaConfiguration] {
	return pulumix.Output[*MySqlReplicaConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o MySqlReplicaConfigurationPtrOutput) Elem() MySqlReplicaConfigurationOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) MySqlReplicaConfiguration {
		if v != nil {
			return *v
		}
		var ret MySqlReplicaConfiguration
		return ret
	}).(MySqlReplicaConfigurationOutput)
}

// PEM representation of the trusted CA's x509 certificate.
func (o MySqlReplicaConfigurationPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o MySqlReplicaConfigurationPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o MySqlReplicaConfigurationPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Seconds to wait between connect retries. MySQL's default is 60 seconds.
func (o MySqlReplicaConfigurationPtrOutput) ConnectRetryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *int {
		if v == nil {
			return nil
		}
		return v.ConnectRetryInterval
	}).(pulumi.IntPtrOutput)
}

// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
func (o MySqlReplicaConfigurationPtrOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DumpFilePath
	}).(pulumi.StringPtrOutput)
}

// This is always `sql#mysqlReplicaConfiguration`.
func (o MySqlReplicaConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Interval in milliseconds between replication heartbeats.
func (o MySqlReplicaConfigurationPtrOutput) MasterHeartbeatPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MasterHeartbeatPeriod
	}).(pulumi.StringPtrOutput)
}

// The password for the replication connection.
func (o MySqlReplicaConfigurationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// A list of permissible ciphers to use for SSL encryption.
func (o MySqlReplicaConfigurationPtrOutput) SslCipher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.SslCipher
	}).(pulumi.StringPtrOutput)
}

// The username for the replication connection.
func (o MySqlReplicaConfigurationPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
func (o MySqlReplicaConfigurationPtrOutput) VerifyServerCertificate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MySqlReplicaConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.VerifyServerCertificate
	}).(pulumi.BoolPtrOutput)
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfigurationResponse struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate string `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate string `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey string `pulumi:"clientKey"`
	// Seconds to wait between connect retries. MySQL's default is 60 seconds.
	ConnectRetryInterval int `pulumi:"connectRetryInterval"`
	// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
	DumpFilePath string `pulumi:"dumpFilePath"`
	// This is always `sql#mysqlReplicaConfiguration`.
	Kind string `pulumi:"kind"`
	// Interval in milliseconds between replication heartbeats.
	MasterHeartbeatPeriod string `pulumi:"masterHeartbeatPeriod"`
	// The password for the replication connection.
	Password string `pulumi:"password"`
	// A list of permissible ciphers to use for SSL encryption.
	SslCipher string `pulumi:"sslCipher"`
	// The username for the replication connection.
	Username string `pulumi:"username"`
	// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
	VerifyServerCertificate bool `pulumi:"verifyServerCertificate"`
}

// Read-replica configuration specific to MySQL databases.
type MySqlReplicaConfigurationResponseOutput struct{ *pulumi.OutputState }

func (MySqlReplicaConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MySqlReplicaConfigurationResponse)(nil)).Elem()
}

func (o MySqlReplicaConfigurationResponseOutput) ToMySqlReplicaConfigurationResponseOutput() MySqlReplicaConfigurationResponseOutput {
	return o
}

func (o MySqlReplicaConfigurationResponseOutput) ToMySqlReplicaConfigurationResponseOutputWithContext(ctx context.Context) MySqlReplicaConfigurationResponseOutput {
	return o
}

func (o MySqlReplicaConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[MySqlReplicaConfigurationResponse] {
	return pulumix.Output[MySqlReplicaConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// PEM representation of the trusted CA's x509 certificate.
func (o MySqlReplicaConfigurationResponseOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.CaCertificate }).(pulumi.StringOutput)
}

// PEM representation of the replica's x509 certificate.
func (o MySqlReplicaConfigurationResponseOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o MySqlReplicaConfigurationResponseOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.ClientKey }).(pulumi.StringOutput)
}

// Seconds to wait between connect retries. MySQL's default is 60 seconds.
func (o MySqlReplicaConfigurationResponseOutput) ConnectRetryInterval() pulumi.IntOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) int { return v.ConnectRetryInterval }).(pulumi.IntOutput)
}

// Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
func (o MySqlReplicaConfigurationResponseOutput) DumpFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.DumpFilePath }).(pulumi.StringOutput)
}

// This is always `sql#mysqlReplicaConfiguration`.
func (o MySqlReplicaConfigurationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Interval in milliseconds between replication heartbeats.
func (o MySqlReplicaConfigurationResponseOutput) MasterHeartbeatPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.MasterHeartbeatPeriod }).(pulumi.StringOutput)
}

// The password for the replication connection.
func (o MySqlReplicaConfigurationResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.Password }).(pulumi.StringOutput)
}

// A list of permissible ciphers to use for SSL encryption.
func (o MySqlReplicaConfigurationResponseOutput) SslCipher() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.SslCipher }).(pulumi.StringOutput)
}

// The username for the replication connection.
func (o MySqlReplicaConfigurationResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
func (o MySqlReplicaConfigurationResponseOutput) VerifyServerCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v MySqlReplicaConfigurationResponse) bool { return v.VerifyServerCertificate }).(pulumi.BoolOutput)
}

// On-premises instance configuration.
type OnPremisesConfiguration struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey *string `pulumi:"clientKey"`
	// The dump file to create the Cloud SQL replica.
	DumpFilePath *string `pulumi:"dumpFilePath"`
	// The host and port of the on-premises instance in host:port format
	HostPort *string `pulumi:"hostPort"`
	// This is always `sql#onPremisesConfiguration`.
	Kind *string `pulumi:"kind"`
	// The password for connecting to on-premises instance.
	Password *string `pulumi:"password"`
	// The reference to Cloud SQL instance if the source is Cloud SQL.
	SourceInstance *InstanceReference `pulumi:"sourceInstance"`
	// The username for connecting to on-premises instance.
	Username *string `pulumi:"username"`
}

// OnPremisesConfigurationInput is an input type that accepts OnPremisesConfigurationArgs and OnPremisesConfigurationOutput values.
// You can construct a concrete instance of `OnPremisesConfigurationInput` via:
//
//	OnPremisesConfigurationArgs{...}
type OnPremisesConfigurationInput interface {
	pulumi.Input

	ToOnPremisesConfigurationOutput() OnPremisesConfigurationOutput
	ToOnPremisesConfigurationOutputWithContext(context.Context) OnPremisesConfigurationOutput
}

// On-premises instance configuration.
type OnPremisesConfigurationArgs struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The dump file to create the Cloud SQL replica.
	DumpFilePath pulumi.StringPtrInput `pulumi:"dumpFilePath"`
	// The host and port of the on-premises instance in host:port format
	HostPort pulumi.StringPtrInput `pulumi:"hostPort"`
	// This is always `sql#onPremisesConfiguration`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The password for connecting to on-premises instance.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The reference to Cloud SQL instance if the source is Cloud SQL.
	SourceInstance InstanceReferencePtrInput `pulumi:"sourceInstance"`
	// The username for connecting to on-premises instance.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (OnPremisesConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremisesConfiguration)(nil)).Elem()
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationOutput() OnPremisesConfigurationOutput {
	return i.ToOnPremisesConfigurationOutputWithContext(context.Background())
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationOutputWithContext(ctx context.Context) OnPremisesConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisesConfigurationOutput)
}

func (i OnPremisesConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[OnPremisesConfiguration] {
	return pulumix.Output[OnPremisesConfiguration]{
		OutputState: i.ToOnPremisesConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return i.ToOnPremisesConfigurationPtrOutputWithContext(context.Background())
}

func (i OnPremisesConfigurationArgs) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisesConfigurationOutput).ToOnPremisesConfigurationPtrOutputWithContext(ctx)
}

// OnPremisesConfigurationPtrInput is an input type that accepts OnPremisesConfigurationArgs, OnPremisesConfigurationPtr and OnPremisesConfigurationPtrOutput values.
// You can construct a concrete instance of `OnPremisesConfigurationPtrInput` via:
//
//	        OnPremisesConfigurationArgs{...}
//
//	or:
//
//	        nil
type OnPremisesConfigurationPtrInput interface {
	pulumi.Input

	ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput
	ToOnPremisesConfigurationPtrOutputWithContext(context.Context) OnPremisesConfigurationPtrOutput
}

type onPremisesConfigurationPtrType OnPremisesConfigurationArgs

func OnPremisesConfigurationPtr(v *OnPremisesConfigurationArgs) OnPremisesConfigurationPtrInput {
	return (*onPremisesConfigurationPtrType)(v)
}

func (*onPremisesConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremisesConfiguration)(nil)).Elem()
}

func (i *onPremisesConfigurationPtrType) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return i.ToOnPremisesConfigurationPtrOutputWithContext(context.Background())
}

func (i *onPremisesConfigurationPtrType) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnPremisesConfigurationPtrOutput)
}

func (i *onPremisesConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*OnPremisesConfiguration] {
	return pulumix.Output[*OnPremisesConfiguration]{
		OutputState: i.ToOnPremisesConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// On-premises instance configuration.
type OnPremisesConfigurationOutput struct{ *pulumi.OutputState }

func (OnPremisesConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremisesConfiguration)(nil)).Elem()
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationOutput() OnPremisesConfigurationOutput {
	return o
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationOutputWithContext(ctx context.Context) OnPremisesConfigurationOutput {
	return o
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return o.ToOnPremisesConfigurationPtrOutputWithContext(context.Background())
}

func (o OnPremisesConfigurationOutput) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OnPremisesConfiguration) *OnPremisesConfiguration {
		return &v
	}).(OnPremisesConfigurationPtrOutput)
}

func (o OnPremisesConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[OnPremisesConfiguration] {
	return pulumix.Output[OnPremisesConfiguration]{
		OutputState: o.OutputState,
	}
}

// PEM representation of the trusted CA's x509 certificate.
func (o OnPremisesConfigurationOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o OnPremisesConfigurationOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o OnPremisesConfigurationOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The dump file to create the Cloud SQL replica.
func (o OnPremisesConfigurationOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.DumpFilePath }).(pulumi.StringPtrOutput)
}

// The host and port of the on-premises instance in host:port format
func (o OnPremisesConfigurationOutput) HostPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.HostPort }).(pulumi.StringPtrOutput)
}

// This is always `sql#onPremisesConfiguration`.
func (o OnPremisesConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The password for connecting to on-premises instance.
func (o OnPremisesConfigurationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The reference to Cloud SQL instance if the source is Cloud SQL.
func (o OnPremisesConfigurationOutput) SourceInstance() InstanceReferencePtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *InstanceReference { return v.SourceInstance }).(InstanceReferencePtrOutput)
}

// The username for connecting to on-premises instance.
func (o OnPremisesConfigurationOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OnPremisesConfiguration) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type OnPremisesConfigurationPtrOutput struct{ *pulumi.OutputState }

func (OnPremisesConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnPremisesConfiguration)(nil)).Elem()
}

func (o OnPremisesConfigurationPtrOutput) ToOnPremisesConfigurationPtrOutput() OnPremisesConfigurationPtrOutput {
	return o
}

func (o OnPremisesConfigurationPtrOutput) ToOnPremisesConfigurationPtrOutputWithContext(ctx context.Context) OnPremisesConfigurationPtrOutput {
	return o
}

func (o OnPremisesConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OnPremisesConfiguration] {
	return pulumix.Output[*OnPremisesConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o OnPremisesConfigurationPtrOutput) Elem() OnPremisesConfigurationOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) OnPremisesConfiguration {
		if v != nil {
			return *v
		}
		var ret OnPremisesConfiguration
		return ret
	}).(OnPremisesConfigurationOutput)
}

// PEM representation of the trusted CA's x509 certificate.
func (o OnPremisesConfigurationPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's x509 certificate.
func (o OnPremisesConfigurationPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o OnPremisesConfigurationPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// The dump file to create the Cloud SQL replica.
func (o OnPremisesConfigurationPtrOutput) DumpFilePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.DumpFilePath
	}).(pulumi.StringPtrOutput)
}

// The host and port of the on-premises instance in host:port format
func (o OnPremisesConfigurationPtrOutput) HostPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.HostPort
	}).(pulumi.StringPtrOutput)
}

// This is always `sql#onPremisesConfiguration`.
func (o OnPremisesConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The password for connecting to on-premises instance.
func (o OnPremisesConfigurationPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The reference to Cloud SQL instance if the source is Cloud SQL.
func (o OnPremisesConfigurationPtrOutput) SourceInstance() InstanceReferencePtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *InstanceReference {
		if v == nil {
			return nil
		}
		return v.SourceInstance
	}).(InstanceReferencePtrOutput)
}

// The username for connecting to on-premises instance.
func (o OnPremisesConfigurationPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnPremisesConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

// On-premises instance configuration.
type OnPremisesConfigurationResponse struct {
	// PEM representation of the trusted CA's x509 certificate.
	CaCertificate string `pulumi:"caCertificate"`
	// PEM representation of the replica's x509 certificate.
	ClientCertificate string `pulumi:"clientCertificate"`
	// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
	ClientKey string `pulumi:"clientKey"`
	// The dump file to create the Cloud SQL replica.
	DumpFilePath string `pulumi:"dumpFilePath"`
	// The host and port of the on-premises instance in host:port format
	HostPort string `pulumi:"hostPort"`
	// This is always `sql#onPremisesConfiguration`.
	Kind string `pulumi:"kind"`
	// The password for connecting to on-premises instance.
	Password string `pulumi:"password"`
	// The reference to Cloud SQL instance if the source is Cloud SQL.
	SourceInstance InstanceReferenceResponse `pulumi:"sourceInstance"`
	// The username for connecting to on-premises instance.
	Username string `pulumi:"username"`
}

// On-premises instance configuration.
type OnPremisesConfigurationResponseOutput struct{ *pulumi.OutputState }

func (OnPremisesConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnPremisesConfigurationResponse)(nil)).Elem()
}

func (o OnPremisesConfigurationResponseOutput) ToOnPremisesConfigurationResponseOutput() OnPremisesConfigurationResponseOutput {
	return o
}

func (o OnPremisesConfigurationResponseOutput) ToOnPremisesConfigurationResponseOutputWithContext(ctx context.Context) OnPremisesConfigurationResponseOutput {
	return o
}

func (o OnPremisesConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OnPremisesConfigurationResponse] {
	return pulumix.Output[OnPremisesConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// PEM representation of the trusted CA's x509 certificate.
func (o OnPremisesConfigurationResponseOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.CaCertificate }).(pulumi.StringOutput)
}

// PEM representation of the replica's x509 certificate.
func (o OnPremisesConfigurationResponseOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
func (o OnPremisesConfigurationResponseOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.ClientKey }).(pulumi.StringOutput)
}

// The dump file to create the Cloud SQL replica.
func (o OnPremisesConfigurationResponseOutput) DumpFilePath() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.DumpFilePath }).(pulumi.StringOutput)
}

// The host and port of the on-premises instance in host:port format
func (o OnPremisesConfigurationResponseOutput) HostPort() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.HostPort }).(pulumi.StringOutput)
}

// This is always `sql#onPremisesConfiguration`.
func (o OnPremisesConfigurationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The password for connecting to on-premises instance.
func (o OnPremisesConfigurationResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.Password }).(pulumi.StringOutput)
}

// The reference to Cloud SQL instance if the source is Cloud SQL.
func (o OnPremisesConfigurationResponseOutput) SourceInstance() InstanceReferenceResponseOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) InstanceReferenceResponse { return v.SourceInstance }).(InstanceReferenceResponseOutput)
}

// The username for connecting to on-premises instance.
func (o OnPremisesConfigurationResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OnPremisesConfigurationResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Database instance operation error.
type OperationError struct {
	// Identifies the specific error that occurred.
	Code *string `pulumi:"code"`
	// This is always `sql#operationError`.
	Kind *string `pulumi:"kind"`
	// Additional information about the error encountered.
	Message *string `pulumi:"message"`
}

// OperationErrorInput is an input type that accepts OperationErrorArgs and OperationErrorOutput values.
// You can construct a concrete instance of `OperationErrorInput` via:
//
//	OperationErrorArgs{...}
type OperationErrorInput interface {
	pulumi.Input

	ToOperationErrorOutput() OperationErrorOutput
	ToOperationErrorOutputWithContext(context.Context) OperationErrorOutput
}

// Database instance operation error.
type OperationErrorArgs struct {
	// Identifies the specific error that occurred.
	Code pulumi.StringPtrInput `pulumi:"code"`
	// This is always `sql#operationError`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Additional information about the error encountered.
	Message pulumi.StringPtrInput `pulumi:"message"`
}

func (OperationErrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationError)(nil)).Elem()
}

func (i OperationErrorArgs) ToOperationErrorOutput() OperationErrorOutput {
	return i.ToOperationErrorOutputWithContext(context.Background())
}

func (i OperationErrorArgs) ToOperationErrorOutputWithContext(ctx context.Context) OperationErrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationErrorOutput)
}

func (i OperationErrorArgs) ToOutput(ctx context.Context) pulumix.Output[OperationError] {
	return pulumix.Output[OperationError]{
		OutputState: i.ToOperationErrorOutputWithContext(ctx).OutputState,
	}
}

func (i OperationErrorArgs) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return i.ToOperationErrorPtrOutputWithContext(context.Background())
}

func (i OperationErrorArgs) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationErrorOutput).ToOperationErrorPtrOutputWithContext(ctx)
}

// OperationErrorPtrInput is an input type that accepts OperationErrorArgs, OperationErrorPtr and OperationErrorPtrOutput values.
// You can construct a concrete instance of `OperationErrorPtrInput` via:
//
//	        OperationErrorArgs{...}
//
//	or:
//
//	        nil
type OperationErrorPtrInput interface {
	pulumi.Input

	ToOperationErrorPtrOutput() OperationErrorPtrOutput
	ToOperationErrorPtrOutputWithContext(context.Context) OperationErrorPtrOutput
}

type operationErrorPtrType OperationErrorArgs

func OperationErrorPtr(v *OperationErrorArgs) OperationErrorPtrInput {
	return (*operationErrorPtrType)(v)
}

func (*operationErrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationError)(nil)).Elem()
}

func (i *operationErrorPtrType) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return i.ToOperationErrorPtrOutputWithContext(context.Background())
}

func (i *operationErrorPtrType) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperationErrorPtrOutput)
}

func (i *operationErrorPtrType) ToOutput(ctx context.Context) pulumix.Output[*OperationError] {
	return pulumix.Output[*OperationError]{
		OutputState: i.ToOperationErrorPtrOutputWithContext(ctx).OutputState,
	}
}

// Database instance operation error.
type OperationErrorOutput struct{ *pulumi.OutputState }

func (OperationErrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationError)(nil)).Elem()
}

func (o OperationErrorOutput) ToOperationErrorOutput() OperationErrorOutput {
	return o
}

func (o OperationErrorOutput) ToOperationErrorOutputWithContext(ctx context.Context) OperationErrorOutput {
	return o
}

func (o OperationErrorOutput) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return o.ToOperationErrorPtrOutputWithContext(context.Background())
}

func (o OperationErrorOutput) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperationError) *OperationError {
		return &v
	}).(OperationErrorPtrOutput)
}

func (o OperationErrorOutput) ToOutput(ctx context.Context) pulumix.Output[OperationError] {
	return pulumix.Output[OperationError]{
		OutputState: o.OutputState,
	}
}

// Identifies the specific error that occurred.
func (o OperationErrorOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationError) *string { return v.Code }).(pulumi.StringPtrOutput)
}

// This is always `sql#operationError`.
func (o OperationErrorOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationError) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Additional information about the error encountered.
func (o OperationErrorOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OperationError) *string { return v.Message }).(pulumi.StringPtrOutput)
}

type OperationErrorPtrOutput struct{ *pulumi.OutputState }

func (OperationErrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperationError)(nil)).Elem()
}

func (o OperationErrorPtrOutput) ToOperationErrorPtrOutput() OperationErrorPtrOutput {
	return o
}

func (o OperationErrorPtrOutput) ToOperationErrorPtrOutputWithContext(ctx context.Context) OperationErrorPtrOutput {
	return o
}

func (o OperationErrorPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*OperationError] {
	return pulumix.Output[*OperationError]{
		OutputState: o.OutputState,
	}
}

func (o OperationErrorPtrOutput) Elem() OperationErrorOutput {
	return o.ApplyT(func(v *OperationError) OperationError {
		if v != nil {
			return *v
		}
		var ret OperationError
		return ret
	}).(OperationErrorOutput)
}

// Identifies the specific error that occurred.
func (o OperationErrorPtrOutput) Code() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationError) *string {
		if v == nil {
			return nil
		}
		return v.Code
	}).(pulumi.StringPtrOutput)
}

// This is always `sql#operationError`.
func (o OperationErrorPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationError) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Additional information about the error encountered.
func (o OperationErrorPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperationError) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Database instance operation error.
type OperationErrorResponse struct {
	// Identifies the specific error that occurred.
	Code string `pulumi:"code"`
	// This is always `sql#operationError`.
	Kind string `pulumi:"kind"`
	// Additional information about the error encountered.
	Message string `pulumi:"message"`
}

// Database instance operation error.
type OperationErrorResponseOutput struct{ *pulumi.OutputState }

func (OperationErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperationErrorResponse)(nil)).Elem()
}

func (o OperationErrorResponseOutput) ToOperationErrorResponseOutput() OperationErrorResponseOutput {
	return o
}

func (o OperationErrorResponseOutput) ToOperationErrorResponseOutputWithContext(ctx context.Context) OperationErrorResponseOutput {
	return o
}

func (o OperationErrorResponseOutput) ToOutput(ctx context.Context) pulumix.Output[OperationErrorResponse] {
	return pulumix.Output[OperationErrorResponse]{
		OutputState: o.OutputState,
	}
}

// Identifies the specific error that occurred.
func (o OperationErrorResponseOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v OperationErrorResponse) string { return v.Code }).(pulumi.StringOutput)
}

// This is always `sql#operationError`.
func (o OperationErrorResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v OperationErrorResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Additional information about the error encountered.
func (o OperationErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v OperationErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Read-only password status.
type PasswordStatusResponse struct {
	// If true, user does not have login privileges.
	Locked bool `pulumi:"locked"`
	// The expiration time of the current password.
	PasswordExpirationTime string `pulumi:"passwordExpirationTime"`
}

// Read-only password status.
type PasswordStatusResponseOutput struct{ *pulumi.OutputState }

func (PasswordStatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordStatusResponse)(nil)).Elem()
}

func (o PasswordStatusResponseOutput) ToPasswordStatusResponseOutput() PasswordStatusResponseOutput {
	return o
}

func (o PasswordStatusResponseOutput) ToPasswordStatusResponseOutputWithContext(ctx context.Context) PasswordStatusResponseOutput {
	return o
}

func (o PasswordStatusResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PasswordStatusResponse] {
	return pulumix.Output[PasswordStatusResponse]{
		OutputState: o.OutputState,
	}
}

// If true, user does not have login privileges.
func (o PasswordStatusResponseOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v PasswordStatusResponse) bool { return v.Locked }).(pulumi.BoolOutput)
}

// The expiration time of the current password.
func (o PasswordStatusResponseOutput) PasswordExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordStatusResponse) string { return v.PasswordExpirationTime }).(pulumi.StringOutput)
}

// Database instance local user password validation policy
type PasswordValidationPolicy struct {
	// The complexity of the password.
	Complexity *PasswordValidationPolicyComplexity `pulumi:"complexity"`
	// Disallow username as a part of the password.
	DisallowUsernameSubstring *bool `pulumi:"disallowUsernameSubstring"`
	// Whether the password policy is enabled or not.
	EnablePasswordPolicy *bool `pulumi:"enablePasswordPolicy"`
	// Minimum number of characters allowed.
	MinLength *int `pulumi:"minLength"`
	// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
	PasswordChangeInterval *string `pulumi:"passwordChangeInterval"`
	// Number of previous passwords that cannot be reused.
	ReuseInterval *int `pulumi:"reuseInterval"`
}

// PasswordValidationPolicyInput is an input type that accepts PasswordValidationPolicyArgs and PasswordValidationPolicyOutput values.
// You can construct a concrete instance of `PasswordValidationPolicyInput` via:
//
//	PasswordValidationPolicyArgs{...}
type PasswordValidationPolicyInput interface {
	pulumi.Input

	ToPasswordValidationPolicyOutput() PasswordValidationPolicyOutput
	ToPasswordValidationPolicyOutputWithContext(context.Context) PasswordValidationPolicyOutput
}

// Database instance local user password validation policy
type PasswordValidationPolicyArgs struct {
	// The complexity of the password.
	Complexity PasswordValidationPolicyComplexityPtrInput `pulumi:"complexity"`
	// Disallow username as a part of the password.
	DisallowUsernameSubstring pulumi.BoolPtrInput `pulumi:"disallowUsernameSubstring"`
	// Whether the password policy is enabled or not.
	EnablePasswordPolicy pulumi.BoolPtrInput `pulumi:"enablePasswordPolicy"`
	// Minimum number of characters allowed.
	MinLength pulumi.IntPtrInput `pulumi:"minLength"`
	// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
	PasswordChangeInterval pulumi.StringPtrInput `pulumi:"passwordChangeInterval"`
	// Number of previous passwords that cannot be reused.
	ReuseInterval pulumi.IntPtrInput `pulumi:"reuseInterval"`
}

func (PasswordValidationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordValidationPolicy)(nil)).Elem()
}

func (i PasswordValidationPolicyArgs) ToPasswordValidationPolicyOutput() PasswordValidationPolicyOutput {
	return i.ToPasswordValidationPolicyOutputWithContext(context.Background())
}

func (i PasswordValidationPolicyArgs) ToPasswordValidationPolicyOutputWithContext(ctx context.Context) PasswordValidationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordValidationPolicyOutput)
}

func (i PasswordValidationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[PasswordValidationPolicy] {
	return pulumix.Output[PasswordValidationPolicy]{
		OutputState: i.ToPasswordValidationPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i PasswordValidationPolicyArgs) ToPasswordValidationPolicyPtrOutput() PasswordValidationPolicyPtrOutput {
	return i.ToPasswordValidationPolicyPtrOutputWithContext(context.Background())
}

func (i PasswordValidationPolicyArgs) ToPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) PasswordValidationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordValidationPolicyOutput).ToPasswordValidationPolicyPtrOutputWithContext(ctx)
}

// PasswordValidationPolicyPtrInput is an input type that accepts PasswordValidationPolicyArgs, PasswordValidationPolicyPtr and PasswordValidationPolicyPtrOutput values.
// You can construct a concrete instance of `PasswordValidationPolicyPtrInput` via:
//
//	        PasswordValidationPolicyArgs{...}
//
//	or:
//
//	        nil
type PasswordValidationPolicyPtrInput interface {
	pulumi.Input

	ToPasswordValidationPolicyPtrOutput() PasswordValidationPolicyPtrOutput
	ToPasswordValidationPolicyPtrOutputWithContext(context.Context) PasswordValidationPolicyPtrOutput
}

type passwordValidationPolicyPtrType PasswordValidationPolicyArgs

func PasswordValidationPolicyPtr(v *PasswordValidationPolicyArgs) PasswordValidationPolicyPtrInput {
	return (*passwordValidationPolicyPtrType)(v)
}

func (*passwordValidationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordValidationPolicy)(nil)).Elem()
}

func (i *passwordValidationPolicyPtrType) ToPasswordValidationPolicyPtrOutput() PasswordValidationPolicyPtrOutput {
	return i.ToPasswordValidationPolicyPtrOutputWithContext(context.Background())
}

func (i *passwordValidationPolicyPtrType) ToPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) PasswordValidationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PasswordValidationPolicyPtrOutput)
}

func (i *passwordValidationPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*PasswordValidationPolicy] {
	return pulumix.Output[*PasswordValidationPolicy]{
		OutputState: i.ToPasswordValidationPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// Database instance local user password validation policy
type PasswordValidationPolicyOutput struct{ *pulumi.OutputState }

func (PasswordValidationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordValidationPolicy)(nil)).Elem()
}

func (o PasswordValidationPolicyOutput) ToPasswordValidationPolicyOutput() PasswordValidationPolicyOutput {
	return o
}

func (o PasswordValidationPolicyOutput) ToPasswordValidationPolicyOutputWithContext(ctx context.Context) PasswordValidationPolicyOutput {
	return o
}

func (o PasswordValidationPolicyOutput) ToPasswordValidationPolicyPtrOutput() PasswordValidationPolicyPtrOutput {
	return o.ToPasswordValidationPolicyPtrOutputWithContext(context.Background())
}

func (o PasswordValidationPolicyOutput) ToPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) PasswordValidationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PasswordValidationPolicy) *PasswordValidationPolicy {
		return &v
	}).(PasswordValidationPolicyPtrOutput)
}

func (o PasswordValidationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[PasswordValidationPolicy] {
	return pulumix.Output[PasswordValidationPolicy]{
		OutputState: o.OutputState,
	}
}

// The complexity of the password.
func (o PasswordValidationPolicyOutput) Complexity() PasswordValidationPolicyComplexityPtrOutput {
	return o.ApplyT(func(v PasswordValidationPolicy) *PasswordValidationPolicyComplexity { return v.Complexity }).(PasswordValidationPolicyComplexityPtrOutput)
}

// Disallow username as a part of the password.
func (o PasswordValidationPolicyOutput) DisallowUsernameSubstring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordValidationPolicy) *bool { return v.DisallowUsernameSubstring }).(pulumi.BoolPtrOutput)
}

// Whether the password policy is enabled or not.
func (o PasswordValidationPolicyOutput) EnablePasswordPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PasswordValidationPolicy) *bool { return v.EnablePasswordPolicy }).(pulumi.BoolPtrOutput)
}

// Minimum number of characters allowed.
func (o PasswordValidationPolicyOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordValidationPolicy) *int { return v.MinLength }).(pulumi.IntPtrOutput)
}

// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
func (o PasswordValidationPolicyOutput) PasswordChangeInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PasswordValidationPolicy) *string { return v.PasswordChangeInterval }).(pulumi.StringPtrOutput)
}

// Number of previous passwords that cannot be reused.
func (o PasswordValidationPolicyOutput) ReuseInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PasswordValidationPolicy) *int { return v.ReuseInterval }).(pulumi.IntPtrOutput)
}

type PasswordValidationPolicyPtrOutput struct{ *pulumi.OutputState }

func (PasswordValidationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PasswordValidationPolicy)(nil)).Elem()
}

func (o PasswordValidationPolicyPtrOutput) ToPasswordValidationPolicyPtrOutput() PasswordValidationPolicyPtrOutput {
	return o
}

func (o PasswordValidationPolicyPtrOutput) ToPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) PasswordValidationPolicyPtrOutput {
	return o
}

func (o PasswordValidationPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*PasswordValidationPolicy] {
	return pulumix.Output[*PasswordValidationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o PasswordValidationPolicyPtrOutput) Elem() PasswordValidationPolicyOutput {
	return o.ApplyT(func(v *PasswordValidationPolicy) PasswordValidationPolicy {
		if v != nil {
			return *v
		}
		var ret PasswordValidationPolicy
		return ret
	}).(PasswordValidationPolicyOutput)
}

// The complexity of the password.
func (o PasswordValidationPolicyPtrOutput) Complexity() PasswordValidationPolicyComplexityPtrOutput {
	return o.ApplyT(func(v *PasswordValidationPolicy) *PasswordValidationPolicyComplexity {
		if v == nil {
			return nil
		}
		return v.Complexity
	}).(PasswordValidationPolicyComplexityPtrOutput)
}

// Disallow username as a part of the password.
func (o PasswordValidationPolicyPtrOutput) DisallowUsernameSubstring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordValidationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.DisallowUsernameSubstring
	}).(pulumi.BoolPtrOutput)
}

// Whether the password policy is enabled or not.
func (o PasswordValidationPolicyPtrOutput) EnablePasswordPolicy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PasswordValidationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePasswordPolicy
	}).(pulumi.BoolPtrOutput)
}

// Minimum number of characters allowed.
func (o PasswordValidationPolicyPtrOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordValidationPolicy) *int {
		if v == nil {
			return nil
		}
		return v.MinLength
	}).(pulumi.IntPtrOutput)
}

// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
func (o PasswordValidationPolicyPtrOutput) PasswordChangeInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PasswordValidationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.PasswordChangeInterval
	}).(pulumi.StringPtrOutput)
}

// Number of previous passwords that cannot be reused.
func (o PasswordValidationPolicyPtrOutput) ReuseInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PasswordValidationPolicy) *int {
		if v == nil {
			return nil
		}
		return v.ReuseInterval
	}).(pulumi.IntPtrOutput)
}

// Database instance local user password validation policy
type PasswordValidationPolicyResponse struct {
	// The complexity of the password.
	Complexity string `pulumi:"complexity"`
	// Disallow username as a part of the password.
	DisallowUsernameSubstring bool `pulumi:"disallowUsernameSubstring"`
	// Whether the password policy is enabled or not.
	EnablePasswordPolicy bool `pulumi:"enablePasswordPolicy"`
	// Minimum number of characters allowed.
	MinLength int `pulumi:"minLength"`
	// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
	PasswordChangeInterval string `pulumi:"passwordChangeInterval"`
	// Number of previous passwords that cannot be reused.
	ReuseInterval int `pulumi:"reuseInterval"`
}

// Database instance local user password validation policy
type PasswordValidationPolicyResponseOutput struct{ *pulumi.OutputState }

func (PasswordValidationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PasswordValidationPolicyResponse)(nil)).Elem()
}

func (o PasswordValidationPolicyResponseOutput) ToPasswordValidationPolicyResponseOutput() PasswordValidationPolicyResponseOutput {
	return o
}

func (o PasswordValidationPolicyResponseOutput) ToPasswordValidationPolicyResponseOutputWithContext(ctx context.Context) PasswordValidationPolicyResponseOutput {
	return o
}

func (o PasswordValidationPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[PasswordValidationPolicyResponse] {
	return pulumix.Output[PasswordValidationPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// The complexity of the password.
func (o PasswordValidationPolicyResponseOutput) Complexity() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordValidationPolicyResponse) string { return v.Complexity }).(pulumi.StringOutput)
}

// Disallow username as a part of the password.
func (o PasswordValidationPolicyResponseOutput) DisallowUsernameSubstring() pulumi.BoolOutput {
	return o.ApplyT(func(v PasswordValidationPolicyResponse) bool { return v.DisallowUsernameSubstring }).(pulumi.BoolOutput)
}

// Whether the password policy is enabled or not.
func (o PasswordValidationPolicyResponseOutput) EnablePasswordPolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v PasswordValidationPolicyResponse) bool { return v.EnablePasswordPolicy }).(pulumi.BoolOutput)
}

// Minimum number of characters allowed.
func (o PasswordValidationPolicyResponseOutput) MinLength() pulumi.IntOutput {
	return o.ApplyT(func(v PasswordValidationPolicyResponse) int { return v.MinLength }).(pulumi.IntOutput)
}

// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
func (o PasswordValidationPolicyResponseOutput) PasswordChangeInterval() pulumi.StringOutput {
	return o.ApplyT(func(v PasswordValidationPolicyResponse) string { return v.PasswordChangeInterval }).(pulumi.StringOutput)
}

// Number of previous passwords that cannot be reused.
func (o PasswordValidationPolicyResponseOutput) ReuseInterval() pulumi.IntOutput {
	return o.ApplyT(func(v PasswordValidationPolicyResponse) int { return v.ReuseInterval }).(pulumi.IntOutput)
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfiguration struct {
	// Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
	FailoverTarget *bool `pulumi:"failoverTarget"`
	// This is always `sql#replicaConfiguration`.
	Kind *string `pulumi:"kind"`
	// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
	MysqlReplicaConfiguration *MySqlReplicaConfiguration `pulumi:"mysqlReplicaConfiguration"`
}

// ReplicaConfigurationInput is an input type that accepts ReplicaConfigurationArgs and ReplicaConfigurationOutput values.
// You can construct a concrete instance of `ReplicaConfigurationInput` via:
//
//	ReplicaConfigurationArgs{...}
type ReplicaConfigurationInput interface {
	pulumi.Input

	ToReplicaConfigurationOutput() ReplicaConfigurationOutput
	ToReplicaConfigurationOutputWithContext(context.Context) ReplicaConfigurationOutput
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfigurationArgs struct {
	// Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
	FailoverTarget pulumi.BoolPtrInput `pulumi:"failoverTarget"`
	// This is always `sql#replicaConfiguration`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
	MysqlReplicaConfiguration MySqlReplicaConfigurationPtrInput `pulumi:"mysqlReplicaConfiguration"`
}

func (ReplicaConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaConfiguration)(nil)).Elem()
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationOutput() ReplicaConfigurationOutput {
	return i.ToReplicaConfigurationOutputWithContext(context.Background())
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationOutputWithContext(ctx context.Context) ReplicaConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaConfigurationOutput)
}

func (i ReplicaConfigurationArgs) ToOutput(ctx context.Context) pulumix.Output[ReplicaConfiguration] {
	return pulumix.Output[ReplicaConfiguration]{
		OutputState: i.ToReplicaConfigurationOutputWithContext(ctx).OutputState,
	}
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return i.ToReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i ReplicaConfigurationArgs) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaConfigurationOutput).ToReplicaConfigurationPtrOutputWithContext(ctx)
}

// ReplicaConfigurationPtrInput is an input type that accepts ReplicaConfigurationArgs, ReplicaConfigurationPtr and ReplicaConfigurationPtrOutput values.
// You can construct a concrete instance of `ReplicaConfigurationPtrInput` via:
//
//	        ReplicaConfigurationArgs{...}
//
//	or:
//
//	        nil
type ReplicaConfigurationPtrInput interface {
	pulumi.Input

	ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput
	ToReplicaConfigurationPtrOutputWithContext(context.Context) ReplicaConfigurationPtrOutput
}

type replicaConfigurationPtrType ReplicaConfigurationArgs

func ReplicaConfigurationPtr(v *ReplicaConfigurationArgs) ReplicaConfigurationPtrInput {
	return (*replicaConfigurationPtrType)(v)
}

func (*replicaConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaConfiguration)(nil)).Elem()
}

func (i *replicaConfigurationPtrType) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return i.ToReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (i *replicaConfigurationPtrType) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaConfigurationPtrOutput)
}

func (i *replicaConfigurationPtrType) ToOutput(ctx context.Context) pulumix.Output[*ReplicaConfiguration] {
	return pulumix.Output[*ReplicaConfiguration]{
		OutputState: i.ToReplicaConfigurationPtrOutputWithContext(ctx).OutputState,
	}
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfigurationOutput struct{ *pulumi.OutputState }

func (ReplicaConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaConfiguration)(nil)).Elem()
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationOutput() ReplicaConfigurationOutput {
	return o
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationOutputWithContext(ctx context.Context) ReplicaConfigurationOutput {
	return o
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return o.ToReplicaConfigurationPtrOutputWithContext(context.Background())
}

func (o ReplicaConfigurationOutput) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicaConfiguration) *ReplicaConfiguration {
		return &v
	}).(ReplicaConfigurationPtrOutput)
}

func (o ReplicaConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicaConfiguration] {
	return pulumix.Output[ReplicaConfiguration]{
		OutputState: o.OutputState,
	}
}

// Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
func (o ReplicaConfigurationOutput) FailoverTarget() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReplicaConfiguration) *bool { return v.FailoverTarget }).(pulumi.BoolPtrOutput)
}

// This is always `sql#replicaConfiguration`.
func (o ReplicaConfigurationOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReplicaConfiguration) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
func (o ReplicaConfigurationOutput) MysqlReplicaConfiguration() MySqlReplicaConfigurationPtrOutput {
	return o.ApplyT(func(v ReplicaConfiguration) *MySqlReplicaConfiguration { return v.MysqlReplicaConfiguration }).(MySqlReplicaConfigurationPtrOutput)
}

type ReplicaConfigurationPtrOutput struct{ *pulumi.OutputState }

func (ReplicaConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaConfiguration)(nil)).Elem()
}

func (o ReplicaConfigurationPtrOutput) ToReplicaConfigurationPtrOutput() ReplicaConfigurationPtrOutput {
	return o
}

func (o ReplicaConfigurationPtrOutput) ToReplicaConfigurationPtrOutputWithContext(ctx context.Context) ReplicaConfigurationPtrOutput {
	return o
}

func (o ReplicaConfigurationPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*ReplicaConfiguration] {
	return pulumix.Output[*ReplicaConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o ReplicaConfigurationPtrOutput) Elem() ReplicaConfigurationOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) ReplicaConfiguration {
		if v != nil {
			return *v
		}
		var ret ReplicaConfiguration
		return ret
	}).(ReplicaConfigurationOutput)
}

// Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
func (o ReplicaConfigurationPtrOutput) FailoverTarget() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) *bool {
		if v == nil {
			return nil
		}
		return v.FailoverTarget
	}).(pulumi.BoolPtrOutput)
}

// This is always `sql#replicaConfiguration`.
func (o ReplicaConfigurationPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
func (o ReplicaConfigurationPtrOutput) MysqlReplicaConfiguration() MySqlReplicaConfigurationPtrOutput {
	return o.ApplyT(func(v *ReplicaConfiguration) *MySqlReplicaConfiguration {
		if v == nil {
			return nil
		}
		return v.MysqlReplicaConfiguration
	}).(MySqlReplicaConfigurationPtrOutput)
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfigurationResponse struct {
	// Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
	FailoverTarget bool `pulumi:"failoverTarget"`
	// This is always `sql#replicaConfiguration`.
	Kind string `pulumi:"kind"`
	// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
	MysqlReplicaConfiguration MySqlReplicaConfigurationResponse `pulumi:"mysqlReplicaConfiguration"`
}

// Read-replica configuration for connecting to the primary instance.
type ReplicaConfigurationResponseOutput struct{ *pulumi.OutputState }

func (ReplicaConfigurationResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaConfigurationResponse)(nil)).Elem()
}

func (o ReplicaConfigurationResponseOutput) ToReplicaConfigurationResponseOutput() ReplicaConfigurationResponseOutput {
	return o
}

func (o ReplicaConfigurationResponseOutput) ToReplicaConfigurationResponseOutputWithContext(ctx context.Context) ReplicaConfigurationResponseOutput {
	return o
}

func (o ReplicaConfigurationResponseOutput) ToOutput(ctx context.Context) pulumix.Output[ReplicaConfigurationResponse] {
	return pulumix.Output[ReplicaConfigurationResponse]{
		OutputState: o.OutputState,
	}
}

// Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
func (o ReplicaConfigurationResponseOutput) FailoverTarget() pulumi.BoolOutput {
	return o.ApplyT(func(v ReplicaConfigurationResponse) bool { return v.FailoverTarget }).(pulumi.BoolOutput)
}

// This is always `sql#replicaConfiguration`.
func (o ReplicaConfigurationResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ReplicaConfigurationResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// MySQL specific configuration when replicating from a MySQL on-premises primary instance. Replication configuration information such as the username, password, certificates, and keys are not stored in the instance metadata. The configuration information is used only to set up the replication connection and is stored by MySQL in a file named `master.info` in the data directory.
func (o ReplicaConfigurationResponseOutput) MysqlReplicaConfiguration() MySqlReplicaConfigurationResponseOutput {
	return o.ApplyT(func(v ReplicaConfigurationResponse) MySqlReplicaConfigurationResponse {
		return v.MysqlReplicaConfiguration
	}).(MySqlReplicaConfigurationResponseOutput)
}

// Database instance settings.
type Settings struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy *SettingsActivationPolicy `pulumi:"activationPolicy"`
	// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
	ActiveDirectoryConfig *SqlActiveDirectoryConfig `pulumi:"activeDirectoryConfig"`
	// Specifies advance machine configuration for the instance relevant only for SQL Server.
	AdvancedMachineFeatures *AdvancedMachineFeatures `pulumi:"advancedMachineFeatures"`
	// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	//
	// Deprecated: The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	AuthorizedGaeApplications []string `pulumi:"authorizedGaeApplications"`
	// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
	AvailabilityType *SettingsAvailabilityType `pulumi:"availabilityType"`
	// The daily backup configuration for the instance.
	BackupConfiguration *BackupConfiguration `pulumi:"backupConfiguration"`
	// The name of server Instance collation.
	Collation *string `pulumi:"collation"`
	// Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
	ConnectorEnforcement *SettingsConnectorEnforcement `pulumi:"connectorEnforcement"`
	// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
	CrashSafeReplicationEnabled *bool `pulumi:"crashSafeReplicationEnabled"`
	// The size of data disk, in GB. The data disk size minimum is 10GB.
	DataDiskSizeGb *string `pulumi:"dataDiskSizeGb"`
	// The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
	DataDiskType *SettingsDataDiskType `pulumi:"dataDiskType"`
	// The database flags passed to the instance at startup.
	DatabaseFlags []DatabaseFlags `pulumi:"databaseFlags"`
	// Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
	DatabaseReplicationEnabled *bool `pulumi:"databaseReplicationEnabled"`
	// Configuration to protect against accidental instance deletion.
	DeletionProtectionEnabled *bool `pulumi:"deletionProtectionEnabled"`
	// Deny maintenance periods
	DenyMaintenancePeriods []DenyMaintenancePeriod `pulumi:"denyMaintenancePeriods"`
	// Insights configuration, for now relevant only for Postgres.
	InsightsConfig *InsightsConfig `pulumi:"insightsConfig"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
	IpConfiguration *IpConfiguration `pulumi:"ipConfiguration"`
	// This is always `sql#settings`.
	Kind *string `pulumi:"kind"`
	// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
	LocationPreference *LocationPreference `pulumi:"locationPreference"`
	// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
	MaintenanceWindow *MaintenanceWindow `pulumi:"maintenanceWindow"`
	// The local user password validation policy of the instance.
	PasswordValidationPolicy *PasswordValidationPolicy `pulumi:"passwordValidationPolicy"`
	// The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
	PricingPlan *SettingsPricingPlan `pulumi:"pricingPlan"`
	// The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
	//
	// Deprecated: The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
	ReplicationType *SettingsReplicationType `pulumi:"replicationType"`
	// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
	SettingsVersion *string `pulumi:"settingsVersion"`
	// SQL Server specific audit configuration.
	SqlServerAuditConfig *SqlServerAuditConfig `pulumi:"sqlServerAuditConfig"`
	// Configuration to increase storage size automatically. The default value is true.
	StorageAutoResize *bool `pulumi:"storageAutoResize"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit *string `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
	Tier *string `pulumi:"tier"`
	// Server timezone, relevant only for Cloud SQL for SQL Server.
	TimeZone *string `pulumi:"timeZone"`
	// User-provided labels, represented as a dictionary where each label is a single key value pair.
	UserLabels map[string]string `pulumi:"userLabels"`
}

// SettingsInput is an input type that accepts SettingsArgs and SettingsOutput values.
// You can construct a concrete instance of `SettingsInput` via:
//
//	SettingsArgs{...}
type SettingsInput interface {
	pulumi.Input

	ToSettingsOutput() SettingsOutput
	ToSettingsOutputWithContext(context.Context) SettingsOutput
}

// Database instance settings.
type SettingsArgs struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy SettingsActivationPolicyPtrInput `pulumi:"activationPolicy"`
	// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
	ActiveDirectoryConfig SqlActiveDirectoryConfigPtrInput `pulumi:"activeDirectoryConfig"`
	// Specifies advance machine configuration for the instance relevant only for SQL Server.
	AdvancedMachineFeatures AdvancedMachineFeaturesPtrInput `pulumi:"advancedMachineFeatures"`
	// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	//
	// Deprecated: The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	AuthorizedGaeApplications pulumi.StringArrayInput `pulumi:"authorizedGaeApplications"`
	// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
	AvailabilityType SettingsAvailabilityTypePtrInput `pulumi:"availabilityType"`
	// The daily backup configuration for the instance.
	BackupConfiguration BackupConfigurationPtrInput `pulumi:"backupConfiguration"`
	// The name of server Instance collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
	ConnectorEnforcement SettingsConnectorEnforcementPtrInput `pulumi:"connectorEnforcement"`
	// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
	CrashSafeReplicationEnabled pulumi.BoolPtrInput `pulumi:"crashSafeReplicationEnabled"`
	// The size of data disk, in GB. The data disk size minimum is 10GB.
	DataDiskSizeGb pulumi.StringPtrInput `pulumi:"dataDiskSizeGb"`
	// The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
	DataDiskType SettingsDataDiskTypePtrInput `pulumi:"dataDiskType"`
	// The database flags passed to the instance at startup.
	DatabaseFlags DatabaseFlagsArrayInput `pulumi:"databaseFlags"`
	// Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
	DatabaseReplicationEnabled pulumi.BoolPtrInput `pulumi:"databaseReplicationEnabled"`
	// Configuration to protect against accidental instance deletion.
	DeletionProtectionEnabled pulumi.BoolPtrInput `pulumi:"deletionProtectionEnabled"`
	// Deny maintenance periods
	DenyMaintenancePeriods DenyMaintenancePeriodArrayInput `pulumi:"denyMaintenancePeriods"`
	// Insights configuration, for now relevant only for Postgres.
	InsightsConfig InsightsConfigPtrInput `pulumi:"insightsConfig"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
	IpConfiguration IpConfigurationPtrInput `pulumi:"ipConfiguration"`
	// This is always `sql#settings`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
	LocationPreference LocationPreferencePtrInput `pulumi:"locationPreference"`
	// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
	MaintenanceWindow MaintenanceWindowPtrInput `pulumi:"maintenanceWindow"`
	// The local user password validation policy of the instance.
	PasswordValidationPolicy PasswordValidationPolicyPtrInput `pulumi:"passwordValidationPolicy"`
	// The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
	PricingPlan SettingsPricingPlanPtrInput `pulumi:"pricingPlan"`
	// The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
	//
	// Deprecated: The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
	ReplicationType SettingsReplicationTypePtrInput `pulumi:"replicationType"`
	// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
	SettingsVersion pulumi.StringPtrInput `pulumi:"settingsVersion"`
	// SQL Server specific audit configuration.
	SqlServerAuditConfig SqlServerAuditConfigPtrInput `pulumi:"sqlServerAuditConfig"`
	// Configuration to increase storage size automatically. The default value is true.
	StorageAutoResize pulumi.BoolPtrInput `pulumi:"storageAutoResize"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit pulumi.StringPtrInput `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
	Tier pulumi.StringPtrInput `pulumi:"tier"`
	// Server timezone, relevant only for Cloud SQL for SQL Server.
	TimeZone pulumi.StringPtrInput `pulumi:"timeZone"`
	// User-provided labels, represented as a dictionary where each label is a single key value pair.
	UserLabels pulumi.StringMapInput `pulumi:"userLabels"`
}

func (SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Settings)(nil)).Elem()
}

func (i SettingsArgs) ToSettingsOutput() SettingsOutput {
	return i.ToSettingsOutputWithContext(context.Background())
}

func (i SettingsArgs) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput)
}

func (i SettingsArgs) ToOutput(ctx context.Context) pulumix.Output[Settings] {
	return pulumix.Output[Settings]{
		OutputState: i.ToSettingsOutputWithContext(ctx).OutputState,
	}
}

func (i SettingsArgs) ToSettingsPtrOutput() SettingsPtrOutput {
	return i.ToSettingsPtrOutputWithContext(context.Background())
}

func (i SettingsArgs) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsOutput).ToSettingsPtrOutputWithContext(ctx)
}

// SettingsPtrInput is an input type that accepts SettingsArgs, SettingsPtr and SettingsPtrOutput values.
// You can construct a concrete instance of `SettingsPtrInput` via:
//
//	        SettingsArgs{...}
//
//	or:
//
//	        nil
type SettingsPtrInput interface {
	pulumi.Input

	ToSettingsPtrOutput() SettingsPtrOutput
	ToSettingsPtrOutputWithContext(context.Context) SettingsPtrOutput
}

type settingsPtrType SettingsArgs

func SettingsPtr(v *SettingsArgs) SettingsPtrInput {
	return (*settingsPtrType)(v)
}

func (*settingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (i *settingsPtrType) ToSettingsPtrOutput() SettingsPtrOutput {
	return i.ToSettingsPtrOutputWithContext(context.Background())
}

func (i *settingsPtrType) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingsPtrOutput)
}

func (i *settingsPtrType) ToOutput(ctx context.Context) pulumix.Output[*Settings] {
	return pulumix.Output[*Settings]{
		OutputState: i.ToSettingsPtrOutputWithContext(ctx).OutputState,
	}
}

// Database instance settings.
type SettingsOutput struct{ *pulumi.OutputState }

func (SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Settings)(nil)).Elem()
}

func (o SettingsOutput) ToSettingsOutput() SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsOutputWithContext(ctx context.Context) SettingsOutput {
	return o
}

func (o SettingsOutput) ToSettingsPtrOutput() SettingsPtrOutput {
	return o.ToSettingsPtrOutputWithContext(context.Background())
}

func (o SettingsOutput) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Settings) *Settings {
		return &v
	}).(SettingsPtrOutput)
}

func (o SettingsOutput) ToOutput(ctx context.Context) pulumix.Output[Settings] {
	return pulumix.Output[Settings]{
		OutputState: o.OutputState,
	}
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
func (o SettingsOutput) ActivationPolicy() SettingsActivationPolicyPtrOutput {
	return o.ApplyT(func(v Settings) *SettingsActivationPolicy { return v.ActivationPolicy }).(SettingsActivationPolicyPtrOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
func (o SettingsOutput) ActiveDirectoryConfig() SqlActiveDirectoryConfigPtrOutput {
	return o.ApplyT(func(v Settings) *SqlActiveDirectoryConfig { return v.ActiveDirectoryConfig }).(SqlActiveDirectoryConfigPtrOutput)
}

// Specifies advance machine configuration for the instance relevant only for SQL Server.
func (o SettingsOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesPtrOutput {
	return o.ApplyT(func(v Settings) *AdvancedMachineFeatures { return v.AdvancedMachineFeatures }).(AdvancedMachineFeaturesPtrOutput)
}

// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
//
// Deprecated: The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
func (o SettingsOutput) AuthorizedGaeApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Settings) []string { return v.AuthorizedGaeApplications }).(pulumi.StringArrayOutput)
}

// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
func (o SettingsOutput) AvailabilityType() SettingsAvailabilityTypePtrOutput {
	return o.ApplyT(func(v Settings) *SettingsAvailabilityType { return v.AvailabilityType }).(SettingsAvailabilityTypePtrOutput)
}

// The daily backup configuration for the instance.
func (o SettingsOutput) BackupConfiguration() BackupConfigurationPtrOutput {
	return o.ApplyT(func(v Settings) *BackupConfiguration { return v.BackupConfiguration }).(BackupConfigurationPtrOutput)
}

// The name of server Instance collation.
func (o SettingsOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
func (o SettingsOutput) ConnectorEnforcement() SettingsConnectorEnforcementPtrOutput {
	return o.ApplyT(func(v Settings) *SettingsConnectorEnforcement { return v.ConnectorEnforcement }).(SettingsConnectorEnforcementPtrOutput)
}

// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
func (o SettingsOutput) CrashSafeReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.CrashSafeReplicationEnabled }).(pulumi.BoolPtrOutput)
}

// The size of data disk, in GB. The data disk size minimum is 10GB.
func (o SettingsOutput) DataDiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.DataDiskSizeGb }).(pulumi.StringPtrOutput)
}

// The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
func (o SettingsOutput) DataDiskType() SettingsDataDiskTypePtrOutput {
	return o.ApplyT(func(v Settings) *SettingsDataDiskType { return v.DataDiskType }).(SettingsDataDiskTypePtrOutput)
}

// The database flags passed to the instance at startup.
func (o SettingsOutput) DatabaseFlags() DatabaseFlagsArrayOutput {
	return o.ApplyT(func(v Settings) []DatabaseFlags { return v.DatabaseFlags }).(DatabaseFlagsArrayOutput)
}

// Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
func (o SettingsOutput) DatabaseReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.DatabaseReplicationEnabled }).(pulumi.BoolPtrOutput)
}

// Configuration to protect against accidental instance deletion.
func (o SettingsOutput) DeletionProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.DeletionProtectionEnabled }).(pulumi.BoolPtrOutput)
}

// Deny maintenance periods
func (o SettingsOutput) DenyMaintenancePeriods() DenyMaintenancePeriodArrayOutput {
	return o.ApplyT(func(v Settings) []DenyMaintenancePeriod { return v.DenyMaintenancePeriods }).(DenyMaintenancePeriodArrayOutput)
}

// Insights configuration, for now relevant only for Postgres.
func (o SettingsOutput) InsightsConfig() InsightsConfigPtrOutput {
	return o.ApplyT(func(v Settings) *InsightsConfig { return v.InsightsConfig }).(InsightsConfigPtrOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
func (o SettingsOutput) IpConfiguration() IpConfigurationPtrOutput {
	return o.ApplyT(func(v Settings) *IpConfiguration { return v.IpConfiguration }).(IpConfigurationPtrOutput)
}

// This is always `sql#settings`.
func (o SettingsOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
func (o SettingsOutput) LocationPreference() LocationPreferencePtrOutput {
	return o.ApplyT(func(v Settings) *LocationPreference { return v.LocationPreference }).(LocationPreferencePtrOutput)
}

// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
func (o SettingsOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v Settings) *MaintenanceWindow { return v.MaintenanceWindow }).(MaintenanceWindowPtrOutput)
}

// The local user password validation policy of the instance.
func (o SettingsOutput) PasswordValidationPolicy() PasswordValidationPolicyPtrOutput {
	return o.ApplyT(func(v Settings) *PasswordValidationPolicy { return v.PasswordValidationPolicy }).(PasswordValidationPolicyPtrOutput)
}

// The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
func (o SettingsOutput) PricingPlan() SettingsPricingPlanPtrOutput {
	return o.ApplyT(func(v Settings) *SettingsPricingPlan { return v.PricingPlan }).(SettingsPricingPlanPtrOutput)
}

// The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
//
// Deprecated: The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
func (o SettingsOutput) ReplicationType() SettingsReplicationTypePtrOutput {
	return o.ApplyT(func(v Settings) *SettingsReplicationType { return v.ReplicationType }).(SettingsReplicationTypePtrOutput)
}

// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
func (o SettingsOutput) SettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.SettingsVersion }).(pulumi.StringPtrOutput)
}

// SQL Server specific audit configuration.
func (o SettingsOutput) SqlServerAuditConfig() SqlServerAuditConfigPtrOutput {
	return o.ApplyT(func(v Settings) *SqlServerAuditConfig { return v.SqlServerAuditConfig }).(SqlServerAuditConfigPtrOutput)
}

// Configuration to increase storage size automatically. The default value is true.
func (o SettingsOutput) StorageAutoResize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Settings) *bool { return v.StorageAutoResize }).(pulumi.BoolPtrOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o SettingsOutput) StorageAutoResizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.StorageAutoResizeLimit }).(pulumi.StringPtrOutput)
}

// The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
func (o SettingsOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.Tier }).(pulumi.StringPtrOutput)
}

// Server timezone, relevant only for Cloud SQL for SQL Server.
func (o SettingsOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Settings) *string { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// User-provided labels, represented as a dictionary where each label is a single key value pair.
func (o SettingsOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v Settings) map[string]string { return v.UserLabels }).(pulumi.StringMapOutput)
}

type SettingsPtrOutput struct{ *pulumi.OutputState }

func (SettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Settings)(nil)).Elem()
}

func (o SettingsPtrOutput) ToSettingsPtrOutput() SettingsPtrOutput {
	return o
}

func (o SettingsPtrOutput) ToSettingsPtrOutputWithContext(ctx context.Context) SettingsPtrOutput {
	return o
}

func (o SettingsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*Settings] {
	return pulumix.Output[*Settings]{
		OutputState: o.OutputState,
	}
}

func (o SettingsPtrOutput) Elem() SettingsOutput {
	return o.ApplyT(func(v *Settings) Settings {
		if v != nil {
			return *v
		}
		var ret Settings
		return ret
	}).(SettingsOutput)
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
func (o SettingsPtrOutput) ActivationPolicy() SettingsActivationPolicyPtrOutput {
	return o.ApplyT(func(v *Settings) *SettingsActivationPolicy {
		if v == nil {
			return nil
		}
		return v.ActivationPolicy
	}).(SettingsActivationPolicyPtrOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
func (o SettingsPtrOutput) ActiveDirectoryConfig() SqlActiveDirectoryConfigPtrOutput {
	return o.ApplyT(func(v *Settings) *SqlActiveDirectoryConfig {
		if v == nil {
			return nil
		}
		return v.ActiveDirectoryConfig
	}).(SqlActiveDirectoryConfigPtrOutput)
}

// Specifies advance machine configuration for the instance relevant only for SQL Server.
func (o SettingsPtrOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesPtrOutput {
	return o.ApplyT(func(v *Settings) *AdvancedMachineFeatures {
		if v == nil {
			return nil
		}
		return v.AdvancedMachineFeatures
	}).(AdvancedMachineFeaturesPtrOutput)
}

// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
//
// Deprecated: The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
func (o SettingsPtrOutput) AuthorizedGaeApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Settings) []string {
		if v == nil {
			return nil
		}
		return v.AuthorizedGaeApplications
	}).(pulumi.StringArrayOutput)
}

// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
func (o SettingsPtrOutput) AvailabilityType() SettingsAvailabilityTypePtrOutput {
	return o.ApplyT(func(v *Settings) *SettingsAvailabilityType {
		if v == nil {
			return nil
		}
		return v.AvailabilityType
	}).(SettingsAvailabilityTypePtrOutput)
}

// The daily backup configuration for the instance.
func (o SettingsPtrOutput) BackupConfiguration() BackupConfigurationPtrOutput {
	return o.ApplyT(func(v *Settings) *BackupConfiguration {
		if v == nil {
			return nil
		}
		return v.BackupConfiguration
	}).(BackupConfigurationPtrOutput)
}

// The name of server Instance collation.
func (o SettingsPtrOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.Collation
	}).(pulumi.StringPtrOutput)
}

// Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
func (o SettingsPtrOutput) ConnectorEnforcement() SettingsConnectorEnforcementPtrOutput {
	return o.ApplyT(func(v *Settings) *SettingsConnectorEnforcement {
		if v == nil {
			return nil
		}
		return v.ConnectorEnforcement
	}).(SettingsConnectorEnforcementPtrOutput)
}

// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
func (o SettingsPtrOutput) CrashSafeReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.CrashSafeReplicationEnabled
	}).(pulumi.BoolPtrOutput)
}

// The size of data disk, in GB. The data disk size minimum is 10GB.
func (o SettingsPtrOutput) DataDiskSizeGb() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.DataDiskSizeGb
	}).(pulumi.StringPtrOutput)
}

// The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
func (o SettingsPtrOutput) DataDiskType() SettingsDataDiskTypePtrOutput {
	return o.ApplyT(func(v *Settings) *SettingsDataDiskType {
		if v == nil {
			return nil
		}
		return v.DataDiskType
	}).(SettingsDataDiskTypePtrOutput)
}

// The database flags passed to the instance at startup.
func (o SettingsPtrOutput) DatabaseFlags() DatabaseFlagsArrayOutput {
	return o.ApplyT(func(v *Settings) []DatabaseFlags {
		if v == nil {
			return nil
		}
		return v.DatabaseFlags
	}).(DatabaseFlagsArrayOutput)
}

// Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
func (o SettingsPtrOutput) DatabaseReplicationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.DatabaseReplicationEnabled
	}).(pulumi.BoolPtrOutput)
}

// Configuration to protect against accidental instance deletion.
func (o SettingsPtrOutput) DeletionProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.DeletionProtectionEnabled
	}).(pulumi.BoolPtrOutput)
}

// Deny maintenance periods
func (o SettingsPtrOutput) DenyMaintenancePeriods() DenyMaintenancePeriodArrayOutput {
	return o.ApplyT(func(v *Settings) []DenyMaintenancePeriod {
		if v == nil {
			return nil
		}
		return v.DenyMaintenancePeriods
	}).(DenyMaintenancePeriodArrayOutput)
}

// Insights configuration, for now relevant only for Postgres.
func (o SettingsPtrOutput) InsightsConfig() InsightsConfigPtrOutput {
	return o.ApplyT(func(v *Settings) *InsightsConfig {
		if v == nil {
			return nil
		}
		return v.InsightsConfig
	}).(InsightsConfigPtrOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
func (o SettingsPtrOutput) IpConfiguration() IpConfigurationPtrOutput {
	return o.ApplyT(func(v *Settings) *IpConfiguration {
		if v == nil {
			return nil
		}
		return v.IpConfiguration
	}).(IpConfigurationPtrOutput)
}

// This is always `sql#settings`.
func (o SettingsPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
func (o SettingsPtrOutput) LocationPreference() LocationPreferencePtrOutput {
	return o.ApplyT(func(v *Settings) *LocationPreference {
		if v == nil {
			return nil
		}
		return v.LocationPreference
	}).(LocationPreferencePtrOutput)
}

// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
func (o SettingsPtrOutput) MaintenanceWindow() MaintenanceWindowPtrOutput {
	return o.ApplyT(func(v *Settings) *MaintenanceWindow {
		if v == nil {
			return nil
		}
		return v.MaintenanceWindow
	}).(MaintenanceWindowPtrOutput)
}

// The local user password validation policy of the instance.
func (o SettingsPtrOutput) PasswordValidationPolicy() PasswordValidationPolicyPtrOutput {
	return o.ApplyT(func(v *Settings) *PasswordValidationPolicy {
		if v == nil {
			return nil
		}
		return v.PasswordValidationPolicy
	}).(PasswordValidationPolicyPtrOutput)
}

// The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
func (o SettingsPtrOutput) PricingPlan() SettingsPricingPlanPtrOutput {
	return o.ApplyT(func(v *Settings) *SettingsPricingPlan {
		if v == nil {
			return nil
		}
		return v.PricingPlan
	}).(SettingsPricingPlanPtrOutput)
}

// The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
//
// Deprecated: The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
func (o SettingsPtrOutput) ReplicationType() SettingsReplicationTypePtrOutput {
	return o.ApplyT(func(v *Settings) *SettingsReplicationType {
		if v == nil {
			return nil
		}
		return v.ReplicationType
	}).(SettingsReplicationTypePtrOutput)
}

// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
func (o SettingsPtrOutput) SettingsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.SettingsVersion
	}).(pulumi.StringPtrOutput)
}

// SQL Server specific audit configuration.
func (o SettingsPtrOutput) SqlServerAuditConfig() SqlServerAuditConfigPtrOutput {
	return o.ApplyT(func(v *Settings) *SqlServerAuditConfig {
		if v == nil {
			return nil
		}
		return v.SqlServerAuditConfig
	}).(SqlServerAuditConfigPtrOutput)
}

// Configuration to increase storage size automatically. The default value is true.
func (o SettingsPtrOutput) StorageAutoResize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Settings) *bool {
		if v == nil {
			return nil
		}
		return v.StorageAutoResize
	}).(pulumi.BoolPtrOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o SettingsPtrOutput) StorageAutoResizeLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.StorageAutoResizeLimit
	}).(pulumi.StringPtrOutput)
}

// The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
func (o SettingsPtrOutput) Tier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.Tier
	}).(pulumi.StringPtrOutput)
}

// Server timezone, relevant only for Cloud SQL for SQL Server.
func (o SettingsPtrOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Settings) *string {
		if v == nil {
			return nil
		}
		return v.TimeZone
	}).(pulumi.StringPtrOutput)
}

// User-provided labels, represented as a dictionary where each label is a single key value pair.
func (o SettingsPtrOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Settings) map[string]string {
		if v == nil {
			return nil
		}
		return v.UserLabels
	}).(pulumi.StringMapOutput)
}

// Database instance settings.
type SettingsResponse struct {
	// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
	ActivationPolicy string `pulumi:"activationPolicy"`
	// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
	ActiveDirectoryConfig SqlActiveDirectoryConfigResponse `pulumi:"activeDirectoryConfig"`
	// Specifies advance machine configuration for the instance relevant only for SQL Server.
	AdvancedMachineFeatures AdvancedMachineFeaturesResponse `pulumi:"advancedMachineFeatures"`
	// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	//
	// Deprecated: The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
	AuthorizedGaeApplications []string `pulumi:"authorizedGaeApplications"`
	// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
	AvailabilityType string `pulumi:"availabilityType"`
	// The daily backup configuration for the instance.
	BackupConfiguration BackupConfigurationResponse `pulumi:"backupConfiguration"`
	// The name of server Instance collation.
	Collation string `pulumi:"collation"`
	// Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
	ConnectorEnforcement string `pulumi:"connectorEnforcement"`
	// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
	CrashSafeReplicationEnabled bool `pulumi:"crashSafeReplicationEnabled"`
	// The size of data disk, in GB. The data disk size minimum is 10GB.
	DataDiskSizeGb string `pulumi:"dataDiskSizeGb"`
	// The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
	DataDiskType string `pulumi:"dataDiskType"`
	// The database flags passed to the instance at startup.
	DatabaseFlags []DatabaseFlagsResponse `pulumi:"databaseFlags"`
	// Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
	DatabaseReplicationEnabled bool `pulumi:"databaseReplicationEnabled"`
	// Configuration to protect against accidental instance deletion.
	DeletionProtectionEnabled bool `pulumi:"deletionProtectionEnabled"`
	// Deny maintenance periods
	DenyMaintenancePeriods []DenyMaintenancePeriodResponse `pulumi:"denyMaintenancePeriods"`
	// Insights configuration, for now relevant only for Postgres.
	InsightsConfig InsightsConfigResponse `pulumi:"insightsConfig"`
	// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
	IpConfiguration IpConfigurationResponse `pulumi:"ipConfiguration"`
	// This is always `sql#settings`.
	Kind string `pulumi:"kind"`
	// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
	LocationPreference LocationPreferenceResponse `pulumi:"locationPreference"`
	// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
	MaintenanceWindow MaintenanceWindowResponse `pulumi:"maintenanceWindow"`
	// The local user password validation policy of the instance.
	PasswordValidationPolicy PasswordValidationPolicyResponse `pulumi:"passwordValidationPolicy"`
	// The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
	PricingPlan string `pulumi:"pricingPlan"`
	// The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
	//
	// Deprecated: The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
	ReplicationType string `pulumi:"replicationType"`
	// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
	SettingsVersion string `pulumi:"settingsVersion"`
	// SQL Server specific audit configuration.
	SqlServerAuditConfig SqlServerAuditConfigResponse `pulumi:"sqlServerAuditConfig"`
	// Configuration to increase storage size automatically. The default value is true.
	StorageAutoResize bool `pulumi:"storageAutoResize"`
	// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
	StorageAutoResizeLimit string `pulumi:"storageAutoResizeLimit"`
	// The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
	Tier string `pulumi:"tier"`
	// Server timezone, relevant only for Cloud SQL for SQL Server.
	TimeZone string `pulumi:"timeZone"`
	// User-provided labels, represented as a dictionary where each label is a single key value pair.
	UserLabels map[string]string `pulumi:"userLabels"`
}

// Database instance settings.
type SettingsResponseOutput struct{ *pulumi.OutputState }

func (SettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SettingsResponse)(nil)).Elem()
}

func (o SettingsResponseOutput) ToSettingsResponseOutput() SettingsResponseOutput {
	return o
}

func (o SettingsResponseOutput) ToSettingsResponseOutputWithContext(ctx context.Context) SettingsResponseOutput {
	return o
}

func (o SettingsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SettingsResponse] {
	return pulumix.Output[SettingsResponse]{
		OutputState: o.OutputState,
	}
}

// The activation policy specifies when the instance is activated; it is applicable only when the instance state is RUNNABLE. Valid values: * `ALWAYS`: The instance is on, and remains so even in the absence of connection requests. * `NEVER`: The instance is off; it is not activated, even if a connection request arrives.
func (o SettingsResponseOutput) ActivationPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.ActivationPolicy }).(pulumi.StringOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
func (o SettingsResponseOutput) ActiveDirectoryConfig() SqlActiveDirectoryConfigResponseOutput {
	return o.ApplyT(func(v SettingsResponse) SqlActiveDirectoryConfigResponse { return v.ActiveDirectoryConfig }).(SqlActiveDirectoryConfigResponseOutput)
}

// Specifies advance machine configuration for the instance relevant only for SQL Server.
func (o SettingsResponseOutput) AdvancedMachineFeatures() AdvancedMachineFeaturesResponseOutput {
	return o.ApplyT(func(v SettingsResponse) AdvancedMachineFeaturesResponse { return v.AdvancedMachineFeatures }).(AdvancedMachineFeaturesResponseOutput)
}

// The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
//
// Deprecated: The App Engine app IDs that can access this instance. (Deprecated) Applied to First Generation instances only.
func (o SettingsResponseOutput) AuthorizedGaeApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SettingsResponse) []string { return v.AuthorizedGaeApplications }).(pulumi.StringArrayOutput)
}

// Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data accessibility. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available)./ For more information, see [Overview of the High Availability Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
func (o SettingsResponseOutput) AvailabilityType() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.AvailabilityType }).(pulumi.StringOutput)
}

// The daily backup configuration for the instance.
func (o SettingsResponseOutput) BackupConfiguration() BackupConfigurationResponseOutput {
	return o.ApplyT(func(v SettingsResponse) BackupConfigurationResponse { return v.BackupConfiguration }).(BackupConfigurationResponseOutput)
}

// The name of server Instance collation.
func (o SettingsResponseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.Collation }).(pulumi.StringOutput)
}

// Specifies if connections must use Cloud SQL connectors. Option values include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that use Cloud SQL Connectors) Note that using REQUIRED disables all existing authorized networks. If this field is not specified when creating a new instance, NOT_REQUIRED is used. If this field is not specified when patching or updating an existing instance, it is left unchanged in the instance.
func (o SettingsResponseOutput) ConnectorEnforcement() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.ConnectorEnforcement }).(pulumi.StringOutput)
}

// Configuration specific to read replica instances. Indicates whether database flags for crash-safe replication are enabled. This property was only applicable to First Generation instances.
func (o SettingsResponseOutput) CrashSafeReplicationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SettingsResponse) bool { return v.CrashSafeReplicationEnabled }).(pulumi.BoolOutput)
}

// The size of data disk, in GB. The data disk size minimum is 10GB.
func (o SettingsResponseOutput) DataDiskSizeGb() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.DataDiskSizeGb }).(pulumi.StringOutput)
}

// The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First Generation instances.
func (o SettingsResponseOutput) DataDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.DataDiskType }).(pulumi.StringOutput)
}

// The database flags passed to the instance at startup.
func (o SettingsResponseOutput) DatabaseFlags() DatabaseFlagsResponseArrayOutput {
	return o.ApplyT(func(v SettingsResponse) []DatabaseFlagsResponse { return v.DatabaseFlags }).(DatabaseFlagsResponseArrayOutput)
}

// Configuration specific to read replica instances. Indicates whether replication is enabled or not. WARNING: Changing this restarts the instance.
func (o SettingsResponseOutput) DatabaseReplicationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SettingsResponse) bool { return v.DatabaseReplicationEnabled }).(pulumi.BoolOutput)
}

// Configuration to protect against accidental instance deletion.
func (o SettingsResponseOutput) DeletionProtectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SettingsResponse) bool { return v.DeletionProtectionEnabled }).(pulumi.BoolOutput)
}

// Deny maintenance periods
func (o SettingsResponseOutput) DenyMaintenancePeriods() DenyMaintenancePeriodResponseArrayOutput {
	return o.ApplyT(func(v SettingsResponse) []DenyMaintenancePeriodResponse { return v.DenyMaintenancePeriods }).(DenyMaintenancePeriodResponseArrayOutput)
}

// Insights configuration, for now relevant only for Postgres.
func (o SettingsResponseOutput) InsightsConfig() InsightsConfigResponseOutput {
	return o.ApplyT(func(v SettingsResponse) InsightsConfigResponse { return v.InsightsConfig }).(InsightsConfigResponseOutput)
}

// The settings for IP Management. This allows to enable or disable the instance IP and manage which external networks can connect to the instance. The IPv4 address cannot be disabled for Second Generation instances.
func (o SettingsResponseOutput) IpConfiguration() IpConfigurationResponseOutput {
	return o.ApplyT(func(v SettingsResponse) IpConfigurationResponse { return v.IpConfiguration }).(IpConfigurationResponseOutput)
}

// This is always `sql#settings`.
func (o SettingsResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The location preference settings. This allows the instance to be located as near as possible to either an App Engine app or Compute Engine zone for better performance. App Engine co-location was only applicable to First Generation instances.
func (o SettingsResponseOutput) LocationPreference() LocationPreferenceResponseOutput {
	return o.ApplyT(func(v SettingsResponse) LocationPreferenceResponse { return v.LocationPreference }).(LocationPreferenceResponseOutput)
}

// The maintenance window for this instance. This specifies when the instance can be restarted for maintenance purposes.
func (o SettingsResponseOutput) MaintenanceWindow() MaintenanceWindowResponseOutput {
	return o.ApplyT(func(v SettingsResponse) MaintenanceWindowResponse { return v.MaintenanceWindow }).(MaintenanceWindowResponseOutput)
}

// The local user password validation policy of the instance.
func (o SettingsResponseOutput) PasswordValidationPolicy() PasswordValidationPolicyResponseOutput {
	return o.ApplyT(func(v SettingsResponse) PasswordValidationPolicyResponse { return v.PasswordValidationPolicy }).(PasswordValidationPolicyResponseOutput)
}

// The pricing plan for this instance. This can be either `PER_USE` or `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
func (o SettingsResponseOutput) PricingPlan() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.PricingPlan }).(pulumi.StringOutput)
}

// The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
//
// Deprecated: The type of replication this instance uses. This can be either `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only applicable to First Generation instances.
func (o SettingsResponseOutput) ReplicationType() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.ReplicationType }).(pulumi.StringOutput)
}

// The version of instance settings. This is a required field for update method to make sure concurrent updates are handled properly. During update, use the most recent settingsVersion value for this instance and do not try to update this value.
func (o SettingsResponseOutput) SettingsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.SettingsVersion }).(pulumi.StringOutput)
}

// SQL Server specific audit configuration.
func (o SettingsResponseOutput) SqlServerAuditConfig() SqlServerAuditConfigResponseOutput {
	return o.ApplyT(func(v SettingsResponse) SqlServerAuditConfigResponse { return v.SqlServerAuditConfig }).(SqlServerAuditConfigResponseOutput)
}

// Configuration to increase storage size automatically. The default value is true.
func (o SettingsResponseOutput) StorageAutoResize() pulumi.BoolOutput {
	return o.ApplyT(func(v SettingsResponse) bool { return v.StorageAutoResize }).(pulumi.BoolOutput)
}

// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
func (o SettingsResponseOutput) StorageAutoResizeLimit() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.StorageAutoResizeLimit }).(pulumi.StringOutput)
}

// The tier (or machine type) for this instance, for example `db-custom-1-3840`. WARNING: Changing this restarts the instance.
func (o SettingsResponseOutput) Tier() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.Tier }).(pulumi.StringOutput)
}

// Server timezone, relevant only for Cloud SQL for SQL Server.
func (o SettingsResponseOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v SettingsResponse) string { return v.TimeZone }).(pulumi.StringOutput)
}

// User-provided labels, represented as a dictionary where each label is a single key value pair.
func (o SettingsResponseOutput) UserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v SettingsResponse) map[string]string { return v.UserLabels }).(pulumi.StringMapOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfig struct {
	// The name of the domain (e.g., mydomain.com).
	Domain *string `pulumi:"domain"`
	// This is always sql#activeDirectoryConfig.
	Kind *string `pulumi:"kind"`
}

// SqlActiveDirectoryConfigInput is an input type that accepts SqlActiveDirectoryConfigArgs and SqlActiveDirectoryConfigOutput values.
// You can construct a concrete instance of `SqlActiveDirectoryConfigInput` via:
//
//	SqlActiveDirectoryConfigArgs{...}
type SqlActiveDirectoryConfigInput interface {
	pulumi.Input

	ToSqlActiveDirectoryConfigOutput() SqlActiveDirectoryConfigOutput
	ToSqlActiveDirectoryConfigOutputWithContext(context.Context) SqlActiveDirectoryConfigOutput
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfigArgs struct {
	// The name of the domain (e.g., mydomain.com).
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// This is always sql#activeDirectoryConfig.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (SqlActiveDirectoryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlActiveDirectoryConfig)(nil)).Elem()
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigOutput() SqlActiveDirectoryConfigOutput {
	return i.ToSqlActiveDirectoryConfigOutputWithContext(context.Background())
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlActiveDirectoryConfigOutput)
}

func (i SqlActiveDirectoryConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SqlActiveDirectoryConfig] {
	return pulumix.Output[SqlActiveDirectoryConfig]{
		OutputState: i.ToSqlActiveDirectoryConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return i.ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i SqlActiveDirectoryConfigArgs) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlActiveDirectoryConfigOutput).ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx)
}

// SqlActiveDirectoryConfigPtrInput is an input type that accepts SqlActiveDirectoryConfigArgs, SqlActiveDirectoryConfigPtr and SqlActiveDirectoryConfigPtrOutput values.
// You can construct a concrete instance of `SqlActiveDirectoryConfigPtrInput` via:
//
//	        SqlActiveDirectoryConfigArgs{...}
//
//	or:
//
//	        nil
type SqlActiveDirectoryConfigPtrInput interface {
	pulumi.Input

	ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput
	ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Context) SqlActiveDirectoryConfigPtrOutput
}

type sqlActiveDirectoryConfigPtrType SqlActiveDirectoryConfigArgs

func SqlActiveDirectoryConfigPtr(v *SqlActiveDirectoryConfigArgs) SqlActiveDirectoryConfigPtrInput {
	return (*sqlActiveDirectoryConfigPtrType)(v)
}

func (*sqlActiveDirectoryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlActiveDirectoryConfig)(nil)).Elem()
}

func (i *sqlActiveDirectoryConfigPtrType) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return i.ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Background())
}

func (i *sqlActiveDirectoryConfigPtrType) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlActiveDirectoryConfigPtrOutput)
}

func (i *sqlActiveDirectoryConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SqlActiveDirectoryConfig] {
	return pulumix.Output[*SqlActiveDirectoryConfig]{
		OutputState: i.ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfigOutput struct{ *pulumi.OutputState }

func (SqlActiveDirectoryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlActiveDirectoryConfig)(nil)).Elem()
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigOutput() SqlActiveDirectoryConfigOutput {
	return o
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigOutput {
	return o
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return o.ToSqlActiveDirectoryConfigPtrOutputWithContext(context.Background())
}

func (o SqlActiveDirectoryConfigOutput) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlActiveDirectoryConfig) *SqlActiveDirectoryConfig {
		return &v
	}).(SqlActiveDirectoryConfigPtrOutput)
}

func (o SqlActiveDirectoryConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SqlActiveDirectoryConfig] {
	return pulumix.Output[SqlActiveDirectoryConfig]{
		OutputState: o.OutputState,
	}
}

// The name of the domain (e.g., mydomain.com).
func (o SqlActiveDirectoryConfigOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlActiveDirectoryConfig) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// This is always sql#activeDirectoryConfig.
func (o SqlActiveDirectoryConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlActiveDirectoryConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type SqlActiveDirectoryConfigPtrOutput struct{ *pulumi.OutputState }

func (SqlActiveDirectoryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlActiveDirectoryConfig)(nil)).Elem()
}

func (o SqlActiveDirectoryConfigPtrOutput) ToSqlActiveDirectoryConfigPtrOutput() SqlActiveDirectoryConfigPtrOutput {
	return o
}

func (o SqlActiveDirectoryConfigPtrOutput) ToSqlActiveDirectoryConfigPtrOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigPtrOutput {
	return o
}

func (o SqlActiveDirectoryConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlActiveDirectoryConfig] {
	return pulumix.Output[*SqlActiveDirectoryConfig]{
		OutputState: o.OutputState,
	}
}

func (o SqlActiveDirectoryConfigPtrOutput) Elem() SqlActiveDirectoryConfigOutput {
	return o.ApplyT(func(v *SqlActiveDirectoryConfig) SqlActiveDirectoryConfig {
		if v != nil {
			return *v
		}
		var ret SqlActiveDirectoryConfig
		return ret
	}).(SqlActiveDirectoryConfigOutput)
}

// The name of the domain (e.g., mydomain.com).
func (o SqlActiveDirectoryConfigPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlActiveDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// This is always sql#activeDirectoryConfig.
func (o SqlActiveDirectoryConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlActiveDirectoryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfigResponse struct {
	// The name of the domain (e.g., mydomain.com).
	Domain string `pulumi:"domain"`
	// This is always sql#activeDirectoryConfig.
	Kind string `pulumi:"kind"`
}

// Active Directory configuration, relevant only for Cloud SQL for SQL Server.
type SqlActiveDirectoryConfigResponseOutput struct{ *pulumi.OutputState }

func (SqlActiveDirectoryConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlActiveDirectoryConfigResponse)(nil)).Elem()
}

func (o SqlActiveDirectoryConfigResponseOutput) ToSqlActiveDirectoryConfigResponseOutput() SqlActiveDirectoryConfigResponseOutput {
	return o
}

func (o SqlActiveDirectoryConfigResponseOutput) ToSqlActiveDirectoryConfigResponseOutputWithContext(ctx context.Context) SqlActiveDirectoryConfigResponseOutput {
	return o
}

func (o SqlActiveDirectoryConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SqlActiveDirectoryConfigResponse] {
	return pulumix.Output[SqlActiveDirectoryConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the domain (e.g., mydomain.com).
func (o SqlActiveDirectoryConfigResponseOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v SqlActiveDirectoryConfigResponse) string { return v.Domain }).(pulumi.StringOutput)
}

// This is always sql#activeDirectoryConfig.
func (o SqlActiveDirectoryConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v SqlActiveDirectoryConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// This message wraps up the information written by out-of-disk detection job.
type SqlOutOfDiskReport struct {
	// The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
	SqlMinRecommendedIncreaseSizeGb *int `pulumi:"sqlMinRecommendedIncreaseSizeGb"`
	// This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
	SqlOutOfDiskState *SqlOutOfDiskReportSqlOutOfDiskState `pulumi:"sqlOutOfDiskState"`
}

// SqlOutOfDiskReportInput is an input type that accepts SqlOutOfDiskReportArgs and SqlOutOfDiskReportOutput values.
// You can construct a concrete instance of `SqlOutOfDiskReportInput` via:
//
//	SqlOutOfDiskReportArgs{...}
type SqlOutOfDiskReportInput interface {
	pulumi.Input

	ToSqlOutOfDiskReportOutput() SqlOutOfDiskReportOutput
	ToSqlOutOfDiskReportOutputWithContext(context.Context) SqlOutOfDiskReportOutput
}

// This message wraps up the information written by out-of-disk detection job.
type SqlOutOfDiskReportArgs struct {
	// The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
	SqlMinRecommendedIncreaseSizeGb pulumi.IntPtrInput `pulumi:"sqlMinRecommendedIncreaseSizeGb"`
	// This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
	SqlOutOfDiskState SqlOutOfDiskReportSqlOutOfDiskStatePtrInput `pulumi:"sqlOutOfDiskState"`
}

func (SqlOutOfDiskReportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlOutOfDiskReport)(nil)).Elem()
}

func (i SqlOutOfDiskReportArgs) ToSqlOutOfDiskReportOutput() SqlOutOfDiskReportOutput {
	return i.ToSqlOutOfDiskReportOutputWithContext(context.Background())
}

func (i SqlOutOfDiskReportArgs) ToSqlOutOfDiskReportOutputWithContext(ctx context.Context) SqlOutOfDiskReportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlOutOfDiskReportOutput)
}

func (i SqlOutOfDiskReportArgs) ToOutput(ctx context.Context) pulumix.Output[SqlOutOfDiskReport] {
	return pulumix.Output[SqlOutOfDiskReport]{
		OutputState: i.ToSqlOutOfDiskReportOutputWithContext(ctx).OutputState,
	}
}

func (i SqlOutOfDiskReportArgs) ToSqlOutOfDiskReportPtrOutput() SqlOutOfDiskReportPtrOutput {
	return i.ToSqlOutOfDiskReportPtrOutputWithContext(context.Background())
}

func (i SqlOutOfDiskReportArgs) ToSqlOutOfDiskReportPtrOutputWithContext(ctx context.Context) SqlOutOfDiskReportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlOutOfDiskReportOutput).ToSqlOutOfDiskReportPtrOutputWithContext(ctx)
}

// SqlOutOfDiskReportPtrInput is an input type that accepts SqlOutOfDiskReportArgs, SqlOutOfDiskReportPtr and SqlOutOfDiskReportPtrOutput values.
// You can construct a concrete instance of `SqlOutOfDiskReportPtrInput` via:
//
//	        SqlOutOfDiskReportArgs{...}
//
//	or:
//
//	        nil
type SqlOutOfDiskReportPtrInput interface {
	pulumi.Input

	ToSqlOutOfDiskReportPtrOutput() SqlOutOfDiskReportPtrOutput
	ToSqlOutOfDiskReportPtrOutputWithContext(context.Context) SqlOutOfDiskReportPtrOutput
}

type sqlOutOfDiskReportPtrType SqlOutOfDiskReportArgs

func SqlOutOfDiskReportPtr(v *SqlOutOfDiskReportArgs) SqlOutOfDiskReportPtrInput {
	return (*sqlOutOfDiskReportPtrType)(v)
}

func (*sqlOutOfDiskReportPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlOutOfDiskReport)(nil)).Elem()
}

func (i *sqlOutOfDiskReportPtrType) ToSqlOutOfDiskReportPtrOutput() SqlOutOfDiskReportPtrOutput {
	return i.ToSqlOutOfDiskReportPtrOutputWithContext(context.Background())
}

func (i *sqlOutOfDiskReportPtrType) ToSqlOutOfDiskReportPtrOutputWithContext(ctx context.Context) SqlOutOfDiskReportPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlOutOfDiskReportPtrOutput)
}

func (i *sqlOutOfDiskReportPtrType) ToOutput(ctx context.Context) pulumix.Output[*SqlOutOfDiskReport] {
	return pulumix.Output[*SqlOutOfDiskReport]{
		OutputState: i.ToSqlOutOfDiskReportPtrOutputWithContext(ctx).OutputState,
	}
}

// This message wraps up the information written by out-of-disk detection job.
type SqlOutOfDiskReportOutput struct{ *pulumi.OutputState }

func (SqlOutOfDiskReportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlOutOfDiskReport)(nil)).Elem()
}

func (o SqlOutOfDiskReportOutput) ToSqlOutOfDiskReportOutput() SqlOutOfDiskReportOutput {
	return o
}

func (o SqlOutOfDiskReportOutput) ToSqlOutOfDiskReportOutputWithContext(ctx context.Context) SqlOutOfDiskReportOutput {
	return o
}

func (o SqlOutOfDiskReportOutput) ToSqlOutOfDiskReportPtrOutput() SqlOutOfDiskReportPtrOutput {
	return o.ToSqlOutOfDiskReportPtrOutputWithContext(context.Background())
}

func (o SqlOutOfDiskReportOutput) ToSqlOutOfDiskReportPtrOutputWithContext(ctx context.Context) SqlOutOfDiskReportPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlOutOfDiskReport) *SqlOutOfDiskReport {
		return &v
	}).(SqlOutOfDiskReportPtrOutput)
}

func (o SqlOutOfDiskReportOutput) ToOutput(ctx context.Context) pulumix.Output[SqlOutOfDiskReport] {
	return pulumix.Output[SqlOutOfDiskReport]{
		OutputState: o.OutputState,
	}
}

// The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
func (o SqlOutOfDiskReportOutput) SqlMinRecommendedIncreaseSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlOutOfDiskReport) *int { return v.SqlMinRecommendedIncreaseSizeGb }).(pulumi.IntPtrOutput)
}

// This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
func (o SqlOutOfDiskReportOutput) SqlOutOfDiskState() SqlOutOfDiskReportSqlOutOfDiskStatePtrOutput {
	return o.ApplyT(func(v SqlOutOfDiskReport) *SqlOutOfDiskReportSqlOutOfDiskState { return v.SqlOutOfDiskState }).(SqlOutOfDiskReportSqlOutOfDiskStatePtrOutput)
}

type SqlOutOfDiskReportPtrOutput struct{ *pulumi.OutputState }

func (SqlOutOfDiskReportPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlOutOfDiskReport)(nil)).Elem()
}

func (o SqlOutOfDiskReportPtrOutput) ToSqlOutOfDiskReportPtrOutput() SqlOutOfDiskReportPtrOutput {
	return o
}

func (o SqlOutOfDiskReportPtrOutput) ToSqlOutOfDiskReportPtrOutputWithContext(ctx context.Context) SqlOutOfDiskReportPtrOutput {
	return o
}

func (o SqlOutOfDiskReportPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlOutOfDiskReport] {
	return pulumix.Output[*SqlOutOfDiskReport]{
		OutputState: o.OutputState,
	}
}

func (o SqlOutOfDiskReportPtrOutput) Elem() SqlOutOfDiskReportOutput {
	return o.ApplyT(func(v *SqlOutOfDiskReport) SqlOutOfDiskReport {
		if v != nil {
			return *v
		}
		var ret SqlOutOfDiskReport
		return ret
	}).(SqlOutOfDiskReportOutput)
}

// The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
func (o SqlOutOfDiskReportPtrOutput) SqlMinRecommendedIncreaseSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlOutOfDiskReport) *int {
		if v == nil {
			return nil
		}
		return v.SqlMinRecommendedIncreaseSizeGb
	}).(pulumi.IntPtrOutput)
}

// This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
func (o SqlOutOfDiskReportPtrOutput) SqlOutOfDiskState() SqlOutOfDiskReportSqlOutOfDiskStatePtrOutput {
	return o.ApplyT(func(v *SqlOutOfDiskReport) *SqlOutOfDiskReportSqlOutOfDiskState {
		if v == nil {
			return nil
		}
		return v.SqlOutOfDiskState
	}).(SqlOutOfDiskReportSqlOutOfDiskStatePtrOutput)
}

// This message wraps up the information written by out-of-disk detection job.
type SqlOutOfDiskReportResponse struct {
	// The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
	SqlMinRecommendedIncreaseSizeGb int `pulumi:"sqlMinRecommendedIncreaseSizeGb"`
	// This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
	SqlOutOfDiskState string `pulumi:"sqlOutOfDiskState"`
}

// This message wraps up the information written by out-of-disk detection job.
type SqlOutOfDiskReportResponseOutput struct{ *pulumi.OutputState }

func (SqlOutOfDiskReportResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlOutOfDiskReportResponse)(nil)).Elem()
}

func (o SqlOutOfDiskReportResponseOutput) ToSqlOutOfDiskReportResponseOutput() SqlOutOfDiskReportResponseOutput {
	return o
}

func (o SqlOutOfDiskReportResponseOutput) ToSqlOutOfDiskReportResponseOutputWithContext(ctx context.Context) SqlOutOfDiskReportResponseOutput {
	return o
}

func (o SqlOutOfDiskReportResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SqlOutOfDiskReportResponse] {
	return pulumix.Output[SqlOutOfDiskReportResponse]{
		OutputState: o.OutputState,
	}
}

// The minimum recommended increase size in GigaBytes This field is consumed by the frontend * Writers: * the proactive database wellness job for OOD. * Readers:
func (o SqlOutOfDiskReportResponseOutput) SqlMinRecommendedIncreaseSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v SqlOutOfDiskReportResponse) int { return v.SqlMinRecommendedIncreaseSizeGb }).(pulumi.IntOutput)
}

// This field represents the state generated by the proactive database wellness job for OutOfDisk issues. * Writers: * the proactive database wellness job for OOD. * Readers: * the proactive database wellness job
func (o SqlOutOfDiskReportResponseOutput) SqlOutOfDiskState() pulumi.StringOutput {
	return o.ApplyT(func(v SqlOutOfDiskReportResponse) string { return v.SqlOutOfDiskState }).(pulumi.StringOutput)
}

// Any scheduled maintenance for this instance.
type SqlScheduledMaintenance struct {
	CanDefer *bool `pulumi:"canDefer"`
	// If the scheduled maintenance can be rescheduled.
	CanReschedule *bool `pulumi:"canReschedule"`
	// Maintenance cannot be rescheduled to start beyond this deadline.
	ScheduleDeadlineTime *string `pulumi:"scheduleDeadlineTime"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime *string `pulumi:"startTime"`
}

// SqlScheduledMaintenanceInput is an input type that accepts SqlScheduledMaintenanceArgs and SqlScheduledMaintenanceOutput values.
// You can construct a concrete instance of `SqlScheduledMaintenanceInput` via:
//
//	SqlScheduledMaintenanceArgs{...}
type SqlScheduledMaintenanceInput interface {
	pulumi.Input

	ToSqlScheduledMaintenanceOutput() SqlScheduledMaintenanceOutput
	ToSqlScheduledMaintenanceOutputWithContext(context.Context) SqlScheduledMaintenanceOutput
}

// Any scheduled maintenance for this instance.
type SqlScheduledMaintenanceArgs struct {
	CanDefer pulumi.BoolPtrInput `pulumi:"canDefer"`
	// If the scheduled maintenance can be rescheduled.
	CanReschedule pulumi.BoolPtrInput `pulumi:"canReschedule"`
	// Maintenance cannot be rescheduled to start beyond this deadline.
	ScheduleDeadlineTime pulumi.StringPtrInput `pulumi:"scheduleDeadlineTime"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
}

func (SqlScheduledMaintenanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlScheduledMaintenance)(nil)).Elem()
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenanceOutput() SqlScheduledMaintenanceOutput {
	return i.ToSqlScheduledMaintenanceOutputWithContext(context.Background())
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenanceOutputWithContext(ctx context.Context) SqlScheduledMaintenanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlScheduledMaintenanceOutput)
}

func (i SqlScheduledMaintenanceArgs) ToOutput(ctx context.Context) pulumix.Output[SqlScheduledMaintenance] {
	return pulumix.Output[SqlScheduledMaintenance]{
		OutputState: i.ToSqlScheduledMaintenanceOutputWithContext(ctx).OutputState,
	}
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return i.ToSqlScheduledMaintenancePtrOutputWithContext(context.Background())
}

func (i SqlScheduledMaintenanceArgs) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlScheduledMaintenanceOutput).ToSqlScheduledMaintenancePtrOutputWithContext(ctx)
}

// SqlScheduledMaintenancePtrInput is an input type that accepts SqlScheduledMaintenanceArgs, SqlScheduledMaintenancePtr and SqlScheduledMaintenancePtrOutput values.
// You can construct a concrete instance of `SqlScheduledMaintenancePtrInput` via:
//
//	        SqlScheduledMaintenanceArgs{...}
//
//	or:
//
//	        nil
type SqlScheduledMaintenancePtrInput interface {
	pulumi.Input

	ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput
	ToSqlScheduledMaintenancePtrOutputWithContext(context.Context) SqlScheduledMaintenancePtrOutput
}

type sqlScheduledMaintenancePtrType SqlScheduledMaintenanceArgs

func SqlScheduledMaintenancePtr(v *SqlScheduledMaintenanceArgs) SqlScheduledMaintenancePtrInput {
	return (*sqlScheduledMaintenancePtrType)(v)
}

func (*sqlScheduledMaintenancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlScheduledMaintenance)(nil)).Elem()
}

func (i *sqlScheduledMaintenancePtrType) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return i.ToSqlScheduledMaintenancePtrOutputWithContext(context.Background())
}

func (i *sqlScheduledMaintenancePtrType) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlScheduledMaintenancePtrOutput)
}

func (i *sqlScheduledMaintenancePtrType) ToOutput(ctx context.Context) pulumix.Output[*SqlScheduledMaintenance] {
	return pulumix.Output[*SqlScheduledMaintenance]{
		OutputState: i.ToSqlScheduledMaintenancePtrOutputWithContext(ctx).OutputState,
	}
}

// Any scheduled maintenance for this instance.
type SqlScheduledMaintenanceOutput struct{ *pulumi.OutputState }

func (SqlScheduledMaintenanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlScheduledMaintenance)(nil)).Elem()
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenanceOutput() SqlScheduledMaintenanceOutput {
	return o
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenanceOutputWithContext(ctx context.Context) SqlScheduledMaintenanceOutput {
	return o
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return o.ToSqlScheduledMaintenancePtrOutputWithContext(context.Background())
}

func (o SqlScheduledMaintenanceOutput) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlScheduledMaintenance) *SqlScheduledMaintenance {
		return &v
	}).(SqlScheduledMaintenancePtrOutput)
}

func (o SqlScheduledMaintenanceOutput) ToOutput(ctx context.Context) pulumix.Output[SqlScheduledMaintenance] {
	return pulumix.Output[SqlScheduledMaintenance]{
		OutputState: o.OutputState,
	}
}

func (o SqlScheduledMaintenanceOutput) CanDefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *bool { return v.CanDefer }).(pulumi.BoolPtrOutput)
}

// If the scheduled maintenance can be rescheduled.
func (o SqlScheduledMaintenanceOutput) CanReschedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *bool { return v.CanReschedule }).(pulumi.BoolPtrOutput)
}

// Maintenance cannot be rescheduled to start beyond this deadline.
func (o SqlScheduledMaintenanceOutput) ScheduleDeadlineTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *string { return v.ScheduleDeadlineTime }).(pulumi.StringPtrOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o SqlScheduledMaintenanceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlScheduledMaintenance) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

type SqlScheduledMaintenancePtrOutput struct{ *pulumi.OutputState }

func (SqlScheduledMaintenancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlScheduledMaintenance)(nil)).Elem()
}

func (o SqlScheduledMaintenancePtrOutput) ToSqlScheduledMaintenancePtrOutput() SqlScheduledMaintenancePtrOutput {
	return o
}

func (o SqlScheduledMaintenancePtrOutput) ToSqlScheduledMaintenancePtrOutputWithContext(ctx context.Context) SqlScheduledMaintenancePtrOutput {
	return o
}

func (o SqlScheduledMaintenancePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlScheduledMaintenance] {
	return pulumix.Output[*SqlScheduledMaintenance]{
		OutputState: o.OutputState,
	}
}

func (o SqlScheduledMaintenancePtrOutput) Elem() SqlScheduledMaintenanceOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) SqlScheduledMaintenance {
		if v != nil {
			return *v
		}
		var ret SqlScheduledMaintenance
		return ret
	}).(SqlScheduledMaintenanceOutput)
}

func (o SqlScheduledMaintenancePtrOutput) CanDefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) *bool {
		if v == nil {
			return nil
		}
		return v.CanDefer
	}).(pulumi.BoolPtrOutput)
}

// If the scheduled maintenance can be rescheduled.
func (o SqlScheduledMaintenancePtrOutput) CanReschedule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) *bool {
		if v == nil {
			return nil
		}
		return v.CanReschedule
	}).(pulumi.BoolPtrOutput)
}

// Maintenance cannot be rescheduled to start beyond this deadline.
func (o SqlScheduledMaintenancePtrOutput) ScheduleDeadlineTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) *string {
		if v == nil {
			return nil
		}
		return v.ScheduleDeadlineTime
	}).(pulumi.StringPtrOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o SqlScheduledMaintenancePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlScheduledMaintenance) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Any scheduled maintenance for this instance.
type SqlScheduledMaintenanceResponse struct {
	CanDefer bool `pulumi:"canDefer"`
	// If the scheduled maintenance can be rescheduled.
	CanReschedule bool `pulumi:"canReschedule"`
	// Maintenance cannot be rescheduled to start beyond this deadline.
	ScheduleDeadlineTime string `pulumi:"scheduleDeadlineTime"`
	// The start time of any upcoming scheduled maintenance for this instance.
	StartTime string `pulumi:"startTime"`
}

// Any scheduled maintenance for this instance.
type SqlScheduledMaintenanceResponseOutput struct{ *pulumi.OutputState }

func (SqlScheduledMaintenanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlScheduledMaintenanceResponse)(nil)).Elem()
}

func (o SqlScheduledMaintenanceResponseOutput) ToSqlScheduledMaintenanceResponseOutput() SqlScheduledMaintenanceResponseOutput {
	return o
}

func (o SqlScheduledMaintenanceResponseOutput) ToSqlScheduledMaintenanceResponseOutputWithContext(ctx context.Context) SqlScheduledMaintenanceResponseOutput {
	return o
}

func (o SqlScheduledMaintenanceResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SqlScheduledMaintenanceResponse] {
	return pulumix.Output[SqlScheduledMaintenanceResponse]{
		OutputState: o.OutputState,
	}
}

func (o SqlScheduledMaintenanceResponseOutput) CanDefer() pulumi.BoolOutput {
	return o.ApplyT(func(v SqlScheduledMaintenanceResponse) bool { return v.CanDefer }).(pulumi.BoolOutput)
}

// If the scheduled maintenance can be rescheduled.
func (o SqlScheduledMaintenanceResponseOutput) CanReschedule() pulumi.BoolOutput {
	return o.ApplyT(func(v SqlScheduledMaintenanceResponse) bool { return v.CanReschedule }).(pulumi.BoolOutput)
}

// Maintenance cannot be rescheduled to start beyond this deadline.
func (o SqlScheduledMaintenanceResponseOutput) ScheduleDeadlineTime() pulumi.StringOutput {
	return o.ApplyT(func(v SqlScheduledMaintenanceResponse) string { return v.ScheduleDeadlineTime }).(pulumi.StringOutput)
}

// The start time of any upcoming scheduled maintenance for this instance.
func (o SqlScheduledMaintenanceResponseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v SqlScheduledMaintenanceResponse) string { return v.StartTime }).(pulumi.StringOutput)
}

// SQL Server specific audit configuration.
type SqlServerAuditConfig struct {
	// The name of the destination bucket (e.g., gs://mybucket).
	Bucket *string `pulumi:"bucket"`
	// This is always sql#sqlServerAuditConfig
	Kind *string `pulumi:"kind"`
	// How long to keep generated audit files.
	RetentionInterval *string `pulumi:"retentionInterval"`
	// How often to upload generated audit files.
	UploadInterval *string `pulumi:"uploadInterval"`
}

// SqlServerAuditConfigInput is an input type that accepts SqlServerAuditConfigArgs and SqlServerAuditConfigOutput values.
// You can construct a concrete instance of `SqlServerAuditConfigInput` via:
//
//	SqlServerAuditConfigArgs{...}
type SqlServerAuditConfigInput interface {
	pulumi.Input

	ToSqlServerAuditConfigOutput() SqlServerAuditConfigOutput
	ToSqlServerAuditConfigOutputWithContext(context.Context) SqlServerAuditConfigOutput
}

// SQL Server specific audit configuration.
type SqlServerAuditConfigArgs struct {
	// The name of the destination bucket (e.g., gs://mybucket).
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// This is always sql#sqlServerAuditConfig
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// How long to keep generated audit files.
	RetentionInterval pulumi.StringPtrInput `pulumi:"retentionInterval"`
	// How often to upload generated audit files.
	UploadInterval pulumi.StringPtrInput `pulumi:"uploadInterval"`
}

func (SqlServerAuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerAuditConfig)(nil)).Elem()
}

func (i SqlServerAuditConfigArgs) ToSqlServerAuditConfigOutput() SqlServerAuditConfigOutput {
	return i.ToSqlServerAuditConfigOutputWithContext(context.Background())
}

func (i SqlServerAuditConfigArgs) ToSqlServerAuditConfigOutputWithContext(ctx context.Context) SqlServerAuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerAuditConfigOutput)
}

func (i SqlServerAuditConfigArgs) ToOutput(ctx context.Context) pulumix.Output[SqlServerAuditConfig] {
	return pulumix.Output[SqlServerAuditConfig]{
		OutputState: i.ToSqlServerAuditConfigOutputWithContext(ctx).OutputState,
	}
}

func (i SqlServerAuditConfigArgs) ToSqlServerAuditConfigPtrOutput() SqlServerAuditConfigPtrOutput {
	return i.ToSqlServerAuditConfigPtrOutputWithContext(context.Background())
}

func (i SqlServerAuditConfigArgs) ToSqlServerAuditConfigPtrOutputWithContext(ctx context.Context) SqlServerAuditConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerAuditConfigOutput).ToSqlServerAuditConfigPtrOutputWithContext(ctx)
}

// SqlServerAuditConfigPtrInput is an input type that accepts SqlServerAuditConfigArgs, SqlServerAuditConfigPtr and SqlServerAuditConfigPtrOutput values.
// You can construct a concrete instance of `SqlServerAuditConfigPtrInput` via:
//
//	        SqlServerAuditConfigArgs{...}
//
//	or:
//
//	        nil
type SqlServerAuditConfigPtrInput interface {
	pulumi.Input

	ToSqlServerAuditConfigPtrOutput() SqlServerAuditConfigPtrOutput
	ToSqlServerAuditConfigPtrOutputWithContext(context.Context) SqlServerAuditConfigPtrOutput
}

type sqlServerAuditConfigPtrType SqlServerAuditConfigArgs

func SqlServerAuditConfigPtr(v *SqlServerAuditConfigArgs) SqlServerAuditConfigPtrInput {
	return (*sqlServerAuditConfigPtrType)(v)
}

func (*sqlServerAuditConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerAuditConfig)(nil)).Elem()
}

func (i *sqlServerAuditConfigPtrType) ToSqlServerAuditConfigPtrOutput() SqlServerAuditConfigPtrOutput {
	return i.ToSqlServerAuditConfigPtrOutputWithContext(context.Background())
}

func (i *sqlServerAuditConfigPtrType) ToSqlServerAuditConfigPtrOutputWithContext(ctx context.Context) SqlServerAuditConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerAuditConfigPtrOutput)
}

func (i *sqlServerAuditConfigPtrType) ToOutput(ctx context.Context) pulumix.Output[*SqlServerAuditConfig] {
	return pulumix.Output[*SqlServerAuditConfig]{
		OutputState: i.ToSqlServerAuditConfigPtrOutputWithContext(ctx).OutputState,
	}
}

// SQL Server specific audit configuration.
type SqlServerAuditConfigOutput struct{ *pulumi.OutputState }

func (SqlServerAuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerAuditConfig)(nil)).Elem()
}

func (o SqlServerAuditConfigOutput) ToSqlServerAuditConfigOutput() SqlServerAuditConfigOutput {
	return o
}

func (o SqlServerAuditConfigOutput) ToSqlServerAuditConfigOutputWithContext(ctx context.Context) SqlServerAuditConfigOutput {
	return o
}

func (o SqlServerAuditConfigOutput) ToSqlServerAuditConfigPtrOutput() SqlServerAuditConfigPtrOutput {
	return o.ToSqlServerAuditConfigPtrOutputWithContext(context.Background())
}

func (o SqlServerAuditConfigOutput) ToSqlServerAuditConfigPtrOutputWithContext(ctx context.Context) SqlServerAuditConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlServerAuditConfig) *SqlServerAuditConfig {
		return &v
	}).(SqlServerAuditConfigPtrOutput)
}

func (o SqlServerAuditConfigOutput) ToOutput(ctx context.Context) pulumix.Output[SqlServerAuditConfig] {
	return pulumix.Output[SqlServerAuditConfig]{
		OutputState: o.OutputState,
	}
}

// The name of the destination bucket (e.g., gs://mybucket).
func (o SqlServerAuditConfigOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerAuditConfig) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// This is always sql#sqlServerAuditConfig
func (o SqlServerAuditConfigOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerAuditConfig) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// How long to keep generated audit files.
func (o SqlServerAuditConfigOutput) RetentionInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerAuditConfig) *string { return v.RetentionInterval }).(pulumi.StringPtrOutput)
}

// How often to upload generated audit files.
func (o SqlServerAuditConfigOutput) UploadInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerAuditConfig) *string { return v.UploadInterval }).(pulumi.StringPtrOutput)
}

type SqlServerAuditConfigPtrOutput struct{ *pulumi.OutputState }

func (SqlServerAuditConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerAuditConfig)(nil)).Elem()
}

func (o SqlServerAuditConfigPtrOutput) ToSqlServerAuditConfigPtrOutput() SqlServerAuditConfigPtrOutput {
	return o
}

func (o SqlServerAuditConfigPtrOutput) ToSqlServerAuditConfigPtrOutputWithContext(ctx context.Context) SqlServerAuditConfigPtrOutput {
	return o
}

func (o SqlServerAuditConfigPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlServerAuditConfig] {
	return pulumix.Output[*SqlServerAuditConfig]{
		OutputState: o.OutputState,
	}
}

func (o SqlServerAuditConfigPtrOutput) Elem() SqlServerAuditConfigOutput {
	return o.ApplyT(func(v *SqlServerAuditConfig) SqlServerAuditConfig {
		if v != nil {
			return *v
		}
		var ret SqlServerAuditConfig
		return ret
	}).(SqlServerAuditConfigOutput)
}

// The name of the destination bucket (e.g., gs://mybucket).
func (o SqlServerAuditConfigPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerAuditConfig) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// This is always sql#sqlServerAuditConfig
func (o SqlServerAuditConfigPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerAuditConfig) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// How long to keep generated audit files.
func (o SqlServerAuditConfigPtrOutput) RetentionInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerAuditConfig) *string {
		if v == nil {
			return nil
		}
		return v.RetentionInterval
	}).(pulumi.StringPtrOutput)
}

// How often to upload generated audit files.
func (o SqlServerAuditConfigPtrOutput) UploadInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerAuditConfig) *string {
		if v == nil {
			return nil
		}
		return v.UploadInterval
	}).(pulumi.StringPtrOutput)
}

// SQL Server specific audit configuration.
type SqlServerAuditConfigResponse struct {
	// The name of the destination bucket (e.g., gs://mybucket).
	Bucket string `pulumi:"bucket"`
	// This is always sql#sqlServerAuditConfig
	Kind string `pulumi:"kind"`
	// How long to keep generated audit files.
	RetentionInterval string `pulumi:"retentionInterval"`
	// How often to upload generated audit files.
	UploadInterval string `pulumi:"uploadInterval"`
}

// SQL Server specific audit configuration.
type SqlServerAuditConfigResponseOutput struct{ *pulumi.OutputState }

func (SqlServerAuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerAuditConfigResponse)(nil)).Elem()
}

func (o SqlServerAuditConfigResponseOutput) ToSqlServerAuditConfigResponseOutput() SqlServerAuditConfigResponseOutput {
	return o
}

func (o SqlServerAuditConfigResponseOutput) ToSqlServerAuditConfigResponseOutputWithContext(ctx context.Context) SqlServerAuditConfigResponseOutput {
	return o
}

func (o SqlServerAuditConfigResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SqlServerAuditConfigResponse] {
	return pulumix.Output[SqlServerAuditConfigResponse]{
		OutputState: o.OutputState,
	}
}

// The name of the destination bucket (e.g., gs://mybucket).
func (o SqlServerAuditConfigResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerAuditConfigResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// This is always sql#sqlServerAuditConfig
func (o SqlServerAuditConfigResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerAuditConfigResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// How long to keep generated audit files.
func (o SqlServerAuditConfigResponseOutput) RetentionInterval() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerAuditConfigResponse) string { return v.RetentionInterval }).(pulumi.StringOutput)
}

// How often to upload generated audit files.
func (o SqlServerAuditConfigResponseOutput) UploadInterval() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerAuditConfigResponse) string { return v.UploadInterval }).(pulumi.StringOutput)
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetails struct {
	// The version of SQL Server with which the database is to be made compatible
	CompatibilityLevel *int `pulumi:"compatibilityLevel"`
	// The recovery model of a SQL Server database
	RecoveryModel *string `pulumi:"recoveryModel"`
}

// SqlServerDatabaseDetailsInput is an input type that accepts SqlServerDatabaseDetailsArgs and SqlServerDatabaseDetailsOutput values.
// You can construct a concrete instance of `SqlServerDatabaseDetailsInput` via:
//
//	SqlServerDatabaseDetailsArgs{...}
type SqlServerDatabaseDetailsInput interface {
	pulumi.Input

	ToSqlServerDatabaseDetailsOutput() SqlServerDatabaseDetailsOutput
	ToSqlServerDatabaseDetailsOutputWithContext(context.Context) SqlServerDatabaseDetailsOutput
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetailsArgs struct {
	// The version of SQL Server with which the database is to be made compatible
	CompatibilityLevel pulumi.IntPtrInput `pulumi:"compatibilityLevel"`
	// The recovery model of a SQL Server database
	RecoveryModel pulumi.StringPtrInput `pulumi:"recoveryModel"`
}

func (SqlServerDatabaseDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerDatabaseDetails)(nil)).Elem()
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsOutput() SqlServerDatabaseDetailsOutput {
	return i.ToSqlServerDatabaseDetailsOutputWithContext(context.Background())
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerDatabaseDetailsOutput)
}

func (i SqlServerDatabaseDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[SqlServerDatabaseDetails] {
	return pulumix.Output[SqlServerDatabaseDetails]{
		OutputState: i.ToSqlServerDatabaseDetailsOutputWithContext(ctx).OutputState,
	}
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return i.ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Background())
}

func (i SqlServerDatabaseDetailsArgs) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerDatabaseDetailsOutput).ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx)
}

// SqlServerDatabaseDetailsPtrInput is an input type that accepts SqlServerDatabaseDetailsArgs, SqlServerDatabaseDetailsPtr and SqlServerDatabaseDetailsPtrOutput values.
// You can construct a concrete instance of `SqlServerDatabaseDetailsPtrInput` via:
//
//	        SqlServerDatabaseDetailsArgs{...}
//
//	or:
//
//	        nil
type SqlServerDatabaseDetailsPtrInput interface {
	pulumi.Input

	ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput
	ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Context) SqlServerDatabaseDetailsPtrOutput
}

type sqlServerDatabaseDetailsPtrType SqlServerDatabaseDetailsArgs

func SqlServerDatabaseDetailsPtr(v *SqlServerDatabaseDetailsArgs) SqlServerDatabaseDetailsPtrInput {
	return (*sqlServerDatabaseDetailsPtrType)(v)
}

func (*sqlServerDatabaseDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerDatabaseDetails)(nil)).Elem()
}

func (i *sqlServerDatabaseDetailsPtrType) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return i.ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Background())
}

func (i *sqlServerDatabaseDetailsPtrType) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerDatabaseDetailsPtrOutput)
}

func (i *sqlServerDatabaseDetailsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SqlServerDatabaseDetails] {
	return pulumix.Output[*SqlServerDatabaseDetails]{
		OutputState: i.ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetailsOutput struct{ *pulumi.OutputState }

func (SqlServerDatabaseDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerDatabaseDetails)(nil)).Elem()
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsOutput() SqlServerDatabaseDetailsOutput {
	return o
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsOutput {
	return o
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return o.ToSqlServerDatabaseDetailsPtrOutputWithContext(context.Background())
}

func (o SqlServerDatabaseDetailsOutput) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlServerDatabaseDetails) *SqlServerDatabaseDetails {
		return &v
	}).(SqlServerDatabaseDetailsPtrOutput)
}

func (o SqlServerDatabaseDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[SqlServerDatabaseDetails] {
	return pulumix.Output[SqlServerDatabaseDetails]{
		OutputState: o.OutputState,
	}
}

// The version of SQL Server with which the database is to be made compatible
func (o SqlServerDatabaseDetailsOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SqlServerDatabaseDetails) *int { return v.CompatibilityLevel }).(pulumi.IntPtrOutput)
}

// The recovery model of a SQL Server database
func (o SqlServerDatabaseDetailsOutput) RecoveryModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SqlServerDatabaseDetails) *string { return v.RecoveryModel }).(pulumi.StringPtrOutput)
}

type SqlServerDatabaseDetailsPtrOutput struct{ *pulumi.OutputState }

func (SqlServerDatabaseDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerDatabaseDetails)(nil)).Elem()
}

func (o SqlServerDatabaseDetailsPtrOutput) ToSqlServerDatabaseDetailsPtrOutput() SqlServerDatabaseDetailsPtrOutput {
	return o
}

func (o SqlServerDatabaseDetailsPtrOutput) ToSqlServerDatabaseDetailsPtrOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsPtrOutput {
	return o
}

func (o SqlServerDatabaseDetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlServerDatabaseDetails] {
	return pulumix.Output[*SqlServerDatabaseDetails]{
		OutputState: o.OutputState,
	}
}

func (o SqlServerDatabaseDetailsPtrOutput) Elem() SqlServerDatabaseDetailsOutput {
	return o.ApplyT(func(v *SqlServerDatabaseDetails) SqlServerDatabaseDetails {
		if v != nil {
			return *v
		}
		var ret SqlServerDatabaseDetails
		return ret
	}).(SqlServerDatabaseDetailsOutput)
}

// The version of SQL Server with which the database is to be made compatible
func (o SqlServerDatabaseDetailsPtrOutput) CompatibilityLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SqlServerDatabaseDetails) *int {
		if v == nil {
			return nil
		}
		return v.CompatibilityLevel
	}).(pulumi.IntPtrOutput)
}

// The recovery model of a SQL Server database
func (o SqlServerDatabaseDetailsPtrOutput) RecoveryModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SqlServerDatabaseDetails) *string {
		if v == nil {
			return nil
		}
		return v.RecoveryModel
	}).(pulumi.StringPtrOutput)
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetailsResponse struct {
	// The version of SQL Server with which the database is to be made compatible
	CompatibilityLevel int `pulumi:"compatibilityLevel"`
	// The recovery model of a SQL Server database
	RecoveryModel string `pulumi:"recoveryModel"`
}

// Represents a Sql Server database on the Cloud SQL instance.
type SqlServerDatabaseDetailsResponseOutput struct{ *pulumi.OutputState }

func (SqlServerDatabaseDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerDatabaseDetailsResponse)(nil)).Elem()
}

func (o SqlServerDatabaseDetailsResponseOutput) ToSqlServerDatabaseDetailsResponseOutput() SqlServerDatabaseDetailsResponseOutput {
	return o
}

func (o SqlServerDatabaseDetailsResponseOutput) ToSqlServerDatabaseDetailsResponseOutputWithContext(ctx context.Context) SqlServerDatabaseDetailsResponseOutput {
	return o
}

func (o SqlServerDatabaseDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SqlServerDatabaseDetailsResponse] {
	return pulumix.Output[SqlServerDatabaseDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// The version of SQL Server with which the database is to be made compatible
func (o SqlServerDatabaseDetailsResponseOutput) CompatibilityLevel() pulumi.IntOutput {
	return o.ApplyT(func(v SqlServerDatabaseDetailsResponse) int { return v.CompatibilityLevel }).(pulumi.IntOutput)
}

// The recovery model of a SQL Server database
func (o SqlServerDatabaseDetailsResponseOutput) RecoveryModel() pulumi.StringOutput {
	return o.ApplyT(func(v SqlServerDatabaseDetailsResponse) string { return v.RecoveryModel }).(pulumi.StringOutput)
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetails struct {
	// If the user has been disabled
	Disabled *bool `pulumi:"disabled"`
	// The server roles for this user
	ServerRoles []string `pulumi:"serverRoles"`
}

// SqlServerUserDetailsInput is an input type that accepts SqlServerUserDetailsArgs and SqlServerUserDetailsOutput values.
// You can construct a concrete instance of `SqlServerUserDetailsInput` via:
//
//	SqlServerUserDetailsArgs{...}
type SqlServerUserDetailsInput interface {
	pulumi.Input

	ToSqlServerUserDetailsOutput() SqlServerUserDetailsOutput
	ToSqlServerUserDetailsOutputWithContext(context.Context) SqlServerUserDetailsOutput
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetailsArgs struct {
	// If the user has been disabled
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The server roles for this user
	ServerRoles pulumi.StringArrayInput `pulumi:"serverRoles"`
}

func (SqlServerUserDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerUserDetails)(nil)).Elem()
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsOutput() SqlServerUserDetailsOutput {
	return i.ToSqlServerUserDetailsOutputWithContext(context.Background())
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsOutputWithContext(ctx context.Context) SqlServerUserDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerUserDetailsOutput)
}

func (i SqlServerUserDetailsArgs) ToOutput(ctx context.Context) pulumix.Output[SqlServerUserDetails] {
	return pulumix.Output[SqlServerUserDetails]{
		OutputState: i.ToSqlServerUserDetailsOutputWithContext(ctx).OutputState,
	}
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return i.ToSqlServerUserDetailsPtrOutputWithContext(context.Background())
}

func (i SqlServerUserDetailsArgs) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerUserDetailsOutput).ToSqlServerUserDetailsPtrOutputWithContext(ctx)
}

// SqlServerUserDetailsPtrInput is an input type that accepts SqlServerUserDetailsArgs, SqlServerUserDetailsPtr and SqlServerUserDetailsPtrOutput values.
// You can construct a concrete instance of `SqlServerUserDetailsPtrInput` via:
//
//	        SqlServerUserDetailsArgs{...}
//
//	or:
//
//	        nil
type SqlServerUserDetailsPtrInput interface {
	pulumi.Input

	ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput
	ToSqlServerUserDetailsPtrOutputWithContext(context.Context) SqlServerUserDetailsPtrOutput
}

type sqlServerUserDetailsPtrType SqlServerUserDetailsArgs

func SqlServerUserDetailsPtr(v *SqlServerUserDetailsArgs) SqlServerUserDetailsPtrInput {
	return (*sqlServerUserDetailsPtrType)(v)
}

func (*sqlServerUserDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerUserDetails)(nil)).Elem()
}

func (i *sqlServerUserDetailsPtrType) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return i.ToSqlServerUserDetailsPtrOutputWithContext(context.Background())
}

func (i *sqlServerUserDetailsPtrType) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlServerUserDetailsPtrOutput)
}

func (i *sqlServerUserDetailsPtrType) ToOutput(ctx context.Context) pulumix.Output[*SqlServerUserDetails] {
	return pulumix.Output[*SqlServerUserDetails]{
		OutputState: i.ToSqlServerUserDetailsPtrOutputWithContext(ctx).OutputState,
	}
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetailsOutput struct{ *pulumi.OutputState }

func (SqlServerUserDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerUserDetails)(nil)).Elem()
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsOutput() SqlServerUserDetailsOutput {
	return o
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsOutputWithContext(ctx context.Context) SqlServerUserDetailsOutput {
	return o
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return o.ToSqlServerUserDetailsPtrOutputWithContext(context.Background())
}

func (o SqlServerUserDetailsOutput) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SqlServerUserDetails) *SqlServerUserDetails {
		return &v
	}).(SqlServerUserDetailsPtrOutput)
}

func (o SqlServerUserDetailsOutput) ToOutput(ctx context.Context) pulumix.Output[SqlServerUserDetails] {
	return pulumix.Output[SqlServerUserDetails]{
		OutputState: o.OutputState,
	}
}

// If the user has been disabled
func (o SqlServerUserDetailsOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SqlServerUserDetails) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The server roles for this user
func (o SqlServerUserDetailsOutput) ServerRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SqlServerUserDetails) []string { return v.ServerRoles }).(pulumi.StringArrayOutput)
}

type SqlServerUserDetailsPtrOutput struct{ *pulumi.OutputState }

func (SqlServerUserDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlServerUserDetails)(nil)).Elem()
}

func (o SqlServerUserDetailsPtrOutput) ToSqlServerUserDetailsPtrOutput() SqlServerUserDetailsPtrOutput {
	return o
}

func (o SqlServerUserDetailsPtrOutput) ToSqlServerUserDetailsPtrOutputWithContext(ctx context.Context) SqlServerUserDetailsPtrOutput {
	return o
}

func (o SqlServerUserDetailsPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SqlServerUserDetails] {
	return pulumix.Output[*SqlServerUserDetails]{
		OutputState: o.OutputState,
	}
}

func (o SqlServerUserDetailsPtrOutput) Elem() SqlServerUserDetailsOutput {
	return o.ApplyT(func(v *SqlServerUserDetails) SqlServerUserDetails {
		if v != nil {
			return *v
		}
		var ret SqlServerUserDetails
		return ret
	}).(SqlServerUserDetailsOutput)
}

// If the user has been disabled
func (o SqlServerUserDetailsPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SqlServerUserDetails) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The server roles for this user
func (o SqlServerUserDetailsPtrOutput) ServerRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SqlServerUserDetails) []string {
		if v == nil {
			return nil
		}
		return v.ServerRoles
	}).(pulumi.StringArrayOutput)
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetailsResponse struct {
	// If the user has been disabled
	Disabled bool `pulumi:"disabled"`
	// The server roles for this user
	ServerRoles []string `pulumi:"serverRoles"`
}

// Represents a Sql Server user on the Cloud SQL instance.
type SqlServerUserDetailsResponseOutput struct{ *pulumi.OutputState }

func (SqlServerUserDetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SqlServerUserDetailsResponse)(nil)).Elem()
}

func (o SqlServerUserDetailsResponseOutput) ToSqlServerUserDetailsResponseOutput() SqlServerUserDetailsResponseOutput {
	return o
}

func (o SqlServerUserDetailsResponseOutput) ToSqlServerUserDetailsResponseOutputWithContext(ctx context.Context) SqlServerUserDetailsResponseOutput {
	return o
}

func (o SqlServerUserDetailsResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SqlServerUserDetailsResponse] {
	return pulumix.Output[SqlServerUserDetailsResponse]{
		OutputState: o.OutputState,
	}
}

// If the user has been disabled
func (o SqlServerUserDetailsResponseOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v SqlServerUserDetailsResponse) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// The server roles for this user
func (o SqlServerUserDetailsResponseOutput) ServerRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SqlServerUserDetailsResponse) []string { return v.ServerRoles }).(pulumi.StringArrayOutput)
}

// SslCerts Resource
type SslCertType struct {
	// PEM representation.
	Cert *string `pulumi:"cert"`
	// Serial number, as extracted from the certificate.
	CertSerialNumber *string `pulumi:"certSerialNumber"`
	// User supplied name. Constrained to [a-zA-Z.-_ ]+.
	CommonName *string `pulumi:"commonName"`
	// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	CreateTime *string `pulumi:"createTime"`
	// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Name of the database instance.
	Instance *string `pulumi:"instance"`
	// This is always `sql#sslCert`.
	Kind *string `pulumi:"kind"`
	// The URI of this resource.
	SelfLink *string `pulumi:"selfLink"`
	// Sha1 Fingerprint.
	Sha1Fingerprint *string `pulumi:"sha1Fingerprint"`
}

// SslCertTypeInput is an input type that accepts SslCertTypeArgs and SslCertTypeOutput values.
// You can construct a concrete instance of `SslCertTypeInput` via:
//
//	SslCertTypeArgs{...}
type SslCertTypeInput interface {
	pulumi.Input

	ToSslCertTypeOutput() SslCertTypeOutput
	ToSslCertTypeOutputWithContext(context.Context) SslCertTypeOutput
}

// SslCerts Resource
type SslCertTypeArgs struct {
	// PEM representation.
	Cert pulumi.StringPtrInput `pulumi:"cert"`
	// Serial number, as extracted from the certificate.
	CertSerialNumber pulumi.StringPtrInput `pulumi:"certSerialNumber"`
	// User supplied name. Constrained to [a-zA-Z.-_ ]+.
	CommonName pulumi.StringPtrInput `pulumi:"commonName"`
	// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	ExpirationTime pulumi.StringPtrInput `pulumi:"expirationTime"`
	// Name of the database instance.
	Instance pulumi.StringPtrInput `pulumi:"instance"`
	// This is always `sql#sslCert`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The URI of this resource.
	SelfLink pulumi.StringPtrInput `pulumi:"selfLink"`
	// Sha1 Fingerprint.
	Sha1Fingerprint pulumi.StringPtrInput `pulumi:"sha1Fingerprint"`
}

func (SslCertTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertType)(nil)).Elem()
}

func (i SslCertTypeArgs) ToSslCertTypeOutput() SslCertTypeOutput {
	return i.ToSslCertTypeOutputWithContext(context.Background())
}

func (i SslCertTypeArgs) ToSslCertTypeOutputWithContext(ctx context.Context) SslCertTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertTypeOutput)
}

func (i SslCertTypeArgs) ToOutput(ctx context.Context) pulumix.Output[SslCertType] {
	return pulumix.Output[SslCertType]{
		OutputState: i.ToSslCertTypeOutputWithContext(ctx).OutputState,
	}
}

func (i SslCertTypeArgs) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return i.ToSslCertTypePtrOutputWithContext(context.Background())
}

func (i SslCertTypeArgs) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertTypeOutput).ToSslCertTypePtrOutputWithContext(ctx)
}

// SslCertTypePtrInput is an input type that accepts SslCertTypeArgs, SslCertTypePtr and SslCertTypePtrOutput values.
// You can construct a concrete instance of `SslCertTypePtrInput` via:
//
//	        SslCertTypeArgs{...}
//
//	or:
//
//	        nil
type SslCertTypePtrInput interface {
	pulumi.Input

	ToSslCertTypePtrOutput() SslCertTypePtrOutput
	ToSslCertTypePtrOutputWithContext(context.Context) SslCertTypePtrOutput
}

type sslCertTypePtrType SslCertTypeArgs

func SslCertTypePtr(v *SslCertTypeArgs) SslCertTypePtrInput {
	return (*sslCertTypePtrType)(v)
}

func (*sslCertTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertType)(nil)).Elem()
}

func (i *sslCertTypePtrType) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return i.ToSslCertTypePtrOutputWithContext(context.Background())
}

func (i *sslCertTypePtrType) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertTypePtrOutput)
}

func (i *sslCertTypePtrType) ToOutput(ctx context.Context) pulumix.Output[*SslCertType] {
	return pulumix.Output[*SslCertType]{
		OutputState: i.ToSslCertTypePtrOutputWithContext(ctx).OutputState,
	}
}

// SslCerts Resource
type SslCertTypeOutput struct{ *pulumi.OutputState }

func (SslCertTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertType)(nil)).Elem()
}

func (o SslCertTypeOutput) ToSslCertTypeOutput() SslCertTypeOutput {
	return o
}

func (o SslCertTypeOutput) ToSslCertTypeOutputWithContext(ctx context.Context) SslCertTypeOutput {
	return o
}

func (o SslCertTypeOutput) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return o.ToSslCertTypePtrOutputWithContext(context.Background())
}

func (o SslCertTypeOutput) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SslCertType) *SslCertType {
		return &v
	}).(SslCertTypePtrOutput)
}

func (o SslCertTypeOutput) ToOutput(ctx context.Context) pulumix.Output[SslCertType] {
	return pulumix.Output[SslCertType]{
		OutputState: o.OutputState,
	}
}

// PEM representation.
func (o SslCertTypeOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Cert }).(pulumi.StringPtrOutput)
}

// Serial number, as extracted from the certificate.
func (o SslCertTypeOutput) CertSerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.CertSerialNumber }).(pulumi.StringPtrOutput)
}

// User supplied name. Constrained to [a-zA-Z.-_ ]+.
func (o SslCertTypeOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.CommonName }).(pulumi.StringPtrOutput)
}

// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o SslCertTypeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o SslCertTypeOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.ExpirationTime }).(pulumi.StringPtrOutput)
}

// Name of the database instance.
func (o SslCertTypeOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Instance }).(pulumi.StringPtrOutput)
}

// This is always `sql#sslCert`.
func (o SslCertTypeOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The URI of this resource.
func (o SslCertTypeOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.SelfLink }).(pulumi.StringPtrOutput)
}

// Sha1 Fingerprint.
func (o SslCertTypeOutput) Sha1Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslCertType) *string { return v.Sha1Fingerprint }).(pulumi.StringPtrOutput)
}

type SslCertTypePtrOutput struct{ *pulumi.OutputState }

func (SslCertTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertType)(nil)).Elem()
}

func (o SslCertTypePtrOutput) ToSslCertTypePtrOutput() SslCertTypePtrOutput {
	return o
}

func (o SslCertTypePtrOutput) ToSslCertTypePtrOutputWithContext(ctx context.Context) SslCertTypePtrOutput {
	return o
}

func (o SslCertTypePtrOutput) ToOutput(ctx context.Context) pulumix.Output[*SslCertType] {
	return pulumix.Output[*SslCertType]{
		OutputState: o.OutputState,
	}
}

func (o SslCertTypePtrOutput) Elem() SslCertTypeOutput {
	return o.ApplyT(func(v *SslCertType) SslCertType {
		if v != nil {
			return *v
		}
		var ret SslCertType
		return ret
	}).(SslCertTypeOutput)
}

// PEM representation.
func (o SslCertTypePtrOutput) Cert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(pulumi.StringPtrOutput)
}

// Serial number, as extracted from the certificate.
func (o SslCertTypePtrOutput) CertSerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.CertSerialNumber
	}).(pulumi.StringPtrOutput)
}

// User supplied name. Constrained to [a-zA-Z.-_ ]+.
func (o SslCertTypePtrOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.CommonName
	}).(pulumi.StringPtrOutput)
}

// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o SslCertTypePtrOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.CreateTime
	}).(pulumi.StringPtrOutput)
}

// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o SslCertTypePtrOutput) ExpirationTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationTime
	}).(pulumi.StringPtrOutput)
}

// Name of the database instance.
func (o SslCertTypePtrOutput) Instance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Instance
	}).(pulumi.StringPtrOutput)
}

// This is always `sql#sslCert`.
func (o SslCertTypePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// The URI of this resource.
func (o SslCertTypePtrOutput) SelfLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.SelfLink
	}).(pulumi.StringPtrOutput)
}

// Sha1 Fingerprint.
func (o SslCertTypePtrOutput) Sha1Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslCertType) *string {
		if v == nil {
			return nil
		}
		return v.Sha1Fingerprint
	}).(pulumi.StringPtrOutput)
}

// SslCerts Resource
type SslCertResponse struct {
	// PEM representation.
	Cert string `pulumi:"cert"`
	// Serial number, as extracted from the certificate.
	CertSerialNumber string `pulumi:"certSerialNumber"`
	// User supplied name. Constrained to [a-zA-Z.-_ ]+.
	CommonName string `pulumi:"commonName"`
	// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	CreateTime string `pulumi:"createTime"`
	// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
	ExpirationTime string `pulumi:"expirationTime"`
	// Name of the database instance.
	Instance string `pulumi:"instance"`
	// This is always `sql#sslCert`.
	Kind string `pulumi:"kind"`
	// The URI of this resource.
	SelfLink string `pulumi:"selfLink"`
	// Sha1 Fingerprint.
	Sha1Fingerprint string `pulumi:"sha1Fingerprint"`
}

// SslCerts Resource
type SslCertResponseOutput struct{ *pulumi.OutputState }

func (SslCertResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCertResponse)(nil)).Elem()
}

func (o SslCertResponseOutput) ToSslCertResponseOutput() SslCertResponseOutput {
	return o
}

func (o SslCertResponseOutput) ToSslCertResponseOutputWithContext(ctx context.Context) SslCertResponseOutput {
	return o
}

func (o SslCertResponseOutput) ToOutput(ctx context.Context) pulumix.Output[SslCertResponse] {
	return pulumix.Output[SslCertResponse]{
		OutputState: o.OutputState,
	}
}

// PEM representation.
func (o SslCertResponseOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.Cert }).(pulumi.StringOutput)
}

// Serial number, as extracted from the certificate.
func (o SslCertResponseOutput) CertSerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.CertSerialNumber }).(pulumi.StringOutput)
}

// User supplied name. Constrained to [a-zA-Z.-_ ]+.
func (o SslCertResponseOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.CommonName }).(pulumi.StringOutput)
}

// The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o SslCertResponseOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
func (o SslCertResponseOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Name of the database instance.
func (o SslCertResponseOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.Instance }).(pulumi.StringOutput)
}

// This is always `sql#sslCert`.
func (o SslCertResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The URI of this resource.
func (o SslCertResponseOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.SelfLink }).(pulumi.StringOutput)
}

// Sha1 Fingerprint.
func (o SslCertResponseOutput) Sha1Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v SslCertResponse) string { return v.Sha1Fingerprint }).(pulumi.StringOutput)
}

// User level password validation policy.
type UserPasswordValidationPolicy struct {
	// Number of failed login attempts allowed before user get locked.
	AllowedFailedAttempts *int `pulumi:"allowedFailedAttempts"`
	// If true, failed login attempts check will be enabled.
	EnableFailedAttemptsCheck *bool `pulumi:"enableFailedAttemptsCheck"`
	// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
	EnablePasswordVerification *bool `pulumi:"enablePasswordVerification"`
	// Expiration duration after password is updated.
	PasswordExpirationDuration *string `pulumi:"passwordExpirationDuration"`
}

// UserPasswordValidationPolicyInput is an input type that accepts UserPasswordValidationPolicyArgs and UserPasswordValidationPolicyOutput values.
// You can construct a concrete instance of `UserPasswordValidationPolicyInput` via:
//
//	UserPasswordValidationPolicyArgs{...}
type UserPasswordValidationPolicyInput interface {
	pulumi.Input

	ToUserPasswordValidationPolicyOutput() UserPasswordValidationPolicyOutput
	ToUserPasswordValidationPolicyOutputWithContext(context.Context) UserPasswordValidationPolicyOutput
}

// User level password validation policy.
type UserPasswordValidationPolicyArgs struct {
	// Number of failed login attempts allowed before user get locked.
	AllowedFailedAttempts pulumi.IntPtrInput `pulumi:"allowedFailedAttempts"`
	// If true, failed login attempts check will be enabled.
	EnableFailedAttemptsCheck pulumi.BoolPtrInput `pulumi:"enableFailedAttemptsCheck"`
	// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
	EnablePasswordVerification pulumi.BoolPtrInput `pulumi:"enablePasswordVerification"`
	// Expiration duration after password is updated.
	PasswordExpirationDuration pulumi.StringPtrInput `pulumi:"passwordExpirationDuration"`
}

func (UserPasswordValidationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordValidationPolicy)(nil)).Elem()
}

func (i UserPasswordValidationPolicyArgs) ToUserPasswordValidationPolicyOutput() UserPasswordValidationPolicyOutput {
	return i.ToUserPasswordValidationPolicyOutputWithContext(context.Background())
}

func (i UserPasswordValidationPolicyArgs) ToUserPasswordValidationPolicyOutputWithContext(ctx context.Context) UserPasswordValidationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordValidationPolicyOutput)
}

func (i UserPasswordValidationPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[UserPasswordValidationPolicy] {
	return pulumix.Output[UserPasswordValidationPolicy]{
		OutputState: i.ToUserPasswordValidationPolicyOutputWithContext(ctx).OutputState,
	}
}

func (i UserPasswordValidationPolicyArgs) ToUserPasswordValidationPolicyPtrOutput() UserPasswordValidationPolicyPtrOutput {
	return i.ToUserPasswordValidationPolicyPtrOutputWithContext(context.Background())
}

func (i UserPasswordValidationPolicyArgs) ToUserPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) UserPasswordValidationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordValidationPolicyOutput).ToUserPasswordValidationPolicyPtrOutputWithContext(ctx)
}

// UserPasswordValidationPolicyPtrInput is an input type that accepts UserPasswordValidationPolicyArgs, UserPasswordValidationPolicyPtr and UserPasswordValidationPolicyPtrOutput values.
// You can construct a concrete instance of `UserPasswordValidationPolicyPtrInput` via:
//
//	        UserPasswordValidationPolicyArgs{...}
//
//	or:
//
//	        nil
type UserPasswordValidationPolicyPtrInput interface {
	pulumi.Input

	ToUserPasswordValidationPolicyPtrOutput() UserPasswordValidationPolicyPtrOutput
	ToUserPasswordValidationPolicyPtrOutputWithContext(context.Context) UserPasswordValidationPolicyPtrOutput
}

type userPasswordValidationPolicyPtrType UserPasswordValidationPolicyArgs

func UserPasswordValidationPolicyPtr(v *UserPasswordValidationPolicyArgs) UserPasswordValidationPolicyPtrInput {
	return (*userPasswordValidationPolicyPtrType)(v)
}

func (*userPasswordValidationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordValidationPolicy)(nil)).Elem()
}

func (i *userPasswordValidationPolicyPtrType) ToUserPasswordValidationPolicyPtrOutput() UserPasswordValidationPolicyPtrOutput {
	return i.ToUserPasswordValidationPolicyPtrOutputWithContext(context.Background())
}

func (i *userPasswordValidationPolicyPtrType) ToUserPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) UserPasswordValidationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPasswordValidationPolicyPtrOutput)
}

func (i *userPasswordValidationPolicyPtrType) ToOutput(ctx context.Context) pulumix.Output[*UserPasswordValidationPolicy] {
	return pulumix.Output[*UserPasswordValidationPolicy]{
		OutputState: i.ToUserPasswordValidationPolicyPtrOutputWithContext(ctx).OutputState,
	}
}

// User level password validation policy.
type UserPasswordValidationPolicyOutput struct{ *pulumi.OutputState }

func (UserPasswordValidationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordValidationPolicy)(nil)).Elem()
}

func (o UserPasswordValidationPolicyOutput) ToUserPasswordValidationPolicyOutput() UserPasswordValidationPolicyOutput {
	return o
}

func (o UserPasswordValidationPolicyOutput) ToUserPasswordValidationPolicyOutputWithContext(ctx context.Context) UserPasswordValidationPolicyOutput {
	return o
}

func (o UserPasswordValidationPolicyOutput) ToUserPasswordValidationPolicyPtrOutput() UserPasswordValidationPolicyPtrOutput {
	return o.ToUserPasswordValidationPolicyPtrOutputWithContext(context.Background())
}

func (o UserPasswordValidationPolicyOutput) ToUserPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) UserPasswordValidationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserPasswordValidationPolicy) *UserPasswordValidationPolicy {
		return &v
	}).(UserPasswordValidationPolicyPtrOutput)
}

func (o UserPasswordValidationPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[UserPasswordValidationPolicy] {
	return pulumix.Output[UserPasswordValidationPolicy]{
		OutputState: o.OutputState,
	}
}

// Number of failed login attempts allowed before user get locked.
func (o UserPasswordValidationPolicyOutput) AllowedFailedAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicy) *int { return v.AllowedFailedAttempts }).(pulumi.IntPtrOutput)
}

// If true, failed login attempts check will be enabled.
func (o UserPasswordValidationPolicyOutput) EnableFailedAttemptsCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicy) *bool { return v.EnableFailedAttemptsCheck }).(pulumi.BoolPtrOutput)
}

// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
func (o UserPasswordValidationPolicyOutput) EnablePasswordVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicy) *bool { return v.EnablePasswordVerification }).(pulumi.BoolPtrOutput)
}

// Expiration duration after password is updated.
func (o UserPasswordValidationPolicyOutput) PasswordExpirationDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicy) *string { return v.PasswordExpirationDuration }).(pulumi.StringPtrOutput)
}

type UserPasswordValidationPolicyPtrOutput struct{ *pulumi.OutputState }

func (UserPasswordValidationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserPasswordValidationPolicy)(nil)).Elem()
}

func (o UserPasswordValidationPolicyPtrOutput) ToUserPasswordValidationPolicyPtrOutput() UserPasswordValidationPolicyPtrOutput {
	return o
}

func (o UserPasswordValidationPolicyPtrOutput) ToUserPasswordValidationPolicyPtrOutputWithContext(ctx context.Context) UserPasswordValidationPolicyPtrOutput {
	return o
}

func (o UserPasswordValidationPolicyPtrOutput) ToOutput(ctx context.Context) pulumix.Output[*UserPasswordValidationPolicy] {
	return pulumix.Output[*UserPasswordValidationPolicy]{
		OutputState: o.OutputState,
	}
}

func (o UserPasswordValidationPolicyPtrOutput) Elem() UserPasswordValidationPolicyOutput {
	return o.ApplyT(func(v *UserPasswordValidationPolicy) UserPasswordValidationPolicy {
		if v != nil {
			return *v
		}
		var ret UserPasswordValidationPolicy
		return ret
	}).(UserPasswordValidationPolicyOutput)
}

// Number of failed login attempts allowed before user get locked.
func (o UserPasswordValidationPolicyPtrOutput) AllowedFailedAttempts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserPasswordValidationPolicy) *int {
		if v == nil {
			return nil
		}
		return v.AllowedFailedAttempts
	}).(pulumi.IntPtrOutput)
}

// If true, failed login attempts check will be enabled.
func (o UserPasswordValidationPolicyPtrOutput) EnableFailedAttemptsCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserPasswordValidationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnableFailedAttemptsCheck
	}).(pulumi.BoolPtrOutput)
}

// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
func (o UserPasswordValidationPolicyPtrOutput) EnablePasswordVerification() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserPasswordValidationPolicy) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePasswordVerification
	}).(pulumi.BoolPtrOutput)
}

// Expiration duration after password is updated.
func (o UserPasswordValidationPolicyPtrOutput) PasswordExpirationDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserPasswordValidationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.PasswordExpirationDuration
	}).(pulumi.StringPtrOutput)
}

// User level password validation policy.
type UserPasswordValidationPolicyResponse struct {
	// Number of failed login attempts allowed before user get locked.
	AllowedFailedAttempts int `pulumi:"allowedFailedAttempts"`
	// If true, failed login attempts check will be enabled.
	EnableFailedAttemptsCheck bool `pulumi:"enableFailedAttemptsCheck"`
	// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
	EnablePasswordVerification bool `pulumi:"enablePasswordVerification"`
	// Expiration duration after password is updated.
	PasswordExpirationDuration string `pulumi:"passwordExpirationDuration"`
	// Read-only password status.
	Status PasswordStatusResponse `pulumi:"status"`
}

// User level password validation policy.
type UserPasswordValidationPolicyResponseOutput struct{ *pulumi.OutputState }

func (UserPasswordValidationPolicyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPasswordValidationPolicyResponse)(nil)).Elem()
}

func (o UserPasswordValidationPolicyResponseOutput) ToUserPasswordValidationPolicyResponseOutput() UserPasswordValidationPolicyResponseOutput {
	return o
}

func (o UserPasswordValidationPolicyResponseOutput) ToUserPasswordValidationPolicyResponseOutputWithContext(ctx context.Context) UserPasswordValidationPolicyResponseOutput {
	return o
}

func (o UserPasswordValidationPolicyResponseOutput) ToOutput(ctx context.Context) pulumix.Output[UserPasswordValidationPolicyResponse] {
	return pulumix.Output[UserPasswordValidationPolicyResponse]{
		OutputState: o.OutputState,
	}
}

// Number of failed login attempts allowed before user get locked.
func (o UserPasswordValidationPolicyResponseOutput) AllowedFailedAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicyResponse) int { return v.AllowedFailedAttempts }).(pulumi.IntOutput)
}

// If true, failed login attempts check will be enabled.
func (o UserPasswordValidationPolicyResponseOutput) EnableFailedAttemptsCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicyResponse) bool { return v.EnableFailedAttemptsCheck }).(pulumi.BoolOutput)
}

// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
func (o UserPasswordValidationPolicyResponseOutput) EnablePasswordVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicyResponse) bool { return v.EnablePasswordVerification }).(pulumi.BoolOutput)
}

// Expiration duration after password is updated.
func (o UserPasswordValidationPolicyResponseOutput) PasswordExpirationDuration() pulumi.StringOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicyResponse) string { return v.PasswordExpirationDuration }).(pulumi.StringOutput)
}

// Read-only password status.
func (o UserPasswordValidationPolicyResponseOutput) Status() PasswordStatusResponseOutput {
	return o.ApplyT(func(v UserPasswordValidationPolicyResponse) PasswordStatusResponse { return v.Status }).(PasswordStatusResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclEntryInput)(nil)).Elem(), AclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclEntryArrayInput)(nil)).Elem(), AclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedMachineFeaturesInput)(nil)).Elem(), AdvancedMachineFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedMachineFeaturesPtrInput)(nil)).Elem(), AdvancedMachineFeaturesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupConfigurationInput)(nil)).Elem(), BackupConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupConfigurationPtrInput)(nil)).Elem(), BackupConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupRetentionSettingsInput)(nil)).Elem(), BackupRetentionSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupRetentionSettingsPtrInput)(nil)).Elem(), BackupRetentionSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFlagsInput)(nil)).Elem(), DatabaseFlagsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseFlagsArrayInput)(nil)).Elem(), DatabaseFlagsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenyMaintenancePeriodInput)(nil)).Elem(), DenyMaintenancePeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DenyMaintenancePeriodArrayInput)(nil)).Elem(), DenyMaintenancePeriodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskEncryptionConfigurationInput)(nil)).Elem(), DiskEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskEncryptionConfigurationPtrInput)(nil)).Elem(), DiskEncryptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskEncryptionStatusInput)(nil)).Elem(), DiskEncryptionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskEncryptionStatusPtrInput)(nil)).Elem(), DiskEncryptionStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InsightsConfigInput)(nil)).Elem(), InsightsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InsightsConfigPtrInput)(nil)).Elem(), InsightsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFailoverReplicaInput)(nil)).Elem(), InstanceFailoverReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFailoverReplicaPtrInput)(nil)).Elem(), InstanceFailoverReplicaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceReferenceInput)(nil)).Elem(), InstanceReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceReferencePtrInput)(nil)).Elem(), InstanceReferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpConfigurationInput)(nil)).Elem(), IpConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpConfigurationPtrInput)(nil)).Elem(), IpConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpMappingInput)(nil)).Elem(), IpMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpMappingArrayInput)(nil)).Elem(), IpMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationPreferenceInput)(nil)).Elem(), LocationPreferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationPreferencePtrInput)(nil)).Elem(), LocationPreferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MaintenanceWindowPtrInput)(nil)).Elem(), MaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MySqlReplicaConfigurationInput)(nil)).Elem(), MySqlReplicaConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MySqlReplicaConfigurationPtrInput)(nil)).Elem(), MySqlReplicaConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnPremisesConfigurationInput)(nil)).Elem(), OnPremisesConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnPremisesConfigurationPtrInput)(nil)).Elem(), OnPremisesConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperationErrorInput)(nil)).Elem(), OperationErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperationErrorPtrInput)(nil)).Elem(), OperationErrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordValidationPolicyInput)(nil)).Elem(), PasswordValidationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PasswordValidationPolicyPtrInput)(nil)).Elem(), PasswordValidationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaConfigurationInput)(nil)).Elem(), ReplicaConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaConfigurationPtrInput)(nil)).Elem(), ReplicaConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsInput)(nil)).Elem(), SettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingsPtrInput)(nil)).Elem(), SettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlActiveDirectoryConfigInput)(nil)).Elem(), SqlActiveDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlActiveDirectoryConfigPtrInput)(nil)).Elem(), SqlActiveDirectoryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlOutOfDiskReportInput)(nil)).Elem(), SqlOutOfDiskReportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlOutOfDiskReportPtrInput)(nil)).Elem(), SqlOutOfDiskReportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlScheduledMaintenanceInput)(nil)).Elem(), SqlScheduledMaintenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlScheduledMaintenancePtrInput)(nil)).Elem(), SqlScheduledMaintenanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerAuditConfigInput)(nil)).Elem(), SqlServerAuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerAuditConfigPtrInput)(nil)).Elem(), SqlServerAuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerDatabaseDetailsInput)(nil)).Elem(), SqlServerDatabaseDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerDatabaseDetailsPtrInput)(nil)).Elem(), SqlServerDatabaseDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerUserDetailsInput)(nil)).Elem(), SqlServerUserDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlServerUserDetailsPtrInput)(nil)).Elem(), SqlServerUserDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslCertTypeInput)(nil)).Elem(), SslCertTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslCertTypePtrInput)(nil)).Elem(), SslCertTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordValidationPolicyInput)(nil)).Elem(), UserPasswordValidationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPasswordValidationPolicyPtrInput)(nil)).Elem(), UserPasswordValidationPolicyArgs{})
	pulumi.RegisterOutputType(AclEntryOutput{})
	pulumi.RegisterOutputType(AclEntryArrayOutput{})
	pulumi.RegisterOutputType(AclEntryResponseOutput{})
	pulumi.RegisterOutputType(AclEntryResponseArrayOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesPtrOutput{})
	pulumi.RegisterOutputType(AdvancedMachineFeaturesResponseOutput{})
	pulumi.RegisterOutputType(BackupConfigurationOutput{})
	pulumi.RegisterOutputType(BackupConfigurationPtrOutput{})
	pulumi.RegisterOutputType(BackupConfigurationResponseOutput{})
	pulumi.RegisterOutputType(BackupRetentionSettingsOutput{})
	pulumi.RegisterOutputType(BackupRetentionSettingsPtrOutput{})
	pulumi.RegisterOutputType(BackupRetentionSettingsResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFlagsOutput{})
	pulumi.RegisterOutputType(DatabaseFlagsArrayOutput{})
	pulumi.RegisterOutputType(DatabaseFlagsResponseOutput{})
	pulumi.RegisterOutputType(DatabaseFlagsResponseArrayOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodArrayOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodResponseOutput{})
	pulumi.RegisterOutputType(DenyMaintenancePeriodResponseArrayOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionConfigurationResponseOutput{})
	pulumi.RegisterOutputType(DiskEncryptionStatusOutput{})
	pulumi.RegisterOutputType(DiskEncryptionStatusPtrOutput{})
	pulumi.RegisterOutputType(DiskEncryptionStatusResponseOutput{})
	pulumi.RegisterOutputType(InsightsConfigOutput{})
	pulumi.RegisterOutputType(InsightsConfigPtrOutput{})
	pulumi.RegisterOutputType(InsightsConfigResponseOutput{})
	pulumi.RegisterOutputType(InstanceFailoverReplicaOutput{})
	pulumi.RegisterOutputType(InstanceFailoverReplicaPtrOutput{})
	pulumi.RegisterOutputType(InstanceFailoverReplicaResponseOutput{})
	pulumi.RegisterOutputType(InstanceReferenceOutput{})
	pulumi.RegisterOutputType(InstanceReferencePtrOutput{})
	pulumi.RegisterOutputType(InstanceReferenceResponseOutput{})
	pulumi.RegisterOutputType(IpConfigurationOutput{})
	pulumi.RegisterOutputType(IpConfigurationPtrOutput{})
	pulumi.RegisterOutputType(IpConfigurationResponseOutput{})
	pulumi.RegisterOutputType(IpMappingOutput{})
	pulumi.RegisterOutputType(IpMappingArrayOutput{})
	pulumi.RegisterOutputType(IpMappingResponseOutput{})
	pulumi.RegisterOutputType(IpMappingResponseArrayOutput{})
	pulumi.RegisterOutputType(LocationPreferenceOutput{})
	pulumi.RegisterOutputType(LocationPreferencePtrOutput{})
	pulumi.RegisterOutputType(LocationPreferenceResponseOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(MaintenanceWindowResponseOutput{})
	pulumi.RegisterOutputType(MySqlReplicaConfigurationOutput{})
	pulumi.RegisterOutputType(MySqlReplicaConfigurationPtrOutput{})
	pulumi.RegisterOutputType(MySqlReplicaConfigurationResponseOutput{})
	pulumi.RegisterOutputType(OnPremisesConfigurationOutput{})
	pulumi.RegisterOutputType(OnPremisesConfigurationPtrOutput{})
	pulumi.RegisterOutputType(OnPremisesConfigurationResponseOutput{})
	pulumi.RegisterOutputType(OperationErrorOutput{})
	pulumi.RegisterOutputType(OperationErrorPtrOutput{})
	pulumi.RegisterOutputType(OperationErrorResponseOutput{})
	pulumi.RegisterOutputType(PasswordStatusResponseOutput{})
	pulumi.RegisterOutputType(PasswordValidationPolicyOutput{})
	pulumi.RegisterOutputType(PasswordValidationPolicyPtrOutput{})
	pulumi.RegisterOutputType(PasswordValidationPolicyResponseOutput{})
	pulumi.RegisterOutputType(ReplicaConfigurationOutput{})
	pulumi.RegisterOutputType(ReplicaConfigurationPtrOutput{})
	pulumi.RegisterOutputType(ReplicaConfigurationResponseOutput{})
	pulumi.RegisterOutputType(SettingsOutput{})
	pulumi.RegisterOutputType(SettingsPtrOutput{})
	pulumi.RegisterOutputType(SettingsResponseOutput{})
	pulumi.RegisterOutputType(SqlActiveDirectoryConfigOutput{})
	pulumi.RegisterOutputType(SqlActiveDirectoryConfigPtrOutput{})
	pulumi.RegisterOutputType(SqlActiveDirectoryConfigResponseOutput{})
	pulumi.RegisterOutputType(SqlOutOfDiskReportOutput{})
	pulumi.RegisterOutputType(SqlOutOfDiskReportPtrOutput{})
	pulumi.RegisterOutputType(SqlOutOfDiskReportResponseOutput{})
	pulumi.RegisterOutputType(SqlScheduledMaintenanceOutput{})
	pulumi.RegisterOutputType(SqlScheduledMaintenancePtrOutput{})
	pulumi.RegisterOutputType(SqlScheduledMaintenanceResponseOutput{})
	pulumi.RegisterOutputType(SqlServerAuditConfigOutput{})
	pulumi.RegisterOutputType(SqlServerAuditConfigPtrOutput{})
	pulumi.RegisterOutputType(SqlServerAuditConfigResponseOutput{})
	pulumi.RegisterOutputType(SqlServerDatabaseDetailsOutput{})
	pulumi.RegisterOutputType(SqlServerDatabaseDetailsPtrOutput{})
	pulumi.RegisterOutputType(SqlServerDatabaseDetailsResponseOutput{})
	pulumi.RegisterOutputType(SqlServerUserDetailsOutput{})
	pulumi.RegisterOutputType(SqlServerUserDetailsPtrOutput{})
	pulumi.RegisterOutputType(SqlServerUserDetailsResponseOutput{})
	pulumi.RegisterOutputType(SslCertTypeOutput{})
	pulumi.RegisterOutputType(SslCertTypePtrOutput{})
	pulumi.RegisterOutputType(SslCertResponseOutput{})
	pulumi.RegisterOutputType(UserPasswordValidationPolicyOutput{})
	pulumi.RegisterOutputType(UserPasswordValidationPolicyPtrOutput{})
	pulumi.RegisterOutputType(UserPasswordValidationPolicyResponseOutput{})
}
