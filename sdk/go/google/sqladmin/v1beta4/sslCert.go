// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta4

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
type SslCert struct {
	pulumi.CustomResourceState
}

// NewSslCert registers a new resource with the given unique name, arguments, and options.
func NewSslCert(ctx *pulumi.Context,
	name string, args *SslCertArgs, opts ...pulumi.ResourceOption) (*SslCert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Sha1Fingerprint == nil {
		return nil, errors.New("invalid value for required argument 'Sha1Fingerprint'")
	}
	var resource SslCert
	err := ctx.RegisterResource("google-cloud:sqladmin/v1beta4:SslCert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslCert gets an existing SslCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslCertState, opts ...pulumi.ResourceOption) (*SslCert, error) {
	var resource SslCert
	err := ctx.ReadResource("google-cloud:sqladmin/v1beta4:SslCert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslCert resources.
type sslCertState struct {
}

type SslCertState struct {
}

func (SslCertState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertState)(nil)).Elem()
}

type sslCertArgs struct {
	// User supplied name. Must be a distinct name from the other certificates for this instance.
	CommonName      *string `pulumi:"commonName"`
	Instance        string  `pulumi:"instance"`
	Project         string  `pulumi:"project"`
	Sha1Fingerprint string  `pulumi:"sha1Fingerprint"`
}

// The set of arguments for constructing a SslCert resource.
type SslCertArgs struct {
	// User supplied name. Must be a distinct name from the other certificates for this instance.
	CommonName      pulumi.StringPtrInput
	Instance        pulumi.StringInput
	Project         pulumi.StringInput
	Sha1Fingerprint pulumi.StringInput
}

func (SslCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertArgs)(nil)).Elem()
}

type SslCertInput interface {
	pulumi.Input

	ToSslCertOutput() SslCertOutput
	ToSslCertOutputWithContext(ctx context.Context) SslCertOutput
}

func (*SslCert) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCert)(nil))
}

func (i *SslCert) ToSslCertOutput() SslCertOutput {
	return i.ToSslCertOutputWithContext(context.Background())
}

func (i *SslCert) ToSslCertOutputWithContext(ctx context.Context) SslCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertOutput)
}

type SslCertOutput struct {
	*pulumi.OutputState
}

func (SslCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslCert)(nil))
}

func (o SslCertOutput) ToSslCertOutput() SslCertOutput {
	return o
}

func (o SslCertOutput) ToSslCertOutputWithContext(ctx context.Context) SslCertOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SslCertOutput{})
}
