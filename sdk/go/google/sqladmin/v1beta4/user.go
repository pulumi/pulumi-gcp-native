// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta4

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new user in a Cloud SQL instance.
type User struct {
	pulumi.CustomResourceState

	// Dual password status for the user.
	DualPasswordType pulumi.StringOutput `pulumi:"dualPasswordType"`
	// This field is deprecated and will be removed from a future version of the API.
	//
	// Deprecated: This field is deprecated and will be removed from a future version of the API.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
	Host     pulumi.StringOutput `pulumi:"host"`
	Instance pulumi.StringOutput `pulumi:"instance"`
	// This is always `sql#user`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password for the user.
	Password pulumi.StringOutput `pulumi:"password"`
	// User level password validation policy.
	PasswordPolicy       UserPasswordValidationPolicyResponseOutput `pulumi:"passwordPolicy"`
	Project              pulumi.StringOutput                        `pulumi:"project"`
	SqlserverUserDetails SqlServerUserDetailsResponseOutput         `pulumi:"sqlserverUserDetails"`
	// The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Instance == nil {
		return nil, errors.New("invalid value for required argument 'Instance'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"instance",
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource User
	err := ctx.RegisterResource("google-native:sqladmin/v1beta4:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("google-native:sqladmin/v1beta4:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
}

type UserState struct {
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Dual password status for the user.
	DualPasswordType *UserDualPasswordType `pulumi:"dualPasswordType"`
	// This field is deprecated and will be removed from a future version of the API.
	//
	// Deprecated: This field is deprecated and will be removed from a future version of the API.
	Etag *string `pulumi:"etag"`
	// Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
	Host *string `pulumi:"host"`
	// The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
	Instance string `pulumi:"instance"`
	// This is always `sql#user`.
	Kind *string `pulumi:"kind"`
	// The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
	Name *string `pulumi:"name"`
	// The password for the user.
	Password *string `pulumi:"password"`
	// User level password validation policy.
	PasswordPolicy *UserPasswordValidationPolicy `pulumi:"passwordPolicy"`
	// The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
	Project              *string               `pulumi:"project"`
	SqlserverUserDetails *SqlServerUserDetails `pulumi:"sqlserverUserDetails"`
	// The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
	Type *UserType `pulumi:"type"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Dual password status for the user.
	DualPasswordType UserDualPasswordTypePtrInput
	// This field is deprecated and will be removed from a future version of the API.
	//
	// Deprecated: This field is deprecated and will be removed from a future version of the API.
	Etag pulumi.StringPtrInput
	// Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
	Host pulumi.StringPtrInput
	// The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
	Instance pulumi.StringInput
	// This is always `sql#user`.
	Kind pulumi.StringPtrInput
	// The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
	Name pulumi.StringPtrInput
	// The password for the user.
	Password pulumi.StringPtrInput
	// User level password validation policy.
	PasswordPolicy UserPasswordValidationPolicyPtrInput
	// The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
	Project              pulumi.StringPtrInput
	SqlserverUserDetails SqlServerUserDetailsPtrInput
	// The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
	Type UserTypePtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Dual password status for the user.
func (o UserOutput) DualPasswordType() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.DualPasswordType }).(pulumi.StringOutput)
}

// This field is deprecated and will be removed from a future version of the API.
//
// Deprecated: This field is deprecated and will be removed from a future version of the API.
func (o UserOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
func (o UserOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func (o UserOutput) Instance() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Instance }).(pulumi.StringOutput)
}

// This is always `sql#user`.
func (o UserOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password for the user.
func (o UserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// User level password validation policy.
func (o UserOutput) PasswordPolicy() UserPasswordValidationPolicyResponseOutput {
	return o.ApplyT(func(v *User) UserPasswordValidationPolicyResponseOutput { return v.PasswordPolicy }).(UserPasswordValidationPolicyResponseOutput)
}

func (o UserOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

func (o UserOutput) SqlserverUserDetails() SqlServerUserDetailsResponseOutput {
	return o.ApplyT(func(v *User) SqlServerUserDetailsResponseOutput { return v.SqlserverUserDetails }).(SqlServerUserDetailsResponseOutput)
}

// The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
func (o UserOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterOutputType(UserOutput{})
}
