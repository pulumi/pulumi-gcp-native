// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1b3

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a Cloud Dataflow job from a template.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type Template struct {
	pulumi.CustomResourceState

	// The template metadata describing the template name, available parameters, etc.
	Metadata TemplateMetadataResponseOutput `pulumi:"metadata"`
	// Describes the runtime metadata with SDKInfo and available parameters.
	RuntimeMetadata RuntimeMetadataResponseOutput `pulumi:"runtimeMetadata"`
	// The status of the get template request. Any problems with the request will be indicated in the error_details.
	Status StatusResponseOutput `pulumi:"status"`
	// Template Type.
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
}

// NewTemplate registers a new resource with the given unique name, arguments, and options.
func NewTemplate(ctx *pulumi.Context,
	name string, args *TemplateArgs, opts ...pulumi.ResourceOption) (*Template, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GcsPath == nil {
		return nil, errors.New("invalid value for required argument 'GcsPath'")
	}
	if args.JobName == nil {
		return nil, errors.New("invalid value for required argument 'JobName'")
	}
	var resource Template
	err := ctx.RegisterResource("google-native:dataflow/v1b3:Template", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplate gets an existing Template resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateState, opts ...pulumi.ResourceOption) (*Template, error) {
	var resource Template
	err := ctx.ReadResource("google-native:dataflow/v1b3:Template", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Template resources.
type templateState struct {
}

type TemplateState struct {
}

func (TemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateState)(nil)).Elem()
}

type templateArgs struct {
	// The runtime environment for the job.
	Environment *RuntimeEnvironment `pulumi:"environment"`
	// A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with `gs://`.
	GcsPath string `pulumi:"gcsPath"`
	// The job name to use for the created job.
	JobName string `pulumi:"jobName"`
	// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.
	Location *string `pulumi:"location"`
	// The runtime parameters to pass to the job.
	Parameters map[string]string `pulumi:"parameters"`
	Project    *string           `pulumi:"project"`
}

// The set of arguments for constructing a Template resource.
type TemplateArgs struct {
	// The runtime environment for the job.
	Environment RuntimeEnvironmentPtrInput
	// A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with `gs://`.
	GcsPath pulumi.StringInput
	// The job name to use for the created job.
	JobName pulumi.StringInput
	// The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.
	Location pulumi.StringPtrInput
	// The runtime parameters to pass to the job.
	Parameters pulumi.StringMapInput
	Project    pulumi.StringPtrInput
}

func (TemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateArgs)(nil)).Elem()
}

type TemplateInput interface {
	pulumi.Input

	ToTemplateOutput() TemplateOutput
	ToTemplateOutputWithContext(ctx context.Context) TemplateOutput
}

func (*Template) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (i *Template) ToTemplateOutput() TemplateOutput {
	return i.ToTemplateOutputWithContext(context.Background())
}

func (i *Template) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateOutput)
}

type TemplateOutput struct{ *pulumi.OutputState }

func (TemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Template)(nil)).Elem()
}

func (o TemplateOutput) ToTemplateOutput() TemplateOutput {
	return o
}

func (o TemplateOutput) ToTemplateOutputWithContext(ctx context.Context) TemplateOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateInput)(nil)).Elem(), &Template{})
	pulumi.RegisterOutputType(TemplateOutput{})
}
