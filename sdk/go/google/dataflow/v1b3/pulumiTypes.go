// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1b3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Settings for WorkerPool autoscaling.
type AutoscalingSettings struct {
	// The algorithm to use for autoscaling.
	Algorithm *AutoscalingSettingsAlgorithm `pulumi:"algorithm"`
	// The maximum number of workers to cap scaling at.
	MaxNumWorkers *int `pulumi:"maxNumWorkers"`
}

// AutoscalingSettingsInput is an input type that accepts AutoscalingSettingsArgs and AutoscalingSettingsOutput values.
// You can construct a concrete instance of `AutoscalingSettingsInput` via:
//
//	AutoscalingSettingsArgs{...}
type AutoscalingSettingsInput interface {
	pulumi.Input

	ToAutoscalingSettingsOutput() AutoscalingSettingsOutput
	ToAutoscalingSettingsOutputWithContext(context.Context) AutoscalingSettingsOutput
}

// Settings for WorkerPool autoscaling.
type AutoscalingSettingsArgs struct {
	// The algorithm to use for autoscaling.
	Algorithm AutoscalingSettingsAlgorithmPtrInput `pulumi:"algorithm"`
	// The maximum number of workers to cap scaling at.
	MaxNumWorkers pulumi.IntPtrInput `pulumi:"maxNumWorkers"`
}

func (AutoscalingSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingSettings)(nil)).Elem()
}

func (i AutoscalingSettingsArgs) ToAutoscalingSettingsOutput() AutoscalingSettingsOutput {
	return i.ToAutoscalingSettingsOutputWithContext(context.Background())
}

func (i AutoscalingSettingsArgs) ToAutoscalingSettingsOutputWithContext(ctx context.Context) AutoscalingSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingSettingsOutput)
}

func (i AutoscalingSettingsArgs) ToAutoscalingSettingsPtrOutput() AutoscalingSettingsPtrOutput {
	return i.ToAutoscalingSettingsPtrOutputWithContext(context.Background())
}

func (i AutoscalingSettingsArgs) ToAutoscalingSettingsPtrOutputWithContext(ctx context.Context) AutoscalingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingSettingsOutput).ToAutoscalingSettingsPtrOutputWithContext(ctx)
}

// AutoscalingSettingsPtrInput is an input type that accepts AutoscalingSettingsArgs, AutoscalingSettingsPtr and AutoscalingSettingsPtrOutput values.
// You can construct a concrete instance of `AutoscalingSettingsPtrInput` via:
//
//	        AutoscalingSettingsArgs{...}
//
//	or:
//
//	        nil
type AutoscalingSettingsPtrInput interface {
	pulumi.Input

	ToAutoscalingSettingsPtrOutput() AutoscalingSettingsPtrOutput
	ToAutoscalingSettingsPtrOutputWithContext(context.Context) AutoscalingSettingsPtrOutput
}

type autoscalingSettingsPtrType AutoscalingSettingsArgs

func AutoscalingSettingsPtr(v *AutoscalingSettingsArgs) AutoscalingSettingsPtrInput {
	return (*autoscalingSettingsPtrType)(v)
}

func (*autoscalingSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingSettings)(nil)).Elem()
}

func (i *autoscalingSettingsPtrType) ToAutoscalingSettingsPtrOutput() AutoscalingSettingsPtrOutput {
	return i.ToAutoscalingSettingsPtrOutputWithContext(context.Background())
}

func (i *autoscalingSettingsPtrType) ToAutoscalingSettingsPtrOutputWithContext(ctx context.Context) AutoscalingSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoscalingSettingsPtrOutput)
}

// Settings for WorkerPool autoscaling.
type AutoscalingSettingsOutput struct{ *pulumi.OutputState }

func (AutoscalingSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingSettings)(nil)).Elem()
}

func (o AutoscalingSettingsOutput) ToAutoscalingSettingsOutput() AutoscalingSettingsOutput {
	return o
}

func (o AutoscalingSettingsOutput) ToAutoscalingSettingsOutputWithContext(ctx context.Context) AutoscalingSettingsOutput {
	return o
}

func (o AutoscalingSettingsOutput) ToAutoscalingSettingsPtrOutput() AutoscalingSettingsPtrOutput {
	return o.ToAutoscalingSettingsPtrOutputWithContext(context.Background())
}

func (o AutoscalingSettingsOutput) ToAutoscalingSettingsPtrOutputWithContext(ctx context.Context) AutoscalingSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AutoscalingSettings) *AutoscalingSettings {
		return &v
	}).(AutoscalingSettingsPtrOutput)
}

// The algorithm to use for autoscaling.
func (o AutoscalingSettingsOutput) Algorithm() AutoscalingSettingsAlgorithmPtrOutput {
	return o.ApplyT(func(v AutoscalingSettings) *AutoscalingSettingsAlgorithm { return v.Algorithm }).(AutoscalingSettingsAlgorithmPtrOutput)
}

// The maximum number of workers to cap scaling at.
func (o AutoscalingSettingsOutput) MaxNumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AutoscalingSettings) *int { return v.MaxNumWorkers }).(pulumi.IntPtrOutput)
}

type AutoscalingSettingsPtrOutput struct{ *pulumi.OutputState }

func (AutoscalingSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoscalingSettings)(nil)).Elem()
}

func (o AutoscalingSettingsPtrOutput) ToAutoscalingSettingsPtrOutput() AutoscalingSettingsPtrOutput {
	return o
}

func (o AutoscalingSettingsPtrOutput) ToAutoscalingSettingsPtrOutputWithContext(ctx context.Context) AutoscalingSettingsPtrOutput {
	return o
}

func (o AutoscalingSettingsPtrOutput) Elem() AutoscalingSettingsOutput {
	return o.ApplyT(func(v *AutoscalingSettings) AutoscalingSettings {
		if v != nil {
			return *v
		}
		var ret AutoscalingSettings
		return ret
	}).(AutoscalingSettingsOutput)
}

// The algorithm to use for autoscaling.
func (o AutoscalingSettingsPtrOutput) Algorithm() AutoscalingSettingsAlgorithmPtrOutput {
	return o.ApplyT(func(v *AutoscalingSettings) *AutoscalingSettingsAlgorithm {
		if v == nil {
			return nil
		}
		return v.Algorithm
	}).(AutoscalingSettingsAlgorithmPtrOutput)
}

// The maximum number of workers to cap scaling at.
func (o AutoscalingSettingsPtrOutput) MaxNumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AutoscalingSettings) *int {
		if v == nil {
			return nil
		}
		return v.MaxNumWorkers
	}).(pulumi.IntPtrOutput)
}

// Settings for WorkerPool autoscaling.
type AutoscalingSettingsResponse struct {
	// The algorithm to use for autoscaling.
	Algorithm string `pulumi:"algorithm"`
	// The maximum number of workers to cap scaling at.
	MaxNumWorkers int `pulumi:"maxNumWorkers"`
}

// Settings for WorkerPool autoscaling.
type AutoscalingSettingsResponseOutput struct{ *pulumi.OutputState }

func (AutoscalingSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AutoscalingSettingsResponse)(nil)).Elem()
}

func (o AutoscalingSettingsResponseOutput) ToAutoscalingSettingsResponseOutput() AutoscalingSettingsResponseOutput {
	return o
}

func (o AutoscalingSettingsResponseOutput) ToAutoscalingSettingsResponseOutputWithContext(ctx context.Context) AutoscalingSettingsResponseOutput {
	return o
}

// The algorithm to use for autoscaling.
func (o AutoscalingSettingsResponseOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v AutoscalingSettingsResponse) string { return v.Algorithm }).(pulumi.StringOutput)
}

// The maximum number of workers to cap scaling at.
func (o AutoscalingSettingsResponseOutput) MaxNumWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v AutoscalingSettingsResponse) int { return v.MaxNumWorkers }).(pulumi.IntOutput)
}

// Metadata for a BigQuery connector used by the job.
type BigQueryIODetails struct {
	// Dataset accessed in the connection.
	Dataset *string `pulumi:"dataset"`
	// Project accessed in the connection.
	Project *string `pulumi:"project"`
	// Query used to access data in the connection.
	Query *string `pulumi:"query"`
	// Table accessed in the connection.
	Table *string `pulumi:"table"`
}

// BigQueryIODetailsInput is an input type that accepts BigQueryIODetailsArgs and BigQueryIODetailsOutput values.
// You can construct a concrete instance of `BigQueryIODetailsInput` via:
//
//	BigQueryIODetailsArgs{...}
type BigQueryIODetailsInput interface {
	pulumi.Input

	ToBigQueryIODetailsOutput() BigQueryIODetailsOutput
	ToBigQueryIODetailsOutputWithContext(context.Context) BigQueryIODetailsOutput
}

// Metadata for a BigQuery connector used by the job.
type BigQueryIODetailsArgs struct {
	// Dataset accessed in the connection.
	Dataset pulumi.StringPtrInput `pulumi:"dataset"`
	// Project accessed in the connection.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// Query used to access data in the connection.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// Table accessed in the connection.
	Table pulumi.StringPtrInput `pulumi:"table"`
}

func (BigQueryIODetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryIODetails)(nil)).Elem()
}

func (i BigQueryIODetailsArgs) ToBigQueryIODetailsOutput() BigQueryIODetailsOutput {
	return i.ToBigQueryIODetailsOutputWithContext(context.Background())
}

func (i BigQueryIODetailsArgs) ToBigQueryIODetailsOutputWithContext(ctx context.Context) BigQueryIODetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryIODetailsOutput)
}

// BigQueryIODetailsArrayInput is an input type that accepts BigQueryIODetailsArray and BigQueryIODetailsArrayOutput values.
// You can construct a concrete instance of `BigQueryIODetailsArrayInput` via:
//
//	BigQueryIODetailsArray{ BigQueryIODetailsArgs{...} }
type BigQueryIODetailsArrayInput interface {
	pulumi.Input

	ToBigQueryIODetailsArrayOutput() BigQueryIODetailsArrayOutput
	ToBigQueryIODetailsArrayOutputWithContext(context.Context) BigQueryIODetailsArrayOutput
}

type BigQueryIODetailsArray []BigQueryIODetailsInput

func (BigQueryIODetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigQueryIODetails)(nil)).Elem()
}

func (i BigQueryIODetailsArray) ToBigQueryIODetailsArrayOutput() BigQueryIODetailsArrayOutput {
	return i.ToBigQueryIODetailsArrayOutputWithContext(context.Background())
}

func (i BigQueryIODetailsArray) ToBigQueryIODetailsArrayOutputWithContext(ctx context.Context) BigQueryIODetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryIODetailsArrayOutput)
}

// Metadata for a BigQuery connector used by the job.
type BigQueryIODetailsOutput struct{ *pulumi.OutputState }

func (BigQueryIODetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryIODetails)(nil)).Elem()
}

func (o BigQueryIODetailsOutput) ToBigQueryIODetailsOutput() BigQueryIODetailsOutput {
	return o
}

func (o BigQueryIODetailsOutput) ToBigQueryIODetailsOutputWithContext(ctx context.Context) BigQueryIODetailsOutput {
	return o
}

// Dataset accessed in the connection.
func (o BigQueryIODetailsOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryIODetails) *string { return v.Dataset }).(pulumi.StringPtrOutput)
}

// Project accessed in the connection.
func (o BigQueryIODetailsOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryIODetails) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// Query used to access data in the connection.
func (o BigQueryIODetailsOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryIODetails) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// Table accessed in the connection.
func (o BigQueryIODetailsOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryIODetails) *string { return v.Table }).(pulumi.StringPtrOutput)
}

type BigQueryIODetailsArrayOutput struct{ *pulumi.OutputState }

func (BigQueryIODetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigQueryIODetails)(nil)).Elem()
}

func (o BigQueryIODetailsArrayOutput) ToBigQueryIODetailsArrayOutput() BigQueryIODetailsArrayOutput {
	return o
}

func (o BigQueryIODetailsArrayOutput) ToBigQueryIODetailsArrayOutputWithContext(ctx context.Context) BigQueryIODetailsArrayOutput {
	return o
}

func (o BigQueryIODetailsArrayOutput) Index(i pulumi.IntInput) BigQueryIODetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigQueryIODetails {
		return vs[0].([]BigQueryIODetails)[vs[1].(int)]
	}).(BigQueryIODetailsOutput)
}

// Metadata for a BigQuery connector used by the job.
type BigQueryIODetailsResponse struct {
	// Dataset accessed in the connection.
	Dataset string `pulumi:"dataset"`
	// Project accessed in the connection.
	Project string `pulumi:"project"`
	// Query used to access data in the connection.
	Query string `pulumi:"query"`
	// Table accessed in the connection.
	Table string `pulumi:"table"`
}

// Metadata for a BigQuery connector used by the job.
type BigQueryIODetailsResponseOutput struct{ *pulumi.OutputState }

func (BigQueryIODetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryIODetailsResponse)(nil)).Elem()
}

func (o BigQueryIODetailsResponseOutput) ToBigQueryIODetailsResponseOutput() BigQueryIODetailsResponseOutput {
	return o
}

func (o BigQueryIODetailsResponseOutput) ToBigQueryIODetailsResponseOutputWithContext(ctx context.Context) BigQueryIODetailsResponseOutput {
	return o
}

// Dataset accessed in the connection.
func (o BigQueryIODetailsResponseOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryIODetailsResponse) string { return v.Dataset }).(pulumi.StringOutput)
}

// Project accessed in the connection.
func (o BigQueryIODetailsResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryIODetailsResponse) string { return v.Project }).(pulumi.StringOutput)
}

// Query used to access data in the connection.
func (o BigQueryIODetailsResponseOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryIODetailsResponse) string { return v.Query }).(pulumi.StringOutput)
}

// Table accessed in the connection.
func (o BigQueryIODetailsResponseOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryIODetailsResponse) string { return v.Table }).(pulumi.StringOutput)
}

type BigQueryIODetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (BigQueryIODetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigQueryIODetailsResponse)(nil)).Elem()
}

func (o BigQueryIODetailsResponseArrayOutput) ToBigQueryIODetailsResponseArrayOutput() BigQueryIODetailsResponseArrayOutput {
	return o
}

func (o BigQueryIODetailsResponseArrayOutput) ToBigQueryIODetailsResponseArrayOutputWithContext(ctx context.Context) BigQueryIODetailsResponseArrayOutput {
	return o
}

func (o BigQueryIODetailsResponseArrayOutput) Index(i pulumi.IntInput) BigQueryIODetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigQueryIODetailsResponse {
		return vs[0].([]BigQueryIODetailsResponse)[vs[1].(int)]
	}).(BigQueryIODetailsResponseOutput)
}

// Metadata for a Cloud Bigtable connector used by the job.
type BigTableIODetails struct {
	// InstanceId accessed in the connection.
	InstanceId *string `pulumi:"instanceId"`
	// ProjectId accessed in the connection.
	Project *string `pulumi:"project"`
	// TableId accessed in the connection.
	TableId *string `pulumi:"tableId"`
}

// BigTableIODetailsInput is an input type that accepts BigTableIODetailsArgs and BigTableIODetailsOutput values.
// You can construct a concrete instance of `BigTableIODetailsInput` via:
//
//	BigTableIODetailsArgs{...}
type BigTableIODetailsInput interface {
	pulumi.Input

	ToBigTableIODetailsOutput() BigTableIODetailsOutput
	ToBigTableIODetailsOutputWithContext(context.Context) BigTableIODetailsOutput
}

// Metadata for a Cloud Bigtable connector used by the job.
type BigTableIODetailsArgs struct {
	// InstanceId accessed in the connection.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// ProjectId accessed in the connection.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// TableId accessed in the connection.
	TableId pulumi.StringPtrInput `pulumi:"tableId"`
}

func (BigTableIODetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigTableIODetails)(nil)).Elem()
}

func (i BigTableIODetailsArgs) ToBigTableIODetailsOutput() BigTableIODetailsOutput {
	return i.ToBigTableIODetailsOutputWithContext(context.Background())
}

func (i BigTableIODetailsArgs) ToBigTableIODetailsOutputWithContext(ctx context.Context) BigTableIODetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigTableIODetailsOutput)
}

// BigTableIODetailsArrayInput is an input type that accepts BigTableIODetailsArray and BigTableIODetailsArrayOutput values.
// You can construct a concrete instance of `BigTableIODetailsArrayInput` via:
//
//	BigTableIODetailsArray{ BigTableIODetailsArgs{...} }
type BigTableIODetailsArrayInput interface {
	pulumi.Input

	ToBigTableIODetailsArrayOutput() BigTableIODetailsArrayOutput
	ToBigTableIODetailsArrayOutputWithContext(context.Context) BigTableIODetailsArrayOutput
}

type BigTableIODetailsArray []BigTableIODetailsInput

func (BigTableIODetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigTableIODetails)(nil)).Elem()
}

func (i BigTableIODetailsArray) ToBigTableIODetailsArrayOutput() BigTableIODetailsArrayOutput {
	return i.ToBigTableIODetailsArrayOutputWithContext(context.Background())
}

func (i BigTableIODetailsArray) ToBigTableIODetailsArrayOutputWithContext(ctx context.Context) BigTableIODetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigTableIODetailsArrayOutput)
}

// Metadata for a Cloud Bigtable connector used by the job.
type BigTableIODetailsOutput struct{ *pulumi.OutputState }

func (BigTableIODetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigTableIODetails)(nil)).Elem()
}

func (o BigTableIODetailsOutput) ToBigTableIODetailsOutput() BigTableIODetailsOutput {
	return o
}

func (o BigTableIODetailsOutput) ToBigTableIODetailsOutputWithContext(ctx context.Context) BigTableIODetailsOutput {
	return o
}

// InstanceId accessed in the connection.
func (o BigTableIODetailsOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigTableIODetails) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// ProjectId accessed in the connection.
func (o BigTableIODetailsOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigTableIODetails) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// TableId accessed in the connection.
func (o BigTableIODetailsOutput) TableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigTableIODetails) *string { return v.TableId }).(pulumi.StringPtrOutput)
}

type BigTableIODetailsArrayOutput struct{ *pulumi.OutputState }

func (BigTableIODetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigTableIODetails)(nil)).Elem()
}

func (o BigTableIODetailsArrayOutput) ToBigTableIODetailsArrayOutput() BigTableIODetailsArrayOutput {
	return o
}

func (o BigTableIODetailsArrayOutput) ToBigTableIODetailsArrayOutputWithContext(ctx context.Context) BigTableIODetailsArrayOutput {
	return o
}

func (o BigTableIODetailsArrayOutput) Index(i pulumi.IntInput) BigTableIODetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigTableIODetails {
		return vs[0].([]BigTableIODetails)[vs[1].(int)]
	}).(BigTableIODetailsOutput)
}

// Metadata for a Cloud Bigtable connector used by the job.
type BigTableIODetailsResponse struct {
	// InstanceId accessed in the connection.
	InstanceId string `pulumi:"instanceId"`
	// ProjectId accessed in the connection.
	Project string `pulumi:"project"`
	// TableId accessed in the connection.
	TableId string `pulumi:"tableId"`
}

// Metadata for a Cloud Bigtable connector used by the job.
type BigTableIODetailsResponseOutput struct{ *pulumi.OutputState }

func (BigTableIODetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigTableIODetailsResponse)(nil)).Elem()
}

func (o BigTableIODetailsResponseOutput) ToBigTableIODetailsResponseOutput() BigTableIODetailsResponseOutput {
	return o
}

func (o BigTableIODetailsResponseOutput) ToBigTableIODetailsResponseOutputWithContext(ctx context.Context) BigTableIODetailsResponseOutput {
	return o
}

// InstanceId accessed in the connection.
func (o BigTableIODetailsResponseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v BigTableIODetailsResponse) string { return v.InstanceId }).(pulumi.StringOutput)
}

// ProjectId accessed in the connection.
func (o BigTableIODetailsResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v BigTableIODetailsResponse) string { return v.Project }).(pulumi.StringOutput)
}

// TableId accessed in the connection.
func (o BigTableIODetailsResponseOutput) TableId() pulumi.StringOutput {
	return o.ApplyT(func(v BigTableIODetailsResponse) string { return v.TableId }).(pulumi.StringOutput)
}

type BigTableIODetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (BigTableIODetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BigTableIODetailsResponse)(nil)).Elem()
}

func (o BigTableIODetailsResponseArrayOutput) ToBigTableIODetailsResponseArrayOutput() BigTableIODetailsResponseArrayOutput {
	return o
}

func (o BigTableIODetailsResponseArrayOutput) ToBigTableIODetailsResponseArrayOutputWithContext(ctx context.Context) BigTableIODetailsResponseArrayOutput {
	return o
}

func (o BigTableIODetailsResponseArrayOutput) Index(i pulumi.IntInput) BigTableIODetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BigTableIODetailsResponse {
		return vs[0].([]BigTableIODetailsResponse)[vs[1].(int)]
	}).(BigTableIODetailsResponseOutput)
}

// Description of an interstitial value between transforms in an execution stage.
type ComponentSource struct {
	// Dataflow service generated name for this source.
	Name *string `pulumi:"name"`
	// User name for the original user transform or collection with which this source is most closely associated.
	OriginalTransformOrCollection *string `pulumi:"originalTransformOrCollection"`
	// Human-readable name for this transform; may be user or system generated.
	UserName *string `pulumi:"userName"`
}

// ComponentSourceInput is an input type that accepts ComponentSourceArgs and ComponentSourceOutput values.
// You can construct a concrete instance of `ComponentSourceInput` via:
//
//	ComponentSourceArgs{...}
type ComponentSourceInput interface {
	pulumi.Input

	ToComponentSourceOutput() ComponentSourceOutput
	ToComponentSourceOutputWithContext(context.Context) ComponentSourceOutput
}

// Description of an interstitial value between transforms in an execution stage.
type ComponentSourceArgs struct {
	// Dataflow service generated name for this source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// User name for the original user transform or collection with which this source is most closely associated.
	OriginalTransformOrCollection pulumi.StringPtrInput `pulumi:"originalTransformOrCollection"`
	// Human-readable name for this transform; may be user or system generated.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ComponentSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSource)(nil)).Elem()
}

func (i ComponentSourceArgs) ToComponentSourceOutput() ComponentSourceOutput {
	return i.ToComponentSourceOutputWithContext(context.Background())
}

func (i ComponentSourceArgs) ToComponentSourceOutputWithContext(ctx context.Context) ComponentSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentSourceOutput)
}

// ComponentSourceArrayInput is an input type that accepts ComponentSourceArray and ComponentSourceArrayOutput values.
// You can construct a concrete instance of `ComponentSourceArrayInput` via:
//
//	ComponentSourceArray{ ComponentSourceArgs{...} }
type ComponentSourceArrayInput interface {
	pulumi.Input

	ToComponentSourceArrayOutput() ComponentSourceArrayOutput
	ToComponentSourceArrayOutputWithContext(context.Context) ComponentSourceArrayOutput
}

type ComponentSourceArray []ComponentSourceInput

func (ComponentSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentSource)(nil)).Elem()
}

func (i ComponentSourceArray) ToComponentSourceArrayOutput() ComponentSourceArrayOutput {
	return i.ToComponentSourceArrayOutputWithContext(context.Background())
}

func (i ComponentSourceArray) ToComponentSourceArrayOutputWithContext(ctx context.Context) ComponentSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentSourceArrayOutput)
}

// Description of an interstitial value between transforms in an execution stage.
type ComponentSourceOutput struct{ *pulumi.OutputState }

func (ComponentSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSource)(nil)).Elem()
}

func (o ComponentSourceOutput) ToComponentSourceOutput() ComponentSourceOutput {
	return o
}

func (o ComponentSourceOutput) ToComponentSourceOutputWithContext(ctx context.Context) ComponentSourceOutput {
	return o
}

// Dataflow service generated name for this source.
func (o ComponentSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// User name for the original user transform or collection with which this source is most closely associated.
func (o ComponentSourceOutput) OriginalTransformOrCollection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentSource) *string { return v.OriginalTransformOrCollection }).(pulumi.StringPtrOutput)
}

// Human-readable name for this transform; may be user or system generated.
func (o ComponentSourceOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentSource) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ComponentSourceArrayOutput struct{ *pulumi.OutputState }

func (ComponentSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentSource)(nil)).Elem()
}

func (o ComponentSourceArrayOutput) ToComponentSourceArrayOutput() ComponentSourceArrayOutput {
	return o
}

func (o ComponentSourceArrayOutput) ToComponentSourceArrayOutputWithContext(ctx context.Context) ComponentSourceArrayOutput {
	return o
}

func (o ComponentSourceArrayOutput) Index(i pulumi.IntInput) ComponentSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentSource {
		return vs[0].([]ComponentSource)[vs[1].(int)]
	}).(ComponentSourceOutput)
}

// Description of an interstitial value between transforms in an execution stage.
type ComponentSourceResponse struct {
	// Dataflow service generated name for this source.
	Name string `pulumi:"name"`
	// User name for the original user transform or collection with which this source is most closely associated.
	OriginalTransformOrCollection string `pulumi:"originalTransformOrCollection"`
	// Human-readable name for this transform; may be user or system generated.
	UserName string `pulumi:"userName"`
}

// Description of an interstitial value between transforms in an execution stage.
type ComponentSourceResponseOutput struct{ *pulumi.OutputState }

func (ComponentSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentSourceResponse)(nil)).Elem()
}

func (o ComponentSourceResponseOutput) ToComponentSourceResponseOutput() ComponentSourceResponseOutput {
	return o
}

func (o ComponentSourceResponseOutput) ToComponentSourceResponseOutputWithContext(ctx context.Context) ComponentSourceResponseOutput {
	return o
}

// Dataflow service generated name for this source.
func (o ComponentSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User name for the original user transform or collection with which this source is most closely associated.
func (o ComponentSourceResponseOutput) OriginalTransformOrCollection() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSourceResponse) string { return v.OriginalTransformOrCollection }).(pulumi.StringOutput)
}

// Human-readable name for this transform; may be user or system generated.
func (o ComponentSourceResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentSourceResponse) string { return v.UserName }).(pulumi.StringOutput)
}

type ComponentSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (ComponentSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentSourceResponse)(nil)).Elem()
}

func (o ComponentSourceResponseArrayOutput) ToComponentSourceResponseArrayOutput() ComponentSourceResponseArrayOutput {
	return o
}

func (o ComponentSourceResponseArrayOutput) ToComponentSourceResponseArrayOutputWithContext(ctx context.Context) ComponentSourceResponseArrayOutput {
	return o
}

func (o ComponentSourceResponseArrayOutput) Index(i pulumi.IntInput) ComponentSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentSourceResponse {
		return vs[0].([]ComponentSourceResponse)[vs[1].(int)]
	}).(ComponentSourceResponseOutput)
}

// Description of a transform executed as part of an execution stage.
type ComponentTransform struct {
	// Dataflow service generated name for this source.
	Name *string `pulumi:"name"`
	// User name for the original user transform with which this transform is most closely associated.
	OriginalTransform *string `pulumi:"originalTransform"`
	// Human-readable name for this transform; may be user or system generated.
	UserName *string `pulumi:"userName"`
}

// ComponentTransformInput is an input type that accepts ComponentTransformArgs and ComponentTransformOutput values.
// You can construct a concrete instance of `ComponentTransformInput` via:
//
//	ComponentTransformArgs{...}
type ComponentTransformInput interface {
	pulumi.Input

	ToComponentTransformOutput() ComponentTransformOutput
	ToComponentTransformOutputWithContext(context.Context) ComponentTransformOutput
}

// Description of a transform executed as part of an execution stage.
type ComponentTransformArgs struct {
	// Dataflow service generated name for this source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// User name for the original user transform with which this transform is most closely associated.
	OriginalTransform pulumi.StringPtrInput `pulumi:"originalTransform"`
	// Human-readable name for this transform; may be user or system generated.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (ComponentTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTransform)(nil)).Elem()
}

func (i ComponentTransformArgs) ToComponentTransformOutput() ComponentTransformOutput {
	return i.ToComponentTransformOutputWithContext(context.Background())
}

func (i ComponentTransformArgs) ToComponentTransformOutputWithContext(ctx context.Context) ComponentTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTransformOutput)
}

// ComponentTransformArrayInput is an input type that accepts ComponentTransformArray and ComponentTransformArrayOutput values.
// You can construct a concrete instance of `ComponentTransformArrayInput` via:
//
//	ComponentTransformArray{ ComponentTransformArgs{...} }
type ComponentTransformArrayInput interface {
	pulumi.Input

	ToComponentTransformArrayOutput() ComponentTransformArrayOutput
	ToComponentTransformArrayOutputWithContext(context.Context) ComponentTransformArrayOutput
}

type ComponentTransformArray []ComponentTransformInput

func (ComponentTransformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentTransform)(nil)).Elem()
}

func (i ComponentTransformArray) ToComponentTransformArrayOutput() ComponentTransformArrayOutput {
	return i.ToComponentTransformArrayOutputWithContext(context.Background())
}

func (i ComponentTransformArray) ToComponentTransformArrayOutputWithContext(ctx context.Context) ComponentTransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTransformArrayOutput)
}

// Description of a transform executed as part of an execution stage.
type ComponentTransformOutput struct{ *pulumi.OutputState }

func (ComponentTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTransform)(nil)).Elem()
}

func (o ComponentTransformOutput) ToComponentTransformOutput() ComponentTransformOutput {
	return o
}

func (o ComponentTransformOutput) ToComponentTransformOutputWithContext(ctx context.Context) ComponentTransformOutput {
	return o
}

// Dataflow service generated name for this source.
func (o ComponentTransformOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTransform) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// User name for the original user transform with which this transform is most closely associated.
func (o ComponentTransformOutput) OriginalTransform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTransform) *string { return v.OriginalTransform }).(pulumi.StringPtrOutput)
}

// Human-readable name for this transform; may be user or system generated.
func (o ComponentTransformOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ComponentTransform) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type ComponentTransformArrayOutput struct{ *pulumi.OutputState }

func (ComponentTransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentTransform)(nil)).Elem()
}

func (o ComponentTransformArrayOutput) ToComponentTransformArrayOutput() ComponentTransformArrayOutput {
	return o
}

func (o ComponentTransformArrayOutput) ToComponentTransformArrayOutputWithContext(ctx context.Context) ComponentTransformArrayOutput {
	return o
}

func (o ComponentTransformArrayOutput) Index(i pulumi.IntInput) ComponentTransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentTransform {
		return vs[0].([]ComponentTransform)[vs[1].(int)]
	}).(ComponentTransformOutput)
}

// Description of a transform executed as part of an execution stage.
type ComponentTransformResponse struct {
	// Dataflow service generated name for this source.
	Name string `pulumi:"name"`
	// User name for the original user transform with which this transform is most closely associated.
	OriginalTransform string `pulumi:"originalTransform"`
	// Human-readable name for this transform; may be user or system generated.
	UserName string `pulumi:"userName"`
}

// Description of a transform executed as part of an execution stage.
type ComponentTransformResponseOutput struct{ *pulumi.OutputState }

func (ComponentTransformResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentTransformResponse)(nil)).Elem()
}

func (o ComponentTransformResponseOutput) ToComponentTransformResponseOutput() ComponentTransformResponseOutput {
	return o
}

func (o ComponentTransformResponseOutput) ToComponentTransformResponseOutputWithContext(ctx context.Context) ComponentTransformResponseOutput {
	return o
}

// Dataflow service generated name for this source.
func (o ComponentTransformResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentTransformResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User name for the original user transform with which this transform is most closely associated.
func (o ComponentTransformResponseOutput) OriginalTransform() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentTransformResponse) string { return v.OriginalTransform }).(pulumi.StringOutput)
}

// Human-readable name for this transform; may be user or system generated.
func (o ComponentTransformResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v ComponentTransformResponse) string { return v.UserName }).(pulumi.StringOutput)
}

type ComponentTransformResponseArrayOutput struct{ *pulumi.OutputState }

func (ComponentTransformResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ComponentTransformResponse)(nil)).Elem()
}

func (o ComponentTransformResponseArrayOutput) ToComponentTransformResponseArrayOutput() ComponentTransformResponseArrayOutput {
	return o
}

func (o ComponentTransformResponseArrayOutput) ToComponentTransformResponseArrayOutputWithContext(ctx context.Context) ComponentTransformResponseArrayOutput {
	return o
}

func (o ComponentTransformResponseArrayOutput) Index(i pulumi.IntInput) ComponentTransformResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ComponentTransformResponse {
		return vs[0].([]ComponentTransformResponse)[vs[1].(int)]
	}).(ComponentTransformResponseOutput)
}

// Configuration options for sampling elements.
type DataSamplingConfig struct {
	// List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
	Behaviors []DataSamplingConfigBehaviorsItem `pulumi:"behaviors"`
}

// DataSamplingConfigInput is an input type that accepts DataSamplingConfigArgs and DataSamplingConfigOutput values.
// You can construct a concrete instance of `DataSamplingConfigInput` via:
//
//	DataSamplingConfigArgs{...}
type DataSamplingConfigInput interface {
	pulumi.Input

	ToDataSamplingConfigOutput() DataSamplingConfigOutput
	ToDataSamplingConfigOutputWithContext(context.Context) DataSamplingConfigOutput
}

// Configuration options for sampling elements.
type DataSamplingConfigArgs struct {
	// List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
	Behaviors DataSamplingConfigBehaviorsItemArrayInput `pulumi:"behaviors"`
}

func (DataSamplingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSamplingConfig)(nil)).Elem()
}

func (i DataSamplingConfigArgs) ToDataSamplingConfigOutput() DataSamplingConfigOutput {
	return i.ToDataSamplingConfigOutputWithContext(context.Background())
}

func (i DataSamplingConfigArgs) ToDataSamplingConfigOutputWithContext(ctx context.Context) DataSamplingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSamplingConfigOutput)
}

func (i DataSamplingConfigArgs) ToDataSamplingConfigPtrOutput() DataSamplingConfigPtrOutput {
	return i.ToDataSamplingConfigPtrOutputWithContext(context.Background())
}

func (i DataSamplingConfigArgs) ToDataSamplingConfigPtrOutputWithContext(ctx context.Context) DataSamplingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSamplingConfigOutput).ToDataSamplingConfigPtrOutputWithContext(ctx)
}

// DataSamplingConfigPtrInput is an input type that accepts DataSamplingConfigArgs, DataSamplingConfigPtr and DataSamplingConfigPtrOutput values.
// You can construct a concrete instance of `DataSamplingConfigPtrInput` via:
//
//	        DataSamplingConfigArgs{...}
//
//	or:
//
//	        nil
type DataSamplingConfigPtrInput interface {
	pulumi.Input

	ToDataSamplingConfigPtrOutput() DataSamplingConfigPtrOutput
	ToDataSamplingConfigPtrOutputWithContext(context.Context) DataSamplingConfigPtrOutput
}

type dataSamplingConfigPtrType DataSamplingConfigArgs

func DataSamplingConfigPtr(v *DataSamplingConfigArgs) DataSamplingConfigPtrInput {
	return (*dataSamplingConfigPtrType)(v)
}

func (*dataSamplingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSamplingConfig)(nil)).Elem()
}

func (i *dataSamplingConfigPtrType) ToDataSamplingConfigPtrOutput() DataSamplingConfigPtrOutput {
	return i.ToDataSamplingConfigPtrOutputWithContext(context.Background())
}

func (i *dataSamplingConfigPtrType) ToDataSamplingConfigPtrOutputWithContext(ctx context.Context) DataSamplingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSamplingConfigPtrOutput)
}

// Configuration options for sampling elements.
type DataSamplingConfigOutput struct{ *pulumi.OutputState }

func (DataSamplingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSamplingConfig)(nil)).Elem()
}

func (o DataSamplingConfigOutput) ToDataSamplingConfigOutput() DataSamplingConfigOutput {
	return o
}

func (o DataSamplingConfigOutput) ToDataSamplingConfigOutputWithContext(ctx context.Context) DataSamplingConfigOutput {
	return o
}

func (o DataSamplingConfigOutput) ToDataSamplingConfigPtrOutput() DataSamplingConfigPtrOutput {
	return o.ToDataSamplingConfigPtrOutputWithContext(context.Background())
}

func (o DataSamplingConfigOutput) ToDataSamplingConfigPtrOutputWithContext(ctx context.Context) DataSamplingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DataSamplingConfig) *DataSamplingConfig {
		return &v
	}).(DataSamplingConfigPtrOutput)
}

// List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
func (o DataSamplingConfigOutput) Behaviors() DataSamplingConfigBehaviorsItemArrayOutput {
	return o.ApplyT(func(v DataSamplingConfig) []DataSamplingConfigBehaviorsItem { return v.Behaviors }).(DataSamplingConfigBehaviorsItemArrayOutput)
}

type DataSamplingConfigPtrOutput struct{ *pulumi.OutputState }

func (DataSamplingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSamplingConfig)(nil)).Elem()
}

func (o DataSamplingConfigPtrOutput) ToDataSamplingConfigPtrOutput() DataSamplingConfigPtrOutput {
	return o
}

func (o DataSamplingConfigPtrOutput) ToDataSamplingConfigPtrOutputWithContext(ctx context.Context) DataSamplingConfigPtrOutput {
	return o
}

func (o DataSamplingConfigPtrOutput) Elem() DataSamplingConfigOutput {
	return o.ApplyT(func(v *DataSamplingConfig) DataSamplingConfig {
		if v != nil {
			return *v
		}
		var ret DataSamplingConfig
		return ret
	}).(DataSamplingConfigOutput)
}

// List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
func (o DataSamplingConfigPtrOutput) Behaviors() DataSamplingConfigBehaviorsItemArrayOutput {
	return o.ApplyT(func(v *DataSamplingConfig) []DataSamplingConfigBehaviorsItem {
		if v == nil {
			return nil
		}
		return v.Behaviors
	}).(DataSamplingConfigBehaviorsItemArrayOutput)
}

// Configuration options for sampling elements.
type DataSamplingConfigResponse struct {
	// List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
	Behaviors []string `pulumi:"behaviors"`
}

// Configuration options for sampling elements.
type DataSamplingConfigResponseOutput struct{ *pulumi.OutputState }

func (DataSamplingConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSamplingConfigResponse)(nil)).Elem()
}

func (o DataSamplingConfigResponseOutput) ToDataSamplingConfigResponseOutput() DataSamplingConfigResponseOutput {
	return o
}

func (o DataSamplingConfigResponseOutput) ToDataSamplingConfigResponseOutputWithContext(ctx context.Context) DataSamplingConfigResponseOutput {
	return o
}

// List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.
func (o DataSamplingConfigResponseOutput) Behaviors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DataSamplingConfigResponse) []string { return v.Behaviors }).(pulumi.StringArrayOutput)
}

// Metadata for a Datastore connector used by the job.
type DatastoreIODetails struct {
	// Namespace used in the connection.
	Namespace *string `pulumi:"namespace"`
	// ProjectId accessed in the connection.
	Project *string `pulumi:"project"`
}

// DatastoreIODetailsInput is an input type that accepts DatastoreIODetailsArgs and DatastoreIODetailsOutput values.
// You can construct a concrete instance of `DatastoreIODetailsInput` via:
//
//	DatastoreIODetailsArgs{...}
type DatastoreIODetailsInput interface {
	pulumi.Input

	ToDatastoreIODetailsOutput() DatastoreIODetailsOutput
	ToDatastoreIODetailsOutputWithContext(context.Context) DatastoreIODetailsOutput
}

// Metadata for a Datastore connector used by the job.
type DatastoreIODetailsArgs struct {
	// Namespace used in the connection.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// ProjectId accessed in the connection.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (DatastoreIODetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreIODetails)(nil)).Elem()
}

func (i DatastoreIODetailsArgs) ToDatastoreIODetailsOutput() DatastoreIODetailsOutput {
	return i.ToDatastoreIODetailsOutputWithContext(context.Background())
}

func (i DatastoreIODetailsArgs) ToDatastoreIODetailsOutputWithContext(ctx context.Context) DatastoreIODetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreIODetailsOutput)
}

// DatastoreIODetailsArrayInput is an input type that accepts DatastoreIODetailsArray and DatastoreIODetailsArrayOutput values.
// You can construct a concrete instance of `DatastoreIODetailsArrayInput` via:
//
//	DatastoreIODetailsArray{ DatastoreIODetailsArgs{...} }
type DatastoreIODetailsArrayInput interface {
	pulumi.Input

	ToDatastoreIODetailsArrayOutput() DatastoreIODetailsArrayOutput
	ToDatastoreIODetailsArrayOutputWithContext(context.Context) DatastoreIODetailsArrayOutput
}

type DatastoreIODetailsArray []DatastoreIODetailsInput

func (DatastoreIODetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatastoreIODetails)(nil)).Elem()
}

func (i DatastoreIODetailsArray) ToDatastoreIODetailsArrayOutput() DatastoreIODetailsArrayOutput {
	return i.ToDatastoreIODetailsArrayOutputWithContext(context.Background())
}

func (i DatastoreIODetailsArray) ToDatastoreIODetailsArrayOutputWithContext(ctx context.Context) DatastoreIODetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatastoreIODetailsArrayOutput)
}

// Metadata for a Datastore connector used by the job.
type DatastoreIODetailsOutput struct{ *pulumi.OutputState }

func (DatastoreIODetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreIODetails)(nil)).Elem()
}

func (o DatastoreIODetailsOutput) ToDatastoreIODetailsOutput() DatastoreIODetailsOutput {
	return o
}

func (o DatastoreIODetailsOutput) ToDatastoreIODetailsOutputWithContext(ctx context.Context) DatastoreIODetailsOutput {
	return o
}

// Namespace used in the connection.
func (o DatastoreIODetailsOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreIODetails) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// ProjectId accessed in the connection.
func (o DatastoreIODetailsOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatastoreIODetails) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type DatastoreIODetailsArrayOutput struct{ *pulumi.OutputState }

func (DatastoreIODetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatastoreIODetails)(nil)).Elem()
}

func (o DatastoreIODetailsArrayOutput) ToDatastoreIODetailsArrayOutput() DatastoreIODetailsArrayOutput {
	return o
}

func (o DatastoreIODetailsArrayOutput) ToDatastoreIODetailsArrayOutputWithContext(ctx context.Context) DatastoreIODetailsArrayOutput {
	return o
}

func (o DatastoreIODetailsArrayOutput) Index(i pulumi.IntInput) DatastoreIODetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatastoreIODetails {
		return vs[0].([]DatastoreIODetails)[vs[1].(int)]
	}).(DatastoreIODetailsOutput)
}

// Metadata for a Datastore connector used by the job.
type DatastoreIODetailsResponse struct {
	// Namespace used in the connection.
	Namespace string `pulumi:"namespace"`
	// ProjectId accessed in the connection.
	Project string `pulumi:"project"`
}

// Metadata for a Datastore connector used by the job.
type DatastoreIODetailsResponseOutput struct{ *pulumi.OutputState }

func (DatastoreIODetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatastoreIODetailsResponse)(nil)).Elem()
}

func (o DatastoreIODetailsResponseOutput) ToDatastoreIODetailsResponseOutput() DatastoreIODetailsResponseOutput {
	return o
}

func (o DatastoreIODetailsResponseOutput) ToDatastoreIODetailsResponseOutputWithContext(ctx context.Context) DatastoreIODetailsResponseOutput {
	return o
}

// Namespace used in the connection.
func (o DatastoreIODetailsResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreIODetailsResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// ProjectId accessed in the connection.
func (o DatastoreIODetailsResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v DatastoreIODetailsResponse) string { return v.Project }).(pulumi.StringOutput)
}

type DatastoreIODetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (DatastoreIODetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatastoreIODetailsResponse)(nil)).Elem()
}

func (o DatastoreIODetailsResponseArrayOutput) ToDatastoreIODetailsResponseArrayOutput() DatastoreIODetailsResponseArrayOutput {
	return o
}

func (o DatastoreIODetailsResponseArrayOutput) ToDatastoreIODetailsResponseArrayOutputWithContext(ctx context.Context) DatastoreIODetailsResponseArrayOutput {
	return o
}

func (o DatastoreIODetailsResponseArrayOutput) Index(i pulumi.IntInput) DatastoreIODetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatastoreIODetailsResponse {
		return vs[0].([]DatastoreIODetailsResponse)[vs[1].(int)]
	}).(DatastoreIODetailsResponseOutput)
}

// Describes any options that have an effect on the debugging of pipelines.
type DebugOptions struct {
	// Configuration options for sampling elements from a running pipeline.
	DataSampling *DataSamplingConfig `pulumi:"dataSampling"`
	// When true, enables the logging of the literal hot key to the user's Cloud Logging.
	EnableHotKeyLogging *bool `pulumi:"enableHotKeyLogging"`
}

// DebugOptionsInput is an input type that accepts DebugOptionsArgs and DebugOptionsOutput values.
// You can construct a concrete instance of `DebugOptionsInput` via:
//
//	DebugOptionsArgs{...}
type DebugOptionsInput interface {
	pulumi.Input

	ToDebugOptionsOutput() DebugOptionsOutput
	ToDebugOptionsOutputWithContext(context.Context) DebugOptionsOutput
}

// Describes any options that have an effect on the debugging of pipelines.
type DebugOptionsArgs struct {
	// Configuration options for sampling elements from a running pipeline.
	DataSampling DataSamplingConfigPtrInput `pulumi:"dataSampling"`
	// When true, enables the logging of the literal hot key to the user's Cloud Logging.
	EnableHotKeyLogging pulumi.BoolPtrInput `pulumi:"enableHotKeyLogging"`
}

func (DebugOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DebugOptions)(nil)).Elem()
}

func (i DebugOptionsArgs) ToDebugOptionsOutput() DebugOptionsOutput {
	return i.ToDebugOptionsOutputWithContext(context.Background())
}

func (i DebugOptionsArgs) ToDebugOptionsOutputWithContext(ctx context.Context) DebugOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebugOptionsOutput)
}

func (i DebugOptionsArgs) ToDebugOptionsPtrOutput() DebugOptionsPtrOutput {
	return i.ToDebugOptionsPtrOutputWithContext(context.Background())
}

func (i DebugOptionsArgs) ToDebugOptionsPtrOutputWithContext(ctx context.Context) DebugOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebugOptionsOutput).ToDebugOptionsPtrOutputWithContext(ctx)
}

// DebugOptionsPtrInput is an input type that accepts DebugOptionsArgs, DebugOptionsPtr and DebugOptionsPtrOutput values.
// You can construct a concrete instance of `DebugOptionsPtrInput` via:
//
//	        DebugOptionsArgs{...}
//
//	or:
//
//	        nil
type DebugOptionsPtrInput interface {
	pulumi.Input

	ToDebugOptionsPtrOutput() DebugOptionsPtrOutput
	ToDebugOptionsPtrOutputWithContext(context.Context) DebugOptionsPtrOutput
}

type debugOptionsPtrType DebugOptionsArgs

func DebugOptionsPtr(v *DebugOptionsArgs) DebugOptionsPtrInput {
	return (*debugOptionsPtrType)(v)
}

func (*debugOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DebugOptions)(nil)).Elem()
}

func (i *debugOptionsPtrType) ToDebugOptionsPtrOutput() DebugOptionsPtrOutput {
	return i.ToDebugOptionsPtrOutputWithContext(context.Background())
}

func (i *debugOptionsPtrType) ToDebugOptionsPtrOutputWithContext(ctx context.Context) DebugOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DebugOptionsPtrOutput)
}

// Describes any options that have an effect on the debugging of pipelines.
type DebugOptionsOutput struct{ *pulumi.OutputState }

func (DebugOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DebugOptions)(nil)).Elem()
}

func (o DebugOptionsOutput) ToDebugOptionsOutput() DebugOptionsOutput {
	return o
}

func (o DebugOptionsOutput) ToDebugOptionsOutputWithContext(ctx context.Context) DebugOptionsOutput {
	return o
}

func (o DebugOptionsOutput) ToDebugOptionsPtrOutput() DebugOptionsPtrOutput {
	return o.ToDebugOptionsPtrOutputWithContext(context.Background())
}

func (o DebugOptionsOutput) ToDebugOptionsPtrOutputWithContext(ctx context.Context) DebugOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DebugOptions) *DebugOptions {
		return &v
	}).(DebugOptionsPtrOutput)
}

// Configuration options for sampling elements from a running pipeline.
func (o DebugOptionsOutput) DataSampling() DataSamplingConfigPtrOutput {
	return o.ApplyT(func(v DebugOptions) *DataSamplingConfig { return v.DataSampling }).(DataSamplingConfigPtrOutput)
}

// When true, enables the logging of the literal hot key to the user's Cloud Logging.
func (o DebugOptionsOutput) EnableHotKeyLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DebugOptions) *bool { return v.EnableHotKeyLogging }).(pulumi.BoolPtrOutput)
}

type DebugOptionsPtrOutput struct{ *pulumi.OutputState }

func (DebugOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DebugOptions)(nil)).Elem()
}

func (o DebugOptionsPtrOutput) ToDebugOptionsPtrOutput() DebugOptionsPtrOutput {
	return o
}

func (o DebugOptionsPtrOutput) ToDebugOptionsPtrOutputWithContext(ctx context.Context) DebugOptionsPtrOutput {
	return o
}

func (o DebugOptionsPtrOutput) Elem() DebugOptionsOutput {
	return o.ApplyT(func(v *DebugOptions) DebugOptions {
		if v != nil {
			return *v
		}
		var ret DebugOptions
		return ret
	}).(DebugOptionsOutput)
}

// Configuration options for sampling elements from a running pipeline.
func (o DebugOptionsPtrOutput) DataSampling() DataSamplingConfigPtrOutput {
	return o.ApplyT(func(v *DebugOptions) *DataSamplingConfig {
		if v == nil {
			return nil
		}
		return v.DataSampling
	}).(DataSamplingConfigPtrOutput)
}

// When true, enables the logging of the literal hot key to the user's Cloud Logging.
func (o DebugOptionsPtrOutput) EnableHotKeyLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DebugOptions) *bool {
		if v == nil {
			return nil
		}
		return v.EnableHotKeyLogging
	}).(pulumi.BoolPtrOutput)
}

// Describes any options that have an effect on the debugging of pipelines.
type DebugOptionsResponse struct {
	// Configuration options for sampling elements from a running pipeline.
	DataSampling DataSamplingConfigResponse `pulumi:"dataSampling"`
	// When true, enables the logging of the literal hot key to the user's Cloud Logging.
	EnableHotKeyLogging bool `pulumi:"enableHotKeyLogging"`
}

// Describes any options that have an effect on the debugging of pipelines.
type DebugOptionsResponseOutput struct{ *pulumi.OutputState }

func (DebugOptionsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DebugOptionsResponse)(nil)).Elem()
}

func (o DebugOptionsResponseOutput) ToDebugOptionsResponseOutput() DebugOptionsResponseOutput {
	return o
}

func (o DebugOptionsResponseOutput) ToDebugOptionsResponseOutputWithContext(ctx context.Context) DebugOptionsResponseOutput {
	return o
}

// Configuration options for sampling elements from a running pipeline.
func (o DebugOptionsResponseOutput) DataSampling() DataSamplingConfigResponseOutput {
	return o.ApplyT(func(v DebugOptionsResponse) DataSamplingConfigResponse { return v.DataSampling }).(DataSamplingConfigResponseOutput)
}

// When true, enables the logging of the literal hot key to the user's Cloud Logging.
func (o DebugOptionsResponseOutput) EnableHotKeyLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v DebugOptionsResponse) bool { return v.EnableHotKeyLogging }).(pulumi.BoolOutput)
}

// Describes the data disk used by a workflow job.
type Disk struct {
	// Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in "pd-standard". If SSD persistent disks are available, the resource name typically ends with "pd-ssd". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard
	DiskType *string `pulumi:"diskType"`
	// Directory in a VM where disk is mounted.
	MountPoint *string `pulumi:"mountPoint"`
	// Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
	SizeGb *int `pulumi:"sizeGb"`
}

// DiskInput is an input type that accepts DiskArgs and DiskOutput values.
// You can construct a concrete instance of `DiskInput` via:
//
//	DiskArgs{...}
type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(context.Context) DiskOutput
}

// Describes the data disk used by a workflow job.
type DiskArgs struct {
	// Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in "pd-standard". If SSD persistent disks are available, the resource name typically ends with "pd-ssd". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Directory in a VM where disk is mounted.
	MountPoint pulumi.StringPtrInput `pulumi:"mountPoint"`
	// Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
	SizeGb pulumi.IntPtrInput `pulumi:"sizeGb"`
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (i DiskArgs) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i DiskArgs) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//	DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// Describes the data disk used by a workflow job.
type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

// Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in "pd-standard". If SSD persistent disks are available, the resource name typically ends with "pd-ssd". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard
func (o DiskOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Directory in a VM where disk is mounted.
func (o DiskOutput) MountPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Disk) *string { return v.MountPoint }).(pulumi.StringPtrOutput)
}

// Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
func (o DiskOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Disk) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Disk)(nil)).Elem()
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Disk {
		return vs[0].([]Disk)[vs[1].(int)]
	}).(DiskOutput)
}

// Describes the data disk used by a workflow job.
type DiskResponse struct {
	// Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in "pd-standard". If SSD persistent disks are available, the resource name typically ends with "pd-ssd". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard
	DiskType string `pulumi:"diskType"`
	// Directory in a VM where disk is mounted.
	MountPoint string `pulumi:"mountPoint"`
	// Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
	SizeGb int `pulumi:"sizeGb"`
}

// Describes the data disk used by a workflow job.
type DiskResponseOutput struct{ *pulumi.OutputState }

func (DiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskResponse)(nil)).Elem()
}

func (o DiskResponseOutput) ToDiskResponseOutput() DiskResponseOutput {
	return o
}

func (o DiskResponseOutput) ToDiskResponseOutputWithContext(ctx context.Context) DiskResponseOutput {
	return o
}

// Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in "pd-standard". If SSD persistent disks are available, the resource name typically ends with "pd-ssd". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard
func (o DiskResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Directory in a VM where disk is mounted.
func (o DiskResponseOutput) MountPoint() pulumi.StringOutput {
	return o.ApplyT(func(v DiskResponse) string { return v.MountPoint }).(pulumi.StringOutput)
}

// Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
func (o DiskResponseOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v DiskResponse) int { return v.SizeGb }).(pulumi.IntOutput)
}

type DiskResponseArrayOutput struct{ *pulumi.OutputState }

func (DiskResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DiskResponse)(nil)).Elem()
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutput() DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) ToDiskResponseArrayOutputWithContext(ctx context.Context) DiskResponseArrayOutput {
	return o
}

func (o DiskResponseArrayOutput) Index(i pulumi.IntInput) DiskResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DiskResponse {
		return vs[0].([]DiskResponse)[vs[1].(int)]
	}).(DiskResponseOutput)
}

// Data provided with a pipeline or transform to provide descriptive info.
type DisplayData struct {
	// Contains value if the data is of a boolean type.
	BoolValue *bool `pulumi:"boolValue"`
	// Contains value if the data is of duration type.
	DurationValue *string `pulumi:"durationValue"`
	// Contains value if the data is of float type.
	FloatValue *float64 `pulumi:"floatValue"`
	// Contains value if the data is of int64 type.
	Int64Value *string `pulumi:"int64Value"`
	// Contains value if the data is of java class type.
	JavaClassValue *string `pulumi:"javaClassValue"`
	// The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
	Key *string `pulumi:"key"`
	// An optional label to display in a dax UI for the element.
	Label *string `pulumi:"label"`
	// The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
	Namespace *string `pulumi:"namespace"`
	// A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
	ShortStrValue *string `pulumi:"shortStrValue"`
	// Contains value if the data is of string type.
	StrValue *string `pulumi:"strValue"`
	// Contains value if the data is of timestamp type.
	TimestampValue *string `pulumi:"timestampValue"`
	// An optional full URL.
	Url *string `pulumi:"url"`
}

// DisplayDataInput is an input type that accepts DisplayDataArgs and DisplayDataOutput values.
// You can construct a concrete instance of `DisplayDataInput` via:
//
//	DisplayDataArgs{...}
type DisplayDataInput interface {
	pulumi.Input

	ToDisplayDataOutput() DisplayDataOutput
	ToDisplayDataOutputWithContext(context.Context) DisplayDataOutput
}

// Data provided with a pipeline or transform to provide descriptive info.
type DisplayDataArgs struct {
	// Contains value if the data is of a boolean type.
	BoolValue pulumi.BoolPtrInput `pulumi:"boolValue"`
	// Contains value if the data is of duration type.
	DurationValue pulumi.StringPtrInput `pulumi:"durationValue"`
	// Contains value if the data is of float type.
	FloatValue pulumi.Float64PtrInput `pulumi:"floatValue"`
	// Contains value if the data is of int64 type.
	Int64Value pulumi.StringPtrInput `pulumi:"int64Value"`
	// Contains value if the data is of java class type.
	JavaClassValue pulumi.StringPtrInput `pulumi:"javaClassValue"`
	// The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// An optional label to display in a dax UI for the element.
	Label pulumi.StringPtrInput `pulumi:"label"`
	// The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
	ShortStrValue pulumi.StringPtrInput `pulumi:"shortStrValue"`
	// Contains value if the data is of string type.
	StrValue pulumi.StringPtrInput `pulumi:"strValue"`
	// Contains value if the data is of timestamp type.
	TimestampValue pulumi.StringPtrInput `pulumi:"timestampValue"`
	// An optional full URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (DisplayDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayData)(nil)).Elem()
}

func (i DisplayDataArgs) ToDisplayDataOutput() DisplayDataOutput {
	return i.ToDisplayDataOutputWithContext(context.Background())
}

func (i DisplayDataArgs) ToDisplayDataOutputWithContext(ctx context.Context) DisplayDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDataOutput)
}

// DisplayDataArrayInput is an input type that accepts DisplayDataArray and DisplayDataArrayOutput values.
// You can construct a concrete instance of `DisplayDataArrayInput` via:
//
//	DisplayDataArray{ DisplayDataArgs{...} }
type DisplayDataArrayInput interface {
	pulumi.Input

	ToDisplayDataArrayOutput() DisplayDataArrayOutput
	ToDisplayDataArrayOutputWithContext(context.Context) DisplayDataArrayOutput
}

type DisplayDataArray []DisplayDataInput

func (DisplayDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DisplayData)(nil)).Elem()
}

func (i DisplayDataArray) ToDisplayDataArrayOutput() DisplayDataArrayOutput {
	return i.ToDisplayDataArrayOutputWithContext(context.Background())
}

func (i DisplayDataArray) ToDisplayDataArrayOutputWithContext(ctx context.Context) DisplayDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DisplayDataArrayOutput)
}

// Data provided with a pipeline or transform to provide descriptive info.
type DisplayDataOutput struct{ *pulumi.OutputState }

func (DisplayDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayData)(nil)).Elem()
}

func (o DisplayDataOutput) ToDisplayDataOutput() DisplayDataOutput {
	return o
}

func (o DisplayDataOutput) ToDisplayDataOutputWithContext(ctx context.Context) DisplayDataOutput {
	return o
}

// Contains value if the data is of a boolean type.
func (o DisplayDataOutput) BoolValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DisplayData) *bool { return v.BoolValue }).(pulumi.BoolPtrOutput)
}

// Contains value if the data is of duration type.
func (o DisplayDataOutput) DurationValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.DurationValue }).(pulumi.StringPtrOutput)
}

// Contains value if the data is of float type.
func (o DisplayDataOutput) FloatValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v DisplayData) *float64 { return v.FloatValue }).(pulumi.Float64PtrOutput)
}

// Contains value if the data is of int64 type.
func (o DisplayDataOutput) Int64Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.Int64Value }).(pulumi.StringPtrOutput)
}

// Contains value if the data is of java class type.
func (o DisplayDataOutput) JavaClassValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.JavaClassValue }).(pulumi.StringPtrOutput)
}

// The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
func (o DisplayDataOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// An optional label to display in a dax UI for the element.
func (o DisplayDataOutput) Label() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.Label }).(pulumi.StringPtrOutput)
}

// The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
func (o DisplayDataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
func (o DisplayDataOutput) ShortStrValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.ShortStrValue }).(pulumi.StringPtrOutput)
}

// Contains value if the data is of string type.
func (o DisplayDataOutput) StrValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.StrValue }).(pulumi.StringPtrOutput)
}

// Contains value if the data is of timestamp type.
func (o DisplayDataOutput) TimestampValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.TimestampValue }).(pulumi.StringPtrOutput)
}

// An optional full URL.
func (o DisplayDataOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DisplayData) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type DisplayDataArrayOutput struct{ *pulumi.OutputState }

func (DisplayDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DisplayData)(nil)).Elem()
}

func (o DisplayDataArrayOutput) ToDisplayDataArrayOutput() DisplayDataArrayOutput {
	return o
}

func (o DisplayDataArrayOutput) ToDisplayDataArrayOutputWithContext(ctx context.Context) DisplayDataArrayOutput {
	return o
}

func (o DisplayDataArrayOutput) Index(i pulumi.IntInput) DisplayDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DisplayData {
		return vs[0].([]DisplayData)[vs[1].(int)]
	}).(DisplayDataOutput)
}

// Data provided with a pipeline or transform to provide descriptive info.
type DisplayDataResponse struct {
	// Contains value if the data is of a boolean type.
	BoolValue bool `pulumi:"boolValue"`
	// Contains value if the data is of duration type.
	DurationValue string `pulumi:"durationValue"`
	// Contains value if the data is of float type.
	FloatValue float64 `pulumi:"floatValue"`
	// Contains value if the data is of int64 type.
	Int64Value string `pulumi:"int64Value"`
	// Contains value if the data is of java class type.
	JavaClassValue string `pulumi:"javaClassValue"`
	// The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
	Key string `pulumi:"key"`
	// An optional label to display in a dax UI for the element.
	Label string `pulumi:"label"`
	// The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
	Namespace string `pulumi:"namespace"`
	// A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
	ShortStrValue string `pulumi:"shortStrValue"`
	// Contains value if the data is of string type.
	StrValue string `pulumi:"strValue"`
	// Contains value if the data is of timestamp type.
	TimestampValue string `pulumi:"timestampValue"`
	// An optional full URL.
	Url string `pulumi:"url"`
}

// Data provided with a pipeline or transform to provide descriptive info.
type DisplayDataResponseOutput struct{ *pulumi.OutputState }

func (DisplayDataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DisplayDataResponse)(nil)).Elem()
}

func (o DisplayDataResponseOutput) ToDisplayDataResponseOutput() DisplayDataResponseOutput {
	return o
}

func (o DisplayDataResponseOutput) ToDisplayDataResponseOutputWithContext(ctx context.Context) DisplayDataResponseOutput {
	return o
}

// Contains value if the data is of a boolean type.
func (o DisplayDataResponseOutput) BoolValue() pulumi.BoolOutput {
	return o.ApplyT(func(v DisplayDataResponse) bool { return v.BoolValue }).(pulumi.BoolOutput)
}

// Contains value if the data is of duration type.
func (o DisplayDataResponseOutput) DurationValue() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.DurationValue }).(pulumi.StringOutput)
}

// Contains value if the data is of float type.
func (o DisplayDataResponseOutput) FloatValue() pulumi.Float64Output {
	return o.ApplyT(func(v DisplayDataResponse) float64 { return v.FloatValue }).(pulumi.Float64Output)
}

// Contains value if the data is of int64 type.
func (o DisplayDataResponseOutput) Int64Value() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.Int64Value }).(pulumi.StringOutput)
}

// Contains value if the data is of java class type.
func (o DisplayDataResponseOutput) JavaClassValue() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.JavaClassValue }).(pulumi.StringOutput)
}

// The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.
func (o DisplayDataResponseOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.Key }).(pulumi.StringOutput)
}

// An optional label to display in a dax UI for the element.
func (o DisplayDataResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.Label }).(pulumi.StringOutput)
}

// The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.
func (o DisplayDataResponseOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.Namespace }).(pulumi.StringOutput)
}

// A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.
func (o DisplayDataResponseOutput) ShortStrValue() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.ShortStrValue }).(pulumi.StringOutput)
}

// Contains value if the data is of string type.
func (o DisplayDataResponseOutput) StrValue() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.StrValue }).(pulumi.StringOutput)
}

// Contains value if the data is of timestamp type.
func (o DisplayDataResponseOutput) TimestampValue() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.TimestampValue }).(pulumi.StringOutput)
}

// An optional full URL.
func (o DisplayDataResponseOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v DisplayDataResponse) string { return v.Url }).(pulumi.StringOutput)
}

type DisplayDataResponseArrayOutput struct{ *pulumi.OutputState }

func (DisplayDataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DisplayDataResponse)(nil)).Elem()
}

func (o DisplayDataResponseArrayOutput) ToDisplayDataResponseArrayOutput() DisplayDataResponseArrayOutput {
	return o
}

func (o DisplayDataResponseArrayOutput) ToDisplayDataResponseArrayOutputWithContext(ctx context.Context) DisplayDataResponseArrayOutput {
	return o
}

func (o DisplayDataResponseArrayOutput) Index(i pulumi.IntInput) DisplayDataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DisplayDataResponse {
		return vs[0].([]DisplayDataResponse)[vs[1].(int)]
	}).(DisplayDataResponseOutput)
}

// Describes the environment in which a Dataflow Job runs.
type Environment struct {
	// The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
	ClusterManagerApiService *string `pulumi:"clusterManagerApiService"`
	// The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
	Dataset *string `pulumi:"dataset"`
	// Any debugging options to be supplied to the job.
	DebugOptions *DebugOptions `pulumi:"debugOptions"`
	// The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
	Experiments []string `pulumi:"experiments"`
	// Which Flexible Resource Scheduling mode to run in.
	FlexResourceSchedulingGoal *EnvironmentFlexResourceSchedulingGoal `pulumi:"flexResourceSchedulingGoal"`
	// Experimental settings.
	InternalExperiments map[string]interface{} `pulumi:"internalExperiments"`
	// The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
	SdkPipelineOptions map[string]interface{} `pulumi:"sdkPipelineOptions"`
	// Identity to run virtual machines as. Defaults to the default account.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
	ServiceKmsKeyName *string `pulumi:"serviceKmsKeyName"`
	// The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
	ServiceOptions []string `pulumi:"serviceOptions"`
	// The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix *string `pulumi:"tempStoragePrefix"`
	// A description of the process that generated the request.
	UserAgent map[string]interface{} `pulumi:"userAgent"`
	// A structure describing which components and their versions of the service are required in order to run the job.
	Version map[string]interface{} `pulumi:"version"`
	// The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
	WorkerPools []WorkerPool `pulumi:"workerPools"`
	// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
	WorkerRegion *string `pulumi:"workerRegion"`
	// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
	WorkerZone *string `pulumi:"workerZone"`
}

// EnvironmentInput is an input type that accepts EnvironmentArgs and EnvironmentOutput values.
// You can construct a concrete instance of `EnvironmentInput` via:
//
//	EnvironmentArgs{...}
type EnvironmentInput interface {
	pulumi.Input

	ToEnvironmentOutput() EnvironmentOutput
	ToEnvironmentOutputWithContext(context.Context) EnvironmentOutput
}

// Describes the environment in which a Dataflow Job runs.
type EnvironmentArgs struct {
	// The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
	ClusterManagerApiService pulumi.StringPtrInput `pulumi:"clusterManagerApiService"`
	// The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
	Dataset pulumi.StringPtrInput `pulumi:"dataset"`
	// Any debugging options to be supplied to the job.
	DebugOptions DebugOptionsPtrInput `pulumi:"debugOptions"`
	// The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
	Experiments pulumi.StringArrayInput `pulumi:"experiments"`
	// Which Flexible Resource Scheduling mode to run in.
	FlexResourceSchedulingGoal EnvironmentFlexResourceSchedulingGoalPtrInput `pulumi:"flexResourceSchedulingGoal"`
	// Experimental settings.
	InternalExperiments pulumi.MapInput `pulumi:"internalExperiments"`
	// The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
	SdkPipelineOptions pulumi.MapInput `pulumi:"sdkPipelineOptions"`
	// Identity to run virtual machines as. Defaults to the default account.
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
	// If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
	ServiceKmsKeyName pulumi.StringPtrInput `pulumi:"serviceKmsKeyName"`
	// The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
	ServiceOptions pulumi.StringArrayInput `pulumi:"serviceOptions"`
	// The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix pulumi.StringPtrInput `pulumi:"tempStoragePrefix"`
	// A description of the process that generated the request.
	UserAgent pulumi.MapInput `pulumi:"userAgent"`
	// A structure describing which components and their versions of the service are required in order to run the job.
	Version pulumi.MapInput `pulumi:"version"`
	// The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
	WorkerPools WorkerPoolArrayInput `pulumi:"workerPools"`
	// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
	WorkerRegion pulumi.StringPtrInput `pulumi:"workerRegion"`
	// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
	WorkerZone pulumi.StringPtrInput `pulumi:"workerZone"`
}

func (EnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (i EnvironmentArgs) ToEnvironmentOutput() EnvironmentOutput {
	return i.ToEnvironmentOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput)
}

func (i EnvironmentArgs) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i EnvironmentArgs) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentOutput).ToEnvironmentPtrOutputWithContext(ctx)
}

// EnvironmentPtrInput is an input type that accepts EnvironmentArgs, EnvironmentPtr and EnvironmentPtrOutput values.
// You can construct a concrete instance of `EnvironmentPtrInput` via:
//
//	        EnvironmentArgs{...}
//
//	or:
//
//	        nil
type EnvironmentPtrInput interface {
	pulumi.Input

	ToEnvironmentPtrOutput() EnvironmentPtrOutput
	ToEnvironmentPtrOutputWithContext(context.Context) EnvironmentPtrOutput
}

type environmentPtrType EnvironmentArgs

func EnvironmentPtr(v *EnvironmentArgs) EnvironmentPtrInput {
	return (*environmentPtrType)(v)
}

func (*environmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (i *environmentPtrType) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return i.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (i *environmentPtrType) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnvironmentPtrOutput)
}

// Describes the environment in which a Dataflow Job runs.
type EnvironmentOutput struct{ *pulumi.OutputState }

func (EnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Environment)(nil)).Elem()
}

func (o EnvironmentOutput) ToEnvironmentOutput() EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentOutputWithContext(ctx context.Context) EnvironmentOutput {
	return o
}

func (o EnvironmentOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o.ToEnvironmentPtrOutputWithContext(context.Background())
}

func (o EnvironmentOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Environment) *Environment {
		return &v
	}).(EnvironmentPtrOutput)
}

// The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
func (o EnvironmentOutput) ClusterManagerApiService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.ClusterManagerApiService }).(pulumi.StringPtrOutput)
}

// The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
func (o EnvironmentOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.Dataset }).(pulumi.StringPtrOutput)
}

// Any debugging options to be supplied to the job.
func (o EnvironmentOutput) DebugOptions() DebugOptionsPtrOutput {
	return o.ApplyT(func(v Environment) *DebugOptions { return v.DebugOptions }).(DebugOptionsPtrOutput)
}

// The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
func (o EnvironmentOutput) Experiments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Environment) []string { return v.Experiments }).(pulumi.StringArrayOutput)
}

// Which Flexible Resource Scheduling mode to run in.
func (o EnvironmentOutput) FlexResourceSchedulingGoal() EnvironmentFlexResourceSchedulingGoalPtrOutput {
	return o.ApplyT(func(v Environment) *EnvironmentFlexResourceSchedulingGoal { return v.FlexResourceSchedulingGoal }).(EnvironmentFlexResourceSchedulingGoalPtrOutput)
}

// Experimental settings.
func (o EnvironmentOutput) InternalExperiments() pulumi.MapOutput {
	return o.ApplyT(func(v Environment) map[string]interface{} { return v.InternalExperiments }).(pulumi.MapOutput)
}

// The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
func (o EnvironmentOutput) SdkPipelineOptions() pulumi.MapOutput {
	return o.ApplyT(func(v Environment) map[string]interface{} { return v.SdkPipelineOptions }).(pulumi.MapOutput)
}

// Identity to run virtual machines as. Defaults to the default account.
func (o EnvironmentOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

// If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
func (o EnvironmentOutput) ServiceKmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.ServiceKmsKeyName }).(pulumi.StringPtrOutput)
}

// The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
func (o EnvironmentOutput) ServiceOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Environment) []string { return v.ServiceOptions }).(pulumi.StringArrayOutput)
}

// The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o EnvironmentOutput) TempStoragePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.TempStoragePrefix }).(pulumi.StringPtrOutput)
}

// A description of the process that generated the request.
func (o EnvironmentOutput) UserAgent() pulumi.MapOutput {
	return o.ApplyT(func(v Environment) map[string]interface{} { return v.UserAgent }).(pulumi.MapOutput)
}

// A structure describing which components and their versions of the service are required in order to run the job.
func (o EnvironmentOutput) Version() pulumi.MapOutput {
	return o.ApplyT(func(v Environment) map[string]interface{} { return v.Version }).(pulumi.MapOutput)
}

// The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
func (o EnvironmentOutput) WorkerPools() WorkerPoolArrayOutput {
	return o.ApplyT(func(v Environment) []WorkerPool { return v.WorkerPools }).(WorkerPoolArrayOutput)
}

// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
func (o EnvironmentOutput) WorkerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.WorkerRegion }).(pulumi.StringPtrOutput)
}

// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
func (o EnvironmentOutput) WorkerZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Environment) *string { return v.WorkerZone }).(pulumi.StringPtrOutput)
}

type EnvironmentPtrOutput struct{ *pulumi.OutputState }

func (EnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Environment)(nil)).Elem()
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutput() EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) ToEnvironmentPtrOutputWithContext(ctx context.Context) EnvironmentPtrOutput {
	return o
}

func (o EnvironmentPtrOutput) Elem() EnvironmentOutput {
	return o.ApplyT(func(v *Environment) Environment {
		if v != nil {
			return *v
		}
		var ret Environment
		return ret
	}).(EnvironmentOutput)
}

// The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
func (o EnvironmentPtrOutput) ClusterManagerApiService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.ClusterManagerApiService
	}).(pulumi.StringPtrOutput)
}

// The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
func (o EnvironmentPtrOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.Dataset
	}).(pulumi.StringPtrOutput)
}

// Any debugging options to be supplied to the job.
func (o EnvironmentPtrOutput) DebugOptions() DebugOptionsPtrOutput {
	return o.ApplyT(func(v *Environment) *DebugOptions {
		if v == nil {
			return nil
		}
		return v.DebugOptions
	}).(DebugOptionsPtrOutput)
}

// The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
func (o EnvironmentPtrOutput) Experiments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) []string {
		if v == nil {
			return nil
		}
		return v.Experiments
	}).(pulumi.StringArrayOutput)
}

// Which Flexible Resource Scheduling mode to run in.
func (o EnvironmentPtrOutput) FlexResourceSchedulingGoal() EnvironmentFlexResourceSchedulingGoalPtrOutput {
	return o.ApplyT(func(v *Environment) *EnvironmentFlexResourceSchedulingGoal {
		if v == nil {
			return nil
		}
		return v.FlexResourceSchedulingGoal
	}).(EnvironmentFlexResourceSchedulingGoalPtrOutput)
}

// Experimental settings.
func (o EnvironmentPtrOutput) InternalExperiments() pulumi.MapOutput {
	return o.ApplyT(func(v *Environment) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.InternalExperiments
	}).(pulumi.MapOutput)
}

// The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
func (o EnvironmentPtrOutput) SdkPipelineOptions() pulumi.MapOutput {
	return o.ApplyT(func(v *Environment) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.SdkPipelineOptions
	}).(pulumi.MapOutput)
}

// Identity to run virtual machines as. Defaults to the default account.
func (o EnvironmentPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
func (o EnvironmentPtrOutput) ServiceKmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.ServiceKmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
func (o EnvironmentPtrOutput) ServiceOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Environment) []string {
		if v == nil {
			return nil
		}
		return v.ServiceOptions
	}).(pulumi.StringArrayOutput)
}

// The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o EnvironmentPtrOutput) TempStoragePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.TempStoragePrefix
	}).(pulumi.StringPtrOutput)
}

// A description of the process that generated the request.
func (o EnvironmentPtrOutput) UserAgent() pulumi.MapOutput {
	return o.ApplyT(func(v *Environment) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.UserAgent
	}).(pulumi.MapOutput)
}

// A structure describing which components and their versions of the service are required in order to run the job.
func (o EnvironmentPtrOutput) Version() pulumi.MapOutput {
	return o.ApplyT(func(v *Environment) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.MapOutput)
}

// The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
func (o EnvironmentPtrOutput) WorkerPools() WorkerPoolArrayOutput {
	return o.ApplyT(func(v *Environment) []WorkerPool {
		if v == nil {
			return nil
		}
		return v.WorkerPools
	}).(WorkerPoolArrayOutput)
}

// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
func (o EnvironmentPtrOutput) WorkerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.WorkerRegion
	}).(pulumi.StringPtrOutput)
}

// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
func (o EnvironmentPtrOutput) WorkerZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Environment) *string {
		if v == nil {
			return nil
		}
		return v.WorkerZone
	}).(pulumi.StringPtrOutput)
}

// Describes the environment in which a Dataflow Job runs.
type EnvironmentResponse struct {
	// The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
	ClusterManagerApiService string `pulumi:"clusterManagerApiService"`
	// The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
	Dataset string `pulumi:"dataset"`
	// Any debugging options to be supplied to the job.
	DebugOptions DebugOptionsResponse `pulumi:"debugOptions"`
	// The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
	Experiments []string `pulumi:"experiments"`
	// Which Flexible Resource Scheduling mode to run in.
	FlexResourceSchedulingGoal string `pulumi:"flexResourceSchedulingGoal"`
	// Experimental settings.
	InternalExperiments map[string]interface{} `pulumi:"internalExperiments"`
	// The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
	SdkPipelineOptions map[string]interface{} `pulumi:"sdkPipelineOptions"`
	// Identity to run virtual machines as. Defaults to the default account.
	ServiceAccountEmail string `pulumi:"serviceAccountEmail"`
	// If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
	ServiceKmsKeyName string `pulumi:"serviceKmsKeyName"`
	// The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
	ServiceOptions []string `pulumi:"serviceOptions"`
	// The shuffle mode used for the job.
	ShuffleMode string `pulumi:"shuffleMode"`
	// The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix string `pulumi:"tempStoragePrefix"`
	// Whether the job uses the new streaming engine billing model based on resource usage.
	UseStreamingEngineResourceBasedBilling bool `pulumi:"useStreamingEngineResourceBasedBilling"`
	// A description of the process that generated the request.
	UserAgent map[string]interface{} `pulumi:"userAgent"`
	// A structure describing which components and their versions of the service are required in order to run the job.
	Version map[string]interface{} `pulumi:"version"`
	// The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
	WorkerPools []WorkerPoolResponse `pulumi:"workerPools"`
	// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
	WorkerRegion string `pulumi:"workerRegion"`
	// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
	WorkerZone string `pulumi:"workerZone"`
}

// Describes the environment in which a Dataflow Job runs.
type EnvironmentResponseOutput struct{ *pulumi.OutputState }

func (EnvironmentResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnvironmentResponse)(nil)).Elem()
}

func (o EnvironmentResponseOutput) ToEnvironmentResponseOutput() EnvironmentResponseOutput {
	return o
}

func (o EnvironmentResponseOutput) ToEnvironmentResponseOutputWithContext(ctx context.Context) EnvironmentResponseOutput {
	return o
}

// The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".
func (o EnvironmentResponseOutput) ClusterManagerApiService() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.ClusterManagerApiService }).(pulumi.StringOutput)
}

// The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}
func (o EnvironmentResponseOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.Dataset }).(pulumi.StringOutput)
}

// Any debugging options to be supplied to the job.
func (o EnvironmentResponseOutput) DebugOptions() DebugOptionsResponseOutput {
	return o.ApplyT(func(v EnvironmentResponse) DebugOptionsResponse { return v.DebugOptions }).(DebugOptionsResponseOutput)
}

// The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.
func (o EnvironmentResponseOutput) Experiments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnvironmentResponse) []string { return v.Experiments }).(pulumi.StringArrayOutput)
}

// Which Flexible Resource Scheduling mode to run in.
func (o EnvironmentResponseOutput) FlexResourceSchedulingGoal() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.FlexResourceSchedulingGoal }).(pulumi.StringOutput)
}

// Experimental settings.
func (o EnvironmentResponseOutput) InternalExperiments() pulumi.MapOutput {
	return o.ApplyT(func(v EnvironmentResponse) map[string]interface{} { return v.InternalExperiments }).(pulumi.MapOutput)
}

// The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.
func (o EnvironmentResponseOutput) SdkPipelineOptions() pulumi.MapOutput {
	return o.ApplyT(func(v EnvironmentResponse) map[string]interface{} { return v.SdkPipelineOptions }).(pulumi.MapOutput)
}

// Identity to run virtual machines as. Defaults to the default account.
func (o EnvironmentResponseOutput) ServiceAccountEmail() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.ServiceAccountEmail }).(pulumi.StringOutput)
}

// If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY
func (o EnvironmentResponseOutput) ServiceKmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.ServiceKmsKeyName }).(pulumi.StringOutput)
}

// The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).
func (o EnvironmentResponseOutput) ServiceOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EnvironmentResponse) []string { return v.ServiceOptions }).(pulumi.StringArrayOutput)
}

// The shuffle mode used for the job.
func (o EnvironmentResponseOutput) ShuffleMode() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.ShuffleMode }).(pulumi.StringOutput)
}

// The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o EnvironmentResponseOutput) TempStoragePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.TempStoragePrefix }).(pulumi.StringOutput)
}

// Whether the job uses the new streaming engine billing model based on resource usage.
func (o EnvironmentResponseOutput) UseStreamingEngineResourceBasedBilling() pulumi.BoolOutput {
	return o.ApplyT(func(v EnvironmentResponse) bool { return v.UseStreamingEngineResourceBasedBilling }).(pulumi.BoolOutput)
}

// A description of the process that generated the request.
func (o EnvironmentResponseOutput) UserAgent() pulumi.MapOutput {
	return o.ApplyT(func(v EnvironmentResponse) map[string]interface{} { return v.UserAgent }).(pulumi.MapOutput)
}

// A structure describing which components and their versions of the service are required in order to run the job.
func (o EnvironmentResponseOutput) Version() pulumi.MapOutput {
	return o.ApplyT(func(v EnvironmentResponse) map[string]interface{} { return v.Version }).(pulumi.MapOutput)
}

// The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.
func (o EnvironmentResponseOutput) WorkerPools() WorkerPoolResponseArrayOutput {
	return o.ApplyT(func(v EnvironmentResponse) []WorkerPoolResponse { return v.WorkerPools }).(WorkerPoolResponseArrayOutput)
}

// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
func (o EnvironmentResponseOutput) WorkerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.WorkerRegion }).(pulumi.StringOutput)
}

// The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.
func (o EnvironmentResponseOutput) WorkerZone() pulumi.StringOutput {
	return o.ApplyT(func(v EnvironmentResponse) string { return v.WorkerZone }).(pulumi.StringOutput)
}

// A message describing the state of a particular execution stage.
type ExecutionStageState struct {
	// The time at which the stage transitioned to this state.
	CurrentStateTime *string `pulumi:"currentStateTime"`
	// The name of the execution stage.
	ExecutionStageName *string `pulumi:"executionStageName"`
	// Executions stage states allow the same set of values as JobState.
	ExecutionStageState *ExecutionStageStateExecutionStageState `pulumi:"executionStageState"`
}

// ExecutionStageStateInput is an input type that accepts ExecutionStageStateArgs and ExecutionStageStateOutput values.
// You can construct a concrete instance of `ExecutionStageStateInput` via:
//
//	ExecutionStageStateArgs{...}
type ExecutionStageStateInput interface {
	pulumi.Input

	ToExecutionStageStateOutput() ExecutionStageStateOutput
	ToExecutionStageStateOutputWithContext(context.Context) ExecutionStageStateOutput
}

// A message describing the state of a particular execution stage.
type ExecutionStageStateArgs struct {
	// The time at which the stage transitioned to this state.
	CurrentStateTime pulumi.StringPtrInput `pulumi:"currentStateTime"`
	// The name of the execution stage.
	ExecutionStageName pulumi.StringPtrInput `pulumi:"executionStageName"`
	// Executions stage states allow the same set of values as JobState.
	ExecutionStageState ExecutionStageStateExecutionStageStatePtrInput `pulumi:"executionStageState"`
}

func (ExecutionStageStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStageState)(nil)).Elem()
}

func (i ExecutionStageStateArgs) ToExecutionStageStateOutput() ExecutionStageStateOutput {
	return i.ToExecutionStageStateOutputWithContext(context.Background())
}

func (i ExecutionStageStateArgs) ToExecutionStageStateOutputWithContext(ctx context.Context) ExecutionStageStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionStageStateOutput)
}

// ExecutionStageStateArrayInput is an input type that accepts ExecutionStageStateArray and ExecutionStageStateArrayOutput values.
// You can construct a concrete instance of `ExecutionStageStateArrayInput` via:
//
//	ExecutionStageStateArray{ ExecutionStageStateArgs{...} }
type ExecutionStageStateArrayInput interface {
	pulumi.Input

	ToExecutionStageStateArrayOutput() ExecutionStageStateArrayOutput
	ToExecutionStageStateArrayOutputWithContext(context.Context) ExecutionStageStateArrayOutput
}

type ExecutionStageStateArray []ExecutionStageStateInput

func (ExecutionStageStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionStageState)(nil)).Elem()
}

func (i ExecutionStageStateArray) ToExecutionStageStateArrayOutput() ExecutionStageStateArrayOutput {
	return i.ToExecutionStageStateArrayOutputWithContext(context.Background())
}

func (i ExecutionStageStateArray) ToExecutionStageStateArrayOutputWithContext(ctx context.Context) ExecutionStageStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionStageStateArrayOutput)
}

// A message describing the state of a particular execution stage.
type ExecutionStageStateOutput struct{ *pulumi.OutputState }

func (ExecutionStageStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStageState)(nil)).Elem()
}

func (o ExecutionStageStateOutput) ToExecutionStageStateOutput() ExecutionStageStateOutput {
	return o
}

func (o ExecutionStageStateOutput) ToExecutionStageStateOutputWithContext(ctx context.Context) ExecutionStageStateOutput {
	return o
}

// The time at which the stage transitioned to this state.
func (o ExecutionStageStateOutput) CurrentStateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionStageState) *string { return v.CurrentStateTime }).(pulumi.StringPtrOutput)
}

// The name of the execution stage.
func (o ExecutionStageStateOutput) ExecutionStageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionStageState) *string { return v.ExecutionStageName }).(pulumi.StringPtrOutput)
}

// Executions stage states allow the same set of values as JobState.
func (o ExecutionStageStateOutput) ExecutionStageState() ExecutionStageStateExecutionStageStatePtrOutput {
	return o.ApplyT(func(v ExecutionStageState) *ExecutionStageStateExecutionStageState { return v.ExecutionStageState }).(ExecutionStageStateExecutionStageStatePtrOutput)
}

type ExecutionStageStateArrayOutput struct{ *pulumi.OutputState }

func (ExecutionStageStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionStageState)(nil)).Elem()
}

func (o ExecutionStageStateArrayOutput) ToExecutionStageStateArrayOutput() ExecutionStageStateArrayOutput {
	return o
}

func (o ExecutionStageStateArrayOutput) ToExecutionStageStateArrayOutputWithContext(ctx context.Context) ExecutionStageStateArrayOutput {
	return o
}

func (o ExecutionStageStateArrayOutput) Index(i pulumi.IntInput) ExecutionStageStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionStageState {
		return vs[0].([]ExecutionStageState)[vs[1].(int)]
	}).(ExecutionStageStateOutput)
}

// A message describing the state of a particular execution stage.
type ExecutionStageStateResponse struct {
	// The time at which the stage transitioned to this state.
	CurrentStateTime string `pulumi:"currentStateTime"`
	// The name of the execution stage.
	ExecutionStageName string `pulumi:"executionStageName"`
	// Executions stage states allow the same set of values as JobState.
	ExecutionStageState string `pulumi:"executionStageState"`
}

// A message describing the state of a particular execution stage.
type ExecutionStageStateResponseOutput struct{ *pulumi.OutputState }

func (ExecutionStageStateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStageStateResponse)(nil)).Elem()
}

func (o ExecutionStageStateResponseOutput) ToExecutionStageStateResponseOutput() ExecutionStageStateResponseOutput {
	return o
}

func (o ExecutionStageStateResponseOutput) ToExecutionStageStateResponseOutputWithContext(ctx context.Context) ExecutionStageStateResponseOutput {
	return o
}

// The time at which the stage transitioned to this state.
func (o ExecutionStageStateResponseOutput) CurrentStateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionStageStateResponse) string { return v.CurrentStateTime }).(pulumi.StringOutput)
}

// The name of the execution stage.
func (o ExecutionStageStateResponseOutput) ExecutionStageName() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionStageStateResponse) string { return v.ExecutionStageName }).(pulumi.StringOutput)
}

// Executions stage states allow the same set of values as JobState.
func (o ExecutionStageStateResponseOutput) ExecutionStageState() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionStageStateResponse) string { return v.ExecutionStageState }).(pulumi.StringOutput)
}

type ExecutionStageStateResponseArrayOutput struct{ *pulumi.OutputState }

func (ExecutionStageStateResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionStageStateResponse)(nil)).Elem()
}

func (o ExecutionStageStateResponseArrayOutput) ToExecutionStageStateResponseArrayOutput() ExecutionStageStateResponseArrayOutput {
	return o
}

func (o ExecutionStageStateResponseArrayOutput) ToExecutionStageStateResponseArrayOutputWithContext(ctx context.Context) ExecutionStageStateResponseArrayOutput {
	return o
}

func (o ExecutionStageStateResponseArrayOutput) Index(i pulumi.IntInput) ExecutionStageStateResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionStageStateResponse {
		return vs[0].([]ExecutionStageStateResponse)[vs[1].(int)]
	}).(ExecutionStageStateResponseOutput)
}

// Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
type ExecutionStageSummary struct {
	// Collections produced and consumed by component transforms of this stage.
	ComponentSource []ComponentSource `pulumi:"componentSource"`
	// Transforms that comprise this execution stage.
	ComponentTransform []ComponentTransform `pulumi:"componentTransform"`
	// Dataflow service generated id for this stage.
	Id *string `pulumi:"id"`
	// Input sources for this stage.
	InputSource []StageSource `pulumi:"inputSource"`
	// Type of transform this stage is executing.
	Kind *ExecutionStageSummaryKind `pulumi:"kind"`
	// Dataflow service generated name for this stage.
	Name *string `pulumi:"name"`
	// Output sources for this stage.
	OutputSource []StageSource `pulumi:"outputSource"`
	// Other stages that must complete before this stage can run.
	PrerequisiteStage []string `pulumi:"prerequisiteStage"`
}

// ExecutionStageSummaryInput is an input type that accepts ExecutionStageSummaryArgs and ExecutionStageSummaryOutput values.
// You can construct a concrete instance of `ExecutionStageSummaryInput` via:
//
//	ExecutionStageSummaryArgs{...}
type ExecutionStageSummaryInput interface {
	pulumi.Input

	ToExecutionStageSummaryOutput() ExecutionStageSummaryOutput
	ToExecutionStageSummaryOutputWithContext(context.Context) ExecutionStageSummaryOutput
}

// Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
type ExecutionStageSummaryArgs struct {
	// Collections produced and consumed by component transforms of this stage.
	ComponentSource ComponentSourceArrayInput `pulumi:"componentSource"`
	// Transforms that comprise this execution stage.
	ComponentTransform ComponentTransformArrayInput `pulumi:"componentTransform"`
	// Dataflow service generated id for this stage.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Input sources for this stage.
	InputSource StageSourceArrayInput `pulumi:"inputSource"`
	// Type of transform this stage is executing.
	Kind ExecutionStageSummaryKindPtrInput `pulumi:"kind"`
	// Dataflow service generated name for this stage.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Output sources for this stage.
	OutputSource StageSourceArrayInput `pulumi:"outputSource"`
	// Other stages that must complete before this stage can run.
	PrerequisiteStage pulumi.StringArrayInput `pulumi:"prerequisiteStage"`
}

func (ExecutionStageSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStageSummary)(nil)).Elem()
}

func (i ExecutionStageSummaryArgs) ToExecutionStageSummaryOutput() ExecutionStageSummaryOutput {
	return i.ToExecutionStageSummaryOutputWithContext(context.Background())
}

func (i ExecutionStageSummaryArgs) ToExecutionStageSummaryOutputWithContext(ctx context.Context) ExecutionStageSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionStageSummaryOutput)
}

// ExecutionStageSummaryArrayInput is an input type that accepts ExecutionStageSummaryArray and ExecutionStageSummaryArrayOutput values.
// You can construct a concrete instance of `ExecutionStageSummaryArrayInput` via:
//
//	ExecutionStageSummaryArray{ ExecutionStageSummaryArgs{...} }
type ExecutionStageSummaryArrayInput interface {
	pulumi.Input

	ToExecutionStageSummaryArrayOutput() ExecutionStageSummaryArrayOutput
	ToExecutionStageSummaryArrayOutputWithContext(context.Context) ExecutionStageSummaryArrayOutput
}

type ExecutionStageSummaryArray []ExecutionStageSummaryInput

func (ExecutionStageSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionStageSummary)(nil)).Elem()
}

func (i ExecutionStageSummaryArray) ToExecutionStageSummaryArrayOutput() ExecutionStageSummaryArrayOutput {
	return i.ToExecutionStageSummaryArrayOutputWithContext(context.Background())
}

func (i ExecutionStageSummaryArray) ToExecutionStageSummaryArrayOutputWithContext(ctx context.Context) ExecutionStageSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExecutionStageSummaryArrayOutput)
}

// Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
type ExecutionStageSummaryOutput struct{ *pulumi.OutputState }

func (ExecutionStageSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStageSummary)(nil)).Elem()
}

func (o ExecutionStageSummaryOutput) ToExecutionStageSummaryOutput() ExecutionStageSummaryOutput {
	return o
}

func (o ExecutionStageSummaryOutput) ToExecutionStageSummaryOutputWithContext(ctx context.Context) ExecutionStageSummaryOutput {
	return o
}

// Collections produced and consumed by component transforms of this stage.
func (o ExecutionStageSummaryOutput) ComponentSource() ComponentSourceArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummary) []ComponentSource { return v.ComponentSource }).(ComponentSourceArrayOutput)
}

// Transforms that comprise this execution stage.
func (o ExecutionStageSummaryOutput) ComponentTransform() ComponentTransformArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummary) []ComponentTransform { return v.ComponentTransform }).(ComponentTransformArrayOutput)
}

// Dataflow service generated id for this stage.
func (o ExecutionStageSummaryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionStageSummary) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Input sources for this stage.
func (o ExecutionStageSummaryOutput) InputSource() StageSourceArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummary) []StageSource { return v.InputSource }).(StageSourceArrayOutput)
}

// Type of transform this stage is executing.
func (o ExecutionStageSummaryOutput) Kind() ExecutionStageSummaryKindPtrOutput {
	return o.ApplyT(func(v ExecutionStageSummary) *ExecutionStageSummaryKind { return v.Kind }).(ExecutionStageSummaryKindPtrOutput)
}

// Dataflow service generated name for this stage.
func (o ExecutionStageSummaryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ExecutionStageSummary) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Output sources for this stage.
func (o ExecutionStageSummaryOutput) OutputSource() StageSourceArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummary) []StageSource { return v.OutputSource }).(StageSourceArrayOutput)
}

// Other stages that must complete before this stage can run.
func (o ExecutionStageSummaryOutput) PrerequisiteStage() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummary) []string { return v.PrerequisiteStage }).(pulumi.StringArrayOutput)
}

type ExecutionStageSummaryArrayOutput struct{ *pulumi.OutputState }

func (ExecutionStageSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionStageSummary)(nil)).Elem()
}

func (o ExecutionStageSummaryArrayOutput) ToExecutionStageSummaryArrayOutput() ExecutionStageSummaryArrayOutput {
	return o
}

func (o ExecutionStageSummaryArrayOutput) ToExecutionStageSummaryArrayOutputWithContext(ctx context.Context) ExecutionStageSummaryArrayOutput {
	return o
}

func (o ExecutionStageSummaryArrayOutput) Index(i pulumi.IntInput) ExecutionStageSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionStageSummary {
		return vs[0].([]ExecutionStageSummary)[vs[1].(int)]
	}).(ExecutionStageSummaryOutput)
}

// Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
type ExecutionStageSummaryResponse struct {
	// Collections produced and consumed by component transforms of this stage.
	ComponentSource []ComponentSourceResponse `pulumi:"componentSource"`
	// Transforms that comprise this execution stage.
	ComponentTransform []ComponentTransformResponse `pulumi:"componentTransform"`
	// Input sources for this stage.
	InputSource []StageSourceResponse `pulumi:"inputSource"`
	// Type of transform this stage is executing.
	Kind string `pulumi:"kind"`
	// Dataflow service generated name for this stage.
	Name string `pulumi:"name"`
	// Output sources for this stage.
	OutputSource []StageSourceResponse `pulumi:"outputSource"`
	// Other stages that must complete before this stage can run.
	PrerequisiteStage []string `pulumi:"prerequisiteStage"`
}

// Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.
type ExecutionStageSummaryResponseOutput struct{ *pulumi.OutputState }

func (ExecutionStageSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExecutionStageSummaryResponse)(nil)).Elem()
}

func (o ExecutionStageSummaryResponseOutput) ToExecutionStageSummaryResponseOutput() ExecutionStageSummaryResponseOutput {
	return o
}

func (o ExecutionStageSummaryResponseOutput) ToExecutionStageSummaryResponseOutputWithContext(ctx context.Context) ExecutionStageSummaryResponseOutput {
	return o
}

// Collections produced and consumed by component transforms of this stage.
func (o ExecutionStageSummaryResponseOutput) ComponentSource() ComponentSourceResponseArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummaryResponse) []ComponentSourceResponse { return v.ComponentSource }).(ComponentSourceResponseArrayOutput)
}

// Transforms that comprise this execution stage.
func (o ExecutionStageSummaryResponseOutput) ComponentTransform() ComponentTransformResponseArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummaryResponse) []ComponentTransformResponse { return v.ComponentTransform }).(ComponentTransformResponseArrayOutput)
}

// Input sources for this stage.
func (o ExecutionStageSummaryResponseOutput) InputSource() StageSourceResponseArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummaryResponse) []StageSourceResponse { return v.InputSource }).(StageSourceResponseArrayOutput)
}

// Type of transform this stage is executing.
func (o ExecutionStageSummaryResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionStageSummaryResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Dataflow service generated name for this stage.
func (o ExecutionStageSummaryResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ExecutionStageSummaryResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Output sources for this stage.
func (o ExecutionStageSummaryResponseOutput) OutputSource() StageSourceResponseArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummaryResponse) []StageSourceResponse { return v.OutputSource }).(StageSourceResponseArrayOutput)
}

// Other stages that must complete before this stage can run.
func (o ExecutionStageSummaryResponseOutput) PrerequisiteStage() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ExecutionStageSummaryResponse) []string { return v.PrerequisiteStage }).(pulumi.StringArrayOutput)
}

type ExecutionStageSummaryResponseArrayOutput struct{ *pulumi.OutputState }

func (ExecutionStageSummaryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ExecutionStageSummaryResponse)(nil)).Elem()
}

func (o ExecutionStageSummaryResponseArrayOutput) ToExecutionStageSummaryResponseArrayOutput() ExecutionStageSummaryResponseArrayOutput {
	return o
}

func (o ExecutionStageSummaryResponseArrayOutput) ToExecutionStageSummaryResponseArrayOutputWithContext(ctx context.Context) ExecutionStageSummaryResponseArrayOutput {
	return o
}

func (o ExecutionStageSummaryResponseArrayOutput) Index(i pulumi.IntInput) ExecutionStageSummaryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ExecutionStageSummaryResponse {
		return vs[0].([]ExecutionStageSummaryResponse)[vs[1].(int)]
	}).(ExecutionStageSummaryResponseOutput)
}

// Metadata for a File connector used by the job.
type FileIODetails struct {
	// File Pattern used to access files by the connector.
	FilePattern *string `pulumi:"filePattern"`
}

// FileIODetailsInput is an input type that accepts FileIODetailsArgs and FileIODetailsOutput values.
// You can construct a concrete instance of `FileIODetailsInput` via:
//
//	FileIODetailsArgs{...}
type FileIODetailsInput interface {
	pulumi.Input

	ToFileIODetailsOutput() FileIODetailsOutput
	ToFileIODetailsOutputWithContext(context.Context) FileIODetailsOutput
}

// Metadata for a File connector used by the job.
type FileIODetailsArgs struct {
	// File Pattern used to access files by the connector.
	FilePattern pulumi.StringPtrInput `pulumi:"filePattern"`
}

func (FileIODetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileIODetails)(nil)).Elem()
}

func (i FileIODetailsArgs) ToFileIODetailsOutput() FileIODetailsOutput {
	return i.ToFileIODetailsOutputWithContext(context.Background())
}

func (i FileIODetailsArgs) ToFileIODetailsOutputWithContext(ctx context.Context) FileIODetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileIODetailsOutput)
}

// FileIODetailsArrayInput is an input type that accepts FileIODetailsArray and FileIODetailsArrayOutput values.
// You can construct a concrete instance of `FileIODetailsArrayInput` via:
//
//	FileIODetailsArray{ FileIODetailsArgs{...} }
type FileIODetailsArrayInput interface {
	pulumi.Input

	ToFileIODetailsArrayOutput() FileIODetailsArrayOutput
	ToFileIODetailsArrayOutputWithContext(context.Context) FileIODetailsArrayOutput
}

type FileIODetailsArray []FileIODetailsInput

func (FileIODetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileIODetails)(nil)).Elem()
}

func (i FileIODetailsArray) ToFileIODetailsArrayOutput() FileIODetailsArrayOutput {
	return i.ToFileIODetailsArrayOutputWithContext(context.Background())
}

func (i FileIODetailsArray) ToFileIODetailsArrayOutputWithContext(ctx context.Context) FileIODetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileIODetailsArrayOutput)
}

// Metadata for a File connector used by the job.
type FileIODetailsOutput struct{ *pulumi.OutputState }

func (FileIODetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileIODetails)(nil)).Elem()
}

func (o FileIODetailsOutput) ToFileIODetailsOutput() FileIODetailsOutput {
	return o
}

func (o FileIODetailsOutput) ToFileIODetailsOutputWithContext(ctx context.Context) FileIODetailsOutput {
	return o
}

// File Pattern used to access files by the connector.
func (o FileIODetailsOutput) FilePattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileIODetails) *string { return v.FilePattern }).(pulumi.StringPtrOutput)
}

type FileIODetailsArrayOutput struct{ *pulumi.OutputState }

func (FileIODetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileIODetails)(nil)).Elem()
}

func (o FileIODetailsArrayOutput) ToFileIODetailsArrayOutput() FileIODetailsArrayOutput {
	return o
}

func (o FileIODetailsArrayOutput) ToFileIODetailsArrayOutputWithContext(ctx context.Context) FileIODetailsArrayOutput {
	return o
}

func (o FileIODetailsArrayOutput) Index(i pulumi.IntInput) FileIODetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileIODetails {
		return vs[0].([]FileIODetails)[vs[1].(int)]
	}).(FileIODetailsOutput)
}

// Metadata for a File connector used by the job.
type FileIODetailsResponse struct {
	// File Pattern used to access files by the connector.
	FilePattern string `pulumi:"filePattern"`
}

// Metadata for a File connector used by the job.
type FileIODetailsResponseOutput struct{ *pulumi.OutputState }

func (FileIODetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileIODetailsResponse)(nil)).Elem()
}

func (o FileIODetailsResponseOutput) ToFileIODetailsResponseOutput() FileIODetailsResponseOutput {
	return o
}

func (o FileIODetailsResponseOutput) ToFileIODetailsResponseOutputWithContext(ctx context.Context) FileIODetailsResponseOutput {
	return o
}

// File Pattern used to access files by the connector.
func (o FileIODetailsResponseOutput) FilePattern() pulumi.StringOutput {
	return o.ApplyT(func(v FileIODetailsResponse) string { return v.FilePattern }).(pulumi.StringOutput)
}

type FileIODetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (FileIODetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileIODetailsResponse)(nil)).Elem()
}

func (o FileIODetailsResponseArrayOutput) ToFileIODetailsResponseArrayOutput() FileIODetailsResponseArrayOutput {
	return o
}

func (o FileIODetailsResponseArrayOutput) ToFileIODetailsResponseArrayOutputWithContext(ctx context.Context) FileIODetailsResponseArrayOutput {
	return o
}

func (o FileIODetailsResponseArrayOutput) Index(i pulumi.IntInput) FileIODetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileIODetailsResponse {
		return vs[0].([]FileIODetailsResponse)[vs[1].(int)]
	}).(FileIODetailsResponseOutput)
}

// Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.
type JobExecutionInfo struct {
	// A mapping from each stage to the information about that stage.
	Stages map[string]JobExecutionStageInfo `pulumi:"stages"`
}

// JobExecutionInfoInput is an input type that accepts JobExecutionInfoArgs and JobExecutionInfoOutput values.
// You can construct a concrete instance of `JobExecutionInfoInput` via:
//
//	JobExecutionInfoArgs{...}
type JobExecutionInfoInput interface {
	pulumi.Input

	ToJobExecutionInfoOutput() JobExecutionInfoOutput
	ToJobExecutionInfoOutputWithContext(context.Context) JobExecutionInfoOutput
}

// Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.
type JobExecutionInfoArgs struct {
	// A mapping from each stage to the information about that stage.
	Stages JobExecutionStageInfoMapInput `pulumi:"stages"`
}

func (JobExecutionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionInfo)(nil)).Elem()
}

func (i JobExecutionInfoArgs) ToJobExecutionInfoOutput() JobExecutionInfoOutput {
	return i.ToJobExecutionInfoOutputWithContext(context.Background())
}

func (i JobExecutionInfoArgs) ToJobExecutionInfoOutputWithContext(ctx context.Context) JobExecutionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionInfoOutput)
}

func (i JobExecutionInfoArgs) ToJobExecutionInfoPtrOutput() JobExecutionInfoPtrOutput {
	return i.ToJobExecutionInfoPtrOutputWithContext(context.Background())
}

func (i JobExecutionInfoArgs) ToJobExecutionInfoPtrOutputWithContext(ctx context.Context) JobExecutionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionInfoOutput).ToJobExecutionInfoPtrOutputWithContext(ctx)
}

// JobExecutionInfoPtrInput is an input type that accepts JobExecutionInfoArgs, JobExecutionInfoPtr and JobExecutionInfoPtrOutput values.
// You can construct a concrete instance of `JobExecutionInfoPtrInput` via:
//
//	        JobExecutionInfoArgs{...}
//
//	or:
//
//	        nil
type JobExecutionInfoPtrInput interface {
	pulumi.Input

	ToJobExecutionInfoPtrOutput() JobExecutionInfoPtrOutput
	ToJobExecutionInfoPtrOutputWithContext(context.Context) JobExecutionInfoPtrOutput
}

type jobExecutionInfoPtrType JobExecutionInfoArgs

func JobExecutionInfoPtr(v *JobExecutionInfoArgs) JobExecutionInfoPtrInput {
	return (*jobExecutionInfoPtrType)(v)
}

func (*jobExecutionInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionInfo)(nil)).Elem()
}

func (i *jobExecutionInfoPtrType) ToJobExecutionInfoPtrOutput() JobExecutionInfoPtrOutput {
	return i.ToJobExecutionInfoPtrOutputWithContext(context.Background())
}

func (i *jobExecutionInfoPtrType) ToJobExecutionInfoPtrOutputWithContext(ctx context.Context) JobExecutionInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionInfoPtrOutput)
}

// Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.
type JobExecutionInfoOutput struct{ *pulumi.OutputState }

func (JobExecutionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionInfo)(nil)).Elem()
}

func (o JobExecutionInfoOutput) ToJobExecutionInfoOutput() JobExecutionInfoOutput {
	return o
}

func (o JobExecutionInfoOutput) ToJobExecutionInfoOutputWithContext(ctx context.Context) JobExecutionInfoOutput {
	return o
}

func (o JobExecutionInfoOutput) ToJobExecutionInfoPtrOutput() JobExecutionInfoPtrOutput {
	return o.ToJobExecutionInfoPtrOutputWithContext(context.Background())
}

func (o JobExecutionInfoOutput) ToJobExecutionInfoPtrOutputWithContext(ctx context.Context) JobExecutionInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobExecutionInfo) *JobExecutionInfo {
		return &v
	}).(JobExecutionInfoPtrOutput)
}

// A mapping from each stage to the information about that stage.
func (o JobExecutionInfoOutput) Stages() JobExecutionStageInfoMapOutput {
	return o.ApplyT(func(v JobExecutionInfo) map[string]JobExecutionStageInfo { return v.Stages }).(JobExecutionStageInfoMapOutput)
}

type JobExecutionInfoPtrOutput struct{ *pulumi.OutputState }

func (JobExecutionInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobExecutionInfo)(nil)).Elem()
}

func (o JobExecutionInfoPtrOutput) ToJobExecutionInfoPtrOutput() JobExecutionInfoPtrOutput {
	return o
}

func (o JobExecutionInfoPtrOutput) ToJobExecutionInfoPtrOutputWithContext(ctx context.Context) JobExecutionInfoPtrOutput {
	return o
}

func (o JobExecutionInfoPtrOutput) Elem() JobExecutionInfoOutput {
	return o.ApplyT(func(v *JobExecutionInfo) JobExecutionInfo {
		if v != nil {
			return *v
		}
		var ret JobExecutionInfo
		return ret
	}).(JobExecutionInfoOutput)
}

// A mapping from each stage to the information about that stage.
func (o JobExecutionInfoPtrOutput) Stages() JobExecutionStageInfoMapOutput {
	return o.ApplyT(func(v *JobExecutionInfo) map[string]JobExecutionStageInfo {
		if v == nil {
			return nil
		}
		return v.Stages
	}).(JobExecutionStageInfoMapOutput)
}

// Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.
type JobExecutionInfoResponse struct {
	// A mapping from each stage to the information about that stage.
	Stages map[string]JobExecutionStageInfoResponse `pulumi:"stages"`
}

// Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.
type JobExecutionInfoResponseOutput struct{ *pulumi.OutputState }

func (JobExecutionInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionInfoResponse)(nil)).Elem()
}

func (o JobExecutionInfoResponseOutput) ToJobExecutionInfoResponseOutput() JobExecutionInfoResponseOutput {
	return o
}

func (o JobExecutionInfoResponseOutput) ToJobExecutionInfoResponseOutputWithContext(ctx context.Context) JobExecutionInfoResponseOutput {
	return o
}

// A mapping from each stage to the information about that stage.
func (o JobExecutionInfoResponseOutput) Stages() JobExecutionStageInfoResponseMapOutput {
	return o.ApplyT(func(v JobExecutionInfoResponse) map[string]JobExecutionStageInfoResponse { return v.Stages }).(JobExecutionStageInfoResponseMapOutput)
}

// Contains information about how a particular google.dataflow.v1beta3.Step will be executed.
type JobExecutionStageInfo struct {
	// The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.
	StepName []string `pulumi:"stepName"`
}

// JobExecutionStageInfoInput is an input type that accepts JobExecutionStageInfoArgs and JobExecutionStageInfoOutput values.
// You can construct a concrete instance of `JobExecutionStageInfoInput` via:
//
//	JobExecutionStageInfoArgs{...}
type JobExecutionStageInfoInput interface {
	pulumi.Input

	ToJobExecutionStageInfoOutput() JobExecutionStageInfoOutput
	ToJobExecutionStageInfoOutputWithContext(context.Context) JobExecutionStageInfoOutput
}

// Contains information about how a particular google.dataflow.v1beta3.Step will be executed.
type JobExecutionStageInfoArgs struct {
	// The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.
	StepName pulumi.StringArrayInput `pulumi:"stepName"`
}

func (JobExecutionStageInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionStageInfo)(nil)).Elem()
}

func (i JobExecutionStageInfoArgs) ToJobExecutionStageInfoOutput() JobExecutionStageInfoOutput {
	return i.ToJobExecutionStageInfoOutputWithContext(context.Background())
}

func (i JobExecutionStageInfoArgs) ToJobExecutionStageInfoOutputWithContext(ctx context.Context) JobExecutionStageInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionStageInfoOutput)
}

// JobExecutionStageInfoMapInput is an input type that accepts JobExecutionStageInfoMap and JobExecutionStageInfoMapOutput values.
// You can construct a concrete instance of `JobExecutionStageInfoMapInput` via:
//
//	JobExecutionStageInfoMap{ "key": JobExecutionStageInfoArgs{...} }
type JobExecutionStageInfoMapInput interface {
	pulumi.Input

	ToJobExecutionStageInfoMapOutput() JobExecutionStageInfoMapOutput
	ToJobExecutionStageInfoMapOutputWithContext(context.Context) JobExecutionStageInfoMapOutput
}

type JobExecutionStageInfoMap map[string]JobExecutionStageInfoInput

func (JobExecutionStageInfoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobExecutionStageInfo)(nil)).Elem()
}

func (i JobExecutionStageInfoMap) ToJobExecutionStageInfoMapOutput() JobExecutionStageInfoMapOutput {
	return i.ToJobExecutionStageInfoMapOutputWithContext(context.Background())
}

func (i JobExecutionStageInfoMap) ToJobExecutionStageInfoMapOutputWithContext(ctx context.Context) JobExecutionStageInfoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobExecutionStageInfoMapOutput)
}

// Contains information about how a particular google.dataflow.v1beta3.Step will be executed.
type JobExecutionStageInfoOutput struct{ *pulumi.OutputState }

func (JobExecutionStageInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionStageInfo)(nil)).Elem()
}

func (o JobExecutionStageInfoOutput) ToJobExecutionStageInfoOutput() JobExecutionStageInfoOutput {
	return o
}

func (o JobExecutionStageInfoOutput) ToJobExecutionStageInfoOutputWithContext(ctx context.Context) JobExecutionStageInfoOutput {
	return o
}

// The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.
func (o JobExecutionStageInfoOutput) StepName() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobExecutionStageInfo) []string { return v.StepName }).(pulumi.StringArrayOutput)
}

type JobExecutionStageInfoMapOutput struct{ *pulumi.OutputState }

func (JobExecutionStageInfoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobExecutionStageInfo)(nil)).Elem()
}

func (o JobExecutionStageInfoMapOutput) ToJobExecutionStageInfoMapOutput() JobExecutionStageInfoMapOutput {
	return o
}

func (o JobExecutionStageInfoMapOutput) ToJobExecutionStageInfoMapOutputWithContext(ctx context.Context) JobExecutionStageInfoMapOutput {
	return o
}

func (o JobExecutionStageInfoMapOutput) MapIndex(k pulumi.StringInput) JobExecutionStageInfoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobExecutionStageInfo {
		return vs[0].(map[string]JobExecutionStageInfo)[vs[1].(string)]
	}).(JobExecutionStageInfoOutput)
}

// Contains information about how a particular google.dataflow.v1beta3.Step will be executed.
type JobExecutionStageInfoResponse struct {
	// The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.
	StepName []string `pulumi:"stepName"`
}

// Contains information about how a particular google.dataflow.v1beta3.Step will be executed.
type JobExecutionStageInfoResponseOutput struct{ *pulumi.OutputState }

func (JobExecutionStageInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobExecutionStageInfoResponse)(nil)).Elem()
}

func (o JobExecutionStageInfoResponseOutput) ToJobExecutionStageInfoResponseOutput() JobExecutionStageInfoResponseOutput {
	return o
}

func (o JobExecutionStageInfoResponseOutput) ToJobExecutionStageInfoResponseOutputWithContext(ctx context.Context) JobExecutionStageInfoResponseOutput {
	return o
}

// The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.
func (o JobExecutionStageInfoResponseOutput) StepName() pulumi.StringArrayOutput {
	return o.ApplyT(func(v JobExecutionStageInfoResponse) []string { return v.StepName }).(pulumi.StringArrayOutput)
}

type JobExecutionStageInfoResponseMapOutput struct{ *pulumi.OutputState }

func (JobExecutionStageInfoResponseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]JobExecutionStageInfoResponse)(nil)).Elem()
}

func (o JobExecutionStageInfoResponseMapOutput) ToJobExecutionStageInfoResponseMapOutput() JobExecutionStageInfoResponseMapOutput {
	return o
}

func (o JobExecutionStageInfoResponseMapOutput) ToJobExecutionStageInfoResponseMapOutputWithContext(ctx context.Context) JobExecutionStageInfoResponseMapOutput {
	return o
}

func (o JobExecutionStageInfoResponseMapOutput) MapIndex(k pulumi.StringInput) JobExecutionStageInfoResponseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) JobExecutionStageInfoResponse {
		return vs[0].(map[string]JobExecutionStageInfoResponse)[vs[1].(string)]
	}).(JobExecutionStageInfoResponseOutput)
}

// Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
type JobMetadata struct {
	// Identification of a Cloud Bigtable source used in the Dataflow job.
	BigTableDetails []BigTableIODetails `pulumi:"bigTableDetails"`
	// Identification of a BigQuery source used in the Dataflow job.
	BigqueryDetails []BigQueryIODetails `pulumi:"bigqueryDetails"`
	// Identification of a Datastore source used in the Dataflow job.
	DatastoreDetails []DatastoreIODetails `pulumi:"datastoreDetails"`
	// Identification of a File source used in the Dataflow job.
	FileDetails []FileIODetails `pulumi:"fileDetails"`
	// Identification of a Pub/Sub source used in the Dataflow job.
	PubsubDetails []PubSubIODetails `pulumi:"pubsubDetails"`
	// The SDK version used to run the job.
	SdkVersion *SdkVersion `pulumi:"sdkVersion"`
	// Identification of a Spanner source used in the Dataflow job.
	SpannerDetails []SpannerIODetails `pulumi:"spannerDetails"`
	// List of display properties to help UI filter jobs.
	UserDisplayProperties map[string]string `pulumi:"userDisplayProperties"`
}

// JobMetadataInput is an input type that accepts JobMetadataArgs and JobMetadataOutput values.
// You can construct a concrete instance of `JobMetadataInput` via:
//
//	JobMetadataArgs{...}
type JobMetadataInput interface {
	pulumi.Input

	ToJobMetadataOutput() JobMetadataOutput
	ToJobMetadataOutputWithContext(context.Context) JobMetadataOutput
}

// Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
type JobMetadataArgs struct {
	// Identification of a Cloud Bigtable source used in the Dataflow job.
	BigTableDetails BigTableIODetailsArrayInput `pulumi:"bigTableDetails"`
	// Identification of a BigQuery source used in the Dataflow job.
	BigqueryDetails BigQueryIODetailsArrayInput `pulumi:"bigqueryDetails"`
	// Identification of a Datastore source used in the Dataflow job.
	DatastoreDetails DatastoreIODetailsArrayInput `pulumi:"datastoreDetails"`
	// Identification of a File source used in the Dataflow job.
	FileDetails FileIODetailsArrayInput `pulumi:"fileDetails"`
	// Identification of a Pub/Sub source used in the Dataflow job.
	PubsubDetails PubSubIODetailsArrayInput `pulumi:"pubsubDetails"`
	// The SDK version used to run the job.
	SdkVersion SdkVersionPtrInput `pulumi:"sdkVersion"`
	// Identification of a Spanner source used in the Dataflow job.
	SpannerDetails SpannerIODetailsArrayInput `pulumi:"spannerDetails"`
	// List of display properties to help UI filter jobs.
	UserDisplayProperties pulumi.StringMapInput `pulumi:"userDisplayProperties"`
}

func (JobMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JobMetadata)(nil)).Elem()
}

func (i JobMetadataArgs) ToJobMetadataOutput() JobMetadataOutput {
	return i.ToJobMetadataOutputWithContext(context.Background())
}

func (i JobMetadataArgs) ToJobMetadataOutputWithContext(ctx context.Context) JobMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMetadataOutput)
}

func (i JobMetadataArgs) ToJobMetadataPtrOutput() JobMetadataPtrOutput {
	return i.ToJobMetadataPtrOutputWithContext(context.Background())
}

func (i JobMetadataArgs) ToJobMetadataPtrOutputWithContext(ctx context.Context) JobMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMetadataOutput).ToJobMetadataPtrOutputWithContext(ctx)
}

// JobMetadataPtrInput is an input type that accepts JobMetadataArgs, JobMetadataPtr and JobMetadataPtrOutput values.
// You can construct a concrete instance of `JobMetadataPtrInput` via:
//
//	        JobMetadataArgs{...}
//
//	or:
//
//	        nil
type JobMetadataPtrInput interface {
	pulumi.Input

	ToJobMetadataPtrOutput() JobMetadataPtrOutput
	ToJobMetadataPtrOutputWithContext(context.Context) JobMetadataPtrOutput
}

type jobMetadataPtrType JobMetadataArgs

func JobMetadataPtr(v *JobMetadataArgs) JobMetadataPtrInput {
	return (*jobMetadataPtrType)(v)
}

func (*jobMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JobMetadata)(nil)).Elem()
}

func (i *jobMetadataPtrType) ToJobMetadataPtrOutput() JobMetadataPtrOutput {
	return i.ToJobMetadataPtrOutputWithContext(context.Background())
}

func (i *jobMetadataPtrType) ToJobMetadataPtrOutputWithContext(ctx context.Context) JobMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMetadataPtrOutput)
}

// Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
type JobMetadataOutput struct{ *pulumi.OutputState }

func (JobMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobMetadata)(nil)).Elem()
}

func (o JobMetadataOutput) ToJobMetadataOutput() JobMetadataOutput {
	return o
}

func (o JobMetadataOutput) ToJobMetadataOutputWithContext(ctx context.Context) JobMetadataOutput {
	return o
}

func (o JobMetadataOutput) ToJobMetadataPtrOutput() JobMetadataPtrOutput {
	return o.ToJobMetadataPtrOutputWithContext(context.Background())
}

func (o JobMetadataOutput) ToJobMetadataPtrOutputWithContext(ctx context.Context) JobMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JobMetadata) *JobMetadata {
		return &v
	}).(JobMetadataPtrOutput)
}

// Identification of a Cloud Bigtable source used in the Dataflow job.
func (o JobMetadataOutput) BigTableDetails() BigTableIODetailsArrayOutput {
	return o.ApplyT(func(v JobMetadata) []BigTableIODetails { return v.BigTableDetails }).(BigTableIODetailsArrayOutput)
}

// Identification of a BigQuery source used in the Dataflow job.
func (o JobMetadataOutput) BigqueryDetails() BigQueryIODetailsArrayOutput {
	return o.ApplyT(func(v JobMetadata) []BigQueryIODetails { return v.BigqueryDetails }).(BigQueryIODetailsArrayOutput)
}

// Identification of a Datastore source used in the Dataflow job.
func (o JobMetadataOutput) DatastoreDetails() DatastoreIODetailsArrayOutput {
	return o.ApplyT(func(v JobMetadata) []DatastoreIODetails { return v.DatastoreDetails }).(DatastoreIODetailsArrayOutput)
}

// Identification of a File source used in the Dataflow job.
func (o JobMetadataOutput) FileDetails() FileIODetailsArrayOutput {
	return o.ApplyT(func(v JobMetadata) []FileIODetails { return v.FileDetails }).(FileIODetailsArrayOutput)
}

// Identification of a Pub/Sub source used in the Dataflow job.
func (o JobMetadataOutput) PubsubDetails() PubSubIODetailsArrayOutput {
	return o.ApplyT(func(v JobMetadata) []PubSubIODetails { return v.PubsubDetails }).(PubSubIODetailsArrayOutput)
}

// The SDK version used to run the job.
func (o JobMetadataOutput) SdkVersion() SdkVersionPtrOutput {
	return o.ApplyT(func(v JobMetadata) *SdkVersion { return v.SdkVersion }).(SdkVersionPtrOutput)
}

// Identification of a Spanner source used in the Dataflow job.
func (o JobMetadataOutput) SpannerDetails() SpannerIODetailsArrayOutput {
	return o.ApplyT(func(v JobMetadata) []SpannerIODetails { return v.SpannerDetails }).(SpannerIODetailsArrayOutput)
}

// List of display properties to help UI filter jobs.
func (o JobMetadataOutput) UserDisplayProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobMetadata) map[string]string { return v.UserDisplayProperties }).(pulumi.StringMapOutput)
}

type JobMetadataPtrOutput struct{ *pulumi.OutputState }

func (JobMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobMetadata)(nil)).Elem()
}

func (o JobMetadataPtrOutput) ToJobMetadataPtrOutput() JobMetadataPtrOutput {
	return o
}

func (o JobMetadataPtrOutput) ToJobMetadataPtrOutputWithContext(ctx context.Context) JobMetadataPtrOutput {
	return o
}

func (o JobMetadataPtrOutput) Elem() JobMetadataOutput {
	return o.ApplyT(func(v *JobMetadata) JobMetadata {
		if v != nil {
			return *v
		}
		var ret JobMetadata
		return ret
	}).(JobMetadataOutput)
}

// Identification of a Cloud Bigtable source used in the Dataflow job.
func (o JobMetadataPtrOutput) BigTableDetails() BigTableIODetailsArrayOutput {
	return o.ApplyT(func(v *JobMetadata) []BigTableIODetails {
		if v == nil {
			return nil
		}
		return v.BigTableDetails
	}).(BigTableIODetailsArrayOutput)
}

// Identification of a BigQuery source used in the Dataflow job.
func (o JobMetadataPtrOutput) BigqueryDetails() BigQueryIODetailsArrayOutput {
	return o.ApplyT(func(v *JobMetadata) []BigQueryIODetails {
		if v == nil {
			return nil
		}
		return v.BigqueryDetails
	}).(BigQueryIODetailsArrayOutput)
}

// Identification of a Datastore source used in the Dataflow job.
func (o JobMetadataPtrOutput) DatastoreDetails() DatastoreIODetailsArrayOutput {
	return o.ApplyT(func(v *JobMetadata) []DatastoreIODetails {
		if v == nil {
			return nil
		}
		return v.DatastoreDetails
	}).(DatastoreIODetailsArrayOutput)
}

// Identification of a File source used in the Dataflow job.
func (o JobMetadataPtrOutput) FileDetails() FileIODetailsArrayOutput {
	return o.ApplyT(func(v *JobMetadata) []FileIODetails {
		if v == nil {
			return nil
		}
		return v.FileDetails
	}).(FileIODetailsArrayOutput)
}

// Identification of a Pub/Sub source used in the Dataflow job.
func (o JobMetadataPtrOutput) PubsubDetails() PubSubIODetailsArrayOutput {
	return o.ApplyT(func(v *JobMetadata) []PubSubIODetails {
		if v == nil {
			return nil
		}
		return v.PubsubDetails
	}).(PubSubIODetailsArrayOutput)
}

// The SDK version used to run the job.
func (o JobMetadataPtrOutput) SdkVersion() SdkVersionPtrOutput {
	return o.ApplyT(func(v *JobMetadata) *SdkVersion {
		if v == nil {
			return nil
		}
		return v.SdkVersion
	}).(SdkVersionPtrOutput)
}

// Identification of a Spanner source used in the Dataflow job.
func (o JobMetadataPtrOutput) SpannerDetails() SpannerIODetailsArrayOutput {
	return o.ApplyT(func(v *JobMetadata) []SpannerIODetails {
		if v == nil {
			return nil
		}
		return v.SpannerDetails
	}).(SpannerIODetailsArrayOutput)
}

// List of display properties to help UI filter jobs.
func (o JobMetadataPtrOutput) UserDisplayProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *JobMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.UserDisplayProperties
	}).(pulumi.StringMapOutput)
}

// Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
type JobMetadataResponse struct {
	// Identification of a Cloud Bigtable source used in the Dataflow job.
	BigTableDetails []BigTableIODetailsResponse `pulumi:"bigTableDetails"`
	// Identification of a BigQuery source used in the Dataflow job.
	BigqueryDetails []BigQueryIODetailsResponse `pulumi:"bigqueryDetails"`
	// Identification of a Datastore source used in the Dataflow job.
	DatastoreDetails []DatastoreIODetailsResponse `pulumi:"datastoreDetails"`
	// Identification of a File source used in the Dataflow job.
	FileDetails []FileIODetailsResponse `pulumi:"fileDetails"`
	// Identification of a Pub/Sub source used in the Dataflow job.
	PubsubDetails []PubSubIODetailsResponse `pulumi:"pubsubDetails"`
	// The SDK version used to run the job.
	SdkVersion SdkVersionResponse `pulumi:"sdkVersion"`
	// Identification of a Spanner source used in the Dataflow job.
	SpannerDetails []SpannerIODetailsResponse `pulumi:"spannerDetails"`
	// List of display properties to help UI filter jobs.
	UserDisplayProperties map[string]string `pulumi:"userDisplayProperties"`
}

// Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
type JobMetadataResponseOutput struct{ *pulumi.OutputState }

func (JobMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JobMetadataResponse)(nil)).Elem()
}

func (o JobMetadataResponseOutput) ToJobMetadataResponseOutput() JobMetadataResponseOutput {
	return o
}

func (o JobMetadataResponseOutput) ToJobMetadataResponseOutputWithContext(ctx context.Context) JobMetadataResponseOutput {
	return o
}

// Identification of a Cloud Bigtable source used in the Dataflow job.
func (o JobMetadataResponseOutput) BigTableDetails() BigTableIODetailsResponseArrayOutput {
	return o.ApplyT(func(v JobMetadataResponse) []BigTableIODetailsResponse { return v.BigTableDetails }).(BigTableIODetailsResponseArrayOutput)
}

// Identification of a BigQuery source used in the Dataflow job.
func (o JobMetadataResponseOutput) BigqueryDetails() BigQueryIODetailsResponseArrayOutput {
	return o.ApplyT(func(v JobMetadataResponse) []BigQueryIODetailsResponse { return v.BigqueryDetails }).(BigQueryIODetailsResponseArrayOutput)
}

// Identification of a Datastore source used in the Dataflow job.
func (o JobMetadataResponseOutput) DatastoreDetails() DatastoreIODetailsResponseArrayOutput {
	return o.ApplyT(func(v JobMetadataResponse) []DatastoreIODetailsResponse { return v.DatastoreDetails }).(DatastoreIODetailsResponseArrayOutput)
}

// Identification of a File source used in the Dataflow job.
func (o JobMetadataResponseOutput) FileDetails() FileIODetailsResponseArrayOutput {
	return o.ApplyT(func(v JobMetadataResponse) []FileIODetailsResponse { return v.FileDetails }).(FileIODetailsResponseArrayOutput)
}

// Identification of a Pub/Sub source used in the Dataflow job.
func (o JobMetadataResponseOutput) PubsubDetails() PubSubIODetailsResponseArrayOutput {
	return o.ApplyT(func(v JobMetadataResponse) []PubSubIODetailsResponse { return v.PubsubDetails }).(PubSubIODetailsResponseArrayOutput)
}

// The SDK version used to run the job.
func (o JobMetadataResponseOutput) SdkVersion() SdkVersionResponseOutput {
	return o.ApplyT(func(v JobMetadataResponse) SdkVersionResponse { return v.SdkVersion }).(SdkVersionResponseOutput)
}

// Identification of a Spanner source used in the Dataflow job.
func (o JobMetadataResponseOutput) SpannerDetails() SpannerIODetailsResponseArrayOutput {
	return o.ApplyT(func(v JobMetadataResponse) []SpannerIODetailsResponse { return v.SpannerDetails }).(SpannerIODetailsResponseArrayOutput)
}

// List of display properties to help UI filter jobs.
func (o JobMetadataResponseOutput) UserDisplayProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v JobMetadataResponse) map[string]string { return v.UserDisplayProperties }).(pulumi.StringMapOutput)
}

// The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool. This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user's code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.
type Package struct {
	// The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/
	Location *string `pulumi:"location"`
	// The name of the package.
	Name *string `pulumi:"name"`
}

// PackageInput is an input type that accepts PackageArgs and PackageOutput values.
// You can construct a concrete instance of `PackageInput` via:
//
//	PackageArgs{...}
type PackageInput interface {
	pulumi.Input

	ToPackageOutput() PackageOutput
	ToPackageOutputWithContext(context.Context) PackageOutput
}

// The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool. This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user's code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.
type PackageArgs struct {
	// The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The name of the package.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (i PackageArgs) ToPackageOutput() PackageOutput {
	return i.ToPackageOutputWithContext(context.Background())
}

func (i PackageArgs) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageOutput)
}

// PackageArrayInput is an input type that accepts PackageArray and PackageArrayOutput values.
// You can construct a concrete instance of `PackageArrayInput` via:
//
//	PackageArray{ PackageArgs{...} }
type PackageArrayInput interface {
	pulumi.Input

	ToPackageArrayOutput() PackageArrayOutput
	ToPackageArrayOutputWithContext(context.Context) PackageArrayOutput
}

type PackageArray []PackageInput

func (PackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Package)(nil)).Elem()
}

func (i PackageArray) ToPackageArrayOutput() PackageArrayOutput {
	return i.ToPackageArrayOutputWithContext(context.Background())
}

func (i PackageArray) ToPackageArrayOutputWithContext(ctx context.Context) PackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PackageArrayOutput)
}

// The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool. This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user's code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.
type PackageOutput struct{ *pulumi.OutputState }

func (PackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Package)(nil)).Elem()
}

func (o PackageOutput) ToPackageOutput() PackageOutput {
	return o
}

func (o PackageOutput) ToPackageOutputWithContext(ctx context.Context) PackageOutput {
	return o
}

// The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/
func (o PackageOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The name of the package.
func (o PackageOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Package) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PackageArrayOutput struct{ *pulumi.OutputState }

func (PackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Package)(nil)).Elem()
}

func (o PackageArrayOutput) ToPackageArrayOutput() PackageArrayOutput {
	return o
}

func (o PackageArrayOutput) ToPackageArrayOutputWithContext(ctx context.Context) PackageArrayOutput {
	return o
}

func (o PackageArrayOutput) Index(i pulumi.IntInput) PackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Package {
		return vs[0].([]Package)[vs[1].(int)]
	}).(PackageOutput)
}

// The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool. This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user's code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.
type PackageResponse struct {
	// The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/
	Location string `pulumi:"location"`
	// The name of the package.
	Name string `pulumi:"name"`
}

// The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool. This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user's code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.
type PackageResponseOutput struct{ *pulumi.OutputState }

func (PackageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PackageResponse)(nil)).Elem()
}

func (o PackageResponseOutput) ToPackageResponseOutput() PackageResponseOutput {
	return o
}

func (o PackageResponseOutput) ToPackageResponseOutputWithContext(ctx context.Context) PackageResponseOutput {
	return o
}

// The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/
func (o PackageResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The name of the package.
func (o PackageResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PackageResponse) string { return v.Name }).(pulumi.StringOutput)
}

type PackageResponseArrayOutput struct{ *pulumi.OutputState }

func (PackageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PackageResponse)(nil)).Elem()
}

func (o PackageResponseArrayOutput) ToPackageResponseArrayOutput() PackageResponseArrayOutput {
	return o
}

func (o PackageResponseArrayOutput) ToPackageResponseArrayOutputWithContext(ctx context.Context) PackageResponseArrayOutput {
	return o
}

func (o PackageResponseArrayOutput) Index(i pulumi.IntInput) PackageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PackageResponse {
		return vs[0].([]PackageResponse)[vs[1].(int)]
	}).(PackageResponseOutput)
}

// ParameterMetadataEnumOption specifies the option shown in the enum form.
type ParameterMetadataEnumOptionResponse struct {
	// Optional. The description to display for the enum option.
	Description string `pulumi:"description"`
	// Optional. The label to display for the enum option.
	Label string `pulumi:"label"`
	// The value of the enum option.
	Value string `pulumi:"value"`
}

// ParameterMetadataEnumOption specifies the option shown in the enum form.
type ParameterMetadataEnumOptionResponseOutput struct{ *pulumi.OutputState }

func (ParameterMetadataEnumOptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterMetadataEnumOptionResponse)(nil)).Elem()
}

func (o ParameterMetadataEnumOptionResponseOutput) ToParameterMetadataEnumOptionResponseOutput() ParameterMetadataEnumOptionResponseOutput {
	return o
}

func (o ParameterMetadataEnumOptionResponseOutput) ToParameterMetadataEnumOptionResponseOutputWithContext(ctx context.Context) ParameterMetadataEnumOptionResponseOutput {
	return o
}

// Optional. The description to display for the enum option.
func (o ParameterMetadataEnumOptionResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataEnumOptionResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Optional. The label to display for the enum option.
func (o ParameterMetadataEnumOptionResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataEnumOptionResponse) string { return v.Label }).(pulumi.StringOutput)
}

// The value of the enum option.
func (o ParameterMetadataEnumOptionResponseOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataEnumOptionResponse) string { return v.Value }).(pulumi.StringOutput)
}

type ParameterMetadataEnumOptionResponseArrayOutput struct{ *pulumi.OutputState }

func (ParameterMetadataEnumOptionResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterMetadataEnumOptionResponse)(nil)).Elem()
}

func (o ParameterMetadataEnumOptionResponseArrayOutput) ToParameterMetadataEnumOptionResponseArrayOutput() ParameterMetadataEnumOptionResponseArrayOutput {
	return o
}

func (o ParameterMetadataEnumOptionResponseArrayOutput) ToParameterMetadataEnumOptionResponseArrayOutputWithContext(ctx context.Context) ParameterMetadataEnumOptionResponseArrayOutput {
	return o
}

func (o ParameterMetadataEnumOptionResponseArrayOutput) Index(i pulumi.IntInput) ParameterMetadataEnumOptionResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterMetadataEnumOptionResponse {
		return vs[0].([]ParameterMetadataEnumOptionResponse)[vs[1].(int)]
	}).(ParameterMetadataEnumOptionResponseOutput)
}

// Metadata for a specific parameter.
type ParameterMetadataResponse struct {
	// Optional. Additional metadata for describing this parameter.
	CustomMetadata map[string]string `pulumi:"customMetadata"`
	// Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.
	DefaultValue string `pulumi:"defaultValue"`
	// Optional. The options shown when ENUM ParameterType is specified.
	EnumOptions []ParameterMetadataEnumOptionResponse `pulumi:"enumOptions"`
	// Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.
	GroupName string `pulumi:"groupName"`
	// The help text to display for the parameter.
	HelpText string `pulumi:"helpText"`
	// Optional. Whether the parameter is optional. Defaults to false.
	IsOptional bool `pulumi:"isOptional"`
	// The label to display for the parameter.
	Label string `pulumi:"label"`
	// The name of the parameter.
	Name string `pulumi:"name"`
	// Optional. The type of the parameter. Used for selecting input picker.
	ParamType string `pulumi:"paramType"`
	// Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.
	ParentName string `pulumi:"parentName"`
	// Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).
	ParentTriggerValues []string `pulumi:"parentTriggerValues"`
	// Optional. Regexes that the parameter must match.
	Regexes []string `pulumi:"regexes"`
}

// Metadata for a specific parameter.
type ParameterMetadataResponseOutput struct{ *pulumi.OutputState }

func (ParameterMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterMetadataResponse)(nil)).Elem()
}

func (o ParameterMetadataResponseOutput) ToParameterMetadataResponseOutput() ParameterMetadataResponseOutput {
	return o
}

func (o ParameterMetadataResponseOutput) ToParameterMetadataResponseOutputWithContext(ctx context.Context) ParameterMetadataResponseOutput {
	return o
}

// Optional. Additional metadata for describing this parameter.
func (o ParameterMetadataResponseOutput) CustomMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) map[string]string { return v.CustomMetadata }).(pulumi.StringMapOutput)
}

// Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.
func (o ParameterMetadataResponseOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Optional. The options shown when ENUM ParameterType is specified.
func (o ParameterMetadataResponseOutput) EnumOptions() ParameterMetadataEnumOptionResponseArrayOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) []ParameterMetadataEnumOptionResponse { return v.EnumOptions }).(ParameterMetadataEnumOptionResponseArrayOutput)
}

// Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.
func (o ParameterMetadataResponseOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) string { return v.GroupName }).(pulumi.StringOutput)
}

// The help text to display for the parameter.
func (o ParameterMetadataResponseOutput) HelpText() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) string { return v.HelpText }).(pulumi.StringOutput)
}

// Optional. Whether the parameter is optional. Defaults to false.
func (o ParameterMetadataResponseOutput) IsOptional() pulumi.BoolOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) bool { return v.IsOptional }).(pulumi.BoolOutput)
}

// The label to display for the parameter.
func (o ParameterMetadataResponseOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) string { return v.Label }).(pulumi.StringOutput)
}

// The name of the parameter.
func (o ParameterMetadataResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Optional. The type of the parameter. Used for selecting input picker.
func (o ParameterMetadataResponseOutput) ParamType() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) string { return v.ParamType }).(pulumi.StringOutput)
}

// Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.
func (o ParameterMetadataResponseOutput) ParentName() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) string { return v.ParentName }).(pulumi.StringOutput)
}

// Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).
func (o ParameterMetadataResponseOutput) ParentTriggerValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) []string { return v.ParentTriggerValues }).(pulumi.StringArrayOutput)
}

// Optional. Regexes that the parameter must match.
func (o ParameterMetadataResponseOutput) Regexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ParameterMetadataResponse) []string { return v.Regexes }).(pulumi.StringArrayOutput)
}

type ParameterMetadataResponseArrayOutput struct{ *pulumi.OutputState }

func (ParameterMetadataResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterMetadataResponse)(nil)).Elem()
}

func (o ParameterMetadataResponseArrayOutput) ToParameterMetadataResponseArrayOutput() ParameterMetadataResponseArrayOutput {
	return o
}

func (o ParameterMetadataResponseArrayOutput) ToParameterMetadataResponseArrayOutputWithContext(ctx context.Context) ParameterMetadataResponseArrayOutput {
	return o
}

func (o ParameterMetadataResponseArrayOutput) Index(i pulumi.IntInput) ParameterMetadataResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterMetadataResponse {
		return vs[0].([]ParameterMetadataResponse)[vs[1].(int)]
	}).(ParameterMetadataResponseOutput)
}

// A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
type PipelineDescription struct {
	// Pipeline level display data.
	DisplayData []DisplayData `pulumi:"displayData"`
	// Description of each stage of execution of the pipeline.
	ExecutionPipelineStage []ExecutionStageSummary `pulumi:"executionPipelineStage"`
	// Description of each transform in the pipeline and collections between them.
	OriginalPipelineTransform []TransformSummary `pulumi:"originalPipelineTransform"`
	// A hash value of the submitted pipeline portable graph step names if exists.
	StepNamesHash *string `pulumi:"stepNamesHash"`
}

// PipelineDescriptionInput is an input type that accepts PipelineDescriptionArgs and PipelineDescriptionOutput values.
// You can construct a concrete instance of `PipelineDescriptionInput` via:
//
//	PipelineDescriptionArgs{...}
type PipelineDescriptionInput interface {
	pulumi.Input

	ToPipelineDescriptionOutput() PipelineDescriptionOutput
	ToPipelineDescriptionOutputWithContext(context.Context) PipelineDescriptionOutput
}

// A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
type PipelineDescriptionArgs struct {
	// Pipeline level display data.
	DisplayData DisplayDataArrayInput `pulumi:"displayData"`
	// Description of each stage of execution of the pipeline.
	ExecutionPipelineStage ExecutionStageSummaryArrayInput `pulumi:"executionPipelineStage"`
	// Description of each transform in the pipeline and collections between them.
	OriginalPipelineTransform TransformSummaryArrayInput `pulumi:"originalPipelineTransform"`
	// A hash value of the submitted pipeline portable graph step names if exists.
	StepNamesHash pulumi.StringPtrInput `pulumi:"stepNamesHash"`
}

func (PipelineDescriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineDescription)(nil)).Elem()
}

func (i PipelineDescriptionArgs) ToPipelineDescriptionOutput() PipelineDescriptionOutput {
	return i.ToPipelineDescriptionOutputWithContext(context.Background())
}

func (i PipelineDescriptionArgs) ToPipelineDescriptionOutputWithContext(ctx context.Context) PipelineDescriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineDescriptionOutput)
}

func (i PipelineDescriptionArgs) ToPipelineDescriptionPtrOutput() PipelineDescriptionPtrOutput {
	return i.ToPipelineDescriptionPtrOutputWithContext(context.Background())
}

func (i PipelineDescriptionArgs) ToPipelineDescriptionPtrOutputWithContext(ctx context.Context) PipelineDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineDescriptionOutput).ToPipelineDescriptionPtrOutputWithContext(ctx)
}

// PipelineDescriptionPtrInput is an input type that accepts PipelineDescriptionArgs, PipelineDescriptionPtr and PipelineDescriptionPtrOutput values.
// You can construct a concrete instance of `PipelineDescriptionPtrInput` via:
//
//	        PipelineDescriptionArgs{...}
//
//	or:
//
//	        nil
type PipelineDescriptionPtrInput interface {
	pulumi.Input

	ToPipelineDescriptionPtrOutput() PipelineDescriptionPtrOutput
	ToPipelineDescriptionPtrOutputWithContext(context.Context) PipelineDescriptionPtrOutput
}

type pipelineDescriptionPtrType PipelineDescriptionArgs

func PipelineDescriptionPtr(v *PipelineDescriptionArgs) PipelineDescriptionPtrInput {
	return (*pipelineDescriptionPtrType)(v)
}

func (*pipelineDescriptionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineDescription)(nil)).Elem()
}

func (i *pipelineDescriptionPtrType) ToPipelineDescriptionPtrOutput() PipelineDescriptionPtrOutput {
	return i.ToPipelineDescriptionPtrOutputWithContext(context.Background())
}

func (i *pipelineDescriptionPtrType) ToPipelineDescriptionPtrOutputWithContext(ctx context.Context) PipelineDescriptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineDescriptionPtrOutput)
}

// A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
type PipelineDescriptionOutput struct{ *pulumi.OutputState }

func (PipelineDescriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineDescription)(nil)).Elem()
}

func (o PipelineDescriptionOutput) ToPipelineDescriptionOutput() PipelineDescriptionOutput {
	return o
}

func (o PipelineDescriptionOutput) ToPipelineDescriptionOutputWithContext(ctx context.Context) PipelineDescriptionOutput {
	return o
}

func (o PipelineDescriptionOutput) ToPipelineDescriptionPtrOutput() PipelineDescriptionPtrOutput {
	return o.ToPipelineDescriptionPtrOutputWithContext(context.Background())
}

func (o PipelineDescriptionOutput) ToPipelineDescriptionPtrOutputWithContext(ctx context.Context) PipelineDescriptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PipelineDescription) *PipelineDescription {
		return &v
	}).(PipelineDescriptionPtrOutput)
}

// Pipeline level display data.
func (o PipelineDescriptionOutput) DisplayData() DisplayDataArrayOutput {
	return o.ApplyT(func(v PipelineDescription) []DisplayData { return v.DisplayData }).(DisplayDataArrayOutput)
}

// Description of each stage of execution of the pipeline.
func (o PipelineDescriptionOutput) ExecutionPipelineStage() ExecutionStageSummaryArrayOutput {
	return o.ApplyT(func(v PipelineDescription) []ExecutionStageSummary { return v.ExecutionPipelineStage }).(ExecutionStageSummaryArrayOutput)
}

// Description of each transform in the pipeline and collections between them.
func (o PipelineDescriptionOutput) OriginalPipelineTransform() TransformSummaryArrayOutput {
	return o.ApplyT(func(v PipelineDescription) []TransformSummary { return v.OriginalPipelineTransform }).(TransformSummaryArrayOutput)
}

// A hash value of the submitted pipeline portable graph step names if exists.
func (o PipelineDescriptionOutput) StepNamesHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PipelineDescription) *string { return v.StepNamesHash }).(pulumi.StringPtrOutput)
}

type PipelineDescriptionPtrOutput struct{ *pulumi.OutputState }

func (PipelineDescriptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PipelineDescription)(nil)).Elem()
}

func (o PipelineDescriptionPtrOutput) ToPipelineDescriptionPtrOutput() PipelineDescriptionPtrOutput {
	return o
}

func (o PipelineDescriptionPtrOutput) ToPipelineDescriptionPtrOutputWithContext(ctx context.Context) PipelineDescriptionPtrOutput {
	return o
}

func (o PipelineDescriptionPtrOutput) Elem() PipelineDescriptionOutput {
	return o.ApplyT(func(v *PipelineDescription) PipelineDescription {
		if v != nil {
			return *v
		}
		var ret PipelineDescription
		return ret
	}).(PipelineDescriptionOutput)
}

// Pipeline level display data.
func (o PipelineDescriptionPtrOutput) DisplayData() DisplayDataArrayOutput {
	return o.ApplyT(func(v *PipelineDescription) []DisplayData {
		if v == nil {
			return nil
		}
		return v.DisplayData
	}).(DisplayDataArrayOutput)
}

// Description of each stage of execution of the pipeline.
func (o PipelineDescriptionPtrOutput) ExecutionPipelineStage() ExecutionStageSummaryArrayOutput {
	return o.ApplyT(func(v *PipelineDescription) []ExecutionStageSummary {
		if v == nil {
			return nil
		}
		return v.ExecutionPipelineStage
	}).(ExecutionStageSummaryArrayOutput)
}

// Description of each transform in the pipeline and collections between them.
func (o PipelineDescriptionPtrOutput) OriginalPipelineTransform() TransformSummaryArrayOutput {
	return o.ApplyT(func(v *PipelineDescription) []TransformSummary {
		if v == nil {
			return nil
		}
		return v.OriginalPipelineTransform
	}).(TransformSummaryArrayOutput)
}

// A hash value of the submitted pipeline portable graph step names if exists.
func (o PipelineDescriptionPtrOutput) StepNamesHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PipelineDescription) *string {
		if v == nil {
			return nil
		}
		return v.StepNamesHash
	}).(pulumi.StringPtrOutput)
}

// A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
type PipelineDescriptionResponse struct {
	// Pipeline level display data.
	DisplayData []DisplayDataResponse `pulumi:"displayData"`
	// Description of each stage of execution of the pipeline.
	ExecutionPipelineStage []ExecutionStageSummaryResponse `pulumi:"executionPipelineStage"`
	// Description of each transform in the pipeline and collections between them.
	OriginalPipelineTransform []TransformSummaryResponse `pulumi:"originalPipelineTransform"`
	// A hash value of the submitted pipeline portable graph step names if exists.
	StepNamesHash string `pulumi:"stepNamesHash"`
}

// A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
type PipelineDescriptionResponseOutput struct{ *pulumi.OutputState }

func (PipelineDescriptionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PipelineDescriptionResponse)(nil)).Elem()
}

func (o PipelineDescriptionResponseOutput) ToPipelineDescriptionResponseOutput() PipelineDescriptionResponseOutput {
	return o
}

func (o PipelineDescriptionResponseOutput) ToPipelineDescriptionResponseOutputWithContext(ctx context.Context) PipelineDescriptionResponseOutput {
	return o
}

// Pipeline level display data.
func (o PipelineDescriptionResponseOutput) DisplayData() DisplayDataResponseArrayOutput {
	return o.ApplyT(func(v PipelineDescriptionResponse) []DisplayDataResponse { return v.DisplayData }).(DisplayDataResponseArrayOutput)
}

// Description of each stage of execution of the pipeline.
func (o PipelineDescriptionResponseOutput) ExecutionPipelineStage() ExecutionStageSummaryResponseArrayOutput {
	return o.ApplyT(func(v PipelineDescriptionResponse) []ExecutionStageSummaryResponse { return v.ExecutionPipelineStage }).(ExecutionStageSummaryResponseArrayOutput)
}

// Description of each transform in the pipeline and collections between them.
func (o PipelineDescriptionResponseOutput) OriginalPipelineTransform() TransformSummaryResponseArrayOutput {
	return o.ApplyT(func(v PipelineDescriptionResponse) []TransformSummaryResponse { return v.OriginalPipelineTransform }).(TransformSummaryResponseArrayOutput)
}

// A hash value of the submitted pipeline portable graph step names if exists.
func (o PipelineDescriptionResponseOutput) StepNamesHash() pulumi.StringOutput {
	return o.ApplyT(func(v PipelineDescriptionResponse) string { return v.StepNamesHash }).(pulumi.StringOutput)
}

// Metadata for a Pub/Sub connector used by the job.
type PubSubIODetails struct {
	// Subscription used in the connection.
	Subscription *string `pulumi:"subscription"`
	// Topic accessed in the connection.
	Topic *string `pulumi:"topic"`
}

// PubSubIODetailsInput is an input type that accepts PubSubIODetailsArgs and PubSubIODetailsOutput values.
// You can construct a concrete instance of `PubSubIODetailsInput` via:
//
//	PubSubIODetailsArgs{...}
type PubSubIODetailsInput interface {
	pulumi.Input

	ToPubSubIODetailsOutput() PubSubIODetailsOutput
	ToPubSubIODetailsOutputWithContext(context.Context) PubSubIODetailsOutput
}

// Metadata for a Pub/Sub connector used by the job.
type PubSubIODetailsArgs struct {
	// Subscription used in the connection.
	Subscription pulumi.StringPtrInput `pulumi:"subscription"`
	// Topic accessed in the connection.
	Topic pulumi.StringPtrInput `pulumi:"topic"`
}

func (PubSubIODetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSubIODetails)(nil)).Elem()
}

func (i PubSubIODetailsArgs) ToPubSubIODetailsOutput() PubSubIODetailsOutput {
	return i.ToPubSubIODetailsOutputWithContext(context.Background())
}

func (i PubSubIODetailsArgs) ToPubSubIODetailsOutputWithContext(ctx context.Context) PubSubIODetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubIODetailsOutput)
}

// PubSubIODetailsArrayInput is an input type that accepts PubSubIODetailsArray and PubSubIODetailsArrayOutput values.
// You can construct a concrete instance of `PubSubIODetailsArrayInput` via:
//
//	PubSubIODetailsArray{ PubSubIODetailsArgs{...} }
type PubSubIODetailsArrayInput interface {
	pulumi.Input

	ToPubSubIODetailsArrayOutput() PubSubIODetailsArrayOutput
	ToPubSubIODetailsArrayOutputWithContext(context.Context) PubSubIODetailsArrayOutput
}

type PubSubIODetailsArray []PubSubIODetailsInput

func (PubSubIODetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PubSubIODetails)(nil)).Elem()
}

func (i PubSubIODetailsArray) ToPubSubIODetailsArrayOutput() PubSubIODetailsArrayOutput {
	return i.ToPubSubIODetailsArrayOutputWithContext(context.Background())
}

func (i PubSubIODetailsArray) ToPubSubIODetailsArrayOutputWithContext(ctx context.Context) PubSubIODetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PubSubIODetailsArrayOutput)
}

// Metadata for a Pub/Sub connector used by the job.
type PubSubIODetailsOutput struct{ *pulumi.OutputState }

func (PubSubIODetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSubIODetails)(nil)).Elem()
}

func (o PubSubIODetailsOutput) ToPubSubIODetailsOutput() PubSubIODetailsOutput {
	return o
}

func (o PubSubIODetailsOutput) ToPubSubIODetailsOutputWithContext(ctx context.Context) PubSubIODetailsOutput {
	return o
}

// Subscription used in the connection.
func (o PubSubIODetailsOutput) Subscription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubSubIODetails) *string { return v.Subscription }).(pulumi.StringPtrOutput)
}

// Topic accessed in the connection.
func (o PubSubIODetailsOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PubSubIODetails) *string { return v.Topic }).(pulumi.StringPtrOutput)
}

type PubSubIODetailsArrayOutput struct{ *pulumi.OutputState }

func (PubSubIODetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PubSubIODetails)(nil)).Elem()
}

func (o PubSubIODetailsArrayOutput) ToPubSubIODetailsArrayOutput() PubSubIODetailsArrayOutput {
	return o
}

func (o PubSubIODetailsArrayOutput) ToPubSubIODetailsArrayOutputWithContext(ctx context.Context) PubSubIODetailsArrayOutput {
	return o
}

func (o PubSubIODetailsArrayOutput) Index(i pulumi.IntInput) PubSubIODetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PubSubIODetails {
		return vs[0].([]PubSubIODetails)[vs[1].(int)]
	}).(PubSubIODetailsOutput)
}

// Metadata for a Pub/Sub connector used by the job.
type PubSubIODetailsResponse struct {
	// Subscription used in the connection.
	Subscription string `pulumi:"subscription"`
	// Topic accessed in the connection.
	Topic string `pulumi:"topic"`
}

// Metadata for a Pub/Sub connector used by the job.
type PubSubIODetailsResponseOutput struct{ *pulumi.OutputState }

func (PubSubIODetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PubSubIODetailsResponse)(nil)).Elem()
}

func (o PubSubIODetailsResponseOutput) ToPubSubIODetailsResponseOutput() PubSubIODetailsResponseOutput {
	return o
}

func (o PubSubIODetailsResponseOutput) ToPubSubIODetailsResponseOutputWithContext(ctx context.Context) PubSubIODetailsResponseOutput {
	return o
}

// Subscription used in the connection.
func (o PubSubIODetailsResponseOutput) Subscription() pulumi.StringOutput {
	return o.ApplyT(func(v PubSubIODetailsResponse) string { return v.Subscription }).(pulumi.StringOutput)
}

// Topic accessed in the connection.
func (o PubSubIODetailsResponseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v PubSubIODetailsResponse) string { return v.Topic }).(pulumi.StringOutput)
}

type PubSubIODetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (PubSubIODetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PubSubIODetailsResponse)(nil)).Elem()
}

func (o PubSubIODetailsResponseArrayOutput) ToPubSubIODetailsResponseArrayOutput() PubSubIODetailsResponseArrayOutput {
	return o
}

func (o PubSubIODetailsResponseArrayOutput) ToPubSubIODetailsResponseArrayOutputWithContext(ctx context.Context) PubSubIODetailsResponseArrayOutput {
	return o
}

func (o PubSubIODetailsResponseArrayOutput) Index(i pulumi.IntInput) PubSubIODetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PubSubIODetailsResponse {
		return vs[0].([]PubSubIODetailsResponse)[vs[1].(int)]
	}).(PubSubIODetailsResponseOutput)
}

// The environment values to set at runtime.
type RuntimeEnvironment struct {
	// Optional. Additional experiment flags for the job, specified with the `--experiments` option.
	AdditionalExperiments []string `pulumi:"additionalExperiments"`
	// Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
	AdditionalUserLabels map[string]string `pulumi:"additionalUserLabels"`
	// Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.
	BypassTempDirValidation *bool `pulumi:"bypassTempDirValidation"`
	// Optional. The disk size, in gigabytes, to use on each remote Compute Engine worker instance.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Optional. Whether to enable Streaming Engine for the job.
	EnableStreamingEngine *bool `pulumi:"enableStreamingEngine"`
	// Optional. Configuration for VM IPs.
	IpConfiguration *RuntimeEnvironmentIpConfiguration `pulumi:"ipConfiguration"`
	// Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Optional. The machine type to use for the job. Defaults to the value from the template if not specified.
	MachineType *string `pulumi:"machineType"`
	// Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.
	MaxWorkers *int `pulumi:"maxWorkers"`
	// Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
	Network *string `pulumi:"network"`
	// Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.
	NumWorkers *int `pulumi:"numWorkers"`
	// Optional. The email address of the service account to run the job as.
	ServiceAccountEmail *string `pulumi:"serviceAccountEmail"`
	// Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
	Subnetwork *string `pulumi:"subnetwork"`
	// The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.
	TempLocation string `pulumi:"tempLocation"`
	// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
	WorkerRegion string `pulumi:"workerRegion"`
	// Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
	WorkerZone *string `pulumi:"workerZone"`
	// Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.
	Zone *string `pulumi:"zone"`
}

// RuntimeEnvironmentInput is an input type that accepts RuntimeEnvironmentArgs and RuntimeEnvironmentOutput values.
// You can construct a concrete instance of `RuntimeEnvironmentInput` via:
//
//	RuntimeEnvironmentArgs{...}
type RuntimeEnvironmentInput interface {
	pulumi.Input

	ToRuntimeEnvironmentOutput() RuntimeEnvironmentOutput
	ToRuntimeEnvironmentOutputWithContext(context.Context) RuntimeEnvironmentOutput
}

// The environment values to set at runtime.
type RuntimeEnvironmentArgs struct {
	// Optional. Additional experiment flags for the job, specified with the `--experiments` option.
	AdditionalExperiments pulumi.StringArrayInput `pulumi:"additionalExperiments"`
	// Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
	AdditionalUserLabels pulumi.StringMapInput `pulumi:"additionalUserLabels"`
	// Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.
	BypassTempDirValidation pulumi.BoolPtrInput `pulumi:"bypassTempDirValidation"`
	// Optional. The disk size, in gigabytes, to use on each remote Compute Engine worker instance.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Optional. Whether to enable Streaming Engine for the job.
	EnableStreamingEngine pulumi.BoolPtrInput `pulumi:"enableStreamingEngine"`
	// Optional. Configuration for VM IPs.
	IpConfiguration RuntimeEnvironmentIpConfigurationPtrInput `pulumi:"ipConfiguration"`
	// Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// Optional. The machine type to use for the job. Defaults to the value from the template if not specified.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.
	MaxWorkers pulumi.IntPtrInput `pulumi:"maxWorkers"`
	// Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
	Network pulumi.StringPtrInput `pulumi:"network"`
	// Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.
	NumWorkers pulumi.IntPtrInput `pulumi:"numWorkers"`
	// Optional. The email address of the service account to run the job as.
	ServiceAccountEmail pulumi.StringPtrInput `pulumi:"serviceAccountEmail"`
	// Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.
	TempLocation pulumi.StringInput `pulumi:"tempLocation"`
	// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
	WorkerRegion pulumi.StringInput `pulumi:"workerRegion"`
	// Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
	WorkerZone pulumi.StringPtrInput `pulumi:"workerZone"`
	// Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (RuntimeEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeEnvironment)(nil)).Elem()
}

func (i RuntimeEnvironmentArgs) ToRuntimeEnvironmentOutput() RuntimeEnvironmentOutput {
	return i.ToRuntimeEnvironmentOutputWithContext(context.Background())
}

func (i RuntimeEnvironmentArgs) ToRuntimeEnvironmentOutputWithContext(ctx context.Context) RuntimeEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeEnvironmentOutput)
}

func (i RuntimeEnvironmentArgs) ToRuntimeEnvironmentPtrOutput() RuntimeEnvironmentPtrOutput {
	return i.ToRuntimeEnvironmentPtrOutputWithContext(context.Background())
}

func (i RuntimeEnvironmentArgs) ToRuntimeEnvironmentPtrOutputWithContext(ctx context.Context) RuntimeEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeEnvironmentOutput).ToRuntimeEnvironmentPtrOutputWithContext(ctx)
}

// RuntimeEnvironmentPtrInput is an input type that accepts RuntimeEnvironmentArgs, RuntimeEnvironmentPtr and RuntimeEnvironmentPtrOutput values.
// You can construct a concrete instance of `RuntimeEnvironmentPtrInput` via:
//
//	        RuntimeEnvironmentArgs{...}
//
//	or:
//
//	        nil
type RuntimeEnvironmentPtrInput interface {
	pulumi.Input

	ToRuntimeEnvironmentPtrOutput() RuntimeEnvironmentPtrOutput
	ToRuntimeEnvironmentPtrOutputWithContext(context.Context) RuntimeEnvironmentPtrOutput
}

type runtimeEnvironmentPtrType RuntimeEnvironmentArgs

func RuntimeEnvironmentPtr(v *RuntimeEnvironmentArgs) RuntimeEnvironmentPtrInput {
	return (*runtimeEnvironmentPtrType)(v)
}

func (*runtimeEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeEnvironment)(nil)).Elem()
}

func (i *runtimeEnvironmentPtrType) ToRuntimeEnvironmentPtrOutput() RuntimeEnvironmentPtrOutput {
	return i.ToRuntimeEnvironmentPtrOutputWithContext(context.Background())
}

func (i *runtimeEnvironmentPtrType) ToRuntimeEnvironmentPtrOutputWithContext(ctx context.Context) RuntimeEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeEnvironmentPtrOutput)
}

// The environment values to set at runtime.
type RuntimeEnvironmentOutput struct{ *pulumi.OutputState }

func (RuntimeEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeEnvironment)(nil)).Elem()
}

func (o RuntimeEnvironmentOutput) ToRuntimeEnvironmentOutput() RuntimeEnvironmentOutput {
	return o
}

func (o RuntimeEnvironmentOutput) ToRuntimeEnvironmentOutputWithContext(ctx context.Context) RuntimeEnvironmentOutput {
	return o
}

func (o RuntimeEnvironmentOutput) ToRuntimeEnvironmentPtrOutput() RuntimeEnvironmentPtrOutput {
	return o.ToRuntimeEnvironmentPtrOutputWithContext(context.Background())
}

func (o RuntimeEnvironmentOutput) ToRuntimeEnvironmentPtrOutputWithContext(ctx context.Context) RuntimeEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeEnvironment) *RuntimeEnvironment {
		return &v
	}).(RuntimeEnvironmentPtrOutput)
}

// Optional. Additional experiment flags for the job, specified with the `--experiments` option.
func (o RuntimeEnvironmentOutput) AdditionalExperiments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuntimeEnvironment) []string { return v.AdditionalExperiments }).(pulumi.StringArrayOutput)
}

// Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
func (o RuntimeEnvironmentOutput) AdditionalUserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuntimeEnvironment) map[string]string { return v.AdditionalUserLabels }).(pulumi.StringMapOutput)
}

// Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.
func (o RuntimeEnvironmentOutput) BypassTempDirValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *bool { return v.BypassTempDirValidation }).(pulumi.BoolPtrOutput)
}

// Optional. The disk size, in gigabytes, to use on each remote Compute Engine worker instance.
func (o RuntimeEnvironmentOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Optional. Whether to enable Streaming Engine for the job.
func (o RuntimeEnvironmentOutput) EnableStreamingEngine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *bool { return v.EnableStreamingEngine }).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for VM IPs.
func (o RuntimeEnvironmentOutput) IpConfiguration() RuntimeEnvironmentIpConfigurationPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *RuntimeEnvironmentIpConfiguration { return v.IpConfiguration }).(RuntimeEnvironmentIpConfigurationPtrOutput)
}

// Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/
func (o RuntimeEnvironmentOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Optional. The machine type to use for the job. Defaults to the value from the template if not specified.
func (o RuntimeEnvironmentOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.
func (o RuntimeEnvironmentOutput) MaxWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *int { return v.MaxWorkers }).(pulumi.IntPtrOutput)
}

// Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
func (o RuntimeEnvironmentOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.
func (o RuntimeEnvironmentOutput) NumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *int { return v.NumWorkers }).(pulumi.IntPtrOutput)
}

// Optional. The email address of the service account to run the job as.
func (o RuntimeEnvironmentOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *string { return v.ServiceAccountEmail }).(pulumi.StringPtrOutput)
}

// Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
func (o RuntimeEnvironmentOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.
func (o RuntimeEnvironmentOutput) TempLocation() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeEnvironment) string { return v.TempLocation }).(pulumi.StringOutput)
}

// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
func (o RuntimeEnvironmentOutput) WorkerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v RuntimeEnvironment) string { return v.WorkerRegion }).(pulumi.StringOutput)
}

// Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
func (o RuntimeEnvironmentOutput) WorkerZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *string { return v.WorkerZone }).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.
func (o RuntimeEnvironmentOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuntimeEnvironment) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type RuntimeEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (RuntimeEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeEnvironment)(nil)).Elem()
}

func (o RuntimeEnvironmentPtrOutput) ToRuntimeEnvironmentPtrOutput() RuntimeEnvironmentPtrOutput {
	return o
}

func (o RuntimeEnvironmentPtrOutput) ToRuntimeEnvironmentPtrOutputWithContext(ctx context.Context) RuntimeEnvironmentPtrOutput {
	return o
}

func (o RuntimeEnvironmentPtrOutput) Elem() RuntimeEnvironmentOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) RuntimeEnvironment {
		if v != nil {
			return *v
		}
		var ret RuntimeEnvironment
		return ret
	}).(RuntimeEnvironmentOutput)
}

// Optional. Additional experiment flags for the job, specified with the `--experiments` option.
func (o RuntimeEnvironmentPtrOutput) AdditionalExperiments() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) []string {
		if v == nil {
			return nil
		}
		return v.AdditionalExperiments
	}).(pulumi.StringArrayOutput)
}

// Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.
func (o RuntimeEnvironmentPtrOutput) AdditionalUserLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) map[string]string {
		if v == nil {
			return nil
		}
		return v.AdditionalUserLabels
	}).(pulumi.StringMapOutput)
}

// Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.
func (o RuntimeEnvironmentPtrOutput) BypassTempDirValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *bool {
		if v == nil {
			return nil
		}
		return v.BypassTempDirValidation
	}).(pulumi.BoolPtrOutput)
}

// Optional. The disk size, in gigabytes, to use on each remote Compute Engine worker instance.
func (o RuntimeEnvironmentPtrOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *int {
		if v == nil {
			return nil
		}
		return v.DiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Optional. Whether to enable Streaming Engine for the job.
func (o RuntimeEnvironmentPtrOutput) EnableStreamingEngine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *bool {
		if v == nil {
			return nil
		}
		return v.EnableStreamingEngine
	}).(pulumi.BoolPtrOutput)
}

// Optional. Configuration for VM IPs.
func (o RuntimeEnvironmentPtrOutput) IpConfiguration() RuntimeEnvironmentIpConfigurationPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *RuntimeEnvironmentIpConfiguration {
		if v == nil {
			return nil
		}
		return v.IpConfiguration
	}).(RuntimeEnvironmentIpConfigurationPtrOutput)
}

// Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/
func (o RuntimeEnvironmentPtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// Optional. The machine type to use for the job. Defaults to the value from the template if not specified.
func (o RuntimeEnvironmentPtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.
func (o RuntimeEnvironmentPtrOutput) MaxWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *int {
		if v == nil {
			return nil
		}
		return v.MaxWorkers
	}).(pulumi.IntPtrOutput)
}

// Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
func (o RuntimeEnvironmentPtrOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.Network
	}).(pulumi.StringPtrOutput)
}

// Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.
func (o RuntimeEnvironmentPtrOutput) NumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *int {
		if v == nil {
			return nil
		}
		return v.NumWorkers
	}).(pulumi.IntPtrOutput)
}

// Optional. The email address of the service account to run the job as.
func (o RuntimeEnvironmentPtrOutput) ServiceAccountEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountEmail
	}).(pulumi.StringPtrOutput)
}

// Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.
func (o RuntimeEnvironmentPtrOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.Subnetwork
	}).(pulumi.StringPtrOutput)
}

// The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.
func (o RuntimeEnvironmentPtrOutput) TempLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.TempLocation
	}).(pulumi.StringPtrOutput)
}

// The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.
func (o RuntimeEnvironmentPtrOutput) WorkerRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.WorkerRegion
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.
func (o RuntimeEnvironmentPtrOutput) WorkerZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.WorkerZone
	}).(pulumi.StringPtrOutput)
}

// Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.
func (o RuntimeEnvironmentPtrOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuntimeEnvironment) *string {
		if v == nil {
			return nil
		}
		return v.Zone
	}).(pulumi.StringPtrOutput)
}

// RuntimeMetadata describing a runtime environment.
type RuntimeMetadataResponse struct {
	// The parameters for the template.
	Parameters []ParameterMetadataResponse `pulumi:"parameters"`
	// SDK Info for the template.
	SdkInfo SDKInfoResponse `pulumi:"sdkInfo"`
}

// RuntimeMetadata describing a runtime environment.
type RuntimeMetadataResponseOutput struct{ *pulumi.OutputState }

func (RuntimeMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeMetadataResponse)(nil)).Elem()
}

func (o RuntimeMetadataResponseOutput) ToRuntimeMetadataResponseOutput() RuntimeMetadataResponseOutput {
	return o
}

func (o RuntimeMetadataResponseOutput) ToRuntimeMetadataResponseOutputWithContext(ctx context.Context) RuntimeMetadataResponseOutput {
	return o
}

// The parameters for the template.
func (o RuntimeMetadataResponseOutput) Parameters() ParameterMetadataResponseArrayOutput {
	return o.ApplyT(func(v RuntimeMetadataResponse) []ParameterMetadataResponse { return v.Parameters }).(ParameterMetadataResponseArrayOutput)
}

// SDK Info for the template.
func (o RuntimeMetadataResponseOutput) SdkInfo() SDKInfoResponseOutput {
	return o.ApplyT(func(v RuntimeMetadataResponse) SDKInfoResponse { return v.SdkInfo }).(SDKInfoResponseOutput)
}

// Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.
type RuntimeUpdatableParams struct {
	// The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.
	MaxNumWorkers *int `pulumi:"maxNumWorkers"`
	// The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.
	MinNumWorkers *int `pulumi:"minNumWorkers"`
	// Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.
	WorkerUtilizationHint *float64 `pulumi:"workerUtilizationHint"`
}

// RuntimeUpdatableParamsInput is an input type that accepts RuntimeUpdatableParamsArgs and RuntimeUpdatableParamsOutput values.
// You can construct a concrete instance of `RuntimeUpdatableParamsInput` via:
//
//	RuntimeUpdatableParamsArgs{...}
type RuntimeUpdatableParamsInput interface {
	pulumi.Input

	ToRuntimeUpdatableParamsOutput() RuntimeUpdatableParamsOutput
	ToRuntimeUpdatableParamsOutputWithContext(context.Context) RuntimeUpdatableParamsOutput
}

// Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.
type RuntimeUpdatableParamsArgs struct {
	// The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.
	MaxNumWorkers pulumi.IntPtrInput `pulumi:"maxNumWorkers"`
	// The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.
	MinNumWorkers pulumi.IntPtrInput `pulumi:"minNumWorkers"`
	// Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.
	WorkerUtilizationHint pulumi.Float64PtrInput `pulumi:"workerUtilizationHint"`
}

func (RuntimeUpdatableParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeUpdatableParams)(nil)).Elem()
}

func (i RuntimeUpdatableParamsArgs) ToRuntimeUpdatableParamsOutput() RuntimeUpdatableParamsOutput {
	return i.ToRuntimeUpdatableParamsOutputWithContext(context.Background())
}

func (i RuntimeUpdatableParamsArgs) ToRuntimeUpdatableParamsOutputWithContext(ctx context.Context) RuntimeUpdatableParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeUpdatableParamsOutput)
}

func (i RuntimeUpdatableParamsArgs) ToRuntimeUpdatableParamsPtrOutput() RuntimeUpdatableParamsPtrOutput {
	return i.ToRuntimeUpdatableParamsPtrOutputWithContext(context.Background())
}

func (i RuntimeUpdatableParamsArgs) ToRuntimeUpdatableParamsPtrOutputWithContext(ctx context.Context) RuntimeUpdatableParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeUpdatableParamsOutput).ToRuntimeUpdatableParamsPtrOutputWithContext(ctx)
}

// RuntimeUpdatableParamsPtrInput is an input type that accepts RuntimeUpdatableParamsArgs, RuntimeUpdatableParamsPtr and RuntimeUpdatableParamsPtrOutput values.
// You can construct a concrete instance of `RuntimeUpdatableParamsPtrInput` via:
//
//	        RuntimeUpdatableParamsArgs{...}
//
//	or:
//
//	        nil
type RuntimeUpdatableParamsPtrInput interface {
	pulumi.Input

	ToRuntimeUpdatableParamsPtrOutput() RuntimeUpdatableParamsPtrOutput
	ToRuntimeUpdatableParamsPtrOutputWithContext(context.Context) RuntimeUpdatableParamsPtrOutput
}

type runtimeUpdatableParamsPtrType RuntimeUpdatableParamsArgs

func RuntimeUpdatableParamsPtr(v *RuntimeUpdatableParamsArgs) RuntimeUpdatableParamsPtrInput {
	return (*runtimeUpdatableParamsPtrType)(v)
}

func (*runtimeUpdatableParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeUpdatableParams)(nil)).Elem()
}

func (i *runtimeUpdatableParamsPtrType) ToRuntimeUpdatableParamsPtrOutput() RuntimeUpdatableParamsPtrOutput {
	return i.ToRuntimeUpdatableParamsPtrOutputWithContext(context.Background())
}

func (i *runtimeUpdatableParamsPtrType) ToRuntimeUpdatableParamsPtrOutputWithContext(ctx context.Context) RuntimeUpdatableParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuntimeUpdatableParamsPtrOutput)
}

// Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.
type RuntimeUpdatableParamsOutput struct{ *pulumi.OutputState }

func (RuntimeUpdatableParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeUpdatableParams)(nil)).Elem()
}

func (o RuntimeUpdatableParamsOutput) ToRuntimeUpdatableParamsOutput() RuntimeUpdatableParamsOutput {
	return o
}

func (o RuntimeUpdatableParamsOutput) ToRuntimeUpdatableParamsOutputWithContext(ctx context.Context) RuntimeUpdatableParamsOutput {
	return o
}

func (o RuntimeUpdatableParamsOutput) ToRuntimeUpdatableParamsPtrOutput() RuntimeUpdatableParamsPtrOutput {
	return o.ToRuntimeUpdatableParamsPtrOutputWithContext(context.Background())
}

func (o RuntimeUpdatableParamsOutput) ToRuntimeUpdatableParamsPtrOutputWithContext(ctx context.Context) RuntimeUpdatableParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuntimeUpdatableParams) *RuntimeUpdatableParams {
		return &v
	}).(RuntimeUpdatableParamsPtrOutput)
}

// The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.
func (o RuntimeUpdatableParamsOutput) MaxNumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuntimeUpdatableParams) *int { return v.MaxNumWorkers }).(pulumi.IntPtrOutput)
}

// The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.
func (o RuntimeUpdatableParamsOutput) MinNumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuntimeUpdatableParams) *int { return v.MinNumWorkers }).(pulumi.IntPtrOutput)
}

// Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.
func (o RuntimeUpdatableParamsOutput) WorkerUtilizationHint() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v RuntimeUpdatableParams) *float64 { return v.WorkerUtilizationHint }).(pulumi.Float64PtrOutput)
}

type RuntimeUpdatableParamsPtrOutput struct{ *pulumi.OutputState }

func (RuntimeUpdatableParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuntimeUpdatableParams)(nil)).Elem()
}

func (o RuntimeUpdatableParamsPtrOutput) ToRuntimeUpdatableParamsPtrOutput() RuntimeUpdatableParamsPtrOutput {
	return o
}

func (o RuntimeUpdatableParamsPtrOutput) ToRuntimeUpdatableParamsPtrOutputWithContext(ctx context.Context) RuntimeUpdatableParamsPtrOutput {
	return o
}

func (o RuntimeUpdatableParamsPtrOutput) Elem() RuntimeUpdatableParamsOutput {
	return o.ApplyT(func(v *RuntimeUpdatableParams) RuntimeUpdatableParams {
		if v != nil {
			return *v
		}
		var ret RuntimeUpdatableParams
		return ret
	}).(RuntimeUpdatableParamsOutput)
}

// The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.
func (o RuntimeUpdatableParamsPtrOutput) MaxNumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuntimeUpdatableParams) *int {
		if v == nil {
			return nil
		}
		return v.MaxNumWorkers
	}).(pulumi.IntPtrOutput)
}

// The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.
func (o RuntimeUpdatableParamsPtrOutput) MinNumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RuntimeUpdatableParams) *int {
		if v == nil {
			return nil
		}
		return v.MinNumWorkers
	}).(pulumi.IntPtrOutput)
}

// Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.
func (o RuntimeUpdatableParamsPtrOutput) WorkerUtilizationHint() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *RuntimeUpdatableParams) *float64 {
		if v == nil {
			return nil
		}
		return v.WorkerUtilizationHint
	}).(pulumi.Float64PtrOutput)
}

// Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.
type RuntimeUpdatableParamsResponse struct {
	// The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.
	MaxNumWorkers int `pulumi:"maxNumWorkers"`
	// The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.
	MinNumWorkers int `pulumi:"minNumWorkers"`
	// Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.
	WorkerUtilizationHint float64 `pulumi:"workerUtilizationHint"`
}

// Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.
type RuntimeUpdatableParamsResponseOutput struct{ *pulumi.OutputState }

func (RuntimeUpdatableParamsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuntimeUpdatableParamsResponse)(nil)).Elem()
}

func (o RuntimeUpdatableParamsResponseOutput) ToRuntimeUpdatableParamsResponseOutput() RuntimeUpdatableParamsResponseOutput {
	return o
}

func (o RuntimeUpdatableParamsResponseOutput) ToRuntimeUpdatableParamsResponseOutputWithContext(ctx context.Context) RuntimeUpdatableParamsResponseOutput {
	return o
}

// The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.
func (o RuntimeUpdatableParamsResponseOutput) MaxNumWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v RuntimeUpdatableParamsResponse) int { return v.MaxNumWorkers }).(pulumi.IntOutput)
}

// The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.
func (o RuntimeUpdatableParamsResponseOutput) MinNumWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v RuntimeUpdatableParamsResponse) int { return v.MinNumWorkers }).(pulumi.IntOutput)
}

// Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.
func (o RuntimeUpdatableParamsResponseOutput) WorkerUtilizationHint() pulumi.Float64Output {
	return o.ApplyT(func(v RuntimeUpdatableParamsResponse) float64 { return v.WorkerUtilizationHint }).(pulumi.Float64Output)
}

// SDK Information.
type SDKInfoResponse struct {
	// The SDK Language.
	Language string `pulumi:"language"`
	// Optional. The SDK version.
	Version string `pulumi:"version"`
}

// SDK Information.
type SDKInfoResponseOutput struct{ *pulumi.OutputState }

func (SDKInfoResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SDKInfoResponse)(nil)).Elem()
}

func (o SDKInfoResponseOutput) ToSDKInfoResponseOutput() SDKInfoResponseOutput {
	return o
}

func (o SDKInfoResponseOutput) ToSDKInfoResponseOutputWithContext(ctx context.Context) SDKInfoResponseOutput {
	return o
}

// The SDK Language.
func (o SDKInfoResponseOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v SDKInfoResponse) string { return v.Language }).(pulumi.StringOutput)
}

// Optional. The SDK version.
func (o SDKInfoResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SDKInfoResponse) string { return v.Version }).(pulumi.StringOutput)
}

// A bug found in the Dataflow SDK.
type SdkBugResponse struct {
	// How severe the SDK bug is.
	Severity string `pulumi:"severity"`
	// Describes the impact of this SDK bug.
	Type string `pulumi:"type"`
	// Link to more information on the bug.
	Uri string `pulumi:"uri"`
}

// A bug found in the Dataflow SDK.
type SdkBugResponseOutput struct{ *pulumi.OutputState }

func (SdkBugResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SdkBugResponse)(nil)).Elem()
}

func (o SdkBugResponseOutput) ToSdkBugResponseOutput() SdkBugResponseOutput {
	return o
}

func (o SdkBugResponseOutput) ToSdkBugResponseOutputWithContext(ctx context.Context) SdkBugResponseOutput {
	return o
}

// How severe the SDK bug is.
func (o SdkBugResponseOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v SdkBugResponse) string { return v.Severity }).(pulumi.StringOutput)
}

// Describes the impact of this SDK bug.
func (o SdkBugResponseOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SdkBugResponse) string { return v.Type }).(pulumi.StringOutput)
}

// Link to more information on the bug.
func (o SdkBugResponseOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v SdkBugResponse) string { return v.Uri }).(pulumi.StringOutput)
}

type SdkBugResponseArrayOutput struct{ *pulumi.OutputState }

func (SdkBugResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SdkBugResponse)(nil)).Elem()
}

func (o SdkBugResponseArrayOutput) ToSdkBugResponseArrayOutput() SdkBugResponseArrayOutput {
	return o
}

func (o SdkBugResponseArrayOutput) ToSdkBugResponseArrayOutputWithContext(ctx context.Context) SdkBugResponseArrayOutput {
	return o
}

func (o SdkBugResponseArrayOutput) Index(i pulumi.IntInput) SdkBugResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SdkBugResponse {
		return vs[0].([]SdkBugResponse)[vs[1].(int)]
	}).(SdkBugResponseOutput)
}

// Defines an SDK harness container for executing Dataflow pipelines.
type SdkHarnessContainerImage struct {
	// The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
	Capabilities []string `pulumi:"capabilities"`
	// A docker container image that resides in Google Container Registry.
	ContainerImage *string `pulumi:"containerImage"`
	// Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
	EnvironmentId *string `pulumi:"environmentId"`
	// If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
	UseSingleCorePerContainer *bool `pulumi:"useSingleCorePerContainer"`
}

// SdkHarnessContainerImageInput is an input type that accepts SdkHarnessContainerImageArgs and SdkHarnessContainerImageOutput values.
// You can construct a concrete instance of `SdkHarnessContainerImageInput` via:
//
//	SdkHarnessContainerImageArgs{...}
type SdkHarnessContainerImageInput interface {
	pulumi.Input

	ToSdkHarnessContainerImageOutput() SdkHarnessContainerImageOutput
	ToSdkHarnessContainerImageOutputWithContext(context.Context) SdkHarnessContainerImageOutput
}

// Defines an SDK harness container for executing Dataflow pipelines.
type SdkHarnessContainerImageArgs struct {
	// The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
	Capabilities pulumi.StringArrayInput `pulumi:"capabilities"`
	// A docker container image that resides in Google Container Registry.
	ContainerImage pulumi.StringPtrInput `pulumi:"containerImage"`
	// Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
	EnvironmentId pulumi.StringPtrInput `pulumi:"environmentId"`
	// If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
	UseSingleCorePerContainer pulumi.BoolPtrInput `pulumi:"useSingleCorePerContainer"`
}

func (SdkHarnessContainerImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SdkHarnessContainerImage)(nil)).Elem()
}

func (i SdkHarnessContainerImageArgs) ToSdkHarnessContainerImageOutput() SdkHarnessContainerImageOutput {
	return i.ToSdkHarnessContainerImageOutputWithContext(context.Background())
}

func (i SdkHarnessContainerImageArgs) ToSdkHarnessContainerImageOutputWithContext(ctx context.Context) SdkHarnessContainerImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdkHarnessContainerImageOutput)
}

// SdkHarnessContainerImageArrayInput is an input type that accepts SdkHarnessContainerImageArray and SdkHarnessContainerImageArrayOutput values.
// You can construct a concrete instance of `SdkHarnessContainerImageArrayInput` via:
//
//	SdkHarnessContainerImageArray{ SdkHarnessContainerImageArgs{...} }
type SdkHarnessContainerImageArrayInput interface {
	pulumi.Input

	ToSdkHarnessContainerImageArrayOutput() SdkHarnessContainerImageArrayOutput
	ToSdkHarnessContainerImageArrayOutputWithContext(context.Context) SdkHarnessContainerImageArrayOutput
}

type SdkHarnessContainerImageArray []SdkHarnessContainerImageInput

func (SdkHarnessContainerImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SdkHarnessContainerImage)(nil)).Elem()
}

func (i SdkHarnessContainerImageArray) ToSdkHarnessContainerImageArrayOutput() SdkHarnessContainerImageArrayOutput {
	return i.ToSdkHarnessContainerImageArrayOutputWithContext(context.Background())
}

func (i SdkHarnessContainerImageArray) ToSdkHarnessContainerImageArrayOutputWithContext(ctx context.Context) SdkHarnessContainerImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdkHarnessContainerImageArrayOutput)
}

// Defines an SDK harness container for executing Dataflow pipelines.
type SdkHarnessContainerImageOutput struct{ *pulumi.OutputState }

func (SdkHarnessContainerImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SdkHarnessContainerImage)(nil)).Elem()
}

func (o SdkHarnessContainerImageOutput) ToSdkHarnessContainerImageOutput() SdkHarnessContainerImageOutput {
	return o
}

func (o SdkHarnessContainerImageOutput) ToSdkHarnessContainerImageOutputWithContext(ctx context.Context) SdkHarnessContainerImageOutput {
	return o
}

// The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
func (o SdkHarnessContainerImageOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SdkHarnessContainerImage) []string { return v.Capabilities }).(pulumi.StringArrayOutput)
}

// A docker container image that resides in Google Container Registry.
func (o SdkHarnessContainerImageOutput) ContainerImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SdkHarnessContainerImage) *string { return v.ContainerImage }).(pulumi.StringPtrOutput)
}

// Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
func (o SdkHarnessContainerImageOutput) EnvironmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SdkHarnessContainerImage) *string { return v.EnvironmentId }).(pulumi.StringPtrOutput)
}

// If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
func (o SdkHarnessContainerImageOutput) UseSingleCorePerContainer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SdkHarnessContainerImage) *bool { return v.UseSingleCorePerContainer }).(pulumi.BoolPtrOutput)
}

type SdkHarnessContainerImageArrayOutput struct{ *pulumi.OutputState }

func (SdkHarnessContainerImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SdkHarnessContainerImage)(nil)).Elem()
}

func (o SdkHarnessContainerImageArrayOutput) ToSdkHarnessContainerImageArrayOutput() SdkHarnessContainerImageArrayOutput {
	return o
}

func (o SdkHarnessContainerImageArrayOutput) ToSdkHarnessContainerImageArrayOutputWithContext(ctx context.Context) SdkHarnessContainerImageArrayOutput {
	return o
}

func (o SdkHarnessContainerImageArrayOutput) Index(i pulumi.IntInput) SdkHarnessContainerImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SdkHarnessContainerImage {
		return vs[0].([]SdkHarnessContainerImage)[vs[1].(int)]
	}).(SdkHarnessContainerImageOutput)
}

// Defines an SDK harness container for executing Dataflow pipelines.
type SdkHarnessContainerImageResponse struct {
	// The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
	Capabilities []string `pulumi:"capabilities"`
	// A docker container image that resides in Google Container Registry.
	ContainerImage string `pulumi:"containerImage"`
	// Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
	EnvironmentId string `pulumi:"environmentId"`
	// If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
	UseSingleCorePerContainer bool `pulumi:"useSingleCorePerContainer"`
}

// Defines an SDK harness container for executing Dataflow pipelines.
type SdkHarnessContainerImageResponseOutput struct{ *pulumi.OutputState }

func (SdkHarnessContainerImageResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SdkHarnessContainerImageResponse)(nil)).Elem()
}

func (o SdkHarnessContainerImageResponseOutput) ToSdkHarnessContainerImageResponseOutput() SdkHarnessContainerImageResponseOutput {
	return o
}

func (o SdkHarnessContainerImageResponseOutput) ToSdkHarnessContainerImageResponseOutputWithContext(ctx context.Context) SdkHarnessContainerImageResponseOutput {
	return o
}

// The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)
func (o SdkHarnessContainerImageResponseOutput) Capabilities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SdkHarnessContainerImageResponse) []string { return v.Capabilities }).(pulumi.StringArrayOutput)
}

// A docker container image that resides in Google Container Registry.
func (o SdkHarnessContainerImageResponseOutput) ContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v SdkHarnessContainerImageResponse) string { return v.ContainerImage }).(pulumi.StringOutput)
}

// Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.
func (o SdkHarnessContainerImageResponseOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v SdkHarnessContainerImageResponse) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.
func (o SdkHarnessContainerImageResponseOutput) UseSingleCorePerContainer() pulumi.BoolOutput {
	return o.ApplyT(func(v SdkHarnessContainerImageResponse) bool { return v.UseSingleCorePerContainer }).(pulumi.BoolOutput)
}

type SdkHarnessContainerImageResponseArrayOutput struct{ *pulumi.OutputState }

func (SdkHarnessContainerImageResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SdkHarnessContainerImageResponse)(nil)).Elem()
}

func (o SdkHarnessContainerImageResponseArrayOutput) ToSdkHarnessContainerImageResponseArrayOutput() SdkHarnessContainerImageResponseArrayOutput {
	return o
}

func (o SdkHarnessContainerImageResponseArrayOutput) ToSdkHarnessContainerImageResponseArrayOutputWithContext(ctx context.Context) SdkHarnessContainerImageResponseArrayOutput {
	return o
}

func (o SdkHarnessContainerImageResponseArrayOutput) Index(i pulumi.IntInput) SdkHarnessContainerImageResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SdkHarnessContainerImageResponse {
		return vs[0].([]SdkHarnessContainerImageResponse)[vs[1].(int)]
	}).(SdkHarnessContainerImageResponseOutput)
}

// The version of the SDK used to run the job.
type SdkVersion struct {
	// The support status for this SDK version.
	SdkSupportStatus *SdkVersionSdkSupportStatus `pulumi:"sdkSupportStatus"`
	// The version of the SDK used to run the job.
	Version *string `pulumi:"version"`
	// A readable string describing the version of the SDK.
	VersionDisplayName *string `pulumi:"versionDisplayName"`
}

// SdkVersionInput is an input type that accepts SdkVersionArgs and SdkVersionOutput values.
// You can construct a concrete instance of `SdkVersionInput` via:
//
//	SdkVersionArgs{...}
type SdkVersionInput interface {
	pulumi.Input

	ToSdkVersionOutput() SdkVersionOutput
	ToSdkVersionOutputWithContext(context.Context) SdkVersionOutput
}

// The version of the SDK used to run the job.
type SdkVersionArgs struct {
	// The support status for this SDK version.
	SdkSupportStatus SdkVersionSdkSupportStatusPtrInput `pulumi:"sdkSupportStatus"`
	// The version of the SDK used to run the job.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// A readable string describing the version of the SDK.
	VersionDisplayName pulumi.StringPtrInput `pulumi:"versionDisplayName"`
}

func (SdkVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SdkVersion)(nil)).Elem()
}

func (i SdkVersionArgs) ToSdkVersionOutput() SdkVersionOutput {
	return i.ToSdkVersionOutputWithContext(context.Background())
}

func (i SdkVersionArgs) ToSdkVersionOutputWithContext(ctx context.Context) SdkVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdkVersionOutput)
}

func (i SdkVersionArgs) ToSdkVersionPtrOutput() SdkVersionPtrOutput {
	return i.ToSdkVersionPtrOutputWithContext(context.Background())
}

func (i SdkVersionArgs) ToSdkVersionPtrOutputWithContext(ctx context.Context) SdkVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdkVersionOutput).ToSdkVersionPtrOutputWithContext(ctx)
}

// SdkVersionPtrInput is an input type that accepts SdkVersionArgs, SdkVersionPtr and SdkVersionPtrOutput values.
// You can construct a concrete instance of `SdkVersionPtrInput` via:
//
//	        SdkVersionArgs{...}
//
//	or:
//
//	        nil
type SdkVersionPtrInput interface {
	pulumi.Input

	ToSdkVersionPtrOutput() SdkVersionPtrOutput
	ToSdkVersionPtrOutputWithContext(context.Context) SdkVersionPtrOutput
}

type sdkVersionPtrType SdkVersionArgs

func SdkVersionPtr(v *SdkVersionArgs) SdkVersionPtrInput {
	return (*sdkVersionPtrType)(v)
}

func (*sdkVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SdkVersion)(nil)).Elem()
}

func (i *sdkVersionPtrType) ToSdkVersionPtrOutput() SdkVersionPtrOutput {
	return i.ToSdkVersionPtrOutputWithContext(context.Background())
}

func (i *sdkVersionPtrType) ToSdkVersionPtrOutputWithContext(ctx context.Context) SdkVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SdkVersionPtrOutput)
}

// The version of the SDK used to run the job.
type SdkVersionOutput struct{ *pulumi.OutputState }

func (SdkVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SdkVersion)(nil)).Elem()
}

func (o SdkVersionOutput) ToSdkVersionOutput() SdkVersionOutput {
	return o
}

func (o SdkVersionOutput) ToSdkVersionOutputWithContext(ctx context.Context) SdkVersionOutput {
	return o
}

func (o SdkVersionOutput) ToSdkVersionPtrOutput() SdkVersionPtrOutput {
	return o.ToSdkVersionPtrOutputWithContext(context.Background())
}

func (o SdkVersionOutput) ToSdkVersionPtrOutputWithContext(ctx context.Context) SdkVersionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SdkVersion) *SdkVersion {
		return &v
	}).(SdkVersionPtrOutput)
}

// The support status for this SDK version.
func (o SdkVersionOutput) SdkSupportStatus() SdkVersionSdkSupportStatusPtrOutput {
	return o.ApplyT(func(v SdkVersion) *SdkVersionSdkSupportStatus { return v.SdkSupportStatus }).(SdkVersionSdkSupportStatusPtrOutput)
}

// The version of the SDK used to run the job.
func (o SdkVersionOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SdkVersion) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// A readable string describing the version of the SDK.
func (o SdkVersionOutput) VersionDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SdkVersion) *string { return v.VersionDisplayName }).(pulumi.StringPtrOutput)
}

type SdkVersionPtrOutput struct{ *pulumi.OutputState }

func (SdkVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SdkVersion)(nil)).Elem()
}

func (o SdkVersionPtrOutput) ToSdkVersionPtrOutput() SdkVersionPtrOutput {
	return o
}

func (o SdkVersionPtrOutput) ToSdkVersionPtrOutputWithContext(ctx context.Context) SdkVersionPtrOutput {
	return o
}

func (o SdkVersionPtrOutput) Elem() SdkVersionOutput {
	return o.ApplyT(func(v *SdkVersion) SdkVersion {
		if v != nil {
			return *v
		}
		var ret SdkVersion
		return ret
	}).(SdkVersionOutput)
}

// The support status for this SDK version.
func (o SdkVersionPtrOutput) SdkSupportStatus() SdkVersionSdkSupportStatusPtrOutput {
	return o.ApplyT(func(v *SdkVersion) *SdkVersionSdkSupportStatus {
		if v == nil {
			return nil
		}
		return v.SdkSupportStatus
	}).(SdkVersionSdkSupportStatusPtrOutput)
}

// The version of the SDK used to run the job.
func (o SdkVersionPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SdkVersion) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// A readable string describing the version of the SDK.
func (o SdkVersionPtrOutput) VersionDisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SdkVersion) *string {
		if v == nil {
			return nil
		}
		return v.VersionDisplayName
	}).(pulumi.StringPtrOutput)
}

// The version of the SDK used to run the job.
type SdkVersionResponse struct {
	// Known bugs found in this SDK version.
	Bugs []SdkBugResponse `pulumi:"bugs"`
	// The support status for this SDK version.
	SdkSupportStatus string `pulumi:"sdkSupportStatus"`
	// The version of the SDK used to run the job.
	Version string `pulumi:"version"`
	// A readable string describing the version of the SDK.
	VersionDisplayName string `pulumi:"versionDisplayName"`
}

// The version of the SDK used to run the job.
type SdkVersionResponseOutput struct{ *pulumi.OutputState }

func (SdkVersionResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SdkVersionResponse)(nil)).Elem()
}

func (o SdkVersionResponseOutput) ToSdkVersionResponseOutput() SdkVersionResponseOutput {
	return o
}

func (o SdkVersionResponseOutput) ToSdkVersionResponseOutputWithContext(ctx context.Context) SdkVersionResponseOutput {
	return o
}

// Known bugs found in this SDK version.
func (o SdkVersionResponseOutput) Bugs() SdkBugResponseArrayOutput {
	return o.ApplyT(func(v SdkVersionResponse) []SdkBugResponse { return v.Bugs }).(SdkBugResponseArrayOutput)
}

// The support status for this SDK version.
func (o SdkVersionResponseOutput) SdkSupportStatus() pulumi.StringOutput {
	return o.ApplyT(func(v SdkVersionResponse) string { return v.SdkSupportStatus }).(pulumi.StringOutput)
}

// The version of the SDK used to run the job.
func (o SdkVersionResponseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v SdkVersionResponse) string { return v.Version }).(pulumi.StringOutput)
}

// A readable string describing the version of the SDK.
func (o SdkVersionResponseOutput) VersionDisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v SdkVersionResponse) string { return v.VersionDisplayName }).(pulumi.StringOutput)
}

// Metadata for a Spanner connector used by the job.
type SpannerIODetails struct {
	// DatabaseId accessed in the connection.
	DatabaseId *string `pulumi:"databaseId"`
	// InstanceId accessed in the connection.
	InstanceId *string `pulumi:"instanceId"`
	// ProjectId accessed in the connection.
	Project *string `pulumi:"project"`
}

// SpannerIODetailsInput is an input type that accepts SpannerIODetailsArgs and SpannerIODetailsOutput values.
// You can construct a concrete instance of `SpannerIODetailsInput` via:
//
//	SpannerIODetailsArgs{...}
type SpannerIODetailsInput interface {
	pulumi.Input

	ToSpannerIODetailsOutput() SpannerIODetailsOutput
	ToSpannerIODetailsOutputWithContext(context.Context) SpannerIODetailsOutput
}

// Metadata for a Spanner connector used by the job.
type SpannerIODetailsArgs struct {
	// DatabaseId accessed in the connection.
	DatabaseId pulumi.StringPtrInput `pulumi:"databaseId"`
	// InstanceId accessed in the connection.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// ProjectId accessed in the connection.
	Project pulumi.StringPtrInput `pulumi:"project"`
}

func (SpannerIODetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpannerIODetails)(nil)).Elem()
}

func (i SpannerIODetailsArgs) ToSpannerIODetailsOutput() SpannerIODetailsOutput {
	return i.ToSpannerIODetailsOutputWithContext(context.Background())
}

func (i SpannerIODetailsArgs) ToSpannerIODetailsOutputWithContext(ctx context.Context) SpannerIODetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpannerIODetailsOutput)
}

// SpannerIODetailsArrayInput is an input type that accepts SpannerIODetailsArray and SpannerIODetailsArrayOutput values.
// You can construct a concrete instance of `SpannerIODetailsArrayInput` via:
//
//	SpannerIODetailsArray{ SpannerIODetailsArgs{...} }
type SpannerIODetailsArrayInput interface {
	pulumi.Input

	ToSpannerIODetailsArrayOutput() SpannerIODetailsArrayOutput
	ToSpannerIODetailsArrayOutputWithContext(context.Context) SpannerIODetailsArrayOutput
}

type SpannerIODetailsArray []SpannerIODetailsInput

func (SpannerIODetailsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpannerIODetails)(nil)).Elem()
}

func (i SpannerIODetailsArray) ToSpannerIODetailsArrayOutput() SpannerIODetailsArrayOutput {
	return i.ToSpannerIODetailsArrayOutputWithContext(context.Background())
}

func (i SpannerIODetailsArray) ToSpannerIODetailsArrayOutputWithContext(ctx context.Context) SpannerIODetailsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpannerIODetailsArrayOutput)
}

// Metadata for a Spanner connector used by the job.
type SpannerIODetailsOutput struct{ *pulumi.OutputState }

func (SpannerIODetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpannerIODetails)(nil)).Elem()
}

func (o SpannerIODetailsOutput) ToSpannerIODetailsOutput() SpannerIODetailsOutput {
	return o
}

func (o SpannerIODetailsOutput) ToSpannerIODetailsOutputWithContext(ctx context.Context) SpannerIODetailsOutput {
	return o
}

// DatabaseId accessed in the connection.
func (o SpannerIODetailsOutput) DatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpannerIODetails) *string { return v.DatabaseId }).(pulumi.StringPtrOutput)
}

// InstanceId accessed in the connection.
func (o SpannerIODetailsOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpannerIODetails) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// ProjectId accessed in the connection.
func (o SpannerIODetailsOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpannerIODetails) *string { return v.Project }).(pulumi.StringPtrOutput)
}

type SpannerIODetailsArrayOutput struct{ *pulumi.OutputState }

func (SpannerIODetailsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpannerIODetails)(nil)).Elem()
}

func (o SpannerIODetailsArrayOutput) ToSpannerIODetailsArrayOutput() SpannerIODetailsArrayOutput {
	return o
}

func (o SpannerIODetailsArrayOutput) ToSpannerIODetailsArrayOutputWithContext(ctx context.Context) SpannerIODetailsArrayOutput {
	return o
}

func (o SpannerIODetailsArrayOutput) Index(i pulumi.IntInput) SpannerIODetailsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpannerIODetails {
		return vs[0].([]SpannerIODetails)[vs[1].(int)]
	}).(SpannerIODetailsOutput)
}

// Metadata for a Spanner connector used by the job.
type SpannerIODetailsResponse struct {
	// DatabaseId accessed in the connection.
	DatabaseId string `pulumi:"databaseId"`
	// InstanceId accessed in the connection.
	InstanceId string `pulumi:"instanceId"`
	// ProjectId accessed in the connection.
	Project string `pulumi:"project"`
}

// Metadata for a Spanner connector used by the job.
type SpannerIODetailsResponseOutput struct{ *pulumi.OutputState }

func (SpannerIODetailsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpannerIODetailsResponse)(nil)).Elem()
}

func (o SpannerIODetailsResponseOutput) ToSpannerIODetailsResponseOutput() SpannerIODetailsResponseOutput {
	return o
}

func (o SpannerIODetailsResponseOutput) ToSpannerIODetailsResponseOutputWithContext(ctx context.Context) SpannerIODetailsResponseOutput {
	return o
}

// DatabaseId accessed in the connection.
func (o SpannerIODetailsResponseOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v SpannerIODetailsResponse) string { return v.DatabaseId }).(pulumi.StringOutput)
}

// InstanceId accessed in the connection.
func (o SpannerIODetailsResponseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v SpannerIODetailsResponse) string { return v.InstanceId }).(pulumi.StringOutput)
}

// ProjectId accessed in the connection.
func (o SpannerIODetailsResponseOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v SpannerIODetailsResponse) string { return v.Project }).(pulumi.StringOutput)
}

type SpannerIODetailsResponseArrayOutput struct{ *pulumi.OutputState }

func (SpannerIODetailsResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpannerIODetailsResponse)(nil)).Elem()
}

func (o SpannerIODetailsResponseArrayOutput) ToSpannerIODetailsResponseArrayOutput() SpannerIODetailsResponseArrayOutput {
	return o
}

func (o SpannerIODetailsResponseArrayOutput) ToSpannerIODetailsResponseArrayOutputWithContext(ctx context.Context) SpannerIODetailsResponseArrayOutput {
	return o
}

func (o SpannerIODetailsResponseArrayOutput) Index(i pulumi.IntInput) SpannerIODetailsResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpannerIODetailsResponse {
		return vs[0].([]SpannerIODetailsResponse)[vs[1].(int)]
	}).(SpannerIODetailsResponseOutput)
}

// Description of an input or output of an execution stage.
type StageSource struct {
	// Dataflow service generated name for this source.
	Name *string `pulumi:"name"`
	// User name for the original user transform or collection with which this source is most closely associated.
	OriginalTransformOrCollection *string `pulumi:"originalTransformOrCollection"`
	// Size of the source, if measurable.
	SizeBytes *string `pulumi:"sizeBytes"`
	// Human-readable name for this source; may be user or system generated.
	UserName *string `pulumi:"userName"`
}

// StageSourceInput is an input type that accepts StageSourceArgs and StageSourceOutput values.
// You can construct a concrete instance of `StageSourceInput` via:
//
//	StageSourceArgs{...}
type StageSourceInput interface {
	pulumi.Input

	ToStageSourceOutput() StageSourceOutput
	ToStageSourceOutputWithContext(context.Context) StageSourceOutput
}

// Description of an input or output of an execution stage.
type StageSourceArgs struct {
	// Dataflow service generated name for this source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// User name for the original user transform or collection with which this source is most closely associated.
	OriginalTransformOrCollection pulumi.StringPtrInput `pulumi:"originalTransformOrCollection"`
	// Size of the source, if measurable.
	SizeBytes pulumi.StringPtrInput `pulumi:"sizeBytes"`
	// Human-readable name for this source; may be user or system generated.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (StageSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StageSource)(nil)).Elem()
}

func (i StageSourceArgs) ToStageSourceOutput() StageSourceOutput {
	return i.ToStageSourceOutputWithContext(context.Background())
}

func (i StageSourceArgs) ToStageSourceOutputWithContext(ctx context.Context) StageSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageSourceOutput)
}

// StageSourceArrayInput is an input type that accepts StageSourceArray and StageSourceArrayOutput values.
// You can construct a concrete instance of `StageSourceArrayInput` via:
//
//	StageSourceArray{ StageSourceArgs{...} }
type StageSourceArrayInput interface {
	pulumi.Input

	ToStageSourceArrayOutput() StageSourceArrayOutput
	ToStageSourceArrayOutputWithContext(context.Context) StageSourceArrayOutput
}

type StageSourceArray []StageSourceInput

func (StageSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageSource)(nil)).Elem()
}

func (i StageSourceArray) ToStageSourceArrayOutput() StageSourceArrayOutput {
	return i.ToStageSourceArrayOutputWithContext(context.Background())
}

func (i StageSourceArray) ToStageSourceArrayOutputWithContext(ctx context.Context) StageSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StageSourceArrayOutput)
}

// Description of an input or output of an execution stage.
type StageSourceOutput struct{ *pulumi.OutputState }

func (StageSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageSource)(nil)).Elem()
}

func (o StageSourceOutput) ToStageSourceOutput() StageSourceOutput {
	return o
}

func (o StageSourceOutput) ToStageSourceOutputWithContext(ctx context.Context) StageSourceOutput {
	return o
}

// Dataflow service generated name for this source.
func (o StageSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// User name for the original user transform or collection with which this source is most closely associated.
func (o StageSourceOutput) OriginalTransformOrCollection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageSource) *string { return v.OriginalTransformOrCollection }).(pulumi.StringPtrOutput)
}

// Size of the source, if measurable.
func (o StageSourceOutput) SizeBytes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageSource) *string { return v.SizeBytes }).(pulumi.StringPtrOutput)
}

// Human-readable name for this source; may be user or system generated.
func (o StageSourceOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StageSource) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

type StageSourceArrayOutput struct{ *pulumi.OutputState }

func (StageSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageSource)(nil)).Elem()
}

func (o StageSourceArrayOutput) ToStageSourceArrayOutput() StageSourceArrayOutput {
	return o
}

func (o StageSourceArrayOutput) ToStageSourceArrayOutputWithContext(ctx context.Context) StageSourceArrayOutput {
	return o
}

func (o StageSourceArrayOutput) Index(i pulumi.IntInput) StageSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StageSource {
		return vs[0].([]StageSource)[vs[1].(int)]
	}).(StageSourceOutput)
}

// Description of an input or output of an execution stage.
type StageSourceResponse struct {
	// Dataflow service generated name for this source.
	Name string `pulumi:"name"`
	// User name for the original user transform or collection with which this source is most closely associated.
	OriginalTransformOrCollection string `pulumi:"originalTransformOrCollection"`
	// Size of the source, if measurable.
	SizeBytes string `pulumi:"sizeBytes"`
	// Human-readable name for this source; may be user or system generated.
	UserName string `pulumi:"userName"`
}

// Description of an input or output of an execution stage.
type StageSourceResponseOutput struct{ *pulumi.OutputState }

func (StageSourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StageSourceResponse)(nil)).Elem()
}

func (o StageSourceResponseOutput) ToStageSourceResponseOutput() StageSourceResponseOutput {
	return o
}

func (o StageSourceResponseOutput) ToStageSourceResponseOutputWithContext(ctx context.Context) StageSourceResponseOutput {
	return o
}

// Dataflow service generated name for this source.
func (o StageSourceResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StageSourceResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User name for the original user transform or collection with which this source is most closely associated.
func (o StageSourceResponseOutput) OriginalTransformOrCollection() pulumi.StringOutput {
	return o.ApplyT(func(v StageSourceResponse) string { return v.OriginalTransformOrCollection }).(pulumi.StringOutput)
}

// Size of the source, if measurable.
func (o StageSourceResponseOutput) SizeBytes() pulumi.StringOutput {
	return o.ApplyT(func(v StageSourceResponse) string { return v.SizeBytes }).(pulumi.StringOutput)
}

// Human-readable name for this source; may be user or system generated.
func (o StageSourceResponseOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v StageSourceResponse) string { return v.UserName }).(pulumi.StringOutput)
}

type StageSourceResponseArrayOutput struct{ *pulumi.OutputState }

func (StageSourceResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StageSourceResponse)(nil)).Elem()
}

func (o StageSourceResponseArrayOutput) ToStageSourceResponseArrayOutput() StageSourceResponseArrayOutput {
	return o
}

func (o StageSourceResponseArrayOutput) ToStageSourceResponseArrayOutputWithContext(ctx context.Context) StageSourceResponseArrayOutput {
	return o
}

func (o StageSourceResponseArrayOutput) Index(i pulumi.IntInput) StageSourceResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StageSourceResponse {
		return vs[0].([]StageSourceResponse)[vs[1].(int)]
	}).(StageSourceResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

// Defines a particular step within a Cloud Dataflow job. A job consists of multiple steps, each of which performs some specific operation as part of the overall job. Data is typically passed from one step to another as part of the job. **Note:** The properties of this object are not stable and might change. Here's an example of a sequence of steps which together implement a Map-Reduce job: * Read a collection of data from some source, parsing the collection's elements. * Validate the elements. * Apply a user-defined function to map each element to some value and extract an element-specific key value. * Group elements with the same key into a single element with that key, transforming a multiply-keyed collection into a uniquely-keyed collection. * Write the elements out to some data sink. Note that the Cloud Dataflow service may be used to run many different types of jobs, not just Map-Reduce.
type Step struct {
	// The kind of step in the Cloud Dataflow job.
	Kind *string `pulumi:"kind"`
	// The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.
	Name *string `pulumi:"name"`
	// Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.
	Properties map[string]interface{} `pulumi:"properties"`
}

// StepInput is an input type that accepts StepArgs and StepOutput values.
// You can construct a concrete instance of `StepInput` via:
//
//	StepArgs{...}
type StepInput interface {
	pulumi.Input

	ToStepOutput() StepOutput
	ToStepOutputWithContext(context.Context) StepOutput
}

// Defines a particular step within a Cloud Dataflow job. A job consists of multiple steps, each of which performs some specific operation as part of the overall job. Data is typically passed from one step to another as part of the job. **Note:** The properties of this object are not stable and might change. Here's an example of a sequence of steps which together implement a Map-Reduce job: * Read a collection of data from some source, parsing the collection's elements. * Validate the elements. * Apply a user-defined function to map each element to some value and extract an element-specific key value. * Group elements with the same key into a single element with that key, transforming a multiply-keyed collection into a uniquely-keyed collection. * Write the elements out to some data sink. Note that the Cloud Dataflow service may be used to run many different types of jobs, not just Map-Reduce.
type StepArgs struct {
	// The kind of step in the Cloud Dataflow job.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.
	Properties pulumi.MapInput `pulumi:"properties"`
}

func (StepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (i StepArgs) ToStepOutput() StepOutput {
	return i.ToStepOutputWithContext(context.Background())
}

func (i StepArgs) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepOutput)
}

// StepArrayInput is an input type that accepts StepArray and StepArrayOutput values.
// You can construct a concrete instance of `StepArrayInput` via:
//
//	StepArray{ StepArgs{...} }
type StepArrayInput interface {
	pulumi.Input

	ToStepArrayOutput() StepArrayOutput
	ToStepArrayOutputWithContext(context.Context) StepArrayOutput
}

type StepArray []StepInput

func (StepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (i StepArray) ToStepArrayOutput() StepArrayOutput {
	return i.ToStepArrayOutputWithContext(context.Background())
}

func (i StepArray) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StepArrayOutput)
}

// Defines a particular step within a Cloud Dataflow job. A job consists of multiple steps, each of which performs some specific operation as part of the overall job. Data is typically passed from one step to another as part of the job. **Note:** The properties of this object are not stable and might change. Here's an example of a sequence of steps which together implement a Map-Reduce job: * Read a collection of data from some source, parsing the collection's elements. * Validate the elements. * Apply a user-defined function to map each element to some value and extract an element-specific key value. * Group elements with the same key into a single element with that key, transforming a multiply-keyed collection into a uniquely-keyed collection. * Write the elements out to some data sink. Note that the Cloud Dataflow service may be used to run many different types of jobs, not just Map-Reduce.
type StepOutput struct{ *pulumi.OutputState }

func (StepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Step)(nil)).Elem()
}

func (o StepOutput) ToStepOutput() StepOutput {
	return o
}

func (o StepOutput) ToStepOutputWithContext(ctx context.Context) StepOutput {
	return o
}

// The kind of step in the Cloud Dataflow job.
func (o StepOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Step) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.
func (o StepOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Step) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.
func (o StepOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v Step) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type StepArrayOutput struct{ *pulumi.OutputState }

func (StepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Step)(nil)).Elem()
}

func (o StepArrayOutput) ToStepArrayOutput() StepArrayOutput {
	return o
}

func (o StepArrayOutput) ToStepArrayOutputWithContext(ctx context.Context) StepArrayOutput {
	return o
}

func (o StepArrayOutput) Index(i pulumi.IntInput) StepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Step {
		return vs[0].([]Step)[vs[1].(int)]
	}).(StepOutput)
}

// Defines a particular step within a Cloud Dataflow job. A job consists of multiple steps, each of which performs some specific operation as part of the overall job. Data is typically passed from one step to another as part of the job. **Note:** The properties of this object are not stable and might change. Here's an example of a sequence of steps which together implement a Map-Reduce job: * Read a collection of data from some source, parsing the collection's elements. * Validate the elements. * Apply a user-defined function to map each element to some value and extract an element-specific key value. * Group elements with the same key into a single element with that key, transforming a multiply-keyed collection into a uniquely-keyed collection. * Write the elements out to some data sink. Note that the Cloud Dataflow service may be used to run many different types of jobs, not just Map-Reduce.
type StepResponse struct {
	// The kind of step in the Cloud Dataflow job.
	Kind string `pulumi:"kind"`
	// The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.
	Name string `pulumi:"name"`
	// Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.
	Properties map[string]interface{} `pulumi:"properties"`
}

// Defines a particular step within a Cloud Dataflow job. A job consists of multiple steps, each of which performs some specific operation as part of the overall job. Data is typically passed from one step to another as part of the job. **Note:** The properties of this object are not stable and might change. Here's an example of a sequence of steps which together implement a Map-Reduce job: * Read a collection of data from some source, parsing the collection's elements. * Validate the elements. * Apply a user-defined function to map each element to some value and extract an element-specific key value. * Group elements with the same key into a single element with that key, transforming a multiply-keyed collection into a uniquely-keyed collection. * Write the elements out to some data sink. Note that the Cloud Dataflow service may be used to run many different types of jobs, not just Map-Reduce.
type StepResponseOutput struct{ *pulumi.OutputState }

func (StepResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StepResponse)(nil)).Elem()
}

func (o StepResponseOutput) ToStepResponseOutput() StepResponseOutput {
	return o
}

func (o StepResponseOutput) ToStepResponseOutputWithContext(ctx context.Context) StepResponseOutput {
	return o
}

// The kind of step in the Cloud Dataflow job.
func (o StepResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.
func (o StepResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StepResponse) string { return v.Name }).(pulumi.StringOutput)
}

// Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.
func (o StepResponseOutput) Properties() pulumi.MapOutput {
	return o.ApplyT(func(v StepResponse) map[string]interface{} { return v.Properties }).(pulumi.MapOutput)
}

type StepResponseArrayOutput struct{ *pulumi.OutputState }

func (StepResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StepResponse)(nil)).Elem()
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutput() StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) ToStepResponseArrayOutputWithContext(ctx context.Context) StepResponseArrayOutput {
	return o
}

func (o StepResponseArrayOutput) Index(i pulumi.IntInput) StepResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StepResponse {
		return vs[0].([]StepResponse)[vs[1].(int)]
	}).(StepResponseOutput)
}

// Taskrunner configuration settings.
type TaskRunnerSettings struct {
	// Whether to also send taskrunner log info to stderr.
	Alsologtostderr *bool `pulumi:"alsologtostderr"`
	// The location on the worker for task-specific subdirectories.
	BaseTaskDir *string `pulumi:"baseTaskDir"`
	// The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
	BaseUrl *string `pulumi:"baseUrl"`
	// The file to store preprocessing commands in.
	CommandlinesFileName *string `pulumi:"commandlinesFileName"`
	// Whether to continue taskrunner if an exception is hit.
	ContinueOnException *bool `pulumi:"continueOnException"`
	// The API version of endpoint, e.g. "v1b3"
	DataflowApiVersion *string `pulumi:"dataflowApiVersion"`
	// The command to launch the worker harness.
	HarnessCommand *string `pulumi:"harnessCommand"`
	// The suggested backend language.
	LanguageHint *string `pulumi:"languageHint"`
	// The directory on the VM to store logs.
	LogDir *string `pulumi:"logDir"`
	// Whether to send taskrunner log info to Google Compute Engine VM serial console.
	LogToSerialconsole *bool `pulumi:"logToSerialconsole"`
	// Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	LogUploadLocation *string `pulumi:"logUploadLocation"`
	// The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The settings to pass to the parallel worker harness.
	ParallelWorkerSettings *WorkerSettings `pulumi:"parallelWorkerSettings"`
	// The streaming worker main class name.
	StreamingWorkerMainClass *string `pulumi:"streamingWorkerMainClass"`
	// The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
	TaskGroup *string `pulumi:"taskGroup"`
	// The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
	TaskUser *string `pulumi:"taskUser"`
	// The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix *string `pulumi:"tempStoragePrefix"`
	// The ID string of the VM.
	VmId *string `pulumi:"vmId"`
	// The file to store the workflow in.
	WorkflowFileName *string `pulumi:"workflowFileName"`
}

// TaskRunnerSettingsInput is an input type that accepts TaskRunnerSettingsArgs and TaskRunnerSettingsOutput values.
// You can construct a concrete instance of `TaskRunnerSettingsInput` via:
//
//	TaskRunnerSettingsArgs{...}
type TaskRunnerSettingsInput interface {
	pulumi.Input

	ToTaskRunnerSettingsOutput() TaskRunnerSettingsOutput
	ToTaskRunnerSettingsOutputWithContext(context.Context) TaskRunnerSettingsOutput
}

// Taskrunner configuration settings.
type TaskRunnerSettingsArgs struct {
	// Whether to also send taskrunner log info to stderr.
	Alsologtostderr pulumi.BoolPtrInput `pulumi:"alsologtostderr"`
	// The location on the worker for task-specific subdirectories.
	BaseTaskDir pulumi.StringPtrInput `pulumi:"baseTaskDir"`
	// The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// The file to store preprocessing commands in.
	CommandlinesFileName pulumi.StringPtrInput `pulumi:"commandlinesFileName"`
	// Whether to continue taskrunner if an exception is hit.
	ContinueOnException pulumi.BoolPtrInput `pulumi:"continueOnException"`
	// The API version of endpoint, e.g. "v1b3"
	DataflowApiVersion pulumi.StringPtrInput `pulumi:"dataflowApiVersion"`
	// The command to launch the worker harness.
	HarnessCommand pulumi.StringPtrInput `pulumi:"harnessCommand"`
	// The suggested backend language.
	LanguageHint pulumi.StringPtrInput `pulumi:"languageHint"`
	// The directory on the VM to store logs.
	LogDir pulumi.StringPtrInput `pulumi:"logDir"`
	// Whether to send taskrunner log info to Google Compute Engine VM serial console.
	LogToSerialconsole pulumi.BoolPtrInput `pulumi:"logToSerialconsole"`
	// Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	LogUploadLocation pulumi.StringPtrInput `pulumi:"logUploadLocation"`
	// The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
	OauthScopes pulumi.StringArrayInput `pulumi:"oauthScopes"`
	// The settings to pass to the parallel worker harness.
	ParallelWorkerSettings WorkerSettingsPtrInput `pulumi:"parallelWorkerSettings"`
	// The streaming worker main class name.
	StreamingWorkerMainClass pulumi.StringPtrInput `pulumi:"streamingWorkerMainClass"`
	// The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
	TaskGroup pulumi.StringPtrInput `pulumi:"taskGroup"`
	// The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
	TaskUser pulumi.StringPtrInput `pulumi:"taskUser"`
	// The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix pulumi.StringPtrInput `pulumi:"tempStoragePrefix"`
	// The ID string of the VM.
	VmId pulumi.StringPtrInput `pulumi:"vmId"`
	// The file to store the workflow in.
	WorkflowFileName pulumi.StringPtrInput `pulumi:"workflowFileName"`
}

func (TaskRunnerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRunnerSettings)(nil)).Elem()
}

func (i TaskRunnerSettingsArgs) ToTaskRunnerSettingsOutput() TaskRunnerSettingsOutput {
	return i.ToTaskRunnerSettingsOutputWithContext(context.Background())
}

func (i TaskRunnerSettingsArgs) ToTaskRunnerSettingsOutputWithContext(ctx context.Context) TaskRunnerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskRunnerSettingsOutput)
}

func (i TaskRunnerSettingsArgs) ToTaskRunnerSettingsPtrOutput() TaskRunnerSettingsPtrOutput {
	return i.ToTaskRunnerSettingsPtrOutputWithContext(context.Background())
}

func (i TaskRunnerSettingsArgs) ToTaskRunnerSettingsPtrOutputWithContext(ctx context.Context) TaskRunnerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskRunnerSettingsOutput).ToTaskRunnerSettingsPtrOutputWithContext(ctx)
}

// TaskRunnerSettingsPtrInput is an input type that accepts TaskRunnerSettingsArgs, TaskRunnerSettingsPtr and TaskRunnerSettingsPtrOutput values.
// You can construct a concrete instance of `TaskRunnerSettingsPtrInput` via:
//
//	        TaskRunnerSettingsArgs{...}
//
//	or:
//
//	        nil
type TaskRunnerSettingsPtrInput interface {
	pulumi.Input

	ToTaskRunnerSettingsPtrOutput() TaskRunnerSettingsPtrOutput
	ToTaskRunnerSettingsPtrOutputWithContext(context.Context) TaskRunnerSettingsPtrOutput
}

type taskRunnerSettingsPtrType TaskRunnerSettingsArgs

func TaskRunnerSettingsPtr(v *TaskRunnerSettingsArgs) TaskRunnerSettingsPtrInput {
	return (*taskRunnerSettingsPtrType)(v)
}

func (*taskRunnerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskRunnerSettings)(nil)).Elem()
}

func (i *taskRunnerSettingsPtrType) ToTaskRunnerSettingsPtrOutput() TaskRunnerSettingsPtrOutput {
	return i.ToTaskRunnerSettingsPtrOutputWithContext(context.Background())
}

func (i *taskRunnerSettingsPtrType) ToTaskRunnerSettingsPtrOutputWithContext(ctx context.Context) TaskRunnerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TaskRunnerSettingsPtrOutput)
}

// Taskrunner configuration settings.
type TaskRunnerSettingsOutput struct{ *pulumi.OutputState }

func (TaskRunnerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRunnerSettings)(nil)).Elem()
}

func (o TaskRunnerSettingsOutput) ToTaskRunnerSettingsOutput() TaskRunnerSettingsOutput {
	return o
}

func (o TaskRunnerSettingsOutput) ToTaskRunnerSettingsOutputWithContext(ctx context.Context) TaskRunnerSettingsOutput {
	return o
}

func (o TaskRunnerSettingsOutput) ToTaskRunnerSettingsPtrOutput() TaskRunnerSettingsPtrOutput {
	return o.ToTaskRunnerSettingsPtrOutputWithContext(context.Background())
}

func (o TaskRunnerSettingsOutput) ToTaskRunnerSettingsPtrOutputWithContext(ctx context.Context) TaskRunnerSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TaskRunnerSettings) *TaskRunnerSettings {
		return &v
	}).(TaskRunnerSettingsPtrOutput)
}

// Whether to also send taskrunner log info to stderr.
func (o TaskRunnerSettingsOutput) Alsologtostderr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *bool { return v.Alsologtostderr }).(pulumi.BoolPtrOutput)
}

// The location on the worker for task-specific subdirectories.
func (o TaskRunnerSettingsOutput) BaseTaskDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.BaseTaskDir }).(pulumi.StringPtrOutput)
}

// The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
func (o TaskRunnerSettingsOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// The file to store preprocessing commands in.
func (o TaskRunnerSettingsOutput) CommandlinesFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.CommandlinesFileName }).(pulumi.StringPtrOutput)
}

// Whether to continue taskrunner if an exception is hit.
func (o TaskRunnerSettingsOutput) ContinueOnException() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *bool { return v.ContinueOnException }).(pulumi.BoolPtrOutput)
}

// The API version of endpoint, e.g. "v1b3"
func (o TaskRunnerSettingsOutput) DataflowApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.DataflowApiVersion }).(pulumi.StringPtrOutput)
}

// The command to launch the worker harness.
func (o TaskRunnerSettingsOutput) HarnessCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.HarnessCommand }).(pulumi.StringPtrOutput)
}

// The suggested backend language.
func (o TaskRunnerSettingsOutput) LanguageHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.LanguageHint }).(pulumi.StringPtrOutput)
}

// The directory on the VM to store logs.
func (o TaskRunnerSettingsOutput) LogDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.LogDir }).(pulumi.StringPtrOutput)
}

// Whether to send taskrunner log info to Google Compute Engine VM serial console.
func (o TaskRunnerSettingsOutput) LogToSerialconsole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *bool { return v.LogToSerialconsole }).(pulumi.BoolPtrOutput)
}

// Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o TaskRunnerSettingsOutput) LogUploadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.LogUploadLocation }).(pulumi.StringPtrOutput)
}

// The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
func (o TaskRunnerSettingsOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskRunnerSettings) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The settings to pass to the parallel worker harness.
func (o TaskRunnerSettingsOutput) ParallelWorkerSettings() WorkerSettingsPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *WorkerSettings { return v.ParallelWorkerSettings }).(WorkerSettingsPtrOutput)
}

// The streaming worker main class name.
func (o TaskRunnerSettingsOutput) StreamingWorkerMainClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.StreamingWorkerMainClass }).(pulumi.StringPtrOutput)
}

// The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
func (o TaskRunnerSettingsOutput) TaskGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.TaskGroup }).(pulumi.StringPtrOutput)
}

// The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
func (o TaskRunnerSettingsOutput) TaskUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.TaskUser }).(pulumi.StringPtrOutput)
}

// The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o TaskRunnerSettingsOutput) TempStoragePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.TempStoragePrefix }).(pulumi.StringPtrOutput)
}

// The ID string of the VM.
func (o TaskRunnerSettingsOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.VmId }).(pulumi.StringPtrOutput)
}

// The file to store the workflow in.
func (o TaskRunnerSettingsOutput) WorkflowFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TaskRunnerSettings) *string { return v.WorkflowFileName }).(pulumi.StringPtrOutput)
}

type TaskRunnerSettingsPtrOutput struct{ *pulumi.OutputState }

func (TaskRunnerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TaskRunnerSettings)(nil)).Elem()
}

func (o TaskRunnerSettingsPtrOutput) ToTaskRunnerSettingsPtrOutput() TaskRunnerSettingsPtrOutput {
	return o
}

func (o TaskRunnerSettingsPtrOutput) ToTaskRunnerSettingsPtrOutputWithContext(ctx context.Context) TaskRunnerSettingsPtrOutput {
	return o
}

func (o TaskRunnerSettingsPtrOutput) Elem() TaskRunnerSettingsOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) TaskRunnerSettings {
		if v != nil {
			return *v
		}
		var ret TaskRunnerSettings
		return ret
	}).(TaskRunnerSettingsOutput)
}

// Whether to also send taskrunner log info to stderr.
func (o TaskRunnerSettingsPtrOutput) Alsologtostderr() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Alsologtostderr
	}).(pulumi.BoolPtrOutput)
}

// The location on the worker for task-specific subdirectories.
func (o TaskRunnerSettingsPtrOutput) BaseTaskDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.BaseTaskDir
	}).(pulumi.StringPtrOutput)
}

// The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
func (o TaskRunnerSettingsPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// The file to store preprocessing commands in.
func (o TaskRunnerSettingsPtrOutput) CommandlinesFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.CommandlinesFileName
	}).(pulumi.StringPtrOutput)
}

// Whether to continue taskrunner if an exception is hit.
func (o TaskRunnerSettingsPtrOutput) ContinueOnException() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ContinueOnException
	}).(pulumi.BoolPtrOutput)
}

// The API version of endpoint, e.g. "v1b3"
func (o TaskRunnerSettingsPtrOutput) DataflowApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.DataflowApiVersion
	}).(pulumi.StringPtrOutput)
}

// The command to launch the worker harness.
func (o TaskRunnerSettingsPtrOutput) HarnessCommand() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.HarnessCommand
	}).(pulumi.StringPtrOutput)
}

// The suggested backend language.
func (o TaskRunnerSettingsPtrOutput) LanguageHint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.LanguageHint
	}).(pulumi.StringPtrOutput)
}

// The directory on the VM to store logs.
func (o TaskRunnerSettingsPtrOutput) LogDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.LogDir
	}).(pulumi.StringPtrOutput)
}

// Whether to send taskrunner log info to Google Compute Engine VM serial console.
func (o TaskRunnerSettingsPtrOutput) LogToSerialconsole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *bool {
		if v == nil {
			return nil
		}
		return v.LogToSerialconsole
	}).(pulumi.BoolPtrOutput)
}

// Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o TaskRunnerSettingsPtrOutput) LogUploadLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.LogUploadLocation
	}).(pulumi.StringPtrOutput)
}

// The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
func (o TaskRunnerSettingsPtrOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) []string {
		if v == nil {
			return nil
		}
		return v.OauthScopes
	}).(pulumi.StringArrayOutput)
}

// The settings to pass to the parallel worker harness.
func (o TaskRunnerSettingsPtrOutput) ParallelWorkerSettings() WorkerSettingsPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *WorkerSettings {
		if v == nil {
			return nil
		}
		return v.ParallelWorkerSettings
	}).(WorkerSettingsPtrOutput)
}

// The streaming worker main class name.
func (o TaskRunnerSettingsPtrOutput) StreamingWorkerMainClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.StreamingWorkerMainClass
	}).(pulumi.StringPtrOutput)
}

// The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
func (o TaskRunnerSettingsPtrOutput) TaskGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.TaskGroup
	}).(pulumi.StringPtrOutput)
}

// The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
func (o TaskRunnerSettingsPtrOutput) TaskUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.TaskUser
	}).(pulumi.StringPtrOutput)
}

// The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o TaskRunnerSettingsPtrOutput) TempStoragePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.TempStoragePrefix
	}).(pulumi.StringPtrOutput)
}

// The ID string of the VM.
func (o TaskRunnerSettingsPtrOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.VmId
	}).(pulumi.StringPtrOutput)
}

// The file to store the workflow in.
func (o TaskRunnerSettingsPtrOutput) WorkflowFileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TaskRunnerSettings) *string {
		if v == nil {
			return nil
		}
		return v.WorkflowFileName
	}).(pulumi.StringPtrOutput)
}

// Taskrunner configuration settings.
type TaskRunnerSettingsResponse struct {
	// Whether to also send taskrunner log info to stderr.
	Alsologtostderr bool `pulumi:"alsologtostderr"`
	// The location on the worker for task-specific subdirectories.
	BaseTaskDir string `pulumi:"baseTaskDir"`
	// The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
	BaseUrl string `pulumi:"baseUrl"`
	// The file to store preprocessing commands in.
	CommandlinesFileName string `pulumi:"commandlinesFileName"`
	// Whether to continue taskrunner if an exception is hit.
	ContinueOnException bool `pulumi:"continueOnException"`
	// The API version of endpoint, e.g. "v1b3"
	DataflowApiVersion string `pulumi:"dataflowApiVersion"`
	// The command to launch the worker harness.
	HarnessCommand string `pulumi:"harnessCommand"`
	// The suggested backend language.
	LanguageHint string `pulumi:"languageHint"`
	// The directory on the VM to store logs.
	LogDir string `pulumi:"logDir"`
	// Whether to send taskrunner log info to Google Compute Engine VM serial console.
	LogToSerialconsole bool `pulumi:"logToSerialconsole"`
	// Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	LogUploadLocation string `pulumi:"logUploadLocation"`
	// The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
	OauthScopes []string `pulumi:"oauthScopes"`
	// The settings to pass to the parallel worker harness.
	ParallelWorkerSettings WorkerSettingsResponse `pulumi:"parallelWorkerSettings"`
	// The streaming worker main class name.
	StreamingWorkerMainClass string `pulumi:"streamingWorkerMainClass"`
	// The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
	TaskGroup string `pulumi:"taskGroup"`
	// The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
	TaskUser string `pulumi:"taskUser"`
	// The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix string `pulumi:"tempStoragePrefix"`
	// The ID string of the VM.
	VmId string `pulumi:"vmId"`
	// The file to store the workflow in.
	WorkflowFileName string `pulumi:"workflowFileName"`
}

// Taskrunner configuration settings.
type TaskRunnerSettingsResponseOutput struct{ *pulumi.OutputState }

func (TaskRunnerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TaskRunnerSettingsResponse)(nil)).Elem()
}

func (o TaskRunnerSettingsResponseOutput) ToTaskRunnerSettingsResponseOutput() TaskRunnerSettingsResponseOutput {
	return o
}

func (o TaskRunnerSettingsResponseOutput) ToTaskRunnerSettingsResponseOutputWithContext(ctx context.Context) TaskRunnerSettingsResponseOutput {
	return o
}

// Whether to also send taskrunner log info to stderr.
func (o TaskRunnerSettingsResponseOutput) Alsologtostderr() pulumi.BoolOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) bool { return v.Alsologtostderr }).(pulumi.BoolOutput)
}

// The location on the worker for task-specific subdirectories.
func (o TaskRunnerSettingsResponseOutput) BaseTaskDir() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.BaseTaskDir }).(pulumi.StringOutput)
}

// The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
func (o TaskRunnerSettingsResponseOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// The file to store preprocessing commands in.
func (o TaskRunnerSettingsResponseOutput) CommandlinesFileName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.CommandlinesFileName }).(pulumi.StringOutput)
}

// Whether to continue taskrunner if an exception is hit.
func (o TaskRunnerSettingsResponseOutput) ContinueOnException() pulumi.BoolOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) bool { return v.ContinueOnException }).(pulumi.BoolOutput)
}

// The API version of endpoint, e.g. "v1b3"
func (o TaskRunnerSettingsResponseOutput) DataflowApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.DataflowApiVersion }).(pulumi.StringOutput)
}

// The command to launch the worker harness.
func (o TaskRunnerSettingsResponseOutput) HarnessCommand() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.HarnessCommand }).(pulumi.StringOutput)
}

// The suggested backend language.
func (o TaskRunnerSettingsResponseOutput) LanguageHint() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.LanguageHint }).(pulumi.StringOutput)
}

// The directory on the VM to store logs.
func (o TaskRunnerSettingsResponseOutput) LogDir() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.LogDir }).(pulumi.StringOutput)
}

// Whether to send taskrunner log info to Google Compute Engine VM serial console.
func (o TaskRunnerSettingsResponseOutput) LogToSerialconsole() pulumi.BoolOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) bool { return v.LogToSerialconsole }).(pulumi.BoolOutput)
}

// Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o TaskRunnerSettingsResponseOutput) LogUploadLocation() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.LogUploadLocation }).(pulumi.StringOutput)
}

// The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.
func (o TaskRunnerSettingsResponseOutput) OauthScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) []string { return v.OauthScopes }).(pulumi.StringArrayOutput)
}

// The settings to pass to the parallel worker harness.
func (o TaskRunnerSettingsResponseOutput) ParallelWorkerSettings() WorkerSettingsResponseOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) WorkerSettingsResponse { return v.ParallelWorkerSettings }).(WorkerSettingsResponseOutput)
}

// The streaming worker main class name.
func (o TaskRunnerSettingsResponseOutput) StreamingWorkerMainClass() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.StreamingWorkerMainClass }).(pulumi.StringOutput)
}

// The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".
func (o TaskRunnerSettingsResponseOutput) TaskGroup() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.TaskGroup }).(pulumi.StringOutput)
}

// The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".
func (o TaskRunnerSettingsResponseOutput) TaskUser() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.TaskUser }).(pulumi.StringOutput)
}

// The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o TaskRunnerSettingsResponseOutput) TempStoragePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.TempStoragePrefix }).(pulumi.StringOutput)
}

// The ID string of the VM.
func (o TaskRunnerSettingsResponseOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.VmId }).(pulumi.StringOutput)
}

// The file to store the workflow in.
func (o TaskRunnerSettingsResponseOutput) WorkflowFileName() pulumi.StringOutput {
	return o.ApplyT(func(v TaskRunnerSettingsResponse) string { return v.WorkflowFileName }).(pulumi.StringOutput)
}

// Metadata describing a template.
type TemplateMetadataResponse struct {
	// Optional. A description of the template.
	Description string `pulumi:"description"`
	// The name of the template.
	Name string `pulumi:"name"`
	// The parameters for the template.
	Parameters []ParameterMetadataResponse `pulumi:"parameters"`
}

// Metadata describing a template.
type TemplateMetadataResponseOutput struct{ *pulumi.OutputState }

func (TemplateMetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateMetadataResponse)(nil)).Elem()
}

func (o TemplateMetadataResponseOutput) ToTemplateMetadataResponseOutput() TemplateMetadataResponseOutput {
	return o
}

func (o TemplateMetadataResponseOutput) ToTemplateMetadataResponseOutputWithContext(ctx context.Context) TemplateMetadataResponseOutput {
	return o
}

// Optional. A description of the template.
func (o TemplateMetadataResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateMetadataResponse) string { return v.Description }).(pulumi.StringOutput)
}

// The name of the template.
func (o TemplateMetadataResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateMetadataResponse) string { return v.Name }).(pulumi.StringOutput)
}

// The parameters for the template.
func (o TemplateMetadataResponseOutput) Parameters() ParameterMetadataResponseArrayOutput {
	return o.ApplyT(func(v TemplateMetadataResponse) []ParameterMetadataResponse { return v.Parameters }).(ParameterMetadataResponseArrayOutput)
}

// Description of the type, names/ids, and input/outputs for a transform.
type TransformSummary struct {
	// Transform-specific display data.
	DisplayData []DisplayData `pulumi:"displayData"`
	// SDK generated id of this transform instance.
	Id *string `pulumi:"id"`
	// User names for all collection inputs to this transform.
	InputCollectionName []string `pulumi:"inputCollectionName"`
	// Type of transform.
	Kind *TransformSummaryKind `pulumi:"kind"`
	// User provided name for this transform instance.
	Name *string `pulumi:"name"`
	// User names for all collection outputs to this transform.
	OutputCollectionName []string `pulumi:"outputCollectionName"`
}

// TransformSummaryInput is an input type that accepts TransformSummaryArgs and TransformSummaryOutput values.
// You can construct a concrete instance of `TransformSummaryInput` via:
//
//	TransformSummaryArgs{...}
type TransformSummaryInput interface {
	pulumi.Input

	ToTransformSummaryOutput() TransformSummaryOutput
	ToTransformSummaryOutputWithContext(context.Context) TransformSummaryOutput
}

// Description of the type, names/ids, and input/outputs for a transform.
type TransformSummaryArgs struct {
	// Transform-specific display data.
	DisplayData DisplayDataArrayInput `pulumi:"displayData"`
	// SDK generated id of this transform instance.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// User names for all collection inputs to this transform.
	InputCollectionName pulumi.StringArrayInput `pulumi:"inputCollectionName"`
	// Type of transform.
	Kind TransformSummaryKindPtrInput `pulumi:"kind"`
	// User provided name for this transform instance.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// User names for all collection outputs to this transform.
	OutputCollectionName pulumi.StringArrayInput `pulumi:"outputCollectionName"`
}

func (TransformSummaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformSummary)(nil)).Elem()
}

func (i TransformSummaryArgs) ToTransformSummaryOutput() TransformSummaryOutput {
	return i.ToTransformSummaryOutputWithContext(context.Background())
}

func (i TransformSummaryArgs) ToTransformSummaryOutputWithContext(ctx context.Context) TransformSummaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformSummaryOutput)
}

// TransformSummaryArrayInput is an input type that accepts TransformSummaryArray and TransformSummaryArrayOutput values.
// You can construct a concrete instance of `TransformSummaryArrayInput` via:
//
//	TransformSummaryArray{ TransformSummaryArgs{...} }
type TransformSummaryArrayInput interface {
	pulumi.Input

	ToTransformSummaryArrayOutput() TransformSummaryArrayOutput
	ToTransformSummaryArrayOutputWithContext(context.Context) TransformSummaryArrayOutput
}

type TransformSummaryArray []TransformSummaryInput

func (TransformSummaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformSummary)(nil)).Elem()
}

func (i TransformSummaryArray) ToTransformSummaryArrayOutput() TransformSummaryArrayOutput {
	return i.ToTransformSummaryArrayOutputWithContext(context.Background())
}

func (i TransformSummaryArray) ToTransformSummaryArrayOutputWithContext(ctx context.Context) TransformSummaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransformSummaryArrayOutput)
}

// Description of the type, names/ids, and input/outputs for a transform.
type TransformSummaryOutput struct{ *pulumi.OutputState }

func (TransformSummaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformSummary)(nil)).Elem()
}

func (o TransformSummaryOutput) ToTransformSummaryOutput() TransformSummaryOutput {
	return o
}

func (o TransformSummaryOutput) ToTransformSummaryOutputWithContext(ctx context.Context) TransformSummaryOutput {
	return o
}

// Transform-specific display data.
func (o TransformSummaryOutput) DisplayData() DisplayDataArrayOutput {
	return o.ApplyT(func(v TransformSummary) []DisplayData { return v.DisplayData }).(DisplayDataArrayOutput)
}

// SDK generated id of this transform instance.
func (o TransformSummaryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformSummary) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// User names for all collection inputs to this transform.
func (o TransformSummaryOutput) InputCollectionName() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformSummary) []string { return v.InputCollectionName }).(pulumi.StringArrayOutput)
}

// Type of transform.
func (o TransformSummaryOutput) Kind() TransformSummaryKindPtrOutput {
	return o.ApplyT(func(v TransformSummary) *TransformSummaryKind { return v.Kind }).(TransformSummaryKindPtrOutput)
}

// User provided name for this transform instance.
func (o TransformSummaryOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TransformSummary) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// User names for all collection outputs to this transform.
func (o TransformSummaryOutput) OutputCollectionName() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformSummary) []string { return v.OutputCollectionName }).(pulumi.StringArrayOutput)
}

type TransformSummaryArrayOutput struct{ *pulumi.OutputState }

func (TransformSummaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformSummary)(nil)).Elem()
}

func (o TransformSummaryArrayOutput) ToTransformSummaryArrayOutput() TransformSummaryArrayOutput {
	return o
}

func (o TransformSummaryArrayOutput) ToTransformSummaryArrayOutputWithContext(ctx context.Context) TransformSummaryArrayOutput {
	return o
}

func (o TransformSummaryArrayOutput) Index(i pulumi.IntInput) TransformSummaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformSummary {
		return vs[0].([]TransformSummary)[vs[1].(int)]
	}).(TransformSummaryOutput)
}

// Description of the type, names/ids, and input/outputs for a transform.
type TransformSummaryResponse struct {
	// Transform-specific display data.
	DisplayData []DisplayDataResponse `pulumi:"displayData"`
	// User names for all collection inputs to this transform.
	InputCollectionName []string `pulumi:"inputCollectionName"`
	// Type of transform.
	Kind string `pulumi:"kind"`
	// User provided name for this transform instance.
	Name string `pulumi:"name"`
	// User names for all collection outputs to this transform.
	OutputCollectionName []string `pulumi:"outputCollectionName"`
}

// Description of the type, names/ids, and input/outputs for a transform.
type TransformSummaryResponseOutput struct{ *pulumi.OutputState }

func (TransformSummaryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransformSummaryResponse)(nil)).Elem()
}

func (o TransformSummaryResponseOutput) ToTransformSummaryResponseOutput() TransformSummaryResponseOutput {
	return o
}

func (o TransformSummaryResponseOutput) ToTransformSummaryResponseOutputWithContext(ctx context.Context) TransformSummaryResponseOutput {
	return o
}

// Transform-specific display data.
func (o TransformSummaryResponseOutput) DisplayData() DisplayDataResponseArrayOutput {
	return o.ApplyT(func(v TransformSummaryResponse) []DisplayDataResponse { return v.DisplayData }).(DisplayDataResponseArrayOutput)
}

// User names for all collection inputs to this transform.
func (o TransformSummaryResponseOutput) InputCollectionName() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformSummaryResponse) []string { return v.InputCollectionName }).(pulumi.StringArrayOutput)
}

// Type of transform.
func (o TransformSummaryResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v TransformSummaryResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// User provided name for this transform instance.
func (o TransformSummaryResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TransformSummaryResponse) string { return v.Name }).(pulumi.StringOutput)
}

// User names for all collection outputs to this transform.
func (o TransformSummaryResponseOutput) OutputCollectionName() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TransformSummaryResponse) []string { return v.OutputCollectionName }).(pulumi.StringArrayOutput)
}

type TransformSummaryResponseArrayOutput struct{ *pulumi.OutputState }

func (TransformSummaryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TransformSummaryResponse)(nil)).Elem()
}

func (o TransformSummaryResponseArrayOutput) ToTransformSummaryResponseArrayOutput() TransformSummaryResponseArrayOutput {
	return o
}

func (o TransformSummaryResponseArrayOutput) ToTransformSummaryResponseArrayOutputWithContext(ctx context.Context) TransformSummaryResponseArrayOutput {
	return o
}

func (o TransformSummaryResponseArrayOutput) Index(i pulumi.IntInput) TransformSummaryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TransformSummaryResponse {
		return vs[0].([]TransformSummaryResponse)[vs[1].(int)]
	}).(TransformSummaryResponseOutput)
}

// Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
type WorkerPool struct {
	// Settings for autoscaling of this WorkerPool.
	AutoscalingSettings *AutoscalingSettings `pulumi:"autoscalingSettings"`
	// Data disks that are used by a VM in this workflow.
	DataDisks []Disk `pulumi:"dataDisks"`
	// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
	DefaultPackageSet *WorkerPoolDefaultPackageSet `pulumi:"defaultPackageSet"`
	// Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
	DiskSizeGb *int `pulumi:"diskSizeGb"`
	// Fully qualified source image for disks.
	DiskSourceImage *string `pulumi:"diskSourceImage"`
	// Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
	DiskType *string `pulumi:"diskType"`
	// Configuration for VM IPs.
	IpConfiguration *WorkerPoolIpConfiguration `pulumi:"ipConfiguration"`
	// The kind of the worker pool; currently only `harness` and `shuffle` are supported.
	Kind *string `pulumi:"kind"`
	// Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
	MachineType *string `pulumi:"machineType"`
	// Metadata to set on the Google Compute Engine VMs.
	Metadata map[string]string `pulumi:"metadata"`
	// Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
	Network *string `pulumi:"network"`
	// The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
	NumThreadsPerWorker *int `pulumi:"numThreadsPerWorker"`
	// Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
	NumWorkers *int `pulumi:"numWorkers"`
	// The action to take on host maintenance, as defined by the Google Compute Engine API.
	OnHostMaintenance *string `pulumi:"onHostMaintenance"`
	// Packages to be installed on workers.
	Packages []Package `pulumi:"packages"`
	// Extra arguments for this worker pool.
	PoolArgs map[string]interface{} `pulumi:"poolArgs"`
	// Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
	SdkHarnessContainerImages []SdkHarnessContainerImage `pulumi:"sdkHarnessContainerImages"`
	// Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
	Subnetwork *string `pulumi:"subnetwork"`
	// Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.
	TaskrunnerSettings *TaskRunnerSettings `pulumi:"taskrunnerSettings"`
	// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
	TeardownPolicy *WorkerPoolTeardownPolicy `pulumi:"teardownPolicy"`
	// Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
	//
	// Deprecated: Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
	WorkerHarnessContainerImage string `pulumi:"workerHarnessContainerImage"`
	// Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
	Zone *string `pulumi:"zone"`
}

// WorkerPoolInput is an input type that accepts WorkerPoolArgs and WorkerPoolOutput values.
// You can construct a concrete instance of `WorkerPoolInput` via:
//
//	WorkerPoolArgs{...}
type WorkerPoolInput interface {
	pulumi.Input

	ToWorkerPoolOutput() WorkerPoolOutput
	ToWorkerPoolOutputWithContext(context.Context) WorkerPoolOutput
}

// Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
type WorkerPoolArgs struct {
	// Settings for autoscaling of this WorkerPool.
	AutoscalingSettings AutoscalingSettingsPtrInput `pulumi:"autoscalingSettings"`
	// Data disks that are used by a VM in this workflow.
	DataDisks DiskArrayInput `pulumi:"dataDisks"`
	// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
	DefaultPackageSet WorkerPoolDefaultPackageSetPtrInput `pulumi:"defaultPackageSet"`
	// Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
	DiskSizeGb pulumi.IntPtrInput `pulumi:"diskSizeGb"`
	// Fully qualified source image for disks.
	DiskSourceImage pulumi.StringPtrInput `pulumi:"diskSourceImage"`
	// Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Configuration for VM IPs.
	IpConfiguration WorkerPoolIpConfigurationPtrInput `pulumi:"ipConfiguration"`
	// The kind of the worker pool; currently only `harness` and `shuffle` are supported.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Metadata to set on the Google Compute Engine VMs.
	Metadata pulumi.StringMapInput `pulumi:"metadata"`
	// Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
	Network pulumi.StringPtrInput `pulumi:"network"`
	// The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
	NumThreadsPerWorker pulumi.IntPtrInput `pulumi:"numThreadsPerWorker"`
	// Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
	NumWorkers pulumi.IntPtrInput `pulumi:"numWorkers"`
	// The action to take on host maintenance, as defined by the Google Compute Engine API.
	OnHostMaintenance pulumi.StringPtrInput `pulumi:"onHostMaintenance"`
	// Packages to be installed on workers.
	Packages PackageArrayInput `pulumi:"packages"`
	// Extra arguments for this worker pool.
	PoolArgs pulumi.MapInput `pulumi:"poolArgs"`
	// Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
	SdkHarnessContainerImages SdkHarnessContainerImageArrayInput `pulumi:"sdkHarnessContainerImages"`
	// Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
	Subnetwork pulumi.StringPtrInput `pulumi:"subnetwork"`
	// Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.
	TaskrunnerSettings TaskRunnerSettingsPtrInput `pulumi:"taskrunnerSettings"`
	// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
	TeardownPolicy WorkerPoolTeardownPolicyPtrInput `pulumi:"teardownPolicy"`
	// Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
	//
	// Deprecated: Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
	WorkerHarnessContainerImage pulumi.StringInput `pulumi:"workerHarnessContainerImage"`
	// Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (WorkerPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil)).Elem()
}

func (i WorkerPoolArgs) ToWorkerPoolOutput() WorkerPoolOutput {
	return i.ToWorkerPoolOutputWithContext(context.Background())
}

func (i WorkerPoolArgs) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolOutput)
}

// WorkerPoolArrayInput is an input type that accepts WorkerPoolArray and WorkerPoolArrayOutput values.
// You can construct a concrete instance of `WorkerPoolArrayInput` via:
//
//	WorkerPoolArray{ WorkerPoolArgs{...} }
type WorkerPoolArrayInput interface {
	pulumi.Input

	ToWorkerPoolArrayOutput() WorkerPoolArrayOutput
	ToWorkerPoolArrayOutputWithContext(context.Context) WorkerPoolArrayOutput
}

type WorkerPoolArray []WorkerPoolInput

func (WorkerPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkerPool)(nil)).Elem()
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return i.ToWorkerPoolArrayOutputWithContext(context.Background())
}

func (i WorkerPoolArray) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerPoolArrayOutput)
}

// Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
type WorkerPoolOutput struct{ *pulumi.OutputState }

func (WorkerPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPool)(nil)).Elem()
}

func (o WorkerPoolOutput) ToWorkerPoolOutput() WorkerPoolOutput {
	return o
}

func (o WorkerPoolOutput) ToWorkerPoolOutputWithContext(ctx context.Context) WorkerPoolOutput {
	return o
}

// Settings for autoscaling of this WorkerPool.
func (o WorkerPoolOutput) AutoscalingSettings() AutoscalingSettingsPtrOutput {
	return o.ApplyT(func(v WorkerPool) *AutoscalingSettings { return v.AutoscalingSettings }).(AutoscalingSettingsPtrOutput)
}

// Data disks that are used by a VM in this workflow.
func (o WorkerPoolOutput) DataDisks() DiskArrayOutput {
	return o.ApplyT(func(v WorkerPool) []Disk { return v.DataDisks }).(DiskArrayOutput)
}

// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
func (o WorkerPoolOutput) DefaultPackageSet() WorkerPoolDefaultPackageSetPtrOutput {
	return o.ApplyT(func(v WorkerPool) *WorkerPoolDefaultPackageSet { return v.DefaultPackageSet }).(WorkerPoolDefaultPackageSetPtrOutput)
}

// Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolOutput) DiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkerPool) *int { return v.DiskSizeGb }).(pulumi.IntPtrOutput)
}

// Fully qualified source image for disks.
func (o WorkerPoolOutput) DiskSourceImage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.DiskSourceImage }).(pulumi.StringPtrOutput)
}

// Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Configuration for VM IPs.
func (o WorkerPoolOutput) IpConfiguration() WorkerPoolIpConfigurationPtrOutput {
	return o.ApplyT(func(v WorkerPool) *WorkerPoolIpConfiguration { return v.IpConfiguration }).(WorkerPoolIpConfigurationPtrOutput)
}

// The kind of the worker pool; currently only `harness` and `shuffle` are supported.
func (o WorkerPoolOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Metadata to set on the Google Compute Engine VMs.
func (o WorkerPoolOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkerPool) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
func (o WorkerPoolOutput) Network() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.Network }).(pulumi.StringPtrOutput)
}

// The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
func (o WorkerPoolOutput) NumThreadsPerWorker() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkerPool) *int { return v.NumThreadsPerWorker }).(pulumi.IntPtrOutput)
}

// Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolOutput) NumWorkers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkerPool) *int { return v.NumWorkers }).(pulumi.IntPtrOutput)
}

// The action to take on host maintenance, as defined by the Google Compute Engine API.
func (o WorkerPoolOutput) OnHostMaintenance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.OnHostMaintenance }).(pulumi.StringPtrOutput)
}

// Packages to be installed on workers.
func (o WorkerPoolOutput) Packages() PackageArrayOutput {
	return o.ApplyT(func(v WorkerPool) []Package { return v.Packages }).(PackageArrayOutput)
}

// Extra arguments for this worker pool.
func (o WorkerPoolOutput) PoolArgs() pulumi.MapOutput {
	return o.ApplyT(func(v WorkerPool) map[string]interface{} { return v.PoolArgs }).(pulumi.MapOutput)
}

// Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
func (o WorkerPoolOutput) SdkHarnessContainerImages() SdkHarnessContainerImageArrayOutput {
	return o.ApplyT(func(v WorkerPool) []SdkHarnessContainerImage { return v.SdkHarnessContainerImages }).(SdkHarnessContainerImageArrayOutput)
}

// Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
func (o WorkerPoolOutput) Subnetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.Subnetwork }).(pulumi.StringPtrOutput)
}

// Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.
func (o WorkerPoolOutput) TaskrunnerSettings() TaskRunnerSettingsPtrOutput {
	return o.ApplyT(func(v WorkerPool) *TaskRunnerSettings { return v.TaskrunnerSettings }).(TaskRunnerSettingsPtrOutput)
}

// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolOutput) TeardownPolicy() WorkerPoolTeardownPolicyPtrOutput {
	return o.ApplyT(func(v WorkerPool) *WorkerPoolTeardownPolicy { return v.TeardownPolicy }).(WorkerPoolTeardownPolicyPtrOutput)
}

// Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
//
// Deprecated: Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
func (o WorkerPoolOutput) WorkerHarnessContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPool) string { return v.WorkerHarnessContainerImage }).(pulumi.StringOutput)
}

// Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerPool) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type WorkerPoolArrayOutput struct{ *pulumi.OutputState }

func (WorkerPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkerPool)(nil)).Elem()
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutput() WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) ToWorkerPoolArrayOutputWithContext(ctx context.Context) WorkerPoolArrayOutput {
	return o
}

func (o WorkerPoolArrayOutput) Index(i pulumi.IntInput) WorkerPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkerPool {
		return vs[0].([]WorkerPool)[vs[1].(int)]
	}).(WorkerPoolOutput)
}

// Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
type WorkerPoolResponse struct {
	// Settings for autoscaling of this WorkerPool.
	AutoscalingSettings AutoscalingSettingsResponse `pulumi:"autoscalingSettings"`
	// Data disks that are used by a VM in this workflow.
	DataDisks []DiskResponse `pulumi:"dataDisks"`
	// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
	DefaultPackageSet string `pulumi:"defaultPackageSet"`
	// Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
	DiskSizeGb int `pulumi:"diskSizeGb"`
	// Fully qualified source image for disks.
	DiskSourceImage string `pulumi:"diskSourceImage"`
	// Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
	DiskType string `pulumi:"diskType"`
	// Configuration for VM IPs.
	IpConfiguration string `pulumi:"ipConfiguration"`
	// The kind of the worker pool; currently only `harness` and `shuffle` are supported.
	Kind string `pulumi:"kind"`
	// Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
	MachineType string `pulumi:"machineType"`
	// Metadata to set on the Google Compute Engine VMs.
	Metadata map[string]string `pulumi:"metadata"`
	// Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
	Network string `pulumi:"network"`
	// The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
	NumThreadsPerWorker int `pulumi:"numThreadsPerWorker"`
	// Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
	NumWorkers int `pulumi:"numWorkers"`
	// The action to take on host maintenance, as defined by the Google Compute Engine API.
	OnHostMaintenance string `pulumi:"onHostMaintenance"`
	// Packages to be installed on workers.
	Packages []PackageResponse `pulumi:"packages"`
	// Extra arguments for this worker pool.
	PoolArgs map[string]interface{} `pulumi:"poolArgs"`
	// Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
	SdkHarnessContainerImages []SdkHarnessContainerImageResponse `pulumi:"sdkHarnessContainerImages"`
	// Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
	Subnetwork string `pulumi:"subnetwork"`
	// Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.
	TaskrunnerSettings TaskRunnerSettingsResponse `pulumi:"taskrunnerSettings"`
	// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
	TeardownPolicy string `pulumi:"teardownPolicy"`
	// Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
	//
	// Deprecated: Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
	WorkerHarnessContainerImage string `pulumi:"workerHarnessContainerImage"`
	// Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
	Zone string `pulumi:"zone"`
}

// Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.
type WorkerPoolResponseOutput struct{ *pulumi.OutputState }

func (WorkerPoolResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerPoolResponse)(nil)).Elem()
}

func (o WorkerPoolResponseOutput) ToWorkerPoolResponseOutput() WorkerPoolResponseOutput {
	return o
}

func (o WorkerPoolResponseOutput) ToWorkerPoolResponseOutputWithContext(ctx context.Context) WorkerPoolResponseOutput {
	return o
}

// Settings for autoscaling of this WorkerPool.
func (o WorkerPoolResponseOutput) AutoscalingSettings() AutoscalingSettingsResponseOutput {
	return o.ApplyT(func(v WorkerPoolResponse) AutoscalingSettingsResponse { return v.AutoscalingSettings }).(AutoscalingSettingsResponseOutput)
}

// Data disks that are used by a VM in this workflow.
func (o WorkerPoolResponseOutput) DataDisks() DiskResponseArrayOutput {
	return o.ApplyT(func(v WorkerPoolResponse) []DiskResponse { return v.DataDisks }).(DiskResponseArrayOutput)
}

// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
func (o WorkerPoolResponseOutput) DefaultPackageSet() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.DefaultPackageSet }).(pulumi.StringOutput)
}

// Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolResponseOutput) DiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v WorkerPoolResponse) int { return v.DiskSizeGb }).(pulumi.IntOutput)
}

// Fully qualified source image for disks.
func (o WorkerPoolResponseOutput) DiskSourceImage() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.DiskSourceImage }).(pulumi.StringOutput)
}

// Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Configuration for VM IPs.
func (o WorkerPoolResponseOutput) IpConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.IpConfiguration }).(pulumi.StringOutput)
}

// The kind of the worker pool; currently only `harness` and `shuffle` are supported.
func (o WorkerPoolResponseOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.Kind }).(pulumi.StringOutput)
}

// Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Metadata to set on the Google Compute Engine VMs.
func (o WorkerPoolResponseOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v WorkerPoolResponse) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".
func (o WorkerPoolResponseOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.Network }).(pulumi.StringOutput)
}

// The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).
func (o WorkerPoolResponseOutput) NumThreadsPerWorker() pulumi.IntOutput {
	return o.ApplyT(func(v WorkerPoolResponse) int { return v.NumThreadsPerWorker }).(pulumi.IntOutput)
}

// Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolResponseOutput) NumWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v WorkerPoolResponse) int { return v.NumWorkers }).(pulumi.IntOutput)
}

// The action to take on host maintenance, as defined by the Google Compute Engine API.
func (o WorkerPoolResponseOutput) OnHostMaintenance() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.OnHostMaintenance }).(pulumi.StringOutput)
}

// Packages to be installed on workers.
func (o WorkerPoolResponseOutput) Packages() PackageResponseArrayOutput {
	return o.ApplyT(func(v WorkerPoolResponse) []PackageResponse { return v.Packages }).(PackageResponseArrayOutput)
}

// Extra arguments for this worker pool.
func (o WorkerPoolResponseOutput) PoolArgs() pulumi.MapOutput {
	return o.ApplyT(func(v WorkerPoolResponse) map[string]interface{} { return v.PoolArgs }).(pulumi.MapOutput)
}

// Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.
func (o WorkerPoolResponseOutput) SdkHarnessContainerImages() SdkHarnessContainerImageResponseArrayOutput {
	return o.ApplyT(func(v WorkerPoolResponse) []SdkHarnessContainerImageResponse { return v.SdkHarnessContainerImages }).(SdkHarnessContainerImageResponseArrayOutput)
}

// Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".
func (o WorkerPoolResponseOutput) Subnetwork() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.Subnetwork }).(pulumi.StringOutput)
}

// Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.
func (o WorkerPoolResponseOutput) TaskrunnerSettings() TaskRunnerSettingsResponseOutput {
	return o.ApplyT(func(v WorkerPoolResponse) TaskRunnerSettingsResponse { return v.TaskrunnerSettings }).(TaskRunnerSettingsResponseOutput)
}

// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolResponseOutput) TeardownPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.TeardownPolicy }).(pulumi.StringOutput)
}

// Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
//
// Deprecated: Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.
func (o WorkerPoolResponseOutput) WorkerHarnessContainerImage() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.WorkerHarnessContainerImage }).(pulumi.StringOutput)
}

// Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.
func (o WorkerPoolResponseOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerPoolResponse) string { return v.Zone }).(pulumi.StringOutput)
}

type WorkerPoolResponseArrayOutput struct{ *pulumi.OutputState }

func (WorkerPoolResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkerPoolResponse)(nil)).Elem()
}

func (o WorkerPoolResponseArrayOutput) ToWorkerPoolResponseArrayOutput() WorkerPoolResponseArrayOutput {
	return o
}

func (o WorkerPoolResponseArrayOutput) ToWorkerPoolResponseArrayOutputWithContext(ctx context.Context) WorkerPoolResponseArrayOutput {
	return o
}

func (o WorkerPoolResponseArrayOutput) Index(i pulumi.IntInput) WorkerPoolResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkerPoolResponse {
		return vs[0].([]WorkerPoolResponse)[vs[1].(int)]
	}).(WorkerPoolResponseOutput)
}

// Provides data to pass through to the worker harness.
type WorkerSettings struct {
	// The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
	BaseUrl *string `pulumi:"baseUrl"`
	// Whether to send work progress updates to the service.
	ReportingEnabled *bool `pulumi:"reportingEnabled"`
	// The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".
	ServicePath *string `pulumi:"servicePath"`
	// The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".
	ShuffleServicePath *string `pulumi:"shuffleServicePath"`
	// The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix *string `pulumi:"tempStoragePrefix"`
	// The ID of the worker running this pipeline.
	WorkerId *string `pulumi:"workerId"`
}

// WorkerSettingsInput is an input type that accepts WorkerSettingsArgs and WorkerSettingsOutput values.
// You can construct a concrete instance of `WorkerSettingsInput` via:
//
//	WorkerSettingsArgs{...}
type WorkerSettingsInput interface {
	pulumi.Input

	ToWorkerSettingsOutput() WorkerSettingsOutput
	ToWorkerSettingsOutputWithContext(context.Context) WorkerSettingsOutput
}

// Provides data to pass through to the worker harness.
type WorkerSettingsArgs struct {
	// The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
	BaseUrl pulumi.StringPtrInput `pulumi:"baseUrl"`
	// Whether to send work progress updates to the service.
	ReportingEnabled pulumi.BoolPtrInput `pulumi:"reportingEnabled"`
	// The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".
	ServicePath pulumi.StringPtrInput `pulumi:"servicePath"`
	// The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".
	ShuffleServicePath pulumi.StringPtrInput `pulumi:"shuffleServicePath"`
	// The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix pulumi.StringPtrInput `pulumi:"tempStoragePrefix"`
	// The ID of the worker running this pipeline.
	WorkerId pulumi.StringPtrInput `pulumi:"workerId"`
}

func (WorkerSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerSettings)(nil)).Elem()
}

func (i WorkerSettingsArgs) ToWorkerSettingsOutput() WorkerSettingsOutput {
	return i.ToWorkerSettingsOutputWithContext(context.Background())
}

func (i WorkerSettingsArgs) ToWorkerSettingsOutputWithContext(ctx context.Context) WorkerSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerSettingsOutput)
}

func (i WorkerSettingsArgs) ToWorkerSettingsPtrOutput() WorkerSettingsPtrOutput {
	return i.ToWorkerSettingsPtrOutputWithContext(context.Background())
}

func (i WorkerSettingsArgs) ToWorkerSettingsPtrOutputWithContext(ctx context.Context) WorkerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerSettingsOutput).ToWorkerSettingsPtrOutputWithContext(ctx)
}

// WorkerSettingsPtrInput is an input type that accepts WorkerSettingsArgs, WorkerSettingsPtr and WorkerSettingsPtrOutput values.
// You can construct a concrete instance of `WorkerSettingsPtrInput` via:
//
//	        WorkerSettingsArgs{...}
//
//	or:
//
//	        nil
type WorkerSettingsPtrInput interface {
	pulumi.Input

	ToWorkerSettingsPtrOutput() WorkerSettingsPtrOutput
	ToWorkerSettingsPtrOutputWithContext(context.Context) WorkerSettingsPtrOutput
}

type workerSettingsPtrType WorkerSettingsArgs

func WorkerSettingsPtr(v *WorkerSettingsArgs) WorkerSettingsPtrInput {
	return (*workerSettingsPtrType)(v)
}

func (*workerSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerSettings)(nil)).Elem()
}

func (i *workerSettingsPtrType) ToWorkerSettingsPtrOutput() WorkerSettingsPtrOutput {
	return i.ToWorkerSettingsPtrOutputWithContext(context.Background())
}

func (i *workerSettingsPtrType) ToWorkerSettingsPtrOutputWithContext(ctx context.Context) WorkerSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkerSettingsPtrOutput)
}

// Provides data to pass through to the worker harness.
type WorkerSettingsOutput struct{ *pulumi.OutputState }

func (WorkerSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerSettings)(nil)).Elem()
}

func (o WorkerSettingsOutput) ToWorkerSettingsOutput() WorkerSettingsOutput {
	return o
}

func (o WorkerSettingsOutput) ToWorkerSettingsOutputWithContext(ctx context.Context) WorkerSettingsOutput {
	return o
}

func (o WorkerSettingsOutput) ToWorkerSettingsPtrOutput() WorkerSettingsPtrOutput {
	return o.ToWorkerSettingsPtrOutputWithContext(context.Background())
}

func (o WorkerSettingsOutput) ToWorkerSettingsPtrOutputWithContext(ctx context.Context) WorkerSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkerSettings) *WorkerSettings {
		return &v
	}).(WorkerSettingsPtrOutput)
}

// The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
func (o WorkerSettingsOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerSettings) *string { return v.BaseUrl }).(pulumi.StringPtrOutput)
}

// Whether to send work progress updates to the service.
func (o WorkerSettingsOutput) ReportingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v WorkerSettings) *bool { return v.ReportingEnabled }).(pulumi.BoolPtrOutput)
}

// The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".
func (o WorkerSettingsOutput) ServicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerSettings) *string { return v.ServicePath }).(pulumi.StringPtrOutput)
}

// The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".
func (o WorkerSettingsOutput) ShuffleServicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerSettings) *string { return v.ShuffleServicePath }).(pulumi.StringPtrOutput)
}

// The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o WorkerSettingsOutput) TempStoragePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerSettings) *string { return v.TempStoragePrefix }).(pulumi.StringPtrOutput)
}

// The ID of the worker running this pipeline.
func (o WorkerSettingsOutput) WorkerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkerSettings) *string { return v.WorkerId }).(pulumi.StringPtrOutput)
}

type WorkerSettingsPtrOutput struct{ *pulumi.OutputState }

func (WorkerSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkerSettings)(nil)).Elem()
}

func (o WorkerSettingsPtrOutput) ToWorkerSettingsPtrOutput() WorkerSettingsPtrOutput {
	return o
}

func (o WorkerSettingsPtrOutput) ToWorkerSettingsPtrOutputWithContext(ctx context.Context) WorkerSettingsPtrOutput {
	return o
}

func (o WorkerSettingsPtrOutput) Elem() WorkerSettingsOutput {
	return o.ApplyT(func(v *WorkerSettings) WorkerSettings {
		if v != nil {
			return *v
		}
		var ret WorkerSettings
		return ret
	}).(WorkerSettingsOutput)
}

// The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
func (o WorkerSettingsPtrOutput) BaseUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerSettings) *string {
		if v == nil {
			return nil
		}
		return v.BaseUrl
	}).(pulumi.StringPtrOutput)
}

// Whether to send work progress updates to the service.
func (o WorkerSettingsPtrOutput) ReportingEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkerSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ReportingEnabled
	}).(pulumi.BoolPtrOutput)
}

// The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".
func (o WorkerSettingsPtrOutput) ServicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerSettings) *string {
		if v == nil {
			return nil
		}
		return v.ServicePath
	}).(pulumi.StringPtrOutput)
}

// The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".
func (o WorkerSettingsPtrOutput) ShuffleServicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerSettings) *string {
		if v == nil {
			return nil
		}
		return v.ShuffleServicePath
	}).(pulumi.StringPtrOutput)
}

// The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o WorkerSettingsPtrOutput) TempStoragePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerSettings) *string {
		if v == nil {
			return nil
		}
		return v.TempStoragePrefix
	}).(pulumi.StringPtrOutput)
}

// The ID of the worker running this pipeline.
func (o WorkerSettingsPtrOutput) WorkerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkerSettings) *string {
		if v == nil {
			return nil
		}
		return v.WorkerId
	}).(pulumi.StringPtrOutput)
}

// Provides data to pass through to the worker harness.
type WorkerSettingsResponse struct {
	// The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
	BaseUrl string `pulumi:"baseUrl"`
	// Whether to send work progress updates to the service.
	ReportingEnabled bool `pulumi:"reportingEnabled"`
	// The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".
	ServicePath string `pulumi:"servicePath"`
	// The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".
	ShuffleServicePath string `pulumi:"shuffleServicePath"`
	// The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
	TempStoragePrefix string `pulumi:"tempStoragePrefix"`
	// The ID of the worker running this pipeline.
	WorkerId string `pulumi:"workerId"`
}

// Provides data to pass through to the worker harness.
type WorkerSettingsResponseOutput struct{ *pulumi.OutputState }

func (WorkerSettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkerSettingsResponse)(nil)).Elem()
}

func (o WorkerSettingsResponseOutput) ToWorkerSettingsResponseOutput() WorkerSettingsResponseOutput {
	return o
}

func (o WorkerSettingsResponseOutput) ToWorkerSettingsResponseOutputWithContext(ctx context.Context) WorkerSettingsResponseOutput {
	return o
}

// The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"
func (o WorkerSettingsResponseOutput) BaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerSettingsResponse) string { return v.BaseUrl }).(pulumi.StringOutput)
}

// Whether to send work progress updates to the service.
func (o WorkerSettingsResponseOutput) ReportingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v WorkerSettingsResponse) bool { return v.ReportingEnabled }).(pulumi.BoolOutput)
}

// The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".
func (o WorkerSettingsResponseOutput) ServicePath() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerSettingsResponse) string { return v.ServicePath }).(pulumi.StringOutput)
}

// The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".
func (o WorkerSettingsResponseOutput) ShuffleServicePath() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerSettingsResponse) string { return v.ShuffleServicePath }).(pulumi.StringOutput)
}

// The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}
func (o WorkerSettingsResponseOutput) TempStoragePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerSettingsResponse) string { return v.TempStoragePrefix }).(pulumi.StringOutput)
}

// The ID of the worker running this pipeline.
func (o WorkerSettingsResponseOutput) WorkerId() pulumi.StringOutput {
	return o.ApplyT(func(v WorkerSettingsResponse) string { return v.WorkerId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingSettingsInput)(nil)).Elem(), AutoscalingSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoscalingSettingsPtrInput)(nil)).Elem(), AutoscalingSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryIODetailsInput)(nil)).Elem(), BigQueryIODetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryIODetailsArrayInput)(nil)).Elem(), BigQueryIODetailsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigTableIODetailsInput)(nil)).Elem(), BigTableIODetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigTableIODetailsArrayInput)(nil)).Elem(), BigTableIODetailsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentSourceInput)(nil)).Elem(), ComponentSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentSourceArrayInput)(nil)).Elem(), ComponentSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTransformInput)(nil)).Elem(), ComponentTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTransformArrayInput)(nil)).Elem(), ComponentTransformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSamplingConfigInput)(nil)).Elem(), DataSamplingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSamplingConfigPtrInput)(nil)).Elem(), DataSamplingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreIODetailsInput)(nil)).Elem(), DatastoreIODetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatastoreIODetailsArrayInput)(nil)).Elem(), DatastoreIODetailsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DebugOptionsInput)(nil)).Elem(), DebugOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DebugOptionsPtrInput)(nil)).Elem(), DebugOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskInput)(nil)).Elem(), DiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskArrayInput)(nil)).Elem(), DiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisplayDataInput)(nil)).Elem(), DisplayDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DisplayDataArrayInput)(nil)).Elem(), DisplayDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentInput)(nil)).Elem(), EnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnvironmentPtrInput)(nil)).Elem(), EnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionStageStateInput)(nil)).Elem(), ExecutionStageStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionStageStateArrayInput)(nil)).Elem(), ExecutionStageStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionStageSummaryInput)(nil)).Elem(), ExecutionStageSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExecutionStageSummaryArrayInput)(nil)).Elem(), ExecutionStageSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileIODetailsInput)(nil)).Elem(), FileIODetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileIODetailsArrayInput)(nil)).Elem(), FileIODetailsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionInfoInput)(nil)).Elem(), JobExecutionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionInfoPtrInput)(nil)).Elem(), JobExecutionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionStageInfoInput)(nil)).Elem(), JobExecutionStageInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobExecutionStageInfoMapInput)(nil)).Elem(), JobExecutionStageInfoMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMetadataInput)(nil)).Elem(), JobMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMetadataPtrInput)(nil)).Elem(), JobMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageInput)(nil)).Elem(), PackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PackageArrayInput)(nil)).Elem(), PackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineDescriptionInput)(nil)).Elem(), PipelineDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineDescriptionPtrInput)(nil)).Elem(), PipelineDescriptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubSubIODetailsInput)(nil)).Elem(), PubSubIODetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PubSubIODetailsArrayInput)(nil)).Elem(), PubSubIODetailsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeEnvironmentInput)(nil)).Elem(), RuntimeEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeEnvironmentPtrInput)(nil)).Elem(), RuntimeEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeUpdatableParamsInput)(nil)).Elem(), RuntimeUpdatableParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuntimeUpdatableParamsPtrInput)(nil)).Elem(), RuntimeUpdatableParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdkHarnessContainerImageInput)(nil)).Elem(), SdkHarnessContainerImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdkHarnessContainerImageArrayInput)(nil)).Elem(), SdkHarnessContainerImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdkVersionInput)(nil)).Elem(), SdkVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SdkVersionPtrInput)(nil)).Elem(), SdkVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpannerIODetailsInput)(nil)).Elem(), SpannerIODetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpannerIODetailsArrayInput)(nil)).Elem(), SpannerIODetailsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageSourceInput)(nil)).Elem(), StageSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StageSourceArrayInput)(nil)).Elem(), StageSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepInput)(nil)).Elem(), StepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StepArrayInput)(nil)).Elem(), StepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskRunnerSettingsInput)(nil)).Elem(), TaskRunnerSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TaskRunnerSettingsPtrInput)(nil)).Elem(), TaskRunnerSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformSummaryInput)(nil)).Elem(), TransformSummaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransformSummaryArrayInput)(nil)).Elem(), TransformSummaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolInput)(nil)).Elem(), WorkerPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerPoolArrayInput)(nil)).Elem(), WorkerPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerSettingsInput)(nil)).Elem(), WorkerSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkerSettingsPtrInput)(nil)).Elem(), WorkerSettingsArgs{})
	pulumi.RegisterOutputType(AutoscalingSettingsOutput{})
	pulumi.RegisterOutputType(AutoscalingSettingsPtrOutput{})
	pulumi.RegisterOutputType(AutoscalingSettingsResponseOutput{})
	pulumi.RegisterOutputType(BigQueryIODetailsOutput{})
	pulumi.RegisterOutputType(BigQueryIODetailsArrayOutput{})
	pulumi.RegisterOutputType(BigQueryIODetailsResponseOutput{})
	pulumi.RegisterOutputType(BigQueryIODetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(BigTableIODetailsOutput{})
	pulumi.RegisterOutputType(BigTableIODetailsArrayOutput{})
	pulumi.RegisterOutputType(BigTableIODetailsResponseOutput{})
	pulumi.RegisterOutputType(BigTableIODetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(ComponentSourceOutput{})
	pulumi.RegisterOutputType(ComponentSourceArrayOutput{})
	pulumi.RegisterOutputType(ComponentSourceResponseOutput{})
	pulumi.RegisterOutputType(ComponentSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(ComponentTransformOutput{})
	pulumi.RegisterOutputType(ComponentTransformArrayOutput{})
	pulumi.RegisterOutputType(ComponentTransformResponseOutput{})
	pulumi.RegisterOutputType(ComponentTransformResponseArrayOutput{})
	pulumi.RegisterOutputType(DataSamplingConfigOutput{})
	pulumi.RegisterOutputType(DataSamplingConfigPtrOutput{})
	pulumi.RegisterOutputType(DataSamplingConfigResponseOutput{})
	pulumi.RegisterOutputType(DatastoreIODetailsOutput{})
	pulumi.RegisterOutputType(DatastoreIODetailsArrayOutput{})
	pulumi.RegisterOutputType(DatastoreIODetailsResponseOutput{})
	pulumi.RegisterOutputType(DatastoreIODetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(DebugOptionsOutput{})
	pulumi.RegisterOutputType(DebugOptionsPtrOutput{})
	pulumi.RegisterOutputType(DebugOptionsResponseOutput{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(DiskResponseOutput{})
	pulumi.RegisterOutputType(DiskResponseArrayOutput{})
	pulumi.RegisterOutputType(DisplayDataOutput{})
	pulumi.RegisterOutputType(DisplayDataArrayOutput{})
	pulumi.RegisterOutputType(DisplayDataResponseOutput{})
	pulumi.RegisterOutputType(DisplayDataResponseArrayOutput{})
	pulumi.RegisterOutputType(EnvironmentOutput{})
	pulumi.RegisterOutputType(EnvironmentPtrOutput{})
	pulumi.RegisterOutputType(EnvironmentResponseOutput{})
	pulumi.RegisterOutputType(ExecutionStageStateOutput{})
	pulumi.RegisterOutputType(ExecutionStageStateArrayOutput{})
	pulumi.RegisterOutputType(ExecutionStageStateResponseOutput{})
	pulumi.RegisterOutputType(ExecutionStageStateResponseArrayOutput{})
	pulumi.RegisterOutputType(ExecutionStageSummaryOutput{})
	pulumi.RegisterOutputType(ExecutionStageSummaryArrayOutput{})
	pulumi.RegisterOutputType(ExecutionStageSummaryResponseOutput{})
	pulumi.RegisterOutputType(ExecutionStageSummaryResponseArrayOutput{})
	pulumi.RegisterOutputType(FileIODetailsOutput{})
	pulumi.RegisterOutputType(FileIODetailsArrayOutput{})
	pulumi.RegisterOutputType(FileIODetailsResponseOutput{})
	pulumi.RegisterOutputType(FileIODetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(JobExecutionInfoOutput{})
	pulumi.RegisterOutputType(JobExecutionInfoPtrOutput{})
	pulumi.RegisterOutputType(JobExecutionInfoResponseOutput{})
	pulumi.RegisterOutputType(JobExecutionStageInfoOutput{})
	pulumi.RegisterOutputType(JobExecutionStageInfoMapOutput{})
	pulumi.RegisterOutputType(JobExecutionStageInfoResponseOutput{})
	pulumi.RegisterOutputType(JobExecutionStageInfoResponseMapOutput{})
	pulumi.RegisterOutputType(JobMetadataOutput{})
	pulumi.RegisterOutputType(JobMetadataPtrOutput{})
	pulumi.RegisterOutputType(JobMetadataResponseOutput{})
	pulumi.RegisterOutputType(PackageOutput{})
	pulumi.RegisterOutputType(PackageArrayOutput{})
	pulumi.RegisterOutputType(PackageResponseOutput{})
	pulumi.RegisterOutputType(PackageResponseArrayOutput{})
	pulumi.RegisterOutputType(ParameterMetadataEnumOptionResponseOutput{})
	pulumi.RegisterOutputType(ParameterMetadataEnumOptionResponseArrayOutput{})
	pulumi.RegisterOutputType(ParameterMetadataResponseOutput{})
	pulumi.RegisterOutputType(ParameterMetadataResponseArrayOutput{})
	pulumi.RegisterOutputType(PipelineDescriptionOutput{})
	pulumi.RegisterOutputType(PipelineDescriptionPtrOutput{})
	pulumi.RegisterOutputType(PipelineDescriptionResponseOutput{})
	pulumi.RegisterOutputType(PubSubIODetailsOutput{})
	pulumi.RegisterOutputType(PubSubIODetailsArrayOutput{})
	pulumi.RegisterOutputType(PubSubIODetailsResponseOutput{})
	pulumi.RegisterOutputType(PubSubIODetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(RuntimeEnvironmentOutput{})
	pulumi.RegisterOutputType(RuntimeEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(RuntimeMetadataResponseOutput{})
	pulumi.RegisterOutputType(RuntimeUpdatableParamsOutput{})
	pulumi.RegisterOutputType(RuntimeUpdatableParamsPtrOutput{})
	pulumi.RegisterOutputType(RuntimeUpdatableParamsResponseOutput{})
	pulumi.RegisterOutputType(SDKInfoResponseOutput{})
	pulumi.RegisterOutputType(SdkBugResponseOutput{})
	pulumi.RegisterOutputType(SdkBugResponseArrayOutput{})
	pulumi.RegisterOutputType(SdkHarnessContainerImageOutput{})
	pulumi.RegisterOutputType(SdkHarnessContainerImageArrayOutput{})
	pulumi.RegisterOutputType(SdkHarnessContainerImageResponseOutput{})
	pulumi.RegisterOutputType(SdkHarnessContainerImageResponseArrayOutput{})
	pulumi.RegisterOutputType(SdkVersionOutput{})
	pulumi.RegisterOutputType(SdkVersionPtrOutput{})
	pulumi.RegisterOutputType(SdkVersionResponseOutput{})
	pulumi.RegisterOutputType(SpannerIODetailsOutput{})
	pulumi.RegisterOutputType(SpannerIODetailsArrayOutput{})
	pulumi.RegisterOutputType(SpannerIODetailsResponseOutput{})
	pulumi.RegisterOutputType(SpannerIODetailsResponseArrayOutput{})
	pulumi.RegisterOutputType(StageSourceOutput{})
	pulumi.RegisterOutputType(StageSourceArrayOutput{})
	pulumi.RegisterOutputType(StageSourceResponseOutput{})
	pulumi.RegisterOutputType(StageSourceResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StepOutput{})
	pulumi.RegisterOutputType(StepArrayOutput{})
	pulumi.RegisterOutputType(StepResponseOutput{})
	pulumi.RegisterOutputType(StepResponseArrayOutput{})
	pulumi.RegisterOutputType(TaskRunnerSettingsOutput{})
	pulumi.RegisterOutputType(TaskRunnerSettingsPtrOutput{})
	pulumi.RegisterOutputType(TaskRunnerSettingsResponseOutput{})
	pulumi.RegisterOutputType(TemplateMetadataResponseOutput{})
	pulumi.RegisterOutputType(TransformSummaryOutput{})
	pulumi.RegisterOutputType(TransformSummaryArrayOutput{})
	pulumi.RegisterOutputType(TransformSummaryResponseOutput{})
	pulumi.RegisterOutputType(TransformSummaryResponseArrayOutput{})
	pulumi.RegisterOutputType(WorkerPoolOutput{})
	pulumi.RegisterOutputType(WorkerPoolArrayOutput{})
	pulumi.RegisterOutputType(WorkerPoolResponseOutput{})
	pulumi.RegisterOutputType(WorkerPoolResponseArrayOutput{})
	pulumi.RegisterOutputType(WorkerSettingsOutput{})
	pulumi.RegisterOutputType(WorkerSettingsPtrOutput{})
	pulumi.RegisterOutputType(WorkerSettingsResponseOutput{})
}
