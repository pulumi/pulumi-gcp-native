// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1b3

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The algorithm to use for autoscaling.
type AutoscalingSettingsAlgorithm pulumi.String

const (
	// The algorithm is unknown, or unspecified.
	AutoscalingSettingsAlgorithmAutoscalingAlgorithmUnknown = AutoscalingSettingsAlgorithm("AUTOSCALING_ALGORITHM_UNKNOWN")
	// Disable autoscaling.
	AutoscalingSettingsAlgorithmAutoscalingAlgorithmNone = AutoscalingSettingsAlgorithm("AUTOSCALING_ALGORITHM_NONE")
	// Increase worker count over time to reduce job execution time.
	AutoscalingSettingsAlgorithmAutoscalingAlgorithmBasic = AutoscalingSettingsAlgorithm("AUTOSCALING_ALGORITHM_BASIC")
)

func (AutoscalingSettingsAlgorithm) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e AutoscalingSettingsAlgorithm) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingSettingsAlgorithm) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AutoscalingSettingsAlgorithm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AutoscalingSettingsAlgorithm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Which Flexible Resource Scheduling mode to run in.
type EnvironmentFlexResourceSchedulingGoal pulumi.String

const (
	// Run in the default mode.
	EnvironmentFlexResourceSchedulingGoalFlexrsUnspecified = EnvironmentFlexResourceSchedulingGoal("FLEXRS_UNSPECIFIED")
	// Optimize for lower execution time.
	EnvironmentFlexResourceSchedulingGoalFlexrsSpeedOptimized = EnvironmentFlexResourceSchedulingGoal("FLEXRS_SPEED_OPTIMIZED")
	// Optimize for lower cost.
	EnvironmentFlexResourceSchedulingGoalFlexrsCostOptimized = EnvironmentFlexResourceSchedulingGoal("FLEXRS_COST_OPTIMIZED")
)

func (EnvironmentFlexResourceSchedulingGoal) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e EnvironmentFlexResourceSchedulingGoal) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnvironmentFlexResourceSchedulingGoal) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnvironmentFlexResourceSchedulingGoal) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EnvironmentFlexResourceSchedulingGoal) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Executions stage states allow the same set of values as JobState.
type ExecutionStageStateExecutionStageState pulumi.String

const (
	// The job's run state isn't specified.
	ExecutionStageStateExecutionStageStateJobStateUnknown = ExecutionStageStateExecutionStageState("JOB_STATE_UNKNOWN")
	// `JOB_STATE_STOPPED` indicates that the job has not yet started to run.
	ExecutionStageStateExecutionStageStateJobStateStopped = ExecutionStageStateExecutionStageState("JOB_STATE_STOPPED")
	// `JOB_STATE_RUNNING` indicates that the job is currently running.
	ExecutionStageStateExecutionStageStateJobStateRunning = ExecutionStageStateExecutionStageState("JOB_STATE_RUNNING")
	// `JOB_STATE_DONE` indicates that the job has successfully completed. This is a terminal job state. This state may be set by the Cloud Dataflow service, as a transition from `JOB_STATE_RUNNING`. It may also be set via a Cloud Dataflow `UpdateJob` call, if the job has not yet reached a terminal state.
	ExecutionStageStateExecutionStageStateJobStateDone = ExecutionStageStateExecutionStageState("JOB_STATE_DONE")
	// `JOB_STATE_FAILED` indicates that the job has failed. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
	ExecutionStageStateExecutionStageStateJobStateFailed = ExecutionStageStateExecutionStageState("JOB_STATE_FAILED")
	// `JOB_STATE_CANCELLED` indicates that the job has been explicitly cancelled. This is a terminal job state. This state may only be set via a Cloud Dataflow `UpdateJob` call, and only if the job has not yet reached another terminal state.
	ExecutionStageStateExecutionStageStateJobStateCancelled = ExecutionStageStateExecutionStageState("JOB_STATE_CANCELLED")
	// `JOB_STATE_UPDATED` indicates that the job was successfully updated, meaning that this job was stopped and another job was started, inheriting state from this one. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
	ExecutionStageStateExecutionStageStateJobStateUpdated = ExecutionStageStateExecutionStageState("JOB_STATE_UPDATED")
	// `JOB_STATE_DRAINING` indicates that the job is in the process of draining. A draining job has stopped pulling from its input sources and is processing any data that remains in-flight. This state may be set via a Cloud Dataflow `UpdateJob` call, but only as a transition from `JOB_STATE_RUNNING`. Jobs that are draining may only transition to `JOB_STATE_DRAINED`, `JOB_STATE_CANCELLED`, or `JOB_STATE_FAILED`.
	ExecutionStageStateExecutionStageStateJobStateDraining = ExecutionStageStateExecutionStageState("JOB_STATE_DRAINING")
	// `JOB_STATE_DRAINED` indicates that the job has been drained. A drained job terminated by stopping pulling from its input sources and processing any data that remained in-flight when draining was requested. This state is a terminal state, may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_DRAINING`.
	ExecutionStageStateExecutionStageStateJobStateDrained = ExecutionStageStateExecutionStageState("JOB_STATE_DRAINED")
	// `JOB_STATE_PENDING` indicates that the job has been created but is not yet running. Jobs that are pending may only transition to `JOB_STATE_RUNNING`, or `JOB_STATE_FAILED`.
	ExecutionStageStateExecutionStageStateJobStatePending = ExecutionStageStateExecutionStageState("JOB_STATE_PENDING")
	// `JOB_STATE_CANCELLING` indicates that the job has been explicitly cancelled and is in the process of stopping. Jobs that are cancelling may only transition to `JOB_STATE_CANCELLED` or `JOB_STATE_FAILED`.
	ExecutionStageStateExecutionStageStateJobStateCancelling = ExecutionStageStateExecutionStageState("JOB_STATE_CANCELLING")
	// `JOB_STATE_QUEUED` indicates that the job has been created but is being delayed until launch. Jobs that are queued may only transition to `JOB_STATE_PENDING` or `JOB_STATE_CANCELLED`.
	ExecutionStageStateExecutionStageStateJobStateQueued = ExecutionStageStateExecutionStageState("JOB_STATE_QUEUED")
	// `JOB_STATE_RESOURCE_CLEANING_UP` indicates that the batch job's associated resources are currently being cleaned up after a successful run. Currently, this is an opt-in feature, please reach out to Cloud support team if you are interested.
	ExecutionStageStateExecutionStageStateJobStateResourceCleaningUp = ExecutionStageStateExecutionStageState("JOB_STATE_RESOURCE_CLEANING_UP")
)

func (ExecutionStageStateExecutionStageState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ExecutionStageStateExecutionStageState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStageStateExecutionStageState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStageStateExecutionStageState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExecutionStageStateExecutionStageState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of transform this stage is executing.
type ExecutionStageSummaryKind pulumi.String

const (
	// Unrecognized transform type.
	ExecutionStageSummaryKindUnknownKind = ExecutionStageSummaryKind("UNKNOWN_KIND")
	// ParDo transform.
	ExecutionStageSummaryKindParDoKind = ExecutionStageSummaryKind("PAR_DO_KIND")
	// Group By Key transform.
	ExecutionStageSummaryKindGroupByKeyKind = ExecutionStageSummaryKind("GROUP_BY_KEY_KIND")
	// Flatten transform.
	ExecutionStageSummaryKindFlattenKind = ExecutionStageSummaryKind("FLATTEN_KIND")
	// Read transform.
	ExecutionStageSummaryKindReadKind = ExecutionStageSummaryKind("READ_KIND")
	// Write transform.
	ExecutionStageSummaryKindWriteKind = ExecutionStageSummaryKind("WRITE_KIND")
	// Constructs from a constant value, such as with Create.of.
	ExecutionStageSummaryKindConstantKind = ExecutionStageSummaryKind("CONSTANT_KIND")
	// Creates a Singleton view of a collection.
	ExecutionStageSummaryKindSingletonKind = ExecutionStageSummaryKind("SINGLETON_KIND")
	// Opening or closing a shuffle session, often as part of a GroupByKey.
	ExecutionStageSummaryKindShuffleKind = ExecutionStageSummaryKind("SHUFFLE_KIND")
)

func (ExecutionStageSummaryKind) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e ExecutionStageSummaryKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStageSummaryKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ExecutionStageSummaryKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ExecutionStageSummaryKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.
type JobCurrentState pulumi.String

const (
	// The job's run state isn't specified.
	JobCurrentStateJobStateUnknown = JobCurrentState("JOB_STATE_UNKNOWN")
	// `JOB_STATE_STOPPED` indicates that the job has not yet started to run.
	JobCurrentStateJobStateStopped = JobCurrentState("JOB_STATE_STOPPED")
	// `JOB_STATE_RUNNING` indicates that the job is currently running.
	JobCurrentStateJobStateRunning = JobCurrentState("JOB_STATE_RUNNING")
	// `JOB_STATE_DONE` indicates that the job has successfully completed. This is a terminal job state. This state may be set by the Cloud Dataflow service, as a transition from `JOB_STATE_RUNNING`. It may also be set via a Cloud Dataflow `UpdateJob` call, if the job has not yet reached a terminal state.
	JobCurrentStateJobStateDone = JobCurrentState("JOB_STATE_DONE")
	// `JOB_STATE_FAILED` indicates that the job has failed. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
	JobCurrentStateJobStateFailed = JobCurrentState("JOB_STATE_FAILED")
	// `JOB_STATE_CANCELLED` indicates that the job has been explicitly cancelled. This is a terminal job state. This state may only be set via a Cloud Dataflow `UpdateJob` call, and only if the job has not yet reached another terminal state.
	JobCurrentStateJobStateCancelled = JobCurrentState("JOB_STATE_CANCELLED")
	// `JOB_STATE_UPDATED` indicates that the job was successfully updated, meaning that this job was stopped and another job was started, inheriting state from this one. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
	JobCurrentStateJobStateUpdated = JobCurrentState("JOB_STATE_UPDATED")
	// `JOB_STATE_DRAINING` indicates that the job is in the process of draining. A draining job has stopped pulling from its input sources and is processing any data that remains in-flight. This state may be set via a Cloud Dataflow `UpdateJob` call, but only as a transition from `JOB_STATE_RUNNING`. Jobs that are draining may only transition to `JOB_STATE_DRAINED`, `JOB_STATE_CANCELLED`, or `JOB_STATE_FAILED`.
	JobCurrentStateJobStateDraining = JobCurrentState("JOB_STATE_DRAINING")
	// `JOB_STATE_DRAINED` indicates that the job has been drained. A drained job terminated by stopping pulling from its input sources and processing any data that remained in-flight when draining was requested. This state is a terminal state, may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_DRAINING`.
	JobCurrentStateJobStateDrained = JobCurrentState("JOB_STATE_DRAINED")
	// `JOB_STATE_PENDING` indicates that the job has been created but is not yet running. Jobs that are pending may only transition to `JOB_STATE_RUNNING`, or `JOB_STATE_FAILED`.
	JobCurrentStateJobStatePending = JobCurrentState("JOB_STATE_PENDING")
	// `JOB_STATE_CANCELLING` indicates that the job has been explicitly cancelled and is in the process of stopping. Jobs that are cancelling may only transition to `JOB_STATE_CANCELLED` or `JOB_STATE_FAILED`.
	JobCurrentStateJobStateCancelling = JobCurrentState("JOB_STATE_CANCELLING")
	// `JOB_STATE_QUEUED` indicates that the job has been created but is being delayed until launch. Jobs that are queued may only transition to `JOB_STATE_PENDING` or `JOB_STATE_CANCELLED`.
	JobCurrentStateJobStateQueued = JobCurrentState("JOB_STATE_QUEUED")
	// `JOB_STATE_RESOURCE_CLEANING_UP` indicates that the batch job's associated resources are currently being cleaned up after a successful run. Currently, this is an opt-in feature, please reach out to Cloud support team if you are interested.
	JobCurrentStateJobStateResourceCleaningUp = JobCurrentState("JOB_STATE_RESOURCE_CLEANING_UP")
)

func (JobCurrentState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e JobCurrentState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobCurrentState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobCurrentState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JobCurrentState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The job's requested state. `UpdateJob` may be used to switch between the `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING` states, by setting requested_state. `UpdateJob` may also be used to directly set a job's requested state to `JOB_STATE_CANCELLED` or `JOB_STATE_DONE`, irrevocably terminating the job if it has not already reached a terminal state.
type JobRequestedState pulumi.String

const (
	// The job's run state isn't specified.
	JobRequestedStateJobStateUnknown = JobRequestedState("JOB_STATE_UNKNOWN")
	// `JOB_STATE_STOPPED` indicates that the job has not yet started to run.
	JobRequestedStateJobStateStopped = JobRequestedState("JOB_STATE_STOPPED")
	// `JOB_STATE_RUNNING` indicates that the job is currently running.
	JobRequestedStateJobStateRunning = JobRequestedState("JOB_STATE_RUNNING")
	// `JOB_STATE_DONE` indicates that the job has successfully completed. This is a terminal job state. This state may be set by the Cloud Dataflow service, as a transition from `JOB_STATE_RUNNING`. It may also be set via a Cloud Dataflow `UpdateJob` call, if the job has not yet reached a terminal state.
	JobRequestedStateJobStateDone = JobRequestedState("JOB_STATE_DONE")
	// `JOB_STATE_FAILED` indicates that the job has failed. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
	JobRequestedStateJobStateFailed = JobRequestedState("JOB_STATE_FAILED")
	// `JOB_STATE_CANCELLED` indicates that the job has been explicitly cancelled. This is a terminal job state. This state may only be set via a Cloud Dataflow `UpdateJob` call, and only if the job has not yet reached another terminal state.
	JobRequestedStateJobStateCancelled = JobRequestedState("JOB_STATE_CANCELLED")
	// `JOB_STATE_UPDATED` indicates that the job was successfully updated, meaning that this job was stopped and another job was started, inheriting state from this one. This is a terminal job state. This state may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_RUNNING`.
	JobRequestedStateJobStateUpdated = JobRequestedState("JOB_STATE_UPDATED")
	// `JOB_STATE_DRAINING` indicates that the job is in the process of draining. A draining job has stopped pulling from its input sources and is processing any data that remains in-flight. This state may be set via a Cloud Dataflow `UpdateJob` call, but only as a transition from `JOB_STATE_RUNNING`. Jobs that are draining may only transition to `JOB_STATE_DRAINED`, `JOB_STATE_CANCELLED`, or `JOB_STATE_FAILED`.
	JobRequestedStateJobStateDraining = JobRequestedState("JOB_STATE_DRAINING")
	// `JOB_STATE_DRAINED` indicates that the job has been drained. A drained job terminated by stopping pulling from its input sources and processing any data that remained in-flight when draining was requested. This state is a terminal state, may only be set by the Cloud Dataflow service, and only as a transition from `JOB_STATE_DRAINING`.
	JobRequestedStateJobStateDrained = JobRequestedState("JOB_STATE_DRAINED")
	// `JOB_STATE_PENDING` indicates that the job has been created but is not yet running. Jobs that are pending may only transition to `JOB_STATE_RUNNING`, or `JOB_STATE_FAILED`.
	JobRequestedStateJobStatePending = JobRequestedState("JOB_STATE_PENDING")
	// `JOB_STATE_CANCELLING` indicates that the job has been explicitly cancelled and is in the process of stopping. Jobs that are cancelling may only transition to `JOB_STATE_CANCELLED` or `JOB_STATE_FAILED`.
	JobRequestedStateJobStateCancelling = JobRequestedState("JOB_STATE_CANCELLING")
	// `JOB_STATE_QUEUED` indicates that the job has been created but is being delayed until launch. Jobs that are queued may only transition to `JOB_STATE_PENDING` or `JOB_STATE_CANCELLED`.
	JobRequestedStateJobStateQueued = JobRequestedState("JOB_STATE_QUEUED")
	// `JOB_STATE_RESOURCE_CLEANING_UP` indicates that the batch job's associated resources are currently being cleaned up after a successful run. Currently, this is an opt-in feature, please reach out to Cloud support team if you are interested.
	JobRequestedStateJobStateResourceCleaningUp = JobRequestedState("JOB_STATE_RESOURCE_CLEANING_UP")
)

func (JobRequestedState) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e JobRequestedState) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobRequestedState) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobRequestedState) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JobRequestedState) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The type of Cloud Dataflow job.
type JobType pulumi.String

const (
	// The type of the job is unspecified, or unknown.
	JobTypeJobTypeUnknown = JobType("JOB_TYPE_UNKNOWN")
	// A batch job with a well-defined end point: data is read, data is processed, data is written, and the job is done.
	JobTypeJobTypeBatch = JobType("JOB_TYPE_BATCH")
	// A continuously streaming job with no end: data is read, processed, and written continuously.
	JobTypeJobTypeStreaming = JobType("JOB_TYPE_STREAMING")
)

func (JobType) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e JobType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JobType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JobType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Configuration for VM IPs.
type RuntimeEnvironmentIpConfiguration pulumi.String

const (
	// The configuration is unknown, or unspecified.
	RuntimeEnvironmentIpConfigurationWorkerIpUnspecified = RuntimeEnvironmentIpConfiguration("WORKER_IP_UNSPECIFIED")
	// Workers should have public IP addresses.
	RuntimeEnvironmentIpConfigurationWorkerIpPublic = RuntimeEnvironmentIpConfiguration("WORKER_IP_PUBLIC")
	// Workers should have private IP addresses.
	RuntimeEnvironmentIpConfigurationWorkerIpPrivate = RuntimeEnvironmentIpConfiguration("WORKER_IP_PRIVATE")
)

func (RuntimeEnvironmentIpConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RuntimeEnvironmentIpConfiguration) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuntimeEnvironmentIpConfiguration) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RuntimeEnvironmentIpConfiguration) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RuntimeEnvironmentIpConfiguration) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The support status for this SDK version.
type SdkVersionSdkSupportStatus pulumi.String

const (
	// Cloud Dataflow is unaware of this version.
	SdkVersionSdkSupportStatusUnknown = SdkVersionSdkSupportStatus("UNKNOWN")
	// This is a known version of an SDK, and is supported.
	SdkVersionSdkSupportStatusSupported = SdkVersionSdkSupportStatus("SUPPORTED")
	// A newer version of the SDK family exists, and an update is recommended.
	SdkVersionSdkSupportStatusStale = SdkVersionSdkSupportStatus("STALE")
	// This version of the SDK is deprecated and will eventually be no longer supported.
	SdkVersionSdkSupportStatusDeprecated = SdkVersionSdkSupportStatus("DEPRECATED")
	// Support for this SDK version has ended and it should no longer be used.
	SdkVersionSdkSupportStatusUnsupported = SdkVersionSdkSupportStatus("UNSUPPORTED")
)

func (SdkVersionSdkSupportStatus) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e SdkVersionSdkSupportStatus) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e SdkVersionSdkSupportStatus) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e SdkVersionSdkSupportStatus) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e SdkVersionSdkSupportStatus) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Type of transform.
type TransformSummaryKind pulumi.String

const (
	// Unrecognized transform type.
	TransformSummaryKindUnknownKind = TransformSummaryKind("UNKNOWN_KIND")
	// ParDo transform.
	TransformSummaryKindParDoKind = TransformSummaryKind("PAR_DO_KIND")
	// Group By Key transform.
	TransformSummaryKindGroupByKeyKind = TransformSummaryKind("GROUP_BY_KEY_KIND")
	// Flatten transform.
	TransformSummaryKindFlattenKind = TransformSummaryKind("FLATTEN_KIND")
	// Read transform.
	TransformSummaryKindReadKind = TransformSummaryKind("READ_KIND")
	// Write transform.
	TransformSummaryKindWriteKind = TransformSummaryKind("WRITE_KIND")
	// Constructs from a constant value, such as with Create.of.
	TransformSummaryKindConstantKind = TransformSummaryKind("CONSTANT_KIND")
	// Creates a Singleton view of a collection.
	TransformSummaryKindSingletonKind = TransformSummaryKind("SINGLETON_KIND")
	// Opening or closing a shuffle session, often as part of a GroupByKey.
	TransformSummaryKindShuffleKind = TransformSummaryKind("SHUFFLE_KIND")
)

func (TransformSummaryKind) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TransformSummaryKind) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformSummaryKind) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e TransformSummaryKind) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e TransformSummaryKind) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.
type WorkerPoolDefaultPackageSet pulumi.String

const (
	// The default set of packages to stage is unknown, or unspecified.
	WorkerPoolDefaultPackageSetDefaultPackageSetUnknown = WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_UNKNOWN")
	// Indicates that no packages should be staged at the worker unless explicitly specified by the job.
	WorkerPoolDefaultPackageSetDefaultPackageSetNone = WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_NONE")
	// Stage packages typically useful to workers written in Java.
	WorkerPoolDefaultPackageSetDefaultPackageSetJava = WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_JAVA")
	// Stage pacakges typically useful to workers written in Python.
	WorkerPoolDefaultPackageSetDefaultPackageSetPython = WorkerPoolDefaultPackageSet("DEFAULT_PACKAGE_SET_PYTHON")
)

func (WorkerPoolDefaultPackageSet) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e WorkerPoolDefaultPackageSet) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkerPoolDefaultPackageSet) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkerPoolDefaultPackageSet) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WorkerPoolDefaultPackageSet) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Configuration for VM IPs.
type WorkerPoolIpConfiguration pulumi.String

const (
	// The configuration is unknown, or unspecified.
	WorkerPoolIpConfigurationWorkerIpUnspecified = WorkerPoolIpConfiguration("WORKER_IP_UNSPECIFIED")
	// Workers should have public IP addresses.
	WorkerPoolIpConfigurationWorkerIpPublic = WorkerPoolIpConfiguration("WORKER_IP_PUBLIC")
	// Workers should have private IP addresses.
	WorkerPoolIpConfigurationWorkerIpPrivate = WorkerPoolIpConfiguration("WORKER_IP_PRIVATE")
)

func (WorkerPoolIpConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e WorkerPoolIpConfiguration) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkerPoolIpConfiguration) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkerPoolIpConfiguration) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WorkerPoolIpConfiguration) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.
type WorkerPoolTeardownPolicy pulumi.String

const (
	// The teardown policy isn't specified, or is unknown.
	WorkerPoolTeardownPolicyTeardownPolicyUnknown = WorkerPoolTeardownPolicy("TEARDOWN_POLICY_UNKNOWN")
	// Always teardown the resource.
	WorkerPoolTeardownPolicyTeardownAlways = WorkerPoolTeardownPolicy("TEARDOWN_ALWAYS")
	// Teardown the resource on success. This is useful for debugging failures.
	WorkerPoolTeardownPolicyTeardownOnSuccess = WorkerPoolTeardownPolicy("TEARDOWN_ON_SUCCESS")
	// Never teardown the resource. This is useful for debugging and development.
	WorkerPoolTeardownPolicyTeardownNever = WorkerPoolTeardownPolicy("TEARDOWN_NEVER")
)

func (WorkerPoolTeardownPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e WorkerPoolTeardownPolicy) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkerPoolTeardownPolicy) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e WorkerPoolTeardownPolicy) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e WorkerPoolTeardownPolicy) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}
