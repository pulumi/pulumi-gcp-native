// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// AVRO file format configuration.
type AvroFileFormat struct {
}

// AvroFileFormatInput is an input type that accepts AvroFileFormatArgs and AvroFileFormatOutput values.
// You can construct a concrete instance of `AvroFileFormatInput` via:
//
//          AvroFileFormatArgs{...}
type AvroFileFormatInput interface {
	pulumi.Input

	ToAvroFileFormatOutput() AvroFileFormatOutput
	ToAvroFileFormatOutputWithContext(context.Context) AvroFileFormatOutput
}

// AVRO file format configuration.
type AvroFileFormatArgs struct {
}

func (AvroFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFileFormat)(nil)).Elem()
}

func (i AvroFileFormatArgs) ToAvroFileFormatOutput() AvroFileFormatOutput {
	return i.ToAvroFileFormatOutputWithContext(context.Background())
}

func (i AvroFileFormatArgs) ToAvroFileFormatOutputWithContext(ctx context.Context) AvroFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatOutput)
}

func (i AvroFileFormatArgs) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return i.ToAvroFileFormatPtrOutputWithContext(context.Background())
}

func (i AvroFileFormatArgs) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatOutput).ToAvroFileFormatPtrOutputWithContext(ctx)
}

// AvroFileFormatPtrInput is an input type that accepts AvroFileFormatArgs, AvroFileFormatPtr and AvroFileFormatPtrOutput values.
// You can construct a concrete instance of `AvroFileFormatPtrInput` via:
//
//          AvroFileFormatArgs{...}
//
//  or:
//
//          nil
type AvroFileFormatPtrInput interface {
	pulumi.Input

	ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput
	ToAvroFileFormatPtrOutputWithContext(context.Context) AvroFileFormatPtrOutput
}

type avroFileFormatPtrType AvroFileFormatArgs

func AvroFileFormatPtr(v *AvroFileFormatArgs) AvroFileFormatPtrInput {
	return (*avroFileFormatPtrType)(v)
}

func (*avroFileFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFileFormat)(nil)).Elem()
}

func (i *avroFileFormatPtrType) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return i.ToAvroFileFormatPtrOutputWithContext(context.Background())
}

func (i *avroFileFormatPtrType) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatPtrOutput)
}

// AVRO file format configuration.
type AvroFileFormatOutput struct{ *pulumi.OutputState }

func (AvroFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFileFormat)(nil)).Elem()
}

func (o AvroFileFormatOutput) ToAvroFileFormatOutput() AvroFileFormatOutput {
	return o
}

func (o AvroFileFormatOutput) ToAvroFileFormatOutputWithContext(ctx context.Context) AvroFileFormatOutput {
	return o
}

func (o AvroFileFormatOutput) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return o.ToAvroFileFormatPtrOutputWithContext(context.Background())
}

func (o AvroFileFormatOutput) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroFileFormat) *AvroFileFormat {
		return &v
	}).(AvroFileFormatPtrOutput)
}

type AvroFileFormatPtrOutput struct{ *pulumi.OutputState }

func (AvroFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFileFormat)(nil)).Elem()
}

func (o AvroFileFormatPtrOutput) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return o
}

func (o AvroFileFormatPtrOutput) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return o
}

func (o AvroFileFormatPtrOutput) Elem() AvroFileFormatOutput {
	return o.ApplyT(func(v *AvroFileFormat) AvroFileFormat {
		if v != nil {
			return *v
		}
		var ret AvroFileFormat
		return ret
	}).(AvroFileFormatOutput)
}

// AVRO file format configuration.
type AvroFileFormatResponse struct {
}

// AvroFileFormatResponseInput is an input type that accepts AvroFileFormatResponseArgs and AvroFileFormatResponseOutput values.
// You can construct a concrete instance of `AvroFileFormatResponseInput` via:
//
//          AvroFileFormatResponseArgs{...}
type AvroFileFormatResponseInput interface {
	pulumi.Input

	ToAvroFileFormatResponseOutput() AvroFileFormatResponseOutput
	ToAvroFileFormatResponseOutputWithContext(context.Context) AvroFileFormatResponseOutput
}

// AVRO file format configuration.
type AvroFileFormatResponseArgs struct {
}

func (AvroFileFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFileFormatResponse)(nil)).Elem()
}

func (i AvroFileFormatResponseArgs) ToAvroFileFormatResponseOutput() AvroFileFormatResponseOutput {
	return i.ToAvroFileFormatResponseOutputWithContext(context.Background())
}

func (i AvroFileFormatResponseArgs) ToAvroFileFormatResponseOutputWithContext(ctx context.Context) AvroFileFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatResponseOutput)
}

func (i AvroFileFormatResponseArgs) ToAvroFileFormatResponsePtrOutput() AvroFileFormatResponsePtrOutput {
	return i.ToAvroFileFormatResponsePtrOutputWithContext(context.Background())
}

func (i AvroFileFormatResponseArgs) ToAvroFileFormatResponsePtrOutputWithContext(ctx context.Context) AvroFileFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatResponseOutput).ToAvroFileFormatResponsePtrOutputWithContext(ctx)
}

// AvroFileFormatResponsePtrInput is an input type that accepts AvroFileFormatResponseArgs, AvroFileFormatResponsePtr and AvroFileFormatResponsePtrOutput values.
// You can construct a concrete instance of `AvroFileFormatResponsePtrInput` via:
//
//          AvroFileFormatResponseArgs{...}
//
//  or:
//
//          nil
type AvroFileFormatResponsePtrInput interface {
	pulumi.Input

	ToAvroFileFormatResponsePtrOutput() AvroFileFormatResponsePtrOutput
	ToAvroFileFormatResponsePtrOutputWithContext(context.Context) AvroFileFormatResponsePtrOutput
}

type avroFileFormatResponsePtrType AvroFileFormatResponseArgs

func AvroFileFormatResponsePtr(v *AvroFileFormatResponseArgs) AvroFileFormatResponsePtrInput {
	return (*avroFileFormatResponsePtrType)(v)
}

func (*avroFileFormatResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFileFormatResponse)(nil)).Elem()
}

func (i *avroFileFormatResponsePtrType) ToAvroFileFormatResponsePtrOutput() AvroFileFormatResponsePtrOutput {
	return i.ToAvroFileFormatResponsePtrOutputWithContext(context.Background())
}

func (i *avroFileFormatResponsePtrType) ToAvroFileFormatResponsePtrOutputWithContext(ctx context.Context) AvroFileFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatResponsePtrOutput)
}

// AVRO file format configuration.
type AvroFileFormatResponseOutput struct{ *pulumi.OutputState }

func (AvroFileFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFileFormatResponse)(nil)).Elem()
}

func (o AvroFileFormatResponseOutput) ToAvroFileFormatResponseOutput() AvroFileFormatResponseOutput {
	return o
}

func (o AvroFileFormatResponseOutput) ToAvroFileFormatResponseOutputWithContext(ctx context.Context) AvroFileFormatResponseOutput {
	return o
}

func (o AvroFileFormatResponseOutput) ToAvroFileFormatResponsePtrOutput() AvroFileFormatResponsePtrOutput {
	return o.ToAvroFileFormatResponsePtrOutputWithContext(context.Background())
}

func (o AvroFileFormatResponseOutput) ToAvroFileFormatResponsePtrOutputWithContext(ctx context.Context) AvroFileFormatResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroFileFormatResponse) *AvroFileFormatResponse {
		return &v
	}).(AvroFileFormatResponsePtrOutput)
}

type AvroFileFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (AvroFileFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFileFormatResponse)(nil)).Elem()
}

func (o AvroFileFormatResponsePtrOutput) ToAvroFileFormatResponsePtrOutput() AvroFileFormatResponsePtrOutput {
	return o
}

func (o AvroFileFormatResponsePtrOutput) ToAvroFileFormatResponsePtrOutputWithContext(ctx context.Context) AvroFileFormatResponsePtrOutput {
	return o
}

func (o AvroFileFormatResponsePtrOutput) Elem() AvroFileFormatResponseOutput {
	return o.ApplyT(func(v *AvroFileFormatResponse) AvroFileFormatResponse {
		if v != nil {
			return *v
		}
		var ret AvroFileFormatResponse
		return ret
	}).(AvroFileFormatResponseOutput)
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategy struct {
	// MySQL data source objects to avoid backfilling.
	MysqlExcludedObjects *MysqlRdbms `pulumi:"mysqlExcludedObjects"`
	// Oracle data source objects to avoid backfilling.
	OracleExcludedObjects *OracleRdbms `pulumi:"oracleExcludedObjects"`
}

// BackfillAllStrategyInput is an input type that accepts BackfillAllStrategyArgs and BackfillAllStrategyOutput values.
// You can construct a concrete instance of `BackfillAllStrategyInput` via:
//
//          BackfillAllStrategyArgs{...}
type BackfillAllStrategyInput interface {
	pulumi.Input

	ToBackfillAllStrategyOutput() BackfillAllStrategyOutput
	ToBackfillAllStrategyOutputWithContext(context.Context) BackfillAllStrategyOutput
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyArgs struct {
	// MySQL data source objects to avoid backfilling.
	MysqlExcludedObjects MysqlRdbmsPtrInput `pulumi:"mysqlExcludedObjects"`
	// Oracle data source objects to avoid backfilling.
	OracleExcludedObjects OracleRdbmsPtrInput `pulumi:"oracleExcludedObjects"`
}

func (BackfillAllStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillAllStrategy)(nil)).Elem()
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyOutput() BackfillAllStrategyOutput {
	return i.ToBackfillAllStrategyOutputWithContext(context.Background())
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyOutputWithContext(ctx context.Context) BackfillAllStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyOutput)
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return i.ToBackfillAllStrategyPtrOutputWithContext(context.Background())
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyOutput).ToBackfillAllStrategyPtrOutputWithContext(ctx)
}

// BackfillAllStrategyPtrInput is an input type that accepts BackfillAllStrategyArgs, BackfillAllStrategyPtr and BackfillAllStrategyPtrOutput values.
// You can construct a concrete instance of `BackfillAllStrategyPtrInput` via:
//
//          BackfillAllStrategyArgs{...}
//
//  or:
//
//          nil
type BackfillAllStrategyPtrInput interface {
	pulumi.Input

	ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput
	ToBackfillAllStrategyPtrOutputWithContext(context.Context) BackfillAllStrategyPtrOutput
}

type backfillAllStrategyPtrType BackfillAllStrategyArgs

func BackfillAllStrategyPtr(v *BackfillAllStrategyArgs) BackfillAllStrategyPtrInput {
	return (*backfillAllStrategyPtrType)(v)
}

func (*backfillAllStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillAllStrategy)(nil)).Elem()
}

func (i *backfillAllStrategyPtrType) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return i.ToBackfillAllStrategyPtrOutputWithContext(context.Background())
}

func (i *backfillAllStrategyPtrType) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyPtrOutput)
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyOutput struct{ *pulumi.OutputState }

func (BackfillAllStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillAllStrategy)(nil)).Elem()
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyOutput() BackfillAllStrategyOutput {
	return o
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyOutputWithContext(ctx context.Context) BackfillAllStrategyOutput {
	return o
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return o.ToBackfillAllStrategyPtrOutputWithContext(context.Background())
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackfillAllStrategy) *BackfillAllStrategy {
		return &v
	}).(BackfillAllStrategyPtrOutput)
}

// MySQL data source objects to avoid backfilling.
func (o BackfillAllStrategyOutput) MysqlExcludedObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v BackfillAllStrategy) *MysqlRdbms { return v.MysqlExcludedObjects }).(MysqlRdbmsPtrOutput)
}

// Oracle data source objects to avoid backfilling.
func (o BackfillAllStrategyOutput) OracleExcludedObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v BackfillAllStrategy) *OracleRdbms { return v.OracleExcludedObjects }).(OracleRdbmsPtrOutput)
}

type BackfillAllStrategyPtrOutput struct{ *pulumi.OutputState }

func (BackfillAllStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillAllStrategy)(nil)).Elem()
}

func (o BackfillAllStrategyPtrOutput) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return o
}

func (o BackfillAllStrategyPtrOutput) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return o
}

func (o BackfillAllStrategyPtrOutput) Elem() BackfillAllStrategyOutput {
	return o.ApplyT(func(v *BackfillAllStrategy) BackfillAllStrategy {
		if v != nil {
			return *v
		}
		var ret BackfillAllStrategy
		return ret
	}).(BackfillAllStrategyOutput)
}

// MySQL data source objects to avoid backfilling.
func (o BackfillAllStrategyPtrOutput) MysqlExcludedObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v *BackfillAllStrategy) *MysqlRdbms {
		if v == nil {
			return nil
		}
		return v.MysqlExcludedObjects
	}).(MysqlRdbmsPtrOutput)
}

// Oracle data source objects to avoid backfilling.
func (o BackfillAllStrategyPtrOutput) OracleExcludedObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v *BackfillAllStrategy) *OracleRdbms {
		if v == nil {
			return nil
		}
		return v.OracleExcludedObjects
	}).(OracleRdbmsPtrOutput)
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyResponse struct {
	// MySQL data source objects to avoid backfilling.
	MysqlExcludedObjects MysqlRdbmsResponse `pulumi:"mysqlExcludedObjects"`
	// Oracle data source objects to avoid backfilling.
	OracleExcludedObjects OracleRdbmsResponse `pulumi:"oracleExcludedObjects"`
}

// BackfillAllStrategyResponseInput is an input type that accepts BackfillAllStrategyResponseArgs and BackfillAllStrategyResponseOutput values.
// You can construct a concrete instance of `BackfillAllStrategyResponseInput` via:
//
//          BackfillAllStrategyResponseArgs{...}
type BackfillAllStrategyResponseInput interface {
	pulumi.Input

	ToBackfillAllStrategyResponseOutput() BackfillAllStrategyResponseOutput
	ToBackfillAllStrategyResponseOutputWithContext(context.Context) BackfillAllStrategyResponseOutput
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyResponseArgs struct {
	// MySQL data source objects to avoid backfilling.
	MysqlExcludedObjects MysqlRdbmsResponseInput `pulumi:"mysqlExcludedObjects"`
	// Oracle data source objects to avoid backfilling.
	OracleExcludedObjects OracleRdbmsResponseInput `pulumi:"oracleExcludedObjects"`
}

func (BackfillAllStrategyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillAllStrategyResponse)(nil)).Elem()
}

func (i BackfillAllStrategyResponseArgs) ToBackfillAllStrategyResponseOutput() BackfillAllStrategyResponseOutput {
	return i.ToBackfillAllStrategyResponseOutputWithContext(context.Background())
}

func (i BackfillAllStrategyResponseArgs) ToBackfillAllStrategyResponseOutputWithContext(ctx context.Context) BackfillAllStrategyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyResponseOutput)
}

func (i BackfillAllStrategyResponseArgs) ToBackfillAllStrategyResponsePtrOutput() BackfillAllStrategyResponsePtrOutput {
	return i.ToBackfillAllStrategyResponsePtrOutputWithContext(context.Background())
}

func (i BackfillAllStrategyResponseArgs) ToBackfillAllStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillAllStrategyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyResponseOutput).ToBackfillAllStrategyResponsePtrOutputWithContext(ctx)
}

// BackfillAllStrategyResponsePtrInput is an input type that accepts BackfillAllStrategyResponseArgs, BackfillAllStrategyResponsePtr and BackfillAllStrategyResponsePtrOutput values.
// You can construct a concrete instance of `BackfillAllStrategyResponsePtrInput` via:
//
//          BackfillAllStrategyResponseArgs{...}
//
//  or:
//
//          nil
type BackfillAllStrategyResponsePtrInput interface {
	pulumi.Input

	ToBackfillAllStrategyResponsePtrOutput() BackfillAllStrategyResponsePtrOutput
	ToBackfillAllStrategyResponsePtrOutputWithContext(context.Context) BackfillAllStrategyResponsePtrOutput
}

type backfillAllStrategyResponsePtrType BackfillAllStrategyResponseArgs

func BackfillAllStrategyResponsePtr(v *BackfillAllStrategyResponseArgs) BackfillAllStrategyResponsePtrInput {
	return (*backfillAllStrategyResponsePtrType)(v)
}

func (*backfillAllStrategyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillAllStrategyResponse)(nil)).Elem()
}

func (i *backfillAllStrategyResponsePtrType) ToBackfillAllStrategyResponsePtrOutput() BackfillAllStrategyResponsePtrOutput {
	return i.ToBackfillAllStrategyResponsePtrOutputWithContext(context.Background())
}

func (i *backfillAllStrategyResponsePtrType) ToBackfillAllStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillAllStrategyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyResponsePtrOutput)
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyResponseOutput struct{ *pulumi.OutputState }

func (BackfillAllStrategyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillAllStrategyResponse)(nil)).Elem()
}

func (o BackfillAllStrategyResponseOutput) ToBackfillAllStrategyResponseOutput() BackfillAllStrategyResponseOutput {
	return o
}

func (o BackfillAllStrategyResponseOutput) ToBackfillAllStrategyResponseOutputWithContext(ctx context.Context) BackfillAllStrategyResponseOutput {
	return o
}

func (o BackfillAllStrategyResponseOutput) ToBackfillAllStrategyResponsePtrOutput() BackfillAllStrategyResponsePtrOutput {
	return o.ToBackfillAllStrategyResponsePtrOutputWithContext(context.Background())
}

func (o BackfillAllStrategyResponseOutput) ToBackfillAllStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillAllStrategyResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackfillAllStrategyResponse) *BackfillAllStrategyResponse {
		return &v
	}).(BackfillAllStrategyResponsePtrOutput)
}

// MySQL data source objects to avoid backfilling.
func (o BackfillAllStrategyResponseOutput) MysqlExcludedObjects() MysqlRdbmsResponseOutput {
	return o.ApplyT(func(v BackfillAllStrategyResponse) MysqlRdbmsResponse { return v.MysqlExcludedObjects }).(MysqlRdbmsResponseOutput)
}

// Oracle data source objects to avoid backfilling.
func (o BackfillAllStrategyResponseOutput) OracleExcludedObjects() OracleRdbmsResponseOutput {
	return o.ApplyT(func(v BackfillAllStrategyResponse) OracleRdbmsResponse { return v.OracleExcludedObjects }).(OracleRdbmsResponseOutput)
}

type BackfillAllStrategyResponsePtrOutput struct{ *pulumi.OutputState }

func (BackfillAllStrategyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillAllStrategyResponse)(nil)).Elem()
}

func (o BackfillAllStrategyResponsePtrOutput) ToBackfillAllStrategyResponsePtrOutput() BackfillAllStrategyResponsePtrOutput {
	return o
}

func (o BackfillAllStrategyResponsePtrOutput) ToBackfillAllStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillAllStrategyResponsePtrOutput {
	return o
}

func (o BackfillAllStrategyResponsePtrOutput) Elem() BackfillAllStrategyResponseOutput {
	return o.ApplyT(func(v *BackfillAllStrategyResponse) BackfillAllStrategyResponse {
		if v != nil {
			return *v
		}
		var ret BackfillAllStrategyResponse
		return ret
	}).(BackfillAllStrategyResponseOutput)
}

// MySQL data source objects to avoid backfilling.
func (o BackfillAllStrategyResponsePtrOutput) MysqlExcludedObjects() MysqlRdbmsResponsePtrOutput {
	return o.ApplyT(func(v *BackfillAllStrategyResponse) *MysqlRdbmsResponse {
		if v == nil {
			return nil
		}
		return &v.MysqlExcludedObjects
	}).(MysqlRdbmsResponsePtrOutput)
}

// Oracle data source objects to avoid backfilling.
func (o BackfillAllStrategyResponsePtrOutput) OracleExcludedObjects() OracleRdbmsResponsePtrOutput {
	return o.ApplyT(func(v *BackfillAllStrategyResponse) *OracleRdbmsResponse {
		if v == nil {
			return nil
		}
		return &v.OracleExcludedObjects
	}).(OracleRdbmsResponsePtrOutput)
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategy struct {
}

// BackfillNoneStrategyInput is an input type that accepts BackfillNoneStrategyArgs and BackfillNoneStrategyOutput values.
// You can construct a concrete instance of `BackfillNoneStrategyInput` via:
//
//          BackfillNoneStrategyArgs{...}
type BackfillNoneStrategyInput interface {
	pulumi.Input

	ToBackfillNoneStrategyOutput() BackfillNoneStrategyOutput
	ToBackfillNoneStrategyOutputWithContext(context.Context) BackfillNoneStrategyOutput
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyArgs struct {
}

func (BackfillNoneStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillNoneStrategy)(nil)).Elem()
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyOutput() BackfillNoneStrategyOutput {
	return i.ToBackfillNoneStrategyOutputWithContext(context.Background())
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyOutputWithContext(ctx context.Context) BackfillNoneStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyOutput)
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return i.ToBackfillNoneStrategyPtrOutputWithContext(context.Background())
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyOutput).ToBackfillNoneStrategyPtrOutputWithContext(ctx)
}

// BackfillNoneStrategyPtrInput is an input type that accepts BackfillNoneStrategyArgs, BackfillNoneStrategyPtr and BackfillNoneStrategyPtrOutput values.
// You can construct a concrete instance of `BackfillNoneStrategyPtrInput` via:
//
//          BackfillNoneStrategyArgs{...}
//
//  or:
//
//          nil
type BackfillNoneStrategyPtrInput interface {
	pulumi.Input

	ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput
	ToBackfillNoneStrategyPtrOutputWithContext(context.Context) BackfillNoneStrategyPtrOutput
}

type backfillNoneStrategyPtrType BackfillNoneStrategyArgs

func BackfillNoneStrategyPtr(v *BackfillNoneStrategyArgs) BackfillNoneStrategyPtrInput {
	return (*backfillNoneStrategyPtrType)(v)
}

func (*backfillNoneStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillNoneStrategy)(nil)).Elem()
}

func (i *backfillNoneStrategyPtrType) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return i.ToBackfillNoneStrategyPtrOutputWithContext(context.Background())
}

func (i *backfillNoneStrategyPtrType) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyPtrOutput)
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyOutput struct{ *pulumi.OutputState }

func (BackfillNoneStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillNoneStrategy)(nil)).Elem()
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyOutput() BackfillNoneStrategyOutput {
	return o
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyOutputWithContext(ctx context.Context) BackfillNoneStrategyOutput {
	return o
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return o.ToBackfillNoneStrategyPtrOutputWithContext(context.Background())
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackfillNoneStrategy) *BackfillNoneStrategy {
		return &v
	}).(BackfillNoneStrategyPtrOutput)
}

type BackfillNoneStrategyPtrOutput struct{ *pulumi.OutputState }

func (BackfillNoneStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillNoneStrategy)(nil)).Elem()
}

func (o BackfillNoneStrategyPtrOutput) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return o
}

func (o BackfillNoneStrategyPtrOutput) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return o
}

func (o BackfillNoneStrategyPtrOutput) Elem() BackfillNoneStrategyOutput {
	return o.ApplyT(func(v *BackfillNoneStrategy) BackfillNoneStrategy {
		if v != nil {
			return *v
		}
		var ret BackfillNoneStrategy
		return ret
	}).(BackfillNoneStrategyOutput)
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyResponse struct {
}

// BackfillNoneStrategyResponseInput is an input type that accepts BackfillNoneStrategyResponseArgs and BackfillNoneStrategyResponseOutput values.
// You can construct a concrete instance of `BackfillNoneStrategyResponseInput` via:
//
//          BackfillNoneStrategyResponseArgs{...}
type BackfillNoneStrategyResponseInput interface {
	pulumi.Input

	ToBackfillNoneStrategyResponseOutput() BackfillNoneStrategyResponseOutput
	ToBackfillNoneStrategyResponseOutputWithContext(context.Context) BackfillNoneStrategyResponseOutput
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyResponseArgs struct {
}

func (BackfillNoneStrategyResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillNoneStrategyResponse)(nil)).Elem()
}

func (i BackfillNoneStrategyResponseArgs) ToBackfillNoneStrategyResponseOutput() BackfillNoneStrategyResponseOutput {
	return i.ToBackfillNoneStrategyResponseOutputWithContext(context.Background())
}

func (i BackfillNoneStrategyResponseArgs) ToBackfillNoneStrategyResponseOutputWithContext(ctx context.Context) BackfillNoneStrategyResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyResponseOutput)
}

func (i BackfillNoneStrategyResponseArgs) ToBackfillNoneStrategyResponsePtrOutput() BackfillNoneStrategyResponsePtrOutput {
	return i.ToBackfillNoneStrategyResponsePtrOutputWithContext(context.Background())
}

func (i BackfillNoneStrategyResponseArgs) ToBackfillNoneStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillNoneStrategyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyResponseOutput).ToBackfillNoneStrategyResponsePtrOutputWithContext(ctx)
}

// BackfillNoneStrategyResponsePtrInput is an input type that accepts BackfillNoneStrategyResponseArgs, BackfillNoneStrategyResponsePtr and BackfillNoneStrategyResponsePtrOutput values.
// You can construct a concrete instance of `BackfillNoneStrategyResponsePtrInput` via:
//
//          BackfillNoneStrategyResponseArgs{...}
//
//  or:
//
//          nil
type BackfillNoneStrategyResponsePtrInput interface {
	pulumi.Input

	ToBackfillNoneStrategyResponsePtrOutput() BackfillNoneStrategyResponsePtrOutput
	ToBackfillNoneStrategyResponsePtrOutputWithContext(context.Context) BackfillNoneStrategyResponsePtrOutput
}

type backfillNoneStrategyResponsePtrType BackfillNoneStrategyResponseArgs

func BackfillNoneStrategyResponsePtr(v *BackfillNoneStrategyResponseArgs) BackfillNoneStrategyResponsePtrInput {
	return (*backfillNoneStrategyResponsePtrType)(v)
}

func (*backfillNoneStrategyResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillNoneStrategyResponse)(nil)).Elem()
}

func (i *backfillNoneStrategyResponsePtrType) ToBackfillNoneStrategyResponsePtrOutput() BackfillNoneStrategyResponsePtrOutput {
	return i.ToBackfillNoneStrategyResponsePtrOutputWithContext(context.Background())
}

func (i *backfillNoneStrategyResponsePtrType) ToBackfillNoneStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillNoneStrategyResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyResponsePtrOutput)
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyResponseOutput struct{ *pulumi.OutputState }

func (BackfillNoneStrategyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillNoneStrategyResponse)(nil)).Elem()
}

func (o BackfillNoneStrategyResponseOutput) ToBackfillNoneStrategyResponseOutput() BackfillNoneStrategyResponseOutput {
	return o
}

func (o BackfillNoneStrategyResponseOutput) ToBackfillNoneStrategyResponseOutputWithContext(ctx context.Context) BackfillNoneStrategyResponseOutput {
	return o
}

func (o BackfillNoneStrategyResponseOutput) ToBackfillNoneStrategyResponsePtrOutput() BackfillNoneStrategyResponsePtrOutput {
	return o.ToBackfillNoneStrategyResponsePtrOutputWithContext(context.Background())
}

func (o BackfillNoneStrategyResponseOutput) ToBackfillNoneStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillNoneStrategyResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackfillNoneStrategyResponse) *BackfillNoneStrategyResponse {
		return &v
	}).(BackfillNoneStrategyResponsePtrOutput)
}

type BackfillNoneStrategyResponsePtrOutput struct{ *pulumi.OutputState }

func (BackfillNoneStrategyResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillNoneStrategyResponse)(nil)).Elem()
}

func (o BackfillNoneStrategyResponsePtrOutput) ToBackfillNoneStrategyResponsePtrOutput() BackfillNoneStrategyResponsePtrOutput {
	return o
}

func (o BackfillNoneStrategyResponsePtrOutput) ToBackfillNoneStrategyResponsePtrOutputWithContext(ctx context.Context) BackfillNoneStrategyResponsePtrOutput {
	return o
}

func (o BackfillNoneStrategyResponsePtrOutput) Elem() BackfillNoneStrategyResponseOutput {
	return o.ApplyT(func(v *BackfillNoneStrategyResponse) BackfillNoneStrategyResponse {
		if v != nil {
			return *v
		}
		var ret BackfillNoneStrategyResponse
		return ret
	}).(BackfillNoneStrategyResponseOutput)
}

// The configuration of the stream destination.
type DestinationConfig struct {
	// Destination connection profile identifier.
	DestinationConnectionProfileName string                `pulumi:"destinationConnectionProfileName"`
	GcsDestinationConfig             *GcsDestinationConfig `pulumi:"gcsDestinationConfig"`
}

// DestinationConfigInput is an input type that accepts DestinationConfigArgs and DestinationConfigOutput values.
// You can construct a concrete instance of `DestinationConfigInput` via:
//
//          DestinationConfigArgs{...}
type DestinationConfigInput interface {
	pulumi.Input

	ToDestinationConfigOutput() DestinationConfigOutput
	ToDestinationConfigOutputWithContext(context.Context) DestinationConfigOutput
}

// The configuration of the stream destination.
type DestinationConfigArgs struct {
	// Destination connection profile identifier.
	DestinationConnectionProfileName pulumi.StringInput           `pulumi:"destinationConnectionProfileName"`
	GcsDestinationConfig             GcsDestinationConfigPtrInput `pulumi:"gcsDestinationConfig"`
}

func (DestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfig)(nil)).Elem()
}

func (i DestinationConfigArgs) ToDestinationConfigOutput() DestinationConfigOutput {
	return i.ToDestinationConfigOutputWithContext(context.Background())
}

func (i DestinationConfigArgs) ToDestinationConfigOutputWithContext(ctx context.Context) DestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigOutput)
}

func (i DestinationConfigArgs) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return i.ToDestinationConfigPtrOutputWithContext(context.Background())
}

func (i DestinationConfigArgs) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigOutput).ToDestinationConfigPtrOutputWithContext(ctx)
}

// DestinationConfigPtrInput is an input type that accepts DestinationConfigArgs, DestinationConfigPtr and DestinationConfigPtrOutput values.
// You can construct a concrete instance of `DestinationConfigPtrInput` via:
//
//          DestinationConfigArgs{...}
//
//  or:
//
//          nil
type DestinationConfigPtrInput interface {
	pulumi.Input

	ToDestinationConfigPtrOutput() DestinationConfigPtrOutput
	ToDestinationConfigPtrOutputWithContext(context.Context) DestinationConfigPtrOutput
}

type destinationConfigPtrType DestinationConfigArgs

func DestinationConfigPtr(v *DestinationConfigArgs) DestinationConfigPtrInput {
	return (*destinationConfigPtrType)(v)
}

func (*destinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConfig)(nil)).Elem()
}

func (i *destinationConfigPtrType) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return i.ToDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *destinationConfigPtrType) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigPtrOutput)
}

// The configuration of the stream destination.
type DestinationConfigOutput struct{ *pulumi.OutputState }

func (DestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfig)(nil)).Elem()
}

func (o DestinationConfigOutput) ToDestinationConfigOutput() DestinationConfigOutput {
	return o
}

func (o DestinationConfigOutput) ToDestinationConfigOutputWithContext(ctx context.Context) DestinationConfigOutput {
	return o
}

func (o DestinationConfigOutput) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return o.ToDestinationConfigPtrOutputWithContext(context.Background())
}

func (o DestinationConfigOutput) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationConfig) *DestinationConfig {
		return &v
	}).(DestinationConfigPtrOutput)
}

// Destination connection profile identifier.
func (o DestinationConfigOutput) DestinationConnectionProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationConfig) string { return v.DestinationConnectionProfileName }).(pulumi.StringOutput)
}

func (o DestinationConfigOutput) GcsDestinationConfig() GcsDestinationConfigPtrOutput {
	return o.ApplyT(func(v DestinationConfig) *GcsDestinationConfig { return v.GcsDestinationConfig }).(GcsDestinationConfigPtrOutput)
}

type DestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (DestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConfig)(nil)).Elem()
}

func (o DestinationConfigPtrOutput) ToDestinationConfigPtrOutput() DestinationConfigPtrOutput {
	return o
}

func (o DestinationConfigPtrOutput) ToDestinationConfigPtrOutputWithContext(ctx context.Context) DestinationConfigPtrOutput {
	return o
}

func (o DestinationConfigPtrOutput) Elem() DestinationConfigOutput {
	return o.ApplyT(func(v *DestinationConfig) DestinationConfig {
		if v != nil {
			return *v
		}
		var ret DestinationConfig
		return ret
	}).(DestinationConfigOutput)
}

// Destination connection profile identifier.
func (o DestinationConfigPtrOutput) DestinationConnectionProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationConfig) *string {
		if v == nil {
			return nil
		}
		return &v.DestinationConnectionProfileName
	}).(pulumi.StringPtrOutput)
}

func (o DestinationConfigPtrOutput) GcsDestinationConfig() GcsDestinationConfigPtrOutput {
	return o.ApplyT(func(v *DestinationConfig) *GcsDestinationConfig {
		if v == nil {
			return nil
		}
		return v.GcsDestinationConfig
	}).(GcsDestinationConfigPtrOutput)
}

// The configuration of the stream destination.
type DestinationConfigResponse struct {
	// Destination connection profile identifier.
	DestinationConnectionProfileName string                       `pulumi:"destinationConnectionProfileName"`
	GcsDestinationConfig             GcsDestinationConfigResponse `pulumi:"gcsDestinationConfig"`
}

// DestinationConfigResponseInput is an input type that accepts DestinationConfigResponseArgs and DestinationConfigResponseOutput values.
// You can construct a concrete instance of `DestinationConfigResponseInput` via:
//
//          DestinationConfigResponseArgs{...}
type DestinationConfigResponseInput interface {
	pulumi.Input

	ToDestinationConfigResponseOutput() DestinationConfigResponseOutput
	ToDestinationConfigResponseOutputWithContext(context.Context) DestinationConfigResponseOutput
}

// The configuration of the stream destination.
type DestinationConfigResponseArgs struct {
	// Destination connection profile identifier.
	DestinationConnectionProfileName pulumi.StringInput                `pulumi:"destinationConnectionProfileName"`
	GcsDestinationConfig             GcsDestinationConfigResponseInput `pulumi:"gcsDestinationConfig"`
}

func (DestinationConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfigResponse)(nil)).Elem()
}

func (i DestinationConfigResponseArgs) ToDestinationConfigResponseOutput() DestinationConfigResponseOutput {
	return i.ToDestinationConfigResponseOutputWithContext(context.Background())
}

func (i DestinationConfigResponseArgs) ToDestinationConfigResponseOutputWithContext(ctx context.Context) DestinationConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigResponseOutput)
}

func (i DestinationConfigResponseArgs) ToDestinationConfigResponsePtrOutput() DestinationConfigResponsePtrOutput {
	return i.ToDestinationConfigResponsePtrOutputWithContext(context.Background())
}

func (i DestinationConfigResponseArgs) ToDestinationConfigResponsePtrOutputWithContext(ctx context.Context) DestinationConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigResponseOutput).ToDestinationConfigResponsePtrOutputWithContext(ctx)
}

// DestinationConfigResponsePtrInput is an input type that accepts DestinationConfigResponseArgs, DestinationConfigResponsePtr and DestinationConfigResponsePtrOutput values.
// You can construct a concrete instance of `DestinationConfigResponsePtrInput` via:
//
//          DestinationConfigResponseArgs{...}
//
//  or:
//
//          nil
type DestinationConfigResponsePtrInput interface {
	pulumi.Input

	ToDestinationConfigResponsePtrOutput() DestinationConfigResponsePtrOutput
	ToDestinationConfigResponsePtrOutputWithContext(context.Context) DestinationConfigResponsePtrOutput
}

type destinationConfigResponsePtrType DestinationConfigResponseArgs

func DestinationConfigResponsePtr(v *DestinationConfigResponseArgs) DestinationConfigResponsePtrInput {
	return (*destinationConfigResponsePtrType)(v)
}

func (*destinationConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConfigResponse)(nil)).Elem()
}

func (i *destinationConfigResponsePtrType) ToDestinationConfigResponsePtrOutput() DestinationConfigResponsePtrOutput {
	return i.ToDestinationConfigResponsePtrOutputWithContext(context.Background())
}

func (i *destinationConfigResponsePtrType) ToDestinationConfigResponsePtrOutputWithContext(ctx context.Context) DestinationConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigResponsePtrOutput)
}

// The configuration of the stream destination.
type DestinationConfigResponseOutput struct{ *pulumi.OutputState }

func (DestinationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfigResponse)(nil)).Elem()
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponseOutput() DestinationConfigResponseOutput {
	return o
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponseOutputWithContext(ctx context.Context) DestinationConfigResponseOutput {
	return o
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponsePtrOutput() DestinationConfigResponsePtrOutput {
	return o.ToDestinationConfigResponsePtrOutputWithContext(context.Background())
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponsePtrOutputWithContext(ctx context.Context) DestinationConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DestinationConfigResponse) *DestinationConfigResponse {
		return &v
	}).(DestinationConfigResponsePtrOutput)
}

// Destination connection profile identifier.
func (o DestinationConfigResponseOutput) DestinationConnectionProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationConfigResponse) string { return v.DestinationConnectionProfileName }).(pulumi.StringOutput)
}

func (o DestinationConfigResponseOutput) GcsDestinationConfig() GcsDestinationConfigResponseOutput {
	return o.ApplyT(func(v DestinationConfigResponse) GcsDestinationConfigResponse { return v.GcsDestinationConfig }).(GcsDestinationConfigResponseOutput)
}

type DestinationConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (DestinationConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DestinationConfigResponse)(nil)).Elem()
}

func (o DestinationConfigResponsePtrOutput) ToDestinationConfigResponsePtrOutput() DestinationConfigResponsePtrOutput {
	return o
}

func (o DestinationConfigResponsePtrOutput) ToDestinationConfigResponsePtrOutputWithContext(ctx context.Context) DestinationConfigResponsePtrOutput {
	return o
}

func (o DestinationConfigResponsePtrOutput) Elem() DestinationConfigResponseOutput {
	return o.ApplyT(func(v *DestinationConfigResponse) DestinationConfigResponse {
		if v != nil {
			return *v
		}
		var ret DestinationConfigResponse
		return ret
	}).(DestinationConfigResponseOutput)
}

// Destination connection profile identifier.
func (o DestinationConfigResponsePtrOutput) DestinationConnectionProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DestinationConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DestinationConnectionProfileName
	}).(pulumi.StringPtrOutput)
}

func (o DestinationConfigResponsePtrOutput) GcsDestinationConfig() GcsDestinationConfigResponsePtrOutput {
	return o.ApplyT(func(v *DestinationConfigResponse) *GcsDestinationConfigResponse {
		if v == nil {
			return nil
		}
		return &v.GcsDestinationConfig
	}).(GcsDestinationConfigResponsePtrOutput)
}

// Represent a user-facing Error.
type ErrorResponse struct {
	// Additional information about the error.
	Details map[string]string `pulumi:"details"`
	// The time when the error occurred.
	ErrorTime string `pulumi:"errorTime"`
	// A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
	ErrorUuid string `pulumi:"errorUuid"`
	// A message containing more information about the error that occurred.
	Message string `pulumi:"message"`
	// A title that explains the reason for the error.
	Reason string `pulumi:"reason"`
}

// ErrorResponseInput is an input type that accepts ErrorResponseArgs and ErrorResponseOutput values.
// You can construct a concrete instance of `ErrorResponseInput` via:
//
//          ErrorResponseArgs{...}
type ErrorResponseInput interface {
	pulumi.Input

	ToErrorResponseOutput() ErrorResponseOutput
	ToErrorResponseOutputWithContext(context.Context) ErrorResponseOutput
}

// Represent a user-facing Error.
type ErrorResponseArgs struct {
	// Additional information about the error.
	Details pulumi.StringMapInput `pulumi:"details"`
	// The time when the error occurred.
	ErrorTime pulumi.StringInput `pulumi:"errorTime"`
	// A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
	ErrorUuid pulumi.StringInput `pulumi:"errorUuid"`
	// A message containing more information about the error that occurred.
	Message pulumi.StringInput `pulumi:"message"`
	// A title that explains the reason for the error.
	Reason pulumi.StringInput `pulumi:"reason"`
}

func (ErrorResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponse)(nil)).Elem()
}

func (i ErrorResponseArgs) ToErrorResponseOutput() ErrorResponseOutput {
	return i.ToErrorResponseOutputWithContext(context.Background())
}

func (i ErrorResponseArgs) ToErrorResponseOutputWithContext(ctx context.Context) ErrorResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorResponseOutput)
}

func (i ErrorResponseArgs) ToErrorResponsePtrOutput() ErrorResponsePtrOutput {
	return i.ToErrorResponsePtrOutputWithContext(context.Background())
}

func (i ErrorResponseArgs) ToErrorResponsePtrOutputWithContext(ctx context.Context) ErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorResponseOutput).ToErrorResponsePtrOutputWithContext(ctx)
}

// ErrorResponsePtrInput is an input type that accepts ErrorResponseArgs, ErrorResponsePtr and ErrorResponsePtrOutput values.
// You can construct a concrete instance of `ErrorResponsePtrInput` via:
//
//          ErrorResponseArgs{...}
//
//  or:
//
//          nil
type ErrorResponsePtrInput interface {
	pulumi.Input

	ToErrorResponsePtrOutput() ErrorResponsePtrOutput
	ToErrorResponsePtrOutputWithContext(context.Context) ErrorResponsePtrOutput
}

type errorResponsePtrType ErrorResponseArgs

func ErrorResponsePtr(v *ErrorResponseArgs) ErrorResponsePtrInput {
	return (*errorResponsePtrType)(v)
}

func (*errorResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorResponse)(nil)).Elem()
}

func (i *errorResponsePtrType) ToErrorResponsePtrOutput() ErrorResponsePtrOutput {
	return i.ToErrorResponsePtrOutputWithContext(context.Background())
}

func (i *errorResponsePtrType) ToErrorResponsePtrOutputWithContext(ctx context.Context) ErrorResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorResponsePtrOutput)
}

// ErrorResponseArrayInput is an input type that accepts ErrorResponseArray and ErrorResponseArrayOutput values.
// You can construct a concrete instance of `ErrorResponseArrayInput` via:
//
//          ErrorResponseArray{ ErrorResponseArgs{...} }
type ErrorResponseArrayInput interface {
	pulumi.Input

	ToErrorResponseArrayOutput() ErrorResponseArrayOutput
	ToErrorResponseArrayOutputWithContext(context.Context) ErrorResponseArrayOutput
}

type ErrorResponseArray []ErrorResponseInput

func (ErrorResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponse)(nil)).Elem()
}

func (i ErrorResponseArray) ToErrorResponseArrayOutput() ErrorResponseArrayOutput {
	return i.ToErrorResponseArrayOutputWithContext(context.Background())
}

func (i ErrorResponseArray) ToErrorResponseArrayOutputWithContext(ctx context.Context) ErrorResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrorResponseArrayOutput)
}

// Represent a user-facing Error.
type ErrorResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseOutput) ToErrorResponseOutput() ErrorResponseOutput {
	return o
}

func (o ErrorResponseOutput) ToErrorResponseOutputWithContext(ctx context.Context) ErrorResponseOutput {
	return o
}

func (o ErrorResponseOutput) ToErrorResponsePtrOutput() ErrorResponsePtrOutput {
	return o.ToErrorResponsePtrOutputWithContext(context.Background())
}

func (o ErrorResponseOutput) ToErrorResponsePtrOutputWithContext(ctx context.Context) ErrorResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ErrorResponse) *ErrorResponse {
		return &v
	}).(ErrorResponsePtrOutput)
}

// Additional information about the error.
func (o ErrorResponseOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v ErrorResponse) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

// The time when the error occurred.
func (o ErrorResponseOutput) ErrorTime() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.ErrorTime }).(pulumi.StringOutput)
}

// A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
func (o ErrorResponseOutput) ErrorUuid() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.ErrorUuid }).(pulumi.StringOutput)
}

// A message containing more information about the error that occurred.
func (o ErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// A title that explains the reason for the error.
func (o ErrorResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Reason }).(pulumi.StringOutput)
}

type ErrorResponsePtrOutput struct{ *pulumi.OutputState }

func (ErrorResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ErrorResponse)(nil)).Elem()
}

func (o ErrorResponsePtrOutput) ToErrorResponsePtrOutput() ErrorResponsePtrOutput {
	return o
}

func (o ErrorResponsePtrOutput) ToErrorResponsePtrOutputWithContext(ctx context.Context) ErrorResponsePtrOutput {
	return o
}

func (o ErrorResponsePtrOutput) Elem() ErrorResponseOutput {
	return o.ApplyT(func(v *ErrorResponse) ErrorResponse {
		if v != nil {
			return *v
		}
		var ret ErrorResponse
		return ret
	}).(ErrorResponseOutput)
}

// Additional information about the error.
func (o ErrorResponsePtrOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ErrorResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapOutput)
}

// The time when the error occurred.
func (o ErrorResponsePtrOutput) ErrorTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorTime
	}).(pulumi.StringPtrOutput)
}

// A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
func (o ErrorResponsePtrOutput) ErrorUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ErrorUuid
	}).(pulumi.StringPtrOutput)
}

// A message containing more information about the error that occurred.
func (o ErrorResponsePtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Message
	}).(pulumi.StringPtrOutput)
}

// A title that explains the reason for the error.
func (o ErrorResponsePtrOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ErrorResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Reason
	}).(pulumi.StringPtrOutput)
}

type ErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutput() ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutputWithContext(ctx context.Context) ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) Index(i pulumi.IntInput) ErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorResponse {
		return vs[0].([]ErrorResponse)[vs[1].(int)]
	}).(ErrorResponseOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivity struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// Input only. SSH password.
	Password *string `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port *int `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ForwardSshTunnelConnectivityInput is an input type that accepts ForwardSshTunnelConnectivityArgs and ForwardSshTunnelConnectivityOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityInput` via:
//
//          ForwardSshTunnelConnectivityArgs{...}
type ForwardSshTunnelConnectivityInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput
	ToForwardSshTunnelConnectivityOutputWithContext(context.Context) ForwardSshTunnelConnectivityOutput
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityArgs struct {
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Input only. SSH password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ForwardSshTunnelConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput {
	return i.ToForwardSshTunnelConnectivityOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityOutput)
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return i.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityOutput).ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx)
}

// ForwardSshTunnelConnectivityPtrInput is an input type that accepts ForwardSshTunnelConnectivityArgs, ForwardSshTunnelConnectivityPtr and ForwardSshTunnelConnectivityPtrOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityPtrInput` via:
//
//          ForwardSshTunnelConnectivityArgs{...}
//
//  or:
//
//          nil
type ForwardSshTunnelConnectivityPtrInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput
	ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Context) ForwardSshTunnelConnectivityPtrOutput
}

type forwardSshTunnelConnectivityPtrType ForwardSshTunnelConnectivityArgs

func ForwardSshTunnelConnectivityPtr(v *ForwardSshTunnelConnectivityArgs) ForwardSshTunnelConnectivityPtrInput {
	return (*forwardSshTunnelConnectivityPtrType)(v)
}

func (*forwardSshTunnelConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (i *forwardSshTunnelConnectivityPtrType) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return i.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (i *forwardSshTunnelConnectivityPtrType) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityPtrOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput {
	return o
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityOutput {
	return o
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return o.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForwardSshTunnelConnectivity) *ForwardSshTunnelConnectivity {
		return &v
	}).(ForwardSshTunnelConnectivityPtrOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) string { return v.Username }).(pulumi.StringOutput)
}

type ForwardSshTunnelConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityPtrOutput) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityPtrOutput) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityPtrOutput) Elem() ForwardSshTunnelConnectivityOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) ForwardSshTunnelConnectivity {
		if v != nil {
			return *v
		}
		var ret ForwardSshTunnelConnectivity
		return ret
	}).(ForwardSshTunnelConnectivityOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityResponse struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// Input only. SSH password.
	Password string `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port int `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ForwardSshTunnelConnectivityResponseInput is an input type that accepts ForwardSshTunnelConnectivityResponseArgs and ForwardSshTunnelConnectivityResponseOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityResponseInput` via:
//
//          ForwardSshTunnelConnectivityResponseArgs{...}
type ForwardSshTunnelConnectivityResponseInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityResponseOutput() ForwardSshTunnelConnectivityResponseOutput
	ToForwardSshTunnelConnectivityResponseOutputWithContext(context.Context) ForwardSshTunnelConnectivityResponseOutput
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityResponseArgs struct {
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Input only. SSH password.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port pulumi.IntInput `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey pulumi.StringInput `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ForwardSshTunnelConnectivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivityResponse)(nil)).Elem()
}

func (i ForwardSshTunnelConnectivityResponseArgs) ToForwardSshTunnelConnectivityResponseOutput() ForwardSshTunnelConnectivityResponseOutput {
	return i.ToForwardSshTunnelConnectivityResponseOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityResponseArgs) ToForwardSshTunnelConnectivityResponseOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityResponseOutput)
}

func (i ForwardSshTunnelConnectivityResponseArgs) ToForwardSshTunnelConnectivityResponsePtrOutput() ForwardSshTunnelConnectivityResponsePtrOutput {
	return i.ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityResponseArgs) ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityResponseOutput).ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(ctx)
}

// ForwardSshTunnelConnectivityResponsePtrInput is an input type that accepts ForwardSshTunnelConnectivityResponseArgs, ForwardSshTunnelConnectivityResponsePtr and ForwardSshTunnelConnectivityResponsePtrOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityResponsePtrInput` via:
//
//          ForwardSshTunnelConnectivityResponseArgs{...}
//
//  or:
//
//          nil
type ForwardSshTunnelConnectivityResponsePtrInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityResponsePtrOutput() ForwardSshTunnelConnectivityResponsePtrOutput
	ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(context.Context) ForwardSshTunnelConnectivityResponsePtrOutput
}

type forwardSshTunnelConnectivityResponsePtrType ForwardSshTunnelConnectivityResponseArgs

func ForwardSshTunnelConnectivityResponsePtr(v *ForwardSshTunnelConnectivityResponseArgs) ForwardSshTunnelConnectivityResponsePtrInput {
	return (*forwardSshTunnelConnectivityResponsePtrType)(v)
}

func (*forwardSshTunnelConnectivityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivityResponse)(nil)).Elem()
}

func (i *forwardSshTunnelConnectivityResponsePtrType) ToForwardSshTunnelConnectivityResponsePtrOutput() ForwardSshTunnelConnectivityResponsePtrOutput {
	return i.ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(context.Background())
}

func (i *forwardSshTunnelConnectivityResponsePtrType) ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityResponsePtrOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityResponseOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivityResponse)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponseOutput() ForwardSshTunnelConnectivityResponseOutput {
	return o
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponseOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponseOutput {
	return o
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponsePtrOutput() ForwardSshTunnelConnectivityResponsePtrOutput {
	return o.ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(context.Background())
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForwardSshTunnelConnectivityResponse) *ForwardSshTunnelConnectivityResponse {
		return &v
	}).(ForwardSshTunnelConnectivityResponsePtrOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityResponseOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Username }).(pulumi.StringOutput)
}

type ForwardSshTunnelConnectivityResponsePtrOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivityResponse)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityResponsePtrOutput) ToForwardSshTunnelConnectivityResponsePtrOutput() ForwardSshTunnelConnectivityResponsePtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityResponsePtrOutput) ToForwardSshTunnelConnectivityResponsePtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponsePtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityResponsePtrOutput) Elem() ForwardSshTunnelConnectivityResponseOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivityResponse) ForwardSshTunnelConnectivityResponse {
		if v != nil {
			return *v
		}
		var ret ForwardSshTunnelConnectivityResponse
		return ret
	}).(ForwardSshTunnelConnectivityResponseOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivityResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityResponsePtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage destination configuration
type GcsDestinationConfig struct {
	// AVRO file format configuration.
	AvroFileFormat *AvroFileFormat `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created.
	FileRotationInterval *string `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb *int `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	JsonFileFormat *JsonFileFormat `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path *string `pulumi:"path"`
}

// GcsDestinationConfigInput is an input type that accepts GcsDestinationConfigArgs and GcsDestinationConfigOutput values.
// You can construct a concrete instance of `GcsDestinationConfigInput` via:
//
//          GcsDestinationConfigArgs{...}
type GcsDestinationConfigInput interface {
	pulumi.Input

	ToGcsDestinationConfigOutput() GcsDestinationConfigOutput
	ToGcsDestinationConfigOutputWithContext(context.Context) GcsDestinationConfigOutput
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigArgs struct {
	// AVRO file format configuration.
	AvroFileFormat AvroFileFormatPtrInput `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created.
	FileRotationInterval pulumi.StringPtrInput `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb pulumi.IntPtrInput `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	JsonFileFormat JsonFileFormatPtrInput `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GcsDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsDestinationConfig)(nil)).Elem()
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigOutput() GcsDestinationConfigOutput {
	return i.ToGcsDestinationConfigOutputWithContext(context.Background())
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigOutputWithContext(ctx context.Context) GcsDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigOutput)
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return i.ToGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigOutput).ToGcsDestinationConfigPtrOutputWithContext(ctx)
}

// GcsDestinationConfigPtrInput is an input type that accepts GcsDestinationConfigArgs, GcsDestinationConfigPtr and GcsDestinationConfigPtrOutput values.
// You can construct a concrete instance of `GcsDestinationConfigPtrInput` via:
//
//          GcsDestinationConfigArgs{...}
//
//  or:
//
//          nil
type GcsDestinationConfigPtrInput interface {
	pulumi.Input

	ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput
	ToGcsDestinationConfigPtrOutputWithContext(context.Context) GcsDestinationConfigPtrOutput
}

type gcsDestinationConfigPtrType GcsDestinationConfigArgs

func GcsDestinationConfigPtr(v *GcsDestinationConfigArgs) GcsDestinationConfigPtrInput {
	return (*gcsDestinationConfigPtrType)(v)
}

func (*gcsDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsDestinationConfig)(nil)).Elem()
}

func (i *gcsDestinationConfigPtrType) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return i.ToGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *gcsDestinationConfigPtrType) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigPtrOutput)
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigOutput struct{ *pulumi.OutputState }

func (GcsDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsDestinationConfig)(nil)).Elem()
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigOutput() GcsDestinationConfigOutput {
	return o
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigOutputWithContext(ctx context.Context) GcsDestinationConfigOutput {
	return o
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return o.ToGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsDestinationConfig) *GcsDestinationConfig {
		return &v
	}).(GcsDestinationConfigPtrOutput)
}

// AVRO file format configuration.
func (o GcsDestinationConfigOutput) AvroFileFormat() AvroFileFormatPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *AvroFileFormat { return v.AvroFileFormat }).(AvroFileFormatPtrOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created.
func (o GcsDestinationConfigOutput) FileRotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *string { return v.FileRotationInterval }).(pulumi.StringPtrOutput)
}

// The maximum file size to be saved in the bucket.
func (o GcsDestinationConfigOutput) FileRotationMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *int { return v.FileRotationMb }).(pulumi.IntPtrOutput)
}

// JSON file format configuration.
func (o GcsDestinationConfigOutput) JsonFileFormat() JsonFileFormatPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *JsonFileFormat { return v.JsonFileFormat }).(JsonFileFormatPtrOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o GcsDestinationConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GcsDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (GcsDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsDestinationConfig)(nil)).Elem()
}

func (o GcsDestinationConfigPtrOutput) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return o
}

func (o GcsDestinationConfigPtrOutput) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return o
}

func (o GcsDestinationConfigPtrOutput) Elem() GcsDestinationConfigOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) GcsDestinationConfig {
		if v != nil {
			return *v
		}
		var ret GcsDestinationConfig
		return ret
	}).(GcsDestinationConfigOutput)
}

// AVRO file format configuration.
func (o GcsDestinationConfigPtrOutput) AvroFileFormat() AvroFileFormatPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *AvroFileFormat {
		if v == nil {
			return nil
		}
		return v.AvroFileFormat
	}).(AvroFileFormatPtrOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created.
func (o GcsDestinationConfigPtrOutput) FileRotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.FileRotationInterval
	}).(pulumi.StringPtrOutput)
}

// The maximum file size to be saved in the bucket.
func (o GcsDestinationConfigPtrOutput) FileRotationMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *int {
		if v == nil {
			return nil
		}
		return v.FileRotationMb
	}).(pulumi.IntPtrOutput)
}

// JSON file format configuration.
func (o GcsDestinationConfigPtrOutput) JsonFileFormat() JsonFileFormatPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *JsonFileFormat {
		if v == nil {
			return nil
		}
		return v.JsonFileFormat
	}).(JsonFileFormatPtrOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o GcsDestinationConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigResponse struct {
	// AVRO file format configuration.
	AvroFileFormat AvroFileFormatResponse `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created.
	FileRotationInterval string `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb int `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	JsonFileFormat JsonFileFormatResponse `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path string `pulumi:"path"`
}

// GcsDestinationConfigResponseInput is an input type that accepts GcsDestinationConfigResponseArgs and GcsDestinationConfigResponseOutput values.
// You can construct a concrete instance of `GcsDestinationConfigResponseInput` via:
//
//          GcsDestinationConfigResponseArgs{...}
type GcsDestinationConfigResponseInput interface {
	pulumi.Input

	ToGcsDestinationConfigResponseOutput() GcsDestinationConfigResponseOutput
	ToGcsDestinationConfigResponseOutputWithContext(context.Context) GcsDestinationConfigResponseOutput
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigResponseArgs struct {
	// AVRO file format configuration.
	AvroFileFormat AvroFileFormatResponseInput `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created.
	FileRotationInterval pulumi.StringInput `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb pulumi.IntInput `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	JsonFileFormat JsonFileFormatResponseInput `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path pulumi.StringInput `pulumi:"path"`
}

func (GcsDestinationConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsDestinationConfigResponse)(nil)).Elem()
}

func (i GcsDestinationConfigResponseArgs) ToGcsDestinationConfigResponseOutput() GcsDestinationConfigResponseOutput {
	return i.ToGcsDestinationConfigResponseOutputWithContext(context.Background())
}

func (i GcsDestinationConfigResponseArgs) ToGcsDestinationConfigResponseOutputWithContext(ctx context.Context) GcsDestinationConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigResponseOutput)
}

func (i GcsDestinationConfigResponseArgs) ToGcsDestinationConfigResponsePtrOutput() GcsDestinationConfigResponsePtrOutput {
	return i.ToGcsDestinationConfigResponsePtrOutputWithContext(context.Background())
}

func (i GcsDestinationConfigResponseArgs) ToGcsDestinationConfigResponsePtrOutputWithContext(ctx context.Context) GcsDestinationConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigResponseOutput).ToGcsDestinationConfigResponsePtrOutputWithContext(ctx)
}

// GcsDestinationConfigResponsePtrInput is an input type that accepts GcsDestinationConfigResponseArgs, GcsDestinationConfigResponsePtr and GcsDestinationConfigResponsePtrOutput values.
// You can construct a concrete instance of `GcsDestinationConfigResponsePtrInput` via:
//
//          GcsDestinationConfigResponseArgs{...}
//
//  or:
//
//          nil
type GcsDestinationConfigResponsePtrInput interface {
	pulumi.Input

	ToGcsDestinationConfigResponsePtrOutput() GcsDestinationConfigResponsePtrOutput
	ToGcsDestinationConfigResponsePtrOutputWithContext(context.Context) GcsDestinationConfigResponsePtrOutput
}

type gcsDestinationConfigResponsePtrType GcsDestinationConfigResponseArgs

func GcsDestinationConfigResponsePtr(v *GcsDestinationConfigResponseArgs) GcsDestinationConfigResponsePtrInput {
	return (*gcsDestinationConfigResponsePtrType)(v)
}

func (*gcsDestinationConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsDestinationConfigResponse)(nil)).Elem()
}

func (i *gcsDestinationConfigResponsePtrType) ToGcsDestinationConfigResponsePtrOutput() GcsDestinationConfigResponsePtrOutput {
	return i.ToGcsDestinationConfigResponsePtrOutputWithContext(context.Background())
}

func (i *gcsDestinationConfigResponsePtrType) ToGcsDestinationConfigResponsePtrOutputWithContext(ctx context.Context) GcsDestinationConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigResponsePtrOutput)
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigResponseOutput struct{ *pulumi.OutputState }

func (GcsDestinationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsDestinationConfigResponse)(nil)).Elem()
}

func (o GcsDestinationConfigResponseOutput) ToGcsDestinationConfigResponseOutput() GcsDestinationConfigResponseOutput {
	return o
}

func (o GcsDestinationConfigResponseOutput) ToGcsDestinationConfigResponseOutputWithContext(ctx context.Context) GcsDestinationConfigResponseOutput {
	return o
}

func (o GcsDestinationConfigResponseOutput) ToGcsDestinationConfigResponsePtrOutput() GcsDestinationConfigResponsePtrOutput {
	return o.ToGcsDestinationConfigResponsePtrOutputWithContext(context.Background())
}

func (o GcsDestinationConfigResponseOutput) ToGcsDestinationConfigResponsePtrOutputWithContext(ctx context.Context) GcsDestinationConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsDestinationConfigResponse) *GcsDestinationConfigResponse {
		return &v
	}).(GcsDestinationConfigResponsePtrOutput)
}

// AVRO file format configuration.
func (o GcsDestinationConfigResponseOutput) AvroFileFormat() AvroFileFormatResponseOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) AvroFileFormatResponse { return v.AvroFileFormat }).(AvroFileFormatResponseOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created.
func (o GcsDestinationConfigResponseOutput) FileRotationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) string { return v.FileRotationInterval }).(pulumi.StringOutput)
}

// The maximum file size to be saved in the bucket.
func (o GcsDestinationConfigResponseOutput) FileRotationMb() pulumi.IntOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) int { return v.FileRotationMb }).(pulumi.IntOutput)
}

// JSON file format configuration.
func (o GcsDestinationConfigResponseOutput) JsonFileFormat() JsonFileFormatResponseOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) JsonFileFormatResponse { return v.JsonFileFormat }).(JsonFileFormatResponseOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o GcsDestinationConfigResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) string { return v.Path }).(pulumi.StringOutput)
}

type GcsDestinationConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (GcsDestinationConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsDestinationConfigResponse)(nil)).Elem()
}

func (o GcsDestinationConfigResponsePtrOutput) ToGcsDestinationConfigResponsePtrOutput() GcsDestinationConfigResponsePtrOutput {
	return o
}

func (o GcsDestinationConfigResponsePtrOutput) ToGcsDestinationConfigResponsePtrOutputWithContext(ctx context.Context) GcsDestinationConfigResponsePtrOutput {
	return o
}

func (o GcsDestinationConfigResponsePtrOutput) Elem() GcsDestinationConfigResponseOutput {
	return o.ApplyT(func(v *GcsDestinationConfigResponse) GcsDestinationConfigResponse {
		if v != nil {
			return *v
		}
		var ret GcsDestinationConfigResponse
		return ret
	}).(GcsDestinationConfigResponseOutput)
}

// AVRO file format configuration.
func (o GcsDestinationConfigResponsePtrOutput) AvroFileFormat() AvroFileFormatResponsePtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfigResponse) *AvroFileFormatResponse {
		if v == nil {
			return nil
		}
		return &v.AvroFileFormat
	}).(AvroFileFormatResponsePtrOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created.
func (o GcsDestinationConfigResponsePtrOutput) FileRotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.FileRotationInterval
	}).(pulumi.StringPtrOutput)
}

// The maximum file size to be saved in the bucket.
func (o GcsDestinationConfigResponsePtrOutput) FileRotationMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfigResponse) *int {
		if v == nil {
			return nil
		}
		return &v.FileRotationMb
	}).(pulumi.IntPtrOutput)
}

// JSON file format configuration.
func (o GcsDestinationConfigResponsePtrOutput) JsonFileFormat() JsonFileFormatResponsePtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfigResponse) *JsonFileFormatResponse {
		if v == nil {
			return nil
		}
		return &v.JsonFileFormat
	}).(JsonFileFormatResponsePtrOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o GcsDestinationConfigResponsePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage bucket profile.
type GcsProfile struct {
	// The full project and resource path for Cloud Storage bucket including the name.
	BucketName string `pulumi:"bucketName"`
	// The root path inside the Cloud Storage bucket.
	RootPath *string `pulumi:"rootPath"`
}

// GcsProfileInput is an input type that accepts GcsProfileArgs and GcsProfileOutput values.
// You can construct a concrete instance of `GcsProfileInput` via:
//
//          GcsProfileArgs{...}
type GcsProfileInput interface {
	pulumi.Input

	ToGcsProfileOutput() GcsProfileOutput
	ToGcsProfileOutputWithContext(context.Context) GcsProfileOutput
}

// Cloud Storage bucket profile.
type GcsProfileArgs struct {
	// The full project and resource path for Cloud Storage bucket including the name.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The root path inside the Cloud Storage bucket.
	RootPath pulumi.StringPtrInput `pulumi:"rootPath"`
}

func (GcsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsProfile)(nil)).Elem()
}

func (i GcsProfileArgs) ToGcsProfileOutput() GcsProfileOutput {
	return i.ToGcsProfileOutputWithContext(context.Background())
}

func (i GcsProfileArgs) ToGcsProfileOutputWithContext(ctx context.Context) GcsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfileOutput)
}

func (i GcsProfileArgs) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return i.ToGcsProfilePtrOutputWithContext(context.Background())
}

func (i GcsProfileArgs) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfileOutput).ToGcsProfilePtrOutputWithContext(ctx)
}

// GcsProfilePtrInput is an input type that accepts GcsProfileArgs, GcsProfilePtr and GcsProfilePtrOutput values.
// You can construct a concrete instance of `GcsProfilePtrInput` via:
//
//          GcsProfileArgs{...}
//
//  or:
//
//          nil
type GcsProfilePtrInput interface {
	pulumi.Input

	ToGcsProfilePtrOutput() GcsProfilePtrOutput
	ToGcsProfilePtrOutputWithContext(context.Context) GcsProfilePtrOutput
}

type gcsProfilePtrType GcsProfileArgs

func GcsProfilePtr(v *GcsProfileArgs) GcsProfilePtrInput {
	return (*gcsProfilePtrType)(v)
}

func (*gcsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsProfile)(nil)).Elem()
}

func (i *gcsProfilePtrType) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return i.ToGcsProfilePtrOutputWithContext(context.Background())
}

func (i *gcsProfilePtrType) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfilePtrOutput)
}

// Cloud Storage bucket profile.
type GcsProfileOutput struct{ *pulumi.OutputState }

func (GcsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsProfile)(nil)).Elem()
}

func (o GcsProfileOutput) ToGcsProfileOutput() GcsProfileOutput {
	return o
}

func (o GcsProfileOutput) ToGcsProfileOutputWithContext(ctx context.Context) GcsProfileOutput {
	return o
}

func (o GcsProfileOutput) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return o.ToGcsProfilePtrOutputWithContext(context.Background())
}

func (o GcsProfileOutput) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsProfile) *GcsProfile {
		return &v
	}).(GcsProfilePtrOutput)
}

// The full project and resource path for Cloud Storage bucket including the name.
func (o GcsProfileOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GcsProfile) string { return v.BucketName }).(pulumi.StringOutput)
}

// The root path inside the Cloud Storage bucket.
func (o GcsProfileOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsProfile) *string { return v.RootPath }).(pulumi.StringPtrOutput)
}

type GcsProfilePtrOutput struct{ *pulumi.OutputState }

func (GcsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsProfile)(nil)).Elem()
}

func (o GcsProfilePtrOutput) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return o
}

func (o GcsProfilePtrOutput) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return o
}

func (o GcsProfilePtrOutput) Elem() GcsProfileOutput {
	return o.ApplyT(func(v *GcsProfile) GcsProfile {
		if v != nil {
			return *v
		}
		var ret GcsProfile
		return ret
	}).(GcsProfileOutput)
}

// The full project and resource path for Cloud Storage bucket including the name.
func (o GcsProfilePtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsProfile) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The root path inside the Cloud Storage bucket.
func (o GcsProfilePtrOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsProfile) *string {
		if v == nil {
			return nil
		}
		return v.RootPath
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage bucket profile.
type GcsProfileResponse struct {
	// The full project and resource path for Cloud Storage bucket including the name.
	BucketName string `pulumi:"bucketName"`
	// The root path inside the Cloud Storage bucket.
	RootPath string `pulumi:"rootPath"`
}

// GcsProfileResponseInput is an input type that accepts GcsProfileResponseArgs and GcsProfileResponseOutput values.
// You can construct a concrete instance of `GcsProfileResponseInput` via:
//
//          GcsProfileResponseArgs{...}
type GcsProfileResponseInput interface {
	pulumi.Input

	ToGcsProfileResponseOutput() GcsProfileResponseOutput
	ToGcsProfileResponseOutputWithContext(context.Context) GcsProfileResponseOutput
}

// Cloud Storage bucket profile.
type GcsProfileResponseArgs struct {
	// The full project and resource path for Cloud Storage bucket including the name.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The root path inside the Cloud Storage bucket.
	RootPath pulumi.StringInput `pulumi:"rootPath"`
}

func (GcsProfileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsProfileResponse)(nil)).Elem()
}

func (i GcsProfileResponseArgs) ToGcsProfileResponseOutput() GcsProfileResponseOutput {
	return i.ToGcsProfileResponseOutputWithContext(context.Background())
}

func (i GcsProfileResponseArgs) ToGcsProfileResponseOutputWithContext(ctx context.Context) GcsProfileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfileResponseOutput)
}

func (i GcsProfileResponseArgs) ToGcsProfileResponsePtrOutput() GcsProfileResponsePtrOutput {
	return i.ToGcsProfileResponsePtrOutputWithContext(context.Background())
}

func (i GcsProfileResponseArgs) ToGcsProfileResponsePtrOutputWithContext(ctx context.Context) GcsProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfileResponseOutput).ToGcsProfileResponsePtrOutputWithContext(ctx)
}

// GcsProfileResponsePtrInput is an input type that accepts GcsProfileResponseArgs, GcsProfileResponsePtr and GcsProfileResponsePtrOutput values.
// You can construct a concrete instance of `GcsProfileResponsePtrInput` via:
//
//          GcsProfileResponseArgs{...}
//
//  or:
//
//          nil
type GcsProfileResponsePtrInput interface {
	pulumi.Input

	ToGcsProfileResponsePtrOutput() GcsProfileResponsePtrOutput
	ToGcsProfileResponsePtrOutputWithContext(context.Context) GcsProfileResponsePtrOutput
}

type gcsProfileResponsePtrType GcsProfileResponseArgs

func GcsProfileResponsePtr(v *GcsProfileResponseArgs) GcsProfileResponsePtrInput {
	return (*gcsProfileResponsePtrType)(v)
}

func (*gcsProfileResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsProfileResponse)(nil)).Elem()
}

func (i *gcsProfileResponsePtrType) ToGcsProfileResponsePtrOutput() GcsProfileResponsePtrOutput {
	return i.ToGcsProfileResponsePtrOutputWithContext(context.Background())
}

func (i *gcsProfileResponsePtrType) ToGcsProfileResponsePtrOutputWithContext(ctx context.Context) GcsProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfileResponsePtrOutput)
}

// Cloud Storage bucket profile.
type GcsProfileResponseOutput struct{ *pulumi.OutputState }

func (GcsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsProfileResponse)(nil)).Elem()
}

func (o GcsProfileResponseOutput) ToGcsProfileResponseOutput() GcsProfileResponseOutput {
	return o
}

func (o GcsProfileResponseOutput) ToGcsProfileResponseOutputWithContext(ctx context.Context) GcsProfileResponseOutput {
	return o
}

func (o GcsProfileResponseOutput) ToGcsProfileResponsePtrOutput() GcsProfileResponsePtrOutput {
	return o.ToGcsProfileResponsePtrOutputWithContext(context.Background())
}

func (o GcsProfileResponseOutput) ToGcsProfileResponsePtrOutputWithContext(ctx context.Context) GcsProfileResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsProfileResponse) *GcsProfileResponse {
		return &v
	}).(GcsProfileResponsePtrOutput)
}

// The full project and resource path for Cloud Storage bucket including the name.
func (o GcsProfileResponseOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GcsProfileResponse) string { return v.BucketName }).(pulumi.StringOutput)
}

// The root path inside the Cloud Storage bucket.
func (o GcsProfileResponseOutput) RootPath() pulumi.StringOutput {
	return o.ApplyT(func(v GcsProfileResponse) string { return v.RootPath }).(pulumi.StringOutput)
}

type GcsProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (GcsProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsProfileResponse)(nil)).Elem()
}

func (o GcsProfileResponsePtrOutput) ToGcsProfileResponsePtrOutput() GcsProfileResponsePtrOutput {
	return o
}

func (o GcsProfileResponsePtrOutput) ToGcsProfileResponsePtrOutputWithContext(ctx context.Context) GcsProfileResponsePtrOutput {
	return o
}

func (o GcsProfileResponsePtrOutput) Elem() GcsProfileResponseOutput {
	return o.ApplyT(func(v *GcsProfileResponse) GcsProfileResponse {
		if v != nil {
			return *v
		}
		var ret GcsProfileResponse
		return ret
	}).(GcsProfileResponseOutput)
}

// The full project and resource path for Cloud Storage bucket including the name.
func (o GcsProfileResponsePtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.BucketName
	}).(pulumi.StringPtrOutput)
}

// The root path inside the Cloud Storage bucket.
func (o GcsProfileResponsePtrOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.RootPath
	}).(pulumi.StringPtrOutput)
}

// JSON file format configuration.
type JsonFileFormat struct {
	// Compression of the loaded JSON file.
	Compression *JsonFileFormatCompression `pulumi:"compression"`
	// The schema file format along JSON data files.
	SchemaFileFormat *JsonFileFormatSchemaFileFormat `pulumi:"schemaFileFormat"`
}

// JsonFileFormatInput is an input type that accepts JsonFileFormatArgs and JsonFileFormatOutput values.
// You can construct a concrete instance of `JsonFileFormatInput` via:
//
//          JsonFileFormatArgs{...}
type JsonFileFormatInput interface {
	pulumi.Input

	ToJsonFileFormatOutput() JsonFileFormatOutput
	ToJsonFileFormatOutputWithContext(context.Context) JsonFileFormatOutput
}

// JSON file format configuration.
type JsonFileFormatArgs struct {
	// Compression of the loaded JSON file.
	Compression JsonFileFormatCompressionPtrInput `pulumi:"compression"`
	// The schema file format along JSON data files.
	SchemaFileFormat JsonFileFormatSchemaFileFormatPtrInput `pulumi:"schemaFileFormat"`
}

func (JsonFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormat)(nil)).Elem()
}

func (i JsonFileFormatArgs) ToJsonFileFormatOutput() JsonFileFormatOutput {
	return i.ToJsonFileFormatOutputWithContext(context.Background())
}

func (i JsonFileFormatArgs) ToJsonFileFormatOutputWithContext(ctx context.Context) JsonFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatOutput)
}

func (i JsonFileFormatArgs) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return i.ToJsonFileFormatPtrOutputWithContext(context.Background())
}

func (i JsonFileFormatArgs) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatOutput).ToJsonFileFormatPtrOutputWithContext(ctx)
}

// JsonFileFormatPtrInput is an input type that accepts JsonFileFormatArgs, JsonFileFormatPtr and JsonFileFormatPtrOutput values.
// You can construct a concrete instance of `JsonFileFormatPtrInput` via:
//
//          JsonFileFormatArgs{...}
//
//  or:
//
//          nil
type JsonFileFormatPtrInput interface {
	pulumi.Input

	ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput
	ToJsonFileFormatPtrOutputWithContext(context.Context) JsonFileFormatPtrOutput
}

type jsonFileFormatPtrType JsonFileFormatArgs

func JsonFileFormatPtr(v *JsonFileFormatArgs) JsonFileFormatPtrInput {
	return (*jsonFileFormatPtrType)(v)
}

func (*jsonFileFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormat)(nil)).Elem()
}

func (i *jsonFileFormatPtrType) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return i.ToJsonFileFormatPtrOutputWithContext(context.Background())
}

func (i *jsonFileFormatPtrType) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatPtrOutput)
}

// JSON file format configuration.
type JsonFileFormatOutput struct{ *pulumi.OutputState }

func (JsonFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormat)(nil)).Elem()
}

func (o JsonFileFormatOutput) ToJsonFileFormatOutput() JsonFileFormatOutput {
	return o
}

func (o JsonFileFormatOutput) ToJsonFileFormatOutputWithContext(ctx context.Context) JsonFileFormatOutput {
	return o
}

func (o JsonFileFormatOutput) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return o.ToJsonFileFormatPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatOutput) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonFileFormat) *JsonFileFormat {
		return &v
	}).(JsonFileFormatPtrOutput)
}

// Compression of the loaded JSON file.
func (o JsonFileFormatOutput) Compression() JsonFileFormatCompressionPtrOutput {
	return o.ApplyT(func(v JsonFileFormat) *JsonFileFormatCompression { return v.Compression }).(JsonFileFormatCompressionPtrOutput)
}

// The schema file format along JSON data files.
func (o JsonFileFormatOutput) SchemaFileFormat() JsonFileFormatSchemaFileFormatPtrOutput {
	return o.ApplyT(func(v JsonFileFormat) *JsonFileFormatSchemaFileFormat { return v.SchemaFileFormat }).(JsonFileFormatSchemaFileFormatPtrOutput)
}

type JsonFileFormatPtrOutput struct{ *pulumi.OutputState }

func (JsonFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormat)(nil)).Elem()
}

func (o JsonFileFormatPtrOutput) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return o
}

func (o JsonFileFormatPtrOutput) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return o
}

func (o JsonFileFormatPtrOutput) Elem() JsonFileFormatOutput {
	return o.ApplyT(func(v *JsonFileFormat) JsonFileFormat {
		if v != nil {
			return *v
		}
		var ret JsonFileFormat
		return ret
	}).(JsonFileFormatOutput)
}

// Compression of the loaded JSON file.
func (o JsonFileFormatPtrOutput) Compression() JsonFileFormatCompressionPtrOutput {
	return o.ApplyT(func(v *JsonFileFormat) *JsonFileFormatCompression {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(JsonFileFormatCompressionPtrOutput)
}

// The schema file format along JSON data files.
func (o JsonFileFormatPtrOutput) SchemaFileFormat() JsonFileFormatSchemaFileFormatPtrOutput {
	return o.ApplyT(func(v *JsonFileFormat) *JsonFileFormatSchemaFileFormat {
		if v == nil {
			return nil
		}
		return v.SchemaFileFormat
	}).(JsonFileFormatSchemaFileFormatPtrOutput)
}

// JSON file format configuration.
type JsonFileFormatResponse struct {
	// Compression of the loaded JSON file.
	Compression string `pulumi:"compression"`
	// The schema file format along JSON data files.
	SchemaFileFormat string `pulumi:"schemaFileFormat"`
}

// JsonFileFormatResponseInput is an input type that accepts JsonFileFormatResponseArgs and JsonFileFormatResponseOutput values.
// You can construct a concrete instance of `JsonFileFormatResponseInput` via:
//
//          JsonFileFormatResponseArgs{...}
type JsonFileFormatResponseInput interface {
	pulumi.Input

	ToJsonFileFormatResponseOutput() JsonFileFormatResponseOutput
	ToJsonFileFormatResponseOutputWithContext(context.Context) JsonFileFormatResponseOutput
}

// JSON file format configuration.
type JsonFileFormatResponseArgs struct {
	// Compression of the loaded JSON file.
	Compression pulumi.StringInput `pulumi:"compression"`
	// The schema file format along JSON data files.
	SchemaFileFormat pulumi.StringInput `pulumi:"schemaFileFormat"`
}

func (JsonFileFormatResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormatResponse)(nil)).Elem()
}

func (i JsonFileFormatResponseArgs) ToJsonFileFormatResponseOutput() JsonFileFormatResponseOutput {
	return i.ToJsonFileFormatResponseOutputWithContext(context.Background())
}

func (i JsonFileFormatResponseArgs) ToJsonFileFormatResponseOutputWithContext(ctx context.Context) JsonFileFormatResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatResponseOutput)
}

func (i JsonFileFormatResponseArgs) ToJsonFileFormatResponsePtrOutput() JsonFileFormatResponsePtrOutput {
	return i.ToJsonFileFormatResponsePtrOutputWithContext(context.Background())
}

func (i JsonFileFormatResponseArgs) ToJsonFileFormatResponsePtrOutputWithContext(ctx context.Context) JsonFileFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatResponseOutput).ToJsonFileFormatResponsePtrOutputWithContext(ctx)
}

// JsonFileFormatResponsePtrInput is an input type that accepts JsonFileFormatResponseArgs, JsonFileFormatResponsePtr and JsonFileFormatResponsePtrOutput values.
// You can construct a concrete instance of `JsonFileFormatResponsePtrInput` via:
//
//          JsonFileFormatResponseArgs{...}
//
//  or:
//
//          nil
type JsonFileFormatResponsePtrInput interface {
	pulumi.Input

	ToJsonFileFormatResponsePtrOutput() JsonFileFormatResponsePtrOutput
	ToJsonFileFormatResponsePtrOutputWithContext(context.Context) JsonFileFormatResponsePtrOutput
}

type jsonFileFormatResponsePtrType JsonFileFormatResponseArgs

func JsonFileFormatResponsePtr(v *JsonFileFormatResponseArgs) JsonFileFormatResponsePtrInput {
	return (*jsonFileFormatResponsePtrType)(v)
}

func (*jsonFileFormatResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormatResponse)(nil)).Elem()
}

func (i *jsonFileFormatResponsePtrType) ToJsonFileFormatResponsePtrOutput() JsonFileFormatResponsePtrOutput {
	return i.ToJsonFileFormatResponsePtrOutputWithContext(context.Background())
}

func (i *jsonFileFormatResponsePtrType) ToJsonFileFormatResponsePtrOutputWithContext(ctx context.Context) JsonFileFormatResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatResponsePtrOutput)
}

// JSON file format configuration.
type JsonFileFormatResponseOutput struct{ *pulumi.OutputState }

func (JsonFileFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormatResponse)(nil)).Elem()
}

func (o JsonFileFormatResponseOutput) ToJsonFileFormatResponseOutput() JsonFileFormatResponseOutput {
	return o
}

func (o JsonFileFormatResponseOutput) ToJsonFileFormatResponseOutputWithContext(ctx context.Context) JsonFileFormatResponseOutput {
	return o
}

func (o JsonFileFormatResponseOutput) ToJsonFileFormatResponsePtrOutput() JsonFileFormatResponsePtrOutput {
	return o.ToJsonFileFormatResponsePtrOutputWithContext(context.Background())
}

func (o JsonFileFormatResponseOutput) ToJsonFileFormatResponsePtrOutputWithContext(ctx context.Context) JsonFileFormatResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonFileFormatResponse) *JsonFileFormatResponse {
		return &v
	}).(JsonFileFormatResponsePtrOutput)
}

// Compression of the loaded JSON file.
func (o JsonFileFormatResponseOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFileFormatResponse) string { return v.Compression }).(pulumi.StringOutput)
}

// The schema file format along JSON data files.
func (o JsonFileFormatResponseOutput) SchemaFileFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFileFormatResponse) string { return v.SchemaFileFormat }).(pulumi.StringOutput)
}

type JsonFileFormatResponsePtrOutput struct{ *pulumi.OutputState }

func (JsonFileFormatResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormatResponse)(nil)).Elem()
}

func (o JsonFileFormatResponsePtrOutput) ToJsonFileFormatResponsePtrOutput() JsonFileFormatResponsePtrOutput {
	return o
}

func (o JsonFileFormatResponsePtrOutput) ToJsonFileFormatResponsePtrOutputWithContext(ctx context.Context) JsonFileFormatResponsePtrOutput {
	return o
}

func (o JsonFileFormatResponsePtrOutput) Elem() JsonFileFormatResponseOutput {
	return o.ApplyT(func(v *JsonFileFormatResponse) JsonFileFormatResponse {
		if v != nil {
			return *v
		}
		var ret JsonFileFormatResponse
		return ret
	}).(JsonFileFormatResponseOutput)
}

// Compression of the loaded JSON file.
func (o JsonFileFormatResponsePtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFileFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Compression
	}).(pulumi.StringPtrOutput)
}

// The schema file format along JSON data files.
func (o JsonFileFormatResponsePtrOutput) SchemaFileFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *JsonFileFormatResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SchemaFileFormat
	}).(pulumi.StringPtrOutput)
}

// MySQL Column.
type MysqlColumn struct {
	// Column collation.
	Collation *string `pulumi:"collation"`
	// Column name.
	ColumnName *string `pulumi:"columnName"`
	// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType *string `pulumi:"dataType"`
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
}

// MysqlColumnInput is an input type that accepts MysqlColumnArgs and MysqlColumnOutput values.
// You can construct a concrete instance of `MysqlColumnInput` via:
//
//          MysqlColumnArgs{...}
type MysqlColumnInput interface {
	pulumi.Input

	ToMysqlColumnOutput() MysqlColumnOutput
	ToMysqlColumnOutputWithContext(context.Context) MysqlColumnOutput
}

// MySQL Column.
type MysqlColumnArgs struct {
	// Column collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Column name.
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
}

func (MysqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlColumn)(nil)).Elem()
}

func (i MysqlColumnArgs) ToMysqlColumnOutput() MysqlColumnOutput {
	return i.ToMysqlColumnOutputWithContext(context.Background())
}

func (i MysqlColumnArgs) ToMysqlColumnOutputWithContext(ctx context.Context) MysqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlColumnOutput)
}

// MysqlColumnArrayInput is an input type that accepts MysqlColumnArray and MysqlColumnArrayOutput values.
// You can construct a concrete instance of `MysqlColumnArrayInput` via:
//
//          MysqlColumnArray{ MysqlColumnArgs{...} }
type MysqlColumnArrayInput interface {
	pulumi.Input

	ToMysqlColumnArrayOutput() MysqlColumnArrayOutput
	ToMysqlColumnArrayOutputWithContext(context.Context) MysqlColumnArrayOutput
}

type MysqlColumnArray []MysqlColumnInput

func (MysqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlColumn)(nil)).Elem()
}

func (i MysqlColumnArray) ToMysqlColumnArrayOutput() MysqlColumnArrayOutput {
	return i.ToMysqlColumnArrayOutputWithContext(context.Background())
}

func (i MysqlColumnArray) ToMysqlColumnArrayOutputWithContext(ctx context.Context) MysqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlColumnArrayOutput)
}

// MySQL Column.
type MysqlColumnOutput struct{ *pulumi.OutputState }

func (MysqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlColumn)(nil)).Elem()
}

func (o MysqlColumnOutput) ToMysqlColumnOutput() MysqlColumnOutput {
	return o
}

func (o MysqlColumnOutput) ToMysqlColumnOutputWithContext(ctx context.Context) MysqlColumnOutput {
	return o
}

// Column collation.
func (o MysqlColumnOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Column name.
func (o MysqlColumnOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
func (o MysqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Column length.
func (o MysqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o MysqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o MysqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *int { return v.OrdinalPosition }).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o MysqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *bool { return v.PrimaryKey }).(pulumi.BoolPtrOutput)
}

type MysqlColumnArrayOutput struct{ *pulumi.OutputState }

func (MysqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlColumn)(nil)).Elem()
}

func (o MysqlColumnArrayOutput) ToMysqlColumnArrayOutput() MysqlColumnArrayOutput {
	return o
}

func (o MysqlColumnArrayOutput) ToMysqlColumnArrayOutputWithContext(ctx context.Context) MysqlColumnArrayOutput {
	return o
}

func (o MysqlColumnArrayOutput) Index(i pulumi.IntInput) MysqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlColumn {
		return vs[0].([]MysqlColumn)[vs[1].(int)]
	}).(MysqlColumnOutput)
}

// MySQL Column.
type MysqlColumnResponse struct {
	// Column collation.
	Collation string `pulumi:"collation"`
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType string `pulumi:"dataType"`
	// Column length.
	Length int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition int `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey bool `pulumi:"primaryKey"`
}

// MysqlColumnResponseInput is an input type that accepts MysqlColumnResponseArgs and MysqlColumnResponseOutput values.
// You can construct a concrete instance of `MysqlColumnResponseInput` via:
//
//          MysqlColumnResponseArgs{...}
type MysqlColumnResponseInput interface {
	pulumi.Input

	ToMysqlColumnResponseOutput() MysqlColumnResponseOutput
	ToMysqlColumnResponseOutputWithContext(context.Context) MysqlColumnResponseOutput
}

// MySQL Column.
type MysqlColumnResponseArgs struct {
	// Column collation.
	Collation pulumi.StringInput `pulumi:"collation"`
	// Column name.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType pulumi.StringInput `pulumi:"dataType"`
	// Column length.
	Length pulumi.IntInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntInput `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolInput `pulumi:"primaryKey"`
}

func (MysqlColumnResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlColumnResponse)(nil)).Elem()
}

func (i MysqlColumnResponseArgs) ToMysqlColumnResponseOutput() MysqlColumnResponseOutput {
	return i.ToMysqlColumnResponseOutputWithContext(context.Background())
}

func (i MysqlColumnResponseArgs) ToMysqlColumnResponseOutputWithContext(ctx context.Context) MysqlColumnResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlColumnResponseOutput)
}

// MysqlColumnResponseArrayInput is an input type that accepts MysqlColumnResponseArray and MysqlColumnResponseArrayOutput values.
// You can construct a concrete instance of `MysqlColumnResponseArrayInput` via:
//
//          MysqlColumnResponseArray{ MysqlColumnResponseArgs{...} }
type MysqlColumnResponseArrayInput interface {
	pulumi.Input

	ToMysqlColumnResponseArrayOutput() MysqlColumnResponseArrayOutput
	ToMysqlColumnResponseArrayOutputWithContext(context.Context) MysqlColumnResponseArrayOutput
}

type MysqlColumnResponseArray []MysqlColumnResponseInput

func (MysqlColumnResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlColumnResponse)(nil)).Elem()
}

func (i MysqlColumnResponseArray) ToMysqlColumnResponseArrayOutput() MysqlColumnResponseArrayOutput {
	return i.ToMysqlColumnResponseArrayOutputWithContext(context.Background())
}

func (i MysqlColumnResponseArray) ToMysqlColumnResponseArrayOutputWithContext(ctx context.Context) MysqlColumnResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlColumnResponseArrayOutput)
}

// MySQL Column.
type MysqlColumnResponseOutput struct{ *pulumi.OutputState }

func (MysqlColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlColumnResponse)(nil)).Elem()
}

func (o MysqlColumnResponseOutput) ToMysqlColumnResponseOutput() MysqlColumnResponseOutput {
	return o
}

func (o MysqlColumnResponseOutput) ToMysqlColumnResponseOutputWithContext(ctx context.Context) MysqlColumnResponseOutput {
	return o
}

// Column collation.
func (o MysqlColumnResponseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlColumnResponse) string { return v.Collation }).(pulumi.StringOutput)
}

// Column name.
func (o MysqlColumnResponseOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlColumnResponse) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
func (o MysqlColumnResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlColumnResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// Column length.
func (o MysqlColumnResponseOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlColumnResponse) int { return v.Length }).(pulumi.IntOutput)
}

// Whether or not the column can accept a null value.
func (o MysqlColumnResponseOutput) Nullable() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlColumnResponse) bool { return v.Nullable }).(pulumi.BoolOutput)
}

// The ordinal position of the column in the table.
func (o MysqlColumnResponseOutput) OrdinalPosition() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlColumnResponse) int { return v.OrdinalPosition }).(pulumi.IntOutput)
}

// Whether or not the column represents a primary key.
func (o MysqlColumnResponseOutput) PrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlColumnResponse) bool { return v.PrimaryKey }).(pulumi.BoolOutput)
}

type MysqlColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (MysqlColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlColumnResponse)(nil)).Elem()
}

func (o MysqlColumnResponseArrayOutput) ToMysqlColumnResponseArrayOutput() MysqlColumnResponseArrayOutput {
	return o
}

func (o MysqlColumnResponseArrayOutput) ToMysqlColumnResponseArrayOutputWithContext(ctx context.Context) MysqlColumnResponseArrayOutput {
	return o
}

func (o MysqlColumnResponseArrayOutput) Index(i pulumi.IntInput) MysqlColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlColumnResponse {
		return vs[0].([]MysqlColumnResponse)[vs[1].(int)]
	}).(MysqlColumnResponseOutput)
}

// MySQL database.
type MysqlDatabase struct {
	// Database name.
	DatabaseName *string `pulumi:"databaseName"`
	// Tables in the database.
	MysqlTables []MysqlTable `pulumi:"mysqlTables"`
}

// MysqlDatabaseInput is an input type that accepts MysqlDatabaseArgs and MysqlDatabaseOutput values.
// You can construct a concrete instance of `MysqlDatabaseInput` via:
//
//          MysqlDatabaseArgs{...}
type MysqlDatabaseInput interface {
	pulumi.Input

	ToMysqlDatabaseOutput() MysqlDatabaseOutput
	ToMysqlDatabaseOutputWithContext(context.Context) MysqlDatabaseOutput
}

// MySQL database.
type MysqlDatabaseArgs struct {
	// Database name.
	DatabaseName pulumi.StringPtrInput `pulumi:"databaseName"`
	// Tables in the database.
	MysqlTables MysqlTableArrayInput `pulumi:"mysqlTables"`
}

func (MysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabase)(nil)).Elem()
}

func (i MysqlDatabaseArgs) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return i.ToMysqlDatabaseOutputWithContext(context.Background())
}

func (i MysqlDatabaseArgs) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseOutput)
}

// MysqlDatabaseArrayInput is an input type that accepts MysqlDatabaseArray and MysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `MysqlDatabaseArrayInput` via:
//
//          MysqlDatabaseArray{ MysqlDatabaseArgs{...} }
type MysqlDatabaseArrayInput interface {
	pulumi.Input

	ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput
	ToMysqlDatabaseArrayOutputWithContext(context.Context) MysqlDatabaseArrayOutput
}

type MysqlDatabaseArray []MysqlDatabaseInput

func (MysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDatabase)(nil)).Elem()
}

func (i MysqlDatabaseArray) ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput {
	return i.ToMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i MysqlDatabaseArray) ToMysqlDatabaseArrayOutputWithContext(ctx context.Context) MysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseArrayOutput)
}

// MySQL database.
type MysqlDatabaseOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return o
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return o
}

// Database name.
func (o MysqlDatabaseOutput) DatabaseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDatabase) *string { return v.DatabaseName }).(pulumi.StringPtrOutput)
}

// Tables in the database.
func (o MysqlDatabaseOutput) MysqlTables() MysqlTableArrayOutput {
	return o.ApplyT(func(v MysqlDatabase) []MysqlTable { return v.MysqlTables }).(MysqlTableArrayOutput)
}

type MysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseArrayOutput) ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput {
	return o
}

func (o MysqlDatabaseArrayOutput) ToMysqlDatabaseArrayOutputWithContext(ctx context.Context) MysqlDatabaseArrayOutput {
	return o
}

func (o MysqlDatabaseArrayOutput) Index(i pulumi.IntInput) MysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlDatabase {
		return vs[0].([]MysqlDatabase)[vs[1].(int)]
	}).(MysqlDatabaseOutput)
}

// MySQL database.
type MysqlDatabaseResponse struct {
	// Database name.
	DatabaseName string `pulumi:"databaseName"`
	// Tables in the database.
	MysqlTables []MysqlTableResponse `pulumi:"mysqlTables"`
}

// MysqlDatabaseResponseInput is an input type that accepts MysqlDatabaseResponseArgs and MysqlDatabaseResponseOutput values.
// You can construct a concrete instance of `MysqlDatabaseResponseInput` via:
//
//          MysqlDatabaseResponseArgs{...}
type MysqlDatabaseResponseInput interface {
	pulumi.Input

	ToMysqlDatabaseResponseOutput() MysqlDatabaseResponseOutput
	ToMysqlDatabaseResponseOutputWithContext(context.Context) MysqlDatabaseResponseOutput
}

// MySQL database.
type MysqlDatabaseResponseArgs struct {
	// Database name.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// Tables in the database.
	MysqlTables MysqlTableResponseArrayInput `pulumi:"mysqlTables"`
}

func (MysqlDatabaseResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabaseResponse)(nil)).Elem()
}

func (i MysqlDatabaseResponseArgs) ToMysqlDatabaseResponseOutput() MysqlDatabaseResponseOutput {
	return i.ToMysqlDatabaseResponseOutputWithContext(context.Background())
}

func (i MysqlDatabaseResponseArgs) ToMysqlDatabaseResponseOutputWithContext(ctx context.Context) MysqlDatabaseResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseResponseOutput)
}

// MysqlDatabaseResponseArrayInput is an input type that accepts MysqlDatabaseResponseArray and MysqlDatabaseResponseArrayOutput values.
// You can construct a concrete instance of `MysqlDatabaseResponseArrayInput` via:
//
//          MysqlDatabaseResponseArray{ MysqlDatabaseResponseArgs{...} }
type MysqlDatabaseResponseArrayInput interface {
	pulumi.Input

	ToMysqlDatabaseResponseArrayOutput() MysqlDatabaseResponseArrayOutput
	ToMysqlDatabaseResponseArrayOutputWithContext(context.Context) MysqlDatabaseResponseArrayOutput
}

type MysqlDatabaseResponseArray []MysqlDatabaseResponseInput

func (MysqlDatabaseResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDatabaseResponse)(nil)).Elem()
}

func (i MysqlDatabaseResponseArray) ToMysqlDatabaseResponseArrayOutput() MysqlDatabaseResponseArrayOutput {
	return i.ToMysqlDatabaseResponseArrayOutputWithContext(context.Background())
}

func (i MysqlDatabaseResponseArray) ToMysqlDatabaseResponseArrayOutputWithContext(ctx context.Context) MysqlDatabaseResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseResponseArrayOutput)
}

// MySQL database.
type MysqlDatabaseResponseOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabaseResponse)(nil)).Elem()
}

func (o MysqlDatabaseResponseOutput) ToMysqlDatabaseResponseOutput() MysqlDatabaseResponseOutput {
	return o
}

func (o MysqlDatabaseResponseOutput) ToMysqlDatabaseResponseOutputWithContext(ctx context.Context) MysqlDatabaseResponseOutput {
	return o
}

// Database name.
func (o MysqlDatabaseResponseOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlDatabaseResponse) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// Tables in the database.
func (o MysqlDatabaseResponseOutput) MysqlTables() MysqlTableResponseArrayOutput {
	return o.ApplyT(func(v MysqlDatabaseResponse) []MysqlTableResponse { return v.MysqlTables }).(MysqlTableResponseArrayOutput)
}

type MysqlDatabaseResponseArrayOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDatabaseResponse)(nil)).Elem()
}

func (o MysqlDatabaseResponseArrayOutput) ToMysqlDatabaseResponseArrayOutput() MysqlDatabaseResponseArrayOutput {
	return o
}

func (o MysqlDatabaseResponseArrayOutput) ToMysqlDatabaseResponseArrayOutputWithContext(ctx context.Context) MysqlDatabaseResponseArrayOutput {
	return o
}

func (o MysqlDatabaseResponseArrayOutput) Index(i pulumi.IntInput) MysqlDatabaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlDatabaseResponse {
		return vs[0].([]MysqlDatabaseResponse)[vs[1].(int)]
	}).(MysqlDatabaseResponseOutput)
}

// MySQL database profile.
type MysqlProfile struct {
	// Hostname for the MySQL connection.
	Hostname string `pulumi:"hostname"`
	// Input only. Password for the MySQL connection.
	Password string `pulumi:"password"`
	// Port for the MySQL connection, default value is 3306.
	Port *int `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	SslConfig *MysqlSslConfig `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username string `pulumi:"username"`
}

// MysqlProfileInput is an input type that accepts MysqlProfileArgs and MysqlProfileOutput values.
// You can construct a concrete instance of `MysqlProfileInput` via:
//
//          MysqlProfileArgs{...}
type MysqlProfileInput interface {
	pulumi.Input

	ToMysqlProfileOutput() MysqlProfileOutput
	ToMysqlProfileOutputWithContext(context.Context) MysqlProfileOutput
}

// MySQL database profile.
type MysqlProfileArgs struct {
	// Hostname for the MySQL connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Input only. Password for the MySQL connection.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the MySQL connection, default value is 3306.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	SslConfig MysqlSslConfigPtrInput `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (MysqlProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlProfile)(nil)).Elem()
}

func (i MysqlProfileArgs) ToMysqlProfileOutput() MysqlProfileOutput {
	return i.ToMysqlProfileOutputWithContext(context.Background())
}

func (i MysqlProfileArgs) ToMysqlProfileOutputWithContext(ctx context.Context) MysqlProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfileOutput)
}

func (i MysqlProfileArgs) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return i.ToMysqlProfilePtrOutputWithContext(context.Background())
}

func (i MysqlProfileArgs) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfileOutput).ToMysqlProfilePtrOutputWithContext(ctx)
}

// MysqlProfilePtrInput is an input type that accepts MysqlProfileArgs, MysqlProfilePtr and MysqlProfilePtrOutput values.
// You can construct a concrete instance of `MysqlProfilePtrInput` via:
//
//          MysqlProfileArgs{...}
//
//  or:
//
//          nil
type MysqlProfilePtrInput interface {
	pulumi.Input

	ToMysqlProfilePtrOutput() MysqlProfilePtrOutput
	ToMysqlProfilePtrOutputWithContext(context.Context) MysqlProfilePtrOutput
}

type mysqlProfilePtrType MysqlProfileArgs

func MysqlProfilePtr(v *MysqlProfileArgs) MysqlProfilePtrInput {
	return (*mysqlProfilePtrType)(v)
}

func (*mysqlProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProfile)(nil)).Elem()
}

func (i *mysqlProfilePtrType) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return i.ToMysqlProfilePtrOutputWithContext(context.Background())
}

func (i *mysqlProfilePtrType) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfilePtrOutput)
}

// MySQL database profile.
type MysqlProfileOutput struct{ *pulumi.OutputState }

func (MysqlProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlProfile)(nil)).Elem()
}

func (o MysqlProfileOutput) ToMysqlProfileOutput() MysqlProfileOutput {
	return o
}

func (o MysqlProfileOutput) ToMysqlProfileOutputWithContext(ctx context.Context) MysqlProfileOutput {
	return o
}

func (o MysqlProfileOutput) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return o.ToMysqlProfilePtrOutputWithContext(context.Background())
}

func (o MysqlProfileOutput) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlProfile) *MysqlProfile {
		return &v
	}).(MysqlProfilePtrOutput)
}

// Hostname for the MySQL connection.
func (o MysqlProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. Password for the MySQL connection.
func (o MysqlProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the MySQL connection, default value is 3306.
func (o MysqlProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
func (o MysqlProfileOutput) SslConfig() MysqlSslConfigPtrOutput {
	return o.ApplyT(func(v MysqlProfile) *MysqlSslConfig { return v.SslConfig }).(MysqlSslConfigPtrOutput)
}

// Username for the MySQL connection.
func (o MysqlProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfile) string { return v.Username }).(pulumi.StringOutput)
}

type MysqlProfilePtrOutput struct{ *pulumi.OutputState }

func (MysqlProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProfile)(nil)).Elem()
}

func (o MysqlProfilePtrOutput) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return o
}

func (o MysqlProfilePtrOutput) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return o
}

func (o MysqlProfilePtrOutput) Elem() MysqlProfileOutput {
	return o.ApplyT(func(v *MysqlProfile) MysqlProfile {
		if v != nil {
			return *v
		}
		var ret MysqlProfile
		return ret
	}).(MysqlProfileOutput)
}

// Hostname for the MySQL connection.
func (o MysqlProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Input only. Password for the MySQL connection.
func (o MysqlProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the MySQL connection, default value is 3306.
func (o MysqlProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
func (o MysqlProfilePtrOutput) SslConfig() MysqlSslConfigPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *MysqlSslConfig {
		if v == nil {
			return nil
		}
		return v.SslConfig
	}).(MysqlSslConfigPtrOutput)
}

// Username for the MySQL connection.
func (o MysqlProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// MySQL database profile.
type MysqlProfileResponse struct {
	// Hostname for the MySQL connection.
	Hostname string `pulumi:"hostname"`
	// Input only. Password for the MySQL connection.
	Password string `pulumi:"password"`
	// Port for the MySQL connection, default value is 3306.
	Port int `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	SslConfig MysqlSslConfigResponse `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username string `pulumi:"username"`
}

// MysqlProfileResponseInput is an input type that accepts MysqlProfileResponseArgs and MysqlProfileResponseOutput values.
// You can construct a concrete instance of `MysqlProfileResponseInput` via:
//
//          MysqlProfileResponseArgs{...}
type MysqlProfileResponseInput interface {
	pulumi.Input

	ToMysqlProfileResponseOutput() MysqlProfileResponseOutput
	ToMysqlProfileResponseOutputWithContext(context.Context) MysqlProfileResponseOutput
}

// MySQL database profile.
type MysqlProfileResponseArgs struct {
	// Hostname for the MySQL connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Input only. Password for the MySQL connection.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the MySQL connection, default value is 3306.
	Port pulumi.IntInput `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	SslConfig MysqlSslConfigResponseInput `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (MysqlProfileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlProfileResponse)(nil)).Elem()
}

func (i MysqlProfileResponseArgs) ToMysqlProfileResponseOutput() MysqlProfileResponseOutput {
	return i.ToMysqlProfileResponseOutputWithContext(context.Background())
}

func (i MysqlProfileResponseArgs) ToMysqlProfileResponseOutputWithContext(ctx context.Context) MysqlProfileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfileResponseOutput)
}

func (i MysqlProfileResponseArgs) ToMysqlProfileResponsePtrOutput() MysqlProfileResponsePtrOutput {
	return i.ToMysqlProfileResponsePtrOutputWithContext(context.Background())
}

func (i MysqlProfileResponseArgs) ToMysqlProfileResponsePtrOutputWithContext(ctx context.Context) MysqlProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfileResponseOutput).ToMysqlProfileResponsePtrOutputWithContext(ctx)
}

// MysqlProfileResponsePtrInput is an input type that accepts MysqlProfileResponseArgs, MysqlProfileResponsePtr and MysqlProfileResponsePtrOutput values.
// You can construct a concrete instance of `MysqlProfileResponsePtrInput` via:
//
//          MysqlProfileResponseArgs{...}
//
//  or:
//
//          nil
type MysqlProfileResponsePtrInput interface {
	pulumi.Input

	ToMysqlProfileResponsePtrOutput() MysqlProfileResponsePtrOutput
	ToMysqlProfileResponsePtrOutputWithContext(context.Context) MysqlProfileResponsePtrOutput
}

type mysqlProfileResponsePtrType MysqlProfileResponseArgs

func MysqlProfileResponsePtr(v *MysqlProfileResponseArgs) MysqlProfileResponsePtrInput {
	return (*mysqlProfileResponsePtrType)(v)
}

func (*mysqlProfileResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProfileResponse)(nil)).Elem()
}

func (i *mysqlProfileResponsePtrType) ToMysqlProfileResponsePtrOutput() MysqlProfileResponsePtrOutput {
	return i.ToMysqlProfileResponsePtrOutputWithContext(context.Background())
}

func (i *mysqlProfileResponsePtrType) ToMysqlProfileResponsePtrOutputWithContext(ctx context.Context) MysqlProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfileResponsePtrOutput)
}

// MySQL database profile.
type MysqlProfileResponseOutput struct{ *pulumi.OutputState }

func (MysqlProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlProfileResponse)(nil)).Elem()
}

func (o MysqlProfileResponseOutput) ToMysqlProfileResponseOutput() MysqlProfileResponseOutput {
	return o
}

func (o MysqlProfileResponseOutput) ToMysqlProfileResponseOutputWithContext(ctx context.Context) MysqlProfileResponseOutput {
	return o
}

func (o MysqlProfileResponseOutput) ToMysqlProfileResponsePtrOutput() MysqlProfileResponsePtrOutput {
	return o.ToMysqlProfileResponsePtrOutputWithContext(context.Background())
}

func (o MysqlProfileResponseOutput) ToMysqlProfileResponsePtrOutputWithContext(ctx context.Context) MysqlProfileResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlProfileResponse) *MysqlProfileResponse {
		return &v
	}).(MysqlProfileResponsePtrOutput)
}

// Hostname for the MySQL connection.
func (o MysqlProfileResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfileResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. Password for the MySQL connection.
func (o MysqlProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the MySQL connection, default value is 3306.
func (o MysqlProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// SSL configuration for the MySQL connection.
func (o MysqlProfileResponseOutput) SslConfig() MysqlSslConfigResponseOutput {
	return o.ApplyT(func(v MysqlProfileResponse) MysqlSslConfigResponse { return v.SslConfig }).(MysqlSslConfigResponseOutput)
}

// Username for the MySQL connection.
func (o MysqlProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

type MysqlProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (MysqlProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProfileResponse)(nil)).Elem()
}

func (o MysqlProfileResponsePtrOutput) ToMysqlProfileResponsePtrOutput() MysqlProfileResponsePtrOutput {
	return o
}

func (o MysqlProfileResponsePtrOutput) ToMysqlProfileResponsePtrOutputWithContext(ctx context.Context) MysqlProfileResponsePtrOutput {
	return o
}

func (o MysqlProfileResponsePtrOutput) Elem() MysqlProfileResponseOutput {
	return o.ApplyT(func(v *MysqlProfileResponse) MysqlProfileResponse {
		if v != nil {
			return *v
		}
		var ret MysqlProfileResponse
		return ret
	}).(MysqlProfileResponseOutput)
}

// Hostname for the MySQL connection.
func (o MysqlProfileResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Input only. Password for the MySQL connection.
func (o MysqlProfileResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the MySQL connection, default value is 3306.
func (o MysqlProfileResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlProfileResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
func (o MysqlProfileResponsePtrOutput) SslConfig() MysqlSslConfigResponsePtrOutput {
	return o.ApplyT(func(v *MysqlProfileResponse) *MysqlSslConfigResponse {
		if v == nil {
			return nil
		}
		return &v.SslConfig
	}).(MysqlSslConfigResponsePtrOutput)
}

// Username for the MySQL connection.
func (o MysqlProfileResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// MySQL database structure
type MysqlRdbms struct {
	// Mysql databases on the server
	MysqlDatabases []MysqlDatabase `pulumi:"mysqlDatabases"`
}

// MysqlRdbmsInput is an input type that accepts MysqlRdbmsArgs and MysqlRdbmsOutput values.
// You can construct a concrete instance of `MysqlRdbmsInput` via:
//
//          MysqlRdbmsArgs{...}
type MysqlRdbmsInput interface {
	pulumi.Input

	ToMysqlRdbmsOutput() MysqlRdbmsOutput
	ToMysqlRdbmsOutputWithContext(context.Context) MysqlRdbmsOutput
}

// MySQL database structure
type MysqlRdbmsArgs struct {
	// Mysql databases on the server
	MysqlDatabases MysqlDatabaseArrayInput `pulumi:"mysqlDatabases"`
}

func (MysqlRdbmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlRdbms)(nil)).Elem()
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsOutput() MysqlRdbmsOutput {
	return i.ToMysqlRdbmsOutputWithContext(context.Background())
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsOutputWithContext(ctx context.Context) MysqlRdbmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsOutput)
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return i.ToMysqlRdbmsPtrOutputWithContext(context.Background())
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsOutput).ToMysqlRdbmsPtrOutputWithContext(ctx)
}

// MysqlRdbmsPtrInput is an input type that accepts MysqlRdbmsArgs, MysqlRdbmsPtr and MysqlRdbmsPtrOutput values.
// You can construct a concrete instance of `MysqlRdbmsPtrInput` via:
//
//          MysqlRdbmsArgs{...}
//
//  or:
//
//          nil
type MysqlRdbmsPtrInput interface {
	pulumi.Input

	ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput
	ToMysqlRdbmsPtrOutputWithContext(context.Context) MysqlRdbmsPtrOutput
}

type mysqlRdbmsPtrType MysqlRdbmsArgs

func MysqlRdbmsPtr(v *MysqlRdbmsArgs) MysqlRdbmsPtrInput {
	return (*mysqlRdbmsPtrType)(v)
}

func (*mysqlRdbmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlRdbms)(nil)).Elem()
}

func (i *mysqlRdbmsPtrType) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return i.ToMysqlRdbmsPtrOutputWithContext(context.Background())
}

func (i *mysqlRdbmsPtrType) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsPtrOutput)
}

// MySQL database structure
type MysqlRdbmsOutput struct{ *pulumi.OutputState }

func (MysqlRdbmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlRdbms)(nil)).Elem()
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsOutput() MysqlRdbmsOutput {
	return o
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsOutputWithContext(ctx context.Context) MysqlRdbmsOutput {
	return o
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return o.ToMysqlRdbmsPtrOutputWithContext(context.Background())
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlRdbms) *MysqlRdbms {
		return &v
	}).(MysqlRdbmsPtrOutput)
}

// Mysql databases on the server
func (o MysqlRdbmsOutput) MysqlDatabases() MysqlDatabaseArrayOutput {
	return o.ApplyT(func(v MysqlRdbms) []MysqlDatabase { return v.MysqlDatabases }).(MysqlDatabaseArrayOutput)
}

type MysqlRdbmsPtrOutput struct{ *pulumi.OutputState }

func (MysqlRdbmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlRdbms)(nil)).Elem()
}

func (o MysqlRdbmsPtrOutput) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return o
}

func (o MysqlRdbmsPtrOutput) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return o
}

func (o MysqlRdbmsPtrOutput) Elem() MysqlRdbmsOutput {
	return o.ApplyT(func(v *MysqlRdbms) MysqlRdbms {
		if v != nil {
			return *v
		}
		var ret MysqlRdbms
		return ret
	}).(MysqlRdbmsOutput)
}

// Mysql databases on the server
func (o MysqlRdbmsPtrOutput) MysqlDatabases() MysqlDatabaseArrayOutput {
	return o.ApplyT(func(v *MysqlRdbms) []MysqlDatabase {
		if v == nil {
			return nil
		}
		return v.MysqlDatabases
	}).(MysqlDatabaseArrayOutput)
}

// MySQL database structure
type MysqlRdbmsResponse struct {
	// Mysql databases on the server
	MysqlDatabases []MysqlDatabaseResponse `pulumi:"mysqlDatabases"`
}

// MysqlRdbmsResponseInput is an input type that accepts MysqlRdbmsResponseArgs and MysqlRdbmsResponseOutput values.
// You can construct a concrete instance of `MysqlRdbmsResponseInput` via:
//
//          MysqlRdbmsResponseArgs{...}
type MysqlRdbmsResponseInput interface {
	pulumi.Input

	ToMysqlRdbmsResponseOutput() MysqlRdbmsResponseOutput
	ToMysqlRdbmsResponseOutputWithContext(context.Context) MysqlRdbmsResponseOutput
}

// MySQL database structure
type MysqlRdbmsResponseArgs struct {
	// Mysql databases on the server
	MysqlDatabases MysqlDatabaseResponseArrayInput `pulumi:"mysqlDatabases"`
}

func (MysqlRdbmsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlRdbmsResponse)(nil)).Elem()
}

func (i MysqlRdbmsResponseArgs) ToMysqlRdbmsResponseOutput() MysqlRdbmsResponseOutput {
	return i.ToMysqlRdbmsResponseOutputWithContext(context.Background())
}

func (i MysqlRdbmsResponseArgs) ToMysqlRdbmsResponseOutputWithContext(ctx context.Context) MysqlRdbmsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsResponseOutput)
}

func (i MysqlRdbmsResponseArgs) ToMysqlRdbmsResponsePtrOutput() MysqlRdbmsResponsePtrOutput {
	return i.ToMysqlRdbmsResponsePtrOutputWithContext(context.Background())
}

func (i MysqlRdbmsResponseArgs) ToMysqlRdbmsResponsePtrOutputWithContext(ctx context.Context) MysqlRdbmsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsResponseOutput).ToMysqlRdbmsResponsePtrOutputWithContext(ctx)
}

// MysqlRdbmsResponsePtrInput is an input type that accepts MysqlRdbmsResponseArgs, MysqlRdbmsResponsePtr and MysqlRdbmsResponsePtrOutput values.
// You can construct a concrete instance of `MysqlRdbmsResponsePtrInput` via:
//
//          MysqlRdbmsResponseArgs{...}
//
//  or:
//
//          nil
type MysqlRdbmsResponsePtrInput interface {
	pulumi.Input

	ToMysqlRdbmsResponsePtrOutput() MysqlRdbmsResponsePtrOutput
	ToMysqlRdbmsResponsePtrOutputWithContext(context.Context) MysqlRdbmsResponsePtrOutput
}

type mysqlRdbmsResponsePtrType MysqlRdbmsResponseArgs

func MysqlRdbmsResponsePtr(v *MysqlRdbmsResponseArgs) MysqlRdbmsResponsePtrInput {
	return (*mysqlRdbmsResponsePtrType)(v)
}

func (*mysqlRdbmsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlRdbmsResponse)(nil)).Elem()
}

func (i *mysqlRdbmsResponsePtrType) ToMysqlRdbmsResponsePtrOutput() MysqlRdbmsResponsePtrOutput {
	return i.ToMysqlRdbmsResponsePtrOutputWithContext(context.Background())
}

func (i *mysqlRdbmsResponsePtrType) ToMysqlRdbmsResponsePtrOutputWithContext(ctx context.Context) MysqlRdbmsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsResponsePtrOutput)
}

// MySQL database structure
type MysqlRdbmsResponseOutput struct{ *pulumi.OutputState }

func (MysqlRdbmsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlRdbmsResponse)(nil)).Elem()
}

func (o MysqlRdbmsResponseOutput) ToMysqlRdbmsResponseOutput() MysqlRdbmsResponseOutput {
	return o
}

func (o MysqlRdbmsResponseOutput) ToMysqlRdbmsResponseOutputWithContext(ctx context.Context) MysqlRdbmsResponseOutput {
	return o
}

func (o MysqlRdbmsResponseOutput) ToMysqlRdbmsResponsePtrOutput() MysqlRdbmsResponsePtrOutput {
	return o.ToMysqlRdbmsResponsePtrOutputWithContext(context.Background())
}

func (o MysqlRdbmsResponseOutput) ToMysqlRdbmsResponsePtrOutputWithContext(ctx context.Context) MysqlRdbmsResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlRdbmsResponse) *MysqlRdbmsResponse {
		return &v
	}).(MysqlRdbmsResponsePtrOutput)
}

// Mysql databases on the server
func (o MysqlRdbmsResponseOutput) MysqlDatabases() MysqlDatabaseResponseArrayOutput {
	return o.ApplyT(func(v MysqlRdbmsResponse) []MysqlDatabaseResponse { return v.MysqlDatabases }).(MysqlDatabaseResponseArrayOutput)
}

type MysqlRdbmsResponsePtrOutput struct{ *pulumi.OutputState }

func (MysqlRdbmsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlRdbmsResponse)(nil)).Elem()
}

func (o MysqlRdbmsResponsePtrOutput) ToMysqlRdbmsResponsePtrOutput() MysqlRdbmsResponsePtrOutput {
	return o
}

func (o MysqlRdbmsResponsePtrOutput) ToMysqlRdbmsResponsePtrOutputWithContext(ctx context.Context) MysqlRdbmsResponsePtrOutput {
	return o
}

func (o MysqlRdbmsResponsePtrOutput) Elem() MysqlRdbmsResponseOutput {
	return o.ApplyT(func(v *MysqlRdbmsResponse) MysqlRdbmsResponse {
		if v != nil {
			return *v
		}
		var ret MysqlRdbmsResponse
		return ret
	}).(MysqlRdbmsResponseOutput)
}

// Mysql databases on the server
func (o MysqlRdbmsResponsePtrOutput) MysqlDatabases() MysqlDatabaseResponseArrayOutput {
	return o.ApplyT(func(v *MysqlRdbmsResponse) []MysqlDatabaseResponse {
		if v == nil {
			return nil
		}
		return v.MysqlDatabases
	}).(MysqlDatabaseResponseArrayOutput)
}

// MySQL source configuration
type MysqlSourceConfig struct {
	// MySQL objects to retrieve from the source.
	Allowlist *MysqlRdbms `pulumi:"allowlist"`
	// MySQL objects to exclude from the stream.
	Rejectlist *MysqlRdbms `pulumi:"rejectlist"`
}

// MysqlSourceConfigInput is an input type that accepts MysqlSourceConfigArgs and MysqlSourceConfigOutput values.
// You can construct a concrete instance of `MysqlSourceConfigInput` via:
//
//          MysqlSourceConfigArgs{...}
type MysqlSourceConfigInput interface {
	pulumi.Input

	ToMysqlSourceConfigOutput() MysqlSourceConfigOutput
	ToMysqlSourceConfigOutputWithContext(context.Context) MysqlSourceConfigOutput
}

// MySQL source configuration
type MysqlSourceConfigArgs struct {
	// MySQL objects to retrieve from the source.
	Allowlist MysqlRdbmsPtrInput `pulumi:"allowlist"`
	// MySQL objects to exclude from the stream.
	Rejectlist MysqlRdbmsPtrInput `pulumi:"rejectlist"`
}

func (MysqlSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSourceConfig)(nil)).Elem()
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigOutput() MysqlSourceConfigOutput {
	return i.ToMysqlSourceConfigOutputWithContext(context.Background())
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigOutputWithContext(ctx context.Context) MysqlSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigOutput)
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return i.ToMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigOutput).ToMysqlSourceConfigPtrOutputWithContext(ctx)
}

// MysqlSourceConfigPtrInput is an input type that accepts MysqlSourceConfigArgs, MysqlSourceConfigPtr and MysqlSourceConfigPtrOutput values.
// You can construct a concrete instance of `MysqlSourceConfigPtrInput` via:
//
//          MysqlSourceConfigArgs{...}
//
//  or:
//
//          nil
type MysqlSourceConfigPtrInput interface {
	pulumi.Input

	ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput
	ToMysqlSourceConfigPtrOutputWithContext(context.Context) MysqlSourceConfigPtrOutput
}

type mysqlSourceConfigPtrType MysqlSourceConfigArgs

func MysqlSourceConfigPtr(v *MysqlSourceConfigArgs) MysqlSourceConfigPtrInput {
	return (*mysqlSourceConfigPtrType)(v)
}

func (*mysqlSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSourceConfig)(nil)).Elem()
}

func (i *mysqlSourceConfigPtrType) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return i.ToMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i *mysqlSourceConfigPtrType) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigPtrOutput)
}

// MySQL source configuration
type MysqlSourceConfigOutput struct{ *pulumi.OutputState }

func (MysqlSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSourceConfig)(nil)).Elem()
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigOutput() MysqlSourceConfigOutput {
	return o
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigOutputWithContext(ctx context.Context) MysqlSourceConfigOutput {
	return o
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return o.ToMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSourceConfig) *MysqlSourceConfig {
		return &v
	}).(MysqlSourceConfigPtrOutput)
}

// MySQL objects to retrieve from the source.
func (o MysqlSourceConfigOutput) Allowlist() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v MysqlSourceConfig) *MysqlRdbms { return v.Allowlist }).(MysqlRdbmsPtrOutput)
}

// MySQL objects to exclude from the stream.
func (o MysqlSourceConfigOutput) Rejectlist() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v MysqlSourceConfig) *MysqlRdbms { return v.Rejectlist }).(MysqlRdbmsPtrOutput)
}

type MysqlSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (MysqlSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSourceConfig)(nil)).Elem()
}

func (o MysqlSourceConfigPtrOutput) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return o
}

func (o MysqlSourceConfigPtrOutput) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return o
}

func (o MysqlSourceConfigPtrOutput) Elem() MysqlSourceConfigOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) MysqlSourceConfig {
		if v != nil {
			return *v
		}
		var ret MysqlSourceConfig
		return ret
	}).(MysqlSourceConfigOutput)
}

// MySQL objects to retrieve from the source.
func (o MysqlSourceConfigPtrOutput) Allowlist() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) *MysqlRdbms {
		if v == nil {
			return nil
		}
		return v.Allowlist
	}).(MysqlRdbmsPtrOutput)
}

// MySQL objects to exclude from the stream.
func (o MysqlSourceConfigPtrOutput) Rejectlist() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) *MysqlRdbms {
		if v == nil {
			return nil
		}
		return v.Rejectlist
	}).(MysqlRdbmsPtrOutput)
}

// MySQL source configuration
type MysqlSourceConfigResponse struct {
	// MySQL objects to retrieve from the source.
	Allowlist MysqlRdbmsResponse `pulumi:"allowlist"`
	// MySQL objects to exclude from the stream.
	Rejectlist MysqlRdbmsResponse `pulumi:"rejectlist"`
}

// MysqlSourceConfigResponseInput is an input type that accepts MysqlSourceConfigResponseArgs and MysqlSourceConfigResponseOutput values.
// You can construct a concrete instance of `MysqlSourceConfigResponseInput` via:
//
//          MysqlSourceConfigResponseArgs{...}
type MysqlSourceConfigResponseInput interface {
	pulumi.Input

	ToMysqlSourceConfigResponseOutput() MysqlSourceConfigResponseOutput
	ToMysqlSourceConfigResponseOutputWithContext(context.Context) MysqlSourceConfigResponseOutput
}

// MySQL source configuration
type MysqlSourceConfigResponseArgs struct {
	// MySQL objects to retrieve from the source.
	Allowlist MysqlRdbmsResponseInput `pulumi:"allowlist"`
	// MySQL objects to exclude from the stream.
	Rejectlist MysqlRdbmsResponseInput `pulumi:"rejectlist"`
}

func (MysqlSourceConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSourceConfigResponse)(nil)).Elem()
}

func (i MysqlSourceConfigResponseArgs) ToMysqlSourceConfigResponseOutput() MysqlSourceConfigResponseOutput {
	return i.ToMysqlSourceConfigResponseOutputWithContext(context.Background())
}

func (i MysqlSourceConfigResponseArgs) ToMysqlSourceConfigResponseOutputWithContext(ctx context.Context) MysqlSourceConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigResponseOutput)
}

func (i MysqlSourceConfigResponseArgs) ToMysqlSourceConfigResponsePtrOutput() MysqlSourceConfigResponsePtrOutput {
	return i.ToMysqlSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (i MysqlSourceConfigResponseArgs) ToMysqlSourceConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSourceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigResponseOutput).ToMysqlSourceConfigResponsePtrOutputWithContext(ctx)
}

// MysqlSourceConfigResponsePtrInput is an input type that accepts MysqlSourceConfigResponseArgs, MysqlSourceConfigResponsePtr and MysqlSourceConfigResponsePtrOutput values.
// You can construct a concrete instance of `MysqlSourceConfigResponsePtrInput` via:
//
//          MysqlSourceConfigResponseArgs{...}
//
//  or:
//
//          nil
type MysqlSourceConfigResponsePtrInput interface {
	pulumi.Input

	ToMysqlSourceConfigResponsePtrOutput() MysqlSourceConfigResponsePtrOutput
	ToMysqlSourceConfigResponsePtrOutputWithContext(context.Context) MysqlSourceConfigResponsePtrOutput
}

type mysqlSourceConfigResponsePtrType MysqlSourceConfigResponseArgs

func MysqlSourceConfigResponsePtr(v *MysqlSourceConfigResponseArgs) MysqlSourceConfigResponsePtrInput {
	return (*mysqlSourceConfigResponsePtrType)(v)
}

func (*mysqlSourceConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSourceConfigResponse)(nil)).Elem()
}

func (i *mysqlSourceConfigResponsePtrType) ToMysqlSourceConfigResponsePtrOutput() MysqlSourceConfigResponsePtrOutput {
	return i.ToMysqlSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (i *mysqlSourceConfigResponsePtrType) ToMysqlSourceConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSourceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigResponsePtrOutput)
}

// MySQL source configuration
type MysqlSourceConfigResponseOutput struct{ *pulumi.OutputState }

func (MysqlSourceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSourceConfigResponse)(nil)).Elem()
}

func (o MysqlSourceConfigResponseOutput) ToMysqlSourceConfigResponseOutput() MysqlSourceConfigResponseOutput {
	return o
}

func (o MysqlSourceConfigResponseOutput) ToMysqlSourceConfigResponseOutputWithContext(ctx context.Context) MysqlSourceConfigResponseOutput {
	return o
}

func (o MysqlSourceConfigResponseOutput) ToMysqlSourceConfigResponsePtrOutput() MysqlSourceConfigResponsePtrOutput {
	return o.ToMysqlSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (o MysqlSourceConfigResponseOutput) ToMysqlSourceConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSourceConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSourceConfigResponse) *MysqlSourceConfigResponse {
		return &v
	}).(MysqlSourceConfigResponsePtrOutput)
}

// MySQL objects to retrieve from the source.
func (o MysqlSourceConfigResponseOutput) Allowlist() MysqlRdbmsResponseOutput {
	return o.ApplyT(func(v MysqlSourceConfigResponse) MysqlRdbmsResponse { return v.Allowlist }).(MysqlRdbmsResponseOutput)
}

// MySQL objects to exclude from the stream.
func (o MysqlSourceConfigResponseOutput) Rejectlist() MysqlRdbmsResponseOutput {
	return o.ApplyT(func(v MysqlSourceConfigResponse) MysqlRdbmsResponse { return v.Rejectlist }).(MysqlRdbmsResponseOutput)
}

type MysqlSourceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (MysqlSourceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSourceConfigResponse)(nil)).Elem()
}

func (o MysqlSourceConfigResponsePtrOutput) ToMysqlSourceConfigResponsePtrOutput() MysqlSourceConfigResponsePtrOutput {
	return o
}

func (o MysqlSourceConfigResponsePtrOutput) ToMysqlSourceConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSourceConfigResponsePtrOutput {
	return o
}

func (o MysqlSourceConfigResponsePtrOutput) Elem() MysqlSourceConfigResponseOutput {
	return o.ApplyT(func(v *MysqlSourceConfigResponse) MysqlSourceConfigResponse {
		if v != nil {
			return *v
		}
		var ret MysqlSourceConfigResponse
		return ret
	}).(MysqlSourceConfigResponseOutput)
}

// MySQL objects to retrieve from the source.
func (o MysqlSourceConfigResponsePtrOutput) Allowlist() MysqlRdbmsResponsePtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfigResponse) *MysqlRdbmsResponse {
		if v == nil {
			return nil
		}
		return &v.Allowlist
	}).(MysqlRdbmsResponsePtrOutput)
}

// MySQL objects to exclude from the stream.
func (o MysqlSourceConfigResponsePtrOutput) Rejectlist() MysqlRdbmsResponsePtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfigResponse) *MysqlRdbmsResponse {
		if v == nil {
			return nil
		}
		return &v.Rejectlist
	}).(MysqlRdbmsResponsePtrOutput)
}

// MySQL SSL configuration information.
type MysqlSslConfig struct {
	// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
	ClientKey *string `pulumi:"clientKey"`
}

// MysqlSslConfigInput is an input type that accepts MysqlSslConfigArgs and MysqlSslConfigOutput values.
// You can construct a concrete instance of `MysqlSslConfigInput` via:
//
//          MysqlSslConfigArgs{...}
type MysqlSslConfigInput interface {
	pulumi.Input

	ToMysqlSslConfigOutput() MysqlSslConfigOutput
	ToMysqlSslConfigOutputWithContext(context.Context) MysqlSslConfigOutput
}

// MySQL SSL configuration information.
type MysqlSslConfigArgs struct {
	// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
}

func (MysqlSslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSslConfig)(nil)).Elem()
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigOutput() MysqlSslConfigOutput {
	return i.ToMysqlSslConfigOutputWithContext(context.Background())
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigOutputWithContext(ctx context.Context) MysqlSslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigOutput)
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return i.ToMysqlSslConfigPtrOutputWithContext(context.Background())
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigOutput).ToMysqlSslConfigPtrOutputWithContext(ctx)
}

// MysqlSslConfigPtrInput is an input type that accepts MysqlSslConfigArgs, MysqlSslConfigPtr and MysqlSslConfigPtrOutput values.
// You can construct a concrete instance of `MysqlSslConfigPtrInput` via:
//
//          MysqlSslConfigArgs{...}
//
//  or:
//
//          nil
type MysqlSslConfigPtrInput interface {
	pulumi.Input

	ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput
	ToMysqlSslConfigPtrOutputWithContext(context.Context) MysqlSslConfigPtrOutput
}

type mysqlSslConfigPtrType MysqlSslConfigArgs

func MysqlSslConfigPtr(v *MysqlSslConfigArgs) MysqlSslConfigPtrInput {
	return (*mysqlSslConfigPtrType)(v)
}

func (*mysqlSslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSslConfig)(nil)).Elem()
}

func (i *mysqlSslConfigPtrType) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return i.ToMysqlSslConfigPtrOutputWithContext(context.Background())
}

func (i *mysqlSslConfigPtrType) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigPtrOutput)
}

// MySQL SSL configuration information.
type MysqlSslConfigOutput struct{ *pulumi.OutputState }

func (MysqlSslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSslConfig)(nil)).Elem()
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigOutput() MysqlSslConfigOutput {
	return o
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigOutputWithContext(ctx context.Context) MysqlSslConfigOutput {
	return o
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return o.ToMysqlSslConfigPtrOutputWithContext(context.Background())
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSslConfig) *MysqlSslConfig {
		return &v
	}).(MysqlSslConfigPtrOutput)
}

// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
func (o MysqlSslConfigOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlSslConfig) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlSslConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlSslConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

type MysqlSslConfigPtrOutput struct{ *pulumi.OutputState }

func (MysqlSslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSslConfig)(nil)).Elem()
}

func (o MysqlSslConfigPtrOutput) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return o
}

func (o MysqlSslConfigPtrOutput) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return o
}

func (o MysqlSslConfigPtrOutput) Elem() MysqlSslConfigOutput {
	return o.ApplyT(func(v *MysqlSslConfig) MysqlSslConfig {
		if v != nil {
			return *v
		}
		var ret MysqlSslConfig
		return ret
	}).(MysqlSslConfigOutput)
}

// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
func (o MysqlSslConfigPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// MySQL SSL configuration information.
type MysqlSslConfigResponse struct {
	// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
	CaCertificate string `pulumi:"caCertificate"`
	// Indicates whether the ca_certificate field is set.
	CaCertificateSet bool `pulumi:"caCertificateSet"`
	// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
	ClientCertificate string `pulumi:"clientCertificate"`
	// Indicates whether the client_certificate field is set.
	ClientCertificateSet bool `pulumi:"clientCertificateSet"`
	// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
	ClientKey string `pulumi:"clientKey"`
	// Indicates whether the client_key field is set.
	ClientKeySet bool `pulumi:"clientKeySet"`
}

// MysqlSslConfigResponseInput is an input type that accepts MysqlSslConfigResponseArgs and MysqlSslConfigResponseOutput values.
// You can construct a concrete instance of `MysqlSslConfigResponseInput` via:
//
//          MysqlSslConfigResponseArgs{...}
type MysqlSslConfigResponseInput interface {
	pulumi.Input

	ToMysqlSslConfigResponseOutput() MysqlSslConfigResponseOutput
	ToMysqlSslConfigResponseOutputWithContext(context.Context) MysqlSslConfigResponseOutput
}

// MySQL SSL configuration information.
type MysqlSslConfigResponseArgs struct {
	// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
	CaCertificate pulumi.StringInput `pulumi:"caCertificate"`
	// Indicates whether the ca_certificate field is set.
	CaCertificateSet pulumi.BoolInput `pulumi:"caCertificateSet"`
	// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
	ClientCertificate pulumi.StringInput `pulumi:"clientCertificate"`
	// Indicates whether the client_certificate field is set.
	ClientCertificateSet pulumi.BoolInput `pulumi:"clientCertificateSet"`
	// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
	ClientKey pulumi.StringInput `pulumi:"clientKey"`
	// Indicates whether the client_key field is set.
	ClientKeySet pulumi.BoolInput `pulumi:"clientKeySet"`
}

func (MysqlSslConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSslConfigResponse)(nil)).Elem()
}

func (i MysqlSslConfigResponseArgs) ToMysqlSslConfigResponseOutput() MysqlSslConfigResponseOutput {
	return i.ToMysqlSslConfigResponseOutputWithContext(context.Background())
}

func (i MysqlSslConfigResponseArgs) ToMysqlSslConfigResponseOutputWithContext(ctx context.Context) MysqlSslConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigResponseOutput)
}

func (i MysqlSslConfigResponseArgs) ToMysqlSslConfigResponsePtrOutput() MysqlSslConfigResponsePtrOutput {
	return i.ToMysqlSslConfigResponsePtrOutputWithContext(context.Background())
}

func (i MysqlSslConfigResponseArgs) ToMysqlSslConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSslConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigResponseOutput).ToMysqlSslConfigResponsePtrOutputWithContext(ctx)
}

// MysqlSslConfigResponsePtrInput is an input type that accepts MysqlSslConfigResponseArgs, MysqlSslConfigResponsePtr and MysqlSslConfigResponsePtrOutput values.
// You can construct a concrete instance of `MysqlSslConfigResponsePtrInput` via:
//
//          MysqlSslConfigResponseArgs{...}
//
//  or:
//
//          nil
type MysqlSslConfigResponsePtrInput interface {
	pulumi.Input

	ToMysqlSslConfigResponsePtrOutput() MysqlSslConfigResponsePtrOutput
	ToMysqlSslConfigResponsePtrOutputWithContext(context.Context) MysqlSslConfigResponsePtrOutput
}

type mysqlSslConfigResponsePtrType MysqlSslConfigResponseArgs

func MysqlSslConfigResponsePtr(v *MysqlSslConfigResponseArgs) MysqlSslConfigResponsePtrInput {
	return (*mysqlSslConfigResponsePtrType)(v)
}

func (*mysqlSslConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSslConfigResponse)(nil)).Elem()
}

func (i *mysqlSslConfigResponsePtrType) ToMysqlSslConfigResponsePtrOutput() MysqlSslConfigResponsePtrOutput {
	return i.ToMysqlSslConfigResponsePtrOutputWithContext(context.Background())
}

func (i *mysqlSslConfigResponsePtrType) ToMysqlSslConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSslConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigResponsePtrOutput)
}

// MySQL SSL configuration information.
type MysqlSslConfigResponseOutput struct{ *pulumi.OutputState }

func (MysqlSslConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSslConfigResponse)(nil)).Elem()
}

func (o MysqlSslConfigResponseOutput) ToMysqlSslConfigResponseOutput() MysqlSslConfigResponseOutput {
	return o
}

func (o MysqlSslConfigResponseOutput) ToMysqlSslConfigResponseOutputWithContext(ctx context.Context) MysqlSslConfigResponseOutput {
	return o
}

func (o MysqlSslConfigResponseOutput) ToMysqlSslConfigResponsePtrOutput() MysqlSslConfigResponsePtrOutput {
	return o.ToMysqlSslConfigResponsePtrOutputWithContext(context.Background())
}

func (o MysqlSslConfigResponseOutput) ToMysqlSslConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSslConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSslConfigResponse) *MysqlSslConfigResponse {
		return &v
	}).(MysqlSslConfigResponsePtrOutput)
}

// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
func (o MysqlSslConfigResponseOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) string { return v.CaCertificate }).(pulumi.StringOutput)
}

// Indicates whether the ca_certificate field is set.
func (o MysqlSslConfigResponseOutput) CaCertificateSet() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) bool { return v.CaCertificateSet }).(pulumi.BoolOutput)
}

// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigResponseOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// Indicates whether the client_certificate field is set.
func (o MysqlSslConfigResponseOutput) ClientCertificateSet() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) bool { return v.ClientCertificateSet }).(pulumi.BoolOutput)
}

// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigResponseOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) string { return v.ClientKey }).(pulumi.StringOutput)
}

// Indicates whether the client_key field is set.
func (o MysqlSslConfigResponseOutput) ClientKeySet() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) bool { return v.ClientKeySet }).(pulumi.BoolOutput)
}

type MysqlSslConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (MysqlSslConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSslConfigResponse)(nil)).Elem()
}

func (o MysqlSslConfigResponsePtrOutput) ToMysqlSslConfigResponsePtrOutput() MysqlSslConfigResponsePtrOutput {
	return o
}

func (o MysqlSslConfigResponsePtrOutput) ToMysqlSslConfigResponsePtrOutputWithContext(ctx context.Context) MysqlSslConfigResponsePtrOutput {
	return o
}

func (o MysqlSslConfigResponsePtrOutput) Elem() MysqlSslConfigResponseOutput {
	return o.ApplyT(func(v *MysqlSslConfigResponse) MysqlSslConfigResponse {
		if v != nil {
			return *v
		}
		var ret MysqlSslConfigResponse
		return ret
	}).(MysqlSslConfigResponseOutput)
}

// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
func (o MysqlSslConfigResponsePtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the ca_certificate field is set.
func (o MysqlSslConfigResponsePtrOutput) CaCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.CaCertificateSet
	}).(pulumi.BoolPtrOutput)
}

// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigResponsePtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the client_certificate field is set.
func (o MysqlSslConfigResponsePtrOutput) ClientCertificateSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ClientCertificateSet
	}).(pulumi.BoolPtrOutput)
}

// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigResponsePtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Indicates whether the client_key field is set.
func (o MysqlSslConfigResponsePtrOutput) ClientKeySet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfigResponse) *bool {
		if v == nil {
			return nil
		}
		return &v.ClientKeySet
	}).(pulumi.BoolPtrOutput)
}

// MySQL table.
type MysqlTable struct {
	// MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
	MysqlColumns []MysqlColumn `pulumi:"mysqlColumns"`
	// Table name.
	TableName *string `pulumi:"tableName"`
}

// MysqlTableInput is an input type that accepts MysqlTableArgs and MysqlTableOutput values.
// You can construct a concrete instance of `MysqlTableInput` via:
//
//          MysqlTableArgs{...}
type MysqlTableInput interface {
	pulumi.Input

	ToMysqlTableOutput() MysqlTableOutput
	ToMysqlTableOutputWithContext(context.Context) MysqlTableOutput
}

// MySQL table.
type MysqlTableArgs struct {
	// MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
	MysqlColumns MysqlColumnArrayInput `pulumi:"mysqlColumns"`
	// Table name.
	TableName pulumi.StringPtrInput `pulumi:"tableName"`
}

func (MysqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlTable)(nil)).Elem()
}

func (i MysqlTableArgs) ToMysqlTableOutput() MysqlTableOutput {
	return i.ToMysqlTableOutputWithContext(context.Background())
}

func (i MysqlTableArgs) ToMysqlTableOutputWithContext(ctx context.Context) MysqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlTableOutput)
}

// MysqlTableArrayInput is an input type that accepts MysqlTableArray and MysqlTableArrayOutput values.
// You can construct a concrete instance of `MysqlTableArrayInput` via:
//
//          MysqlTableArray{ MysqlTableArgs{...} }
type MysqlTableArrayInput interface {
	pulumi.Input

	ToMysqlTableArrayOutput() MysqlTableArrayOutput
	ToMysqlTableArrayOutputWithContext(context.Context) MysqlTableArrayOutput
}

type MysqlTableArray []MysqlTableInput

func (MysqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlTable)(nil)).Elem()
}

func (i MysqlTableArray) ToMysqlTableArrayOutput() MysqlTableArrayOutput {
	return i.ToMysqlTableArrayOutputWithContext(context.Background())
}

func (i MysqlTableArray) ToMysqlTableArrayOutputWithContext(ctx context.Context) MysqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlTableArrayOutput)
}

// MySQL table.
type MysqlTableOutput struct{ *pulumi.OutputState }

func (MysqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlTable)(nil)).Elem()
}

func (o MysqlTableOutput) ToMysqlTableOutput() MysqlTableOutput {
	return o
}

func (o MysqlTableOutput) ToMysqlTableOutputWithContext(ctx context.Context) MysqlTableOutput {
	return o
}

// MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
func (o MysqlTableOutput) MysqlColumns() MysqlColumnArrayOutput {
	return o.ApplyT(func(v MysqlTable) []MysqlColumn { return v.MysqlColumns }).(MysqlColumnArrayOutput)
}

// Table name.
func (o MysqlTableOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlTable) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type MysqlTableArrayOutput struct{ *pulumi.OutputState }

func (MysqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlTable)(nil)).Elem()
}

func (o MysqlTableArrayOutput) ToMysqlTableArrayOutput() MysqlTableArrayOutput {
	return o
}

func (o MysqlTableArrayOutput) ToMysqlTableArrayOutputWithContext(ctx context.Context) MysqlTableArrayOutput {
	return o
}

func (o MysqlTableArrayOutput) Index(i pulumi.IntInput) MysqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlTable {
		return vs[0].([]MysqlTable)[vs[1].(int)]
	}).(MysqlTableOutput)
}

// MySQL table.
type MysqlTableResponse struct {
	// MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
	MysqlColumns []MysqlColumnResponse `pulumi:"mysqlColumns"`
	// Table name.
	TableName string `pulumi:"tableName"`
}

// MysqlTableResponseInput is an input type that accepts MysqlTableResponseArgs and MysqlTableResponseOutput values.
// You can construct a concrete instance of `MysqlTableResponseInput` via:
//
//          MysqlTableResponseArgs{...}
type MysqlTableResponseInput interface {
	pulumi.Input

	ToMysqlTableResponseOutput() MysqlTableResponseOutput
	ToMysqlTableResponseOutputWithContext(context.Context) MysqlTableResponseOutput
}

// MySQL table.
type MysqlTableResponseArgs struct {
	// MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
	MysqlColumns MysqlColumnResponseArrayInput `pulumi:"mysqlColumns"`
	// Table name.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

func (MysqlTableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlTableResponse)(nil)).Elem()
}

func (i MysqlTableResponseArgs) ToMysqlTableResponseOutput() MysqlTableResponseOutput {
	return i.ToMysqlTableResponseOutputWithContext(context.Background())
}

func (i MysqlTableResponseArgs) ToMysqlTableResponseOutputWithContext(ctx context.Context) MysqlTableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlTableResponseOutput)
}

// MysqlTableResponseArrayInput is an input type that accepts MysqlTableResponseArray and MysqlTableResponseArrayOutput values.
// You can construct a concrete instance of `MysqlTableResponseArrayInput` via:
//
//          MysqlTableResponseArray{ MysqlTableResponseArgs{...} }
type MysqlTableResponseArrayInput interface {
	pulumi.Input

	ToMysqlTableResponseArrayOutput() MysqlTableResponseArrayOutput
	ToMysqlTableResponseArrayOutputWithContext(context.Context) MysqlTableResponseArrayOutput
}

type MysqlTableResponseArray []MysqlTableResponseInput

func (MysqlTableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlTableResponse)(nil)).Elem()
}

func (i MysqlTableResponseArray) ToMysqlTableResponseArrayOutput() MysqlTableResponseArrayOutput {
	return i.ToMysqlTableResponseArrayOutputWithContext(context.Background())
}

func (i MysqlTableResponseArray) ToMysqlTableResponseArrayOutputWithContext(ctx context.Context) MysqlTableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlTableResponseArrayOutput)
}

// MySQL table.
type MysqlTableResponseOutput struct{ *pulumi.OutputState }

func (MysqlTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlTableResponse)(nil)).Elem()
}

func (o MysqlTableResponseOutput) ToMysqlTableResponseOutput() MysqlTableResponseOutput {
	return o
}

func (o MysqlTableResponseOutput) ToMysqlTableResponseOutputWithContext(ctx context.Context) MysqlTableResponseOutput {
	return o
}

// MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.
func (o MysqlTableResponseOutput) MysqlColumns() MysqlColumnResponseArrayOutput {
	return o.ApplyT(func(v MysqlTableResponse) []MysqlColumnResponse { return v.MysqlColumns }).(MysqlColumnResponseArrayOutput)
}

// Table name.
func (o MysqlTableResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlTableResponse) string { return v.TableName }).(pulumi.StringOutput)
}

type MysqlTableResponseArrayOutput struct{ *pulumi.OutputState }

func (MysqlTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlTableResponse)(nil)).Elem()
}

func (o MysqlTableResponseArrayOutput) ToMysqlTableResponseArrayOutput() MysqlTableResponseArrayOutput {
	return o
}

func (o MysqlTableResponseArrayOutput) ToMysqlTableResponseArrayOutputWithContext(ctx context.Context) MysqlTableResponseArrayOutput {
	return o
}

func (o MysqlTableResponseArrayOutput) Index(i pulumi.IntInput) MysqlTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlTableResponse {
		return vs[0].([]MysqlTableResponse)[vs[1].(int)]
	}).(MysqlTableResponseOutput)
}

// No connectivity settings.
type NoConnectivitySettings struct {
}

// NoConnectivitySettingsInput is an input type that accepts NoConnectivitySettingsArgs and NoConnectivitySettingsOutput values.
// You can construct a concrete instance of `NoConnectivitySettingsInput` via:
//
//          NoConnectivitySettingsArgs{...}
type NoConnectivitySettingsInput interface {
	pulumi.Input

	ToNoConnectivitySettingsOutput() NoConnectivitySettingsOutput
	ToNoConnectivitySettingsOutputWithContext(context.Context) NoConnectivitySettingsOutput
}

// No connectivity settings.
type NoConnectivitySettingsArgs struct {
}

func (NoConnectivitySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoConnectivitySettings)(nil)).Elem()
}

func (i NoConnectivitySettingsArgs) ToNoConnectivitySettingsOutput() NoConnectivitySettingsOutput {
	return i.ToNoConnectivitySettingsOutputWithContext(context.Background())
}

func (i NoConnectivitySettingsArgs) ToNoConnectivitySettingsOutputWithContext(ctx context.Context) NoConnectivitySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoConnectivitySettingsOutput)
}

func (i NoConnectivitySettingsArgs) ToNoConnectivitySettingsPtrOutput() NoConnectivitySettingsPtrOutput {
	return i.ToNoConnectivitySettingsPtrOutputWithContext(context.Background())
}

func (i NoConnectivitySettingsArgs) ToNoConnectivitySettingsPtrOutputWithContext(ctx context.Context) NoConnectivitySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoConnectivitySettingsOutput).ToNoConnectivitySettingsPtrOutputWithContext(ctx)
}

// NoConnectivitySettingsPtrInput is an input type that accepts NoConnectivitySettingsArgs, NoConnectivitySettingsPtr and NoConnectivitySettingsPtrOutput values.
// You can construct a concrete instance of `NoConnectivitySettingsPtrInput` via:
//
//          NoConnectivitySettingsArgs{...}
//
//  or:
//
//          nil
type NoConnectivitySettingsPtrInput interface {
	pulumi.Input

	ToNoConnectivitySettingsPtrOutput() NoConnectivitySettingsPtrOutput
	ToNoConnectivitySettingsPtrOutputWithContext(context.Context) NoConnectivitySettingsPtrOutput
}

type noConnectivitySettingsPtrType NoConnectivitySettingsArgs

func NoConnectivitySettingsPtr(v *NoConnectivitySettingsArgs) NoConnectivitySettingsPtrInput {
	return (*noConnectivitySettingsPtrType)(v)
}

func (*noConnectivitySettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoConnectivitySettings)(nil)).Elem()
}

func (i *noConnectivitySettingsPtrType) ToNoConnectivitySettingsPtrOutput() NoConnectivitySettingsPtrOutput {
	return i.ToNoConnectivitySettingsPtrOutputWithContext(context.Background())
}

func (i *noConnectivitySettingsPtrType) ToNoConnectivitySettingsPtrOutputWithContext(ctx context.Context) NoConnectivitySettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoConnectivitySettingsPtrOutput)
}

// No connectivity settings.
type NoConnectivitySettingsOutput struct{ *pulumi.OutputState }

func (NoConnectivitySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoConnectivitySettings)(nil)).Elem()
}

func (o NoConnectivitySettingsOutput) ToNoConnectivitySettingsOutput() NoConnectivitySettingsOutput {
	return o
}

func (o NoConnectivitySettingsOutput) ToNoConnectivitySettingsOutputWithContext(ctx context.Context) NoConnectivitySettingsOutput {
	return o
}

func (o NoConnectivitySettingsOutput) ToNoConnectivitySettingsPtrOutput() NoConnectivitySettingsPtrOutput {
	return o.ToNoConnectivitySettingsPtrOutputWithContext(context.Background())
}

func (o NoConnectivitySettingsOutput) ToNoConnectivitySettingsPtrOutputWithContext(ctx context.Context) NoConnectivitySettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NoConnectivitySettings) *NoConnectivitySettings {
		return &v
	}).(NoConnectivitySettingsPtrOutput)
}

type NoConnectivitySettingsPtrOutput struct{ *pulumi.OutputState }

func (NoConnectivitySettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoConnectivitySettings)(nil)).Elem()
}

func (o NoConnectivitySettingsPtrOutput) ToNoConnectivitySettingsPtrOutput() NoConnectivitySettingsPtrOutput {
	return o
}

func (o NoConnectivitySettingsPtrOutput) ToNoConnectivitySettingsPtrOutputWithContext(ctx context.Context) NoConnectivitySettingsPtrOutput {
	return o
}

func (o NoConnectivitySettingsPtrOutput) Elem() NoConnectivitySettingsOutput {
	return o.ApplyT(func(v *NoConnectivitySettings) NoConnectivitySettings {
		if v != nil {
			return *v
		}
		var ret NoConnectivitySettings
		return ret
	}).(NoConnectivitySettingsOutput)
}

// No connectivity settings.
type NoConnectivitySettingsResponse struct {
}

// NoConnectivitySettingsResponseInput is an input type that accepts NoConnectivitySettingsResponseArgs and NoConnectivitySettingsResponseOutput values.
// You can construct a concrete instance of `NoConnectivitySettingsResponseInput` via:
//
//          NoConnectivitySettingsResponseArgs{...}
type NoConnectivitySettingsResponseInput interface {
	pulumi.Input

	ToNoConnectivitySettingsResponseOutput() NoConnectivitySettingsResponseOutput
	ToNoConnectivitySettingsResponseOutputWithContext(context.Context) NoConnectivitySettingsResponseOutput
}

// No connectivity settings.
type NoConnectivitySettingsResponseArgs struct {
}

func (NoConnectivitySettingsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NoConnectivitySettingsResponse)(nil)).Elem()
}

func (i NoConnectivitySettingsResponseArgs) ToNoConnectivitySettingsResponseOutput() NoConnectivitySettingsResponseOutput {
	return i.ToNoConnectivitySettingsResponseOutputWithContext(context.Background())
}

func (i NoConnectivitySettingsResponseArgs) ToNoConnectivitySettingsResponseOutputWithContext(ctx context.Context) NoConnectivitySettingsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoConnectivitySettingsResponseOutput)
}

func (i NoConnectivitySettingsResponseArgs) ToNoConnectivitySettingsResponsePtrOutput() NoConnectivitySettingsResponsePtrOutput {
	return i.ToNoConnectivitySettingsResponsePtrOutputWithContext(context.Background())
}

func (i NoConnectivitySettingsResponseArgs) ToNoConnectivitySettingsResponsePtrOutputWithContext(ctx context.Context) NoConnectivitySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoConnectivitySettingsResponseOutput).ToNoConnectivitySettingsResponsePtrOutputWithContext(ctx)
}

// NoConnectivitySettingsResponsePtrInput is an input type that accepts NoConnectivitySettingsResponseArgs, NoConnectivitySettingsResponsePtr and NoConnectivitySettingsResponsePtrOutput values.
// You can construct a concrete instance of `NoConnectivitySettingsResponsePtrInput` via:
//
//          NoConnectivitySettingsResponseArgs{...}
//
//  or:
//
//          nil
type NoConnectivitySettingsResponsePtrInput interface {
	pulumi.Input

	ToNoConnectivitySettingsResponsePtrOutput() NoConnectivitySettingsResponsePtrOutput
	ToNoConnectivitySettingsResponsePtrOutputWithContext(context.Context) NoConnectivitySettingsResponsePtrOutput
}

type noConnectivitySettingsResponsePtrType NoConnectivitySettingsResponseArgs

func NoConnectivitySettingsResponsePtr(v *NoConnectivitySettingsResponseArgs) NoConnectivitySettingsResponsePtrInput {
	return (*noConnectivitySettingsResponsePtrType)(v)
}

func (*noConnectivitySettingsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NoConnectivitySettingsResponse)(nil)).Elem()
}

func (i *noConnectivitySettingsResponsePtrType) ToNoConnectivitySettingsResponsePtrOutput() NoConnectivitySettingsResponsePtrOutput {
	return i.ToNoConnectivitySettingsResponsePtrOutputWithContext(context.Background())
}

func (i *noConnectivitySettingsResponsePtrType) ToNoConnectivitySettingsResponsePtrOutputWithContext(ctx context.Context) NoConnectivitySettingsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoConnectivitySettingsResponsePtrOutput)
}

// No connectivity settings.
type NoConnectivitySettingsResponseOutput struct{ *pulumi.OutputState }

func (NoConnectivitySettingsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NoConnectivitySettingsResponse)(nil)).Elem()
}

func (o NoConnectivitySettingsResponseOutput) ToNoConnectivitySettingsResponseOutput() NoConnectivitySettingsResponseOutput {
	return o
}

func (o NoConnectivitySettingsResponseOutput) ToNoConnectivitySettingsResponseOutputWithContext(ctx context.Context) NoConnectivitySettingsResponseOutput {
	return o
}

func (o NoConnectivitySettingsResponseOutput) ToNoConnectivitySettingsResponsePtrOutput() NoConnectivitySettingsResponsePtrOutput {
	return o.ToNoConnectivitySettingsResponsePtrOutputWithContext(context.Background())
}

func (o NoConnectivitySettingsResponseOutput) ToNoConnectivitySettingsResponsePtrOutputWithContext(ctx context.Context) NoConnectivitySettingsResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NoConnectivitySettingsResponse) *NoConnectivitySettingsResponse {
		return &v
	}).(NoConnectivitySettingsResponsePtrOutput)
}

type NoConnectivitySettingsResponsePtrOutput struct{ *pulumi.OutputState }

func (NoConnectivitySettingsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoConnectivitySettingsResponse)(nil)).Elem()
}

func (o NoConnectivitySettingsResponsePtrOutput) ToNoConnectivitySettingsResponsePtrOutput() NoConnectivitySettingsResponsePtrOutput {
	return o
}

func (o NoConnectivitySettingsResponsePtrOutput) ToNoConnectivitySettingsResponsePtrOutputWithContext(ctx context.Context) NoConnectivitySettingsResponsePtrOutput {
	return o
}

func (o NoConnectivitySettingsResponsePtrOutput) Elem() NoConnectivitySettingsResponseOutput {
	return o.ApplyT(func(v *NoConnectivitySettingsResponse) NoConnectivitySettingsResponse {
		if v != nil {
			return *v
		}
		var ret NoConnectivitySettingsResponse
		return ret
	}).(NoConnectivitySettingsResponseOutput)
}

// Oracle Column.
type OracleColumn struct {
	// Column name.
	ColumnName *string `pulumi:"columnName"`
	// The Oracle data type.
	DataType *string `pulumi:"dataType"`
	// Column encoding.
	Encoding *string `pulumi:"encoding"`
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Column precision.
	Precision *int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// OracleColumnInput is an input type that accepts OracleColumnArgs and OracleColumnOutput values.
// You can construct a concrete instance of `OracleColumnInput` via:
//
//          OracleColumnArgs{...}
type OracleColumnInput interface {
	pulumi.Input

	ToOracleColumnOutput() OracleColumnOutput
	ToOracleColumnOutputWithContext(context.Context) OracleColumnOutput
}

// Oracle Column.
type OracleColumnArgs struct {
	// Column name.
	ColumnName pulumi.StringPtrInput `pulumi:"columnName"`
	// The Oracle data type.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Column encoding.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (OracleColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleColumn)(nil)).Elem()
}

func (i OracleColumnArgs) ToOracleColumnOutput() OracleColumnOutput {
	return i.ToOracleColumnOutputWithContext(context.Background())
}

func (i OracleColumnArgs) ToOracleColumnOutputWithContext(ctx context.Context) OracleColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleColumnOutput)
}

// OracleColumnArrayInput is an input type that accepts OracleColumnArray and OracleColumnArrayOutput values.
// You can construct a concrete instance of `OracleColumnArrayInput` via:
//
//          OracleColumnArray{ OracleColumnArgs{...} }
type OracleColumnArrayInput interface {
	pulumi.Input

	ToOracleColumnArrayOutput() OracleColumnArrayOutput
	ToOracleColumnArrayOutputWithContext(context.Context) OracleColumnArrayOutput
}

type OracleColumnArray []OracleColumnInput

func (OracleColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleColumn)(nil)).Elem()
}

func (i OracleColumnArray) ToOracleColumnArrayOutput() OracleColumnArrayOutput {
	return i.ToOracleColumnArrayOutputWithContext(context.Background())
}

func (i OracleColumnArray) ToOracleColumnArrayOutputWithContext(ctx context.Context) OracleColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleColumnArrayOutput)
}

// Oracle Column.
type OracleColumnOutput struct{ *pulumi.OutputState }

func (OracleColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleColumn)(nil)).Elem()
}

func (o OracleColumnOutput) ToOracleColumnOutput() OracleColumnOutput {
	return o
}

func (o OracleColumnOutput) ToOracleColumnOutputWithContext(ctx context.Context) OracleColumnOutput {
	return o
}

// Column name.
func (o OracleColumnOutput) ColumnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleColumn) *string { return v.ColumnName }).(pulumi.StringPtrOutput)
}

// The Oracle data type.
func (o OracleColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Column encoding.
func (o OracleColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleColumn) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Column length.
func (o OracleColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o OracleColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OracleColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o OracleColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.OrdinalPosition }).(pulumi.IntPtrOutput)
}

// Column precision.
func (o OracleColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.Precision }).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o OracleColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OracleColumn) *bool { return v.PrimaryKey }).(pulumi.BoolPtrOutput)
}

// Column scale.
func (o OracleColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.Scale }).(pulumi.IntPtrOutput)
}

type OracleColumnArrayOutput struct{ *pulumi.OutputState }

func (OracleColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleColumn)(nil)).Elem()
}

func (o OracleColumnArrayOutput) ToOracleColumnArrayOutput() OracleColumnArrayOutput {
	return o
}

func (o OracleColumnArrayOutput) ToOracleColumnArrayOutputWithContext(ctx context.Context) OracleColumnArrayOutput {
	return o
}

func (o OracleColumnArrayOutput) Index(i pulumi.IntInput) OracleColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleColumn {
		return vs[0].([]OracleColumn)[vs[1].(int)]
	}).(OracleColumnOutput)
}

// Oracle Column.
type OracleColumnResponse struct {
	// Column name.
	ColumnName string `pulumi:"columnName"`
	// The Oracle data type.
	DataType string `pulumi:"dataType"`
	// Column encoding.
	Encoding string `pulumi:"encoding"`
	// Column length.
	Length int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition int `pulumi:"ordinalPosition"`
	// Column precision.
	Precision int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey bool `pulumi:"primaryKey"`
	// Column scale.
	Scale int `pulumi:"scale"`
}

// OracleColumnResponseInput is an input type that accepts OracleColumnResponseArgs and OracleColumnResponseOutput values.
// You can construct a concrete instance of `OracleColumnResponseInput` via:
//
//          OracleColumnResponseArgs{...}
type OracleColumnResponseInput interface {
	pulumi.Input

	ToOracleColumnResponseOutput() OracleColumnResponseOutput
	ToOracleColumnResponseOutputWithContext(context.Context) OracleColumnResponseOutput
}

// Oracle Column.
type OracleColumnResponseArgs struct {
	// Column name.
	ColumnName pulumi.StringInput `pulumi:"columnName"`
	// The Oracle data type.
	DataType pulumi.StringInput `pulumi:"dataType"`
	// Column encoding.
	Encoding pulumi.StringInput `pulumi:"encoding"`
	// Column length.
	Length pulumi.IntInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntInput `pulumi:"ordinalPosition"`
	// Column precision.
	Precision pulumi.IntInput `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolInput `pulumi:"primaryKey"`
	// Column scale.
	Scale pulumi.IntInput `pulumi:"scale"`
}

func (OracleColumnResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleColumnResponse)(nil)).Elem()
}

func (i OracleColumnResponseArgs) ToOracleColumnResponseOutput() OracleColumnResponseOutput {
	return i.ToOracleColumnResponseOutputWithContext(context.Background())
}

func (i OracleColumnResponseArgs) ToOracleColumnResponseOutputWithContext(ctx context.Context) OracleColumnResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleColumnResponseOutput)
}

// OracleColumnResponseArrayInput is an input type that accepts OracleColumnResponseArray and OracleColumnResponseArrayOutput values.
// You can construct a concrete instance of `OracleColumnResponseArrayInput` via:
//
//          OracleColumnResponseArray{ OracleColumnResponseArgs{...} }
type OracleColumnResponseArrayInput interface {
	pulumi.Input

	ToOracleColumnResponseArrayOutput() OracleColumnResponseArrayOutput
	ToOracleColumnResponseArrayOutputWithContext(context.Context) OracleColumnResponseArrayOutput
}

type OracleColumnResponseArray []OracleColumnResponseInput

func (OracleColumnResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleColumnResponse)(nil)).Elem()
}

func (i OracleColumnResponseArray) ToOracleColumnResponseArrayOutput() OracleColumnResponseArrayOutput {
	return i.ToOracleColumnResponseArrayOutputWithContext(context.Background())
}

func (i OracleColumnResponseArray) ToOracleColumnResponseArrayOutputWithContext(ctx context.Context) OracleColumnResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleColumnResponseArrayOutput)
}

// Oracle Column.
type OracleColumnResponseOutput struct{ *pulumi.OutputState }

func (OracleColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleColumnResponse)(nil)).Elem()
}

func (o OracleColumnResponseOutput) ToOracleColumnResponseOutput() OracleColumnResponseOutput {
	return o
}

func (o OracleColumnResponseOutput) ToOracleColumnResponseOutputWithContext(ctx context.Context) OracleColumnResponseOutput {
	return o
}

// Column name.
func (o OracleColumnResponseOutput) ColumnName() pulumi.StringOutput {
	return o.ApplyT(func(v OracleColumnResponse) string { return v.ColumnName }).(pulumi.StringOutput)
}

// The Oracle data type.
func (o OracleColumnResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v OracleColumnResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// Column encoding.
func (o OracleColumnResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v OracleColumnResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Column length.
func (o OracleColumnResponseOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.Length }).(pulumi.IntOutput)
}

// Whether or not the column can accept a null value.
func (o OracleColumnResponseOutput) Nullable() pulumi.BoolOutput {
	return o.ApplyT(func(v OracleColumnResponse) bool { return v.Nullable }).(pulumi.BoolOutput)
}

// The ordinal position of the column in the table.
func (o OracleColumnResponseOutput) OrdinalPosition() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.OrdinalPosition }).(pulumi.IntOutput)
}

// Column precision.
func (o OracleColumnResponseOutput) Precision() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.Precision }).(pulumi.IntOutput)
}

// Whether or not the column represents a primary key.
func (o OracleColumnResponseOutput) PrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v OracleColumnResponse) bool { return v.PrimaryKey }).(pulumi.BoolOutput)
}

// Column scale.
func (o OracleColumnResponseOutput) Scale() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.Scale }).(pulumi.IntOutput)
}

type OracleColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (OracleColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleColumnResponse)(nil)).Elem()
}

func (o OracleColumnResponseArrayOutput) ToOracleColumnResponseArrayOutput() OracleColumnResponseArrayOutput {
	return o
}

func (o OracleColumnResponseArrayOutput) ToOracleColumnResponseArrayOutputWithContext(ctx context.Context) OracleColumnResponseArrayOutput {
	return o
}

func (o OracleColumnResponseArrayOutput) Index(i pulumi.IntInput) OracleColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleColumnResponse {
		return vs[0].([]OracleColumnResponse)[vs[1].(int)]
	}).(OracleColumnResponseOutput)
}

// Oracle database profile.
type OracleProfile struct {
	// Connection string attributes
	ConnectionAttributes map[string]string `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname string `pulumi:"hostname"`
	// Password for the Oracle connection.
	Password string `pulumi:"password"`
	// Port for the Oracle connection, default value is 1521.
	Port *int `pulumi:"port"`
	// Username for the Oracle connection.
	Username string `pulumi:"username"`
}

// OracleProfileInput is an input type that accepts OracleProfileArgs and OracleProfileOutput values.
// You can construct a concrete instance of `OracleProfileInput` via:
//
//          OracleProfileArgs{...}
type OracleProfileInput interface {
	pulumi.Input

	ToOracleProfileOutput() OracleProfileOutput
	ToOracleProfileOutputWithContext(context.Context) OracleProfileOutput
}

// Oracle database profile.
type OracleProfileArgs struct {
	// Connection string attributes
	ConnectionAttributes pulumi.StringMapInput `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService pulumi.StringInput `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Password for the Oracle connection.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the Oracle connection, default value is 1521.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Username for the Oracle connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (OracleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleProfile)(nil)).Elem()
}

func (i OracleProfileArgs) ToOracleProfileOutput() OracleProfileOutput {
	return i.ToOracleProfileOutputWithContext(context.Background())
}

func (i OracleProfileArgs) ToOracleProfileOutputWithContext(ctx context.Context) OracleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfileOutput)
}

func (i OracleProfileArgs) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return i.ToOracleProfilePtrOutputWithContext(context.Background())
}

func (i OracleProfileArgs) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfileOutput).ToOracleProfilePtrOutputWithContext(ctx)
}

// OracleProfilePtrInput is an input type that accepts OracleProfileArgs, OracleProfilePtr and OracleProfilePtrOutput values.
// You can construct a concrete instance of `OracleProfilePtrInput` via:
//
//          OracleProfileArgs{...}
//
//  or:
//
//          nil
type OracleProfilePtrInput interface {
	pulumi.Input

	ToOracleProfilePtrOutput() OracleProfilePtrOutput
	ToOracleProfilePtrOutputWithContext(context.Context) OracleProfilePtrOutput
}

type oracleProfilePtrType OracleProfileArgs

func OracleProfilePtr(v *OracleProfileArgs) OracleProfilePtrInput {
	return (*oracleProfilePtrType)(v)
}

func (*oracleProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleProfile)(nil)).Elem()
}

func (i *oracleProfilePtrType) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return i.ToOracleProfilePtrOutputWithContext(context.Background())
}

func (i *oracleProfilePtrType) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfilePtrOutput)
}

// Oracle database profile.
type OracleProfileOutput struct{ *pulumi.OutputState }

func (OracleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleProfile)(nil)).Elem()
}

func (o OracleProfileOutput) ToOracleProfileOutput() OracleProfileOutput {
	return o
}

func (o OracleProfileOutput) ToOracleProfileOutputWithContext(ctx context.Context) OracleProfileOutput {
	return o
}

func (o OracleProfileOutput) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return o.ToOracleProfilePtrOutputWithContext(context.Background())
}

func (o OracleProfileOutput) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleProfile) *OracleProfile {
		return &v
	}).(OracleProfilePtrOutput)
}

// Connection string attributes
func (o OracleProfileOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v OracleProfile) map[string]string { return v.ConnectionAttributes }).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o OracleProfileOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Hostname for the Oracle connection.
func (o OracleProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the Oracle connection.
func (o OracleProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the Oracle connection, default value is 1521.
func (o OracleProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Username for the Oracle connection.
func (o OracleProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.Username }).(pulumi.StringOutput)
}

type OracleProfilePtrOutput struct{ *pulumi.OutputState }

func (OracleProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleProfile)(nil)).Elem()
}

func (o OracleProfilePtrOutput) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return o
}

func (o OracleProfilePtrOutput) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return o
}

func (o OracleProfilePtrOutput) Elem() OracleProfileOutput {
	return o.ApplyT(func(v *OracleProfile) OracleProfile {
		if v != nil {
			return *v
		}
		var ret OracleProfile
		return ret
	}).(OracleProfileOutput)
}

// Connection string attributes
func (o OracleProfilePtrOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OracleProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConnectionAttributes
	}).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o OracleProfilePtrOutput) DatabaseService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseService
	}).(pulumi.StringPtrOutput)
}

// Hostname for the Oracle connection.
func (o OracleProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Password for the Oracle connection.
func (o OracleProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the Oracle connection, default value is 1521.
func (o OracleProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the Oracle connection.
func (o OracleProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Oracle database profile.
type OracleProfileResponse struct {
	// Connection string attributes
	ConnectionAttributes map[string]string `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname string `pulumi:"hostname"`
	// Password for the Oracle connection.
	Password string `pulumi:"password"`
	// Port for the Oracle connection, default value is 1521.
	Port int `pulumi:"port"`
	// Username for the Oracle connection.
	Username string `pulumi:"username"`
}

// OracleProfileResponseInput is an input type that accepts OracleProfileResponseArgs and OracleProfileResponseOutput values.
// You can construct a concrete instance of `OracleProfileResponseInput` via:
//
//          OracleProfileResponseArgs{...}
type OracleProfileResponseInput interface {
	pulumi.Input

	ToOracleProfileResponseOutput() OracleProfileResponseOutput
	ToOracleProfileResponseOutputWithContext(context.Context) OracleProfileResponseOutput
}

// Oracle database profile.
type OracleProfileResponseArgs struct {
	// Connection string attributes
	ConnectionAttributes pulumi.StringMapInput `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService pulumi.StringInput `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Password for the Oracle connection.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the Oracle connection, default value is 1521.
	Port pulumi.IntInput `pulumi:"port"`
	// Username for the Oracle connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (OracleProfileResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleProfileResponse)(nil)).Elem()
}

func (i OracleProfileResponseArgs) ToOracleProfileResponseOutput() OracleProfileResponseOutput {
	return i.ToOracleProfileResponseOutputWithContext(context.Background())
}

func (i OracleProfileResponseArgs) ToOracleProfileResponseOutputWithContext(ctx context.Context) OracleProfileResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfileResponseOutput)
}

func (i OracleProfileResponseArgs) ToOracleProfileResponsePtrOutput() OracleProfileResponsePtrOutput {
	return i.ToOracleProfileResponsePtrOutputWithContext(context.Background())
}

func (i OracleProfileResponseArgs) ToOracleProfileResponsePtrOutputWithContext(ctx context.Context) OracleProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfileResponseOutput).ToOracleProfileResponsePtrOutputWithContext(ctx)
}

// OracleProfileResponsePtrInput is an input type that accepts OracleProfileResponseArgs, OracleProfileResponsePtr and OracleProfileResponsePtrOutput values.
// You can construct a concrete instance of `OracleProfileResponsePtrInput` via:
//
//          OracleProfileResponseArgs{...}
//
//  or:
//
//          nil
type OracleProfileResponsePtrInput interface {
	pulumi.Input

	ToOracleProfileResponsePtrOutput() OracleProfileResponsePtrOutput
	ToOracleProfileResponsePtrOutputWithContext(context.Context) OracleProfileResponsePtrOutput
}

type oracleProfileResponsePtrType OracleProfileResponseArgs

func OracleProfileResponsePtr(v *OracleProfileResponseArgs) OracleProfileResponsePtrInput {
	return (*oracleProfileResponsePtrType)(v)
}

func (*oracleProfileResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleProfileResponse)(nil)).Elem()
}

func (i *oracleProfileResponsePtrType) ToOracleProfileResponsePtrOutput() OracleProfileResponsePtrOutput {
	return i.ToOracleProfileResponsePtrOutputWithContext(context.Background())
}

func (i *oracleProfileResponsePtrType) ToOracleProfileResponsePtrOutputWithContext(ctx context.Context) OracleProfileResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfileResponsePtrOutput)
}

// Oracle database profile.
type OracleProfileResponseOutput struct{ *pulumi.OutputState }

func (OracleProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleProfileResponse)(nil)).Elem()
}

func (o OracleProfileResponseOutput) ToOracleProfileResponseOutput() OracleProfileResponseOutput {
	return o
}

func (o OracleProfileResponseOutput) ToOracleProfileResponseOutputWithContext(ctx context.Context) OracleProfileResponseOutput {
	return o
}

func (o OracleProfileResponseOutput) ToOracleProfileResponsePtrOutput() OracleProfileResponsePtrOutput {
	return o.ToOracleProfileResponsePtrOutputWithContext(context.Background())
}

func (o OracleProfileResponseOutput) ToOracleProfileResponsePtrOutputWithContext(ctx context.Context) OracleProfileResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleProfileResponse) *OracleProfileResponse {
		return &v
	}).(OracleProfileResponsePtrOutput)
}

// Connection string attributes
func (o OracleProfileResponseOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v OracleProfileResponse) map[string]string { return v.ConnectionAttributes }).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o OracleProfileResponseOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Hostname for the Oracle connection.
func (o OracleProfileResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the Oracle connection.
func (o OracleProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the Oracle connection, default value is 1521.
func (o OracleProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v OracleProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Username for the Oracle connection.
func (o OracleProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

type OracleProfileResponsePtrOutput struct{ *pulumi.OutputState }

func (OracleProfileResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleProfileResponse)(nil)).Elem()
}

func (o OracleProfileResponsePtrOutput) ToOracleProfileResponsePtrOutput() OracleProfileResponsePtrOutput {
	return o
}

func (o OracleProfileResponsePtrOutput) ToOracleProfileResponsePtrOutputWithContext(ctx context.Context) OracleProfileResponsePtrOutput {
	return o
}

func (o OracleProfileResponsePtrOutput) Elem() OracleProfileResponseOutput {
	return o.ApplyT(func(v *OracleProfileResponse) OracleProfileResponse {
		if v != nil {
			return *v
		}
		var ret OracleProfileResponse
		return ret
	}).(OracleProfileResponseOutput)
}

// Connection string attributes
func (o OracleProfileResponsePtrOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OracleProfileResponse) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConnectionAttributes
	}).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o OracleProfileResponsePtrOutput) DatabaseService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseService
	}).(pulumi.StringPtrOutput)
}

// Hostname for the Oracle connection.
func (o OracleProfileResponsePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Password for the Oracle connection.
func (o OracleProfileResponsePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the Oracle connection, default value is 1521.
func (o OracleProfileResponsePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleProfileResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the Oracle connection.
func (o OracleProfileResponsePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfileResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Oracle database structure.
type OracleRdbms struct {
	// Oracle schemas/databases in the database server.
	OracleSchemas []OracleSchema `pulumi:"oracleSchemas"`
}

// OracleRdbmsInput is an input type that accepts OracleRdbmsArgs and OracleRdbmsOutput values.
// You can construct a concrete instance of `OracleRdbmsInput` via:
//
//          OracleRdbmsArgs{...}
type OracleRdbmsInput interface {
	pulumi.Input

	ToOracleRdbmsOutput() OracleRdbmsOutput
	ToOracleRdbmsOutputWithContext(context.Context) OracleRdbmsOutput
}

// Oracle database structure.
type OracleRdbmsArgs struct {
	// Oracle schemas/databases in the database server.
	OracleSchemas OracleSchemaArrayInput `pulumi:"oracleSchemas"`
}

func (OracleRdbmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleRdbms)(nil)).Elem()
}

func (i OracleRdbmsArgs) ToOracleRdbmsOutput() OracleRdbmsOutput {
	return i.ToOracleRdbmsOutputWithContext(context.Background())
}

func (i OracleRdbmsArgs) ToOracleRdbmsOutputWithContext(ctx context.Context) OracleRdbmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsOutput)
}

func (i OracleRdbmsArgs) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return i.ToOracleRdbmsPtrOutputWithContext(context.Background())
}

func (i OracleRdbmsArgs) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsOutput).ToOracleRdbmsPtrOutputWithContext(ctx)
}

// OracleRdbmsPtrInput is an input type that accepts OracleRdbmsArgs, OracleRdbmsPtr and OracleRdbmsPtrOutput values.
// You can construct a concrete instance of `OracleRdbmsPtrInput` via:
//
//          OracleRdbmsArgs{...}
//
//  or:
//
//          nil
type OracleRdbmsPtrInput interface {
	pulumi.Input

	ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput
	ToOracleRdbmsPtrOutputWithContext(context.Context) OracleRdbmsPtrOutput
}

type oracleRdbmsPtrType OracleRdbmsArgs

func OracleRdbmsPtr(v *OracleRdbmsArgs) OracleRdbmsPtrInput {
	return (*oracleRdbmsPtrType)(v)
}

func (*oracleRdbmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleRdbms)(nil)).Elem()
}

func (i *oracleRdbmsPtrType) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return i.ToOracleRdbmsPtrOutputWithContext(context.Background())
}

func (i *oracleRdbmsPtrType) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsPtrOutput)
}

// Oracle database structure.
type OracleRdbmsOutput struct{ *pulumi.OutputState }

func (OracleRdbmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleRdbms)(nil)).Elem()
}

func (o OracleRdbmsOutput) ToOracleRdbmsOutput() OracleRdbmsOutput {
	return o
}

func (o OracleRdbmsOutput) ToOracleRdbmsOutputWithContext(ctx context.Context) OracleRdbmsOutput {
	return o
}

func (o OracleRdbmsOutput) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return o.ToOracleRdbmsPtrOutputWithContext(context.Background())
}

func (o OracleRdbmsOutput) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleRdbms) *OracleRdbms {
		return &v
	}).(OracleRdbmsPtrOutput)
}

// Oracle schemas/databases in the database server.
func (o OracleRdbmsOutput) OracleSchemas() OracleSchemaArrayOutput {
	return o.ApplyT(func(v OracleRdbms) []OracleSchema { return v.OracleSchemas }).(OracleSchemaArrayOutput)
}

type OracleRdbmsPtrOutput struct{ *pulumi.OutputState }

func (OracleRdbmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleRdbms)(nil)).Elem()
}

func (o OracleRdbmsPtrOutput) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return o
}

func (o OracleRdbmsPtrOutput) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return o
}

func (o OracleRdbmsPtrOutput) Elem() OracleRdbmsOutput {
	return o.ApplyT(func(v *OracleRdbms) OracleRdbms {
		if v != nil {
			return *v
		}
		var ret OracleRdbms
		return ret
	}).(OracleRdbmsOutput)
}

// Oracle schemas/databases in the database server.
func (o OracleRdbmsPtrOutput) OracleSchemas() OracleSchemaArrayOutput {
	return o.ApplyT(func(v *OracleRdbms) []OracleSchema {
		if v == nil {
			return nil
		}
		return v.OracleSchemas
	}).(OracleSchemaArrayOutput)
}

// Oracle database structure.
type OracleRdbmsResponse struct {
	// Oracle schemas/databases in the database server.
	OracleSchemas []OracleSchemaResponse `pulumi:"oracleSchemas"`
}

// OracleRdbmsResponseInput is an input type that accepts OracleRdbmsResponseArgs and OracleRdbmsResponseOutput values.
// You can construct a concrete instance of `OracleRdbmsResponseInput` via:
//
//          OracleRdbmsResponseArgs{...}
type OracleRdbmsResponseInput interface {
	pulumi.Input

	ToOracleRdbmsResponseOutput() OracleRdbmsResponseOutput
	ToOracleRdbmsResponseOutputWithContext(context.Context) OracleRdbmsResponseOutput
}

// Oracle database structure.
type OracleRdbmsResponseArgs struct {
	// Oracle schemas/databases in the database server.
	OracleSchemas OracleSchemaResponseArrayInput `pulumi:"oracleSchemas"`
}

func (OracleRdbmsResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleRdbmsResponse)(nil)).Elem()
}

func (i OracleRdbmsResponseArgs) ToOracleRdbmsResponseOutput() OracleRdbmsResponseOutput {
	return i.ToOracleRdbmsResponseOutputWithContext(context.Background())
}

func (i OracleRdbmsResponseArgs) ToOracleRdbmsResponseOutputWithContext(ctx context.Context) OracleRdbmsResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsResponseOutput)
}

func (i OracleRdbmsResponseArgs) ToOracleRdbmsResponsePtrOutput() OracleRdbmsResponsePtrOutput {
	return i.ToOracleRdbmsResponsePtrOutputWithContext(context.Background())
}

func (i OracleRdbmsResponseArgs) ToOracleRdbmsResponsePtrOutputWithContext(ctx context.Context) OracleRdbmsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsResponseOutput).ToOracleRdbmsResponsePtrOutputWithContext(ctx)
}

// OracleRdbmsResponsePtrInput is an input type that accepts OracleRdbmsResponseArgs, OracleRdbmsResponsePtr and OracleRdbmsResponsePtrOutput values.
// You can construct a concrete instance of `OracleRdbmsResponsePtrInput` via:
//
//          OracleRdbmsResponseArgs{...}
//
//  or:
//
//          nil
type OracleRdbmsResponsePtrInput interface {
	pulumi.Input

	ToOracleRdbmsResponsePtrOutput() OracleRdbmsResponsePtrOutput
	ToOracleRdbmsResponsePtrOutputWithContext(context.Context) OracleRdbmsResponsePtrOutput
}

type oracleRdbmsResponsePtrType OracleRdbmsResponseArgs

func OracleRdbmsResponsePtr(v *OracleRdbmsResponseArgs) OracleRdbmsResponsePtrInput {
	return (*oracleRdbmsResponsePtrType)(v)
}

func (*oracleRdbmsResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleRdbmsResponse)(nil)).Elem()
}

func (i *oracleRdbmsResponsePtrType) ToOracleRdbmsResponsePtrOutput() OracleRdbmsResponsePtrOutput {
	return i.ToOracleRdbmsResponsePtrOutputWithContext(context.Background())
}

func (i *oracleRdbmsResponsePtrType) ToOracleRdbmsResponsePtrOutputWithContext(ctx context.Context) OracleRdbmsResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsResponsePtrOutput)
}

// Oracle database structure.
type OracleRdbmsResponseOutput struct{ *pulumi.OutputState }

func (OracleRdbmsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleRdbmsResponse)(nil)).Elem()
}

func (o OracleRdbmsResponseOutput) ToOracleRdbmsResponseOutput() OracleRdbmsResponseOutput {
	return o
}

func (o OracleRdbmsResponseOutput) ToOracleRdbmsResponseOutputWithContext(ctx context.Context) OracleRdbmsResponseOutput {
	return o
}

func (o OracleRdbmsResponseOutput) ToOracleRdbmsResponsePtrOutput() OracleRdbmsResponsePtrOutput {
	return o.ToOracleRdbmsResponsePtrOutputWithContext(context.Background())
}

func (o OracleRdbmsResponseOutput) ToOracleRdbmsResponsePtrOutputWithContext(ctx context.Context) OracleRdbmsResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleRdbmsResponse) *OracleRdbmsResponse {
		return &v
	}).(OracleRdbmsResponsePtrOutput)
}

// Oracle schemas/databases in the database server.
func (o OracleRdbmsResponseOutput) OracleSchemas() OracleSchemaResponseArrayOutput {
	return o.ApplyT(func(v OracleRdbmsResponse) []OracleSchemaResponse { return v.OracleSchemas }).(OracleSchemaResponseArrayOutput)
}

type OracleRdbmsResponsePtrOutput struct{ *pulumi.OutputState }

func (OracleRdbmsResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleRdbmsResponse)(nil)).Elem()
}

func (o OracleRdbmsResponsePtrOutput) ToOracleRdbmsResponsePtrOutput() OracleRdbmsResponsePtrOutput {
	return o
}

func (o OracleRdbmsResponsePtrOutput) ToOracleRdbmsResponsePtrOutputWithContext(ctx context.Context) OracleRdbmsResponsePtrOutput {
	return o
}

func (o OracleRdbmsResponsePtrOutput) Elem() OracleRdbmsResponseOutput {
	return o.ApplyT(func(v *OracleRdbmsResponse) OracleRdbmsResponse {
		if v != nil {
			return *v
		}
		var ret OracleRdbmsResponse
		return ret
	}).(OracleRdbmsResponseOutput)
}

// Oracle schemas/databases in the database server.
func (o OracleRdbmsResponsePtrOutput) OracleSchemas() OracleSchemaResponseArrayOutput {
	return o.ApplyT(func(v *OracleRdbmsResponse) []OracleSchemaResponse {
		if v == nil {
			return nil
		}
		return v.OracleSchemas
	}).(OracleSchemaResponseArrayOutput)
}

// Oracle schema.
type OracleSchema struct {
	// Tables in the schema.
	OracleTables []OracleTable `pulumi:"oracleTables"`
	// Schema name.
	SchemaName *string `pulumi:"schemaName"`
}

// OracleSchemaInput is an input type that accepts OracleSchemaArgs and OracleSchemaOutput values.
// You can construct a concrete instance of `OracleSchemaInput` via:
//
//          OracleSchemaArgs{...}
type OracleSchemaInput interface {
	pulumi.Input

	ToOracleSchemaOutput() OracleSchemaOutput
	ToOracleSchemaOutputWithContext(context.Context) OracleSchemaOutput
}

// Oracle schema.
type OracleSchemaArgs struct {
	// Tables in the schema.
	OracleTables OracleTableArrayInput `pulumi:"oracleTables"`
	// Schema name.
	SchemaName pulumi.StringPtrInput `pulumi:"schemaName"`
}

func (OracleSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSchema)(nil)).Elem()
}

func (i OracleSchemaArgs) ToOracleSchemaOutput() OracleSchemaOutput {
	return i.ToOracleSchemaOutputWithContext(context.Background())
}

func (i OracleSchemaArgs) ToOracleSchemaOutputWithContext(ctx context.Context) OracleSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSchemaOutput)
}

// OracleSchemaArrayInput is an input type that accepts OracleSchemaArray and OracleSchemaArrayOutput values.
// You can construct a concrete instance of `OracleSchemaArrayInput` via:
//
//          OracleSchemaArray{ OracleSchemaArgs{...} }
type OracleSchemaArrayInput interface {
	pulumi.Input

	ToOracleSchemaArrayOutput() OracleSchemaArrayOutput
	ToOracleSchemaArrayOutputWithContext(context.Context) OracleSchemaArrayOutput
}

type OracleSchemaArray []OracleSchemaInput

func (OracleSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleSchema)(nil)).Elem()
}

func (i OracleSchemaArray) ToOracleSchemaArrayOutput() OracleSchemaArrayOutput {
	return i.ToOracleSchemaArrayOutputWithContext(context.Background())
}

func (i OracleSchemaArray) ToOracleSchemaArrayOutputWithContext(ctx context.Context) OracleSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSchemaArrayOutput)
}

// Oracle schema.
type OracleSchemaOutput struct{ *pulumi.OutputState }

func (OracleSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSchema)(nil)).Elem()
}

func (o OracleSchemaOutput) ToOracleSchemaOutput() OracleSchemaOutput {
	return o
}

func (o OracleSchemaOutput) ToOracleSchemaOutputWithContext(ctx context.Context) OracleSchemaOutput {
	return o
}

// Tables in the schema.
func (o OracleSchemaOutput) OracleTables() OracleTableArrayOutput {
	return o.ApplyT(func(v OracleSchema) []OracleTable { return v.OracleTables }).(OracleTableArrayOutput)
}

// Schema name.
func (o OracleSchemaOutput) SchemaName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleSchema) *string { return v.SchemaName }).(pulumi.StringPtrOutput)
}

type OracleSchemaArrayOutput struct{ *pulumi.OutputState }

func (OracleSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleSchema)(nil)).Elem()
}

func (o OracleSchemaArrayOutput) ToOracleSchemaArrayOutput() OracleSchemaArrayOutput {
	return o
}

func (o OracleSchemaArrayOutput) ToOracleSchemaArrayOutputWithContext(ctx context.Context) OracleSchemaArrayOutput {
	return o
}

func (o OracleSchemaArrayOutput) Index(i pulumi.IntInput) OracleSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleSchema {
		return vs[0].([]OracleSchema)[vs[1].(int)]
	}).(OracleSchemaOutput)
}

// Oracle schema.
type OracleSchemaResponse struct {
	// Tables in the schema.
	OracleTables []OracleTableResponse `pulumi:"oracleTables"`
	// Schema name.
	SchemaName string `pulumi:"schemaName"`
}

// OracleSchemaResponseInput is an input type that accepts OracleSchemaResponseArgs and OracleSchemaResponseOutput values.
// You can construct a concrete instance of `OracleSchemaResponseInput` via:
//
//          OracleSchemaResponseArgs{...}
type OracleSchemaResponseInput interface {
	pulumi.Input

	ToOracleSchemaResponseOutput() OracleSchemaResponseOutput
	ToOracleSchemaResponseOutputWithContext(context.Context) OracleSchemaResponseOutput
}

// Oracle schema.
type OracleSchemaResponseArgs struct {
	// Tables in the schema.
	OracleTables OracleTableResponseArrayInput `pulumi:"oracleTables"`
	// Schema name.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (OracleSchemaResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSchemaResponse)(nil)).Elem()
}

func (i OracleSchemaResponseArgs) ToOracleSchemaResponseOutput() OracleSchemaResponseOutput {
	return i.ToOracleSchemaResponseOutputWithContext(context.Background())
}

func (i OracleSchemaResponseArgs) ToOracleSchemaResponseOutputWithContext(ctx context.Context) OracleSchemaResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSchemaResponseOutput)
}

// OracleSchemaResponseArrayInput is an input type that accepts OracleSchemaResponseArray and OracleSchemaResponseArrayOutput values.
// You can construct a concrete instance of `OracleSchemaResponseArrayInput` via:
//
//          OracleSchemaResponseArray{ OracleSchemaResponseArgs{...} }
type OracleSchemaResponseArrayInput interface {
	pulumi.Input

	ToOracleSchemaResponseArrayOutput() OracleSchemaResponseArrayOutput
	ToOracleSchemaResponseArrayOutputWithContext(context.Context) OracleSchemaResponseArrayOutput
}

type OracleSchemaResponseArray []OracleSchemaResponseInput

func (OracleSchemaResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleSchemaResponse)(nil)).Elem()
}

func (i OracleSchemaResponseArray) ToOracleSchemaResponseArrayOutput() OracleSchemaResponseArrayOutput {
	return i.ToOracleSchemaResponseArrayOutputWithContext(context.Background())
}

func (i OracleSchemaResponseArray) ToOracleSchemaResponseArrayOutputWithContext(ctx context.Context) OracleSchemaResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSchemaResponseArrayOutput)
}

// Oracle schema.
type OracleSchemaResponseOutput struct{ *pulumi.OutputState }

func (OracleSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSchemaResponse)(nil)).Elem()
}

func (o OracleSchemaResponseOutput) ToOracleSchemaResponseOutput() OracleSchemaResponseOutput {
	return o
}

func (o OracleSchemaResponseOutput) ToOracleSchemaResponseOutputWithContext(ctx context.Context) OracleSchemaResponseOutput {
	return o
}

// Tables in the schema.
func (o OracleSchemaResponseOutput) OracleTables() OracleTableResponseArrayOutput {
	return o.ApplyT(func(v OracleSchemaResponse) []OracleTableResponse { return v.OracleTables }).(OracleTableResponseArrayOutput)
}

// Schema name.
func (o OracleSchemaResponseOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v OracleSchemaResponse) string { return v.SchemaName }).(pulumi.StringOutput)
}

type OracleSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (OracleSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleSchemaResponse)(nil)).Elem()
}

func (o OracleSchemaResponseArrayOutput) ToOracleSchemaResponseArrayOutput() OracleSchemaResponseArrayOutput {
	return o
}

func (o OracleSchemaResponseArrayOutput) ToOracleSchemaResponseArrayOutputWithContext(ctx context.Context) OracleSchemaResponseArrayOutput {
	return o
}

func (o OracleSchemaResponseArrayOutput) Index(i pulumi.IntInput) OracleSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleSchemaResponse {
		return vs[0].([]OracleSchemaResponse)[vs[1].(int)]
	}).(OracleSchemaResponseOutput)
}

// Oracle data source configuration
type OracleSourceConfig struct {
	// Oracle objects to include in the stream.
	Allowlist *OracleRdbms `pulumi:"allowlist"`
	// Oracle objects to exclude from the stream.
	Rejectlist *OracleRdbms `pulumi:"rejectlist"`
}

// OracleSourceConfigInput is an input type that accepts OracleSourceConfigArgs and OracleSourceConfigOutput values.
// You can construct a concrete instance of `OracleSourceConfigInput` via:
//
//          OracleSourceConfigArgs{...}
type OracleSourceConfigInput interface {
	pulumi.Input

	ToOracleSourceConfigOutput() OracleSourceConfigOutput
	ToOracleSourceConfigOutputWithContext(context.Context) OracleSourceConfigOutput
}

// Oracle data source configuration
type OracleSourceConfigArgs struct {
	// Oracle objects to include in the stream.
	Allowlist OracleRdbmsPtrInput `pulumi:"allowlist"`
	// Oracle objects to exclude from the stream.
	Rejectlist OracleRdbmsPtrInput `pulumi:"rejectlist"`
}

func (OracleSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceConfig)(nil)).Elem()
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigOutput() OracleSourceConfigOutput {
	return i.ToOracleSourceConfigOutputWithContext(context.Background())
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigOutputWithContext(ctx context.Context) OracleSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigOutput)
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return i.ToOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigOutput).ToOracleSourceConfigPtrOutputWithContext(ctx)
}

// OracleSourceConfigPtrInput is an input type that accepts OracleSourceConfigArgs, OracleSourceConfigPtr and OracleSourceConfigPtrOutput values.
// You can construct a concrete instance of `OracleSourceConfigPtrInput` via:
//
//          OracleSourceConfigArgs{...}
//
//  or:
//
//          nil
type OracleSourceConfigPtrInput interface {
	pulumi.Input

	ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput
	ToOracleSourceConfigPtrOutputWithContext(context.Context) OracleSourceConfigPtrOutput
}

type oracleSourceConfigPtrType OracleSourceConfigArgs

func OracleSourceConfigPtr(v *OracleSourceConfigArgs) OracleSourceConfigPtrInput {
	return (*oracleSourceConfigPtrType)(v)
}

func (*oracleSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleSourceConfig)(nil)).Elem()
}

func (i *oracleSourceConfigPtrType) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return i.ToOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (i *oracleSourceConfigPtrType) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigPtrOutput)
}

// Oracle data source configuration
type OracleSourceConfigOutput struct{ *pulumi.OutputState }

func (OracleSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceConfig)(nil)).Elem()
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigOutput() OracleSourceConfigOutput {
	return o
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigOutputWithContext(ctx context.Context) OracleSourceConfigOutput {
	return o
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return o.ToOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleSourceConfig) *OracleSourceConfig {
		return &v
	}).(OracleSourceConfigPtrOutput)
}

// Oracle objects to include in the stream.
func (o OracleSourceConfigOutput) Allowlist() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *OracleRdbms { return v.Allowlist }).(OracleRdbmsPtrOutput)
}

// Oracle objects to exclude from the stream.
func (o OracleSourceConfigOutput) Rejectlist() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *OracleRdbms { return v.Rejectlist }).(OracleRdbmsPtrOutput)
}

type OracleSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (OracleSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleSourceConfig)(nil)).Elem()
}

func (o OracleSourceConfigPtrOutput) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return o
}

func (o OracleSourceConfigPtrOutput) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return o
}

func (o OracleSourceConfigPtrOutput) Elem() OracleSourceConfigOutput {
	return o.ApplyT(func(v *OracleSourceConfig) OracleSourceConfig {
		if v != nil {
			return *v
		}
		var ret OracleSourceConfig
		return ret
	}).(OracleSourceConfigOutput)
}

// Oracle objects to include in the stream.
func (o OracleSourceConfigPtrOutput) Allowlist() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *OracleRdbms {
		if v == nil {
			return nil
		}
		return v.Allowlist
	}).(OracleRdbmsPtrOutput)
}

// Oracle objects to exclude from the stream.
func (o OracleSourceConfigPtrOutput) Rejectlist() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *OracleRdbms {
		if v == nil {
			return nil
		}
		return v.Rejectlist
	}).(OracleRdbmsPtrOutput)
}

// Oracle data source configuration
type OracleSourceConfigResponse struct {
	// Oracle objects to include in the stream.
	Allowlist OracleRdbmsResponse `pulumi:"allowlist"`
	// Oracle objects to exclude from the stream.
	Rejectlist OracleRdbmsResponse `pulumi:"rejectlist"`
}

// OracleSourceConfigResponseInput is an input type that accepts OracleSourceConfigResponseArgs and OracleSourceConfigResponseOutput values.
// You can construct a concrete instance of `OracleSourceConfigResponseInput` via:
//
//          OracleSourceConfigResponseArgs{...}
type OracleSourceConfigResponseInput interface {
	pulumi.Input

	ToOracleSourceConfigResponseOutput() OracleSourceConfigResponseOutput
	ToOracleSourceConfigResponseOutputWithContext(context.Context) OracleSourceConfigResponseOutput
}

// Oracle data source configuration
type OracleSourceConfigResponseArgs struct {
	// Oracle objects to include in the stream.
	Allowlist OracleRdbmsResponseInput `pulumi:"allowlist"`
	// Oracle objects to exclude from the stream.
	Rejectlist OracleRdbmsResponseInput `pulumi:"rejectlist"`
}

func (OracleSourceConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceConfigResponse)(nil)).Elem()
}

func (i OracleSourceConfigResponseArgs) ToOracleSourceConfigResponseOutput() OracleSourceConfigResponseOutput {
	return i.ToOracleSourceConfigResponseOutputWithContext(context.Background())
}

func (i OracleSourceConfigResponseArgs) ToOracleSourceConfigResponseOutputWithContext(ctx context.Context) OracleSourceConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigResponseOutput)
}

func (i OracleSourceConfigResponseArgs) ToOracleSourceConfigResponsePtrOutput() OracleSourceConfigResponsePtrOutput {
	return i.ToOracleSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (i OracleSourceConfigResponseArgs) ToOracleSourceConfigResponsePtrOutputWithContext(ctx context.Context) OracleSourceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigResponseOutput).ToOracleSourceConfigResponsePtrOutputWithContext(ctx)
}

// OracleSourceConfigResponsePtrInput is an input type that accepts OracleSourceConfigResponseArgs, OracleSourceConfigResponsePtr and OracleSourceConfigResponsePtrOutput values.
// You can construct a concrete instance of `OracleSourceConfigResponsePtrInput` via:
//
//          OracleSourceConfigResponseArgs{...}
//
//  or:
//
//          nil
type OracleSourceConfigResponsePtrInput interface {
	pulumi.Input

	ToOracleSourceConfigResponsePtrOutput() OracleSourceConfigResponsePtrOutput
	ToOracleSourceConfigResponsePtrOutputWithContext(context.Context) OracleSourceConfigResponsePtrOutput
}

type oracleSourceConfigResponsePtrType OracleSourceConfigResponseArgs

func OracleSourceConfigResponsePtr(v *OracleSourceConfigResponseArgs) OracleSourceConfigResponsePtrInput {
	return (*oracleSourceConfigResponsePtrType)(v)
}

func (*oracleSourceConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleSourceConfigResponse)(nil)).Elem()
}

func (i *oracleSourceConfigResponsePtrType) ToOracleSourceConfigResponsePtrOutput() OracleSourceConfigResponsePtrOutput {
	return i.ToOracleSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (i *oracleSourceConfigResponsePtrType) ToOracleSourceConfigResponsePtrOutputWithContext(ctx context.Context) OracleSourceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigResponsePtrOutput)
}

// Oracle data source configuration
type OracleSourceConfigResponseOutput struct{ *pulumi.OutputState }

func (OracleSourceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceConfigResponse)(nil)).Elem()
}

func (o OracleSourceConfigResponseOutput) ToOracleSourceConfigResponseOutput() OracleSourceConfigResponseOutput {
	return o
}

func (o OracleSourceConfigResponseOutput) ToOracleSourceConfigResponseOutputWithContext(ctx context.Context) OracleSourceConfigResponseOutput {
	return o
}

func (o OracleSourceConfigResponseOutput) ToOracleSourceConfigResponsePtrOutput() OracleSourceConfigResponsePtrOutput {
	return o.ToOracleSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (o OracleSourceConfigResponseOutput) ToOracleSourceConfigResponsePtrOutputWithContext(ctx context.Context) OracleSourceConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleSourceConfigResponse) *OracleSourceConfigResponse {
		return &v
	}).(OracleSourceConfigResponsePtrOutput)
}

// Oracle objects to include in the stream.
func (o OracleSourceConfigResponseOutput) Allowlist() OracleRdbmsResponseOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) OracleRdbmsResponse { return v.Allowlist }).(OracleRdbmsResponseOutput)
}

// Oracle objects to exclude from the stream.
func (o OracleSourceConfigResponseOutput) Rejectlist() OracleRdbmsResponseOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) OracleRdbmsResponse { return v.Rejectlist }).(OracleRdbmsResponseOutput)
}

type OracleSourceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (OracleSourceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleSourceConfigResponse)(nil)).Elem()
}

func (o OracleSourceConfigResponsePtrOutput) ToOracleSourceConfigResponsePtrOutput() OracleSourceConfigResponsePtrOutput {
	return o
}

func (o OracleSourceConfigResponsePtrOutput) ToOracleSourceConfigResponsePtrOutputWithContext(ctx context.Context) OracleSourceConfigResponsePtrOutput {
	return o
}

func (o OracleSourceConfigResponsePtrOutput) Elem() OracleSourceConfigResponseOutput {
	return o.ApplyT(func(v *OracleSourceConfigResponse) OracleSourceConfigResponse {
		if v != nil {
			return *v
		}
		var ret OracleSourceConfigResponse
		return ret
	}).(OracleSourceConfigResponseOutput)
}

// Oracle objects to include in the stream.
func (o OracleSourceConfigResponsePtrOutput) Allowlist() OracleRdbmsResponsePtrOutput {
	return o.ApplyT(func(v *OracleSourceConfigResponse) *OracleRdbmsResponse {
		if v == nil {
			return nil
		}
		return &v.Allowlist
	}).(OracleRdbmsResponsePtrOutput)
}

// Oracle objects to exclude from the stream.
func (o OracleSourceConfigResponsePtrOutput) Rejectlist() OracleRdbmsResponsePtrOutput {
	return o.ApplyT(func(v *OracleSourceConfigResponse) *OracleRdbmsResponse {
		if v == nil {
			return nil
		}
		return &v.Rejectlist
	}).(OracleRdbmsResponsePtrOutput)
}

// Oracle table.
type OracleTable struct {
	// Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.
	OracleColumns []OracleColumn `pulumi:"oracleColumns"`
	// Table name.
	TableName *string `pulumi:"tableName"`
}

// OracleTableInput is an input type that accepts OracleTableArgs and OracleTableOutput values.
// You can construct a concrete instance of `OracleTableInput` via:
//
//          OracleTableArgs{...}
type OracleTableInput interface {
	pulumi.Input

	ToOracleTableOutput() OracleTableOutput
	ToOracleTableOutputWithContext(context.Context) OracleTableOutput
}

// Oracle table.
type OracleTableArgs struct {
	// Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.
	OracleColumns OracleColumnArrayInput `pulumi:"oracleColumns"`
	// Table name.
	TableName pulumi.StringPtrInput `pulumi:"tableName"`
}

func (OracleTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTable)(nil)).Elem()
}

func (i OracleTableArgs) ToOracleTableOutput() OracleTableOutput {
	return i.ToOracleTableOutputWithContext(context.Background())
}

func (i OracleTableArgs) ToOracleTableOutputWithContext(ctx context.Context) OracleTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableOutput)
}

// OracleTableArrayInput is an input type that accepts OracleTableArray and OracleTableArrayOutput values.
// You can construct a concrete instance of `OracleTableArrayInput` via:
//
//          OracleTableArray{ OracleTableArgs{...} }
type OracleTableArrayInput interface {
	pulumi.Input

	ToOracleTableArrayOutput() OracleTableArrayOutput
	ToOracleTableArrayOutputWithContext(context.Context) OracleTableArrayOutput
}

type OracleTableArray []OracleTableInput

func (OracleTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleTable)(nil)).Elem()
}

func (i OracleTableArray) ToOracleTableArrayOutput() OracleTableArrayOutput {
	return i.ToOracleTableArrayOutputWithContext(context.Background())
}

func (i OracleTableArray) ToOracleTableArrayOutputWithContext(ctx context.Context) OracleTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableArrayOutput)
}

// Oracle table.
type OracleTableOutput struct{ *pulumi.OutputState }

func (OracleTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTable)(nil)).Elem()
}

func (o OracleTableOutput) ToOracleTableOutput() OracleTableOutput {
	return o
}

func (o OracleTableOutput) ToOracleTableOutputWithContext(ctx context.Context) OracleTableOutput {
	return o
}

// Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.
func (o OracleTableOutput) OracleColumns() OracleColumnArrayOutput {
	return o.ApplyT(func(v OracleTable) []OracleColumn { return v.OracleColumns }).(OracleColumnArrayOutput)
}

// Table name.
func (o OracleTableOutput) TableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleTable) *string { return v.TableName }).(pulumi.StringPtrOutput)
}

type OracleTableArrayOutput struct{ *pulumi.OutputState }

func (OracleTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleTable)(nil)).Elem()
}

func (o OracleTableArrayOutput) ToOracleTableArrayOutput() OracleTableArrayOutput {
	return o
}

func (o OracleTableArrayOutput) ToOracleTableArrayOutputWithContext(ctx context.Context) OracleTableArrayOutput {
	return o
}

func (o OracleTableArrayOutput) Index(i pulumi.IntInput) OracleTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleTable {
		return vs[0].([]OracleTable)[vs[1].(int)]
	}).(OracleTableOutput)
}

// Oracle table.
type OracleTableResponse struct {
	// Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.
	OracleColumns []OracleColumnResponse `pulumi:"oracleColumns"`
	// Table name.
	TableName string `pulumi:"tableName"`
}

// OracleTableResponseInput is an input type that accepts OracleTableResponseArgs and OracleTableResponseOutput values.
// You can construct a concrete instance of `OracleTableResponseInput` via:
//
//          OracleTableResponseArgs{...}
type OracleTableResponseInput interface {
	pulumi.Input

	ToOracleTableResponseOutput() OracleTableResponseOutput
	ToOracleTableResponseOutputWithContext(context.Context) OracleTableResponseOutput
}

// Oracle table.
type OracleTableResponseArgs struct {
	// Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.
	OracleColumns OracleColumnResponseArrayInput `pulumi:"oracleColumns"`
	// Table name.
	TableName pulumi.StringInput `pulumi:"tableName"`
}

func (OracleTableResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableResponse)(nil)).Elem()
}

func (i OracleTableResponseArgs) ToOracleTableResponseOutput() OracleTableResponseOutput {
	return i.ToOracleTableResponseOutputWithContext(context.Background())
}

func (i OracleTableResponseArgs) ToOracleTableResponseOutputWithContext(ctx context.Context) OracleTableResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableResponseOutput)
}

// OracleTableResponseArrayInput is an input type that accepts OracleTableResponseArray and OracleTableResponseArrayOutput values.
// You can construct a concrete instance of `OracleTableResponseArrayInput` via:
//
//          OracleTableResponseArray{ OracleTableResponseArgs{...} }
type OracleTableResponseArrayInput interface {
	pulumi.Input

	ToOracleTableResponseArrayOutput() OracleTableResponseArrayOutput
	ToOracleTableResponseArrayOutputWithContext(context.Context) OracleTableResponseArrayOutput
}

type OracleTableResponseArray []OracleTableResponseInput

func (OracleTableResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleTableResponse)(nil)).Elem()
}

func (i OracleTableResponseArray) ToOracleTableResponseArrayOutput() OracleTableResponseArrayOutput {
	return i.ToOracleTableResponseArrayOutputWithContext(context.Background())
}

func (i OracleTableResponseArray) ToOracleTableResponseArrayOutputWithContext(ctx context.Context) OracleTableResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableResponseArrayOutput)
}

// Oracle table.
type OracleTableResponseOutput struct{ *pulumi.OutputState }

func (OracleTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableResponse)(nil)).Elem()
}

func (o OracleTableResponseOutput) ToOracleTableResponseOutput() OracleTableResponseOutput {
	return o
}

func (o OracleTableResponseOutput) ToOracleTableResponseOutputWithContext(ctx context.Context) OracleTableResponseOutput {
	return o
}

// Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.
func (o OracleTableResponseOutput) OracleColumns() OracleColumnResponseArrayOutput {
	return o.ApplyT(func(v OracleTableResponse) []OracleColumnResponse { return v.OracleColumns }).(OracleColumnResponseArrayOutput)
}

// Table name.
func (o OracleTableResponseOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v OracleTableResponse) string { return v.TableName }).(pulumi.StringOutput)
}

type OracleTableResponseArrayOutput struct{ *pulumi.OutputState }

func (OracleTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleTableResponse)(nil)).Elem()
}

func (o OracleTableResponseArrayOutput) ToOracleTableResponseArrayOutput() OracleTableResponseArrayOutput {
	return o
}

func (o OracleTableResponseArrayOutput) ToOracleTableResponseArrayOutputWithContext(ctx context.Context) OracleTableResponseArrayOutput {
	return o
}

func (o OracleTableResponseArrayOutput) Index(i pulumi.IntInput) OracleTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleTableResponse {
		return vs[0].([]OracleTableResponse)[vs[1].(int)]
	}).(OracleTableResponseOutput)
}

// Private Connectivity
type PrivateConnectivity struct {
	PrivateConnectionName *string `pulumi:"privateConnectionName"`
}

// PrivateConnectivityInput is an input type that accepts PrivateConnectivityArgs and PrivateConnectivityOutput values.
// You can construct a concrete instance of `PrivateConnectivityInput` via:
//
//          PrivateConnectivityArgs{...}
type PrivateConnectivityInput interface {
	pulumi.Input

	ToPrivateConnectivityOutput() PrivateConnectivityOutput
	ToPrivateConnectivityOutputWithContext(context.Context) PrivateConnectivityOutput
}

// Private Connectivity
type PrivateConnectivityArgs struct {
	PrivateConnectionName pulumi.StringPtrInput `pulumi:"privateConnectionName"`
}

func (PrivateConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivity)(nil)).Elem()
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityOutput() PrivateConnectivityOutput {
	return i.ToPrivateConnectivityOutputWithContext(context.Background())
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityOutputWithContext(ctx context.Context) PrivateConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityOutput)
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return i.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityOutput).ToPrivateConnectivityPtrOutputWithContext(ctx)
}

// PrivateConnectivityPtrInput is an input type that accepts PrivateConnectivityArgs, PrivateConnectivityPtr and PrivateConnectivityPtrOutput values.
// You can construct a concrete instance of `PrivateConnectivityPtrInput` via:
//
//          PrivateConnectivityArgs{...}
//
//  or:
//
//          nil
type PrivateConnectivityPtrInput interface {
	pulumi.Input

	ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput
	ToPrivateConnectivityPtrOutputWithContext(context.Context) PrivateConnectivityPtrOutput
}

type privateConnectivityPtrType PrivateConnectivityArgs

func PrivateConnectivityPtr(v *PrivateConnectivityArgs) PrivateConnectivityPtrInput {
	return (*privateConnectivityPtrType)(v)
}

func (*privateConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivity)(nil)).Elem()
}

func (i *privateConnectivityPtrType) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return i.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i *privateConnectivityPtrType) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityPtrOutput)
}

// Private Connectivity
type PrivateConnectivityOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivity)(nil)).Elem()
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityOutput() PrivateConnectivityOutput {
	return o
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityOutputWithContext(ctx context.Context) PrivateConnectivityOutput {
	return o
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return o.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectivity) *PrivateConnectivity {
		return &v
	}).(PrivateConnectivityPtrOutput)
}

func (o PrivateConnectivityOutput) PrivateConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateConnectivity) *string { return v.PrivateConnectionName }).(pulumi.StringPtrOutput)
}

type PrivateConnectivityPtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivity)(nil)).Elem()
}

func (o PrivateConnectivityPtrOutput) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return o
}

func (o PrivateConnectivityPtrOutput) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return o
}

func (o PrivateConnectivityPtrOutput) Elem() PrivateConnectivityOutput {
	return o.ApplyT(func(v *PrivateConnectivity) PrivateConnectivity {
		if v != nil {
			return *v
		}
		var ret PrivateConnectivity
		return ret
	}).(PrivateConnectivityOutput)
}

func (o PrivateConnectivityPtrOutput) PrivateConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.PrivateConnectionName
	}).(pulumi.StringPtrOutput)
}

// Private Connectivity
type PrivateConnectivityResponse struct {
	PrivateConnectionName string `pulumi:"privateConnectionName"`
}

// PrivateConnectivityResponseInput is an input type that accepts PrivateConnectivityResponseArgs and PrivateConnectivityResponseOutput values.
// You can construct a concrete instance of `PrivateConnectivityResponseInput` via:
//
//          PrivateConnectivityResponseArgs{...}
type PrivateConnectivityResponseInput interface {
	pulumi.Input

	ToPrivateConnectivityResponseOutput() PrivateConnectivityResponseOutput
	ToPrivateConnectivityResponseOutputWithContext(context.Context) PrivateConnectivityResponseOutput
}

// Private Connectivity
type PrivateConnectivityResponseArgs struct {
	PrivateConnectionName pulumi.StringInput `pulumi:"privateConnectionName"`
}

func (PrivateConnectivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivityResponse)(nil)).Elem()
}

func (i PrivateConnectivityResponseArgs) ToPrivateConnectivityResponseOutput() PrivateConnectivityResponseOutput {
	return i.ToPrivateConnectivityResponseOutputWithContext(context.Background())
}

func (i PrivateConnectivityResponseArgs) ToPrivateConnectivityResponseOutputWithContext(ctx context.Context) PrivateConnectivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityResponseOutput)
}

func (i PrivateConnectivityResponseArgs) ToPrivateConnectivityResponsePtrOutput() PrivateConnectivityResponsePtrOutput {
	return i.ToPrivateConnectivityResponsePtrOutputWithContext(context.Background())
}

func (i PrivateConnectivityResponseArgs) ToPrivateConnectivityResponsePtrOutputWithContext(ctx context.Context) PrivateConnectivityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityResponseOutput).ToPrivateConnectivityResponsePtrOutputWithContext(ctx)
}

// PrivateConnectivityResponsePtrInput is an input type that accepts PrivateConnectivityResponseArgs, PrivateConnectivityResponsePtr and PrivateConnectivityResponsePtrOutput values.
// You can construct a concrete instance of `PrivateConnectivityResponsePtrInput` via:
//
//          PrivateConnectivityResponseArgs{...}
//
//  or:
//
//          nil
type PrivateConnectivityResponsePtrInput interface {
	pulumi.Input

	ToPrivateConnectivityResponsePtrOutput() PrivateConnectivityResponsePtrOutput
	ToPrivateConnectivityResponsePtrOutputWithContext(context.Context) PrivateConnectivityResponsePtrOutput
}

type privateConnectivityResponsePtrType PrivateConnectivityResponseArgs

func PrivateConnectivityResponsePtr(v *PrivateConnectivityResponseArgs) PrivateConnectivityResponsePtrInput {
	return (*privateConnectivityResponsePtrType)(v)
}

func (*privateConnectivityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivityResponse)(nil)).Elem()
}

func (i *privateConnectivityResponsePtrType) ToPrivateConnectivityResponsePtrOutput() PrivateConnectivityResponsePtrOutput {
	return i.ToPrivateConnectivityResponsePtrOutputWithContext(context.Background())
}

func (i *privateConnectivityResponsePtrType) ToPrivateConnectivityResponsePtrOutputWithContext(ctx context.Context) PrivateConnectivityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityResponsePtrOutput)
}

// Private Connectivity
type PrivateConnectivityResponseOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivityResponse)(nil)).Elem()
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponseOutput() PrivateConnectivityResponseOutput {
	return o
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponseOutputWithContext(ctx context.Context) PrivateConnectivityResponseOutput {
	return o
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponsePtrOutput() PrivateConnectivityResponsePtrOutput {
	return o.ToPrivateConnectivityResponsePtrOutputWithContext(context.Background())
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponsePtrOutputWithContext(ctx context.Context) PrivateConnectivityResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectivityResponse) *PrivateConnectivityResponse {
		return &v
	}).(PrivateConnectivityResponsePtrOutput)
}

func (o PrivateConnectivityResponseOutput) PrivateConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectivityResponse) string { return v.PrivateConnectionName }).(pulumi.StringOutput)
}

type PrivateConnectivityResponsePtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivityResponse)(nil)).Elem()
}

func (o PrivateConnectivityResponsePtrOutput) ToPrivateConnectivityResponsePtrOutput() PrivateConnectivityResponsePtrOutput {
	return o
}

func (o PrivateConnectivityResponsePtrOutput) ToPrivateConnectivityResponsePtrOutputWithContext(ctx context.Context) PrivateConnectivityResponsePtrOutput {
	return o
}

func (o PrivateConnectivityResponsePtrOutput) Elem() PrivateConnectivityResponseOutput {
	return o.ApplyT(func(v *PrivateConnectivityResponse) PrivateConnectivityResponse {
		if v != nil {
			return *v
		}
		var ret PrivateConnectivityResponse
		return ret
	}).(PrivateConnectivityResponseOutput)
}

func (o PrivateConnectivityResponsePtrOutput) PrivateConnectionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectivityResponse) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateConnectionName
	}).(pulumi.StringPtrOutput)
}

// The configuration of the stream source.
type SourceConfig struct {
	// MySQL data source configuration
	MysqlSourceConfig *MysqlSourceConfig `pulumi:"mysqlSourceConfig"`
	// Oracle data source configuration
	OracleSourceConfig *OracleSourceConfig `pulumi:"oracleSourceConfig"`
	// Source connection profile identifier.
	SourceConnectionProfileName string `pulumi:"sourceConnectionProfileName"`
}

// SourceConfigInput is an input type that accepts SourceConfigArgs and SourceConfigOutput values.
// You can construct a concrete instance of `SourceConfigInput` via:
//
//          SourceConfigArgs{...}
type SourceConfigInput interface {
	pulumi.Input

	ToSourceConfigOutput() SourceConfigOutput
	ToSourceConfigOutputWithContext(context.Context) SourceConfigOutput
}

// The configuration of the stream source.
type SourceConfigArgs struct {
	// MySQL data source configuration
	MysqlSourceConfig MysqlSourceConfigPtrInput `pulumi:"mysqlSourceConfig"`
	// Oracle data source configuration
	OracleSourceConfig OracleSourceConfigPtrInput `pulumi:"oracleSourceConfig"`
	// Source connection profile identifier.
	SourceConnectionProfileName pulumi.StringInput `pulumi:"sourceConnectionProfileName"`
}

func (SourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfig)(nil)).Elem()
}

func (i SourceConfigArgs) ToSourceConfigOutput() SourceConfigOutput {
	return i.ToSourceConfigOutputWithContext(context.Background())
}

func (i SourceConfigArgs) ToSourceConfigOutputWithContext(ctx context.Context) SourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfigOutput)
}

func (i SourceConfigArgs) ToSourceConfigPtrOutput() SourceConfigPtrOutput {
	return i.ToSourceConfigPtrOutputWithContext(context.Background())
}

func (i SourceConfigArgs) ToSourceConfigPtrOutputWithContext(ctx context.Context) SourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfigOutput).ToSourceConfigPtrOutputWithContext(ctx)
}

// SourceConfigPtrInput is an input type that accepts SourceConfigArgs, SourceConfigPtr and SourceConfigPtrOutput values.
// You can construct a concrete instance of `SourceConfigPtrInput` via:
//
//          SourceConfigArgs{...}
//
//  or:
//
//          nil
type SourceConfigPtrInput interface {
	pulumi.Input

	ToSourceConfigPtrOutput() SourceConfigPtrOutput
	ToSourceConfigPtrOutputWithContext(context.Context) SourceConfigPtrOutput
}

type sourceConfigPtrType SourceConfigArgs

func SourceConfigPtr(v *SourceConfigArgs) SourceConfigPtrInput {
	return (*sourceConfigPtrType)(v)
}

func (*sourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceConfig)(nil)).Elem()
}

func (i *sourceConfigPtrType) ToSourceConfigPtrOutput() SourceConfigPtrOutput {
	return i.ToSourceConfigPtrOutputWithContext(context.Background())
}

func (i *sourceConfigPtrType) ToSourceConfigPtrOutputWithContext(ctx context.Context) SourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfigPtrOutput)
}

// The configuration of the stream source.
type SourceConfigOutput struct{ *pulumi.OutputState }

func (SourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfig)(nil)).Elem()
}

func (o SourceConfigOutput) ToSourceConfigOutput() SourceConfigOutput {
	return o
}

func (o SourceConfigOutput) ToSourceConfigOutputWithContext(ctx context.Context) SourceConfigOutput {
	return o
}

func (o SourceConfigOutput) ToSourceConfigPtrOutput() SourceConfigPtrOutput {
	return o.ToSourceConfigPtrOutputWithContext(context.Background())
}

func (o SourceConfigOutput) ToSourceConfigPtrOutputWithContext(ctx context.Context) SourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceConfig) *SourceConfig {
		return &v
	}).(SourceConfigPtrOutput)
}

// MySQL data source configuration
func (o SourceConfigOutput) MysqlSourceConfig() MysqlSourceConfigPtrOutput {
	return o.ApplyT(func(v SourceConfig) *MysqlSourceConfig { return v.MysqlSourceConfig }).(MysqlSourceConfigPtrOutput)
}

// Oracle data source configuration
func (o SourceConfigOutput) OracleSourceConfig() OracleSourceConfigPtrOutput {
	return o.ApplyT(func(v SourceConfig) *OracleSourceConfig { return v.OracleSourceConfig }).(OracleSourceConfigPtrOutput)
}

// Source connection profile identifier.
func (o SourceConfigOutput) SourceConnectionProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v SourceConfig) string { return v.SourceConnectionProfileName }).(pulumi.StringOutput)
}

type SourceConfigPtrOutput struct{ *pulumi.OutputState }

func (SourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceConfig)(nil)).Elem()
}

func (o SourceConfigPtrOutput) ToSourceConfigPtrOutput() SourceConfigPtrOutput {
	return o
}

func (o SourceConfigPtrOutput) ToSourceConfigPtrOutputWithContext(ctx context.Context) SourceConfigPtrOutput {
	return o
}

func (o SourceConfigPtrOutput) Elem() SourceConfigOutput {
	return o.ApplyT(func(v *SourceConfig) SourceConfig {
		if v != nil {
			return *v
		}
		var ret SourceConfig
		return ret
	}).(SourceConfigOutput)
}

// MySQL data source configuration
func (o SourceConfigPtrOutput) MysqlSourceConfig() MysqlSourceConfigPtrOutput {
	return o.ApplyT(func(v *SourceConfig) *MysqlSourceConfig {
		if v == nil {
			return nil
		}
		return v.MysqlSourceConfig
	}).(MysqlSourceConfigPtrOutput)
}

// Oracle data source configuration
func (o SourceConfigPtrOutput) OracleSourceConfig() OracleSourceConfigPtrOutput {
	return o.ApplyT(func(v *SourceConfig) *OracleSourceConfig {
		if v == nil {
			return nil
		}
		return v.OracleSourceConfig
	}).(OracleSourceConfigPtrOutput)
}

// Source connection profile identifier.
func (o SourceConfigPtrOutput) SourceConnectionProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionProfileName
	}).(pulumi.StringPtrOutput)
}

// The configuration of the stream source.
type SourceConfigResponse struct {
	// MySQL data source configuration
	MysqlSourceConfig MysqlSourceConfigResponse `pulumi:"mysqlSourceConfig"`
	// Oracle data source configuration
	OracleSourceConfig OracleSourceConfigResponse `pulumi:"oracleSourceConfig"`
	// Source connection profile identifier.
	SourceConnectionProfileName string `pulumi:"sourceConnectionProfileName"`
}

// SourceConfigResponseInput is an input type that accepts SourceConfigResponseArgs and SourceConfigResponseOutput values.
// You can construct a concrete instance of `SourceConfigResponseInput` via:
//
//          SourceConfigResponseArgs{...}
type SourceConfigResponseInput interface {
	pulumi.Input

	ToSourceConfigResponseOutput() SourceConfigResponseOutput
	ToSourceConfigResponseOutputWithContext(context.Context) SourceConfigResponseOutput
}

// The configuration of the stream source.
type SourceConfigResponseArgs struct {
	// MySQL data source configuration
	MysqlSourceConfig MysqlSourceConfigResponseInput `pulumi:"mysqlSourceConfig"`
	// Oracle data source configuration
	OracleSourceConfig OracleSourceConfigResponseInput `pulumi:"oracleSourceConfig"`
	// Source connection profile identifier.
	SourceConnectionProfileName pulumi.StringInput `pulumi:"sourceConnectionProfileName"`
}

func (SourceConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfigResponse)(nil)).Elem()
}

func (i SourceConfigResponseArgs) ToSourceConfigResponseOutput() SourceConfigResponseOutput {
	return i.ToSourceConfigResponseOutputWithContext(context.Background())
}

func (i SourceConfigResponseArgs) ToSourceConfigResponseOutputWithContext(ctx context.Context) SourceConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfigResponseOutput)
}

func (i SourceConfigResponseArgs) ToSourceConfigResponsePtrOutput() SourceConfigResponsePtrOutput {
	return i.ToSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (i SourceConfigResponseArgs) ToSourceConfigResponsePtrOutputWithContext(ctx context.Context) SourceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfigResponseOutput).ToSourceConfigResponsePtrOutputWithContext(ctx)
}

// SourceConfigResponsePtrInput is an input type that accepts SourceConfigResponseArgs, SourceConfigResponsePtr and SourceConfigResponsePtrOutput values.
// You can construct a concrete instance of `SourceConfigResponsePtrInput` via:
//
//          SourceConfigResponseArgs{...}
//
//  or:
//
//          nil
type SourceConfigResponsePtrInput interface {
	pulumi.Input

	ToSourceConfigResponsePtrOutput() SourceConfigResponsePtrOutput
	ToSourceConfigResponsePtrOutputWithContext(context.Context) SourceConfigResponsePtrOutput
}

type sourceConfigResponsePtrType SourceConfigResponseArgs

func SourceConfigResponsePtr(v *SourceConfigResponseArgs) SourceConfigResponsePtrInput {
	return (*sourceConfigResponsePtrType)(v)
}

func (*sourceConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceConfigResponse)(nil)).Elem()
}

func (i *sourceConfigResponsePtrType) ToSourceConfigResponsePtrOutput() SourceConfigResponsePtrOutput {
	return i.ToSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (i *sourceConfigResponsePtrType) ToSourceConfigResponsePtrOutputWithContext(ctx context.Context) SourceConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfigResponsePtrOutput)
}

// The configuration of the stream source.
type SourceConfigResponseOutput struct{ *pulumi.OutputState }

func (SourceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfigResponse)(nil)).Elem()
}

func (o SourceConfigResponseOutput) ToSourceConfigResponseOutput() SourceConfigResponseOutput {
	return o
}

func (o SourceConfigResponseOutput) ToSourceConfigResponseOutputWithContext(ctx context.Context) SourceConfigResponseOutput {
	return o
}

func (o SourceConfigResponseOutput) ToSourceConfigResponsePtrOutput() SourceConfigResponsePtrOutput {
	return o.ToSourceConfigResponsePtrOutputWithContext(context.Background())
}

func (o SourceConfigResponseOutput) ToSourceConfigResponsePtrOutputWithContext(ctx context.Context) SourceConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceConfigResponse) *SourceConfigResponse {
		return &v
	}).(SourceConfigResponsePtrOutput)
}

// MySQL data source configuration
func (o SourceConfigResponseOutput) MysqlSourceConfig() MysqlSourceConfigResponseOutput {
	return o.ApplyT(func(v SourceConfigResponse) MysqlSourceConfigResponse { return v.MysqlSourceConfig }).(MysqlSourceConfigResponseOutput)
}

// Oracle data source configuration
func (o SourceConfigResponseOutput) OracleSourceConfig() OracleSourceConfigResponseOutput {
	return o.ApplyT(func(v SourceConfigResponse) OracleSourceConfigResponse { return v.OracleSourceConfig }).(OracleSourceConfigResponseOutput)
}

// Source connection profile identifier.
func (o SourceConfigResponseOutput) SourceConnectionProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v SourceConfigResponse) string { return v.SourceConnectionProfileName }).(pulumi.StringOutput)
}

type SourceConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (SourceConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceConfigResponse)(nil)).Elem()
}

func (o SourceConfigResponsePtrOutput) ToSourceConfigResponsePtrOutput() SourceConfigResponsePtrOutput {
	return o
}

func (o SourceConfigResponsePtrOutput) ToSourceConfigResponsePtrOutputWithContext(ctx context.Context) SourceConfigResponsePtrOutput {
	return o
}

func (o SourceConfigResponsePtrOutput) Elem() SourceConfigResponseOutput {
	return o.ApplyT(func(v *SourceConfigResponse) SourceConfigResponse {
		if v != nil {
			return *v
		}
		var ret SourceConfigResponse
		return ret
	}).(SourceConfigResponseOutput)
}

// MySQL data source configuration
func (o SourceConfigResponsePtrOutput) MysqlSourceConfig() MysqlSourceConfigResponsePtrOutput {
	return o.ApplyT(func(v *SourceConfigResponse) *MysqlSourceConfigResponse {
		if v == nil {
			return nil
		}
		return &v.MysqlSourceConfig
	}).(MysqlSourceConfigResponsePtrOutput)
}

// Oracle data source configuration
func (o SourceConfigResponsePtrOutput) OracleSourceConfig() OracleSourceConfigResponsePtrOutput {
	return o.ApplyT(func(v *SourceConfigResponse) *OracleSourceConfigResponse {
		if v == nil {
			return nil
		}
		return &v.OracleSourceConfig
	}).(OracleSourceConfigResponsePtrOutput)
}

// Source connection profile identifier.
func (o SourceConfigResponsePtrOutput) SourceConnectionProfileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SourceConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.SourceConnectionProfileName
	}).(pulumi.StringPtrOutput)
}

// Static IP address connectivity.
type StaticServiceIpConnectivity struct {
}

// StaticServiceIpConnectivityInput is an input type that accepts StaticServiceIpConnectivityArgs and StaticServiceIpConnectivityOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityInput` via:
//
//          StaticServiceIpConnectivityArgs{...}
type StaticServiceIpConnectivityInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput
	ToStaticServiceIpConnectivityOutputWithContext(context.Context) StaticServiceIpConnectivityOutput
}

// Static IP address connectivity.
type StaticServiceIpConnectivityArgs struct {
}

func (StaticServiceIpConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivity)(nil)).Elem()
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput {
	return i.ToStaticServiceIpConnectivityOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityOutputWithContext(ctx context.Context) StaticServiceIpConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityOutput)
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return i.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityOutput).ToStaticServiceIpConnectivityPtrOutputWithContext(ctx)
}

// StaticServiceIpConnectivityPtrInput is an input type that accepts StaticServiceIpConnectivityArgs, StaticServiceIpConnectivityPtr and StaticServiceIpConnectivityPtrOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityPtrInput` via:
//
//          StaticServiceIpConnectivityArgs{...}
//
//  or:
//
//          nil
type StaticServiceIpConnectivityPtrInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput
	ToStaticServiceIpConnectivityPtrOutputWithContext(context.Context) StaticServiceIpConnectivityPtrOutput
}

type staticServiceIpConnectivityPtrType StaticServiceIpConnectivityArgs

func StaticServiceIpConnectivityPtr(v *StaticServiceIpConnectivityArgs) StaticServiceIpConnectivityPtrInput {
	return (*staticServiceIpConnectivityPtrType)(v)
}

func (*staticServiceIpConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivity)(nil)).Elem()
}

func (i *staticServiceIpConnectivityPtrType) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return i.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (i *staticServiceIpConnectivityPtrType) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityPtrOutput)
}

// Static IP address connectivity.
type StaticServiceIpConnectivityOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivity)(nil)).Elem()
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput {
	return o
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityOutputWithContext(ctx context.Context) StaticServiceIpConnectivityOutput {
	return o
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return o.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticServiceIpConnectivity) *StaticServiceIpConnectivity {
		return &v
	}).(StaticServiceIpConnectivityPtrOutput)
}

type StaticServiceIpConnectivityPtrOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivity)(nil)).Elem()
}

func (o StaticServiceIpConnectivityPtrOutput) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return o
}

func (o StaticServiceIpConnectivityPtrOutput) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return o
}

func (o StaticServiceIpConnectivityPtrOutput) Elem() StaticServiceIpConnectivityOutput {
	return o.ApplyT(func(v *StaticServiceIpConnectivity) StaticServiceIpConnectivity {
		if v != nil {
			return *v
		}
		var ret StaticServiceIpConnectivity
		return ret
	}).(StaticServiceIpConnectivityOutput)
}

// Static IP address connectivity.
type StaticServiceIpConnectivityResponse struct {
}

// StaticServiceIpConnectivityResponseInput is an input type that accepts StaticServiceIpConnectivityResponseArgs and StaticServiceIpConnectivityResponseOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityResponseInput` via:
//
//          StaticServiceIpConnectivityResponseArgs{...}
type StaticServiceIpConnectivityResponseInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityResponseOutput() StaticServiceIpConnectivityResponseOutput
	ToStaticServiceIpConnectivityResponseOutputWithContext(context.Context) StaticServiceIpConnectivityResponseOutput
}

// Static IP address connectivity.
type StaticServiceIpConnectivityResponseArgs struct {
}

func (StaticServiceIpConnectivityResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivityResponse)(nil)).Elem()
}

func (i StaticServiceIpConnectivityResponseArgs) ToStaticServiceIpConnectivityResponseOutput() StaticServiceIpConnectivityResponseOutput {
	return i.ToStaticServiceIpConnectivityResponseOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityResponseArgs) ToStaticServiceIpConnectivityResponseOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityResponseOutput)
}

func (i StaticServiceIpConnectivityResponseArgs) ToStaticServiceIpConnectivityResponsePtrOutput() StaticServiceIpConnectivityResponsePtrOutput {
	return i.ToStaticServiceIpConnectivityResponsePtrOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityResponseArgs) ToStaticServiceIpConnectivityResponsePtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityResponseOutput).ToStaticServiceIpConnectivityResponsePtrOutputWithContext(ctx)
}

// StaticServiceIpConnectivityResponsePtrInput is an input type that accepts StaticServiceIpConnectivityResponseArgs, StaticServiceIpConnectivityResponsePtr and StaticServiceIpConnectivityResponsePtrOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityResponsePtrInput` via:
//
//          StaticServiceIpConnectivityResponseArgs{...}
//
//  or:
//
//          nil
type StaticServiceIpConnectivityResponsePtrInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityResponsePtrOutput() StaticServiceIpConnectivityResponsePtrOutput
	ToStaticServiceIpConnectivityResponsePtrOutputWithContext(context.Context) StaticServiceIpConnectivityResponsePtrOutput
}

type staticServiceIpConnectivityResponsePtrType StaticServiceIpConnectivityResponseArgs

func StaticServiceIpConnectivityResponsePtr(v *StaticServiceIpConnectivityResponseArgs) StaticServiceIpConnectivityResponsePtrInput {
	return (*staticServiceIpConnectivityResponsePtrType)(v)
}

func (*staticServiceIpConnectivityResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivityResponse)(nil)).Elem()
}

func (i *staticServiceIpConnectivityResponsePtrType) ToStaticServiceIpConnectivityResponsePtrOutput() StaticServiceIpConnectivityResponsePtrOutput {
	return i.ToStaticServiceIpConnectivityResponsePtrOutputWithContext(context.Background())
}

func (i *staticServiceIpConnectivityResponsePtrType) ToStaticServiceIpConnectivityResponsePtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityResponsePtrOutput)
}

// Static IP address connectivity.
type StaticServiceIpConnectivityResponseOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivityResponse)(nil)).Elem()
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponseOutput() StaticServiceIpConnectivityResponseOutput {
	return o
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponseOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponseOutput {
	return o
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponsePtrOutput() StaticServiceIpConnectivityResponsePtrOutput {
	return o.ToStaticServiceIpConnectivityResponsePtrOutputWithContext(context.Background())
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponsePtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticServiceIpConnectivityResponse) *StaticServiceIpConnectivityResponse {
		return &v
	}).(StaticServiceIpConnectivityResponsePtrOutput)
}

type StaticServiceIpConnectivityResponsePtrOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivityResponse)(nil)).Elem()
}

func (o StaticServiceIpConnectivityResponsePtrOutput) ToStaticServiceIpConnectivityResponsePtrOutput() StaticServiceIpConnectivityResponsePtrOutput {
	return o
}

func (o StaticServiceIpConnectivityResponsePtrOutput) ToStaticServiceIpConnectivityResponsePtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponsePtrOutput {
	return o
}

func (o StaticServiceIpConnectivityResponsePtrOutput) Elem() StaticServiceIpConnectivityResponseOutput {
	return o.ApplyT(func(v *StaticServiceIpConnectivityResponse) StaticServiceIpConnectivityResponse {
		if v != nil {
			return *v
		}
		var ret StaticServiceIpConnectivityResponse
		return ret
	}).(StaticServiceIpConnectivityResponseOutput)
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfig struct {
	// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
	Subnet string `pulumi:"subnet"`
	// fully qualified name of the VPC Datastream will peer to.
	VpcName string `pulumi:"vpcName"`
}

// VpcPeeringConfigInput is an input type that accepts VpcPeeringConfigArgs and VpcPeeringConfigOutput values.
// You can construct a concrete instance of `VpcPeeringConfigInput` via:
//
//          VpcPeeringConfigArgs{...}
type VpcPeeringConfigInput interface {
	pulumi.Input

	ToVpcPeeringConfigOutput() VpcPeeringConfigOutput
	ToVpcPeeringConfigOutputWithContext(context.Context) VpcPeeringConfigOutput
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigArgs struct {
	// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// fully qualified name of the VPC Datastream will peer to.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
}

func (VpcPeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfig)(nil)).Elem()
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigOutput() VpcPeeringConfigOutput {
	return i.ToVpcPeeringConfigOutputWithContext(context.Background())
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigOutputWithContext(ctx context.Context) VpcPeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigOutput)
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return i.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigOutput).ToVpcPeeringConfigPtrOutputWithContext(ctx)
}

// VpcPeeringConfigPtrInput is an input type that accepts VpcPeeringConfigArgs, VpcPeeringConfigPtr and VpcPeeringConfigPtrOutput values.
// You can construct a concrete instance of `VpcPeeringConfigPtrInput` via:
//
//          VpcPeeringConfigArgs{...}
//
//  or:
//
//          nil
type VpcPeeringConfigPtrInput interface {
	pulumi.Input

	ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput
	ToVpcPeeringConfigPtrOutputWithContext(context.Context) VpcPeeringConfigPtrOutput
}

type vpcPeeringConfigPtrType VpcPeeringConfigArgs

func VpcPeeringConfigPtr(v *VpcPeeringConfigArgs) VpcPeeringConfigPtrInput {
	return (*vpcPeeringConfigPtrType)(v)
}

func (*vpcPeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfig)(nil)).Elem()
}

func (i *vpcPeeringConfigPtrType) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return i.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i *vpcPeeringConfigPtrType) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigPtrOutput)
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfig)(nil)).Elem()
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigOutput() VpcPeeringConfigOutput {
	return o
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigOutputWithContext(ctx context.Context) VpcPeeringConfigOutput {
	return o
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return o.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcPeeringConfig) *VpcPeeringConfig {
		return &v
	}).(VpcPeeringConfigPtrOutput)
}

// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
func (o VpcPeeringConfigOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfig) string { return v.Subnet }).(pulumi.StringOutput)
}

// fully qualified name of the VPC Datastream will peer to.
func (o VpcPeeringConfigOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfig) string { return v.VpcName }).(pulumi.StringOutput)
}

type VpcPeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfig)(nil)).Elem()
}

func (o VpcPeeringConfigPtrOutput) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return o
}

func (o VpcPeeringConfigPtrOutput) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return o
}

func (o VpcPeeringConfigPtrOutput) Elem() VpcPeeringConfigOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) VpcPeeringConfig {
		if v != nil {
			return *v
		}
		var ret VpcPeeringConfig
		return ret
	}).(VpcPeeringConfigOutput)
}

// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
func (o VpcPeeringConfigPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Subnet
	}).(pulumi.StringPtrOutput)
}

// fully qualified name of the VPC Datastream will peer to.
func (o VpcPeeringConfigPtrOutput) VpcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.VpcName
	}).(pulumi.StringPtrOutput)
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigResponse struct {
	// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
	Subnet string `pulumi:"subnet"`
	// fully qualified name of the VPC Datastream will peer to.
	VpcName string `pulumi:"vpcName"`
}

// VpcPeeringConfigResponseInput is an input type that accepts VpcPeeringConfigResponseArgs and VpcPeeringConfigResponseOutput values.
// You can construct a concrete instance of `VpcPeeringConfigResponseInput` via:
//
//          VpcPeeringConfigResponseArgs{...}
type VpcPeeringConfigResponseInput interface {
	pulumi.Input

	ToVpcPeeringConfigResponseOutput() VpcPeeringConfigResponseOutput
	ToVpcPeeringConfigResponseOutputWithContext(context.Context) VpcPeeringConfigResponseOutput
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigResponseArgs struct {
	// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// fully qualified name of the VPC Datastream will peer to.
	VpcName pulumi.StringInput `pulumi:"vpcName"`
}

func (VpcPeeringConfigResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfigResponse)(nil)).Elem()
}

func (i VpcPeeringConfigResponseArgs) ToVpcPeeringConfigResponseOutput() VpcPeeringConfigResponseOutput {
	return i.ToVpcPeeringConfigResponseOutputWithContext(context.Background())
}

func (i VpcPeeringConfigResponseArgs) ToVpcPeeringConfigResponseOutputWithContext(ctx context.Context) VpcPeeringConfigResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigResponseOutput)
}

func (i VpcPeeringConfigResponseArgs) ToVpcPeeringConfigResponsePtrOutput() VpcPeeringConfigResponsePtrOutput {
	return i.ToVpcPeeringConfigResponsePtrOutputWithContext(context.Background())
}

func (i VpcPeeringConfigResponseArgs) ToVpcPeeringConfigResponsePtrOutputWithContext(ctx context.Context) VpcPeeringConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigResponseOutput).ToVpcPeeringConfigResponsePtrOutputWithContext(ctx)
}

// VpcPeeringConfigResponsePtrInput is an input type that accepts VpcPeeringConfigResponseArgs, VpcPeeringConfigResponsePtr and VpcPeeringConfigResponsePtrOutput values.
// You can construct a concrete instance of `VpcPeeringConfigResponsePtrInput` via:
//
//          VpcPeeringConfigResponseArgs{...}
//
//  or:
//
//          nil
type VpcPeeringConfigResponsePtrInput interface {
	pulumi.Input

	ToVpcPeeringConfigResponsePtrOutput() VpcPeeringConfigResponsePtrOutput
	ToVpcPeeringConfigResponsePtrOutputWithContext(context.Context) VpcPeeringConfigResponsePtrOutput
}

type vpcPeeringConfigResponsePtrType VpcPeeringConfigResponseArgs

func VpcPeeringConfigResponsePtr(v *VpcPeeringConfigResponseArgs) VpcPeeringConfigResponsePtrInput {
	return (*vpcPeeringConfigResponsePtrType)(v)
}

func (*vpcPeeringConfigResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfigResponse)(nil)).Elem()
}

func (i *vpcPeeringConfigResponsePtrType) ToVpcPeeringConfigResponsePtrOutput() VpcPeeringConfigResponsePtrOutput {
	return i.ToVpcPeeringConfigResponsePtrOutputWithContext(context.Background())
}

func (i *vpcPeeringConfigResponsePtrType) ToVpcPeeringConfigResponsePtrOutputWithContext(ctx context.Context) VpcPeeringConfigResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigResponsePtrOutput)
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigResponseOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfigResponse)(nil)).Elem()
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponseOutput() VpcPeeringConfigResponseOutput {
	return o
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponseOutputWithContext(ctx context.Context) VpcPeeringConfigResponseOutput {
	return o
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponsePtrOutput() VpcPeeringConfigResponsePtrOutput {
	return o.ToVpcPeeringConfigResponsePtrOutputWithContext(context.Background())
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponsePtrOutputWithContext(ctx context.Context) VpcPeeringConfigResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcPeeringConfigResponse) *VpcPeeringConfigResponse {
		return &v
	}).(VpcPeeringConfigResponsePtrOutput)
}

// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
func (o VpcPeeringConfigResponseOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfigResponse) string { return v.Subnet }).(pulumi.StringOutput)
}

// fully qualified name of the VPC Datastream will peer to.
func (o VpcPeeringConfigResponseOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfigResponse) string { return v.VpcName }).(pulumi.StringOutput)
}

type VpcPeeringConfigResponsePtrOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfigResponse)(nil)).Elem()
}

func (o VpcPeeringConfigResponsePtrOutput) ToVpcPeeringConfigResponsePtrOutput() VpcPeeringConfigResponsePtrOutput {
	return o
}

func (o VpcPeeringConfigResponsePtrOutput) ToVpcPeeringConfigResponsePtrOutputWithContext(ctx context.Context) VpcPeeringConfigResponsePtrOutput {
	return o
}

func (o VpcPeeringConfigResponsePtrOutput) Elem() VpcPeeringConfigResponseOutput {
	return o.ApplyT(func(v *VpcPeeringConfigResponse) VpcPeeringConfigResponse {
		if v != nil {
			return *v
		}
		var ret VpcPeeringConfigResponse
		return ret
	}).(VpcPeeringConfigResponseOutput)
}

// A free subnet for peering. (CIDR of /29) TODO(b/172995841) add validators.
func (o VpcPeeringConfigResponsePtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Subnet
	}).(pulumi.StringPtrOutput)
}

// fully qualified name of the VPC Datastream will peer to.
func (o VpcPeeringConfigResponsePtrOutput) VpcName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfigResponse) *string {
		if v == nil {
			return nil
		}
		return &v.VpcName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvroFileFormatInput)(nil)).Elem(), AvroFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroFileFormatPtrInput)(nil)).Elem(), AvroFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroFileFormatResponseInput)(nil)).Elem(), AvroFileFormatResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroFileFormatResponsePtrInput)(nil)).Elem(), AvroFileFormatResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillAllStrategyInput)(nil)).Elem(), BackfillAllStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillAllStrategyPtrInput)(nil)).Elem(), BackfillAllStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillAllStrategyResponseInput)(nil)).Elem(), BackfillAllStrategyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillAllStrategyResponsePtrInput)(nil)).Elem(), BackfillAllStrategyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillNoneStrategyInput)(nil)).Elem(), BackfillNoneStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillNoneStrategyPtrInput)(nil)).Elem(), BackfillNoneStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillNoneStrategyResponseInput)(nil)).Elem(), BackfillNoneStrategyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillNoneStrategyResponsePtrInput)(nil)).Elem(), BackfillNoneStrategyResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigInput)(nil)).Elem(), DestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigPtrInput)(nil)).Elem(), DestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigResponseInput)(nil)).Elem(), DestinationConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigResponsePtrInput)(nil)).Elem(), DestinationConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ErrorResponseInput)(nil)).Elem(), ErrorResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ErrorResponsePtrInput)(nil)).Elem(), ErrorResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ErrorResponseArrayInput)(nil)).Elem(), ErrorResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityInput)(nil)).Elem(), ForwardSshTunnelConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityPtrInput)(nil)).Elem(), ForwardSshTunnelConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityResponseInput)(nil)).Elem(), ForwardSshTunnelConnectivityResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityResponsePtrInput)(nil)).Elem(), ForwardSshTunnelConnectivityResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsDestinationConfigInput)(nil)).Elem(), GcsDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsDestinationConfigPtrInput)(nil)).Elem(), GcsDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsDestinationConfigResponseInput)(nil)).Elem(), GcsDestinationConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsDestinationConfigResponsePtrInput)(nil)).Elem(), GcsDestinationConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsProfileInput)(nil)).Elem(), GcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsProfilePtrInput)(nil)).Elem(), GcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsProfileResponseInput)(nil)).Elem(), GcsProfileResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsProfileResponsePtrInput)(nil)).Elem(), GcsProfileResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatInput)(nil)).Elem(), JsonFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatPtrInput)(nil)).Elem(), JsonFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatResponseInput)(nil)).Elem(), JsonFileFormatResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatResponsePtrInput)(nil)).Elem(), JsonFileFormatResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlColumnInput)(nil)).Elem(), MysqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlColumnArrayInput)(nil)).Elem(), MysqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlColumnResponseInput)(nil)).Elem(), MysqlColumnResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlColumnResponseArrayInput)(nil)).Elem(), MysqlColumnResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseInput)(nil)).Elem(), MysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseArrayInput)(nil)).Elem(), MysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseResponseInput)(nil)).Elem(), MysqlDatabaseResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseResponseArrayInput)(nil)).Elem(), MysqlDatabaseResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProfileInput)(nil)).Elem(), MysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProfilePtrInput)(nil)).Elem(), MysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProfileResponseInput)(nil)).Elem(), MysqlProfileResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProfileResponsePtrInput)(nil)).Elem(), MysqlProfileResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlRdbmsInput)(nil)).Elem(), MysqlRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlRdbmsPtrInput)(nil)).Elem(), MysqlRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlRdbmsResponseInput)(nil)).Elem(), MysqlRdbmsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlRdbmsResponsePtrInput)(nil)).Elem(), MysqlRdbmsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSourceConfigInput)(nil)).Elem(), MysqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSourceConfigPtrInput)(nil)).Elem(), MysqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSourceConfigResponseInput)(nil)).Elem(), MysqlSourceConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSourceConfigResponsePtrInput)(nil)).Elem(), MysqlSourceConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSslConfigInput)(nil)).Elem(), MysqlSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSslConfigPtrInput)(nil)).Elem(), MysqlSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSslConfigResponseInput)(nil)).Elem(), MysqlSslConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSslConfigResponsePtrInput)(nil)).Elem(), MysqlSslConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlTableInput)(nil)).Elem(), MysqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlTableArrayInput)(nil)).Elem(), MysqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlTableResponseInput)(nil)).Elem(), MysqlTableResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlTableResponseArrayInput)(nil)).Elem(), MysqlTableResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoConnectivitySettingsInput)(nil)).Elem(), NoConnectivitySettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoConnectivitySettingsPtrInput)(nil)).Elem(), NoConnectivitySettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoConnectivitySettingsResponseInput)(nil)).Elem(), NoConnectivitySettingsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoConnectivitySettingsResponsePtrInput)(nil)).Elem(), NoConnectivitySettingsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleColumnInput)(nil)).Elem(), OracleColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleColumnArrayInput)(nil)).Elem(), OracleColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleColumnResponseInput)(nil)).Elem(), OracleColumnResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleColumnResponseArrayInput)(nil)).Elem(), OracleColumnResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleProfileInput)(nil)).Elem(), OracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleProfilePtrInput)(nil)).Elem(), OracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleProfileResponseInput)(nil)).Elem(), OracleProfileResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleProfileResponsePtrInput)(nil)).Elem(), OracleProfileResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleRdbmsInput)(nil)).Elem(), OracleRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleRdbmsPtrInput)(nil)).Elem(), OracleRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleRdbmsResponseInput)(nil)).Elem(), OracleRdbmsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleRdbmsResponsePtrInput)(nil)).Elem(), OracleRdbmsResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSchemaInput)(nil)).Elem(), OracleSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSchemaArrayInput)(nil)).Elem(), OracleSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSchemaResponseInput)(nil)).Elem(), OracleSchemaResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSchemaResponseArrayInput)(nil)).Elem(), OracleSchemaResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSourceConfigInput)(nil)).Elem(), OracleSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSourceConfigPtrInput)(nil)).Elem(), OracleSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSourceConfigResponseInput)(nil)).Elem(), OracleSourceConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSourceConfigResponsePtrInput)(nil)).Elem(), OracleSourceConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleTableInput)(nil)).Elem(), OracleTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleTableArrayInput)(nil)).Elem(), OracleTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleTableResponseInput)(nil)).Elem(), OracleTableResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleTableResponseArrayInput)(nil)).Elem(), OracleTableResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityInput)(nil)).Elem(), PrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityPtrInput)(nil)).Elem(), PrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityResponseInput)(nil)).Elem(), PrivateConnectivityResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityResponsePtrInput)(nil)).Elem(), PrivateConnectivityResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfigInput)(nil)).Elem(), SourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfigPtrInput)(nil)).Elem(), SourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfigResponseInput)(nil)).Elem(), SourceConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfigResponsePtrInput)(nil)).Elem(), SourceConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityInput)(nil)).Elem(), StaticServiceIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityPtrInput)(nil)).Elem(), StaticServiceIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityResponseInput)(nil)).Elem(), StaticServiceIpConnectivityResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityResponsePtrInput)(nil)).Elem(), StaticServiceIpConnectivityResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigInput)(nil)).Elem(), VpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigPtrInput)(nil)).Elem(), VpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigResponseInput)(nil)).Elem(), VpcPeeringConfigResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigResponsePtrInput)(nil)).Elem(), VpcPeeringConfigResponseArgs{})
	pulumi.RegisterOutputType(AvroFileFormatOutput{})
	pulumi.RegisterOutputType(AvroFileFormatPtrOutput{})
	pulumi.RegisterOutputType(AvroFileFormatResponseOutput{})
	pulumi.RegisterOutputType(AvroFileFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(BackfillAllStrategyOutput{})
	pulumi.RegisterOutputType(BackfillAllStrategyPtrOutput{})
	pulumi.RegisterOutputType(BackfillAllStrategyResponseOutput{})
	pulumi.RegisterOutputType(BackfillAllStrategyResponsePtrOutput{})
	pulumi.RegisterOutputType(BackfillNoneStrategyOutput{})
	pulumi.RegisterOutputType(BackfillNoneStrategyPtrOutput{})
	pulumi.RegisterOutputType(BackfillNoneStrategyResponseOutput{})
	pulumi.RegisterOutputType(BackfillNoneStrategyResponsePtrOutput{})
	pulumi.RegisterOutputType(DestinationConfigOutput{})
	pulumi.RegisterOutputType(DestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(DestinationConfigResponseOutput{})
	pulumi.RegisterOutputType(DestinationConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponsePtrOutput{})
	pulumi.RegisterOutputType(ErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityPtrOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityResponseOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityResponsePtrOutput{})
	pulumi.RegisterOutputType(GcsDestinationConfigOutput{})
	pulumi.RegisterOutputType(GcsDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(GcsDestinationConfigResponseOutput{})
	pulumi.RegisterOutputType(GcsDestinationConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(GcsProfileOutput{})
	pulumi.RegisterOutputType(GcsProfilePtrOutput{})
	pulumi.RegisterOutputType(GcsProfileResponseOutput{})
	pulumi.RegisterOutputType(GcsProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(JsonFileFormatOutput{})
	pulumi.RegisterOutputType(JsonFileFormatPtrOutput{})
	pulumi.RegisterOutputType(JsonFileFormatResponseOutput{})
	pulumi.RegisterOutputType(JsonFileFormatResponsePtrOutput{})
	pulumi.RegisterOutputType(MysqlColumnOutput{})
	pulumi.RegisterOutputType(MysqlColumnArrayOutput{})
	pulumi.RegisterOutputType(MysqlColumnResponseOutput{})
	pulumi.RegisterOutputType(MysqlColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseResponseOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseResponseArrayOutput{})
	pulumi.RegisterOutputType(MysqlProfileOutput{})
	pulumi.RegisterOutputType(MysqlProfilePtrOutput{})
	pulumi.RegisterOutputType(MysqlProfileResponseOutput{})
	pulumi.RegisterOutputType(MysqlProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(MysqlRdbmsOutput{})
	pulumi.RegisterOutputType(MysqlRdbmsPtrOutput{})
	pulumi.RegisterOutputType(MysqlRdbmsResponseOutput{})
	pulumi.RegisterOutputType(MysqlRdbmsResponsePtrOutput{})
	pulumi.RegisterOutputType(MysqlSourceConfigOutput{})
	pulumi.RegisterOutputType(MysqlSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(MysqlSourceConfigResponseOutput{})
	pulumi.RegisterOutputType(MysqlSourceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(MysqlSslConfigOutput{})
	pulumi.RegisterOutputType(MysqlSslConfigPtrOutput{})
	pulumi.RegisterOutputType(MysqlSslConfigResponseOutput{})
	pulumi.RegisterOutputType(MysqlSslConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(MysqlTableOutput{})
	pulumi.RegisterOutputType(MysqlTableArrayOutput{})
	pulumi.RegisterOutputType(MysqlTableResponseOutput{})
	pulumi.RegisterOutputType(MysqlTableResponseArrayOutput{})
	pulumi.RegisterOutputType(NoConnectivitySettingsOutput{})
	pulumi.RegisterOutputType(NoConnectivitySettingsPtrOutput{})
	pulumi.RegisterOutputType(NoConnectivitySettingsResponseOutput{})
	pulumi.RegisterOutputType(NoConnectivitySettingsResponsePtrOutput{})
	pulumi.RegisterOutputType(OracleColumnOutput{})
	pulumi.RegisterOutputType(OracleColumnArrayOutput{})
	pulumi.RegisterOutputType(OracleColumnResponseOutput{})
	pulumi.RegisterOutputType(OracleColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleProfileOutput{})
	pulumi.RegisterOutputType(OracleProfilePtrOutput{})
	pulumi.RegisterOutputType(OracleProfileResponseOutput{})
	pulumi.RegisterOutputType(OracleProfileResponsePtrOutput{})
	pulumi.RegisterOutputType(OracleRdbmsOutput{})
	pulumi.RegisterOutputType(OracleRdbmsPtrOutput{})
	pulumi.RegisterOutputType(OracleRdbmsResponseOutput{})
	pulumi.RegisterOutputType(OracleRdbmsResponsePtrOutput{})
	pulumi.RegisterOutputType(OracleSchemaOutput{})
	pulumi.RegisterOutputType(OracleSchemaArrayOutput{})
	pulumi.RegisterOutputType(OracleSchemaResponseOutput{})
	pulumi.RegisterOutputType(OracleSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleSourceConfigOutput{})
	pulumi.RegisterOutputType(OracleSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(OracleSourceConfigResponseOutput{})
	pulumi.RegisterOutputType(OracleSourceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(OracleTableOutput{})
	pulumi.RegisterOutputType(OracleTableArrayOutput{})
	pulumi.RegisterOutputType(OracleTableResponseOutput{})
	pulumi.RegisterOutputType(OracleTableResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityPtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityResponseOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityResponsePtrOutput{})
	pulumi.RegisterOutputType(SourceConfigOutput{})
	pulumi.RegisterOutputType(SourceConfigPtrOutput{})
	pulumi.RegisterOutputType(SourceConfigResponseOutput{})
	pulumi.RegisterOutputType(SourceConfigResponsePtrOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityPtrOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityResponseOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityResponsePtrOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigResponseOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigResponsePtrOutput{})
}
