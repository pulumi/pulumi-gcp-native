// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this method to create a private connectivity configuration.
// Auto-naming is currently not supported for this resource.
type PrivateConnection struct {
	pulumi.CustomResourceState

	// The create time of the resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Display name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// In case of error, the details of the error in a user-friendly format.
	Error ErrorResponseOutput `pulumi:"error"`
	// Labels.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The resource's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The state of the Private Connection.
	State pulumi.StringOutput `pulumi:"state"`
	// The update time of the resource.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// VPC Peering Config
	VpcPeeringConfig VpcPeeringConfigResponseOutput `pulumi:"vpcPeeringConfig"`
}

// NewPrivateConnection registers a new resource with the given unique name, arguments, and options.
func NewPrivateConnection(ctx *pulumi.Context,
	name string, args *PrivateConnectionArgs, opts ...pulumi.ResourceOption) (*PrivateConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.PrivateConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'PrivateConnectionId'")
	}
	var resource PrivateConnection
	err := ctx.RegisterResource("google-native:datastream/v1alpha1:PrivateConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateConnection gets an existing PrivateConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateConnectionState, opts ...pulumi.ResourceOption) (*PrivateConnection, error) {
	var resource PrivateConnection
	err := ctx.ReadResource("google-native:datastream/v1alpha1:PrivateConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateConnection resources.
type privateConnectionState struct {
}

type PrivateConnectionState struct {
}

func (PrivateConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateConnectionState)(nil)).Elem()
}

type privateConnectionArgs struct {
	// Display name.
	DisplayName string `pulumi:"displayName"`
	// Labels.
	Labels   map[string]string `pulumi:"labels"`
	Location *string           `pulumi:"location"`
	// Required. The private connectivity identifier.
	PrivateConnectionId string  `pulumi:"privateConnectionId"`
	Project             *string `pulumi:"project"`
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// VPC Peering Config
	VpcPeeringConfig *VpcPeeringConfig `pulumi:"vpcPeeringConfig"`
}

// The set of arguments for constructing a PrivateConnection resource.
type PrivateConnectionArgs struct {
	// Display name.
	DisplayName pulumi.StringInput
	// Labels.
	Labels   pulumi.StringMapInput
	Location pulumi.StringPtrInput
	// Required. The private connectivity identifier.
	PrivateConnectionId pulumi.StringInput
	Project             pulumi.StringPtrInput
	// Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// VPC Peering Config
	VpcPeeringConfig VpcPeeringConfigPtrInput
}

func (PrivateConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateConnectionArgs)(nil)).Elem()
}

type PrivateConnectionInput interface {
	pulumi.Input

	ToPrivateConnectionOutput() PrivateConnectionOutput
	ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput
}

func (*PrivateConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnection)(nil)).Elem()
}

func (i *PrivateConnection) ToPrivateConnectionOutput() PrivateConnectionOutput {
	return i.ToPrivateConnectionOutputWithContext(context.Background())
}

func (i *PrivateConnection) ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectionOutput)
}

type PrivateConnectionOutput struct{ *pulumi.OutputState }

func (PrivateConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnection)(nil)).Elem()
}

func (o PrivateConnectionOutput) ToPrivateConnectionOutput() PrivateConnectionOutput {
	return o
}

func (o PrivateConnectionOutput) ToPrivateConnectionOutputWithContext(ctx context.Context) PrivateConnectionOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectionInput)(nil)).Elem(), &PrivateConnection{})
	pulumi.RegisterOutputType(PrivateConnectionOutput{})
}
