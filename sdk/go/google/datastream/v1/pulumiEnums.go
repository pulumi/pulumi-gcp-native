// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Compression of the loaded JSON file.
type JsonFileFormatCompression string

const (
	// Unspecified json file compression.
	JsonFileFormatCompressionJsonCompressionUnspecified = JsonFileFormatCompression("JSON_COMPRESSION_UNSPECIFIED")
	// Do not compress JSON file.
	JsonFileFormatCompressionNoCompression = JsonFileFormatCompression("NO_COMPRESSION")
	// Gzip compression.
	JsonFileFormatCompressionGzip = JsonFileFormatCompression("GZIP")
)

func (JsonFileFormatCompression) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormatCompression)(nil)).Elem()
}

func (e JsonFileFormatCompression) ToJsonFileFormatCompressionOutput() JsonFileFormatCompressionOutput {
	return pulumi.ToOutput(e).(JsonFileFormatCompressionOutput)
}

func (e JsonFileFormatCompression) ToJsonFileFormatCompressionOutputWithContext(ctx context.Context) JsonFileFormatCompressionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JsonFileFormatCompressionOutput)
}

func (e JsonFileFormatCompression) ToJsonFileFormatCompressionPtrOutput() JsonFileFormatCompressionPtrOutput {
	return e.ToJsonFileFormatCompressionPtrOutputWithContext(context.Background())
}

func (e JsonFileFormatCompression) ToJsonFileFormatCompressionPtrOutputWithContext(ctx context.Context) JsonFileFormatCompressionPtrOutput {
	return JsonFileFormatCompression(e).ToJsonFileFormatCompressionOutputWithContext(ctx).ToJsonFileFormatCompressionPtrOutputWithContext(ctx)
}

func (e JsonFileFormatCompression) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonFileFormatCompression) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonFileFormatCompression) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JsonFileFormatCompression) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JsonFileFormatCompressionOutput struct{ *pulumi.OutputState }

func (JsonFileFormatCompressionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormatCompression)(nil)).Elem()
}

func (o JsonFileFormatCompressionOutput) ToJsonFileFormatCompressionOutput() JsonFileFormatCompressionOutput {
	return o
}

func (o JsonFileFormatCompressionOutput) ToJsonFileFormatCompressionOutputWithContext(ctx context.Context) JsonFileFormatCompressionOutput {
	return o
}

func (o JsonFileFormatCompressionOutput) ToJsonFileFormatCompressionPtrOutput() JsonFileFormatCompressionPtrOutput {
	return o.ToJsonFileFormatCompressionPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatCompressionOutput) ToJsonFileFormatCompressionPtrOutputWithContext(ctx context.Context) JsonFileFormatCompressionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonFileFormatCompression) *JsonFileFormatCompression {
		return &v
	}).(JsonFileFormatCompressionPtrOutput)
}

func (o JsonFileFormatCompressionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JsonFileFormatCompressionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonFileFormatCompression) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JsonFileFormatCompressionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatCompressionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonFileFormatCompression) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JsonFileFormatCompressionPtrOutput struct{ *pulumi.OutputState }

func (JsonFileFormatCompressionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormatCompression)(nil)).Elem()
}

func (o JsonFileFormatCompressionPtrOutput) ToJsonFileFormatCompressionPtrOutput() JsonFileFormatCompressionPtrOutput {
	return o
}

func (o JsonFileFormatCompressionPtrOutput) ToJsonFileFormatCompressionPtrOutputWithContext(ctx context.Context) JsonFileFormatCompressionPtrOutput {
	return o
}

func (o JsonFileFormatCompressionPtrOutput) Elem() JsonFileFormatCompressionOutput {
	return o.ApplyT(func(v *JsonFileFormatCompression) JsonFileFormatCompression {
		if v != nil {
			return *v
		}
		var ret JsonFileFormatCompression
		return ret
	}).(JsonFileFormatCompressionOutput)
}

func (o JsonFileFormatCompressionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatCompressionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *JsonFileFormatCompression) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JsonFileFormatCompressionInput is an input type that accepts JsonFileFormatCompressionArgs and JsonFileFormatCompressionOutput values.
// You can construct a concrete instance of `JsonFileFormatCompressionInput` via:
//
//          JsonFileFormatCompressionArgs{...}
type JsonFileFormatCompressionInput interface {
	pulumi.Input

	ToJsonFileFormatCompressionOutput() JsonFileFormatCompressionOutput
	ToJsonFileFormatCompressionOutputWithContext(context.Context) JsonFileFormatCompressionOutput
}

var jsonFileFormatCompressionPtrType = reflect.TypeOf((**JsonFileFormatCompression)(nil)).Elem()

type JsonFileFormatCompressionPtrInput interface {
	pulumi.Input

	ToJsonFileFormatCompressionPtrOutput() JsonFileFormatCompressionPtrOutput
	ToJsonFileFormatCompressionPtrOutputWithContext(context.Context) JsonFileFormatCompressionPtrOutput
}

type jsonFileFormatCompressionPtr string

func JsonFileFormatCompressionPtr(v string) JsonFileFormatCompressionPtrInput {
	return (*jsonFileFormatCompressionPtr)(&v)
}

func (*jsonFileFormatCompressionPtr) ElementType() reflect.Type {
	return jsonFileFormatCompressionPtrType
}

func (in *jsonFileFormatCompressionPtr) ToJsonFileFormatCompressionPtrOutput() JsonFileFormatCompressionPtrOutput {
	return pulumi.ToOutput(in).(JsonFileFormatCompressionPtrOutput)
}

func (in *jsonFileFormatCompressionPtr) ToJsonFileFormatCompressionPtrOutputWithContext(ctx context.Context) JsonFileFormatCompressionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JsonFileFormatCompressionPtrOutput)
}

// The schema file format along JSON data files.
type JsonFileFormatSchemaFileFormat string

const (
	// Unspecified schema file format.
	JsonFileFormatSchemaFileFormatSchemaFileFormatUnspecified = JsonFileFormatSchemaFileFormat("SCHEMA_FILE_FORMAT_UNSPECIFIED")
	// Do not attach schema file.
	JsonFileFormatSchemaFileFormatNoSchemaFile = JsonFileFormatSchemaFileFormat("NO_SCHEMA_FILE")
	// Avro schema format.
	JsonFileFormatSchemaFileFormatAvroSchemaFile = JsonFileFormatSchemaFileFormat("AVRO_SCHEMA_FILE")
)

func (JsonFileFormatSchemaFileFormat) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormatSchemaFileFormat)(nil)).Elem()
}

func (e JsonFileFormatSchemaFileFormat) ToJsonFileFormatSchemaFileFormatOutput() JsonFileFormatSchemaFileFormatOutput {
	return pulumi.ToOutput(e).(JsonFileFormatSchemaFileFormatOutput)
}

func (e JsonFileFormatSchemaFileFormat) ToJsonFileFormatSchemaFileFormatOutputWithContext(ctx context.Context) JsonFileFormatSchemaFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, e).(JsonFileFormatSchemaFileFormatOutput)
}

func (e JsonFileFormatSchemaFileFormat) ToJsonFileFormatSchemaFileFormatPtrOutput() JsonFileFormatSchemaFileFormatPtrOutput {
	return e.ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(context.Background())
}

func (e JsonFileFormatSchemaFileFormat) ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatSchemaFileFormatPtrOutput {
	return JsonFileFormatSchemaFileFormat(e).ToJsonFileFormatSchemaFileFormatOutputWithContext(ctx).ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(ctx)
}

func (e JsonFileFormatSchemaFileFormat) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonFileFormatSchemaFileFormat) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e JsonFileFormatSchemaFileFormat) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e JsonFileFormatSchemaFileFormat) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type JsonFileFormatSchemaFileFormatOutput struct{ *pulumi.OutputState }

func (JsonFileFormatSchemaFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormatSchemaFileFormat)(nil)).Elem()
}

func (o JsonFileFormatSchemaFileFormatOutput) ToJsonFileFormatSchemaFileFormatOutput() JsonFileFormatSchemaFileFormatOutput {
	return o
}

func (o JsonFileFormatSchemaFileFormatOutput) ToJsonFileFormatSchemaFileFormatOutputWithContext(ctx context.Context) JsonFileFormatSchemaFileFormatOutput {
	return o
}

func (o JsonFileFormatSchemaFileFormatOutput) ToJsonFileFormatSchemaFileFormatPtrOutput() JsonFileFormatSchemaFileFormatPtrOutput {
	return o.ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatSchemaFileFormatOutput) ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatSchemaFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonFileFormatSchemaFileFormat) *JsonFileFormatSchemaFileFormat {
		return &v
	}).(JsonFileFormatSchemaFileFormatPtrOutput)
}

func (o JsonFileFormatSchemaFileFormatOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o JsonFileFormatSchemaFileFormatOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonFileFormatSchemaFileFormat) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o JsonFileFormatSchemaFileFormatOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatSchemaFileFormatOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e JsonFileFormatSchemaFileFormat) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type JsonFileFormatSchemaFileFormatPtrOutput struct{ *pulumi.OutputState }

func (JsonFileFormatSchemaFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormatSchemaFileFormat)(nil)).Elem()
}

func (o JsonFileFormatSchemaFileFormatPtrOutput) ToJsonFileFormatSchemaFileFormatPtrOutput() JsonFileFormatSchemaFileFormatPtrOutput {
	return o
}

func (o JsonFileFormatSchemaFileFormatPtrOutput) ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatSchemaFileFormatPtrOutput {
	return o
}

func (o JsonFileFormatSchemaFileFormatPtrOutput) Elem() JsonFileFormatSchemaFileFormatOutput {
	return o.ApplyT(func(v *JsonFileFormatSchemaFileFormat) JsonFileFormatSchemaFileFormat {
		if v != nil {
			return *v
		}
		var ret JsonFileFormatSchemaFileFormat
		return ret
	}).(JsonFileFormatSchemaFileFormatOutput)
}

func (o JsonFileFormatSchemaFileFormatPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatSchemaFileFormatPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *JsonFileFormatSchemaFileFormat) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// JsonFileFormatSchemaFileFormatInput is an input type that accepts JsonFileFormatSchemaFileFormatArgs and JsonFileFormatSchemaFileFormatOutput values.
// You can construct a concrete instance of `JsonFileFormatSchemaFileFormatInput` via:
//
//          JsonFileFormatSchemaFileFormatArgs{...}
type JsonFileFormatSchemaFileFormatInput interface {
	pulumi.Input

	ToJsonFileFormatSchemaFileFormatOutput() JsonFileFormatSchemaFileFormatOutput
	ToJsonFileFormatSchemaFileFormatOutputWithContext(context.Context) JsonFileFormatSchemaFileFormatOutput
}

var jsonFileFormatSchemaFileFormatPtrType = reflect.TypeOf((**JsonFileFormatSchemaFileFormat)(nil)).Elem()

type JsonFileFormatSchemaFileFormatPtrInput interface {
	pulumi.Input

	ToJsonFileFormatSchemaFileFormatPtrOutput() JsonFileFormatSchemaFileFormatPtrOutput
	ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(context.Context) JsonFileFormatSchemaFileFormatPtrOutput
}

type jsonFileFormatSchemaFileFormatPtr string

func JsonFileFormatSchemaFileFormatPtr(v string) JsonFileFormatSchemaFileFormatPtrInput {
	return (*jsonFileFormatSchemaFileFormatPtr)(&v)
}

func (*jsonFileFormatSchemaFileFormatPtr) ElementType() reflect.Type {
	return jsonFileFormatSchemaFileFormatPtrType
}

func (in *jsonFileFormatSchemaFileFormatPtr) ToJsonFileFormatSchemaFileFormatPtrOutput() JsonFileFormatSchemaFileFormatPtrOutput {
	return pulumi.ToOutput(in).(JsonFileFormatSchemaFileFormatPtrOutput)
}

func (in *jsonFileFormatSchemaFileFormatPtr) ToJsonFileFormatSchemaFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatSchemaFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(JsonFileFormatSchemaFileFormatPtrOutput)
}

// The state of the stream.
type StreamStateEnum string

const (
	// Unspecified stream state.
	StreamStateEnumStateUnspecified = StreamStateEnum("STATE_UNSPECIFIED")
	// The stream has been created but has not yet started streaming data.
	StreamStateEnumNotStarted = StreamStateEnum("NOT_STARTED")
	// The stream is running.
	StreamStateEnumRunning = StreamStateEnum("RUNNING")
	// The stream is paused.
	StreamStateEnumPaused = StreamStateEnum("PAUSED")
	// The stream is in maintenance mode. Updates are rejected on the resource in this state.
	StreamStateEnumMaintenance = StreamStateEnum("MAINTENANCE")
	// The stream is experiencing an error that is preventing data from being streamed.
	StreamStateEnumFailed = StreamStateEnum("FAILED")
	// The stream has experienced a terminal failure.
	StreamStateEnumFailedPermanently = StreamStateEnum("FAILED_PERMANENTLY")
	// The stream is starting, but not yet running.
	StreamStateEnumStarting = StreamStateEnum("STARTING")
	// The Stream is no longer reading new events, but still writing events in the buffer.
	StreamStateEnumDraining = StreamStateEnum("DRAINING")
)

func (StreamStateEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamStateEnum)(nil)).Elem()
}

func (e StreamStateEnum) ToStreamStateEnumOutput() StreamStateEnumOutput {
	return pulumi.ToOutput(e).(StreamStateEnumOutput)
}

func (e StreamStateEnum) ToStreamStateEnumOutputWithContext(ctx context.Context) StreamStateEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(StreamStateEnumOutput)
}

func (e StreamStateEnum) ToStreamStateEnumPtrOutput() StreamStateEnumPtrOutput {
	return e.ToStreamStateEnumPtrOutputWithContext(context.Background())
}

func (e StreamStateEnum) ToStreamStateEnumPtrOutputWithContext(ctx context.Context) StreamStateEnumPtrOutput {
	return StreamStateEnum(e).ToStreamStateEnumOutputWithContext(ctx).ToStreamStateEnumPtrOutputWithContext(ctx)
}

func (e StreamStateEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamStateEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e StreamStateEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e StreamStateEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type StreamStateEnumOutput struct{ *pulumi.OutputState }

func (StreamStateEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamStateEnum)(nil)).Elem()
}

func (o StreamStateEnumOutput) ToStreamStateEnumOutput() StreamStateEnumOutput {
	return o
}

func (o StreamStateEnumOutput) ToStreamStateEnumOutputWithContext(ctx context.Context) StreamStateEnumOutput {
	return o
}

func (o StreamStateEnumOutput) ToStreamStateEnumPtrOutput() StreamStateEnumPtrOutput {
	return o.ToStreamStateEnumPtrOutputWithContext(context.Background())
}

func (o StreamStateEnumOutput) ToStreamStateEnumPtrOutputWithContext(ctx context.Context) StreamStateEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamStateEnum) *StreamStateEnum {
		return &v
	}).(StreamStateEnumPtrOutput)
}

func (o StreamStateEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o StreamStateEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamStateEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o StreamStateEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamStateEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e StreamStateEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type StreamStateEnumPtrOutput struct{ *pulumi.OutputState }

func (StreamStateEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamStateEnum)(nil)).Elem()
}

func (o StreamStateEnumPtrOutput) ToStreamStateEnumPtrOutput() StreamStateEnumPtrOutput {
	return o
}

func (o StreamStateEnumPtrOutput) ToStreamStateEnumPtrOutputWithContext(ctx context.Context) StreamStateEnumPtrOutput {
	return o
}

func (o StreamStateEnumPtrOutput) Elem() StreamStateEnumOutput {
	return o.ApplyT(func(v *StreamStateEnum) StreamStateEnum {
		if v != nil {
			return *v
		}
		var ret StreamStateEnum
		return ret
	}).(StreamStateEnumOutput)
}

func (o StreamStateEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o StreamStateEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *StreamStateEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// StreamStateEnumInput is an input type that accepts StreamStateEnumArgs and StreamStateEnumOutput values.
// You can construct a concrete instance of `StreamStateEnumInput` via:
//
//          StreamStateEnumArgs{...}
type StreamStateEnumInput interface {
	pulumi.Input

	ToStreamStateEnumOutput() StreamStateEnumOutput
	ToStreamStateEnumOutputWithContext(context.Context) StreamStateEnumOutput
}

var streamStateEnumPtrType = reflect.TypeOf((**StreamStateEnum)(nil)).Elem()

type StreamStateEnumPtrInput interface {
	pulumi.Input

	ToStreamStateEnumPtrOutput() StreamStateEnumPtrOutput
	ToStreamStateEnumPtrOutputWithContext(context.Context) StreamStateEnumPtrOutput
}

type streamStateEnumPtr string

func StreamStateEnumPtr(v string) StreamStateEnumPtrInput {
	return (*streamStateEnumPtr)(&v)
}

func (*streamStateEnumPtr) ElementType() reflect.Type {
	return streamStateEnumPtrType
}

func (in *streamStateEnumPtr) ToStreamStateEnumPtrOutput() StreamStateEnumPtrOutput {
	return pulumi.ToOutput(in).(StreamStateEnumPtrOutput)
}

func (in *streamStateEnumPtr) ToStreamStateEnumPtrOutputWithContext(ctx context.Context) StreamStateEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(StreamStateEnumPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatCompressionInput)(nil)).Elem(), JsonFileFormatCompression("JSON_COMPRESSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatCompressionPtrInput)(nil)).Elem(), JsonFileFormatCompression("JSON_COMPRESSION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatSchemaFileFormatInput)(nil)).Elem(), JsonFileFormatSchemaFileFormat("SCHEMA_FILE_FORMAT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatSchemaFileFormatPtrInput)(nil)).Elem(), JsonFileFormatSchemaFileFormat("SCHEMA_FILE_FORMAT_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*StreamStateEnumInput)(nil)).Elem(), StreamStateEnum("STATE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*StreamStateEnumPtrInput)(nil)).Elem(), StreamStateEnum("STATE_UNSPECIFIED"))
	pulumi.RegisterOutputType(JsonFileFormatCompressionOutput{})
	pulumi.RegisterOutputType(JsonFileFormatCompressionPtrOutput{})
	pulumi.RegisterOutputType(JsonFileFormatSchemaFileFormatOutput{})
	pulumi.RegisterOutputType(JsonFileFormatSchemaFileFormatPtrOutput{})
	pulumi.RegisterOutputType(StreamStateEnumOutput{})
	pulumi.RegisterOutputType(StreamStateEnumPtrOutput{})
}
