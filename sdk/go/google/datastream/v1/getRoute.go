// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this method to get details about a route.
func LookupRoute(ctx *pulumi.Context, args *LookupRouteArgs, opts ...pulumi.InvokeOption) (*LookupRouteResult, error) {
	var rv LookupRouteResult
	err := ctx.Invoke("google-native:datastream/v1:getRoute", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRouteArgs struct {
	Location            string  `pulumi:"location"`
	PrivateConnectionId string  `pulumi:"privateConnectionId"`
	Project             *string `pulumi:"project"`
	RouteId             string  `pulumi:"routeId"`
}

type LookupRouteResult struct {
	// The create time of the resource.
	CreateTime string `pulumi:"createTime"`
	// Destination address for connection
	DestinationAddress string `pulumi:"destinationAddress"`
	// Destination port for connection
	DestinationPort int `pulumi:"destinationPort"`
	// Display name.
	DisplayName string `pulumi:"displayName"`
	// Labels.
	Labels map[string]string `pulumi:"labels"`
	// The resource's name.
	Name string `pulumi:"name"`
	// The update time of the resource.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupRouteOutput(ctx *pulumi.Context, args LookupRouteOutputArgs, opts ...pulumi.InvokeOption) LookupRouteResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRouteResult, error) {
			args := v.(LookupRouteArgs)
			r, err := LookupRoute(ctx, &args, opts...)
			var s LookupRouteResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRouteResultOutput)
}

type LookupRouteOutputArgs struct {
	Location            pulumi.StringInput    `pulumi:"location"`
	PrivateConnectionId pulumi.StringInput    `pulumi:"privateConnectionId"`
	Project             pulumi.StringPtrInput `pulumi:"project"`
	RouteId             pulumi.StringInput    `pulumi:"routeId"`
}

func (LookupRouteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteArgs)(nil)).Elem()
}

type LookupRouteResultOutput struct{ *pulumi.OutputState }

func (LookupRouteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteResult)(nil)).Elem()
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutput() LookupRouteResultOutput {
	return o
}

func (o LookupRouteResultOutput) ToLookupRouteResultOutputWithContext(ctx context.Context) LookupRouteResultOutput {
	return o
}

// The create time of the resource.
func (o LookupRouteResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Destination address for connection
func (o LookupRouteResultOutput) DestinationAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.DestinationAddress }).(pulumi.StringOutput)
}

// Destination port for connection
func (o LookupRouteResultOutput) DestinationPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRouteResult) int { return v.DestinationPort }).(pulumi.IntOutput)
}

// Display name.
func (o LookupRouteResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Labels.
func (o LookupRouteResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupRouteResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The resource's name.
func (o LookupRouteResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.Name }).(pulumi.StringOutput)
}

// The update time of the resource.
func (o LookupRouteResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteResultOutput{})
}
