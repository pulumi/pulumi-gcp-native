// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// AVRO file format configuration.
type AvroFileFormat struct {
}

// AvroFileFormatInput is an input type that accepts AvroFileFormatArgs and AvroFileFormatOutput values.
// You can construct a concrete instance of `AvroFileFormatInput` via:
//
//	AvroFileFormatArgs{...}
type AvroFileFormatInput interface {
	pulumi.Input

	ToAvroFileFormatOutput() AvroFileFormatOutput
	ToAvroFileFormatOutputWithContext(context.Context) AvroFileFormatOutput
}

// AVRO file format configuration.
type AvroFileFormatArgs struct {
}

func (AvroFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFileFormat)(nil)).Elem()
}

func (i AvroFileFormatArgs) ToAvroFileFormatOutput() AvroFileFormatOutput {
	return i.ToAvroFileFormatOutputWithContext(context.Background())
}

func (i AvroFileFormatArgs) ToAvroFileFormatOutputWithContext(ctx context.Context) AvroFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatOutput)
}

func (i AvroFileFormatArgs) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return i.ToAvroFileFormatPtrOutputWithContext(context.Background())
}

func (i AvroFileFormatArgs) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatOutput).ToAvroFileFormatPtrOutputWithContext(ctx)
}

// AvroFileFormatPtrInput is an input type that accepts AvroFileFormatArgs, AvroFileFormatPtr and AvroFileFormatPtrOutput values.
// You can construct a concrete instance of `AvroFileFormatPtrInput` via:
//
//	        AvroFileFormatArgs{...}
//
//	or:
//
//	        nil
type AvroFileFormatPtrInput interface {
	pulumi.Input

	ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput
	ToAvroFileFormatPtrOutputWithContext(context.Context) AvroFileFormatPtrOutput
}

type avroFileFormatPtrType AvroFileFormatArgs

func AvroFileFormatPtr(v *AvroFileFormatArgs) AvroFileFormatPtrInput {
	return (*avroFileFormatPtrType)(v)
}

func (*avroFileFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFileFormat)(nil)).Elem()
}

func (i *avroFileFormatPtrType) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return i.ToAvroFileFormatPtrOutputWithContext(context.Background())
}

func (i *avroFileFormatPtrType) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvroFileFormatPtrOutput)
}

// AVRO file format configuration.
type AvroFileFormatOutput struct{ *pulumi.OutputState }

func (AvroFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFileFormat)(nil)).Elem()
}

func (o AvroFileFormatOutput) ToAvroFileFormatOutput() AvroFileFormatOutput {
	return o
}

func (o AvroFileFormatOutput) ToAvroFileFormatOutputWithContext(ctx context.Context) AvroFileFormatOutput {
	return o
}

func (o AvroFileFormatOutput) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return o.ToAvroFileFormatPtrOutputWithContext(context.Background())
}

func (o AvroFileFormatOutput) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AvroFileFormat) *AvroFileFormat {
		return &v
	}).(AvroFileFormatPtrOutput)
}

type AvroFileFormatPtrOutput struct{ *pulumi.OutputState }

func (AvroFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AvroFileFormat)(nil)).Elem()
}

func (o AvroFileFormatPtrOutput) ToAvroFileFormatPtrOutput() AvroFileFormatPtrOutput {
	return o
}

func (o AvroFileFormatPtrOutput) ToAvroFileFormatPtrOutputWithContext(ctx context.Context) AvroFileFormatPtrOutput {
	return o
}

func (o AvroFileFormatPtrOutput) Elem() AvroFileFormatOutput {
	return o.ApplyT(func(v *AvroFileFormat) AvroFileFormat {
		if v != nil {
			return *v
		}
		var ret AvroFileFormat
		return ret
	}).(AvroFileFormatOutput)
}

// AVRO file format configuration.
type AvroFileFormatResponse struct {
}

// AVRO file format configuration.
type AvroFileFormatResponseOutput struct{ *pulumi.OutputState }

func (AvroFileFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvroFileFormatResponse)(nil)).Elem()
}

func (o AvroFileFormatResponseOutput) ToAvroFileFormatResponseOutput() AvroFileFormatResponseOutput {
	return o
}

func (o AvroFileFormatResponseOutput) ToAvroFileFormatResponseOutputWithContext(ctx context.Context) AvroFileFormatResponseOutput {
	return o
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategy struct {
	// MySQL data source objects to avoid backfilling.
	MysqlExcludedObjects *MysqlRdbms `pulumi:"mysqlExcludedObjects"`
	// Oracle data source objects to avoid backfilling.
	OracleExcludedObjects *OracleRdbms `pulumi:"oracleExcludedObjects"`
	// PostgreSQL data source objects to avoid backfilling.
	PostgresqlExcludedObjects *PostgresqlRdbms `pulumi:"postgresqlExcludedObjects"`
}

// BackfillAllStrategyInput is an input type that accepts BackfillAllStrategyArgs and BackfillAllStrategyOutput values.
// You can construct a concrete instance of `BackfillAllStrategyInput` via:
//
//	BackfillAllStrategyArgs{...}
type BackfillAllStrategyInput interface {
	pulumi.Input

	ToBackfillAllStrategyOutput() BackfillAllStrategyOutput
	ToBackfillAllStrategyOutputWithContext(context.Context) BackfillAllStrategyOutput
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyArgs struct {
	// MySQL data source objects to avoid backfilling.
	MysqlExcludedObjects MysqlRdbmsPtrInput `pulumi:"mysqlExcludedObjects"`
	// Oracle data source objects to avoid backfilling.
	OracleExcludedObjects OracleRdbmsPtrInput `pulumi:"oracleExcludedObjects"`
	// PostgreSQL data source objects to avoid backfilling.
	PostgresqlExcludedObjects PostgresqlRdbmsPtrInput `pulumi:"postgresqlExcludedObjects"`
}

func (BackfillAllStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillAllStrategy)(nil)).Elem()
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyOutput() BackfillAllStrategyOutput {
	return i.ToBackfillAllStrategyOutputWithContext(context.Background())
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyOutputWithContext(ctx context.Context) BackfillAllStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyOutput)
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return i.ToBackfillAllStrategyPtrOutputWithContext(context.Background())
}

func (i BackfillAllStrategyArgs) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyOutput).ToBackfillAllStrategyPtrOutputWithContext(ctx)
}

// BackfillAllStrategyPtrInput is an input type that accepts BackfillAllStrategyArgs, BackfillAllStrategyPtr and BackfillAllStrategyPtrOutput values.
// You can construct a concrete instance of `BackfillAllStrategyPtrInput` via:
//
//	        BackfillAllStrategyArgs{...}
//
//	or:
//
//	        nil
type BackfillAllStrategyPtrInput interface {
	pulumi.Input

	ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput
	ToBackfillAllStrategyPtrOutputWithContext(context.Context) BackfillAllStrategyPtrOutput
}

type backfillAllStrategyPtrType BackfillAllStrategyArgs

func BackfillAllStrategyPtr(v *BackfillAllStrategyArgs) BackfillAllStrategyPtrInput {
	return (*backfillAllStrategyPtrType)(v)
}

func (*backfillAllStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillAllStrategy)(nil)).Elem()
}

func (i *backfillAllStrategyPtrType) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return i.ToBackfillAllStrategyPtrOutputWithContext(context.Background())
}

func (i *backfillAllStrategyPtrType) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillAllStrategyPtrOutput)
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyOutput struct{ *pulumi.OutputState }

func (BackfillAllStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillAllStrategy)(nil)).Elem()
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyOutput() BackfillAllStrategyOutput {
	return o
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyOutputWithContext(ctx context.Context) BackfillAllStrategyOutput {
	return o
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return o.ToBackfillAllStrategyPtrOutputWithContext(context.Background())
}

func (o BackfillAllStrategyOutput) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackfillAllStrategy) *BackfillAllStrategy {
		return &v
	}).(BackfillAllStrategyPtrOutput)
}

// MySQL data source objects to avoid backfilling.
func (o BackfillAllStrategyOutput) MysqlExcludedObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v BackfillAllStrategy) *MysqlRdbms { return v.MysqlExcludedObjects }).(MysqlRdbmsPtrOutput)
}

// Oracle data source objects to avoid backfilling.
func (o BackfillAllStrategyOutput) OracleExcludedObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v BackfillAllStrategy) *OracleRdbms { return v.OracleExcludedObjects }).(OracleRdbmsPtrOutput)
}

// PostgreSQL data source objects to avoid backfilling.
func (o BackfillAllStrategyOutput) PostgresqlExcludedObjects() PostgresqlRdbmsPtrOutput {
	return o.ApplyT(func(v BackfillAllStrategy) *PostgresqlRdbms { return v.PostgresqlExcludedObjects }).(PostgresqlRdbmsPtrOutput)
}

type BackfillAllStrategyPtrOutput struct{ *pulumi.OutputState }

func (BackfillAllStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillAllStrategy)(nil)).Elem()
}

func (o BackfillAllStrategyPtrOutput) ToBackfillAllStrategyPtrOutput() BackfillAllStrategyPtrOutput {
	return o
}

func (o BackfillAllStrategyPtrOutput) ToBackfillAllStrategyPtrOutputWithContext(ctx context.Context) BackfillAllStrategyPtrOutput {
	return o
}

func (o BackfillAllStrategyPtrOutput) Elem() BackfillAllStrategyOutput {
	return o.ApplyT(func(v *BackfillAllStrategy) BackfillAllStrategy {
		if v != nil {
			return *v
		}
		var ret BackfillAllStrategy
		return ret
	}).(BackfillAllStrategyOutput)
}

// MySQL data source objects to avoid backfilling.
func (o BackfillAllStrategyPtrOutput) MysqlExcludedObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v *BackfillAllStrategy) *MysqlRdbms {
		if v == nil {
			return nil
		}
		return v.MysqlExcludedObjects
	}).(MysqlRdbmsPtrOutput)
}

// Oracle data source objects to avoid backfilling.
func (o BackfillAllStrategyPtrOutput) OracleExcludedObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v *BackfillAllStrategy) *OracleRdbms {
		if v == nil {
			return nil
		}
		return v.OracleExcludedObjects
	}).(OracleRdbmsPtrOutput)
}

// PostgreSQL data source objects to avoid backfilling.
func (o BackfillAllStrategyPtrOutput) PostgresqlExcludedObjects() PostgresqlRdbmsPtrOutput {
	return o.ApplyT(func(v *BackfillAllStrategy) *PostgresqlRdbms {
		if v == nil {
			return nil
		}
		return v.PostgresqlExcludedObjects
	}).(PostgresqlRdbmsPtrOutput)
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyResponse struct {
	// MySQL data source objects to avoid backfilling.
	MysqlExcludedObjects MysqlRdbmsResponse `pulumi:"mysqlExcludedObjects"`
	// Oracle data source objects to avoid backfilling.
	OracleExcludedObjects OracleRdbmsResponse `pulumi:"oracleExcludedObjects"`
	// PostgreSQL data source objects to avoid backfilling.
	PostgresqlExcludedObjects PostgresqlRdbmsResponse `pulumi:"postgresqlExcludedObjects"`
}

// Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
type BackfillAllStrategyResponseOutput struct{ *pulumi.OutputState }

func (BackfillAllStrategyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillAllStrategyResponse)(nil)).Elem()
}

func (o BackfillAllStrategyResponseOutput) ToBackfillAllStrategyResponseOutput() BackfillAllStrategyResponseOutput {
	return o
}

func (o BackfillAllStrategyResponseOutput) ToBackfillAllStrategyResponseOutputWithContext(ctx context.Context) BackfillAllStrategyResponseOutput {
	return o
}

// MySQL data source objects to avoid backfilling.
func (o BackfillAllStrategyResponseOutput) MysqlExcludedObjects() MysqlRdbmsResponseOutput {
	return o.ApplyT(func(v BackfillAllStrategyResponse) MysqlRdbmsResponse { return v.MysqlExcludedObjects }).(MysqlRdbmsResponseOutput)
}

// Oracle data source objects to avoid backfilling.
func (o BackfillAllStrategyResponseOutput) OracleExcludedObjects() OracleRdbmsResponseOutput {
	return o.ApplyT(func(v BackfillAllStrategyResponse) OracleRdbmsResponse { return v.OracleExcludedObjects }).(OracleRdbmsResponseOutput)
}

// PostgreSQL data source objects to avoid backfilling.
func (o BackfillAllStrategyResponseOutput) PostgresqlExcludedObjects() PostgresqlRdbmsResponseOutput {
	return o.ApplyT(func(v BackfillAllStrategyResponse) PostgresqlRdbmsResponse { return v.PostgresqlExcludedObjects }).(PostgresqlRdbmsResponseOutput)
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategy struct {
}

// BackfillNoneStrategyInput is an input type that accepts BackfillNoneStrategyArgs and BackfillNoneStrategyOutput values.
// You can construct a concrete instance of `BackfillNoneStrategyInput` via:
//
//	BackfillNoneStrategyArgs{...}
type BackfillNoneStrategyInput interface {
	pulumi.Input

	ToBackfillNoneStrategyOutput() BackfillNoneStrategyOutput
	ToBackfillNoneStrategyOutputWithContext(context.Context) BackfillNoneStrategyOutput
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyArgs struct {
}

func (BackfillNoneStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillNoneStrategy)(nil)).Elem()
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyOutput() BackfillNoneStrategyOutput {
	return i.ToBackfillNoneStrategyOutputWithContext(context.Background())
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyOutputWithContext(ctx context.Context) BackfillNoneStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyOutput)
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return i.ToBackfillNoneStrategyPtrOutputWithContext(context.Background())
}

func (i BackfillNoneStrategyArgs) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyOutput).ToBackfillNoneStrategyPtrOutputWithContext(ctx)
}

// BackfillNoneStrategyPtrInput is an input type that accepts BackfillNoneStrategyArgs, BackfillNoneStrategyPtr and BackfillNoneStrategyPtrOutput values.
// You can construct a concrete instance of `BackfillNoneStrategyPtrInput` via:
//
//	        BackfillNoneStrategyArgs{...}
//
//	or:
//
//	        nil
type BackfillNoneStrategyPtrInput interface {
	pulumi.Input

	ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput
	ToBackfillNoneStrategyPtrOutputWithContext(context.Context) BackfillNoneStrategyPtrOutput
}

type backfillNoneStrategyPtrType BackfillNoneStrategyArgs

func BackfillNoneStrategyPtr(v *BackfillNoneStrategyArgs) BackfillNoneStrategyPtrInput {
	return (*backfillNoneStrategyPtrType)(v)
}

func (*backfillNoneStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillNoneStrategy)(nil)).Elem()
}

func (i *backfillNoneStrategyPtrType) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return i.ToBackfillNoneStrategyPtrOutputWithContext(context.Background())
}

func (i *backfillNoneStrategyPtrType) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackfillNoneStrategyPtrOutput)
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyOutput struct{ *pulumi.OutputState }

func (BackfillNoneStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillNoneStrategy)(nil)).Elem()
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyOutput() BackfillNoneStrategyOutput {
	return o
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyOutputWithContext(ctx context.Context) BackfillNoneStrategyOutput {
	return o
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return o.ToBackfillNoneStrategyPtrOutputWithContext(context.Background())
}

func (o BackfillNoneStrategyOutput) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BackfillNoneStrategy) *BackfillNoneStrategy {
		return &v
	}).(BackfillNoneStrategyPtrOutput)
}

type BackfillNoneStrategyPtrOutput struct{ *pulumi.OutputState }

func (BackfillNoneStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackfillNoneStrategy)(nil)).Elem()
}

func (o BackfillNoneStrategyPtrOutput) ToBackfillNoneStrategyPtrOutput() BackfillNoneStrategyPtrOutput {
	return o
}

func (o BackfillNoneStrategyPtrOutput) ToBackfillNoneStrategyPtrOutputWithContext(ctx context.Context) BackfillNoneStrategyPtrOutput {
	return o
}

func (o BackfillNoneStrategyPtrOutput) Elem() BackfillNoneStrategyOutput {
	return o.ApplyT(func(v *BackfillNoneStrategy) BackfillNoneStrategy {
		if v != nil {
			return *v
		}
		var ret BackfillNoneStrategy
		return ret
	}).(BackfillNoneStrategyOutput)
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyResponse struct {
}

// Backfill strategy to disable automatic backfill for the Stream's objects.
type BackfillNoneStrategyResponseOutput struct{ *pulumi.OutputState }

func (BackfillNoneStrategyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackfillNoneStrategyResponse)(nil)).Elem()
}

func (o BackfillNoneStrategyResponseOutput) ToBackfillNoneStrategyResponseOutput() BackfillNoneStrategyResponseOutput {
	return o
}

func (o BackfillNoneStrategyResponseOutput) ToBackfillNoneStrategyResponseOutputWithContext(ctx context.Context) BackfillNoneStrategyResponseOutput {
	return o
}

// BigQuery destination configuration
type BigQueryDestinationConfig struct {
	// The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	DataFreshness *string `pulumi:"dataFreshness"`
	// Single destination dataset.
	SingleTargetDataset *SingleTargetDataset `pulumi:"singleTargetDataset"`
	// Source hierarchy datasets.
	SourceHierarchyDatasets *SourceHierarchyDatasets `pulumi:"sourceHierarchyDatasets"`
}

// BigQueryDestinationConfigInput is an input type that accepts BigQueryDestinationConfigArgs and BigQueryDestinationConfigOutput values.
// You can construct a concrete instance of `BigQueryDestinationConfigInput` via:
//
//	BigQueryDestinationConfigArgs{...}
type BigQueryDestinationConfigInput interface {
	pulumi.Input

	ToBigQueryDestinationConfigOutput() BigQueryDestinationConfigOutput
	ToBigQueryDestinationConfigOutputWithContext(context.Context) BigQueryDestinationConfigOutput
}

// BigQuery destination configuration
type BigQueryDestinationConfigArgs struct {
	// The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	DataFreshness pulumi.StringPtrInput `pulumi:"dataFreshness"`
	// Single destination dataset.
	SingleTargetDataset SingleTargetDatasetPtrInput `pulumi:"singleTargetDataset"`
	// Source hierarchy datasets.
	SourceHierarchyDatasets SourceHierarchyDatasetsPtrInput `pulumi:"sourceHierarchyDatasets"`
}

func (BigQueryDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestinationConfig)(nil)).Elem()
}

func (i BigQueryDestinationConfigArgs) ToBigQueryDestinationConfigOutput() BigQueryDestinationConfigOutput {
	return i.ToBigQueryDestinationConfigOutputWithContext(context.Background())
}

func (i BigQueryDestinationConfigArgs) ToBigQueryDestinationConfigOutputWithContext(ctx context.Context) BigQueryDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationConfigOutput)
}

func (i BigQueryDestinationConfigArgs) ToBigQueryDestinationConfigPtrOutput() BigQueryDestinationConfigPtrOutput {
	return i.ToBigQueryDestinationConfigPtrOutputWithContext(context.Background())
}

func (i BigQueryDestinationConfigArgs) ToBigQueryDestinationConfigPtrOutputWithContext(ctx context.Context) BigQueryDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationConfigOutput).ToBigQueryDestinationConfigPtrOutputWithContext(ctx)
}

// BigQueryDestinationConfigPtrInput is an input type that accepts BigQueryDestinationConfigArgs, BigQueryDestinationConfigPtr and BigQueryDestinationConfigPtrOutput values.
// You can construct a concrete instance of `BigQueryDestinationConfigPtrInput` via:
//
//	        BigQueryDestinationConfigArgs{...}
//
//	or:
//
//	        nil
type BigQueryDestinationConfigPtrInput interface {
	pulumi.Input

	ToBigQueryDestinationConfigPtrOutput() BigQueryDestinationConfigPtrOutput
	ToBigQueryDestinationConfigPtrOutputWithContext(context.Context) BigQueryDestinationConfigPtrOutput
}

type bigQueryDestinationConfigPtrType BigQueryDestinationConfigArgs

func BigQueryDestinationConfigPtr(v *BigQueryDestinationConfigArgs) BigQueryDestinationConfigPtrInput {
	return (*bigQueryDestinationConfigPtrType)(v)
}

func (*bigQueryDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestinationConfig)(nil)).Elem()
}

func (i *bigQueryDestinationConfigPtrType) ToBigQueryDestinationConfigPtrOutput() BigQueryDestinationConfigPtrOutput {
	return i.ToBigQueryDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *bigQueryDestinationConfigPtrType) ToBigQueryDestinationConfigPtrOutputWithContext(ctx context.Context) BigQueryDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryDestinationConfigPtrOutput)
}

// BigQuery destination configuration
type BigQueryDestinationConfigOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestinationConfig)(nil)).Elem()
}

func (o BigQueryDestinationConfigOutput) ToBigQueryDestinationConfigOutput() BigQueryDestinationConfigOutput {
	return o
}

func (o BigQueryDestinationConfigOutput) ToBigQueryDestinationConfigOutputWithContext(ctx context.Context) BigQueryDestinationConfigOutput {
	return o
}

func (o BigQueryDestinationConfigOutput) ToBigQueryDestinationConfigPtrOutput() BigQueryDestinationConfigPtrOutput {
	return o.ToBigQueryDestinationConfigPtrOutputWithContext(context.Background())
}

func (o BigQueryDestinationConfigOutput) ToBigQueryDestinationConfigPtrOutputWithContext(ctx context.Context) BigQueryDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigQueryDestinationConfig) *BigQueryDestinationConfig {
		return &v
	}).(BigQueryDestinationConfigPtrOutput)
}

// The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
func (o BigQueryDestinationConfigOutput) DataFreshness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BigQueryDestinationConfig) *string { return v.DataFreshness }).(pulumi.StringPtrOutput)
}

// Single destination dataset.
func (o BigQueryDestinationConfigOutput) SingleTargetDataset() SingleTargetDatasetPtrOutput {
	return o.ApplyT(func(v BigQueryDestinationConfig) *SingleTargetDataset { return v.SingleTargetDataset }).(SingleTargetDatasetPtrOutput)
}

// Source hierarchy datasets.
func (o BigQueryDestinationConfigOutput) SourceHierarchyDatasets() SourceHierarchyDatasetsPtrOutput {
	return o.ApplyT(func(v BigQueryDestinationConfig) *SourceHierarchyDatasets { return v.SourceHierarchyDatasets }).(SourceHierarchyDatasetsPtrOutput)
}

type BigQueryDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryDestinationConfig)(nil)).Elem()
}

func (o BigQueryDestinationConfigPtrOutput) ToBigQueryDestinationConfigPtrOutput() BigQueryDestinationConfigPtrOutput {
	return o
}

func (o BigQueryDestinationConfigPtrOutput) ToBigQueryDestinationConfigPtrOutputWithContext(ctx context.Context) BigQueryDestinationConfigPtrOutput {
	return o
}

func (o BigQueryDestinationConfigPtrOutput) Elem() BigQueryDestinationConfigOutput {
	return o.ApplyT(func(v *BigQueryDestinationConfig) BigQueryDestinationConfig {
		if v != nil {
			return *v
		}
		var ret BigQueryDestinationConfig
		return ret
	}).(BigQueryDestinationConfigOutput)
}

// The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
func (o BigQueryDestinationConfigPtrOutput) DataFreshness() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BigQueryDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.DataFreshness
	}).(pulumi.StringPtrOutput)
}

// Single destination dataset.
func (o BigQueryDestinationConfigPtrOutput) SingleTargetDataset() SingleTargetDatasetPtrOutput {
	return o.ApplyT(func(v *BigQueryDestinationConfig) *SingleTargetDataset {
		if v == nil {
			return nil
		}
		return v.SingleTargetDataset
	}).(SingleTargetDatasetPtrOutput)
}

// Source hierarchy datasets.
func (o BigQueryDestinationConfigPtrOutput) SourceHierarchyDatasets() SourceHierarchyDatasetsPtrOutput {
	return o.ApplyT(func(v *BigQueryDestinationConfig) *SourceHierarchyDatasets {
		if v == nil {
			return nil
		}
		return v.SourceHierarchyDatasets
	}).(SourceHierarchyDatasetsPtrOutput)
}

// BigQuery destination configuration
type BigQueryDestinationConfigResponse struct {
	// The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
	DataFreshness string `pulumi:"dataFreshness"`
	// Single destination dataset.
	SingleTargetDataset SingleTargetDatasetResponse `pulumi:"singleTargetDataset"`
	// Source hierarchy datasets.
	SourceHierarchyDatasets SourceHierarchyDatasetsResponse `pulumi:"sourceHierarchyDatasets"`
}

// BigQuery destination configuration
type BigQueryDestinationConfigResponseOutput struct{ *pulumi.OutputState }

func (BigQueryDestinationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryDestinationConfigResponse)(nil)).Elem()
}

func (o BigQueryDestinationConfigResponseOutput) ToBigQueryDestinationConfigResponseOutput() BigQueryDestinationConfigResponseOutput {
	return o
}

func (o BigQueryDestinationConfigResponseOutput) ToBigQueryDestinationConfigResponseOutputWithContext(ctx context.Context) BigQueryDestinationConfigResponseOutput {
	return o
}

// The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
func (o BigQueryDestinationConfigResponseOutput) DataFreshness() pulumi.StringOutput {
	return o.ApplyT(func(v BigQueryDestinationConfigResponse) string { return v.DataFreshness }).(pulumi.StringOutput)
}

// Single destination dataset.
func (o BigQueryDestinationConfigResponseOutput) SingleTargetDataset() SingleTargetDatasetResponseOutput {
	return o.ApplyT(func(v BigQueryDestinationConfigResponse) SingleTargetDatasetResponse { return v.SingleTargetDataset }).(SingleTargetDatasetResponseOutput)
}

// Source hierarchy datasets.
func (o BigQueryDestinationConfigResponseOutput) SourceHierarchyDatasets() SourceHierarchyDatasetsResponseOutput {
	return o.ApplyT(func(v BigQueryDestinationConfigResponse) SourceHierarchyDatasetsResponse {
		return v.SourceHierarchyDatasets
	}).(SourceHierarchyDatasetsResponseOutput)
}

// BigQuery warehouse profile.
type BigQueryProfile struct {
}

// BigQueryProfileInput is an input type that accepts BigQueryProfileArgs and BigQueryProfileOutput values.
// You can construct a concrete instance of `BigQueryProfileInput` via:
//
//	BigQueryProfileArgs{...}
type BigQueryProfileInput interface {
	pulumi.Input

	ToBigQueryProfileOutput() BigQueryProfileOutput
	ToBigQueryProfileOutputWithContext(context.Context) BigQueryProfileOutput
}

// BigQuery warehouse profile.
type BigQueryProfileArgs struct {
}

func (BigQueryProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryProfile)(nil)).Elem()
}

func (i BigQueryProfileArgs) ToBigQueryProfileOutput() BigQueryProfileOutput {
	return i.ToBigQueryProfileOutputWithContext(context.Background())
}

func (i BigQueryProfileArgs) ToBigQueryProfileOutputWithContext(ctx context.Context) BigQueryProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryProfileOutput)
}

func (i BigQueryProfileArgs) ToBigQueryProfilePtrOutput() BigQueryProfilePtrOutput {
	return i.ToBigQueryProfilePtrOutputWithContext(context.Background())
}

func (i BigQueryProfileArgs) ToBigQueryProfilePtrOutputWithContext(ctx context.Context) BigQueryProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryProfileOutput).ToBigQueryProfilePtrOutputWithContext(ctx)
}

// BigQueryProfilePtrInput is an input type that accepts BigQueryProfileArgs, BigQueryProfilePtr and BigQueryProfilePtrOutput values.
// You can construct a concrete instance of `BigQueryProfilePtrInput` via:
//
//	        BigQueryProfileArgs{...}
//
//	or:
//
//	        nil
type BigQueryProfilePtrInput interface {
	pulumi.Input

	ToBigQueryProfilePtrOutput() BigQueryProfilePtrOutput
	ToBigQueryProfilePtrOutputWithContext(context.Context) BigQueryProfilePtrOutput
}

type bigQueryProfilePtrType BigQueryProfileArgs

func BigQueryProfilePtr(v *BigQueryProfileArgs) BigQueryProfilePtrInput {
	return (*bigQueryProfilePtrType)(v)
}

func (*bigQueryProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryProfile)(nil)).Elem()
}

func (i *bigQueryProfilePtrType) ToBigQueryProfilePtrOutput() BigQueryProfilePtrOutput {
	return i.ToBigQueryProfilePtrOutputWithContext(context.Background())
}

func (i *bigQueryProfilePtrType) ToBigQueryProfilePtrOutputWithContext(ctx context.Context) BigQueryProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BigQueryProfilePtrOutput)
}

// BigQuery warehouse profile.
type BigQueryProfileOutput struct{ *pulumi.OutputState }

func (BigQueryProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryProfile)(nil)).Elem()
}

func (o BigQueryProfileOutput) ToBigQueryProfileOutput() BigQueryProfileOutput {
	return o
}

func (o BigQueryProfileOutput) ToBigQueryProfileOutputWithContext(ctx context.Context) BigQueryProfileOutput {
	return o
}

func (o BigQueryProfileOutput) ToBigQueryProfilePtrOutput() BigQueryProfilePtrOutput {
	return o.ToBigQueryProfilePtrOutputWithContext(context.Background())
}

func (o BigQueryProfileOutput) ToBigQueryProfilePtrOutputWithContext(ctx context.Context) BigQueryProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BigQueryProfile) *BigQueryProfile {
		return &v
	}).(BigQueryProfilePtrOutput)
}

type BigQueryProfilePtrOutput struct{ *pulumi.OutputState }

func (BigQueryProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BigQueryProfile)(nil)).Elem()
}

func (o BigQueryProfilePtrOutput) ToBigQueryProfilePtrOutput() BigQueryProfilePtrOutput {
	return o
}

func (o BigQueryProfilePtrOutput) ToBigQueryProfilePtrOutputWithContext(ctx context.Context) BigQueryProfilePtrOutput {
	return o
}

func (o BigQueryProfilePtrOutput) Elem() BigQueryProfileOutput {
	return o.ApplyT(func(v *BigQueryProfile) BigQueryProfile {
		if v != nil {
			return *v
		}
		var ret BigQueryProfile
		return ret
	}).(BigQueryProfileOutput)
}

// BigQuery warehouse profile.
type BigQueryProfileResponse struct {
}

// BigQuery warehouse profile.
type BigQueryProfileResponseOutput struct{ *pulumi.OutputState }

func (BigQueryProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BigQueryProfileResponse)(nil)).Elem()
}

func (o BigQueryProfileResponseOutput) ToBigQueryProfileResponseOutput() BigQueryProfileResponseOutput {
	return o
}

func (o BigQueryProfileResponseOutput) ToBigQueryProfileResponseOutputWithContext(ctx context.Context) BigQueryProfileResponseOutput {
	return o
}

// Dataset template used for dynamic dataset creation.
type DatasetTemplate struct {
	// If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
	DatasetIdPrefix *string `pulumi:"datasetIdPrefix"`
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location string `pulumi:"location"`
}

// DatasetTemplateInput is an input type that accepts DatasetTemplateArgs and DatasetTemplateOutput values.
// You can construct a concrete instance of `DatasetTemplateInput` via:
//
//	DatasetTemplateArgs{...}
type DatasetTemplateInput interface {
	pulumi.Input

	ToDatasetTemplateOutput() DatasetTemplateOutput
	ToDatasetTemplateOutputWithContext(context.Context) DatasetTemplateOutput
}

// Dataset template used for dynamic dataset creation.
type DatasetTemplateArgs struct {
	// If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
	DatasetIdPrefix pulumi.StringPtrInput `pulumi:"datasetIdPrefix"`
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	KmsKeyName pulumi.StringPtrInput `pulumi:"kmsKeyName"`
	// The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location pulumi.StringInput `pulumi:"location"`
}

func (DatasetTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTemplate)(nil)).Elem()
}

func (i DatasetTemplateArgs) ToDatasetTemplateOutput() DatasetTemplateOutput {
	return i.ToDatasetTemplateOutputWithContext(context.Background())
}

func (i DatasetTemplateArgs) ToDatasetTemplateOutputWithContext(ctx context.Context) DatasetTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTemplateOutput)
}

func (i DatasetTemplateArgs) ToDatasetTemplatePtrOutput() DatasetTemplatePtrOutput {
	return i.ToDatasetTemplatePtrOutputWithContext(context.Background())
}

func (i DatasetTemplateArgs) ToDatasetTemplatePtrOutputWithContext(ctx context.Context) DatasetTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTemplateOutput).ToDatasetTemplatePtrOutputWithContext(ctx)
}

// DatasetTemplatePtrInput is an input type that accepts DatasetTemplateArgs, DatasetTemplatePtr and DatasetTemplatePtrOutput values.
// You can construct a concrete instance of `DatasetTemplatePtrInput` via:
//
//	        DatasetTemplateArgs{...}
//
//	or:
//
//	        nil
type DatasetTemplatePtrInput interface {
	pulumi.Input

	ToDatasetTemplatePtrOutput() DatasetTemplatePtrOutput
	ToDatasetTemplatePtrOutputWithContext(context.Context) DatasetTemplatePtrOutput
}

type datasetTemplatePtrType DatasetTemplateArgs

func DatasetTemplatePtr(v *DatasetTemplateArgs) DatasetTemplatePtrInput {
	return (*datasetTemplatePtrType)(v)
}

func (*datasetTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetTemplate)(nil)).Elem()
}

func (i *datasetTemplatePtrType) ToDatasetTemplatePtrOutput() DatasetTemplatePtrOutput {
	return i.ToDatasetTemplatePtrOutputWithContext(context.Background())
}

func (i *datasetTemplatePtrType) ToDatasetTemplatePtrOutputWithContext(ctx context.Context) DatasetTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetTemplatePtrOutput)
}

// Dataset template used for dynamic dataset creation.
type DatasetTemplateOutput struct{ *pulumi.OutputState }

func (DatasetTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTemplate)(nil)).Elem()
}

func (o DatasetTemplateOutput) ToDatasetTemplateOutput() DatasetTemplateOutput {
	return o
}

func (o DatasetTemplateOutput) ToDatasetTemplateOutputWithContext(ctx context.Context) DatasetTemplateOutput {
	return o
}

func (o DatasetTemplateOutput) ToDatasetTemplatePtrOutput() DatasetTemplatePtrOutput {
	return o.ToDatasetTemplatePtrOutputWithContext(context.Background())
}

func (o DatasetTemplateOutput) ToDatasetTemplatePtrOutputWithContext(ctx context.Context) DatasetTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DatasetTemplate) *DatasetTemplate {
		return &v
	}).(DatasetTemplatePtrOutput)
}

// If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
func (o DatasetTemplateOutput) DatasetIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetTemplate) *string { return v.DatasetIdPrefix }).(pulumi.StringPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
func (o DatasetTemplateOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatasetTemplate) *string { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
func (o DatasetTemplateOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTemplate) string { return v.Location }).(pulumi.StringOutput)
}

type DatasetTemplatePtrOutput struct{ *pulumi.OutputState }

func (DatasetTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetTemplate)(nil)).Elem()
}

func (o DatasetTemplatePtrOutput) ToDatasetTemplatePtrOutput() DatasetTemplatePtrOutput {
	return o
}

func (o DatasetTemplatePtrOutput) ToDatasetTemplatePtrOutputWithContext(ctx context.Context) DatasetTemplatePtrOutput {
	return o
}

func (o DatasetTemplatePtrOutput) Elem() DatasetTemplateOutput {
	return o.ApplyT(func(v *DatasetTemplate) DatasetTemplate {
		if v != nil {
			return *v
		}
		var ret DatasetTemplate
		return ret
	}).(DatasetTemplateOutput)
}

// If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
func (o DatasetTemplatePtrOutput) DatasetIdPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetTemplate) *string {
		if v == nil {
			return nil
		}
		return v.DatasetIdPrefix
	}).(pulumi.StringPtrOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
func (o DatasetTemplatePtrOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetTemplate) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyName
	}).(pulumi.StringPtrOutput)
}

// The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
func (o DatasetTemplatePtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatasetTemplate) *string {
		if v == nil {
			return nil
		}
		return &v.Location
	}).(pulumi.StringPtrOutput)
}

// Dataset template used for dynamic dataset creation.
type DatasetTemplateResponse struct {
	// If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
	DatasetIdPrefix string `pulumi:"datasetIdPrefix"`
	// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
	KmsKeyName string `pulumi:"kmsKeyName"`
	// The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
	Location string `pulumi:"location"`
}

// Dataset template used for dynamic dataset creation.
type DatasetTemplateResponseOutput struct{ *pulumi.OutputState }

func (DatasetTemplateResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatasetTemplateResponse)(nil)).Elem()
}

func (o DatasetTemplateResponseOutput) ToDatasetTemplateResponseOutput() DatasetTemplateResponseOutput {
	return o
}

func (o DatasetTemplateResponseOutput) ToDatasetTemplateResponseOutputWithContext(ctx context.Context) DatasetTemplateResponseOutput {
	return o
}

// If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
func (o DatasetTemplateResponseOutput) DatasetIdPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTemplateResponse) string { return v.DatasetIdPrefix }).(pulumi.StringOutput)
}

// Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
func (o DatasetTemplateResponseOutput) KmsKeyName() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTemplateResponse) string { return v.KmsKeyName }).(pulumi.StringOutput)
}

// The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
func (o DatasetTemplateResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v DatasetTemplateResponse) string { return v.Location }).(pulumi.StringOutput)
}

// The configuration of the stream destination.
type DestinationConfig struct {
	// BigQuery destination configuration.
	BigqueryDestinationConfig *BigQueryDestinationConfig `pulumi:"bigqueryDestinationConfig"`
	// Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
	DestinationConnectionProfile string `pulumi:"destinationConnectionProfile"`
	// A configuration for how data should be loaded to Cloud Storage.
	GcsDestinationConfig *GcsDestinationConfig `pulumi:"gcsDestinationConfig"`
}

// DestinationConfigInput is an input type that accepts DestinationConfigArgs and DestinationConfigOutput values.
// You can construct a concrete instance of `DestinationConfigInput` via:
//
//	DestinationConfigArgs{...}
type DestinationConfigInput interface {
	pulumi.Input

	ToDestinationConfigOutput() DestinationConfigOutput
	ToDestinationConfigOutputWithContext(context.Context) DestinationConfigOutput
}

// The configuration of the stream destination.
type DestinationConfigArgs struct {
	// BigQuery destination configuration.
	BigqueryDestinationConfig BigQueryDestinationConfigPtrInput `pulumi:"bigqueryDestinationConfig"`
	// Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
	DestinationConnectionProfile pulumi.StringInput `pulumi:"destinationConnectionProfile"`
	// A configuration for how data should be loaded to Cloud Storage.
	GcsDestinationConfig GcsDestinationConfigPtrInput `pulumi:"gcsDestinationConfig"`
}

func (DestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfig)(nil)).Elem()
}

func (i DestinationConfigArgs) ToDestinationConfigOutput() DestinationConfigOutput {
	return i.ToDestinationConfigOutputWithContext(context.Background())
}

func (i DestinationConfigArgs) ToDestinationConfigOutputWithContext(ctx context.Context) DestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DestinationConfigOutput)
}

// The configuration of the stream destination.
type DestinationConfigOutput struct{ *pulumi.OutputState }

func (DestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfig)(nil)).Elem()
}

func (o DestinationConfigOutput) ToDestinationConfigOutput() DestinationConfigOutput {
	return o
}

func (o DestinationConfigOutput) ToDestinationConfigOutputWithContext(ctx context.Context) DestinationConfigOutput {
	return o
}

// BigQuery destination configuration.
func (o DestinationConfigOutput) BigqueryDestinationConfig() BigQueryDestinationConfigPtrOutput {
	return o.ApplyT(func(v DestinationConfig) *BigQueryDestinationConfig { return v.BigqueryDestinationConfig }).(BigQueryDestinationConfigPtrOutput)
}

// Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
func (o DestinationConfigOutput) DestinationConnectionProfile() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationConfig) string { return v.DestinationConnectionProfile }).(pulumi.StringOutput)
}

// A configuration for how data should be loaded to Cloud Storage.
func (o DestinationConfigOutput) GcsDestinationConfig() GcsDestinationConfigPtrOutput {
	return o.ApplyT(func(v DestinationConfig) *GcsDestinationConfig { return v.GcsDestinationConfig }).(GcsDestinationConfigPtrOutput)
}

// The configuration of the stream destination.
type DestinationConfigResponse struct {
	// BigQuery destination configuration.
	BigqueryDestinationConfig BigQueryDestinationConfigResponse `pulumi:"bigqueryDestinationConfig"`
	// Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
	DestinationConnectionProfile string `pulumi:"destinationConnectionProfile"`
	// A configuration for how data should be loaded to Cloud Storage.
	GcsDestinationConfig GcsDestinationConfigResponse `pulumi:"gcsDestinationConfig"`
}

// The configuration of the stream destination.
type DestinationConfigResponseOutput struct{ *pulumi.OutputState }

func (DestinationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DestinationConfigResponse)(nil)).Elem()
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponseOutput() DestinationConfigResponseOutput {
	return o
}

func (o DestinationConfigResponseOutput) ToDestinationConfigResponseOutputWithContext(ctx context.Context) DestinationConfigResponseOutput {
	return o
}

// BigQuery destination configuration.
func (o DestinationConfigResponseOutput) BigqueryDestinationConfig() BigQueryDestinationConfigResponseOutput {
	return o.ApplyT(func(v DestinationConfigResponse) BigQueryDestinationConfigResponse {
		return v.BigqueryDestinationConfig
	}).(BigQueryDestinationConfigResponseOutput)
}

// Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
func (o DestinationConfigResponseOutput) DestinationConnectionProfile() pulumi.StringOutput {
	return o.ApplyT(func(v DestinationConfigResponse) string { return v.DestinationConnectionProfile }).(pulumi.StringOutput)
}

// A configuration for how data should be loaded to Cloud Storage.
func (o DestinationConfigResponseOutput) GcsDestinationConfig() GcsDestinationConfigResponseOutput {
	return o.ApplyT(func(v DestinationConfigResponse) GcsDestinationConfigResponse { return v.GcsDestinationConfig }).(GcsDestinationConfigResponseOutput)
}

// Configuration to drop large object values.
type DropLargeObjects struct {
}

// DropLargeObjectsInput is an input type that accepts DropLargeObjectsArgs and DropLargeObjectsOutput values.
// You can construct a concrete instance of `DropLargeObjectsInput` via:
//
//	DropLargeObjectsArgs{...}
type DropLargeObjectsInput interface {
	pulumi.Input

	ToDropLargeObjectsOutput() DropLargeObjectsOutput
	ToDropLargeObjectsOutputWithContext(context.Context) DropLargeObjectsOutput
}

// Configuration to drop large object values.
type DropLargeObjectsArgs struct {
}

func (DropLargeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DropLargeObjects)(nil)).Elem()
}

func (i DropLargeObjectsArgs) ToDropLargeObjectsOutput() DropLargeObjectsOutput {
	return i.ToDropLargeObjectsOutputWithContext(context.Background())
}

func (i DropLargeObjectsArgs) ToDropLargeObjectsOutputWithContext(ctx context.Context) DropLargeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropLargeObjectsOutput)
}

func (i DropLargeObjectsArgs) ToDropLargeObjectsPtrOutput() DropLargeObjectsPtrOutput {
	return i.ToDropLargeObjectsPtrOutputWithContext(context.Background())
}

func (i DropLargeObjectsArgs) ToDropLargeObjectsPtrOutputWithContext(ctx context.Context) DropLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropLargeObjectsOutput).ToDropLargeObjectsPtrOutputWithContext(ctx)
}

// DropLargeObjectsPtrInput is an input type that accepts DropLargeObjectsArgs, DropLargeObjectsPtr and DropLargeObjectsPtrOutput values.
// You can construct a concrete instance of `DropLargeObjectsPtrInput` via:
//
//	        DropLargeObjectsArgs{...}
//
//	or:
//
//	        nil
type DropLargeObjectsPtrInput interface {
	pulumi.Input

	ToDropLargeObjectsPtrOutput() DropLargeObjectsPtrOutput
	ToDropLargeObjectsPtrOutputWithContext(context.Context) DropLargeObjectsPtrOutput
}

type dropLargeObjectsPtrType DropLargeObjectsArgs

func DropLargeObjectsPtr(v *DropLargeObjectsArgs) DropLargeObjectsPtrInput {
	return (*dropLargeObjectsPtrType)(v)
}

func (*dropLargeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DropLargeObjects)(nil)).Elem()
}

func (i *dropLargeObjectsPtrType) ToDropLargeObjectsPtrOutput() DropLargeObjectsPtrOutput {
	return i.ToDropLargeObjectsPtrOutputWithContext(context.Background())
}

func (i *dropLargeObjectsPtrType) ToDropLargeObjectsPtrOutputWithContext(ctx context.Context) DropLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DropLargeObjectsPtrOutput)
}

// Configuration to drop large object values.
type DropLargeObjectsOutput struct{ *pulumi.OutputState }

func (DropLargeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DropLargeObjects)(nil)).Elem()
}

func (o DropLargeObjectsOutput) ToDropLargeObjectsOutput() DropLargeObjectsOutput {
	return o
}

func (o DropLargeObjectsOutput) ToDropLargeObjectsOutputWithContext(ctx context.Context) DropLargeObjectsOutput {
	return o
}

func (o DropLargeObjectsOutput) ToDropLargeObjectsPtrOutput() DropLargeObjectsPtrOutput {
	return o.ToDropLargeObjectsPtrOutputWithContext(context.Background())
}

func (o DropLargeObjectsOutput) ToDropLargeObjectsPtrOutputWithContext(ctx context.Context) DropLargeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DropLargeObjects) *DropLargeObjects {
		return &v
	}).(DropLargeObjectsPtrOutput)
}

type DropLargeObjectsPtrOutput struct{ *pulumi.OutputState }

func (DropLargeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DropLargeObjects)(nil)).Elem()
}

func (o DropLargeObjectsPtrOutput) ToDropLargeObjectsPtrOutput() DropLargeObjectsPtrOutput {
	return o
}

func (o DropLargeObjectsPtrOutput) ToDropLargeObjectsPtrOutputWithContext(ctx context.Context) DropLargeObjectsPtrOutput {
	return o
}

func (o DropLargeObjectsPtrOutput) Elem() DropLargeObjectsOutput {
	return o.ApplyT(func(v *DropLargeObjects) DropLargeObjects {
		if v != nil {
			return *v
		}
		var ret DropLargeObjects
		return ret
	}).(DropLargeObjectsOutput)
}

// Configuration to drop large object values.
type DropLargeObjectsResponse struct {
}

// Configuration to drop large object values.
type DropLargeObjectsResponseOutput struct{ *pulumi.OutputState }

func (DropLargeObjectsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DropLargeObjectsResponse)(nil)).Elem()
}

func (o DropLargeObjectsResponseOutput) ToDropLargeObjectsResponseOutput() DropLargeObjectsResponseOutput {
	return o
}

func (o DropLargeObjectsResponseOutput) ToDropLargeObjectsResponseOutputWithContext(ctx context.Context) DropLargeObjectsResponseOutput {
	return o
}

// Represent a user-facing Error.
type ErrorResponse struct {
	// Additional information about the error.
	Details map[string]string `pulumi:"details"`
	// The time when the error occurred.
	ErrorTime string `pulumi:"errorTime"`
	// A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
	ErrorUuid string `pulumi:"errorUuid"`
	// A message containing more information about the error that occurred.
	Message string `pulumi:"message"`
	// A title that explains the reason for the error.
	Reason string `pulumi:"reason"`
}

// Represent a user-facing Error.
type ErrorResponseOutput struct{ *pulumi.OutputState }

func (ErrorResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseOutput) ToErrorResponseOutput() ErrorResponseOutput {
	return o
}

func (o ErrorResponseOutput) ToErrorResponseOutputWithContext(ctx context.Context) ErrorResponseOutput {
	return o
}

// Additional information about the error.
func (o ErrorResponseOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v ErrorResponse) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

// The time when the error occurred.
func (o ErrorResponseOutput) ErrorTime() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.ErrorTime }).(pulumi.StringOutput)
}

// A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
func (o ErrorResponseOutput) ErrorUuid() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.ErrorUuid }).(pulumi.StringOutput)
}

// A message containing more information about the error that occurred.
func (o ErrorResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Message }).(pulumi.StringOutput)
}

// A title that explains the reason for the error.
func (o ErrorResponseOutput) Reason() pulumi.StringOutput {
	return o.ApplyT(func(v ErrorResponse) string { return v.Reason }).(pulumi.StringOutput)
}

type ErrorResponseArrayOutput struct{ *pulumi.OutputState }

func (ErrorResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ErrorResponse)(nil)).Elem()
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutput() ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) ToErrorResponseArrayOutputWithContext(ctx context.Context) ErrorResponseArrayOutput {
	return o
}

func (o ErrorResponseArrayOutput) Index(i pulumi.IntInput) ErrorResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ErrorResponse {
		return vs[0].([]ErrorResponse)[vs[1].(int)]
	}).(ErrorResponseOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivity struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// Input only. SSH password.
	Password *string `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port *int `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// ForwardSshTunnelConnectivityInput is an input type that accepts ForwardSshTunnelConnectivityArgs and ForwardSshTunnelConnectivityOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityInput` via:
//
//	ForwardSshTunnelConnectivityArgs{...}
type ForwardSshTunnelConnectivityInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput
	ToForwardSshTunnelConnectivityOutputWithContext(context.Context) ForwardSshTunnelConnectivityOutput
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityArgs struct {
	// Hostname for the SSH tunnel.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Input only. SSH password.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username pulumi.StringInput `pulumi:"username"`
}

func (ForwardSshTunnelConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput {
	return i.ToForwardSshTunnelConnectivityOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityOutput)
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return i.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (i ForwardSshTunnelConnectivityArgs) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityOutput).ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx)
}

// ForwardSshTunnelConnectivityPtrInput is an input type that accepts ForwardSshTunnelConnectivityArgs, ForwardSshTunnelConnectivityPtr and ForwardSshTunnelConnectivityPtrOutput values.
// You can construct a concrete instance of `ForwardSshTunnelConnectivityPtrInput` via:
//
//	        ForwardSshTunnelConnectivityArgs{...}
//
//	or:
//
//	        nil
type ForwardSshTunnelConnectivityPtrInput interface {
	pulumi.Input

	ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput
	ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Context) ForwardSshTunnelConnectivityPtrOutput
}

type forwardSshTunnelConnectivityPtrType ForwardSshTunnelConnectivityArgs

func ForwardSshTunnelConnectivityPtr(v *ForwardSshTunnelConnectivityArgs) ForwardSshTunnelConnectivityPtrInput {
	return (*forwardSshTunnelConnectivityPtrType)(v)
}

func (*forwardSshTunnelConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (i *forwardSshTunnelConnectivityPtrType) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return i.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (i *forwardSshTunnelConnectivityPtrType) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardSshTunnelConnectivityPtrOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityOutput() ForwardSshTunnelConnectivityOutput {
	return o
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityOutput {
	return o
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return o.ToForwardSshTunnelConnectivityPtrOutputWithContext(context.Background())
}

func (o ForwardSshTunnelConnectivityOutput) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ForwardSshTunnelConnectivity) *ForwardSshTunnelConnectivity {
		return &v
	}).(ForwardSshTunnelConnectivityPtrOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivity) string { return v.Username }).(pulumi.StringOutput)
}

type ForwardSshTunnelConnectivityPtrOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardSshTunnelConnectivity)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityPtrOutput) ToForwardSshTunnelConnectivityPtrOutput() ForwardSshTunnelConnectivityPtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityPtrOutput) ToForwardSshTunnelConnectivityPtrOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityPtrOutput {
	return o
}

func (o ForwardSshTunnelConnectivityPtrOutput) Elem() ForwardSshTunnelConnectivityOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) ForwardSshTunnelConnectivity {
		if v != nil {
			return *v
		}
		var ret ForwardSshTunnelConnectivity
		return ret
	}).(ForwardSshTunnelConnectivityOutput)
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityPtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardSshTunnelConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityResponse struct {
	// Hostname for the SSH tunnel.
	Hostname string `pulumi:"hostname"`
	// Input only. SSH password.
	Password string `pulumi:"password"`
	// Port for the SSH tunnel, default value is 22.
	Port int `pulumi:"port"`
	// Input only. SSH private key.
	PrivateKey string `pulumi:"privateKey"`
	// Username for the SSH tunnel.
	Username string `pulumi:"username"`
}

// Forward SSH Tunnel connectivity.
type ForwardSshTunnelConnectivityResponseOutput struct{ *pulumi.OutputState }

func (ForwardSshTunnelConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ForwardSshTunnelConnectivityResponse)(nil)).Elem()
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponseOutput() ForwardSshTunnelConnectivityResponseOutput {
	return o
}

func (o ForwardSshTunnelConnectivityResponseOutput) ToForwardSshTunnelConnectivityResponseOutputWithContext(ctx context.Context) ForwardSshTunnelConnectivityResponseOutput {
	return o
}

// Hostname for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. SSH password.
func (o ForwardSshTunnelConnectivityResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the SSH tunnel, default value is 22.
func (o ForwardSshTunnelConnectivityResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Input only. SSH private key.
func (o ForwardSshTunnelConnectivityResponseOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Username for the SSH tunnel.
func (o ForwardSshTunnelConnectivityResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v ForwardSshTunnelConnectivityResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Google Cloud Storage destination configuration
type GcsDestinationConfig struct {
	// AVRO file format configuration.
	AvroFileFormat *AvroFileFormat `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created. Values within the range of 15-60 seconds are allowed.
	FileRotationInterval *string `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb *int `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	JsonFileFormat *JsonFileFormat `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path *string `pulumi:"path"`
}

// GcsDestinationConfigInput is an input type that accepts GcsDestinationConfigArgs and GcsDestinationConfigOutput values.
// You can construct a concrete instance of `GcsDestinationConfigInput` via:
//
//	GcsDestinationConfigArgs{...}
type GcsDestinationConfigInput interface {
	pulumi.Input

	ToGcsDestinationConfigOutput() GcsDestinationConfigOutput
	ToGcsDestinationConfigOutputWithContext(context.Context) GcsDestinationConfigOutput
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigArgs struct {
	// AVRO file format configuration.
	AvroFileFormat AvroFileFormatPtrInput `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created. Values within the range of 15-60 seconds are allowed.
	FileRotationInterval pulumi.StringPtrInput `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb pulumi.IntPtrInput `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	JsonFileFormat JsonFileFormatPtrInput `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (GcsDestinationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsDestinationConfig)(nil)).Elem()
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigOutput() GcsDestinationConfigOutput {
	return i.ToGcsDestinationConfigOutputWithContext(context.Background())
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigOutputWithContext(ctx context.Context) GcsDestinationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigOutput)
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return i.ToGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (i GcsDestinationConfigArgs) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigOutput).ToGcsDestinationConfigPtrOutputWithContext(ctx)
}

// GcsDestinationConfigPtrInput is an input type that accepts GcsDestinationConfigArgs, GcsDestinationConfigPtr and GcsDestinationConfigPtrOutput values.
// You can construct a concrete instance of `GcsDestinationConfigPtrInput` via:
//
//	        GcsDestinationConfigArgs{...}
//
//	or:
//
//	        nil
type GcsDestinationConfigPtrInput interface {
	pulumi.Input

	ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput
	ToGcsDestinationConfigPtrOutputWithContext(context.Context) GcsDestinationConfigPtrOutput
}

type gcsDestinationConfigPtrType GcsDestinationConfigArgs

func GcsDestinationConfigPtr(v *GcsDestinationConfigArgs) GcsDestinationConfigPtrInput {
	return (*gcsDestinationConfigPtrType)(v)
}

func (*gcsDestinationConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsDestinationConfig)(nil)).Elem()
}

func (i *gcsDestinationConfigPtrType) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return i.ToGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (i *gcsDestinationConfigPtrType) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsDestinationConfigPtrOutput)
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigOutput struct{ *pulumi.OutputState }

func (GcsDestinationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsDestinationConfig)(nil)).Elem()
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigOutput() GcsDestinationConfigOutput {
	return o
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigOutputWithContext(ctx context.Context) GcsDestinationConfigOutput {
	return o
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return o.ToGcsDestinationConfigPtrOutputWithContext(context.Background())
}

func (o GcsDestinationConfigOutput) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsDestinationConfig) *GcsDestinationConfig {
		return &v
	}).(GcsDestinationConfigPtrOutput)
}

// AVRO file format configuration.
func (o GcsDestinationConfigOutput) AvroFileFormat() AvroFileFormatPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *AvroFileFormat { return v.AvroFileFormat }).(AvroFileFormatPtrOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created. Values within the range of 15-60 seconds are allowed.
func (o GcsDestinationConfigOutput) FileRotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *string { return v.FileRotationInterval }).(pulumi.StringPtrOutput)
}

// The maximum file size to be saved in the bucket.
func (o GcsDestinationConfigOutput) FileRotationMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *int { return v.FileRotationMb }).(pulumi.IntPtrOutput)
}

// JSON file format configuration.
func (o GcsDestinationConfigOutput) JsonFileFormat() JsonFileFormatPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *JsonFileFormat { return v.JsonFileFormat }).(JsonFileFormatPtrOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o GcsDestinationConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsDestinationConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type GcsDestinationConfigPtrOutput struct{ *pulumi.OutputState }

func (GcsDestinationConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsDestinationConfig)(nil)).Elem()
}

func (o GcsDestinationConfigPtrOutput) ToGcsDestinationConfigPtrOutput() GcsDestinationConfigPtrOutput {
	return o
}

func (o GcsDestinationConfigPtrOutput) ToGcsDestinationConfigPtrOutputWithContext(ctx context.Context) GcsDestinationConfigPtrOutput {
	return o
}

func (o GcsDestinationConfigPtrOutput) Elem() GcsDestinationConfigOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) GcsDestinationConfig {
		if v != nil {
			return *v
		}
		var ret GcsDestinationConfig
		return ret
	}).(GcsDestinationConfigOutput)
}

// AVRO file format configuration.
func (o GcsDestinationConfigPtrOutput) AvroFileFormat() AvroFileFormatPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *AvroFileFormat {
		if v == nil {
			return nil
		}
		return v.AvroFileFormat
	}).(AvroFileFormatPtrOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created. Values within the range of 15-60 seconds are allowed.
func (o GcsDestinationConfigPtrOutput) FileRotationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.FileRotationInterval
	}).(pulumi.StringPtrOutput)
}

// The maximum file size to be saved in the bucket.
func (o GcsDestinationConfigPtrOutput) FileRotationMb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *int {
		if v == nil {
			return nil
		}
		return v.FileRotationMb
	}).(pulumi.IntPtrOutput)
}

// JSON file format configuration.
func (o GcsDestinationConfigPtrOutput) JsonFileFormat() JsonFileFormatPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *JsonFileFormat {
		if v == nil {
			return nil
		}
		return v.JsonFileFormat
	}).(JsonFileFormatPtrOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o GcsDestinationConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsDestinationConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigResponse struct {
	// AVRO file format configuration.
	AvroFileFormat AvroFileFormatResponse `pulumi:"avroFileFormat"`
	// The maximum duration for which new events are added before a file is closed and a new file is created. Values within the range of 15-60 seconds are allowed.
	FileRotationInterval string `pulumi:"fileRotationInterval"`
	// The maximum file size to be saved in the bucket.
	FileRotationMb int `pulumi:"fileRotationMb"`
	// JSON file format configuration.
	JsonFileFormat JsonFileFormatResponse `pulumi:"jsonFileFormat"`
	// Path inside the Cloud Storage bucket to write data to.
	Path string `pulumi:"path"`
}

// Google Cloud Storage destination configuration
type GcsDestinationConfigResponseOutput struct{ *pulumi.OutputState }

func (GcsDestinationConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsDestinationConfigResponse)(nil)).Elem()
}

func (o GcsDestinationConfigResponseOutput) ToGcsDestinationConfigResponseOutput() GcsDestinationConfigResponseOutput {
	return o
}

func (o GcsDestinationConfigResponseOutput) ToGcsDestinationConfigResponseOutputWithContext(ctx context.Context) GcsDestinationConfigResponseOutput {
	return o
}

// AVRO file format configuration.
func (o GcsDestinationConfigResponseOutput) AvroFileFormat() AvroFileFormatResponseOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) AvroFileFormatResponse { return v.AvroFileFormat }).(AvroFileFormatResponseOutput)
}

// The maximum duration for which new events are added before a file is closed and a new file is created. Values within the range of 15-60 seconds are allowed.
func (o GcsDestinationConfigResponseOutput) FileRotationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) string { return v.FileRotationInterval }).(pulumi.StringOutput)
}

// The maximum file size to be saved in the bucket.
func (o GcsDestinationConfigResponseOutput) FileRotationMb() pulumi.IntOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) int { return v.FileRotationMb }).(pulumi.IntOutput)
}

// JSON file format configuration.
func (o GcsDestinationConfigResponseOutput) JsonFileFormat() JsonFileFormatResponseOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) JsonFileFormatResponse { return v.JsonFileFormat }).(JsonFileFormatResponseOutput)
}

// Path inside the Cloud Storage bucket to write data to.
func (o GcsDestinationConfigResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GcsDestinationConfigResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Cloud Storage bucket profile.
type GcsProfile struct {
	// The Cloud Storage bucket name.
	Bucket string `pulumi:"bucket"`
	// The root path inside the Cloud Storage bucket.
	RootPath *string `pulumi:"rootPath"`
}

// GcsProfileInput is an input type that accepts GcsProfileArgs and GcsProfileOutput values.
// You can construct a concrete instance of `GcsProfileInput` via:
//
//	GcsProfileArgs{...}
type GcsProfileInput interface {
	pulumi.Input

	ToGcsProfileOutput() GcsProfileOutput
	ToGcsProfileOutputWithContext(context.Context) GcsProfileOutput
}

// Cloud Storage bucket profile.
type GcsProfileArgs struct {
	// The Cloud Storage bucket name.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The root path inside the Cloud Storage bucket.
	RootPath pulumi.StringPtrInput `pulumi:"rootPath"`
}

func (GcsProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsProfile)(nil)).Elem()
}

func (i GcsProfileArgs) ToGcsProfileOutput() GcsProfileOutput {
	return i.ToGcsProfileOutputWithContext(context.Background())
}

func (i GcsProfileArgs) ToGcsProfileOutputWithContext(ctx context.Context) GcsProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfileOutput)
}

func (i GcsProfileArgs) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return i.ToGcsProfilePtrOutputWithContext(context.Background())
}

func (i GcsProfileArgs) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfileOutput).ToGcsProfilePtrOutputWithContext(ctx)
}

// GcsProfilePtrInput is an input type that accepts GcsProfileArgs, GcsProfilePtr and GcsProfilePtrOutput values.
// You can construct a concrete instance of `GcsProfilePtrInput` via:
//
//	        GcsProfileArgs{...}
//
//	or:
//
//	        nil
type GcsProfilePtrInput interface {
	pulumi.Input

	ToGcsProfilePtrOutput() GcsProfilePtrOutput
	ToGcsProfilePtrOutputWithContext(context.Context) GcsProfilePtrOutput
}

type gcsProfilePtrType GcsProfileArgs

func GcsProfilePtr(v *GcsProfileArgs) GcsProfilePtrInput {
	return (*gcsProfilePtrType)(v)
}

func (*gcsProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsProfile)(nil)).Elem()
}

func (i *gcsProfilePtrType) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return i.ToGcsProfilePtrOutputWithContext(context.Background())
}

func (i *gcsProfilePtrType) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GcsProfilePtrOutput)
}

// Cloud Storage bucket profile.
type GcsProfileOutput struct{ *pulumi.OutputState }

func (GcsProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsProfile)(nil)).Elem()
}

func (o GcsProfileOutput) ToGcsProfileOutput() GcsProfileOutput {
	return o
}

func (o GcsProfileOutput) ToGcsProfileOutputWithContext(ctx context.Context) GcsProfileOutput {
	return o
}

func (o GcsProfileOutput) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return o.ToGcsProfilePtrOutputWithContext(context.Background())
}

func (o GcsProfileOutput) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GcsProfile) *GcsProfile {
		return &v
	}).(GcsProfilePtrOutput)
}

// The Cloud Storage bucket name.
func (o GcsProfileOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GcsProfile) string { return v.Bucket }).(pulumi.StringOutput)
}

// The root path inside the Cloud Storage bucket.
func (o GcsProfileOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GcsProfile) *string { return v.RootPath }).(pulumi.StringPtrOutput)
}

type GcsProfilePtrOutput struct{ *pulumi.OutputState }

func (GcsProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GcsProfile)(nil)).Elem()
}

func (o GcsProfilePtrOutput) ToGcsProfilePtrOutput() GcsProfilePtrOutput {
	return o
}

func (o GcsProfilePtrOutput) ToGcsProfilePtrOutputWithContext(ctx context.Context) GcsProfilePtrOutput {
	return o
}

func (o GcsProfilePtrOutput) Elem() GcsProfileOutput {
	return o.ApplyT(func(v *GcsProfile) GcsProfile {
		if v != nil {
			return *v
		}
		var ret GcsProfile
		return ret
	}).(GcsProfileOutput)
}

// The Cloud Storage bucket name.
func (o GcsProfilePtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Bucket
	}).(pulumi.StringPtrOutput)
}

// The root path inside the Cloud Storage bucket.
func (o GcsProfilePtrOutput) RootPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GcsProfile) *string {
		if v == nil {
			return nil
		}
		return v.RootPath
	}).(pulumi.StringPtrOutput)
}

// Cloud Storage bucket profile.
type GcsProfileResponse struct {
	// The Cloud Storage bucket name.
	Bucket string `pulumi:"bucket"`
	// The root path inside the Cloud Storage bucket.
	RootPath string `pulumi:"rootPath"`
}

// Cloud Storage bucket profile.
type GcsProfileResponseOutput struct{ *pulumi.OutputState }

func (GcsProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GcsProfileResponse)(nil)).Elem()
}

func (o GcsProfileResponseOutput) ToGcsProfileResponseOutput() GcsProfileResponseOutput {
	return o
}

func (o GcsProfileResponseOutput) ToGcsProfileResponseOutputWithContext(ctx context.Context) GcsProfileResponseOutput {
	return o
}

// The Cloud Storage bucket name.
func (o GcsProfileResponseOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GcsProfileResponse) string { return v.Bucket }).(pulumi.StringOutput)
}

// The root path inside the Cloud Storage bucket.
func (o GcsProfileResponseOutput) RootPath() pulumi.StringOutput {
	return o.ApplyT(func(v GcsProfileResponse) string { return v.RootPath }).(pulumi.StringOutput)
}

// JSON file format configuration.
type JsonFileFormat struct {
	// Compression of the loaded JSON file.
	Compression *JsonFileFormatCompression `pulumi:"compression"`
	// The schema file format along JSON data files.
	SchemaFileFormat *JsonFileFormatSchemaFileFormat `pulumi:"schemaFileFormat"`
}

// JsonFileFormatInput is an input type that accepts JsonFileFormatArgs and JsonFileFormatOutput values.
// You can construct a concrete instance of `JsonFileFormatInput` via:
//
//	JsonFileFormatArgs{...}
type JsonFileFormatInput interface {
	pulumi.Input

	ToJsonFileFormatOutput() JsonFileFormatOutput
	ToJsonFileFormatOutputWithContext(context.Context) JsonFileFormatOutput
}

// JSON file format configuration.
type JsonFileFormatArgs struct {
	// Compression of the loaded JSON file.
	Compression JsonFileFormatCompressionPtrInput `pulumi:"compression"`
	// The schema file format along JSON data files.
	SchemaFileFormat JsonFileFormatSchemaFileFormatPtrInput `pulumi:"schemaFileFormat"`
}

func (JsonFileFormatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormat)(nil)).Elem()
}

func (i JsonFileFormatArgs) ToJsonFileFormatOutput() JsonFileFormatOutput {
	return i.ToJsonFileFormatOutputWithContext(context.Background())
}

func (i JsonFileFormatArgs) ToJsonFileFormatOutputWithContext(ctx context.Context) JsonFileFormatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatOutput)
}

func (i JsonFileFormatArgs) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return i.ToJsonFileFormatPtrOutputWithContext(context.Background())
}

func (i JsonFileFormatArgs) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatOutput).ToJsonFileFormatPtrOutputWithContext(ctx)
}

// JsonFileFormatPtrInput is an input type that accepts JsonFileFormatArgs, JsonFileFormatPtr and JsonFileFormatPtrOutput values.
// You can construct a concrete instance of `JsonFileFormatPtrInput` via:
//
//	        JsonFileFormatArgs{...}
//
//	or:
//
//	        nil
type JsonFileFormatPtrInput interface {
	pulumi.Input

	ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput
	ToJsonFileFormatPtrOutputWithContext(context.Context) JsonFileFormatPtrOutput
}

type jsonFileFormatPtrType JsonFileFormatArgs

func JsonFileFormatPtr(v *JsonFileFormatArgs) JsonFileFormatPtrInput {
	return (*jsonFileFormatPtrType)(v)
}

func (*jsonFileFormatPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormat)(nil)).Elem()
}

func (i *jsonFileFormatPtrType) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return i.ToJsonFileFormatPtrOutputWithContext(context.Background())
}

func (i *jsonFileFormatPtrType) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JsonFileFormatPtrOutput)
}

// JSON file format configuration.
type JsonFileFormatOutput struct{ *pulumi.OutputState }

func (JsonFileFormatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormat)(nil)).Elem()
}

func (o JsonFileFormatOutput) ToJsonFileFormatOutput() JsonFileFormatOutput {
	return o
}

func (o JsonFileFormatOutput) ToJsonFileFormatOutputWithContext(ctx context.Context) JsonFileFormatOutput {
	return o
}

func (o JsonFileFormatOutput) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return o.ToJsonFileFormatPtrOutputWithContext(context.Background())
}

func (o JsonFileFormatOutput) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v JsonFileFormat) *JsonFileFormat {
		return &v
	}).(JsonFileFormatPtrOutput)
}

// Compression of the loaded JSON file.
func (o JsonFileFormatOutput) Compression() JsonFileFormatCompressionPtrOutput {
	return o.ApplyT(func(v JsonFileFormat) *JsonFileFormatCompression { return v.Compression }).(JsonFileFormatCompressionPtrOutput)
}

// The schema file format along JSON data files.
func (o JsonFileFormatOutput) SchemaFileFormat() JsonFileFormatSchemaFileFormatPtrOutput {
	return o.ApplyT(func(v JsonFileFormat) *JsonFileFormatSchemaFileFormat { return v.SchemaFileFormat }).(JsonFileFormatSchemaFileFormatPtrOutput)
}

type JsonFileFormatPtrOutput struct{ *pulumi.OutputState }

func (JsonFileFormatPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JsonFileFormat)(nil)).Elem()
}

func (o JsonFileFormatPtrOutput) ToJsonFileFormatPtrOutput() JsonFileFormatPtrOutput {
	return o
}

func (o JsonFileFormatPtrOutput) ToJsonFileFormatPtrOutputWithContext(ctx context.Context) JsonFileFormatPtrOutput {
	return o
}

func (o JsonFileFormatPtrOutput) Elem() JsonFileFormatOutput {
	return o.ApplyT(func(v *JsonFileFormat) JsonFileFormat {
		if v != nil {
			return *v
		}
		var ret JsonFileFormat
		return ret
	}).(JsonFileFormatOutput)
}

// Compression of the loaded JSON file.
func (o JsonFileFormatPtrOutput) Compression() JsonFileFormatCompressionPtrOutput {
	return o.ApplyT(func(v *JsonFileFormat) *JsonFileFormatCompression {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(JsonFileFormatCompressionPtrOutput)
}

// The schema file format along JSON data files.
func (o JsonFileFormatPtrOutput) SchemaFileFormat() JsonFileFormatSchemaFileFormatPtrOutput {
	return o.ApplyT(func(v *JsonFileFormat) *JsonFileFormatSchemaFileFormat {
		if v == nil {
			return nil
		}
		return v.SchemaFileFormat
	}).(JsonFileFormatSchemaFileFormatPtrOutput)
}

// JSON file format configuration.
type JsonFileFormatResponse struct {
	// Compression of the loaded JSON file.
	Compression string `pulumi:"compression"`
	// The schema file format along JSON data files.
	SchemaFileFormat string `pulumi:"schemaFileFormat"`
}

// JSON file format configuration.
type JsonFileFormatResponseOutput struct{ *pulumi.OutputState }

func (JsonFileFormatResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonFileFormatResponse)(nil)).Elem()
}

func (o JsonFileFormatResponseOutput) ToJsonFileFormatResponseOutput() JsonFileFormatResponseOutput {
	return o
}

func (o JsonFileFormatResponseOutput) ToJsonFileFormatResponseOutputWithContext(ctx context.Context) JsonFileFormatResponseOutput {
	return o
}

// Compression of the loaded JSON file.
func (o JsonFileFormatResponseOutput) Compression() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFileFormatResponse) string { return v.Compression }).(pulumi.StringOutput)
}

// The schema file format along JSON data files.
func (o JsonFileFormatResponseOutput) SchemaFileFormat() pulumi.StringOutput {
	return o.ApplyT(func(v JsonFileFormatResponse) string { return v.SchemaFileFormat }).(pulumi.StringOutput)
}

// MySQL Column.
type MysqlColumn struct {
	// Column collation.
	Collation *string `pulumi:"collation"`
	// Column name.
	Column *string `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType *string `pulumi:"dataType"`
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
}

// MysqlColumnInput is an input type that accepts MysqlColumnArgs and MysqlColumnOutput values.
// You can construct a concrete instance of `MysqlColumnInput` via:
//
//	MysqlColumnArgs{...}
type MysqlColumnInput interface {
	pulumi.Input

	ToMysqlColumnOutput() MysqlColumnOutput
	ToMysqlColumnOutputWithContext(context.Context) MysqlColumnOutput
}

// MySQL Column.
type MysqlColumnArgs struct {
	// Column collation.
	Collation pulumi.StringPtrInput `pulumi:"collation"`
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
}

func (MysqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlColumn)(nil)).Elem()
}

func (i MysqlColumnArgs) ToMysqlColumnOutput() MysqlColumnOutput {
	return i.ToMysqlColumnOutputWithContext(context.Background())
}

func (i MysqlColumnArgs) ToMysqlColumnOutputWithContext(ctx context.Context) MysqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlColumnOutput)
}

// MysqlColumnArrayInput is an input type that accepts MysqlColumnArray and MysqlColumnArrayOutput values.
// You can construct a concrete instance of `MysqlColumnArrayInput` via:
//
//	MysqlColumnArray{ MysqlColumnArgs{...} }
type MysqlColumnArrayInput interface {
	pulumi.Input

	ToMysqlColumnArrayOutput() MysqlColumnArrayOutput
	ToMysqlColumnArrayOutputWithContext(context.Context) MysqlColumnArrayOutput
}

type MysqlColumnArray []MysqlColumnInput

func (MysqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlColumn)(nil)).Elem()
}

func (i MysqlColumnArray) ToMysqlColumnArrayOutput() MysqlColumnArrayOutput {
	return i.ToMysqlColumnArrayOutputWithContext(context.Background())
}

func (i MysqlColumnArray) ToMysqlColumnArrayOutputWithContext(ctx context.Context) MysqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlColumnArrayOutput)
}

// MySQL Column.
type MysqlColumnOutput struct{ *pulumi.OutputState }

func (MysqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlColumn)(nil)).Elem()
}

func (o MysqlColumnOutput) ToMysqlColumnOutput() MysqlColumnOutput {
	return o
}

func (o MysqlColumnOutput) ToMysqlColumnOutputWithContext(ctx context.Context) MysqlColumnOutput {
	return o
}

// Column collation.
func (o MysqlColumnOutput) Collation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *string { return v.Collation }).(pulumi.StringPtrOutput)
}

// Column name.
func (o MysqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
func (o MysqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Column length.
func (o MysqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o MysqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o MysqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *int { return v.OrdinalPosition }).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o MysqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v MysqlColumn) *bool { return v.PrimaryKey }).(pulumi.BoolPtrOutput)
}

type MysqlColumnArrayOutput struct{ *pulumi.OutputState }

func (MysqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlColumn)(nil)).Elem()
}

func (o MysqlColumnArrayOutput) ToMysqlColumnArrayOutput() MysqlColumnArrayOutput {
	return o
}

func (o MysqlColumnArrayOutput) ToMysqlColumnArrayOutputWithContext(ctx context.Context) MysqlColumnArrayOutput {
	return o
}

func (o MysqlColumnArrayOutput) Index(i pulumi.IntInput) MysqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlColumn {
		return vs[0].([]MysqlColumn)[vs[1].(int)]
	}).(MysqlColumnOutput)
}

// MySQL Column.
type MysqlColumnResponse struct {
	// Column collation.
	Collation string `pulumi:"collation"`
	// Column name.
	Column string `pulumi:"column"`
	// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
	DataType string `pulumi:"dataType"`
	// Column length.
	Length int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition int `pulumi:"ordinalPosition"`
	// Whether or not the column represents a primary key.
	PrimaryKey bool `pulumi:"primaryKey"`
}

// MySQL Column.
type MysqlColumnResponseOutput struct{ *pulumi.OutputState }

func (MysqlColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlColumnResponse)(nil)).Elem()
}

func (o MysqlColumnResponseOutput) ToMysqlColumnResponseOutput() MysqlColumnResponseOutput {
	return o
}

func (o MysqlColumnResponseOutput) ToMysqlColumnResponseOutputWithContext(ctx context.Context) MysqlColumnResponseOutput {
	return o
}

// Column collation.
func (o MysqlColumnResponseOutput) Collation() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlColumnResponse) string { return v.Collation }).(pulumi.StringOutput)
}

// Column name.
func (o MysqlColumnResponseOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlColumnResponse) string { return v.Column }).(pulumi.StringOutput)
}

// The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html
func (o MysqlColumnResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlColumnResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// Column length.
func (o MysqlColumnResponseOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlColumnResponse) int { return v.Length }).(pulumi.IntOutput)
}

// Whether or not the column can accept a null value.
func (o MysqlColumnResponseOutput) Nullable() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlColumnResponse) bool { return v.Nullable }).(pulumi.BoolOutput)
}

// The ordinal position of the column in the table.
func (o MysqlColumnResponseOutput) OrdinalPosition() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlColumnResponse) int { return v.OrdinalPosition }).(pulumi.IntOutput)
}

// Whether or not the column represents a primary key.
func (o MysqlColumnResponseOutput) PrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlColumnResponse) bool { return v.PrimaryKey }).(pulumi.BoolOutput)
}

type MysqlColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (MysqlColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlColumnResponse)(nil)).Elem()
}

func (o MysqlColumnResponseArrayOutput) ToMysqlColumnResponseArrayOutput() MysqlColumnResponseArrayOutput {
	return o
}

func (o MysqlColumnResponseArrayOutput) ToMysqlColumnResponseArrayOutputWithContext(ctx context.Context) MysqlColumnResponseArrayOutput {
	return o
}

func (o MysqlColumnResponseArrayOutput) Index(i pulumi.IntInput) MysqlColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlColumnResponse {
		return vs[0].([]MysqlColumnResponse)[vs[1].(int)]
	}).(MysqlColumnResponseOutput)
}

// MySQL database.
type MysqlDatabase struct {
	// Database name.
	Database *string `pulumi:"database"`
	// Tables in the database.
	MysqlTables []MysqlTable `pulumi:"mysqlTables"`
}

// MysqlDatabaseInput is an input type that accepts MysqlDatabaseArgs and MysqlDatabaseOutput values.
// You can construct a concrete instance of `MysqlDatabaseInput` via:
//
//	MysqlDatabaseArgs{...}
type MysqlDatabaseInput interface {
	pulumi.Input

	ToMysqlDatabaseOutput() MysqlDatabaseOutput
	ToMysqlDatabaseOutputWithContext(context.Context) MysqlDatabaseOutput
}

// MySQL database.
type MysqlDatabaseArgs struct {
	// Database name.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Tables in the database.
	MysqlTables MysqlTableArrayInput `pulumi:"mysqlTables"`
}

func (MysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabase)(nil)).Elem()
}

func (i MysqlDatabaseArgs) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return i.ToMysqlDatabaseOutputWithContext(context.Background())
}

func (i MysqlDatabaseArgs) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseOutput)
}

// MysqlDatabaseArrayInput is an input type that accepts MysqlDatabaseArray and MysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `MysqlDatabaseArrayInput` via:
//
//	MysqlDatabaseArray{ MysqlDatabaseArgs{...} }
type MysqlDatabaseArrayInput interface {
	pulumi.Input

	ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput
	ToMysqlDatabaseArrayOutputWithContext(context.Context) MysqlDatabaseArrayOutput
}

type MysqlDatabaseArray []MysqlDatabaseInput

func (MysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDatabase)(nil)).Elem()
}

func (i MysqlDatabaseArray) ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput {
	return i.ToMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i MysqlDatabaseArray) ToMysqlDatabaseArrayOutputWithContext(ctx context.Context) MysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseArrayOutput)
}

// MySQL database.
type MysqlDatabaseOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return o
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return o
}

// Database name.
func (o MysqlDatabaseOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlDatabase) *string { return v.Database }).(pulumi.StringPtrOutput)
}

// Tables in the database.
func (o MysqlDatabaseOutput) MysqlTables() MysqlTableArrayOutput {
	return o.ApplyT(func(v MysqlDatabase) []MysqlTable { return v.MysqlTables }).(MysqlTableArrayOutput)
}

type MysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseArrayOutput) ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput {
	return o
}

func (o MysqlDatabaseArrayOutput) ToMysqlDatabaseArrayOutputWithContext(ctx context.Context) MysqlDatabaseArrayOutput {
	return o
}

func (o MysqlDatabaseArrayOutput) Index(i pulumi.IntInput) MysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlDatabase {
		return vs[0].([]MysqlDatabase)[vs[1].(int)]
	}).(MysqlDatabaseOutput)
}

// MySQL database.
type MysqlDatabaseResponse struct {
	// Database name.
	Database string `pulumi:"database"`
	// Tables in the database.
	MysqlTables []MysqlTableResponse `pulumi:"mysqlTables"`
}

// MySQL database.
type MysqlDatabaseResponseOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlDatabaseResponse)(nil)).Elem()
}

func (o MysqlDatabaseResponseOutput) ToMysqlDatabaseResponseOutput() MysqlDatabaseResponseOutput {
	return o
}

func (o MysqlDatabaseResponseOutput) ToMysqlDatabaseResponseOutputWithContext(ctx context.Context) MysqlDatabaseResponseOutput {
	return o
}

// Database name.
func (o MysqlDatabaseResponseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlDatabaseResponse) string { return v.Database }).(pulumi.StringOutput)
}

// Tables in the database.
func (o MysqlDatabaseResponseOutput) MysqlTables() MysqlTableResponseArrayOutput {
	return o.ApplyT(func(v MysqlDatabaseResponse) []MysqlTableResponse { return v.MysqlTables }).(MysqlTableResponseArrayOutput)
}

type MysqlDatabaseResponseArrayOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlDatabaseResponse)(nil)).Elem()
}

func (o MysqlDatabaseResponseArrayOutput) ToMysqlDatabaseResponseArrayOutput() MysqlDatabaseResponseArrayOutput {
	return o
}

func (o MysqlDatabaseResponseArrayOutput) ToMysqlDatabaseResponseArrayOutputWithContext(ctx context.Context) MysqlDatabaseResponseArrayOutput {
	return o
}

func (o MysqlDatabaseResponseArrayOutput) Index(i pulumi.IntInput) MysqlDatabaseResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlDatabaseResponse {
		return vs[0].([]MysqlDatabaseResponse)[vs[1].(int)]
	}).(MysqlDatabaseResponseOutput)
}

// MySQL database profile.
type MysqlProfile struct {
	// Hostname for the MySQL connection.
	Hostname string `pulumi:"hostname"`
	// Input only. Password for the MySQL connection.
	Password string `pulumi:"password"`
	// Port for the MySQL connection, default value is 3306.
	Port *int `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	SslConfig *MysqlSslConfig `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username string `pulumi:"username"`
}

// MysqlProfileInput is an input type that accepts MysqlProfileArgs and MysqlProfileOutput values.
// You can construct a concrete instance of `MysqlProfileInput` via:
//
//	MysqlProfileArgs{...}
type MysqlProfileInput interface {
	pulumi.Input

	ToMysqlProfileOutput() MysqlProfileOutput
	ToMysqlProfileOutputWithContext(context.Context) MysqlProfileOutput
}

// MySQL database profile.
type MysqlProfileArgs struct {
	// Hostname for the MySQL connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Input only. Password for the MySQL connection.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the MySQL connection, default value is 3306.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	SslConfig MysqlSslConfigPtrInput `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (MysqlProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlProfile)(nil)).Elem()
}

func (i MysqlProfileArgs) ToMysqlProfileOutput() MysqlProfileOutput {
	return i.ToMysqlProfileOutputWithContext(context.Background())
}

func (i MysqlProfileArgs) ToMysqlProfileOutputWithContext(ctx context.Context) MysqlProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfileOutput)
}

func (i MysqlProfileArgs) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return i.ToMysqlProfilePtrOutputWithContext(context.Background())
}

func (i MysqlProfileArgs) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfileOutput).ToMysqlProfilePtrOutputWithContext(ctx)
}

// MysqlProfilePtrInput is an input type that accepts MysqlProfileArgs, MysqlProfilePtr and MysqlProfilePtrOutput values.
// You can construct a concrete instance of `MysqlProfilePtrInput` via:
//
//	        MysqlProfileArgs{...}
//
//	or:
//
//	        nil
type MysqlProfilePtrInput interface {
	pulumi.Input

	ToMysqlProfilePtrOutput() MysqlProfilePtrOutput
	ToMysqlProfilePtrOutputWithContext(context.Context) MysqlProfilePtrOutput
}

type mysqlProfilePtrType MysqlProfileArgs

func MysqlProfilePtr(v *MysqlProfileArgs) MysqlProfilePtrInput {
	return (*mysqlProfilePtrType)(v)
}

func (*mysqlProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProfile)(nil)).Elem()
}

func (i *mysqlProfilePtrType) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return i.ToMysqlProfilePtrOutputWithContext(context.Background())
}

func (i *mysqlProfilePtrType) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlProfilePtrOutput)
}

// MySQL database profile.
type MysqlProfileOutput struct{ *pulumi.OutputState }

func (MysqlProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlProfile)(nil)).Elem()
}

func (o MysqlProfileOutput) ToMysqlProfileOutput() MysqlProfileOutput {
	return o
}

func (o MysqlProfileOutput) ToMysqlProfileOutputWithContext(ctx context.Context) MysqlProfileOutput {
	return o
}

func (o MysqlProfileOutput) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return o.ToMysqlProfilePtrOutputWithContext(context.Background())
}

func (o MysqlProfileOutput) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlProfile) *MysqlProfile {
		return &v
	}).(MysqlProfilePtrOutput)
}

// Hostname for the MySQL connection.
func (o MysqlProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. Password for the MySQL connection.
func (o MysqlProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the MySQL connection, default value is 3306.
func (o MysqlProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
func (o MysqlProfileOutput) SslConfig() MysqlSslConfigPtrOutput {
	return o.ApplyT(func(v MysqlProfile) *MysqlSslConfig { return v.SslConfig }).(MysqlSslConfigPtrOutput)
}

// Username for the MySQL connection.
func (o MysqlProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfile) string { return v.Username }).(pulumi.StringOutput)
}

type MysqlProfilePtrOutput struct{ *pulumi.OutputState }

func (MysqlProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlProfile)(nil)).Elem()
}

func (o MysqlProfilePtrOutput) ToMysqlProfilePtrOutput() MysqlProfilePtrOutput {
	return o
}

func (o MysqlProfilePtrOutput) ToMysqlProfilePtrOutputWithContext(ctx context.Context) MysqlProfilePtrOutput {
	return o
}

func (o MysqlProfilePtrOutput) Elem() MysqlProfileOutput {
	return o.ApplyT(func(v *MysqlProfile) MysqlProfile {
		if v != nil {
			return *v
		}
		var ret MysqlProfile
		return ret
	}).(MysqlProfileOutput)
}

// Hostname for the MySQL connection.
func (o MysqlProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Input only. Password for the MySQL connection.
func (o MysqlProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the MySQL connection, default value is 3306.
func (o MysqlProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// SSL configuration for the MySQL connection.
func (o MysqlProfilePtrOutput) SslConfig() MysqlSslConfigPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *MysqlSslConfig {
		if v == nil {
			return nil
		}
		return v.SslConfig
	}).(MysqlSslConfigPtrOutput)
}

// Username for the MySQL connection.
func (o MysqlProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// MySQL database profile.
type MysqlProfileResponse struct {
	// Hostname for the MySQL connection.
	Hostname string `pulumi:"hostname"`
	// Input only. Password for the MySQL connection.
	Password string `pulumi:"password"`
	// Port for the MySQL connection, default value is 3306.
	Port int `pulumi:"port"`
	// SSL configuration for the MySQL connection.
	SslConfig MysqlSslConfigResponse `pulumi:"sslConfig"`
	// Username for the MySQL connection.
	Username string `pulumi:"username"`
}

// MySQL database profile.
type MysqlProfileResponseOutput struct{ *pulumi.OutputState }

func (MysqlProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlProfileResponse)(nil)).Elem()
}

func (o MysqlProfileResponseOutput) ToMysqlProfileResponseOutput() MysqlProfileResponseOutput {
	return o
}

func (o MysqlProfileResponseOutput) ToMysqlProfileResponseOutputWithContext(ctx context.Context) MysqlProfileResponseOutput {
	return o
}

// Hostname for the MySQL connection.
func (o MysqlProfileResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfileResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Input only. Password for the MySQL connection.
func (o MysqlProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the MySQL connection, default value is 3306.
func (o MysqlProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// SSL configuration for the MySQL connection.
func (o MysqlProfileResponseOutput) SslConfig() MysqlSslConfigResponseOutput {
	return o.ApplyT(func(v MysqlProfileResponse) MysqlSslConfigResponse { return v.SslConfig }).(MysqlSslConfigResponseOutput)
}

// Username for the MySQL connection.
func (o MysqlProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

// MySQL database structure
type MysqlRdbms struct {
	// Mysql databases on the server
	MysqlDatabases []MysqlDatabase `pulumi:"mysqlDatabases"`
}

// MysqlRdbmsInput is an input type that accepts MysqlRdbmsArgs and MysqlRdbmsOutput values.
// You can construct a concrete instance of `MysqlRdbmsInput` via:
//
//	MysqlRdbmsArgs{...}
type MysqlRdbmsInput interface {
	pulumi.Input

	ToMysqlRdbmsOutput() MysqlRdbmsOutput
	ToMysqlRdbmsOutputWithContext(context.Context) MysqlRdbmsOutput
}

// MySQL database structure
type MysqlRdbmsArgs struct {
	// Mysql databases on the server
	MysqlDatabases MysqlDatabaseArrayInput `pulumi:"mysqlDatabases"`
}

func (MysqlRdbmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlRdbms)(nil)).Elem()
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsOutput() MysqlRdbmsOutput {
	return i.ToMysqlRdbmsOutputWithContext(context.Background())
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsOutputWithContext(ctx context.Context) MysqlRdbmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsOutput)
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return i.ToMysqlRdbmsPtrOutputWithContext(context.Background())
}

func (i MysqlRdbmsArgs) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsOutput).ToMysqlRdbmsPtrOutputWithContext(ctx)
}

// MysqlRdbmsPtrInput is an input type that accepts MysqlRdbmsArgs, MysqlRdbmsPtr and MysqlRdbmsPtrOutput values.
// You can construct a concrete instance of `MysqlRdbmsPtrInput` via:
//
//	        MysqlRdbmsArgs{...}
//
//	or:
//
//	        nil
type MysqlRdbmsPtrInput interface {
	pulumi.Input

	ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput
	ToMysqlRdbmsPtrOutputWithContext(context.Context) MysqlRdbmsPtrOutput
}

type mysqlRdbmsPtrType MysqlRdbmsArgs

func MysqlRdbmsPtr(v *MysqlRdbmsArgs) MysqlRdbmsPtrInput {
	return (*mysqlRdbmsPtrType)(v)
}

func (*mysqlRdbmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlRdbms)(nil)).Elem()
}

func (i *mysqlRdbmsPtrType) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return i.ToMysqlRdbmsPtrOutputWithContext(context.Background())
}

func (i *mysqlRdbmsPtrType) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlRdbmsPtrOutput)
}

// MySQL database structure
type MysqlRdbmsOutput struct{ *pulumi.OutputState }

func (MysqlRdbmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlRdbms)(nil)).Elem()
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsOutput() MysqlRdbmsOutput {
	return o
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsOutputWithContext(ctx context.Context) MysqlRdbmsOutput {
	return o
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return o.ToMysqlRdbmsPtrOutputWithContext(context.Background())
}

func (o MysqlRdbmsOutput) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlRdbms) *MysqlRdbms {
		return &v
	}).(MysqlRdbmsPtrOutput)
}

// Mysql databases on the server
func (o MysqlRdbmsOutput) MysqlDatabases() MysqlDatabaseArrayOutput {
	return o.ApplyT(func(v MysqlRdbms) []MysqlDatabase { return v.MysqlDatabases }).(MysqlDatabaseArrayOutput)
}

type MysqlRdbmsPtrOutput struct{ *pulumi.OutputState }

func (MysqlRdbmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlRdbms)(nil)).Elem()
}

func (o MysqlRdbmsPtrOutput) ToMysqlRdbmsPtrOutput() MysqlRdbmsPtrOutput {
	return o
}

func (o MysqlRdbmsPtrOutput) ToMysqlRdbmsPtrOutputWithContext(ctx context.Context) MysqlRdbmsPtrOutput {
	return o
}

func (o MysqlRdbmsPtrOutput) Elem() MysqlRdbmsOutput {
	return o.ApplyT(func(v *MysqlRdbms) MysqlRdbms {
		if v != nil {
			return *v
		}
		var ret MysqlRdbms
		return ret
	}).(MysqlRdbmsOutput)
}

// Mysql databases on the server
func (o MysqlRdbmsPtrOutput) MysqlDatabases() MysqlDatabaseArrayOutput {
	return o.ApplyT(func(v *MysqlRdbms) []MysqlDatabase {
		if v == nil {
			return nil
		}
		return v.MysqlDatabases
	}).(MysqlDatabaseArrayOutput)
}

// MySQL database structure
type MysqlRdbmsResponse struct {
	// Mysql databases on the server
	MysqlDatabases []MysqlDatabaseResponse `pulumi:"mysqlDatabases"`
}

// MySQL database structure
type MysqlRdbmsResponseOutput struct{ *pulumi.OutputState }

func (MysqlRdbmsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlRdbmsResponse)(nil)).Elem()
}

func (o MysqlRdbmsResponseOutput) ToMysqlRdbmsResponseOutput() MysqlRdbmsResponseOutput {
	return o
}

func (o MysqlRdbmsResponseOutput) ToMysqlRdbmsResponseOutputWithContext(ctx context.Context) MysqlRdbmsResponseOutput {
	return o
}

// Mysql databases on the server
func (o MysqlRdbmsResponseOutput) MysqlDatabases() MysqlDatabaseResponseArrayOutput {
	return o.ApplyT(func(v MysqlRdbmsResponse) []MysqlDatabaseResponse { return v.MysqlDatabases }).(MysqlDatabaseResponseArrayOutput)
}

// MySQL source configuration
type MysqlSourceConfig struct {
	// MySQL objects to exclude from the stream.
	ExcludeObjects *MysqlRdbms `pulumi:"excludeObjects"`
	// MySQL objects to retrieve from the source.
	IncludeObjects *MysqlRdbms `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks *int `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentCdcTasks *int `pulumi:"maxConcurrentCdcTasks"`
}

// MysqlSourceConfigInput is an input type that accepts MysqlSourceConfigArgs and MysqlSourceConfigOutput values.
// You can construct a concrete instance of `MysqlSourceConfigInput` via:
//
//	MysqlSourceConfigArgs{...}
type MysqlSourceConfigInput interface {
	pulumi.Input

	ToMysqlSourceConfigOutput() MysqlSourceConfigOutput
	ToMysqlSourceConfigOutputWithContext(context.Context) MysqlSourceConfigOutput
}

// MySQL source configuration
type MysqlSourceConfigArgs struct {
	// MySQL objects to exclude from the stream.
	ExcludeObjects MysqlRdbmsPtrInput `pulumi:"excludeObjects"`
	// MySQL objects to retrieve from the source.
	IncludeObjects MysqlRdbmsPtrInput `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks pulumi.IntPtrInput `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentCdcTasks pulumi.IntPtrInput `pulumi:"maxConcurrentCdcTasks"`
}

func (MysqlSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSourceConfig)(nil)).Elem()
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigOutput() MysqlSourceConfigOutput {
	return i.ToMysqlSourceConfigOutputWithContext(context.Background())
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigOutputWithContext(ctx context.Context) MysqlSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigOutput)
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return i.ToMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i MysqlSourceConfigArgs) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigOutput).ToMysqlSourceConfigPtrOutputWithContext(ctx)
}

// MysqlSourceConfigPtrInput is an input type that accepts MysqlSourceConfigArgs, MysqlSourceConfigPtr and MysqlSourceConfigPtrOutput values.
// You can construct a concrete instance of `MysqlSourceConfigPtrInput` via:
//
//	        MysqlSourceConfigArgs{...}
//
//	or:
//
//	        nil
type MysqlSourceConfigPtrInput interface {
	pulumi.Input

	ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput
	ToMysqlSourceConfigPtrOutputWithContext(context.Context) MysqlSourceConfigPtrOutput
}

type mysqlSourceConfigPtrType MysqlSourceConfigArgs

func MysqlSourceConfigPtr(v *MysqlSourceConfigArgs) MysqlSourceConfigPtrInput {
	return (*mysqlSourceConfigPtrType)(v)
}

func (*mysqlSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSourceConfig)(nil)).Elem()
}

func (i *mysqlSourceConfigPtrType) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return i.ToMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i *mysqlSourceConfigPtrType) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSourceConfigPtrOutput)
}

// MySQL source configuration
type MysqlSourceConfigOutput struct{ *pulumi.OutputState }

func (MysqlSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSourceConfig)(nil)).Elem()
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigOutput() MysqlSourceConfigOutput {
	return o
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigOutputWithContext(ctx context.Context) MysqlSourceConfigOutput {
	return o
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return o.ToMysqlSourceConfigPtrOutputWithContext(context.Background())
}

func (o MysqlSourceConfigOutput) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSourceConfig) *MysqlSourceConfig {
		return &v
	}).(MysqlSourceConfigPtrOutput)
}

// MySQL objects to exclude from the stream.
func (o MysqlSourceConfigOutput) ExcludeObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v MysqlSourceConfig) *MysqlRdbms { return v.ExcludeObjects }).(MysqlRdbmsPtrOutput)
}

// MySQL objects to retrieve from the source.
func (o MysqlSourceConfigOutput) IncludeObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v MysqlSourceConfig) *MysqlRdbms { return v.IncludeObjects }).(MysqlRdbmsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o MysqlSourceConfigOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlSourceConfig) *int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o MysqlSourceConfigOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MysqlSourceConfig) *int { return v.MaxConcurrentCdcTasks }).(pulumi.IntPtrOutput)
}

type MysqlSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (MysqlSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSourceConfig)(nil)).Elem()
}

func (o MysqlSourceConfigPtrOutput) ToMysqlSourceConfigPtrOutput() MysqlSourceConfigPtrOutput {
	return o
}

func (o MysqlSourceConfigPtrOutput) ToMysqlSourceConfigPtrOutputWithContext(ctx context.Context) MysqlSourceConfigPtrOutput {
	return o
}

func (o MysqlSourceConfigPtrOutput) Elem() MysqlSourceConfigOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) MysqlSourceConfig {
		if v != nil {
			return *v
		}
		var ret MysqlSourceConfig
		return ret
	}).(MysqlSourceConfigOutput)
}

// MySQL objects to exclude from the stream.
func (o MysqlSourceConfigPtrOutput) ExcludeObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) *MysqlRdbms {
		if v == nil {
			return nil
		}
		return v.ExcludeObjects
	}).(MysqlRdbmsPtrOutput)
}

// MySQL objects to retrieve from the source.
func (o MysqlSourceConfigPtrOutput) IncludeObjects() MysqlRdbmsPtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) *MysqlRdbms {
		if v == nil {
			return nil
		}
		return v.IncludeObjects
	}).(MysqlRdbmsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o MysqlSourceConfigPtrOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentBackfillTasks
	}).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o MysqlSourceConfigPtrOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MysqlSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCdcTasks
	}).(pulumi.IntPtrOutput)
}

// MySQL source configuration
type MysqlSourceConfigResponse struct {
	// MySQL objects to exclude from the stream.
	ExcludeObjects MysqlRdbmsResponse `pulumi:"excludeObjects"`
	// MySQL objects to retrieve from the source.
	IncludeObjects MysqlRdbmsResponse `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks int `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentCdcTasks int `pulumi:"maxConcurrentCdcTasks"`
}

// MySQL source configuration
type MysqlSourceConfigResponseOutput struct{ *pulumi.OutputState }

func (MysqlSourceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSourceConfigResponse)(nil)).Elem()
}

func (o MysqlSourceConfigResponseOutput) ToMysqlSourceConfigResponseOutput() MysqlSourceConfigResponseOutput {
	return o
}

func (o MysqlSourceConfigResponseOutput) ToMysqlSourceConfigResponseOutputWithContext(ctx context.Context) MysqlSourceConfigResponseOutput {
	return o
}

// MySQL objects to exclude from the stream.
func (o MysqlSourceConfigResponseOutput) ExcludeObjects() MysqlRdbmsResponseOutput {
	return o.ApplyT(func(v MysqlSourceConfigResponse) MysqlRdbmsResponse { return v.ExcludeObjects }).(MysqlRdbmsResponseOutput)
}

// MySQL objects to retrieve from the source.
func (o MysqlSourceConfigResponseOutput) IncludeObjects() MysqlRdbmsResponseOutput {
	return o.ApplyT(func(v MysqlSourceConfigResponse) MysqlRdbmsResponse { return v.IncludeObjects }).(MysqlRdbmsResponseOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o MysqlSourceConfigResponseOutput) MaxConcurrentBackfillTasks() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlSourceConfigResponse) int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o MysqlSourceConfigResponseOutput) MaxConcurrentCdcTasks() pulumi.IntOutput {
	return o.ApplyT(func(v MysqlSourceConfigResponse) int { return v.MaxConcurrentCdcTasks }).(pulumi.IntOutput)
}

// MySQL SSL configuration information.
type MysqlSslConfig struct {
	// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
	ClientKey *string `pulumi:"clientKey"`
}

// MysqlSslConfigInput is an input type that accepts MysqlSslConfigArgs and MysqlSslConfigOutput values.
// You can construct a concrete instance of `MysqlSslConfigInput` via:
//
//	MysqlSslConfigArgs{...}
type MysqlSslConfigInput interface {
	pulumi.Input

	ToMysqlSslConfigOutput() MysqlSslConfigOutput
	ToMysqlSslConfigOutputWithContext(context.Context) MysqlSslConfigOutput
}

// MySQL SSL configuration information.
type MysqlSslConfigArgs struct {
	// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
}

func (MysqlSslConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSslConfig)(nil)).Elem()
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigOutput() MysqlSslConfigOutput {
	return i.ToMysqlSslConfigOutputWithContext(context.Background())
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigOutputWithContext(ctx context.Context) MysqlSslConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigOutput)
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return i.ToMysqlSslConfigPtrOutputWithContext(context.Background())
}

func (i MysqlSslConfigArgs) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigOutput).ToMysqlSslConfigPtrOutputWithContext(ctx)
}

// MysqlSslConfigPtrInput is an input type that accepts MysqlSslConfigArgs, MysqlSslConfigPtr and MysqlSslConfigPtrOutput values.
// You can construct a concrete instance of `MysqlSslConfigPtrInput` via:
//
//	        MysqlSslConfigArgs{...}
//
//	or:
//
//	        nil
type MysqlSslConfigPtrInput interface {
	pulumi.Input

	ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput
	ToMysqlSslConfigPtrOutputWithContext(context.Context) MysqlSslConfigPtrOutput
}

type mysqlSslConfigPtrType MysqlSslConfigArgs

func MysqlSslConfigPtr(v *MysqlSslConfigArgs) MysqlSslConfigPtrInput {
	return (*mysqlSslConfigPtrType)(v)
}

func (*mysqlSslConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSslConfig)(nil)).Elem()
}

func (i *mysqlSslConfigPtrType) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return i.ToMysqlSslConfigPtrOutputWithContext(context.Background())
}

func (i *mysqlSslConfigPtrType) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlSslConfigPtrOutput)
}

// MySQL SSL configuration information.
type MysqlSslConfigOutput struct{ *pulumi.OutputState }

func (MysqlSslConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSslConfig)(nil)).Elem()
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigOutput() MysqlSslConfigOutput {
	return o
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigOutputWithContext(ctx context.Context) MysqlSslConfigOutput {
	return o
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return o.ToMysqlSslConfigPtrOutputWithContext(context.Background())
}

func (o MysqlSslConfigOutput) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MysqlSslConfig) *MysqlSslConfig {
		return &v
	}).(MysqlSslConfigPtrOutput)
}

// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
func (o MysqlSslConfigOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlSslConfig) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlSslConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlSslConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

type MysqlSslConfigPtrOutput struct{ *pulumi.OutputState }

func (MysqlSslConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlSslConfig)(nil)).Elem()
}

func (o MysqlSslConfigPtrOutput) ToMysqlSslConfigPtrOutput() MysqlSslConfigPtrOutput {
	return o
}

func (o MysqlSslConfigPtrOutput) ToMysqlSslConfigPtrOutputWithContext(ctx context.Context) MysqlSslConfigPtrOutput {
	return o
}

func (o MysqlSslConfigPtrOutput) Elem() MysqlSslConfigOutput {
	return o.ApplyT(func(v *MysqlSslConfig) MysqlSslConfig {
		if v != nil {
			return *v
		}
		var ret MysqlSslConfig
		return ret
	}).(MysqlSslConfigOutput)
}

// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
func (o MysqlSslConfigPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlSslConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// MySQL SSL configuration information.
type MysqlSslConfigResponse struct {
	// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
	CaCertificate string `pulumi:"caCertificate"`
	// Indicates whether the ca_certificate field is set.
	CaCertificateSet bool `pulumi:"caCertificateSet"`
	// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
	ClientCertificate string `pulumi:"clientCertificate"`
	// Indicates whether the client_certificate field is set.
	ClientCertificateSet bool `pulumi:"clientCertificateSet"`
	// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
	ClientKey string `pulumi:"clientKey"`
	// Indicates whether the client_key field is set.
	ClientKeySet bool `pulumi:"clientKeySet"`
}

// MySQL SSL configuration information.
type MysqlSslConfigResponseOutput struct{ *pulumi.OutputState }

func (MysqlSslConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlSslConfigResponse)(nil)).Elem()
}

func (o MysqlSslConfigResponseOutput) ToMysqlSslConfigResponseOutput() MysqlSslConfigResponseOutput {
	return o
}

func (o MysqlSslConfigResponseOutput) ToMysqlSslConfigResponseOutputWithContext(ctx context.Context) MysqlSslConfigResponseOutput {
	return o
}

// Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
func (o MysqlSslConfigResponseOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) string { return v.CaCertificate }).(pulumi.StringOutput)
}

// Indicates whether the ca_certificate field is set.
func (o MysqlSslConfigResponseOutput) CaCertificateSet() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) bool { return v.CaCertificateSet }).(pulumi.BoolOutput)
}

// Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigResponseOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) string { return v.ClientCertificate }).(pulumi.StringOutput)
}

// Indicates whether the client_certificate field is set.
func (o MysqlSslConfigResponseOutput) ClientCertificateSet() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) bool { return v.ClientCertificateSet }).(pulumi.BoolOutput)
}

// Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
func (o MysqlSslConfigResponseOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) string { return v.ClientKey }).(pulumi.StringOutput)
}

// Indicates whether the client_key field is set.
func (o MysqlSslConfigResponseOutput) ClientKeySet() pulumi.BoolOutput {
	return o.ApplyT(func(v MysqlSslConfigResponse) bool { return v.ClientKeySet }).(pulumi.BoolOutput)
}

// MySQL table.
type MysqlTable struct {
	// MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
	MysqlColumns []MysqlColumn `pulumi:"mysqlColumns"`
	// Table name.
	Table *string `pulumi:"table"`
}

// MysqlTableInput is an input type that accepts MysqlTableArgs and MysqlTableOutput values.
// You can construct a concrete instance of `MysqlTableInput` via:
//
//	MysqlTableArgs{...}
type MysqlTableInput interface {
	pulumi.Input

	ToMysqlTableOutput() MysqlTableOutput
	ToMysqlTableOutputWithContext(context.Context) MysqlTableOutput
}

// MySQL table.
type MysqlTableArgs struct {
	// MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
	MysqlColumns MysqlColumnArrayInput `pulumi:"mysqlColumns"`
	// Table name.
	Table pulumi.StringPtrInput `pulumi:"table"`
}

func (MysqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlTable)(nil)).Elem()
}

func (i MysqlTableArgs) ToMysqlTableOutput() MysqlTableOutput {
	return i.ToMysqlTableOutputWithContext(context.Background())
}

func (i MysqlTableArgs) ToMysqlTableOutputWithContext(ctx context.Context) MysqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlTableOutput)
}

// MysqlTableArrayInput is an input type that accepts MysqlTableArray and MysqlTableArrayOutput values.
// You can construct a concrete instance of `MysqlTableArrayInput` via:
//
//	MysqlTableArray{ MysqlTableArgs{...} }
type MysqlTableArrayInput interface {
	pulumi.Input

	ToMysqlTableArrayOutput() MysqlTableArrayOutput
	ToMysqlTableArrayOutputWithContext(context.Context) MysqlTableArrayOutput
}

type MysqlTableArray []MysqlTableInput

func (MysqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlTable)(nil)).Elem()
}

func (i MysqlTableArray) ToMysqlTableArrayOutput() MysqlTableArrayOutput {
	return i.ToMysqlTableArrayOutputWithContext(context.Background())
}

func (i MysqlTableArray) ToMysqlTableArrayOutputWithContext(ctx context.Context) MysqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlTableArrayOutput)
}

// MySQL table.
type MysqlTableOutput struct{ *pulumi.OutputState }

func (MysqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlTable)(nil)).Elem()
}

func (o MysqlTableOutput) ToMysqlTableOutput() MysqlTableOutput {
	return o
}

func (o MysqlTableOutput) ToMysqlTableOutputWithContext(ctx context.Context) MysqlTableOutput {
	return o
}

// MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
func (o MysqlTableOutput) MysqlColumns() MysqlColumnArrayOutput {
	return o.ApplyT(func(v MysqlTable) []MysqlColumn { return v.MysqlColumns }).(MysqlColumnArrayOutput)
}

// Table name.
func (o MysqlTableOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MysqlTable) *string { return v.Table }).(pulumi.StringPtrOutput)
}

type MysqlTableArrayOutput struct{ *pulumi.OutputState }

func (MysqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlTable)(nil)).Elem()
}

func (o MysqlTableArrayOutput) ToMysqlTableArrayOutput() MysqlTableArrayOutput {
	return o
}

func (o MysqlTableArrayOutput) ToMysqlTableArrayOutputWithContext(ctx context.Context) MysqlTableArrayOutput {
	return o
}

func (o MysqlTableArrayOutput) Index(i pulumi.IntInput) MysqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlTable {
		return vs[0].([]MysqlTable)[vs[1].(int)]
	}).(MysqlTableOutput)
}

// MySQL table.
type MysqlTableResponse struct {
	// MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
	MysqlColumns []MysqlColumnResponse `pulumi:"mysqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// MySQL table.
type MysqlTableResponseOutput struct{ *pulumi.OutputState }

func (MysqlTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlTableResponse)(nil)).Elem()
}

func (o MysqlTableResponseOutput) ToMysqlTableResponseOutput() MysqlTableResponseOutput {
	return o
}

func (o MysqlTableResponseOutput) ToMysqlTableResponseOutputWithContext(ctx context.Context) MysqlTableResponseOutput {
	return o
}

// MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
func (o MysqlTableResponseOutput) MysqlColumns() MysqlColumnResponseArrayOutput {
	return o.ApplyT(func(v MysqlTableResponse) []MysqlColumnResponse { return v.MysqlColumns }).(MysqlColumnResponseArrayOutput)
}

// Table name.
func (o MysqlTableResponseOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v MysqlTableResponse) string { return v.Table }).(pulumi.StringOutput)
}

type MysqlTableResponseArrayOutput struct{ *pulumi.OutputState }

func (MysqlTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlTableResponse)(nil)).Elem()
}

func (o MysqlTableResponseArrayOutput) ToMysqlTableResponseArrayOutput() MysqlTableResponseArrayOutput {
	return o
}

func (o MysqlTableResponseArrayOutput) ToMysqlTableResponseArrayOutputWithContext(ctx context.Context) MysqlTableResponseArrayOutput {
	return o
}

func (o MysqlTableResponseArrayOutput) Index(i pulumi.IntInput) MysqlTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlTableResponse {
		return vs[0].([]MysqlTableResponse)[vs[1].(int)]
	}).(MysqlTableResponseOutput)
}

// Oracle Column.
type OracleColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The Oracle data type.
	DataType *string `pulumi:"dataType"`
	// Column encoding.
	Encoding *string `pulumi:"encoding"`
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Column precision.
	Precision *int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// OracleColumnInput is an input type that accepts OracleColumnArgs and OracleColumnOutput values.
// You can construct a concrete instance of `OracleColumnInput` via:
//
//	OracleColumnArgs{...}
type OracleColumnInput interface {
	pulumi.Input

	ToOracleColumnOutput() OracleColumnOutput
	ToOracleColumnOutputWithContext(context.Context) OracleColumnOutput
}

// Oracle Column.
type OracleColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The Oracle data type.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Column encoding.
	Encoding pulumi.StringPtrInput `pulumi:"encoding"`
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (OracleColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleColumn)(nil)).Elem()
}

func (i OracleColumnArgs) ToOracleColumnOutput() OracleColumnOutput {
	return i.ToOracleColumnOutputWithContext(context.Background())
}

func (i OracleColumnArgs) ToOracleColumnOutputWithContext(ctx context.Context) OracleColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleColumnOutput)
}

// OracleColumnArrayInput is an input type that accepts OracleColumnArray and OracleColumnArrayOutput values.
// You can construct a concrete instance of `OracleColumnArrayInput` via:
//
//	OracleColumnArray{ OracleColumnArgs{...} }
type OracleColumnArrayInput interface {
	pulumi.Input

	ToOracleColumnArrayOutput() OracleColumnArrayOutput
	ToOracleColumnArrayOutputWithContext(context.Context) OracleColumnArrayOutput
}

type OracleColumnArray []OracleColumnInput

func (OracleColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleColumn)(nil)).Elem()
}

func (i OracleColumnArray) ToOracleColumnArrayOutput() OracleColumnArrayOutput {
	return i.ToOracleColumnArrayOutputWithContext(context.Background())
}

func (i OracleColumnArray) ToOracleColumnArrayOutputWithContext(ctx context.Context) OracleColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleColumnArrayOutput)
}

// Oracle Column.
type OracleColumnOutput struct{ *pulumi.OutputState }

func (OracleColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleColumn)(nil)).Elem()
}

func (o OracleColumnOutput) ToOracleColumnOutput() OracleColumnOutput {
	return o
}

func (o OracleColumnOutput) ToOracleColumnOutputWithContext(ctx context.Context) OracleColumnOutput {
	return o
}

// Column name.
func (o OracleColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleColumn) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The Oracle data type.
func (o OracleColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Column encoding.
func (o OracleColumnOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleColumn) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

// Column length.
func (o OracleColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o OracleColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OracleColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o OracleColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.OrdinalPosition }).(pulumi.IntPtrOutput)
}

// Column precision.
func (o OracleColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.Precision }).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o OracleColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OracleColumn) *bool { return v.PrimaryKey }).(pulumi.BoolPtrOutput)
}

// Column scale.
func (o OracleColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleColumn) *int { return v.Scale }).(pulumi.IntPtrOutput)
}

type OracleColumnArrayOutput struct{ *pulumi.OutputState }

func (OracleColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleColumn)(nil)).Elem()
}

func (o OracleColumnArrayOutput) ToOracleColumnArrayOutput() OracleColumnArrayOutput {
	return o
}

func (o OracleColumnArrayOutput) ToOracleColumnArrayOutputWithContext(ctx context.Context) OracleColumnArrayOutput {
	return o
}

func (o OracleColumnArrayOutput) Index(i pulumi.IntInput) OracleColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleColumn {
		return vs[0].([]OracleColumn)[vs[1].(int)]
	}).(OracleColumnOutput)
}

// Oracle Column.
type OracleColumnResponse struct {
	// Column name.
	Column string `pulumi:"column"`
	// The Oracle data type.
	DataType string `pulumi:"dataType"`
	// Column encoding.
	Encoding string `pulumi:"encoding"`
	// Column length.
	Length int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition int `pulumi:"ordinalPosition"`
	// Column precision.
	Precision int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey bool `pulumi:"primaryKey"`
	// Column scale.
	Scale int `pulumi:"scale"`
}

// Oracle Column.
type OracleColumnResponseOutput struct{ *pulumi.OutputState }

func (OracleColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleColumnResponse)(nil)).Elem()
}

func (o OracleColumnResponseOutput) ToOracleColumnResponseOutput() OracleColumnResponseOutput {
	return o
}

func (o OracleColumnResponseOutput) ToOracleColumnResponseOutputWithContext(ctx context.Context) OracleColumnResponseOutput {
	return o
}

// Column name.
func (o OracleColumnResponseOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v OracleColumnResponse) string { return v.Column }).(pulumi.StringOutput)
}

// The Oracle data type.
func (o OracleColumnResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v OracleColumnResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// Column encoding.
func (o OracleColumnResponseOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v OracleColumnResponse) string { return v.Encoding }).(pulumi.StringOutput)
}

// Column length.
func (o OracleColumnResponseOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.Length }).(pulumi.IntOutput)
}

// Whether or not the column can accept a null value.
func (o OracleColumnResponseOutput) Nullable() pulumi.BoolOutput {
	return o.ApplyT(func(v OracleColumnResponse) bool { return v.Nullable }).(pulumi.BoolOutput)
}

// The ordinal position of the column in the table.
func (o OracleColumnResponseOutput) OrdinalPosition() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.OrdinalPosition }).(pulumi.IntOutput)
}

// Column precision.
func (o OracleColumnResponseOutput) Precision() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.Precision }).(pulumi.IntOutput)
}

// Whether or not the column represents a primary key.
func (o OracleColumnResponseOutput) PrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v OracleColumnResponse) bool { return v.PrimaryKey }).(pulumi.BoolOutput)
}

// Column scale.
func (o OracleColumnResponseOutput) Scale() pulumi.IntOutput {
	return o.ApplyT(func(v OracleColumnResponse) int { return v.Scale }).(pulumi.IntOutput)
}

type OracleColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (OracleColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleColumnResponse)(nil)).Elem()
}

func (o OracleColumnResponseArrayOutput) ToOracleColumnResponseArrayOutput() OracleColumnResponseArrayOutput {
	return o
}

func (o OracleColumnResponseArrayOutput) ToOracleColumnResponseArrayOutputWithContext(ctx context.Context) OracleColumnResponseArrayOutput {
	return o
}

func (o OracleColumnResponseArrayOutput) Index(i pulumi.IntInput) OracleColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleColumnResponse {
		return vs[0].([]OracleColumnResponse)[vs[1].(int)]
	}).(OracleColumnResponseOutput)
}

// Oracle database profile.
type OracleProfile struct {
	// Connection string attributes
	ConnectionAttributes map[string]string `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname string `pulumi:"hostname"`
	// Password for the Oracle connection.
	Password string `pulumi:"password"`
	// Port for the Oracle connection, default value is 1521.
	Port *int `pulumi:"port"`
	// Username for the Oracle connection.
	Username string `pulumi:"username"`
}

// OracleProfileInput is an input type that accepts OracleProfileArgs and OracleProfileOutput values.
// You can construct a concrete instance of `OracleProfileInput` via:
//
//	OracleProfileArgs{...}
type OracleProfileInput interface {
	pulumi.Input

	ToOracleProfileOutput() OracleProfileOutput
	ToOracleProfileOutputWithContext(context.Context) OracleProfileOutput
}

// Oracle database profile.
type OracleProfileArgs struct {
	// Connection string attributes
	ConnectionAttributes pulumi.StringMapInput `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService pulumi.StringInput `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Password for the Oracle connection.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the Oracle connection, default value is 1521.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Username for the Oracle connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (OracleProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleProfile)(nil)).Elem()
}

func (i OracleProfileArgs) ToOracleProfileOutput() OracleProfileOutput {
	return i.ToOracleProfileOutputWithContext(context.Background())
}

func (i OracleProfileArgs) ToOracleProfileOutputWithContext(ctx context.Context) OracleProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfileOutput)
}

func (i OracleProfileArgs) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return i.ToOracleProfilePtrOutputWithContext(context.Background())
}

func (i OracleProfileArgs) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfileOutput).ToOracleProfilePtrOutputWithContext(ctx)
}

// OracleProfilePtrInput is an input type that accepts OracleProfileArgs, OracleProfilePtr and OracleProfilePtrOutput values.
// You can construct a concrete instance of `OracleProfilePtrInput` via:
//
//	        OracleProfileArgs{...}
//
//	or:
//
//	        nil
type OracleProfilePtrInput interface {
	pulumi.Input

	ToOracleProfilePtrOutput() OracleProfilePtrOutput
	ToOracleProfilePtrOutputWithContext(context.Context) OracleProfilePtrOutput
}

type oracleProfilePtrType OracleProfileArgs

func OracleProfilePtr(v *OracleProfileArgs) OracleProfilePtrInput {
	return (*oracleProfilePtrType)(v)
}

func (*oracleProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleProfile)(nil)).Elem()
}

func (i *oracleProfilePtrType) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return i.ToOracleProfilePtrOutputWithContext(context.Background())
}

func (i *oracleProfilePtrType) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleProfilePtrOutput)
}

// Oracle database profile.
type OracleProfileOutput struct{ *pulumi.OutputState }

func (OracleProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleProfile)(nil)).Elem()
}

func (o OracleProfileOutput) ToOracleProfileOutput() OracleProfileOutput {
	return o
}

func (o OracleProfileOutput) ToOracleProfileOutputWithContext(ctx context.Context) OracleProfileOutput {
	return o
}

func (o OracleProfileOutput) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return o.ToOracleProfilePtrOutputWithContext(context.Background())
}

func (o OracleProfileOutput) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleProfile) *OracleProfile {
		return &v
	}).(OracleProfilePtrOutput)
}

// Connection string attributes
func (o OracleProfileOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v OracleProfile) map[string]string { return v.ConnectionAttributes }).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o OracleProfileOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Hostname for the Oracle connection.
func (o OracleProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the Oracle connection.
func (o OracleProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the Oracle connection, default value is 1521.
func (o OracleProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Username for the Oracle connection.
func (o OracleProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfile) string { return v.Username }).(pulumi.StringOutput)
}

type OracleProfilePtrOutput struct{ *pulumi.OutputState }

func (OracleProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleProfile)(nil)).Elem()
}

func (o OracleProfilePtrOutput) ToOracleProfilePtrOutput() OracleProfilePtrOutput {
	return o
}

func (o OracleProfilePtrOutput) ToOracleProfilePtrOutputWithContext(ctx context.Context) OracleProfilePtrOutput {
	return o
}

func (o OracleProfilePtrOutput) Elem() OracleProfileOutput {
	return o.ApplyT(func(v *OracleProfile) OracleProfile {
		if v != nil {
			return *v
		}
		var ret OracleProfile
		return ret
	}).(OracleProfileOutput)
}

// Connection string attributes
func (o OracleProfilePtrOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OracleProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.ConnectionAttributes
	}).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o OracleProfilePtrOutput) DatabaseService() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.DatabaseService
	}).(pulumi.StringPtrOutput)
}

// Hostname for the Oracle connection.
func (o OracleProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Password for the Oracle connection.
func (o OracleProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the Oracle connection, default value is 1521.
func (o OracleProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the Oracle connection.
func (o OracleProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OracleProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Oracle database profile.
type OracleProfileResponse struct {
	// Connection string attributes
	ConnectionAttributes map[string]string `pulumi:"connectionAttributes"`
	// Database for the Oracle connection.
	DatabaseService string `pulumi:"databaseService"`
	// Hostname for the Oracle connection.
	Hostname string `pulumi:"hostname"`
	// Password for the Oracle connection.
	Password string `pulumi:"password"`
	// Port for the Oracle connection, default value is 1521.
	Port int `pulumi:"port"`
	// Username for the Oracle connection.
	Username string `pulumi:"username"`
}

// Oracle database profile.
type OracleProfileResponseOutput struct{ *pulumi.OutputState }

func (OracleProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleProfileResponse)(nil)).Elem()
}

func (o OracleProfileResponseOutput) ToOracleProfileResponseOutput() OracleProfileResponseOutput {
	return o
}

func (o OracleProfileResponseOutput) ToOracleProfileResponseOutputWithContext(ctx context.Context) OracleProfileResponseOutput {
	return o
}

// Connection string attributes
func (o OracleProfileResponseOutput) ConnectionAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v OracleProfileResponse) map[string]string { return v.ConnectionAttributes }).(pulumi.StringMapOutput)
}

// Database for the Oracle connection.
func (o OracleProfileResponseOutput) DatabaseService() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.DatabaseService }).(pulumi.StringOutput)
}

// Hostname for the Oracle connection.
func (o OracleProfileResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the Oracle connection.
func (o OracleProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the Oracle connection, default value is 1521.
func (o OracleProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v OracleProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Username for the Oracle connection.
func (o OracleProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v OracleProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

// Oracle database structure.
type OracleRdbms struct {
	// Oracle schemas/databases in the database server.
	OracleSchemas []OracleSchema `pulumi:"oracleSchemas"`
}

// OracleRdbmsInput is an input type that accepts OracleRdbmsArgs and OracleRdbmsOutput values.
// You can construct a concrete instance of `OracleRdbmsInput` via:
//
//	OracleRdbmsArgs{...}
type OracleRdbmsInput interface {
	pulumi.Input

	ToOracleRdbmsOutput() OracleRdbmsOutput
	ToOracleRdbmsOutputWithContext(context.Context) OracleRdbmsOutput
}

// Oracle database structure.
type OracleRdbmsArgs struct {
	// Oracle schemas/databases in the database server.
	OracleSchemas OracleSchemaArrayInput `pulumi:"oracleSchemas"`
}

func (OracleRdbmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleRdbms)(nil)).Elem()
}

func (i OracleRdbmsArgs) ToOracleRdbmsOutput() OracleRdbmsOutput {
	return i.ToOracleRdbmsOutputWithContext(context.Background())
}

func (i OracleRdbmsArgs) ToOracleRdbmsOutputWithContext(ctx context.Context) OracleRdbmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsOutput)
}

func (i OracleRdbmsArgs) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return i.ToOracleRdbmsPtrOutputWithContext(context.Background())
}

func (i OracleRdbmsArgs) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsOutput).ToOracleRdbmsPtrOutputWithContext(ctx)
}

// OracleRdbmsPtrInput is an input type that accepts OracleRdbmsArgs, OracleRdbmsPtr and OracleRdbmsPtrOutput values.
// You can construct a concrete instance of `OracleRdbmsPtrInput` via:
//
//	        OracleRdbmsArgs{...}
//
//	or:
//
//	        nil
type OracleRdbmsPtrInput interface {
	pulumi.Input

	ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput
	ToOracleRdbmsPtrOutputWithContext(context.Context) OracleRdbmsPtrOutput
}

type oracleRdbmsPtrType OracleRdbmsArgs

func OracleRdbmsPtr(v *OracleRdbmsArgs) OracleRdbmsPtrInput {
	return (*oracleRdbmsPtrType)(v)
}

func (*oracleRdbmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleRdbms)(nil)).Elem()
}

func (i *oracleRdbmsPtrType) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return i.ToOracleRdbmsPtrOutputWithContext(context.Background())
}

func (i *oracleRdbmsPtrType) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleRdbmsPtrOutput)
}

// Oracle database structure.
type OracleRdbmsOutput struct{ *pulumi.OutputState }

func (OracleRdbmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleRdbms)(nil)).Elem()
}

func (o OracleRdbmsOutput) ToOracleRdbmsOutput() OracleRdbmsOutput {
	return o
}

func (o OracleRdbmsOutput) ToOracleRdbmsOutputWithContext(ctx context.Context) OracleRdbmsOutput {
	return o
}

func (o OracleRdbmsOutput) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return o.ToOracleRdbmsPtrOutputWithContext(context.Background())
}

func (o OracleRdbmsOutput) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleRdbms) *OracleRdbms {
		return &v
	}).(OracleRdbmsPtrOutput)
}

// Oracle schemas/databases in the database server.
func (o OracleRdbmsOutput) OracleSchemas() OracleSchemaArrayOutput {
	return o.ApplyT(func(v OracleRdbms) []OracleSchema { return v.OracleSchemas }).(OracleSchemaArrayOutput)
}

type OracleRdbmsPtrOutput struct{ *pulumi.OutputState }

func (OracleRdbmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleRdbms)(nil)).Elem()
}

func (o OracleRdbmsPtrOutput) ToOracleRdbmsPtrOutput() OracleRdbmsPtrOutput {
	return o
}

func (o OracleRdbmsPtrOutput) ToOracleRdbmsPtrOutputWithContext(ctx context.Context) OracleRdbmsPtrOutput {
	return o
}

func (o OracleRdbmsPtrOutput) Elem() OracleRdbmsOutput {
	return o.ApplyT(func(v *OracleRdbms) OracleRdbms {
		if v != nil {
			return *v
		}
		var ret OracleRdbms
		return ret
	}).(OracleRdbmsOutput)
}

// Oracle schemas/databases in the database server.
func (o OracleRdbmsPtrOutput) OracleSchemas() OracleSchemaArrayOutput {
	return o.ApplyT(func(v *OracleRdbms) []OracleSchema {
		if v == nil {
			return nil
		}
		return v.OracleSchemas
	}).(OracleSchemaArrayOutput)
}

// Oracle database structure.
type OracleRdbmsResponse struct {
	// Oracle schemas/databases in the database server.
	OracleSchemas []OracleSchemaResponse `pulumi:"oracleSchemas"`
}

// Oracle database structure.
type OracleRdbmsResponseOutput struct{ *pulumi.OutputState }

func (OracleRdbmsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleRdbmsResponse)(nil)).Elem()
}

func (o OracleRdbmsResponseOutput) ToOracleRdbmsResponseOutput() OracleRdbmsResponseOutput {
	return o
}

func (o OracleRdbmsResponseOutput) ToOracleRdbmsResponseOutputWithContext(ctx context.Context) OracleRdbmsResponseOutput {
	return o
}

// Oracle schemas/databases in the database server.
func (o OracleRdbmsResponseOutput) OracleSchemas() OracleSchemaResponseArrayOutput {
	return o.ApplyT(func(v OracleRdbmsResponse) []OracleSchemaResponse { return v.OracleSchemas }).(OracleSchemaResponseArrayOutput)
}

// Oracle schema.
type OracleSchema struct {
	// Tables in the schema.
	OracleTables []OracleTable `pulumi:"oracleTables"`
	// Schema name.
	Schema *string `pulumi:"schema"`
}

// OracleSchemaInput is an input type that accepts OracleSchemaArgs and OracleSchemaOutput values.
// You can construct a concrete instance of `OracleSchemaInput` via:
//
//	OracleSchemaArgs{...}
type OracleSchemaInput interface {
	pulumi.Input

	ToOracleSchemaOutput() OracleSchemaOutput
	ToOracleSchemaOutputWithContext(context.Context) OracleSchemaOutput
}

// Oracle schema.
type OracleSchemaArgs struct {
	// Tables in the schema.
	OracleTables OracleTableArrayInput `pulumi:"oracleTables"`
	// Schema name.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
}

func (OracleSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSchema)(nil)).Elem()
}

func (i OracleSchemaArgs) ToOracleSchemaOutput() OracleSchemaOutput {
	return i.ToOracleSchemaOutputWithContext(context.Background())
}

func (i OracleSchemaArgs) ToOracleSchemaOutputWithContext(ctx context.Context) OracleSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSchemaOutput)
}

// OracleSchemaArrayInput is an input type that accepts OracleSchemaArray and OracleSchemaArrayOutput values.
// You can construct a concrete instance of `OracleSchemaArrayInput` via:
//
//	OracleSchemaArray{ OracleSchemaArgs{...} }
type OracleSchemaArrayInput interface {
	pulumi.Input

	ToOracleSchemaArrayOutput() OracleSchemaArrayOutput
	ToOracleSchemaArrayOutputWithContext(context.Context) OracleSchemaArrayOutput
}

type OracleSchemaArray []OracleSchemaInput

func (OracleSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleSchema)(nil)).Elem()
}

func (i OracleSchemaArray) ToOracleSchemaArrayOutput() OracleSchemaArrayOutput {
	return i.ToOracleSchemaArrayOutputWithContext(context.Background())
}

func (i OracleSchemaArray) ToOracleSchemaArrayOutputWithContext(ctx context.Context) OracleSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSchemaArrayOutput)
}

// Oracle schema.
type OracleSchemaOutput struct{ *pulumi.OutputState }

func (OracleSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSchema)(nil)).Elem()
}

func (o OracleSchemaOutput) ToOracleSchemaOutput() OracleSchemaOutput {
	return o
}

func (o OracleSchemaOutput) ToOracleSchemaOutputWithContext(ctx context.Context) OracleSchemaOutput {
	return o
}

// Tables in the schema.
func (o OracleSchemaOutput) OracleTables() OracleTableArrayOutput {
	return o.ApplyT(func(v OracleSchema) []OracleTable { return v.OracleTables }).(OracleTableArrayOutput)
}

// Schema name.
func (o OracleSchemaOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleSchema) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

type OracleSchemaArrayOutput struct{ *pulumi.OutputState }

func (OracleSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleSchema)(nil)).Elem()
}

func (o OracleSchemaArrayOutput) ToOracleSchemaArrayOutput() OracleSchemaArrayOutput {
	return o
}

func (o OracleSchemaArrayOutput) ToOracleSchemaArrayOutputWithContext(ctx context.Context) OracleSchemaArrayOutput {
	return o
}

func (o OracleSchemaArrayOutput) Index(i pulumi.IntInput) OracleSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleSchema {
		return vs[0].([]OracleSchema)[vs[1].(int)]
	}).(OracleSchemaOutput)
}

// Oracle schema.
type OracleSchemaResponse struct {
	// Tables in the schema.
	OracleTables []OracleTableResponse `pulumi:"oracleTables"`
	// Schema name.
	Schema string `pulumi:"schema"`
}

// Oracle schema.
type OracleSchemaResponseOutput struct{ *pulumi.OutputState }

func (OracleSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSchemaResponse)(nil)).Elem()
}

func (o OracleSchemaResponseOutput) ToOracleSchemaResponseOutput() OracleSchemaResponseOutput {
	return o
}

func (o OracleSchemaResponseOutput) ToOracleSchemaResponseOutputWithContext(ctx context.Context) OracleSchemaResponseOutput {
	return o
}

// Tables in the schema.
func (o OracleSchemaResponseOutput) OracleTables() OracleTableResponseArrayOutput {
	return o.ApplyT(func(v OracleSchemaResponse) []OracleTableResponse { return v.OracleTables }).(OracleTableResponseArrayOutput)
}

// Schema name.
func (o OracleSchemaResponseOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v OracleSchemaResponse) string { return v.Schema }).(pulumi.StringOutput)
}

type OracleSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (OracleSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleSchemaResponse)(nil)).Elem()
}

func (o OracleSchemaResponseArrayOutput) ToOracleSchemaResponseArrayOutput() OracleSchemaResponseArrayOutput {
	return o
}

func (o OracleSchemaResponseArrayOutput) ToOracleSchemaResponseArrayOutputWithContext(ctx context.Context) OracleSchemaResponseArrayOutput {
	return o
}

func (o OracleSchemaResponseArrayOutput) Index(i pulumi.IntInput) OracleSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleSchemaResponse {
		return vs[0].([]OracleSchemaResponse)[vs[1].(int)]
	}).(OracleSchemaResponseOutput)
}

// Oracle data source configuration
type OracleSourceConfig struct {
	// Drop large object values.
	DropLargeObjects *DropLargeObjects `pulumi:"dropLargeObjects"`
	// Oracle objects to exclude from the stream.
	ExcludeObjects *OracleRdbms `pulumi:"excludeObjects"`
	// Oracle objects to include in the stream.
	IncludeObjects *OracleRdbms `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
	MaxConcurrentBackfillTasks *int `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
	MaxConcurrentCdcTasks *int `pulumi:"maxConcurrentCdcTasks"`
	// Stream large object values. NOTE: This feature is currently experimental.
	StreamLargeObjects *StreamLargeObjects `pulumi:"streamLargeObjects"`
}

// OracleSourceConfigInput is an input type that accepts OracleSourceConfigArgs and OracleSourceConfigOutput values.
// You can construct a concrete instance of `OracleSourceConfigInput` via:
//
//	OracleSourceConfigArgs{...}
type OracleSourceConfigInput interface {
	pulumi.Input

	ToOracleSourceConfigOutput() OracleSourceConfigOutput
	ToOracleSourceConfigOutputWithContext(context.Context) OracleSourceConfigOutput
}

// Oracle data source configuration
type OracleSourceConfigArgs struct {
	// Drop large object values.
	DropLargeObjects DropLargeObjectsPtrInput `pulumi:"dropLargeObjects"`
	// Oracle objects to exclude from the stream.
	ExcludeObjects OracleRdbmsPtrInput `pulumi:"excludeObjects"`
	// Oracle objects to include in the stream.
	IncludeObjects OracleRdbmsPtrInput `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
	MaxConcurrentBackfillTasks pulumi.IntPtrInput `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
	MaxConcurrentCdcTasks pulumi.IntPtrInput `pulumi:"maxConcurrentCdcTasks"`
	// Stream large object values. NOTE: This feature is currently experimental.
	StreamLargeObjects StreamLargeObjectsPtrInput `pulumi:"streamLargeObjects"`
}

func (OracleSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceConfig)(nil)).Elem()
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigOutput() OracleSourceConfigOutput {
	return i.ToOracleSourceConfigOutputWithContext(context.Background())
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigOutputWithContext(ctx context.Context) OracleSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigOutput)
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return i.ToOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (i OracleSourceConfigArgs) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigOutput).ToOracleSourceConfigPtrOutputWithContext(ctx)
}

// OracleSourceConfigPtrInput is an input type that accepts OracleSourceConfigArgs, OracleSourceConfigPtr and OracleSourceConfigPtrOutput values.
// You can construct a concrete instance of `OracleSourceConfigPtrInput` via:
//
//	        OracleSourceConfigArgs{...}
//
//	or:
//
//	        nil
type OracleSourceConfigPtrInput interface {
	pulumi.Input

	ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput
	ToOracleSourceConfigPtrOutputWithContext(context.Context) OracleSourceConfigPtrOutput
}

type oracleSourceConfigPtrType OracleSourceConfigArgs

func OracleSourceConfigPtr(v *OracleSourceConfigArgs) OracleSourceConfigPtrInput {
	return (*oracleSourceConfigPtrType)(v)
}

func (*oracleSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleSourceConfig)(nil)).Elem()
}

func (i *oracleSourceConfigPtrType) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return i.ToOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (i *oracleSourceConfigPtrType) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleSourceConfigPtrOutput)
}

// Oracle data source configuration
type OracleSourceConfigOutput struct{ *pulumi.OutputState }

func (OracleSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceConfig)(nil)).Elem()
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigOutput() OracleSourceConfigOutput {
	return o
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigOutputWithContext(ctx context.Context) OracleSourceConfigOutput {
	return o
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return o.ToOracleSourceConfigPtrOutputWithContext(context.Background())
}

func (o OracleSourceConfigOutput) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OracleSourceConfig) *OracleSourceConfig {
		return &v
	}).(OracleSourceConfigPtrOutput)
}

// Drop large object values.
func (o OracleSourceConfigOutput) DropLargeObjects() DropLargeObjectsPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *DropLargeObjects { return v.DropLargeObjects }).(DropLargeObjectsPtrOutput)
}

// Oracle objects to exclude from the stream.
func (o OracleSourceConfigOutput) ExcludeObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *OracleRdbms { return v.ExcludeObjects }).(OracleRdbmsPtrOutput)
}

// Oracle objects to include in the stream.
func (o OracleSourceConfigOutput) IncludeObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *OracleRdbms { return v.IncludeObjects }).(OracleRdbmsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
func (o OracleSourceConfigOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
func (o OracleSourceConfigOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *int { return v.MaxConcurrentCdcTasks }).(pulumi.IntPtrOutput)
}

// Stream large object values. NOTE: This feature is currently experimental.
func (o OracleSourceConfigOutput) StreamLargeObjects() StreamLargeObjectsPtrOutput {
	return o.ApplyT(func(v OracleSourceConfig) *StreamLargeObjects { return v.StreamLargeObjects }).(StreamLargeObjectsPtrOutput)
}

type OracleSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (OracleSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OracleSourceConfig)(nil)).Elem()
}

func (o OracleSourceConfigPtrOutput) ToOracleSourceConfigPtrOutput() OracleSourceConfigPtrOutput {
	return o
}

func (o OracleSourceConfigPtrOutput) ToOracleSourceConfigPtrOutputWithContext(ctx context.Context) OracleSourceConfigPtrOutput {
	return o
}

func (o OracleSourceConfigPtrOutput) Elem() OracleSourceConfigOutput {
	return o.ApplyT(func(v *OracleSourceConfig) OracleSourceConfig {
		if v != nil {
			return *v
		}
		var ret OracleSourceConfig
		return ret
	}).(OracleSourceConfigOutput)
}

// Drop large object values.
func (o OracleSourceConfigPtrOutput) DropLargeObjects() DropLargeObjectsPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *DropLargeObjects {
		if v == nil {
			return nil
		}
		return v.DropLargeObjects
	}).(DropLargeObjectsPtrOutput)
}

// Oracle objects to exclude from the stream.
func (o OracleSourceConfigPtrOutput) ExcludeObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *OracleRdbms {
		if v == nil {
			return nil
		}
		return v.ExcludeObjects
	}).(OracleRdbmsPtrOutput)
}

// Oracle objects to include in the stream.
func (o OracleSourceConfigPtrOutput) IncludeObjects() OracleRdbmsPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *OracleRdbms {
		if v == nil {
			return nil
		}
		return v.IncludeObjects
	}).(OracleRdbmsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
func (o OracleSourceConfigPtrOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentBackfillTasks
	}).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
func (o OracleSourceConfigPtrOutput) MaxConcurrentCdcTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentCdcTasks
	}).(pulumi.IntPtrOutput)
}

// Stream large object values. NOTE: This feature is currently experimental.
func (o OracleSourceConfigPtrOutput) StreamLargeObjects() StreamLargeObjectsPtrOutput {
	return o.ApplyT(func(v *OracleSourceConfig) *StreamLargeObjects {
		if v == nil {
			return nil
		}
		return v.StreamLargeObjects
	}).(StreamLargeObjectsPtrOutput)
}

// Oracle data source configuration
type OracleSourceConfigResponse struct {
	// Drop large object values.
	DropLargeObjects DropLargeObjectsResponse `pulumi:"dropLargeObjects"`
	// Oracle objects to exclude from the stream.
	ExcludeObjects OracleRdbmsResponse `pulumi:"excludeObjects"`
	// Oracle objects to include in the stream.
	IncludeObjects OracleRdbmsResponse `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
	MaxConcurrentBackfillTasks int `pulumi:"maxConcurrentBackfillTasks"`
	// Maximum number of concurrent CDC tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
	MaxConcurrentCdcTasks int `pulumi:"maxConcurrentCdcTasks"`
	// Stream large object values. NOTE: This feature is currently experimental.
	StreamLargeObjects StreamLargeObjectsResponse `pulumi:"streamLargeObjects"`
}

// Oracle data source configuration
type OracleSourceConfigResponseOutput struct{ *pulumi.OutputState }

func (OracleSourceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleSourceConfigResponse)(nil)).Elem()
}

func (o OracleSourceConfigResponseOutput) ToOracleSourceConfigResponseOutput() OracleSourceConfigResponseOutput {
	return o
}

func (o OracleSourceConfigResponseOutput) ToOracleSourceConfigResponseOutputWithContext(ctx context.Context) OracleSourceConfigResponseOutput {
	return o
}

// Drop large object values.
func (o OracleSourceConfigResponseOutput) DropLargeObjects() DropLargeObjectsResponseOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) DropLargeObjectsResponse { return v.DropLargeObjects }).(DropLargeObjectsResponseOutput)
}

// Oracle objects to exclude from the stream.
func (o OracleSourceConfigResponseOutput) ExcludeObjects() OracleRdbmsResponseOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) OracleRdbmsResponse { return v.ExcludeObjects }).(OracleRdbmsResponseOutput)
}

// Oracle objects to include in the stream.
func (o OracleSourceConfigResponseOutput) IncludeObjects() OracleRdbmsResponseOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) OracleRdbmsResponse { return v.IncludeObjects }).(OracleRdbmsResponseOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
func (o OracleSourceConfigResponseOutput) MaxConcurrentBackfillTasks() pulumi.IntOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntOutput)
}

// Maximum number of concurrent CDC tasks. The number should be non-negative. If not set (or set to 0), the system's default value is used.
func (o OracleSourceConfigResponseOutput) MaxConcurrentCdcTasks() pulumi.IntOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) int { return v.MaxConcurrentCdcTasks }).(pulumi.IntOutput)
}

// Stream large object values. NOTE: This feature is currently experimental.
func (o OracleSourceConfigResponseOutput) StreamLargeObjects() StreamLargeObjectsResponseOutput {
	return o.ApplyT(func(v OracleSourceConfigResponse) StreamLargeObjectsResponse { return v.StreamLargeObjects }).(StreamLargeObjectsResponseOutput)
}

// Oracle table.
type OracleTable struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	OracleColumns []OracleColumn `pulumi:"oracleColumns"`
	// Table name.
	Table *string `pulumi:"table"`
}

// OracleTableInput is an input type that accepts OracleTableArgs and OracleTableOutput values.
// You can construct a concrete instance of `OracleTableInput` via:
//
//	OracleTableArgs{...}
type OracleTableInput interface {
	pulumi.Input

	ToOracleTableOutput() OracleTableOutput
	ToOracleTableOutputWithContext(context.Context) OracleTableOutput
}

// Oracle table.
type OracleTableArgs struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	OracleColumns OracleColumnArrayInput `pulumi:"oracleColumns"`
	// Table name.
	Table pulumi.StringPtrInput `pulumi:"table"`
}

func (OracleTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTable)(nil)).Elem()
}

func (i OracleTableArgs) ToOracleTableOutput() OracleTableOutput {
	return i.ToOracleTableOutputWithContext(context.Background())
}

func (i OracleTableArgs) ToOracleTableOutputWithContext(ctx context.Context) OracleTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableOutput)
}

// OracleTableArrayInput is an input type that accepts OracleTableArray and OracleTableArrayOutput values.
// You can construct a concrete instance of `OracleTableArrayInput` via:
//
//	OracleTableArray{ OracleTableArgs{...} }
type OracleTableArrayInput interface {
	pulumi.Input

	ToOracleTableArrayOutput() OracleTableArrayOutput
	ToOracleTableArrayOutputWithContext(context.Context) OracleTableArrayOutput
}

type OracleTableArray []OracleTableInput

func (OracleTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleTable)(nil)).Elem()
}

func (i OracleTableArray) ToOracleTableArrayOutput() OracleTableArrayOutput {
	return i.ToOracleTableArrayOutputWithContext(context.Background())
}

func (i OracleTableArray) ToOracleTableArrayOutputWithContext(ctx context.Context) OracleTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OracleTableArrayOutput)
}

// Oracle table.
type OracleTableOutput struct{ *pulumi.OutputState }

func (OracleTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTable)(nil)).Elem()
}

func (o OracleTableOutput) ToOracleTableOutput() OracleTableOutput {
	return o
}

func (o OracleTableOutput) ToOracleTableOutputWithContext(ctx context.Context) OracleTableOutput {
	return o
}

// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
func (o OracleTableOutput) OracleColumns() OracleColumnArrayOutput {
	return o.ApplyT(func(v OracleTable) []OracleColumn { return v.OracleColumns }).(OracleColumnArrayOutput)
}

// Table name.
func (o OracleTableOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OracleTable) *string { return v.Table }).(pulumi.StringPtrOutput)
}

type OracleTableArrayOutput struct{ *pulumi.OutputState }

func (OracleTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleTable)(nil)).Elem()
}

func (o OracleTableArrayOutput) ToOracleTableArrayOutput() OracleTableArrayOutput {
	return o
}

func (o OracleTableArrayOutput) ToOracleTableArrayOutputWithContext(ctx context.Context) OracleTableArrayOutput {
	return o
}

func (o OracleTableArrayOutput) Index(i pulumi.IntInput) OracleTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleTable {
		return vs[0].([]OracleTable)[vs[1].(int)]
	}).(OracleTableOutput)
}

// Oracle table.
type OracleTableResponse struct {
	// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	OracleColumns []OracleColumnResponse `pulumi:"oracleColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// Oracle table.
type OracleTableResponseOutput struct{ *pulumi.OutputState }

func (OracleTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OracleTableResponse)(nil)).Elem()
}

func (o OracleTableResponseOutput) ToOracleTableResponseOutput() OracleTableResponseOutput {
	return o
}

func (o OracleTableResponseOutput) ToOracleTableResponseOutputWithContext(ctx context.Context) OracleTableResponseOutput {
	return o
}

// Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
func (o OracleTableResponseOutput) OracleColumns() OracleColumnResponseArrayOutput {
	return o.ApplyT(func(v OracleTableResponse) []OracleColumnResponse { return v.OracleColumns }).(OracleColumnResponseArrayOutput)
}

// Table name.
func (o OracleTableResponseOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v OracleTableResponse) string { return v.Table }).(pulumi.StringOutput)
}

type OracleTableResponseArrayOutput struct{ *pulumi.OutputState }

func (OracleTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OracleTableResponse)(nil)).Elem()
}

func (o OracleTableResponseArrayOutput) ToOracleTableResponseArrayOutput() OracleTableResponseArrayOutput {
	return o
}

func (o OracleTableResponseArrayOutput) ToOracleTableResponseArrayOutputWithContext(ctx context.Context) OracleTableResponseArrayOutput {
	return o
}

func (o OracleTableResponseArrayOutput) Index(i pulumi.IntInput) OracleTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OracleTableResponse {
		return vs[0].([]OracleTableResponse)[vs[1].(int)]
	}).(OracleTableResponseOutput)
}

// PostgreSQL Column.
type PostgresqlColumn struct {
	// Column name.
	Column *string `pulumi:"column"`
	// The PostgreSQL data type.
	DataType *string `pulumi:"dataType"`
	// Column length.
	Length *int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable *bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition *int `pulumi:"ordinalPosition"`
	// Column precision.
	Precision *int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey *bool `pulumi:"primaryKey"`
	// Column scale.
	Scale *int `pulumi:"scale"`
}

// PostgresqlColumnInput is an input type that accepts PostgresqlColumnArgs and PostgresqlColumnOutput values.
// You can construct a concrete instance of `PostgresqlColumnInput` via:
//
//	PostgresqlColumnArgs{...}
type PostgresqlColumnInput interface {
	pulumi.Input

	ToPostgresqlColumnOutput() PostgresqlColumnOutput
	ToPostgresqlColumnOutputWithContext(context.Context) PostgresqlColumnOutput
}

// PostgreSQL Column.
type PostgresqlColumnArgs struct {
	// Column name.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The PostgreSQL data type.
	DataType pulumi.StringPtrInput `pulumi:"dataType"`
	// Column length.
	Length pulumi.IntPtrInput `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable pulumi.BoolPtrInput `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition pulumi.IntPtrInput `pulumi:"ordinalPosition"`
	// Column precision.
	Precision pulumi.IntPtrInput `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey pulumi.BoolPtrInput `pulumi:"primaryKey"`
	// Column scale.
	Scale pulumi.IntPtrInput `pulumi:"scale"`
}

func (PostgresqlColumnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlColumn)(nil)).Elem()
}

func (i PostgresqlColumnArgs) ToPostgresqlColumnOutput() PostgresqlColumnOutput {
	return i.ToPostgresqlColumnOutputWithContext(context.Background())
}

func (i PostgresqlColumnArgs) ToPostgresqlColumnOutputWithContext(ctx context.Context) PostgresqlColumnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlColumnOutput)
}

// PostgresqlColumnArrayInput is an input type that accepts PostgresqlColumnArray and PostgresqlColumnArrayOutput values.
// You can construct a concrete instance of `PostgresqlColumnArrayInput` via:
//
//	PostgresqlColumnArray{ PostgresqlColumnArgs{...} }
type PostgresqlColumnArrayInput interface {
	pulumi.Input

	ToPostgresqlColumnArrayOutput() PostgresqlColumnArrayOutput
	ToPostgresqlColumnArrayOutputWithContext(context.Context) PostgresqlColumnArrayOutput
}

type PostgresqlColumnArray []PostgresqlColumnInput

func (PostgresqlColumnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlColumn)(nil)).Elem()
}

func (i PostgresqlColumnArray) ToPostgresqlColumnArrayOutput() PostgresqlColumnArrayOutput {
	return i.ToPostgresqlColumnArrayOutputWithContext(context.Background())
}

func (i PostgresqlColumnArray) ToPostgresqlColumnArrayOutputWithContext(ctx context.Context) PostgresqlColumnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlColumnArrayOutput)
}

// PostgreSQL Column.
type PostgresqlColumnOutput struct{ *pulumi.OutputState }

func (PostgresqlColumnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlColumn)(nil)).Elem()
}

func (o PostgresqlColumnOutput) ToPostgresqlColumnOutput() PostgresqlColumnOutput {
	return o
}

func (o PostgresqlColumnOutput) ToPostgresqlColumnOutputWithContext(ctx context.Context) PostgresqlColumnOutput {
	return o
}

// Column name.
func (o PostgresqlColumnOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The PostgreSQL data type.
func (o PostgresqlColumnOutput) DataType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *string { return v.DataType }).(pulumi.StringPtrOutput)
}

// Column length.
func (o PostgresqlColumnOutput) Length() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *int { return v.Length }).(pulumi.IntPtrOutput)
}

// Whether or not the column can accept a null value.
func (o PostgresqlColumnOutput) Nullable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *bool { return v.Nullable }).(pulumi.BoolPtrOutput)
}

// The ordinal position of the column in the table.
func (o PostgresqlColumnOutput) OrdinalPosition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *int { return v.OrdinalPosition }).(pulumi.IntPtrOutput)
}

// Column precision.
func (o PostgresqlColumnOutput) Precision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *int { return v.Precision }).(pulumi.IntPtrOutput)
}

// Whether or not the column represents a primary key.
func (o PostgresqlColumnOutput) PrimaryKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *bool { return v.PrimaryKey }).(pulumi.BoolPtrOutput)
}

// Column scale.
func (o PostgresqlColumnOutput) Scale() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresqlColumn) *int { return v.Scale }).(pulumi.IntPtrOutput)
}

type PostgresqlColumnArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlColumnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlColumn)(nil)).Elem()
}

func (o PostgresqlColumnArrayOutput) ToPostgresqlColumnArrayOutput() PostgresqlColumnArrayOutput {
	return o
}

func (o PostgresqlColumnArrayOutput) ToPostgresqlColumnArrayOutputWithContext(ctx context.Context) PostgresqlColumnArrayOutput {
	return o
}

func (o PostgresqlColumnArrayOutput) Index(i pulumi.IntInput) PostgresqlColumnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresqlColumn {
		return vs[0].([]PostgresqlColumn)[vs[1].(int)]
	}).(PostgresqlColumnOutput)
}

// PostgreSQL Column.
type PostgresqlColumnResponse struct {
	// Column name.
	Column string `pulumi:"column"`
	// The PostgreSQL data type.
	DataType string `pulumi:"dataType"`
	// Column length.
	Length int `pulumi:"length"`
	// Whether or not the column can accept a null value.
	Nullable bool `pulumi:"nullable"`
	// The ordinal position of the column in the table.
	OrdinalPosition int `pulumi:"ordinalPosition"`
	// Column precision.
	Precision int `pulumi:"precision"`
	// Whether or not the column represents a primary key.
	PrimaryKey bool `pulumi:"primaryKey"`
	// Column scale.
	Scale int `pulumi:"scale"`
}

// PostgreSQL Column.
type PostgresqlColumnResponseOutput struct{ *pulumi.OutputState }

func (PostgresqlColumnResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlColumnResponse)(nil)).Elem()
}

func (o PostgresqlColumnResponseOutput) ToPostgresqlColumnResponseOutput() PostgresqlColumnResponseOutput {
	return o
}

func (o PostgresqlColumnResponseOutput) ToPostgresqlColumnResponseOutputWithContext(ctx context.Context) PostgresqlColumnResponseOutput {
	return o
}

// Column name.
func (o PostgresqlColumnResponseOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) string { return v.Column }).(pulumi.StringOutput)
}

// The PostgreSQL data type.
func (o PostgresqlColumnResponseOutput) DataType() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) string { return v.DataType }).(pulumi.StringOutput)
}

// Column length.
func (o PostgresqlColumnResponseOutput) Length() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) int { return v.Length }).(pulumi.IntOutput)
}

// Whether or not the column can accept a null value.
func (o PostgresqlColumnResponseOutput) Nullable() pulumi.BoolOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) bool { return v.Nullable }).(pulumi.BoolOutput)
}

// The ordinal position of the column in the table.
func (o PostgresqlColumnResponseOutput) OrdinalPosition() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) int { return v.OrdinalPosition }).(pulumi.IntOutput)
}

// Column precision.
func (o PostgresqlColumnResponseOutput) Precision() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) int { return v.Precision }).(pulumi.IntOutput)
}

// Whether or not the column represents a primary key.
func (o PostgresqlColumnResponseOutput) PrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) bool { return v.PrimaryKey }).(pulumi.BoolOutput)
}

// Column scale.
func (o PostgresqlColumnResponseOutput) Scale() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresqlColumnResponse) int { return v.Scale }).(pulumi.IntOutput)
}

type PostgresqlColumnResponseArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlColumnResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlColumnResponse)(nil)).Elem()
}

func (o PostgresqlColumnResponseArrayOutput) ToPostgresqlColumnResponseArrayOutput() PostgresqlColumnResponseArrayOutput {
	return o
}

func (o PostgresqlColumnResponseArrayOutput) ToPostgresqlColumnResponseArrayOutputWithContext(ctx context.Context) PostgresqlColumnResponseArrayOutput {
	return o
}

func (o PostgresqlColumnResponseArrayOutput) Index(i pulumi.IntInput) PostgresqlColumnResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresqlColumnResponse {
		return vs[0].([]PostgresqlColumnResponse)[vs[1].(int)]
	}).(PostgresqlColumnResponseOutput)
}

// PostgreSQL database profile.
type PostgresqlProfile struct {
	// Database for the PostgreSQL connection.
	Database string `pulumi:"database"`
	// Hostname for the PostgreSQL connection.
	Hostname string `pulumi:"hostname"`
	// Password for the PostgreSQL connection.
	Password string `pulumi:"password"`
	// Port for the PostgreSQL connection, default value is 5432.
	Port *int `pulumi:"port"`
	// Username for the PostgreSQL connection.
	Username string `pulumi:"username"`
}

// PostgresqlProfileInput is an input type that accepts PostgresqlProfileArgs and PostgresqlProfileOutput values.
// You can construct a concrete instance of `PostgresqlProfileInput` via:
//
//	PostgresqlProfileArgs{...}
type PostgresqlProfileInput interface {
	pulumi.Input

	ToPostgresqlProfileOutput() PostgresqlProfileOutput
	ToPostgresqlProfileOutputWithContext(context.Context) PostgresqlProfileOutput
}

// PostgreSQL database profile.
type PostgresqlProfileArgs struct {
	// Database for the PostgreSQL connection.
	Database pulumi.StringInput `pulumi:"database"`
	// Hostname for the PostgreSQL connection.
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// Password for the PostgreSQL connection.
	Password pulumi.StringInput `pulumi:"password"`
	// Port for the PostgreSQL connection, default value is 5432.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Username for the PostgreSQL connection.
	Username pulumi.StringInput `pulumi:"username"`
}

func (PostgresqlProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlProfile)(nil)).Elem()
}

func (i PostgresqlProfileArgs) ToPostgresqlProfileOutput() PostgresqlProfileOutput {
	return i.ToPostgresqlProfileOutputWithContext(context.Background())
}

func (i PostgresqlProfileArgs) ToPostgresqlProfileOutputWithContext(ctx context.Context) PostgresqlProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlProfileOutput)
}

func (i PostgresqlProfileArgs) ToPostgresqlProfilePtrOutput() PostgresqlProfilePtrOutput {
	return i.ToPostgresqlProfilePtrOutputWithContext(context.Background())
}

func (i PostgresqlProfileArgs) ToPostgresqlProfilePtrOutputWithContext(ctx context.Context) PostgresqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlProfileOutput).ToPostgresqlProfilePtrOutputWithContext(ctx)
}

// PostgresqlProfilePtrInput is an input type that accepts PostgresqlProfileArgs, PostgresqlProfilePtr and PostgresqlProfilePtrOutput values.
// You can construct a concrete instance of `PostgresqlProfilePtrInput` via:
//
//	        PostgresqlProfileArgs{...}
//
//	or:
//
//	        nil
type PostgresqlProfilePtrInput interface {
	pulumi.Input

	ToPostgresqlProfilePtrOutput() PostgresqlProfilePtrOutput
	ToPostgresqlProfilePtrOutputWithContext(context.Context) PostgresqlProfilePtrOutput
}

type postgresqlProfilePtrType PostgresqlProfileArgs

func PostgresqlProfilePtr(v *PostgresqlProfileArgs) PostgresqlProfilePtrInput {
	return (*postgresqlProfilePtrType)(v)
}

func (*postgresqlProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlProfile)(nil)).Elem()
}

func (i *postgresqlProfilePtrType) ToPostgresqlProfilePtrOutput() PostgresqlProfilePtrOutput {
	return i.ToPostgresqlProfilePtrOutputWithContext(context.Background())
}

func (i *postgresqlProfilePtrType) ToPostgresqlProfilePtrOutputWithContext(ctx context.Context) PostgresqlProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlProfilePtrOutput)
}

// PostgreSQL database profile.
type PostgresqlProfileOutput struct{ *pulumi.OutputState }

func (PostgresqlProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlProfile)(nil)).Elem()
}

func (o PostgresqlProfileOutput) ToPostgresqlProfileOutput() PostgresqlProfileOutput {
	return o
}

func (o PostgresqlProfileOutput) ToPostgresqlProfileOutputWithContext(ctx context.Context) PostgresqlProfileOutput {
	return o
}

func (o PostgresqlProfileOutput) ToPostgresqlProfilePtrOutput() PostgresqlProfilePtrOutput {
	return o.ToPostgresqlProfilePtrOutputWithContext(context.Background())
}

func (o PostgresqlProfileOutput) ToPostgresqlProfilePtrOutputWithContext(ctx context.Context) PostgresqlProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresqlProfile) *PostgresqlProfile {
		return &v
	}).(PostgresqlProfilePtrOutput)
}

// Database for the PostgreSQL connection.
func (o PostgresqlProfileOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfile) string { return v.Database }).(pulumi.StringOutput)
}

// Hostname for the PostgreSQL connection.
func (o PostgresqlProfileOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfile) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the PostgreSQL connection.
func (o PostgresqlProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfile) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the PostgreSQL connection, default value is 5432.
func (o PostgresqlProfileOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresqlProfile) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Username for the PostgreSQL connection.
func (o PostgresqlProfileOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfile) string { return v.Username }).(pulumi.StringOutput)
}

type PostgresqlProfilePtrOutput struct{ *pulumi.OutputState }

func (PostgresqlProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlProfile)(nil)).Elem()
}

func (o PostgresqlProfilePtrOutput) ToPostgresqlProfilePtrOutput() PostgresqlProfilePtrOutput {
	return o
}

func (o PostgresqlProfilePtrOutput) ToPostgresqlProfilePtrOutputWithContext(ctx context.Context) PostgresqlProfilePtrOutput {
	return o
}

func (o PostgresqlProfilePtrOutput) Elem() PostgresqlProfileOutput {
	return o.ApplyT(func(v *PostgresqlProfile) PostgresqlProfile {
		if v != nil {
			return *v
		}
		var ret PostgresqlProfile
		return ret
	}).(PostgresqlProfileOutput)
}

// Database for the PostgreSQL connection.
func (o PostgresqlProfilePtrOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Database
	}).(pulumi.StringPtrOutput)
}

// Hostname for the PostgreSQL connection.
func (o PostgresqlProfilePtrOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Hostname
	}).(pulumi.StringPtrOutput)
}

// Password for the PostgreSQL connection.
func (o PostgresqlProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Port for the PostgreSQL connection, default value is 5432.
func (o PostgresqlProfilePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresqlProfile) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Username for the PostgreSQL connection.
func (o PostgresqlProfilePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlProfile) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL database profile.
type PostgresqlProfileResponse struct {
	// Database for the PostgreSQL connection.
	Database string `pulumi:"database"`
	// Hostname for the PostgreSQL connection.
	Hostname string `pulumi:"hostname"`
	// Password for the PostgreSQL connection.
	Password string `pulumi:"password"`
	// Port for the PostgreSQL connection, default value is 5432.
	Port int `pulumi:"port"`
	// Username for the PostgreSQL connection.
	Username string `pulumi:"username"`
}

// PostgreSQL database profile.
type PostgresqlProfileResponseOutput struct{ *pulumi.OutputState }

func (PostgresqlProfileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlProfileResponse)(nil)).Elem()
}

func (o PostgresqlProfileResponseOutput) ToPostgresqlProfileResponseOutput() PostgresqlProfileResponseOutput {
	return o
}

func (o PostgresqlProfileResponseOutput) ToPostgresqlProfileResponseOutputWithContext(ctx context.Context) PostgresqlProfileResponseOutput {
	return o
}

// Database for the PostgreSQL connection.
func (o PostgresqlProfileResponseOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfileResponse) string { return v.Database }).(pulumi.StringOutput)
}

// Hostname for the PostgreSQL connection.
func (o PostgresqlProfileResponseOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfileResponse) string { return v.Hostname }).(pulumi.StringOutput)
}

// Password for the PostgreSQL connection.
func (o PostgresqlProfileResponseOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfileResponse) string { return v.Password }).(pulumi.StringOutput)
}

// Port for the PostgreSQL connection, default value is 5432.
func (o PostgresqlProfileResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresqlProfileResponse) int { return v.Port }).(pulumi.IntOutput)
}

// Username for the PostgreSQL connection.
func (o PostgresqlProfileResponseOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlProfileResponse) string { return v.Username }).(pulumi.StringOutput)
}

// PostgreSQL database structure.
type PostgresqlRdbms struct {
	// PostgreSQL schemas in the database server.
	PostgresqlSchemas []PostgresqlSchema `pulumi:"postgresqlSchemas"`
}

// PostgresqlRdbmsInput is an input type that accepts PostgresqlRdbmsArgs and PostgresqlRdbmsOutput values.
// You can construct a concrete instance of `PostgresqlRdbmsInput` via:
//
//	PostgresqlRdbmsArgs{...}
type PostgresqlRdbmsInput interface {
	pulumi.Input

	ToPostgresqlRdbmsOutput() PostgresqlRdbmsOutput
	ToPostgresqlRdbmsOutputWithContext(context.Context) PostgresqlRdbmsOutput
}

// PostgreSQL database structure.
type PostgresqlRdbmsArgs struct {
	// PostgreSQL schemas in the database server.
	PostgresqlSchemas PostgresqlSchemaArrayInput `pulumi:"postgresqlSchemas"`
}

func (PostgresqlRdbmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlRdbms)(nil)).Elem()
}

func (i PostgresqlRdbmsArgs) ToPostgresqlRdbmsOutput() PostgresqlRdbmsOutput {
	return i.ToPostgresqlRdbmsOutputWithContext(context.Background())
}

func (i PostgresqlRdbmsArgs) ToPostgresqlRdbmsOutputWithContext(ctx context.Context) PostgresqlRdbmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlRdbmsOutput)
}

func (i PostgresqlRdbmsArgs) ToPostgresqlRdbmsPtrOutput() PostgresqlRdbmsPtrOutput {
	return i.ToPostgresqlRdbmsPtrOutputWithContext(context.Background())
}

func (i PostgresqlRdbmsArgs) ToPostgresqlRdbmsPtrOutputWithContext(ctx context.Context) PostgresqlRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlRdbmsOutput).ToPostgresqlRdbmsPtrOutputWithContext(ctx)
}

// PostgresqlRdbmsPtrInput is an input type that accepts PostgresqlRdbmsArgs, PostgresqlRdbmsPtr and PostgresqlRdbmsPtrOutput values.
// You can construct a concrete instance of `PostgresqlRdbmsPtrInput` via:
//
//	        PostgresqlRdbmsArgs{...}
//
//	or:
//
//	        nil
type PostgresqlRdbmsPtrInput interface {
	pulumi.Input

	ToPostgresqlRdbmsPtrOutput() PostgresqlRdbmsPtrOutput
	ToPostgresqlRdbmsPtrOutputWithContext(context.Context) PostgresqlRdbmsPtrOutput
}

type postgresqlRdbmsPtrType PostgresqlRdbmsArgs

func PostgresqlRdbmsPtr(v *PostgresqlRdbmsArgs) PostgresqlRdbmsPtrInput {
	return (*postgresqlRdbmsPtrType)(v)
}

func (*postgresqlRdbmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlRdbms)(nil)).Elem()
}

func (i *postgresqlRdbmsPtrType) ToPostgresqlRdbmsPtrOutput() PostgresqlRdbmsPtrOutput {
	return i.ToPostgresqlRdbmsPtrOutputWithContext(context.Background())
}

func (i *postgresqlRdbmsPtrType) ToPostgresqlRdbmsPtrOutputWithContext(ctx context.Context) PostgresqlRdbmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlRdbmsPtrOutput)
}

// PostgreSQL database structure.
type PostgresqlRdbmsOutput struct{ *pulumi.OutputState }

func (PostgresqlRdbmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlRdbms)(nil)).Elem()
}

func (o PostgresqlRdbmsOutput) ToPostgresqlRdbmsOutput() PostgresqlRdbmsOutput {
	return o
}

func (o PostgresqlRdbmsOutput) ToPostgresqlRdbmsOutputWithContext(ctx context.Context) PostgresqlRdbmsOutput {
	return o
}

func (o PostgresqlRdbmsOutput) ToPostgresqlRdbmsPtrOutput() PostgresqlRdbmsPtrOutput {
	return o.ToPostgresqlRdbmsPtrOutputWithContext(context.Background())
}

func (o PostgresqlRdbmsOutput) ToPostgresqlRdbmsPtrOutputWithContext(ctx context.Context) PostgresqlRdbmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresqlRdbms) *PostgresqlRdbms {
		return &v
	}).(PostgresqlRdbmsPtrOutput)
}

// PostgreSQL schemas in the database server.
func (o PostgresqlRdbmsOutput) PostgresqlSchemas() PostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v PostgresqlRdbms) []PostgresqlSchema { return v.PostgresqlSchemas }).(PostgresqlSchemaArrayOutput)
}

type PostgresqlRdbmsPtrOutput struct{ *pulumi.OutputState }

func (PostgresqlRdbmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlRdbms)(nil)).Elem()
}

func (o PostgresqlRdbmsPtrOutput) ToPostgresqlRdbmsPtrOutput() PostgresqlRdbmsPtrOutput {
	return o
}

func (o PostgresqlRdbmsPtrOutput) ToPostgresqlRdbmsPtrOutputWithContext(ctx context.Context) PostgresqlRdbmsPtrOutput {
	return o
}

func (o PostgresqlRdbmsPtrOutput) Elem() PostgresqlRdbmsOutput {
	return o.ApplyT(func(v *PostgresqlRdbms) PostgresqlRdbms {
		if v != nil {
			return *v
		}
		var ret PostgresqlRdbms
		return ret
	}).(PostgresqlRdbmsOutput)
}

// PostgreSQL schemas in the database server.
func (o PostgresqlRdbmsPtrOutput) PostgresqlSchemas() PostgresqlSchemaArrayOutput {
	return o.ApplyT(func(v *PostgresqlRdbms) []PostgresqlSchema {
		if v == nil {
			return nil
		}
		return v.PostgresqlSchemas
	}).(PostgresqlSchemaArrayOutput)
}

// PostgreSQL database structure.
type PostgresqlRdbmsResponse struct {
	// PostgreSQL schemas in the database server.
	PostgresqlSchemas []PostgresqlSchemaResponse `pulumi:"postgresqlSchemas"`
}

// PostgreSQL database structure.
type PostgresqlRdbmsResponseOutput struct{ *pulumi.OutputState }

func (PostgresqlRdbmsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlRdbmsResponse)(nil)).Elem()
}

func (o PostgresqlRdbmsResponseOutput) ToPostgresqlRdbmsResponseOutput() PostgresqlRdbmsResponseOutput {
	return o
}

func (o PostgresqlRdbmsResponseOutput) ToPostgresqlRdbmsResponseOutputWithContext(ctx context.Context) PostgresqlRdbmsResponseOutput {
	return o
}

// PostgreSQL schemas in the database server.
func (o PostgresqlRdbmsResponseOutput) PostgresqlSchemas() PostgresqlSchemaResponseArrayOutput {
	return o.ApplyT(func(v PostgresqlRdbmsResponse) []PostgresqlSchemaResponse { return v.PostgresqlSchemas }).(PostgresqlSchemaResponseArrayOutput)
}

// PostgreSQL schema.
type PostgresqlSchema struct {
	// Tables in the schema.
	PostgresqlTables []PostgresqlTable `pulumi:"postgresqlTables"`
	// Schema name.
	Schema *string `pulumi:"schema"`
}

// PostgresqlSchemaInput is an input type that accepts PostgresqlSchemaArgs and PostgresqlSchemaOutput values.
// You can construct a concrete instance of `PostgresqlSchemaInput` via:
//
//	PostgresqlSchemaArgs{...}
type PostgresqlSchemaInput interface {
	pulumi.Input

	ToPostgresqlSchemaOutput() PostgresqlSchemaOutput
	ToPostgresqlSchemaOutputWithContext(context.Context) PostgresqlSchemaOutput
}

// PostgreSQL schema.
type PostgresqlSchemaArgs struct {
	// Tables in the schema.
	PostgresqlTables PostgresqlTableArrayInput `pulumi:"postgresqlTables"`
	// Schema name.
	Schema pulumi.StringPtrInput `pulumi:"schema"`
}

func (PostgresqlSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlSchema)(nil)).Elem()
}

func (i PostgresqlSchemaArgs) ToPostgresqlSchemaOutput() PostgresqlSchemaOutput {
	return i.ToPostgresqlSchemaOutputWithContext(context.Background())
}

func (i PostgresqlSchemaArgs) ToPostgresqlSchemaOutputWithContext(ctx context.Context) PostgresqlSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlSchemaOutput)
}

// PostgresqlSchemaArrayInput is an input type that accepts PostgresqlSchemaArray and PostgresqlSchemaArrayOutput values.
// You can construct a concrete instance of `PostgresqlSchemaArrayInput` via:
//
//	PostgresqlSchemaArray{ PostgresqlSchemaArgs{...} }
type PostgresqlSchemaArrayInput interface {
	pulumi.Input

	ToPostgresqlSchemaArrayOutput() PostgresqlSchemaArrayOutput
	ToPostgresqlSchemaArrayOutputWithContext(context.Context) PostgresqlSchemaArrayOutput
}

type PostgresqlSchemaArray []PostgresqlSchemaInput

func (PostgresqlSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlSchema)(nil)).Elem()
}

func (i PostgresqlSchemaArray) ToPostgresqlSchemaArrayOutput() PostgresqlSchemaArrayOutput {
	return i.ToPostgresqlSchemaArrayOutputWithContext(context.Background())
}

func (i PostgresqlSchemaArray) ToPostgresqlSchemaArrayOutputWithContext(ctx context.Context) PostgresqlSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlSchemaArrayOutput)
}

// PostgreSQL schema.
type PostgresqlSchemaOutput struct{ *pulumi.OutputState }

func (PostgresqlSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlSchema)(nil)).Elem()
}

func (o PostgresqlSchemaOutput) ToPostgresqlSchemaOutput() PostgresqlSchemaOutput {
	return o
}

func (o PostgresqlSchemaOutput) ToPostgresqlSchemaOutputWithContext(ctx context.Context) PostgresqlSchemaOutput {
	return o
}

// Tables in the schema.
func (o PostgresqlSchemaOutput) PostgresqlTables() PostgresqlTableArrayOutput {
	return o.ApplyT(func(v PostgresqlSchema) []PostgresqlTable { return v.PostgresqlTables }).(PostgresqlTableArrayOutput)
}

// Schema name.
func (o PostgresqlSchemaOutput) Schema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresqlSchema) *string { return v.Schema }).(pulumi.StringPtrOutput)
}

type PostgresqlSchemaArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlSchema)(nil)).Elem()
}

func (o PostgresqlSchemaArrayOutput) ToPostgresqlSchemaArrayOutput() PostgresqlSchemaArrayOutput {
	return o
}

func (o PostgresqlSchemaArrayOutput) ToPostgresqlSchemaArrayOutputWithContext(ctx context.Context) PostgresqlSchemaArrayOutput {
	return o
}

func (o PostgresqlSchemaArrayOutput) Index(i pulumi.IntInput) PostgresqlSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresqlSchema {
		return vs[0].([]PostgresqlSchema)[vs[1].(int)]
	}).(PostgresqlSchemaOutput)
}

// PostgreSQL schema.
type PostgresqlSchemaResponse struct {
	// Tables in the schema.
	PostgresqlTables []PostgresqlTableResponse `pulumi:"postgresqlTables"`
	// Schema name.
	Schema string `pulumi:"schema"`
}

// PostgreSQL schema.
type PostgresqlSchemaResponseOutput struct{ *pulumi.OutputState }

func (PostgresqlSchemaResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlSchemaResponse)(nil)).Elem()
}

func (o PostgresqlSchemaResponseOutput) ToPostgresqlSchemaResponseOutput() PostgresqlSchemaResponseOutput {
	return o
}

func (o PostgresqlSchemaResponseOutput) ToPostgresqlSchemaResponseOutputWithContext(ctx context.Context) PostgresqlSchemaResponseOutput {
	return o
}

// Tables in the schema.
func (o PostgresqlSchemaResponseOutput) PostgresqlTables() PostgresqlTableResponseArrayOutput {
	return o.ApplyT(func(v PostgresqlSchemaResponse) []PostgresqlTableResponse { return v.PostgresqlTables }).(PostgresqlTableResponseArrayOutput)
}

// Schema name.
func (o PostgresqlSchemaResponseOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlSchemaResponse) string { return v.Schema }).(pulumi.StringOutput)
}

type PostgresqlSchemaResponseArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlSchemaResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlSchemaResponse)(nil)).Elem()
}

func (o PostgresqlSchemaResponseArrayOutput) ToPostgresqlSchemaResponseArrayOutput() PostgresqlSchemaResponseArrayOutput {
	return o
}

func (o PostgresqlSchemaResponseArrayOutput) ToPostgresqlSchemaResponseArrayOutputWithContext(ctx context.Context) PostgresqlSchemaResponseArrayOutput {
	return o
}

func (o PostgresqlSchemaResponseArrayOutput) Index(i pulumi.IntInput) PostgresqlSchemaResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresqlSchemaResponse {
		return vs[0].([]PostgresqlSchemaResponse)[vs[1].(int)]
	}).(PostgresqlSchemaResponseOutput)
}

// PostgreSQL data source configuration
type PostgresqlSourceConfig struct {
	// PostgreSQL objects to exclude from the stream.
	ExcludeObjects *PostgresqlRdbms `pulumi:"excludeObjects"`
	// PostgreSQL objects to include in the stream.
	IncludeObjects *PostgresqlRdbms `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks *int `pulumi:"maxConcurrentBackfillTasks"`
	// The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
	Publication string `pulumi:"publication"`
	// Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
	ReplicationSlot string `pulumi:"replicationSlot"`
}

// PostgresqlSourceConfigInput is an input type that accepts PostgresqlSourceConfigArgs and PostgresqlSourceConfigOutput values.
// You can construct a concrete instance of `PostgresqlSourceConfigInput` via:
//
//	PostgresqlSourceConfigArgs{...}
type PostgresqlSourceConfigInput interface {
	pulumi.Input

	ToPostgresqlSourceConfigOutput() PostgresqlSourceConfigOutput
	ToPostgresqlSourceConfigOutputWithContext(context.Context) PostgresqlSourceConfigOutput
}

// PostgreSQL data source configuration
type PostgresqlSourceConfigArgs struct {
	// PostgreSQL objects to exclude from the stream.
	ExcludeObjects PostgresqlRdbmsPtrInput `pulumi:"excludeObjects"`
	// PostgreSQL objects to include in the stream.
	IncludeObjects PostgresqlRdbmsPtrInput `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks pulumi.IntPtrInput `pulumi:"maxConcurrentBackfillTasks"`
	// The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
	Publication pulumi.StringInput `pulumi:"publication"`
	// Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
	ReplicationSlot pulumi.StringInput `pulumi:"replicationSlot"`
}

func (PostgresqlSourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlSourceConfig)(nil)).Elem()
}

func (i PostgresqlSourceConfigArgs) ToPostgresqlSourceConfigOutput() PostgresqlSourceConfigOutput {
	return i.ToPostgresqlSourceConfigOutputWithContext(context.Background())
}

func (i PostgresqlSourceConfigArgs) ToPostgresqlSourceConfigOutputWithContext(ctx context.Context) PostgresqlSourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlSourceConfigOutput)
}

func (i PostgresqlSourceConfigArgs) ToPostgresqlSourceConfigPtrOutput() PostgresqlSourceConfigPtrOutput {
	return i.ToPostgresqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i PostgresqlSourceConfigArgs) ToPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) PostgresqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlSourceConfigOutput).ToPostgresqlSourceConfigPtrOutputWithContext(ctx)
}

// PostgresqlSourceConfigPtrInput is an input type that accepts PostgresqlSourceConfigArgs, PostgresqlSourceConfigPtr and PostgresqlSourceConfigPtrOutput values.
// You can construct a concrete instance of `PostgresqlSourceConfigPtrInput` via:
//
//	        PostgresqlSourceConfigArgs{...}
//
//	or:
//
//	        nil
type PostgresqlSourceConfigPtrInput interface {
	pulumi.Input

	ToPostgresqlSourceConfigPtrOutput() PostgresqlSourceConfigPtrOutput
	ToPostgresqlSourceConfigPtrOutputWithContext(context.Context) PostgresqlSourceConfigPtrOutput
}

type postgresqlSourceConfigPtrType PostgresqlSourceConfigArgs

func PostgresqlSourceConfigPtr(v *PostgresqlSourceConfigArgs) PostgresqlSourceConfigPtrInput {
	return (*postgresqlSourceConfigPtrType)(v)
}

func (*postgresqlSourceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlSourceConfig)(nil)).Elem()
}

func (i *postgresqlSourceConfigPtrType) ToPostgresqlSourceConfigPtrOutput() PostgresqlSourceConfigPtrOutput {
	return i.ToPostgresqlSourceConfigPtrOutputWithContext(context.Background())
}

func (i *postgresqlSourceConfigPtrType) ToPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) PostgresqlSourceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlSourceConfigPtrOutput)
}

// PostgreSQL data source configuration
type PostgresqlSourceConfigOutput struct{ *pulumi.OutputState }

func (PostgresqlSourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlSourceConfig)(nil)).Elem()
}

func (o PostgresqlSourceConfigOutput) ToPostgresqlSourceConfigOutput() PostgresqlSourceConfigOutput {
	return o
}

func (o PostgresqlSourceConfigOutput) ToPostgresqlSourceConfigOutputWithContext(ctx context.Context) PostgresqlSourceConfigOutput {
	return o
}

func (o PostgresqlSourceConfigOutput) ToPostgresqlSourceConfigPtrOutput() PostgresqlSourceConfigPtrOutput {
	return o.ToPostgresqlSourceConfigPtrOutputWithContext(context.Background())
}

func (o PostgresqlSourceConfigOutput) ToPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) PostgresqlSourceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PostgresqlSourceConfig) *PostgresqlSourceConfig {
		return &v
	}).(PostgresqlSourceConfigPtrOutput)
}

// PostgreSQL objects to exclude from the stream.
func (o PostgresqlSourceConfigOutput) ExcludeObjects() PostgresqlRdbmsPtrOutput {
	return o.ApplyT(func(v PostgresqlSourceConfig) *PostgresqlRdbms { return v.ExcludeObjects }).(PostgresqlRdbmsPtrOutput)
}

// PostgreSQL objects to include in the stream.
func (o PostgresqlSourceConfigOutput) IncludeObjects() PostgresqlRdbmsPtrOutput {
	return o.ApplyT(func(v PostgresqlSourceConfig) *PostgresqlRdbms { return v.IncludeObjects }).(PostgresqlRdbmsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o PostgresqlSourceConfigOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PostgresqlSourceConfig) *int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntPtrOutput)
}

// The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
func (o PostgresqlSourceConfigOutput) Publication() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlSourceConfig) string { return v.Publication }).(pulumi.StringOutput)
}

// Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
func (o PostgresqlSourceConfigOutput) ReplicationSlot() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlSourceConfig) string { return v.ReplicationSlot }).(pulumi.StringOutput)
}

type PostgresqlSourceConfigPtrOutput struct{ *pulumi.OutputState }

func (PostgresqlSourceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresqlSourceConfig)(nil)).Elem()
}

func (o PostgresqlSourceConfigPtrOutput) ToPostgresqlSourceConfigPtrOutput() PostgresqlSourceConfigPtrOutput {
	return o
}

func (o PostgresqlSourceConfigPtrOutput) ToPostgresqlSourceConfigPtrOutputWithContext(ctx context.Context) PostgresqlSourceConfigPtrOutput {
	return o
}

func (o PostgresqlSourceConfigPtrOutput) Elem() PostgresqlSourceConfigOutput {
	return o.ApplyT(func(v *PostgresqlSourceConfig) PostgresqlSourceConfig {
		if v != nil {
			return *v
		}
		var ret PostgresqlSourceConfig
		return ret
	}).(PostgresqlSourceConfigOutput)
}

// PostgreSQL objects to exclude from the stream.
func (o PostgresqlSourceConfigPtrOutput) ExcludeObjects() PostgresqlRdbmsPtrOutput {
	return o.ApplyT(func(v *PostgresqlSourceConfig) *PostgresqlRdbms {
		if v == nil {
			return nil
		}
		return v.ExcludeObjects
	}).(PostgresqlRdbmsPtrOutput)
}

// PostgreSQL objects to include in the stream.
func (o PostgresqlSourceConfigPtrOutput) IncludeObjects() PostgresqlRdbmsPtrOutput {
	return o.ApplyT(func(v *PostgresqlSourceConfig) *PostgresqlRdbms {
		if v == nil {
			return nil
		}
		return v.IncludeObjects
	}).(PostgresqlRdbmsPtrOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o PostgresqlSourceConfigPtrOutput) MaxConcurrentBackfillTasks() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PostgresqlSourceConfig) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrentBackfillTasks
	}).(pulumi.IntPtrOutput)
}

// The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
func (o PostgresqlSourceConfigPtrOutput) Publication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Publication
	}).(pulumi.StringPtrOutput)
}

// Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
func (o PostgresqlSourceConfigPtrOutput) ReplicationSlot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostgresqlSourceConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ReplicationSlot
	}).(pulumi.StringPtrOutput)
}

// PostgreSQL data source configuration
type PostgresqlSourceConfigResponse struct {
	// PostgreSQL objects to exclude from the stream.
	ExcludeObjects PostgresqlRdbmsResponse `pulumi:"excludeObjects"`
	// PostgreSQL objects to include in the stream.
	IncludeObjects PostgresqlRdbmsResponse `pulumi:"includeObjects"`
	// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
	MaxConcurrentBackfillTasks int `pulumi:"maxConcurrentBackfillTasks"`
	// The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
	Publication string `pulumi:"publication"`
	// Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
	ReplicationSlot string `pulumi:"replicationSlot"`
}

// PostgreSQL data source configuration
type PostgresqlSourceConfigResponseOutput struct{ *pulumi.OutputState }

func (PostgresqlSourceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlSourceConfigResponse)(nil)).Elem()
}

func (o PostgresqlSourceConfigResponseOutput) ToPostgresqlSourceConfigResponseOutput() PostgresqlSourceConfigResponseOutput {
	return o
}

func (o PostgresqlSourceConfigResponseOutput) ToPostgresqlSourceConfigResponseOutputWithContext(ctx context.Context) PostgresqlSourceConfigResponseOutput {
	return o
}

// PostgreSQL objects to exclude from the stream.
func (o PostgresqlSourceConfigResponseOutput) ExcludeObjects() PostgresqlRdbmsResponseOutput {
	return o.ApplyT(func(v PostgresqlSourceConfigResponse) PostgresqlRdbmsResponse { return v.ExcludeObjects }).(PostgresqlRdbmsResponseOutput)
}

// PostgreSQL objects to include in the stream.
func (o PostgresqlSourceConfigResponseOutput) IncludeObjects() PostgresqlRdbmsResponseOutput {
	return o.ApplyT(func(v PostgresqlSourceConfigResponse) PostgresqlRdbmsResponse { return v.IncludeObjects }).(PostgresqlRdbmsResponseOutput)
}

// Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
func (o PostgresqlSourceConfigResponseOutput) MaxConcurrentBackfillTasks() pulumi.IntOutput {
	return o.ApplyT(func(v PostgresqlSourceConfigResponse) int { return v.MaxConcurrentBackfillTasks }).(pulumi.IntOutput)
}

// The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
func (o PostgresqlSourceConfigResponseOutput) Publication() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlSourceConfigResponse) string { return v.Publication }).(pulumi.StringOutput)
}

// Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
func (o PostgresqlSourceConfigResponseOutput) ReplicationSlot() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlSourceConfigResponse) string { return v.ReplicationSlot }).(pulumi.StringOutput)
}

// PostgreSQL table.
type PostgresqlTable struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	PostgresqlColumns []PostgresqlColumn `pulumi:"postgresqlColumns"`
	// Table name.
	Table *string `pulumi:"table"`
}

// PostgresqlTableInput is an input type that accepts PostgresqlTableArgs and PostgresqlTableOutput values.
// You can construct a concrete instance of `PostgresqlTableInput` via:
//
//	PostgresqlTableArgs{...}
type PostgresqlTableInput interface {
	pulumi.Input

	ToPostgresqlTableOutput() PostgresqlTableOutput
	ToPostgresqlTableOutputWithContext(context.Context) PostgresqlTableOutput
}

// PostgreSQL table.
type PostgresqlTableArgs struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	PostgresqlColumns PostgresqlColumnArrayInput `pulumi:"postgresqlColumns"`
	// Table name.
	Table pulumi.StringPtrInput `pulumi:"table"`
}

func (PostgresqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlTable)(nil)).Elem()
}

func (i PostgresqlTableArgs) ToPostgresqlTableOutput() PostgresqlTableOutput {
	return i.ToPostgresqlTableOutputWithContext(context.Background())
}

func (i PostgresqlTableArgs) ToPostgresqlTableOutputWithContext(ctx context.Context) PostgresqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlTableOutput)
}

// PostgresqlTableArrayInput is an input type that accepts PostgresqlTableArray and PostgresqlTableArrayOutput values.
// You can construct a concrete instance of `PostgresqlTableArrayInput` via:
//
//	PostgresqlTableArray{ PostgresqlTableArgs{...} }
type PostgresqlTableArrayInput interface {
	pulumi.Input

	ToPostgresqlTableArrayOutput() PostgresqlTableArrayOutput
	ToPostgresqlTableArrayOutputWithContext(context.Context) PostgresqlTableArrayOutput
}

type PostgresqlTableArray []PostgresqlTableInput

func (PostgresqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlTable)(nil)).Elem()
}

func (i PostgresqlTableArray) ToPostgresqlTableArrayOutput() PostgresqlTableArrayOutput {
	return i.ToPostgresqlTableArrayOutputWithContext(context.Background())
}

func (i PostgresqlTableArray) ToPostgresqlTableArrayOutputWithContext(ctx context.Context) PostgresqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresqlTableArrayOutput)
}

// PostgreSQL table.
type PostgresqlTableOutput struct{ *pulumi.OutputState }

func (PostgresqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlTable)(nil)).Elem()
}

func (o PostgresqlTableOutput) ToPostgresqlTableOutput() PostgresqlTableOutput {
	return o
}

func (o PostgresqlTableOutput) ToPostgresqlTableOutputWithContext(ctx context.Context) PostgresqlTableOutput {
	return o
}

// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
func (o PostgresqlTableOutput) PostgresqlColumns() PostgresqlColumnArrayOutput {
	return o.ApplyT(func(v PostgresqlTable) []PostgresqlColumn { return v.PostgresqlColumns }).(PostgresqlColumnArrayOutput)
}

// Table name.
func (o PostgresqlTableOutput) Table() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PostgresqlTable) *string { return v.Table }).(pulumi.StringPtrOutput)
}

type PostgresqlTableArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlTable)(nil)).Elem()
}

func (o PostgresqlTableArrayOutput) ToPostgresqlTableArrayOutput() PostgresqlTableArrayOutput {
	return o
}

func (o PostgresqlTableArrayOutput) ToPostgresqlTableArrayOutputWithContext(ctx context.Context) PostgresqlTableArrayOutput {
	return o
}

func (o PostgresqlTableArrayOutput) Index(i pulumi.IntInput) PostgresqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresqlTable {
		return vs[0].([]PostgresqlTable)[vs[1].(int)]
	}).(PostgresqlTableOutput)
}

// PostgreSQL table.
type PostgresqlTableResponse struct {
	// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
	PostgresqlColumns []PostgresqlColumnResponse `pulumi:"postgresqlColumns"`
	// Table name.
	Table string `pulumi:"table"`
}

// PostgreSQL table.
type PostgresqlTableResponseOutput struct{ *pulumi.OutputState }

func (PostgresqlTableResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PostgresqlTableResponse)(nil)).Elem()
}

func (o PostgresqlTableResponseOutput) ToPostgresqlTableResponseOutput() PostgresqlTableResponseOutput {
	return o
}

func (o PostgresqlTableResponseOutput) ToPostgresqlTableResponseOutputWithContext(ctx context.Context) PostgresqlTableResponseOutput {
	return o
}

// PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
func (o PostgresqlTableResponseOutput) PostgresqlColumns() PostgresqlColumnResponseArrayOutput {
	return o.ApplyT(func(v PostgresqlTableResponse) []PostgresqlColumnResponse { return v.PostgresqlColumns }).(PostgresqlColumnResponseArrayOutput)
}

// Table name.
func (o PostgresqlTableResponseOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v PostgresqlTableResponse) string { return v.Table }).(pulumi.StringOutput)
}

type PostgresqlTableResponseArrayOutput struct{ *pulumi.OutputState }

func (PostgresqlTableResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PostgresqlTableResponse)(nil)).Elem()
}

func (o PostgresqlTableResponseArrayOutput) ToPostgresqlTableResponseArrayOutput() PostgresqlTableResponseArrayOutput {
	return o
}

func (o PostgresqlTableResponseArrayOutput) ToPostgresqlTableResponseArrayOutputWithContext(ctx context.Context) PostgresqlTableResponseArrayOutput {
	return o
}

func (o PostgresqlTableResponseArrayOutput) Index(i pulumi.IntInput) PostgresqlTableResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PostgresqlTableResponse {
		return vs[0].([]PostgresqlTableResponse)[vs[1].(int)]
	}).(PostgresqlTableResponseOutput)
}

// Private Connectivity
type PrivateConnectivity struct {
	// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
	PrivateConnection string `pulumi:"privateConnection"`
}

// PrivateConnectivityInput is an input type that accepts PrivateConnectivityArgs and PrivateConnectivityOutput values.
// You can construct a concrete instance of `PrivateConnectivityInput` via:
//
//	PrivateConnectivityArgs{...}
type PrivateConnectivityInput interface {
	pulumi.Input

	ToPrivateConnectivityOutput() PrivateConnectivityOutput
	ToPrivateConnectivityOutputWithContext(context.Context) PrivateConnectivityOutput
}

// Private Connectivity
type PrivateConnectivityArgs struct {
	// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
	PrivateConnection pulumi.StringInput `pulumi:"privateConnection"`
}

func (PrivateConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivity)(nil)).Elem()
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityOutput() PrivateConnectivityOutput {
	return i.ToPrivateConnectivityOutputWithContext(context.Background())
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityOutputWithContext(ctx context.Context) PrivateConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityOutput)
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return i.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i PrivateConnectivityArgs) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityOutput).ToPrivateConnectivityPtrOutputWithContext(ctx)
}

// PrivateConnectivityPtrInput is an input type that accepts PrivateConnectivityArgs, PrivateConnectivityPtr and PrivateConnectivityPtrOutput values.
// You can construct a concrete instance of `PrivateConnectivityPtrInput` via:
//
//	        PrivateConnectivityArgs{...}
//
//	or:
//
//	        nil
type PrivateConnectivityPtrInput interface {
	pulumi.Input

	ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput
	ToPrivateConnectivityPtrOutputWithContext(context.Context) PrivateConnectivityPtrOutput
}

type privateConnectivityPtrType PrivateConnectivityArgs

func PrivateConnectivityPtr(v *PrivateConnectivityArgs) PrivateConnectivityPtrInput {
	return (*privateConnectivityPtrType)(v)
}

func (*privateConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivity)(nil)).Elem()
}

func (i *privateConnectivityPtrType) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return i.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (i *privateConnectivityPtrType) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateConnectivityPtrOutput)
}

// Private Connectivity
type PrivateConnectivityOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivity)(nil)).Elem()
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityOutput() PrivateConnectivityOutput {
	return o
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityOutputWithContext(ctx context.Context) PrivateConnectivityOutput {
	return o
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return o.ToPrivateConnectivityPtrOutputWithContext(context.Background())
}

func (o PrivateConnectivityOutput) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateConnectivity) *PrivateConnectivity {
		return &v
	}).(PrivateConnectivityPtrOutput)
}

// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
func (o PrivateConnectivityOutput) PrivateConnection() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectivity) string { return v.PrivateConnection }).(pulumi.StringOutput)
}

type PrivateConnectivityPtrOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateConnectivity)(nil)).Elem()
}

func (o PrivateConnectivityPtrOutput) ToPrivateConnectivityPtrOutput() PrivateConnectivityPtrOutput {
	return o
}

func (o PrivateConnectivityPtrOutput) ToPrivateConnectivityPtrOutputWithContext(ctx context.Context) PrivateConnectivityPtrOutput {
	return o
}

func (o PrivateConnectivityPtrOutput) Elem() PrivateConnectivityOutput {
	return o.ApplyT(func(v *PrivateConnectivity) PrivateConnectivity {
		if v != nil {
			return *v
		}
		var ret PrivateConnectivity
		return ret
	}).(PrivateConnectivityOutput)
}

// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
func (o PrivateConnectivityPtrOutput) PrivateConnection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateConnectivity) *string {
		if v == nil {
			return nil
		}
		return &v.PrivateConnection
	}).(pulumi.StringPtrOutput)
}

// Private Connectivity
type PrivateConnectivityResponse struct {
	// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
	PrivateConnection string `pulumi:"privateConnection"`
}

// Private Connectivity
type PrivateConnectivityResponseOutput struct{ *pulumi.OutputState }

func (PrivateConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateConnectivityResponse)(nil)).Elem()
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponseOutput() PrivateConnectivityResponseOutput {
	return o
}

func (o PrivateConnectivityResponseOutput) ToPrivateConnectivityResponseOutputWithContext(ctx context.Context) PrivateConnectivityResponseOutput {
	return o
}

// A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`
func (o PrivateConnectivityResponseOutput) PrivateConnection() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateConnectivityResponse) string { return v.PrivateConnection }).(pulumi.StringOutput)
}

// A single target dataset to which all data will be streamed.
type SingleTargetDataset struct {
	// The dataset ID of the target dataset.
	DatasetId *string `pulumi:"datasetId"`
}

// SingleTargetDatasetInput is an input type that accepts SingleTargetDatasetArgs and SingleTargetDatasetOutput values.
// You can construct a concrete instance of `SingleTargetDatasetInput` via:
//
//	SingleTargetDatasetArgs{...}
type SingleTargetDatasetInput interface {
	pulumi.Input

	ToSingleTargetDatasetOutput() SingleTargetDatasetOutput
	ToSingleTargetDatasetOutputWithContext(context.Context) SingleTargetDatasetOutput
}

// A single target dataset to which all data will be streamed.
type SingleTargetDatasetArgs struct {
	// The dataset ID of the target dataset.
	DatasetId pulumi.StringPtrInput `pulumi:"datasetId"`
}

func (SingleTargetDatasetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleTargetDataset)(nil)).Elem()
}

func (i SingleTargetDatasetArgs) ToSingleTargetDatasetOutput() SingleTargetDatasetOutput {
	return i.ToSingleTargetDatasetOutputWithContext(context.Background())
}

func (i SingleTargetDatasetArgs) ToSingleTargetDatasetOutputWithContext(ctx context.Context) SingleTargetDatasetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleTargetDatasetOutput)
}

func (i SingleTargetDatasetArgs) ToSingleTargetDatasetPtrOutput() SingleTargetDatasetPtrOutput {
	return i.ToSingleTargetDatasetPtrOutputWithContext(context.Background())
}

func (i SingleTargetDatasetArgs) ToSingleTargetDatasetPtrOutputWithContext(ctx context.Context) SingleTargetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleTargetDatasetOutput).ToSingleTargetDatasetPtrOutputWithContext(ctx)
}

// SingleTargetDatasetPtrInput is an input type that accepts SingleTargetDatasetArgs, SingleTargetDatasetPtr and SingleTargetDatasetPtrOutput values.
// You can construct a concrete instance of `SingleTargetDatasetPtrInput` via:
//
//	        SingleTargetDatasetArgs{...}
//
//	or:
//
//	        nil
type SingleTargetDatasetPtrInput interface {
	pulumi.Input

	ToSingleTargetDatasetPtrOutput() SingleTargetDatasetPtrOutput
	ToSingleTargetDatasetPtrOutputWithContext(context.Context) SingleTargetDatasetPtrOutput
}

type singleTargetDatasetPtrType SingleTargetDatasetArgs

func SingleTargetDatasetPtr(v *SingleTargetDatasetArgs) SingleTargetDatasetPtrInput {
	return (*singleTargetDatasetPtrType)(v)
}

func (*singleTargetDatasetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleTargetDataset)(nil)).Elem()
}

func (i *singleTargetDatasetPtrType) ToSingleTargetDatasetPtrOutput() SingleTargetDatasetPtrOutput {
	return i.ToSingleTargetDatasetPtrOutputWithContext(context.Background())
}

func (i *singleTargetDatasetPtrType) ToSingleTargetDatasetPtrOutputWithContext(ctx context.Context) SingleTargetDatasetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SingleTargetDatasetPtrOutput)
}

// A single target dataset to which all data will be streamed.
type SingleTargetDatasetOutput struct{ *pulumi.OutputState }

func (SingleTargetDatasetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleTargetDataset)(nil)).Elem()
}

func (o SingleTargetDatasetOutput) ToSingleTargetDatasetOutput() SingleTargetDatasetOutput {
	return o
}

func (o SingleTargetDatasetOutput) ToSingleTargetDatasetOutputWithContext(ctx context.Context) SingleTargetDatasetOutput {
	return o
}

func (o SingleTargetDatasetOutput) ToSingleTargetDatasetPtrOutput() SingleTargetDatasetPtrOutput {
	return o.ToSingleTargetDatasetPtrOutputWithContext(context.Background())
}

func (o SingleTargetDatasetOutput) ToSingleTargetDatasetPtrOutputWithContext(ctx context.Context) SingleTargetDatasetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SingleTargetDataset) *SingleTargetDataset {
		return &v
	}).(SingleTargetDatasetPtrOutput)
}

// The dataset ID of the target dataset.
func (o SingleTargetDatasetOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SingleTargetDataset) *string { return v.DatasetId }).(pulumi.StringPtrOutput)
}

type SingleTargetDatasetPtrOutput struct{ *pulumi.OutputState }

func (SingleTargetDatasetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SingleTargetDataset)(nil)).Elem()
}

func (o SingleTargetDatasetPtrOutput) ToSingleTargetDatasetPtrOutput() SingleTargetDatasetPtrOutput {
	return o
}

func (o SingleTargetDatasetPtrOutput) ToSingleTargetDatasetPtrOutputWithContext(ctx context.Context) SingleTargetDatasetPtrOutput {
	return o
}

func (o SingleTargetDatasetPtrOutput) Elem() SingleTargetDatasetOutput {
	return o.ApplyT(func(v *SingleTargetDataset) SingleTargetDataset {
		if v != nil {
			return *v
		}
		var ret SingleTargetDataset
		return ret
	}).(SingleTargetDatasetOutput)
}

// The dataset ID of the target dataset.
func (o SingleTargetDatasetPtrOutput) DatasetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SingleTargetDataset) *string {
		if v == nil {
			return nil
		}
		return v.DatasetId
	}).(pulumi.StringPtrOutput)
}

// A single target dataset to which all data will be streamed.
type SingleTargetDatasetResponse struct {
	// The dataset ID of the target dataset.
	DatasetId string `pulumi:"datasetId"`
}

// A single target dataset to which all data will be streamed.
type SingleTargetDatasetResponseOutput struct{ *pulumi.OutputState }

func (SingleTargetDatasetResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SingleTargetDatasetResponse)(nil)).Elem()
}

func (o SingleTargetDatasetResponseOutput) ToSingleTargetDatasetResponseOutput() SingleTargetDatasetResponseOutput {
	return o
}

func (o SingleTargetDatasetResponseOutput) ToSingleTargetDatasetResponseOutputWithContext(ctx context.Context) SingleTargetDatasetResponseOutput {
	return o
}

// The dataset ID of the target dataset.
func (o SingleTargetDatasetResponseOutput) DatasetId() pulumi.StringOutput {
	return o.ApplyT(func(v SingleTargetDatasetResponse) string { return v.DatasetId }).(pulumi.StringOutput)
}

// The configuration of the stream source.
type SourceConfig struct {
	// MySQL data source configuration.
	MysqlSourceConfig *MysqlSourceConfig `pulumi:"mysqlSourceConfig"`
	// Oracle data source configuration.
	OracleSourceConfig *OracleSourceConfig `pulumi:"oracleSourceConfig"`
	// PostgreSQL data source configuration.
	PostgresqlSourceConfig *PostgresqlSourceConfig `pulumi:"postgresqlSourceConfig"`
	// Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
	SourceConnectionProfile string `pulumi:"sourceConnectionProfile"`
}

// SourceConfigInput is an input type that accepts SourceConfigArgs and SourceConfigOutput values.
// You can construct a concrete instance of `SourceConfigInput` via:
//
//	SourceConfigArgs{...}
type SourceConfigInput interface {
	pulumi.Input

	ToSourceConfigOutput() SourceConfigOutput
	ToSourceConfigOutputWithContext(context.Context) SourceConfigOutput
}

// The configuration of the stream source.
type SourceConfigArgs struct {
	// MySQL data source configuration.
	MysqlSourceConfig MysqlSourceConfigPtrInput `pulumi:"mysqlSourceConfig"`
	// Oracle data source configuration.
	OracleSourceConfig OracleSourceConfigPtrInput `pulumi:"oracleSourceConfig"`
	// PostgreSQL data source configuration.
	PostgresqlSourceConfig PostgresqlSourceConfigPtrInput `pulumi:"postgresqlSourceConfig"`
	// Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
	SourceConnectionProfile pulumi.StringInput `pulumi:"sourceConnectionProfile"`
}

func (SourceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfig)(nil)).Elem()
}

func (i SourceConfigArgs) ToSourceConfigOutput() SourceConfigOutput {
	return i.ToSourceConfigOutputWithContext(context.Background())
}

func (i SourceConfigArgs) ToSourceConfigOutputWithContext(ctx context.Context) SourceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceConfigOutput)
}

// The configuration of the stream source.
type SourceConfigOutput struct{ *pulumi.OutputState }

func (SourceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfig)(nil)).Elem()
}

func (o SourceConfigOutput) ToSourceConfigOutput() SourceConfigOutput {
	return o
}

func (o SourceConfigOutput) ToSourceConfigOutputWithContext(ctx context.Context) SourceConfigOutput {
	return o
}

// MySQL data source configuration.
func (o SourceConfigOutput) MysqlSourceConfig() MysqlSourceConfigPtrOutput {
	return o.ApplyT(func(v SourceConfig) *MysqlSourceConfig { return v.MysqlSourceConfig }).(MysqlSourceConfigPtrOutput)
}

// Oracle data source configuration.
func (o SourceConfigOutput) OracleSourceConfig() OracleSourceConfigPtrOutput {
	return o.ApplyT(func(v SourceConfig) *OracleSourceConfig { return v.OracleSourceConfig }).(OracleSourceConfigPtrOutput)
}

// PostgreSQL data source configuration.
func (o SourceConfigOutput) PostgresqlSourceConfig() PostgresqlSourceConfigPtrOutput {
	return o.ApplyT(func(v SourceConfig) *PostgresqlSourceConfig { return v.PostgresqlSourceConfig }).(PostgresqlSourceConfigPtrOutput)
}

// Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
func (o SourceConfigOutput) SourceConnectionProfile() pulumi.StringOutput {
	return o.ApplyT(func(v SourceConfig) string { return v.SourceConnectionProfile }).(pulumi.StringOutput)
}

// The configuration of the stream source.
type SourceConfigResponse struct {
	// MySQL data source configuration.
	MysqlSourceConfig MysqlSourceConfigResponse `pulumi:"mysqlSourceConfig"`
	// Oracle data source configuration.
	OracleSourceConfig OracleSourceConfigResponse `pulumi:"oracleSourceConfig"`
	// PostgreSQL data source configuration.
	PostgresqlSourceConfig PostgresqlSourceConfigResponse `pulumi:"postgresqlSourceConfig"`
	// Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
	SourceConnectionProfile string `pulumi:"sourceConnectionProfile"`
}

// The configuration of the stream source.
type SourceConfigResponseOutput struct{ *pulumi.OutputState }

func (SourceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceConfigResponse)(nil)).Elem()
}

func (o SourceConfigResponseOutput) ToSourceConfigResponseOutput() SourceConfigResponseOutput {
	return o
}

func (o SourceConfigResponseOutput) ToSourceConfigResponseOutputWithContext(ctx context.Context) SourceConfigResponseOutput {
	return o
}

// MySQL data source configuration.
func (o SourceConfigResponseOutput) MysqlSourceConfig() MysqlSourceConfigResponseOutput {
	return o.ApplyT(func(v SourceConfigResponse) MysqlSourceConfigResponse { return v.MysqlSourceConfig }).(MysqlSourceConfigResponseOutput)
}

// Oracle data source configuration.
func (o SourceConfigResponseOutput) OracleSourceConfig() OracleSourceConfigResponseOutput {
	return o.ApplyT(func(v SourceConfigResponse) OracleSourceConfigResponse { return v.OracleSourceConfig }).(OracleSourceConfigResponseOutput)
}

// PostgreSQL data source configuration.
func (o SourceConfigResponseOutput) PostgresqlSourceConfig() PostgresqlSourceConfigResponseOutput {
	return o.ApplyT(func(v SourceConfigResponse) PostgresqlSourceConfigResponse { return v.PostgresqlSourceConfig }).(PostgresqlSourceConfigResponseOutput)
}

// Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`
func (o SourceConfigResponseOutput) SourceConnectionProfile() pulumi.StringOutput {
	return o.ApplyT(func(v SourceConfigResponse) string { return v.SourceConnectionProfile }).(pulumi.StringOutput)
}

// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
type SourceHierarchyDatasets struct {
	// The dataset template to use for dynamic dataset creation.
	DatasetTemplate *DatasetTemplate `pulumi:"datasetTemplate"`
}

// SourceHierarchyDatasetsInput is an input type that accepts SourceHierarchyDatasetsArgs and SourceHierarchyDatasetsOutput values.
// You can construct a concrete instance of `SourceHierarchyDatasetsInput` via:
//
//	SourceHierarchyDatasetsArgs{...}
type SourceHierarchyDatasetsInput interface {
	pulumi.Input

	ToSourceHierarchyDatasetsOutput() SourceHierarchyDatasetsOutput
	ToSourceHierarchyDatasetsOutputWithContext(context.Context) SourceHierarchyDatasetsOutput
}

// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
type SourceHierarchyDatasetsArgs struct {
	// The dataset template to use for dynamic dataset creation.
	DatasetTemplate DatasetTemplatePtrInput `pulumi:"datasetTemplate"`
}

func (SourceHierarchyDatasetsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceHierarchyDatasets)(nil)).Elem()
}

func (i SourceHierarchyDatasetsArgs) ToSourceHierarchyDatasetsOutput() SourceHierarchyDatasetsOutput {
	return i.ToSourceHierarchyDatasetsOutputWithContext(context.Background())
}

func (i SourceHierarchyDatasetsArgs) ToSourceHierarchyDatasetsOutputWithContext(ctx context.Context) SourceHierarchyDatasetsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceHierarchyDatasetsOutput)
}

func (i SourceHierarchyDatasetsArgs) ToSourceHierarchyDatasetsPtrOutput() SourceHierarchyDatasetsPtrOutput {
	return i.ToSourceHierarchyDatasetsPtrOutputWithContext(context.Background())
}

func (i SourceHierarchyDatasetsArgs) ToSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) SourceHierarchyDatasetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceHierarchyDatasetsOutput).ToSourceHierarchyDatasetsPtrOutputWithContext(ctx)
}

// SourceHierarchyDatasetsPtrInput is an input type that accepts SourceHierarchyDatasetsArgs, SourceHierarchyDatasetsPtr and SourceHierarchyDatasetsPtrOutput values.
// You can construct a concrete instance of `SourceHierarchyDatasetsPtrInput` via:
//
//	        SourceHierarchyDatasetsArgs{...}
//
//	or:
//
//	        nil
type SourceHierarchyDatasetsPtrInput interface {
	pulumi.Input

	ToSourceHierarchyDatasetsPtrOutput() SourceHierarchyDatasetsPtrOutput
	ToSourceHierarchyDatasetsPtrOutputWithContext(context.Context) SourceHierarchyDatasetsPtrOutput
}

type sourceHierarchyDatasetsPtrType SourceHierarchyDatasetsArgs

func SourceHierarchyDatasetsPtr(v *SourceHierarchyDatasetsArgs) SourceHierarchyDatasetsPtrInput {
	return (*sourceHierarchyDatasetsPtrType)(v)
}

func (*sourceHierarchyDatasetsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceHierarchyDatasets)(nil)).Elem()
}

func (i *sourceHierarchyDatasetsPtrType) ToSourceHierarchyDatasetsPtrOutput() SourceHierarchyDatasetsPtrOutput {
	return i.ToSourceHierarchyDatasetsPtrOutputWithContext(context.Background())
}

func (i *sourceHierarchyDatasetsPtrType) ToSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) SourceHierarchyDatasetsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceHierarchyDatasetsPtrOutput)
}

// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
type SourceHierarchyDatasetsOutput struct{ *pulumi.OutputState }

func (SourceHierarchyDatasetsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceHierarchyDatasets)(nil)).Elem()
}

func (o SourceHierarchyDatasetsOutput) ToSourceHierarchyDatasetsOutput() SourceHierarchyDatasetsOutput {
	return o
}

func (o SourceHierarchyDatasetsOutput) ToSourceHierarchyDatasetsOutputWithContext(ctx context.Context) SourceHierarchyDatasetsOutput {
	return o
}

func (o SourceHierarchyDatasetsOutput) ToSourceHierarchyDatasetsPtrOutput() SourceHierarchyDatasetsPtrOutput {
	return o.ToSourceHierarchyDatasetsPtrOutputWithContext(context.Background())
}

func (o SourceHierarchyDatasetsOutput) ToSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) SourceHierarchyDatasetsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SourceHierarchyDatasets) *SourceHierarchyDatasets {
		return &v
	}).(SourceHierarchyDatasetsPtrOutput)
}

// The dataset template to use for dynamic dataset creation.
func (o SourceHierarchyDatasetsOutput) DatasetTemplate() DatasetTemplatePtrOutput {
	return o.ApplyT(func(v SourceHierarchyDatasets) *DatasetTemplate { return v.DatasetTemplate }).(DatasetTemplatePtrOutput)
}

type SourceHierarchyDatasetsPtrOutput struct{ *pulumi.OutputState }

func (SourceHierarchyDatasetsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SourceHierarchyDatasets)(nil)).Elem()
}

func (o SourceHierarchyDatasetsPtrOutput) ToSourceHierarchyDatasetsPtrOutput() SourceHierarchyDatasetsPtrOutput {
	return o
}

func (o SourceHierarchyDatasetsPtrOutput) ToSourceHierarchyDatasetsPtrOutputWithContext(ctx context.Context) SourceHierarchyDatasetsPtrOutput {
	return o
}

func (o SourceHierarchyDatasetsPtrOutput) Elem() SourceHierarchyDatasetsOutput {
	return o.ApplyT(func(v *SourceHierarchyDatasets) SourceHierarchyDatasets {
		if v != nil {
			return *v
		}
		var ret SourceHierarchyDatasets
		return ret
	}).(SourceHierarchyDatasetsOutput)
}

// The dataset template to use for dynamic dataset creation.
func (o SourceHierarchyDatasetsPtrOutput) DatasetTemplate() DatasetTemplatePtrOutput {
	return o.ApplyT(func(v *SourceHierarchyDatasets) *DatasetTemplate {
		if v == nil {
			return nil
		}
		return v.DatasetTemplate
	}).(DatasetTemplatePtrOutput)
}

// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
type SourceHierarchyDatasetsResponse struct {
	// The dataset template to use for dynamic dataset creation.
	DatasetTemplate DatasetTemplateResponse `pulumi:"datasetTemplate"`
}

// Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
type SourceHierarchyDatasetsResponseOutput struct{ *pulumi.OutputState }

func (SourceHierarchyDatasetsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceHierarchyDatasetsResponse)(nil)).Elem()
}

func (o SourceHierarchyDatasetsResponseOutput) ToSourceHierarchyDatasetsResponseOutput() SourceHierarchyDatasetsResponseOutput {
	return o
}

func (o SourceHierarchyDatasetsResponseOutput) ToSourceHierarchyDatasetsResponseOutputWithContext(ctx context.Context) SourceHierarchyDatasetsResponseOutput {
	return o
}

// The dataset template to use for dynamic dataset creation.
func (o SourceHierarchyDatasetsResponseOutput) DatasetTemplate() DatasetTemplateResponseOutput {
	return o.ApplyT(func(v SourceHierarchyDatasetsResponse) DatasetTemplateResponse { return v.DatasetTemplate }).(DatasetTemplateResponseOutput)
}

// Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.
type StaticServiceIpConnectivity struct {
}

// StaticServiceIpConnectivityInput is an input type that accepts StaticServiceIpConnectivityArgs and StaticServiceIpConnectivityOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityInput` via:
//
//	StaticServiceIpConnectivityArgs{...}
type StaticServiceIpConnectivityInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput
	ToStaticServiceIpConnectivityOutputWithContext(context.Context) StaticServiceIpConnectivityOutput
}

// Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.
type StaticServiceIpConnectivityArgs struct {
}

func (StaticServiceIpConnectivityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivity)(nil)).Elem()
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput {
	return i.ToStaticServiceIpConnectivityOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityOutputWithContext(ctx context.Context) StaticServiceIpConnectivityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityOutput)
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return i.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (i StaticServiceIpConnectivityArgs) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityOutput).ToStaticServiceIpConnectivityPtrOutputWithContext(ctx)
}

// StaticServiceIpConnectivityPtrInput is an input type that accepts StaticServiceIpConnectivityArgs, StaticServiceIpConnectivityPtr and StaticServiceIpConnectivityPtrOutput values.
// You can construct a concrete instance of `StaticServiceIpConnectivityPtrInput` via:
//
//	        StaticServiceIpConnectivityArgs{...}
//
//	or:
//
//	        nil
type StaticServiceIpConnectivityPtrInput interface {
	pulumi.Input

	ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput
	ToStaticServiceIpConnectivityPtrOutputWithContext(context.Context) StaticServiceIpConnectivityPtrOutput
}

type staticServiceIpConnectivityPtrType StaticServiceIpConnectivityArgs

func StaticServiceIpConnectivityPtr(v *StaticServiceIpConnectivityArgs) StaticServiceIpConnectivityPtrInput {
	return (*staticServiceIpConnectivityPtrType)(v)
}

func (*staticServiceIpConnectivityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivity)(nil)).Elem()
}

func (i *staticServiceIpConnectivityPtrType) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return i.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (i *staticServiceIpConnectivityPtrType) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticServiceIpConnectivityPtrOutput)
}

// Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.
type StaticServiceIpConnectivityOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivity)(nil)).Elem()
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityOutput() StaticServiceIpConnectivityOutput {
	return o
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityOutputWithContext(ctx context.Context) StaticServiceIpConnectivityOutput {
	return o
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return o.ToStaticServiceIpConnectivityPtrOutputWithContext(context.Background())
}

func (o StaticServiceIpConnectivityOutput) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StaticServiceIpConnectivity) *StaticServiceIpConnectivity {
		return &v
	}).(StaticServiceIpConnectivityPtrOutput)
}

type StaticServiceIpConnectivityPtrOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticServiceIpConnectivity)(nil)).Elem()
}

func (o StaticServiceIpConnectivityPtrOutput) ToStaticServiceIpConnectivityPtrOutput() StaticServiceIpConnectivityPtrOutput {
	return o
}

func (o StaticServiceIpConnectivityPtrOutput) ToStaticServiceIpConnectivityPtrOutputWithContext(ctx context.Context) StaticServiceIpConnectivityPtrOutput {
	return o
}

func (o StaticServiceIpConnectivityPtrOutput) Elem() StaticServiceIpConnectivityOutput {
	return o.ApplyT(func(v *StaticServiceIpConnectivity) StaticServiceIpConnectivity {
		if v != nil {
			return *v
		}
		var ret StaticServiceIpConnectivity
		return ret
	}).(StaticServiceIpConnectivityOutput)
}

// Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.
type StaticServiceIpConnectivityResponse struct {
}

// Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.
type StaticServiceIpConnectivityResponseOutput struct{ *pulumi.OutputState }

func (StaticServiceIpConnectivityResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticServiceIpConnectivityResponse)(nil)).Elem()
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponseOutput() StaticServiceIpConnectivityResponseOutput {
	return o
}

func (o StaticServiceIpConnectivityResponseOutput) ToStaticServiceIpConnectivityResponseOutputWithContext(ctx context.Context) StaticServiceIpConnectivityResponseOutput {
	return o
}

// Configuration to stream large object values.
type StreamLargeObjects struct {
}

// StreamLargeObjectsInput is an input type that accepts StreamLargeObjectsArgs and StreamLargeObjectsOutput values.
// You can construct a concrete instance of `StreamLargeObjectsInput` via:
//
//	StreamLargeObjectsArgs{...}
type StreamLargeObjectsInput interface {
	pulumi.Input

	ToStreamLargeObjectsOutput() StreamLargeObjectsOutput
	ToStreamLargeObjectsOutputWithContext(context.Context) StreamLargeObjectsOutput
}

// Configuration to stream large object values.
type StreamLargeObjectsArgs struct {
}

func (StreamLargeObjectsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamLargeObjects)(nil)).Elem()
}

func (i StreamLargeObjectsArgs) ToStreamLargeObjectsOutput() StreamLargeObjectsOutput {
	return i.ToStreamLargeObjectsOutputWithContext(context.Background())
}

func (i StreamLargeObjectsArgs) ToStreamLargeObjectsOutputWithContext(ctx context.Context) StreamLargeObjectsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamLargeObjectsOutput)
}

func (i StreamLargeObjectsArgs) ToStreamLargeObjectsPtrOutput() StreamLargeObjectsPtrOutput {
	return i.ToStreamLargeObjectsPtrOutputWithContext(context.Background())
}

func (i StreamLargeObjectsArgs) ToStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamLargeObjectsOutput).ToStreamLargeObjectsPtrOutputWithContext(ctx)
}

// StreamLargeObjectsPtrInput is an input type that accepts StreamLargeObjectsArgs, StreamLargeObjectsPtr and StreamLargeObjectsPtrOutput values.
// You can construct a concrete instance of `StreamLargeObjectsPtrInput` via:
//
//	        StreamLargeObjectsArgs{...}
//
//	or:
//
//	        nil
type StreamLargeObjectsPtrInput interface {
	pulumi.Input

	ToStreamLargeObjectsPtrOutput() StreamLargeObjectsPtrOutput
	ToStreamLargeObjectsPtrOutputWithContext(context.Context) StreamLargeObjectsPtrOutput
}

type streamLargeObjectsPtrType StreamLargeObjectsArgs

func StreamLargeObjectsPtr(v *StreamLargeObjectsArgs) StreamLargeObjectsPtrInput {
	return (*streamLargeObjectsPtrType)(v)
}

func (*streamLargeObjectsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamLargeObjects)(nil)).Elem()
}

func (i *streamLargeObjectsPtrType) ToStreamLargeObjectsPtrOutput() StreamLargeObjectsPtrOutput {
	return i.ToStreamLargeObjectsPtrOutputWithContext(context.Background())
}

func (i *streamLargeObjectsPtrType) ToStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamLargeObjectsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamLargeObjectsPtrOutput)
}

// Configuration to stream large object values.
type StreamLargeObjectsOutput struct{ *pulumi.OutputState }

func (StreamLargeObjectsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamLargeObjects)(nil)).Elem()
}

func (o StreamLargeObjectsOutput) ToStreamLargeObjectsOutput() StreamLargeObjectsOutput {
	return o
}

func (o StreamLargeObjectsOutput) ToStreamLargeObjectsOutputWithContext(ctx context.Context) StreamLargeObjectsOutput {
	return o
}

func (o StreamLargeObjectsOutput) ToStreamLargeObjectsPtrOutput() StreamLargeObjectsPtrOutput {
	return o.ToStreamLargeObjectsPtrOutputWithContext(context.Background())
}

func (o StreamLargeObjectsOutput) ToStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamLargeObjectsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamLargeObjects) *StreamLargeObjects {
		return &v
	}).(StreamLargeObjectsPtrOutput)
}

type StreamLargeObjectsPtrOutput struct{ *pulumi.OutputState }

func (StreamLargeObjectsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamLargeObjects)(nil)).Elem()
}

func (o StreamLargeObjectsPtrOutput) ToStreamLargeObjectsPtrOutput() StreamLargeObjectsPtrOutput {
	return o
}

func (o StreamLargeObjectsPtrOutput) ToStreamLargeObjectsPtrOutputWithContext(ctx context.Context) StreamLargeObjectsPtrOutput {
	return o
}

func (o StreamLargeObjectsPtrOutput) Elem() StreamLargeObjectsOutput {
	return o.ApplyT(func(v *StreamLargeObjects) StreamLargeObjects {
		if v != nil {
			return *v
		}
		var ret StreamLargeObjects
		return ret
	}).(StreamLargeObjectsOutput)
}

// Configuration to stream large object values.
type StreamLargeObjectsResponse struct {
}

// Configuration to stream large object values.
type StreamLargeObjectsResponseOutput struct{ *pulumi.OutputState }

func (StreamLargeObjectsResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamLargeObjectsResponse)(nil)).Elem()
}

func (o StreamLargeObjectsResponseOutput) ToStreamLargeObjectsResponseOutput() StreamLargeObjectsResponseOutput {
	return o
}

func (o StreamLargeObjectsResponseOutput) ToStreamLargeObjectsResponseOutputWithContext(ctx context.Context) StreamLargeObjectsResponseOutput {
	return o
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfig struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet string `pulumi:"subnet"`
	// Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
	Vpc string `pulumi:"vpc"`
}

// VpcPeeringConfigInput is an input type that accepts VpcPeeringConfigArgs and VpcPeeringConfigOutput values.
// You can construct a concrete instance of `VpcPeeringConfigInput` via:
//
//	VpcPeeringConfigArgs{...}
type VpcPeeringConfigInput interface {
	pulumi.Input

	ToVpcPeeringConfigOutput() VpcPeeringConfigOutput
	ToVpcPeeringConfigOutputWithContext(context.Context) VpcPeeringConfigOutput
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigArgs struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet pulumi.StringInput `pulumi:"subnet"`
	// Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (VpcPeeringConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfig)(nil)).Elem()
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigOutput() VpcPeeringConfigOutput {
	return i.ToVpcPeeringConfigOutputWithContext(context.Background())
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigOutputWithContext(ctx context.Context) VpcPeeringConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigOutput)
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return i.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i VpcPeeringConfigArgs) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigOutput).ToVpcPeeringConfigPtrOutputWithContext(ctx)
}

// VpcPeeringConfigPtrInput is an input type that accepts VpcPeeringConfigArgs, VpcPeeringConfigPtr and VpcPeeringConfigPtrOutput values.
// You can construct a concrete instance of `VpcPeeringConfigPtrInput` via:
//
//	        VpcPeeringConfigArgs{...}
//
//	or:
//
//	        nil
type VpcPeeringConfigPtrInput interface {
	pulumi.Input

	ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput
	ToVpcPeeringConfigPtrOutputWithContext(context.Context) VpcPeeringConfigPtrOutput
}

type vpcPeeringConfigPtrType VpcPeeringConfigArgs

func VpcPeeringConfigPtr(v *VpcPeeringConfigArgs) VpcPeeringConfigPtrInput {
	return (*vpcPeeringConfigPtrType)(v)
}

func (*vpcPeeringConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfig)(nil)).Elem()
}

func (i *vpcPeeringConfigPtrType) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return i.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (i *vpcPeeringConfigPtrType) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcPeeringConfigPtrOutput)
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfig)(nil)).Elem()
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigOutput() VpcPeeringConfigOutput {
	return o
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigOutputWithContext(ctx context.Context) VpcPeeringConfigOutput {
	return o
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return o.ToVpcPeeringConfigPtrOutputWithContext(context.Background())
}

func (o VpcPeeringConfigOutput) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpcPeeringConfig) *VpcPeeringConfig {
		return &v
	}).(VpcPeeringConfigPtrOutput)
}

// A free subnet for peering. (CIDR of /29)
func (o VpcPeeringConfigOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfig) string { return v.Subnet }).(pulumi.StringOutput)
}

// Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
func (o VpcPeeringConfigOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfig) string { return v.Vpc }).(pulumi.StringOutput)
}

type VpcPeeringConfigPtrOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcPeeringConfig)(nil)).Elem()
}

func (o VpcPeeringConfigPtrOutput) ToVpcPeeringConfigPtrOutput() VpcPeeringConfigPtrOutput {
	return o
}

func (o VpcPeeringConfigPtrOutput) ToVpcPeeringConfigPtrOutputWithContext(ctx context.Context) VpcPeeringConfigPtrOutput {
	return o
}

func (o VpcPeeringConfigPtrOutput) Elem() VpcPeeringConfigOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) VpcPeeringConfig {
		if v != nil {
			return *v
		}
		var ret VpcPeeringConfig
		return ret
	}).(VpcPeeringConfigOutput)
}

// A free subnet for peering. (CIDR of /29)
func (o VpcPeeringConfigPtrOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Subnet
	}).(pulumi.StringPtrOutput)
}

// Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
func (o VpcPeeringConfigPtrOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcPeeringConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Vpc
	}).(pulumi.StringPtrOutput)
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigResponse struct {
	// A free subnet for peering. (CIDR of /29)
	Subnet string `pulumi:"subnet"`
	// Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
	Vpc string `pulumi:"vpc"`
}

// The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
type VpcPeeringConfigResponseOutput struct{ *pulumi.OutputState }

func (VpcPeeringConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcPeeringConfigResponse)(nil)).Elem()
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponseOutput() VpcPeeringConfigResponseOutput {
	return o
}

func (o VpcPeeringConfigResponseOutput) ToVpcPeeringConfigResponseOutputWithContext(ctx context.Context) VpcPeeringConfigResponseOutput {
	return o
}

// A free subnet for peering. (CIDR of /29)
func (o VpcPeeringConfigResponseOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfigResponse) string { return v.Subnet }).(pulumi.StringOutput)
}

// Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`
func (o VpcPeeringConfigResponseOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v VpcPeeringConfigResponse) string { return v.Vpc }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvroFileFormatInput)(nil)).Elem(), AvroFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvroFileFormatPtrInput)(nil)).Elem(), AvroFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillAllStrategyInput)(nil)).Elem(), BackfillAllStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillAllStrategyPtrInput)(nil)).Elem(), BackfillAllStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillNoneStrategyInput)(nil)).Elem(), BackfillNoneStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackfillNoneStrategyPtrInput)(nil)).Elem(), BackfillNoneStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryDestinationConfigInput)(nil)).Elem(), BigQueryDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryDestinationConfigPtrInput)(nil)).Elem(), BigQueryDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryProfileInput)(nil)).Elem(), BigQueryProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BigQueryProfilePtrInput)(nil)).Elem(), BigQueryProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetTemplateInput)(nil)).Elem(), DatasetTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetTemplatePtrInput)(nil)).Elem(), DatasetTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DestinationConfigInput)(nil)).Elem(), DestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DropLargeObjectsInput)(nil)).Elem(), DropLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DropLargeObjectsPtrInput)(nil)).Elem(), DropLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityInput)(nil)).Elem(), ForwardSshTunnelConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardSshTunnelConnectivityPtrInput)(nil)).Elem(), ForwardSshTunnelConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsDestinationConfigInput)(nil)).Elem(), GcsDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsDestinationConfigPtrInput)(nil)).Elem(), GcsDestinationConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsProfileInput)(nil)).Elem(), GcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GcsProfilePtrInput)(nil)).Elem(), GcsProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatInput)(nil)).Elem(), JsonFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*JsonFileFormatPtrInput)(nil)).Elem(), JsonFileFormatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlColumnInput)(nil)).Elem(), MysqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlColumnArrayInput)(nil)).Elem(), MysqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseInput)(nil)).Elem(), MysqlDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseArrayInput)(nil)).Elem(), MysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProfileInput)(nil)).Elem(), MysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlProfilePtrInput)(nil)).Elem(), MysqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlRdbmsInput)(nil)).Elem(), MysqlRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlRdbmsPtrInput)(nil)).Elem(), MysqlRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSourceConfigInput)(nil)).Elem(), MysqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSourceConfigPtrInput)(nil)).Elem(), MysqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSslConfigInput)(nil)).Elem(), MysqlSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlSslConfigPtrInput)(nil)).Elem(), MysqlSslConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlTableInput)(nil)).Elem(), MysqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlTableArrayInput)(nil)).Elem(), MysqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleColumnInput)(nil)).Elem(), OracleColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleColumnArrayInput)(nil)).Elem(), OracleColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleProfileInput)(nil)).Elem(), OracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleProfilePtrInput)(nil)).Elem(), OracleProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleRdbmsInput)(nil)).Elem(), OracleRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleRdbmsPtrInput)(nil)).Elem(), OracleRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSchemaInput)(nil)).Elem(), OracleSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSchemaArrayInput)(nil)).Elem(), OracleSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSourceConfigInput)(nil)).Elem(), OracleSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleSourceConfigPtrInput)(nil)).Elem(), OracleSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleTableInput)(nil)).Elem(), OracleTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OracleTableArrayInput)(nil)).Elem(), OracleTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlColumnInput)(nil)).Elem(), PostgresqlColumnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlColumnArrayInput)(nil)).Elem(), PostgresqlColumnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlProfileInput)(nil)).Elem(), PostgresqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlProfilePtrInput)(nil)).Elem(), PostgresqlProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlRdbmsInput)(nil)).Elem(), PostgresqlRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlRdbmsPtrInput)(nil)).Elem(), PostgresqlRdbmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlSchemaInput)(nil)).Elem(), PostgresqlSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlSchemaArrayInput)(nil)).Elem(), PostgresqlSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlSourceConfigInput)(nil)).Elem(), PostgresqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlSourceConfigPtrInput)(nil)).Elem(), PostgresqlSourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlTableInput)(nil)).Elem(), PostgresqlTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresqlTableArrayInput)(nil)).Elem(), PostgresqlTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityInput)(nil)).Elem(), PrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateConnectivityPtrInput)(nil)).Elem(), PrivateConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleTargetDatasetInput)(nil)).Elem(), SingleTargetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SingleTargetDatasetPtrInput)(nil)).Elem(), SingleTargetDatasetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceConfigInput)(nil)).Elem(), SourceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceHierarchyDatasetsInput)(nil)).Elem(), SourceHierarchyDatasetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceHierarchyDatasetsPtrInput)(nil)).Elem(), SourceHierarchyDatasetsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityInput)(nil)).Elem(), StaticServiceIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticServiceIpConnectivityPtrInput)(nil)).Elem(), StaticServiceIpConnectivityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamLargeObjectsInput)(nil)).Elem(), StreamLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamLargeObjectsPtrInput)(nil)).Elem(), StreamLargeObjectsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigInput)(nil)).Elem(), VpcPeeringConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcPeeringConfigPtrInput)(nil)).Elem(), VpcPeeringConfigArgs{})
	pulumi.RegisterOutputType(AvroFileFormatOutput{})
	pulumi.RegisterOutputType(AvroFileFormatPtrOutput{})
	pulumi.RegisterOutputType(AvroFileFormatResponseOutput{})
	pulumi.RegisterOutputType(BackfillAllStrategyOutput{})
	pulumi.RegisterOutputType(BackfillAllStrategyPtrOutput{})
	pulumi.RegisterOutputType(BackfillAllStrategyResponseOutput{})
	pulumi.RegisterOutputType(BackfillNoneStrategyOutput{})
	pulumi.RegisterOutputType(BackfillNoneStrategyPtrOutput{})
	pulumi.RegisterOutputType(BackfillNoneStrategyResponseOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationConfigOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(BigQueryDestinationConfigResponseOutput{})
	pulumi.RegisterOutputType(BigQueryProfileOutput{})
	pulumi.RegisterOutputType(BigQueryProfilePtrOutput{})
	pulumi.RegisterOutputType(BigQueryProfileResponseOutput{})
	pulumi.RegisterOutputType(DatasetTemplateOutput{})
	pulumi.RegisterOutputType(DatasetTemplatePtrOutput{})
	pulumi.RegisterOutputType(DatasetTemplateResponseOutput{})
	pulumi.RegisterOutputType(DestinationConfigOutput{})
	pulumi.RegisterOutputType(DestinationConfigResponseOutput{})
	pulumi.RegisterOutputType(DropLargeObjectsOutput{})
	pulumi.RegisterOutputType(DropLargeObjectsPtrOutput{})
	pulumi.RegisterOutputType(DropLargeObjectsResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponseOutput{})
	pulumi.RegisterOutputType(ErrorResponseArrayOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityPtrOutput{})
	pulumi.RegisterOutputType(ForwardSshTunnelConnectivityResponseOutput{})
	pulumi.RegisterOutputType(GcsDestinationConfigOutput{})
	pulumi.RegisterOutputType(GcsDestinationConfigPtrOutput{})
	pulumi.RegisterOutputType(GcsDestinationConfigResponseOutput{})
	pulumi.RegisterOutputType(GcsProfileOutput{})
	pulumi.RegisterOutputType(GcsProfilePtrOutput{})
	pulumi.RegisterOutputType(GcsProfileResponseOutput{})
	pulumi.RegisterOutputType(JsonFileFormatOutput{})
	pulumi.RegisterOutputType(JsonFileFormatPtrOutput{})
	pulumi.RegisterOutputType(JsonFileFormatResponseOutput{})
	pulumi.RegisterOutputType(MysqlColumnOutput{})
	pulumi.RegisterOutputType(MysqlColumnArrayOutput{})
	pulumi.RegisterOutputType(MysqlColumnResponseOutput{})
	pulumi.RegisterOutputType(MysqlColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseResponseOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseResponseArrayOutput{})
	pulumi.RegisterOutputType(MysqlProfileOutput{})
	pulumi.RegisterOutputType(MysqlProfilePtrOutput{})
	pulumi.RegisterOutputType(MysqlProfileResponseOutput{})
	pulumi.RegisterOutputType(MysqlRdbmsOutput{})
	pulumi.RegisterOutputType(MysqlRdbmsPtrOutput{})
	pulumi.RegisterOutputType(MysqlRdbmsResponseOutput{})
	pulumi.RegisterOutputType(MysqlSourceConfigOutput{})
	pulumi.RegisterOutputType(MysqlSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(MysqlSourceConfigResponseOutput{})
	pulumi.RegisterOutputType(MysqlSslConfigOutput{})
	pulumi.RegisterOutputType(MysqlSslConfigPtrOutput{})
	pulumi.RegisterOutputType(MysqlSslConfigResponseOutput{})
	pulumi.RegisterOutputType(MysqlTableOutput{})
	pulumi.RegisterOutputType(MysqlTableArrayOutput{})
	pulumi.RegisterOutputType(MysqlTableResponseOutput{})
	pulumi.RegisterOutputType(MysqlTableResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleColumnOutput{})
	pulumi.RegisterOutputType(OracleColumnArrayOutput{})
	pulumi.RegisterOutputType(OracleColumnResponseOutput{})
	pulumi.RegisterOutputType(OracleColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleProfileOutput{})
	pulumi.RegisterOutputType(OracleProfilePtrOutput{})
	pulumi.RegisterOutputType(OracleProfileResponseOutput{})
	pulumi.RegisterOutputType(OracleRdbmsOutput{})
	pulumi.RegisterOutputType(OracleRdbmsPtrOutput{})
	pulumi.RegisterOutputType(OracleRdbmsResponseOutput{})
	pulumi.RegisterOutputType(OracleSchemaOutput{})
	pulumi.RegisterOutputType(OracleSchemaArrayOutput{})
	pulumi.RegisterOutputType(OracleSchemaResponseOutput{})
	pulumi.RegisterOutputType(OracleSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(OracleSourceConfigOutput{})
	pulumi.RegisterOutputType(OracleSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(OracleSourceConfigResponseOutput{})
	pulumi.RegisterOutputType(OracleTableOutput{})
	pulumi.RegisterOutputType(OracleTableArrayOutput{})
	pulumi.RegisterOutputType(OracleTableResponseOutput{})
	pulumi.RegisterOutputType(OracleTableResponseArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlColumnOutput{})
	pulumi.RegisterOutputType(PostgresqlColumnArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlColumnResponseOutput{})
	pulumi.RegisterOutputType(PostgresqlColumnResponseArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlProfileOutput{})
	pulumi.RegisterOutputType(PostgresqlProfilePtrOutput{})
	pulumi.RegisterOutputType(PostgresqlProfileResponseOutput{})
	pulumi.RegisterOutputType(PostgresqlRdbmsOutput{})
	pulumi.RegisterOutputType(PostgresqlRdbmsPtrOutput{})
	pulumi.RegisterOutputType(PostgresqlRdbmsResponseOutput{})
	pulumi.RegisterOutputType(PostgresqlSchemaOutput{})
	pulumi.RegisterOutputType(PostgresqlSchemaArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlSchemaResponseOutput{})
	pulumi.RegisterOutputType(PostgresqlSchemaResponseArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlSourceConfigOutput{})
	pulumi.RegisterOutputType(PostgresqlSourceConfigPtrOutput{})
	pulumi.RegisterOutputType(PostgresqlSourceConfigResponseOutput{})
	pulumi.RegisterOutputType(PostgresqlTableOutput{})
	pulumi.RegisterOutputType(PostgresqlTableArrayOutput{})
	pulumi.RegisterOutputType(PostgresqlTableResponseOutput{})
	pulumi.RegisterOutputType(PostgresqlTableResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityPtrOutput{})
	pulumi.RegisterOutputType(PrivateConnectivityResponseOutput{})
	pulumi.RegisterOutputType(SingleTargetDatasetOutput{})
	pulumi.RegisterOutputType(SingleTargetDatasetPtrOutput{})
	pulumi.RegisterOutputType(SingleTargetDatasetResponseOutput{})
	pulumi.RegisterOutputType(SourceConfigOutput{})
	pulumi.RegisterOutputType(SourceConfigResponseOutput{})
	pulumi.RegisterOutputType(SourceHierarchyDatasetsOutput{})
	pulumi.RegisterOutputType(SourceHierarchyDatasetsPtrOutput{})
	pulumi.RegisterOutputType(SourceHierarchyDatasetsResponseOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityPtrOutput{})
	pulumi.RegisterOutputType(StaticServiceIpConnectivityResponseOutput{})
	pulumi.RegisterOutputType(StreamLargeObjectsOutput{})
	pulumi.RegisterOutputType(StreamLargeObjectsPtrOutput{})
	pulumi.RegisterOutputType(StreamLargeObjectsResponseOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigPtrOutput{})
	pulumi.RegisterOutputType(VpcPeeringConfigResponseOutput{})
}
