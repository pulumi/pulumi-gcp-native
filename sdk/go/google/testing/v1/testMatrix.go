// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.
// Auto-naming is currently not supported for this resource.
// Note - this resource's API doesn't support deletion. When deleted, the resource will persist
// on Google Cloud even though it will be deleted from Pulumi state.
type TestMatrix struct {
	pulumi.CustomResourceState

	// Information about the client which invoked the test.
	ClientInfo ClientInfoResponseOutput `pulumi:"clientInfo"`
	// The devices the tests are being executed on.
	EnvironmentMatrix EnvironmentMatrixResponseOutput `pulumi:"environmentMatrix"`
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast pulumi.BoolOutput `pulumi:"failFast"`
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts pulumi.IntOutput `pulumi:"flakyTestAttempts"`
	// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
	InvalidMatrixDetails pulumi.StringOutput `pulumi:"invalidMatrixDetails"`
	// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
	OutcomeSummary pulumi.StringOutput `pulumi:"outcomeSummary"`
	Project        pulumi.StringOutput `pulumi:"project"`
	// A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
	RequestId pulumi.StringPtrOutput `pulumi:"requestId"`
	// Where the results for the matrix are written.
	ResultStorage ResultStorageResponseOutput `pulumi:"resultStorage"`
	// Indicates the current progress of the test matrix.
	State pulumi.StringOutput `pulumi:"state"`
	// The list of test executions that the service creates for this matrix.
	TestExecutions TestExecutionResponseArrayOutput `pulumi:"testExecutions"`
	// Unique id set by the service.
	TestMatrixId pulumi.StringOutput `pulumi:"testMatrixId"`
	// How to run the test.
	TestSpecification TestSpecificationResponseOutput `pulumi:"testSpecification"`
	// The time this test matrix was initially created.
	Timestamp pulumi.StringOutput `pulumi:"timestamp"`
}

// NewTestMatrix registers a new resource with the given unique name, arguments, and options.
func NewTestMatrix(ctx *pulumi.Context,
	name string, args *TestMatrixArgs, opts ...pulumi.ResourceOption) (*TestMatrix, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentMatrix == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentMatrix'")
	}
	if args.ResultStorage == nil {
		return nil, errors.New("invalid value for required argument 'ResultStorage'")
	}
	if args.TestSpecification == nil {
		return nil, errors.New("invalid value for required argument 'TestSpecification'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"project",
	})
	opts = append(opts, replaceOnChanges)
	var resource TestMatrix
	err := ctx.RegisterResource("google-native:testing/v1:TestMatrix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTestMatrix gets an existing TestMatrix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTestMatrix(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TestMatrixState, opts ...pulumi.ResourceOption) (*TestMatrix, error) {
	var resource TestMatrix
	err := ctx.ReadResource("google-native:testing/v1:TestMatrix", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TestMatrix resources.
type testMatrixState struct {
}

type TestMatrixState struct {
}

func (TestMatrixState) ElementType() reflect.Type {
	return reflect.TypeOf((*testMatrixState)(nil)).Elem()
}

type testMatrixArgs struct {
	// Information about the client which invoked the test.
	ClientInfo *ClientInfo `pulumi:"clientInfo"`
	// The devices the tests are being executed on.
	EnvironmentMatrix EnvironmentMatrix `pulumi:"environmentMatrix"`
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast *bool `pulumi:"failFast"`
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts *int `pulumi:"flakyTestAttempts"`
	// The cloud project that owns the test matrix.
	Project *string `pulumi:"project"`
	// A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
	RequestId *string `pulumi:"requestId"`
	// Where the results for the matrix are written.
	ResultStorage ResultStorage `pulumi:"resultStorage"`
	// How to run the test.
	TestSpecification TestSpecification `pulumi:"testSpecification"`
}

// The set of arguments for constructing a TestMatrix resource.
type TestMatrixArgs struct {
	// Information about the client which invoked the test.
	ClientInfo ClientInfoPtrInput
	// The devices the tests are being executed on.
	EnvironmentMatrix EnvironmentMatrixInput
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast pulumi.BoolPtrInput
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts pulumi.IntPtrInput
	// The cloud project that owns the test matrix.
	Project pulumi.StringPtrInput
	// A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
	RequestId pulumi.StringPtrInput
	// Where the results for the matrix are written.
	ResultStorage ResultStorageInput
	// How to run the test.
	TestSpecification TestSpecificationInput
}

func (TestMatrixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*testMatrixArgs)(nil)).Elem()
}

type TestMatrixInput interface {
	pulumi.Input

	ToTestMatrixOutput() TestMatrixOutput
	ToTestMatrixOutputWithContext(ctx context.Context) TestMatrixOutput
}

func (*TestMatrix) ElementType() reflect.Type {
	return reflect.TypeOf((**TestMatrix)(nil)).Elem()
}

func (i *TestMatrix) ToTestMatrixOutput() TestMatrixOutput {
	return i.ToTestMatrixOutputWithContext(context.Background())
}

func (i *TestMatrix) ToTestMatrixOutputWithContext(ctx context.Context) TestMatrixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestMatrixOutput)
}

type TestMatrixOutput struct{ *pulumi.OutputState }

func (TestMatrixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TestMatrix)(nil)).Elem()
}

func (o TestMatrixOutput) ToTestMatrixOutput() TestMatrixOutput {
	return o
}

func (o TestMatrixOutput) ToTestMatrixOutputWithContext(ctx context.Context) TestMatrixOutput {
	return o
}

// Information about the client which invoked the test.
func (o TestMatrixOutput) ClientInfo() ClientInfoResponseOutput {
	return o.ApplyT(func(v *TestMatrix) ClientInfoResponseOutput { return v.ClientInfo }).(ClientInfoResponseOutput)
}

// The devices the tests are being executed on.
func (o TestMatrixOutput) EnvironmentMatrix() EnvironmentMatrixResponseOutput {
	return o.ApplyT(func(v *TestMatrix) EnvironmentMatrixResponseOutput { return v.EnvironmentMatrix }).(EnvironmentMatrixResponseOutput)
}

// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
func (o TestMatrixOutput) FailFast() pulumi.BoolOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.BoolOutput { return v.FailFast }).(pulumi.BoolOutput)
}

// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
func (o TestMatrixOutput) FlakyTestAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.IntOutput { return v.FlakyTestAttempts }).(pulumi.IntOutput)
}

// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
func (o TestMatrixOutput) InvalidMatrixDetails() pulumi.StringOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.StringOutput { return v.InvalidMatrixDetails }).(pulumi.StringOutput)
}

// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
func (o TestMatrixOutput) OutcomeSummary() pulumi.StringOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.StringOutput { return v.OutcomeSummary }).(pulumi.StringOutput)
}

func (o TestMatrixOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// A string id used to detect duplicated requests. Ids are automatically scoped to a project, so users should ensure the ID is unique per-project. A UUID is recommended. Optional, but strongly recommended.
func (o TestMatrixOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.StringPtrOutput { return v.RequestId }).(pulumi.StringPtrOutput)
}

// Where the results for the matrix are written.
func (o TestMatrixOutput) ResultStorage() ResultStorageResponseOutput {
	return o.ApplyT(func(v *TestMatrix) ResultStorageResponseOutput { return v.ResultStorage }).(ResultStorageResponseOutput)
}

// Indicates the current progress of the test matrix.
func (o TestMatrixOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The list of test executions that the service creates for this matrix.
func (o TestMatrixOutput) TestExecutions() TestExecutionResponseArrayOutput {
	return o.ApplyT(func(v *TestMatrix) TestExecutionResponseArrayOutput { return v.TestExecutions }).(TestExecutionResponseArrayOutput)
}

// Unique id set by the service.
func (o TestMatrixOutput) TestMatrixId() pulumi.StringOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.StringOutput { return v.TestMatrixId }).(pulumi.StringOutput)
}

// How to run the test.
func (o TestMatrixOutput) TestSpecification() TestSpecificationResponseOutput {
	return o.ApplyT(func(v *TestMatrix) TestSpecificationResponseOutput { return v.TestSpecification }).(TestSpecificationResponseOutput)
}

// The time this test matrix was initially created.
func (o TestMatrixOutput) Timestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *TestMatrix) pulumi.StringOutput { return v.Timestamp }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TestMatrixInput)(nil)).Elem(), &TestMatrix{})
	pulumi.RegisterOutputType(TestMatrixOutput{})
}
