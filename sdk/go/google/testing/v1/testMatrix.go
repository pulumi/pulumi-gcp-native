// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.
type TestMatrix struct {
	pulumi.CustomResourceState

	// Information about the client which invoked the test.
	ClientInfo ClientInfoResponseOutput `pulumi:"clientInfo"`
	// Required. The devices the tests are being executed on.
	EnvironmentMatrix EnvironmentMatrixResponseOutput `pulumi:"environmentMatrix"`
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast pulumi.BoolOutput `pulumi:"failFast"`
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts pulumi.IntOutput `pulumi:"flakyTestAttempts"`
	// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
	InvalidMatrixDetails pulumi.StringOutput `pulumi:"invalidMatrixDetails"`
	// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
	OutcomeSummary pulumi.StringOutput `pulumi:"outcomeSummary"`
	// The cloud project that owns the test matrix.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Required. Where the results for the matrix are written.
	ResultStorage ResultStorageResponseOutput `pulumi:"resultStorage"`
	// Indicates the current progress of the test matrix.
	State pulumi.StringOutput `pulumi:"state"`
	// The list of test executions that the service creates for this matrix.
	TestExecutions TestExecutionResponseArrayOutput `pulumi:"testExecutions"`
	// Unique id set by the service.
	TestMatrixId pulumi.StringOutput `pulumi:"testMatrixId"`
	// Required. How to run the test.
	TestSpecification TestSpecificationResponseOutput `pulumi:"testSpecification"`
	// The time this test matrix was initially created.
	Timestamp pulumi.StringOutput `pulumi:"timestamp"`
}

// NewTestMatrix registers a new resource with the given unique name, arguments, and options.
func NewTestMatrix(ctx *pulumi.Context,
	name string, args *TestMatrixArgs, opts ...pulumi.ResourceOption) (*TestMatrix, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TestMatrixId == nil {
		return nil, errors.New("invalid value for required argument 'TestMatrixId'")
	}
	var resource TestMatrix
	err := ctx.RegisterResource("google-cloud:testing/v1:TestMatrix", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTestMatrix gets an existing TestMatrix resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTestMatrix(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TestMatrixState, opts ...pulumi.ResourceOption) (*TestMatrix, error) {
	var resource TestMatrix
	err := ctx.ReadResource("google-cloud:testing/v1:TestMatrix", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TestMatrix resources.
type testMatrixState struct {
	// Information about the client which invoked the test.
	ClientInfo *ClientInfoResponse `pulumi:"clientInfo"`
	// Required. The devices the tests are being executed on.
	EnvironmentMatrix *EnvironmentMatrixResponse `pulumi:"environmentMatrix"`
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast *bool `pulumi:"failFast"`
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts *int `pulumi:"flakyTestAttempts"`
	// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
	InvalidMatrixDetails *string `pulumi:"invalidMatrixDetails"`
	// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
	OutcomeSummary *string `pulumi:"outcomeSummary"`
	// The cloud project that owns the test matrix.
	ProjectId *string `pulumi:"projectId"`
	// Required. Where the results for the matrix are written.
	ResultStorage *ResultStorageResponse `pulumi:"resultStorage"`
	// Indicates the current progress of the test matrix.
	State *string `pulumi:"state"`
	// The list of test executions that the service creates for this matrix.
	TestExecutions []TestExecutionResponse `pulumi:"testExecutions"`
	// Unique id set by the service.
	TestMatrixId *string `pulumi:"testMatrixId"`
	// Required. How to run the test.
	TestSpecification *TestSpecificationResponse `pulumi:"testSpecification"`
	// The time this test matrix was initially created.
	Timestamp *string `pulumi:"timestamp"`
}

type TestMatrixState struct {
	// Information about the client which invoked the test.
	ClientInfo ClientInfoResponsePtrInput
	// Required. The devices the tests are being executed on.
	EnvironmentMatrix EnvironmentMatrixResponsePtrInput
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast pulumi.BoolPtrInput
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts pulumi.IntPtrInput
	// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
	InvalidMatrixDetails pulumi.StringPtrInput
	// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
	OutcomeSummary pulumi.StringPtrInput
	// The cloud project that owns the test matrix.
	ProjectId pulumi.StringPtrInput
	// Required. Where the results for the matrix are written.
	ResultStorage ResultStorageResponsePtrInput
	// Indicates the current progress of the test matrix.
	State pulumi.StringPtrInput
	// The list of test executions that the service creates for this matrix.
	TestExecutions TestExecutionResponseArrayInput
	// Unique id set by the service.
	TestMatrixId pulumi.StringPtrInput
	// Required. How to run the test.
	TestSpecification TestSpecificationResponsePtrInput
	// The time this test matrix was initially created.
	Timestamp pulumi.StringPtrInput
}

func (TestMatrixState) ElementType() reflect.Type {
	return reflect.TypeOf((*testMatrixState)(nil)).Elem()
}

type testMatrixArgs struct {
	// Information about the client which invoked the test.
	ClientInfo *ClientInfo `pulumi:"clientInfo"`
	// Required. The devices the tests are being executed on.
	EnvironmentMatrix *EnvironmentMatrix `pulumi:"environmentMatrix"`
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast *bool `pulumi:"failFast"`
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts *int `pulumi:"flakyTestAttempts"`
	// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
	InvalidMatrixDetails *string `pulumi:"invalidMatrixDetails"`
	// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
	OutcomeSummary *string `pulumi:"outcomeSummary"`
	// The cloud project that owns the test matrix.
	ProjectId string `pulumi:"projectId"`
	// Required. Where the results for the matrix are written.
	ResultStorage *ResultStorage `pulumi:"resultStorage"`
	// Indicates the current progress of the test matrix.
	State *string `pulumi:"state"`
	// The list of test executions that the service creates for this matrix.
	TestExecutions []TestExecution `pulumi:"testExecutions"`
	// Unique id set by the service.
	TestMatrixId string `pulumi:"testMatrixId"`
	// Required. How to run the test.
	TestSpecification *TestSpecification `pulumi:"testSpecification"`
	// The time this test matrix was initially created.
	Timestamp *string `pulumi:"timestamp"`
}

// The set of arguments for constructing a TestMatrix resource.
type TestMatrixArgs struct {
	// Information about the client which invoked the test.
	ClientInfo ClientInfoPtrInput
	// Required. The devices the tests are being executed on.
	EnvironmentMatrix EnvironmentMatrixPtrInput
	// If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.
	FailFast pulumi.BoolPtrInput
	// The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.
	FlakyTestAttempts pulumi.IntPtrInput
	// Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.
	InvalidMatrixDetails pulumi.StringPtrInput
	// Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.
	OutcomeSummary pulumi.StringPtrInput
	// The cloud project that owns the test matrix.
	ProjectId pulumi.StringInput
	// Required. Where the results for the matrix are written.
	ResultStorage ResultStoragePtrInput
	// Indicates the current progress of the test matrix.
	State pulumi.StringPtrInput
	// The list of test executions that the service creates for this matrix.
	TestExecutions TestExecutionArrayInput
	// Unique id set by the service.
	TestMatrixId pulumi.StringInput
	// Required. How to run the test.
	TestSpecification TestSpecificationPtrInput
	// The time this test matrix was initially created.
	Timestamp pulumi.StringPtrInput
}

func (TestMatrixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*testMatrixArgs)(nil)).Elem()
}

type TestMatrixInput interface {
	pulumi.Input

	ToTestMatrixOutput() TestMatrixOutput
	ToTestMatrixOutputWithContext(ctx context.Context) TestMatrixOutput
}

func (*TestMatrix) ElementType() reflect.Type {
	return reflect.TypeOf((*TestMatrix)(nil))
}

func (i *TestMatrix) ToTestMatrixOutput() TestMatrixOutput {
	return i.ToTestMatrixOutputWithContext(context.Background())
}

func (i *TestMatrix) ToTestMatrixOutputWithContext(ctx context.Context) TestMatrixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TestMatrixOutput)
}

type TestMatrixOutput struct {
	*pulumi.OutputState
}

func (TestMatrixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TestMatrix)(nil))
}

func (o TestMatrixOutput) ToTestMatrixOutput() TestMatrixOutput {
	return o
}

func (o TestMatrixOutput) ToTestMatrixOutputWithContext(ctx context.Context) TestMatrixOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TestMatrixOutput{})
}
