// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
type AndroidInstrumentationTestOrchestratorOption string

const (
	// Default value: the server will choose the mode. Currently implies that the test will run without the orchestrator. In the future, all instrumentation tests will be run with the orchestrator. Using the orchestrator is highly encouraged because of all the benefits it offers.
	AndroidInstrumentationTestOrchestratorOptionOrchestratorOptionUnspecified = AndroidInstrumentationTestOrchestratorOption("ORCHESTRATOR_OPTION_UNSPECIFIED")
	// Run test using orchestrator. ** Only compatible with AndroidJUnitRunner version 1.1 or higher! ** Recommended.
	AndroidInstrumentationTestOrchestratorOptionUseOrchestrator = AndroidInstrumentationTestOrchestratorOption("USE_ORCHESTRATOR")
	// Run test without using orchestrator.
	AndroidInstrumentationTestOrchestratorOptionDoNotUseOrchestrator = AndroidInstrumentationTestOrchestratorOption("DO_NOT_USE_ORCHESTRATOR")
)

func (AndroidInstrumentationTestOrchestratorOption) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidInstrumentationTestOrchestratorOption)(nil)).Elem()
}

func (e AndroidInstrumentationTestOrchestratorOption) ToAndroidInstrumentationTestOrchestratorOptionOutput() AndroidInstrumentationTestOrchestratorOptionOutput {
	return pulumi.ToOutput(e).(AndroidInstrumentationTestOrchestratorOptionOutput)
}

func (e AndroidInstrumentationTestOrchestratorOption) ToAndroidInstrumentationTestOrchestratorOptionOutputWithContext(ctx context.Context) AndroidInstrumentationTestOrchestratorOptionOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AndroidInstrumentationTestOrchestratorOptionOutput)
}

func (e AndroidInstrumentationTestOrchestratorOption) ToAndroidInstrumentationTestOrchestratorOptionPtrOutput() AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return e.ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(context.Background())
}

func (e AndroidInstrumentationTestOrchestratorOption) ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return AndroidInstrumentationTestOrchestratorOption(e).ToAndroidInstrumentationTestOrchestratorOptionOutputWithContext(ctx).ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(ctx)
}

func (e AndroidInstrumentationTestOrchestratorOption) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AndroidInstrumentationTestOrchestratorOption) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AndroidInstrumentationTestOrchestratorOption) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AndroidInstrumentationTestOrchestratorOption) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AndroidInstrumentationTestOrchestratorOptionOutput struct{ *pulumi.OutputState }

func (AndroidInstrumentationTestOrchestratorOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidInstrumentationTestOrchestratorOption)(nil)).Elem()
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToAndroidInstrumentationTestOrchestratorOptionOutput() AndroidInstrumentationTestOrchestratorOptionOutput {
	return o
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToAndroidInstrumentationTestOrchestratorOptionOutputWithContext(ctx context.Context) AndroidInstrumentationTestOrchestratorOptionOutput {
	return o
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToAndroidInstrumentationTestOrchestratorOptionPtrOutput() AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return o.ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(context.Background())
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AndroidInstrumentationTestOrchestratorOption) *AndroidInstrumentationTestOrchestratorOption {
		return &v
	}).(AndroidInstrumentationTestOrchestratorOptionPtrOutput)
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AndroidInstrumentationTestOrchestratorOption) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AndroidInstrumentationTestOrchestratorOptionOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AndroidInstrumentationTestOrchestratorOption) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AndroidInstrumentationTestOrchestratorOptionPtrOutput struct{ *pulumi.OutputState }

func (AndroidInstrumentationTestOrchestratorOptionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidInstrumentationTestOrchestratorOption)(nil)).Elem()
}

func (o AndroidInstrumentationTestOrchestratorOptionPtrOutput) ToAndroidInstrumentationTestOrchestratorOptionPtrOutput() AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return o
}

func (o AndroidInstrumentationTestOrchestratorOptionPtrOutput) ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return o
}

func (o AndroidInstrumentationTestOrchestratorOptionPtrOutput) Elem() AndroidInstrumentationTestOrchestratorOptionOutput {
	return o.ApplyT(func(v *AndroidInstrumentationTestOrchestratorOption) AndroidInstrumentationTestOrchestratorOption {
		if v != nil {
			return *v
		}
		var ret AndroidInstrumentationTestOrchestratorOption
		return ret
	}).(AndroidInstrumentationTestOrchestratorOptionOutput)
}

func (o AndroidInstrumentationTestOrchestratorOptionPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AndroidInstrumentationTestOrchestratorOptionPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AndroidInstrumentationTestOrchestratorOption) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AndroidInstrumentationTestOrchestratorOptionInput is an input type that accepts values of the AndroidInstrumentationTestOrchestratorOption enum
// A concrete instance of `AndroidInstrumentationTestOrchestratorOptionInput` can be one of the following:
//
//	AndroidInstrumentationTestOrchestratorOptionOrchestratorOptionUnspecified
//	AndroidInstrumentationTestOrchestratorOptionUseOrchestrator
//	AndroidInstrumentationTestOrchestratorOptionDoNotUseOrchestrator
type AndroidInstrumentationTestOrchestratorOptionInput interface {
	pulumi.Input

	ToAndroidInstrumentationTestOrchestratorOptionOutput() AndroidInstrumentationTestOrchestratorOptionOutput
	ToAndroidInstrumentationTestOrchestratorOptionOutputWithContext(context.Context) AndroidInstrumentationTestOrchestratorOptionOutput
}

var androidInstrumentationTestOrchestratorOptionPtrType = reflect.TypeOf((**AndroidInstrumentationTestOrchestratorOption)(nil)).Elem()

type AndroidInstrumentationTestOrchestratorOptionPtrInput interface {
	pulumi.Input

	ToAndroidInstrumentationTestOrchestratorOptionPtrOutput() AndroidInstrumentationTestOrchestratorOptionPtrOutput
	ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(context.Context) AndroidInstrumentationTestOrchestratorOptionPtrOutput
}

type androidInstrumentationTestOrchestratorOptionPtr string

func AndroidInstrumentationTestOrchestratorOptionPtr(v string) AndroidInstrumentationTestOrchestratorOptionPtrInput {
	return (*androidInstrumentationTestOrchestratorOptionPtr)(&v)
}

func (*androidInstrumentationTestOrchestratorOptionPtr) ElementType() reflect.Type {
	return androidInstrumentationTestOrchestratorOptionPtrType
}

func (in *androidInstrumentationTestOrchestratorOptionPtr) ToAndroidInstrumentationTestOrchestratorOptionPtrOutput() AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return pulumi.ToOutput(in).(AndroidInstrumentationTestOrchestratorOptionPtrOutput)
}

func (in *androidInstrumentationTestOrchestratorOptionPtr) ToAndroidInstrumentationTestOrchestratorOptionPtrOutputWithContext(ctx context.Context) AndroidInstrumentationTestOrchestratorOptionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AndroidInstrumentationTestOrchestratorOptionPtrOutput)
}

// The mode in which Robo should run. Most clients should allow the server to populate this field automatically.
type AndroidRoboTestRoboMode string

const (
	// This means that the server should choose the mode. Recommended.
	AndroidRoboTestRoboModeRoboModeUnspecified = AndroidRoboTestRoboMode("ROBO_MODE_UNSPECIFIED")
	// Runs Robo in UIAutomator-only mode without app resigning
	AndroidRoboTestRoboModeRoboVersion1 = AndroidRoboTestRoboMode("ROBO_VERSION_1")
	// Runs Robo in standard Espresso with UIAutomator fallback
	AndroidRoboTestRoboModeRoboVersion2 = AndroidRoboTestRoboMode("ROBO_VERSION_2")
)

func (AndroidRoboTestRoboMode) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidRoboTestRoboMode)(nil)).Elem()
}

func (e AndroidRoboTestRoboMode) ToAndroidRoboTestRoboModeOutput() AndroidRoboTestRoboModeOutput {
	return pulumi.ToOutput(e).(AndroidRoboTestRoboModeOutput)
}

func (e AndroidRoboTestRoboMode) ToAndroidRoboTestRoboModeOutputWithContext(ctx context.Context) AndroidRoboTestRoboModeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AndroidRoboTestRoboModeOutput)
}

func (e AndroidRoboTestRoboMode) ToAndroidRoboTestRoboModePtrOutput() AndroidRoboTestRoboModePtrOutput {
	return e.ToAndroidRoboTestRoboModePtrOutputWithContext(context.Background())
}

func (e AndroidRoboTestRoboMode) ToAndroidRoboTestRoboModePtrOutputWithContext(ctx context.Context) AndroidRoboTestRoboModePtrOutput {
	return AndroidRoboTestRoboMode(e).ToAndroidRoboTestRoboModeOutputWithContext(ctx).ToAndroidRoboTestRoboModePtrOutputWithContext(ctx)
}

func (e AndroidRoboTestRoboMode) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AndroidRoboTestRoboMode) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AndroidRoboTestRoboMode) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AndroidRoboTestRoboMode) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AndroidRoboTestRoboModeOutput struct{ *pulumi.OutputState }

func (AndroidRoboTestRoboModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AndroidRoboTestRoboMode)(nil)).Elem()
}

func (o AndroidRoboTestRoboModeOutput) ToAndroidRoboTestRoboModeOutput() AndroidRoboTestRoboModeOutput {
	return o
}

func (o AndroidRoboTestRoboModeOutput) ToAndroidRoboTestRoboModeOutputWithContext(ctx context.Context) AndroidRoboTestRoboModeOutput {
	return o
}

func (o AndroidRoboTestRoboModeOutput) ToAndroidRoboTestRoboModePtrOutput() AndroidRoboTestRoboModePtrOutput {
	return o.ToAndroidRoboTestRoboModePtrOutputWithContext(context.Background())
}

func (o AndroidRoboTestRoboModeOutput) ToAndroidRoboTestRoboModePtrOutputWithContext(ctx context.Context) AndroidRoboTestRoboModePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AndroidRoboTestRoboMode) *AndroidRoboTestRoboMode {
		return &v
	}).(AndroidRoboTestRoboModePtrOutput)
}

func (o AndroidRoboTestRoboModeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AndroidRoboTestRoboModeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AndroidRoboTestRoboMode) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AndroidRoboTestRoboModeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AndroidRoboTestRoboModeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AndroidRoboTestRoboMode) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AndroidRoboTestRoboModePtrOutput struct{ *pulumi.OutputState }

func (AndroidRoboTestRoboModePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AndroidRoboTestRoboMode)(nil)).Elem()
}

func (o AndroidRoboTestRoboModePtrOutput) ToAndroidRoboTestRoboModePtrOutput() AndroidRoboTestRoboModePtrOutput {
	return o
}

func (o AndroidRoboTestRoboModePtrOutput) ToAndroidRoboTestRoboModePtrOutputWithContext(ctx context.Context) AndroidRoboTestRoboModePtrOutput {
	return o
}

func (o AndroidRoboTestRoboModePtrOutput) Elem() AndroidRoboTestRoboModeOutput {
	return o.ApplyT(func(v *AndroidRoboTestRoboMode) AndroidRoboTestRoboMode {
		if v != nil {
			return *v
		}
		var ret AndroidRoboTestRoboMode
		return ret
	}).(AndroidRoboTestRoboModeOutput)
}

func (o AndroidRoboTestRoboModePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AndroidRoboTestRoboModePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AndroidRoboTestRoboMode) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AndroidRoboTestRoboModeInput is an input type that accepts values of the AndroidRoboTestRoboMode enum
// A concrete instance of `AndroidRoboTestRoboModeInput` can be one of the following:
//
//	AndroidRoboTestRoboModeRoboModeUnspecified
//	AndroidRoboTestRoboModeRoboVersion1
//	AndroidRoboTestRoboModeRoboVersion2
type AndroidRoboTestRoboModeInput interface {
	pulumi.Input

	ToAndroidRoboTestRoboModeOutput() AndroidRoboTestRoboModeOutput
	ToAndroidRoboTestRoboModeOutputWithContext(context.Context) AndroidRoboTestRoboModeOutput
}

var androidRoboTestRoboModePtrType = reflect.TypeOf((**AndroidRoboTestRoboMode)(nil)).Elem()

type AndroidRoboTestRoboModePtrInput interface {
	pulumi.Input

	ToAndroidRoboTestRoboModePtrOutput() AndroidRoboTestRoboModePtrOutput
	ToAndroidRoboTestRoboModePtrOutputWithContext(context.Context) AndroidRoboTestRoboModePtrOutput
}

type androidRoboTestRoboModePtr string

func AndroidRoboTestRoboModePtr(v string) AndroidRoboTestRoboModePtrInput {
	return (*androidRoboTestRoboModePtr)(&v)
}

func (*androidRoboTestRoboModePtr) ElementType() reflect.Type {
	return androidRoboTestRoboModePtrType
}

func (in *androidRoboTestRoboModePtr) ToAndroidRoboTestRoboModePtrOutput() AndroidRoboTestRoboModePtrOutput {
	return pulumi.ToOutput(in).(AndroidRoboTestRoboModePtrOutput)
}

func (in *androidRoboTestRoboModePtr) ToAndroidRoboTestRoboModePtrOutputWithContext(ctx context.Context) AndroidRoboTestRoboModePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AndroidRoboTestRoboModePtrOutput)
}

// Required. The type of action that Robo should perform on the specified element.
type RoboDirectiveActionType string

const (
	// DO NOT USE. For proto versioning only.
	RoboDirectiveActionTypeActionTypeUnspecified = RoboDirectiveActionType("ACTION_TYPE_UNSPECIFIED")
	// Direct Robo to click on the specified element. No-op if specified element is not clickable.
	RoboDirectiveActionTypeSingleClick = RoboDirectiveActionType("SINGLE_CLICK")
	// Direct Robo to enter text on the specified element. No-op if specified element is not enabled or does not allow text entry.
	RoboDirectiveActionTypeEnterText = RoboDirectiveActionType("ENTER_TEXT")
	// Direct Robo to ignore interactions with a specific element.
	RoboDirectiveActionTypeIgnore = RoboDirectiveActionType("IGNORE")
)

func (RoboDirectiveActionType) ElementType() reflect.Type {
	return reflect.TypeOf((*RoboDirectiveActionType)(nil)).Elem()
}

func (e RoboDirectiveActionType) ToRoboDirectiveActionTypeOutput() RoboDirectiveActionTypeOutput {
	return pulumi.ToOutput(e).(RoboDirectiveActionTypeOutput)
}

func (e RoboDirectiveActionType) ToRoboDirectiveActionTypeOutputWithContext(ctx context.Context) RoboDirectiveActionTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(RoboDirectiveActionTypeOutput)
}

func (e RoboDirectiveActionType) ToRoboDirectiveActionTypePtrOutput() RoboDirectiveActionTypePtrOutput {
	return e.ToRoboDirectiveActionTypePtrOutputWithContext(context.Background())
}

func (e RoboDirectiveActionType) ToRoboDirectiveActionTypePtrOutputWithContext(ctx context.Context) RoboDirectiveActionTypePtrOutput {
	return RoboDirectiveActionType(e).ToRoboDirectiveActionTypeOutputWithContext(ctx).ToRoboDirectiveActionTypePtrOutputWithContext(ctx)
}

func (e RoboDirectiveActionType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoboDirectiveActionType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e RoboDirectiveActionType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RoboDirectiveActionType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type RoboDirectiveActionTypeOutput struct{ *pulumi.OutputState }

func (RoboDirectiveActionTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoboDirectiveActionType)(nil)).Elem()
}

func (o RoboDirectiveActionTypeOutput) ToRoboDirectiveActionTypeOutput() RoboDirectiveActionTypeOutput {
	return o
}

func (o RoboDirectiveActionTypeOutput) ToRoboDirectiveActionTypeOutputWithContext(ctx context.Context) RoboDirectiveActionTypeOutput {
	return o
}

func (o RoboDirectiveActionTypeOutput) ToRoboDirectiveActionTypePtrOutput() RoboDirectiveActionTypePtrOutput {
	return o.ToRoboDirectiveActionTypePtrOutputWithContext(context.Background())
}

func (o RoboDirectiveActionTypeOutput) ToRoboDirectiveActionTypePtrOutputWithContext(ctx context.Context) RoboDirectiveActionTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RoboDirectiveActionType) *RoboDirectiveActionType {
		return &v
	}).(RoboDirectiveActionTypePtrOutput)
}

func (o RoboDirectiveActionTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o RoboDirectiveActionTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoboDirectiveActionType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o RoboDirectiveActionTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoboDirectiveActionTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e RoboDirectiveActionType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type RoboDirectiveActionTypePtrOutput struct{ *pulumi.OutputState }

func (RoboDirectiveActionTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoboDirectiveActionType)(nil)).Elem()
}

func (o RoboDirectiveActionTypePtrOutput) ToRoboDirectiveActionTypePtrOutput() RoboDirectiveActionTypePtrOutput {
	return o
}

func (o RoboDirectiveActionTypePtrOutput) ToRoboDirectiveActionTypePtrOutputWithContext(ctx context.Context) RoboDirectiveActionTypePtrOutput {
	return o
}

func (o RoboDirectiveActionTypePtrOutput) Elem() RoboDirectiveActionTypeOutput {
	return o.ApplyT(func(v *RoboDirectiveActionType) RoboDirectiveActionType {
		if v != nil {
			return *v
		}
		var ret RoboDirectiveActionType
		return ret
	}).(RoboDirectiveActionTypeOutput)
}

func (o RoboDirectiveActionTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o RoboDirectiveActionTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *RoboDirectiveActionType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// RoboDirectiveActionTypeInput is an input type that accepts values of the RoboDirectiveActionType enum
// A concrete instance of `RoboDirectiveActionTypeInput` can be one of the following:
//
//	RoboDirectiveActionTypeActionTypeUnspecified
//	RoboDirectiveActionTypeSingleClick
//	RoboDirectiveActionTypeEnterText
//	RoboDirectiveActionTypeIgnore
type RoboDirectiveActionTypeInput interface {
	pulumi.Input

	ToRoboDirectiveActionTypeOutput() RoboDirectiveActionTypeOutput
	ToRoboDirectiveActionTypeOutputWithContext(context.Context) RoboDirectiveActionTypeOutput
}

var roboDirectiveActionTypePtrType = reflect.TypeOf((**RoboDirectiveActionType)(nil)).Elem()

type RoboDirectiveActionTypePtrInput interface {
	pulumi.Input

	ToRoboDirectiveActionTypePtrOutput() RoboDirectiveActionTypePtrOutput
	ToRoboDirectiveActionTypePtrOutputWithContext(context.Context) RoboDirectiveActionTypePtrOutput
}

type roboDirectiveActionTypePtr string

func RoboDirectiveActionTypePtr(v string) RoboDirectiveActionTypePtrInput {
	return (*roboDirectiveActionTypePtr)(&v)
}

func (*roboDirectiveActionTypePtr) ElementType() reflect.Type {
	return roboDirectiveActionTypePtrType
}

func (in *roboDirectiveActionTypePtr) ToRoboDirectiveActionTypePtrOutput() RoboDirectiveActionTypePtrOutput {
	return pulumi.ToOutput(in).(RoboDirectiveActionTypePtrOutput)
}

func (in *roboDirectiveActionTypePtr) ToRoboDirectiveActionTypePtrOutputWithContext(ctx context.Context) RoboDirectiveActionTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(RoboDirectiveActionTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AndroidInstrumentationTestOrchestratorOptionInput)(nil)).Elem(), AndroidInstrumentationTestOrchestratorOption("ORCHESTRATOR_OPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AndroidInstrumentationTestOrchestratorOptionPtrInput)(nil)).Elem(), AndroidInstrumentationTestOrchestratorOption("ORCHESTRATOR_OPTION_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AndroidRoboTestRoboModeInput)(nil)).Elem(), AndroidRoboTestRoboMode("ROBO_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*AndroidRoboTestRoboModePtrInput)(nil)).Elem(), AndroidRoboTestRoboMode("ROBO_MODE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoboDirectiveActionTypeInput)(nil)).Elem(), RoboDirectiveActionType("ACTION_TYPE_UNSPECIFIED"))
	pulumi.RegisterInputType(reflect.TypeOf((*RoboDirectiveActionTypePtrInput)(nil)).Elem(), RoboDirectiveActionType("ACTION_TYPE_UNSPECIFIED"))
	pulumi.RegisterOutputType(AndroidInstrumentationTestOrchestratorOptionOutput{})
	pulumi.RegisterOutputType(AndroidInstrumentationTestOrchestratorOptionPtrOutput{})
	pulumi.RegisterOutputType(AndroidRoboTestRoboModeOutput{})
	pulumi.RegisterOutputType(AndroidRoboTestRoboModePtrOutput{})
	pulumi.RegisterOutputType(RoboDirectiveActionTypeOutput{})
	pulumi.RegisterOutputType(RoboDirectiveActionTypePtrOutput{})
}
