// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-google-native/sdk/go/google/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfig struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfig `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service *string `pulumi:"service"`
}

// AuditConfigInput is an input type that accepts AuditConfigArgs and AuditConfigOutput values.
// You can construct a concrete instance of `AuditConfigInput` via:
//
//	AuditConfigArgs{...}
type AuditConfigInput interface {
	pulumi.Input

	ToAuditConfigOutput() AuditConfigOutput
	ToAuditConfigOutputWithContext(context.Context) AuditConfigOutput
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigArgs struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs AuditLogConfigArrayInput `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (AuditConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (i AuditConfigArgs) ToAuditConfigOutput() AuditConfigOutput {
	return i.ToAuditConfigOutputWithContext(context.Background())
}

func (i AuditConfigArgs) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigOutput)
}

// AuditConfigArrayInput is an input type that accepts AuditConfigArray and AuditConfigArrayOutput values.
// You can construct a concrete instance of `AuditConfigArrayInput` via:
//
//	AuditConfigArray{ AuditConfigArgs{...} }
type AuditConfigArrayInput interface {
	pulumi.Input

	ToAuditConfigArrayOutput() AuditConfigArrayOutput
	ToAuditConfigArrayOutputWithContext(context.Context) AuditConfigArrayOutput
}

type AuditConfigArray []AuditConfigInput

func (AuditConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (i AuditConfigArray) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return i.ToAuditConfigArrayOutputWithContext(context.Background())
}

func (i AuditConfigArray) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditConfigArrayOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigOutput struct{ *pulumi.OutputState }

func (AuditConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfig)(nil)).Elem()
}

func (o AuditConfigOutput) ToAuditConfigOutput() AuditConfigOutput {
	return o
}

func (o AuditConfigOutput) ToAuditConfigOutputWithContext(ctx context.Context) AuditConfigOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigOutput) AuditLogConfigs() AuditLogConfigArrayOutput {
	return o.ApplyT(func(v AuditConfig) []AuditLogConfig { return v.AuditLogConfigs }).(AuditLogConfigArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditConfig) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type AuditConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfig)(nil)).Elem()
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutput() AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) ToAuditConfigArrayOutputWithContext(ctx context.Context) AuditConfigArrayOutput {
	return o
}

func (o AuditConfigArrayOutput) Index(i pulumi.IntInput) AuditConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfig {
		return vs[0].([]AuditConfig)[vs[1].(int)]
	}).(AuditConfigOutput)
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponse struct {
	// The configuration for logging of each type of permission.
	AuditLogConfigs []AuditLogConfigResponse `pulumi:"auditLogConfigs"`
	// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
	Service string `pulumi:"service"`
}

// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
type AuditConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutput() AuditConfigResponseOutput {
	return o
}

func (o AuditConfigResponseOutput) ToAuditConfigResponseOutputWithContext(ctx context.Context) AuditConfigResponseOutput {
	return o
}

// The configuration for logging of each type of permission.
func (o AuditConfigResponseOutput) AuditLogConfigs() AuditLogConfigResponseArrayOutput {
	return o.ApplyT(func(v AuditConfigResponse) []AuditLogConfigResponse { return v.AuditLogConfigs }).(AuditLogConfigResponseArrayOutput)
}

// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
func (o AuditConfigResponseOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v AuditConfigResponse) string { return v.Service }).(pulumi.StringOutput)
}

type AuditConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditConfigResponse)(nil)).Elem()
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutput() AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) ToAuditConfigResponseArrayOutputWithContext(ctx context.Context) AuditConfigResponseArrayOutput {
	return o
}

func (o AuditConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditConfigResponse {
		return vs[0].([]AuditConfigResponse)[vs[1].(int)]
	}).(AuditConfigResponseOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogType `pulumi:"logType"`
}

// AuditLogConfigInput is an input type that accepts AuditLogConfigArgs and AuditLogConfigOutput values.
// You can construct a concrete instance of `AuditLogConfigInput` via:
//
//	AuditLogConfigArgs{...}
type AuditLogConfigInput interface {
	pulumi.Input

	ToAuditLogConfigOutput() AuditLogConfigOutput
	ToAuditLogConfigOutputWithContext(context.Context) AuditLogConfigOutput
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigArgs struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers pulumi.StringArrayInput `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType AuditLogConfigLogTypePtrInput `pulumi:"logType"`
}

func (AuditLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return i.ToAuditLogConfigOutputWithContext(context.Background())
}

func (i AuditLogConfigArgs) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigOutput)
}

// AuditLogConfigArrayInput is an input type that accepts AuditLogConfigArray and AuditLogConfigArrayOutput values.
// You can construct a concrete instance of `AuditLogConfigArrayInput` via:
//
//	AuditLogConfigArray{ AuditLogConfigArgs{...} }
type AuditLogConfigArrayInput interface {
	pulumi.Input

	ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput
	ToAuditLogConfigArrayOutputWithContext(context.Context) AuditLogConfigArrayOutput
}

type AuditLogConfigArray []AuditLogConfigInput

func (AuditLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return i.ToAuditLogConfigArrayOutputWithContext(context.Background())
}

func (i AuditLogConfigArray) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditLogConfigArrayOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigOutput struct{ *pulumi.OutputState }

func (AuditLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutput() AuditLogConfigOutput {
	return o
}

func (o AuditLogConfigOutput) ToAuditLogConfigOutputWithContext(ctx context.Context) AuditLogConfigOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfig) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigOutput) LogType() AuditLogConfigLogTypePtrOutput {
	return o.ApplyT(func(v AuditLogConfig) *AuditLogConfigLogType { return v.LogType }).(AuditLogConfigLogTypePtrOutput)
}

type AuditLogConfigArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfig)(nil)).Elem()
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutput() AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) ToAuditLogConfigArrayOutputWithContext(ctx context.Context) AuditLogConfigArrayOutput {
	return o
}

func (o AuditLogConfigArrayOutput) Index(i pulumi.IntInput) AuditLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfig {
		return vs[0].([]AuditLogConfig)[vs[1].(int)]
	}).(AuditLogConfigOutput)
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponse struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `pulumi:"exemptedMembers"`
	// The log type that this config enables.
	LogType string `pulumi:"logType"`
}

// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfigResponseOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutput() AuditLogConfigResponseOutput {
	return o
}

func (o AuditLogConfigResponseOutput) ToAuditLogConfigResponseOutputWithContext(ctx context.Context) AuditLogConfigResponseOutput {
	return o
}

// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
func (o AuditLogConfigResponseOutput) ExemptedMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) []string { return v.ExemptedMembers }).(pulumi.StringArrayOutput)
}

// The log type that this config enables.
func (o AuditLogConfigResponseOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditLogConfigResponse) string { return v.LogType }).(pulumi.StringOutput)
}

type AuditLogConfigResponseArrayOutput struct{ *pulumi.OutputState }

func (AuditLogConfigResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditLogConfigResponse)(nil)).Elem()
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutput() AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) ToAuditLogConfigResponseArrayOutputWithContext(ctx context.Context) AuditLogConfigResponseArrayOutput {
	return o
}

func (o AuditLogConfigResponseArrayOutput) Index(i pulumi.IntInput) AuditLogConfigResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditLogConfigResponse {
		return vs[0].([]AuditLogConfigResponse)[vs[1].(int)]
	}).(AuditLogConfigResponseOutput)
}

// Associates `members`, or principals, with a `role`.
type Binding struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition *Expr `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role *string `pulumi:"role"`
}

// BindingInput is an input type that accepts BindingArgs and BindingOutput values.
// You can construct a concrete instance of `BindingInput` via:
//
//	BindingArgs{...}
type BindingInput interface {
	pulumi.Input

	ToBindingOutput() BindingOutput
	ToBindingOutputWithContext(context.Context) BindingOutput
}

// Associates `members`, or principals, with a `role`.
type BindingArgs struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprPtrInput `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members pulumi.StringArrayInput `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role pulumi.StringPtrInput `pulumi:"role"`
}

func (BindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (i BindingArgs) ToBindingOutput() BindingOutput {
	return i.ToBindingOutputWithContext(context.Background())
}

func (i BindingArgs) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingOutput)
}

// BindingArrayInput is an input type that accepts BindingArray and BindingArrayOutput values.
// You can construct a concrete instance of `BindingArrayInput` via:
//
//	BindingArray{ BindingArgs{...} }
type BindingArrayInput interface {
	pulumi.Input

	ToBindingArrayOutput() BindingArrayOutput
	ToBindingArrayOutputWithContext(context.Context) BindingArrayOutput
}

type BindingArray []BindingInput

func (BindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (i BindingArray) ToBindingArrayOutput() BindingArrayOutput {
	return i.ToBindingArrayOutputWithContext(context.Background())
}

func (i BindingArray) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingArrayOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingOutput struct{ *pulumi.OutputState }

func (BindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Binding)(nil)).Elem()
}

func (o BindingOutput) ToBindingOutput() BindingOutput {
	return o
}

func (o BindingOutput) ToBindingOutputWithContext(ctx context.Context) BindingOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingOutput) Condition() ExprPtrOutput {
	return o.ApplyT(func(v Binding) *Expr { return v.Condition }).(ExprPtrOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Binding) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Binding) *string { return v.Role }).(pulumi.StringPtrOutput)
}

type BindingArrayOutput struct{ *pulumi.OutputState }

func (BindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Binding)(nil)).Elem()
}

func (o BindingArrayOutput) ToBindingArrayOutput() BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) ToBindingArrayOutputWithContext(ctx context.Context) BindingArrayOutput {
	return o
}

func (o BindingArrayOutput) Index(i pulumi.IntInput) BindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Binding {
		return vs[0].([]Binding)[vs[1].(int)]
	}).(BindingOutput)
}

// Associates `members`, or principals, with a `role`.
type BindingResponse struct {
	// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
	Condition ExprResponse `pulumi:"condition"`
	// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
	Members []string `pulumi:"members"`
	// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
	Role string `pulumi:"role"`
}

// Associates `members`, or principals, with a `role`.
type BindingResponseOutput struct{ *pulumi.OutputState }

func (BindingResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BindingResponse)(nil)).Elem()
}

func (o BindingResponseOutput) ToBindingResponseOutput() BindingResponseOutput {
	return o
}

func (o BindingResponseOutput) ToBindingResponseOutputWithContext(ctx context.Context) BindingResponseOutput {
	return o
}

// The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
func (o BindingResponseOutput) Condition() ExprResponseOutput {
	return o.ApplyT(func(v BindingResponse) ExprResponse { return v.Condition }).(ExprResponseOutput)
}

// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.
func (o BindingResponseOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BindingResponse) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
func (o BindingResponseOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v BindingResponse) string { return v.Role }).(pulumi.StringOutput)
}

type BindingResponseArrayOutput struct{ *pulumi.OutputState }

func (BindingResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BindingResponse)(nil)).Elem()
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutput() BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) ToBindingResponseArrayOutputWithContext(ctx context.Context) BindingResponseArrayOutput {
	return o
}

func (o BindingResponseArrayOutput) Index(i pulumi.IntInput) BindingResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BindingResponse {
		return vs[0].([]BindingResponse)[vs[1].(int)]
	}).(BindingResponseOutput)
}

// A Docker container.
type Container struct {
	// Optional. Arguments passed to the entrypoint.
	Args []string `pulumi:"args"`
	// Optional. If set, overrides the default ENTRYPOINT specified by the image.
	Command []string `pulumi:"command"`
	// Optional. Environment variables passed to the container's entrypoint.
	Env map[string]string `pulumi:"env"`
	// Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.
	Image *string `pulumi:"image"`
	// Optional. If set, overrides the USER specified in the image with the given uid.
	RunAsUser *int `pulumi:"runAsUser"`
	// Optional. If set, overrides the default DIR specified by the image.
	WorkingDir *string `pulumi:"workingDir"`
}

// ContainerInput is an input type that accepts ContainerArgs and ContainerOutput values.
// You can construct a concrete instance of `ContainerInput` via:
//
//	ContainerArgs{...}
type ContainerInput interface {
	pulumi.Input

	ToContainerOutput() ContainerOutput
	ToContainerOutputWithContext(context.Context) ContainerOutput
}

// A Docker container.
type ContainerArgs struct {
	// Optional. Arguments passed to the entrypoint.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Optional. If set, overrides the default ENTRYPOINT specified by the image.
	Command pulumi.StringArrayInput `pulumi:"command"`
	// Optional. Environment variables passed to the container's entrypoint.
	Env pulumi.StringMapInput `pulumi:"env"`
	// Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Optional. If set, overrides the USER specified in the image with the given uid.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// Optional. If set, overrides the default DIR specified by the image.
	WorkingDir pulumi.StringPtrInput `pulumi:"workingDir"`
}

func (ContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (i ContainerArgs) ToContainerOutput() ContainerOutput {
	return i.ToContainerOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput)
}

func (i ContainerArgs) ToContainerPtrOutput() ContainerPtrOutput {
	return i.ToContainerPtrOutputWithContext(context.Background())
}

func (i ContainerArgs) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerOutput).ToContainerPtrOutputWithContext(ctx)
}

// ContainerPtrInput is an input type that accepts ContainerArgs, ContainerPtr and ContainerPtrOutput values.
// You can construct a concrete instance of `ContainerPtrInput` via:
//
//	        ContainerArgs{...}
//
//	or:
//
//	        nil
type ContainerPtrInput interface {
	pulumi.Input

	ToContainerPtrOutput() ContainerPtrOutput
	ToContainerPtrOutputWithContext(context.Context) ContainerPtrOutput
}

type containerPtrType ContainerArgs

func ContainerPtr(v *ContainerArgs) ContainerPtrInput {
	return (*containerPtrType)(v)
}

func (*containerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (i *containerPtrType) ToContainerPtrOutput() ContainerPtrOutput {
	return i.ToContainerPtrOutputWithContext(context.Background())
}

func (i *containerPtrType) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerPtrOutput)
}

// A Docker container.
type ContainerOutput struct{ *pulumi.OutputState }

func (ContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Container)(nil)).Elem()
}

func (o ContainerOutput) ToContainerOutput() ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerOutputWithContext(ctx context.Context) ContainerOutput {
	return o
}

func (o ContainerOutput) ToContainerPtrOutput() ContainerPtrOutput {
	return o.ToContainerPtrOutputWithContext(context.Background())
}

func (o ContainerOutput) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Container) *Container {
		return &v
	}).(ContainerPtrOutput)
}

// Optional. Arguments passed to the entrypoint.
func (o ContainerOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Optional. If set, overrides the default ENTRYPOINT specified by the image.
func (o ContainerOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Container) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Optional. Environment variables passed to the container's entrypoint.
func (o ContainerOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v Container) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

// Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.
func (o ContainerOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Optional. If set, overrides the USER specified in the image with the given uid.
func (o ContainerOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Container) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// Optional. If set, overrides the default DIR specified by the image.
func (o ContainerOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Container) *string { return v.WorkingDir }).(pulumi.StringPtrOutput)
}

type ContainerPtrOutput struct{ *pulumi.OutputState }

func (ContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Container)(nil)).Elem()
}

func (o ContainerPtrOutput) ToContainerPtrOutput() ContainerPtrOutput {
	return o
}

func (o ContainerPtrOutput) ToContainerPtrOutputWithContext(ctx context.Context) ContainerPtrOutput {
	return o
}

func (o ContainerPtrOutput) Elem() ContainerOutput {
	return o.ApplyT(func(v *Container) Container {
		if v != nil {
			return *v
		}
		var ret Container
		return ret
	}).(ContainerOutput)
}

// Optional. Arguments passed to the entrypoint.
func (o ContainerPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Optional. If set, overrides the default ENTRYPOINT specified by the image.
func (o ContainerPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Container) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Optional. Environment variables passed to the container's entrypoint.
func (o ContainerPtrOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Container) map[string]string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringMapOutput)
}

// Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.
func (o ContainerPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Optional. If set, overrides the USER specified in the image with the given uid.
func (o ContainerPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Container) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// Optional. If set, overrides the default DIR specified by the image.
func (o ContainerPtrOutput) WorkingDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Container) *string {
		if v == nil {
			return nil
		}
		return v.WorkingDir
	}).(pulumi.StringPtrOutput)
}

// A Docker container.
type ContainerResponse struct {
	// Optional. Arguments passed to the entrypoint.
	Args []string `pulumi:"args"`
	// Optional. If set, overrides the default ENTRYPOINT specified by the image.
	Command []string `pulumi:"command"`
	// Optional. Environment variables passed to the container's entrypoint.
	Env map[string]string `pulumi:"env"`
	// Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.
	Image string `pulumi:"image"`
	// Optional. If set, overrides the USER specified in the image with the given uid.
	RunAsUser int `pulumi:"runAsUser"`
	// Optional. If set, overrides the default DIR specified by the image.
	WorkingDir string `pulumi:"workingDir"`
}

// A Docker container.
type ContainerResponseOutput struct{ *pulumi.OutputState }

func (ContainerResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerResponse)(nil)).Elem()
}

func (o ContainerResponseOutput) ToContainerResponseOutput() ContainerResponseOutput {
	return o
}

func (o ContainerResponseOutput) ToContainerResponseOutputWithContext(ctx context.Context) ContainerResponseOutput {
	return o
}

// Optional. Arguments passed to the entrypoint.
func (o ContainerResponseOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Optional. If set, overrides the default ENTRYPOINT specified by the image.
func (o ContainerResponseOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContainerResponse) []string { return v.Command }).(pulumi.StringArrayOutput)
}

// Optional. Environment variables passed to the container's entrypoint.
func (o ContainerResponseOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContainerResponse) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

// Optional. A Docker container image that defines a custom environment. Cloud Workstations provides a number of [preconfigured images](https://cloud.google.com/workstations/docs/preconfigured-base-images), but you can create your own [custom container images](https://cloud.google.com/workstations/docs/custom-container-images). If using a private image, the `host.gceInstance.serviceAccount` field must be specified in the workstation configuration. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. Otherwise, the image must be publicly accessible.
func (o ContainerResponseOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.Image }).(pulumi.StringOutput)
}

// Optional. If set, overrides the USER specified in the image with the given uid.
func (o ContainerResponseOutput) RunAsUser() pulumi.IntOutput {
	return o.ApplyT(func(v ContainerResponse) int { return v.RunAsUser }).(pulumi.IntOutput)
}

// Optional. If set, overrides the default DIR specified by the image.
func (o ContainerResponseOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v ContainerResponse) string { return v.WorkingDir }).(pulumi.StringOutput)
}

// A customer-managed encryption key (CMEK) for the Compute Engine resources of the associated workstation configuration. Specify the name of your Cloud KMS encryption key and the default service account. We recommend that you use a separate service account and follow [Cloud KMS best practices](https://cloud.google.com/kms/docs/separation-of-duties).
type CustomerEncryptionKey struct {
	// Immutable. The name of the Google Cloud KMS encryption key. For example, `"projects/PROJECT_ID/locations/REGION/keyRings/KEY_RING/cryptoKeys/KEY_NAME"`. The key must be in the same region as the workstation configuration.
	KmsKey *string `pulumi:"kmsKey"`
	// Immutable. The service account to use with the specified KMS key. We recommend that you use a separate service account and follow KMS best practices. For more information, see [Separation of duties](https://cloud.google.com/kms/docs/separation-of-duties) and `gcloud kms keys add-iam-policy-binding` [`--member`](https://cloud.google.com/sdk/gcloud/reference/kms/keys/add-iam-policy-binding#--member).
	KmsKeyServiceAccount *string `pulumi:"kmsKeyServiceAccount"`
}

// CustomerEncryptionKeyInput is an input type that accepts CustomerEncryptionKeyArgs and CustomerEncryptionKeyOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyInput` via:
//
//	CustomerEncryptionKeyArgs{...}
type CustomerEncryptionKeyInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput
	ToCustomerEncryptionKeyOutputWithContext(context.Context) CustomerEncryptionKeyOutput
}

// A customer-managed encryption key (CMEK) for the Compute Engine resources of the associated workstation configuration. Specify the name of your Cloud KMS encryption key and the default service account. We recommend that you use a separate service account and follow [Cloud KMS best practices](https://cloud.google.com/kms/docs/separation-of-duties).
type CustomerEncryptionKeyArgs struct {
	// Immutable. The name of the Google Cloud KMS encryption key. For example, `"projects/PROJECT_ID/locations/REGION/keyRings/KEY_RING/cryptoKeys/KEY_NAME"`. The key must be in the same region as the workstation configuration.
	KmsKey pulumi.StringPtrInput `pulumi:"kmsKey"`
	// Immutable. The service account to use with the specified KMS key. We recommend that you use a separate service account and follow KMS best practices. For more information, see [Separation of duties](https://cloud.google.com/kms/docs/separation-of-duties) and `gcloud kms keys add-iam-policy-binding` [`--member`](https://cloud.google.com/sdk/gcloud/reference/kms/keys/add-iam-policy-binding#--member).
	KmsKeyServiceAccount pulumi.StringPtrInput `pulumi:"kmsKeyServiceAccount"`
}

func (CustomerEncryptionKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKey)(nil)).Elem()
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput {
	return i.ToCustomerEncryptionKeyOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyOutputWithContext(ctx context.Context) CustomerEncryptionKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyOutput)
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return i.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i CustomerEncryptionKeyArgs) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyOutput).ToCustomerEncryptionKeyPtrOutputWithContext(ctx)
}

// CustomerEncryptionKeyPtrInput is an input type that accepts CustomerEncryptionKeyArgs, CustomerEncryptionKeyPtr and CustomerEncryptionKeyPtrOutput values.
// You can construct a concrete instance of `CustomerEncryptionKeyPtrInput` via:
//
//	        CustomerEncryptionKeyArgs{...}
//
//	or:
//
//	        nil
type CustomerEncryptionKeyPtrInput interface {
	pulumi.Input

	ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput
	ToCustomerEncryptionKeyPtrOutputWithContext(context.Context) CustomerEncryptionKeyPtrOutput
}

type customerEncryptionKeyPtrType CustomerEncryptionKeyArgs

func CustomerEncryptionKeyPtr(v *CustomerEncryptionKeyArgs) CustomerEncryptionKeyPtrInput {
	return (*customerEncryptionKeyPtrType)(v)
}

func (*customerEncryptionKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKey)(nil)).Elem()
}

func (i *customerEncryptionKeyPtrType) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return i.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (i *customerEncryptionKeyPtrType) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerEncryptionKeyPtrOutput)
}

// A customer-managed encryption key (CMEK) for the Compute Engine resources of the associated workstation configuration. Specify the name of your Cloud KMS encryption key and the default service account. We recommend that you use a separate service account and follow [Cloud KMS best practices](https://cloud.google.com/kms/docs/separation-of-duties).
type CustomerEncryptionKeyOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKey)(nil)).Elem()
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyOutput() CustomerEncryptionKeyOutput {
	return o
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyOutputWithContext(ctx context.Context) CustomerEncryptionKeyOutput {
	return o
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return o.ToCustomerEncryptionKeyPtrOutputWithContext(context.Background())
}

func (o CustomerEncryptionKeyOutput) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CustomerEncryptionKey) *CustomerEncryptionKey {
		return &v
	}).(CustomerEncryptionKeyPtrOutput)
}

// Immutable. The name of the Google Cloud KMS encryption key. For example, `"projects/PROJECT_ID/locations/REGION/keyRings/KEY_RING/cryptoKeys/KEY_NAME"`. The key must be in the same region as the workstation configuration.
func (o CustomerEncryptionKeyOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKey) *string { return v.KmsKey }).(pulumi.StringPtrOutput)
}

// Immutable. The service account to use with the specified KMS key. We recommend that you use a separate service account and follow KMS best practices. For more information, see [Separation of duties](https://cloud.google.com/kms/docs/separation-of-duties) and `gcloud kms keys add-iam-policy-binding` [`--member`](https://cloud.google.com/sdk/gcloud/reference/kms/keys/add-iam-policy-binding#--member).
func (o CustomerEncryptionKeyOutput) KmsKeyServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CustomerEncryptionKey) *string { return v.KmsKeyServiceAccount }).(pulumi.StringPtrOutput)
}

type CustomerEncryptionKeyPtrOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerEncryptionKey)(nil)).Elem()
}

func (o CustomerEncryptionKeyPtrOutput) ToCustomerEncryptionKeyPtrOutput() CustomerEncryptionKeyPtrOutput {
	return o
}

func (o CustomerEncryptionKeyPtrOutput) ToCustomerEncryptionKeyPtrOutputWithContext(ctx context.Context) CustomerEncryptionKeyPtrOutput {
	return o
}

func (o CustomerEncryptionKeyPtrOutput) Elem() CustomerEncryptionKeyOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) CustomerEncryptionKey {
		if v != nil {
			return *v
		}
		var ret CustomerEncryptionKey
		return ret
	}).(CustomerEncryptionKeyOutput)
}

// Immutable. The name of the Google Cloud KMS encryption key. For example, `"projects/PROJECT_ID/locations/REGION/keyRings/KEY_RING/cryptoKeys/KEY_NAME"`. The key must be in the same region as the workstation configuration.
func (o CustomerEncryptionKeyPtrOutput) KmsKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKey
	}).(pulumi.StringPtrOutput)
}

// Immutable. The service account to use with the specified KMS key. We recommend that you use a separate service account and follow KMS best practices. For more information, see [Separation of duties](https://cloud.google.com/kms/docs/separation-of-duties) and `gcloud kms keys add-iam-policy-binding` [`--member`](https://cloud.google.com/sdk/gcloud/reference/kms/keys/add-iam-policy-binding#--member).
func (o CustomerEncryptionKeyPtrOutput) KmsKeyServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerEncryptionKey) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyServiceAccount
	}).(pulumi.StringPtrOutput)
}

// A customer-managed encryption key (CMEK) for the Compute Engine resources of the associated workstation configuration. Specify the name of your Cloud KMS encryption key and the default service account. We recommend that you use a separate service account and follow [Cloud KMS best practices](https://cloud.google.com/kms/docs/separation-of-duties).
type CustomerEncryptionKeyResponse struct {
	// Immutable. The name of the Google Cloud KMS encryption key. For example, `"projects/PROJECT_ID/locations/REGION/keyRings/KEY_RING/cryptoKeys/KEY_NAME"`. The key must be in the same region as the workstation configuration.
	KmsKey string `pulumi:"kmsKey"`
	// Immutable. The service account to use with the specified KMS key. We recommend that you use a separate service account and follow KMS best practices. For more information, see [Separation of duties](https://cloud.google.com/kms/docs/separation-of-duties) and `gcloud kms keys add-iam-policy-binding` [`--member`](https://cloud.google.com/sdk/gcloud/reference/kms/keys/add-iam-policy-binding#--member).
	KmsKeyServiceAccount string `pulumi:"kmsKeyServiceAccount"`
}

// A customer-managed encryption key (CMEK) for the Compute Engine resources of the associated workstation configuration. Specify the name of your Cloud KMS encryption key and the default service account. We recommend that you use a separate service account and follow [Cloud KMS best practices](https://cloud.google.com/kms/docs/separation-of-duties).
type CustomerEncryptionKeyResponseOutput struct{ *pulumi.OutputState }

func (CustomerEncryptionKeyResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerEncryptionKeyResponse)(nil)).Elem()
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponseOutput() CustomerEncryptionKeyResponseOutput {
	return o
}

func (o CustomerEncryptionKeyResponseOutput) ToCustomerEncryptionKeyResponseOutputWithContext(ctx context.Context) CustomerEncryptionKeyResponseOutput {
	return o
}

// Immutable. The name of the Google Cloud KMS encryption key. For example, `"projects/PROJECT_ID/locations/REGION/keyRings/KEY_RING/cryptoKeys/KEY_NAME"`. The key must be in the same region as the workstation configuration.
func (o CustomerEncryptionKeyResponseOutput) KmsKey() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) string { return v.KmsKey }).(pulumi.StringOutput)
}

// Immutable. The service account to use with the specified KMS key. We recommend that you use a separate service account and follow KMS best practices. For more information, see [Separation of duties](https://cloud.google.com/kms/docs/separation-of-duties) and `gcloud kms keys add-iam-policy-binding` [`--member`](https://cloud.google.com/sdk/gcloud/reference/kms/keys/add-iam-policy-binding#--member).
func (o CustomerEncryptionKeyResponseOutput) KmsKeyServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerEncryptionKeyResponse) string { return v.KmsKeyServiceAccount }).(pulumi.StringOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type Expr struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description *string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression *string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location *string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title *string `pulumi:"title"`
}

// ExprInput is an input type that accepts ExprArgs and ExprOutput values.
// You can construct a concrete instance of `ExprInput` via:
//
//	ExprArgs{...}
type ExprInput interface {
	pulumi.Input

	ToExprOutput() ExprOutput
	ToExprOutputWithContext(context.Context) ExprOutput
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprArgs struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (ExprArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (i ExprArgs) ToExprOutput() ExprOutput {
	return i.ToExprOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput)
}

func (i ExprArgs) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i ExprArgs) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprOutput).ToExprPtrOutputWithContext(ctx)
}

// ExprPtrInput is an input type that accepts ExprArgs, ExprPtr and ExprPtrOutput values.
// You can construct a concrete instance of `ExprPtrInput` via:
//
//	        ExprArgs{...}
//
//	or:
//
//	        nil
type ExprPtrInput interface {
	pulumi.Input

	ToExprPtrOutput() ExprPtrOutput
	ToExprPtrOutputWithContext(context.Context) ExprPtrOutput
}

type exprPtrType ExprArgs

func ExprPtr(v *ExprArgs) ExprPtrInput {
	return (*exprPtrType)(v)
}

func (*exprPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (i *exprPtrType) ToExprPtrOutput() ExprPtrOutput {
	return i.ToExprPtrOutputWithContext(context.Background())
}

func (i *exprPtrType) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExprPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprOutput struct{ *pulumi.OutputState }

func (ExprOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Expr)(nil)).Elem()
}

func (o ExprOutput) ToExprOutput() ExprOutput {
	return o
}

func (o ExprOutput) ToExprOutputWithContext(ctx context.Context) ExprOutput {
	return o
}

func (o ExprOutput) ToExprPtrOutput() ExprPtrOutput {
	return o.ToExprPtrOutputWithContext(context.Background())
}

func (o ExprOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Expr) *Expr {
		return &v
	}).(ExprPtrOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Expr) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type ExprPtrOutput struct{ *pulumi.OutputState }

func (ExprPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Expr)(nil)).Elem()
}

func (o ExprPtrOutput) ToExprPtrOutput() ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) ToExprPtrOutputWithContext(ctx context.Context) ExprPtrOutput {
	return o
}

func (o ExprPtrOutput) Elem() ExprOutput {
	return o.ApplyT(func(v *Expr) Expr {
		if v != nil {
			return *v
		}
		var ret Expr
		return ret
	}).(ExprOutput)
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprPtrOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Expression
	}).(pulumi.StringPtrOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprPtrOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Location
	}).(pulumi.StringPtrOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Expr) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponse struct {
	// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
	Description string `pulumi:"description"`
	// Textual representation of an expression in Common Expression Language syntax.
	Expression string `pulumi:"expression"`
	// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
	Location string `pulumi:"location"`
	// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
	Title string `pulumi:"title"`
}

// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
type ExprResponseOutput struct{ *pulumi.OutputState }

func (ExprResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExprResponse)(nil)).Elem()
}

func (o ExprResponseOutput) ToExprResponseOutput() ExprResponseOutput {
	return o
}

func (o ExprResponseOutput) ToExprResponseOutputWithContext(ctx context.Context) ExprResponseOutput {
	return o
}

// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
func (o ExprResponseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Description }).(pulumi.StringOutput)
}

// Textual representation of an expression in Common Expression Language syntax.
func (o ExprResponseOutput) Expression() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Expression }).(pulumi.StringOutput)
}

// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
func (o ExprResponseOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Location }).(pulumi.StringOutput)
}

// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
func (o ExprResponseOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v ExprResponse) string { return v.Title }).(pulumi.StringOutput)
}

// A set of Compute Engine Confidential VM instance options.
type GceConfidentialInstanceConfig struct {
	// Optional. Whether the instance has confidential compute enabled.
	EnableConfidentialCompute *bool `pulumi:"enableConfidentialCompute"`
}

// GceConfidentialInstanceConfigInput is an input type that accepts GceConfidentialInstanceConfigArgs and GceConfidentialInstanceConfigOutput values.
// You can construct a concrete instance of `GceConfidentialInstanceConfigInput` via:
//
//	GceConfidentialInstanceConfigArgs{...}
type GceConfidentialInstanceConfigInput interface {
	pulumi.Input

	ToGceConfidentialInstanceConfigOutput() GceConfidentialInstanceConfigOutput
	ToGceConfidentialInstanceConfigOutputWithContext(context.Context) GceConfidentialInstanceConfigOutput
}

// A set of Compute Engine Confidential VM instance options.
type GceConfidentialInstanceConfigArgs struct {
	// Optional. Whether the instance has confidential compute enabled.
	EnableConfidentialCompute pulumi.BoolPtrInput `pulumi:"enableConfidentialCompute"`
}

func (GceConfidentialInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GceConfidentialInstanceConfig)(nil)).Elem()
}

func (i GceConfidentialInstanceConfigArgs) ToGceConfidentialInstanceConfigOutput() GceConfidentialInstanceConfigOutput {
	return i.ToGceConfidentialInstanceConfigOutputWithContext(context.Background())
}

func (i GceConfidentialInstanceConfigArgs) ToGceConfidentialInstanceConfigOutputWithContext(ctx context.Context) GceConfidentialInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceConfidentialInstanceConfigOutput)
}

func (i GceConfidentialInstanceConfigArgs) ToGceConfidentialInstanceConfigPtrOutput() GceConfidentialInstanceConfigPtrOutput {
	return i.ToGceConfidentialInstanceConfigPtrOutputWithContext(context.Background())
}

func (i GceConfidentialInstanceConfigArgs) ToGceConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) GceConfidentialInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceConfidentialInstanceConfigOutput).ToGceConfidentialInstanceConfigPtrOutputWithContext(ctx)
}

// GceConfidentialInstanceConfigPtrInput is an input type that accepts GceConfidentialInstanceConfigArgs, GceConfidentialInstanceConfigPtr and GceConfidentialInstanceConfigPtrOutput values.
// You can construct a concrete instance of `GceConfidentialInstanceConfigPtrInput` via:
//
//	        GceConfidentialInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type GceConfidentialInstanceConfigPtrInput interface {
	pulumi.Input

	ToGceConfidentialInstanceConfigPtrOutput() GceConfidentialInstanceConfigPtrOutput
	ToGceConfidentialInstanceConfigPtrOutputWithContext(context.Context) GceConfidentialInstanceConfigPtrOutput
}

type gceConfidentialInstanceConfigPtrType GceConfidentialInstanceConfigArgs

func GceConfidentialInstanceConfigPtr(v *GceConfidentialInstanceConfigArgs) GceConfidentialInstanceConfigPtrInput {
	return (*gceConfidentialInstanceConfigPtrType)(v)
}

func (*gceConfidentialInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GceConfidentialInstanceConfig)(nil)).Elem()
}

func (i *gceConfidentialInstanceConfigPtrType) ToGceConfidentialInstanceConfigPtrOutput() GceConfidentialInstanceConfigPtrOutput {
	return i.ToGceConfidentialInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *gceConfidentialInstanceConfigPtrType) ToGceConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) GceConfidentialInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceConfidentialInstanceConfigPtrOutput)
}

// A set of Compute Engine Confidential VM instance options.
type GceConfidentialInstanceConfigOutput struct{ *pulumi.OutputState }

func (GceConfidentialInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceConfidentialInstanceConfig)(nil)).Elem()
}

func (o GceConfidentialInstanceConfigOutput) ToGceConfidentialInstanceConfigOutput() GceConfidentialInstanceConfigOutput {
	return o
}

func (o GceConfidentialInstanceConfigOutput) ToGceConfidentialInstanceConfigOutputWithContext(ctx context.Context) GceConfidentialInstanceConfigOutput {
	return o
}

func (o GceConfidentialInstanceConfigOutput) ToGceConfidentialInstanceConfigPtrOutput() GceConfidentialInstanceConfigPtrOutput {
	return o.ToGceConfidentialInstanceConfigPtrOutputWithContext(context.Background())
}

func (o GceConfidentialInstanceConfigOutput) ToGceConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) GceConfidentialInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GceConfidentialInstanceConfig) *GceConfidentialInstanceConfig {
		return &v
	}).(GceConfidentialInstanceConfigPtrOutput)
}

// Optional. Whether the instance has confidential compute enabled.
func (o GceConfidentialInstanceConfigOutput) EnableConfidentialCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceConfidentialInstanceConfig) *bool { return v.EnableConfidentialCompute }).(pulumi.BoolPtrOutput)
}

type GceConfidentialInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (GceConfidentialInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GceConfidentialInstanceConfig)(nil)).Elem()
}

func (o GceConfidentialInstanceConfigPtrOutput) ToGceConfidentialInstanceConfigPtrOutput() GceConfidentialInstanceConfigPtrOutput {
	return o
}

func (o GceConfidentialInstanceConfigPtrOutput) ToGceConfidentialInstanceConfigPtrOutputWithContext(ctx context.Context) GceConfidentialInstanceConfigPtrOutput {
	return o
}

func (o GceConfidentialInstanceConfigPtrOutput) Elem() GceConfidentialInstanceConfigOutput {
	return o.ApplyT(func(v *GceConfidentialInstanceConfig) GceConfidentialInstanceConfig {
		if v != nil {
			return *v
		}
		var ret GceConfidentialInstanceConfig
		return ret
	}).(GceConfidentialInstanceConfigOutput)
}

// Optional. Whether the instance has confidential compute enabled.
func (o GceConfidentialInstanceConfigPtrOutput) EnableConfidentialCompute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceConfidentialInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableConfidentialCompute
	}).(pulumi.BoolPtrOutput)
}

// A set of Compute Engine Confidential VM instance options.
type GceConfidentialInstanceConfigResponse struct {
	// Optional. Whether the instance has confidential compute enabled.
	EnableConfidentialCompute bool `pulumi:"enableConfidentialCompute"`
}

// A set of Compute Engine Confidential VM instance options.
type GceConfidentialInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (GceConfidentialInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceConfidentialInstanceConfigResponse)(nil)).Elem()
}

func (o GceConfidentialInstanceConfigResponseOutput) ToGceConfidentialInstanceConfigResponseOutput() GceConfidentialInstanceConfigResponseOutput {
	return o
}

func (o GceConfidentialInstanceConfigResponseOutput) ToGceConfidentialInstanceConfigResponseOutputWithContext(ctx context.Context) GceConfidentialInstanceConfigResponseOutput {
	return o
}

// Optional. Whether the instance has confidential compute enabled.
func (o GceConfidentialInstanceConfigResponseOutput) EnableConfidentialCompute() pulumi.BoolOutput {
	return o.ApplyT(func(v GceConfidentialInstanceConfigResponse) bool { return v.EnableConfidentialCompute }).(pulumi.BoolOutput)
}

// A runtime using a Compute Engine instance.
type GceInstance struct {
	// Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.
	BootDiskSizeGb *int `pulumi:"bootDiskSizeGb"`
	// Optional. A set of Compute Engine Confidential VM instance options.
	ConfidentialInstanceConfig *GceConfidentialInstanceConfig `pulumi:"confidentialInstanceConfig"`
	// Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).
	DisablePublicIpAddresses *bool `pulumi:"disablePublicIpAddresses"`
	// Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.
	EnableNestedVirtualization *bool `pulumi:"enableNestedVirtualization"`
	// Optional. The type of machine to use for VM instances—for example, `"e2-standard-4"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).
	MachineType *string `pulumi:"machineType"`
	// Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.
	PoolSize *int `pulumi:"poolSize"`
	// Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.
	ServiceAccount *string `pulumi:"serviceAccount"`
	// Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
	ServiceAccountScopes []string `pulumi:"serviceAccountScopes"`
	// Optional. A set of Compute Engine Shielded instance options.
	ShieldedInstanceConfig *GceShieldedInstanceConfig `pulumi:"shieldedInstanceConfig"`
	// Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).
	Tags []string `pulumi:"tags"`
}

// GceInstanceInput is an input type that accepts GceInstanceArgs and GceInstanceOutput values.
// You can construct a concrete instance of `GceInstanceInput` via:
//
//	GceInstanceArgs{...}
type GceInstanceInput interface {
	pulumi.Input

	ToGceInstanceOutput() GceInstanceOutput
	ToGceInstanceOutputWithContext(context.Context) GceInstanceOutput
}

// A runtime using a Compute Engine instance.
type GceInstanceArgs struct {
	// Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.
	BootDiskSizeGb pulumi.IntPtrInput `pulumi:"bootDiskSizeGb"`
	// Optional. A set of Compute Engine Confidential VM instance options.
	ConfidentialInstanceConfig GceConfidentialInstanceConfigPtrInput `pulumi:"confidentialInstanceConfig"`
	// Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).
	DisablePublicIpAddresses pulumi.BoolPtrInput `pulumi:"disablePublicIpAddresses"`
	// Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.
	EnableNestedVirtualization pulumi.BoolPtrInput `pulumi:"enableNestedVirtualization"`
	// Optional. The type of machine to use for VM instances—for example, `"e2-standard-4"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).
	MachineType pulumi.StringPtrInput `pulumi:"machineType"`
	// Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.
	PoolSize pulumi.IntPtrInput `pulumi:"poolSize"`
	// Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.
	ServiceAccount pulumi.StringPtrInput `pulumi:"serviceAccount"`
	// Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
	ServiceAccountScopes pulumi.StringArrayInput `pulumi:"serviceAccountScopes"`
	// Optional. A set of Compute Engine Shielded instance options.
	ShieldedInstanceConfig GceShieldedInstanceConfigPtrInput `pulumi:"shieldedInstanceConfig"`
	// Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).
	Tags pulumi.StringArrayInput `pulumi:"tags"`
}

func (GceInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GceInstance)(nil)).Elem()
}

func (i GceInstanceArgs) ToGceInstanceOutput() GceInstanceOutput {
	return i.ToGceInstanceOutputWithContext(context.Background())
}

func (i GceInstanceArgs) ToGceInstanceOutputWithContext(ctx context.Context) GceInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceInstanceOutput)
}

func (i GceInstanceArgs) ToGceInstancePtrOutput() GceInstancePtrOutput {
	return i.ToGceInstancePtrOutputWithContext(context.Background())
}

func (i GceInstanceArgs) ToGceInstancePtrOutputWithContext(ctx context.Context) GceInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceInstanceOutput).ToGceInstancePtrOutputWithContext(ctx)
}

// GceInstancePtrInput is an input type that accepts GceInstanceArgs, GceInstancePtr and GceInstancePtrOutput values.
// You can construct a concrete instance of `GceInstancePtrInput` via:
//
//	        GceInstanceArgs{...}
//
//	or:
//
//	        nil
type GceInstancePtrInput interface {
	pulumi.Input

	ToGceInstancePtrOutput() GceInstancePtrOutput
	ToGceInstancePtrOutputWithContext(context.Context) GceInstancePtrOutput
}

type gceInstancePtrType GceInstanceArgs

func GceInstancePtr(v *GceInstanceArgs) GceInstancePtrInput {
	return (*gceInstancePtrType)(v)
}

func (*gceInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GceInstance)(nil)).Elem()
}

func (i *gceInstancePtrType) ToGceInstancePtrOutput() GceInstancePtrOutput {
	return i.ToGceInstancePtrOutputWithContext(context.Background())
}

func (i *gceInstancePtrType) ToGceInstancePtrOutputWithContext(ctx context.Context) GceInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceInstancePtrOutput)
}

// A runtime using a Compute Engine instance.
type GceInstanceOutput struct{ *pulumi.OutputState }

func (GceInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceInstance)(nil)).Elem()
}

func (o GceInstanceOutput) ToGceInstanceOutput() GceInstanceOutput {
	return o
}

func (o GceInstanceOutput) ToGceInstanceOutputWithContext(ctx context.Context) GceInstanceOutput {
	return o
}

func (o GceInstanceOutput) ToGceInstancePtrOutput() GceInstancePtrOutput {
	return o.ToGceInstancePtrOutputWithContext(context.Background())
}

func (o GceInstanceOutput) ToGceInstancePtrOutputWithContext(ctx context.Context) GceInstancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GceInstance) *GceInstance {
		return &v
	}).(GceInstancePtrOutput)
}

// Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.
func (o GceInstanceOutput) BootDiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GceInstance) *int { return v.BootDiskSizeGb }).(pulumi.IntPtrOutput)
}

// Optional. A set of Compute Engine Confidential VM instance options.
func (o GceInstanceOutput) ConfidentialInstanceConfig() GceConfidentialInstanceConfigPtrOutput {
	return o.ApplyT(func(v GceInstance) *GceConfidentialInstanceConfig { return v.ConfidentialInstanceConfig }).(GceConfidentialInstanceConfigPtrOutput)
}

// Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).
func (o GceInstanceOutput) DisablePublicIpAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceInstance) *bool { return v.DisablePublicIpAddresses }).(pulumi.BoolPtrOutput)
}

// Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.
func (o GceInstanceOutput) EnableNestedVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceInstance) *bool { return v.EnableNestedVirtualization }).(pulumi.BoolPtrOutput)
}

// Optional. The type of machine to use for VM instances—for example, `"e2-standard-4"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).
func (o GceInstanceOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GceInstance) *string { return v.MachineType }).(pulumi.StringPtrOutput)
}

// Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.
func (o GceInstanceOutput) PoolSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GceInstance) *int { return v.PoolSize }).(pulumi.IntPtrOutput)
}

// Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.
func (o GceInstanceOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GceInstance) *string { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

// Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
func (o GceInstanceOutput) ServiceAccountScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GceInstance) []string { return v.ServiceAccountScopes }).(pulumi.StringArrayOutput)
}

// Optional. A set of Compute Engine Shielded instance options.
func (o GceInstanceOutput) ShieldedInstanceConfig() GceShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v GceInstance) *GceShieldedInstanceConfig { return v.ShieldedInstanceConfig }).(GceShieldedInstanceConfigPtrOutput)
}

// Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).
func (o GceInstanceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GceInstance) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

type GceInstancePtrOutput struct{ *pulumi.OutputState }

func (GceInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GceInstance)(nil)).Elem()
}

func (o GceInstancePtrOutput) ToGceInstancePtrOutput() GceInstancePtrOutput {
	return o
}

func (o GceInstancePtrOutput) ToGceInstancePtrOutputWithContext(ctx context.Context) GceInstancePtrOutput {
	return o
}

func (o GceInstancePtrOutput) Elem() GceInstanceOutput {
	return o.ApplyT(func(v *GceInstance) GceInstance {
		if v != nil {
			return *v
		}
		var ret GceInstance
		return ret
	}).(GceInstanceOutput)
}

// Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.
func (o GceInstancePtrOutput) BootDiskSizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GceInstance) *int {
		if v == nil {
			return nil
		}
		return v.BootDiskSizeGb
	}).(pulumi.IntPtrOutput)
}

// Optional. A set of Compute Engine Confidential VM instance options.
func (o GceInstancePtrOutput) ConfidentialInstanceConfig() GceConfidentialInstanceConfigPtrOutput {
	return o.ApplyT(func(v *GceInstance) *GceConfidentialInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ConfidentialInstanceConfig
	}).(GceConfidentialInstanceConfigPtrOutput)
}

// Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).
func (o GceInstancePtrOutput) DisablePublicIpAddresses() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceInstance) *bool {
		if v == nil {
			return nil
		}
		return v.DisablePublicIpAddresses
	}).(pulumi.BoolPtrOutput)
}

// Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.
func (o GceInstancePtrOutput) EnableNestedVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceInstance) *bool {
		if v == nil {
			return nil
		}
		return v.EnableNestedVirtualization
	}).(pulumi.BoolPtrOutput)
}

// Optional. The type of machine to use for VM instances—for example, `"e2-standard-4"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).
func (o GceInstancePtrOutput) MachineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GceInstance) *string {
		if v == nil {
			return nil
		}
		return v.MachineType
	}).(pulumi.StringPtrOutput)
}

// Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.
func (o GceInstancePtrOutput) PoolSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GceInstance) *int {
		if v == nil {
			return nil
		}
		return v.PoolSize
	}).(pulumi.IntPtrOutput)
}

// Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.
func (o GceInstancePtrOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GceInstance) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccount
	}).(pulumi.StringPtrOutput)
}

// Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
func (o GceInstancePtrOutput) ServiceAccountScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GceInstance) []string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountScopes
	}).(pulumi.StringArrayOutput)
}

// Optional. A set of Compute Engine Shielded instance options.
func (o GceInstancePtrOutput) ShieldedInstanceConfig() GceShieldedInstanceConfigPtrOutput {
	return o.ApplyT(func(v *GceInstance) *GceShieldedInstanceConfig {
		if v == nil {
			return nil
		}
		return v.ShieldedInstanceConfig
	}).(GceShieldedInstanceConfigPtrOutput)
}

// Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).
func (o GceInstancePtrOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GceInstance) []string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringArrayOutput)
}

// A runtime using a Compute Engine instance.
type GceInstanceResponse struct {
	// Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.
	BootDiskSizeGb int `pulumi:"bootDiskSizeGb"`
	// Optional. A set of Compute Engine Confidential VM instance options.
	ConfidentialInstanceConfig GceConfidentialInstanceConfigResponse `pulumi:"confidentialInstanceConfig"`
	// Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).
	DisablePublicIpAddresses bool `pulumi:"disablePublicIpAddresses"`
	// Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.
	EnableNestedVirtualization bool `pulumi:"enableNestedVirtualization"`
	// Optional. The type of machine to use for VM instances—for example, `"e2-standard-4"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).
	MachineType string `pulumi:"machineType"`
	// Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.
	PoolSize int `pulumi:"poolSize"`
	// Number of instances currently available in the pool for faster workstation startup.
	PooledInstances int `pulumi:"pooledInstances"`
	// Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.
	ServiceAccount string `pulumi:"serviceAccount"`
	// Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
	ServiceAccountScopes []string `pulumi:"serviceAccountScopes"`
	// Optional. A set of Compute Engine Shielded instance options.
	ShieldedInstanceConfig GceShieldedInstanceConfigResponse `pulumi:"shieldedInstanceConfig"`
	// Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).
	Tags []string `pulumi:"tags"`
}

// A runtime using a Compute Engine instance.
type GceInstanceResponseOutput struct{ *pulumi.OutputState }

func (GceInstanceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceInstanceResponse)(nil)).Elem()
}

func (o GceInstanceResponseOutput) ToGceInstanceResponseOutput() GceInstanceResponseOutput {
	return o
}

func (o GceInstanceResponseOutput) ToGceInstanceResponseOutputWithContext(ctx context.Context) GceInstanceResponseOutput {
	return o
}

// Optional. The size of the boot disk for the VM in gigabytes (GB). The minimum boot disk size is `30` GB. Defaults to `50` GB.
func (o GceInstanceResponseOutput) BootDiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v GceInstanceResponse) int { return v.BootDiskSizeGb }).(pulumi.IntOutput)
}

// Optional. A set of Compute Engine Confidential VM instance options.
func (o GceInstanceResponseOutput) ConfidentialInstanceConfig() GceConfidentialInstanceConfigResponseOutput {
	return o.ApplyT(func(v GceInstanceResponse) GceConfidentialInstanceConfigResponse { return v.ConfidentialInstanceConfig }).(GceConfidentialInstanceConfigResponseOutput)
}

// Optional. When set to true, disables public IP addresses for VMs. If you disable public IP addresses, you must set up Private Google Access or Cloud NAT on your network. If you use Private Google Access and you use `private.googleapis.com` or `restricted.googleapis.com` for Container Registry and Artifact Registry, make sure that you set up DNS records for domains `*.gcr.io` and `*.pkg.dev`. Defaults to false (VMs have public IP addresses).
func (o GceInstanceResponseOutput) DisablePublicIpAddresses() pulumi.BoolOutput {
	return o.ApplyT(func(v GceInstanceResponse) bool { return v.DisablePublicIpAddresses }).(pulumi.BoolOutput)
}

// Optional. Whether to enable nested virtualization on Cloud Workstations VMs created under this workstation configuration. Nested virtualization lets you run virtual machine (VM) instances inside your workstation. Before enabling nested virtualization, consider the following important considerations. Cloud Workstations instances are subject to the [same restrictions as Compute Engine instances](https://cloud.google.com/compute/docs/instances/nested-virtualization/overview#restrictions): * **Organization policy**: projects, folders, or organizations may be restricted from creating nested VMs if the **Disable VM nested virtualization** constraint is enforced in the organization policy. For more information, see the Compute Engine section, [Checking whether nested virtualization is allowed](https://cloud.google.com/compute/docs/instances/nested-virtualization/managing-constraint#checking_whether_nested_virtualization_is_allowed). * **Performance**: nested VMs might experience a 10% or greater decrease in performance for workloads that are CPU-bound and possibly greater than a 10% decrease for workloads that are input/output bound. * **Machine Type**: nested virtualization can only be enabled on workstation configurations that specify a machine_type in the N1 or N2 machine series. * **GPUs**: nested virtualization may not be enabled on workstation configurations with accelerators. * **Operating System**: Because [Container-Optimized OS](https://cloud.google.com/compute/docs/images/os-details#container-optimized_os_cos) does not support nested virtualization, when nested virtualization is enabled, the underlying Compute Engine VM instances boot from an [Ubuntu LTS](https://cloud.google.com/compute/docs/images/os-details#ubuntu_lts) image.
func (o GceInstanceResponseOutput) EnableNestedVirtualization() pulumi.BoolOutput {
	return o.ApplyT(func(v GceInstanceResponse) bool { return v.EnableNestedVirtualization }).(pulumi.BoolOutput)
}

// Optional. The type of machine to use for VM instances—for example, `"e2-standard-4"`. For more information about machine types that Cloud Workstations supports, see the list of [available machine types](https://cloud.google.com/workstations/docs/available-machine-types).
func (o GceInstanceResponseOutput) MachineType() pulumi.StringOutput {
	return o.ApplyT(func(v GceInstanceResponse) string { return v.MachineType }).(pulumi.StringOutput)
}

// Optional. The number of VMs that the system should keep idle so that new workstations can be started quickly for new users. Defaults to `0` in the API.
func (o GceInstanceResponseOutput) PoolSize() pulumi.IntOutput {
	return o.ApplyT(func(v GceInstanceResponse) int { return v.PoolSize }).(pulumi.IntOutput)
}

// Number of instances currently available in the pool for faster workstation startup.
func (o GceInstanceResponseOutput) PooledInstances() pulumi.IntOutput {
	return o.ApplyT(func(v GceInstanceResponse) int { return v.PooledInstances }).(pulumi.IntOutput)
}

// Optional. The email address of the service account for Cloud Workstations VMs created with this configuration. When specified, be sure that the service account has `logginglogEntries.create` permission on the project so it can write logs out to Cloud Logging. If using a custom container image, the service account must have [Artifact Registry Reader](https://cloud.google.com/artifact-registry/docs/access-control#roles) permission to pull the specified image. If you as the administrator want to be able to `ssh` into the underlying VM, you need to set this value to a service account for which you have the `iam.serviceAccounts.actAs` permission. Conversely, if you don't want anyone to be able to `ssh` into the underlying VM, use a service account where no one has that permission. If not set, VMs run with a service account provided by the Cloud Workstations service, and the image must be publicly accessible.
func (o GceInstanceResponseOutput) ServiceAccount() pulumi.StringOutput {
	return o.ApplyT(func(v GceInstanceResponse) string { return v.ServiceAccount }).(pulumi.StringOutput)
}

// Optional. Scopes to grant to the service_account. Various scopes are automatically added based on feature usage. When specified, users of workstations under this configuration must have `iam.serviceAccounts.actAs` on the service account.
func (o GceInstanceResponseOutput) ServiceAccountScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GceInstanceResponse) []string { return v.ServiceAccountScopes }).(pulumi.StringArrayOutput)
}

// Optional. A set of Compute Engine Shielded instance options.
func (o GceInstanceResponseOutput) ShieldedInstanceConfig() GceShieldedInstanceConfigResponseOutput {
	return o.ApplyT(func(v GceInstanceResponse) GceShieldedInstanceConfigResponse { return v.ShieldedInstanceConfig }).(GceShieldedInstanceConfigResponseOutput)
}

// Optional. Network tags to add to the Compute Engine VMs backing the workstations. This option applies [network tags](https://cloud.google.com/vpc/docs/add-remove-network-tags) to VMs created with this configuration. These network tags enable the creation of [firewall rules](https://cloud.google.com/workstations/docs/configure-firewall-rules).
func (o GceInstanceResponseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GceInstanceResponse) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at `/home` when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
type GceRegionalPersistentDisk struct {
	// Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `"pd-standard"`.
	DiskType *string `pulumi:"diskType"`
	// Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `"ext4"`.
	FsType *string `pulumi:"fsType"`
	// Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
	ReclaimPolicy *GceRegionalPersistentDiskReclaimPolicy `pulumi:"reclaimPolicy"`
	// Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `"pd-balanced"` or `"pd-ssd"`.
	SizeGb *int `pulumi:"sizeGb"`
	// Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
	SourceSnapshot *string `pulumi:"sourceSnapshot"`
}

// GceRegionalPersistentDiskInput is an input type that accepts GceRegionalPersistentDiskArgs and GceRegionalPersistentDiskOutput values.
// You can construct a concrete instance of `GceRegionalPersistentDiskInput` via:
//
//	GceRegionalPersistentDiskArgs{...}
type GceRegionalPersistentDiskInput interface {
	pulumi.Input

	ToGceRegionalPersistentDiskOutput() GceRegionalPersistentDiskOutput
	ToGceRegionalPersistentDiskOutputWithContext(context.Context) GceRegionalPersistentDiskOutput
}

// A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at `/home` when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
type GceRegionalPersistentDiskArgs struct {
	// Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `"pd-standard"`.
	DiskType pulumi.StringPtrInput `pulumi:"diskType"`
	// Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `"ext4"`.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
	ReclaimPolicy GceRegionalPersistentDiskReclaimPolicyPtrInput `pulumi:"reclaimPolicy"`
	// Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `"pd-balanced"` or `"pd-ssd"`.
	SizeGb pulumi.IntPtrInput `pulumi:"sizeGb"`
	// Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
	SourceSnapshot pulumi.StringPtrInput `pulumi:"sourceSnapshot"`
}

func (GceRegionalPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GceRegionalPersistentDisk)(nil)).Elem()
}

func (i GceRegionalPersistentDiskArgs) ToGceRegionalPersistentDiskOutput() GceRegionalPersistentDiskOutput {
	return i.ToGceRegionalPersistentDiskOutputWithContext(context.Background())
}

func (i GceRegionalPersistentDiskArgs) ToGceRegionalPersistentDiskOutputWithContext(ctx context.Context) GceRegionalPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceRegionalPersistentDiskOutput)
}

func (i GceRegionalPersistentDiskArgs) ToGceRegionalPersistentDiskPtrOutput() GceRegionalPersistentDiskPtrOutput {
	return i.ToGceRegionalPersistentDiskPtrOutputWithContext(context.Background())
}

func (i GceRegionalPersistentDiskArgs) ToGceRegionalPersistentDiskPtrOutputWithContext(ctx context.Context) GceRegionalPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceRegionalPersistentDiskOutput).ToGceRegionalPersistentDiskPtrOutputWithContext(ctx)
}

// GceRegionalPersistentDiskPtrInput is an input type that accepts GceRegionalPersistentDiskArgs, GceRegionalPersistentDiskPtr and GceRegionalPersistentDiskPtrOutput values.
// You can construct a concrete instance of `GceRegionalPersistentDiskPtrInput` via:
//
//	        GceRegionalPersistentDiskArgs{...}
//
//	or:
//
//	        nil
type GceRegionalPersistentDiskPtrInput interface {
	pulumi.Input

	ToGceRegionalPersistentDiskPtrOutput() GceRegionalPersistentDiskPtrOutput
	ToGceRegionalPersistentDiskPtrOutputWithContext(context.Context) GceRegionalPersistentDiskPtrOutput
}

type gceRegionalPersistentDiskPtrType GceRegionalPersistentDiskArgs

func GceRegionalPersistentDiskPtr(v *GceRegionalPersistentDiskArgs) GceRegionalPersistentDiskPtrInput {
	return (*gceRegionalPersistentDiskPtrType)(v)
}

func (*gceRegionalPersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GceRegionalPersistentDisk)(nil)).Elem()
}

func (i *gceRegionalPersistentDiskPtrType) ToGceRegionalPersistentDiskPtrOutput() GceRegionalPersistentDiskPtrOutput {
	return i.ToGceRegionalPersistentDiskPtrOutputWithContext(context.Background())
}

func (i *gceRegionalPersistentDiskPtrType) ToGceRegionalPersistentDiskPtrOutputWithContext(ctx context.Context) GceRegionalPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceRegionalPersistentDiskPtrOutput)
}

// A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at `/home` when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
type GceRegionalPersistentDiskOutput struct{ *pulumi.OutputState }

func (GceRegionalPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceRegionalPersistentDisk)(nil)).Elem()
}

func (o GceRegionalPersistentDiskOutput) ToGceRegionalPersistentDiskOutput() GceRegionalPersistentDiskOutput {
	return o
}

func (o GceRegionalPersistentDiskOutput) ToGceRegionalPersistentDiskOutputWithContext(ctx context.Context) GceRegionalPersistentDiskOutput {
	return o
}

func (o GceRegionalPersistentDiskOutput) ToGceRegionalPersistentDiskPtrOutput() GceRegionalPersistentDiskPtrOutput {
	return o.ToGceRegionalPersistentDiskPtrOutputWithContext(context.Background())
}

func (o GceRegionalPersistentDiskOutput) ToGceRegionalPersistentDiskPtrOutputWithContext(ctx context.Context) GceRegionalPersistentDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GceRegionalPersistentDisk) *GceRegionalPersistentDisk {
		return &v
	}).(GceRegionalPersistentDiskPtrOutput)
}

// Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `"pd-standard"`.
func (o GceRegionalPersistentDiskOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GceRegionalPersistentDisk) *string { return v.DiskType }).(pulumi.StringPtrOutput)
}

// Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `"ext4"`.
func (o GceRegionalPersistentDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GceRegionalPersistentDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
func (o GceRegionalPersistentDiskOutput) ReclaimPolicy() GceRegionalPersistentDiskReclaimPolicyPtrOutput {
	return o.ApplyT(func(v GceRegionalPersistentDisk) *GceRegionalPersistentDiskReclaimPolicy { return v.ReclaimPolicy }).(GceRegionalPersistentDiskReclaimPolicyPtrOutput)
}

// Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `"pd-balanced"` or `"pd-ssd"`.
func (o GceRegionalPersistentDiskOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GceRegionalPersistentDisk) *int { return v.SizeGb }).(pulumi.IntPtrOutput)
}

// Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
func (o GceRegionalPersistentDiskOutput) SourceSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GceRegionalPersistentDisk) *string { return v.SourceSnapshot }).(pulumi.StringPtrOutput)
}

type GceRegionalPersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (GceRegionalPersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GceRegionalPersistentDisk)(nil)).Elem()
}

func (o GceRegionalPersistentDiskPtrOutput) ToGceRegionalPersistentDiskPtrOutput() GceRegionalPersistentDiskPtrOutput {
	return o
}

func (o GceRegionalPersistentDiskPtrOutput) ToGceRegionalPersistentDiskPtrOutputWithContext(ctx context.Context) GceRegionalPersistentDiskPtrOutput {
	return o
}

func (o GceRegionalPersistentDiskPtrOutput) Elem() GceRegionalPersistentDiskOutput {
	return o.ApplyT(func(v *GceRegionalPersistentDisk) GceRegionalPersistentDisk {
		if v != nil {
			return *v
		}
		var ret GceRegionalPersistentDisk
		return ret
	}).(GceRegionalPersistentDiskOutput)
}

// Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `"pd-standard"`.
func (o GceRegionalPersistentDiskPtrOutput) DiskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GceRegionalPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskType
	}).(pulumi.StringPtrOutput)
}

// Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `"ext4"`.
func (o GceRegionalPersistentDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GceRegionalPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
func (o GceRegionalPersistentDiskPtrOutput) ReclaimPolicy() GceRegionalPersistentDiskReclaimPolicyPtrOutput {
	return o.ApplyT(func(v *GceRegionalPersistentDisk) *GceRegionalPersistentDiskReclaimPolicy {
		if v == nil {
			return nil
		}
		return v.ReclaimPolicy
	}).(GceRegionalPersistentDiskReclaimPolicyPtrOutput)
}

// Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `"pd-balanced"` or `"pd-ssd"`.
func (o GceRegionalPersistentDiskPtrOutput) SizeGb() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GceRegionalPersistentDisk) *int {
		if v == nil {
			return nil
		}
		return v.SizeGb
	}).(pulumi.IntPtrOutput)
}

// Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
func (o GceRegionalPersistentDiskPtrOutput) SourceSnapshot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GceRegionalPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.SourceSnapshot
	}).(pulumi.StringPtrOutput)
}

// A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at `/home` when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
type GceRegionalPersistentDiskResponse struct {
	// Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `"pd-standard"`.
	DiskType string `pulumi:"diskType"`
	// Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `"ext4"`.
	FsType string `pulumi:"fsType"`
	// Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
	ReclaimPolicy string `pulumi:"reclaimPolicy"`
	// Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `"pd-balanced"` or `"pd-ssd"`.
	SizeGb int `pulumi:"sizeGb"`
	// Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
	SourceSnapshot string `pulumi:"sourceSnapshot"`
}

// A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at `/home` when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
type GceRegionalPersistentDiskResponseOutput struct{ *pulumi.OutputState }

func (GceRegionalPersistentDiskResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceRegionalPersistentDiskResponse)(nil)).Elem()
}

func (o GceRegionalPersistentDiskResponseOutput) ToGceRegionalPersistentDiskResponseOutput() GceRegionalPersistentDiskResponseOutput {
	return o
}

func (o GceRegionalPersistentDiskResponseOutput) ToGceRegionalPersistentDiskResponseOutputWithContext(ctx context.Context) GceRegionalPersistentDiskResponseOutput {
	return o
}

// Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `"pd-standard"`.
func (o GceRegionalPersistentDiskResponseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v GceRegionalPersistentDiskResponse) string { return v.DiskType }).(pulumi.StringOutput)
}

// Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `"ext4"`.
func (o GceRegionalPersistentDiskResponseOutput) FsType() pulumi.StringOutput {
	return o.ApplyT(func(v GceRegionalPersistentDiskResponse) string { return v.FsType }).(pulumi.StringOutput)
}

// Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.
func (o GceRegionalPersistentDiskResponseOutput) ReclaimPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GceRegionalPersistentDiskResponse) string { return v.ReclaimPolicy }).(pulumi.StringOutput)
}

// Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `"pd-balanced"` or `"pd-ssd"`.
func (o GceRegionalPersistentDiskResponseOutput) SizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v GceRegionalPersistentDiskResponse) int { return v.SizeGb }).(pulumi.IntOutput)
}

// Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.
func (o GceRegionalPersistentDiskResponseOutput) SourceSnapshot() pulumi.StringOutput {
	return o.ApplyT(func(v GceRegionalPersistentDiskResponse) string { return v.SourceSnapshot }).(pulumi.StringOutput)
}

// A set of Compute Engine Shielded instance options.
type GceShieldedInstanceConfig struct {
	// Optional. Whether the instance has integrity monitoring enabled.
	EnableIntegrityMonitoring *bool `pulumi:"enableIntegrityMonitoring"`
	// Optional. Whether the instance has Secure Boot enabled.
	EnableSecureBoot *bool `pulumi:"enableSecureBoot"`
	// Optional. Whether the instance has the vTPM enabled.
	EnableVtpm *bool `pulumi:"enableVtpm"`
}

// GceShieldedInstanceConfigInput is an input type that accepts GceShieldedInstanceConfigArgs and GceShieldedInstanceConfigOutput values.
// You can construct a concrete instance of `GceShieldedInstanceConfigInput` via:
//
//	GceShieldedInstanceConfigArgs{...}
type GceShieldedInstanceConfigInput interface {
	pulumi.Input

	ToGceShieldedInstanceConfigOutput() GceShieldedInstanceConfigOutput
	ToGceShieldedInstanceConfigOutputWithContext(context.Context) GceShieldedInstanceConfigOutput
}

// A set of Compute Engine Shielded instance options.
type GceShieldedInstanceConfigArgs struct {
	// Optional. Whether the instance has integrity monitoring enabled.
	EnableIntegrityMonitoring pulumi.BoolPtrInput `pulumi:"enableIntegrityMonitoring"`
	// Optional. Whether the instance has Secure Boot enabled.
	EnableSecureBoot pulumi.BoolPtrInput `pulumi:"enableSecureBoot"`
	// Optional. Whether the instance has the vTPM enabled.
	EnableVtpm pulumi.BoolPtrInput `pulumi:"enableVtpm"`
}

func (GceShieldedInstanceConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GceShieldedInstanceConfig)(nil)).Elem()
}

func (i GceShieldedInstanceConfigArgs) ToGceShieldedInstanceConfigOutput() GceShieldedInstanceConfigOutput {
	return i.ToGceShieldedInstanceConfigOutputWithContext(context.Background())
}

func (i GceShieldedInstanceConfigArgs) ToGceShieldedInstanceConfigOutputWithContext(ctx context.Context) GceShieldedInstanceConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceShieldedInstanceConfigOutput)
}

func (i GceShieldedInstanceConfigArgs) ToGceShieldedInstanceConfigPtrOutput() GceShieldedInstanceConfigPtrOutput {
	return i.ToGceShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i GceShieldedInstanceConfigArgs) ToGceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) GceShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceShieldedInstanceConfigOutput).ToGceShieldedInstanceConfigPtrOutputWithContext(ctx)
}

// GceShieldedInstanceConfigPtrInput is an input type that accepts GceShieldedInstanceConfigArgs, GceShieldedInstanceConfigPtr and GceShieldedInstanceConfigPtrOutput values.
// You can construct a concrete instance of `GceShieldedInstanceConfigPtrInput` via:
//
//	        GceShieldedInstanceConfigArgs{...}
//
//	or:
//
//	        nil
type GceShieldedInstanceConfigPtrInput interface {
	pulumi.Input

	ToGceShieldedInstanceConfigPtrOutput() GceShieldedInstanceConfigPtrOutput
	ToGceShieldedInstanceConfigPtrOutputWithContext(context.Context) GceShieldedInstanceConfigPtrOutput
}

type gceShieldedInstanceConfigPtrType GceShieldedInstanceConfigArgs

func GceShieldedInstanceConfigPtr(v *GceShieldedInstanceConfigArgs) GceShieldedInstanceConfigPtrInput {
	return (*gceShieldedInstanceConfigPtrType)(v)
}

func (*gceShieldedInstanceConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GceShieldedInstanceConfig)(nil)).Elem()
}

func (i *gceShieldedInstanceConfigPtrType) ToGceShieldedInstanceConfigPtrOutput() GceShieldedInstanceConfigPtrOutput {
	return i.ToGceShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (i *gceShieldedInstanceConfigPtrType) ToGceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) GceShieldedInstanceConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GceShieldedInstanceConfigPtrOutput)
}

// A set of Compute Engine Shielded instance options.
type GceShieldedInstanceConfigOutput struct{ *pulumi.OutputState }

func (GceShieldedInstanceConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceShieldedInstanceConfig)(nil)).Elem()
}

func (o GceShieldedInstanceConfigOutput) ToGceShieldedInstanceConfigOutput() GceShieldedInstanceConfigOutput {
	return o
}

func (o GceShieldedInstanceConfigOutput) ToGceShieldedInstanceConfigOutputWithContext(ctx context.Context) GceShieldedInstanceConfigOutput {
	return o
}

func (o GceShieldedInstanceConfigOutput) ToGceShieldedInstanceConfigPtrOutput() GceShieldedInstanceConfigPtrOutput {
	return o.ToGceShieldedInstanceConfigPtrOutputWithContext(context.Background())
}

func (o GceShieldedInstanceConfigOutput) ToGceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) GceShieldedInstanceConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GceShieldedInstanceConfig) *GceShieldedInstanceConfig {
		return &v
	}).(GceShieldedInstanceConfigPtrOutput)
}

// Optional. Whether the instance has integrity monitoring enabled.
func (o GceShieldedInstanceConfigOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceShieldedInstanceConfig) *bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolPtrOutput)
}

// Optional. Whether the instance has Secure Boot enabled.
func (o GceShieldedInstanceConfigOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceShieldedInstanceConfig) *bool { return v.EnableSecureBoot }).(pulumi.BoolPtrOutput)
}

// Optional. Whether the instance has the vTPM enabled.
func (o GceShieldedInstanceConfigOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GceShieldedInstanceConfig) *bool { return v.EnableVtpm }).(pulumi.BoolPtrOutput)
}

type GceShieldedInstanceConfigPtrOutput struct{ *pulumi.OutputState }

func (GceShieldedInstanceConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GceShieldedInstanceConfig)(nil)).Elem()
}

func (o GceShieldedInstanceConfigPtrOutput) ToGceShieldedInstanceConfigPtrOutput() GceShieldedInstanceConfigPtrOutput {
	return o
}

func (o GceShieldedInstanceConfigPtrOutput) ToGceShieldedInstanceConfigPtrOutputWithContext(ctx context.Context) GceShieldedInstanceConfigPtrOutput {
	return o
}

func (o GceShieldedInstanceConfigPtrOutput) Elem() GceShieldedInstanceConfigOutput {
	return o.ApplyT(func(v *GceShieldedInstanceConfig) GceShieldedInstanceConfig {
		if v != nil {
			return *v
		}
		var ret GceShieldedInstanceConfig
		return ret
	}).(GceShieldedInstanceConfigOutput)
}

// Optional. Whether the instance has integrity monitoring enabled.
func (o GceShieldedInstanceConfigPtrOutput) EnableIntegrityMonitoring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableIntegrityMonitoring
	}).(pulumi.BoolPtrOutput)
}

// Optional. Whether the instance has Secure Boot enabled.
func (o GceShieldedInstanceConfigPtrOutput) EnableSecureBoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableSecureBoot
	}).(pulumi.BoolPtrOutput)
}

// Optional. Whether the instance has the vTPM enabled.
func (o GceShieldedInstanceConfigPtrOutput) EnableVtpm() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GceShieldedInstanceConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnableVtpm
	}).(pulumi.BoolPtrOutput)
}

// A set of Compute Engine Shielded instance options.
type GceShieldedInstanceConfigResponse struct {
	// Optional. Whether the instance has integrity monitoring enabled.
	EnableIntegrityMonitoring bool `pulumi:"enableIntegrityMonitoring"`
	// Optional. Whether the instance has Secure Boot enabled.
	EnableSecureBoot bool `pulumi:"enableSecureBoot"`
	// Optional. Whether the instance has the vTPM enabled.
	EnableVtpm bool `pulumi:"enableVtpm"`
}

// A set of Compute Engine Shielded instance options.
type GceShieldedInstanceConfigResponseOutput struct{ *pulumi.OutputState }

func (GceShieldedInstanceConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GceShieldedInstanceConfigResponse)(nil)).Elem()
}

func (o GceShieldedInstanceConfigResponseOutput) ToGceShieldedInstanceConfigResponseOutput() GceShieldedInstanceConfigResponseOutput {
	return o
}

func (o GceShieldedInstanceConfigResponseOutput) ToGceShieldedInstanceConfigResponseOutputWithContext(ctx context.Context) GceShieldedInstanceConfigResponseOutput {
	return o
}

// Optional. Whether the instance has integrity monitoring enabled.
func (o GceShieldedInstanceConfigResponseOutput) EnableIntegrityMonitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v GceShieldedInstanceConfigResponse) bool { return v.EnableIntegrityMonitoring }).(pulumi.BoolOutput)
}

// Optional. Whether the instance has Secure Boot enabled.
func (o GceShieldedInstanceConfigResponseOutput) EnableSecureBoot() pulumi.BoolOutput {
	return o.ApplyT(func(v GceShieldedInstanceConfigResponse) bool { return v.EnableSecureBoot }).(pulumi.BoolOutput)
}

// Optional. Whether the instance has the vTPM enabled.
func (o GceShieldedInstanceConfigResponseOutput) EnableVtpm() pulumi.BoolOutput {
	return o.ApplyT(func(v GceShieldedInstanceConfigResponse) bool { return v.EnableVtpm }).(pulumi.BoolOutput)
}

// Runtime host for a workstation.
type Host struct {
	// Specifies a Compute Engine instance as the host.
	GceInstance *GceInstance `pulumi:"gceInstance"`
}

// HostInput is an input type that accepts HostArgs and HostOutput values.
// You can construct a concrete instance of `HostInput` via:
//
//	HostArgs{...}
type HostInput interface {
	pulumi.Input

	ToHostOutput() HostOutput
	ToHostOutputWithContext(context.Context) HostOutput
}

// Runtime host for a workstation.
type HostArgs struct {
	// Specifies a Compute Engine instance as the host.
	GceInstance GceInstancePtrInput `pulumi:"gceInstance"`
}

func (HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Host)(nil)).Elem()
}

func (i HostArgs) ToHostOutput() HostOutput {
	return i.ToHostOutputWithContext(context.Background())
}

func (i HostArgs) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostOutput)
}

func (i HostArgs) ToHostPtrOutput() HostPtrOutput {
	return i.ToHostPtrOutputWithContext(context.Background())
}

func (i HostArgs) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostOutput).ToHostPtrOutputWithContext(ctx)
}

// HostPtrInput is an input type that accepts HostArgs, HostPtr and HostPtrOutput values.
// You can construct a concrete instance of `HostPtrInput` via:
//
//	        HostArgs{...}
//
//	or:
//
//	        nil
type HostPtrInput interface {
	pulumi.Input

	ToHostPtrOutput() HostPtrOutput
	ToHostPtrOutputWithContext(context.Context) HostPtrOutput
}

type hostPtrType HostArgs

func HostPtr(v *HostArgs) HostPtrInput {
	return (*hostPtrType)(v)
}

func (*hostPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Host)(nil)).Elem()
}

func (i *hostPtrType) ToHostPtrOutput() HostPtrOutput {
	return i.ToHostPtrOutputWithContext(context.Background())
}

func (i *hostPtrType) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPtrOutput)
}

// Runtime host for a workstation.
type HostOutput struct{ *pulumi.OutputState }

func (HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Host)(nil)).Elem()
}

func (o HostOutput) ToHostOutput() HostOutput {
	return o
}

func (o HostOutput) ToHostOutputWithContext(ctx context.Context) HostOutput {
	return o
}

func (o HostOutput) ToHostPtrOutput() HostPtrOutput {
	return o.ToHostPtrOutputWithContext(context.Background())
}

func (o HostOutput) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Host) *Host {
		return &v
	}).(HostPtrOutput)
}

// Specifies a Compute Engine instance as the host.
func (o HostOutput) GceInstance() GceInstancePtrOutput {
	return o.ApplyT(func(v Host) *GceInstance { return v.GceInstance }).(GceInstancePtrOutput)
}

type HostPtrOutput struct{ *pulumi.OutputState }

func (HostPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Host)(nil)).Elem()
}

func (o HostPtrOutput) ToHostPtrOutput() HostPtrOutput {
	return o
}

func (o HostPtrOutput) ToHostPtrOutputWithContext(ctx context.Context) HostPtrOutput {
	return o
}

func (o HostPtrOutput) Elem() HostOutput {
	return o.ApplyT(func(v *Host) Host {
		if v != nil {
			return *v
		}
		var ret Host
		return ret
	}).(HostOutput)
}

// Specifies a Compute Engine instance as the host.
func (o HostPtrOutput) GceInstance() GceInstancePtrOutput {
	return o.ApplyT(func(v *Host) *GceInstance {
		if v == nil {
			return nil
		}
		return v.GceInstance
	}).(GceInstancePtrOutput)
}

// Runtime host for a workstation.
type HostResponse struct {
	// Specifies a Compute Engine instance as the host.
	GceInstance GceInstanceResponse `pulumi:"gceInstance"`
}

// Runtime host for a workstation.
type HostResponseOutput struct{ *pulumi.OutputState }

func (HostResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostResponse)(nil)).Elem()
}

func (o HostResponseOutput) ToHostResponseOutput() HostResponseOutput {
	return o
}

func (o HostResponseOutput) ToHostResponseOutputWithContext(ctx context.Context) HostResponseOutput {
	return o
}

// Specifies a Compute Engine instance as the host.
func (o HostResponseOutput) GceInstance() GceInstanceResponseOutput {
	return o.ApplyT(func(v HostResponse) GceInstanceResponse { return v.GceInstance }).(GceInstanceResponseOutput)
}

// A directory to persist across workstation sessions.
type PersistentDirectory struct {
	// A PersistentDirectory backed by a Compute Engine persistent disk.
	GcePd *GceRegionalPersistentDisk `pulumi:"gcePd"`
	// Optional. Location of this directory in the running workstation.
	MountPath *string `pulumi:"mountPath"`
}

// PersistentDirectoryInput is an input type that accepts PersistentDirectoryArgs and PersistentDirectoryOutput values.
// You can construct a concrete instance of `PersistentDirectoryInput` via:
//
//	PersistentDirectoryArgs{...}
type PersistentDirectoryInput interface {
	pulumi.Input

	ToPersistentDirectoryOutput() PersistentDirectoryOutput
	ToPersistentDirectoryOutputWithContext(context.Context) PersistentDirectoryOutput
}

// A directory to persist across workstation sessions.
type PersistentDirectoryArgs struct {
	// A PersistentDirectory backed by a Compute Engine persistent disk.
	GcePd GceRegionalPersistentDiskPtrInput `pulumi:"gcePd"`
	// Optional. Location of this directory in the running workstation.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
}

func (PersistentDirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentDirectory)(nil)).Elem()
}

func (i PersistentDirectoryArgs) ToPersistentDirectoryOutput() PersistentDirectoryOutput {
	return i.ToPersistentDirectoryOutputWithContext(context.Background())
}

func (i PersistentDirectoryArgs) ToPersistentDirectoryOutputWithContext(ctx context.Context) PersistentDirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentDirectoryOutput)
}

// PersistentDirectoryArrayInput is an input type that accepts PersistentDirectoryArray and PersistentDirectoryArrayOutput values.
// You can construct a concrete instance of `PersistentDirectoryArrayInput` via:
//
//	PersistentDirectoryArray{ PersistentDirectoryArgs{...} }
type PersistentDirectoryArrayInput interface {
	pulumi.Input

	ToPersistentDirectoryArrayOutput() PersistentDirectoryArrayOutput
	ToPersistentDirectoryArrayOutputWithContext(context.Context) PersistentDirectoryArrayOutput
}

type PersistentDirectoryArray []PersistentDirectoryInput

func (PersistentDirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentDirectory)(nil)).Elem()
}

func (i PersistentDirectoryArray) ToPersistentDirectoryArrayOutput() PersistentDirectoryArrayOutput {
	return i.ToPersistentDirectoryArrayOutputWithContext(context.Background())
}

func (i PersistentDirectoryArray) ToPersistentDirectoryArrayOutputWithContext(ctx context.Context) PersistentDirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PersistentDirectoryArrayOutput)
}

// A directory to persist across workstation sessions.
type PersistentDirectoryOutput struct{ *pulumi.OutputState }

func (PersistentDirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentDirectory)(nil)).Elem()
}

func (o PersistentDirectoryOutput) ToPersistentDirectoryOutput() PersistentDirectoryOutput {
	return o
}

func (o PersistentDirectoryOutput) ToPersistentDirectoryOutputWithContext(ctx context.Context) PersistentDirectoryOutput {
	return o
}

// A PersistentDirectory backed by a Compute Engine persistent disk.
func (o PersistentDirectoryOutput) GcePd() GceRegionalPersistentDiskPtrOutput {
	return o.ApplyT(func(v PersistentDirectory) *GceRegionalPersistentDisk { return v.GcePd }).(GceRegionalPersistentDiskPtrOutput)
}

// Optional. Location of this directory in the running workstation.
func (o PersistentDirectoryOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PersistentDirectory) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

type PersistentDirectoryArrayOutput struct{ *pulumi.OutputState }

func (PersistentDirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentDirectory)(nil)).Elem()
}

func (o PersistentDirectoryArrayOutput) ToPersistentDirectoryArrayOutput() PersistentDirectoryArrayOutput {
	return o
}

func (o PersistentDirectoryArrayOutput) ToPersistentDirectoryArrayOutputWithContext(ctx context.Context) PersistentDirectoryArrayOutput {
	return o
}

func (o PersistentDirectoryArrayOutput) Index(i pulumi.IntInput) PersistentDirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentDirectory {
		return vs[0].([]PersistentDirectory)[vs[1].(int)]
	}).(PersistentDirectoryOutput)
}

// A directory to persist across workstation sessions.
type PersistentDirectoryResponse struct {
	// A PersistentDirectory backed by a Compute Engine persistent disk.
	GcePd GceRegionalPersistentDiskResponse `pulumi:"gcePd"`
	// Optional. Location of this directory in the running workstation.
	MountPath string `pulumi:"mountPath"`
}

// A directory to persist across workstation sessions.
type PersistentDirectoryResponseOutput struct{ *pulumi.OutputState }

func (PersistentDirectoryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PersistentDirectoryResponse)(nil)).Elem()
}

func (o PersistentDirectoryResponseOutput) ToPersistentDirectoryResponseOutput() PersistentDirectoryResponseOutput {
	return o
}

func (o PersistentDirectoryResponseOutput) ToPersistentDirectoryResponseOutputWithContext(ctx context.Context) PersistentDirectoryResponseOutput {
	return o
}

// A PersistentDirectory backed by a Compute Engine persistent disk.
func (o PersistentDirectoryResponseOutput) GcePd() GceRegionalPersistentDiskResponseOutput {
	return o.ApplyT(func(v PersistentDirectoryResponse) GceRegionalPersistentDiskResponse { return v.GcePd }).(GceRegionalPersistentDiskResponseOutput)
}

// Optional. Location of this directory in the running workstation.
func (o PersistentDirectoryResponseOutput) MountPath() pulumi.StringOutput {
	return o.ApplyT(func(v PersistentDirectoryResponse) string { return v.MountPath }).(pulumi.StringOutput)
}

type PersistentDirectoryResponseArrayOutput struct{ *pulumi.OutputState }

func (PersistentDirectoryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PersistentDirectoryResponse)(nil)).Elem()
}

func (o PersistentDirectoryResponseArrayOutput) ToPersistentDirectoryResponseArrayOutput() PersistentDirectoryResponseArrayOutput {
	return o
}

func (o PersistentDirectoryResponseArrayOutput) ToPersistentDirectoryResponseArrayOutputWithContext(ctx context.Context) PersistentDirectoryResponseArrayOutput {
	return o
}

func (o PersistentDirectoryResponseArrayOutput) Index(i pulumi.IntInput) PersistentDirectoryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PersistentDirectoryResponse {
		return vs[0].([]PersistentDirectoryResponse)[vs[1].(int)]
	}).(PersistentDirectoryResponseOutput)
}

// Configuration options for private workstation clusters.
type PrivateClusterConfig struct {
	// Optional. Additional projects that are allowed to attach to the workstation cluster's service attachment. By default, the workstation cluster's project and the VPC host project (if different) are allowed.
	AllowedProjects []string `pulumi:"allowedProjects"`
	// Immutable. Whether Workstations endpoint is private.
	EnablePrivateEndpoint *bool `pulumi:"enablePrivateEndpoint"`
}

// PrivateClusterConfigInput is an input type that accepts PrivateClusterConfigArgs and PrivateClusterConfigOutput values.
// You can construct a concrete instance of `PrivateClusterConfigInput` via:
//
//	PrivateClusterConfigArgs{...}
type PrivateClusterConfigInput interface {
	pulumi.Input

	ToPrivateClusterConfigOutput() PrivateClusterConfigOutput
	ToPrivateClusterConfigOutputWithContext(context.Context) PrivateClusterConfigOutput
}

// Configuration options for private workstation clusters.
type PrivateClusterConfigArgs struct {
	// Optional. Additional projects that are allowed to attach to the workstation cluster's service attachment. By default, the workstation cluster's project and the VPC host project (if different) are allowed.
	AllowedProjects pulumi.StringArrayInput `pulumi:"allowedProjects"`
	// Immutable. Whether Workstations endpoint is private.
	EnablePrivateEndpoint pulumi.BoolPtrInput `pulumi:"enablePrivateEndpoint"`
}

func (PrivateClusterConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return i.ToPrivateClusterConfigOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput)
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i PrivateClusterConfigArgs) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigOutput).ToPrivateClusterConfigPtrOutputWithContext(ctx)
}

// PrivateClusterConfigPtrInput is an input type that accepts PrivateClusterConfigArgs, PrivateClusterConfigPtr and PrivateClusterConfigPtrOutput values.
// You can construct a concrete instance of `PrivateClusterConfigPtrInput` via:
//
//	        PrivateClusterConfigArgs{...}
//
//	or:
//
//	        nil
type PrivateClusterConfigPtrInput interface {
	pulumi.Input

	ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput
	ToPrivateClusterConfigPtrOutputWithContext(context.Context) PrivateClusterConfigPtrOutput
}

type privateClusterConfigPtrType PrivateClusterConfigArgs

func PrivateClusterConfigPtr(v *PrivateClusterConfigArgs) PrivateClusterConfigPtrInput {
	return (*privateClusterConfigPtrType)(v)
}

func (*privateClusterConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return i.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (i *privateClusterConfigPtrType) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateClusterConfigPtrOutput)
}

// Configuration options for private workstation clusters.
type PrivateClusterConfigOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutput() PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigOutputWithContext(ctx context.Context) PrivateClusterConfigOutput {
	return o
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o.ToPrivateClusterConfigPtrOutputWithContext(context.Background())
}

func (o PrivateClusterConfigOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PrivateClusterConfig) *PrivateClusterConfig {
		return &v
	}).(PrivateClusterConfigPtrOutput)
}

// Optional. Additional projects that are allowed to attach to the workstation cluster's service attachment. By default, the workstation cluster's project and the VPC host project (if different) are allowed.
func (o PrivateClusterConfigOutput) AllowedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateClusterConfig) []string { return v.AllowedProjects }).(pulumi.StringArrayOutput)
}

// Immutable. Whether Workstations endpoint is private.
func (o PrivateClusterConfigOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PrivateClusterConfig) *bool { return v.EnablePrivateEndpoint }).(pulumi.BoolPtrOutput)
}

type PrivateClusterConfigPtrOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateClusterConfig)(nil)).Elem()
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutput() PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) ToPrivateClusterConfigPtrOutputWithContext(ctx context.Context) PrivateClusterConfigPtrOutput {
	return o
}

func (o PrivateClusterConfigPtrOutput) Elem() PrivateClusterConfigOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) PrivateClusterConfig {
		if v != nil {
			return *v
		}
		var ret PrivateClusterConfig
		return ret
	}).(PrivateClusterConfigOutput)
}

// Optional. Additional projects that are allowed to attach to the workstation cluster's service attachment. By default, the workstation cluster's project and the VPC host project (if different) are allowed.
func (o PrivateClusterConfigPtrOutput) AllowedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) []string {
		if v == nil {
			return nil
		}
		return v.AllowedProjects
	}).(pulumi.StringArrayOutput)
}

// Immutable. Whether Workstations endpoint is private.
func (o PrivateClusterConfigPtrOutput) EnablePrivateEndpoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PrivateClusterConfig) *bool {
		if v == nil {
			return nil
		}
		return v.EnablePrivateEndpoint
	}).(pulumi.BoolPtrOutput)
}

// Configuration options for private workstation clusters.
type PrivateClusterConfigResponse struct {
	// Optional. Additional projects that are allowed to attach to the workstation cluster's service attachment. By default, the workstation cluster's project and the VPC host project (if different) are allowed.
	AllowedProjects []string `pulumi:"allowedProjects"`
	// Hostname for the workstation cluster. This field will be populated only when private endpoint is enabled. To access workstations in the workstation cluster, create a new DNS zone mapping this domain name to an internal IP address and a forwarding rule mapping that address to the service attachment.
	ClusterHostname string `pulumi:"clusterHostname"`
	// Immutable. Whether Workstations endpoint is private.
	EnablePrivateEndpoint bool `pulumi:"enablePrivateEndpoint"`
	// Service attachment URI for the workstation cluster. The service attachemnt is created when private endpoint is enabled. To access workstations in the workstation cluster, configure access to the managed service using [Private Service Connect](https://cloud.google.com/vpc/docs/configure-private-service-connect-services).
	ServiceAttachmentUri string `pulumi:"serviceAttachmentUri"`
}

// Configuration options for private workstation clusters.
type PrivateClusterConfigResponseOutput struct{ *pulumi.OutputState }

func (PrivateClusterConfigResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateClusterConfigResponse)(nil)).Elem()
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutput() PrivateClusterConfigResponseOutput {
	return o
}

func (o PrivateClusterConfigResponseOutput) ToPrivateClusterConfigResponseOutputWithContext(ctx context.Context) PrivateClusterConfigResponseOutput {
	return o
}

// Optional. Additional projects that are allowed to attach to the workstation cluster's service attachment. By default, the workstation cluster's project and the VPC host project (if different) are allowed.
func (o PrivateClusterConfigResponseOutput) AllowedProjects() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) []string { return v.AllowedProjects }).(pulumi.StringArrayOutput)
}

// Hostname for the workstation cluster. This field will be populated only when private endpoint is enabled. To access workstations in the workstation cluster, create a new DNS zone mapping this domain name to an internal IP address and a forwarding rule mapping that address to the service attachment.
func (o PrivateClusterConfigResponseOutput) ClusterHostname() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.ClusterHostname }).(pulumi.StringOutput)
}

// Immutable. Whether Workstations endpoint is private.
func (o PrivateClusterConfigResponseOutput) EnablePrivateEndpoint() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) bool { return v.EnablePrivateEndpoint }).(pulumi.BoolOutput)
}

// Service attachment URI for the workstation cluster. The service attachemnt is created when private endpoint is enabled. To access workstations in the workstation cluster, configure access to the managed service using [Private Service Connect](https://cloud.google.com/vpc/docs/configure-private-service-connect-services).
func (o PrivateClusterConfigResponseOutput) ServiceAttachmentUri() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateClusterConfigResponse) string { return v.ServiceAttachmentUri }).(pulumi.StringOutput)
}

// A readiness check to be performed on a workstation.
type ReadinessCheck struct {
	// Optional. Path to which the request should be sent.
	Path *string `pulumi:"path"`
	// Optional. Port to which the request should be sent.
	Port *int `pulumi:"port"`
}

// ReadinessCheckInput is an input type that accepts ReadinessCheckArgs and ReadinessCheckOutput values.
// You can construct a concrete instance of `ReadinessCheckInput` via:
//
//	ReadinessCheckArgs{...}
type ReadinessCheckInput interface {
	pulumi.Input

	ToReadinessCheckOutput() ReadinessCheckOutput
	ToReadinessCheckOutputWithContext(context.Context) ReadinessCheckOutput
}

// A readiness check to be performed on a workstation.
type ReadinessCheckArgs struct {
	// Optional. Path to which the request should be sent.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Optional. Port to which the request should be sent.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ReadinessCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheck)(nil)).Elem()
}

func (i ReadinessCheckArgs) ToReadinessCheckOutput() ReadinessCheckOutput {
	return i.ToReadinessCheckOutputWithContext(context.Background())
}

func (i ReadinessCheckArgs) ToReadinessCheckOutputWithContext(ctx context.Context) ReadinessCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadinessCheckOutput)
}

// ReadinessCheckArrayInput is an input type that accepts ReadinessCheckArray and ReadinessCheckArrayOutput values.
// You can construct a concrete instance of `ReadinessCheckArrayInput` via:
//
//	ReadinessCheckArray{ ReadinessCheckArgs{...} }
type ReadinessCheckArrayInput interface {
	pulumi.Input

	ToReadinessCheckArrayOutput() ReadinessCheckArrayOutput
	ToReadinessCheckArrayOutputWithContext(context.Context) ReadinessCheckArrayOutput
}

type ReadinessCheckArray []ReadinessCheckInput

func (ReadinessCheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReadinessCheck)(nil)).Elem()
}

func (i ReadinessCheckArray) ToReadinessCheckArrayOutput() ReadinessCheckArrayOutput {
	return i.ToReadinessCheckArrayOutputWithContext(context.Background())
}

func (i ReadinessCheckArray) ToReadinessCheckArrayOutputWithContext(ctx context.Context) ReadinessCheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReadinessCheckArrayOutput)
}

// A readiness check to be performed on a workstation.
type ReadinessCheckOutput struct{ *pulumi.OutputState }

func (ReadinessCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheck)(nil)).Elem()
}

func (o ReadinessCheckOutput) ToReadinessCheckOutput() ReadinessCheckOutput {
	return o
}

func (o ReadinessCheckOutput) ToReadinessCheckOutputWithContext(ctx context.Context) ReadinessCheckOutput {
	return o
}

// Optional. Path to which the request should be sent.
func (o ReadinessCheckOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Optional. Port to which the request should be sent.
func (o ReadinessCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ReadinessCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ReadinessCheckArrayOutput struct{ *pulumi.OutputState }

func (ReadinessCheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReadinessCheck)(nil)).Elem()
}

func (o ReadinessCheckArrayOutput) ToReadinessCheckArrayOutput() ReadinessCheckArrayOutput {
	return o
}

func (o ReadinessCheckArrayOutput) ToReadinessCheckArrayOutputWithContext(ctx context.Context) ReadinessCheckArrayOutput {
	return o
}

func (o ReadinessCheckArrayOutput) Index(i pulumi.IntInput) ReadinessCheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReadinessCheck {
		return vs[0].([]ReadinessCheck)[vs[1].(int)]
	}).(ReadinessCheckOutput)
}

// A readiness check to be performed on a workstation.
type ReadinessCheckResponse struct {
	// Optional. Path to which the request should be sent.
	Path string `pulumi:"path"`
	// Optional. Port to which the request should be sent.
	Port int `pulumi:"port"`
}

// A readiness check to be performed on a workstation.
type ReadinessCheckResponseOutput struct{ *pulumi.OutputState }

func (ReadinessCheckResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReadinessCheckResponse)(nil)).Elem()
}

func (o ReadinessCheckResponseOutput) ToReadinessCheckResponseOutput() ReadinessCheckResponseOutput {
	return o
}

func (o ReadinessCheckResponseOutput) ToReadinessCheckResponseOutputWithContext(ctx context.Context) ReadinessCheckResponseOutput {
	return o
}

// Optional. Path to which the request should be sent.
func (o ReadinessCheckResponseOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) string { return v.Path }).(pulumi.StringOutput)
}

// Optional. Port to which the request should be sent.
func (o ReadinessCheckResponseOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ReadinessCheckResponse) int { return v.Port }).(pulumi.IntOutput)
}

type ReadinessCheckResponseArrayOutput struct{ *pulumi.OutputState }

func (ReadinessCheckResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReadinessCheckResponse)(nil)).Elem()
}

func (o ReadinessCheckResponseArrayOutput) ToReadinessCheckResponseArrayOutput() ReadinessCheckResponseArrayOutput {
	return o
}

func (o ReadinessCheckResponseArrayOutput) ToReadinessCheckResponseArrayOutputWithContext(ctx context.Context) ReadinessCheckResponseArrayOutput {
	return o
}

func (o ReadinessCheckResponseArrayOutput) Index(i pulumi.IntInput) ReadinessCheckResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReadinessCheckResponse {
		return vs[0].([]ReadinessCheckResponse)[vs[1].(int)]
	}).(ReadinessCheckResponseOutput)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponse struct {
	// The status code, which should be an enum value of google.rpc.Code.
	Code int `pulumi:"code"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []map[string]interface{} `pulumi:"details"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
	Message string `pulumi:"message"`
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type StatusResponseOutput struct{ *pulumi.OutputState }

func (StatusResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StatusResponse)(nil)).Elem()
}

func (o StatusResponseOutput) ToStatusResponseOutput() StatusResponseOutput {
	return o
}

func (o StatusResponseOutput) ToStatusResponseOutputWithContext(ctx context.Context) StatusResponseOutput {
	return o
}

// The status code, which should be an enum value of google.rpc.Code.
func (o StatusResponseOutput) Code() pulumi.IntOutput {
	return o.ApplyT(func(v StatusResponse) int { return v.Code }).(pulumi.IntOutput)
}

// A list of messages that carry the error details. There is a common set of message types for APIs to use.
func (o StatusResponseOutput) Details() pulumi.MapArrayOutput {
	return o.ApplyT(func(v StatusResponse) []map[string]interface{} { return v.Details }).(pulumi.MapArrayOutput)
}

// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
func (o StatusResponseOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v StatusResponse) string { return v.Message }).(pulumi.StringOutput)
}

type StatusResponseArrayOutput struct{ *pulumi.OutputState }

func (StatusResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StatusResponse)(nil)).Elem()
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutput() StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) ToStatusResponseArrayOutputWithContext(ctx context.Context) StatusResponseArrayOutput {
	return o
}

func (o StatusResponseArrayOutput) Index(i pulumi.IntInput) StatusResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StatusResponse {
		return vs[0].([]StatusResponse)[vs[1].(int)]
	}).(StatusResponseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigInput)(nil)).Elem(), AuditConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditConfigArrayInput)(nil)).Elem(), AuditConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigInput)(nil)).Elem(), AuditLogConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditLogConfigArrayInput)(nil)).Elem(), AuditLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingInput)(nil)).Elem(), BindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingArrayInput)(nil)).Elem(), BindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerInput)(nil)).Elem(), ContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerPtrInput)(nil)).Elem(), ContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerEncryptionKeyInput)(nil)).Elem(), CustomerEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerEncryptionKeyPtrInput)(nil)).Elem(), CustomerEncryptionKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExprPtrInput)(nil)).Elem(), ExprArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceConfidentialInstanceConfigInput)(nil)).Elem(), GceConfidentialInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceConfidentialInstanceConfigPtrInput)(nil)).Elem(), GceConfidentialInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceInstanceInput)(nil)).Elem(), GceInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceInstancePtrInput)(nil)).Elem(), GceInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceRegionalPersistentDiskInput)(nil)).Elem(), GceRegionalPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceRegionalPersistentDiskPtrInput)(nil)).Elem(), GceRegionalPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceShieldedInstanceConfigInput)(nil)).Elem(), GceShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GceShieldedInstanceConfigPtrInput)(nil)).Elem(), GceShieldedInstanceConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostInput)(nil)).Elem(), HostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPtrInput)(nil)).Elem(), HostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentDirectoryInput)(nil)).Elem(), PersistentDirectoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PersistentDirectoryArrayInput)(nil)).Elem(), PersistentDirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterConfigInput)(nil)).Elem(), PrivateClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateClusterConfigPtrInput)(nil)).Elem(), PrivateClusterConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadinessCheckInput)(nil)).Elem(), ReadinessCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReadinessCheckArrayInput)(nil)).Elem(), ReadinessCheckArray{})
	pulumi.RegisterOutputType(AuditConfigOutput{})
	pulumi.RegisterOutputType(AuditConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigOutput{})
	pulumi.RegisterOutputType(AuditLogConfigArrayOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseOutput{})
	pulumi.RegisterOutputType(AuditLogConfigResponseArrayOutput{})
	pulumi.RegisterOutputType(BindingOutput{})
	pulumi.RegisterOutputType(BindingArrayOutput{})
	pulumi.RegisterOutputType(BindingResponseOutput{})
	pulumi.RegisterOutputType(BindingResponseArrayOutput{})
	pulumi.RegisterOutputType(ContainerOutput{})
	pulumi.RegisterOutputType(ContainerPtrOutput{})
	pulumi.RegisterOutputType(ContainerResponseOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyPtrOutput{})
	pulumi.RegisterOutputType(CustomerEncryptionKeyResponseOutput{})
	pulumi.RegisterOutputType(ExprOutput{})
	pulumi.RegisterOutputType(ExprPtrOutput{})
	pulumi.RegisterOutputType(ExprResponseOutput{})
	pulumi.RegisterOutputType(GceConfidentialInstanceConfigOutput{})
	pulumi.RegisterOutputType(GceConfidentialInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(GceConfidentialInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(GceInstanceOutput{})
	pulumi.RegisterOutputType(GceInstancePtrOutput{})
	pulumi.RegisterOutputType(GceInstanceResponseOutput{})
	pulumi.RegisterOutputType(GceRegionalPersistentDiskOutput{})
	pulumi.RegisterOutputType(GceRegionalPersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(GceRegionalPersistentDiskResponseOutput{})
	pulumi.RegisterOutputType(GceShieldedInstanceConfigOutput{})
	pulumi.RegisterOutputType(GceShieldedInstanceConfigPtrOutput{})
	pulumi.RegisterOutputType(GceShieldedInstanceConfigResponseOutput{})
	pulumi.RegisterOutputType(HostOutput{})
	pulumi.RegisterOutputType(HostPtrOutput{})
	pulumi.RegisterOutputType(HostResponseOutput{})
	pulumi.RegisterOutputType(PersistentDirectoryOutput{})
	pulumi.RegisterOutputType(PersistentDirectoryArrayOutput{})
	pulumi.RegisterOutputType(PersistentDirectoryResponseOutput{})
	pulumi.RegisterOutputType(PersistentDirectoryResponseArrayOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigPtrOutput{})
	pulumi.RegisterOutputType(PrivateClusterConfigResponseOutput{})
	pulumi.RegisterOutputType(ReadinessCheckOutput{})
	pulumi.RegisterOutputType(ReadinessCheckArrayOutput{})
	pulumi.RegisterOutputType(ReadinessCheckResponseOutput{})
	pulumi.RegisterOutputType(ReadinessCheckResponseArrayOutput{})
	pulumi.RegisterOutputType(StatusResponseOutput{})
	pulumi.RegisterOutputType(StatusResponseArrayOutput{})
}
