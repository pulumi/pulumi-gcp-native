// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new workstation configuration.
type WorkstationConfig struct {
	pulumi.CustomResourceState

	// Client-specified annotations.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// Status conditions describing the current resource state.
	Conditions StatusResponseArrayOutput `pulumi:"conditions"`
	// Container that will be run for each workstation using this configuration when that workstation is started.
	Container ContainerResponseOutput `pulumi:"container"`
	// Time when this resource was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the `conditions` field.
	Degraded pulumi.BoolOutput `pulumi:"degraded"`
	// Time when this resource was soft-deleted.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// Human-readable name for this resource.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Runtime host for the workstation.
	Host HostResponseOutput `pulumi:"host"`
	// How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
	IdleTimeout pulumi.StringOutput `pulumi:"idleTimeout"`
	Location    pulumi.StringOutput `pulumi:"location"`
	// Full name of this resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Directories to persist across workstation sessions.
	PersistentDirectories PersistentDirectoryResponseArrayOutput `pulumi:"persistentDirectories"`
	Project               pulumi.StringOutput                    `pulumi:"project"`
	// Indicates whether this resource is currently being updated to match its intended state.
	Reconciling pulumi.BoolOutput `pulumi:"reconciling"`
	// How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this config should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
	RunningTimeout pulumi.StringOutput `pulumi:"runningTimeout"`
	// A system-assigned unique identified for this resource.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// Time when this resource was most recently updated.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// If set, validate the request and preview the review, but do not actually apply it.
	ValidateOnly         pulumi.BoolPtrOutput `pulumi:"validateOnly"`
	WorkstationClusterId pulumi.StringOutput  `pulumi:"workstationClusterId"`
	// Required. ID to use for the config.
	WorkstationConfigId pulumi.StringOutput `pulumi:"workstationConfigId"`
}

// NewWorkstationConfig registers a new resource with the given unique name, arguments, and options.
func NewWorkstationConfig(ctx *pulumi.Context,
	name string, args *WorkstationConfigArgs, opts ...pulumi.ResourceOption) (*WorkstationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkstationClusterId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationClusterId'")
	}
	if args.WorkstationConfigId == nil {
		return nil, errors.New("invalid value for required argument 'WorkstationConfigId'")
	}
	replaceOnChanges := pulumi.ReplaceOnChanges([]string{
		"location",
		"project",
		"workstationClusterId",
		"workstationConfigId",
	})
	opts = append(opts, replaceOnChanges)
	var resource WorkstationConfig
	err := ctx.RegisterResource("google-native:workstations/v1beta:WorkstationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkstationConfig gets an existing WorkstationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkstationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkstationConfigState, opts ...pulumi.ResourceOption) (*WorkstationConfig, error) {
	var resource WorkstationConfig
	err := ctx.ReadResource("google-native:workstations/v1beta:WorkstationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkstationConfig resources.
type workstationConfigState struct {
}

type WorkstationConfigState struct {
}

func (WorkstationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigState)(nil)).Elem()
}

type workstationConfigArgs struct {
	// Client-specified annotations.
	Annotations map[string]string `pulumi:"annotations"`
	// Container that will be run for each workstation using this configuration when that workstation is started.
	Container *Container `pulumi:"container"`
	// Human-readable name for this resource.
	DisplayName *string `pulumi:"displayName"`
	// Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
	Etag *string `pulumi:"etag"`
	// Runtime host for the workstation.
	Host *Host `pulumi:"host"`
	// How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
	IdleTimeout *string `pulumi:"idleTimeout"`
	Location    *string `pulumi:"location"`
	// Full name of this resource.
	Name *string `pulumi:"name"`
	// Directories to persist across workstation sessions.
	PersistentDirectories []PersistentDirectory `pulumi:"persistentDirectories"`
	Project               *string               `pulumi:"project"`
	// How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this config should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
	RunningTimeout *string `pulumi:"runningTimeout"`
	// If set, validate the request and preview the review, but do not actually apply it.
	ValidateOnly         *bool  `pulumi:"validateOnly"`
	WorkstationClusterId string `pulumi:"workstationClusterId"`
	// Required. ID to use for the config.
	WorkstationConfigId string `pulumi:"workstationConfigId"`
}

// The set of arguments for constructing a WorkstationConfig resource.
type WorkstationConfigArgs struct {
	// Client-specified annotations.
	Annotations pulumi.StringMapInput
	// Container that will be run for each workstation using this configuration when that workstation is started.
	Container ContainerPtrInput
	// Human-readable name for this resource.
	DisplayName pulumi.StringPtrInput
	// Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
	Etag pulumi.StringPtrInput
	// Runtime host for the workstation.
	Host HostPtrInput
	// How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
	IdleTimeout pulumi.StringPtrInput
	Location    pulumi.StringPtrInput
	// Full name of this resource.
	Name pulumi.StringPtrInput
	// Directories to persist across workstation sessions.
	PersistentDirectories PersistentDirectoryArrayInput
	Project               pulumi.StringPtrInput
	// How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this config should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
	RunningTimeout pulumi.StringPtrInput
	// If set, validate the request and preview the review, but do not actually apply it.
	ValidateOnly         pulumi.BoolPtrInput
	WorkstationClusterId pulumi.StringInput
	// Required. ID to use for the config.
	WorkstationConfigId pulumi.StringInput
}

func (WorkstationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workstationConfigArgs)(nil)).Elem()
}

type WorkstationConfigInput interface {
	pulumi.Input

	ToWorkstationConfigOutput() WorkstationConfigOutput
	ToWorkstationConfigOutputWithContext(ctx context.Context) WorkstationConfigOutput
}

func (*WorkstationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfig)(nil)).Elem()
}

func (i *WorkstationConfig) ToWorkstationConfigOutput() WorkstationConfigOutput {
	return i.ToWorkstationConfigOutputWithContext(context.Background())
}

func (i *WorkstationConfig) ToWorkstationConfigOutputWithContext(ctx context.Context) WorkstationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkstationConfigOutput)
}

type WorkstationConfigOutput struct{ *pulumi.OutputState }

func (WorkstationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkstationConfig)(nil)).Elem()
}

func (o WorkstationConfigOutput) ToWorkstationConfigOutput() WorkstationConfigOutput {
	return o
}

func (o WorkstationConfigOutput) ToWorkstationConfigOutputWithContext(ctx context.Context) WorkstationConfigOutput {
	return o
}

// Client-specified annotations.
func (o WorkstationConfigOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// Status conditions describing the current resource state.
func (o WorkstationConfigOutput) Conditions() StatusResponseArrayOutput {
	return o.ApplyT(func(v *WorkstationConfig) StatusResponseArrayOutput { return v.Conditions }).(StatusResponseArrayOutput)
}

// Container that will be run for each workstation using this configuration when that workstation is started.
func (o WorkstationConfigOutput) Container() ContainerResponseOutput {
	return o.ApplyT(func(v *WorkstationConfig) ContainerResponseOutput { return v.Container }).(ContainerResponseOutput)
}

// Time when this resource was created.
func (o WorkstationConfigOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether this resource is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in the `conditions` field.
func (o WorkstationConfigOutput) Degraded() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.BoolOutput { return v.Degraded }).(pulumi.BoolOutput)
}

// Time when this resource was soft-deleted.
func (o WorkstationConfigOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// Human-readable name for this resource.
func (o WorkstationConfigOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
func (o WorkstationConfigOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Runtime host for the workstation.
func (o WorkstationConfigOutput) Host() HostResponseOutput {
	return o.ApplyT(func(v *WorkstationConfig) HostResponseOutput { return v.Host }).(HostResponseOutput)
}

// How long to wait before automatically stopping an instance that hasn't received any user traffic. A value of 0 indicates that this instance should never time out due to idleness. Defaults to 20 minutes.
func (o WorkstationConfigOutput) IdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.IdleTimeout }).(pulumi.StringOutput)
}

func (o WorkstationConfigOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Full name of this resource.
func (o WorkstationConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Directories to persist across workstation sessions.
func (o WorkstationConfigOutput) PersistentDirectories() PersistentDirectoryResponseArrayOutput {
	return o.ApplyT(func(v *WorkstationConfig) PersistentDirectoryResponseArrayOutput { return v.PersistentDirectories }).(PersistentDirectoryResponseArrayOutput)
}

func (o WorkstationConfigOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// Indicates whether this resource is currently being updated to match its intended state.
func (o WorkstationConfigOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.BoolOutput { return v.Reconciling }).(pulumi.BoolOutput)
}

// How long to wait before automatically stopping a workstation after it started. A value of 0 indicates that workstations using this config should never time out. Must be greater than 0 and less than 24 hours if encryption_key is set. Defaults to 12 hours.
func (o WorkstationConfigOutput) RunningTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.RunningTimeout }).(pulumi.StringOutput)
}

// A system-assigned unique identified for this resource.
func (o WorkstationConfigOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// Time when this resource was most recently updated.
func (o WorkstationConfigOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// If set, validate the request and preview the review, but do not actually apply it.
func (o WorkstationConfigOutput) ValidateOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.BoolPtrOutput { return v.ValidateOnly }).(pulumi.BoolPtrOutput)
}

func (o WorkstationConfigOutput) WorkstationClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.WorkstationClusterId }).(pulumi.StringOutput)
}

// Required. ID to use for the config.
func (o WorkstationConfigOutput) WorkstationConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkstationConfig) pulumi.StringOutput { return v.WorkstationConfigId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkstationConfigInput)(nil)).Elem(), &WorkstationConfig{})
	pulumi.RegisterOutputType(WorkstationConfigOutput{})
}
