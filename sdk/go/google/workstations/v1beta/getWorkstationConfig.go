// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the requested workstation configuration.
func LookupWorkstationConfig(ctx *pulumi.Context, args *LookupWorkstationConfigArgs, opts ...pulumi.InvokeOption) (*LookupWorkstationConfigResult, error) {
	var rv LookupWorkstationConfigResult
	err := ctx.Invoke("google-native:workstations/v1beta:getWorkstationConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupWorkstationConfigArgs struct {
	Location             string  `pulumi:"location"`
	Project              *string `pulumi:"project"`
	WorkstationClusterId string  `pulumi:"workstationClusterId"`
	WorkstationConfigId  string  `pulumi:"workstationConfigId"`
}

type LookupWorkstationConfigResult struct {
	// Client-specified annotations.
	Annotations map[string]string `pulumi:"annotations"`
	// Status conditions describing the current resource state.
	Conditions []StatusResponse `pulumi:"conditions"`
	// Container that runs upon startup for each workstation using this workstation configuration.
	Container ContainerResponse `pulumi:"container"`
	// Time when this resource was created.
	CreateTime string `pulumi:"createTime"`
	// Whether this resource is degraded, in which case it may require user action to restore full functionality. See also the `conditions` field.
	Degraded bool `pulumi:"degraded"`
	// Time when this resource was soft-deleted.
	DeleteTime string `pulumi:"deleteTime"`
	// Human-readable name for this resource.
	DisplayName string `pulumi:"displayName"`
	// Whether to enable Linux `auditd` logging on the workstation. When enabled, a service account must also be specified that has `logging.buckets.write` permission on the project. Operating system audit logging is distinct from [Cloud Audit Logs](https://cloud.google.com/workstations/docs/audit-logging).
	EnableAuditAgent bool `pulumi:"enableAuditAgent"`
	// Immutable. Encrypts resources of this workstation configuration using a customer-managed encryption key (CMEK). If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata. If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk might be lost. If the encryption key is revoked, the workstation session automatically stops within 7 hours. Immutable after the workstation configuration is created.
	EncryptionKey CustomerEncryptionKeyResponse `pulumi:"encryptionKey"`
	// Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
	Etag string `pulumi:"etag"`
	// Runtime host for the workstation.
	Host HostResponse `pulumi:"host"`
	// Number of seconds to wait before automatically stopping a workstation after it last received user traffic. A value of `0s` indicates that Cloud Workstations VMs created with this configuration should never time out due to idleness. Provide [duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration) terminated by `s` for seconds—for example, `7200s` (2 hours). The default is `1200s` (20 minutes).
	IdleTimeout string `pulumi:"idleTimeout"`
	// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
	Labels map[string]string `pulumi:"labels"`
	// Full name of this resource.
	Name string `pulumi:"name"`
	// Directories to persist across workstation sessions.
	PersistentDirectories []PersistentDirectoryResponse `pulumi:"persistentDirectories"`
	// Readiness checks to perform when starting a workstation using this workstation configuration. Mark a workstation as running only after all specified readiness checks return 200 status codes.
	ReadinessChecks []ReadinessCheckResponse `pulumi:"readinessChecks"`
	// Indicates whether this resource is currently being updated to match its intended state.
	Reconciling bool `pulumi:"reconciling"`
	// Number of seconds that a workstation can run until it is automatically shut down. We recommend that workstations be shut down daily to reduce costs and so that security updates can be applied upon restart. The `idleTimeout` and `runningTimeout` parameters are independent of each other. Note that the `runningTimeout` parameter shuts down VMs after the specified time, regardless of whether or not the VMs are idle. Provide duration terminated by `s` for seconds—for example, `54000s` (15 hours). Defaults to `43200s` (12 hours). A value of `0` indicates that workstations using this configuration should never time out. If `encryption_key` is set, it must be greater than `0` and less than `86400s` (24 hours). Warning: A value of `0s` indicates that Cloud Workstations VMs created with this configuration have no maximum running time. This is strongly discouraged because you incur costs and will not pick up security updates.
	RunningTimeout string `pulumi:"runningTimeout"`
	// A system-assigned unique identifier for this resource.
	Uid string `pulumi:"uid"`
	// Time when this resource was most recently updated.
	UpdateTime string `pulumi:"updateTime"`
}

func LookupWorkstationConfigOutput(ctx *pulumi.Context, args LookupWorkstationConfigOutputArgs, opts ...pulumi.InvokeOption) LookupWorkstationConfigResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupWorkstationConfigResult, error) {
			args := v.(LookupWorkstationConfigArgs)
			r, err := LookupWorkstationConfig(ctx, &args, opts...)
			var s LookupWorkstationConfigResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupWorkstationConfigResultOutput)
}

type LookupWorkstationConfigOutputArgs struct {
	Location             pulumi.StringInput    `pulumi:"location"`
	Project              pulumi.StringPtrInput `pulumi:"project"`
	WorkstationClusterId pulumi.StringInput    `pulumi:"workstationClusterId"`
	WorkstationConfigId  pulumi.StringInput    `pulumi:"workstationConfigId"`
}

func (LookupWorkstationConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkstationConfigArgs)(nil)).Elem()
}

type LookupWorkstationConfigResultOutput struct{ *pulumi.OutputState }

func (LookupWorkstationConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupWorkstationConfigResult)(nil)).Elem()
}

func (o LookupWorkstationConfigResultOutput) ToLookupWorkstationConfigResultOutput() LookupWorkstationConfigResultOutput {
	return o
}

func (o LookupWorkstationConfigResultOutput) ToLookupWorkstationConfigResultOutputWithContext(ctx context.Context) LookupWorkstationConfigResultOutput {
	return o
}

// Client-specified annotations.
func (o LookupWorkstationConfigResultOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Status conditions describing the current resource state.
func (o LookupWorkstationConfigResultOutput) Conditions() StatusResponseArrayOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) []StatusResponse { return v.Conditions }).(StatusResponseArrayOutput)
}

// Container that runs upon startup for each workstation using this workstation configuration.
func (o LookupWorkstationConfigResultOutput) Container() ContainerResponseOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) ContainerResponse { return v.Container }).(ContainerResponseOutput)
}

// Time when this resource was created.
func (o LookupWorkstationConfigResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether this resource is degraded, in which case it may require user action to restore full functionality. See also the `conditions` field.
func (o LookupWorkstationConfigResultOutput) Degraded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) bool { return v.Degraded }).(pulumi.BoolOutput)
}

// Time when this resource was soft-deleted.
func (o LookupWorkstationConfigResultOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.DeleteTime }).(pulumi.StringOutput)
}

// Human-readable name for this resource.
func (o LookupWorkstationConfigResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Whether to enable Linux `auditd` logging on the workstation. When enabled, a service account must also be specified that has `logging.buckets.write` permission on the project. Operating system audit logging is distinct from [Cloud Audit Logs](https://cloud.google.com/workstations/docs/audit-logging).
func (o LookupWorkstationConfigResultOutput) EnableAuditAgent() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) bool { return v.EnableAuditAgent }).(pulumi.BoolOutput)
}

// Immutable. Encrypts resources of this workstation configuration using a customer-managed encryption key (CMEK). If specified, the boot disk of the Compute Engine instance and the persistent disk are encrypted using this encryption key. If this field is not set, the disks are encrypted using a generated key. Customer-managed encryption keys do not protect disk metadata. If the customer-managed encryption key is rotated, when the workstation instance is stopped, the system attempts to recreate the persistent disk with the new version of the key. Be sure to keep older versions of the key until the persistent disk is recreated. Otherwise, data on the persistent disk might be lost. If the encryption key is revoked, the workstation session automatically stops within 7 hours. Immutable after the workstation configuration is created.
func (o LookupWorkstationConfigResultOutput) EncryptionKey() CustomerEncryptionKeyResponseOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) CustomerEncryptionKeyResponse { return v.EncryptionKey }).(CustomerEncryptionKeyResponseOutput)
}

// Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.
func (o LookupWorkstationConfigResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.Etag }).(pulumi.StringOutput)
}

// Runtime host for the workstation.
func (o LookupWorkstationConfigResultOutput) Host() HostResponseOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) HostResponse { return v.Host }).(HostResponseOutput)
}

// Number of seconds to wait before automatically stopping a workstation after it last received user traffic. A value of `0s` indicates that Cloud Workstations VMs created with this configuration should never time out due to idleness. Provide [duration](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#duration) terminated by `s` for seconds—for example, `7200s` (2 hours). The default is `1200s` (20 minutes).
func (o LookupWorkstationConfigResultOutput) IdleTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.IdleTimeout }).(pulumi.StringOutput)
}

// Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
func (o LookupWorkstationConfigResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Full name of this resource.
func (o LookupWorkstationConfigResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.Name }).(pulumi.StringOutput)
}

// Directories to persist across workstation sessions.
func (o LookupWorkstationConfigResultOutput) PersistentDirectories() PersistentDirectoryResponseArrayOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) []PersistentDirectoryResponse { return v.PersistentDirectories }).(PersistentDirectoryResponseArrayOutput)
}

// Readiness checks to perform when starting a workstation using this workstation configuration. Mark a workstation as running only after all specified readiness checks return 200 status codes.
func (o LookupWorkstationConfigResultOutput) ReadinessChecks() ReadinessCheckResponseArrayOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) []ReadinessCheckResponse { return v.ReadinessChecks }).(ReadinessCheckResponseArrayOutput)
}

// Indicates whether this resource is currently being updated to match its intended state.
func (o LookupWorkstationConfigResultOutput) Reconciling() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) bool { return v.Reconciling }).(pulumi.BoolOutput)
}

// Number of seconds that a workstation can run until it is automatically shut down. We recommend that workstations be shut down daily to reduce costs and so that security updates can be applied upon restart. The `idleTimeout` and `runningTimeout` parameters are independent of each other. Note that the `runningTimeout` parameter shuts down VMs after the specified time, regardless of whether or not the VMs are idle. Provide duration terminated by `s` for seconds—for example, `54000s` (15 hours). Defaults to `43200s` (12 hours). A value of `0` indicates that workstations using this configuration should never time out. If `encryption_key` is set, it must be greater than `0` and less than `86400s` (24 hours). Warning: A value of `0s` indicates that Cloud Workstations VMs created with this configuration have no maximum running time. This is strongly discouraged because you incur costs and will not pick up security updates.
func (o LookupWorkstationConfigResultOutput) RunningTimeout() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.RunningTimeout }).(pulumi.StringOutput)
}

// A system-assigned unique identifier for this resource.
func (o LookupWorkstationConfigResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.Uid }).(pulumi.StringOutput)
}

// Time when this resource was most recently updated.
func (o LookupWorkstationConfigResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupWorkstationConfigResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupWorkstationConfigResultOutput{})
}
