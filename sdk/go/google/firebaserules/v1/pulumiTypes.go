// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `File` containing source content.
type File struct {
	// Textual Content.
	Content string `pulumi:"content"`
	// Fingerprint (e.g. github sha) associated with the `File`.
	Fingerprint *string `pulumi:"fingerprint"`
	// File name.
	Name string `pulumi:"name"`
}

// FileInput is an input type that accepts FileArgs and FileOutput values.
// You can construct a concrete instance of `FileInput` via:
//
//          FileArgs{...}
type FileInput interface {
	pulumi.Input

	ToFileOutput() FileOutput
	ToFileOutputWithContext(context.Context) FileOutput
}

// `File` containing source content.
type FileArgs struct {
	// Textual Content.
	Content pulumi.StringInput `pulumi:"content"`
	// Fingerprint (e.g. github sha) associated with the `File`.
	Fingerprint pulumi.StringPtrInput `pulumi:"fingerprint"`
	// File name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*File)(nil)).Elem()
}

func (i FileArgs) ToFileOutput() FileOutput {
	return i.ToFileOutputWithContext(context.Background())
}

func (i FileArgs) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOutput)
}

// FileArrayInput is an input type that accepts FileArray and FileArrayOutput values.
// You can construct a concrete instance of `FileArrayInput` via:
//
//          FileArray{ FileArgs{...} }
type FileArrayInput interface {
	pulumi.Input

	ToFileArrayOutput() FileArrayOutput
	ToFileArrayOutputWithContext(context.Context) FileArrayOutput
}

type FileArray []FileInput

func (FileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]File)(nil)).Elem()
}

func (i FileArray) ToFileArrayOutput() FileArrayOutput {
	return i.ToFileArrayOutputWithContext(context.Background())
}

func (i FileArray) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileArrayOutput)
}

// `File` containing source content.
type FileOutput struct{ *pulumi.OutputState }

func (FileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*File)(nil)).Elem()
}

func (o FileOutput) ToFileOutput() FileOutput {
	return o
}

func (o FileOutput) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return o
}

// Textual Content.
func (o FileOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v File) string { return v.Content }).(pulumi.StringOutput)
}

// Fingerprint (e.g. github sha) associated with the `File`.
func (o FileOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v File) *string { return v.Fingerprint }).(pulumi.StringPtrOutput)
}

// File name.
func (o FileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v File) string { return v.Name }).(pulumi.StringOutput)
}

type FileArrayOutput struct{ *pulumi.OutputState }

func (FileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]File)(nil)).Elem()
}

func (o FileArrayOutput) ToFileArrayOutput() FileArrayOutput {
	return o
}

func (o FileArrayOutput) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return o
}

func (o FileArrayOutput) Index(i pulumi.IntInput) FileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) File {
		return vs[0].([]File)[vs[1].(int)]
	}).(FileOutput)
}

// `File` containing source content.
type FileResponse struct {
	// Textual Content.
	Content string `pulumi:"content"`
	// Fingerprint (e.g. github sha) associated with the `File`.
	Fingerprint string `pulumi:"fingerprint"`
	// File name.
	Name string `pulumi:"name"`
}

// `File` containing source content.
type FileResponseOutput struct{ *pulumi.OutputState }

func (FileResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileResponse)(nil)).Elem()
}

func (o FileResponseOutput) ToFileResponseOutput() FileResponseOutput {
	return o
}

func (o FileResponseOutput) ToFileResponseOutputWithContext(ctx context.Context) FileResponseOutput {
	return o
}

// Textual Content.
func (o FileResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v FileResponse) string { return v.Content }).(pulumi.StringOutput)
}

// Fingerprint (e.g. github sha) associated with the `File`.
func (o FileResponseOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v FileResponse) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// File name.
func (o FileResponseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v FileResponse) string { return v.Name }).(pulumi.StringOutput)
}

type FileResponseArrayOutput struct{ *pulumi.OutputState }

func (FileResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FileResponse)(nil)).Elem()
}

func (o FileResponseArrayOutput) ToFileResponseArrayOutput() FileResponseArrayOutput {
	return o
}

func (o FileResponseArrayOutput) ToFileResponseArrayOutputWithContext(ctx context.Context) FileResponseArrayOutput {
	return o
}

func (o FileResponseArrayOutput) Index(i pulumi.IntInput) FileResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FileResponse {
		return vs[0].([]FileResponse)[vs[1].(int)]
	}).(FileResponseOutput)
}

// Metadata for a Ruleset.
type MetadataResponse struct {
	// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
	Services []string `pulumi:"services"`
}

// Metadata for a Ruleset.
type MetadataResponseOutput struct{ *pulumi.OutputState }

func (MetadataResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MetadataResponse)(nil)).Elem()
}

func (o MetadataResponseOutput) ToMetadataResponseOutput() MetadataResponseOutput {
	return o
}

func (o MetadataResponseOutput) ToMetadataResponseOutputWithContext(ctx context.Context) MetadataResponseOutput {
	return o
}

// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
func (o MetadataResponseOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MetadataResponse) []string { return v.Services }).(pulumi.StringArrayOutput)
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type Source struct {
	// `File` set constituting the `Source` bundle.
	Files []File `pulumi:"files"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type SourceArgs struct {
	// `File` set constituting the `Source` bundle.
	Files FileArrayInput `pulumi:"files"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

// `File` set constituting the `Source` bundle.
func (o SourceOutput) Files() FileArrayOutput {
	return o.ApplyT(func(v Source) []File { return v.Files }).(FileArrayOutput)
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type SourceResponse struct {
	// `File` set constituting the `Source` bundle.
	Files []FileResponse `pulumi:"files"`
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type SourceResponseOutput struct{ *pulumi.OutputState }

func (SourceResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SourceResponse)(nil)).Elem()
}

func (o SourceResponseOutput) ToSourceResponseOutput() SourceResponseOutput {
	return o
}

func (o SourceResponseOutput) ToSourceResponseOutputWithContext(ctx context.Context) SourceResponseOutput {
	return o
}

// `File` set constituting the `Source` bundle.
func (o SourceResponseOutput) Files() FileResponseArrayOutput {
	return o.ApplyT(func(v SourceResponse) []FileResponse { return v.Files }).(FileResponseArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileInput)(nil)).Elem(), FileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileArrayInput)(nil)).Elem(), FileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SourceInput)(nil)).Elem(), SourceArgs{})
	pulumi.RegisterOutputType(FileOutput{})
	pulumi.RegisterOutputType(FileArrayOutput{})
	pulumi.RegisterOutputType(FileResponseOutput{})
	pulumi.RegisterOutputType(FileResponseArrayOutput{})
	pulumi.RegisterOutputType(MetadataResponseOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourceResponseOutput{})
}
