// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `File` containing source content.
type File struct {
	// Textual Content.
	Content *string `pulumi:"content"`
	// Fingerprint (e.g. github sha) associated with the `File`.
	Fingerprint *string `pulumi:"fingerprint"`
	// File name.
	Name *string `pulumi:"name"`
}

// FileInput is an input type that accepts FileArgs and FileOutput values.
// You can construct a concrete instance of `FileInput` via:
//
//          FileArgs{...}
type FileInput interface {
	pulumi.Input

	ToFileOutput() FileOutput
	ToFileOutputWithContext(context.Context) FileOutput
}

// `File` containing source content.
type FileArgs struct {
	// Textual Content.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Fingerprint (e.g. github sha) associated with the `File`.
	Fingerprint pulumi.StringPtrInput `pulumi:"fingerprint"`
	// File name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*File)(nil)).Elem()
}

func (i FileArgs) ToFileOutput() FileOutput {
	return i.ToFileOutputWithContext(context.Background())
}

func (i FileArgs) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOutput)
}

// FileArrayInput is an input type that accepts FileArray and FileArrayOutput values.
// You can construct a concrete instance of `FileArrayInput` via:
//
//          FileArray{ FileArgs{...} }
type FileArrayInput interface {
	pulumi.Input

	ToFileArrayOutput() FileArrayOutput
	ToFileArrayOutputWithContext(context.Context) FileArrayOutput
}

type FileArray []FileInput

func (FileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]File)(nil)).Elem()
}

func (i FileArray) ToFileArrayOutput() FileArrayOutput {
	return i.ToFileArrayOutputWithContext(context.Background())
}

func (i FileArray) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileArrayOutput)
}

// `File` containing source content.
type FileOutput struct{ *pulumi.OutputState }

func (FileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*File)(nil)).Elem()
}

func (o FileOutput) ToFileOutput() FileOutput {
	return o
}

func (o FileOutput) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return o
}

// Textual Content.
func (o FileOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v File) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Fingerprint (e.g. github sha) associated with the `File`.
func (o FileOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v File) *string { return v.Fingerprint }).(pulumi.StringPtrOutput)
}

// File name.
func (o FileOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v File) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type FileArrayOutput struct{ *pulumi.OutputState }

func (FileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]File)(nil)).Elem()
}

func (o FileArrayOutput) ToFileArrayOutput() FileArrayOutput {
	return o
}

func (o FileArrayOutput) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return o
}

func (o FileArrayOutput) Index(i pulumi.IntInput) FileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) File {
		return vs[0].([]File)[vs[1].(int)]
	}).(FileOutput)
}

// Metadata for a Ruleset.
type Metadata struct {
	// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
	Services []string `pulumi:"services"`
}

// MetadataInput is an input type that accepts MetadataArgs and MetadataOutput values.
// You can construct a concrete instance of `MetadataInput` via:
//
//          MetadataArgs{...}
type MetadataInput interface {
	pulumi.Input

	ToMetadataOutput() MetadataOutput
	ToMetadataOutputWithContext(context.Context) MetadataOutput
}

// Metadata for a Ruleset.
type MetadataArgs struct {
	// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
	Services pulumi.StringArrayInput `pulumi:"services"`
}

func (MetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (i MetadataArgs) ToMetadataOutput() MetadataOutput {
	return i.ToMetadataOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput)
}

func (i MetadataArgs) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i MetadataArgs) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataOutput).ToMetadataPtrOutputWithContext(ctx)
}

// MetadataPtrInput is an input type that accepts MetadataArgs, MetadataPtr and MetadataPtrOutput values.
// You can construct a concrete instance of `MetadataPtrInput` via:
//
//          MetadataArgs{...}
//
//  or:
//
//          nil
type MetadataPtrInput interface {
	pulumi.Input

	ToMetadataPtrOutput() MetadataPtrOutput
	ToMetadataPtrOutputWithContext(context.Context) MetadataPtrOutput
}

type metadataPtrType MetadataArgs

func MetadataPtr(v *MetadataArgs) MetadataPtrInput {
	return (*metadataPtrType)(v)
}

func (*metadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (i *metadataPtrType) ToMetadataPtrOutput() MetadataPtrOutput {
	return i.ToMetadataPtrOutputWithContext(context.Background())
}

func (i *metadataPtrType) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MetadataPtrOutput)
}

// Metadata for a Ruleset.
type MetadataOutput struct{ *pulumi.OutputState }

func (MetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Metadata)(nil)).Elem()
}

func (o MetadataOutput) ToMetadataOutput() MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataOutputWithContext(ctx context.Context) MetadataOutput {
	return o
}

func (o MetadataOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o.ToMetadataPtrOutputWithContext(context.Background())
}

func (o MetadataOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o.ApplyT(func(v Metadata) *Metadata {
		return &v
	}).(MetadataPtrOutput)
}

// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
func (o MetadataOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Metadata) []string { return v.Services }).(pulumi.StringArrayOutput)
}

type MetadataPtrOutput struct{ *pulumi.OutputState }

func (MetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Metadata)(nil)).Elem()
}

func (o MetadataPtrOutput) ToMetadataPtrOutput() MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) ToMetadataPtrOutputWithContext(ctx context.Context) MetadataPtrOutput {
	return o
}

func (o MetadataPtrOutput) Elem() MetadataOutput {
	return o.ApplyT(func(v *Metadata) Metadata { return *v }).(MetadataOutput)
}

// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
func (o MetadataPtrOutput) Services() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Metadata) []string {
		if v == nil {
			return nil
		}
		return v.Services
	}).(pulumi.StringArrayOutput)
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type Source struct {
	// `File` set constituting the `Source` bundle.
	Files []File `pulumi:"files"`
}

// SourceInput is an input type that accepts SourceArgs and SourceOutput values.
// You can construct a concrete instance of `SourceInput` via:
//
//          SourceArgs{...}
type SourceInput interface {
	pulumi.Input

	ToSourceOutput() SourceOutput
	ToSourceOutputWithContext(context.Context) SourceOutput
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type SourceArgs struct {
	// `File` set constituting the `Source` bundle.
	Files FileArrayInput `pulumi:"files"`
}

func (SourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (i SourceArgs) ToSourceOutput() SourceOutput {
	return i.ToSourceOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput)
}

func (i SourceArgs) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i SourceArgs) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourceOutput).ToSourcePtrOutputWithContext(ctx)
}

// SourcePtrInput is an input type that accepts SourceArgs, SourcePtr and SourcePtrOutput values.
// You can construct a concrete instance of `SourcePtrInput` via:
//
//          SourceArgs{...}
//
//  or:
//
//          nil
type SourcePtrInput interface {
	pulumi.Input

	ToSourcePtrOutput() SourcePtrOutput
	ToSourcePtrOutputWithContext(context.Context) SourcePtrOutput
}

type sourcePtrType SourceArgs

func SourcePtr(v *SourceArgs) SourcePtrInput {
	return (*sourcePtrType)(v)
}

func (*sourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (i *sourcePtrType) ToSourcePtrOutput() SourcePtrOutput {
	return i.ToSourcePtrOutputWithContext(context.Background())
}

func (i *sourcePtrType) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SourcePtrOutput)
}

// `Source` is one or more `File` messages comprising a logical set of rules.
type SourceOutput struct{ *pulumi.OutputState }

func (SourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Source)(nil)).Elem()
}

func (o SourceOutput) ToSourceOutput() SourceOutput {
	return o
}

func (o SourceOutput) ToSourceOutputWithContext(ctx context.Context) SourceOutput {
	return o
}

func (o SourceOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o.ToSourcePtrOutputWithContext(context.Background())
}

func (o SourceOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o.ApplyT(func(v Source) *Source {
		return &v
	}).(SourcePtrOutput)
}

// `File` set constituting the `Source` bundle.
func (o SourceOutput) Files() FileArrayOutput {
	return o.ApplyT(func(v Source) []File { return v.Files }).(FileArrayOutput)
}

type SourcePtrOutput struct{ *pulumi.OutputState }

func (SourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Source)(nil)).Elem()
}

func (o SourcePtrOutput) ToSourcePtrOutput() SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) ToSourcePtrOutputWithContext(ctx context.Context) SourcePtrOutput {
	return o
}

func (o SourcePtrOutput) Elem() SourceOutput {
	return o.ApplyT(func(v *Source) Source { return *v }).(SourceOutput)
}

// `File` set constituting the `Source` bundle.
func (o SourcePtrOutput) Files() FileArrayOutput {
	return o.ApplyT(func(v *Source) []File {
		if v == nil {
			return nil
		}
		return v.Files
	}).(FileArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(FileOutput{})
	pulumi.RegisterOutputType(FileArrayOutput{})
	pulumi.RegisterOutputType(MetadataOutput{})
	pulumi.RegisterOutputType(MetadataPtrOutput{})
	pulumi.RegisterOutputType(SourceOutput{})
	pulumi.RegisterOutputType(SourcePtrOutput{})
}
