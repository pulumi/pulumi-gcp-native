// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get a `Ruleset` by name including the full `Source` contents.
func LookupRuleset(ctx *pulumi.Context, args *LookupRulesetArgs, opts ...pulumi.InvokeOption) (*LookupRulesetResult, error) {
	var rv LookupRulesetResult
	err := ctx.Invoke("google-native:firebaserules/v1:getRuleset", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupRulesetArgs struct {
	Project   *string `pulumi:"project"`
	RulesetId string  `pulumi:"rulesetId"`
}

type LookupRulesetResult struct {
	// Time the `Ruleset` was created.
	CreateTime string `pulumi:"createTime"`
	// The metadata for this ruleset.
	Metadata MetadataResponse `pulumi:"metadata"`
	// Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`
	Name string `pulumi:"name"`
	// `Source` for the `Ruleset`.
	Source SourceResponse `pulumi:"source"`
}

func LookupRulesetOutput(ctx *pulumi.Context, args LookupRulesetOutputArgs, opts ...pulumi.InvokeOption) LookupRulesetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRulesetResult, error) {
			args := v.(LookupRulesetArgs)
			r, err := LookupRuleset(ctx, &args, opts...)
			var s LookupRulesetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRulesetResultOutput)
}

type LookupRulesetOutputArgs struct {
	Project   pulumi.StringPtrInput `pulumi:"project"`
	RulesetId pulumi.StringInput    `pulumi:"rulesetId"`
}

func (LookupRulesetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRulesetArgs)(nil)).Elem()
}

type LookupRulesetResultOutput struct{ *pulumi.OutputState }

func (LookupRulesetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRulesetResult)(nil)).Elem()
}

func (o LookupRulesetResultOutput) ToLookupRulesetResultOutput() LookupRulesetResultOutput {
	return o
}

func (o LookupRulesetResultOutput) ToLookupRulesetResultOutputWithContext(ctx context.Context) LookupRulesetResultOutput {
	return o
}

// Time the `Ruleset` was created.
func (o LookupRulesetResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRulesetResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The metadata for this ruleset.
func (o LookupRulesetResultOutput) Metadata() MetadataResponseOutput {
	return o.ApplyT(func(v LookupRulesetResult) MetadataResponse { return v.Metadata }).(MetadataResponseOutput)
}

// Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`
func (o LookupRulesetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRulesetResult) string { return v.Name }).(pulumi.StringOutput)
}

// `Source` for the `Ruleset`.
func (o LookupRulesetResultOutput) Source() SourceResponseOutput {
	return o.ApplyT(func(v LookupRulesetResult) SourceResponse { return v.Source }).(SourceResponseOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRulesetResultOutput{})
}
