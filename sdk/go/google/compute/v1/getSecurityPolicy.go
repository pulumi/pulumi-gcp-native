// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// List all of the ordered rules present in a single specified policy.
func LookupSecurityPolicy(ctx *pulumi.Context, args *LookupSecurityPolicyArgs, opts ...pulumi.InvokeOption) (*LookupSecurityPolicyResult, error) {
	var rv LookupSecurityPolicyResult
	err := ctx.Invoke("google-native:compute/v1:getSecurityPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupSecurityPolicyArgs struct {
	Project        *string `pulumi:"project"`
	SecurityPolicy string  `pulumi:"securityPolicy"`
}

type LookupSecurityPolicyResult struct {
	AdaptiveProtectionConfig SecurityPolicyAdaptiveProtectionConfigResponse `pulumi:"adaptiveProtectionConfig"`
	AdvancedOptionsConfig    SecurityPolicyAdvancedOptionsConfigResponse    `pulumi:"advancedOptionsConfig"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp    string                                     `pulumi:"creationTimestamp"`
	DdosProtectionConfig SecurityPolicyDdosProtectionConfigResponse `pulumi:"ddosProtectionConfig"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description string `pulumi:"description"`
	// Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy.
	Fingerprint string `pulumi:"fingerprint"`
	// [Output only] Type of the resource. Always compute#securityPolicyfor security policies
	Kind string `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name                   string                                       `pulumi:"name"`
	RecaptchaOptionsConfig SecurityPolicyRecaptchaOptionsConfigResponse `pulumi:"recaptchaOptionsConfig"`
	// URL of the region where the regional security policy resides. This field is not applicable to global security policies.
	Region string `pulumi:"region"`
	// A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match "*"). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.
	Rules []SecurityPolicyRuleResponse `pulumi:"rules"`
	// Server-defined URL for the resource.
	SelfLink string `pulumi:"selfLink"`
	// The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. This field can be set only at resource creation time.
	Type string `pulumi:"type"`
}

func LookupSecurityPolicyOutput(ctx *pulumi.Context, args LookupSecurityPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupSecurityPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSecurityPolicyResult, error) {
			args := v.(LookupSecurityPolicyArgs)
			r, err := LookupSecurityPolicy(ctx, &args, opts...)
			var s LookupSecurityPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSecurityPolicyResultOutput)
}

type LookupSecurityPolicyOutputArgs struct {
	Project        pulumi.StringPtrInput `pulumi:"project"`
	SecurityPolicy pulumi.StringInput    `pulumi:"securityPolicy"`
}

func (LookupSecurityPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityPolicyArgs)(nil)).Elem()
}

type LookupSecurityPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupSecurityPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSecurityPolicyResult)(nil)).Elem()
}

func (o LookupSecurityPolicyResultOutput) ToLookupSecurityPolicyResultOutput() LookupSecurityPolicyResultOutput {
	return o
}

func (o LookupSecurityPolicyResultOutput) ToLookupSecurityPolicyResultOutputWithContext(ctx context.Context) LookupSecurityPolicyResultOutput {
	return o
}

func (o LookupSecurityPolicyResultOutput) AdaptiveProtectionConfig() SecurityPolicyAdaptiveProtectionConfigResponseOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) SecurityPolicyAdaptiveProtectionConfigResponse {
		return v.AdaptiveProtectionConfig
	}).(SecurityPolicyAdaptiveProtectionConfigResponseOutput)
}

func (o LookupSecurityPolicyResultOutput) AdvancedOptionsConfig() SecurityPolicyAdvancedOptionsConfigResponseOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) SecurityPolicyAdvancedOptionsConfigResponse {
		return v.AdvancedOptionsConfig
	}).(SecurityPolicyAdvancedOptionsConfigResponseOutput)
}

// Creation timestamp in RFC3339 text format.
func (o LookupSecurityPolicyResultOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.CreationTimestamp }).(pulumi.StringOutput)
}

func (o LookupSecurityPolicyResultOutput) DdosProtectionConfig() SecurityPolicyDdosProtectionConfigResponseOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) SecurityPolicyDdosProtectionConfigResponse {
		return v.DdosProtectionConfig
	}).(SecurityPolicyDdosProtectionConfigResponseOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o LookupSecurityPolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy.
func (o LookupSecurityPolicyResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// [Output only] Type of the resource. Always compute#securityPolicyfor security policies
func (o LookupSecurityPolicyResultOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.Kind }).(pulumi.StringOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o LookupSecurityPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSecurityPolicyResultOutput) RecaptchaOptionsConfig() SecurityPolicyRecaptchaOptionsConfigResponseOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) SecurityPolicyRecaptchaOptionsConfigResponse {
		return v.RecaptchaOptionsConfig
	}).(SecurityPolicyRecaptchaOptionsConfigResponseOutput)
}

// URL of the region where the regional security policy resides. This field is not applicable to global security policies.
func (o LookupSecurityPolicyResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.Region }).(pulumi.StringOutput)
}

// A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match "*"). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.
func (o LookupSecurityPolicyResultOutput) Rules() SecurityPolicyRuleResponseArrayOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) []SecurityPolicyRuleResponse { return v.Rules }).(SecurityPolicyRuleResponseArrayOutput)
}

// Server-defined URL for the resource.
func (o LookupSecurityPolicyResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

// The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. - CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. This field can be set only at resource creation time.
func (o LookupSecurityPolicyResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSecurityPolicyResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSecurityPolicyResultOutput{})
}
