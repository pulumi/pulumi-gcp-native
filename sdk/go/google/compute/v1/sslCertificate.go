// Code generated by the Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a SslCertificate resource in the specified project using the data included in the request.
type SslCertificate struct {
	pulumi.CustomResourceState

	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringOutput `pulumi:"certificate"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// Expire time of the certificate. RFC3339
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// Type of the resource. Always compute#sslCertificate for SSL certificates.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Configuration and status of a managed SSL certificate.
	Managed SslCertificateManagedSslCertificateResponseOutput `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
	Region pulumi.StringOutput `pulumi:"region"`
	// [Output only] Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged SslCertificateSelfManagedSslCertificateResponseOutput `pulumi:"selfManaged"`
	// Domains associated with the certificate via Subject Alternative Name.
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSslCertificate registers a new resource with the given unique name, arguments, and options.
func NewSslCertificate(ctx *pulumi.Context,
	name string, args *SslCertificateArgs, opts ...pulumi.ResourceOption) (*SslCertificate, error) {
	if args == nil {
		args = &SslCertificateArgs{}
	}

	var resource SslCertificate
	err := ctx.RegisterResource("google-native:compute/v1:SslCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslCertificate gets an existing SslCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslCertificateState, opts ...pulumi.ResourceOption) (*SslCertificate, error) {
	var resource SslCertificate
	err := ctx.ReadResource("google-native:compute/v1:SslCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslCertificate resources.
type sslCertificateState struct {
}

type SslCertificateState struct {
}

func (SslCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertificateState)(nil)).Elem()
}

type sslCertificateArgs struct {
	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate *string `pulumi:"certificate"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// Configuration and status of a managed SSL certificate.
	Managed *SslCertificateManagedSslCertificate `pulumi:"managed"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey *string `pulumi:"privateKey"`
	Project    *string `pulumi:"project"`
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId *string `pulumi:"requestId"`
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged *SslCertificateSelfManagedSslCertificate `pulumi:"selfManaged"`
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type *SslCertificateType `pulumi:"type"`
}

// The set of arguments for constructing a SslCertificate resource.
type SslCertificateArgs struct {
	// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
	Certificate pulumi.StringPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// Configuration and status of a managed SSL certificate.
	Managed SslCertificateManagedSslCertificatePtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
	PrivateKey pulumi.StringPtrInput
	Project    pulumi.StringPtrInput
	// An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
	RequestId pulumi.StringPtrInput
	// Configuration and status of a self-managed SSL certificate.
	SelfManaged SslCertificateSelfManagedSslCertificatePtrInput
	// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
	Type SslCertificateTypePtrInput
}

func (SslCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslCertificateArgs)(nil)).Elem()
}

type SslCertificateInput interface {
	pulumi.Input

	ToSslCertificateOutput() SslCertificateOutput
	ToSslCertificateOutputWithContext(ctx context.Context) SslCertificateOutput
}

func (*SslCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificate)(nil)).Elem()
}

func (i *SslCertificate) ToSslCertificateOutput() SslCertificateOutput {
	return i.ToSslCertificateOutputWithContext(context.Background())
}

func (i *SslCertificate) ToSslCertificateOutputWithContext(ctx context.Context) SslCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslCertificateOutput)
}

type SslCertificateOutput struct{ *pulumi.OutputState }

func (SslCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslCertificate)(nil)).Elem()
}

func (o SslCertificateOutput) ToSslCertificateOutput() SslCertificateOutput {
	return o
}

func (o SslCertificateOutput) ToSslCertificateOutputWithContext(ctx context.Context) SslCertificateOutput {
	return o
}

// A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
func (o SslCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

// Creation timestamp in RFC3339 text format.
func (o SslCertificateOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

// An optional description of this resource. Provide this property when you create the resource.
func (o SslCertificateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Expire time of the certificate. RFC3339
func (o SslCertificateOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// Type of the resource. Always compute#sslCertificate for SSL certificates.
func (o SslCertificateOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Configuration and status of a managed SSL certificate.
func (o SslCertificateOutput) Managed() SslCertificateManagedSslCertificateResponseOutput {
	return o.ApplyT(func(v *SslCertificate) SslCertificateManagedSslCertificateResponseOutput { return v.Managed }).(SslCertificateManagedSslCertificateResponseOutput)
}

// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
func (o SslCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
func (o SslCertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
func (o SslCertificateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// [Output only] Server-defined URL for the resource.
func (o SslCertificateOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Configuration and status of a self-managed SSL certificate.
func (o SslCertificateOutput) SelfManaged() SslCertificateSelfManagedSslCertificateResponseOutput {
	return o.ApplyT(func(v *SslCertificate) SslCertificateSelfManagedSslCertificateResponseOutput { return v.SelfManaged }).(SslCertificateSelfManagedSslCertificateResponseOutput)
}

// Domains associated with the certificate via Subject Alternative Name.
func (o SslCertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

// (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key are used.
func (o SslCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SslCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SslCertificateInput)(nil)).Elem(), &SslCertificate{})
	pulumi.RegisterOutputType(SslCertificateOutput{})
}
