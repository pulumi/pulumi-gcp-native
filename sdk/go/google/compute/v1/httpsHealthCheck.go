// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a HttpsHealthCheck resource in the specified project using the data included in the request.
type HttpsHealthCheck struct {
	pulumi.CustomResourceState

	// How often (in seconds) to send a health check. The default value is 5 seconds.
	CheckIntervalSec pulumi.IntOutput `pulumi:"checkIntervalSec"`
	// Creation timestamp in RFC3339 text format.
	CreationTimestamp pulumi.StringOutput `pulumi:"creationTimestamp"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
	HealthyThreshold pulumi.IntOutput `pulumi:"healthyThreshold"`
	// The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
	Host pulumi.StringOutput `pulumi:"host"`
	// Type of the resource.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringOutput `pulumi:"name"`
	// The TCP port number for the HTTPS health check request. The default value is 443.
	Port pulumi.IntOutput `pulumi:"port"`
	// The request path of the HTTPS health check request. The default value is "/".
	RequestPath pulumi.StringOutput `pulumi:"requestPath"`
	// Server-defined URL for the resource.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
	TimeoutSec pulumi.IntOutput `pulumi:"timeoutSec"`
	// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
	UnhealthyThreshold pulumi.IntOutput `pulumi:"unhealthyThreshold"`
}

// NewHttpsHealthCheck registers a new resource with the given unique name, arguments, and options.
func NewHttpsHealthCheck(ctx *pulumi.Context,
	name string, args *HttpsHealthCheckArgs, opts ...pulumi.ResourceOption) (*HttpsHealthCheck, error) {
	if args == nil {
		args = &HttpsHealthCheckArgs{}
	}

	var resource HttpsHealthCheck
	err := ctx.RegisterResource("google-native:compute/v1:HttpsHealthCheck", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpsHealthCheck gets an existing HttpsHealthCheck resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpsHealthCheck(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpsHealthCheckState, opts ...pulumi.ResourceOption) (*HttpsHealthCheck, error) {
	var resource HttpsHealthCheck
	err := ctx.ReadResource("google-native:compute/v1:HttpsHealthCheck", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpsHealthCheck resources.
type httpsHealthCheckState struct {
}

type HttpsHealthCheckState struct {
}

func (HttpsHealthCheckState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpsHealthCheckState)(nil)).Elem()
}

type httpsHealthCheckArgs struct {
	// How often (in seconds) to send a health check. The default value is 5 seconds.
	CheckIntervalSec *int `pulumi:"checkIntervalSec"`
	// An optional description of this resource. Provide this property when you create the resource.
	Description *string `pulumi:"description"`
	// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
	Host *string `pulumi:"host"`
	// Type of the resource.
	Kind *string `pulumi:"kind"`
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name *string `pulumi:"name"`
	// The TCP port number for the HTTPS health check request. The default value is 443.
	Port      *int    `pulumi:"port"`
	Project   *string `pulumi:"project"`
	RequestId *string `pulumi:"requestId"`
	// The request path of the HTTPS health check request. The default value is "/".
	RequestPath *string `pulumi:"requestPath"`
	// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
	TimeoutSec *int `pulumi:"timeoutSec"`
	// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
}

// The set of arguments for constructing a HttpsHealthCheck resource.
type HttpsHealthCheckArgs struct {
	// How often (in seconds) to send a health check. The default value is 5 seconds.
	CheckIntervalSec pulumi.IntPtrInput
	// An optional description of this resource. Provide this property when you create the resource.
	Description pulumi.StringPtrInput
	// A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
	HealthyThreshold pulumi.IntPtrInput
	// The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
	Host pulumi.StringPtrInput
	// Type of the resource.
	Kind pulumi.StringPtrInput
	// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	Name pulumi.StringPtrInput
	// The TCP port number for the HTTPS health check request. The default value is 443.
	Port      pulumi.IntPtrInput
	Project   pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// The request path of the HTTPS health check request. The default value is "/".
	RequestPath pulumi.StringPtrInput
	// How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
	TimeoutSec pulumi.IntPtrInput
	// A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
	UnhealthyThreshold pulumi.IntPtrInput
}

func (HttpsHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpsHealthCheckArgs)(nil)).Elem()
}

type HttpsHealthCheckInput interface {
	pulumi.Input

	ToHttpsHealthCheckOutput() HttpsHealthCheckOutput
	ToHttpsHealthCheckOutputWithContext(ctx context.Context) HttpsHealthCheckOutput
}

func (*HttpsHealthCheck) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsHealthCheck)(nil)).Elem()
}

func (i *HttpsHealthCheck) ToHttpsHealthCheckOutput() HttpsHealthCheckOutput {
	return i.ToHttpsHealthCheckOutputWithContext(context.Background())
}

func (i *HttpsHealthCheck) ToHttpsHealthCheckOutputWithContext(ctx context.Context) HttpsHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpsHealthCheckOutput)
}

type HttpsHealthCheckOutput struct{ *pulumi.OutputState }

func (HttpsHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpsHealthCheck)(nil)).Elem()
}

func (o HttpsHealthCheckOutput) ToHttpsHealthCheckOutput() HttpsHealthCheckOutput {
	return o
}

func (o HttpsHealthCheckOutput) ToHttpsHealthCheckOutputWithContext(ctx context.Context) HttpsHealthCheckOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpsHealthCheckInput)(nil)).Elem(), &HttpsHealthCheck{})
	pulumi.RegisterOutputType(HttpsHealthCheckOutput{})
}
